record_number,buggy_code,fixed_code,code_similarity
44001,"public boolean luaStackCall(LuaState vm){
switch (id) {
case INSTALL:
    install(vm._G);
  break;
case ABS:
setResult(vm,abs(vm.topointer(2)));
break;
case COS:
setResult(vm,new LDouble(Math.cos(vm.tonumber(2))));
break;
case MAX:
setResult(vm,max(vm.topointer(2),vm.topointer(3)));
break;
case MIN:
setResult(vm,min(vm.topointer(2),vm.topointer(3)));
break;
case MODF:
modf(vm);
break;
case SIN:
setResult(vm,new LDouble(Math.sin(vm.tonumber(2))));
break;
case SQRT:
setResult(vm,new LDouble(Math.sqrt(vm.tonumber(2))));
break;
case CEIL:
setResult(vm,LInteger.valueOf((int)Math.ceil(vm.tonumber(2))));
break;
case FLOOR:
setResult(vm,LInteger.valueOf((int)Math.floor(vm.tonumber(2))));
break;
default :
throw new RuntimeException(""String_Node_Str"" + id);
}
return false;
}","public boolean luaStackCall(LuaState vm){
switch (id) {
case INSTALL:
    install(vm._G);
  break;
case ABS:
setResult(vm,abs(vm.topointer(2)));
break;
case COS:
setResult(vm,new LDouble(Math.cos(vm.tonumber(2))));
break;
case MAX:
setResult(vm,max(vm.topointer(2),vm.topointer(3)));
break;
case MIN:
setResult(vm,min(vm.topointer(2),vm.topointer(3)));
break;
case MODF:
modf(vm);
break;
case SIN:
setResult(vm,new LDouble(Math.sin(vm.tonumber(2))));
break;
case SQRT:
setResult(vm,new LDouble(Math.sqrt(vm.tonumber(2))));
break;
case CEIL:
setResult(vm,LInteger.valueOf((int)Math.ceil(vm.tonumber(2))));
break;
case FLOOR:
setResult(vm,LInteger.valueOf((int)Math.floor(vm.tonumber(2))));
break;
default :
LuaState.vmerror(""String_Node_Str"");
}
return false;
}",0.9693811074918568
44002,"public boolean luaStackCall(LuaState vm){
switch (id) {
case INSTALL:
    install(vm._G);
  break;
case CONCAT:
{
  int n=vm.gettop();
  LTable table=vm.totable(2);
  LString sep=(n >= 3 ? vm.tolstring(3) : null);
  int i=vm.tointeger(4);
  int j=vm.tointeger(5);
  int len=table.luaLength();
  if (i == 0)   i=1;
  if (j == 0)   j=len;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  try {
    for (int k=i; k <= j; k++) {
      LValue v=table.get(k);
      v.luaAsString().write(baos);
      if (k < j && sep != null)       sep.write(baos);
    }
    vm.resettop();
    vm.pushlstring(baos.toByteArray());
  }
 catch (  IOException e) {
    vm.error(e.getMessage());
  }
  break;
}
case INSERT:
{
int n=vm.gettop();
LTable table=vm.totable(2);
int pos=(n >= 4 ? vm.tointeger(3) : 0);
LValue value=vm.topointer(-1);
table.luaInsertPos(pos,value);
break;
}
case MAXN:
{
LTable table=vm.totable(2);
vm.resettop();
vm.pushinteger(table.luaMaxN());
break;
}
case REMOVE:
{
int n=vm.gettop();
LTable table=vm.totable(2);
int pos=(n >= 3 ? vm.tointeger(3) : 0);
vm.resettop();
vm.pushlvalue(table.luaRemovePos(pos));
break;
}
case SORT:
{
LTable table=vm.totable(2);
LValue compare=vm.topointer(3);
table.luaSort(vm,compare);
vm.resettop();
break;
}
default :
throw new RuntimeException(""String_Node_Str"");
}
return false;
}","public boolean luaStackCall(LuaState vm){
switch (id) {
case INSTALL:
    install(vm._G);
  break;
case CONCAT:
{
  int n=vm.gettop();
  LTable table=vm.totable(2);
  LString sep=(n >= 3 ? vm.tolstring(3) : null);
  int i=vm.tointeger(4);
  int j=vm.tointeger(5);
  int len=table.luaLength();
  if (i == 0)   i=1;
  if (j == 0)   j=len;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  try {
    for (int k=i; k <= j; k++) {
      LValue v=table.get(k);
      v.luaAsString().write(baos);
      if (k < j && sep != null)       sep.write(baos);
    }
    vm.resettop();
    vm.pushlstring(baos.toByteArray());
  }
 catch (  IOException e) {
    vm.error(e.getMessage());
  }
  break;
}
case INSERT:
{
int n=vm.gettop();
LTable table=vm.totable(2);
int pos=(n >= 4 ? vm.tointeger(3) : 0);
LValue value=vm.topointer(-1);
table.luaInsertPos(pos,value);
break;
}
case MAXN:
{
LTable table=vm.totable(2);
vm.resettop();
vm.pushinteger(table.luaMaxN());
break;
}
case REMOVE:
{
int n=vm.gettop();
LTable table=vm.totable(2);
int pos=(n >= 3 ? vm.tointeger(3) : 0);
vm.resettop();
vm.pushlvalue(table.luaRemovePos(pos));
break;
}
case SORT:
{
LTable table=vm.totable(2);
LValue compare=vm.topointer(3);
table.luaSort(vm,compare);
vm.resettop();
break;
}
default :
LuaState.vmerror(""String_Node_Str"");
}
return false;
}",0.9841628959276018
44003,"public static boolean luaBinCmpDoubleDouble(int opcode,double lhs,double rhs){
switch (opcode) {
case Lua.OP_EQ:
    return lhs == rhs;
case Lua.OP_LT:
  return lhs < rhs;
case Lua.OP_LE:
return lhs <= rhs;
}
throw new RuntimeException(""String_Node_Str"");
}","public static boolean luaBinCmpDoubleDouble(int opcode,double lhs,double rhs){
switch (opcode) {
case Lua.OP_EQ:
    return lhs == rhs;
case Lua.OP_LT:
  return lhs < rhs;
case Lua.OP_LE:
return lhs <= rhs;
}
LuaState.vmerror(""String_Node_Str"");
return false;
}",0.8996138996138996
44004,"public static LValue luaBinOpDoubleDouble(int opcode,double lhs,double rhs){
switch (opcode) {
case Lua.OP_ADD:
    return new LDouble(lhs + rhs);
case Lua.OP_SUB:
  return new LDouble(lhs - rhs);
case Lua.OP_MUL:
return new LDouble(lhs * rhs);
case Lua.OP_DIV:
return new LDouble(lhs / rhs);
case Lua.OP_MOD:
return new LDouble(lhs - Math.floor(lhs / rhs) * rhs);
case Lua.OP_POW:
throw new LuaErrorException(""String_Node_Str"");
}
throw new RuntimeException(""String_Node_Str"");
}","public static LValue luaBinOpDoubleDouble(int opcode,double lhs,double rhs){
switch (opcode) {
case Lua.OP_ADD:
    return new LDouble(lhs + rhs);
case Lua.OP_SUB:
  return new LDouble(lhs - rhs);
case Lua.OP_MUL:
return new LDouble(lhs * rhs);
case Lua.OP_DIV:
return new LDouble(lhs / rhs);
case Lua.OP_MOD:
return new LDouble(lhs - Math.floor(lhs / rhs) * rhs);
case Lua.OP_POW:
throw new LuaErrorException(""String_Node_Str"");
}
LuaState.vmerror(""String_Node_Str"");
return null;
}",0.9470404984423676
44005,"public LValue luaBinOpInteger(int opcode,int rhs){
switch (opcode) {
case Lua.OP_ADD:
    return LInteger.valueOf(m_value + rhs);
case Lua.OP_SUB:
  return LInteger.valueOf(m_value - rhs);
case Lua.OP_MUL:
return LInteger.valueOf(m_value * rhs);
case Lua.OP_DIV:
return LInteger.valueOf(m_value / rhs);
case Lua.OP_MOD:
return LInteger.valueOf(m_value - ((int)Math.floor(m_value / (double)rhs)) * rhs);
case Lua.OP_POW:
return LInteger.valueOf(ipow(m_value,rhs));
}
throw new RuntimeException(""String_Node_Str"");
}","public LValue luaBinOpInteger(int opcode,int rhs){
switch (opcode) {
case Lua.OP_ADD:
    return LInteger.valueOf(m_value + rhs);
case Lua.OP_SUB:
  return LInteger.valueOf(m_value - rhs);
case Lua.OP_MUL:
return LInteger.valueOf(m_value * rhs);
case Lua.OP_DIV:
return LInteger.valueOf(m_value / rhs);
case Lua.OP_MOD:
return LInteger.valueOf(m_value - ((int)Math.floor(m_value / (double)rhs)) * rhs);
case Lua.OP_POW:
return LInteger.valueOf(ipow(m_value,rhs));
}
LuaState.vmerror(""String_Node_Str"");
return null;
}",0.9466537342386032
44006,"public boolean luaBinCmpInteger(int opcode,int rhs){
switch (opcode) {
case Lua.OP_EQ:
    return m_value == rhs;
case Lua.OP_LT:
  return m_value < rhs;
case Lua.OP_LE:
return m_value <= rhs;
}
throw new RuntimeException(""String_Node_Str"");
}","public boolean luaBinCmpInteger(int opcode,int rhs){
switch (opcode) {
case Lua.OP_EQ:
    return m_value == rhs;
case Lua.OP_LT:
  return m_value < rhs;
case Lua.OP_LE:
return m_value <= rhs;
}
LuaState.vmerror(""String_Node_Str"");
return false;
}",0.8857142857142857
44007,"public boolean luaBinCmpString(int opcode,LString rhs){
switch (opcode) {
case Lua.OP_EQ:
    return equals(rhs);
case Lua.OP_LT:
  return compareTo(rhs) < 0;
case Lua.OP_LE:
return compareTo(rhs) <= 0;
}
throw new RuntimeException(""String_Node_Str"");
}","public boolean luaBinCmpString(int opcode,LString rhs){
switch (opcode) {
case Lua.OP_EQ:
    return equals(rhs);
case Lua.OP_LT:
  return compareTo(rhs) < 0;
case Lua.OP_LE:
return compareTo(rhs) <= 0;
}
LuaState.vmerror(""String_Node_Str"");
return false;
}",0.8901960784313725
44008,"/** 
 * execute instructions up to a yield, return, or call 
 */
public void exec(){
  if (cc < 0)   return;
  int i, a, b, c, o, n, cb;
  LValue rkb, rkc, nvarargs, key, val;
  LValue i0, step, idx, limit, init, table;
  boolean back, body;
  LPrototype proto;
  LClosure newClosure;
  CallInfo ci=calls[cc];
  LClosure cl=ci.closure;
  LPrototype p=cl.p;
  int[] code=p.code;
  LValue[] k=p.k;
  this.base=ci.base;
  while (true) {
    debugAssert(ci == calls[cc]);
    ci.top=top;
    debugHooks(ci.pc);
    i=code[ci.pc++];
    a=LuaState.GETARG_A(i);
switch (LuaState.GET_OPCODE(i)) {
case LuaState.OP_MOVE:
{
        b=LuaState.GETARG_B(i);
        this.stack[base + a]=this.stack[base + b];
        continue;
      }
case LuaState.OP_LOADK:
{
      b=LuaState.GETARG_Bx(i);
      this.stack[base + a]=k[b];
      continue;
    }
case LuaState.OP_LOADBOOL:
{
    b=LuaState.GETARG_B(i);
    c=LuaState.GETARG_C(i);
    this.stack[base + a]=(b != 0 ? LBoolean.TRUE : LBoolean.FALSE);
    if (c != 0)     ci.pc++;
    continue;
  }
case LuaState.OP_LOADNIL:
{
  b=LuaState.GETARG_B(i);
  do {
    this.stack[base + b]=LNil.NIL;
  }
 while ((--b) >= a);
  continue;
}
case LuaState.OP_GETUPVAL:
{
b=LuaState.GETARG_B(i);
this.stack[base + a]=cl.upVals[b].getValue();
continue;
}
case LuaState.OP_GETGLOBAL:
{
b=LuaState.GETARG_Bx(i);
key=k[b];
table=cl.env;
top=base + a;
table.luaGetTable(this,table,key);
continue;
}
case LuaState.OP_GETTABLE:
{
b=LuaState.GETARG_B(i);
key=GETARG_RKC(k,i);
table=this.stack[base + b];
top=base + a;
table.luaGetTable(this,table,key);
continue;
}
case LuaState.OP_SETGLOBAL:
{
b=LuaState.GETARG_Bx(i);
key=k[b];
val=this.stack[base + a];
table=cl.env;
table.luaSetTable(this,table,key,val);
continue;
}
case LuaState.OP_SETUPVAL:
{
b=LuaState.GETARG_B(i);
cl.upVals[b].setValue(this.stack[base + a]);
continue;
}
case LuaState.OP_SETTABLE:
{
key=GETARG_RKB(k,i);
val=GETARG_RKC(k,i);
table=this.stack[base + a];
table.luaSetTable(this,table,key,val);
continue;
}
case LuaState.OP_NEWTABLE:
{
b=LuaState.GETARG_B(i);
c=LuaState.GETARG_C(i);
this.stack[base + a]=new LTable(b,c);
continue;
}
case LuaState.OP_SELF:
{
rkb=GETARG_RKB(k,i);
rkc=GETARG_RKC(k,i);
top=base + a;
rkb.luaGetTable(this,rkb,rkc);
this.stack[base + a + 1]=rkb;
continue;
}
case LuaState.OP_ADD:
case LuaState.OP_SUB:
case LuaState.OP_MUL:
case LuaState.OP_DIV:
case LuaState.OP_MOD:
case LuaState.OP_POW:
{
o=LuaState.GET_OPCODE(i);
rkb=GETARG_RKB(k,i);
rkc=GETARG_RKC(k,i);
this.stack[base + a]=rkc.luaBinOpUnknown(o,rkb);
continue;
}
case LuaState.OP_UNM:
{
rkb=GETARG_RKB(k,i);
this.stack[base + a]=rkb.luaUnaryMinus();
continue;
}
case LuaState.OP_NOT:
{
rkb=GETARG_RKB(k,i);
this.stack[base + a]=(!rkb.toJavaBoolean() ? LBoolean.TRUE : LBoolean.FALSE);
continue;
}
case LuaState.OP_LEN:
{
rkb=GETARG_RKB(k,i);
this.stack[base + a]=LInteger.valueOf(rkb.luaLength());
continue;
}
case LuaState.OP_CONCAT:
{
b=LuaState.GETARG_B(i);
c=LuaState.GETARG_C(i);
int numValues=c - b + 1;
LString[] strings=new LString[numValues];
for (int j=b, l=0; j <= c; j++, l++) {
LString s=this.stack[base + j].luaAsString();
strings[l]=s;
}
this.stack[base + a]=LString.concat(strings);
continue;
}
case LuaState.OP_JMP:
{
ci.pc+=LuaState.GETARG_sBx(i);
continue;
}
case LuaState.OP_EQ:
case LuaState.OP_LT:
case LuaState.OP_LE:
{
o=LuaState.GET_OPCODE(i);
rkb=GETARG_RKB(k,i);
rkc=GETARG_RKC(k,i);
boolean test=rkc.luaBinCmpUnknown(o,rkb);
if (test == (a == 0)) ci.pc++;
continue;
}
case LuaState.OP_TEST:
{
c=LuaState.GETARG_C(i);
if (this.stack[base + a].toJavaBoolean() != (c != 0)) ci.pc++;
continue;
}
case LuaState.OP_TESTSET:
{
rkb=GETARG_RKB(k,i);
c=LuaState.GETARG_C(i);
if (rkb.toJavaBoolean() != (c != 0)) ci.pc++;
 else this.stack[base + a]=rkb;
continue;
}
case LuaState.OP_CALL:
{
this.base+=a;
b=LuaState.GETARG_B(i);
if (b != 0) top=base + b;
c=LuaState.GETARG_C(i);
this.nresults=c - 1;
if (this.stack[base].luaStackCall(this)) return;
if (c > 0) adjustTop(base + c - 1);
base=ci.base;
continue;
}
case LuaState.OP_TAILCALL:
{
closeUpVals(base);
b=LuaState.GETARG_B(i);
if (b == 0) b=top - (base + a);
System.arraycopy(stack,base + a,stack,ci.resultbase,b);
this.base=ci.resultbase;
this.top=base + b;
this.nresults=ci.nresults;
--cc;
try {
if (this.stack[base].luaStackCall(this)) {
return;
}
}
 catch (LuaErrorException e) {
cc++;
throw e;
}
if (this.nresults >= 0) adjustTop(base + nresults);
return;
}
case LuaState.OP_RETURN:
{
b=LuaState.GETARG_B(i) - 1;
if (b == -1) b=top - (base + a);
closeUpVals(base);
System.arraycopy(stack,base + a,stack,ci.resultbase,b);
top=ci.resultbase + b;
if (ci.nresults >= 0) adjustTop(ci.resultbase + ci.nresults);
--cc;
return;
}
case LuaState.OP_FORLOOP:
{
i0=this.stack[base + a];
step=this.stack[base + a + 2];
idx=step.luaBinOpUnknown(Lua.OP_ADD,i0);
limit=this.stack[base + a + 1];
back=step.luaBinCmpInteger(Lua.OP_LT,0);
body=(back ? idx.luaBinCmpUnknown(Lua.OP_LE,limit) : limit.luaBinCmpUnknown(Lua.OP_LE,idx));
if (body) {
this.stack[base + a]=idx;
this.stack[base + a + 3]=idx;
top=base + a + 3+ 1;
ci.pc+=LuaState.GETARG_sBx(i);
}
continue;
}
case LuaState.OP_FORPREP:
{
init=this.stack[base + a];
step=this.stack[base + a + 2];
this.stack[base + a]=step.luaBinOpUnknown(Lua.OP_SUB,init);
b=LuaState.GETARG_sBx(i);
ci.pc+=b;
continue;
}
case LuaState.OP_TFORLOOP:
{
cb=a + 3;
System.arraycopy(this.stack,base + a,this.stack,base + cb,3);
base+=cb;
try {
top=base + 3;
c=LuaState.GETARG_C(i);
if (this.stack[base].luaStackCall(this)) execute();
adjustTop(base + c - 1);
if (this.stack[base] != LNil.NIL) {
this.stack[base - 1]=this.stack[base];
}
 else {
ci.pc++;
}
}
  finally {
base-=cb;
}
continue;
}
case LuaState.OP_SETLIST:
{
b=LuaState.GETARG_B(i);
c=LuaState.GETARG_C(i);
int listBase=base + a;
if (b == 0) {
b=top - listBase - 1;
}
if (c == 0) {
c=code[ci.pc++];
}
table=this.stack[base + a];
for (int index=1; index <= b; index++) {
val=this.stack[listBase + index];
table.luaSetTable(this,table,LInteger.valueOf(index),val);
}
top=base + a - 1;
continue;
}
case LuaState.OP_CLOSE:
{
closeUpVals(a);
continue;
}
case LuaState.OP_CLOSURE:
{
b=LuaState.GETARG_Bx(i);
proto=cl.p.p[b];
newClosure=new LClosure(proto,_G);
for (int j=0; j < newClosure.upVals.length; j++, ci.pc++) {
i=code[ci.pc];
o=LuaState.GET_OPCODE(i);
b=LuaState.GETARG_B(i);
if (o == LuaState.OP_GETUPVAL) {
newClosure.upVals[j]=cl.upVals[b];
}
 else if (o == LuaState.OP_MOVE) {
newClosure.upVals[j]=findUpVal(proto.upvalues[j],base + b);
}
 else {
throw new java.lang.IllegalArgumentException(""String_Node_Str"" + o);
}
}
this.stack[base + a]=newClosure;
continue;
}
case LuaState.OP_VARARG:
{
b=LuaState.GETARG_B(i) - 1;
nvarargs=this.stack[base - 1];
n=nvarargs.toJavaInt();
if (b == LuaState.LUA_MULTRET) {
b=n;
}
checkstack(a + b);
for (int j=0; j < b; j++) this.stack[base + a + j]=(j < n ? this.stack[base - n + j - 1] : LNil.NIL);
top=base + a + b;
continue;
}
}
}
}","/** 
 * execute instructions up to a yield, return, or call 
 */
public void exec(){
  if (cc < 0)   return;
  int i, a, b, c, o, n, cb;
  LValue rkb, rkc, nvarargs, key, val;
  LValue i0, step, idx, limit, init, table;
  boolean back, body;
  LPrototype proto;
  LClosure newClosure;
  CallInfo ci=calls[cc];
  LClosure cl=ci.closure;
  LPrototype p=cl.p;
  int[] code=p.code;
  LValue[] k=p.k;
  this.base=ci.base;
  while (true) {
    debugAssert(ci == calls[cc]);
    ci.top=top;
    debugHooks(ci.pc);
    i=code[ci.pc++];
    a=LuaState.GETARG_A(i);
switch (LuaState.GET_OPCODE(i)) {
case LuaState.OP_MOVE:
{
        b=LuaState.GETARG_B(i);
        this.stack[base + a]=this.stack[base + b];
        continue;
      }
case LuaState.OP_LOADK:
{
      b=LuaState.GETARG_Bx(i);
      this.stack[base + a]=k[b];
      continue;
    }
case LuaState.OP_LOADBOOL:
{
    b=LuaState.GETARG_B(i);
    c=LuaState.GETARG_C(i);
    this.stack[base + a]=(b != 0 ? LBoolean.TRUE : LBoolean.FALSE);
    if (c != 0)     ci.pc++;
    continue;
  }
case LuaState.OP_LOADNIL:
{
  b=LuaState.GETARG_B(i);
  do {
    this.stack[base + b]=LNil.NIL;
  }
 while ((--b) >= a);
  continue;
}
case LuaState.OP_GETUPVAL:
{
b=LuaState.GETARG_B(i);
this.stack[base + a]=cl.upVals[b].getValue();
continue;
}
case LuaState.OP_GETGLOBAL:
{
b=LuaState.GETARG_Bx(i);
key=k[b];
table=cl.env;
top=base + a;
table.luaGetTable(this,table,key);
continue;
}
case LuaState.OP_GETTABLE:
{
b=LuaState.GETARG_B(i);
key=GETARG_RKC(k,i);
table=this.stack[base + b];
top=base + a;
table.luaGetTable(this,table,key);
continue;
}
case LuaState.OP_SETGLOBAL:
{
b=LuaState.GETARG_Bx(i);
key=k[b];
val=this.stack[base + a];
table=cl.env;
table.luaSetTable(this,table,key,val);
continue;
}
case LuaState.OP_SETUPVAL:
{
b=LuaState.GETARG_B(i);
cl.upVals[b].setValue(this.stack[base + a]);
continue;
}
case LuaState.OP_SETTABLE:
{
key=GETARG_RKB(k,i);
val=GETARG_RKC(k,i);
table=this.stack[base + a];
table.luaSetTable(this,table,key,val);
continue;
}
case LuaState.OP_NEWTABLE:
{
b=LuaState.GETARG_B(i);
c=LuaState.GETARG_C(i);
this.stack[base + a]=new LTable(b,c);
continue;
}
case LuaState.OP_SELF:
{
rkb=GETARG_RKB(k,i);
rkc=GETARG_RKC(k,i);
top=base + a;
rkb.luaGetTable(this,rkb,rkc);
this.stack[base + a + 1]=rkb;
continue;
}
case LuaState.OP_ADD:
case LuaState.OP_SUB:
case LuaState.OP_MUL:
case LuaState.OP_DIV:
case LuaState.OP_MOD:
case LuaState.OP_POW:
{
o=LuaState.GET_OPCODE(i);
rkb=GETARG_RKB(k,i);
rkc=GETARG_RKC(k,i);
this.stack[base + a]=rkc.luaBinOpUnknown(o,rkb);
continue;
}
case LuaState.OP_UNM:
{
rkb=GETARG_RKB(k,i);
this.stack[base + a]=rkb.luaUnaryMinus();
continue;
}
case LuaState.OP_NOT:
{
rkb=GETARG_RKB(k,i);
this.stack[base + a]=(!rkb.toJavaBoolean() ? LBoolean.TRUE : LBoolean.FALSE);
continue;
}
case LuaState.OP_LEN:
{
rkb=GETARG_RKB(k,i);
this.stack[base + a]=LInteger.valueOf(rkb.luaLength());
continue;
}
case LuaState.OP_CONCAT:
{
b=LuaState.GETARG_B(i);
c=LuaState.GETARG_C(i);
int numValues=c - b + 1;
LString[] strings=new LString[numValues];
for (int j=b, l=0; j <= c; j++, l++) {
LString s=this.stack[base + j].luaAsString();
strings[l]=s;
}
this.stack[base + a]=LString.concat(strings);
continue;
}
case LuaState.OP_JMP:
{
ci.pc+=LuaState.GETARG_sBx(i);
continue;
}
case LuaState.OP_EQ:
case LuaState.OP_LT:
case LuaState.OP_LE:
{
o=LuaState.GET_OPCODE(i);
rkb=GETARG_RKB(k,i);
rkc=GETARG_RKC(k,i);
boolean test=rkc.luaBinCmpUnknown(o,rkb);
if (test == (a == 0)) ci.pc++;
continue;
}
case LuaState.OP_TEST:
{
c=LuaState.GETARG_C(i);
if (this.stack[base + a].toJavaBoolean() != (c != 0)) ci.pc++;
continue;
}
case LuaState.OP_TESTSET:
{
rkb=GETARG_RKB(k,i);
c=LuaState.GETARG_C(i);
if (rkb.toJavaBoolean() != (c != 0)) ci.pc++;
 else this.stack[base + a]=rkb;
continue;
}
case LuaState.OP_CALL:
{
this.base+=a;
b=LuaState.GETARG_B(i);
if (b != 0) top=base + b;
c=LuaState.GETARG_C(i);
this.nresults=c - 1;
if (this.stack[base].luaStackCall(this)) return;
if (c > 0) adjustTop(base + c - 1);
base=ci.base;
continue;
}
case LuaState.OP_TAILCALL:
{
closeUpVals(base);
b=LuaState.GETARG_B(i);
if (b == 0) b=top - (base + a);
System.arraycopy(stack,base + a,stack,ci.resultbase,b);
this.base=ci.resultbase;
this.top=base + b;
this.nresults=ci.nresults;
--cc;
try {
if (this.stack[base].luaStackCall(this)) {
return;
}
}
 catch (LuaErrorException e) {
cc++;
throw e;
}
if (this.nresults >= 0) adjustTop(base + nresults);
return;
}
case LuaState.OP_RETURN:
{
b=LuaState.GETARG_B(i) - 1;
if (b == -1) b=top - (base + a);
closeUpVals(base);
System.arraycopy(stack,base + a,stack,ci.resultbase,b);
top=ci.resultbase + b;
if (ci.nresults >= 0) adjustTop(ci.resultbase + ci.nresults);
--cc;
return;
}
case LuaState.OP_FORLOOP:
{
i0=this.stack[base + a];
step=this.stack[base + a + 2];
idx=step.luaBinOpUnknown(Lua.OP_ADD,i0);
limit=this.stack[base + a + 1];
back=step.luaBinCmpInteger(Lua.OP_LT,0);
body=(back ? idx.luaBinCmpUnknown(Lua.OP_LE,limit) : limit.luaBinCmpUnknown(Lua.OP_LE,idx));
if (body) {
this.stack[base + a]=idx;
this.stack[base + a + 3]=idx;
top=base + a + 3+ 1;
ci.pc+=LuaState.GETARG_sBx(i);
}
continue;
}
case LuaState.OP_FORPREP:
{
init=this.stack[base + a];
step=this.stack[base + a + 2];
this.stack[base + a]=step.luaBinOpUnknown(Lua.OP_SUB,init);
b=LuaState.GETARG_sBx(i);
ci.pc+=b;
continue;
}
case LuaState.OP_TFORLOOP:
{
cb=base + a + 3;
base=cb;
adjustTop(cb + 3);
System.arraycopy(this.stack,cb - 3,this.stack,cb,3);
c=LuaState.GETARG_C(i);
this.nresults=c;
if (this.stack[cb].luaStackCall(this)) execute();
base=ci.base;
adjustTop(cb + c);
if (this.stack[cb] != LNil.NIL) {
this.stack[cb - 1]=this.stack[cb];
}
 else {
ci.pc++;
}
continue;
}
case LuaState.OP_SETLIST:
{
b=LuaState.GETARG_B(i);
c=LuaState.GETARG_C(i);
int listBase=base + a;
if (b == 0) {
b=top - listBase - 1;
}
if (c == 0) {
c=code[ci.pc++];
}
table=this.stack[base + a];
for (int index=1; index <= b; index++) {
val=this.stack[listBase + index];
table.luaSetTable(this,table,LInteger.valueOf(index),val);
}
top=base + a - 1;
continue;
}
case LuaState.OP_CLOSE:
{
closeUpVals(a);
continue;
}
case LuaState.OP_CLOSURE:
{
b=LuaState.GETARG_Bx(i);
proto=cl.p.p[b];
newClosure=new LClosure(proto,_G);
for (int j=0; j < newClosure.upVals.length; j++, ci.pc++) {
i=code[ci.pc];
o=LuaState.GET_OPCODE(i);
b=LuaState.GETARG_B(i);
if (o == LuaState.OP_GETUPVAL) {
newClosure.upVals[j]=cl.upVals[b];
}
 else if (o == LuaState.OP_MOVE) {
newClosure.upVals[j]=findUpVal(proto.upvalues[j],base + b);
}
 else {
throw new java.lang.IllegalArgumentException(""String_Node_Str"" + o);
}
}
this.stack[base + a]=newClosure;
continue;
}
case LuaState.OP_VARARG:
{
b=LuaState.GETARG_B(i) - 1;
nvarargs=this.stack[base - 1];
n=nvarargs.toJavaInt();
if (b == LuaState.LUA_MULTRET) {
b=n;
}
checkstack(a + b);
for (int j=0; j < b; j++) this.stack[base + a + j]=(j < n ? this.stack[base - n + j - 1] : LNil.NIL);
top=base + a + b;
continue;
}
}
}
}",0.9866087585957292
44009,"public static void main(String[] args) throws IOException {
  LuaState state=new LuaState();
  String script=(args.length > 0 ? args[0] : ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + script + ""String_Node_Str"");
  state.installStandardLibs();
  LuaC.install();
  InputStream is=LuaRunner.class.getResourceAsStream(script);
  if (is == null)   throw new java.io.FileNotFoundException(""String_Node_Str"" + script);
  LPrototype p=LoadState.undump(state,is,script);
  LClosure c=new LClosure(p,state._G);
  state.doCall(c,new LValue[0]);
}","public static void main(String[] args) throws IOException {
  LuaState state=LuaState.newState();
  String script=(args.length > 0 ? args[0] : ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + script + ""String_Node_Str"");
  state.installStandardLibs();
  LuaC.install();
  InputStream is=LuaRunner.class.getResourceAsStream(script);
  if (is == null)   throw new java.io.FileNotFoundException(""String_Node_Str"" + script);
  LPrototype p=LoadState.undump(state,is,script);
  LClosure c=new LClosure(p,state._G);
  state.doCall(c,new LValue[0]);
}",0.988256549232159
44010,"/** 
 * string.gmatch (s, pattern) Returns an iterator function that, each time it is called, returns the next captures  from pattern over string s. If pattern specifies no captures, then the  whole match is produced in each call.  As an example, the following loop s = ""hello world from Lua"" for w in string.gmatch(s, ""%a+"") do print(w) end will iterate over all the words from string s, printing one per line.  The next example collects all pairs key=value from the given string into a table: t = {} s = ""from=world, to=Lua"" for k, v in string.gmatch(s, ""(%w+)=(%w+)"") do t[k] = v end For this function, a '^' at the start of a pattern does not work as an anchor,  as this would prevent the iteration.
 */
static void gmatch(LuaState vm){
  vm.resettop();
  vm.pushlvalue(new GMatchAux(vm));
}","/** 
 * string.gmatch (s, pattern) Returns an iterator function that, each time it is called, returns the next captures  from pattern over string s. If pattern specifies no captures, then the  whole match is produced in each call.  As an example, the following loop s = ""hello world from Lua"" for w in string.gmatch(s, ""%a+"") do print(w) end will iterate over all the words from string s, printing one per line.  The next example collects all pairs key=value from the given string into a table: t = {} s = ""from=world, to=Lua"" for k, v in string.gmatch(s, ""(%w+)=(%w+)"") do t[k] = v end For this function, a '^' at the start of a pattern does not work as an anchor,  as this would prevent the iteration.
 */
static void gmatch(LuaState vm){
  LString src=vm.tolstring(2);
  LString pat=vm.tolstring(3);
  vm.resettop();
  vm.pushlvalue(new GMatchAux(vm,src,pat));
}",0.9433734939759036
44011,"public boolean luaStackCall(LuaState vm){
  vm.resettop();
  for (; soffset < srclen; soffset++) {
    int res=ms.match(soffset,0);
    if (res >= 0) {
      int soff=soffset;
      soffset=res;
      ms.push_captures(true,soff,res);
      return false;
    }
  }
  vm.pushnil();
  return false;
}","public boolean luaStackCall(LuaState vm){
  vm.resettop();
  for (; soffset < srclen; soffset++) {
    ms.reset();
    int res=ms.match(soffset,0);
    if (res >= 0) {
      int soff=soffset;
      soffset=res;
      ms.push_captures(true,soff,res);
      return false;
    }
  }
  vm.pushnil();
  return false;
}",0.9737704918032788
44012,"public GMatchAux(LuaState vm){
  this.src=vm.tolstring(2);
  this.pat=vm.tolstring(3);
  this.srclen=src.length();
  this.ms=new MatchState(vm,src,pat);
  this.soffset=0;
}","public GMatchAux(LuaState vm,LString src,LString pat){
  this.srclen=src.length();
  this.ms=new MatchState(vm,src,pat);
  this.soffset=0;
}",0.8141025641025641
44013,"public void acceptClientConnection() throws IOException {
  try {
    Socket clientSocket=serverSocket.accept();
    int count=getClientCount();
    if (count == numClientConnectionsAllowed) {
      clientSocket.close();
    }
 else {
synchronized (this) {
        incrementClientCount();
        this.clientConnectionTask=new ClientConnectionTask(this,clientSocket);
        new Thread(clientConnectionTask).start();
      }
    }
  }
  finally {
    dispose();
  }
}","public void acceptClientConnection() throws IOException {
  try {
    Socket clientSocket=serverSocket.accept();
    int count=getClientCount();
    if (count == numClientConnectionsAllowed) {
      clientSocket.close();
    }
 else {
synchronized (this) {
        incrementClientCount();
        this.clientConnectionTask=new ClientConnectionTask(this,clientSocket);
        new Thread(clientConnectionTask).start();
      }
    }
  }
 catch (  IOException e) {
    dispose();
  }
}",0.967402733964248
44014,"public CallInfo(Closure c,int base,int resultoff,int nresults){
  this.closure=c;
  this.base=base;
  this.resultbase=resultoff;
  this.nresults=nresults;
  this.pc=0;
}","public CallInfo(Closure c,int base,int top,int resultoff,int nresults){
  this.closure=c;
  this.base=base;
  this.top=top;
  this.resultbase=resultoff;
  this.nresults=nresults;
  this.pc=0;
}",0.9337016574585636
44015,"public static void printState(StackState state,int base,int top,int max,Closure cl,int pc){
  PrintStream previous=ps;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ps=new PrintStream(baos);
  printOpCode(cl.p,pc);
  ps.flush();
  ps.close();
  ps=previous;
  format(baos.toString(),40);
  ps.print(""String_Node_Str"");
  format(String.valueOf(base),3);
  ps.print(""String_Node_Str"");
  format(String.valueOf(top),3);
  ps.print(""String_Node_Str"");
  int i=0;
  for (; i < base; i++)   ps.print('.');
  ps.print('[');
  for (; i < max && i < state.stack.length; i++) {
    Object v=state.stack[i];
    ps.print(v != null ? String.valueOf(v) : STRING_FOR_NULL);
    if (i + 1 == top)     ps.print(']');
    ps.print(""String_Node_Str"");
  }
  ps.println();
}","public static void printState(StackState state,int base,int top,int max,Closure cl,int pc){
  PrintStream previous=ps;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ps=new PrintStream(baos);
  printOpCode(cl.p,pc);
  ps.flush();
  ps.close();
  ps=previous;
  format(baos.toString(),40);
  ps.print(""String_Node_Str"");
  format(String.valueOf(base),3);
  ps.print(""String_Node_Str"");
  format(String.valueOf(top),3);
  ps.print(""String_Node_Str"");
  int i=0;
  for (; i < base; i++)   ps.print('.');
  ps.print('[');
  for (; i < max; i++) {
    Object v=state.stack[i];
    ps.print(v != null ? String.valueOf(v) : STRING_FOR_NULL);
    if (i + 1 == top)     ps.print(']');
    ps.print(""String_Node_Str"");
  }
  ps.println();
}",0.9828042328042328
44016,"public void prepStackCall(){
  Closure c=(Closure)stack[base];
  int resultbase=base;
  checkstack(c.p.maxstacksize);
  if (!c.p.is_vararg) {
    base+=1;
    adjustTop(base + c.p.numparams);
  }
 else {
    int npar=c.p.numparams;
    int narg=Math.max(0,top - base - 1);
    int nfix=Math.min(narg,npar);
    int nvar=Math.max(0,narg - nfix);
    stack[top]=LInteger.valueOf(nvar);
    System.arraycopy(stack,base + 1,stack,top + 1,nfix);
    base=top + 1;
    top=base + nfix;
    adjustTop(base + npar);
  }
  final int newcc=cc + 1;
  if (newcc >= calls.length) {
    CallInfo[] newcalls=new CallInfo[calls.length * 2];
    System.arraycopy(calls,0,newcalls,0,cc + 1);
    calls=newcalls;
  }
  calls[newcc]=new CallInfo(c,base,resultbase,nresults);
  cc=newcc;
}","public void prepStackCall(){
  Closure c=(Closure)stack[base];
  int resultbase=base;
  checkstack(c.p.maxstacksize);
  if (!c.p.is_vararg) {
    base+=1;
    adjustTop(base + c.p.numparams);
  }
 else {
    int npar=c.p.numparams;
    int narg=Math.max(0,top - base - 1);
    int nfix=Math.min(narg,npar);
    int nvar=Math.max(0,narg - nfix);
    stack[top]=LInteger.valueOf(nvar);
    System.arraycopy(stack,base + 1,stack,top + 1,nfix);
    base=top + 1;
    top=base + nfix;
    adjustTop(base + npar);
  }
  final int newcc=cc + 1;
  if (newcc >= calls.length) {
    CallInfo[] newcalls=new CallInfo[calls.length * 2];
    System.arraycopy(calls,0,newcalls,0,cc + 1);
    calls=newcalls;
  }
  calls[newcc]=new CallInfo(c,base,top,resultbase,nresults);
  cc=newcc;
}",0.9974025974025974
44017,"protected void setStarted(){
synchronized (this) {
    isStarted=true;
    this.notify();
  }
}","protected void setStarted(){
synchronized (this) {
    bSuspendAtStart=false;
    this.notify();
  }
}",0.9035532994923858
44018,"public void debugHooks(int pc){
  if (exiting) {
    throw new AbortException(""String_Node_Str"");
  }
  if (DebugUtils.IS_DEBUG)   DebugUtils.println(""String_Node_Str"" + pc + ""String_Node_Str"");
synchronized (this) {
    while (!isStarted) {
      try {
        this.wait();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    CallInfo currentCallInfo=calls[cc];
    Proto currentProto=currentCallInfo.closure.p;
    int line=getLineNumber(currentCallInfo);
    String source=DebugUtils.getSourceFileName(currentProto.source);
    if (!isStepping() && lastline == line && source.equals(lastSource)) {
      return;
    }
    if (DebugUtils.IS_DEBUG)     DebugUtils.println(""String_Node_Str"" + line);
    int i=currentProto.code[pc];
    int opCode=StackState.GET_OPCODE(i);
    if (isStepping() && opCode == StackState.OP_RETURN && cc == 0) {
      cancelStepping();
    }
 else     if (shouldPauseForStepping) {
      shouldPauseForStepping=false;
      suspendOnStepping();
    }
 else     if (stepping == STEP_INTO) {
      if (lastline != line) {
        suspendOnStepping();
      }
 else       if (opCode == StackState.OP_CALL) {
        shouldPauseForStepping=true;
      }
    }
 else     if (stepping == STEP_OVER) {
      if ((lastline != line && steppingFrame == cc) || (steppingFrame > cc)) {
        suspendOnStepping();
      }
    }
 else     if (stepping == STEP_RETURN) {
      if ((opCode == StackState.OP_RETURN && cc == this.steppingFrame) || (opCode == StackState.OP_TAILCALL && cc == this.steppingFrame)) {
        shouldPauseForStepping=true;
      }
    }
    if (!suspended && lastline != line) {
      if (DebugUtils.IS_DEBUG)       DebugUtils.println(""String_Node_Str"" + currentProto.source);
      String fileName=DebugUtils.getSourceFileName(source);
      String breakpointKey=constructBreakpointKey(fileName,line);
      if (breakpoints.containsKey(breakpointKey)) {
        if (DebugUtils.IS_DEBUG)         DebugUtils.println(""String_Node_Str"" + constructBreakpointKey(fileName,line));
        debugSupport.notifyDebugEvent(new DebugEventBreakpoint(fileName,line));
        suspended=true;
      }
    }
    lastline=line;
    lastSource=source;
    while (suspended && !exiting) {
      try {
        this.wait();
        if (DebugUtils.IS_DEBUG)         DebugUtils.println(""String_Node_Str"");
        if (lastException != null) {
          throw lastException;
        }
      }
 catch (      InterruptedException ie) {
        ie.printStackTrace();
      }
    }
  }
}","public void debugHooks(int pc){
  if (exiting) {
    throw new AbortException(""String_Node_Str"");
  }
  if (DebugUtils.IS_DEBUG) {
    DebugUtils.println(""String_Node_Str"" + pc + ""String_Node_Str""+ getFileLine(cc));
    for (int j=0; j <= cc; j++) {
      DebugUtils.println(""String_Node_Str"" + j + ""String_Node_Str""+ calls[j].base+ ""String_Node_Str""+ calls[j].top+ ""String_Node_Str""+ calls[j].pc);
      dumpStack(j);
    }
  }
synchronized (this) {
    while (bSuspendAtStart) {
      try {
        this.wait();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    CallInfo currentCallInfo=calls[cc];
    Proto currentProto=currentCallInfo.closure.p;
    int line=getLineNumber(currentCallInfo);
    String source=DebugUtils.getSourceFileName(currentProto.source);
    if (!isStepping() && lastline == line && source.equals(lastSource)) {
      return;
    }
    if (DebugUtils.IS_DEBUG)     DebugUtils.println(""String_Node_Str"" + line);
    int i=currentProto.code[pc];
    int opCode=StackState.GET_OPCODE(i);
    if (isStepping() && opCode == StackState.OP_RETURN && cc == 0) {
      cancelStepping();
    }
 else     if (shouldPauseForStepping) {
      shouldPauseForStepping=false;
      suspendOnStepping();
    }
 else     if (stepping == STEP_INTO) {
      if (lastline != line) {
        suspendOnStepping();
      }
 else       if (opCode == StackState.OP_CALL) {
        shouldPauseForStepping=true;
      }
    }
 else     if (stepping == STEP_OVER) {
      if ((steppingFrame == cc && lastline != line) || (steppingFrame > cc)) {
        suspendOnStepping();
      }
    }
 else     if (stepping == STEP_RETURN) {
      if ((opCode == StackState.OP_RETURN && cc == this.steppingFrame) || (opCode == StackState.OP_TAILCALL && cc == this.steppingFrame)) {
        shouldPauseForStepping=true;
      }
    }
    if (!suspended && lastline != line) {
      if (DebugUtils.IS_DEBUG)       DebugUtils.println(""String_Node_Str"" + currentProto.source);
      String fileName=DebugUtils.getSourceFileName(source);
      String breakpointKey=constructBreakpointKey(fileName,line);
      if (breakpoints.containsKey(breakpointKey)) {
        if (DebugUtils.IS_DEBUG)         DebugUtils.println(""String_Node_Str"" + constructBreakpointKey(fileName,line));
        debugSupport.notifyDebugEvent(new DebugEventBreakpoint(fileName,line));
        suspended=true;
      }
    }
    lastline=line;
    lastSource=source;
    while (suspended && !exiting) {
      try {
        this.wait();
        if (DebugUtils.IS_DEBUG)         DebugUtils.println(""String_Node_Str"");
      }
 catch (      InterruptedException ie) {
        ie.printStackTrace();
      }
    }
  }
}",0.9114791547687036
44019,"private String getVariable(CallInfo callInfo,int index){
  Proto prototype=callInfo.closure.p;
  int count=-1;
  LocVars[] localVariables=prototype.locvars;
  for (int i=0; i < localVariables.length; i++) {
    if (callInfo.pc < localVariables[i].startpc || callInfo.pc > localVariables[i].endpc) {
      continue;
    }
 else {
      count++;
      if (count == index) {
        return localVariables[i].varname.toJavaString();
      }
    }
  }
  return null;
}","private String getVariable(CallInfo callInfo,int index){
  int count=-1;
  LocVars[] localVariables=callInfo.closure.p.locvars;
  for (int i=0; i < localVariables.length; i++) {
    if (!isActiveVariable(callInfo.pc,localVariables[i])) {
      continue;
    }
 else {
      count++;
      if (count == index) {
        return localVariables[i].varname.toJavaString();
      }
    }
  }
  return null;
}",0.8439306358381503
44020,"public void exec(){
  try {
    super.exec();
  }
 catch (  AbortException e) {
  }
catch (  VMException e) {
    throw e;
  }
catch (  Exception e) {
    lastException=new VMException(e);
    debugSupport.notifyDebugEvent(new DebugEventError(e.getMessage()));
    suspend();
  }
}","public void exec(){
  try {
    super.exec();
  }
 catch (  AbortException e) {
  }
catch (  Exception e) {
    VMException lastException=new VMException(e);
    if (debugSupport != null) {
      debugSupport.notifyDebugEvent(new DebugEventError(e.getMessage()));
      suspend();
synchronized (this) {
        while (suspended) {
          try {
            wait();
          }
 catch (          InterruptedException e1) {
          }
        }
      }
    }
    throw lastException;
  }
}",0.5577172503242542
44021,"protected void doDebug() throws IOException {
  DebugUtils.println(""String_Node_Str"");
  init();
  state=new DebugStackState();
  DebugUtils.println(""String_Node_Str"" + getScript() + ""String_Node_Str"");
  InputStream is=new FileInputStream(new File(getScript()));
  Proto p=LoadState.undump(state,is,getScript());
  DebugUtils.println(""String_Node_Str"");
  DebugSupport debugSupport=new DebugSupportImpl(getRequestPort(),getEventPort());
  getDebugState().setDebugSupport(debugSupport);
  final Closure c=new Closure(state,p);
  String[] args=getScriptArgs();
  int numOfScriptArgs=(args != null ? args.length : 0);
  LValue[] vargs=new LValue[numOfScriptArgs];
  for (int i=0; i < numOfScriptArgs; i++) {
    vargs[i]=new LString(args[i]);
  }
  try {
    getDebugState().doCall(c,vargs);
  }
 catch (  VMException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
  getDebugState().stop();
}","protected void doDebug() throws IOException {
  DebugUtils.println(""String_Node_Str"");
  init();
  state=new DebugStackState();
  DebugUtils.println(""String_Node_Str"" + getScript() + ""String_Node_Str"");
  InputStream is=new FileInputStream(new File(getScript()));
  Proto p=LoadState.undump(state,is,getScript());
  DebugUtils.println(""String_Node_Str"");
  DebugSupport debugSupport=new DebugSupportImpl(getRequestPort(),getEventPort());
  getDebugState().setDebugSupport(debugSupport);
  getDebugState().setSuspendAtStart(true);
  final Closure c=new Closure(state,p);
  String[] args=getScriptArgs();
  int numOfScriptArgs=(args != null ? args.length : 0);
  LValue[] vargs=new LValue[numOfScriptArgs];
  for (int i=0; i < numOfScriptArgs; i++) {
    vargs[i]=new LString(args[i]);
  }
  try {
    getDebugState().doCall(c,vargs);
  }
 catch (  VMException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
  getDebugState().stop();
}",0.9769683985002678
44022,"private CoroutinesLib(int id){
  this.id=id;
}","private CoroutinesLib(int id,LThread thread){
  this.id=id;
  this.thread=thread;
}",0.7131782945736435
44023,"public boolean luaStackCall(VM vm){
switch (id) {
case 0:
{
      install();
      vm.pushnil();
      break;
    }
case 1:
{
    Closure c=(Closure)vm.topointer(2);
    vm.pushlvalue(new LThread(c));
    break;
  }
case 2:
{
  LThread t=(LThread)vm.topointer(2);
  LThread prior=running;
  try {
    running=t;
    t.resumeFrom(vm,prior);
    return false;
  }
  finally {
    running=prior;
  }
}
case 3:
{
if (running != null) {
  vm.pushlvalue(running);
}
 else {
  vm.pushnil();
}
break;
}
case 4:
{
vm.pushstring(((LThread)vm.topointer(2)).getStatus());
break;
}
case 5:
{
vm.error(""String_Node_Str"");
return false;
}
case 6:
{
if (running == null) vm.error(""String_Node_Str"");
 else {
return running.yield();
}
}
case 7:
{
vm.error(""String_Node_Str"");
return false;
}
}
vm.insert(1);
vm.settop(1);
return false;
}","public boolean luaStackCall(VM vm){
switch (id) {
case 0:
{
      install();
      vm.pushnil();
      break;
    }
case 1:
{
    Closure c=(Closure)vm.topointer(2);
    vm.pushlvalue(new LThread(c));
    break;
  }
case 2:
{
  LThread t=(LThread)vm.topointer(2);
  t.resumeFrom(vm,vm.gettop() - 2);
  return false;
}
case 3:
{
LThread r=LThread.getRunning();
if (r != null) {
  vm.pushlvalue(r);
}
 else {
  vm.pushnil();
}
break;
}
case 4:
{
vm.pushstring(((LThread)vm.topointer(2)).getStatus());
break;
}
case 5:
{
Closure c=(Closure)vm.topointer(2);
vm.pushlvalue(new CoroutinesLib(7,new LThread(c)));
break;
}
case 6:
{
LThread r=LThread.getRunning();
if (r == null) vm.error(""String_Node_Str"");
 else {
return r.yield();
}
}
case 7:
{
LThread t=this.thread;
t.resumeFrom(vm,vm.gettop() - 1);
vm.remove(1);
return false;
}
}
vm.insert(1);
vm.settop(1);
return false;
}",0.674542232722977
44024,"/** 
 * This needs to leave any values returned by yield in the corouting  on the calling vm stack
 * @param vm
 * @param prior
 */
public void resumeFrom(VM vm,LThread prior){
  if (status == STATUS_DEAD) {
    vm.settop(0);
    vm.pushboolean(false);
    vm.pushstring(""String_Node_Str"");
    return;
  }
  if (prior != null)   prior.status=STATUS_NORMAL;
  try {
    if (threadVm.cc < 0) {
      vm.xmove(threadVm,vm.gettop() - 2);
      threadVm.prepStackCall();
    }
 else {
      threadVm.settop(0);
      vm.xmove(threadVm,vm.gettop() - 2);
    }
    status=STATUS_ACTIVE;
    while (threadVm.cc >= 0 && status == STATUS_ACTIVE)     threadVm.exec();
    vm.settop(0);
    vm.pushboolean(true);
    if (threadVm.cc >= 0) {
      threadVm.xmove(vm,threadVm.gettop() - 1);
    }
 else {
      threadVm.base=0;
      threadVm.xmove(vm,threadVm.gettop());
    }
  }
 catch (  Throwable t) {
    status=STATUS_DEAD;
    vm.settop(0);
    vm.pushboolean(false);
    vm.pushstring(""String_Node_Str"" + t);
  }
 finally {
    if (threadVm.cc < 0)     status=STATUS_DEAD;
    if (prior != null)     prior.status=STATUS_ACTIVE;
  }
}","/** 
 * This needs to leave any values returned by yield in the coroutine  on the calling vm stack
 * @param vm
 * @param nargs 
 */
public void resumeFrom(VM vm,int nargs){
  if (status == STATUS_DEAD) {
    vm.error(""String_Node_Str"");
    return;
  }
  LThread prior=running;
  try {
    running=this;
    if (prior != null)     prior.status=STATUS_NORMAL;
    status=STATUS_RUNNING;
    if (threadVm.cc < 0) {
      vm.xmove(threadVm,nargs);
      threadVm.prepStackCall();
    }
 else {
      threadVm.settop(0);
      vm.xmove(threadVm,nargs);
    }
    while (threadVm.cc >= 0 && status == STATUS_RUNNING)     threadVm.exec();
    vm.settop(0);
    vm.pushboolean(true);
    if (threadVm.cc >= 0) {
      threadVm.xmove(vm,threadVm.gettop() - 1);
    }
 else {
      threadVm.base=0;
      threadVm.xmove(vm,threadVm.gettop());
    }
  }
 catch (  Throwable t) {
    status=STATUS_DEAD;
    vm.settop(0);
    vm.pushboolean(false);
    vm.pushstring(""String_Node_Str"" + t);
  }
 finally {
    running=prior;
    if (running != null)     running.status=STATUS_RUNNING;
    if (threadVm.cc < 0)     status=STATUS_DEAD;
  }
}",0.8051372896368467
44025,"public boolean yield(){
  if (status == STATUS_ACTIVE)   status=STATUS_SUSPENDED;
  return true;
}","public boolean yield(){
  if (status == STATUS_RUNNING)   status=STATUS_SUSPENDED;
  return true;
}",0.9441624365482234
44026,"public boolean luaStackCall(VM vm){
switch (id) {
case 0:
{
      install();
      vm.pushnil();
      break;
    }
case 1:
{
    Closure c=(Closure)vm.topointer(2);
    vm.pushlvalue(new LThread(c));
    break;
  }
case 2:
{
  LThread t=(LThread)vm.topointer(2);
  t.resumeFrom(vm,vm.gettop() - 2);
  return false;
}
case 3:
{
LThread r=LThread.getRunning();
if (r != null) {
  vm.pushlvalue(r);
}
 else {
  vm.pushnil();
}
break;
}
case 4:
{
vm.pushstring(((LThread)vm.topointer(2)).getStatus());
break;
}
case 5:
{
Closure c=(Closure)vm.topointer(2);
vm.pushlvalue(new CoroutinesLib(7,new LThread(c)));
break;
}
case 6:
{
LThread r=LThread.getRunning();
if (r == null) vm.error(""String_Node_Str"");
 else {
return r.yield();
}
}
case 7:
{
LThread t=this.thread;
t.resumeFrom(vm,vm.gettop() - 1);
vm.remove(1);
return false;
}
}
vm.insert(1);
vm.settop(1);
return false;
}","public boolean luaStackCall(VM vm){
switch (id) {
case 0:
{
      install();
      vm.pushnil();
      break;
    }
case 1:
{
    Closure c=(Closure)vm.topointer(2);
    vm.pushlvalue(new LThread(c));
    break;
  }
case 2:
{
  LThread t=(LThread)vm.topointer(2);
  t.resumeFrom(vm,vm.gettop() - 2);
  return false;
}
case 3:
{
LThread r=LThread.getRunning();
if (r != null) {
  vm.pushlvalue(r);
}
 else {
  vm.pushnil();
}
break;
}
case 4:
{
vm.pushstring(((LThread)vm.topointer(2)).getStatus());
break;
}
case 5:
{
Closure c=(Closure)vm.topointer(2);
vm.pushlvalue(new CoroutinesLib(7,new LThread(c)));
break;
}
case 6:
{
LThread r=LThread.getRunning();
if (r == null) vm.error(""String_Node_Str"");
 else {
return r.yield();
}
}
case 7:
{
LThread t=this.thread;
t.resumeFrom(vm,vm.gettop() - 1);
if (vm.toboolean(1)) vm.remove(1);
 else vm.error(vm.tostring(2),0);
return false;
}
}
vm.insert(1);
vm.settop(1);
return false;
}",0.9594669627984452
44027,"public boolean luaStackCall(VM vm){
switch (id) {
case ASSERT:
{
      if (!vm.getArgAsBoolean(0)) {
        String message;
        if (vm.getArgCount() > 1) {
          message=vm.getArgAsString(1);
        }
 else {
          message=""String_Node_Str"";
        }
        throw new RuntimeException(message);
      }
      vm.setResult();
    }
  break;
case LOADFILE:
loadfile(vm,vm.getArgAsString(0));
break;
case TONUMBER:
vm.setResult(toNumber(vm));
break;
case RAWGET:
{
LValue t=vm.getArg(0);
LValue k=vm.getArg(1);
LValue result=LNil.NIL;
if (t instanceof LTable) {
result=((LTable)t).get(k);
}
vm.setResult(result);
}
break;
case RAWSET:
{
LValue t=vm.getArg(0);
LValue k=vm.getArg(1);
LValue v=vm.getArg(2);
vm.setResult();
if (t instanceof LTable) {
((LTable)t).put(k,v);
}
 else {
vm.error(""String_Node_Str"");
}
}
break;
case SETFENV:
setfenv((StackState)vm);
break;
case SELECT:
select(vm);
break;
case COLLECTGARBAGE:
System.gc();
vm.setResult();
break;
case DOFILE:
dofile(vm);
break;
case LOADSTRING:
loadstring(vm,vm.getArg(0),vm.getArgAsString(1));
break;
case LOAD:
load(vm,vm.getArg(0),vm.getArgAsString(1));
break;
case TOSTRING:
vm.setResult(tostring(vm,vm.getArg(0)));
break;
case UNPACK:
unpack(vm);
break;
case NEXT:
vm.setResult(next(vm,vm.getArg(0),vm.getArgAsInt(1)));
break;
case MODULE:
module(vm);
break;
case REQUIRE:
require(vm);
break;
case ABS:
vm.setResult(abs(vm.getArg(0)));
break;
case COS:
vm.setResult(new LDouble(Math.cos(vm.getArgAsDouble(0))));
break;
case MAX:
vm.setResult(max(vm.getArg(0),vm.getArg(1)));
break;
case MIN:
vm.setResult(min(vm.getArg(0),vm.getArg(1)));
break;
case MODF:
modf(vm);
break;
case SIN:
vm.setResult(new LDouble(Math.sin(vm.getArgAsDouble(0))));
break;
case SQRT:
vm.setResult(new LDouble(Math.sqrt(vm.getArgAsDouble(0))));
break;
case CEIL:
vm.setResult(LInteger.valueOf((int)Math.ceil(vm.getArgAsDouble(0))));
break;
case FLOOR:
vm.setResult(LInteger.valueOf((int)Math.floor(vm.getArgAsDouble(0))));
break;
case BYTE:
StrLib.byte_(vm);
break;
case CHAR:
StrLib.char_(vm);
break;
case DUMP:
StrLib.dump(vm);
break;
case FIND:
StrLib.find(vm);
break;
case FORMAT:
StrLib.format(vm);
break;
case GMATCH:
StrLib.gmatch(vm);
break;
case GSUB:
StrLib.gsub(vm);
break;
case LEN:
StrLib.len(vm);
break;
case LOWER:
StrLib.lower(vm);
break;
case MATCH:
StrLib.match(vm);
break;
case REP:
StrLib.rep(vm);
break;
case REVERSE:
StrLib.reverse(vm);
break;
case SUB:
StrLib.sub(vm);
break;
case UPPER:
StrLib.upper(vm);
break;
case LOADLIB:
loadlib(vm);
break;
case SEEALL:
seeall(vm);
break;
case CONCAT:
concat(vm);
break;
case INSERT:
insert(vm);
break;
case MAXN:
maxn(vm);
break;
case REMOVE:
remove(vm);
break;
case SORT:
sort(vm);
break;
default :
luaUnsupportedOperation();
}
return false;
}","public boolean luaStackCall(VM vm){
switch (id) {
case LOADFILE:
    loadfile(vm,vm.getArgAsString(0));
  break;
case TONUMBER:
vm.setResult(toNumber(vm));
break;
case RAWGET:
{
LValue t=vm.getArg(0);
LValue k=vm.getArg(1);
LValue result=LNil.NIL;
if (t instanceof LTable) {
result=((LTable)t).get(k);
}
vm.setResult(result);
}
break;
case RAWSET:
{
LValue t=vm.getArg(0);
LValue k=vm.getArg(1);
LValue v=vm.getArg(2);
vm.setResult();
if (t instanceof LTable) {
((LTable)t).put(k,v);
}
 else {
vm.error(""String_Node_Str"");
}
}
break;
case SETFENV:
setfenv((StackState)vm);
break;
case SELECT:
select(vm);
break;
case COLLECTGARBAGE:
System.gc();
vm.setResult();
break;
case DOFILE:
dofile(vm);
break;
case LOADSTRING:
loadstring(vm,vm.getArg(0),vm.getArgAsString(1));
break;
case LOAD:
load(vm,vm.getArg(0),vm.getArgAsString(1));
break;
case TOSTRING:
vm.setResult(tostring(vm,vm.getArg(0)));
break;
case UNPACK:
unpack(vm);
break;
case NEXT:
vm.setResult(next(vm,vm.getArg(0),vm.getArgAsInt(1)));
break;
case MODULE:
module(vm);
break;
case REQUIRE:
require(vm);
break;
case ABS:
vm.setResult(abs(vm.getArg(0)));
break;
case COS:
vm.setResult(new LDouble(Math.cos(vm.getArgAsDouble(0))));
break;
case MAX:
vm.setResult(max(vm.getArg(0),vm.getArg(1)));
break;
case MIN:
vm.setResult(min(vm.getArg(0),vm.getArg(1)));
break;
case MODF:
modf(vm);
break;
case SIN:
vm.setResult(new LDouble(Math.sin(vm.getArgAsDouble(0))));
break;
case SQRT:
vm.setResult(new LDouble(Math.sqrt(vm.getArgAsDouble(0))));
break;
case CEIL:
vm.setResult(LInteger.valueOf((int)Math.ceil(vm.getArgAsDouble(0))));
break;
case FLOOR:
vm.setResult(LInteger.valueOf((int)Math.floor(vm.getArgAsDouble(0))));
break;
case BYTE:
StrLib.byte_(vm);
break;
case CHAR:
StrLib.char_(vm);
break;
case DUMP:
StrLib.dump(vm);
break;
case FIND:
StrLib.find(vm);
break;
case FORMAT:
StrLib.format(vm);
break;
case GMATCH:
StrLib.gmatch(vm);
break;
case GSUB:
StrLib.gsub(vm);
break;
case LEN:
StrLib.len(vm);
break;
case LOWER:
StrLib.lower(vm);
break;
case MATCH:
StrLib.match(vm);
break;
case REP:
StrLib.rep(vm);
break;
case REVERSE:
StrLib.reverse(vm);
break;
case SUB:
StrLib.sub(vm);
break;
case UPPER:
StrLib.upper(vm);
break;
case LOADLIB:
loadlib(vm);
break;
case SEEALL:
seeall(vm);
break;
case CONCAT:
concat(vm);
break;
case INSERT:
insert(vm);
break;
case MAXN:
maxn(vm);
break;
case REMOVE:
remove(vm);
break;
case SORT:
sort(vm);
break;
default :
luaUnsupportedOperation();
}
return false;
}",0.9402527767139028
44028,"/** 
 * Invoke a builtin
 */
public int invoke(VM vm){
switch (id) {
case PRINT:
{
      int n=vm.gettop();
      for (int i=1; i <= n; i++) {
        if (i > 1)         stdout.print(""String_Node_Str"");
        stdout.print(vm.topointer(i).toJavaString());
      }
      stdout.println();
      return 0;
    }
case PAIRS:
case IPAIRS:
{
    LValue v=vm.topointer(1);
    LValue r=v.luaPairs(id == PAIRS);
    vm.pushlvalue(r);
    return 1;
  }
case GETMETATABLE:
return vm.getmetatable(1);
case SETMETATABLE:
vm.setmetatable(1);
return 1;
case TYPE:
{
LValue v=vm.topointer(1);
vm.pushlstring(v.luaGetTypeName());
return 1;
}
case PCALL:
{
int n=vm.gettop();
int s=vm.pcall(n - 1,Lua.LUA_MULTRET,0);
if (s == 0) {
vm.pushboolean(true);
vm.insert(1);
return vm.gettop();
}
 else {
vm.pushboolean(false);
vm.insert(-2);
return 2;
}
}
default :
luaUnsupportedOperation();
return 0;
}
}","/** 
 * Invoke a builtin
 */
public int invoke(VM vm){
switch (id) {
case PRINT:
{
      int n=vm.gettop();
      for (int i=1; i <= n; i++) {
        if (i > 1)         stdout.print(""String_Node_Str"");
        stdout.print(vm.topointer(i).toJavaString());
      }
      stdout.println();
      return 0;
    }
case PAIRS:
case IPAIRS:
{
    LValue v=vm.topointer(1);
    LValue r=v.luaPairs(id == PAIRS);
    vm.pushlvalue(r);
    return 1;
  }
case GETMETATABLE:
return vm.getmetatable(1);
case SETMETATABLE:
vm.setmetatable(1);
return 1;
case TYPE:
{
LValue v=vm.topointer(1);
vm.pushlstring(v.luaGetTypeName());
return 1;
}
case PCALL:
{
int n=vm.gettop();
int s=vm.pcall(n - 1,Lua.LUA_MULTRET,0);
if (s == 0) {
vm.pushboolean(true);
vm.insert(1);
return vm.gettop();
}
 else {
vm.pushboolean(false);
vm.insert(-2);
return 2;
}
}
case ERROR:
{
vm.error(vm.tostring(1),vm.gettop() > 1 ? vm.tointeger(2) : 1);
}
case ASSERT:
{
if (!vm.toboolean(1)) {
vm.error(vm.gettop() > 1 ? vm.tostring(2) : ""String_Node_Str"",0);
}
 else {
return vm.gettop();
}
}
default :
luaUnsupportedOperation();
return 0;
}
}",0.8897835933568193
44029,"/** 
 * Raises an error.   The message is pushed onto the stack and used as the error message.   It also adds at the beginning of the message the file name and the line number where  the error occurred, if this information is available. In the java implementation this throws a RuntimeException, possibly filling  line number information first.
 */
public void error(String message);","/** 
 * Raises an error.   The message is pushed onto the stack and used as the error message.   It also adds at the beginning of the message the file name and the line number where  the error occurred, if this information is available. In the java implementation this throws a RuntimeException, possibly filling  line number information first.
 */
public void error(String message,int level);",0.9871134020618556
44030,"public void error(String message){
  super.error(getFileLine(cc) + ""String_Node_Str"" + message);
}","public void error(String message){
  error(message,1);
}",0.7012987012987013
44031,"public void exec(){
  try {
    super.exec();
  }
 catch (  AbortException e) {
  }
catch (  Exception t) {
    t.printStackTrace();
    printLuaTrace();
    System.out.flush();
  }
}","public void exec(){
  try {
    super.exec();
  }
 catch (  AbortException e) {
  }
}",0.6343283582089553
44032,"/** 
 * This needs to leave any values returned by yield in the coroutine  on the calling vm stack
 * @param vm
 * @param nargs 
 */
public void resumeFrom(VM vm,int nargs){
  if (status == STATUS_DEAD) {
    vm.error(""String_Node_Str"");
    return;
  }
  LThread prior=running;
  try {
    running=this;
    if (prior != null)     prior.status=STATUS_NORMAL;
    status=STATUS_RUNNING;
    if (threadVm.cc < 0) {
      vm.xmove(threadVm,nargs);
      threadVm.prepStackCall();
    }
 else {
      threadVm.settop(0);
      vm.xmove(threadVm,nargs);
    }
    while (threadVm.cc >= 0 && status == STATUS_RUNNING)     threadVm.exec();
    vm.settop(0);
    vm.pushboolean(true);
    if (threadVm.cc >= 0) {
      threadVm.xmove(vm,threadVm.gettop() - 1);
    }
 else {
      threadVm.base=0;
      threadVm.xmove(vm,threadVm.gettop());
    }
  }
 catch (  Throwable t) {
    status=STATUS_DEAD;
    vm.settop(0);
    vm.pushboolean(false);
    vm.pushstring(""String_Node_Str"" + t);
  }
 finally {
    running=prior;
    if (running != null)     running.status=STATUS_RUNNING;
    if (threadVm.cc < 0)     status=STATUS_DEAD;
  }
}","/** 
 * This needs to leave any values returned by yield in the coroutine  on the calling vm stack
 * @param vm
 * @param nargs 
 */
public void resumeFrom(VM vm,int nargs){
  if (status == STATUS_DEAD) {
    vm.settop(0);
    vm.pushboolean(false);
    vm.pushstring(""String_Node_Str"");
    return;
  }
  LThread prior=running;
  try {
    running=this;
    if (prior != null)     prior.status=STATUS_NORMAL;
    status=STATUS_RUNNING;
    if (threadVm.cc < 0) {
      vm.xmove(threadVm,nargs);
      threadVm.prepStackCall();
    }
 else {
      threadVm.settop(0);
      vm.xmove(threadVm,nargs);
    }
    while (threadVm.cc >= 0 && status == STATUS_RUNNING)     threadVm.exec();
    vm.settop(0);
    vm.pushboolean(true);
    if (threadVm.cc >= 0) {
      threadVm.xmove(vm,threadVm.gettop() - 1);
    }
 else {
      threadVm.base=0;
      threadVm.xmove(vm,threadVm.gettop());
    }
  }
 catch (  Throwable t) {
    status=STATUS_DEAD;
    vm.settop(0);
    vm.pushboolean(false);
    vm.pushstring(""String_Node_Str"" + t);
  }
 finally {
    running=prior;
    if (running != null)     running.status=STATUS_RUNNING;
    if (threadVm.cc < 0)     status=STATUS_DEAD;
  }
}",0.974003466204506
44033,"/** 
 * Get the current line number
 * @param pc program counter
 * @return the line number corresponding to the pc
 */
private int getLineNumber(CallInfo ci){
  int[] lineNumbers=ci.closure.p.lineinfo;
  int pc=ci.pc;
  int line=(lineNumbers != null && lineNumbers.length > pc ? lineNumbers[pc] : -1);
  return line;
}","/** 
 * Get the current line number
 * @param pc program counter
 * @return the line number corresponding to the pc
 */
private int getLineNumber(CallInfo ci){
  int[] lineNumbers=ci.closure.p.lineinfo;
  int pc=(ci != calls[cc] ? ci.pc - 1 : ci.pc);
  int line=(lineNumbers != null && lineNumbers.length > pc ? lineNumbers[pc] : -1);
  return line;
}",0.9373134328358208
44034,"public Variable[] getStack(int index){
  if (index < 0 || index >= calls.length) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Vector variables=new Vector();
  Hashtable variablesSeen=new Hashtable();
  for (int i=index; i >= 0; i--) {
    addVariables(variables,variablesSeen,i);
  }
  Variable[] result=new Variable[variables.size()];
  for (int i=0; i < variables.size(); i++) {
    result[i]=(Variable)variables.elementAt(i);
  }
  return result;
}","/** 
 * Returns the visible local variables on a stack frame.
 * @param index The stack frame index
 * @return the visible local variables on the given stack frame.
 */
public Variable[] getStack(int index){
  if (index < 0 || index >= calls.length) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Vector variables=new Vector();
  Hashtable variablesSeen=new Hashtable();
  for (int i=index; i >= 0; i--) {
    addVariables(variables,variablesSeen,i);
  }
  Variable[] result=new Variable[variables.size()];
  for (int i=0; i < variables.size(); i++) {
    result[i]=(Variable)variables.elementAt(i);
  }
  return result;
}",0.8462238398544131
44035,"/** 
 * Returns the visible local variables on a stack frame.
 * @param index The stack frame index
 * @return the visible local variables on the given stack frame.
 */
public Variable[] getStack(int index){
  if (index < 0 || index >= calls.length) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Vector variables=new Vector();
  Hashtable variablesSeen=new Hashtable();
  addVariables(variables,variablesSeen,index);
  Variable[] result=new Variable[variables.size()];
  for (int i=0; i < variables.size(); i++) {
    result[i]=(Variable)variables.elementAt(i);
  }
  return result;
}","/** 
 * Returns the visible local variables on a stack frame.
 * @param index The stack frame index
 * @return the visible local variables on the given stack frame.
 */
public Variable[] getStack(int index){
  if (index < 0 || index >= calls.length) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Vector variables=new Vector();
  Hashtable variablesSeen=new Hashtable();
  Proto p=calls[index].closure.p;
  for (int i=index; i >= 0; i--) {
    if (i == index || isInScope(p,calls[i])) {
      addVariables(variables,variablesSeen,i);
    }
  }
  Variable[] result=new Variable[variables.size()];
  for (int i=0; i < variables.size(); i++) {
    result[i]=(Variable)variables.elementAt(i);
  }
  return result;
}",0.8954545454545455
44036,"public TableVariable(int index,String name,int type,LTable table){
  super(index,name,type,null);
  int size=table.size();
  DebugUtils.println(""String_Node_Str"" + size);
  this.keys=new String[size];
  this.values=new Object[size];
  LValue[] keyValues=table.getKeys();
  for (int i=0; i < size; i++) {
    this.keys[i]=keyValues[i].toString();
    LValue value=table.get(keyValues[i]);
    if (value instanceof LTable) {
      this.values[i]=new TableVariable(i,""String_Node_Str"",Lua.LUA_TTABLE,(LTable)value);
    }
 else {
      this.values[i]=value.toString();
    }
    DebugUtils.println(""String_Node_Str"" + keys[i] + ""String_Node_Str""+ values[i].toString()+ ""String_Node_Str"");
  }
}","public TableVariable(int index,String name,int type,LTable table){
  super(index,name,type,null);
  int size=table.size();
  DebugUtils.println(""String_Node_Str"" + size);
  List keyArray=new ArrayList();
  List valueArray=new ArrayList();
  LValue[] keyValues=table.getKeys();
  for (int i=0; i < size; i++) {
    LValue value=table.get(keyValues[i]);
    if (value == table) {
      continue;
    }
    keyArray.add(keyValues[i].toString());
    if (value instanceof LTable) {
      DebugUtils.println(""String_Node_Str"" + i + ""String_Node_Str""+ value.toString());
      valueArray.add(new TableVariable(i,""String_Node_Str"" + keyValues[i].toString() + ""String_Node_Str"",Lua.LUA_TTABLE,(LTable)value));
    }
 else {
      valueArray.add(value.toString());
    }
    DebugUtils.println(""String_Node_Str"" + keyValues[i].toString() + ""String_Node_Str""+ value.toString()+ ""String_Node_Str"");
  }
  this.keys=(String[])keyArray.toArray(new String[0]);
  this.values=valueArray.toArray();
}",0.466865671641791
44037,"public void luaGetTable(VM vm,LValue table,LValue key){
  vm.push(this);
  vm.push(table);
  vm.push(key);
  vm.setExpectedResultCount(1);
  if (this.luaStackCall(vm))   vm.execute();
 else   vm.adjustResults();
}","public void luaGetTable(VM vm,LValue table,LValue key){
  vm.newCall();
  vm.push(this);
  vm.push(table);
  vm.push(key);
  vm.setExpectedResultCount(1);
  if (this.luaStackCall(vm))   vm.execute();
 else   vm.adjustResults();
}",0.9638009049773756
44038,"public void luaSetTable(VM vm,LValue table,LValue key,LValue val){
  vm.push(this);
  vm.push(table);
  vm.push(key);
  vm.push(val);
  vm.setExpectedResultCount(0);
  if (this.luaStackCall(vm))   vm.execute();
 else   vm.adjustResults();
}","public void luaSetTable(VM vm,LValue table,LValue key,LValue val){
  vm.newCall();
  vm.push(this);
  vm.push(table);
  vm.push(key);
  vm.push(val);
  vm.setExpectedResultCount(0);
  if (this.luaStackCall(vm))   vm.execute();
 else   vm.adjustResults();
}",0.967741935483871
44039,"public void luaGetTable(VM vm,LValue table,LValue key){
  final String s=key.luaAsString();
  try {
    Field f=clazz.getField(s);
    Object o=f.get(m_instance);
    LValue v=CoerceJavaToLua.coerce(o);
    vm.push(v);
  }
 catch (  NoSuchFieldException nsfe) {
    vm.setResult(new LMethod(m_instance,clazz,s));
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","public void luaGetTable(VM vm,LValue table,LValue key){
  final String s=key.luaAsString();
  try {
    Field f=clazz.getField(s);
    Object o=f.get(m_instance);
    LValue v=CoerceJavaToLua.coerce(o);
    vm.push(v);
  }
 catch (  NoSuchFieldException nsfe) {
    vm.push(new LMethod(m_instance,clazz,s));
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9828269484808454
44040,"public static void main(String[] args) throws IOException {
  LuaJava.install();
  String script=(args.length > 0 ? args[0] : ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + script + ""String_Node_Str"");
  StackState state=new StackState();
  InputStream is=LuaJavaAppRunner.class.getResourceAsStream(script);
  Proto p=LoadState.undump(state,is,script);
  Closure c=new Closure(state,p);
  state.doCall(c,new LValue[0]);
}","public static void main(String[] args) throws IOException {
  LuaCompat.install();
  LuaJava.install();
  String script=(args.length > 0 ? args[0] : ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + script + ""String_Node_Str"");
  StackState state=new StackState();
  InputStream is=LuaJavaAppRunner.class.getResourceAsStream(script);
  Proto p=LoadState.undump(state,is,script);
  Closure c=new Closure(state,p);
  state.doCall(c,new LValue[0]);
}",0.9742441209406496
44041,"public void exec(){
  int i, a, b, c, o, n, cb;
  LValue rkb, rkc, nvarargs, key, val;
  StringBuffer sb;
  LValue i0, step, idx, limit, init, table;
  boolean back, body;
  Proto proto;
  Closure newClosure;
  int[] code=p.code;
  while (true) {
    if (DEBUG)     Print.printState(state,base,top,state.avail,cl,pc);
    i=code[pc++];
    a=StackState.GETARG_A(i);
switch (StackState.GET_OPCODE(i)) {
case StackState.OP_MOVE:
{
        b=StackState.GETARG_B(i);
        this.stack[base + a]=this.stack[base + b];
        continue;
      }
case StackState.OP_LOADK:
{
      b=StackState.GETARG_Bx(i);
      this.stack[base + a]=k[b];
      continue;
    }
case StackState.OP_LOADBOOL:
{
    b=StackState.GETARG_B(i);
    c=StackState.GETARG_C(i);
    this.stack[base + a]=(b != 0 ? LBoolean.TRUE : LBoolean.FALSE);
    if (c != 0)     pc++;
    continue;
  }
case StackState.OP_LOADNIL:
{
  b=StackState.GETARG_B(i);
  do {
    this.stack[base + b]=LNil.NIL;
  }
 while ((--b) >= a);
  continue;
}
case StackState.OP_GETUPVAL:
{
b=StackState.GETARG_B(i);
this.stack[base + a]=cl.upVals[b].getValue();
continue;
}
case StackState.OP_GETGLOBAL:
{
b=StackState.GETARG_Bx(i);
key=k[b];
table=cl.env;
table.luaGetTable(this,base + a,table,key);
continue;
}
case StackState.OP_GETTABLE:
{
b=StackState.GETARG_B(i);
key=GETARG_RKC(i);
table=this.stack[base + b];
table.luaGetTable(this,base + a,table,key);
continue;
}
case StackState.OP_SETGLOBAL:
{
b=StackState.GETARG_Bx(i);
key=k[b];
val=this.stack[base + a];
table=cl.env;
table.luaSetTable(this,this.state.avail,table,key,val);
continue;
}
case StackState.OP_SETUPVAL:
{
b=StackState.GETARG_B(i);
cl.upVals[b].setValue(this.stack[base + a]);
continue;
}
case StackState.OP_SETTABLE:
{
key=GETARG_RKB(i);
val=GETARG_RKC(i);
table=this.stack[base + a];
table.luaSetTable(this,state.avail,table,key,val);
continue;
}
case StackState.OP_NEWTABLE:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
this.stack[base + a]=new LTable(b,c);
continue;
}
case StackState.OP_SELF:
{
rkb=GETARG_RKB(i);
rkc=GETARG_RKC(i);
this.stack[base + a + 1]=rkb;
rkb.luaGetTable(this,base + a,rkb,rkc);
continue;
}
case StackState.OP_ADD:
case StackState.OP_SUB:
case StackState.OP_MUL:
case StackState.OP_DIV:
case StackState.OP_MOD:
case StackState.OP_POW:
{
o=StackState.GET_OPCODE(i);
rkb=GETARG_RKB(i);
rkc=GETARG_RKC(i);
this.stack[base + a]=rkc.luaBinOpUnknown(o,rkb);
continue;
}
case StackState.OP_UNM:
{
rkb=GETARG_RKB(i);
this.stack[base + a]=rkb.luaUnaryMinus();
continue;
}
case StackState.OP_NOT:
{
rkb=GETARG_RKB(i);
this.stack[base + a]=(rkb.luaAsBoolean() ? LBoolean.TRUE : LBoolean.FALSE);
continue;
}
case StackState.OP_LEN:
{
rkb=GETARG_RKB(i);
this.stack[base + a]=rkb.luaLength();
continue;
}
case StackState.OP_CONCAT:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
sb=new StringBuffer();
for (int j=b; j <= c; j++) sb.append(this.stack[base + j].luaAsString());
this.stack[base + a]=new LString(sb.toString());
continue;
}
case StackState.OP_JMP:
{
pc+=StackState.GETARG_sBx(i);
continue;
}
case StackState.OP_EQ:
case StackState.OP_LT:
case StackState.OP_LE:
{
o=StackState.GET_OPCODE(i);
rkb=GETARG_RKB(i);
rkc=GETARG_RKC(i);
boolean test=rkc.luaBinCmpUnknown(o,rkb);
if (test) pc++;
continue;
}
case StackState.OP_TEST:
{
c=StackState.GETARG_C(i);
if (this.stack[base + a].luaAsBoolean() != (c != 0)) pc++;
continue;
}
case StackState.OP_TESTSET:
{
rkb=GETARG_RKB(i);
c=StackState.GETARG_C(i);
if (rkb.luaAsBoolean() != (c != 0)) pc++;
 else this.stack[base + a]=rkb;
continue;
}
case StackState.OP_CALL:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
if (b != 0) top=base + a + b;
this.stack[base + a].luaStackCall(this,base + a,top,c - 1);
if (this.state.calls[this.state.cc] != this) return;
if (c > 0) adjustTop(base + a + c - 1);
continue;
}
case StackState.OP_TAILCALL:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
if (b != 0) top=base + a + b;
close(base);
this.stack[base + a].luaStackCall(this,base + a,top,c - 1);
if (this.state.calls[this.state.cc] != this) {
CallFrame ci=this.state.calls[this.state.cc];
n=ci.top - ci.base;
System.arraycopy(this.stack,ci.base,this.stack,base,n);
ci.base=base;
ci.top=base + n;
this.state.calls[this.state.cc - 1]=this.state.calls[this.state.cc];
--this.state.cc;
return;
}
continue;
}
case StackState.OP_RETURN:
{
b=StackState.GETARG_B(i);
if (b != 0) top=base + a + b - 1;
close(base);
n=top - (base + a);
System.arraycopy(this.stack,base + a,this.stack,base - 1,n);
top=base - 1 + n;
if (nresults >= 0) adjustTop(base + nresults);
done=true;
if (--state.cc >= 0) {
CallFrame call=state.calls[state.cc];
call.top=top;
}
return;
}
case StackState.OP_FORLOOP:
{
i0=this.stack[base + a];
step=this.stack[base + a + 2];
idx=step.luaBinOpUnknown(Lua.OP_ADD,i0);
limit=this.stack[base + a + 1];
back=step.luaBinCmpInteger(Lua.OP_LT,0);
body=(back ? idx.luaBinCmpUnknown(Lua.OP_LE,limit) : limit.luaBinCmpUnknown(Lua.OP_LE,idx));
if (body) {
this.stack[base + a]=idx;
this.stack[base + a + 3]=idx;
pc+=StackState.GETARG_sBx(i);
}
continue;
}
case StackState.OP_FORPREP:
{
init=this.stack[base + a];
step=this.stack[base + a + 2];
this.stack[base + a]=step.luaBinOpUnknown(Lua.OP_SUB,init);
b=StackState.GETARG_sBx(i);
pc+=b;
continue;
}
case StackState.OP_TFORLOOP:
{
cb=a + 3;
System.arraycopy(this.stack,base + a,this.stack,base + cb,3);
top=base + cb + 3;
c=StackState.GETARG_C(i);
this.stack[base + a].luaStackCall(this,base + cb,top,c - 1);
if (this.stack[base + cb] != LNil.NIL) {
this.stack[base + cb - 1]=this.stack[base + cb];
}
 else {
pc++;
}
continue;
}
case StackState.OP_SETLIST:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
if (b == 0) {
b=top - 1;
}
if (c == 0) {
c=code[pc++];
}
table=this.stack[base + a];
for (int index=1; index <= b; index++) {
val=this.stack[base + a + index];
table.luaSetTable(this,this.state.avail,table,new LInteger(index),val);
}
top=base + a - 1;
continue;
}
case StackState.OP_CLOSE:
{
close(a);
continue;
}
case StackState.OP_CLOSURE:
{
b=StackState.GETARG_Bx(i);
proto=cl.p.p[b];
newClosure=new Closure(this.state,proto);
for (int j=0; j < newClosure.upVals.length; j++, pc++) {
i=code[pc];
o=StackState.GET_OPCODE(i);
b=StackState.GETARG_B(i);
if (o == StackState.OP_GETUPVAL) {
newClosure.upVals[j]=cl.upVals[b];
}
 else if (o == StackState.OP_MOVE) {
newClosure.upVals[j]=findUpVal(proto.upvalues[j],base + b);
}
 else {
throw new java.lang.IllegalArgumentException(""String_Node_Str"" + o);
}
}
this.stack[base + a]=newClosure;
continue;
}
case StackState.OP_VARARG:
{
b=StackState.GETARG_B(i) - 1;
nvarargs=this.stack[base - 1];
n=nvarargs.luaAsInt();
if (b == StackState.LUA_MULTRET) {
b=n;
}
for (int j=0; j < b; j++) this.stack[base + a + j]=(j < n ? this.stack[base - n + j - 1] : LNil.NIL);
top=base + a + b;
continue;
}
}
}
}","public void exec(){
  int i, a, b, c, o, n, cb;
  LValue rkb, rkc, nvarargs, key, val;
  StringBuffer sb;
  LValue i0, step, idx, limit, init, table;
  boolean back, body;
  Proto proto;
  Closure newClosure;
  int[] code=p.code;
  while (true) {
    if (DEBUG)     Print.printState(state,base,top,state.avail,cl,pc);
    i=code[pc++];
    a=StackState.GETARG_A(i);
switch (StackState.GET_OPCODE(i)) {
case StackState.OP_MOVE:
{
        b=StackState.GETARG_B(i);
        this.stack[base + a]=this.stack[base + b];
        continue;
      }
case StackState.OP_LOADK:
{
      b=StackState.GETARG_Bx(i);
      this.stack[base + a]=k[b];
      continue;
    }
case StackState.OP_LOADBOOL:
{
    b=StackState.GETARG_B(i);
    c=StackState.GETARG_C(i);
    this.stack[base + a]=(b != 0 ? LBoolean.TRUE : LBoolean.FALSE);
    if (c != 0)     pc++;
    continue;
  }
case StackState.OP_LOADNIL:
{
  b=StackState.GETARG_B(i);
  do {
    this.stack[base + b]=LNil.NIL;
  }
 while ((--b) >= a);
  continue;
}
case StackState.OP_GETUPVAL:
{
b=StackState.GETARG_B(i);
this.stack[base + a]=cl.upVals[b].getValue();
continue;
}
case StackState.OP_GETGLOBAL:
{
b=StackState.GETARG_Bx(i);
key=k[b];
table=cl.env;
table.luaGetTable(this,base + a,table,key);
continue;
}
case StackState.OP_GETTABLE:
{
b=StackState.GETARG_B(i);
key=GETARG_RKC(i);
table=this.stack[base + b];
table.luaGetTable(this,base + a,table,key);
continue;
}
case StackState.OP_SETGLOBAL:
{
b=StackState.GETARG_Bx(i);
key=k[b];
val=this.stack[base + a];
table=cl.env;
table.luaSetTable(this,this.state.avail,table,key,val);
continue;
}
case StackState.OP_SETUPVAL:
{
b=StackState.GETARG_B(i);
cl.upVals[b].setValue(this.stack[base + a]);
continue;
}
case StackState.OP_SETTABLE:
{
key=GETARG_RKB(i);
val=GETARG_RKC(i);
table=this.stack[base + a];
table.luaSetTable(this,state.avail,table,key,val);
continue;
}
case StackState.OP_NEWTABLE:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
this.stack[base + a]=new LTable(b,c);
continue;
}
case StackState.OP_SELF:
{
rkb=GETARG_RKB(i);
rkc=GETARG_RKC(i);
this.stack[base + a + 1]=rkb;
rkb.luaGetTable(this,base + a,rkb,rkc);
continue;
}
case StackState.OP_ADD:
case StackState.OP_SUB:
case StackState.OP_MUL:
case StackState.OP_DIV:
case StackState.OP_MOD:
case StackState.OP_POW:
{
o=StackState.GET_OPCODE(i);
rkb=GETARG_RKB(i);
rkc=GETARG_RKC(i);
this.stack[base + a]=rkc.luaBinOpUnknown(o,rkb);
continue;
}
case StackState.OP_UNM:
{
rkb=GETARG_RKB(i);
this.stack[base + a]=rkb.luaUnaryMinus();
continue;
}
case StackState.OP_NOT:
{
rkb=GETARG_RKB(i);
this.stack[base + a]=(rkb.luaAsBoolean() ? LBoolean.TRUE : LBoolean.FALSE);
continue;
}
case StackState.OP_LEN:
{
rkb=GETARG_RKB(i);
this.stack[base + a]=rkb.luaLength();
continue;
}
case StackState.OP_CONCAT:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
sb=new StringBuffer();
for (int j=b; j <= c; j++) sb.append(this.stack[base + j].luaAsString());
this.stack[base + a]=new LString(sb.toString());
continue;
}
case StackState.OP_JMP:
{
pc+=StackState.GETARG_sBx(i);
continue;
}
case StackState.OP_EQ:
case StackState.OP_LT:
case StackState.OP_LE:
{
o=StackState.GET_OPCODE(i);
rkb=GETARG_RKB(i);
rkc=GETARG_RKC(i);
boolean test=rkc.luaBinCmpUnknown(o,rkb);
if (test) pc++;
continue;
}
case StackState.OP_TEST:
{
c=StackState.GETARG_C(i);
if (this.stack[base + a].luaAsBoolean() != (c != 0)) pc++;
continue;
}
case StackState.OP_TESTSET:
{
rkb=GETARG_RKB(i);
c=StackState.GETARG_C(i);
if (rkb.luaAsBoolean() != (c != 0)) pc++;
 else this.stack[base + a]=rkb;
continue;
}
case StackState.OP_CALL:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
if (b != 0) top=base + a + b;
this.stack[base + a].luaStackCall(this,base + a,top,c - 1);
if (this.state.calls[this.state.cc] != this) return;
if (c > 0) adjustTop(base + a + c - 1);
continue;
}
case StackState.OP_TAILCALL:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
if (b != 0) top=base + a + b;
close(base);
this.stack[base + a].luaStackCall(this,base + a,top,c - 1);
if (this.state.calls[this.state.cc] != this) {
CallFrame ci=this.state.calls[this.state.cc];
n=ci.top - ci.base;
System.arraycopy(this.stack,ci.base,this.stack,base,n);
ci.base=base;
ci.top=base + n;
this.state.calls[this.state.cc - 1]=this.state.calls[this.state.cc];
--this.state.cc;
return;
}
continue;
}
case StackState.OP_RETURN:
{
b=StackState.GETARG_B(i);
if (b != 0) top=base + a + b - 1;
close(base);
n=top - (base + a);
System.arraycopy(this.stack,base + a,this.stack,base - 1,n);
top=base - 1 + n;
if (nresults >= 0) adjustTop(base + nresults);
done=true;
if (--state.cc >= 0) {
CallFrame call=state.calls[state.cc];
call.top=top;
}
return;
}
case StackState.OP_FORLOOP:
{
i0=this.stack[base + a];
step=this.stack[base + a + 2];
idx=step.luaBinOpUnknown(Lua.OP_ADD,i0);
limit=this.stack[base + a + 1];
back=step.luaBinCmpInteger(Lua.OP_LT,0);
body=(back ? idx.luaBinCmpUnknown(Lua.OP_LE,limit) : limit.luaBinCmpUnknown(Lua.OP_LE,idx));
if (body) {
this.stack[base + a]=idx;
this.stack[base + a + 3]=idx;
pc+=StackState.GETARG_sBx(i);
}
continue;
}
case StackState.OP_FORPREP:
{
init=this.stack[base + a];
step=this.stack[base + a + 2];
this.stack[base + a]=step.luaBinOpUnknown(Lua.OP_SUB,init);
b=StackState.GETARG_sBx(i);
pc+=b;
continue;
}
case StackState.OP_TFORLOOP:
{
cb=a + 3;
System.arraycopy(this.stack,base + a,this.stack,base + cb,3);
top=base + cb + 3;
c=StackState.GETARG_C(i);
this.stack[base + a].luaStackCall(this,base + cb,top,c - 1);
if (this.stack[base + cb] != LNil.NIL) {
this.stack[base + cb - 1]=this.stack[base + cb];
}
 else {
pc++;
}
continue;
}
case StackState.OP_SETLIST:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
int listBase=base + a;
if (b == 0) {
b=top - listBase - 1;
}
if (c == 0) {
c=code[pc++];
}
table=this.stack[base + a];
for (int index=1; index <= b; index++) {
val=this.stack[listBase + index];
table.luaSetTable(this,this.state.avail,table,new LInteger(index),val);
}
top=base + a - 1;
continue;
}
case StackState.OP_CLOSE:
{
close(a);
continue;
}
case StackState.OP_CLOSURE:
{
b=StackState.GETARG_Bx(i);
proto=cl.p.p[b];
newClosure=new Closure(this.state,proto);
for (int j=0; j < newClosure.upVals.length; j++, pc++) {
i=code[pc];
o=StackState.GET_OPCODE(i);
b=StackState.GETARG_B(i);
if (o == StackState.OP_GETUPVAL) {
newClosure.upVals[j]=cl.upVals[b];
}
 else if (o == StackState.OP_MOVE) {
newClosure.upVals[j]=findUpVal(proto.upvalues[j],base + b);
}
 else {
throw new java.lang.IllegalArgumentException(""String_Node_Str"" + o);
}
}
this.stack[base + a]=newClosure;
continue;
}
case StackState.OP_VARARG:
{
b=StackState.GETARG_B(i) - 1;
nvarargs=this.stack[base - 1];
n=nvarargs.luaAsInt();
if (b == StackState.LUA_MULTRET) {
b=n;
}
for (int j=0; j < b; j++) this.stack[base + a + j]=(j < n ? this.stack[base - n + j - 1] : LNil.NIL);
top=base + a + b;
continue;
}
}
}
}",0.9963375329622032
44042,"public void luaStackCall(CallFrame call,int base,int top,int nresults){
  try {
    Method[] meths=clazz.getMethods();
    Method meth=null;
    Class[] paramTypes=null;
    int score=Integer.MAX_VALUE;
    int paramsBase=base + 2;
    int nargs=top - paramsBase;
    for (int i=0; i < meths.length; i++) {
      Method m=meths[i];
      String name=m.getName();
      if (s.equals(name)) {
        Class[] p=m.getParameterTypes();
        int s=CoerceLuaToJava.scoreParamTypes(call.stack,paramsBase,nargs,p);
        if (s < score) {
          meth=m;
          paramTypes=p;
          score=s;
        }
      }
    }
    Object[] args=CoerceLuaToJava.coerceArgs(call,paramsBase,nargs,paramTypes);
    Object result=meth.invoke(instance,args);
    call.stack[base]=CoerceJavaToLua.coerce(result);
    call.top=base + 1;
    call.adjustTop(base + nresults);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","public void luaStackCall(CallFrame call,int base,int top,int nresults){
  try {
    Method[] meths=clazz.getMethods();
    Method meth=null;
    Class[] paramTypes=null;
    int score=Integer.MAX_VALUE;
    int paramsBase=base + 2;
    int nargs=top - paramsBase;
    for (int i=0; i < meths.length; i++) {
      Method m=meths[i];
      String name=m.getName();
      if (s.equals(name)) {
        Class[] p=m.getParameterTypes();
        int s=CoerceLuaToJava.scoreParamTypes(call.stack,paramsBase,nargs,p);
        if (s < score) {
          meth=m;
          paramTypes=p;
          score=s;
        }
      }
    }
    Object[] args=CoerceLuaToJava.coerceArgs(call,paramsBase,nargs,paramTypes);
    Object result=meth.invoke(instance,args);
    call.stack[base]=CoerceJavaToLua.coerce(result);
    call.top=base + 1;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9796591533809784
44043,"public void exec(){
  int i, a, b, c, o, n, cb;
  LValue rkb, rkc, nvarargs, key, val;
  StringBuffer sb;
  LValue i0, step, idx, limit, init, table;
  boolean back, body;
  Proto proto;
  Closure newClosure;
  int[] code=p.code;
  while (true) {
    if (DEBUG)     Print.printState(state,base,top,state.avail,cl,pc);
    i=code[pc++];
    a=StackState.GETARG_A(i);
switch (StackState.GET_OPCODE(i)) {
case StackState.OP_MOVE:
{
        b=StackState.GETARG_B(i);
        this.stack[base + a]=this.stack[base + b];
        continue;
      }
case StackState.OP_LOADK:
{
      b=StackState.GETARG_Bx(i);
      this.stack[base + a]=k[b];
      continue;
    }
case StackState.OP_LOADBOOL:
{
    b=StackState.GETARG_B(i);
    c=StackState.GETARG_C(i);
    this.stack[base + a]=(b != 0 ? LBoolean.TRUE : LBoolean.FALSE);
    if (c != 0)     pc++;
    continue;
  }
case StackState.OP_LOADNIL:
{
  b=StackState.GETARG_B(i);
  do {
    this.stack[base + b]=LNil.NIL;
  }
 while ((--b) >= a);
  continue;
}
case StackState.OP_GETUPVAL:
{
b=StackState.GETARG_B(i);
this.stack[base + a]=cl.upVals[b].getValue();
continue;
}
case StackState.OP_GETGLOBAL:
{
b=StackState.GETARG_Bx(i);
key=k[b];
table=cl.env;
table.luaGetTable(this,base + a,table,key);
continue;
}
case StackState.OP_GETTABLE:
{
b=StackState.GETARG_B(i);
key=GETARG_RKC(i);
table=this.stack[base + b];
table.luaGetTable(this,base + a,table,key);
continue;
}
case StackState.OP_SETGLOBAL:
{
b=StackState.GETARG_Bx(i);
key=k[b];
val=this.stack[base + a];
table=cl.env;
table.luaSetTable(this,this.state.avail,table,key,val);
continue;
}
case StackState.OP_SETUPVAL:
{
b=StackState.GETARG_B(i);
cl.upVals[b].setValue(this.stack[base + a]);
continue;
}
case StackState.OP_SETTABLE:
{
key=GETARG_RKB(i);
val=GETARG_RKC(i);
table=this.stack[base + a];
table.luaSetTable(this,state.avail,table,key,val);
continue;
}
case StackState.OP_NEWTABLE:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
this.stack[base + a]=new LTable(b,c);
continue;
}
case StackState.OP_SELF:
{
rkb=GETARG_RKB(i);
rkc=GETARG_RKC(i);
this.stack[base + a + 1]=rkb;
rkb.luaGetTable(this,base + a,rkb,rkc);
continue;
}
case StackState.OP_ADD:
case StackState.OP_SUB:
case StackState.OP_MUL:
case StackState.OP_DIV:
case StackState.OP_MOD:
case StackState.OP_POW:
{
o=StackState.GET_OPCODE(i);
rkb=GETARG_RKB(i);
rkc=GETARG_RKC(i);
this.stack[base + a]=rkc.luaBinOpUnknown(o,rkb);
continue;
}
case StackState.OP_UNM:
{
rkb=GETARG_RKB(i);
this.stack[base + a]=rkb.luaUnaryMinus();
continue;
}
case StackState.OP_NOT:
{
rkb=GETARG_RKB(i);
this.stack[base + a]=(rkb.luaAsBoolean() ? LBoolean.TRUE : LBoolean.FALSE);
continue;
}
case StackState.OP_LEN:
{
rkb=GETARG_RKB(i);
this.stack[base + a]=rkb.luaLength();
continue;
}
case StackState.OP_CONCAT:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
sb=new StringBuffer();
for (int j=b; j <= c; j++) sb.append(this.stack[base + j].luaAsString());
this.stack[base + a]=new LString(sb.toString());
continue;
}
case StackState.OP_JMP:
{
pc+=StackState.GETARG_sBx(i);
continue;
}
case StackState.OP_EQ:
case StackState.OP_LT:
case StackState.OP_LE:
{
o=StackState.GET_OPCODE(i);
rkb=GETARG_RKB(i);
rkc=GETARG_RKC(i);
boolean test=rkc.luaBinCmpUnknown(o,rkb);
if (test) pc++;
continue;
}
case StackState.OP_TEST:
{
c=StackState.GETARG_C(i);
if (this.stack[base + a].luaAsBoolean() != (c != 0)) pc++;
continue;
}
case StackState.OP_TESTSET:
{
rkb=GETARG_RKB(i);
c=StackState.GETARG_C(i);
if (rkb.luaAsBoolean() != (c != 0)) pc++;
 else this.stack[base + a]=rkb;
continue;
}
case StackState.OP_CALL:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
if (b != 0) top=base + a + b;
this.stack[base + a].luaStackCall(this,base + a,top,c - 1);
if (this.state.calls[this.state.cc] != this) return;
if (c > 0) adjustTop(base + a + c - 1);
continue;
}
case StackState.OP_TAILCALL:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
if (b != 0) top=base + a + b;
close(base);
this.stack[base + a].luaStackCall(this,base + a,top,c - 1);
if (this.state.calls[this.state.cc] != this) {
CallFrame ci=this.state.calls[this.state.cc];
n=ci.top - ci.base;
System.arraycopy(this.stack,ci.base,this.stack,base,n);
ci.base=base;
ci.top=base + n;
this.state.calls[this.state.cc - 1]=this.state.calls[this.state.cc];
--this.state.cc;
return;
}
continue;
}
case StackState.OP_RETURN:
{
b=StackState.GETARG_B(i);
if (b != 0) top=base + a + b - 1;
close(base);
n=top - (base + a);
System.arraycopy(this.stack,base + a,this.stack,base - 1,n);
top=base - 1 + n;
if (nresults >= 0) adjustTop(base + nresults);
done=true;
if (--state.cc >= 0) {
CallFrame call=state.calls[state.cc];
call.top=top;
}
return;
}
case StackState.OP_FORLOOP:
{
i0=this.stack[base + a];
step=this.stack[base + a + 2];
idx=step.luaBinOpUnknown(Lua.OP_ADD,i0);
limit=this.stack[base + a + 1];
back=step.luaBinCmpInteger(Lua.OP_LT,0);
body=(back ? idx.luaBinCmpUnknown(Lua.OP_LE,limit) : limit.luaBinCmpUnknown(Lua.OP_LE,idx));
if (body) {
this.stack[base + a]=idx;
this.stack[base + a + 3]=idx;
pc+=StackState.GETARG_sBx(i);
}
continue;
}
case StackState.OP_FORPREP:
{
init=this.stack[base + a];
step=this.stack[base + a + 2];
this.stack[base + a]=step.luaBinOpUnknown(Lua.OP_SUB,init);
b=StackState.GETARG_sBx(i);
pc+=b;
continue;
}
case StackState.OP_TFORLOOP:
{
cb=a + 3;
System.arraycopy(this.stack,base + a,this.stack,base + cb,3);
top=base + cb + 3;
c=StackState.GETARG_C(i);
this.stack[base + a].luaStackCall(this,base + cb,top,c - 1);
if (this.stack[base + cb] != LNil.NIL) {
this.stack[base + cb - 1]=this.stack[base + cb];
}
 else {
pc++;
}
continue;
}
case StackState.OP_SETLIST:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
int listBase=base + a;
if (b == 0) {
b=top - listBase - 1;
}
if (c == 0) {
c=code[pc++];
}
table=this.stack[base + a];
for (int index=1; index <= b; index++) {
val=this.stack[listBase + index];
table.luaSetTable(this,this.state.avail,table,new LInteger(index),val);
}
top=base + a - 1;
continue;
}
case StackState.OP_CLOSE:
{
close(a);
continue;
}
case StackState.OP_CLOSURE:
{
b=StackState.GETARG_Bx(i);
proto=cl.p.p[b];
newClosure=new Closure(this.state,proto);
for (int j=0; j < newClosure.upVals.length; j++, pc++) {
i=code[pc];
o=StackState.GET_OPCODE(i);
b=StackState.GETARG_B(i);
if (o == StackState.OP_GETUPVAL) {
newClosure.upVals[j]=cl.upVals[b];
}
 else if (o == StackState.OP_MOVE) {
newClosure.upVals[j]=findUpVal(proto.upvalues[j],base + b);
}
 else {
throw new java.lang.IllegalArgumentException(""String_Node_Str"" + o);
}
}
this.stack[base + a]=newClosure;
continue;
}
case StackState.OP_VARARG:
{
b=StackState.GETARG_B(i) - 1;
nvarargs=this.stack[base - 1];
n=nvarargs.luaAsInt();
if (b == StackState.LUA_MULTRET) {
b=n;
}
for (int j=0; j < b; j++) this.stack[base + a + j]=(j < n ? this.stack[base - n + j - 1] : LNil.NIL);
top=base + a + b;
continue;
}
}
}
}","public void exec(){
  int i, a, b, c, o, n, cb;
  LValue rkb, rkc, nvarargs, key, val;
  StringBuffer sb;
  LValue i0, step, idx, limit, init, table;
  boolean back, body;
  Proto proto;
  Closure newClosure;
  int[] code=p.code;
  while (true) {
    if (DEBUG)     Print.printState(state,base,top,state.avail,cl,pc);
    i=code[pc++];
    a=StackState.GETARG_A(i);
switch (StackState.GET_OPCODE(i)) {
case StackState.OP_MOVE:
{
        b=StackState.GETARG_B(i);
        this.stack[base + a]=this.stack[base + b];
        continue;
      }
case StackState.OP_LOADK:
{
      b=StackState.GETARG_Bx(i);
      this.stack[base + a]=k[b];
      continue;
    }
case StackState.OP_LOADBOOL:
{
    b=StackState.GETARG_B(i);
    c=StackState.GETARG_C(i);
    this.stack[base + a]=(b != 0 ? LBoolean.TRUE : LBoolean.FALSE);
    if (c != 0)     pc++;
    continue;
  }
case StackState.OP_LOADNIL:
{
  b=StackState.GETARG_B(i);
  do {
    this.stack[base + b]=LNil.NIL;
  }
 while ((--b) >= a);
  continue;
}
case StackState.OP_GETUPVAL:
{
b=StackState.GETARG_B(i);
this.stack[base + a]=cl.upVals[b].getValue();
continue;
}
case StackState.OP_GETGLOBAL:
{
b=StackState.GETARG_Bx(i);
key=k[b];
table=cl.env;
table.luaGetTable(this,base + a,table,key);
continue;
}
case StackState.OP_GETTABLE:
{
b=StackState.GETARG_B(i);
key=GETARG_RKC(i);
table=this.stack[base + b];
table.luaGetTable(this,base + a,table,key);
continue;
}
case StackState.OP_SETGLOBAL:
{
b=StackState.GETARG_Bx(i);
key=k[b];
val=this.stack[base + a];
table=cl.env;
table.luaSetTable(this,this.state.avail,table,key,val);
continue;
}
case StackState.OP_SETUPVAL:
{
b=StackState.GETARG_B(i);
cl.upVals[b].setValue(this.stack[base + a]);
continue;
}
case StackState.OP_SETTABLE:
{
key=GETARG_RKB(i);
val=GETARG_RKC(i);
table=this.stack[base + a];
table.luaSetTable(this,state.avail,table,key,val);
continue;
}
case StackState.OP_NEWTABLE:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
this.stack[base + a]=new LTable(b,c);
continue;
}
case StackState.OP_SELF:
{
rkb=GETARG_RKB(i);
rkc=GETARG_RKC(i);
this.stack[base + a + 1]=rkb;
rkb.luaGetTable(this,base + a,rkb,rkc);
continue;
}
case StackState.OP_ADD:
case StackState.OP_SUB:
case StackState.OP_MUL:
case StackState.OP_DIV:
case StackState.OP_MOD:
case StackState.OP_POW:
{
o=StackState.GET_OPCODE(i);
rkb=GETARG_RKB(i);
rkc=GETARG_RKC(i);
this.stack[base + a]=rkc.luaBinOpUnknown(o,rkb);
continue;
}
case StackState.OP_UNM:
{
rkb=GETARG_RKB(i);
this.stack[base + a]=rkb.luaUnaryMinus();
continue;
}
case StackState.OP_NOT:
{
rkb=GETARG_RKB(i);
this.stack[base + a]=(rkb.luaAsBoolean() ? LBoolean.TRUE : LBoolean.FALSE);
continue;
}
case StackState.OP_LEN:
{
rkb=GETARG_RKB(i);
this.stack[base + a]=rkb.luaLength();
continue;
}
case StackState.OP_CONCAT:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
sb=new StringBuffer();
for (int j=b; j <= c; j++) sb.append(this.stack[base + j].luaAsString());
this.stack[base + a]=new LString(sb.toString());
continue;
}
case StackState.OP_JMP:
{
pc+=StackState.GETARG_sBx(i);
continue;
}
case StackState.OP_EQ:
case StackState.OP_LT:
case StackState.OP_LE:
{
o=StackState.GET_OPCODE(i);
rkb=GETARG_RKB(i);
rkc=GETARG_RKC(i);
boolean test=rkc.luaBinCmpUnknown(o,rkb);
if (test == (a == 0)) pc++;
continue;
}
case StackState.OP_TEST:
{
c=StackState.GETARG_C(i);
if (this.stack[base + a].luaAsBoolean() != (c != 0)) pc++;
continue;
}
case StackState.OP_TESTSET:
{
rkb=GETARG_RKB(i);
c=StackState.GETARG_C(i);
if (rkb.luaAsBoolean() != (c != 0)) pc++;
 else this.stack[base + a]=rkb;
continue;
}
case StackState.OP_CALL:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
if (b != 0) top=base + a + b;
this.stack[base + a].luaStackCall(this,base + a,top,c - 1);
if (this.state.calls[this.state.cc] != this) return;
if (c > 0) adjustTop(base + a + c - 1);
continue;
}
case StackState.OP_TAILCALL:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
if (b != 0) top=base + a + b;
close(base);
this.stack[base + a].luaStackCall(this,base + a,top,c - 1);
if (this.state.calls[this.state.cc] != this) {
CallFrame ci=this.state.calls[this.state.cc];
n=ci.top - ci.base;
System.arraycopy(this.stack,ci.base,this.stack,base,n);
ci.base=base;
ci.top=base + n;
this.state.calls[this.state.cc - 1]=this.state.calls[this.state.cc];
--this.state.cc;
return;
}
continue;
}
case StackState.OP_RETURN:
{
b=StackState.GETARG_B(i);
if (b != 0) top=base + a + b - 1;
close(base);
n=top - (base + a);
System.arraycopy(this.stack,base + a,this.stack,base - 1,n);
top=base - 1 + n;
if (nresults >= 0) adjustTop(base + nresults);
done=true;
if (--state.cc >= 0) {
CallFrame call=state.calls[state.cc];
call.top=top;
}
return;
}
case StackState.OP_FORLOOP:
{
i0=this.stack[base + a];
step=this.stack[base + a + 2];
idx=step.luaBinOpUnknown(Lua.OP_ADD,i0);
limit=this.stack[base + a + 1];
back=step.luaBinCmpInteger(Lua.OP_LT,0);
body=(back ? idx.luaBinCmpUnknown(Lua.OP_LE,limit) : limit.luaBinCmpUnknown(Lua.OP_LE,idx));
if (body) {
this.stack[base + a]=idx;
this.stack[base + a + 3]=idx;
pc+=StackState.GETARG_sBx(i);
}
continue;
}
case StackState.OP_FORPREP:
{
init=this.stack[base + a];
step=this.stack[base + a + 2];
this.stack[base + a]=step.luaBinOpUnknown(Lua.OP_SUB,init);
b=StackState.GETARG_sBx(i);
pc+=b;
continue;
}
case StackState.OP_TFORLOOP:
{
cb=a + 3;
System.arraycopy(this.stack,base + a,this.stack,base + cb,3);
top=base + cb + 3;
c=StackState.GETARG_C(i);
this.stack[base + a].luaStackCall(this,base + cb,top,c - 1);
if (this.stack[base + cb] != LNil.NIL) {
this.stack[base + cb - 1]=this.stack[base + cb];
}
 else {
pc++;
}
continue;
}
case StackState.OP_SETLIST:
{
b=StackState.GETARG_B(i);
c=StackState.GETARG_C(i);
int listBase=base + a;
if (b == 0) {
b=top - listBase - 1;
}
if (c == 0) {
c=code[pc++];
}
table=this.stack[base + a];
for (int index=1; index <= b; index++) {
val=this.stack[listBase + index];
table.luaSetTable(this,this.state.avail,table,new LInteger(index),val);
}
top=base + a - 1;
continue;
}
case StackState.OP_CLOSE:
{
close(a);
continue;
}
case StackState.OP_CLOSURE:
{
b=StackState.GETARG_Bx(i);
proto=cl.p.p[b];
newClosure=new Closure(this.state,proto);
for (int j=0; j < newClosure.upVals.length; j++, pc++) {
i=code[pc];
o=StackState.GET_OPCODE(i);
b=StackState.GETARG_B(i);
if (o == StackState.OP_GETUPVAL) {
newClosure.upVals[j]=cl.upVals[b];
}
 else if (o == StackState.OP_MOVE) {
newClosure.upVals[j]=findUpVal(proto.upvalues[j],base + b);
}
 else {
throw new java.lang.IllegalArgumentException(""String_Node_Str"" + o);
}
}
this.stack[base + a]=newClosure;
continue;
}
case StackState.OP_VARARG:
{
b=StackState.GETARG_B(i) - 1;
nvarargs=this.stack[base - 1];
n=nvarargs.luaAsInt();
if (b == StackState.LUA_MULTRET) {
b=n;
}
for (int j=0; j < b; j++) this.stack[base + a + j]=(j < n ? this.stack[base - n + j - 1] : LNil.NIL);
top=base + a + b;
continue;
}
}
}
}",0.9991239597021464
44044,"public void move(DatabaseUtil database,double timeleft,double time){
  assert(vehicles.size() > 0);
  Map map=new Map();
  for (  Vehicle v : vehicles) {
    if (v.stopped)     continue;
    v.initMovement(database,timeleft,time,map);
    map.add(v.getActualPosition(),v.getVehicle_id());
  }
}","public void move(DatabaseUtil database,double timeleft,double time){
  assert(vehicles.size() > 0);
  for (  Vehicle v : vehicles) {
    if (v.stopped)     continue;
    v.initMovement(database,timeleft,time);
  }
}",0.8447937131630648
44045,"public void initMovement(DatabaseUtil database,double timeLeft,double time,Map map);","public void initMovement(DatabaseUtil database,double timeLeft,double time);",0.95
44046,"public TrafficAlgorithm(UserInput userInput) throws SQLException {
  System.out.println(""String_Node_Str"");
  this.user=userInput;
  this.database=new DatabaseUtil();
  this.database.clearVehicles();
  long t0=System.currentTimeMillis();
  user=userInput;
  setVehicles(new AllVehicles());
  database=new DatabaseUtil();
  String out=""String_Node_Str"";
  OutputUtil kml=new OutputUtil(""String_Node_Str"");
  out=kml.KMLHeader();
  database.clearVehicles();
  AllVehicles vehicles=new AllVehicles();
  for (int i=0; i < this.user.getTotalVehicles(); i++) {
    Zone from=this.user.getFromZones().selectRandomZone();
    Zone to=this.user.getToZones().selectRandomZone();
    Vehicle v=this.vehicles.generateVehicle(from,to);
    this.vehicles.addVehicle(v);
    this.database.addVehicle(v,this.vehicles.size());
    System.out.println((i + 1) + ""String_Node_Str"" + this.user.getTotalVehicles());
    System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - t0) + ""String_Node_Str"");
  }
  run();
}","public TrafficAlgorithm(UserInput userInput) throws SQLException {
  System.out.println(""String_Node_Str"");
  this.user=userInput;
  this.database=new DatabaseUtil();
  this.database.clearVehicles();
  long t0=System.currentTimeMillis();
  user=userInput;
  setVehicles(new AllVehicles());
  database=new DatabaseUtil();
  String out=""String_Node_Str"";
  OutputUtil kml=new OutputUtil(""String_Node_Str"");
  out=kml.KMLHeader();
  database.clearVehicles();
  this.vehicles=new AllVehicles();
  for (int i=0; i < this.user.getTotalVehicles(); i++) {
    Zone from=this.user.getFromZones().selectRandomZone();
    Zone to=this.user.getToZones().selectRandomZone();
    Vehicle v=this.vehicles.generateVehicle(from,to);
    this.vehicles.addVehicle(v);
    this.database.addVehicle(v,this.vehicles.size());
    System.out.println((i + 1) + ""String_Node_Str"" + this.user.getTotalVehicles());
    System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - t0) + ""String_Node_Str"");
  }
  run();
}",0.9915296462381664
44047,"public static Configuration loadFromFile(){
  try {
    instance=loadFromFile(""String_Node_Str"");
    return instance;
  }
 catch (  NotSerializableException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  Configuration c=new Configuration();
  return c;
}","public static Configuration loadFromFile(){
  try {
    instance=loadFromFile(""String_Node_Str"");
    return instance;
  }
 catch (  NotSerializableException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  Configuration c=new Configuration();
  instance=c;
  return c;
}",0.9516129032258064
44048,"public void refrashOverlay(){
  overlayI=new BufferedImage(this.getWidth() + 1,this.getHeight() + 1,BufferedImage.TYPE_INT_ARGB);
  Graphics g=overlayI.getGraphics();
  Changeset ch=drawStyle.getSelectedChangeset();
  long changesetid=-1;
  if (ch != null) {
    changesetid=ch.id;
  }
 else {
    Node node=drawStyle.getSelectedNode();
    if (node != null)     changesetid=node.changesetId;
  }
  if (changesetid != -1) {
    System.out.println(""String_Node_Str"" + changesetid);
    Iterator<Long> iterator=dc.nodes.keySet().iterator();
    if (iterator.hasNext()) {
      Node n=dc.nodes.get(iterator.next());
      double left=-360;
      double right=-360;
      double top=-360;
      double bottom=-360;
      while (iterator.hasNext()) {
        Node node=dc.nodes.get(iterator.next());
        if (node.changesetId == changesetid) {
          if (left > node.lat || left == -360)           left=node.lat;
          if (right < node.lat || right == -360)           right=node.lat;
          if (top < node.lon || top == -360)           top=node.lon;
          if (bottom > node.lon || bottom == -360)           bottom=node.lon;
        }
      }
      Point p1=this.getMapPosition(left,top,false);
      Point p2=this.getMapPosition(right,bottom,false);
      if (p1 != null && p2 != null) {
        System.out.println(p1.x + ""String_Node_Str"" + p1.y+ ""String_Node_Str""+ (p2.x - p1.x)+ ""String_Node_Str""+ (p2.y - p1.y));
        g.setColor(new Color(255,0,0,30));
        g.fillRect(p2.x,p2.y,p1.x - p2.x,p1.y - p2.y);
      }
    }
  }
  g.setColor(Color.BLACK);
  if (drawStyle != null) {
    Iterator<Long> iterator=dc.nodes.keySet().iterator();
    while (iterator.hasNext()) {
      Node node=dc.nodes.get(iterator.next());
      drawStyle.drawNode(g,this,node);
    }
  }
  MapFilter mf=Configuration.instance.getSelectedProfile().getMapFilter();
  if (mf instanceof DrawerOverlay) {
    DrawerOverlay dov=(DrawerOverlay)mf;
    dov.draw(g,this);
  }
  repaint();
}","public void refrashOverlay(){
  overlayI=new BufferedImage(this.getWidth() + 1,this.getHeight() + 1,BufferedImage.TYPE_INT_ARGB);
  Graphics g=overlayI.getGraphics();
  Changeset ch=drawStyle.getSelectedChangeset();
  long changesetid=-1;
  if (ch != null) {
    changesetid=ch.id;
  }
 else {
    Node node=drawStyle.getSelectedNode();
    if (node != null)     changesetid=node.changesetId;
  }
  if (changesetid != -1) {
    System.out.println(""String_Node_Str"" + changesetid);
    Iterator<Long> iterator=dc.nodes.keySet().iterator();
    if (iterator.hasNext()) {
      Node n=dc.nodes.get(iterator.next());
      double left=-360;
      double right=-360;
      double top=-360;
      double bottom=-360;
      while (iterator.hasNext()) {
        Node node=dc.nodes.get(iterator.next());
        if (node.changesetId == changesetid) {
          if (left > node.lat || left == -360)           left=node.lat;
          if (right < node.lat || right == -360)           right=node.lat;
          if (top < node.lon || top == -360)           top=node.lon;
          if (bottom > node.lon || bottom == -360)           bottom=node.lon;
        }
      }
      Point p1=this.getMapPosition(left,top,false);
      Point p2=this.getMapPosition(right,bottom,false);
      if (p1 != null && p2 != null) {
        System.out.println(p1.x + ""String_Node_Str"" + p1.y+ ""String_Node_Str""+ (p2.x - p1.x)+ ""String_Node_Str""+ (p2.y - p1.y));
        g.setColor(new Color(255,0,0,30));
        g.fillRect(p2.x,p2.y,p1.x - p2.x,p1.y - p2.y);
      }
    }
  }
  g.setColor(Color.BLACK);
  if (drawStyle != null) {
    Iterator<Long> iterator=dc.nodes.keySet().iterator();
    while (iterator.hasNext()) {
      Node node=dc.nodes.get(iterator.next());
      drawStyle.drawNode(g,this,node);
    }
  }
  Profile p=Configuration.instance.getSelectedProfile();
  if (p != null) {
    MapFilter mf=p.getMapFilter();
    if (mf instanceof DrawerOverlay) {
      DrawerOverlay dov=(DrawerOverlay)mf;
      dov.draw(g,this);
    }
  }
  repaint();
}",0.961058412381428
44049,"public void draw(Graphics g,ZMapWidget map){
  Point p=map.getMapPosition(lat1,lon1);
  Point p2=map.getMapPosition(lat2,lon2);
  if (p != null && p2 != null) {
    g.setColor(Color.orange);
    g.drawRect(p.x,p.y,p2.x - p.x,p2.y - p.y);
  }
}","public void draw(Graphics g,ZMapWidget map){
  Point p=map.getMapPosition(lat1,lon1,false);
  Point p2=map.getMapPosition(lat2,lon2,false);
  if (p != null && p2 != null) {
    g.setColor(Color.orange);
    g.drawRect(p.x,p.y,p2.x - p.x,p2.y - p.y);
  }
}",0.9759036144578314
44050,"public static Configuration loadFromFile(){
  try {
    instance=loadFromFile(""String_Node_Str"");
    return instance;
  }
 catch (  NotSerializableException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  Configuration c=new Configuration();
  instance=c;
  return c;
}","public static Configuration loadFromFile(){
  try {
    instance=loadFromFile(""String_Node_Str"");
    return instance;
  }
 catch (  FileNotFoundException e) {
  }
catch (  NotSerializableException e) {
    Logger.printStackTrace(e,""String_Node_Str"");
  }
catch (  IOException e) {
    try {
      instance=loadFromFile(""String_Node_Str"");
      return instance;
    }
 catch (    Exception e1) {
      Logger.printStackTrace(e,""String_Node_Str"");
    }
  }
catch (  ClassNotFoundException e) {
    Logger.printStackTrace(e,""String_Node_Str"");
  }
  instance=new Configuration();
  return instance;
}",0.6087844739530133
44051,"public void saveToFile(){
  try {
    saveToFile(""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public void saveToFile(){
  try {
    saveToFile(""String_Node_Str"");
  }
 catch (  IOException e) {
    Logger.printStackTrace(e,""String_Node_Str"");
  }
}",0.7449856733524355
44052,"public void drawNode(Graphics g,ZMapWidget map,Node node){
  User user=map.dc.users.get(map.dc.changesets.get(map.dc.changesetsIndex.get(node.changesetId)).userId);
  Profile p=Configuration.instance.getSelectedProfile();
  User[] u=p.getUsers();
  if (p.getListType() == 0) {
    drawNodeP(g,map,node);
  }
 else   if (p.getListType() == 2) {
    for (int i=0; i < u.length; i++)     if (u[i].id == user.id) {
      drawNodeP(g,map,node);
    }
  }
 else {
    boolean t=false;
    for (int i=0; i < u.length; i++)     if (u[i].id == user.id) {
      t=true;
    }
    if (!t)     drawNodeP(g,map,node);
  }
}","public void drawNode(Graphics g,ZMapWidget map,Node node){
  if (isVisibleNode(map,node))   drawNodeP(g,map,node);
}",0.2782369146005509
44053,"public static void openURL(String url){
  if (!java.awt.Desktop.isDesktopSupported()) {
    System.err.println(""String_Node_Str"");
  }
  java.awt.Desktop desktop=java.awt.Desktop.getDesktop();
  if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
    System.err.println(""String_Node_Str"");
  }
  try {
    java.net.URI uri=new java.net.URI(url);
    desktop.browse(uri);
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
  }
}","public static void openURL(String url){
  if (!java.awt.Desktop.isDesktopSupported()) {
    System.err.println(""String_Node_Str"");
  }
  java.awt.Desktop desktop=java.awt.Desktop.getDesktop();
  if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
    System.err.println(""String_Node_Str"");
  }
  try {
    java.net.URI uri=new java.net.URI(url);
    desktop.browse(uri);
  }
 catch (  Exception e) {
  }
}",0.953810623556582
44054,"private void initChangeStream(){
  try {
    BufferedReader br=new BufferedReader(new InputStreamReader(new BufferedInputStream(new URL(""String_Node_Str"").openStream())));
    br.readLine();
    String seqNumStr=br.readLine();
    seqNum=Integer.parseInt(seqNumStr.substring(seqNumStr.indexOf(""String_Node_Str"") + 1));
    br.readLine();
    br.close();
  }
 catch (  IOException ioe) {
    System.err.println(""String_Node_Str"");
  }
}","private void initChangeStream(){
  try {
    BufferedReader br;
    br=new BufferedReader(new InputStreamReader(new BufferedInputStream(new URL(""String_Node_Str"").openStream())));
    br.readLine();
    String seqNumStr=br.readLine();
    seqNum=Integer.parseInt(seqNumStr.substring(seqNumStr.indexOf(""String_Node_Str"") + 1));
    br.readLine();
    br.close();
  }
 catch (  MalformedURLException e) {
    System.err.println(""String_Node_Str"");
  }
catch (  Exception e) {
    System.err.println(""String_Node_Str"");
  }
}",0.9007314524555904
44055,"public void getData(String url){
  try {
    BufferedInputStream bis=new BufferedInputStream(new GZIPInputStream(new URL(url).openStream()));
    System.out.println(""String_Node_Str"" + url);
    dc.addData(bis);
  }
 catch (  IOException ioe) {
    System.err.println(""String_Node_Str"");
  }
}","public void getData(String url){
  try {
    BufferedInputStream bis;
    bis=new BufferedInputStream(new GZIPInputStream(new URL(url).openStream()));
    System.out.println(""String_Node_Str"" + url);
    dc.addData(bis);
  }
 catch (  MalformedURLException e) {
    System.err.println(""String_Node_Str"");
  }
catch (  IOException e) {
    System.err.println(""String_Node_Str"");
  }
}",0.8609467455621301
44056,"public void mouseClicked(MouseEvent arg0){
  Iterator<Long> iterator=dc.nodes.keySet().iterator();
  while (iterator.hasNext()) {
    Node node=dc.nodes.get(iterator.next());
    Point p=getMapPosition(node.lat,node.lon);
    if (p != null) {
      if (p.x < arg0.getX() + 3 && p.x > arg0.getX() - 3 && p.y < arg0.getY() + 3 && p.y > arg0.getY() - 3) {
        for (int i=0; i < zMapWidgetListeners.size(); i++) {
          zMapWidgetListeners.get(i).nodeClicked(node);
        }
        return;
      }
    }
  }
}","public void mouseClicked(MouseEvent arg0){
  Iterator<Long> iterator=dc.nodes.keySet().iterator();
  while (iterator.hasNext()) {
    Node node=dc.nodes.get(iterator.next());
    if (this.drawStyle.isVisibleNode(this,node)) {
      Point p=getMapPosition(node.lat,node.lon);
      if (p != null) {
        if (p.x < arg0.getX() + 3 && p.x > arg0.getX() - 3 && p.y < arg0.getY() + 3 && p.y > arg0.getY() - 3) {
          for (int i=0; i < zMapWidgetListeners.size(); i++) {
            zMapWidgetListeners.get(i).nodeClicked(node);
          }
          return;
        }
      }
    }
  }
}",0.9321266968325792
44057,"public OSMZmiany(){
  dc=new DataContainer();
  this.setTitle(""String_Node_Str"");
  this.addWindowListener(new windowHandler());
  GridBagLayout gbl=new GridBagLayout();
  gbl.rowWeights=new double[]{1.0};
  gbl.columnWeights=new double[]{1.0};
  getContentPane().setLayout(gbl);
  JSplitPane splitPane=new JSplitPane();
  GridBagConstraints gbc_splitPane=new GridBagConstraints();
  gbc_splitPane.fill=GridBagConstraints.BOTH;
  gbc_splitPane.gridx=0;
  gbc_splitPane.gridy=0;
  getContentPane().add(splitPane,gbc_splitPane);
  this.setSize(800,800);
  conf=Configuration.loadFromFile();
  conf.addConfigurationListener(this);
  dc.setNewDataFilter(conf.getSelectedProfile().getMapFilter());
  map=new ZMapWidget(dc);
  map.setSize(400,400);
  Profile p=conf.getSelectedProfile();
  this.profileChanged(p);
  map.addZMapWidgetListener(this);
  splitPane.setLeftComponent(map);
  JPanel panel=new JPanel();
  splitPane.setRightComponent(panel);
  panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));
  JTabbedPane tabbedPane=new JTabbedPane(JTabbedPane.TOP);
  JPanel panel_1=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panel_1,null);
  final JButton btnSetBox=new JButton(""String_Node_Str"");
  btnSetBox.setBounds(41,127,129,24);
  btnSetBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      setBox=true;
    }
  }
);
  JButton btnRemoveBox=new JButton(""String_Node_Str"");
  btnRemoveBox.setBounds(175,127,118,24);
  btnRemoveBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      dc.mapfilter=null;
    }
  }
);
  panel_1.setLayout(null);
  JLabel lblSetBoundary=new JLabel(""String_Node_Str"");
  lblSetBoundary.setBounds(12,93,101,14);
  panel_1.add(lblSetBoundary);
  panel_1.add(btnRemoveBox);
  panel_1.add(btnSetBox);
  JLabel lblData=new JLabel(""String_Node_Str"");
  lblData.setBounds(12,244,39,14);
  panel_1.add(lblData);
  JLabel lblDiffUrl=new JLabel(""String_Node_Str"");
  lblDiffUrl.setBounds(12,270,55,14);
  panel_1.add(lblDiffUrl);
  tfURL=new JTextField();
  tfURL.setBounds(94,270,199,24);
  panel_1.add(tfURL);
  tfURL.setColumns(10);
  JButton btnLoad=new JButton(""String_Node_Str"");
  btnLoad.setBounds(224,307,69,24);
  btnLoad.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      getData(tfURL.getText());
    }
  }
);
  panel_1.add(btnLoad);
  cbxLiveEdit=new JCheckBox(""String_Node_Str"");
  cbxLiveEdit.setBounds(11,353,159,22);
  cbxLiveEdit.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      getData();
    }
  }
);
  panel_1.add(cbxLiveEdit);
  JButton btnClear=new JButton(""String_Node_Str"");
  btnClear.setBounds(224,393,71,24);
  btnClear.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      dc.clear();
    }
  }
);
  panel_1.add(btnClear);
  JButton btAddProfile=new JButton(""String_Node_Str"");
  btAddProfile.setBounds(198,43,95,24);
  panel_1.add(btAddProfile);
  cbProfiles=new JComboBox(profilesModel);
  cbProfiles.setBounds(100,8,193,23);
  panel_1.add(cbProfiles);
  JLabel label=new JLabel(""String_Node_Str"");
  label.setBounds(12,12,70,14);
  panel_1.add(label);
  JSeparator separator=new JSeparator();
  separator.setBounds(12,79,351,2);
  panel_1.add(separator);
  JLabel lblPointA=new JLabel(""String_Node_Str"");
  lblPointA.setBounds(41,163,70,14);
  panel_1.add(lblPointA);
  JLabel lblPointB=new JLabel(""String_Node_Str"");
  lblPointB.setBounds(43,189,70,14);
  panel_1.add(lblPointB);
  lblBoxB1=new JLabel(""String_Node_Str"");
  lblBoxB1.setHorizontalAlignment(SwingConstants.RIGHT);
  lblBoxB1.setBounds(123,163,170,14);
  panel_1.add(lblBoxB1);
  lblBoxB2=new JLabel(""String_Node_Str"");
  lblBoxB2.setHorizontalAlignment(SwingConstants.RIGHT);
  lblBoxB2.setBounds(125,189,168,14);
  panel_1.add(lblBoxB2);
  JSeparator separator_1=new JSeparator();
  separator_1.setBounds(12,230,351,2);
  panel_1.add(separator_1);
  JButton btnEditInP2=new JButton(""String_Node_Str"");
  btnEditInP2.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      int i=map.getZoom();
      Coordinate c=map.getPosition();
      openURL(""String_Node_Str"" + c.getLat() + ""String_Node_Str""+ c.getLon()+ ""String_Node_Str""+ i);
    }
  }
);
  btnEditInP2.setBounds(12,681,158,24);
  panel_1.add(btnEditInP2);
  panel.add(tabbedPane);
  JPanel panel_2=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panel_2,null);
  panel_2.setLayout(null);
  JButton btnShowSite=new JButton(""String_Node_Str"");
  btnShowSite.setBounds(154,5,61,24);
  panel_2.add(btnShowSite);
  list=new JList(model);
  list.setBounds(12,41,351,664);
  panel_2.add(list);
  JPanel panel_3=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panel_3,null);
  panel_3.setLayout(null);
  JLabel lblNode=new JLabel(""String_Node_Str"");
  lblNode.setBounds(12,12,70,14);
  panel_3.add(lblNode);
  JLabel lblChangeset=new JLabel(""String_Node_Str"");
  lblChangeset.setBounds(12,38,90,14);
  panel_3.add(lblChangeset);
  JLabel lblUser=new JLabel(""String_Node_Str"");
  lblUser.setBounds(12,64,70,14);
  panel_3.add(lblUser);
  btChangeset=new JButton(""String_Node_Str"");
  btChangeset.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (!btChangeset.getText().equals(""String_Node_Str""))       OSMZmiany.openURL(""String_Node_Str"" + btChangeset.getText());
    }
  }
);
  btChangeset.setForeground(Color.BLUE);
  btChangeset.setBounds(109,38,120,14);
  panel_3.add(btChangeset);
  btNode=new JButton(""String_Node_Str"");
  btNode.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (!btNode.getText().equals(""String_Node_Str""))       OSMZmiany.openURL(""String_Node_Str"" + btNode.getText());
    }
  }
);
  btNode.setForeground(Color.BLUE);
  btNode.setBounds(109,12,120,14);
  panel_3.add(btNode);
  btUser=new JButton(""String_Node_Str"");
  btUser.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (!btUser.getText().equals(""String_Node_Str""))       OSMZmiany.openURL(""String_Node_Str"" + btUser.getText());
    }
  }
);
  btUser.setForeground(Color.BLUE);
  btUser.setBounds(109,64,120,14);
  panel_3.add(btUser);
  JButton btSelectChangeset=new JButton(""String_Node_Str"");
  btSelectChangeset.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Node n=map.drawStyle.getSelectedNode();
      if (n != null) {
        map.drawStyle.setSelection(dc.changesets.get(dc.changesetsIndex.get(n.changesetId)));
        map.refrashOverlay();
      }
    }
  }
);
  btSelectChangeset.setBounds(13,116,216,24);
  panel_3.add(btSelectChangeset);
  JButton btnAddUser=new JButton(""String_Node_Str"");
  btnAddUser.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (map.drawStyle.getSelectedNode() != null) {
        conf.getSelectedProfile().addUser(dc.users.get(dc.changesets.get(dc.changesetsIndex.get(map.drawStyle.getSelectedNode().changesetId)).userId));
      }
 else       if (map.drawStyle.getSelectedChangeset() != null) {
        conf.getSelectedProfile().addUser(dc.users.get(dc.changesets.get(dc.changesetsIndex.get(map.drawStyle.getSelectedChangeset().id)).userId));
      }
      reloadUsersList();
    }
  }
);
  btnAddUser.setBounds(109,90,120,14);
  panel_3.add(btnAddUser);
  JPanel panel_4=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panel_4,null);
  panel_4.setLayout(null);
  usersListType=new JComboBox();
  usersListType.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent arg0){
      boolean z=false;
      if (usersListType.getSelectedIndex() == 1)       z=true;
      conf.getSelectedProfile().setListType(z);
      reloadUsersList();
      map.refrashOverlay();
    }
  }
);
  usersListType.setModel(new DefaultComboBoxModel(new String[]{""String_Node_Str"",""String_Node_Str""}));
  usersListType.setBounds(100,12,145,23);
  panel_4.add(usersListType);
  JLabel lblListType=new JLabel(""String_Node_Str"");
  lblListType.setBounds(12,16,70,14);
  panel_4.add(lblListType);
  JList listUsers=new JList(modelUsers);
  listUsers.setBounds(12,47,233,618);
  panel_4.add(listUsers);
  setVisible(true);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      System.exit(0);
    }
  }
);
  refetchTimer=new Timer();
  refetchTimer.scheduleAtFixedRate(new TimerTask(){
    public void run(){
      if (cbxLiveEdit.isSelected()) {
        initChangeStream();
        getData();
      }
    }
  }
,20000,30000);
  reloadProfiles();
  reloadUserType();
  reloadUsersList();
  map.refrashOverlay();
}","public OSMZmiany(){
  dc=new DataContainer();
  this.setTitle(""String_Node_Str"");
  this.addWindowListener(new windowHandler());
  GridBagLayout gbl=new GridBagLayout();
  gbl.rowWeights=new double[]{1.0};
  gbl.columnWeights=new double[]{1.0};
  getContentPane().setLayout(gbl);
  JSplitPane splitPane=new JSplitPane();
  GridBagConstraints gbc_splitPane=new GridBagConstraints();
  gbc_splitPane.fill=GridBagConstraints.BOTH;
  gbc_splitPane.gridx=0;
  gbc_splitPane.gridy=0;
  getContentPane().add(splitPane,gbc_splitPane);
  this.setSize(800,800);
  conf=Configuration.loadFromFile();
  conf.addConfigurationListener(this);
  dc.setNewDataFilter(conf.getSelectedProfile().getMapFilter());
  map=new ZMapWidget(dc);
  map.setSize(400,400);
  Profile p=conf.getSelectedProfile();
  this.profileChanged(p);
  map.addZMapWidgetListener(this);
  splitPane.setLeftComponent(map);
  JPanel panel=new JPanel();
  splitPane.setRightComponent(panel);
  panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));
  JTabbedPane tabbedPane=new JTabbedPane(JTabbedPane.TOP);
  JPanel panel_1=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panel_1,null);
  final JButton btnSetBox=new JButton(""String_Node_Str"");
  btnSetBox.setBounds(41,127,129,24);
  btnSetBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      setBox=true;
    }
  }
);
  JButton btnRemoveBox=new JButton(""String_Node_Str"");
  btnRemoveBox.setBounds(175,127,118,24);
  btnRemoveBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      dc.mapfilter=null;
    }
  }
);
  panel_1.setLayout(null);
  JLabel lblSetBoundary=new JLabel(""String_Node_Str"");
  lblSetBoundary.setBounds(12,93,101,14);
  panel_1.add(lblSetBoundary);
  panel_1.add(btnRemoveBox);
  panel_1.add(btnSetBox);
  JLabel lblData=new JLabel(""String_Node_Str"");
  lblData.setBounds(12,244,39,14);
  panel_1.add(lblData);
  JLabel lblDiffUrl=new JLabel(""String_Node_Str"");
  lblDiffUrl.setBounds(12,270,55,14);
  panel_1.add(lblDiffUrl);
  tfURL=new JTextField();
  tfURL.setBounds(94,270,199,24);
  panel_1.add(tfURL);
  tfURL.setColumns(10);
  JButton btnLoad=new JButton(""String_Node_Str"");
  btnLoad.setBounds(224,307,69,24);
  btnLoad.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      getData(tfURL.getText());
    }
  }
);
  panel_1.add(btnLoad);
  cbxLiveEdit=new JCheckBox(""String_Node_Str"");
  cbxLiveEdit.setBounds(11,353,159,22);
  cbxLiveEdit.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      getData();
    }
  }
);
  panel_1.add(cbxLiveEdit);
  JButton btnClear=new JButton(""String_Node_Str"");
  btnClear.setBounds(224,393,71,24);
  btnClear.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      dc.clear();
    }
  }
);
  panel_1.add(btnClear);
  JButton btAddProfile=new JButton(""String_Node_Str"");
  btAddProfile.setBounds(198,43,95,24);
  panel_1.add(btAddProfile);
  cbProfiles=new JComboBox(profilesModel);
  cbProfiles.setBounds(100,8,193,23);
  panel_1.add(cbProfiles);
  JLabel label=new JLabel(""String_Node_Str"");
  label.setBounds(12,12,70,14);
  panel_1.add(label);
  JSeparator separator=new JSeparator();
  separator.setBounds(12,79,351,2);
  panel_1.add(separator);
  JLabel lblPointA=new JLabel(""String_Node_Str"");
  lblPointA.setBounds(41,163,70,14);
  panel_1.add(lblPointA);
  JLabel lblPointB=new JLabel(""String_Node_Str"");
  lblPointB.setBounds(43,189,70,14);
  panel_1.add(lblPointB);
  lblBoxB1=new JLabel(""String_Node_Str"");
  lblBoxB1.setHorizontalAlignment(SwingConstants.RIGHT);
  lblBoxB1.setBounds(123,163,170,14);
  panel_1.add(lblBoxB1);
  lblBoxB2=new JLabel(""String_Node_Str"");
  lblBoxB2.setHorizontalAlignment(SwingConstants.RIGHT);
  lblBoxB2.setBounds(125,189,168,14);
  panel_1.add(lblBoxB2);
  JSeparator separator_1=new JSeparator();
  separator_1.setBounds(12,230,351,2);
  panel_1.add(separator_1);
  JButton btnEditInP2=new JButton(""String_Node_Str"");
  btnEditInP2.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      int i=map.getZoom();
      Coordinate c=map.getPosition();
      openURL(""String_Node_Str"" + c.getLat() + ""String_Node_Str""+ c.getLon()+ ""String_Node_Str""+ i);
    }
  }
);
  btnEditInP2.setBounds(12,681,158,24);
  panel_1.add(btnEditInP2);
  JButton btnEditInJosm=new JButton(""String_Node_Str"");
  btnEditInJosm.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
    }
  }
);
  btnEditInJosm.setBounds(176,681,129,24);
  panel_1.add(btnEditInJosm);
  panel.add(tabbedPane);
  JPanel panel_2=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panel_2,null);
  panel_2.setLayout(null);
  JButton btnShowSite=new JButton(""String_Node_Str"");
  btnShowSite.setBounds(154,5,61,24);
  panel_2.add(btnShowSite);
  list=new JList(model);
  list.setBounds(12,41,351,664);
  panel_2.add(list);
  JPanel panel_3=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panel_3,null);
  panel_3.setLayout(null);
  JLabel lblNode=new JLabel(""String_Node_Str"");
  lblNode.setBounds(12,12,70,14);
  panel_3.add(lblNode);
  JLabel lblChangeset=new JLabel(""String_Node_Str"");
  lblChangeset.setBounds(12,38,90,14);
  panel_3.add(lblChangeset);
  JLabel lblUser=new JLabel(""String_Node_Str"");
  lblUser.setBounds(12,64,70,14);
  panel_3.add(lblUser);
  btChangeset=new JButton(""String_Node_Str"");
  btChangeset.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (!btChangeset.getText().equals(""String_Node_Str""))       OSMZmiany.openURL(""String_Node_Str"" + btChangeset.getText());
    }
  }
);
  btChangeset.setForeground(Color.BLUE);
  btChangeset.setBounds(109,38,120,14);
  panel_3.add(btChangeset);
  btNode=new JButton(""String_Node_Str"");
  btNode.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (!btNode.getText().equals(""String_Node_Str""))       OSMZmiany.openURL(""String_Node_Str"" + btNode.getText());
    }
  }
);
  btNode.setForeground(Color.BLUE);
  btNode.setBounds(109,12,120,14);
  panel_3.add(btNode);
  btUser=new JButton(""String_Node_Str"");
  btUser.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (!btUser.getText().equals(""String_Node_Str""))       OSMZmiany.openURL(""String_Node_Str"" + btUser.getText());
    }
  }
);
  btUser.setForeground(Color.BLUE);
  btUser.setBounds(109,64,120,14);
  panel_3.add(btUser);
  JButton btSelectChangeset=new JButton(""String_Node_Str"");
  btSelectChangeset.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Node n=map.drawStyle.getSelectedNode();
      if (n != null) {
        map.drawStyle.setSelection(dc.changesets.get(dc.changesetsIndex.get(n.changesetId)));
        map.refrashOverlay();
      }
    }
  }
);
  btSelectChangeset.setBounds(13,116,216,24);
  panel_3.add(btSelectChangeset);
  JButton btnAddUser=new JButton(""String_Node_Str"");
  btnAddUser.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      if (map.drawStyle.getSelectedNode() != null) {
        conf.getSelectedProfile().addUser(dc.users.get(dc.changesets.get(dc.changesetsIndex.get(map.drawStyle.getSelectedNode().changesetId)).userId));
      }
 else       if (map.drawStyle.getSelectedChangeset() != null) {
        conf.getSelectedProfile().addUser(dc.users.get(dc.changesets.get(dc.changesetsIndex.get(map.drawStyle.getSelectedChangeset().id)).userId));
      }
      reloadUsersList();
    }
  }
);
  btnAddUser.setBounds(109,90,120,14);
  panel_3.add(btnAddUser);
  JPanel panel_4=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panel_4,null);
  panel_4.setLayout(null);
  usersListType=new JComboBox();
  usersListType.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent arg0){
      boolean z=false;
      if (usersListType.getSelectedIndex() == 1)       z=true;
      conf.getSelectedProfile().setListType(z);
      reloadUsersList();
      map.refrashOverlay();
    }
  }
);
  usersListType.setModel(new DefaultComboBoxModel(new String[]{""String_Node_Str"",""String_Node_Str""}));
  usersListType.setBounds(100,12,145,23);
  panel_4.add(usersListType);
  JLabel lblListType=new JLabel(""String_Node_Str"");
  lblListType.setBounds(12,16,70,14);
  panel_4.add(lblListType);
  JList listUsers=new JList(modelUsers);
  listUsers.setBounds(12,47,233,618);
  panel_4.add(listUsers);
  setVisible(true);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      System.exit(0);
    }
  }
);
  refetchTimer=new Timer();
  refetchTimer.scheduleAtFixedRate(new TimerTask(){
    public void run(){
      if (cbxLiveEdit.isSelected()) {
        initChangeStream();
        getData();
      }
    }
  }
,20000,30000);
  reloadProfiles();
  reloadUserType();
  reloadUsersList();
  map.refrashOverlay();
}",0.9859029364239148
44058,"public void refrashOverlay(){
  overlayI=new BufferedImage(this.getWidth(),this.getHeight(),BufferedImage.TYPE_INT_ARGB);
  Graphics g=overlayI.getGraphics();
  g.setColor(Color.BLACK);
  if (drawStyle != null) {
    Iterator<Long> iterator=dc.nodes.keySet().iterator();
    while (iterator.hasNext()) {
      Node node=dc.nodes.get(iterator.next());
      drawStyle.drawNode(g,this,node);
    }
  }
  if (dc.mapfilter instanceof DrawerOverlay) {
    DrawerOverlay dov=(DrawerOverlay)dc.mapfilter;
    dov.draw(g,this);
  }
}","public void refrashOverlay(){
  overlayI=new BufferedImage(this.getWidth(),this.getHeight(),BufferedImage.TYPE_INT_ARGB);
  Graphics g=overlayI.getGraphics();
  g.setColor(Color.BLACK);
  if (drawStyle != null) {
    Iterator<Long> iterator=dc.nodes.keySet().iterator();
    while (iterator.hasNext()) {
      Node node=dc.nodes.get(iterator.next());
      drawStyle.drawNode(g,this,node);
    }
  }
  if (dc.mapfilter instanceof DrawerOverlay) {
    DrawerOverlay dov=(DrawerOverlay)dc.mapfilter;
    dov.draw(g,this);
  }
  repaint();
}",0.9877704609595483
44059,"public void getData(){
  try {
    DecimalFormat myFormat=new DecimalFormat(""String_Node_Str"");
    String url=""String_Node_Str"" + myFormat.format(seqNum / 1000000) + ""String_Node_Str""+ myFormat.format((seqNum / 1000) % 1000)+ ""String_Node_Str""+ myFormat.format(seqNum % 1000)+ ""String_Node_Str"";
    BufferedInputStream bis=new BufferedInputStream(new GZIPInputStream(new URL(url).openStream()));
    dc.addData(bis);
    makeOverlay();
    reloadChangesets();
  }
 catch (  IOException ioe) {
    if (ioe instanceof FileNotFoundException) {
    }
 else {
      ioe.printStackTrace();
    }
  }
}","public void getData(){
  try {
    DecimalFormat myFormat=new DecimalFormat(""String_Node_Str"");
    String url=""String_Node_Str"" + myFormat.format(seqNum / 1000000) + ""String_Node_Str""+ myFormat.format((seqNum / 1000) % 1000)+ ""String_Node_Str""+ myFormat.format(seqNum % 1000)+ ""String_Node_Str"";
    BufferedInputStream bis=new BufferedInputStream(new GZIPInputStream(new URL(url).openStream()));
    dc.addData(bis);
    System.out.println(""String_Node_Str"" + dc.nodes.size());
    makeOverlay();
    reloadChangesets();
    seqNum++;
  }
 catch (  IOException ioe) {
    if (ioe instanceof FileNotFoundException) {
    }
 else {
      ioe.printStackTrace();
    }
  }
}",0.9408983451536644
44060,"public boolean isValid(){
  return (Explore.exit() || parent.teleportFailSafe >= GameConstants.TELEPORT_FAILSAFE || parent.prestige || Dungeon.curFloor() >= GameConstants.MAX_FLOOR);
}","public boolean isValid(){
  return (Explore.exit() || parent.teleportFailSafe >= GameConstants.TELEPORT_FAILSAFE || parent.prestige || Dungeon.curFloor() > GameConstants.MAX_FLOOR);
}",0.997275204359673
44061,"public int execute(){
  Pathfinding bfs=new Pathfinding(parent);
  Room end=null;
  Door searchDoor=getDoor();
  if (searchDoor != null) {
    end=searchDoor.getParent();
  }
  Room[] path=bfs.findPath(MyPlayer.currentRoom(),end);
  bfs.walkPath(path);
  return random(400,600);
}","public int execute(){
  Pathfinding bfs=new Pathfinding(parent);
  Room end=null;
  Door searchDoor=getDoor();
  if (searchDoor != null) {
    end=searchDoor.getParent();
  }
  Room[] path=bfs.findPath(MyPlayer.currentRoom(),end);
  if (path == null)   Explore.setExit(true);
  bfs.walkPath(path);
  return random(400,600);
}",0.9256198347107438
44062,"private void changeWeapons(){
  if (!destroyedArmour && !MyEquipment.contains(""String_Node_Str"",true)) {
    weapon=MyEquipment.getItem(MyEquipment.WEAPON).getName();
    util.clickItem(MyInventory.getItem(""String_Node_Str""));
    Game.openTab(Game.TAB_EQUIPMENT);
    sleep(Random.nextInt(500,600));
    Game.openTab(Game.TAB_INVENTORY);
  }
 else   if (MyInventory.getItem(weapon) != null) {
    util.clickItem(MyInventory.getItem(weapon));
    Game.openTab(Game.TAB_EQUIPMENT);
    sleep(Random.nextInt(500,600));
    Game.openTab(Game.TAB_INVENTORY);
  }
 else   killBoss();
}","private void changeWeapons(){
  if (!destroyedArmour && !MyEquipment.contains(""String_Node_Str"",true)) {
    weapon=MyEquipment.getItem(MyEquipment.WEAPON).getName();
    MyInventory.getItem(""String_Node_Str"").interact(""String_Node_Str"");
    Game.openTab(Game.TAB_EQUIPMENT);
    sleep(Random.nextInt(500,600));
    Game.openTab(Game.TAB_INVENTORY);
  }
 else   if (MyInventory.getItem(weapon) != null) {
    MyInventory.getItem(weapon).interact(""String_Node_Str"");
    Game.openTab(Game.TAB_EQUIPMENT);
    sleep(Random.nextInt(500,600));
    Game.openTab(Game.TAB_INVENTORY);
  }
 else   killBoss();
}",0.8226351351351351
44063,"private void talk(){
  Npc skinweaver=MyPlayer.currentRoom().getNearestNpc(""String_Node_Str"");
  if (MyPlayer.isMoving() && Calculations.distanceTo(skinweaver) > 3)   return;
  MyMovement.turnTo(skinweaver);
  if (skinweaver.isOnScreen() && skinweaver.interact(""String_Node_Str"")) {
    int timeout=0;
    while (skinweaver.getMessage() == null && ++timeout <= 20)     sleep(100);
    if (skinweaver.getMessage() != null && skinweaver.getMessage().contains(""String_Node_Str""))     talkedToSkinWeaver=true;
  }
}","private void talk(){
  Npc skinweaver=MyPlayer.currentRoom().getNearestNpc(""String_Node_Str"");
  if (MyPlayer.isMoving() && Calculations.distanceTo(skinweaver) > 3)   return;
  MyMovement.turnTo(skinweaver);
  if (skinweaver.isOnScreen() && skinweaver.interact(""String_Node_Str"")) {
    int timeout=0;
    while (skinweaver.getMessage() == null && ++timeout <= 20)     sleep(100);
    if (skinweaver.getMessage() != null && skinweaver.getMessage().contains(""String_Node_Str""))     talkedToSkinWeaver=true;
 else     if (Widgets.getComponent(242,0) != null)     talkedToSkinWeaver=true;
  }
}",0.9274047186932848
44064,"public boolean accept(Npc npc){
  return npc != null && MyPlayer.currentRoom().contains(npc);
}","public boolean accept(Npc npc){
  return npc != null && MyPlayer.currentRoom().contains(npc) && !npc.getName().contains(""String_Node_Str"");
}",0.8050847457627118
44065,"@Override public void onPlayerInteract(PlayerInteractEvent e){
  if (e.getAction().toString().equals(""String_Node_Str"")) {
synchronized (_lock) {
      if (e.getPlayer().getItemInHand().getType() == Material.AIR) {
        if (plugin.checkPermissions(e.getPlayer(),""String_Node_Str"",false) && plugin.breakMode(e.getPlayer())) {
          pixlBreak(e.getClickedBlock(),e.getPlayer());
        }
 else         if (plugin.checkPermissions(e.getPlayer(),""String_Node_Str"",false) && plugin.isToggled(e.getPlayer()) && a.Block(e.getClickedBlock())) {
          pixlArt(e.getClickedBlock(),e.getPlayer());
        }
      }
    }
  }
}","@Override public void onPlayerInteract(PlayerInteractEvent e){
  if (e.getAction().toString().equals(""String_Node_Str"")) {
synchronized (_lock) {
      if (e.getPlayer().getItemInHand().getType() == Material.AIR) {
        if (plugin.checkPermissions(e.getPlayer(),""String_Node_Str"",false) && plugin.breakMode(e.getPlayer())) {
          e.setCancelled(true);
          pixlBreak(e.getClickedBlock(),e.getPlayer());
        }
 else         if (plugin.checkPermissions(e.getPlayer(),""String_Node_Str"",false) && plugin.isToggled(e.getPlayer()) && a.Block(e.getClickedBlock())) {
          pixlArt(e.getClickedBlock(),e.getPlayer());
        }
      }
    }
  }
}",0.9751552795031057
44066,"public boolean onCommand(CommandSender cs,Command c,String l,String[] args){
  if (!cs.hasPermission(""String_Node_Str"")) {
    cs.sendMessage(ChatColor.RED + ""String_Node_Str"" + ""String_Node_Str"");
    return true;
  }
  Player player;
  if (cs instanceof Player) {
    player=(Player)cs;
  }
 else {
    sendVersionInfo(cs);
    return true;
  }
  if (args.length == 0) {
    togglePixl(player);
    return true;
  }
 else   if (args.length == 1) {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      sendVersionInfo(player);
      return true;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      togglePixl(player);
      return true;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      sendVersionInfo(player);
      cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!player.hasPermission(""String_Node_Str"")) {
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"" + ""String_Node_Str"");
        return true;
      }
      plugin.setBreak(player,(plugin.breakMode(player) ? false : true));
      cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + (plugin.breakMode(player) ? ""String_Node_Str"" : ""String_Node_Str""));
      if (plugin.shatterMode(player) && !plugin.breakMode(player)) {
        plugin.setShatter(player,false);
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
      }
      return true;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!player.hasPermission(""String_Node_Str"")) {
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"" + ""String_Node_Str"");
        return true;
      }
      plugin.setBreak(player,(plugin.shatterMode(player) ? false : true));
      cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + (plugin.shatterMode(player) ? ""String_Node_Str"" : ""String_Node_Str""));
      return true;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!player.hasPermission(""String_Node_Str"")) {
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"" + ""String_Node_Str"");
        return true;
      }
      if (plugin.isSet(player) != null) {
        plugin.removeValue(player);
        player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
      }
 else {
        player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
      }
      return true;
    }
  }
 else   if (args.length == 2) {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!player.hasPermission(""String_Node_Str"")) {
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"" + ""String_Node_Str"");
        return true;
      }
      try {
        int raw_value=Integer.parseInt(args[1].trim());
        int value=Math.max(0,Math.min(15,raw_value));
        plugin.setValue(player,value);
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + wool[value]+ ""String_Node_Str"");
        return true;
      }
 catch (      NumberFormatException e) {
        String names=""String_Node_Str"";
        String sep=""String_Node_Str"";
        for (int i=0; i < wool.length; i++) {
          if (args[1].equalsIgnoreCase(wool[i])) {
            plugin.setValue(player,i);
            cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + wool[i]+ ""String_Node_Str"");
            return true;
          }
          names+=sep + wool[i];
          sep=""String_Node_Str"";
        }
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"");
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
        cs.sendMessage(ChatColor.AQUA + names);
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ""String_Node_Str"");
        return true;
      }
    }
  }
  return false;
}","public boolean onCommand(CommandSender cs,Command c,String l,String[] args){
  if (!cs.hasPermission(""String_Node_Str"")) {
    cs.sendMessage(ChatColor.RED + ""String_Node_Str"" + ""String_Node_Str"");
    return true;
  }
  Player player;
  if (cs instanceof Player) {
    player=(Player)cs;
  }
 else {
    sendVersionInfo(cs);
    return true;
  }
  if (args.length == 0) {
    togglePixl(player);
    return true;
  }
 else   if (args.length == 1) {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      sendVersionInfo(player);
      return true;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      togglePixl(player);
      return true;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      sendVersionInfo(player);
      cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
      return true;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!player.hasPermission(""String_Node_Str"")) {
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"" + ""String_Node_Str"");
        return true;
      }
      plugin.setBreak(player,(plugin.breakMode(player) ? false : true));
      cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + (plugin.breakMode(player) ? ""String_Node_Str"" : ""String_Node_Str""));
      if (plugin.shatterMode(player) && !plugin.breakMode(player)) {
        plugin.setShatter(player,false);
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
      }
      return true;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!player.hasPermission(""String_Node_Str"")) {
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"" + ""String_Node_Str"");
        return true;
      }
      plugin.setShatter(player,(plugin.shatterMode(player) ? false : true));
      cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + (plugin.shatterMode(player) ? ""String_Node_Str"" : ""String_Node_Str""));
      return true;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!player.hasPermission(""String_Node_Str"")) {
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"" + ""String_Node_Str"");
        return true;
      }
      if (plugin.isSet(player) != null) {
        plugin.removeValue(player);
        player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
      }
 else {
        player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
      }
      return true;
    }
  }
 else   if (args.length == 2) {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (!player.hasPermission(""String_Node_Str"")) {
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"" + ""String_Node_Str"");
        return true;
      }
      try {
        int raw_value=Integer.parseInt(args[1].trim());
        int value=Math.max(0,Math.min(15,raw_value));
        plugin.setValue(player,value);
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + wool[value]+ ""String_Node_Str"");
        return true;
      }
 catch (      NumberFormatException e) {
        String names=""String_Node_Str"";
        String sep=""String_Node_Str"";
        for (int i=0; i < wool.length; i++) {
          if (args[1].equalsIgnoreCase(wool[i])) {
            plugin.setValue(player,i);
            cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + wool[i]+ ""String_Node_Str"");
            return true;
          }
          names+=sep + wool[i];
          sep=""String_Node_Str"";
        }
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"");
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
        cs.sendMessage(ChatColor.AQUA + names);
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ""String_Node_Str"");
        return true;
      }
    }
  }
  return false;
}",0.9985510746196572
44067,"public boolean onCommand(CommandSender cs,Command c,String l,String[] args){
  if (cs instanceof Player) {
    if (plugin.checkPermissions((Player)(cs),""String_Node_Str"",true)) {
      if (plugin.checkPermissions((Player)(cs),""String_Node_Str"",true)) {
        isPlayerAdmin=true;
      }
      isPlayer=true;
    }
 else {
      cs.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return false;
    }
  }
  if (args.length == 0) {
    if (isPlayer) {
      if (plugin.breakMode((Player)(cs))) {
        plugin.setBreak((Player)(cs),false);
      }
      plugin.setToggle((Player)(cs),(plugin.isToggled((Player)(cs)) ? false : true));
      cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + (plugin.isToggled((Player)(cs)) ? ""String_Node_Str"" : ""String_Node_Str""));
    }
  }
 else   if (args.length == 1) {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (isPlayer) {
        if (isPlayerAdmin) {
          cs.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + name);
          cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + plugin.version);
          cs.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + (plugin.permissionsEnabled ? ChatColor.GREEN + ""String_Node_Str"" + plugin.permissionsType+ ""String_Node_Str"" : ChatColor.RED + ""String_Node_Str""));
        }
      }
 else {
        cs.sendMessage(""String_Node_Str"");
        cs.sendMessage(""String_Node_Str"" + plugin.version);
        cs.sendMessage(""String_Node_Str"" + (plugin.permissionsEnabled ? ""String_Node_Str"" + plugin.permissionsType + ""String_Node_Str"" : ""String_Node_Str""));
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (isPlayer) {
        cs.sendMessage(name + ChatColor.AQUA + ""String_Node_Str""+ plugin.version);
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        if (isPlayerAdmin) {
          cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (isPlayerAdmin) {
          cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
      }
 else {
        cs.sendMessage(""String_Node_Str"");
        cs.sendMessage(""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (isPlayerAdmin) {
        if (plugin.isToggled((Player)(cs))) {
          plugin.setToggle((Player)(cs),false);
        }
        plugin.setBreak((Player)(cs),(plugin.breakMode((Player)(cs)) ? false : true));
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + (plugin.breakMode((Player)(cs)) ? ""String_Node_Str"" : ""String_Node_Str""));
      }
 else {
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (isPlayer) {
        if (plugin.isSet((Player)(cs)) == null) {
          return true;
        }
 else {
          plugin.removeValue((Player)(cs));
        }
      }
    }
  }
 else   if (args.length == 2) {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      try {
        int i=Integer.parseInt(args[1].trim());
        if (i > 16) {
          i=15;
        }
        if (i < 0) {
          i=0;
        }
        plugin.setValue((Player)(cs),i);
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + wool[i]);
      }
 catch (      NumberFormatException e) {
        for (int i=0; i < wool.length; i++) {
          if (args[1].equalsIgnoreCase(wool[i])) {
            plugin.setValue((Player)(cs),i);
            cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + wool[i]);
            return true;
          }
        }
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"");
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"");
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  return true;
}","public boolean onCommand(CommandSender cs,Command c,String l,String[] args){
  if (cs instanceof Player) {
    if (plugin.checkPermissions((Player)(cs),""String_Node_Str"",true)) {
      if (plugin.checkPermissions((Player)(cs),""String_Node_Str"",true)) {
        isPlayerAdmin=true;
      }
      if (plugin.checkPermissions((Player)(cs),""String_Node_Str"",true)) {
        isPlayerSpecial=true;
      }
      isPlayer=true;
    }
 else {
      cs.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return false;
    }
  }
  if (args.length == 0) {
    if (isPlayer) {
      if (plugin.breakMode((Player)(cs))) {
        plugin.setBreak((Player)(cs),false);
      }
      plugin.setToggle((Player)(cs),(plugin.isToggled((Player)(cs)) ? false : true));
      cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + (plugin.isToggled((Player)(cs)) ? ""String_Node_Str"" : ""String_Node_Str""));
    }
  }
 else   if (args.length == 1) {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (isPlayer) {
        if (isPlayerAdmin) {
          cs.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + name);
          cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + plugin.version);
          cs.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + (plugin.permissionsEnabled ? ChatColor.GREEN + ""String_Node_Str"" + plugin.permissionsType+ ""String_Node_Str"" : ChatColor.RED + ""String_Node_Str""));
        }
      }
 else {
        cs.sendMessage(""String_Node_Str"");
        cs.sendMessage(""String_Node_Str"" + plugin.version);
        cs.sendMessage(""String_Node_Str"" + (plugin.permissionsEnabled ? ""String_Node_Str"" + plugin.permissionsType + ""String_Node_Str"" : ""String_Node_Str""));
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (isPlayer) {
        cs.sendMessage(name + ChatColor.AQUA + ""String_Node_Str""+ plugin.version);
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        if (isPlayerAdmin) {
          cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
        if (isPlayerAdmin) {
          cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.DARK_AQUA+ ""String_Node_Str"");
        }
      }
 else {
        cs.sendMessage(""String_Node_Str"");
        cs.sendMessage(""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (isPlayerAdmin || isPlayerSpecial) {
        if (plugin.isToggled((Player)(cs))) {
          plugin.setToggle((Player)(cs),false);
        }
        plugin.setBreak((Player)(cs),(plugin.breakMode((Player)(cs)) ? false : true));
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + (plugin.breakMode((Player)(cs)) ? ""String_Node_Str"" : ""String_Node_Str""));
      }
 else {
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (isPlayer) {
        if (plugin.isSet((Player)(cs)) == null) {
          return true;
        }
 else {
          plugin.removeValue((Player)(cs));
        }
      }
    }
  }
 else   if (args.length == 2) {
    if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      try {
        int i=Integer.parseInt(args[1].trim());
        if (i > 16) {
          i=15;
        }
        if (i < 0) {
          i=0;
        }
        plugin.setValue((Player)(cs),i);
        cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + wool[i]);
      }
 catch (      NumberFormatException e) {
        for (int i=0; i < wool.length; i++) {
          if (args[1].equalsIgnoreCase(wool[i])) {
            plugin.setValue((Player)(cs),i);
            cs.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + wool[i]);
            return true;
          }
        }
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"");
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"");
        cs.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  return true;
}",0.9845537082891168
44068,"@Override public void onPlayerInteract(PlayerInteractEvent e){
  if (e.getAction().equals(Action.RIGHT_CLICK_BLOCK)) {
synchronized (_lock) {
      if (e.getPlayer().getItemInHand().getType() == Material.AIR) {
        if (plugin.checkPermissions(e.getPlayer(),""String_Node_Str"",false) && plugin.isToggled(e.getPlayer()) && a.Block(e.getClickedBlock())) {
          pixlArt(e.getClickedBlock(),e.getPlayer());
        }
      }
    }
  }
 else   if (e.getAction().equals(Action.LEFT_CLICK_BLOCK)) {
synchronized (_lock) {
      if (e.getPlayer().getItemInHand().getType() == Material.AIR) {
        if (plugin.checkPermissions(e.getPlayer(),""String_Node_Str"",false) && plugin.breakMode(e.getPlayer())) {
          pixlBreak(e.getClickedBlock(),e.getPlayer());
        }
      }
    }
  }
}","@Override public void onPlayerInteract(PlayerInteractEvent e){
  if (e.getAction().equals(Action.RIGHT_CLICK_BLOCK)) {
synchronized (_lock) {
      if (e.getPlayer().getItemInHand().getType() == Material.AIR) {
        if (plugin.checkPermissions(e.getPlayer(),""String_Node_Str"",false) && plugin.isToggled(e.getPlayer()) && a.Block(e.getClickedBlock())) {
          pixlArt(e.getClickedBlock(),e.getPlayer());
        }
      }
    }
  }
 else   if (e.getAction().equals(Action.LEFT_CLICK_BLOCK)) {
synchronized (_lock) {
      if (this.isPickaxe(e.getPlayer().getItemInHand().getType())) {
        if (plugin.checkPermissions(e.getPlayer(),""String_Node_Str"",false) && plugin.breakMode(e.getPlayer())) {
          pixlBreak(e.getClickedBlock(),e.getPlayer());
        }
 else         if (plugin.checkPermissions(e.getPlayer(),""String_Node_Str"",false) && plugin.breakMode(e.getPlayer())) {
          pixlHelp(e.getClickedBlock(),e.getPlayer());
        }
      }
    }
  }
}",0.8774120317820658
44069,"public static long getDeepObjectSize(Object obj,LibraVisitor visitor) throws LibraException {
  try {
    return visitor.visit(LibraObjectVisitor.INSTANCE,obj);
  }
 catch (  VisitationException e) {
    throw new LibraException(e);
  }
}","public static long getDeepObjectSize(Object obj,LibraVisitor visitor) throws LibraException {
  try {
    return visitor.visit(LibraObjectVisitor.INSTANCE,obj,new LinkedList<Object>());
  }
 catch (  VisitationException e) {
    throw new LibraException(e);
  }
}",0.9500998003992016
44070,"R visit(C context,T target) throws VisitationException ;","R visit(C context,T target,LinkedList<Object> parentChine) throws VisitationException ;",0.7832167832167832
44071,"@Override public Long visit(Visitor<Long,Object> visitor,Object obj) throws VisitationException {
  final Class<?> cls=obj.getClass();
  long size=visitor.visit(obj);
  try {
    Field declaredFields[]=cls.getDeclaredFields();
    for (    Field field : declaredFields) {
      if (Modifier.isStatic(field.getModifiers()))       continue;
      field.setAccessible(true);
      Object fieldValue=field.get(obj);
      if (field.getType().isPrimitive())       size+=visitor.visit(fieldValue);
 else       if (fieldValue != null)       size+=visit(visitor,fieldValue);
    }
    return size;
  }
 catch (  IllegalAccessException e) {
    throw new VisitationException(e);
  }
}","@Override public Long visit(Visitor<Long,Object> visitor,Object obj,LinkedList<Object> parentChine) throws VisitationException {
  final Class<?> cls=obj.getClass();
  long size=visitor.visit(obj);
  try {
    Field declaredFields[]=cls.getDeclaredFields();
    for (    Field field : declaredFields) {
      if (Modifier.isStatic(field.getModifiers()))       continue;
      field.setAccessible(true);
      Object fieldValue=field.get(obj);
      if (field.getType().isPrimitive()) {
        size+=visitor.visit(fieldValue);
      }
 else       if (fieldValue instanceof String) {
        size+=((String)fieldValue).length();
      }
 else       if (fieldValue != null) {
        if (parentChine.contains(fieldValue)) {
          continue;
        }
 else {
          parentChine.add(fieldValue);
          size+=visit(visitor,fieldValue,parentChine);
        }
      }
    }
    return size;
  }
 catch (  IllegalAccessException e) {
    throw new VisitationException(e);
  }
catch (  StackOverflowError e) {
    throw new VisitationException(e);
  }
}",0.7780346820809249
44072,"public TaskParser(IContextLookup contextLookup,IProjectLookup projectLookup,Analytics analytics){
  super(""String_Node_Str"",analytics);
  mContextLookup=contextLookup;
  mProjectLookup=projectLookup;
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      specificBuilder.setDescription(value);
      return true;
    }
  }
);
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      specificBuilder.setDetails(value);
      return true;
    }
  }
);
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      Id tracksId=Id.create(Long.parseLong(value));
      specificBuilder.setTracksId(tracksId);
      return true;
    }
  }
);
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      long date;
      try {
        date=DateUtils.parseIso8601Date(value);
        specificBuilder.setModifiedDate(date);
        return true;
      }
 catch (      ParseException e) {
        return false;
      }
    }
  }
);
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      if (!TextUtils.isEmpty(value)) {
        Id tracksId=Id.create(Long.parseLong(value));
        Id context=mContextLookup.findContextIdByTracksId(tracksId);
        if (context.isInitialised()) {
          specificBuilder.setContextId(context);
        }
      }
      return true;
    }
  }
);
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      if (!TextUtils.isEmpty(value)) {
        Id tracksId=Id.create(Long.parseLong(value));
        Id project=mProjectLookup.findProjectIdByTracksId(tracksId);
        if (project.isInitialised()) {
          specificBuilder.setProjectId(project);
        }
      }
      return true;
    }
  }
);
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      if (!TextUtils.isEmpty(value)) {
        try {
          long created=DateUtils.parseIso8601Date(value);
          specificBuilder.setCreatedDate(created);
        }
 catch (        ParseException e) {
          return false;
        }
      }
      return true;
    }
  }
);
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      if (!TextUtils.isEmpty(value)) {
        try {
          long due=DateUtils.parseIso8601Date(value);
          specificBuilder.setDueDate(due);
        }
 catch (        ParseException e) {
          return false;
        }
      }
      return true;
    }
  }
);
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      if (!TextUtils.isEmpty(value)) {
        try {
          long showFrom=DateUtils.parseIso8601Date(value);
          specificBuilder.setStartDate(showFrom);
        }
 catch (        ParseException e) {
          return false;
        }
      }
      return true;
    }
  }
);
}","public TaskParser(IContextLookup contextLookup,IProjectLookup projectLookup,Analytics analytics){
  super(""String_Node_Str"",analytics);
  mContextLookup=contextLookup;
  mProjectLookup=projectLookup;
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      if (value.equals(""String_Node_Str""))       specificBuilder.setComplete(true);
      return true;
    }
  }
);
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      specificBuilder.setDescription(value);
      return true;
    }
  }
);
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      specificBuilder.setDetails(value);
      return true;
    }
  }
);
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      Id tracksId=Id.create(Long.parseLong(value));
      specificBuilder.setTracksId(tracksId);
      return true;
    }
  }
);
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      long date;
      try {
        date=DateUtils.parseIso8601Date(value);
        specificBuilder.setModifiedDate(date);
        return true;
      }
 catch (      ParseException e) {
        return false;
      }
    }
  }
);
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      if (!TextUtils.isEmpty(value)) {
        Id tracksId=Id.create(Long.parseLong(value));
        Id context=mContextLookup.findContextIdByTracksId(tracksId);
        if (context.isInitialised()) {
          specificBuilder.setContextId(context);
        }
      }
      return true;
    }
  }
);
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      if (!TextUtils.isEmpty(value)) {
        Id tracksId=Id.create(Long.parseLong(value));
        Id project=mProjectLookup.findProjectIdByTracksId(tracksId);
        if (project.isInitialised()) {
          specificBuilder.setProjectId(project);
        }
      }
      return true;
    }
  }
);
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      if (!TextUtils.isEmpty(value)) {
        try {
          long created=DateUtils.parseIso8601Date(value);
          specificBuilder.setCreatedDate(created);
        }
 catch (        ParseException e) {
          return false;
        }
      }
      return true;
    }
  }
);
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      if (!TextUtils.isEmpty(value)) {
        try {
          long due=DateUtils.parseIso8601Date(value);
          specificBuilder.setDueDate(due);
        }
 catch (        ParseException e) {
          return false;
        }
      }
      return true;
    }
  }
);
  appliers.put(""String_Node_Str"",new Applier(){
    @Override public boolean apply(    String value){
      if (!TextUtils.isEmpty(value)) {
        try {
          long showFrom=DateUtils.parseIso8601Date(value);
          specificBuilder.setStartDate(showFrom);
        }
 catch (        ParseException e) {
          return false;
        }
      }
      return true;
    }
  }
);
}",0.9656259854935352
44073,"private Uri addOrUpdateCalendarEvent(Id calEventId,String title,String description,Id projectId,Id contextId,String timezone,long start,long end,boolean allDay){
  if (projectId.isInitialised()) {
    String projectName=getProjectName(projectId);
    title=projectName + ""String_Node_Str"" + title;
  }
  if (description == null) {
    description=""String_Node_Str"";
  }
  ContentValues values=new ContentValues();
  if (!TextUtils.isEmpty(timezone)) {
    values.put(""String_Node_Str"",timezone);
  }
  values.put(""String_Node_Str"",Preferences.getCalendarId(this));
  values.put(""String_Node_Str"",title);
  values.put(""String_Node_Str"",allDay ? 1 : 0);
  if (start > 0L) {
    values.put(""String_Node_Str"",start);
  }
  if (end > 0L) {
    values.put(""String_Node_Str"",end);
  }
  values.put(""String_Node_Str"",description);
  values.put(""String_Node_Str"",0);
  values.put(""String_Node_Str"",0);
  values.put(""String_Node_Str"",0);
  if (contextId.isInitialised()) {
    String contextName=getContextName(contextId);
    values.put(""String_Node_Str"",contextName);
  }
  Uri baseUri=Uri.parse(""String_Node_Str"");
  ContentResolver cr=getContentResolver();
  int updateCount=0;
  Uri eventUri=null;
  try {
    if (calEventId.isInitialised()) {
      eventUri=ContentUris.appendId(baseUri.buildUpon(),calEventId.getId()).build();
      updateCount=cr.update(eventUri,values,null,null);
    }
    if (updateCount == 0) {
      eventUri=cr.insert(baseUri,values);
    }
  }
 catch (  Exception e) {
    Log.e(cTag,""String_Node_Str"",e);
    mAnalytics.onError(Constants.cFlurryCalendarUpdateError,e.getMessage(),getClass().getName());
  }
  return eventUri;
}","private Uri addOrUpdateCalendarEvent(Id calEventId,String title,String description,Id projectId,Id contextId,String timezone,long start,long end,boolean allDay){
  if (projectId.isInitialised()) {
    String projectName=getProjectName(projectId);
    title=projectName + ""String_Node_Str"" + title;
  }
  if (description == null) {
    description=""String_Node_Str"";
  }
  ContentValues values=new ContentValues();
  if (!TextUtils.isEmpty(timezone)) {
    values.put(""String_Node_Str"",timezone);
  }
  values.put(""String_Node_Str"",Preferences.getCalendarId(this));
  values.put(""String_Node_Str"",title);
  values.put(""String_Node_Str"",allDay ? 1 : 0);
  if (start > 0L) {
    values.put(""String_Node_Str"",start);
  }
  if (end > 0L) {
    values.put(""String_Node_Str"",end);
  }
  values.put(""String_Node_Str"",description);
  values.put(""String_Node_Str"",0);
  values.put(""String_Node_Str"",0);
  values.put(""String_Node_Str"",0);
  if (contextId.isInitialised()) {
    String contextName=getContextName(contextId);
    values.put(""String_Node_Str"",contextName);
  }
  Uri eventUri=null;
  try {
    eventUri=addCalendarEntry(values,calEventId,Uri.parse(""String_Node_Str""));
  }
 catch (  Exception e) {
    Log.e(cTag,""String_Node_Str"",e);
    try {
      eventUri=addCalendarEntry(values,calEventId,Uri.parse(""String_Node_Str""));
    }
 catch (    Exception e2) {
      Log.e(cTag,""String_Node_Str"",e2);
      mAnalytics.onError(Constants.cFlurryCalendarUpdateError,e2.getMessage(),getClass().getName());
    }
  }
  return eventUri;
}",0.7977386934673367
44074,"private void setupSampleTask(){
  long now=System.currentTimeMillis();
  Project sampleProject=new Project(""String_Node_Str"",0L,false,null,null);
  Context sampleContext=ModelUtils.getSampleContext(getResources());
  mSampleTask=new Task(""String_Node_Str"",""String_Node_Str"",sampleContext,sampleProject,now,now,now,now + DateUtils.HOUR_IN_MILLIS * 3,null,false,false,null,1,false,null,null);
}","private void setupSampleTask(){
  long now=System.currentTimeMillis();
  Project sampleProject=new Project(""String_Node_Str"",0L,false,null,System.currentTimeMillis());
  Context sampleContext=ModelUtils.getSampleContext(getResources());
  mSampleTask=new Task(""String_Node_Str"",""String_Node_Str"",sampleContext,sampleProject,now,now,now,now + DateUtils.HOUR_IN_MILLIS * 3,null,false,false,null,1,false,null,null);
}",0.9627791563275434
44075,"private void writeContexts(Builder builder,int progressStart,int progressEnd){
  Log.d(cTag,""String_Node_Str"");
  Cursor cursor=getContentResolver().query(Shuffle.Contexts.CONTENT_URI,Shuffle.Contexts.cFullProjection,null,null,null);
  int i=0;
  int total=cursor.getCount();
  String type=getString(R.string.context_name);
  while (cursor.moveToNext()) {
    Context context=BindingUtils.readContext(cursor,getResources());
    String text=getString(R.string.backup_progress,type,context.name);
    int percent=calculatePercent(progressStart,progressEnd,++i,total);
    publishProgress(Progress.createProgress(percent,text));
  }
  cursor.close();
}","private void writeContexts(Builder builder,int progressStart,int progressEnd){
  Log.d(cTag,""String_Node_Str"");
  Cursor cursor=getContentResolver().query(Shuffle.Contexts.CONTENT_URI,Shuffle.Contexts.cFullProjection,null,null,null);
  int i=0;
  int total=cursor.getCount();
  String type=getString(R.string.context_name);
  while (cursor.moveToNext()) {
    Context context=BindingUtils.readContext(cursor,getResources());
    builder.addContext(context.toDto());
    String text=getString(R.string.backup_progress,type,context.name);
    int percent=calculatePercent(progressStart,progressEnd,++i,total);
    publishProgress(Progress.createProgress(percent,text));
  }
  cursor.close();
}",0.9694258016405668
44076,"private void writeProjects(Builder builder,int progressStart,int progressEnd){
  Log.d(cTag,""String_Node_Str"");
  Cursor cursor=getContentResolver().query(Shuffle.Projects.CONTENT_URI,Shuffle.Projects.cFullProjection,null,null,null);
  int i=0;
  int total=cursor.getCount();
  String type=getString(R.string.project_name);
  while (cursor.moveToNext()) {
    Project project=BindingUtils.readProject(cursor);
    String text=getString(R.string.backup_progress,type,project.name);
    int percent=calculatePercent(progressStart,progressEnd,++i,total);
    publishProgress(Progress.createProgress(percent,text));
  }
  cursor.close();
}","private void writeProjects(Builder builder,int progressStart,int progressEnd){
  Log.d(cTag,""String_Node_Str"");
  Cursor cursor=getContentResolver().query(Shuffle.Projects.CONTENT_URI,Shuffle.Projects.cFullProjection,null,null,null);
  int i=0;
  int total=cursor.getCount();
  String type=getString(R.string.project_name);
  while (cursor.moveToNext()) {
    Project project=BindingUtils.readProject(cursor);
    builder.addProject(project.toDto());
    String text=getString(R.string.backup_progress,type,project.name);
    int percent=calculatePercent(progressStart,progressEnd,++i,total);
    publishProgress(Progress.createProgress(percent,text));
  }
  cursor.close();
}",0.9687261632341724
44077,"@Override public void onProgressUpdate(Progress... progresses){
  Progress progress=progresses[0];
  mProgressBar.setProgress(progress.getProgressPercent());
  mProgressText.setText(progress.getDetails());
  if (progress.isError()) {
    Runnable action=progress.getErrorUIAction();
    if (action != null) {
      action.run();
    }
 else {
      setState(State.ERROR);
    }
  }
 else   if (progress.isComplete()) {
    setState(State.COMPLETE);
  }
}","@Override public void onProgressUpdate(Progress... progresses){
  Progress progress=progresses[0];
  mProgressBar.setProgress(progress.getProgressPercent());
  mProgressText.setText(progress.getDetails());
  if (progress.isError()) {
    AlertUtils.showWarning(PreferencesCreateBackupActivity.this,progress.getDetails());
    Runnable action=progress.getErrorUIAction();
    if (action != null) {
      action.run();
    }
 else {
      setState(State.ERROR);
    }
  }
 else   if (progress.isComplete()) {
    setState(State.COMPLETE);
  }
}",0.9116465863453816
44078,"private void writeTasks(Builder builder,int progressStart,int progressEnd){
  Log.d(cTag,""String_Node_Str"");
  Cursor cursor=getContentResolver().query(Shuffle.Tasks.CONTENT_URI,Shuffle.Tasks.cExpandedProjection,null,null,null);
  int i=0;
  int total=cursor.getCount();
  String type=getString(R.string.task_name);
  while (cursor.moveToNext()) {
    Task task=BindingUtils.readTask(cursor,getResources());
    String text=getString(R.string.backup_progress,type,task.description);
    int percent=calculatePercent(progressStart,progressEnd,++i,total);
    publishProgress(Progress.createProgress(percent,text));
  }
  cursor.close();
}","private void writeTasks(Builder builder,int progressStart,int progressEnd){
  Log.d(cTag,""String_Node_Str"");
  Cursor cursor=getContentResolver().query(Shuffle.Tasks.CONTENT_URI,Shuffle.Tasks.cExpandedProjection,null,null,null);
  int i=0;
  int total=cursor.getCount();
  String type=getString(R.string.task_name);
  while (cursor.moveToNext()) {
    Task task=BindingUtils.readTask(cursor,getResources());
    builder.addTask(task.toDto());
    String text=getString(R.string.backup_progress,type,task.description);
    int percent=calculatePercent(progressStart,progressEnd,++i,total);
    publishProgress(Progress.createProgress(percent,text));
  }
  cursor.close();
}",0.9732620320855616
44079,"private Locator<Context> addContexts(List<org.dodgybits.shuffle.dto.ShuffleProtos.Context> protoContexts,int progressStart,int progressEnd){
  Set<String> allContextNames=new HashSet<String>();
  for (  org.dodgybits.shuffle.dto.ShuffleProtos.Context protoContext : protoContexts) {
    allContextNames.add(protoContext.getName());
  }
  Map<String,Context> existingContexts=BindingUtils.fetchContextsByName(PreferencesRestoreBackupActivity.this,allContextNames);
  BaseLocator<Context> contextLocator=new BaseLocator<Context>();
  List<Context> newContexts=new ArrayList<Context>();
  Set<String> newContextNames=new HashSet<String>();
  int i=0;
  int total=protoContexts.size();
  String type=getString(R.string.context_name);
  for (  org.dodgybits.shuffle.dto.ShuffleProtos.Context protoContext : protoContexts) {
    String contextName=protoContext.getName();
    Context context=existingContexts.get(contextName);
    if (context != null) {
      Log.d(cTag,""String_Node_Str"" + contextName + ""String_Node_Str"");
    }
 else {
      Log.d(cTag,""String_Node_Str"" + contextName + ""String_Node_Str"");
    }
    contextLocator.addItem(protoContext.getId(),contextName,context);
    String text=getString(R.string.restore_progress,type,contextName);
    int percent=calculatePercent(progressStart,progressEnd,++i,total);
    publishProgress(Progress.createProgress(percent,text));
  }
  BindingUtils.persistNewContexts(PreferencesRestoreBackupActivity.this,newContexts);
  Map<String,Context> savedContexts=BindingUtils.fetchContextsByName(PreferencesRestoreBackupActivity.this,newContextNames);
  for (  String contextName : newContextNames) {
    Context savedContext=savedContexts.get(contextName);
    Context restoredContext=contextLocator.findByName(contextName);
    contextLocator.addItem(restoredContext.id,contextName,savedContext);
  }
  return contextLocator;
}","private Locator<Context> addContexts(List<org.dodgybits.shuffle.dto.ShuffleProtos.Context> protoContexts,int progressStart,int progressEnd){
  Set<String> allContextNames=new HashSet<String>();
  for (  org.dodgybits.shuffle.dto.ShuffleProtos.Context protoContext : protoContexts) {
    allContextNames.add(protoContext.getName());
  }
  Map<String,Context> existingContexts=BindingUtils.fetchContextsByName(PreferencesRestoreBackupActivity.this,allContextNames);
  BaseLocator<Context> contextLocator=new BaseLocator<Context>();
  List<Context> newContexts=new ArrayList<Context>();
  Set<String> newContextNames=new HashSet<String>();
  int i=0;
  int total=protoContexts.size();
  String type=getString(R.string.context_name);
  for (  org.dodgybits.shuffle.dto.ShuffleProtos.Context protoContext : protoContexts) {
    String contextName=protoContext.getName();
    Context context=existingContexts.get(contextName);
    if (context != null) {
      Log.d(cTag,""String_Node_Str"" + contextName + ""String_Node_Str"");
    }
 else {
      Log.d(cTag,""String_Node_Str"" + contextName + ""String_Node_Str"");
      context=Context.buildFromDto(protoContext,getResources());
      newContexts.add(context);
      newContextNames.add(contextName);
    }
    contextLocator.addItem(protoContext.getId(),contextName,context);
    String text=getString(R.string.restore_progress,type,contextName);
    int percent=calculatePercent(progressStart,progressEnd,++i,total);
    publishProgress(Progress.createProgress(percent,text));
  }
  BindingUtils.persistNewContexts(PreferencesRestoreBackupActivity.this,newContexts);
  Map<String,Context> savedContexts=BindingUtils.fetchContextsByName(PreferencesRestoreBackupActivity.this,newContextNames);
  for (  String contextName : newContextNames) {
    Context savedContext=savedContexts.get(contextName);
    Context restoredContext=contextLocator.findByName(contextName);
    contextLocator.addItem(restoredContext.id,contextName,savedContext);
  }
  return contextLocator;
}",0.9647361647361647
44080,"private Locator<Project> addProjects(List<org.dodgybits.shuffle.dto.ShuffleProtos.Project> protoProjects,Locator<Context> contextLocator,int progressStart,int progressEnd){
  Set<String> allProjectNames=new HashSet<String>();
  for (  org.dodgybits.shuffle.dto.ShuffleProtos.Project protoProject : protoProjects) {
    allProjectNames.add(protoProject.getName());
  }
  Map<String,Project> existingProjects=BindingUtils.fetchProjectsByName(PreferencesRestoreBackupActivity.this,allProjectNames);
  BaseLocator<Project> projectLocator=new BaseLocator<Project>();
  List<Project> newProjects=new ArrayList<Project>();
  Set<String> newProjectNames=new HashSet<String>();
  int i=0;
  int total=protoProjects.size();
  String type=getString(R.string.project_name);
  for (  org.dodgybits.shuffle.dto.ShuffleProtos.Project protoProject : protoProjects) {
    String projectName=protoProject.getName();
    Project project=existingProjects.get(projectName);
    if (project != null) {
      Log.d(cTag,""String_Node_Str"" + projectName + ""String_Node_Str"");
    }
 else {
      Log.d(cTag,""String_Node_Str"" + projectName + ""String_Node_Str"");
      newProjectNames.add(projectName);
    }
    projectLocator.addItem(protoProject.getId(),projectName,project);
    String text=getString(R.string.restore_progress,type,projectName);
    int percent=calculatePercent(progressStart,progressEnd,++i,total);
    publishProgress(Progress.createProgress(percent,text));
  }
  BindingUtils.persistNewProjects(PreferencesRestoreBackupActivity.this,newProjects);
  Map<String,Project> savedProjects=BindingUtils.fetchProjectsByName(PreferencesRestoreBackupActivity.this,newProjectNames);
  for (  String projectName : newProjectNames) {
    Project savedProject=savedProjects.get(projectName);
    Project restoredProject=projectLocator.findByName(projectName);
    projectLocator.addItem(restoredProject.id,projectName,savedProject);
  }
  return projectLocator;
}","private Locator<Project> addProjects(List<org.dodgybits.shuffle.dto.ShuffleProtos.Project> protoProjects,Locator<Context> contextLocator,int progressStart,int progressEnd){
  Set<String> allProjectNames=new HashSet<String>();
  for (  org.dodgybits.shuffle.dto.ShuffleProtos.Project protoProject : protoProjects) {
    allProjectNames.add(protoProject.getName());
  }
  Map<String,Project> existingProjects=BindingUtils.fetchProjectsByName(PreferencesRestoreBackupActivity.this,allProjectNames);
  BaseLocator<Project> projectLocator=new BaseLocator<Project>();
  List<Project> newProjects=new ArrayList<Project>();
  Set<String> newProjectNames=new HashSet<String>();
  int i=0;
  int total=protoProjects.size();
  String type=getString(R.string.project_name);
  for (  org.dodgybits.shuffle.dto.ShuffleProtos.Project protoProject : protoProjects) {
    String projectName=protoProject.getName();
    Project project=existingProjects.get(projectName);
    if (project != null) {
      Log.d(cTag,""String_Node_Str"" + projectName + ""String_Node_Str"");
    }
 else {
      Log.d(cTag,""String_Node_Str"" + projectName + ""String_Node_Str"");
      project=Project.buildFromDto(protoProject,contextLocator);
      newProjects.add(project);
      newProjectNames.add(projectName);
    }
    projectLocator.addItem(protoProject.getId(),projectName,project);
    String text=getString(R.string.restore_progress,type,projectName);
    int percent=calculatePercent(progressStart,progressEnd,++i,total);
    publishProgress(Progress.createProgress(percent,text));
  }
  BindingUtils.persistNewProjects(PreferencesRestoreBackupActivity.this,newProjects);
  Map<String,Project> savedProjects=BindingUtils.fetchProjectsByName(PreferencesRestoreBackupActivity.this,newProjectNames);
  for (  String projectName : newProjectNames) {
    Project savedProject=savedProjects.get(projectName);
    Project restoredProject=projectLocator.findByName(projectName);
    projectLocator.addItem(restoredProject.id,projectName,savedProject);
  }
  return projectLocator;
}",0.97568312860366
44081,"public Context(String name,int colour,Icon icon,Long tracksId,Long tracksModified){
  this(null,name,colour,icon,tracksId,tracksModified);
}","public Context(String name,int colour,Icon icon,Long tracksId,long modified){
  this(null,name,colour,icon,tracksId,modified);
}",0.9328358208955224
44082,"public static Context buildFromDto(org.dodgybits.shuffle.dto.ShuffleProtos.Context dto,Resources res){
  Icon icon;
  if (dto.hasIcon()) {
    icon=Icon.createIcon(dto.getIcon(),res);
  }
 else {
    icon=Icon.NONE;
  }
  return new Context(dto.getId(),dto.getName(),dto.getColourIndex(),icon,null,null);
}","public static Context buildFromDto(org.dodgybits.shuffle.dto.ShuffleProtos.Context dto,Resources res){
  Icon icon;
  if (dto.hasIcon()) {
    icon=Icon.createIcon(dto.getIcon(),res);
  }
 else {
    icon=Icon.NONE;
  }
  Long tracksId=null;
  if (dto.hasTracksId()) {
    tracksId=dto.getTracksId();
  }
  long modified=fromDate(dto.getModified());
  return new Context(dto.getId(),dto.getName(),dto.getColourIndex(),icon,tracksId,modified);
}",0.792
44083,"public org.dodgybits.shuffle.dto.ShuffleProtos.Context toDto(){
  Builder builder=org.dodgybits.shuffle.dto.ShuffleProtos.Context.newBuilder();
  builder.setId(id).setName(name).setColourIndex(colourIndex);
  if (icon != Icon.NONE) {
    builder.setIcon(icon.iconName);
  }
  return builder.build();
}","public org.dodgybits.shuffle.dto.ShuffleProtos.Context toDto(){
  Builder builder=org.dodgybits.shuffle.dto.ShuffleProtos.Context.newBuilder();
  builder.setId(id).setName(name).setColourIndex(colourIndex).setModified(toDate(modified));
  if (tracksId != null) {
    builder.setTracksId(tracksId);
  }
  if (icon != Icon.NONE) {
    builder.setIcon(icon.iconName);
  }
  return builder.build();
}",0.860832137733142
44084,"@Override public Long getModified(){
  return modified;
}","@Override public long getModified(){
  return modified;
}",0.9824561403508772
44085,"public Project(String name,Long defaultContextId,boolean archived,Long tracksId,Long tracksModified){
  this(null,name,defaultContextId,archived,tracksId,tracksModified);
}","public Project(String name,Long defaultContextId,boolean archived,Long tracksId,long modified){
  this(null,name,defaultContextId,archived,tracksId,modified);
}",0.9457831325301204
44086,"public static Project buildFromDto(org.dodgybits.shuffle.dto.ShuffleProtos.Project dto,Locator<Context> contextLocator){
  Long defaultContextId=null;
  if (dto.hasDefaultContextId()) {
    Context defaultContext=contextLocator.findById(dto.getDefaultContextId());
    if (defaultContext != null) {
      defaultContextId=defaultContext.id;
    }
  }
  return new Project(dto.getId(),dto.getName(),defaultContextId,false,null,null);
}","public static Project buildFromDto(org.dodgybits.shuffle.dto.ShuffleProtos.Project dto,Locator<Context> contextLocator){
  Long defaultContextId=null;
  if (dto.hasDefaultContextId()) {
    Context defaultContext=contextLocator.findById(dto.getDefaultContextId());
    if (defaultContext != null) {
      defaultContextId=defaultContext.id;
    }
  }
  Long tracksId=null;
  if (dto.hasTracksId()) {
    tracksId=dto.getTracksId();
  }
  long modified=fromDate(dto.getModified());
  return new Project(dto.getId(),dto.getName(),defaultContextId,false,tracksId,modified);
}",0.8469184890656064
44087,"public org.dodgybits.shuffle.dto.ShuffleProtos.Project toDto(){
  Builder builder=org.dodgybits.shuffle.dto.ShuffleProtos.Project.newBuilder();
  builder.setId(id).setName(name);
  if (defaultContextId != null) {
    builder.setDefaultContextId(defaultContextId);
  }
  return builder.build();
}","public org.dodgybits.shuffle.dto.ShuffleProtos.Project toDto(){
  Builder builder=org.dodgybits.shuffle.dto.ShuffleProtos.Project.newBuilder();
  builder.setId(id).setName(name).setModified(toDate(modified));
  if (defaultContextId != null) {
    builder.setDefaultContextId(defaultContextId);
  }
  if (tracksId != null) {
    builder.setTracksId(tracksId);
  }
  return builder.build();
}",0.7912408759124088
44088,"@Override public Long getModified(){
  return modified;
}","@Override public long getModified(){
  return modified;
}",0.9824561403508772
44089,"public static Task buildFromDto(org.dodgybits.shuffle.dto.ShuffleProtos.Task dto,Locator<Context> contextLocator,Locator<Project> projectLocator){
  Long id=dto.getId();
  String description=dto.getDescription();
  String details=dto.getDetails();
  Context context=null;
  if (dto.hasContextId()) {
    context=contextLocator.findById(dto.getContextId());
  }
  Project project=null;
  if (dto.hasProjectId()) {
    project=projectLocator.findById(dto.getProjectId());
  }
  long created=fromDate(dto.getCreated());
  long modified=fromDate(dto.getModified());
  long startDate=fromDate(dto.getStartDate());
  long dueDate=fromDate(dto.getDueDate());
  String timezone=dto.getTimezone();
  Boolean allDay=dto.getAllDay();
  Boolean hasAlarms=false;
  Long calEventId=null;
  if (dto.hasCalEventId()) {
    calEventId=dto.getCalEventId();
  }
  Integer order=dto.getOrder();
  Boolean complete=dto.getComplete();
  return new Task(id,description,details,context,project,created,modified,startDate,dueDate,timezone,allDay,hasAlarms,calEventId,order,complete,null);
}","public static Task buildFromDto(org.dodgybits.shuffle.dto.ShuffleProtos.Task dto,Locator<Context> contextLocator,Locator<Project> projectLocator){
  Long id=dto.getId();
  String description=dto.getDescription();
  String details=dto.getDetails();
  Context context=null;
  if (dto.hasContextId()) {
    context=contextLocator.findById(dto.getContextId());
  }
  Project project=null;
  if (dto.hasProjectId()) {
    project=projectLocator.findById(dto.getProjectId());
  }
  long created=fromDate(dto.getCreated());
  long modified=fromDate(dto.getModified());
  long startDate=fromDate(dto.getStartDate());
  long dueDate=fromDate(dto.getDueDate());
  String timezone=dto.getTimezone();
  Boolean allDay=dto.getAllDay();
  Boolean hasAlarms=false;
  Long calEventId=null;
  if (dto.hasCalEventId()) {
    calEventId=dto.getCalEventId();
  }
  Integer order=dto.getOrder();
  Boolean complete=dto.getComplete();
  Long tracksId=null;
  if (dto.hasTracksId()) {
    tracksId=dto.getTracksId();
  }
  return new Task(id,description,details,context,project,created,modified,startDate,dueDate,timezone,allDay,hasAlarms,calEventId,order,complete,tracksId);
}",0.9562866155926092
44090,"public org.dodgybits.shuffle.dto.ShuffleProtos.Task toDto(){
  Builder builder=org.dodgybits.shuffle.dto.ShuffleProtos.Task.newBuilder();
  builder.setId(id).setDescription(description).setCreated(toDate(created)).setModified(toDate(modified)).setStartDate(toDate(startDate)).setDueDate(toDate(dueDate)).setAllDay(allDay).setOrder(order).setComplete(complete);
  if (details != null) {
    builder.setDetails(details);
  }
  if (context != null) {
    builder.setContextId(context.id);
  }
  if (project != null) {
    builder.setProjectId(project.id);
  }
  if (timezone != null) {
    builder.setTimezone(timezone);
  }
  if (calEventId != null) {
    builder.setCalEventId(calEventId);
  }
  return builder.build();
}","public org.dodgybits.shuffle.dto.ShuffleProtos.Task toDto(){
  Builder builder=org.dodgybits.shuffle.dto.ShuffleProtos.Task.newBuilder();
  builder.setId(id).setDescription(description).setCreated(toDate(created)).setModified(toDate(modified)).setStartDate(toDate(startDate)).setDueDate(toDate(dueDate)).setAllDay(allDay).setOrder(order).setComplete(complete);
  if (details != null) {
    builder.setDetails(details);
  }
  if (context != null) {
    builder.setContextId(context.id);
  }
  if (project != null) {
    builder.setProjectId(project.id);
  }
  if (timezone != null) {
    builder.setTimezone(timezone);
  }
  if (calEventId != null) {
    builder.setCalEventId(calEventId);
  }
  if (tracksId != null) {
    builder.setTracksId(tracksId);
  }
  return builder.build();
}",0.9249169435215948
44091,"@Override public Long getModified(){
  return modified;
}","@Override public long getModified(){
  return modified;
}",0.9824561403508772
44092,public Long getModified();,public long getModified();,0.9615384615384616
44093,"private void handleRemoteEntity(Entity localContext,Entity remoteContext){
  if (remoteContext.getModified().equals(localContext.getModified()))   return;
  if (remoteContext.getModified() > localContext.getModified()) {
    saveLocalEntity(createMergedLocalEntity(localContext,remoteContext));
  }
 else {
    updateTracks(localContext);
  }
}","private void handleRemoteEntity(Entity localContext,Entity remoteContext){
  if (remoteContext.getModified() == localContext.getModified())   return;
  if (remoteContext.getModified() > localContext.getModified()) {
    saveLocalEntity(createMergedLocalEntity(localContext,remoteContext));
  }
 else {
    updateTracks(localContext);
  }
}",0.9106881405563688
44094,"public static Context readContext(Cursor cursor,Resources res){
  Long id=readLong(cursor,ID_INDEX);
  String name=readString(cursor,NAME_INDEX);
  int colour=cursor.getInt(COLOUR_INDEX);
  String iconName=readString(cursor,ICON_INDEX);
  Icon icon=Icon.createIcon(iconName,res);
  Long tracksId=readLong(cursor,TRACKS_ID_INDEX);
  Long tracksModified=readLong(cursor,TRACKS_MODIFIED_INDEX);
  return new Context(id,name,colour,icon,tracksId,tracksModified);
}","public static Context readContext(Cursor cursor,Resources res){
  Long id=readLong(cursor,ID_INDEX);
  String name=readString(cursor,NAME_INDEX);
  int colour=cursor.getInt(COLOUR_INDEX);
  String iconName=readString(cursor,ICON_INDEX);
  Icon icon=Icon.createIcon(iconName,res);
  Long tracksId=readLong(cursor,TRACKS_ID_INDEX);
  Long tracksModified=readLong(cursor,CONTEXTS_MODIFIED_INDEX);
  return new Context(id,name,colour,icon,tracksId,tracksModified);
}",0.9891540130151844
44095,"public static Project readProject(Cursor cursor){
  Long id=readLong(cursor,ID_INDEX);
  String name=readString(cursor,NAME_INDEX);
  Long defaultContextId=readLong(cursor,DEFAULT_CONTEXT_INDEX);
  Boolean archived=readBoolean(cursor,ARCHIVED_INDEX);
  Long tracksId=readLong(cursor,PROJECTS_TRACKS_ID_INDEX);
  Long tracksModified=readLong(cursor,PROJECTS_TRACKS_MODIFIED_INDEX);
  return new Project(id,name,defaultContextId,archived,tracksId,tracksModified);
}","public static Project readProject(Cursor cursor){
  Long id=readLong(cursor,ID_INDEX);
  String name=readString(cursor,NAME_INDEX);
  Long defaultContextId=readLong(cursor,DEFAULT_CONTEXT_INDEX);
  Boolean archived=readBoolean(cursor,ARCHIVED_INDEX);
  Long tracksId=readLong(cursor,PROJECTS_TRACKS_ID_INDEX);
  Long tracksModified=readLong(cursor,PROJECTS_MODIFIED_INDEX);
  return new Project(id,name,defaultContextId,archived,tracksId,tracksModified);
}",0.9923830250272034
44096,"@Override protected void updateInsertExtras(Bundle extras,Project project){
  extras.putString(Shuffle.Tasks.PROJECT_ID,project.name);
  if (project.defaultContextId != null) {
    Context context=BindingUtils.fetchContextById(this,project.defaultContextId);
    if (context != null) {
      extras.putLong(Shuffle.Tasks.CONTEXT_ID,context.id);
    }
  }
}","@Override protected void updateInsertExtras(Bundle extras,Project project){
  extras.putLong(Shuffle.Tasks.PROJECT_ID,project.id);
  if (project.defaultContextId != null) {
    Context context=BindingUtils.fetchContextById(this,project.defaultContextId);
    if (context != null) {
      extras.putLong(Shuffle.Tasks.CONTEXT_ID,context.id);
    }
  }
}",0.9830508474576272
44097,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  Log.i(cTag,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ newVersion);
switch (oldVersion) {
case 9:
    db.execSQL(""String_Node_Str"" + cContextTableName + ""String_Node_Str"");
  createContextTable(db);
db.execSQL(""String_Node_Str"" + cContextTableName + ""String_Node_Str""+ ""String_Node_Str"");
db.execSQL(""String_Node_Str"");
case 10:
createTaskProjectIdIndex(db);
createTaskContextIdIndex(db);
case 11:
db.execSQL(""String_Node_Str"" + cTaskTableName + ""String_Node_Str"");
db.execSQL(""String_Node_Str"" + cTaskTableName + ""String_Node_Str"");
db.execSQL(""String_Node_Str"" + cTaskTableName + ""String_Node_Str"");
db.execSQL(""String_Node_Str"" + cTaskTableName + ""String_Node_Str"");
db.execSQL(""String_Node_Str"" + cTaskTableName + ""String_Node_Str"");
db.execSQL(""String_Node_Str"" + cTaskTableName + ""String_Node_Str"");
createRemindersTable(db);
createRemindersEventIdIndex(db);
createTaskCleanupTrigger(db);
break;
default :
Log.w(cTag,""String_Node_Str"");
onCreate(db);
break;
}
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  Log.i(cTag,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ newVersion);
switch (oldVersion) {
case 9:
    db.execSQL(""String_Node_Str"" + cContextTableName + ""String_Node_Str"");
  createContextTable(db);
db.execSQL(""String_Node_Str"" + cContextTableName + ""String_Node_Str""+ ""String_Node_Str"");
db.execSQL(""String_Node_Str"");
case 10:
createTaskProjectIdIndex(db);
createTaskContextIdIndex(db);
case 11:
db.execSQL(""String_Node_Str"" + cTaskTableName + ""String_Node_Str"");
db.execSQL(""String_Node_Str"" + cTaskTableName + ""String_Node_Str"");
db.execSQL(""String_Node_Str"" + cTaskTableName + ""String_Node_Str"");
db.execSQL(""String_Node_Str"" + cTaskTableName + ""String_Node_Str"");
db.execSQL(""String_Node_Str"" + cTaskTableName + ""String_Node_Str"");
db.execSQL(""String_Node_Str"" + cTaskTableName + ""String_Node_Str"");
db.execSQL(""String_Node_Str"" + cTaskTableName + ""String_Node_Str""+ ""String_Node_Str"");
createRemindersTable(db);
createRemindersEventIdIndex(db);
createTaskCleanupTrigger(db);
break;
default :
Log.w(cTag,""String_Node_Str"");
onCreate(db);
break;
}
}",0.9605442176870748
44098,"@Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sort){
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  SQLiteDatabase db=mOpenHelper.getReadableDatabase();
switch (cUriMatcher.match(uri)) {
case TASKS:
    qb.setTables(cTaskJoinTableNames);
  qb.setProjectionMap(sTaskListProjectMap);
break;
case TASK_ID:
qb.setTables(cTaskJoinTableNames);
qb.setProjectionMap(sTaskListProjectMap);
qb.appendWhere(cTaskTableName + ""String_Node_Str"" + uri.getPathSegments().get(1));
break;
case INBOX_TASKS:
qb.setTables(cTaskJoinTableNames);
qb.setProjectionMap(sTaskListProjectMap);
long lastCleanMS=Preferences.getLastInboxClean(getContext());
qb.appendWhere(""String_Node_Str"" + lastCleanMS + ""String_Node_Str"");
break;
case DUE_TASKS:
qb.setTables(cTaskJoinTableNames);
qb.setProjectionMap(sTaskListProjectMap);
int mode=Integer.parseInt(uri.getPathSegments().get(1));
long startMS=0L;
long endMS=getEndDate(mode);
qb.appendWhere(""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + startMS + ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + endMS + ""String_Node_Str"");
break;
case TOP_TASKS:
qb.setTables(cTaskJoinTableNames);
qb.setProjectionMap(sTaskListProjectMap);
qb.appendWhere(""String_Node_Str"");
qb.appendWhere(""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + ""String_Node_Str"");
break;
case CONTEXTS:
qb.setTables(cContextTableName);
qb.setProjectionMap(sContextListProjectMap);
break;
case CONTEXT_ID:
qb.setTables(cContextTableName);
qb.appendWhere(""String_Node_Str"" + uri.getPathSegments().get(1));
break;
case CONTEXT_TASKS:
return db.rawQuery(""String_Node_Str"" + ""String_Node_Str"",null);
case PROJECTS:
qb.setTables(cProjectTableName);
qb.setProjectionMap(sProjectListProjectMap);
break;
case PROJECT_ID:
qb.setTables(cProjectTableName);
qb.appendWhere(""String_Node_Str"" + uri.getPathSegments().get(1));
break;
case PROJECT_TASKS:
return db.rawQuery(""String_Node_Str"" + ""String_Node_Str"",null);
case REMINDERS:
qb.setTables(cReminderTableName);
qb.setProjectionMap(sReminderListProjectMap);
break;
case REMINDER_ID:
qb.setTables(cReminderTableName);
qb.appendWhere(""String_Node_Str"" + uri.getPathSegments().get(1));
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
String orderBy;
if (TextUtils.isEmpty(sort)) {
switch (cUriMatcher.match(uri)) {
case TASKS:
case TASK_ID:
case INBOX_TASKS:
orderBy=Shuffle.Tasks.DEFAULT_SORT_ORDER;
break;
case TOP_TASKS:
orderBy=sTaskListProjectMap.get(Shuffle.Tasks.PROJECT_NAME) + ""String_Node_Str"";
break;
case DUE_TASKS:
orderBy=Shuffle.Tasks.DUE_DATE + ""String_Node_Str"";
break;
case CONTEXTS:
case CONTEXT_ID:
orderBy=Shuffle.Contexts.DEFAULT_SORT_ORDER;
break;
case PROJECTS:
case PROJECT_ID:
orderBy=Shuffle.Projects.DEFAULT_SORT_ORDER;
break;
case REMINDERS:
case REMINDER_ID:
orderBy=Shuffle.Reminders.DEFAULT_SORT_ORDER;
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
}
 else {
orderBy=sort;
}
if (Log.isLoggable(cTag,Log.DEBUG)) {
Log.d(cTag,""String_Node_Str"" + selection + ""String_Node_Str""+ Arrays.toString(selectionArgs)+ ""String_Node_Str""+ orderBy);
}
Cursor c=qb.query(db,projection,selection,selectionArgs,null,null,orderBy);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
}","@Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sort){
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  SQLiteDatabase db=mOpenHelper.getReadableDatabase();
switch (cUriMatcher.match(uri)) {
case TASKS:
    qb.setTables(cTaskJoinTableNames);
  qb.setProjectionMap(sTaskListProjectMap);
break;
case TASK_ID:
qb.setTables(cTaskJoinTableNames);
qb.setProjectionMap(sTaskListProjectMap);
qb.appendWhere(cTaskTableName + ""String_Node_Str"" + uri.getPathSegments().get(1));
break;
case INBOX_TASKS:
qb.setTables(cTaskJoinTableNames);
qb.setProjectionMap(sTaskListProjectMap);
long lastCleanMS=Preferences.getLastInboxClean(getContext());
qb.appendWhere(""String_Node_Str"" + lastCleanMS + ""String_Node_Str"");
break;
case DUE_TASKS:
qb.setTables(cTaskJoinTableNames);
qb.setProjectionMap(sTaskListProjectMap);
int mode=Integer.parseInt(uri.getPathSegments().get(1));
long startMS=0L;
long endMS=getEndDate(mode);
qb.appendWhere(""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + startMS + ""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + endMS + ""String_Node_Str"");
break;
case TOP_TASKS:
qb.setTables(cTaskJoinTableNames);
qb.setProjectionMap(sTaskListProjectMap);
qb.appendWhere(""String_Node_Str"");
qb.appendWhere(""String_Node_Str"");
qb.appendWhere(""String_Node_Str"" + ""String_Node_Str"");
break;
case CONTEXTS:
qb.setTables(cContextTableName);
qb.setProjectionMap(sContextListProjectMap);
break;
case CONTEXT_ID:
qb.setTables(cContextTableName);
qb.appendWhere(""String_Node_Str"" + uri.getPathSegments().get(1));
break;
case CONTEXT_TASKS:
return db.rawQuery(""String_Node_Str"" + ""String_Node_Str"",null);
case PROJECTS:
qb.setTables(cProjectTableName);
qb.setProjectionMap(sProjectListProjectMap);
break;
case PROJECT_ID:
qb.setTables(cProjectTableName);
qb.appendWhere(""String_Node_Str"" + uri.getPathSegments().get(1));
break;
case PROJECT_TASKS:
return db.rawQuery(""String_Node_Str"" + ""String_Node_Str"",null);
case REMINDERS:
qb.setTables(cReminderTableName);
qb.setProjectionMap(sReminderListProjectMap);
break;
case REMINDER_ID:
qb.setTables(cReminderTableName);
qb.appendWhere(""String_Node_Str"" + uri.getPathSegments().get(1));
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
String orderBy;
if (TextUtils.isEmpty(sort)) {
switch (cUriMatcher.match(uri)) {
case TASKS:
case TASK_ID:
case INBOX_TASKS:
orderBy=Shuffle.Tasks.DEFAULT_SORT_ORDER;
break;
case TOP_TASKS:
orderBy=sTaskListProjectMap.get(Shuffle.Tasks.PROJECT_NAME) + ""String_Node_Str"";
break;
case DUE_TASKS:
orderBy=Shuffle.Tasks.START_DATE + ""String_Node_Str"";
break;
case CONTEXTS:
case CONTEXT_ID:
orderBy=Shuffle.Contexts.DEFAULT_SORT_ORDER;
break;
case PROJECTS:
case PROJECT_ID:
orderBy=Shuffle.Projects.DEFAULT_SORT_ORDER;
break;
case REMINDERS:
case REMINDER_ID:
orderBy=Shuffle.Reminders.DEFAULT_SORT_ORDER;
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
}
 else {
orderBy=sort;
}
if (Log.isLoggable(cTag,Log.DEBUG)) {
Log.d(cTag,""String_Node_Str"" + selection + ""String_Node_Str""+ Arrays.toString(selectionArgs)+ ""String_Node_Str""+ orderBy);
}
Cursor c=qb.query(db,projection,selection,selectionArgs,null,null,orderBy);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
}",0.9987849331713244
44099,"public void onClick(DialogInterface dialog,int which){
  if (which == DialogInterface.BUTTON2) {
    Log.i(cTag,""String_Node_Str"" + groupId);
    AbstractDrilldownListActivity.super.deleteItem();
    Log.i(cTag,""String_Node_Str"" + groupId);
    deleteChildren(groupId);
  }
 else {
    Log.d(cTag,""String_Node_Str"");
  }
}","public void onClick(DialogInterface dialog,int which){
  if (which == DialogInterface.BUTTON2) {
    Log.i(cTag,""String_Node_Str"" + groupId);
    AbstractDrilldownListActivity.super.deleteItem(groupId);
    Log.i(cTag,""String_Node_Str"" + groupId);
    deleteChildren(groupId);
  }
 else {
    Log.d(cTag,""String_Node_Str"");
  }
}",0.989247311827957
44100,"/** 
 * Permanently delete the selected item.
 */
protected void deleteItem(){
  int childCount=getSelectedItemChildCount();
  if (childCount > 0) {
    final int groupId=(int)getSelectedItemId();
    OnClickListener buttonListener=new OnClickListener(){
      public void onClick(      DialogInterface dialog,      int which){
        if (which == DialogInterface.BUTTON2) {
          Log.i(cTag,""String_Node_Str"" + groupId);
          AbstractDrilldownListActivity.super.deleteItem();
          Log.i(cTag,""String_Node_Str"" + groupId);
          deleteChildren(groupId);
        }
 else {
          Log.d(cTag,""String_Node_Str"");
        }
      }
    }
;
    AlertUtils.showDeleteGroupWarning(this,getItemName(),getChildName(),childCount,buttonListener);
  }
 else {
    super.deleteItem();
  }
}","/** 
 * Permanently delete the selected item.
 */
protected void deleteItem(){
  int childCount=getSelectedItemChildCount();
  if (childCount > 0) {
    final int groupId=(int)getSelectedItemId();
    OnClickListener buttonListener=new OnClickListener(){
      public void onClick(      DialogInterface dialog,      int which){
        if (which == DialogInterface.BUTTON2) {
          Log.i(cTag,""String_Node_Str"" + groupId);
          AbstractDrilldownListActivity.super.deleteItem(groupId);
          Log.i(cTag,""String_Node_Str"" + groupId);
          deleteChildren(groupId);
        }
 else {
          Log.d(cTag,""String_Node_Str"");
        }
      }
    }
;
    AlertUtils.showDeleteGroupWarning(this,getItemName(),getChildName(),childCount,buttonListener);
  }
 else {
    super.deleteItem(getSelectedItemId());
  }
}",0.9839901477832512
44101,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  final boolean haveItems=getItemCount() > 0;
  Uri selectedContentUri=getSelectedContentUri();
  Boolean childSelected=isChildSelected();
  if (haveItems && childSelected != null && !childSelected && (selectedContentUri != null)) {
    long selectedId=getSelectedId();
    Uri selectedUri=ContentUris.withAppendedId(selectedContentUri,selectedId);
    MenuUtils.addSelectedAlternativeMenuItems(menu,selectedUri,this,false);
    MenuUtils.addDeleteMenuItem(menu);
  }
 else {
    menu.removeGroup(Menu.CATEGORY_ALTERNATIVE);
  }
  menu.findItem(MenuUtils.DELETE_ID).setVisible(haveItems);
  return true;
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  final boolean haveItems=getItemCount() > 0;
  Uri selectedContentUri=getSelectedContentUri();
  if (haveItems && (selectedContentUri != null)) {
    long selectedId=getSelectedId();
    Uri selectedUri=ContentUris.withAppendedId(selectedContentUri,selectedId);
    MenuUtils.addSelectedAlternativeMenuItems(menu,selectedUri,this,false);
    MenuUtils.addDeleteMenuItem(menu);
  }
 else {
    menu.removeGroup(Menu.CATEGORY_ALTERNATIVE);
  }
  menu.findItem(MenuUtils.DELETE_ID).setVisible(haveItems);
  return true;
}",0.9283536585365854
44102,"/** 
 * Permanently delete the selected item.
 */
protected final void deleteItem(){
  final long packedPosition=getSelectedPosition();
  final int type=ExpandableListView.getPackedPositionType(packedPosition);
  final int childPosition=ExpandableListView.getPackedPositionChild(packedPosition);
  final int groupPosition=ExpandableListView.getPackedPositionGroup(packedPosition);
switch (type) {
case ExpandableListView.PACKED_POSITION_TYPE_CHILD:
    Log.d(cTag,""String_Node_Str"" + groupPosition + ""String_Node_Str""+ childPosition);
  break;
case ExpandableListView.PACKED_POSITION_TYPE_GROUP:
Log.d(cTag,""String_Node_Str"" + groupPosition);
int groupCount=getExpandableListAdapter().getGroupCount();
for (int i=groupCount - 1; i >= 0; i--) {
Log.d(cTag,""String_Node_Str"" + i);
getExpandableListView().collapseGroup(i);
}
int childCount=getExpandableListAdapter().getChildrenCount(groupPosition);
if (childCount > 0) {
OnClickListener buttonListener=new OnClickListener(){
public void onClick(DialogInterface dialog,int which){
if (which == DialogInterface.BUTTON2) {
final long groupId=getSelectedId();
Log.i(cTag,""String_Node_Str"" + groupId);
Uri uri=ContentUris.withAppendedId(getGroupContentUri(),groupId);
getContentResolver().delete(uri,null,null);
Log.i(cTag,""String_Node_Str"" + groupId);
getContentResolver().delete(getChildContentUri(),getGroupIdColumnName() + ""String_Node_Str"",new String[]{String.valueOf(groupId)});
}
 else {
Log.d(cTag,""String_Node_Str"");
}
}
}
;
AlertUtils.showDeleteGroupWarning(this,getGroupName(),getChildName(),childCount,buttonListener);
}
 else {
Log.i(cTag,""String_Node_Str"" + groupPosition);
final long groupId=getSelectedId();
Log.i(cTag,""String_Node_Str"" + groupId);
Uri uri=ContentUris.withAppendedId(getGroupContentUri(),groupId);
getContentResolver().delete(uri,null,null);
}
break;
}
}","/** 
 * Permanently delete the selected item.
 */
protected final void deleteItem(){
  final long packedPosition=getSelectedPosition();
  final int type=ExpandableListView.getPackedPositionType(packedPosition);
  final int childPosition=ExpandableListView.getPackedPositionChild(packedPosition);
  final int groupPosition=ExpandableListView.getPackedPositionGroup(packedPosition);
switch (type) {
case ExpandableListView.PACKED_POSITION_TYPE_CHILD:
    Log.d(cTag,""String_Node_Str"" + groupPosition + ""String_Node_Str""+ childPosition);
  final long childId=getSelectedId();
Log.i(cTag,""String_Node_Str"" + childId);
Uri childUri=ContentUris.withAppendedId(getChildContentUri(),childId);
getContentResolver().delete(childUri,null,null);
break;
case ExpandableListView.PACKED_POSITION_TYPE_GROUP:
Log.d(cTag,""String_Node_Str"" + groupPosition);
int childCount=getExpandableListAdapter().getChildrenCount(groupPosition);
if (childCount > 0) {
OnClickListener buttonListener=new OnClickListener(){
public void onClick(DialogInterface dialog,int which){
if (which == DialogInterface.BUTTON2) {
final long groupId=getSelectedId();
Log.i(cTag,""String_Node_Str"" + groupId);
Uri uri=ContentUris.withAppendedId(getGroupContentUri(),groupId);
getContentResolver().delete(uri,null,null);
Log.i(cTag,""String_Node_Str"" + groupId);
getContentResolver().delete(getChildContentUri(),getGroupIdColumnName() + ""String_Node_Str"",new String[]{String.valueOf(groupId)});
}
 else {
Log.d(cTag,""String_Node_Str"");
}
}
}
;
AlertUtils.showDeleteGroupWarning(this,getGroupName(),getChildName(),childCount,buttonListener);
}
 else {
Log.i(cTag,""String_Node_Str"" + groupPosition);
final long groupId=getSelectedId();
Log.i(cTag,""String_Node_Str"" + groupId);
Uri groupUri=ContentUris.withAppendedId(getGroupContentUri(),groupId);
getContentResolver().delete(groupUri,null,null);
}
break;
}
}",0.8940092165898618
44103,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  final boolean haveItems=getItemCount() > 0;
  if (haveItems && getSelectedItemPosition() > -1) {
    Uri uri=ContentUris.withAppendedId(getContentUri(),getSelectedItemId());
    MenuUtils.addSelectedAlternativeMenuItems(menu,uri,this,supportsViewAction());
    MenuUtils.addDeleteMenuItem(menu);
  }
 else {
    menu.removeGroup(Menu.CATEGORY_ALTERNATIVE);
  }
  menu.findItem(MenuUtils.DELETE_ID).setVisible(haveItems);
  return true;
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  final boolean haveItems=getItemCount() > 0;
  if (haveItems && getSelectedItemPosition() > -1) {
    Uri uri=ContentUris.withAppendedId(getContentUri(),getSelectedItemId());
    MenuUtils.addSelectedAlternativeMenuItems(menu,uri,this,supportsViewAction());
  }
 else {
    menu.removeGroup(Menu.CATEGORY_ALTERNATIVE);
  }
  return true;
}",0.8976215098241985
44104,"/** 
 * Called when the activity is first created. 
 */
@SuppressWarnings(""String_Node_Str"") @Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(getContentViewResId());
  setDefaultKeyMode(DEFAULT_KEYS_SHORTCUT);
  Intent intent=getIntent();
  if (intent.getData() == null) {
    intent.setData(getContentUri());
  }
  mCursor=createItemQuery();
  setListAdapter(createListAdapter(mCursor));
  animateList();
}","/** 
 * Called when the activity is first created. 
 */
@SuppressWarnings(""String_Node_Str"") @Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(getContentViewResId());
  setDefaultKeyMode(DEFAULT_KEYS_SHORTCUT);
  Intent intent=getIntent();
  if (intent.getData() == null) {
    intent.setData(getContentUri());
  }
  getListView().setOnCreateContextMenuListener(this);
  mCursor=createItemQuery();
  setListAdapter(createListAdapter(mCursor));
  animateList();
}",0.943157894736842
44105,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case MenuUtils.DELETE_ID:
    deleteItem();
  return true;
case MenuUtils.INSERT_ID:
insertItem();
return true;
}
if (MenuUtils.checkCommonItemsSelected(item,this,getCurrentViewMenuId())) {
return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case MenuUtils.INSERT_ID:
    insertItem();
  return true;
}
if (MenuUtils.checkCommonItemsSelected(item,this,getCurrentViewMenuId())) {
return true;
}
return super.onOptionsItemSelected(item);
}",0.8512
44106,"/** 
 * Permanently delete the selected item.
 */
protected void deleteItem(){
  Uri uri=ContentUris.withAppendedId(Shuffle.Contexts.CONTENT_URI,getSelectedItemId());
  getContentResolver().delete(uri,null,null);
}","/** 
 * Permanently delete the selected item.
 */
protected void deleteItem(long id){
  getContentResolver().delete(getListContentUri(),BaseColumns._ID + ""String_Node_Str"",new String[]{String.valueOf(id)});
}",0.4360189573459715
44107,"protected final void toggleComplete(){
  mCursor.moveToPosition(getSelectedItemPosition());
  BindingUtils.toggleTaskComplete(this,mCursor,getSelectedItemId());
}","protected final void toggleComplete(){
  Cursor c=(Cursor)getListAdapter().getItem(getSelectedItemPosition());
  BindingUtils.toggleTaskComplete(this,c,getListContentUri(),getSelectedItemId());
}",0.8011204481792717
44108,"@Override protected Cursor createItemQuery(){
  Log.d(cTag,""String_Node_Str"");
  return managedQuery(Shuffle.Tasks.CONTENT_URI,Shuffle.Tasks.cExpandedProjection,Shuffle.Tasks.CONTEXT_ID + ""String_Node_Str"",new String[]{String.valueOf(mContextId)},Shuffle.Tasks.CREATED_DATE + ""String_Node_Str"");
}","@Override protected Cursor createItemQuery(){
  Log.d(cTag,""String_Node_Str"");
  return managedQuery(getListContentUri(),Shuffle.Tasks.cExpandedProjection,Shuffle.Tasks.CONTEXT_ID + ""String_Node_Str"",new String[]{String.valueOf(mContextId)},Shuffle.Tasks.CREATED_DATE + ""String_Node_Str"");
}",0.9285714285714286
44109,"@Override protected void onResume(){
  super.onResume();
  Cursor cursor=getContentResolver().query(Shuffle.Contexts.cContextTasksContentURI,Shuffle.Contexts.cFullTaskProjection,null,null,null);
  mTaskCountArray=BindingUtils.readCountArray(cursor);
  cursor.close();
}","@Override protected void onResume(){
  super.onResume();
  Cursor cursor=getContentResolver().query(getListContentUri(),Shuffle.Contexts.cFullTaskProjection,null,null,null);
  mTaskCountArray=BindingUtils.readCountArray(cursor);
  cursor.close();
}",0.9168278529980658
44110,"public void onClick(DialogInterface dialog,int which){
  if (which == DialogInterface.BUTTON2) {
    final long groupId=getSelectedId();
    Log.i(cTag,""String_Node_Str"" + groupId);
    Uri uri=ContentUris.withAppendedId(getGroupContentUri(),groupId);
    getContentResolver().delete(uri,null,null);
    Log.i(cTag,""String_Node_Str"" + groupId);
    getContentResolver().delete(getChildContentUri(),getGroupIdColumnName() + ""String_Node_Str"",new String[]{String.valueOf(groupId)});
  }
 else {
    Log.d(cTag,""String_Node_Str"");
  }
}","public void onClick(DialogInterface dialog,int which){
  if (which == DialogInterface.BUTTON1) {
    final long groupId=getExpandableListAdapter().getGroupId(groupPosition);
    Log.i(cTag,""String_Node_Str"" + groupId);
    Uri uri=ContentUris.withAppendedId(getGroupContentUri(),groupId);
    getContentResolver().delete(uri,null,null);
    Log.i(cTag,""String_Node_Str"" + groupId);
    getContentResolver().delete(getChildContentUri(),getGroupIdColumnName() + ""String_Node_Str"",new String[]{String.valueOf(groupId)});
  }
 else {
    Log.d(cTag,""String_Node_Str"");
  }
}",0.944696282864914
44111,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case MenuUtils.DELETE_ID:
    deleteItem();
  return true;
case MenuUtils.INSERT_CHILD_ID:
insertItem(getChildContentUri());
return true;
case MenuUtils.INSIDE_GROUP_ID:
insertItem(getGroupContentUri());
return true;
}
if (MenuUtils.checkCommonItemsSelected(item,this,getCurrentViewMenuId())) return true;
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case MenuUtils.INSERT_CHILD_ID:
    insertItem(getChildContentUri());
  return true;
case MenuUtils.INSIDE_GROUP_ID:
insertItem(getGroupContentUri());
return true;
}
if (MenuUtils.checkCommonItemsSelected(item,this,getCurrentViewMenuId())) return true;
return super.onOptionsItemSelected(item);
}",0.9214026602176542
44112,"@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(getContentViewResId());
  setDefaultKeyMode(DEFAULT_KEYS_SHORTCUT);
  Cursor groupCursor=createGroupQuery();
  mAdapter=createExpandableListAdapter(groupCursor);
  setListAdapter(mAdapter);
  animateList();
}","@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(getContentViewResId());
  setDefaultKeyMode(DEFAULT_KEYS_SHORTCUT);
  getExpandableListView().setOnCreateContextMenuListener(this);
  Cursor groupCursor=createGroupQuery();
  mAdapter=createExpandableListAdapter(groupCursor);
  setListAdapter(mAdapter);
  animateList();
}",0.6272727272727273
44113,"/** 
 * Permanently delete the selected item.
 */
protected final void deleteItem(){
  final long packedPosition=getSelectedPosition();
  final int type=ExpandableListView.getPackedPositionType(packedPosition);
  final int childPosition=ExpandableListView.getPackedPositionChild(packedPosition);
  final int groupPosition=ExpandableListView.getPackedPositionGroup(packedPosition);
switch (type) {
case ExpandableListView.PACKED_POSITION_TYPE_CHILD:
    Log.d(cTag,""String_Node_Str"" + groupPosition + ""String_Node_Str""+ childPosition);
  final long childId=getSelectedId();
Log.i(cTag,""String_Node_Str"" + childId);
Uri childUri=ContentUris.withAppendedId(getChildContentUri(),childId);
getContentResolver().delete(childUri,null,null);
break;
case ExpandableListView.PACKED_POSITION_TYPE_GROUP:
Log.d(cTag,""String_Node_Str"" + groupPosition);
int childCount=getExpandableListAdapter().getChildrenCount(groupPosition);
if (childCount > 0) {
OnClickListener buttonListener=new OnClickListener(){
public void onClick(DialogInterface dialog,int which){
if (which == DialogInterface.BUTTON2) {
final long groupId=getSelectedId();
Log.i(cTag,""String_Node_Str"" + groupId);
Uri uri=ContentUris.withAppendedId(getGroupContentUri(),groupId);
getContentResolver().delete(uri,null,null);
Log.i(cTag,""String_Node_Str"" + groupId);
getContentResolver().delete(getChildContentUri(),getGroupIdColumnName() + ""String_Node_Str"",new String[]{String.valueOf(groupId)});
}
 else {
Log.d(cTag,""String_Node_Str"");
}
}
}
;
AlertUtils.showDeleteGroupWarning(this,getGroupName(),getChildName(),childCount,buttonListener);
}
 else {
Log.i(cTag,""String_Node_Str"" + groupPosition);
final long groupId=getSelectedId();
Log.i(cTag,""String_Node_Str"" + groupId);
Uri groupUri=ContentUris.withAppendedId(getGroupContentUri(),groupId);
getContentResolver().delete(groupUri,null,null);
}
break;
}
}","protected final void deleteItem(final long packedPosition){
  final int type=ExpandableListView.getPackedPositionType(packedPosition);
  final int childPosition=ExpandableListView.getPackedPositionChild(packedPosition);
  final int groupPosition=ExpandableListView.getPackedPositionGroup(packedPosition);
switch (type) {
case ExpandableListView.PACKED_POSITION_TYPE_CHILD:
    Log.d(cTag,""String_Node_Str"" + groupPosition + ""String_Node_Str""+ childPosition);
  final long childId=getSelectedId();
Log.i(cTag,""String_Node_Str"" + childId);
Uri childUri=ContentUris.withAppendedId(getChildContentUri(),childId);
getContentResolver().delete(childUri,null,null);
refreshChildCount();
getExpandableListView().invalidate();
break;
case ExpandableListView.PACKED_POSITION_TYPE_GROUP:
Log.d(cTag,""String_Node_Str"" + groupPosition);
int childCount=getExpandableListAdapter().getChildrenCount(groupPosition);
if (childCount > 0) {
OnClickListener buttonListener=new OnClickListener(){
public void onClick(DialogInterface dialog,int which){
if (which == DialogInterface.BUTTON1) {
final long groupId=getExpandableListAdapter().getGroupId(groupPosition);
Log.i(cTag,""String_Node_Str"" + groupId);
Uri uri=ContentUris.withAppendedId(getGroupContentUri(),groupId);
getContentResolver().delete(uri,null,null);
Log.i(cTag,""String_Node_Str"" + groupId);
getContentResolver().delete(getChildContentUri(),getGroupIdColumnName() + ""String_Node_Str"",new String[]{String.valueOf(groupId)});
}
 else {
Log.d(cTag,""String_Node_Str"");
}
}
}
;
AlertUtils.showDeleteGroupWarning(this,getGroupName(),getChildName(),childCount,buttonListener);
}
 else {
Log.i(cTag,""String_Node_Str"" + groupPosition);
final long groupId=getSelectedId();
Log.i(cTag,""String_Node_Str"" + groupId);
Uri groupUri=ContentUris.withAppendedId(getGroupContentUri(),groupId);
getContentResolver().delete(groupUri,null,null);
}
break;
}
}",0.9207708779443254
44114,"protected Boolean isChildSelected(){
  long packed=this.getSelectedPosition();
  int type=ExpandableListView.getPackedPositionType(packed);
  Boolean isChild=null;
switch (type) {
case ExpandableListView.PACKED_POSITION_TYPE_CHILD:
    isChild=Boolean.TRUE;
  break;
case ExpandableListView.PACKED_POSITION_TYPE_GROUP:
isChild=Boolean.FALSE;
}
return isChild;
}","protected Boolean isChildSelected(){
  long packed=this.getSelectedPosition();
  return isChild(packed);
}",0.4197002141327623
44115,"/** 
 * @return Number of items in the list.
 */
protected final int getItemCount(){
  return mCursor.getCount();
}","/** 
 * @return Number of items in the list.
 */
protected final int getItemCount(){
  return getListAdapter().getCount();
}",0.9121338912133892
44116,"/** 
 * Called when the activity is first created. 
 */
@SuppressWarnings(""String_Node_Str"") @Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(getContentViewResId());
  setDefaultKeyMode(DEFAULT_KEYS_SHORTCUT);
  Intent intent=getIntent();
  if (intent.getData() == null) {
    intent.setData(getContentUri());
  }
  getListView().setOnCreateContextMenuListener(this);
  mCursor=createItemQuery();
  setListAdapter(createListAdapter(mCursor));
  animateList();
}","/** 
 * Called when the activity is first created. 
 */
@SuppressWarnings(""String_Node_Str"") @Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(getContentViewResId());
  setDefaultKeyMode(DEFAULT_KEYS_SHORTCUT);
  Intent intent=getIntent();
  if (intent.getData() == null) {
    intent.setData(getContentUri());
  }
  getListView().setOnCreateContextMenuListener(this);
  Cursor cursor=createItemQuery();
  setListAdapter(createListAdapter(cursor));
  animateList();
}",0.9593657086223984
44117,"@Override public void onCreateContextMenu(ContextMenu menu,View view,ContextMenuInfo menuInfo){
  AdapterView.AdapterContextMenuInfo info;
  try {
    info=(AdapterView.AdapterContextMenuInfo)menuInfo;
  }
 catch (  ClassCastException e) {
    Log.e(cTag,""String_Node_Str"",e);
    return;
  }
  Cursor cursor=(Cursor)getListAdapter().getItem(info.position);
  if (cursor == null) {
    return;
  }
  menu.setHeaderTitle(cursor.getString(1));
  MenuUtils.addDeleteMenuItem(menu);
}","@Override public void onCreateContextMenu(ContextMenu menu,View view,ContextMenuInfo menuInfo){
  AdapterView.AdapterContextMenuInfo info;
  try {
    info=(AdapterView.AdapterContextMenuInfo)menuInfo;
  }
 catch (  ClassCastException e) {
    Log.e(cTag,""String_Node_Str"",e);
    return;
  }
  Cursor cursor=(Cursor)getListAdapter().getItem(info.position);
  if (cursor == null) {
    return;
  }
  menu.setHeaderTitle(cursor.getString(1));
  Uri selectedUri=ContentUris.withAppendedId(getContentUri(),info.id);
  MenuUtils.addSelectedAlternativeMenuItems(menu,selectedUri,this,false);
  MenuUtils.addDeleteMenuItem(menu);
}",0.8615384615384616
44118,"protected final void toggleComplete(){
  Cursor c=(Cursor)getListAdapter().getItem(getSelectedItemPosition());
  BindingUtils.toggleTaskComplete(this,c,getListContentUri(),getSelectedItemId());
}","protected final void toggleComplete(int position,long id){
  Cursor c=(Cursor)getListAdapter().getItem(position);
  BindingUtils.toggleTaskComplete(this,c,getListContentUri(),id);
}",0.8457446808510638
44119,"private void updateCursor(){
  mCursor=createItemQuery();
  SimpleCursorAdapter adapter=(SimpleCursorAdapter)getListAdapter();
  adapter.changeCursor(mCursor);
  setTitle(createTitle());
}","private void updateCursor(){
  Cursor cursor=createItemQuery();
  SimpleCursorAdapter adapter=(SimpleCursorAdapter)getListAdapter();
  adapter.changeCursor(cursor);
  setTitle(createTitle());
}",0.9711286089238844
44120,"/** 
 * Web service operation
 */
@WebMethod(operationName=""String_Node_Str"") public boolean receivePayment(@WebParam(name=""String_Node_Str"") String orderNum,@WebParam(name=""String_Node_Str"") float totalPrice){
  MessageContext ctxt=wsc.getMessageContext();
  ServletContext req=(ServletContext)ctxt.get(ctxt.SERVLET_CONTEXT);
  String path=req.getRealPath(""String_Node_Str"");
  ORDERS_XML=path + ""String_Node_Str"" + ORDERS_XML;
  File file=new File(ORDERS_XML);
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    InputSource is=new InputSource();
    is.setCharacterStream(new FileReader(file));
    Document doc=db.parse(is);
    Document newDoc=db.newDocument();
    Element root=newDoc.createElement(""String_Node_Str"");
    boolean flag=false;
    NodeList orders=doc.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < orders.getLength(); i++) {
      Element order=(Element)orders.item(i);
      if (getTextValue(order,""String_Node_Str"").equals(orderNum)) {
        if (getFloatValue(order,""String_Node_Str"") == totalPrice) {
          order.getElementsByTagName(""String_Node_Str"").item(0).setTextContent(""String_Node_Str"");
          flag=true;
        }
      }
      Node newNode=newDoc.importNode(order,true);
      root.appendChild(newNode);
    }
    Node docRoot=newDoc.importNode(root,true);
    newDoc.appendChild(docRoot);
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    DOMSource source=new DOMSource(newDoc);
    StreamResult result=new StreamResult(ORDERS_XML);
    transformer.transform(source,result);
    return flag;
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
  return false;
}","/** 
 * Web service operation
 */
@WebMethod(operationName=""String_Node_Str"") public boolean receivePayment(@WebParam(name=""String_Node_Str"") String orderNum,@WebParam(name=""String_Node_Str"") float totalPrice){
  MessageContext ctxt=wsc.getMessageContext();
  ServletContext req=(ServletContext)ctxt.get(ctxt.SERVLET_CONTEXT);
  String path=req.getRealPath(""String_Node_Str"");
  if (!ORDERS_XML.startsWith(path))   ORDERS_XML=path + ""String_Node_Str"" + ORDERS_XML;
  File file=new File(ORDERS_XML);
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    InputSource is=new InputSource();
    is.setCharacterStream(new FileReader(file));
    Document doc=db.parse(is);
    Document newDoc=db.newDocument();
    Element root=newDoc.createElement(""String_Node_Str"");
    boolean flag=false;
    NodeList orders=doc.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < orders.getLength(); i++) {
      Element order=(Element)orders.item(i);
      if (getTextValue(order,""String_Node_Str"").equals(orderNum)) {
        if (getFloatValue(order,""String_Node_Str"") == totalPrice) {
          order.getElementsByTagName(""String_Node_Str"").item(0).setTextContent(""String_Node_Str"");
          flag=true;
        }
      }
      Node newNode=newDoc.importNode(order,true);
      root.appendChild(newNode);
    }
    Node docRoot=newDoc.importNode(root,true);
    newDoc.appendChild(docRoot);
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    DOMSource source=new DOMSource(newDoc);
    StreamResult result=new StreamResult(ORDERS_XML);
    transformer.transform(source,result);
    return flag;
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
  return false;
}",0.9654986522911052
44121,"/** 
 * Web service operation
 */
@WebMethod(operationName=""String_Node_Str"") public boolean processPurchaseOrder(@WebParam(name=""String_Node_Str"") PurchaseOrder aPO){
  MessageContext ctxt=wsc.getMessageContext();
  ServletContext req=(ServletContext)ctxt.get(ctxt.SERVLET_CONTEXT);
  String path=req.getRealPath(""String_Node_Str"");
  ORDERS_XML=path + ""String_Node_Str"" + ORDERS_XML;
  if (aPO.getUnitPrice() >= aPO.getProduct().getUnitPrice()) {
    if (produce(aPO.getProduct().getProductName(),aPO.getQuantity())) {
      System.out.println(""String_Node_Str"");
      File file=new File(ORDERS_XML);
      try {
        DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
        DocumentBuilder db=dbf.newDocumentBuilder();
        InputSource is=new InputSource();
        is.setCharacterStream(new FileReader(file));
        Document doc=db.parse(is);
        Element root=doc.getDocumentElement();
        Element e=doc.createElement(""String_Node_Str"");
        String keys[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        String values[]={aPO.getOrderNum(),aPO.getCustomerRef(),aPO.getProduct().getProductName(),Integer.toString(aPO.getQuantity()),Float.toString(aPO.getUnitPrice())};
        for (int i=0; i < keys.length; i++) {
          Element tmp=doc.createElement(keys[i]);
          tmp.setTextContent(values[i]);
          e.appendChild(tmp);
        }
        Element status=doc.createElement(""String_Node_Str"");
        status.setTextContent(""String_Node_Str"");
        e.appendChild(status);
        Element total=doc.createElement(""String_Node_Str"");
        float orderTotal=aPO.getQuantity() * aPO.getUnitPrice();
        total.setTextContent(Float.toString(orderTotal));
        e.appendChild(total);
        root.appendChild(e);
        TransformerFactory tf=TransformerFactory.newInstance();
        Transformer m=tf.newTransformer();
        DOMSource source=new DOMSource(root);
        StreamResult result=new StreamResult(file);
        m.transform(source,result);
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"" + e.getMessage());
      }
      return true;
    }
  }
  System.out.println(""String_Node_Str"");
  return false;
}","/** 
 * Web service operation
 */
@WebMethod(operationName=""String_Node_Str"") public boolean processPurchaseOrder(@WebParam(name=""String_Node_Str"") PurchaseOrder aPO){
}",0.1392092257001647
44122,"/** 
 * Web service operation
 */
@WebMethod(operationName=""String_Node_Str"") public boolean receivePayment(@WebParam(name=""String_Node_Str"") String orderNum,@WebParam(name=""String_Node_Str"") float totalPrice){
  MessageContext ctxt=wsc.getMessageContext();
  ServletContext req=(ServletContext)ctxt.get(ctxt.SERVLET_CONTEXT);
  String path=req.getRealPath(""String_Node_Str"");
  ORDERS_XML=path + ""String_Node_Str"" + ORDERS_XML;
  File file=new File(ORDERS_XML);
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    InputSource is=new InputSource();
    is.setCharacterStream(new FileReader(file));
    Document doc=db.parse(is);
    Document newDoc=db.newDocument();
    Element root=newDoc.createElement(""String_Node_Str"");
    boolean flag=false;
    NodeList orders=doc.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < orders.getLength(); i++) {
      Element order=(Element)orders.item(i);
      if (getTextValue(order,""String_Node_Str"").equals(orderNum)) {
        if (getFloatValue(order,""String_Node_Str"") == totalPrice) {
          order.getElementsByTagName(""String_Node_Str"").item(0).setTextContent(""String_Node_Str"");
          flag=true;
        }
      }
      Node newNode=newDoc.importNode(order,true);
      root.appendChild(newNode);
    }
    Node docRoot=newDoc.importNode(root,true);
    newDoc.appendChild(docRoot);
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    DOMSource source=new DOMSource(newDoc);
    StreamResult result=new StreamResult(ORDERS_XML);
    transformer.transform(source,result);
    return flag;
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
  return false;
}","/** 
 * Web service operation
 */
@WebMethod(operationName=""String_Node_Str"") public boolean receivePayment(@WebParam(name=""String_Node_Str"") String orderNum,@WebParam(name=""String_Node_Str"") float totalPrice){
  MessageContext ctxt=wsc.getMessageContext();
  ServletContext req=(ServletContext)ctxt.get(ctxt.SERVLET_CONTEXT);
  String path=req.getRealPath(""String_Node_Str"");
  if (!ORDERS_XML.startsWith(path))   ORDERS_XML=path + ""String_Node_Str"" + ORDERS_XML;
  File file=new File(ORDERS_XML);
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    InputSource is=new InputSource();
    is.setCharacterStream(new FileReader(file));
    Document doc=db.parse(is);
    Document newDoc=db.newDocument();
    Element root=newDoc.createElement(""String_Node_Str"");
    boolean flag=false;
    NodeList orders=doc.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < orders.getLength(); i++) {
      Element order=(Element)orders.item(i);
      if (getTextValue(order,""String_Node_Str"").equals(orderNum)) {
        if (getFloatValue(order,""String_Node_Str"") == totalPrice) {
          order.getElementsByTagName(""String_Node_Str"").item(0).setTextContent(""String_Node_Str"");
          flag=true;
        }
      }
      Node newNode=newDoc.importNode(order,true);
      root.appendChild(newNode);
    }
    Node docRoot=newDoc.importNode(root,true);
    newDoc.appendChild(docRoot);
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    DOMSource source=new DOMSource(newDoc);
    StreamResult result=new StreamResult(ORDERS_XML);
    transformer.transform(source,result);
    return flag;
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
  return false;
}",0.9654986522911052
44123,"/** 
 * Web service operation
 */
@WebMethod(operationName=""String_Node_Str"") public boolean processPurchaseOrder(@WebParam(name=""String_Node_Str"") PurchaseOrder aPO){
  MessageContext ctxt=wsc.getMessageContext();
  ServletContext req=(ServletContext)ctxt.get(ctxt.SERVLET_CONTEXT);
  String path=req.getRealPath(""String_Node_Str"");
  ORDERS_XML=path + ""String_Node_Str"" + ORDERS_XML;
  if (aPO.getUnitPrice() >= aPO.getProduct().getUnitPrice()) {
    if (produce(aPO.getProduct().getProductName(),aPO.getQuantity())) {
      System.out.println(""String_Node_Str"");
      File file=new File(ORDERS_XML);
      try {
        DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
        DocumentBuilder db=dbf.newDocumentBuilder();
        InputSource is=new InputSource();
        is.setCharacterStream(new FileReader(file));
        Document doc=db.parse(is);
        Element root=doc.getDocumentElement();
        Element e=doc.createElement(""String_Node_Str"");
        String keys[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        String values[]={aPO.getOrderNum(),aPO.getCustomerRef(),aPO.getProduct().getProductName(),Integer.toString(aPO.getQuantity()),Float.toString(aPO.getUnitPrice())};
        for (int i=0; i < keys.length; i++) {
          Element tmp=doc.createElement(keys[i]);
          tmp.setTextContent(values[i]);
          e.appendChild(tmp);
        }
        Element status=doc.createElement(""String_Node_Str"");
        status.setTextContent(""String_Node_Str"");
        e.appendChild(status);
        Element total=doc.createElement(""String_Node_Str"");
        float orderTotal=aPO.getQuantity() * aPO.getUnitPrice();
        total.setTextContent(Float.toString(orderTotal));
        e.appendChild(total);
        root.appendChild(e);
        TransformerFactory tf=TransformerFactory.newInstance();
        Transformer m=tf.newTransformer();
        DOMSource source=new DOMSource(root);
        StreamResult result=new StreamResult(file);
        m.transform(source,result);
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"" + e.getMessage());
      }
      return true;
    }
  }
  System.out.println(""String_Node_Str"");
  return false;
}","/** 
 * Web service operation
 */
@WebMethod(operationName=""String_Node_Str"") public boolean processPurchaseOrder(@WebParam(name=""String_Node_Str"") PurchaseOrder aPO){
  MessageContext ctxt=wsc.getMessageContext();
  ServletContext req=(ServletContext)ctxt.get(ctxt.SERVLET_CONTEXT);
  String path=req.getRealPath(""String_Node_Str"");
  if (!ORDERS_XML.startsWith(path))   ORDERS_XML=path + ""String_Node_Str"" + ORDERS_XML;
  if (aPO.getUnitPrice() >= aPO.getProduct().getUnitPrice()) {
    if (produce(aPO.getProduct().getProductName(),aPO.getQuantity())) {
      System.out.println(""String_Node_Str"");
      File file=new File(ORDERS_XML);
      try {
        DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
        DocumentBuilder db=dbf.newDocumentBuilder();
        InputSource is=new InputSource();
        is.setCharacterStream(new FileReader(file));
        Document doc=db.parse(is);
        Element root=doc.getDocumentElement();
        Element e=doc.createElement(""String_Node_Str"");
        String keys[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        String values[]={aPO.getOrderNum(),aPO.getCustomerRef(),aPO.getProduct().getProductName(),Integer.toString(aPO.getQuantity()),Float.toString(aPO.getUnitPrice())};
        for (int i=0; i < keys.length; i++) {
          Element tmp=doc.createElement(keys[i]);
          tmp.setTextContent(values[i]);
          e.appendChild(tmp);
        }
        Element status=doc.createElement(""String_Node_Str"");
        status.setTextContent(""String_Node_Str"");
        e.appendChild(status);
        Element total=doc.createElement(""String_Node_Str"");
        float orderTotal=aPO.getQuantity() * aPO.getUnitPrice();
        total.setTextContent(Float.toString(orderTotal));
        e.appendChild(total);
        root.appendChild(e);
        TransformerFactory tf=TransformerFactory.newInstance();
        Transformer m=tf.newTransformer();
        DOMSource source=new DOMSource(root);
        StreamResult result=new StreamResult(file);
        m.transform(source,result);
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"" + e.getMessage());
      }
      return true;
    }
  }
  System.out.println(""String_Node_Str"");
  return false;
}",0.8906455862977603
44124,"/** 
 * Web service operation
 */
@WebMethod(operationName=""String_Node_Str"") public boolean receivePayment(@WebParam(name=""String_Node_Str"") String orderNum,@WebParam(name=""String_Node_Str"") float totalPrice){
  MessageContext ctxt=wsc.getMessageContext();
  ServletContext req=(ServletContext)ctxt.get(ctxt.SERVLET_CONTEXT);
  String path=req.getRealPath(""String_Node_Str"");
  ORDERS_XML=path + ""String_Node_Str"" + ORDERS_XML;
  File file=new File(ORDERS_XML);
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    InputSource is=new InputSource();
    is.setCharacterStream(new FileReader(file));
    Document doc=db.parse(is);
    Document newDoc=db.newDocument();
    Element root=newDoc.createElement(""String_Node_Str"");
    boolean flag=false;
    NodeList orders=doc.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < orders.getLength(); i++) {
      Element order=(Element)orders.item(i);
      if (getTextValue(order,""String_Node_Str"").equals(orderNum)) {
        if (getFloatValue(order,""String_Node_Str"") == totalPrice) {
          order.getElementsByTagName(""String_Node_Str"").item(0).setTextContent(""String_Node_Str"");
          flag=true;
        }
      }
      Node newNode=newDoc.importNode(order,true);
      root.appendChild(newNode);
    }
    Node docRoot=newDoc.importNode(root,true);
    newDoc.appendChild(docRoot);
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    DOMSource source=new DOMSource(newDoc);
    StreamResult result=new StreamResult(ORDERS_XML);
    transformer.transform(source,result);
    return flag;
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
  return false;
}","/** 
 * Web service operation
 */
@WebMethod(operationName=""String_Node_Str"") public boolean receivePayment(@WebParam(name=""String_Node_Str"") String orderNum,@WebParam(name=""String_Node_Str"") float totalPrice){
  MessageContext ctxt=wsc.getMessageContext();
  ServletContext req=(ServletContext)ctxt.get(ctxt.SERVLET_CONTEXT);
  String path=req.getRealPath(""String_Node_Str"");
  if (!ORDERS_XML.startsWith(path))   ORDERS_XML=path + ""String_Node_Str"" + ORDERS_XML;
  File file=new File(ORDERS_XML);
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    InputSource is=new InputSource();
    is.setCharacterStream(new FileReader(file));
    Document doc=db.parse(is);
    Document newDoc=db.newDocument();
    Element root=newDoc.createElement(""String_Node_Str"");
    boolean flag=false;
    NodeList orders=doc.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < orders.getLength(); i++) {
      Element order=(Element)orders.item(i);
      if (getTextValue(order,""String_Node_Str"").equals(orderNum)) {
        if (getFloatValue(order,""String_Node_Str"") == totalPrice) {
          order.getElementsByTagName(""String_Node_Str"").item(0).setTextContent(""String_Node_Str"");
          flag=true;
        }
      }
      Node newNode=newDoc.importNode(order,true);
      root.appendChild(newNode);
    }
    Node docRoot=newDoc.importNode(root,true);
    newDoc.appendChild(docRoot);
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    DOMSource source=new DOMSource(newDoc);
    StreamResult result=new StreamResult(ORDERS_XML);
    transformer.transform(source,result);
    return flag;
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
  return false;
}",0.9654986522911052
44125,"/** 
 * Web service operation
 */
@WebMethod(operationName=""String_Node_Str"") public boolean processPurchaseOrder(@WebParam(name=""String_Node_Str"") PurchaseOrder aPO){
  MessageContext ctxt=wsc.getMessageContext();
  ServletContext req=(ServletContext)ctxt.get(ctxt.SERVLET_CONTEXT);
  String path=req.getRealPath(""String_Node_Str"");
  ORDERS_XML=path + ""String_Node_Str"" + ORDERS_XML;
  if (aPO.getUnitPrice() >= aPO.getProduct().getUnitPrice()) {
    if (produce(aPO.getProduct().getProductName(),aPO.getQuantity())) {
      System.out.println(""String_Node_Str"");
      File file=new File(ORDERS_XML);
      try {
        DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
        DocumentBuilder db=dbf.newDocumentBuilder();
        InputSource is=new InputSource();
        is.setCharacterStream(new FileReader(file));
        Document doc=db.parse(is);
        Element root=doc.getDocumentElement();
        Element e=doc.createElement(""String_Node_Str"");
        String keys[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        String values[]={aPO.getOrderNum(),aPO.getCustomerRef(),aPO.getProduct().getProductName(),Integer.toString(aPO.getQuantity()),Float.toString(aPO.getUnitPrice())};
        for (int i=0; i < keys.length; i++) {
          Element tmp=doc.createElement(keys[i]);
          tmp.setTextContent(values[i]);
          e.appendChild(tmp);
        }
        Element status=doc.createElement(""String_Node_Str"");
        status.setTextContent(""String_Node_Str"");
        e.appendChild(status);
        Element total=doc.createElement(""String_Node_Str"");
        float orderTotal=aPO.getQuantity() * aPO.getUnitPrice();
        total.setTextContent(Float.toString(orderTotal));
        e.appendChild(total);
        root.appendChild(e);
        TransformerFactory tf=TransformerFactory.newInstance();
        Transformer m=tf.newTransformer();
        DOMSource source=new DOMSource(root);
        StreamResult result=new StreamResult(file);
        m.transform(source,result);
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"" + e.getMessage());
      }
      return true;
    }
  }
  System.out.println(""String_Node_Str"");
  return false;
}","/** 
 * Web service operation
 */
@WebMethod(operationName=""String_Node_Str"") public boolean processPurchaseOrder(@WebParam(name=""String_Node_Str"") PurchaseOrder aPO){
  MessageContext ctxt=wsc.getMessageContext();
  ServletContext req=(ServletContext)ctxt.get(ctxt.SERVLET_CONTEXT);
  String path=req.getRealPath(""String_Node_Str"");
  if (!ORDERS_XML.startsWith(path))   ORDERS_XML=path + ""String_Node_Str"" + ORDERS_XML;
  if (aPO.getUnitPrice() >= aPO.getProduct().getUnitPrice()) {
    if (produce(aPO.getProduct().getProductName(),aPO.getQuantity())) {
      System.out.println(""String_Node_Str"");
      File file=new File(ORDERS_XML);
      try {
        DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
        DocumentBuilder db=dbf.newDocumentBuilder();
        InputSource is=new InputSource();
        is.setCharacterStream(new FileReader(file));
        Document doc=db.parse(is);
        Element root=doc.getDocumentElement();
        Element e=doc.createElement(""String_Node_Str"");
        String keys[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        String values[]={aPO.getOrderNum(),aPO.getCustomerRef(),aPO.getProduct().getProductName(),Integer.toString(aPO.getQuantity()),Float.toString(aPO.getUnitPrice())};
        for (int i=0; i < keys.length; i++) {
          Element tmp=doc.createElement(keys[i]);
          tmp.setTextContent(values[i]);
          e.appendChild(tmp);
        }
        Element status=doc.createElement(""String_Node_Str"");
        status.setTextContent(""String_Node_Str"");
        e.appendChild(status);
        Element total=doc.createElement(""String_Node_Str"");
        float orderTotal=aPO.getQuantity() * aPO.getUnitPrice();
        total.setTextContent(Float.toString(orderTotal));
        e.appendChild(total);
        root.appendChild(e);
        TransformerFactory tf=TransformerFactory.newInstance();
        Transformer m=tf.newTransformer();
        DOMSource source=new DOMSource(root);
        StreamResult result=new StreamResult(file);
        m.transform(source,result);
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"" + e.getMessage());
      }
      return true;
    }
  }
  System.out.println(""String_Node_Str"");
  return false;
}",0.8906455862977603
44126,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.route);
  mRoute=(Route)getIntent().getParcelableExtra(""String_Node_Str"");
  initActionBar(mRoute.getTitle());
  mMapView=(MapView)findViewById(R.id.mapview);
  mMapView.setBuiltInZoomControls(true);
  mMapOverlays=mMapView.getOverlays();
  itemizedOverlay=new PlaceItemizedOverlay(this,mMapView);
  initList(mRoute);
  int index=1;
  for (  Place place : mRoute.getPlaces()) {
    addPlaceOverlay(place,index);
    index++;
  }
  mMapOverlays.add(itemizedOverlay);
  myLocationOverlay(mMapView);
  mMc=mMapView.getController();
  final MapController mc=mMc;
  if (mMapOverlays.size() > 0) {
    PlaceItemizedOverlay first=(PlaceItemizedOverlay)mMapOverlays.get(0);
    GeoPoint point=first.getCenter();
    mc.animateTo(point);
    mc.setZoom(14);
  }
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.route);
  mRoute=(Route)getIntent().getParcelableExtra(""String_Node_Str"");
  initActionBar(mRoute.getTitle());
  mMapView=(MapView)findViewById(R.id.mapview);
  mMapView.setBuiltInZoomControls(true);
  mMapOverlays=mMapView.getOverlays();
  itemizedOverlay=new PlaceItemizedOverlay(this,mMapView);
  initList(mRoute);
  int index=1;
  for (  Place place : mRoute.getPlaces()) {
    addPlaceOverlay(place,index);
    index++;
  }
  mMapOverlays.add(itemizedOverlay);
  myLocationOverlay(mMapView);
  mMc=mMapView.getController();
  final MapController mc=mMc;
  if (mMapOverlays.size() > 0) {
    PlaceItemizedOverlay first=(PlaceItemizedOverlay)mMapOverlays.get(0);
    GeoPoint point=first.getCenter();
    mc.animateTo(point);
    mc.setZoom(14);
  }
  onRotationChange(getResources().getConfiguration());
}",0.9713690786048932
44127,"/** 
 * @see android.app.Activity#onConfigurationChanged(android.content.res.Configuration)
 */
@Override public void onConfigurationChanged(Configuration newConfig){
  if (newConfig.orientation == newConfig.ORIENTATION_LANDSCAPE) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    mPlacesList.setVisibility(View.VISIBLE);
  }
 else {
    mPlacesList.setVisibility(View.GONE);
  }
  super.onConfigurationChanged(newConfig);
}","/** 
 * @see android.app.Activity#onConfigurationChanged(android.content.res.Configuration)
 */
@Override public void onConfigurationChanged(Configuration newConfig){
  onRotationChange(newConfig);
  super.onConfigurationChanged(newConfig);
}",0.573134328358209
44128,"public List<Route> list(){
  List<Route> routeList=new LinkedList<Route>();
  Route route=new Route();
  route.setTitle(""String_Node_Str"");
  User user=new User(""String_Node_Str"");
  route.setCreator(user);
  route.setDescription(""String_Node_Str"");
  Place place1=new Place();
  place1.setTitle(""String_Node_Str"");
  place1.setDescription(""String_Node_Str"");
  Place place2=new Place();
  place2.setTitle(""String_Node_Str"");
  place2.setDescription(""String_Node_Str"");
  Place place3=new Place();
  place3.setTitle(""String_Node_Str"");
  place3.setDescription(""String_Node_Str"");
  Place place4=new Place();
  place4.setTitle(""String_Node_Str"");
  place4.setDescription(""String_Node_Str"");
  Location loc1=new Location(""String_Node_Str"");
  loc1.setLatitude(62.4007043202567);
  loc1.setLongitude(17.2577392061653);
  place1.setGeoLocation(loc1);
  Location loc2=new Location(""String_Node_Str"");
  loc2.setLatitude(62.394369903217);
  loc2.setLongitude(17.2816450479837);
  place2.setGeoLocation(loc2);
  Location loc3=new Location(""String_Node_Str"");
  loc3.setLatitude(62.3897829867526);
  loc3.setLongitude(17.2995418371631);
  place3.setGeoLocation(loc3);
  Location loc4=new Location(""String_Node_Str"");
  loc4.setLatitude(62.391178326117);
  loc4.setLongitude(17.3004228024664);
  place4.setGeoLocation(loc4);
  Map<Integer,Place> placeRecordMap=new HashMap<Integer,Place>();
  placeRecordMap.put(1,place1);
  placeRecordMap.put(2,place2);
  placeRecordMap.put(3,place3);
  placeRecordMap.put(4,place4);
  List<Record> placeRecords=new ArrayList<Record>();
  try {
    for (    Integer i : placeRecordMap.keySet()) {
      String filename=String.format(""String_Node_Str"",i);
      InputStream is=this.mAssetManager.open(filename);
      XMLPull pull=new XMLPull(is);
      placeRecordMap.get(i).setRecords(pull.parse());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  List<Place> places=new LinkedList<Place>();
  places.add(place1);
  places.add(place2);
  places.add(place3);
  places.add(place4);
  route.setPlaces(places);
  routeList.add(route);
  return routeList;
}","public List<Route> list(){
  List<Route> routeList=new LinkedList<Route>();
  Route route=new Route();
  route.setTitle(""String_Node_Str"");
  User user=new User();
  user.setUserName(""String_Node_Str"");
  route.setCreatedBy(user);
  route.setDescription(""String_Node_Str"");
  Place place1=new Place();
  place1.setTitle(""String_Node_Str"");
  place1.setDescription(""String_Node_Str"");
  Place place2=new Place();
  place2.setTitle(""String_Node_Str"");
  place2.setDescription(""String_Node_Str"");
  Place place3=new Place();
  place3.setTitle(""String_Node_Str"");
  place3.setDescription(""String_Node_Str"");
  Place place4=new Place();
  place4.setTitle(""String_Node_Str"");
  place4.setDescription(""String_Node_Str"");
  Location loc1=new Location(""String_Node_Str"");
  loc1.setLatitude(62.4007043202567);
  loc1.setLongitude(17.2577392061653);
  place1.setGeoLocation(loc1);
  Location loc2=new Location(""String_Node_Str"");
  loc2.setLatitude(62.394369903217);
  loc2.setLongitude(17.2816450479837);
  place2.setGeoLocation(loc2);
  Location loc3=new Location(""String_Node_Str"");
  loc3.setLatitude(62.3897829867526);
  loc3.setLongitude(17.2995418371631);
  place3.setGeoLocation(loc3);
  Location loc4=new Location(""String_Node_Str"");
  loc4.setLatitude(62.391178326117);
  loc4.setLongitude(17.3004228024664);
  place4.setGeoLocation(loc4);
  Map<Integer,Place> placeRecordMap=new HashMap<Integer,Place>();
  placeRecordMap.put(1,place1);
  placeRecordMap.put(2,place2);
  placeRecordMap.put(3,place3);
  placeRecordMap.put(4,place4);
  List<Record> placeRecords=new ArrayList<Record>();
  try {
    for (    Integer i : placeRecordMap.keySet()) {
      String filename=String.format(""String_Node_Str"",i);
      InputStream is=this.mAssetManager.open(filename);
      XMLPull pull=new XMLPull(is);
      placeRecordMap.get(i).setRecords(pull.parse());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  List<Place> places=new LinkedList<Place>();
  places.add(place1);
  places.add(place2);
  places.add(place3);
  places.add(place4);
  route.setPlaces(places);
  routeList.add(route);
  return routeList;
}",0.989578398863098
44129,"@Override public void writeToParcel(Parcel dest,int flags){
  dest.writeString(this.title);
  dest.writeString(this.description);
  dest.writeTypedList(this.places);
}","@Override public void writeToParcel(Parcel dest,int flags){
  dest.writeString(title);
  dest.writeParcelable(createdBy,0);
  dest.writeString(description);
  dest.writeTypedList(places);
}",0.8539325842696629
44130,"public Route(Parcel parcel){
  this.title=parcel.readString();
  this.description=parcel.readString();
  this.places=new ArrayList<Place>();
  parcel.readTypedList(this.places,Place.CREATOR);
}","public Route(Parcel parcel){
  title=parcel.readString();
  createdBy=parcel.readParcelable(User.class.getClassLoader());
  description=parcel.readString();
  places=new ArrayList<Place>();
  parcel.readTypedList(places,Place.CREATOR);
}",0.7627906976744186
44131,"public List<Route> list(){
  List<Route> routeList=new LinkedList<Route>();
  Route route=new Route();
  route.setTitle(""String_Node_Str"");
  User user=new User(""String_Node_Str"");
  route.setCreator(user);
  route.setDescription(""String_Node_Str"");
  Place place1=new Place();
  place1.setTitle(""String_Node_Str"");
  place1.setDescription(""String_Node_Str"");
  Place place2=new Place();
  place2.setTitle(""String_Node_Str"");
  place2.setDescription(""String_Node_Str"");
  Place place3=new Place();
  place3.setTitle(""String_Node_Str"");
  place3.setDescription(""String_Node_Str"");
  Place place4=new Place();
  place4.setTitle(""String_Node_Str"");
  place4.setDescription(""String_Node_Str"");
  Location loc1=new Location(""String_Node_Str"");
  loc1.setLatitude(62.4007043202567);
  loc1.setLongitude(17.2577392061653);
  place1.setGeoLocation(loc1);
  Location loc2=new Location(""String_Node_Str"");
  loc2.setLatitude(62.394369903217);
  loc2.setLongitude(17.2816450479837);
  place2.setGeoLocation(loc2);
  Location loc3=new Location(""String_Node_Str"");
  loc3.setLatitude(62.3897829867526);
  loc3.setLongitude(17.2995418371631);
  place3.setGeoLocation(loc3);
  Location loc4=new Location(""String_Node_Str"");
  loc4.setLatitude(62.391178326117);
  loc4.setLongitude(17.3004228024664);
  place4.setGeoLocation(loc4);
  Map<Integer,Place> placeRecordMap=new HashMap<Integer,Place>();
  placeRecordMap.put(1,place1);
  placeRecordMap.put(2,place2);
  placeRecordMap.put(3,place3);
  placeRecordMap.put(4,place4);
  List<Record> placeRecords=new ArrayList<Record>();
  try {
    for (    Integer i : placeRecordMap.keySet()) {
      String filename=String.format(""String_Node_Str"",i);
      InputStream is=this.mAssetManager.open(""String_Node_Str"");
      XMLPull pull=new XMLPull(is);
      placeRecordMap.get(i).setRecords(pull.parse());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  List<Place> places=new LinkedList<Place>();
  places.add(place1);
  places.add(place2);
  places.add(place3);
  places.add(place4);
  route.setPlaces(places);
  routeList.add(route);
  return routeList;
}","public List<Route> list(){
  List<Route> routeList=new LinkedList<Route>();
  Route route=new Route();
  route.setTitle(""String_Node_Str"");
  User user=new User(""String_Node_Str"");
  route.setCreator(user);
  route.setDescription(""String_Node_Str"");
  Place place1=new Place();
  place1.setTitle(""String_Node_Str"");
  place1.setDescription(""String_Node_Str"");
  Place place2=new Place();
  place2.setTitle(""String_Node_Str"");
  place2.setDescription(""String_Node_Str"");
  Place place3=new Place();
  place3.setTitle(""String_Node_Str"");
  place3.setDescription(""String_Node_Str"");
  Place place4=new Place();
  place4.setTitle(""String_Node_Str"");
  place4.setDescription(""String_Node_Str"");
  Location loc1=new Location(""String_Node_Str"");
  loc1.setLatitude(62.4007043202567);
  loc1.setLongitude(17.2577392061653);
  place1.setGeoLocation(loc1);
  Location loc2=new Location(""String_Node_Str"");
  loc2.setLatitude(62.394369903217);
  loc2.setLongitude(17.2816450479837);
  place2.setGeoLocation(loc2);
  Location loc3=new Location(""String_Node_Str"");
  loc3.setLatitude(62.3897829867526);
  loc3.setLongitude(17.2995418371631);
  place3.setGeoLocation(loc3);
  Location loc4=new Location(""String_Node_Str"");
  loc4.setLatitude(62.391178326117);
  loc4.setLongitude(17.3004228024664);
  place4.setGeoLocation(loc4);
  Map<Integer,Place> placeRecordMap=new HashMap<Integer,Place>();
  placeRecordMap.put(1,place1);
  placeRecordMap.put(2,place2);
  placeRecordMap.put(3,place3);
  placeRecordMap.put(4,place4);
  List<Record> placeRecords=new ArrayList<Record>();
  try {
    for (    Integer i : placeRecordMap.keySet()) {
      String filename=String.format(""String_Node_Str"",i);
      InputStream is=this.mAssetManager.open(filename);
      XMLPull pull=new XMLPull(is);
      placeRecordMap.get(i).setRecords(pull.parse());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  List<Place> places=new LinkedList<Place>();
  places.add(place1);
  places.add(place2);
  places.add(place3);
  places.add(place4);
  route.setPlaces(places);
  routeList.add(route);
  return routeList;
}",0.9940575231756597
44132,"public void setUser(User user){
  this.user=user;
}","public <T extends User>T setUser(T user){
  this.user=user;
  return user;
}",0.6929133858267716
44133,"public ViewSpeakerPage(){
  add(new UserInfoPanel(""String_Node_Str"",fetchSpeaker(),true));
}","public ViewSpeakerPage(){
  add(new UserInfoPanel(""String_Node_Str"",getSession().setUser(fetchSpeaker()),true));
}",0.8932038834951457
44134,"/** 
 * Sets the property used to discriminate between the different document types
 * @param discriminatorField
 */
public void setDiscriminatorField(String discriminatorField){
  this.discriminatorField=discriminatorField;
}","/** 
 * Sets the property used to discriminate between the different document types
 * @param discriminatorField    property used to discriminate between the different document types
 */
public void setDiscriminatorField(String discriminatorField){
  this.discriminatorField=discriminatorField;
}",0.8659003831417624
44135,"/** 
 * Sets the parse path info at which the type discrimination is applied.
 * @param parsePathInfo
 */
public void setParsePathInfo(String parsePathInfo){
  this.pathMatcher=new EqualsPathMatcher(parsePathInfo);
}","/** 
 * Sets the parse path info at which the type discrimination is applied.
 * @param parsePathInfo parse path to match with an EqualsPathMatcher for this type mapper.
 */
public void setParsePathInfo(String parsePathInfo){
  this.pathMatcher=new EqualsPathMatcher(parsePathInfo);
}",0.552
44136,"/** 
 * If set to <code>true</code>, java.util.HashMap will be used for discriminator field values that are mapped to no class. Otherwise an exception is thrown in that case.
 * @param allowUndefined
 */
public void setAllowUndefined(boolean allowUndefined){
  this.allowUndefined=allowUndefined;
}","/** 
 * If set to <code>true</code>, java.util.HashMap will be used for discriminator field values that are mapped to no class. Otherwise an exception is thrown in that case.
 * @param allowUndefined    <code>true</code> if you objects with undefined type to be parsed as HashMap instead ofthe mapper throwing an error.
 */
public void setAllowUndefined(boolean allowUndefined){
  this.allowUndefined=allowUndefined;
}",0.8324022346368715
44137,"/** 
 * Sets the base type to which all created instances must be assignable to.
 * @param enforcedBaseType
 */
public void setEnforcedBaseType(Class enforcedBaseType){
  this.enforcedBaseType=enforcedBaseType;
}","/** 
 * Sets the base type to which all created instances must be assignable to.
 * @param enforcedBaseType  if <code>true</code>, make sure that the instances create are assignable to the givenbase type
 */
public void setEnforcedBaseType(Class enforcedBaseType){
  this.enforcedBaseType=enforcedBaseType;
}",0.8153846153846154
44138,"/** 
 * Sets the base package that is put before the given type to form the fully qualified class names.
 * @param basePackage
 */
public void setBasePackage(String basePackage){
  this.basePackage=basePackage;
}","/** 
 * Sets the base package that is put before the given type to form the fully qualified class names.
 * @param basePackage   the base package that is put before the given type to form the fully qualifiedclass names
 */
public void setBasePackage(String basePackage){
  this.basePackage=basePackage;
}",0.8217054263565892
44139,"/** 
 * Sets the type mappers that are consulted for type hints in the order in which they are in the list
 * @param typeMappers
 */
public void setTypeMappers(List<TypeMapper> typeMappers){
  this.typeMappers=typeMappers;
}","/** 
 * Sets the type mappers that are consulted for type hints in the order in which they are in the list
 * @param typeMappers   list of type mappers to compose 
 */
public void setTypeMappers(List<TypeMapper> typeMappers){
  this.typeMappers=typeMappers;
}",0.927536231884058
44140,"/** 
 * returns value of the attribute with the given name.
 * @param name
 */
Object getProperty(String name);","/** 
 * returns value of the attribute with the given name.
 * @param name      property name
 * @return property value
 */
Object getProperty(String name);",0.8314606741573034
44141,"/** 
 * Returns the set of available dynamic attribute names.
 * @return
 */
Set<String> propertyNames();","/** 
 * Returns the set of available dynamic attribute names.
 * @return set of available dynamic attribute names
 */
Set<String> propertyNames();",0.8366533864541833
44142,"/** 
 * Sets the attribute with the given name to the given value.
 * @param name
 * @param value if <code>null</code>, the attribute is removed.
 */
void setProperty(String name,Object value);","/** 
 * Sets the attribute with the given name to the given value.
 * @param name      property name
 * @param value     if <code>null</code>, the attribute is removed.
 */
void setProperty(String name,Object value);",0.9437652811735942
44143,"/** 
 * Returns <code>true</code> if this DynamicProperties object has a property with the given name.
 * @param name
 * @return
 */
boolean hasProperty(String name);","/** 
 * Returns <code>true</code> if this DynamicProperties object has a property with the given name.
 * @param name      property name
 * @return <code>true</code> if this DynamicProperties object has a property with the given name
 */
boolean hasProperty(String name);",0.7597254004576659
44144,"/** 
 * Removes the property with the given name from this DynamicProperties object.
 * @param name
 * @return  the previous value of the removed property. 
 */
Object removeProperty(String name);","/** 
 * Removes the property with the given name from this DynamicProperties object.
 * @param name      property name
 * @return  the previous value of the removed property.
 */
Object removeProperty(String name);",0.951219512195122
44145,"/** 
 * Returns the properties this JSON generator ignores.
 * @return
 */
public Collection<String> getIgnoredProperties(){
  return ignoredProperties;
}","/** 
 * Returns the properties this JSON generator ignores.
 * @return the currently ignored property names
 */
public Collection<String> getIgnoredProperties(){
  return ignoredProperties;
}",0.8927536231884058
44146,"/** 
 * Returns a JSON representation of the given object as String.
 * @param o
 * @param ignoredProps  collection of property names to ignore. Overrides the ignored properties set on the JSON generator
 * @return
 */
public String forValue(Object o,Collection<String> ignoredProps){
  StringBuilderSink tmp=new StringBuilderSink();
  dumpObject(tmp,o,ignoredProps);
  return tmp.getContent();
}","/** 
 * Returns a JSON representation of the given object as String.
 * @param o                 object to convert to JSON
 * @param ignoredProps      collection of property names to ignore. Overrides the ignored properties set on the JSON generator
 * @return JSON representation of the given object
 */
public String forValue(Object o,Collection<String> ignoredProps){
  StringBuilderSink tmp=new StringBuilderSink();
  dumpObject(tmp,o,ignoredProps);
  return tmp.getContent();
}",0.9020501138952164
44147,"/** 
 * Sets the properties this JSON generator ignores. Most effective when  called with a set.
 * @param ignoredProperties 
 */
public void setIgnoredProperties(Collection<String> ignoredProperties){
  this.ignoredProperties=ignoredProperties;
}","/** 
 * Sets the properties this JSON generator ignores. Most effective when  called with a set.
 * @param ignoredProperties     property names to ignore
 */
public void setIgnoredProperties(Collection<String> ignoredProperties){
  this.ignoredProperties=ignoredProperties;
}",0.946360153256705
44148,"/** 
 * Allows single quotes to be used for quoting JSON strings.
 * @param allowSingleQuotes
 */
public void setAllowSingleQuotes(boolean allowSingleQuotes){
  this.allowSingleQuotes=allowSingleQuotes;
}","/** 
 * Allows single quotes to be used for quoting JSON strings.
 * @param allowSingleQuotes     <code>true</code> if you want to parse JSON quoted with single quotes. (e.g.<code>{'MyObject':'single quoted'}</code>)
 */
public void setAllowSingleQuotes(boolean allowSingleQuotes){
  this.allowSingleQuotes=allowSingleQuotes;
}",0.768361581920904
44149,"/** 
 * Makes it possible to define which implementation is to be used for an interface. Per default   {@link Collection} and {@link List} are mapped to {@link ArrayList} and {@link Map} is mapped to {@link HashMap}.
 * @param interfaceMappings
 */
public void setInterfaceMappings(Map<Class,Class> interfaceMappings){
  for (  Map.Entry<Class,Class> e : interfaceMappings.entrySet()) {
    Class iface=e.getKey();
    Class cls=e.getValue();
    if (!iface.isInterface()) {
      throw new IllegalArgumentException(""String_Node_Str"" + iface + ""String_Node_Str"");
    }
    if (cls.isInterface()) {
      throw new IllegalArgumentException(""String_Node_Str"" + cls + ""String_Node_Str"");
    }
    if (!iface.isAssignableFrom(cls)) {
      throw new IllegalArgumentException(""String_Node_Str"" + cls + ""String_Node_Str""+ iface);
    }
  }
  this.interfaceMappings=interfaceMappings;
}","/** 
 * Makes it possible to define which implementation is to be used for an interface. Per default   {@link Collection} and {@link List} are mapped to {@link ArrayList} and {@link Map} is mapped to {@link HashMap}.
 * @param interfaceMappings     map mapping interface classes to the implementations to use to parse them
 */
public void setInterfaceMappings(Map<Class,Class> interfaceMappings){
  for (  Map.Entry<Class,Class> e : interfaceMappings.entrySet()) {
    Class iface=e.getKey();
    Class cls=e.getValue();
    if (!iface.isInterface()) {
      throw new IllegalArgumentException(""String_Node_Str"" + iface + ""String_Node_Str"");
    }
    if (cls.isInterface()) {
      throw new IllegalArgumentException(""String_Node_Str"" + cls + ""String_Node_Str"");
    }
    if (!iface.isAssignableFrom(cls)) {
      throw new IllegalArgumentException(""String_Node_Str"" + cls + ""String_Node_Str""+ iface);
    }
  }
  this.interfaceMappings=interfaceMappings;
}",0.957608695652174
44150,"/** 
 * Sets a   {@link TypeMapper} to use on the token streams parsedby this parser.
 * @param typeMapper
 */
public void setTypeMapper(TypeMapper typeMapper){
  this.typeMapper=typeMapper;
}","/** 
 * Sets a   {@link TypeMapper} to use on the token streams parsedby this parser.
 * @param typeMapper    type mapper to use for this parser
 */
public void setTypeMapper(TypeMapper typeMapper){
  this.typeMapper=typeMapper;
}",0.909952606635071
44151,"/** 
 * Expects the next object of the given tokenizer to be an array and parses it into the given   {@link ParseContext}
 * @param cx
 * @param tokenizer
 * @throws InstantiationException
 * @throws IllegalAccessException
 * @throws InvocationTargetException
 * @throws NoSuchMethodException
 */
private void parseArrayInto(ParseContext cx,JSONTokenizer tokenizer) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
  boolean containerIsCollection=Collection.class.isAssignableFrom(cx.target.getClass());
  boolean first=true;
  while (true) {
    Token valueToken=tokenizer.next();
    TokenType valueType=valueToken.type();
    if (valueType == TokenType.BRACKET_CLOSE) {
      break;
    }
    if (!first) {
      valueToken.expect(TokenType.COMMA);
      valueToken=tokenizer.next();
      valueType=valueToken.type();
    }
    Object value;
    Class typeHint=getTypeHint(cx,cx.getParsePathInfo(""String_Node_Str""),tokenizer,""String_Node_Str"",false,valueType.isPrimitive());
    if (valueType.isPrimitive()) {
      value=valueToken.value();
      if (typeHint != null) {
        value=convertValueTo(value,typeHint,typeConvertersByClass);
      }
    }
 else {
      Object newTarget=null;
      if (valueType == TokenType.BRACE_OPEN) {
        JSONClassInfo classInfo=TypeAnalyzer.getClassInfo(objectSupport,typeHint);
        newTarget=createNewTargetInstance(typeHint,classInfo,true);
        parseObjectInto(cx.push(newTarget,null,""String_Node_Str"",classInfo),tokenizer);
        newTarget=DelayedConstructor.unwrap(newTarget);
        if (classInfo != null) {
          Method postConstructMethod=classInfo.getPostConstructMethod();
          if (postConstructMethod != null) {
            postConstructMethod.invoke(newTarget);
          }
        }
      }
 else       if (valueType == TokenType.BRACKET_OPEN) {
        JSONClassInfo classInfo=TypeAnalyzer.getClassInfo(objectSupport,typeHint);
        newTarget=createNewTargetInstance(typeHint,classInfo,false);
        parseArrayInto(cx.push(newTarget,null,""String_Node_Str"",classInfo),tokenizer);
        newTarget=DelayedConstructor.unwrap(newTarget);
        if (classInfo != null) {
          Method postConstructMethod=classInfo.getPostConstructMethod();
          if (postConstructMethod != null) {
            postConstructMethod.invoke(newTarget);
          }
        }
      }
 else {
        throw new JSONParseException(""String_Node_Str"" + valueToken);
      }
      value=newTarget;
    }
    if (containerIsCollection) {
      ((Collection)cx.target).add(value);
    }
 else {
      throw new JSONParseException(""String_Node_Str"" + value + ""String_Node_Str""+ cx.target+ ""String_Node_Str""+ cx.target.getClass()+ ""String_Node_Str"");
    }
    first=false;
  }
}","/** 
 * Expects the next object of the given tokenizer to be an array and parses it into the given   {@link ParseContext}
 * @param cx            parse context
 * @param tokenizer     tokenizer
 * @throws InstantiationException       if an object instantiation goes wrong
 * @throws IllegalAccessException       if a method cannot be accessed in the currrent security context
 * @throws InvocationTargetException    if an exception occured in the methods used to set parsed information
 * @throws NoSuchMethodException        if a method is mysteriously missing suddenly
 */
private void parseArrayInto(ParseContext cx,JSONTokenizer tokenizer) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
  boolean containerIsCollection=Collection.class.isAssignableFrom(cx.target.getClass());
  boolean first=true;
  while (true) {
    Token valueToken=tokenizer.next();
    TokenType valueType=valueToken.type();
    if (valueType == TokenType.BRACKET_CLOSE) {
      break;
    }
    if (!first) {
      valueToken.expect(TokenType.COMMA);
      valueToken=tokenizer.next();
      valueType=valueToken.type();
    }
    Object value;
    Class typeHint=getTypeHint(cx,cx.getParsePathInfo(""String_Node_Str""),tokenizer,""String_Node_Str"",false,valueType.isPrimitive());
    if (valueType.isPrimitive()) {
      value=valueToken.value();
      if (typeHint != null) {
        value=convertValueTo(value,typeHint,typeConvertersByClass);
      }
    }
 else {
      Object newTarget=null;
      if (valueType == TokenType.BRACE_OPEN) {
        JSONClassInfo classInfo=TypeAnalyzer.getClassInfo(objectSupport,typeHint);
        newTarget=createNewTargetInstance(typeHint,classInfo,true);
        parseObjectInto(cx.push(newTarget,null,""String_Node_Str"",classInfo),tokenizer);
        newTarget=DelayedConstructor.unwrap(newTarget);
        if (classInfo != null) {
          Method postConstructMethod=classInfo.getPostConstructMethod();
          if (postConstructMethod != null) {
            postConstructMethod.invoke(newTarget);
          }
        }
      }
 else       if (valueType == TokenType.BRACKET_OPEN) {
        JSONClassInfo classInfo=TypeAnalyzer.getClassInfo(objectSupport,typeHint);
        newTarget=createNewTargetInstance(typeHint,classInfo,false);
        parseArrayInto(cx.push(newTarget,null,""String_Node_Str"",classInfo),tokenizer);
        newTarget=DelayedConstructor.unwrap(newTarget);
        if (classInfo != null) {
          Method postConstructMethod=classInfo.getPostConstructMethod();
          if (postConstructMethod != null) {
            postConstructMethod.invoke(newTarget);
          }
        }
      }
 else {
        throw new JSONParseException(""String_Node_Str"" + valueToken);
      }
      value=newTarget;
    }
    if (containerIsCollection) {
      ((Collection)cx.target).add(value);
    }
 else {
      throw new JSONParseException(""String_Node_Str"" + value + ""String_Node_Str""+ cx.target+ ""String_Node_Str""+ cx.target.getClass()+ ""String_Node_Str"");
    }
    first=false;
  }
}",0.9526082509376066
44152,"/** 
 * Sets the type hint map that maps a parse path info to a type to use for this parse path location. ( e.g. <code>"".value[]""</code> mapped to <code>FooBean.class</code> would make the parser create FooBean instances for all array elements inside the value property of the root object )
 * @param typeHints
 */
public void setTypeHints(Map<String,Class> typeHints){
  this.typeHints=new HashMap<PathMatcher,Class>();
  for (  Map.Entry<String,Class> e : typeHints.entrySet()) {
    this.typeHints.put(new EqualsPathMatcher(e.getKey()),e.getValue());
  }
}","/** 
 * Sets the type hint map that maps a parse path info to a type to use for this parse path location. ( e.g. <code>"".value[]""</code> mapped to <code>FooBean.class</code> would make the parser create FooBean instances for all array elements inside the value property of the root object )
 * @param typeHints map of type hints
 */
public void setTypeHints(Map<String,Class> typeHints){
  this.typeHints=new HashMap<PathMatcher,Class>();
  for (  Map.Entry<String,Class> e : typeHints.entrySet()) {
    this.typeHints.put(new EqualsPathMatcher(e.getKey()),e.getValue());
  }
}",0.9841549295774648
44153,"public void addObjectFactory(ObjectFactory objectFactory){
  if (objectFactory == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  objectFactories.add(objectFactory);
}","/** 
 * Adds the given object factory as possible object factory to this parser.
 * @param objectFactory object factory
 */
public void addObjectFactory(ObjectFactory objectFactory){
  if (objectFactory == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  objectFactories.add(objectFactory);
}",0.7559055118110236
44154,"/** 
 * Returns <code>true</code> if the factory can create objects of the given class
 * @param cls
 * @return
 */
boolean supports(Class<T> cls);","/** 
 * Returns <code>true</code> if the factory can create objects of the given class
 * @param cls   Class to check for support of
 * @return  <code>true</code> if the given class can be created by this factory
 */
boolean supports(Class<T> cls);",0.7443037974683544
44155,"/** 
 * Creates an instance of the given type.
 * @param typeHint
 * @return
 */
T create(Class<T> typeHint);","/** 
 * Creates an instance of the given type.
 * @param cls   Class to create an instance of
 * @return  new instance
 */
T create(Class<T> cls);",0.7686274509803922
44156,"/** 
 * @param value
 * @return Class or <code>null</code>
 * @throws IllegalStateException if there is no class configured for thisvalue and  {@link #allowUndefined} is false.
 */
@Override protected Class getTypeHintFromTypeProperty(Object value) throws IllegalStateException {
  Class cls=typeMap.get(value);
  if (cls == null) {
    if (allowUndefined) {
      cls=HashMap.class;
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + value + ""String_Node_Str""+ value+ ""String_Node_Str"");
    }
  }
  return cls;
}","/** 
 * Converts a property value into a type hint class
 * @param value     property value.
 * @return Class or <code>null</code>
 * @throws IllegalStateException if there is no class configured for thisvalue and  {@link #allowUndefined} is false.
 */
@Override protected Class getTypeHintFromTypeProperty(Object value) throws IllegalStateException {
  Class cls=typeMap.get(value);
  if (cls == null) {
    if (allowUndefined) {
      cls=HashMap.class;
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + value + ""String_Node_Str""+ value+ ""String_Node_Str"");
    }
  }
  return cls;
}",0.936952714535902
44157,"public JSONClassInfo createClassInfo(Class<?> cls){
  Map<String,JavaObjectPropertyInfo> javaNameToInfo=new HashMap<String,JavaObjectPropertyInfo>();
  for (  Method m : cls.getMethods()) {
    String name=m.getName();
    if ((m.getModifiers() & Modifier.PUBLIC) == 0 || name.equals(""String_Node_Str"")) {
      continue;
    }
    if (name.startsWith(SETTER_PREFIX) && m.getParameterTypes().length == 1) {
      String javaPropertyName=propertyName(name,SETTER_PREFIX.length());
      JavaObjectPropertyInfo pair=javaNameToInfo.get(javaPropertyName);
      if (pair != null) {
        pair.setSetterMethod(m);
      }
 else {
        pair=new JavaObjectPropertyInfo(javaPropertyName,null,m);
        javaNameToInfo.put(javaPropertyName,pair);
      }
      Class<?>[] parameterTypes;
      Class<?> paramType;
      if ((parameterTypes=m.getParameterTypes()).length == 1 && (paramType=parameterTypes[0]).isArray()) {
        pair.setTypeHint(paramType.getComponentType());
      }
    }
 else     if (m.getParameterTypes().length == 0 && !m.getReturnType().equals(void.class)) {
      if (name.startsWith(GETTER_PREFIX)) {
        String javaPropertyName=propertyName(name,GETTER_PREFIX.length());
        JavaObjectPropertyInfo pair=javaNameToInfo.get(javaPropertyName);
        if (pair != null) {
          pair.setGetterMethod(m);
        }
 else {
          javaNameToInfo.put(javaPropertyName,new JavaObjectPropertyInfo(javaPropertyName,m,null));
        }
      }
 else       if (name.startsWith(ISSER_PREFIX)) {
        String javaPropertyName=propertyName(name,ISSER_PREFIX.length());
        JavaObjectPropertyInfo pair=javaNameToInfo.get(javaPropertyName);
        if (pair != null) {
          pair.setGetterMethod(m);
        }
 else {
          javaNameToInfo.put(javaPropertyName,new JavaObjectPropertyInfo(javaPropertyName,m,null));
        }
      }
    }
 else     if (name.startsWith(ADDER_PREFIX) && m.getParameterTypes().length == 1) {
      String javaPropertyName=propertyName(name,ADDER_PREFIX.length());
      JavaObjectPropertyInfo pair=javaNameToInfo.get(javaPropertyName);
      if (pair != null) {
        pair.setAdderMethod(m);
      }
 else {
        JavaObjectPropertyInfo newInfo=new JavaObjectPropertyInfo(javaPropertyName,null,null);
        newInfo.setAdderMethod(m);
        javaNameToInfo.put(javaPropertyName,newInfo);
      }
    }
  }
  HashMap<String,JavaObjectPropertyInfo> propertyInfos=new HashMap<String,JavaObjectPropertyInfo>(javaNameToInfo.size());
  for (  Map.Entry<String,JavaObjectPropertyInfo> e : javaNameToInfo.entrySet()) {
    String jsonPropertyName=e.getKey();
    JavaObjectPropertyInfo propertyInfo=e.getValue();
    Method getterMethod=propertyInfo.getGetterMethod();
    Method setterMethod=propertyInfo.getSetterMethod();
    JSONProperty jsonProperty=getAnnotation(JSONProperty.class,getterMethod,setterMethod);
    if (jsonProperty != null) {
      if (jsonProperty.value().length() > 0) {
        jsonPropertyName=jsonProperty.value();
      }
      propertyInfo.setIgnore(jsonProperty.ignore());
      propertyInfo.setIgnoreIfNull(jsonProperty.ignoreIfNull());
      propertyInfo.setReadOnly(jsonProperty.readOnly());
    }
    propertyInfo.setJsonName(jsonPropertyName);
    JSONReference refAnno=getAnnotation(JSONReference.class,getterMethod,setterMethod);
    if (refAnno != null) {
      propertyInfo.setLinkIdProperty(refAnno.idProperty());
    }
    JSONTypeHint typeHintAnno=getAnnotation(JSONTypeHint.class,getterMethod,setterMethod);
    Class<?>[] parameterTypes;
    Class paramType;
    if (typeHintAnno != null) {
      propertyInfo.setTypeHint(typeHintAnno.value());
    }
    if (typeConverterRepository != null) {
      JSONConverter converterAnno=getAnnotation(JSONConverter.class,getterMethod,setterMethod);
      if (converterAnno != null) {
        TypeConverter typeConverter=null;
        if (converterAnno.name().length() == 0) {
          typeConverter=typeConverterRepository.getConverterByType(converterAnno.type());
        }
 else {
          typeConverter=typeConverterRepository.getConverterById(converterAnno.name());
        }
        propertyInfo.setTypeConverter(typeConverter);
      }
    }
    propertyInfos.put(jsonPropertyName,propertyInfo);
  }
  return new JSONClassInfo(cls,propertyInfos);
}","public JSONClassInfo createClassInfo(Class<?> cls){
  Map<String,JavaObjectPropertyInfo> javaNameToInfo=new HashMap<String,JavaObjectPropertyInfo>();
  for (  Method m : cls.getMethods()) {
    String name=m.getName();
    if ((m.getModifiers() & Modifier.PUBLIC) == 0 || name.equals(""String_Node_Str"")) {
      continue;
    }
    if (name.startsWith(SETTER_PREFIX) && m.getParameterTypes().length == 1) {
      String javaPropertyName=propertyName(name,SETTER_PREFIX.length());
      JavaObjectPropertyInfo pair=javaNameToInfo.get(javaPropertyName);
      if (pair != null) {
        Method existing=pair.getSetterMethod();
        if (existing == null || isOveriding(m.getDeclaringClass(),existing.getDeclaringClass())) {
          pair.setSetterMethod(m);
        }
      }
 else {
        pair=new JavaObjectPropertyInfo(javaPropertyName,null,m);
        javaNameToInfo.put(javaPropertyName,pair);
      }
      Class<?>[] parameterTypes;
      Class<?> paramType;
      if ((parameterTypes=m.getParameterTypes()).length == 1 && (paramType=parameterTypes[0]).isArray()) {
        pair.setTypeHint(paramType.getComponentType());
      }
    }
 else     if (m.getParameterTypes().length == 0 && !m.getReturnType().equals(void.class)) {
      if (name.startsWith(GETTER_PREFIX)) {
        String javaPropertyName=propertyName(name,GETTER_PREFIX.length());
        JavaObjectPropertyInfo pair=javaNameToInfo.get(javaPropertyName);
        if (pair != null) {
          Method existing=pair.getGetterMethod();
          if (existing == null || isOveriding(m.getDeclaringClass(),existing.getDeclaringClass())) {
            pair.setGetterMethod(m);
          }
        }
 else {
          javaNameToInfo.put(javaPropertyName,new JavaObjectPropertyInfo(javaPropertyName,m,null));
        }
      }
 else       if (name.startsWith(ISSER_PREFIX)) {
        String javaPropertyName=propertyName(name,ISSER_PREFIX.length());
        JavaObjectPropertyInfo pair=javaNameToInfo.get(javaPropertyName);
        if (pair != null) {
          pair.setGetterMethod(m);
        }
 else {
          javaNameToInfo.put(javaPropertyName,new JavaObjectPropertyInfo(javaPropertyName,m,null));
        }
      }
    }
 else     if (name.startsWith(ADDER_PREFIX) && m.getParameterTypes().length == 1) {
      String javaPropertyName=propertyName(name,ADDER_PREFIX.length());
      JavaObjectPropertyInfo pair=javaNameToInfo.get(javaPropertyName);
      if (pair != null) {
        pair.setAdderMethod(m);
      }
 else {
        JavaObjectPropertyInfo newInfo=new JavaObjectPropertyInfo(javaPropertyName,null,null);
        newInfo.setAdderMethod(m);
        javaNameToInfo.put(javaPropertyName,newInfo);
      }
    }
  }
  HashMap<String,JavaObjectPropertyInfo> propertyInfos=new HashMap<String,JavaObjectPropertyInfo>(javaNameToInfo.size());
  for (  Map.Entry<String,JavaObjectPropertyInfo> e : javaNameToInfo.entrySet()) {
    String jsonPropertyName=e.getKey();
    JavaObjectPropertyInfo propertyInfo=e.getValue();
    Method getterMethod=propertyInfo.getGetterMethod();
    Method setterMethod=propertyInfo.getSetterMethod();
    JSONProperty jsonProperty=getAnnotation(JSONProperty.class,getterMethod,setterMethod);
    if (jsonProperty != null) {
      if (jsonProperty.value().length() > 0) {
        jsonPropertyName=jsonProperty.value();
      }
      propertyInfo.setIgnore(jsonProperty.ignore());
      propertyInfo.setIgnoreIfNull(jsonProperty.ignoreIfNull());
      propertyInfo.setReadOnly(jsonProperty.readOnly());
    }
    propertyInfo.setJsonName(jsonPropertyName);
    JSONReference refAnno=getAnnotation(JSONReference.class,getterMethod,setterMethod);
    if (refAnno != null) {
      propertyInfo.setLinkIdProperty(refAnno.idProperty());
    }
    JSONTypeHint typeHintAnno=getAnnotation(JSONTypeHint.class,getterMethod,setterMethod);
    Class<?>[] parameterTypes;
    Class paramType;
    if (typeHintAnno != null) {
      propertyInfo.setTypeHint(typeHintAnno.value());
    }
    if (typeConverterRepository != null) {
      JSONConverter converterAnno=getAnnotation(JSONConverter.class,getterMethod,setterMethod);
      if (converterAnno != null) {
        TypeConverter typeConverter=null;
        if (converterAnno.name().length() == 0) {
          typeConverter=typeConverterRepository.getConverterByType(converterAnno.type());
        }
 else {
          typeConverter=typeConverterRepository.getConverterById(converterAnno.name());
        }
        propertyInfo.setTypeConverter(typeConverter);
      }
    }
    propertyInfos.put(jsonPropertyName,propertyInfo);
  }
  return new JSONClassInfo(cls,propertyInfos);
}",0.959704499664204
44158,"private Object convertValueTo(Object value,Class targetClass){
  if (targetClass == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (value == null) {
    return null;
  }
  if (targetClass.equals(Object.class)) {
    return value;
  }
  Object convertedValue=null;
  if (targetClass.isAssignableFrom(value.getClass())) {
    convertedValue=value;
  }
 else   if (value instanceof String && Enum.class.isAssignableFrom(targetClass)) {
    convertedValue=Enum.valueOf((Class<Enum>)targetClass,(String)value);
  }
 else {
    TypeConverter typeConverter=null;
    if (typeConvertersByClass != null) {
      typeConverter=typeConvertersByClass.get(targetClass);
    }
    if (typeConverter != null) {
      convertedValue=typeConverter.fromJSON(value);
    }
 else     if (List.class.isInstance(value)) {
      List list=(List)value;
      if (targetClass.isArray()) {
        convertedValue=Array.newInstance(targetClass.getComponentType(),list.size());
        int idx=0;
        for (        Object o : list) {
          Array.set(convertedValue,idx++,o);
        }
      }
 else       if (targetClass.isAssignableFrom(HashSet.class)) {
        convertedValue=new HashSet(list);
      }
 else       if (targetClass.isAssignableFrom(LinkedHashSet.class)) {
        convertedValue=new LinkedHashSet(list);
      }
 else       if (targetClass.isAssignableFrom(TreeSet.class)) {
        convertedValue=new TreeSet(list);
      }
    }
    if (convertedValue == null) {
      convertedValue=ConvertUtils.convert(value.toString(),targetClass);
    }
  }
  return convertedValue;
}","private Object convertValueTo(Object value,Class targetClass){
  if (targetClass == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (value == null) {
    return null;
  }
  if (targetClass.equals(Object.class)) {
    return value;
  }
  Object convertedValue=null;
  if (targetClass.isAssignableFrom(value.getClass())) {
    convertedValue=value;
  }
 else   if (value instanceof String && Enum.class.isAssignableFrom(targetClass)) {
    convertedValue=Enum.valueOf((Class<Enum>)targetClass,(String)value);
  }
 else {
    TypeConverter typeConverter=null;
    if (typeConvertersByClass != null) {
      typeConverter=typeConvertersByClass.get(targetClass);
    }
    if (typeConverter != null) {
      convertedValue=typeConverter.fromJSON(value);
    }
 else     if (List.class.isInstance(value)) {
      List list=(List)value;
      if (targetClass.isArray()) {
        convertedValue=Array.newInstance(targetClass.getComponentType(),list.size());
        int idx=0;
        for (        Object o : list) {
          Array.set(convertedValue,idx++,o);
        }
      }
 else       if (targetClass.isAssignableFrom(HashSet.class)) {
        convertedValue=new HashSet(list);
      }
 else       if (targetClass.isAssignableFrom(LinkedHashSet.class)) {
        convertedValue=new LinkedHashSet(list);
      }
 else       if (targetClass.isAssignableFrom(TreeSet.class)) {
        convertedValue=new TreeSet(list);
      }
    }
    if (convertedValue == null) {
      convertedValue=ConvertUtils.convert(value,targetClass);
    }
  }
  return convertedValue;
}",0.996552804763397
44159,"private void parseObjectInto(ParseContext cx,JSONTokenizer tokenizer) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
  boolean containerIsMap=Map.class.isAssignableFrom(cx.target.getClass());
  boolean containerIsDynAttrs=cx.target instanceof DynamicProperties;
  boolean first=true;
  while (true) {
    Token key;
    if (first) {
      key=tokenizer.expectNext(TokenType.STRING,TokenType.BRACE_CLOSE);
    }
 else {
      key=tokenizer.expectNext(TokenType.COMMA,TokenType.BRACE_CLOSE);
    }
    if (key.type() == TokenType.BRACE_CLOSE) {
      break;
    }
    if (!first) {
      key=tokenizer.expectNext(TokenType.STRING);
    }
    String jsonName=(String)key.value();
    if (jsonName.length() == 0) {
      throw new JSONParseException(""String_Node_Str"");
    }
    String name=null;
    tokenizer.expectNext(TokenType.COLON);
    Token valueToken=tokenizer.next();
    TokenType valueType=valueToken.type();
    boolean isProperty=false;
    boolean isIgnoredOnParse=false;
    JSONClassInfo classInfo=null;
    JSONPropertyInfo propertyInfo=null;
    if (!containerIsMap) {
      classInfo=TypeAnalyzer.getClassInfo(objectSupport,cx.target.getClass());
      propertyInfo=classInfo.getPropertyInfo(jsonName);
      if (propertyInfo != null) {
        name=propertyInfo.getJavaPropertyName();
      }
      isProperty=false;
      isIgnoredOnParse=false;
      if (name != null) {
        boolean writeable=propertyInfo.isWriteable();
        isIgnoredOnParse=(!writeable && propertyInfo.isReadOnly());
        if (propertyInfo.isLinkedProperty()) {
          isIgnoredOnParse=true;
        }
        isProperty=writeable || isIgnoredOnParse;
      }
    }
    TypeConverter typeConverter=propertyInfo == null ? null : propertyInfo.getTypeConverter();
    if (!(isProperty || containerIsMap || containerIsDynAttrs|| (propertyInfo != null && propertyInfo.canAdd()))) {
      throw new JSONParseException(""String_Node_Str"" + jsonName + ""String_Node_Str""+ cx.target.getClass());
    }
    if (name == null) {
      name=jsonName;
    }
    Class typeHint=getTypeHint(cx,cx.getParsePathInfo(jsonName),tokenizer,name,isProperty,valueType.isPrimitive());
    Object value;
    if (valueType.isPrimitive()) {
      value=valueToken.value();
    }
 else {
      Object newTarget=null;
      if (valueType == TokenType.BRACE_OPEN) {
        Class memberType=null;
        if (isProperty) {
          JSONPropertyInfo propertyInfo2=TypeAnalyzer.getClassInfo(objectSupport,cx.target.getClass()).getPropertyInfo(name);
          if (propertyInfo2 != null) {
            memberType=propertyInfo2.getTypeHint();
          }
        }
        newTarget=createNewTargetInstance(typeHint,true);
        parseObjectInto(cx.push(newTarget,memberType,""String_Node_Str"" + name),tokenizer);
      }
 else       if (valueType == TokenType.BRACKET_OPEN) {
        if (isProperty || containerIsMap || containerIsDynAttrs) {
          Class arrayTypeHint=typeHint;
          if (isProperty) {
            if (typeConverter != null && !List.class.isAssignableFrom(arrayTypeHint)) {
              arrayTypeHint=List.class;
            }
          }
          newTarget=createNewTargetInstance(arrayTypeHint,false);
          JSONPropertyInfo propertyInfo2=TypeAnalyzer.getClassInfo(objectSupport,cx.target.getClass()).getPropertyInfo(name);
          Class memberType=null;
          if (propertyInfo2 != null) {
            memberType=propertyInfo2.getTypeHint();
          }
          parseArrayInto(cx.push(newTarget,memberType,""String_Node_Str"" + name),tokenizer);
        }
 else {
          if (propertyInfo.canAdd()) {
            List temp=new ArrayList();
            parseArrayInto(cx.push(temp,propertyInfo.getAdderType(),""String_Node_Str"" + name),tokenizer);
            for (            Object o : temp) {
              propertyInfo.add(cx.target,o);
            }
            continue;
          }
 else {
            throw new JSONParseException(""String_Node_Str"" + name + ""String_Node_Str""+ cx.target);
          }
        }
      }
 else {
        throw new JSONParseException(""String_Node_Str"" + valueToken);
      }
      value=newTarget;
    }
    if (typeConverter != null && !isIgnoredOnParse) {
      value=typeConverter.fromJSON(value);
    }
    if (typeHint == null && propertyInfo != null) {
      typeHint=propertyInfo.getTypeOfProperty();
    }
    if (typeHint != null && !isIgnoredOnParse) {
      value=convertValueTo(value,typeHint);
    }
    if (isProperty) {
      if (!isIgnoredOnParse) {
        propertyInfo.setProperty(cx.target,value);
      }
    }
 else     if (containerIsMap) {
      ((Map)cx.target).put(name,value);
    }
 else     if (containerIsDynAttrs) {
      ((DynamicProperties)cx.target).setProperty(name,value);
    }
 else {
      throw new JSONParseException(""String_Node_Str"" + name + ""String_Node_Str""+ cx.target);
    }
    first=false;
  }
}","private void parseObjectInto(ParseContext cx,JSONTokenizer tokenizer) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
  boolean containerIsMap=Map.class.isAssignableFrom(cx.target.getClass());
  boolean containerIsDynAttrs=cx.target instanceof DynamicProperties;
  boolean first=true;
  while (true) {
    Token key;
    if (first) {
      key=tokenizer.expectNext(TokenType.STRING,TokenType.BRACE_CLOSE);
    }
 else {
      key=tokenizer.expectNext(TokenType.COMMA,TokenType.BRACE_CLOSE);
    }
    if (key.type() == TokenType.BRACE_CLOSE) {
      break;
    }
    if (!first) {
      key=tokenizer.expectNext(TokenType.STRING);
    }
    String jsonName=(String)key.value();
    if (jsonName.length() == 0) {
      throw new JSONParseException(""String_Node_Str"");
    }
    String name=null;
    tokenizer.expectNext(TokenType.COLON);
    Token valueToken=tokenizer.next();
    TokenType valueType=valueToken.type();
    boolean isProperty=false;
    boolean isIgnoredOnParse=false;
    JSONClassInfo classInfo=null;
    JSONPropertyInfo propertyInfo=null;
    if (!containerIsMap) {
      classInfo=TypeAnalyzer.getClassInfo(objectSupport,cx.target.getClass());
      propertyInfo=classInfo.getPropertyInfo(jsonName);
      if (propertyInfo != null) {
        name=propertyInfo.getJavaPropertyName();
      }
      isProperty=false;
      isIgnoredOnParse=false;
      if (name != null) {
        boolean writeable=propertyInfo.isWriteable();
        isIgnoredOnParse=(!writeable && propertyInfo.isReadOnly());
        if (propertyInfo.isLinkedProperty()) {
          isIgnoredOnParse=true;
        }
        isProperty=writeable || isIgnoredOnParse;
      }
    }
    TypeConverter typeConverter=propertyInfo == null ? null : propertyInfo.getTypeConverter();
    if (!(isProperty || containerIsMap || containerIsDynAttrs|| (propertyInfo != null && propertyInfo.canAdd()))) {
      throw new JSONParseException(""String_Node_Str"" + jsonName + ""String_Node_Str""+ cx.target.getClass());
    }
    if (name == null) {
      name=jsonName;
    }
    Class typeHint=getTypeHint(cx,cx.getParsePathInfo(jsonName),tokenizer,jsonName,isProperty,valueType.isPrimitive());
    Object value;
    if (valueType.isPrimitive()) {
      value=valueToken.value();
    }
 else {
      Object newTarget=null;
      if (valueType == TokenType.BRACE_OPEN) {
        Class memberType=null;
        if (isProperty) {
          JSONPropertyInfo propertyInfo2=TypeAnalyzer.getClassInfo(objectSupport,cx.target.getClass()).getPropertyInfo(jsonName);
          if (propertyInfo2 != null) {
            memberType=propertyInfo2.getTypeHint();
          }
        }
        newTarget=createNewTargetInstance(typeHint,true);
        parseObjectInto(cx.push(newTarget,memberType,""String_Node_Str"" + name),tokenizer);
      }
 else       if (valueType == TokenType.BRACKET_OPEN) {
        if (isProperty || containerIsMap || containerIsDynAttrs) {
          Class arrayTypeHint=typeHint;
          if (isProperty) {
            if (typeConverter != null && !List.class.isAssignableFrom(arrayTypeHint)) {
              arrayTypeHint=List.class;
            }
          }
          newTarget=createNewTargetInstance(arrayTypeHint,false);
          JSONPropertyInfo propertyInfo2=TypeAnalyzer.getClassInfo(objectSupport,cx.target.getClass()).getPropertyInfo(jsonName);
          Class memberType=null;
          if (propertyInfo2 != null) {
            memberType=propertyInfo2.getTypeHint();
          }
          parseArrayInto(cx.push(newTarget,memberType,""String_Node_Str"" + name),tokenizer);
        }
 else {
          if (propertyInfo.canAdd()) {
            List temp=new ArrayList();
            parseArrayInto(cx.push(temp,propertyInfo.getAdderType(),""String_Node_Str"" + name),tokenizer);
            for (            Object o : temp) {
              propertyInfo.add(cx.target,o);
            }
            continue;
          }
 else {
            throw new JSONParseException(""String_Node_Str"" + name + ""String_Node_Str""+ cx.target);
          }
        }
      }
 else {
        throw new JSONParseException(""String_Node_Str"" + valueToken);
      }
      value=newTarget;
    }
    if (typeConverter != null && !isIgnoredOnParse) {
      value=typeConverter.fromJSON(value);
    }
    if (typeHint == null && propertyInfo != null) {
      typeHint=propertyInfo.getTypeOfProperty();
    }
    if (typeHint != null && !isIgnoredOnParse) {
      value=convertValueTo(value,typeHint);
    }
    if (isProperty) {
      if (!isIgnoredOnParse) {
        propertyInfo.setProperty(cx.target,value);
      }
    }
 else     if (containerIsMap) {
      ((Map)cx.target).put(name,value);
    }
 else     if (containerIsDynAttrs) {
      ((DynamicProperties)cx.target).setProperty(name,value);
    }
 else {
      throw new JSONParseException(""String_Node_Str"" + name + ""String_Node_Str""+ cx.target);
    }
    first=false;
  }
}",0.9981821854170876
44160,"/** 
 * Dumps the given object as JSON representation followed by a separator into the given StreamBuilder.
 * @param out StreamBuilder
 * @param o object
 * @param separator separator character to append after the object or<code>'\0'</code> to append no separator.
 */
private void dumpObject(JSONCharacterSink out,Object o,char separator,Collection<String> ignoredProps){
  if (o == null) {
    out.append(""String_Node_Str"");
  }
 else {
    Class oClass=o.getClass();
    JSONifier jsonifier;
    TypeConverter typeConverterFromClass=null;
    if (oClass.isPrimitive()) {
      out.append(o);
    }
 else     if (Number.class.isAssignableFrom(oClass) || oClass.equals(Boolean.class) || oClass.equals(Character.class)) {
      out.append(o);
    }
 else     if (o instanceof String) {
      quote(out,(String)o);
    }
 else     if (o instanceof Collection) {
      out.append('[');
      for (Iterator i=((Collection)o).iterator(); i.hasNext(); ) {
        dumpObject(out,i.next(),i.hasNext() ? ',' : '\0',ignoredProps);
      }
      out.append(']');
    }
 else     if (o.getClass().isArray()) {
      out.append('[');
      int len=Array.getLength(o);
      for (int i=0; i < len; i++) {
        dumpObject(out,Array.get(o,i),((i < (len - 1)) ? ',' : '\0'),ignoredProps);
      }
      out.append(']');
    }
 else     if (o instanceof Map) {
      out.append('{');
      Map m=(Map)o;
      for (Iterator i=m.keySet().iterator(); i.hasNext(); ) {
        Object key=i.next();
        dumpObject(out,key.toString(),'\0',ignoredProps);
        out.append(':');
        dumpObject(out,m.get(key),i.hasNext() ? ',' : '\0',ignoredProps);
      }
      out.append('}');
    }
 else     if ((jsonifier=getJSONifierForClass(oClass)) != null) {
      if (jsonifier instanceof SinkAwareJSONifier) {
        ((SinkAwareJSONifier)jsonifier).writeToSink(out,o);
      }
 else {
        out.append(jsonifier.toJSON(o));
      }
    }
 else     if (o instanceof JSONable) {
      out.append(((JSONable)o).toJSON());
    }
 else     if (o instanceof Class) {
      quote(out,((Class)o).getName());
    }
 else     if (o instanceof Enum) {
      quote(out,((Enum)o).name());
    }
 else     if (typeConvertersByClass != null && (typeConverterFromClass=typeConvertersByClass.get(o.getClass())) != null) {
      Object value=typeConverterFromClass.toJSON(o);
      dumpObject(out,value,'\0',ignoredProps);
    }
 else {
      BeanInfo info;
      try {
        info=Introspector.getBeanInfo(o.getClass());
      }
 catch (      IntrospectionException e) {
        throw ExceptionWrapper.wrap(e);
      }
      out.append('{');
      boolean first=true;
      PropertyDescriptor[] pds=info.getPropertyDescriptors();
      for (int cp=0; cp < pds.length; cp++) {
        try {
          PropertyDescriptor pd=pds[cp];
          Method method=pd.getReadMethod();
          Method writeMethod=pd.getWriteMethod();
          if (method != null) {
            String name=pd.getName();
            boolean ignore=(ignoredProps != null && ignoredProps.contains(name));
            if (!name.equals(""String_Node_Str"") && !ignore) {
              JSONProperty jsonProperty=method.getAnnotation(JSONProperty.class);
              if (jsonProperty == null && writeMethod != null) {
                jsonProperty=writeMethod.getAnnotation(JSONProperty.class);
              }
              if (jsonProperty != null) {
                String nameFromAnnotation=jsonProperty.value();
                if (nameFromAnnotation.length() > 0) {
                  name=jsonProperty.value();
                }
                ignore=jsonProperty.ignore();
              }
              Object value=null;
              if (!ignore) {
                value=method.invoke(o,(Object[])null);
              }
              if (value == null && jsonProperty.ignoreIfNull()) {
                ignore=true;
              }
              if (!ignore) {
                if (typeConverterCache != null) {
                  TypeConverter typeConverter=typeConverterCache.getTypeConverter(o,pd.getName());
                  if (typeConverter != null) {
                    value=typeConverter.toJSON(value);
                  }
                }
                if (!first) {
                  out.append(',');
                }
                quote(out,name);
                out.append(':');
                dumpObject(out,value,'\0',ignoredProps);
                first=false;
              }
            }
          }
        }
 catch (        IllegalAccessException e) {
          throw ExceptionWrapper.wrap(e);
        }
catch (        InvocationTargetException e) {
          throw ExceptionWrapper.wrap(e);
        }
      }
      if (o instanceof DynamicProperties) {
        DynamicProperties dynAttrs=(DynamicProperties)o;
        for (        String name : dynAttrs.propertyNames()) {
          if (!first) {
            out.append(',');
          }
          first=false;
          quote(out,name);
          out.append(':');
          dumpObject(out,dynAttrs.getProperty(name),'\0',ignoredProps);
        }
      }
      out.append('}');
    }
  }
  if (separator != '\0') {
    out.append(separator);
  }
}","/** 
 * Dumps the given object as JSON representation followed by a separator into the given StreamBuilder.
 * @param out StreamBuilder
 * @param o object
 * @param separator separator character to append after the object or<code>'\0'</code> to append no separator.
 */
private void dumpObject(JSONCharacterSink out,Object o,char separator,Collection<String> ignoredProps){
  if (o == null) {
    out.append(""String_Node_Str"");
  }
 else {
    Class oClass=o.getClass();
    JSONifier jsonifier;
    TypeConverter typeConverterFromClass=null;
    if (oClass.isPrimitive()) {
      out.append(o);
    }
 else     if (Number.class.isAssignableFrom(oClass) || oClass.equals(Boolean.class) || oClass.equals(Character.class)) {
      out.append(o);
    }
 else     if (o instanceof String) {
      quote(out,(String)o);
    }
 else     if (o instanceof Collection) {
      out.append('[');
      for (Iterator i=((Collection)o).iterator(); i.hasNext(); ) {
        dumpObject(out,i.next(),i.hasNext() ? ',' : '\0',ignoredProps);
      }
      out.append(']');
    }
 else     if (o.getClass().isArray()) {
      out.append('[');
      int len=Array.getLength(o);
      for (int i=0; i < len; i++) {
        dumpObject(out,Array.get(o,i),((i < (len - 1)) ? ',' : '\0'),ignoredProps);
      }
      out.append(']');
    }
 else     if (o instanceof Map) {
      out.append('{');
      Map m=(Map)o;
      for (Iterator i=m.keySet().iterator(); i.hasNext(); ) {
        Object key=i.next();
        dumpObject(out,key.toString(),'\0',ignoredProps);
        out.append(':');
        dumpObject(out,m.get(key),i.hasNext() ? ',' : '\0',ignoredProps);
      }
      out.append('}');
    }
 else     if ((jsonifier=getJSONifierForClass(oClass)) != null) {
      if (jsonifier instanceof SinkAwareJSONifier) {
        ((SinkAwareJSONifier)jsonifier).writeToSink(out,o);
      }
 else {
        out.append(jsonifier.toJSON(o));
      }
    }
 else     if (o instanceof JSONable) {
      out.append(((JSONable)o).toJSON());
    }
 else     if (o instanceof Class) {
      quote(out,((Class)o).getName());
    }
 else     if (o instanceof Enum) {
      quote(out,((Enum)o).name());
    }
 else     if (typeConvertersByClass != null && (typeConverterFromClass=typeConvertersByClass.get(o.getClass())) != null) {
      Object value=typeConverterFromClass.toJSON(o);
      dumpObject(out,value,'\0',ignoredProps);
    }
 else {
      BeanInfo info;
      try {
        info=Introspector.getBeanInfo(o.getClass());
      }
 catch (      IntrospectionException e) {
        throw ExceptionWrapper.wrap(e);
      }
      out.append('{');
      boolean first=true;
      PropertyDescriptor[] pds=info.getPropertyDescriptors();
      for (int cp=0; cp < pds.length; cp++) {
        try {
          PropertyDescriptor pd=pds[cp];
          Method method=pd.getReadMethod();
          Method writeMethod=pd.getWriteMethod();
          if (method != null) {
            String name=pd.getName();
            boolean ignore=(ignoredProps != null && ignoredProps.contains(name));
            if (!name.equals(""String_Node_Str"") && !ignore) {
              JSONProperty jsonProperty=method.getAnnotation(JSONProperty.class);
              if (jsonProperty == null && writeMethod != null) {
                jsonProperty=writeMethod.getAnnotation(JSONProperty.class);
              }
              if (jsonProperty != null) {
                String nameFromAnnotation=jsonProperty.value();
                if (nameFromAnnotation.length() > 0) {
                  name=jsonProperty.value();
                }
                ignore=jsonProperty.ignore();
              }
              Object value=null;
              if (!ignore) {
                value=method.invoke(o,(Object[])null);
              }
              if (value == null && jsonProperty != null && jsonProperty.ignoreIfNull()) {
                ignore=true;
              }
              if (!ignore) {
                if (typeConverterCache != null) {
                  TypeConverter typeConverter=typeConverterCache.getTypeConverter(o,pd.getName());
                  if (typeConverter != null) {
                    value=typeConverter.toJSON(value);
                  }
                }
                if (!first) {
                  out.append(',');
                }
                quote(out,name);
                out.append(':');
                dumpObject(out,value,'\0',ignoredProps);
                first=false;
              }
            }
          }
        }
 catch (        IllegalAccessException e) {
          throw ExceptionWrapper.wrap(e);
        }
catch (        InvocationTargetException e) {
          throw ExceptionWrapper.wrap(e);
        }
      }
      if (o instanceof DynamicProperties) {
        DynamicProperties dynAttrs=(DynamicProperties)o;
        for (        String name : dynAttrs.propertyNames()) {
          if (!first) {
            out.append(',');
          }
          first=false;
          quote(out,name);
          out.append(':');
          dumpObject(out,dynAttrs.getProperty(name),'\0',ignoredProps);
        }
      }
      out.append('}');
    }
  }
  if (separator != '\0') {
    out.append(separator);
  }
}",0.9976869699306092
44161,"/** 
 * Dumps the given object as JSON representation followed by a separator into the given StreamBuilder.
 * @param out StreamBuilder
 * @param o object
 * @param separator separator character to append after the object or<code>'\0'</code> to append no separator.
 */
private void dumpObject(JSONCharacterSink out,Object o,char separator,Collection<String> ignoredProps){
  if (o == null) {
    out.append(""String_Node_Str"");
  }
 else {
    Class oClass=o.getClass();
    JSONifier jsonifier;
    TypeConverter typeConverterFromClass=null;
    if (oClass.isPrimitive()) {
      out.append(o);
    }
 else     if (Number.class.isAssignableFrom(oClass) || oClass.equals(Boolean.class) || oClass.equals(Character.class)) {
      out.append(o);
    }
 else     if (o instanceof String) {
      quote(out,(String)o);
    }
 else     if (o instanceof Collection) {
      out.append('[');
      for (Iterator i=((Collection)o).iterator(); i.hasNext(); ) {
        dumpObject(out,i.next(),i.hasNext() ? ',' : '\0',ignoredProps);
      }
      out.append(']');
    }
 else     if (o.getClass().isArray()) {
      out.append('[');
      int len=Array.getLength(o);
      for (int i=0; i < len; i++) {
        dumpObject(out,Array.get(o,i),((i < (len - 1)) ? ',' : '\0'),ignoredProps);
      }
      out.append(']');
    }
 else     if (o instanceof Map) {
      out.append('{');
      Map m=(Map)o;
      for (Iterator i=m.keySet().iterator(); i.hasNext(); ) {
        Object key=i.next();
        dumpObject(out,key.toString(),'\0',ignoredProps);
        out.append(':');
        dumpObject(out,m.get(key),i.hasNext() ? ',' : '\0',ignoredProps);
      }
      out.append('}');
    }
 else     if ((jsonifier=getJSONifierForClass(oClass)) != null) {
      if (jsonifier instanceof SinkAwareJSONifier) {
        ((SinkAwareJSONifier)jsonifier).writeToSink(out,o);
      }
 else {
        out.append(jsonifier.toJSON(o));
      }
    }
 else     if (o instanceof JSONable) {
      out.append(((JSONable)o).toJSON());
    }
 else     if (o instanceof Class) {
      quote(out,((Class)o).getName());
    }
 else     if (o instanceof Enum) {
      quote(out,((Enum)o).name());
    }
 else     if (typeConvertersByClass != null && (typeConverterFromClass=typeConvertersByClass.get(o.getClass())) != null) {
      Object value=typeConverterFromClass.toJSON(o);
      dumpObject(out,value,'\0',ignoredProps);
    }
 else {
      BeanInfo info;
      try {
        info=Introspector.getBeanInfo(o.getClass());
      }
 catch (      IntrospectionException e) {
        throw ExceptionWrapper.wrap(e);
      }
      out.append('{');
      boolean first=true;
      PropertyDescriptor[] pds=info.getPropertyDescriptors();
      for (int cp=0; cp < pds.length; cp++) {
        try {
          PropertyDescriptor pd=pds[cp];
          Method method=pd.getReadMethod();
          Method writeMethod=pd.getWriteMethod();
          if (method != null) {
            Object value=method.invoke(o,(Object[])null);
            if (typeConverterCache != null) {
              TypeConverter typeConverter=typeConverterCache.getTypeConverter(o,pd.getName());
              if (typeConverter != null) {
                value=typeConverter.toJSON(value);
              }
            }
            String name=pd.getName();
            boolean ignore=(ignoredProps != null && ignoredProps.contains(name));
            if (!name.equals(""String_Node_Str"") && !ignore) {
              JSONProperty jsonProperty=method.getAnnotation(JSONProperty.class);
              if (jsonProperty == null && writeMethod != null) {
                jsonProperty=writeMethod.getAnnotation(JSONProperty.class);
              }
              if (jsonProperty != null) {
                String nameFromAnnotation=jsonProperty.value();
                if (nameFromAnnotation.length() > 0) {
                  name=jsonProperty.value();
                }
                ignore=jsonProperty.ignore() || (value == null && jsonProperty.ignoreIfNull());
              }
              if (!ignore) {
                if (!first) {
                  out.append(',');
                }
                quote(out,name);
                out.append(':');
                dumpObject(out,value,'\0',ignoredProps);
                first=false;
              }
            }
          }
        }
 catch (        IllegalAccessException e) {
          throw ExceptionWrapper.wrap(e);
        }
catch (        InvocationTargetException e) {
          throw ExceptionWrapper.wrap(e);
        }
      }
      if (o instanceof DynamicProperties) {
        DynamicProperties dynAttrs=(DynamicProperties)o;
        for (        String name : dynAttrs.propertyNames()) {
          if (!first) {
            out.append(',');
          }
          first=false;
          quote(out,name);
          out.append(':');
          dumpObject(out,dynAttrs.getProperty(name),'\0',ignoredProps);
        }
      }
      out.append('}');
    }
  }
  if (separator != '\0') {
    out.append(separator);
  }
}","/** 
 * Dumps the given object as JSON representation followed by a separator into the given StreamBuilder.
 * @param out StreamBuilder
 * @param o object
 * @param separator separator character to append after the object or<code>'\0'</code> to append no separator.
 */
private void dumpObject(JSONCharacterSink out,Object o,char separator,Collection<String> ignoredProps){
  if (o == null) {
    out.append(""String_Node_Str"");
  }
 else {
    Class oClass=o.getClass();
    JSONifier jsonifier;
    TypeConverter typeConverterFromClass=null;
    if (oClass.isPrimitive()) {
      out.append(o);
    }
 else     if (Number.class.isAssignableFrom(oClass) || oClass.equals(Boolean.class) || oClass.equals(Character.class)) {
      out.append(o);
    }
 else     if (o instanceof String) {
      quote(out,(String)o);
    }
 else     if (o instanceof Collection) {
      out.append('[');
      for (Iterator i=((Collection)o).iterator(); i.hasNext(); ) {
        dumpObject(out,i.next(),i.hasNext() ? ',' : '\0',ignoredProps);
      }
      out.append(']');
    }
 else     if (o.getClass().isArray()) {
      out.append('[');
      int len=Array.getLength(o);
      for (int i=0; i < len; i++) {
        dumpObject(out,Array.get(o,i),((i < (len - 1)) ? ',' : '\0'),ignoredProps);
      }
      out.append(']');
    }
 else     if (o instanceof Map) {
      out.append('{');
      Map m=(Map)o;
      for (Iterator i=m.keySet().iterator(); i.hasNext(); ) {
        Object key=i.next();
        dumpObject(out,key.toString(),'\0',ignoredProps);
        out.append(':');
        dumpObject(out,m.get(key),i.hasNext() ? ',' : '\0',ignoredProps);
      }
      out.append('}');
    }
 else     if ((jsonifier=getJSONifierForClass(oClass)) != null) {
      if (jsonifier instanceof SinkAwareJSONifier) {
        ((SinkAwareJSONifier)jsonifier).writeToSink(out,o);
      }
 else {
        out.append(jsonifier.toJSON(o));
      }
    }
 else     if (o instanceof JSONable) {
      out.append(((JSONable)o).toJSON());
    }
 else     if (o instanceof Class) {
      quote(out,((Class)o).getName());
    }
 else     if (o instanceof Enum) {
      quote(out,((Enum)o).name());
    }
 else     if (typeConvertersByClass != null && (typeConverterFromClass=typeConvertersByClass.get(o.getClass())) != null) {
      Object value=typeConverterFromClass.toJSON(o);
      dumpObject(out,value,'\0',ignoredProps);
    }
 else {
      BeanInfo info;
      try {
        info=Introspector.getBeanInfo(o.getClass());
      }
 catch (      IntrospectionException e) {
        throw ExceptionWrapper.wrap(e);
      }
      out.append('{');
      boolean first=true;
      PropertyDescriptor[] pds=info.getPropertyDescriptors();
      for (int cp=0; cp < pds.length; cp++) {
        try {
          PropertyDescriptor pd=pds[cp];
          Method method=pd.getReadMethod();
          Method writeMethod=pd.getWriteMethod();
          if (method != null) {
            String name=pd.getName();
            boolean ignore=(ignoredProps != null && ignoredProps.contains(name));
            if (!name.equals(""String_Node_Str"") && !ignore) {
              JSONProperty jsonProperty=method.getAnnotation(JSONProperty.class);
              if (jsonProperty == null && writeMethod != null) {
                jsonProperty=writeMethod.getAnnotation(JSONProperty.class);
              }
              if (jsonProperty != null) {
                String nameFromAnnotation=jsonProperty.value();
                if (nameFromAnnotation.length() > 0) {
                  name=jsonProperty.value();
                }
                ignore=jsonProperty.ignore();
              }
              Object value=null;
              if (!ignore) {
                value=method.invoke(o,(Object[])null);
              }
              if (value == null && jsonProperty.ignoreIfNull()) {
                ignore=true;
              }
              if (!ignore) {
                if (typeConverterCache != null) {
                  TypeConverter typeConverter=typeConverterCache.getTypeConverter(o,pd.getName());
                  if (typeConverter != null) {
                    value=typeConverter.toJSON(value);
                  }
                }
                if (!first) {
                  out.append(',');
                }
                quote(out,name);
                out.append(':');
                dumpObject(out,value,'\0',ignoredProps);
                first=false;
              }
            }
          }
        }
 catch (        IllegalAccessException e) {
          throw ExceptionWrapper.wrap(e);
        }
catch (        InvocationTargetException e) {
          throw ExceptionWrapper.wrap(e);
        }
      }
      if (o instanceof DynamicProperties) {
        DynamicProperties dynAttrs=(DynamicProperties)o;
        for (        String name : dynAttrs.propertyNames()) {
          if (!first) {
            out.append(',');
          }
          first=false;
          quote(out,name);
          out.append(':');
          dumpObject(out,dynAttrs.getProperty(name),'\0',ignoredProps);
        }
      }
      out.append('}');
    }
  }
  if (separator != '\0') {
    out.append(separator);
  }
}",0.9203296703296704
44162,"/** 
 * Dumps the given object as JSON representation followed by a separator into the given StringBuilder.
 * @param out StringBuilder
 * @param o object
 * @param separator separator character to append after the object or<code>'\0'</code> to append no separator.
 */
private void dumpObject(StringBuilder out,Object o,char separator,List<String> ignoredProps){
  try {
    if (o == null) {
      out.append(""String_Node_Str"");
    }
 else {
      Class oClass=o.getClass();
      JSONifier jsonifier;
      if (oClass.isPrimitive()) {
        out.append(o);
      }
 else       if (Number.class.isAssignableFrom(oClass) || oClass.equals(Boolean.class) || oClass.equals(Character.class)) {
        out.append(o);
      }
 else       if (o instanceof String) {
        quote(out,(String)o);
      }
 else       if (o instanceof Collection) {
        out.append(""String_Node_Str"");
        for (Iterator i=((Collection)o).iterator(); i.hasNext(); ) {
          dumpObject(out,i.next(),i.hasNext() ? ',' : '\0',ignoredProps);
        }
        out.append(""String_Node_Str"");
      }
 else       if (o.getClass().isArray()) {
        out.append(""String_Node_Str"");
        int len=Array.getLength(o);
        for (int i=0; i < len; i++) {
          dumpObject(out,Array.get(o,i),((i < (len - 1)) ? ',' : '\0'),ignoredProps);
        }
        out.append(""String_Node_Str"");
      }
 else       if (o instanceof Map) {
        out.append(""String_Node_Str"");
        Map m=(Map)o;
        for (Iterator i=m.keySet().iterator(); i.hasNext(); ) {
          Object key=i.next();
          dumpObject(out,key.toString(),'\0',ignoredProps);
          out.append(""String_Node_Str"");
          dumpObject(out,m.get(key),i.hasNext() ? ',' : '\0',ignoredProps);
        }
        out.append(""String_Node_Str"");
      }
 else       if ((jsonifier=jsonifiers.get(oClass)) != null) {
        out.append(jsonifier.toJSON(o));
      }
 else       if (o instanceof JSONable) {
        out.append(((JSONable)o).toJSON());
      }
 else {
        BeanInfo info=Introspector.getBeanInfo(o.getClass());
        out.append(""String_Node_Str"");
        boolean first=true;
        PropertyDescriptor[] pds=info.getPropertyDescriptors();
        for (int cp=0; cp < pds.length; cp++) {
          PropertyDescriptor pd=pds[cp];
          Method method=pd.getReadMethod();
          Method writeMethod=pd.getWriteMethod();
          if (method != null) {
            Object value=method.invoke(o,(Object[])null);
            String name=pd.getName();
            boolean ignore=(ignoredProps != null && ignoredProps.contains(name));
            if (!name.equals(""String_Node_Str"") && !ignore) {
              JSONProperty jsonProperty=method.getAnnotation(JSONProperty.class);
              if (jsonProperty == null && writeMethod != null) {
                jsonProperty=writeMethod.getAnnotation(JSONProperty.class);
              }
              if (jsonProperty != null) {
                name=jsonProperty.value();
                ignore=jsonProperty.ignore() || (value == null && jsonProperty.ignoreIfNull());
              }
              if (!ignore) {
                if (!first) {
                  out.append(',');
                }
                quote(out,name);
                out.append(':');
                dumpObject(out,value,'\0',ignoredProps);
                first=false;
              }
            }
          }
        }
        if (o instanceof DynamicProperties) {
          DynamicProperties dynAttrs=(DynamicProperties)o;
          for (          String name : dynAttrs.propertyNames()) {
            out.append(',');
            quote(out,name);
            out.append(':');
            dumpObject(out,dynAttrs.getProperty(name),'\0',ignoredProps);
          }
        }
        out.append(""String_Node_Str"");
      }
    }
    if (separator != '\0') {
      out.append(separator);
    }
  }
 catch (  IntrospectionException ie) {
    throw new RuntimeException(""String_Node_Str"",ie);
  }
catch (  IllegalAccessException iae) {
    throw new RuntimeException(""String_Node_Str"",iae);
  }
catch (  InvocationTargetException ite) {
    throw new RuntimeException(""String_Node_Str"",ite);
  }
}","/** 
 * Dumps the given object as JSON representation followed by a separator into the given StringBuilder.
 * @param out StringBuilder
 * @param o object
 * @param separator separator character to append after the object or<code>'\0'</code> to append no separator.
 */
private void dumpObject(StringBuilder out,Object o,char separator,List<String> ignoredProps){
  if (o == null) {
    out.append(""String_Node_Str"");
  }
 else {
    Class oClass=o.getClass();
    JSONifier jsonifier;
    if (oClass.isPrimitive()) {
      out.append(o);
    }
 else     if (Number.class.isAssignableFrom(oClass) || oClass.equals(Boolean.class) || oClass.equals(Character.class)) {
      out.append(o);
    }
 else     if (o instanceof String) {
      quote(out,(String)o);
    }
 else     if (o instanceof Collection) {
      out.append(""String_Node_Str"");
      for (Iterator i=((Collection)o).iterator(); i.hasNext(); ) {
        dumpObject(out,i.next(),i.hasNext() ? ',' : '\0',ignoredProps);
      }
      out.append(""String_Node_Str"");
    }
 else     if (o.getClass().isArray()) {
      out.append(""String_Node_Str"");
      int len=Array.getLength(o);
      for (int i=0; i < len; i++) {
        dumpObject(out,Array.get(o,i),((i < (len - 1)) ? ',' : '\0'),ignoredProps);
      }
      out.append(""String_Node_Str"");
    }
 else     if (o instanceof Map) {
      out.append(""String_Node_Str"");
      Map m=(Map)o;
      for (Iterator i=m.keySet().iterator(); i.hasNext(); ) {
        Object key=i.next();
        dumpObject(out,key.toString(),'\0',ignoredProps);
        out.append(""String_Node_Str"");
        dumpObject(out,m.get(key),i.hasNext() ? ',' : '\0',ignoredProps);
      }
      out.append(""String_Node_Str"");
    }
 else     if ((jsonifier=jsonifiers.get(oClass)) != null) {
      out.append(jsonifier.toJSON(o));
    }
 else     if (o instanceof JSONable) {
      out.append(((JSONable)o).toJSON());
    }
 else     if (o instanceof Class) {
      quote(out,((Class)o).getName());
    }
 else {
      BeanInfo info;
      try {
        info=Introspector.getBeanInfo(o.getClass());
      }
 catch (      IntrospectionException e) {
        throw ExceptionWrapper.wrap(e);
      }
      out.append(""String_Node_Str"");
      boolean first=true;
      PropertyDescriptor[] pds=info.getPropertyDescriptors();
      for (int cp=0; cp < pds.length; cp++) {
        try {
          PropertyDescriptor pd=pds[cp];
          Method method=pd.getReadMethod();
          Method writeMethod=pd.getWriteMethod();
          if (method != null) {
            Object value=method.invoke(o,(Object[])null);
            String name=pd.getName();
            boolean ignore=(ignoredProps != null && ignoredProps.contains(name));
            if (!name.equals(""String_Node_Str"") && !ignore) {
              JSONProperty jsonProperty=method.getAnnotation(JSONProperty.class);
              if (jsonProperty == null && writeMethod != null) {
                jsonProperty=writeMethod.getAnnotation(JSONProperty.class);
              }
              if (jsonProperty != null) {
                name=jsonProperty.value();
                ignore=jsonProperty.ignore() || (value == null && jsonProperty.ignoreIfNull());
              }
              if (!ignore) {
                if (!first) {
                  out.append(',');
                }
                quote(out,name);
                out.append(':');
                dumpObject(out,value,'\0',ignoredProps);
                first=false;
              }
            }
          }
        }
 catch (        IllegalAccessException e) {
          throw ExceptionWrapper.wrap(e);
        }
catch (        InvocationTargetException e) {
          throw ExceptionWrapper.wrap(e);
        }
      }
      if (o instanceof DynamicProperties) {
        DynamicProperties dynAttrs=(DynamicProperties)o;
        for (        String name : dynAttrs.propertyNames()) {
          out.append(',');
          quote(out,name);
          out.append(':');
          dumpObject(out,dynAttrs.getProperty(name),'\0',ignoredProps);
        }
      }
      out.append(""String_Node_Str"");
    }
  }
  if (separator != '\0') {
    out.append(separator);
  }
}",0.8841047721564406
44163,"private static String getPropertyNameFromAnnotation(Object target,String value){
  for (  PropertyDescriptor pd : PropertyUtils.getPropertyDescriptors(target.getClass())) {
    JSONProperty jsonProperty=null;
    Method readMethod=pd.getReadMethod();
    Method writeMethod=pd.getWriteMethod();
    if (readMethod != null) {
      jsonProperty=readMethod.getAnnotation(JSONProperty.class);
    }
    if (jsonProperty == null && writeMethod != null) {
      jsonProperty=writeMethod.getAnnotation(JSONProperty.class);
    }
    if (jsonProperty != null && jsonProperty.value().equals(value)) {
      return pd.getName();
    }
  }
  return value;
}","public static String getPropertyNameFromAnnotation(Object target,String value){
  for (  PropertyDescriptor pd : PropertyUtils.getPropertyDescriptors(target.getClass())) {
    JSONProperty jsonProperty=null;
    Method readMethod=pd.getReadMethod();
    Method writeMethod=pd.getWriteMethod();
    if (readMethod != null) {
      jsonProperty=readMethod.getAnnotation(JSONProperty.class);
    }
    if (jsonProperty == null && writeMethod != null) {
      jsonProperty=writeMethod.getAnnotation(JSONProperty.class);
    }
    if (jsonProperty != null && jsonProperty.value().equals(value)) {
      return pd.getName();
    }
  }
  return value;
}",0.991492652745553
44164,"private void parseObjectInto(ParseContext cx,JSONTokenizer tokenizer) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
  boolean containerIsMap=Map.class.isAssignableFrom(cx.target.getClass());
  boolean containerIsDynAttrs=DynamicProperties.class.isAssignableFrom(cx.target.getClass());
  boolean first=true;
  while (true) {
    Token key;
    if (first) {
      key=tokenizer.expectNext(TokenType.STRING,TokenType.BRACE_CLOSE);
    }
 else {
      key=tokenizer.expectNext(TokenType.COMMA,TokenType.BRACE_CLOSE);
    }
    if (key.type() == TokenType.BRACE_CLOSE) {
      break;
    }
    if (!first) {
      key=tokenizer.expectNext(TokenType.STRING);
    }
    String jsonName=(String)key.value();
    String name=getPropertyNameFromAnnotation(cx.target,jsonName);
    if (name.length() == 0) {
      throw new JSONParseException(""String_Node_Str"");
    }
    tokenizer.expectNext(TokenType.COLON);
    Token valueToken=tokenizer.next();
    TokenType valueType=valueToken.type();
    boolean isProperty=PropertyUtils.isWriteable(cx.target,name);
    Method addMethod=getAddMethod(cx.target,name);
    if (!(isProperty || containerIsMap || containerIsDynAttrs|| addMethod != null)) {
      throw new JSONParseException(""String_Node_Str"" + name + ""String_Node_Str""+ cx.target.getClass());
    }
    Object value;
    if (valueType.isPrimitive()) {
      value=valueToken.value();
    }
 else {
      Object newTarget=null;
      if (valueType == TokenType.BRACE_OPEN) {
        Class memberType=null;
        if (isProperty) {
          memberType=getTypeHintFromAnnotation(cx,name);
        }
        newTarget=createNewTargetInstance(cx.getMemberType(),cx.getParsePathInfo(jsonName),tokenizer,name,true);
        parseObjectInto(cx.push(newTarget,memberType,""String_Node_Str"" + name),tokenizer);
      }
 else       if (valueType == TokenType.BRACKET_OPEN) {
        if (isProperty || containerIsMap) {
          newTarget=createNewTargetInstance(cx.getMemberType(),cx.getParsePathInfo(jsonName),tokenizer,name,false);
          Class memberType=getTypeHintFromAnnotation(cx,name);
          parseArrayInto(cx.push(newTarget,memberType,""String_Node_Str"" + name),tokenizer);
        }
 else {
          if (addMethod != null) {
            Class memberType=addMethod.getParameterTypes()[0];
            List temp=new ArrayList();
            parseArrayInto(cx.push(temp,memberType,""String_Node_Str"" + name),tokenizer);
            for (            Object o : temp) {
              addMethod.invoke(cx.target,o);
            }
            continue;
          }
 else {
            throw new JSONParseException(""String_Node_Str"" + name + ""String_Node_Str""+ cx.target);
          }
        }
      }
 else {
        throw new JSONParseException(""String_Node_Str"" + valueToken);
      }
      value=newTarget;
    }
    if (isProperty) {
      try {
        Class targetClass=PropertyUtils.getPropertyType(cx.target,name);
        PropertyUtils.setProperty(cx.target,name,convertValueTo(value,targetClass));
      }
 catch (      IllegalAccessException e) {
        throw ExceptionWrapper.wrap(e);
      }
catch (      InvocationTargetException e) {
        throw ExceptionWrapper.wrap(e);
      }
catch (      NoSuchMethodException e) {
        throw ExceptionWrapper.wrap(e);
      }
    }
 else     if (containerIsMap) {
      ((Map)cx.target).put(name,value);
    }
 else     if (containerIsDynAttrs) {
      ((DynamicProperties)cx.target).setProperty(name,value);
    }
 else {
      throw new JSONParseException(""String_Node_Str"" + name + ""String_Node_Str""+ cx.target);
    }
    first=false;
  }
}","private void parseObjectInto(ParseContext cx,JSONTokenizer tokenizer) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
  boolean containerIsMap=Map.class.isAssignableFrom(cx.target.getClass());
  boolean containerIsDynAttrs=cx.target instanceof DynamicProperties;
  boolean first=true;
  while (true) {
    Token key;
    if (first) {
      key=tokenizer.expectNext(TokenType.STRING,TokenType.BRACE_CLOSE);
    }
 else {
      key=tokenizer.expectNext(TokenType.COMMA,TokenType.BRACE_CLOSE);
    }
    if (key.type() == TokenType.BRACE_CLOSE) {
      break;
    }
    if (!first) {
      key=tokenizer.expectNext(TokenType.STRING);
    }
    String jsonName=(String)key.value();
    String name=getPropertyNameFromAnnotation(cx.target,jsonName);
    if (name.length() == 0) {
      throw new JSONParseException(""String_Node_Str"");
    }
    tokenizer.expectNext(TokenType.COLON);
    Token valueToken=tokenizer.next();
    TokenType valueType=valueToken.type();
    boolean isProperty=PropertyUtils.isWriteable(cx.target,name);
    Method addMethod=getAddMethod(cx.target,name);
    if (!(isProperty || containerIsMap || containerIsDynAttrs|| addMethod != null)) {
      throw new JSONParseException(""String_Node_Str"" + name + ""String_Node_Str""+ cx.target.getClass());
    }
    Object value;
    if (valueType.isPrimitive()) {
      value=valueToken.value();
    }
 else {
      Object newTarget=null;
      if (valueType == TokenType.BRACE_OPEN) {
        Class memberType=null;
        if (isProperty) {
          memberType=getTypeHintFromAnnotation(cx,name);
        }
        newTarget=createNewTargetInstance(cx.getMemberType(),cx.getParsePathInfo(jsonName),tokenizer,name,true);
        parseObjectInto(cx.push(newTarget,memberType,""String_Node_Str"" + name),tokenizer);
      }
 else       if (valueType == TokenType.BRACKET_OPEN) {
        if (isProperty || containerIsMap || containerIsDynAttrs) {
          newTarget=createNewTargetInstance(cx.getMemberType(),cx.getParsePathInfo(jsonName),tokenizer,name,false);
          Class memberType=getTypeHintFromAnnotation(cx,name);
          parseArrayInto(cx.push(newTarget,memberType,""String_Node_Str"" + name),tokenizer);
        }
 else {
          if (addMethod != null) {
            Class memberType=addMethod.getParameterTypes()[0];
            List temp=new ArrayList();
            parseArrayInto(cx.push(temp,memberType,""String_Node_Str"" + name),tokenizer);
            for (            Object o : temp) {
              addMethod.invoke(cx.target,o);
            }
            continue;
          }
 else {
            throw new JSONParseException(""String_Node_Str"" + name + ""String_Node_Str""+ cx.target);
          }
        }
      }
 else {
        throw new JSONParseException(""String_Node_Str"" + valueToken);
      }
      value=newTarget;
    }
    if (isProperty) {
      try {
        Class targetClass=PropertyUtils.getPropertyType(cx.target,name);
        PropertyUtils.setProperty(cx.target,name,convertValueTo(value,targetClass));
      }
 catch (      IllegalAccessException e) {
        throw ExceptionWrapper.wrap(e);
      }
catch (      InvocationTargetException e) {
        throw ExceptionWrapper.wrap(e);
      }
catch (      NoSuchMethodException e) {
        throw ExceptionWrapper.wrap(e);
      }
    }
 else     if (containerIsMap) {
      ((Map)cx.target).put(name,value);
    }
 else     if (containerIsDynAttrs) {
      ((DynamicProperties)cx.target).setProperty(name,value);
    }
 else {
      throw new JSONParseException(""String_Node_Str"" + name + ""String_Node_Str""+ cx.target);
    }
    first=false;
  }
}",0.9878465109927624
44165,"public static String getPropertyNameFromAnnotation(Object target,String value){
  for (  PropertyDescriptor pd : PropertyUtils.getPropertyDescriptors(target.getClass())) {
    JSONProperty jsonProperty=null;
    Method readMethod=pd.getReadMethod();
    Method writeMethod=pd.getWriteMethod();
    if (readMethod != null) {
      jsonProperty=readMethod.getAnnotation(JSONProperty.class);
    }
    if (jsonProperty == null && writeMethod != null) {
      jsonProperty=writeMethod.getAnnotation(JSONProperty.class);
    }
    if (jsonProperty != null && jsonProperty.value().equals(value)) {
      return pd.getName();
    }
  }
  return value;
}","/** 
 * Returns the java bean property name for the given json property name.
 * @param target    bean
 * @param value     json property name
 * @return java bean name, not guaranteed to actually exist.
 */
public static String getPropertyNameFromAnnotation(Object target,String value){
  for (  PropertyDescriptor pd : PropertyUtils.getPropertyDescriptors(target.getClass())) {
    String jsonPropertyName=getJSONPropertyNameFromDescriptor(target,pd);
    if (jsonPropertyName.equals(value)) {
      return pd.getName();
    }
  }
  return value;
}",0.3531380753138075
44166,"/** 
 * Returns all readable and writable bean property names of the given object
 * @param dynamicProperties object
 * @return
 */
public static Set<String> getBeanPropertyNames(Object dynamicProperties){
  PropertyDescriptor[] pds=PropertyUtils.getPropertyDescriptors(dynamicProperties.getClass());
  Set<String> names=new HashSet<String>();
  for (  PropertyDescriptor pd : pds) {
    Method readMethod=pd.getReadMethod();
    Method writeMethod=pd.getWriteMethod();
    if (readMethod != null && writeMethod != null) {
      String name=JSONParser.getPropertyNameFromAnnotation(dynamicProperties,pd.getName());
      names.add(name);
    }
  }
  return names;
}","/** 
 * Returns all readable and writable bean property JSON names of the given object.
 * @param dynamicProperties object
 * @return
 */
public static Set<String> getBeanPropertyNames(Object dynamicProperties){
  PropertyDescriptor[] pds=PropertyUtils.getPropertyDescriptors(dynamicProperties.getClass());
  Set<String> names=new HashSet<String>();
  for (  PropertyDescriptor pd : pds) {
    Method readMethod=pd.getReadMethod();
    Method writeMethod=pd.getWriteMethod();
    if (readMethod != null && writeMethod != null) {
      String name=JSONParser.getJSONPropertyNameFromDescriptor(dynamicProperties,pd);
      names.add(name);
    }
  }
  return names;
}",0.8947368421052632
44167,"/** 
 * Gets the bean or dynamic property with the given name. if the class has a bean property with the given name, the value of that property is returned. otherwise, the dynamic property with the given name is returned.
 * @param dynamicProperties     java bean
 * @param name                  property name
 * @return                      the property value.
 * @throws IllegalArgumentException if there is no bean property with the given name on the given dynamicProperties object and the class of the beandoes not implement  {@link DynamicProperties}
 */
public static Object getProperty(Object dynamicProperties,String name) throws IllegalArgumentException {
  if (PropertyUtils.isReadable(dynamicProperties,name)) {
    try {
      return PropertyUtils.getProperty(dynamicProperties,name);
    }
 catch (    IllegalAccessException e) {
      throw ExceptionWrapper.wrap(e);
    }
catch (    InvocationTargetException e) {
      throw ExceptionWrapper.wrap(e);
    }
catch (    NoSuchMethodException e) {
      throw ExceptionWrapper.wrap(e);
    }
  }
 else   if (dynamicProperties instanceof DynamicProperties) {
    return ((DynamicProperties)dynamicProperties).getProperty(name);
  }
 else {
    throw new IllegalArgumentException(dynamicProperties + ""String_Node_Str"" + name+ ""String_Node_Str"");
  }
}","/** 
 * Gets the bean or dynamic property with the given JSON property name. if the class has a bean property with the given name, the value of that property is returned. otherwise, the dynamic property with the given name is returned.
 * @param dynamicProperties java bean
 * @param name JSON property name
 * @return the property value.
 * @throws IllegalArgumentException if there is no bean property with thegiven name on the given dynamicProperties object and the class of the bean does not implement {@link DynamicProperties}
 */
public static Object getProperty(Object dynamicProperties,String name) throws IllegalArgumentException {
  try {
    String propertyName=JSONParser.getPropertyNameFromAnnotation(dynamicProperties,name);
    if (PropertyUtils.isReadable(dynamicProperties,propertyName)) {
      return PropertyUtils.getProperty(dynamicProperties,propertyName);
    }
 else     if (dynamicProperties instanceof DynamicProperties) {
      return ((DynamicProperties)dynamicProperties).getProperty(name);
    }
 else {
      throw new IllegalArgumentException(dynamicProperties + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
 catch (  IllegalAccessException e) {
    throw ExceptionWrapper.wrap(e);
  }
catch (  InvocationTargetException e) {
    throw ExceptionWrapper.wrap(e);
  }
catch (  NoSuchMethodException e) {
    throw ExceptionWrapper.wrap(e);
  }
}",0.6308376575240919
44168,"/** 
 * Sets the bean or dynamic property with the given name to the given value. if the class has a bean property with the given name, the value of that property is overwritten. otherwise, the dynamic property with the given name is overwritten.
 * @param dynamicProperties         bean or dynamic properties instance
 * @param name                      property name
 * @param value                     property value
 * @throws IllegalArgumentException if there is no bean property with the given name on the given dynamicProperties object and the class of the beandoes not implement  {@link DynamicProperties}
 */
public static void setProperty(Object dynamicProperties,String name,Object value) throws IllegalArgumentException {
  if (PropertyUtils.isWriteable(dynamicProperties,name)) {
    try {
      PropertyUtils.setProperty(dynamicProperties,name,value);
    }
 catch (    IllegalAccessException e) {
      throw ExceptionWrapper.wrap(e);
    }
catch (    InvocationTargetException e) {
      throw ExceptionWrapper.wrap(e);
    }
catch (    NoSuchMethodException e) {
      throw ExceptionWrapper.wrap(e);
    }
  }
 else   if (dynamicProperties instanceof DynamicProperties) {
    ((DynamicProperties)dynamicProperties).setProperty(name,value);
  }
 else {
    throw new IllegalArgumentException(dynamicProperties + ""String_Node_Str"" + name+ ""String_Node_Str"");
  }
}","/** 
 * Sets the bean or dynamic property with the given JSON property name to the given value. if the class has a bean property with the given name, the value of that property is overwritten. otherwise, the dynamic property with the given name is overwritten.
 * @param dynamicProperties bean or dynamic properties instance
 * @param name JSON property name
 * @param value property value
 * @throws IllegalArgumentException if there is no bean property with thegiven name on the given dynamicProperties object and the class of the bean does not implement {@link DynamicProperties}
 */
public static void setProperty(Object dynamicProperties,String name,Object value) throws IllegalArgumentException {
  try {
    String propertyName=JSONParser.getPropertyNameFromAnnotation(dynamicProperties,name);
    if (PropertyUtils.isWriteable(dynamicProperties,propertyName)) {
      PropertyUtils.setProperty(dynamicProperties,propertyName,value);
    }
 else     if (dynamicProperties instanceof DynamicProperties) {
      ((DynamicProperties)dynamicProperties).setProperty(name,value);
    }
 else {
      throw new IllegalArgumentException(dynamicProperties + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
 catch (  IllegalAccessException e) {
    throw ExceptionWrapper.wrap(e);
  }
catch (  InvocationTargetException e) {
    throw ExceptionWrapper.wrap(e);
  }
catch (  NoSuchMethodException e) {
    throw ExceptionWrapper.wrap(e);
  }
}",0.6430845419172267
44169,"/** 
 * Returns all properties of this dynamic properties object including the java bean properties.
 * @param dynamicProperties
 * @return
 */
public static Set<String> getAllPropertyNames(DynamicProperties dynamicProperties){
  Set<String> names=new HashSet<String>(dynamicProperties.propertyNames());
  names.addAll(getBeanPropertyNames(dynamicProperties));
  return names;
}","/** 
 * Returns the names of all properties of this dynamic properties object including the java bean properties. Note that the method will return the <em>JSON property name</em> of the java bean methods.
 * @param dynamicProperties     DynamicProperties object
 * @return a set containing all property names, both dynamic and static (JSON) names.
 */
public static Set<String> getAllPropertyNames(DynamicProperties dynamicProperties){
  Set<String> names=new HashSet<String>(dynamicProperties.propertyNames());
  names.addAll(getBeanPropertyNames(dynamicProperties));
  return names;
}",0.7842323651452282
44170,"@Test public void thatGetAllPropertyNamesWorks(){
  DynAttrsBean bean=new DynAttrsBean();
  bean.setFoo(""String_Node_Str"");
  bean.setProperty(""String_Node_Str"",42);
  Set<String> names=DynamicPropertiesUtil.getAllPropertyNames(bean);
  assertThat(names,is(notNullValue()));
  assertThat(names.size(),is(2));
  assertThat(names.contains(""String_Node_Str""),is(true));
  assertThat(names.contains(""String_Node_Str""),is(true));
}","@Test public void thatGetAllPropertyNamesWorks(){
  DynPropTestBean bean=new DynPropTestBean();
  bean.setFoo(""String_Node_Str"");
  bean.setProperty(""String_Node_Str"",42);
  Set<String> names=DynamicPropertiesUtil.getAllPropertyNames(bean);
  assertThat(names,is(notNullValue()));
  assertThat(names.size(),is(2));
  assertThat(names.contains(""String_Node_Str""),is(true));
  assertThat(names.contains(""String_Node_Str""),is(true));
}",0.9696969696969696
44171,"@Test public void thatWritingBeanPropertiesWorks(){
  DynAttrsBean bean=new DynAttrsBean();
  DynamicPropertiesUtil.setProperty(bean,""String_Node_Str"",""String_Node_Str"");
  assertThat(bean.getFoo(),is(""String_Node_Str""));
}","@Test public void thatWritingBeanPropertiesWorks(){
  DynPropTestBean bean=new DynPropTestBean();
  DynamicPropertiesUtil.setProperty(bean,""String_Node_Str"",""String_Node_Str"");
  assertThat(bean.getFoo(),is(""String_Node_Str""));
}",0.9424778761061948
44172,"@Test public void thatGetBeanPropertyNamesWorks(){
  DynAttrsBean bean=new DynAttrsBean();
  Set<String> names=DynamicPropertiesUtil.getBeanPropertyNames(bean);
  assertThat(names,is(notNullValue()));
  assertThat(names.size(),is(1));
  assertThat(names.contains(""String_Node_Str""),is(true));
}","@Test public void thatGetBeanPropertyNamesWorks(){
  DynPropTestBean bean=new DynPropTestBean();
  Set<String> names=DynamicPropertiesUtil.getBeanPropertyNames(bean);
  assertThat(names,is(notNullValue()));
  assertThat(names.size(),is(1));
  assertThat(names.contains(""String_Node_Str""),is(true));
}",0.9562289562289562
44173,"@Test public void thatReadingBeanPropertiesWorks(){
  DynAttrsBean bean=new DynAttrsBean();
  bean.setFoo(""String_Node_Str"");
  assertThat((String)DynamicPropertiesUtil.getProperty(bean,""String_Node_Str""),is(""String_Node_Str""));
}","@Test public void thatReadingBeanPropertiesWorks(){
  DynPropTestBean bean=new DynPropTestBean();
  bean.setFoo(""String_Node_Str"");
  assertThat((String)DynamicPropertiesUtil.getProperty(bean,""String_Node_Str""),is(""String_Node_Str""));
}",0.944206008583691
44174,"/** 
 * Returns a set of tuples from the parsed console input string
 * @param consoleinput
 * @return 
 */
private HashMap<String,Boolean> parseProjectRootFolders(List<String> consoleinput){
  HashMap<String,Boolean> rootFolders=new HashMap<String,Boolean>();
  for (  String s : consoleinput) {
    if (!s.startsWith(""String_Node_Str"")) {
      continue;
    }
    Matcher m=pattern_catcs.matcher(s);
    if (m.matches()) {
      try {
        String key=m.group(2) + m.group(3);
        key=key.substring(1,key.length() - 1);
        key=key.replace(""String_Node_Str"",""String_Node_Str"");
        logger.info(""String_Node_Str"" + key);
        Boolean readOnly=s.contains(""String_Node_Str"");
        rootFolders.put(key,readOnly);
      }
 catch (      Exception ex) {
        logger.log(Level.SEVERE,""String_Node_Str"" + s,ex);
      }
    }
  }
  return rootFolders;
}","/** 
 * Returns a set of tuples from the parsed console input string
 * @param consoleinput
 * @return 
 */
private HashMap<String,Boolean> parseProjectRootFolders(List<String> consoleinput){
  HashMap<String,Boolean> rootFolders=new HashMap<String,Boolean>();
  for (  String s : consoleinput) {
    if (!s.startsWith(""String_Node_Str"")) {
      continue;
    }
    Matcher m=pattern_catcs.matcher(s);
    if (m.matches()) {
      try {
        String key=m.group(2) + m.group(3);
        key=key.substring(1,key.length() - 1);
        key=key.replaceAll(""String_Node_Str"",""String_Node_Str"");
        logger.info(""String_Node_Str"" + key);
        Boolean readOnly=s.contains(""String_Node_Str"");
        rootFolders.put(key,readOnly);
      }
 catch (      Exception ex) {
        logger.log(Level.SEVERE,""String_Node_Str"" + s,ex);
      }
    }
  }
  return rootFolders;
}",0.9982788296041308
44175,"public boolean rebase(boolean complete) throws RebaseException {
  logger.fine(""String_Node_Str"");
  String cmd=""String_Node_Str"" + (complete ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
  if (view != null) {
    cmd+=""String_Node_Str"" + view.getViewtag();
  }
 else   if (stream != null) {
    cmd+=""String_Node_Str"" + stream;
    if (dropFromStream) {
      List<Baseline> fbls=stream.getFoundationBaselines();
      logger.fine(""String_Node_Str"" + fbls);
      for (      Baseline fbl : fbls) {
        if (!baselines.contains(fbl)) {
          logger.finest(""String_Node_Str"" + fbl);
          droppedBaselines.add(fbl);
        }
      }
    }
    if (viewTag != null) {
      cmd+=""String_Node_Str"" + viewTag;
    }
  }
 else   if (viewTag != null) {
    cmd+=""String_Node_Str"" + viewTag;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (baselines != null && baselines.size() > 0) {
    cmd+=""String_Node_Str"";
    for (    Baseline b : baselines) {
      cmd+=b.getNormalizedName() + ""String_Node_Str"";
    }
    cmd=cmd.substring(0,(cmd.length() - 1));
  }
  if (droppedBaselines != null && droppedBaselines.size() > 0) {
    cmd+=""String_Node_Str"";
    for (    Baseline b : droppedBaselines) {
      cmd+=b.getNormalizedName() + ""String_Node_Str"";
    }
    cmd=cmd.substring(0,(cmd.length() - 1));
  }
  try {
    CmdResult res=Cleartool.run(cmd,viewPath);
    if (res.stdoutBuffer.toString().matches(""String_Node_Str"")) {
      return false;
    }
 else {
      return true;
    }
  }
 catch (  AbnormalProcessTerminationException e) {
    throw new RebaseException(this,e);
  }
}","public boolean rebase(boolean complete) throws RebaseException {
  return rebase(complete,false);
}",0.1047783534830167
44176,"public static boolean isInProgress(Stream stream) throws CleartoolException {
  String cmd=""String_Node_Str"" + stream;
  try {
    String result=Cleartool.run(cmd).stdoutBuffer.toString();
    if (result.matches(rx_rebase_in_progress)) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  AbnormalProcessTerminationException e) {
    throw new CleartoolException(""String_Node_Str"" + stream,e);
  }
}","public static boolean isInProgress(Stream stream) throws CleartoolException {
  String cmd=""String_Node_Str"" + stream;
  logger.fine(String.format(""String_Node_Str"",stream));
  try {
    logger.info(String.format(""String_Node_Str"",stream,cmd));
    String result=Cleartool.run(cmd).stdoutBuffer.toString();
    logger.fine(result);
    if (result.contains(""String_Node_Str"")) {
      logger.fine(String.format(""String_Node_Str"",stream));
      return true;
    }
 else {
      logger.fine(String.format(""String_Node_Str"",stream));
      return false;
    }
  }
 catch (  AbnormalProcessTerminationException e) {
    throw new CleartoolException(""String_Node_Str"" + stream,e);
  }
}",0.691470054446461
44177,"public RebaseException(Rebase rebase,Exception e){
  super(e);
  this.rebase=rebase;
}","public RebaseException(String message,Rebase rebase,Exception e){
  super(message,e);
  this.rebase=rebase;
}",0.882051282051282
44178,"public static Activity get(String name,PVob pvob) throws UnableToInitializeEntityException {
  if (!name.startsWith(""String_Node_Str"")) {
    name=""String_Node_Str"" + name;
  }
  Activity entity=(Activity)UCMEntity.getEntity(Activity.class,name + ""String_Node_Str"" + pvob);
  return entity;
}","public static Activity get(String name,PVob pvob) throws UnableToInitializeEntityException {
  if (!name.startsWith(""String_Node_Str"")) {
    name=""String_Node_Str"" + name;
  }
  System.out.println(""String_Node_Str"");
  Activity entity=(Activity)UCMEntity.getEntity(Activity.class,name + ""String_Node_Str"" + pvob);
  return entity;
}",0.9344
44179,"/** 
 * Create an activity. If name is null an anonymous activity is created and the return value is null.
 * @param name
 * @param in
 * @param pvob
 * @param force
 * @param comment
 * @param headline
 * @param view
 * @return
 * @throws UnableToCreateEntityException
 * @throws UCMEntityNotFoundException
 * @throws UnableToGetEntityException
 * @throws UnableToInitializeEntityException
 */
public static Activity create(String name,Stream in,PVob pvob,boolean force,String comment,String headline,File view) throws UnableToCreateEntityException, UCMEntityNotFoundException, UnableToGetEntityException, UnableToInitializeEntityException {
  String cmd=""String_Node_Str"" + (comment != null ? ""String_Node_Str"" + comment + ""String_Node_Str"" : ""String_Node_Str"") + (headline != null ? ""String_Node_Str"" + headline + ""String_Node_Str"" : ""String_Node_Str"")+ (in != null ? ""String_Node_Str"" + in.getNormalizedName() : ""String_Node_Str"")+ (force ? ""String_Node_Str"" : ""String_Node_Str"")+ (name != null ? ""String_Node_Str"" + name + ""String_Node_Str""+ pvob : ""String_Node_Str"");
  try {
    Cleartool.run(cmd,view);
  }
 catch (  Exception e) {
    throw new UnableToCreateEntityException(Activity.class,e);
  }
  Activity activity=null;
  if (name != null) {
    activity=get(name,pvob);
  }
  return activity;
}","/** 
 * Create an activity. If name is null an anonymous activity is created and the return value is null.
 * @param name
 * @param in
 * @param pvob
 * @param force
 * @param comment
 * @param headline
 * @param view
 * @return
 * @throws UnableToCreateEntityException
 * @throws UCMEntityNotFoundException
 * @throws UnableToGetEntityException
 * @throws UnableToInitializeEntityException
 */
public static Activity create(String name,Stream in,PVob pvob,boolean force,String comment,String headline,File view) throws UnableToCreateEntityException, UCMEntityNotFoundException, UnableToGetEntityException, UnableToInitializeEntityException {
  String cmd=""String_Node_Str"" + (comment != null ? ""String_Node_Str"" + comment + ""String_Node_Str"" : ""String_Node_Str"") + (headline != null ? ""String_Node_Str"" + headline + ""String_Node_Str"" : ""String_Node_Str"")+ (in != null ? ""String_Node_Str"" + in.getNormalizedName() : ""String_Node_Str"")+ (force ? ""String_Node_Str"" : ""String_Node_Str"")+ (name != null ? ""String_Node_Str"" + name + ""String_Node_Str""+ pvob : ""String_Node_Str"");
  try {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + cmd);
    System.out.println(""String_Node_Str"" + view);
    Cleartool.run(cmd,view);
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    throw new UnableToCreateEntityException(Activity.class,e);
  }
  Activity activity=null;
  System.out.println(""String_Node_Str"");
  if (name != null) {
    System.out.println(""String_Node_Str"");
    activity=get(name,pvob);
    System.out.println(""String_Node_Str"");
  }
  return activity;
}",0.8805116122517671
44180,"public static List<Version> getVersions(Activity activity,File path) throws UnableToInitializeEntityException {
  logger.fine(""String_Node_Str"" + activity);
  String output=null;
  try {
    output=new Describe(activity).addModifier(Describe.versions).setPath(path).executeGetFirstLine();
  }
 catch (  CleartoolException e) {
    logger.fine(e.getMessage());
    return Collections.emptyList();
  }
  String[] versionNames=output.split(""String_Node_Str"");
  List<Version> versions=new ArrayList<Version>(versionNames.length);
  for (  String versionName : versionNames) {
    versions.add(Version.get(versionName.trim()));
  }
  return versions;
}","public static List<Version> getVersions(Activity activity,File path) throws UnableToInitializeEntityException {
  logger.fine(""String_Node_Str"" + activity);
  String output=null;
  try {
    output=new Describe(activity).addModifier(Describe.versions).setPath(path).executeGetFirstLine();
  }
 catch (  CleartoolException e) {
    logger.fine(""String_Node_Str"" + e.getMessage());
    return Collections.emptyList();
  }
  String[] versionNames=output.split(""String_Node_Str"");
  List<Version> versions=new ArrayList<Version>(versionNames.length);
  for (  String versionName : versionNames) {
    versions.add(Version.get(versionName.trim()));
  }
  return versions;
}",0.9848024316109424
44181,"/** 
 * Load the Baseline into memory from ClearCase.<br> This function is automatically called when needed by other functions.
 * @throws UnableToLoadEntityException
 * @throws UnableToInitializeEntityException 
 * @throws UCMEntityNotFoundException 
 * @throws UnableToCreateEntityException 
 * @throws UnableToGetEntityException 
 */
public Baseline load() throws UnableToLoadEntityException, UnableToInitializeEntityException {
  String result=""String_Node_Str"";
  String cmd=""String_Node_Str"" + Cool.delim + ""String_Node_Str""+ Cool.delim+ ""String_Node_Str""+ Cool.delim+ ""String_Node_Str""+ Cool.delim+ ""String_Node_Str""+ Cool.delim+ ""String_Node_Str""+ Cool.delim+ ""String_Node_Str""+ Cool.delim+ ""String_Node_Str""+ this;
  try {
    result=Cleartool.run(cmd).stdoutBuffer.toString();
  }
 catch (  Exception e) {
    throw new UnableToLoadEntityException(this,e);
  }
  String[] rs=result.split(UCMEntity.delim);
  logger.fine(""String_Node_Str"" + result);
  String c=(rs[1].matches(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + (rs[1].matches(""String_Node_Str"" + PVob.rx_tag_format + ""String_Node_Str"") ? rs[1] : rs[1] + ""String_Node_Str"" + this.pvob);
  if (rs[2].trim().length() > 0) {
    String s=(rs[2].matches(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + (rs[2].matches(""String_Node_Str"" + PVob.rx_tag_format + ""String_Node_Str"") ? rs[2] : rs[2] + ""String_Node_Str"" + this.pvob);
    this.stream=Stream.get(s);
  }
 else {
    logger.fine(""String_Node_Str"");
  }
  this.component=Component.get(c);
  this.plevel=Project.getPlevelFromString(rs[3]);
  this.user=rs[4];
  try {
    logger.fine(""String_Node_Str"" + rs[5]);
synchronized (dateFormatter) {
      this.date=dateFormatter.parse(rs[5]);
    }
  }
 catch (  ParseException e) {
    logger.fine(""String_Node_Str"" + e.getMessage());
    this.date=null;
  }
  this.labelStatus=getLabelStatusFromString(rs[6]);
  this.mastership=rs[7];
  this.loaded=true;
  return this;
}","/** 
 * Load the Baseline into memory from ClearCase.<br> This function is automatically called when needed by other functions.
 * @throws UnableToLoadEntityException
 * @throws UnableToInitializeEntityException 
 * @throws UCMEntityNotFoundException 
 * @throws UnableToCreateEntityException 
 * @throws UnableToGetEntityException 
 */
@Override public Baseline load() throws UnableToLoadEntityException, UnableToInitializeEntityException {
  String result=""String_Node_Str"";
  String cmd=""String_Node_Str"" + Cool.delim + ""String_Node_Str""+ Cool.delim+ ""String_Node_Str""+ Cool.delim+ ""String_Node_Str""+ Cool.delim+ ""String_Node_Str""+ Cool.delim+ ""String_Node_Str""+ Cool.delim+ ""String_Node_Str""+ Cool.delim+ ""String_Node_Str""+ this;
  try {
    result=Cleartool.run(cmd).stdoutBuffer.toString();
  }
 catch (  Exception e) {
    throw new UnableToLoadEntityException(this,e);
  }
  String[] rs=result.split(UCMEntity.delim);
  logger.fine(""String_Node_Str"" + result);
  String c=(rs[1].matches(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + (rs[1].matches(""String_Node_Str"" + PVob.rx_tag_format + ""String_Node_Str"") ? rs[1] : rs[1] + ""String_Node_Str"" + this.pvob);
  if (rs[2].trim().length() > 0) {
    String s=(rs[2].matches(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + (rs[2].matches(""String_Node_Str"" + PVob.rx_tag_format + ""String_Node_Str"") ? rs[2] : rs[2] + ""String_Node_Str"" + this.pvob);
    this.stream=Stream.get(s);
  }
 else {
    logger.fine(""String_Node_Str"");
  }
  this.component=Component.get(c);
  this.plevel=Project.getPlevelFromString(rs[3]);
  this.user=rs[4];
  try {
    logger.fine(""String_Node_Str"" + rs[5]);
synchronized (dateFormatter) {
      this.date=dateFormatter.parse(rs[5]);
    }
  }
 catch (  ParseException e) {
    logger.fine(""String_Node_Str"" + e.getMessage());
    this.date=null;
  }
  this.labelStatus=getLabelStatusFromString(rs[6]);
  this.mastership=rs[7];
  this.loaded=true;
  return this;
}",0.9974632166412988
44182,"/** 
 * Given a baseline basename, a component and a view, the baseline is created.
 */
public static Baseline create(String basename,Component component,File view,LabelBehaviour labelBehaviour,boolean identical,List<Activity> activities,List<Component> depends) throws UnableToInitializeEntityException, UnableToCreateEntityException, NothingNewException {
  if (basename.toLowerCase().startsWith(""String_Node_Str"")) {
    basename=basename.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  boolean created=false;
  String cmd=""String_Node_Str"" + component.getNormalizedName() + (identical ? ""String_Node_Str"" : ""String_Node_Str"");
  if (depends != null && depends.size() > 0) {
    cmd+=""String_Node_Str"";
    for (    Component c : depends) {
      cmd+=c.getNormalizedName() + ""String_Node_Str"";
    }
    cmd=cmd.substring(0,(cmd.length() - 1));
  }
  if (activities != null) {
    cmd+=""String_Node_Str"";
    for (    Activity a : activities) {
      cmd+=""String_Node_Str"" + a.getFullyQualifiedName() + ""String_Node_Str"";
    }
    cmd=cmd.substring(0,(cmd.length() - 1));
  }
  cmd+=""String_Node_Str"" + labelBehaviour.toArgument();
  cmd+=""String_Node_Str"" + basename;
  try {
    String out=""String_Node_Str"";
    if (view != null) {
      out=Cleartool.run(cmd,view).stdoutBuffer.toString();
    }
 else {
      out=Cleartool.run(cmd).stdoutBuffer.toString();
    }
    logger.fine(""String_Node_Str"" + out);
    created=out.matches(""String_Node_Str"");
  }
 catch (  AbnormalProcessTerminationException e) {
    throw new UnableToCreateEntityException(Baseline.class,e);
  }
  if (created) {
    return get(basename,component.getPVob());
  }
 else {
    throw new NothingNewException(""String_Node_Str"");
  }
}","/** 
 * Given a baseline basename, a component and a view, the baseline is created.
 */
public static Baseline create(String basename,Component component,File view,LabelBehaviour labelBehaviour,boolean identical,List<Activity> activities,List<Component> depends) throws UnableToInitializeEntityException, UnableToCreateEntityException, NothingNewException {
  if (basename.toLowerCase().startsWith(""String_Node_Str"")) {
    basename=basename.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  boolean created=false;
  String cmd=""String_Node_Str"" + component.getNormalizedName() + (identical ? ""String_Node_Str"" : ""String_Node_Str"");
  if (depends != null && depends.size() > 0) {
    cmd+=""String_Node_Str"";
    for (    Component c : depends) {
      cmd+=c.getNormalizedName() + ""String_Node_Str"";
    }
    cmd=cmd.substring(0,(cmd.length() - 1));
  }
  if (activities != null) {
    cmd+=""String_Node_Str"";
    for (    Activity a : activities) {
      cmd+=""String_Node_Str"" + a.getFullyQualifiedName() + ""String_Node_Str"";
    }
    cmd=cmd.substring(0,(cmd.length() - 1));
  }
  cmd+=""String_Node_Str"" + labelBehaviour.toArgument();
  cmd+=""String_Node_Str"" + basename;
  try {
    String out=""String_Node_Str"";
    if (view != null) {
      out=Cleartool.run(cmd,view).stdoutBuffer.toString();
    }
 else {
      out=Cleartool.run(cmd).stdoutBuffer.toString();
    }
    logger.fine(String.format(""String_Node_Str"" + out));
    created=out.matches(""String_Node_Str"");
  }
 catch (  AbnormalProcessTerminationException e) {
    throw new UnableToCreateEntityException(Baseline.class,e);
  }
  if (created) {
    return get(basename,component.getPVob());
  }
 else {
    throw new NothingNewException(""String_Node_Str"");
  }
}",0.9956709956709956
44183,"public String stringify(){
  if (!loaded) {
    try {
      load();
    }
 catch (    ClearCaseException e) {
      throw new EntityNotLoadedException(fqname,fqname + ""String_Node_Str"",e);
    }
  }
  StringBuffer sb=new StringBuffer();
  try {
    if (!this.loaded)     load();
    sb.append(""String_Node_Str"" + this.plevel + linesep);
    sb.append(""String_Node_Str"" + this.component.toString() + linesep);
    sb.append(""String_Node_Str"" + this.stream.toString() + linesep);
    sb.append(""String_Node_Str"" + this.date.toString() + linesep);
  }
 catch (  Exception e) {
  }
 finally {
    sb.insert(0,super.stringify());
  }
  return sb.toString();
}","@Override public String stringify(){
  if (!loaded) {
    try {
      load();
    }
 catch (    ClearCaseException e) {
      throw new EntityNotLoadedException(fqname,fqname + ""String_Node_Str"",e);
    }
  }
  StringBuffer sb=new StringBuffer();
  try {
    if (!this.loaded) {
      load();
    }
    sb.append(""String_Node_Str"" + this.plevel + linesep);
    sb.append(""String_Node_Str"" + this.component.toString() + linesep);
    sb.append(""String_Node_Str"" + this.stream.toString() + linesep);
    sb.append(""String_Node_Str"" + this.date.toString() + linesep);
  }
 catch (  Exception e) {
  }
 finally {
    sb.insert(0,super.stringify());
  }
  return sb.toString();
}",0.9683734939759036
44184,"public String toString(){
  return value + ""String_Node_Str"" + fixed+ ""String_Node_Str"";
}","@Override public String toString(){
  return value + ""String_Node_Str"" + fixed+ ""String_Node_Str"";
}",0.9473684210526316
44185,"/** 
 * Returns a set of tuples from the parsed console input string
 * @param consoleinput
 * @return 
 */
private HashMap<String,Boolean> parseProjectRootFolders(List<String> consoleinput){
  HashMap<String,Boolean> rootFolders=new HashMap<String,Boolean>();
  for (  String s : consoleinput) {
    if (!s.startsWith(""String_Node_Str"")) {
      continue;
    }
    Matcher m=pattern_catcs.matcher(s);
    if (m.matches()) {
      try {
        String key=m.group(2) + m.group(3);
        key=key.substring(1,key.length() - 1);
        logger.info(""String_Node_Str"" + key);
        Boolean readOnly=s.contains(""String_Node_Str"");
        rootFolders.put(key,readOnly);
      }
 catch (      Exception ex) {
        logger.log(Level.SEVERE,""String_Node_Str"" + s,ex);
      }
    }
  }
  return rootFolders;
}","/** 
 * Returns a set of tuples from the parsed console input string
 * @param consoleinput
 * @return 
 */
private HashMap<String,Boolean> parseProjectRootFolders(List<String> consoleinput){
  HashMap<String,Boolean> rootFolders=new HashMap<String,Boolean>();
  for (  String s : consoleinput) {
    if (!s.startsWith(""String_Node_Str"")) {
      continue;
    }
    Matcher m=pattern_catcs.matcher(s);
    if (m.matches()) {
      try {
        String key=m.group(2) + m.group(3);
        key=key.substring(1,key.length() - 1);
        key=key.replace(""String_Node_Str"",""String_Node_Str"");
        logger.info(""String_Node_Str"" + key);
        Boolean readOnly=s.contains(""String_Node_Str"");
        rootFolders.put(key,readOnly);
      }
 catch (      Exception ex) {
        logger.log(Level.SEVERE,""String_Node_Str"" + s,ex);
      }
    }
  }
  return rootFolders;
}",0.9630512514898688
44186,"/** 
 * Load the Activity into memory from ClearCase.<br> This function is automatically called when needed by other functions.
 * @return 
 * @throws UnableToLoadEntityException
 */
public Activity load() throws UnableToLoadEntityException {
  String[] result=new String[2];
  if (isSpecialCase()) {
    result[0]=""String_Node_Str"";
    result[1]=""String_Node_Str"";
  }
 else {
    String cmd=""String_Node_Str"" + this;
    try {
      String line=Cleartool.run(cmd).stdoutBuffer.toString();
      result=line.split(""String_Node_Str"");
    }
 catch (    AbnormalProcessTerminationException e) {
      throw new UnableToLoadEntityException(this,e);
    }
  }
  setUser(result[0].trim());
  headline=result[1].trim();
  return this;
}","/** 
 * Load the Activity into memory from ClearCase.<br> This function is automatically called when needed by other functions.
 * @return 
 * @throws UnableToLoadEntityException
 */
public Activity load() throws UnableToLoadEntityException {
  String[] result=new String[2];
  if (isSpecialCase()) {
    result[0]=""String_Node_Str"";
    result[1]=""String_Node_Str"";
  }
 else {
    String cmd=""String_Node_Str"" + this;
    try {
      String line=Cleartool.run(cmd).stdoutBuffer.toString();
      result=line.split(""String_Node_Str"");
    }
 catch (    AbnormalProcessTerminationException e) {
      throw new UnableToLoadEntityException(this,e);
    }
  }
  setUser(result[0].trim());
  headline=result[1].trim();
  this.loaded=true;
  return this;
}",0.9865229110512128
44187,"public Version load() throws UnableToLoadEntityException {
  try {
    String cmd=""String_Node_Str"" + this + ""String_Node_Str"";
    String[] list=Cleartool.run(cmd).stdoutBuffer.toString().split(""String_Node_Str"");
    logger.finest(""String_Node_Str"" + Arrays.asList(list));
    setUser(list[0]);
    String vn=list[1];
    String ven=list[2];
    Matcher m=rx_extendedName.matcher(ven);
    if (list[3].equals(""String_Node_Str"")) {
      setKind(Kind.FILE_ELEMENT);
    }
 else     if (list[3].equals(""String_Node_Str"")) {
      setKind(Kind.DIRECTORY_ELEMENT);
    }
    activity=getActivity(this);
  }
 catch (  Exception e) {
    throw new UnableToLoadEntityException(this,e);
  }
  return this;
}","public Version load() throws UnableToLoadEntityException {
  try {
    String cmd=""String_Node_Str"" + this + ""String_Node_Str"";
    String[] list=Cleartool.run(cmd).stdoutBuffer.toString().split(""String_Node_Str"");
    logger.finest(""String_Node_Str"" + Arrays.asList(list));
    setUser(list[0]);
    String vn=list[1];
    String ven=list[2];
    Matcher m=rx_extendedName.matcher(ven);
    if (list[3].equals(""String_Node_Str"")) {
      setKind(Kind.FILE_ELEMENT);
    }
 else     if (list[3].equals(""String_Node_Str"")) {
      setKind(Kind.DIRECTORY_ELEMENT);
    }
    activity=getActivity(this);
  }
 catch (  Exception e) {
    throw new UnableToLoadEntityException(this,e);
  }
  this.loaded=true;
  return this;
}",0.9817158931082982
44188,"public Stream load() throws UCMEntityNotFoundException, UnableToLoadEntityException, UnableToInitializeEntityException {
  logger.fine(""String_Node_Str"");
  String rawdata=""String_Node_Str"";
  String cmd=""String_Node_Str"" + this;
  try {
    rawdata=Cleartool.run(cmd).stdoutBuffer.toString();
  }
 catch (  AbnormalProcessTerminationException e) {
    if (e.getMessage().matches(rx_stream_load)) {
      throw new UCMEntityNotFoundException(this,e);
    }
 else {
      throw new UnableToLoadEntityException(this,e);
    }
  }
  String[] data=rawdata.split(""String_Node_Str"");
  logger.fine(""String_Node_Str"" + data);
  setProject(Project.get(data[1]));
  if (!data[2].trim().equals(""String_Node_Str"")) {
    try {
      defaultTarget=Stream.get(data[2].trim());
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  if (data[3].length() > 0) {
    setReadOnly(true);
  }
 else {
    setReadOnly(false);
  }
  try {
    String[] blss=data[4].split(""String_Node_Str"");
    for (    String bls : blss) {
      addFoundationBaseline(Baseline.get(bls));
    }
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
  }
  try {
    String ms=data[5].trim();
    this.mastership=ms;
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
  }
  this.loaded=true;
  return this;
}","public Stream load() throws UCMEntityNotFoundException, UnableToLoadEntityException, UnableToInitializeEntityException {
  logger.fine(""String_Node_Str"");
  String rawdata=""String_Node_Str"";
  String cmd=""String_Node_Str"" + this;
  try {
    rawdata=Cleartool.run(cmd).stdoutBuffer.toString();
  }
 catch (  AbnormalProcessTerminationException e) {
    if (e.getMessage().matches(rx_stream_load)) {
      throw new UCMEntityNotFoundException(this,e);
    }
 else {
      throw new UnableToLoadEntityException(this,e);
    }
  }
  String[] data=rawdata.split(""String_Node_Str"");
  logger.fine(""String_Node_Str"" + Arrays.asList(data));
  setProject(Project.get(data[1]));
  if (!data[2].trim().equals(""String_Node_Str"")) {
    try {
      defaultTarget=Stream.get(data[2].trim());
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  if (data[3].length() > 0) {
    setReadOnly(true);
  }
 else {
    setReadOnly(false);
  }
  try {
    String[] blss=data[4].split(""String_Node_Str"");
    for (    String bls : blss) {
      addFoundationBaseline(Baseline.get(bls));
    }
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
  }
  try {
    String ms=data[5].trim();
    this.mastership=ms;
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
  }
  this.loaded=true;
  return this;
}",0.9916937522571324
44189,"public Stream load() throws UCMEntityNotFoundException, UnableToLoadEntityException, UnableToInitializeEntityException {
  logger.fine(""String_Node_Str"");
  String rawdata=""String_Node_Str"";
  String cmd=""String_Node_Str"" + this;
  try {
    rawdata=Cleartool.run(cmd).stdoutBuffer.toString();
  }
 catch (  AbnormalProcessTerminationException e) {
    if (e.getMessage().matches(rx_stream_load)) {
      throw new UCMEntityNotFoundException(this,e);
    }
 else {
      throw new UnableToLoadEntityException(this,e);
    }
  }
  String[] data=rawdata.split(""String_Node_Str"");
  logger.fine(""String_Node_Str"" + data);
  setProject(Project.get(data[1]));
  if (!data[2].trim().equals(""String_Node_Str"")) {
    try {
      setDefaultTarget(Stream.get(data[2].trim()));
    }
 catch (    Exception e) {
      logger.fine(""String_Node_Str"");
    }
  }
  if (data[3].length() > 0) {
    setReadOnly(true);
  }
 else {
    setReadOnly(false);
  }
  try {
    String[] blss=data[4].split(""String_Node_Str"");
    for (    String bls : blss) {
      addFoundationBaseline(Baseline.get(bls));
    }
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
  }
  try {
    String ms=data[5].trim();
    this.mastership=ms;
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
  }
  this.loaded=true;
  return this;
}","public Stream load() throws UCMEntityNotFoundException, UnableToLoadEntityException, UnableToInitializeEntityException {
  logger.fine(""String_Node_Str"");
  String rawdata=""String_Node_Str"";
  String cmd=""String_Node_Str"" + this;
  try {
    rawdata=Cleartool.run(cmd).stdoutBuffer.toString();
  }
 catch (  AbnormalProcessTerminationException e) {
    if (e.getMessage().matches(rx_stream_load)) {
      throw new UCMEntityNotFoundException(this,e);
    }
 else {
      throw new UnableToLoadEntityException(this,e);
    }
  }
  String[] data=rawdata.split(""String_Node_Str"");
  logger.fine(""String_Node_Str"" + data);
  setProject(Project.get(data[1]));
  if (!data[2].trim().equals(""String_Node_Str"")) {
    try {
      defaultTarget=Stream.get(data[2].trim());
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  if (data[3].length() > 0) {
    setReadOnly(true);
  }
 else {
    setReadOnly(false);
  }
  try {
    String[] blss=data[4].split(""String_Node_Str"");
    for (    String bls : blss) {
      addFoundationBaseline(Baseline.get(bls));
    }
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
  }
  try {
    String ms=data[5].trim();
    this.mastership=ms;
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
  }
  this.loaded=true;
  return this;
}",0.976303317535545
44190,"public boolean deliver(boolean force,boolean complete,boolean abort,boolean resume) throws DeliverException, CleartoolException {
  try {
    return _deliver(force,complete,abort,false);
  }
 catch (  DeliverException e) {
    if (e.getType().equals(Type.DELIVER_IN_PROGRESS)) {
      String status=getStatus(stream);
      if (status.replace(System.getProperty(""String_Node_Str""),""String_Node_Str"").contains(""String_Node_Str"")) {
        try {
          return deliver(force,complete,abort,true);
        }
 catch (        DeliverException e1) {
          logger.warning(""String_Node_Str"" + e1.getMessage());
          throw e1;
        }
      }
 else {
        throw e;
      }
    }
    throw e;
  }
}","public boolean deliver(boolean force,boolean complete,boolean abort,boolean resume) throws DeliverException, CleartoolException {
  logger.debug(""String_Node_Str"" + baseline + ""String_Node_Str""+ stream+ ""String_Node_Str""+ target+ ""String_Node_Str""+ context+ ""String_Node_Str""+ viewtag);
  try {
    return _deliver(force,complete,abort,false);
  }
 catch (  DeliverException e) {
    if (e.getType().equals(Type.DELIVER_IN_PROGRESS)) {
      String status=getStatus(stream);
      if (status.replace(System.getProperty(""String_Node_Str""),""String_Node_Str"").contains(""String_Node_Str"")) {
        logger.debug(""String_Node_Str"");
        try {
          return _deliver(force,complete,abort,true);
        }
 catch (        DeliverException e1) {
          logger.warning(""String_Node_Str"" + e1.getMessage());
          throw e1;
        }
      }
 else {
        throw e;
      }
    }
    throw e;
  }
}",0.8763206960845246
44191,"public Deliver complete() throws DeliverException {
  String cmd=""String_Node_Str"";
  try {
    Cleartool.run(cmd,context);
    return this;
  }
 catch (  Exception e) {
    throw new DeliverException(this,Type.UNABLE_TO_COMPLETE,e);
  }
}","public Deliver complete() throws DeliverException {
  String cmd=""String_Node_Str"";
  cmd+=(baseline != null ? ""String_Node_Str"" + baseline : ""String_Node_Str"");
  cmd+=(stream != null ? ""String_Node_Str"" + stream : ""String_Node_Str"");
  cmd+=(target != null ? ""String_Node_Str"" + target : ""String_Node_Str"");
  cmd+=(viewtag != null ? ""String_Node_Str"" + viewtag : ""String_Node_Str"");
  try {
    Cleartool.run(cmd,context);
    return this;
  }
 catch (  Exception e) {
    throw new DeliverException(this,Type.UNABLE_TO_COMPLETE,e);
  }
}",0.6128205128205129
44192,"private boolean _deliver(boolean force,boolean complete,boolean abort,boolean resume) throws DeliverException {
  logger.debug(""String_Node_Str"" + baseline + ""String_Node_Str""+ stream+ ""String_Node_Str""+ target+ ""String_Node_Str""+ context+ ""String_Node_Str""+ viewtag);
  String result=""String_Node_Str"";
  String cmd=""String_Node_Str"" + (force ? ""String_Node_Str"" : ""String_Node_Str"") + (complete ? ""String_Node_Str"" : ""String_Node_Str"")+ (abort ? ""String_Node_Str"" : ""String_Node_Str"");
  cmd+=(baseline != null ? ""String_Node_Str"" + baseline : ""String_Node_Str"");
  cmd+=(stream != null ? ""String_Node_Str"" + stream : ""String_Node_Str"");
  cmd+=(target != null ? ""String_Node_Str"" + target : ""String_Node_Str"");
  cmd+=(viewtag != null ? ""String_Node_Str"" + viewtag : ""String_Node_Str"");
  try {
    result=Cleartool.run(cmd,context,true).stdoutBuffer.toString();
  }
 catch (  AbnormalProcessTerminationException e) {
    logger.warning(""String_Node_Str"" + target + ""String_Node_Str""+ e.getMessage());
    logger.warning(e);
    logger.warning(""String_Node_Str"");
    if (e.getMessage().replace(System.getProperty(""String_Node_Str""),""String_Node_Str"").contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.REQUIRES_REBASE,e);
    }
 else     if (e.getMessage().replace(System.getProperty(""String_Node_Str""),""String_Node_Str"").contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.MERGE_ERROR,e);
    }
 else     if (e.getMessage().replace(System.getProperty(""String_Node_Str""),""String_Node_Str"").contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.INTERPROJECT_DELIVER_DENIED,e);
    }
 else     if (e.getMessage().replace(System.getProperty(""String_Node_Str""),""String_Node_Str"").contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.DELIVER_IN_PROGRESS,e);
    }
 else     if (e.getMessage().contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.DELIVER_IN_PROGRESS,e);
    }
    if (e.getMessage().matches(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.DELIVER_IN_PROGRESS,e);
    }
    Matcher m2=rx_checkProgress.matcher(e.getMessage());
    if (m2.find()) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.DELIVER_IN_PROGRESS,e);
    }
    if (e.getMessage().contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.DELIVER_IN_PROGRESS,e);
    }
    Matcher m=rx_checkMergeError.matcher(e.getMessage());
    if (m.find()) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.DELIVER_IN_PROGRESS,e);
    }
    m=rx_checkDeliverDenied.matcher(e.getMessage());
    if (m.find()) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.INTERPROJECT_DELIVER_DENIED,e);
    }
    throw new DeliverException(this,Type.UNKNOWN,e);
  }
  if (baseline != null) {
    Matcher m=rx_deliver_find_baseline.matcher(result);
    if (!m.find()) {
      return false;
    }
  }
  if (baseline == null) {
    Matcher m=rx_deliver_find_nobaseline.matcher(result);
    if (!m.find()) {
      return false;
    }
  }
  return true;
}","private boolean _deliver(boolean force,boolean complete,boolean abort,boolean resume) throws DeliverException {
  String result=""String_Node_Str"";
  String cmd=""String_Node_Str"" + (force ? ""String_Node_Str"" : ""String_Node_Str"") + (complete ? ""String_Node_Str"" : ""String_Node_Str"")+ (abort ? ""String_Node_Str"" : ""String_Node_Str"")+ (resume ? ""String_Node_Str"" : ""String_Node_Str"");
  if (!resume)   cmd+=(baseline != null ? ""String_Node_Str"" + baseline : ""String_Node_Str"");
  cmd+=(stream != null ? ""String_Node_Str"" + stream : ""String_Node_Str"");
  if (!resume)   cmd+=(target != null ? ""String_Node_Str"" + target : ""String_Node_Str"");
  cmd+=(viewtag != null ? ""String_Node_Str"" + viewtag : ""String_Node_Str"");
  try {
    result=Cleartool.run(cmd,context,true).stdoutBuffer.toString();
  }
 catch (  AbnormalProcessTerminationException e) {
    logger.warning(""String_Node_Str"" + target + ""String_Node_Str""+ e.getMessage());
    logger.warning(e);
    logger.warning(""String_Node_Str"");
    if (e.getMessage().replace(System.getProperty(""String_Node_Str""),""String_Node_Str"").contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.REQUIRES_REBASE,e);
    }
 else     if (e.getMessage().replace(System.getProperty(""String_Node_Str""),""String_Node_Str"").contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.MERGE_ERROR,e);
    }
 else     if (e.getMessage().replace(System.getProperty(""String_Node_Str""),""String_Node_Str"").contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.INTERPROJECT_DELIVER_DENIED,e);
    }
 else     if (e.getMessage().replace(System.getProperty(""String_Node_Str""),""String_Node_Str"").contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.DELIVER_IN_PROGRESS,e);
    }
 else     if (e.getMessage().contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.DELIVER_IN_PROGRESS,e);
    }
    if (e.getMessage().matches(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.DELIVER_IN_PROGRESS,e);
    }
    Matcher m2=rx_checkProgress.matcher(e.getMessage());
    if (m2.find()) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.DELIVER_IN_PROGRESS,e);
    }
    if (e.getMessage().contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.DELIVER_IN_PROGRESS,e);
    }
    Matcher m=rx_checkMergeError.matcher(e.getMessage());
    if (m.find()) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.DELIVER_IN_PROGRESS,e);
    }
    m=rx_checkDeliverDenied.matcher(e.getMessage());
    if (m.find()) {
      logger.warning(""String_Node_Str"");
      throw new DeliverException(this,Type.INTERPROJECT_DELIVER_DENIED,e);
    }
    throw new DeliverException(this,Type.UNKNOWN,e);
  }
  if (baseline != null) {
    Matcher m=rx_deliver_find_baseline.matcher(result);
    if (!m.find()) {
      return false;
    }
  }
  if (baseline == null) {
    Matcher m=rx_deliver_find_nobaseline.matcher(result);
    if (!m.find()) {
      return false;
    }
  }
  return true;
}",0.9031878948141618
44193,"public List<Baseline> getPostedBaselinesFor(Component component) throws UnableToInitializeEntityException, UnableToListBaselinesException {
  logger.debug(""String_Node_Str"" + this.getFullyQualifiedName() + ""String_Node_Str""+ component.getFullyQualifiedName());
  List<String> bls_str=null;
  String cmd=""String_Node_Str"" + this.getFullyQualifiedName();
  try {
    bls_str=Cleartool.run(cmd).stdoutList;
  }
 catch (  AbnormalProcessTerminationException e) {
    throw new UnableToListBaselinesException(getStream(),component,getPromotionLevel(true),e);
  }
  logger.debug(""String_Node_Str"" + bls_str.size() + ""String_Node_Str"");
  List<Baseline> bls=new ArrayList<Baseline>();
  int c=0;
  for (  String bl : bls_str) {
    logger.debug(""String_Node_Str"" + bl);
    logger.debug(""String_Node_Str"" + getStream().getFullyQualifiedName());
    Baseline b=Baseline.get(bl,getStream().getPVob());
    logger.debug(""String_Node_Str"" + b.getFullyQualifiedName() + ""String_Node_Str""+ b.getComponent().getFullyQualifiedName());
    logger.debug(""String_Node_Str"" + component.getFullyQualifiedName());
    logger.debug(""String_Node_Str"" + b.getComponent().getFullyQualifiedName());
    if (b.getComponent().equals(component))     bls.add(b);
    c++;
  }
  return bls;
}","public List<Baseline> getPostedBaselinesFor(Component component) throws UnableToInitializeEntityException, UnableToListBaselinesException, UnableToLoadEntityException {
  logger.debug(""String_Node_Str"" + this.getFullyQualifiedName() + ""String_Node_Str""+ component.getFullyQualifiedName());
  List<String> bls_str=null;
  String cmd=""String_Node_Str"" + this.getFullyQualifiedName();
  try {
    bls_str=Cleartool.run(cmd,null,false).stdoutList;
  }
 catch (  AbnormalProcessTerminationException e) {
    throw new UnableToListBaselinesException(getStream(),component,getPromotionLevel(true),e);
  }
  List<Baseline> bls=new ArrayList<Baseline>();
  for (  String bl_lines : bls_str) {
    logger.debug(""String_Node_Str"" + bl_lines);
    String[] baselines=bl_lines.split(""String_Node_Str"");
    logger.debug(""String_Node_Str"" + baselines.length + ""String_Node_Str"");
    for (    String bl : baselines) {
      logger.debug(""String_Node_Str"" + bl);
      Baseline b=Baseline.get(bl).load();
      logger.debug(""String_Node_Str"" + b.getFullyQualifiedName() + ""String_Node_Str""+ b.getComponent().getFullyQualifiedName());
      logger.debug(""String_Node_Str"" + component.getFullyQualifiedName());
      logger.debug(""String_Node_Str"" + b.getComponent().getFullyQualifiedName());
      if (b.getComponent().equals(component))       bls.add(b);
    }
  }
  return bls;
}",0.693069306930693
44194,"@Override public void tearDown() throws Exception {
  coolTest.tearDown();
  try {
    super.tearDown();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + super.jenkins.getRootDir());
    FileUtils.deleteDirectory(super.jenkins.getRootDir());
  }
}","@Override public void tearDown() throws Exception {
  coolTest.tearDown();
  try {
    super.tearDown();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + super.jenkins.getRootDir());
    try {
      FileUtils.forceDelete(super.jenkins.getRootDir());
    }
 catch (    IOException ioex) {
      System.out.println(""String_Node_Str"");
    }
  }
}",0.6970172684458399
44195,"@Override public void parse(Element e,Context context) throws ClearCaseException {
  String name=e.getAttribute(""String_Node_Str"");
  String label=e.getAttribute(""String_Node_Str"");
  String identical=e.getAttribute(""String_Node_Str"");
  String comment=e.getAttribute(""String_Node_Str"").length() > 0 ? e.getAttribute(""String_Node_Str"") : null;
  PVob pvob=new PVob(Cool.filesep + getValue(""String_Node_Str"",e,context));
  Component component=Component.get(e.getAttribute(""String_Node_Str""),pvob);
  Element c=getFirstElement(e,""String_Node_Str"");
  List<Component> components=null;
  try {
    components=new ArrayList<Component>();
    for (    Element c2 : getElements(c)) {
      PVob bpvob=new PVob(Cool.filesep + getValue(""String_Node_Str"",c2,context));
      components.add(Component.get(c2.getAttribute(""String_Node_Str""),bpvob));
    }
  }
 catch (  Exception e1) {
  }
  Baseline.create(name,component,context.path,LabelBehaviour.valueOf(label),identical.length() > 0,null,components);
}","@Override public void parse(Element e,Context context) throws ClearCaseException {
  String name=e.getAttribute(""String_Node_Str"");
  String label=e.getAttribute(""String_Node_Str"");
  String identical=e.getAttribute(""String_Node_Str"");
  String comment=e.getAttribute(""String_Node_Str"").length() > 0 ? e.getAttribute(""String_Node_Str"") : null;
  PVob pvob=new PVob(Cool.filesep + getValue(""String_Node_Str"",e,context));
  Component component=Component.get(e.getAttribute(""String_Node_Str""),pvob);
  List<Component> components=null;
  try {
    Element c=getFirstElement(e,""String_Node_Str"");
    components=new ArrayList<Component>();
    for (    Element c2 : getElements(c)) {
      PVob bpvob=new PVob(Cool.filesep + getValue(""String_Node_Str"",c2,context));
      components.add(Component.get(c2.getAttribute(""String_Node_Str""),bpvob));
    }
  }
 catch (  Exception e1) {
  }
  Baseline.create(name,component,context.path,LabelBehaviour.valueOf(label),identical.length() > 0,null,components);
}",0.9488465396188566
44196,"@Override public void parse(Element e,Context context) throws ClearCaseException {
  File file=new File(e.getAttribute(""String_Node_Str""));
  if (!file.exists()) {
    try {
      file.createNewFile();
    }
 catch (    IOException e1) {
      throw new ClearCaseException(e1);
    }
  }
  Version.addToSourceControl(file,file.isDirectory(),context.path);
}","@Override public void parse(Element e,Context context) throws ClearCaseException {
  File file=new File(context.path,e.getAttribute(""String_Node_Str""));
  if (!file.exists()) {
    try {
      file.createNewFile();
    }
 catch (    IOException e1) {
      throw new ClearCaseException(e1);
    }
  }
  Version.addToSourceControl(file,file.isDirectory(),context.path);
}",0.9821182943603852
44197,"@Override public void parse(Element e,Context context) throws ClearCaseException {
  File file=new File(e.getAttribute(""String_Node_Str""));
  String content=e.getAttribute(""String_Node_Str"");
  try {
    FileWriter fw=new FileWriter(file);
    fw.write(content);
  }
 catch (  IOException e1) {
    throw new ClearCaseException(e1);
  }
}","@Override public void parse(Element e,Context context) throws ClearCaseException {
  File file=new File(context.path,e.getAttribute(""String_Node_Str""));
  String content=e.getAttribute(""String_Node_Str"");
  try {
    FileWriter fw=new FileWriter(file);
    fw.write(content);
  }
 catch (  IOException e1) {
    throw new ClearCaseException(e1);
  }
}",0.981132075471698
44198,"@Override public void parse(Element e,Context context) throws ClearCaseException {
  String name=e.getAttribute(""String_Node_Str"");
  String comment=e.getAttribute(""String_Node_Str"").length() > 0 ? e.getAttribute(""String_Node_Str"") : null;
  String model=e.getAttribute(""String_Node_Str"");
  PVob pvob=new PVob(Cool.filesep + getValue(""String_Node_Str"",e,context));
  String in=getValue(""String_Node_Str"",e,context).length() > 0 ? getValue(""String_Node_Str"",e,context) : null;
  List<Component> components=null;
  try {
    Element c=getFirstElement(e,""String_Node_Str"");
    components=new ArrayList<Component>();
    for (    Element component : getElements(c)) {
      PVob cpvob=new PVob(Cool.filesep + getValue(""String_Node_Str"",component,context));
      components.add(Component.get(component.getAttribute(""String_Node_Str""),cpvob));
    }
  }
 catch (  Exception e1) {
  }
  int policy=0;
  try {
    Element ps=getFirstElement(e,""String_Node_Str"");
    for (    Element p : getElements(ps)) {
      policy+=Project.getPolicyValue(p.getTextContent());
    }
  }
 catch (  Exception e1) {
  }
  Project.create(name,in,pvob,policy,comment,model.length() > 0,components);
}","@Override public void parse(Element e,Context context) throws ClearCaseException {
  String name=e.getAttribute(""String_Node_Str"");
  String comment=e.getAttribute(""String_Node_Str"").length() > 0 ? e.getAttribute(""String_Node_Str"") : null;
  String model=e.getAttribute(""String_Node_Str"");
  PVob pvob=new PVob(Cool.filesep + getValue(""String_Node_Str"",e,context));
  String in=getValue(""String_Node_Str"",e,context).length() > 0 ? getValue(""String_Node_Str"",e,context) : null;
  List<Component> components=null;
  try {
    Element c=getFirstElement(e,""String_Node_Str"");
    components=new ArrayList<Component>();
    for (    Element component : getElements(c)) {
      PVob cpvob=new PVob(Cool.filesep + getValue(""String_Node_Str"",component,context));
      components.add(Component.get(component.getAttribute(""String_Node_Str""),cpvob));
    }
  }
 catch (  Exception e1) {
  }
  int policy=0;
  try {
    Element ps=getFirstElement(e,""String_Node_Str"");
    for (    Element p : getElements(ps)) {
      policy+=Project.getPolicyValue(p.getTextContent());
    }
  }
 catch (  Exception e1) {
  }
  Project.create(name,in,pvob,policy,comment,model.length() == 0,components);
}",0.9987271955876114
44199,"public static SnapshotView createView(PrintStream logger,Stream stream,String loadModule,File viewroot,String viewtag,boolean update) throws IOException, ViewException, CleartoolException, UCMEntityNotFoundException, UnableToCreateEntityException, UnableToGetEntityException, UnableToLoadEntityException {
  SnapshotView snapview=null;
  logger.println(""String_Node_Str"" + viewroot.getAbsolutePath());
  logger.println(""String_Node_Str"" + viewtag);
  boolean pathExists=false;
  if (viewroot.exists()) {
    pathExists=true;
    logger.println(""String_Node_Str"");
  }
 else {
    if (!viewroot.mkdir()) {
      throw new ViewException(""String_Node_Str"",viewroot.getAbsolutePath(),Type.CREATION_FAILED,null);
    }
  }
  logger.println(""String_Node_Str"");
  if (UCMView.viewExists(viewtag)) {
    logger.println(""String_Node_Str"");
    try {
      String vt=SnapshotView.viewrootIsValid(viewroot);
      logger.println(""String_Node_Str"" + vt);
      if (!vt.equals(viewtag) && pathExists) {
        logger.println(""String_Node_Str"" + vt);
        FilePath path=new FilePath(viewroot);
        logger.println(""String_Node_Str"" + path);
        try {
          path.deleteRecursive();
        }
 catch (        Exception e) {
          throw new ViewException(""String_Node_Str"",viewroot.getAbsolutePath(),Type.CREATION_FAILED,e);
        }
        return createView(logger,stream,loadModule,viewroot,viewtag);
      }
    }
 catch (    ClearCaseException e) {
      try {
        logger.println(""String_Node_Str"");
        SnapshotView.end(viewtag);
        SnapshotView.regenerateViewDotDat(viewroot,viewtag);
      }
 catch (      ClearCaseException e1) {
        throw new ViewException(""String_Node_Str"",viewroot.getAbsolutePath(),Type.CREATION_FAILED,e1);
      }
    }
catch (    Exception e) {
      logger.println(""String_Node_Str"" + e.getMessage());
      throw new ViewException(""String_Node_Str"",viewroot.getAbsolutePath(),Type.CREATION_FAILED,e);
    }
    logger.println(""String_Node_Str"");
    snapview=UCMView.getSnapshotView(viewroot);
  }
 else {
    logger.println(""String_Node_Str"");
    snapview=SnapshotView.create(stream,viewroot,viewtag);
    logger.println(""String_Node_Str"" + viewroot.getAbsolutePath());
  }
  if (update) {
    logger.println(""String_Node_Str"" + loadModule.toLowerCase() + ""String_Node_Str"");
    LoadRules lr=new LoadRules(snapview,Components.valueOf(loadModule.toUpperCase()));
    snapview.Update(true,true,true,false,lr);
  }
  return snapview;
}","public static SnapshotView createView(PrintStream logger,Stream stream,String loadModule,File viewroot,String viewtag,boolean update) throws ViewException, UnableToInitializeEntityException, CleartoolException, IOException, UnableToLoadEntityException {
  SnapshotView snapview=null;
  logger.println(""String_Node_Str"" + viewroot.getAbsolutePath());
  logger.println(""String_Node_Str"" + viewtag);
  boolean pathExists=false;
  if (viewroot.exists()) {
    pathExists=true;
    logger.println(""String_Node_Str"");
  }
 else {
    if (!viewroot.mkdir()) {
      throw new ViewException(""String_Node_Str"",viewroot.getAbsolutePath(),Type.CREATION_FAILED,null);
    }
  }
  logger.println(""String_Node_Str"");
  if (UCMView.viewExists(viewtag)) {
    logger.println(""String_Node_Str"");
    try {
      String vt=SnapshotView.viewrootIsValid(viewroot);
      logger.println(""String_Node_Str"" + vt);
      if (!vt.equals(viewtag) && pathExists) {
        logger.println(""String_Node_Str"" + vt);
        FilePath path=new FilePath(viewroot);
        logger.println(""String_Node_Str"" + path);
        try {
          path.deleteRecursive();
        }
 catch (        Exception e) {
          throw new ViewException(""String_Node_Str"",viewroot.getAbsolutePath(),Type.CREATION_FAILED,e);
        }
        return createView(logger,stream,loadModule,viewroot,viewtag);
      }
    }
 catch (    ClearCaseException e) {
      try {
        logger.println(""String_Node_Str"");
        SnapshotView.end(viewtag);
        SnapshotView.regenerateViewDotDat(viewroot,viewtag);
      }
 catch (      ClearCaseException e1) {
        throw new ViewException(""String_Node_Str"",viewroot.getAbsolutePath(),Type.CREATION_FAILED,e1);
      }
    }
catch (    Exception e) {
      logger.println(""String_Node_Str"" + e.getMessage());
      throw new ViewException(""String_Node_Str"",viewroot.getAbsolutePath(),Type.CREATION_FAILED,e);
    }
    logger.println(""String_Node_Str"");
    snapview=SnapshotView.get(viewroot);
  }
 else {
    logger.println(""String_Node_Str"");
    snapview=SnapshotView.create(stream,viewroot,viewtag);
    logger.println(""String_Node_Str"" + viewroot.getAbsolutePath());
  }
  if (update) {
    logger.println(""String_Node_Str"" + loadModule.toLowerCase() + ""String_Node_Str"");
    LoadRules lr=new LoadRules(snapview,Components.valueOf(loadModule.toUpperCase()));
    snapview.Update(true,true,true,false,lr);
  }
  return snapview;
}",0.9563096931517984
44200,"/** 
 * Load the Baseline into memory from ClearCase.<br> This function is automatically called when needed by other functions.
 */
public void load() throws UCMException {
  logger.debug(""String_Node_Str"");
  String[] rs=context.loadBaseline(this);
  String c=(rs[1].matches(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + (rs[1].matches(""String_Node_Str"") ? rs[1] : rs[1] + ""String_Node_Str"" + this.pvob);
  logger.debug(""String_Node_Str"" + c);
  if (rs[2].trim().length() > 0) {
    String s=(rs[2].matches(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + (rs[2].matches(""String_Node_Str"") ? rs[2] : rs[2] + ""String_Node_Str"" + this.pvob);
    logger.debug(""String_Node_Str"" + s);
    this.stream=(Stream)UCMEntity.getEntity(s);
  }
 else {
    logger.warning(""String_Node_Str"");
  }
  this.component=(Component)UCMEntity.getEntity(c);
  this.plevel=Project.getPlevelFromString(rs[3]);
  this.user=rs[4];
  try {
    this.date=dateFormatter.parse(rs[5]);
  }
 catch (  ParseException e) {
    this.date=null;
  }
  this.labelStatus=getLabelStatusFromString(rs[6]);
  activities=new ArrayList<Activity>();
  this.loaded=true;
}","/** 
 * Load the Baseline into memory from ClearCase.<br> This function is automatically called when needed by other functions.
 */
public void load() throws UCMException {
  logger.debug(""String_Node_Str"");
  String[] rs=context.loadBaseline(this);
  String c=(rs[1].matches(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + (rs[1].matches(""String_Node_Str"") ? rs[1] : rs[1] + ""String_Node_Str"" + this.pvob);
  if (rs[2].trim().length() > 0) {
    String s=(rs[2].matches(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + (rs[2].matches(""String_Node_Str"") ? rs[2] : rs[2] + ""String_Node_Str"" + this.pvob);
    this.stream=(Stream)UCMEntity.getEntity(s);
  }
 else {
    logger.warning(""String_Node_Str"");
  }
  this.component=(Component)UCMEntity.getEntity(c);
  this.plevel=Project.getPlevelFromString(rs[3]);
  this.user=rs[4];
  try {
    this.date=dateFormatter.parse(rs[5]);
  }
 catch (  ParseException e) {
    logger.debug(""String_Node_Str"" + e.getMessage());
    this.date=null;
  }
  this.labelStatus=getLabelStatusFromString(rs[6]);
  activities=new ArrayList<Activity>();
  this.loaded=true;
}",0.9413823272090988
44201,"public String stringify() throws UCMException {
  if (!this.loaded) {
    load();
  }
  StringBuffer sb=new StringBuffer();
  sb.append(super.stringify());
  sb.append(""String_Node_Str"" + this.plevel + linesep);
  sb.append(""String_Node_Str"" + this.component.toString() + linesep);
  sb.append(""String_Node_Str"" + this.stream.toString() + linesep);
  return sb.toString();
}","public String stringify() throws UCMException {
  if (!this.loaded) {
    load();
  }
  StringBuffer sb=new StringBuffer();
  sb.append(super.stringify());
  sb.append(""String_Node_Str"" + this.plevel + linesep);
  sb.append(""String_Node_Str"" + this.component.toString() + linesep);
  sb.append(""String_Node_Str"" + this.stream.toString() + linesep);
  sb.append(""String_Node_Str"" + this.date.toString() + linesep);
  return sb.toString();
}",0.9200492004920048
44202,"/** 
 * Returns a string representation of the entity object
 * @return A String
 * @throws UCMException
 */
public String stringify() throws UCMException {
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"" + this.fqname + ""String_Node_Str""+ linesep);
  sb.append(""String_Node_Str"" + this.shortname + linesep);
  if (!this.type.equals(ClearcaseEntityType.Version)) {
    sb.append(""String_Node_Str"" + this.pvob + linesep);
  }
  sb.append(""String_Node_Str"" + this.type + linesep);
  return sb.toString();
}","/** 
 * Returns a string representation of the entity object
 * @return A String
 * @throws UCMException
 */
public String stringify() throws UCMException {
  StringBuffer sb=new StringBuffer();
  sb.append(this.fqname + ""String_Node_Str"" + linesep);
  sb.append(""String_Node_Str"" + this.shortname + linesep);
  if (!this.type.equals(ClearcaseEntityType.Version)) {
    sb.append(""String_Node_Str"" + this.pvob + linesep);
  }
  sb.append(""String_Node_Str"" + this.type + linesep);
  return sb.toString();
}",0.9543245869776482
44203,"public static void main(String[] args) throws UCMException, IOException {
  if (args.length < 2) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  File path=new File(args[0]);
  File devpath=new File(path,""String_Node_Str"");
  File intpath=new File(path,""String_Node_Str"");
  path.mkdirs();
  String name=args[1];
  File path2=new File(path,""String_Node_Str"" + name + ""String_Node_Str"");
  UCM.setContext(UCM.ContextType.CLEARTOOL);
  Logger logger=PraqmaLogger.getLogger(false);
  logger.subscribeAll();
  logger.setLocalLog(new File(""String_Node_Str""));
  Cool.setLogger(logger);
  File file=new File(path2,""String_Node_Str"");
  PVob pvob=new PVob(""String_Node_Str"" + name + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + pvob);
  String append=System.currentTimeMillis() / 1000 + ""String_Node_Str"";
  Stream intStream=UCMEntity.getStream(""String_Node_Str"",pvob,true);
  System.out.println(""String_Node_Str"");
  SnapshotView intView=SnapshotView.create(intStream,intpath,""String_Node_Str"" + append + ""String_Node_Str"");
  Baseline baseline=UCMEntity.getBaseline(""String_Node_Str"",pvob,true);
  Component component=UCMEntity.getComponent(""String_Node_Str"",pvob,true);
  SnapshotView devview=Utilities.CreateView(""String_Node_Str"" + append + ""String_Node_Str""+ pvob,intStream,baseline,devpath,""String_Node_Str"" + append + ""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  devview.Update(true,true,true,false,COMP.MODIFIABLE,null);
  System.out.println(""String_Node_Str"");
  file.getParentFile().mkdirs();
  file.createNewFile();
  Activity activity=Activity.create(""String_Node_Str"" + append,pvob,true,null,devpath);
  Version.checkOut(path2,path2);
  Version version=Version.create(file,false,devview);
  PrintStream ps;
  try {
    ps=new PrintStream(new BufferedOutputStream(new FileOutputStream(file,true)));
    ps.println(append);
    ps.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  Version.checkIn(path2,false,path2);
  Baseline.create(""String_Node_Str"" + append,component,devpath,true,true);
}","public static void main(String[] args) throws UCMException, IOException {
  if (args.length < 2) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  File path=new File(args[0]);
  File devpath=new File(path,""String_Node_Str"");
  File intpath=new File(path,""String_Node_Str"");
  path.mkdirs();
  String name=args[1];
  File path2=new File(path,""String_Node_Str"" + name + ""String_Node_Str"");
  UCM.setContext(UCM.ContextType.CLEARTOOL);
  Logger logger=PraqmaLogger.getLogger(false);
  logger.subscribeAll();
  logger.setLocalLog(new File(""String_Node_Str""));
  Cool.setLogger(logger);
  File file=new File(path2,""String_Node_Str"");
  PVob pvob=new PVob(""String_Node_Str"" + name + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + pvob);
  String append=System.currentTimeMillis() / 1000 + ""String_Node_Str"";
  Stream intStream=UCMEntity.getStream(""String_Node_Str"",pvob,true);
  System.out.println(""String_Node_Str"");
  SnapshotView intView=SnapshotView.create(intStream,intpath,""String_Node_Str"" + append + ""String_Node_Str"");
  Baseline baseline=UCMEntity.getBaseline(""String_Node_Str"",pvob,true);
  Component component=UCMEntity.getComponent(""String_Node_Str"",pvob,true);
  SnapshotView devview=Utilities.CreateView(""String_Node_Str"" + append + ""String_Node_Str""+ pvob,intStream,baseline,devpath,""String_Node_Str"" + append + ""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  devview.Update(true,true,true,false,Components.MODIFIABLE,null);
  System.out.println(""String_Node_Str"");
  file.getParentFile().mkdirs();
  file.createNewFile();
  Activity activity=Activity.create(""String_Node_Str"" + append,pvob,true,null,devpath);
  Version.checkOut(path2,path2);
  Version version=Version.create(file,false,devview);
  PrintStream ps;
  try {
    ps=new PrintStream(new BufferedOutputStream(new FileOutputStream(file,true)));
    ps.println(append);
    ps.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  Version.checkIn(path2,false,path2);
  Baseline.create(""String_Node_Str"" + append,component,devpath,true,true);
}",0.9971264367816092
44204,"public Map<String,Integer> swipeView(File viewroot,boolean excludeRoot){
  logger.debug(viewroot.toString());
  File[] files=viewroot.listFiles();
  String fls=""String_Node_Str"";
  List<File> other=new ArrayList<File>();
  List<File> root=new ArrayList<File>();
  for (  File f : files) {
    if (!f.canWrite()) {
      logger.debug(f + ""String_Node_Str"");
      continue;
    }
    if (f.isDirectory()) {
      if (IsVob(f)) {
        fls+=""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"";
      }
 else {
        other.add(f);
      }
    }
 else {
      if (f.getName().equalsIgnoreCase(""String_Node_Str"")) {
        continue;
      }
      root.add(f);
    }
  }
  for (  File f : other) {
    if (UCM.isVerbose()) {
      logger.debug(""String_Node_Str"" + f);
    }
    net.praqma.util.io.IO.deleteDirectory(f);
  }
  Map<String,Integer> info=new HashMap<String,Integer>();
  info.put(""String_Node_Str"",1);
  if (fls.length() == 0) {
    logger.debug(""String_Node_Str"");
    return info;
  }
  String cmd=""String_Node_Str"" + fls;
  List<String> result=Cleartool.run(cmd).stdoutList;
  List<File> rnew=new ArrayList<File>();
  if (!excludeRoot) {
    rnew.addAll(root);
  }
  int total=result.size() + rnew.size();
  info.put(""String_Node_Str"",total);
  for (  String s : result) {
    if (s.matches(rx_co_file) || s.matches(rx_keep_file) || s.matches(rx_ctr_file)) {
      continue;
    }
    rnew.add(new File(s));
  }
  logger.debug(""String_Node_Str"" + total + ""String_Node_Str""+ (total - rnew.size())+ ""String_Node_Str"");
  List<File> dirs=new ArrayList<File>();
  int dircount=0;
  int filecount=0;
  for (  File f : rnew) {
    if (f.exists()) {
      if (f.isDirectory()) {
        dirs.add(f);
      }
 else {
        f.delete();
        filecount++;
      }
    }
 else {
      logger.debug(""String_Node_Str"" + f + ""String_Node_Str"");
    }
  }
  info.put(""String_Node_Str"",filecount);
  for (  File d : dirs) {
    try {
      d.delete();
      dircount++;
    }
 catch (    SecurityException e) {
      logger.debug(""String_Node_Str"" + d + ""String_Node_Str"");
    }
  }
  info.put(""String_Node_Str"",dircount);
  logger.debug(""String_Node_Str"" + dircount + ""String_Node_Str""+ (dircount == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ filecount+ ""String_Node_Str""+ (filecount == 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  if (dircount + filecount == total) {
    info.put(""String_Node_Str"",1);
  }
 else {
    logger.warning(""String_Node_Str"");
    info.put(""String_Node_Str"",0);
  }
  return info;
}","public Map<String,Integer> swipeView(File viewroot,boolean excludeRoot){
  logger.debug(viewroot.toString());
  File[] files=viewroot.listFiles();
  String fls=""String_Node_Str"";
  List<File> notVobs=new ArrayList<File>();
  List<File> rootVPFiles=new ArrayList<File>();
  for (  File f : files) {
    if (!f.canWrite()) {
      logger.debug(f + ""String_Node_Str"");
      continue;
    }
    if (f.isDirectory()) {
      if (IsVob(f)) {
        fls+=""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"";
      }
 else {
        notVobs.add(f);
      }
    }
 else {
      if (f.getName().equalsIgnoreCase(""String_Node_Str"")) {
        continue;
      }
      rootVPFiles.add(f);
    }
  }
  for (  File notVob : notVobs) {
    if (UCM.isVerbose()) {
      logger.debug(""String_Node_Str"" + notVob);
    }
    net.praqma.util.io.IO.deleteDirectory(notVob);
  }
  Map<String,Integer> info=new HashMap<String,Integer>();
  info.put(""String_Node_Str"",1);
  if (fls.length() == 0) {
    logger.debug(""String_Node_Str"");
    return info;
  }
  String cmd=""String_Node_Str"" + fls;
  List<String> result=Cleartool.run(cmd).stdoutList;
  List<File> vpFiles=new ArrayList<File>();
  if (!excludeRoot) {
    vpFiles.addAll(rootVPFiles);
  }
  for (  String vpFile : result) {
    if (vpFile.matches(rx_co_file) || vpFile.matches(rx_keep_file) || vpFile.matches(rx_ctr_file)) {
      continue;
    }
    vpFiles.add(new File(vpFile));
  }
  int total=vpFiles.size();
  info.put(""String_Node_Str"",total);
  logger.debug(""String_Node_Str"" + total + ""String_Node_Str""+ (total - vpFiles.size())+ ""String_Node_Str"");
  List<File> dirs=new ArrayList<File>();
  int dircount=0;
  int filecount=0;
  logger.verbose(""String_Node_Str"");
  for (  File f : vpFiles) {
    if (f.exists()) {
      if (f.isDirectory()) {
        dirs.add(f);
      }
 else {
        logger.verbose(""String_Node_Str"" + f);
        f.delete();
        filecount++;
      }
    }
 else {
      logger.debug(""String_Node_Str"" + f + ""String_Node_Str"");
    }
  }
  info.put(""String_Node_Str"",filecount);
  logger.verbose(""String_Node_Str"");
  for (  File d : dirs) {
    try {
      logger.verbose(""String_Node_Str"" + d);
      d.delete();
      dircount++;
    }
 catch (    SecurityException e) {
      logger.debug(""String_Node_Str"" + d + ""String_Node_Str"");
    }
  }
  info.put(""String_Node_Str"",dircount);
  logger.debug(""String_Node_Str"" + dircount + ""String_Node_Str""+ (dircount == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ filecount+ ""String_Node_Str""+ (filecount == 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  if (dircount + filecount == total) {
    info.put(""String_Node_Str"",1);
  }
 else {
    logger.warning(""String_Node_Str"");
    info.put(""String_Node_Str"",0);
  }
  return info;
}",0.9014084507042254
44205,"public void loadStream(Stream stream) throws UCMException {
  logger.debug(""String_Node_Str"" + stream);
  List<String> data=null;
  String cmd=""String_Node_Str"" + stream;
  try {
    data=Cleartool.run(cmd).stdoutList;
  }
 catch (  AbnormalProcessTerminationException e) {
    if (e.getMessage().matches(rx_stream_load)) {
      throw new UCMException(""String_Node_Str"" + stream + ""String_Node_Str"",UCMType.LOAD_FAILED);
    }
 else {
      throw new UCMException(e.getMessage(),e.getMessage(),UCMType.LOAD_FAILED);
    }
  }
  logger.debug(""String_Node_Str"" + data);
  stream.setProject(UCMEntity.getProject(data.get(1)));
  try {
    stream.setDefaultTarget(UCMEntity.getStream(data.get(2)));
  }
 catch (  Exception e) {
    logger.debug(""String_Node_Str"");
  }
  if (data.get(3).length() > 0) {
    stream.setReadOnly(true);
  }
 else {
    stream.setReadOnly(false);
  }
  try {
    stream.setFoundationBaseline(UCMEntity.getBaseline(data.get(4)));
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
  }
}","public void loadStream(Stream stream) throws UCMException {
  logger.debug(""String_Node_Str"" + stream);
  List<String> data=null;
  String cmd=""String_Node_Str"" + stream;
  try {
    data=Cleartool.run(cmd).stdoutList;
  }
 catch (  AbnormalProcessTerminationException e) {
    if (e.getMessage().matches(rx_stream_load)) {
      throw new UCMException(""String_Node_Str"" + stream + ""String_Node_Str"",UCMType.LOAD_FAILED);
    }
 else {
      throw new UCMException(e.getMessage(),e.getMessage(),UCMType.LOAD_FAILED);
    }
  }
  logger.debug(""String_Node_Str"" + data);
  stream.setProject(UCMEntity.getProject(data.get(1)));
  if (!data.get(2).trim().equals(""String_Node_Str"")) {
    try {
      stream.setDefaultTarget(UCMEntity.getStream(data.get(2)));
    }
 catch (    Exception e) {
      logger.debug(""String_Node_Str"");
    }
  }
  if (data.get(3).length() > 0) {
    stream.setReadOnly(true);
  }
 else {
    stream.setReadOnly(false);
  }
  try {
    stream.setFoundationBaseline(UCMEntity.getBaseline(data.get(4)));
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
  }
}",0.967144840351689
44206,"public void setOldVersion(boolean old){
  this.oldVersion=old;
}","@Deprecated public void setOldVersion(boolean old){
  this.oldVersion=old;
}",0.9142857142857144
44207,"void postProcess(){
  logger.trace_function();
  String fqname=this.fqname.matches(""String_Node_Str"") ? this.fqname : System.getProperty(""String_Node_Str"") + filesep + this.fqname;
  this.fqname=fqname;
  Matcher m=p_revision.matcher(this.fqname);
  if (m.find()) {
    this.revision=m.group(1);
  }
 else {
    this.revision=""String_Node_Str"";
  }
  String tmp=this.fqname;
  tmp=tmp.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  tmp=tmp.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  this.file=tmp;
  this.version=new File(tmp);
}","void postProcess(){
  logger.trace_function();
  String fqname=this.fqname.matches(""String_Node_Str"") ? this.fqname : System.getProperty(""String_Node_Str"") + filesep + this.fqname;
  this.fqname=fqname;
  Matcher m=p_revision.matcher(this.fqname);
  if (m.find()) {
    this.revision=m.group(1);
  }
 else {
    this.revision=""String_Node_Str"";
  }
  String tmp=this.fqname;
  tmp=tmp.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  tmp=tmp.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  this.file=tmp;
  Matcher ma=rx_findAddedElements.matcher(revision);
  while (ma.find()) {
    this.file+=filesep + ma.group(2);
  }
  this.version=new File(tmp);
}",0.87986743993372
44208,"public boolean isOldVersion(){
  return oldVersion;
}","@Deprecated public boolean isOldVersion(){
  return oldVersion;
}",0.8983050847457628
44209,"public List<Activity> getBaselineDiff(Diffable d1,Diffable d2,boolean merge,File viewContext) throws UCMException {
  return parseActivityStrings(strategy.getBaselineDiff(d1,d2,merge,viewContext),viewContext.getAbsoluteFile().toString().length());
}","public List<Activity> getBaselineDiff(Diffable d1,Diffable d2,boolean merge,File viewContext) throws UCMException {
  List<String> lines=strategy.getBaselineDiff(d1,d2,merge,viewContext);
  return parseActivityStrings(lines,viewContext.getAbsoluteFile().toString().length());
}",0.7604562737642585
44210,"public ChangeSet difference(UCMEntity e1,UCMEntity e2,boolean merge,File viewContext) throws UCMException {
  String cmd=""String_Node_Str"" + (!merge ? ""String_Node_Str"" : ""String_Node_Str"") + (e2 == null ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ e1.getFullyQualifiedName()+ (e2 != null ? e2.getFullyQualifiedName() : ""String_Node_Str"");
  List<String> lines=null;
  System.out.println(""String_Node_Str"" + cmd);
  try {
    lines=Cleartool.run(cmd,viewContext).stdoutList;
  }
 catch (  Exception e) {
    throw new UCMException(""String_Node_Str"" + e1 + ""String_Node_Str""+ e2+ ""String_Node_Str""+ e.getMessage());
  }
  int length=viewContext.getAbsoluteFile().toString().length();
  System.out.println(viewContext.getAbsolutePath() + ""String_Node_Str"" + length);
  net.praqma.clearcase.changeset.ChangeSet changeset=new ChangeSet(viewContext);
  for (int i=0; i < lines.size(); i++) {
    Matcher m=rx_versionName.matcher(lines.get(i));
    if (m.find()) {
      String f=m.group(2).trim();
      System.out.println(""String_Node_Str"" + f);
      logger.debug(""String_Node_Str"" + f);
      String filename=f.substring(length);
      File file=new File(f);
      Tuple<String,Integer> info=getVersionVersion(m.group(3));
      ChangeSetElement element=new ChangeSetElement(file,m.group(3));
      if (m.group(1).equals(""String_Node_Str"")) {
        if (info.t2 > 1) {
          element.setStatus(ChangeSetElement.Status.CHANGED);
        }
 else {
          element.setStatus(ChangeSetElement.Status.ADDED);
        }
      }
 else       if (m.group(1).equals(""String_Node_Str"")) {
        element.setStatus(ChangeSetElement.Status.DELETED);
      }
 else {
        element.setStatus(ChangeSetElement.Status.CHANGED);
      }
      changeset.addElement(element);
      if (file.isDirectory()) {
        getDirectoryStatus(file,element.getFullversion(),changeset);
      }
    }
  }
  return changeset;
}","public ChangeSet difference(UCMEntity e1,UCMEntity e2,boolean merge,File viewContext) throws UCMException {
  String cmd=""String_Node_Str"" + (!merge ? ""String_Node_Str"" : ""String_Node_Str"") + (e2 == null ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ e1.getFullyQualifiedName()+ (e2 != null ? e2.getFullyQualifiedName() : ""String_Node_Str"");
  List<String> lines=null;
  try {
    lines=Cleartool.run(cmd,viewContext).stdoutList;
  }
 catch (  Exception e) {
    throw new UCMException(""String_Node_Str"" + e1 + ""String_Node_Str""+ e2+ ""String_Node_Str""+ e.getMessage());
  }
  int length=viewContext.getAbsoluteFile().toString().length();
  System.out.println(viewContext.getAbsolutePath() + ""String_Node_Str"" + length);
  net.praqma.clearcase.changeset.ChangeSet changeset=new ChangeSet(viewContext);
  for (int i=0; i < lines.size(); i++) {
    Matcher m=rx_versionName.matcher(lines.get(i));
    if (m.find()) {
      String f=m.group(2).trim();
      System.out.println(""String_Node_Str"" + f);
      logger.debug(""String_Node_Str"" + f);
      String filename=f.substring(length);
      File file=new File(f);
      Tuple<String,Integer> info=getVersionVersion(m.group(3));
      ChangeSetElement element=new ChangeSetElement(file,m.group(3));
      if (m.group(1).equals(""String_Node_Str"")) {
        if (info.t2 > 1) {
          element.setStatus(ChangeSetElement.Status.CHANGED);
        }
 else {
          element.setStatus(ChangeSetElement.Status.ADDED);
        }
      }
 else       if (m.group(1).equals(""String_Node_Str"")) {
        element.setStatus(ChangeSetElement.Status.DELETED);
      }
 else {
        element.setStatus(ChangeSetElement.Status.CHANGED);
      }
      changeset.addElement(element);
      if (file.isDirectory()) {
        getDirectoryStatus(file,element.getFullversion(),changeset);
      }
    }
  }
  return changeset;
}",0.987602215774202
44211,"public void loadVersion(Version version) throws UCMException {
  try {
    String cmd=""String_Node_Str"" + version.getFullyQualifiedName() + ""String_Node_Str"";
    List<String> list=Cleartool.run(cmd).stdoutList;
    logger.debug(""String_Node_Str"" + list);
    version.setUser(list.get(0));
    logger.debug(""String_Node_Str"" + list.get(0));
    String vn=list.get(1);
    String ven=list.get(2);
    Matcher m=rx_extendedName.matcher(ven);
    logger.debug(""String_Node_Str"" + ven);
    if (m.find() && m.group(2) != null) {
      try {
        logger.debug(""String_Node_Str"" + m.group(0));
        logger.debug(""String_Node_Str"" + m.group(1));
        logger.debug(""String_Node_Str"" + m.group(2));
        logger.debug(""String_Node_Str"" + m.group(3));
        logger.debug(""String_Node_Str"" + m.group(4));
      }
 catch (      Exception e) {
      }
      version.setOldVersion(true);
      Matcher m2=rx_getFilename.matcher(m.group(2));
      String filename=""String_Node_Str"";
      if (m2.find()) {
        filename=m.group(1) + m2.group(1);
      }
 else {
        throw new UCMException(""String_Node_Str"");
      }
      version.setVersion(new File(filename));
      logger.debug(""String_Node_Str"" + filename);
    }
  }
 catch (  Exception e) {
    throw new UCMException(""String_Node_Str"" + e.getMessage());
  }
}","public void loadVersion(Version version) throws UCMException {
  try {
    String cmd=""String_Node_Str"" + version.getFullyQualifiedName() + ""String_Node_Str"";
    List<String> list=Cleartool.run(cmd).stdoutList;
    logger.debug(""String_Node_Str"" + list);
    version.setUser(list.get(0));
    logger.debug(""String_Node_Str"" + list.get(0));
    String vn=list.get(1);
    String ven=list.get(2);
    Matcher m=rx_extendedName.matcher(ven);
    logger.debug(""String_Node_Str"" + ven);
  }
 catch (  Exception e) {
    throw new UCMException(""String_Node_Str"" + e.getMessage());
  }
}",0.5895953757225434
44212,"public static PVob create(String name,String path,String comment) throws UCMException {
  context.createVob(name,true,path,comment);
  PVob pvob=new PVob(name);
  pvob.storageLocation=path;
  return pvob;
}","public static PVob create(String name,String path,String comment) throws UCMException {
  context.createVob(name,true,path,comment);
  System.out.println(""String_Node_Str"" + name);
  PVob pvob=new PVob(name);
  pvob.storageLocation=path;
  return pvob;
}",0.8956521739130435
44213,"public String getStorageLocation(){
  return this.storageLocation;
}","public String getStorageLocation() throws UCMException {
  if (storageLocation == null) {
    load();
  }
  return this.storageLocation;
}",0.6601941747572816
44214,"public void createVob(String vobname,boolean UCMProject,String path,String comment) throws UCMException {
  String cmd=""String_Node_Str"" + vobname + (UCMProject ? ""String_Node_Str"" : ""String_Node_Str"")+ (comment != null ? ""String_Node_Str"" + comment : ""String_Node_Str"")+ ""String_Node_Str""+ (path != null ? path : ""String_Node_Str"");
  try {
    Cleartool.run(cmd);
  }
 catch (  Exception e) {
    throw new UCMException(e.getMessage(),UCMType.CREATION_FAILED);
  }
}","public void createVob(String vobname,boolean UCMProject,String path,String comment) throws UCMException {
  logger.info(""String_Node_Str"" + vobname);
  String cmd=""String_Node_Str"" + vobname + (UCMProject ? ""String_Node_Str"" : ""String_Node_Str"")+ (comment != null ? ""String_Node_Str"" + comment + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (path != null ? path : ""String_Node_Str"");
  try {
    Cleartool.run(cmd);
  }
 catch (  Exception e) {
    throw new UCMException(e.getMessage(),UCMType.CREATION_FAILED);
  }
}",0.936
44215,"public Map<String,String> loadVob(Vob vob) throws UCMException {
  String cmd=""String_Node_Str"" + vob;
  Map<String,String> a=new HashMap<String,String>();
  try {
    CmdResult r=Cleartool.run(cmd);
    for (    String s : r.stdoutList) {
      if (s.contains(""String_Node_Str"")) {
        Matcher m=rx_vob_get_path.matcher(s);
        if (m.find()) {
          a.put(""String_Node_Str"",m.group(1));
        }
      }
    }
  }
 catch (  Exception e) {
    throw new UCMException(""String_Node_Str"" + e.getMessage());
  }
  return a;
}","public Map<String,String> loadVob(Vob vob) throws UCMException {
  logger.info(""String_Node_Str"" + vob);
  String cmd=""String_Node_Str"" + vob;
  Map<String,String> a=new HashMap<String,String>();
  try {
    CmdResult r=Cleartool.run(cmd);
    for (    String s : r.stdoutList) {
      if (s.contains(""String_Node_Str"")) {
        Matcher m=rx_vob_get_path.matcher(s);
        if (m.find()) {
          a.put(""String_Node_Str"",m.group(1));
        }
      }
    }
  }
 catch (  Exception e) {
    throw new UCMException(""String_Node_Str"" + e.getMessage());
  }
  return a;
}",0.9638989169675092
44216,"public void createComponent(String name,PVob pvob,String root,String comment) throws UCMException {
  String cmd=""String_Node_Str"" + (comment != null ? ""String_Node_Str"" + comment : ""String_Node_Str"") + (root != null ? ""String_Node_Str"" + root : ""String_Node_Str"")+ ""String_Node_Str""+ name+ ""String_Node_Str""+ pvob;
  try {
    Cleartool.run(cmd);
  }
 catch (  Exception e) {
    throw new UCMException(e.getMessage(),UCMType.CREATION_FAILED);
  }
}","public void createComponent(String name,PVob pvob,String root,String comment) throws UCMException {
  String cmd=""String_Node_Str"" + (comment != null ? ""String_Node_Str"" + comment + ""String_Node_Str"" : ""String_Node_Str"") + (root != null ? ""String_Node_Str"" + root : ""String_Node_Str"")+ ""String_Node_Str""+ name+ ""String_Node_Str""+ pvob;
  try {
    Cleartool.run(cmd);
  }
 catch (  Exception e) {
    throw new UCMException(e.getMessage(),UCMType.CREATION_FAILED);
  }
}",0.9782608695652174
44217,"public void createView(String tag,String path,boolean snapshotView) throws UCMException {
  String cmd=""String_Node_Str"" + tag + (snapshotView ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (path != null ? path : ""String_Node_Str"");
  try {
    Cleartool.run(cmd);
  }
 catch (  Exception e) {
    throw new UCMException(e.getMessage(),UCMType.CREATION_FAILED);
  }
}","public void createView(String tag,String path,boolean snapshotView) throws UCMException {
  logger.info(""String_Node_Str"" + tag);
  String cmd=""String_Node_Str"" + tag + (snapshotView ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (path != null ? path : ""String_Node_Str"");
  try {
    Cleartool.run(cmd);
  }
 catch (  Exception e) {
    throw new UCMException(e.getMessage(),UCMType.CREATION_FAILED);
  }
}",0.9501246882793016
44218,"public void mountVob(Vob vob) throws UCMException {
  String cmd=""String_Node_Str"" + vob;
  try {
    Cleartool.run(cmd);
  }
 catch (  Exception e) {
    throw new UCMException(""String_Node_Str"" + vob + ""String_Node_Str""+ e.getMessage());
  }
}","public void mountVob(Vob vob) throws UCMException {
  logger.info(""String_Node_Str"" + vob);
  String cmd=""String_Node_Str"" + vob;
  try {
    Cleartool.run(cmd);
  }
 catch (  Exception e) {
    throw new UCMException(""String_Node_Str"" + vob + ""String_Node_Str""+ e.getMessage());
  }
}",0.9245283018867924
44219,"public static void main(String[] args) throws UCMException {
  PVob pvob=PVob.create(""String_Node_Str"",null,""String_Node_Str"");
  Vob vob=Vob.create(""String_Node_Str"",null,""String_Node_Str"");
  vob.load();
  System.out.println(""String_Node_Str"" + vob.getStorageLocation());
  vob.mount();
  Component c=Component.create(""String_Node_Str"",pvob,null,""String_Node_Str"");
  System.out.println(""String_Node_Str"" + c);
  DynamicView view=DynamicView.create(""String_Node_Str"",null);
}","public static void main(String[] args) throws UCMException {
  UCM.setContext(UCM.ContextType.CLEARTOOL);
  Logger logger=PraqmaLogger.getLogger(false);
  logger.subscribeAll();
  logger.setLocalLog(new File(""String_Node_Str""));
  Cool.setLogger(logger);
  PVob pvob=PVob.create(""String_Node_Str"",null,""String_Node_Str"");
  Vob vob=Vob.create(""String_Node_Str"",null,""String_Node_Str"");
  vob.load();
  System.out.println(""String_Node_Str"" + vob.getStorageLocation());
  vob.mount();
  Component c=Component.create(""String_Node_Str"",pvob,null,""String_Node_Str"");
  System.out.println(""String_Node_Str"" + c);
  DynamicView view=DynamicView.create(""String_Node_Str"",null);
}",0.8310104529616724
44220,"@Override public OperatingSystem getOS(){
  return null;
}","@Override public CommandLineInterface.OperatingSystem getOS(){
  return null;
}",0.8467153284671532
44221,"public void RegenerateViewDotDat(File dir,String viewtag) throws UCMException {
  logger.trace_function();
  logger.debug(dir + ""String_Node_Str"" + viewtag);
  File viewdat=new File(dir + File.separator + ""String_Node_Str"");
  if (viewdat.exists()) {
    throw new UCMException(""String_Node_Str"");
  }
  String cmd=""String_Node_Str"" + viewtag;
  String result=Cleartool.run(cmd).stdoutBuffer.toString();
  Matcher match=pattern_view_uuid.matcher(result);
  if (!match.find()) {
    logger.warning(""String_Node_Str"" + viewtag + ""String_Node_Str"");
    throw new UCMException(""String_Node_Str"" + viewtag + ""String_Node_Str"");
  }
  String uuid=match.group(1);
  cmd=""String_Node_Str"" + uuid;
  try {
    Cleartool.run(cmd);
  }
 catch (  AbnormalProcessTerminationException e) {
    throw new UCMException(""String_Node_Str"" + uuid + ""String_Node_Str""+ viewtag);
  }
  if (dir.exists()) {
    logger.warning(""String_Node_Str"" + dir + ""String_Node_Str"");
  }
 else {
    dir.mkdirs();
  }
  try {
    FileOutputStream fos=new FileOutputStream(viewdat);
    fos.write((""String_Node_Str"" + uuid).getBytes());
    fos.close();
  }
 catch (  IOException e) {
    throw new UCMException(""String_Node_Str"",UCMType.VIEW_ERROR);
  }
  cmd=""String_Node_Str"" + viewdat;
  Command.run(cmd);
}","public void RegenerateViewDotDat(File dir,String viewtag) throws UCMException {
  logger.trace_function();
  logger.debug(dir + ""String_Node_Str"" + viewtag);
  File viewdat=new File(dir + File.separator + ""String_Node_Str"");
  if (viewdat.exists()) {
    throw new UCMException(""String_Node_Str"");
  }
  String cmd=""String_Node_Str"" + viewtag;
  String result=Cleartool.run(cmd).stdoutBuffer.toString();
  System.out.println(result);
  Matcher match=pattern_view_uuid.matcher(result);
  if (!match.find()) {
    logger.warning(""String_Node_Str"" + viewtag + ""String_Node_Str"");
    throw new UCMException(""String_Node_Str"" + viewtag + ""String_Node_Str"");
  }
  String uuid=match.group(1);
  cmd=""String_Node_Str"" + uuid;
  try {
    Cleartool.run(cmd);
  }
 catch (  AbnormalProcessTerminationException e) {
    throw new UCMException(""String_Node_Str"" + uuid + ""String_Node_Str""+ viewtag);
  }
  if (dir.exists()) {
    logger.warning(""String_Node_Str"" + dir + ""String_Node_Str"");
  }
 else {
    dir.mkdirs();
  }
  try {
    FileOutputStream fos=new FileOutputStream(viewdat);
    fos.write((""String_Node_Str"" + uuid).getBytes());
    fos.close();
  }
 catch (  IOException e) {
    throw new UCMException(""String_Node_Str"",UCMType.VIEW_ERROR);
  }
  if (!viewdat.setReadOnly()) {
    logger.warning(""String_Node_Str"");
    throw new UCMException(""String_Node_Str"");
  }
}",0.9294605809128632
44222,"public List<HyperLink> getHlinks(UCMEntity entity,String hlinkType,File dir) throws UCMException {
  List<Tuple<String,String>> result=strategy.getHlinks(entity.GetFQName(),hlinkType,dir);
  List<HyperLink> hlinks=new ArrayList<HyperLink>();
  for (  Tuple<String,String> t : result) {
    HyperLink h=HyperLink.getHyperLink(t.t1,t.t2);
    hlinks.add(h);
  }
  return hlinks;
}","public List<HyperLink> getHlinks(UCMEntity entity,String hlinkType,File dir) throws UCMException {
  logger.debug(""String_Node_Str"" + entity.GetFQName());
  List<Tuple<String,String>> result=strategy.getHlinks(entity.GetFQName(),hlinkType,dir);
  List<HyperLink> hlinks=new ArrayList<HyperLink>();
  for (  Tuple<String,String> t : result) {
    HyperLink h=HyperLink.getHyperLink(t.t1,t.t2);
    hlinks.add(h);
  }
  return hlinks;
}",0.8004926108374384
44223,"public static int stampFromComponent(Component component,File dir,String major,String minor,String patch,String sequence,boolean ignoreErrors) throws UCMException {
  List<HyperLink> result=component.getHlinks(__BUILD_NUMBER_FILE,dir);
  if (result.size() == 0) {
    throw new UCMException(""String_Node_Str"");
  }
  int number=0;
  for (  HyperLink h : result) {
    String f=h.getValue().replaceFirst(""String_Node_Str"",""String_Node_Str"");
    File stampee=new File(f);
    try {
      number+=BuildNumber.stampIntoCode(stampee,major,minor,patch,sequence);
    }
 catch (    UCMException e) {
      if (!ignoreErrors) {
        throw e;
      }
    }
  }
  return number;
}","public static int stampFromComponent(Component component,File dir,String major,String minor,String patch,String sequence,boolean ignoreErrors) throws UCMException {
  List<HyperLink> result=component.getHlinks(__BUILD_NUMBER_FILE,dir);
  int number=0;
  for (  HyperLink h : result) {
    String f=h.getValue().replaceFirst(""String_Node_Str"",""String_Node_Str"");
    File stampee=new File(f);
    try {
      number+=BuildNumber.stampIntoCode(stampee,major,minor,patch,sequence);
    }
 catch (    UCMException e) {
      if (!ignoreErrors) {
        throw e;
      }
    }
  }
  return number;
}",0.425531914893617
44224,"public ArrayList<Activity> GetBaselineDiff(SnapshotView view,Baseline baseline,Baseline other,boolean nmerge) throws UCMException {
  logger.debug(""String_Node_Str"");
  logger.log(view.GetViewtag());
  System.out.println(""String_Node_Str"");
  loggerj.debug(""String_Node_Str"");
  List<String> result=strategy.GetBaselineDiff(view.GetViewRoot(),baseline.GetFQName(),""String_Node_Str"",nmerge,baseline.GetPvob());
  ArrayList<Activity> activities=new ArrayList<Activity>();
  int length=view.GetViewRoot().getAbsoluteFile().toString().length();
  System.out.println(view.GetViewRoot().getAbsoluteFile().toString());
  Activity current=null;
  for (  String s : result) {
    Matcher match=pattern_activity.matcher(s);
    if (match.find()) {
      current=UCMEntity.GetActivity(match.group(1),true);
      logger.debug(""String_Node_Str"" + current.GetShortname());
      System.out.println(""String_Node_Str"" + current.GetShortname());
      if (current.GetShortname().equals(""String_Node_Str"")) {
        logger.debug(""String_Node_Str"");
        current.SetSpecialCase(true);
      }
      activities.add(current);
      continue;
    }
    if (current == null) {
      logger.debug(""String_Node_Str"" + s);
      continue;
    }
    String f=s.trim();
    Version v=(Version)UCMEntity.GetEntity(f);
    v.SetSFile(v.GetFile().substring(length));
    current.changeset.versions.add(v);
  }
  return activities;
}","public ArrayList<Activity> GetBaselineDiff(SnapshotView view,Baseline baseline,Baseline other,boolean nmerge) throws UCMException {
  logger.log(view.GetViewtag());
  List<String> result=strategy.GetBaselineDiff(view.GetViewRoot(),baseline.GetFQName(),""String_Node_Str"",nmerge,baseline.GetPvob());
  ArrayList<Activity> activities=new ArrayList<Activity>();
  int length=view.GetViewRoot().getAbsoluteFile().toString().length();
  System.out.println(view.GetViewRoot().getAbsoluteFile().toString());
  Activity current=null;
  for (  String s : result) {
    Matcher match=pattern_activity.matcher(s);
    if (match.find()) {
      current=UCMEntity.GetActivity(match.group(1),true);
      if (current.GetShortname().equals(""String_Node_Str"")) {
        logger.debug(""String_Node_Str"");
        current.SetSpecialCase(true);
      }
      activities.add(current);
      continue;
    }
    if (current == null) {
      logger.debug(""String_Node_Str"" + s);
      continue;
    }
    String f=s.trim();
    Version v=(Version)UCMEntity.GetEntity(f);
    v.SetSFile(v.GetFile().substring(length));
    current.changeset.versions.add(v);
  }
  return activities;
}",0.9041309431021044
44225,"public Map SwipeView(File viewroot,boolean excludeRoot){
  loggerj.debug(""String_Node_Str"");
  return strategy.SwipeView(viewroot,excludeRoot);
}","public Map SwipeView(File viewroot,boolean excludeRoot){
  return strategy.SwipeView(viewroot,excludeRoot);
}",0.8582677165354331
44226,"public void run(){
  try {
    InputStreamReader isr=new InputStreamReader(is);
    BufferedReader br=new BufferedReader(isr);
    String line=null;
    while ((line=br.readLine()) != null) {
      lres.add(line);
    }
    for (int i=0; i < lres.size() - 1; ++i) {
      sres.append(lres.get(i) + linesep);
    }
    sres.append(lres.get(lres.size() - 1));
synchronized (this) {
      notifyAll();
    }
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
}","public void run(){
  try {
    InputStreamReader isr=new InputStreamReader(is);
    BufferedReader br=new BufferedReader(isr);
    String line=null;
    while ((line=br.readLine()) != null) {
      lres.add(line);
    }
    for (int i=0; i < lres.size() - 1; ++i) {
      sres.append(lres.get(i) + linesep);
    }
    if (lres.size() > 0) {
      sres.append(lres.get(lres.size() - 1));
    }
synchronized (this) {
      notifyAll();
    }
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
}",0.964102564102564
44227,"public void LoadActivity(Activity activity){
  String result=strategy.LoadActivity(activity.GetFQName());
  activity.SetUser(result);
}","public void LoadActivity(Activity activity){
  String result=""String_Node_Str"";
  if (activity.GetSpecialCase()) {
    result=""String_Node_Str"";
  }
 else {
    result=strategy.LoadActivity(activity.GetFQName());
  }
  activity.SetUser(result);
}",0.7086614173228346
44228,"public ArrayList<Activity> GetBaselineDiff(SnapshotView view,Baseline baseline,Baseline other,boolean nmerge) throws UCMException {
  List<String> result=strategy.GetBaselineDiff(view.GetViewRoot(),baseline.GetFQName(),""String_Node_Str"",nmerge,baseline.GetPvob());
  ArrayList<Activity> activities=new ArrayList<Activity>();
  int length=view.GetViewRoot().getAbsoluteFile().toString().length();
  System.out.println(view.GetViewRoot().getAbsoluteFile().toString());
  Activity current=null;
  for (  String s : result) {
    Matcher match=pattern_activity.matcher(s);
    if (match.find()) {
      current=UCMEntity.GetActivity(match.group(1),true);
      activities.add(current);
      continue;
    }
    if (current == null) {
      logger.debug(""String_Node_Str"" + s);
      continue;
    }
    String f=s.trim();
    Version v=(Version)UCMEntity.GetEntity(f);
    v.SetSFile(v.GetFile().substring(length));
    current.changeset.versions.add(v);
  }
  return activities;
}","public ArrayList<Activity> GetBaselineDiff(SnapshotView view,Baseline baseline,Baseline other,boolean nmerge) throws UCMException {
  List<String> result=strategy.GetBaselineDiff(view.GetViewRoot(),baseline.GetFQName(),""String_Node_Str"",nmerge,baseline.GetPvob());
  ArrayList<Activity> activities=new ArrayList<Activity>();
  int length=view.GetViewRoot().getAbsoluteFile().toString().length();
  System.out.println(view.GetViewRoot().getAbsoluteFile().toString());
  Activity current=null;
  for (  String s : result) {
    Matcher match=pattern_activity.matcher(s);
    if (match.find()) {
      current=UCMEntity.GetActivity(match.group(1),true);
      if (current.GetShortname().equals(""String_Node_Str"")) {
        current.SetSpecialCase(true);
      }
      activities.add(current);
      continue;
    }
    if (current == null) {
      logger.debug(""String_Node_Str"" + s);
      continue;
    }
    String f=s.trim();
    Version v=(Version)UCMEntity.GetEntity(f);
    v.SetSFile(v.GetFile().substring(length));
    current.changeset.versions.add(v);
  }
  return activities;
}",0.9476744186046512
44229,"@Override public List<Tuple<String,String>> GetTags(String fqname){
  logger.trace_function();
  logger.debug(fqname);
  String cmd=""String_Node_Str"" + __TAG_NAME + ""String_Node_Str""+ fqname;
  CmdResult res=null;
  try {
    res=Cleartool.run(cmd);
  }
 catch (  AbnormalProcessTerminationException e) {
    Matcher match=pattern_tag_missing.matcher(res.errorBuffer);
    if (match.find()) {
      throw new UCMException(""String_Node_Str"" + match.group(1) + ""String_Node_Str"",UCMType.UNKNOWN_TAG);
    }
    throw e;
  }
  List<String> list=res.stdoutList;
  List<Tuple<String,String>> tags=new ArrayList<Tuple<String,String>>();
  if (list.size() > 2) {
    for (int i=2; i < list.size(); i++) {
      logger.debug(""String_Node_Str"" + i + ""String_Node_Str""+ list.get(i));
      Matcher match=pattern_tags.matcher(list.get(i));
      if (match.find()) {
        tags.add(new Tuple<String,String>(match.group(1),match.group(2)));
      }
    }
  }
  return tags;
}","@Override public List<Tuple<String,String>> GetTags(String fqname){
  logger.trace_function();
  logger.debug(fqname);
  String cmd=""String_Node_Str"" + __TAG_NAME + ""String_Node_Str""+ fqname;
  CmdResult res=null;
  try {
    res=Cleartool.run(cmd);
  }
 catch (  AbnormalProcessTerminationException e) {
    Matcher match=pattern_tag_missing.matcher(e.getMessage());
    if (match.find()) {
      throw new UCMException(""String_Node_Str"" + match.group(1) + ""String_Node_Str"",UCMType.UNKNOWN_TAG);
    }
    throw e;
  }
  List<String> list=res.stdoutList;
  List<Tuple<String,String>> tags=new ArrayList<Tuple<String,String>>();
  if (list.size() > 2) {
    for (int i=2; i < list.size(); i++) {
      logger.debug(""String_Node_Str"" + i + ""String_Node_Str""+ list.get(i));
      Matcher match=pattern_tags.matcher(list.get(i));
      if (match.find()) {
        tags.add(new Tuple<String,String>(match.group(1),match.group(2)));
      }
    }
  }
  return tags;
}",0.9849507005708354
44230,"@Override public String NewTag(UCMEntity entity,String cgi){
  logger.trace_function();
  logger.debug(entity.GetFQName());
  String cmd=""String_Node_Str"" + cgi + ""String_Node_Str""+ __TAG_NAME+ ""String_Node_Str""+ entity.GetFQName();
  CmdResult res=null;
  try {
    res=Cleartool.run(cmd);
  }
 catch (  AbnormalProcessTerminationException e) {
    Matcher match=pattern_tag_missing.matcher(res.errorBuffer.toString());
    if (match.find()) {
      throw new UCMException(""String_Node_Str"" + match.group(1) + ""String_Node_Str"",UCMType.UNKNOWN_TAG);
    }
    throw e;
  }
  String tag=res.stdoutBuffer.toString();
  Matcher match=pattern_remove_verbose_tag.matcher(tag);
  if (!match.find()) {
    throw new UCMException(""String_Node_Str"",UCMType.TAG_CREATION_FAILED);
  }
  return match.group(1);
}","@Override public String NewTag(UCMEntity entity,String cgi){
  logger.trace_function();
  logger.debug(entity.GetFQName());
  String cmd=""String_Node_Str"" + cgi + ""String_Node_Str""+ __TAG_NAME+ ""String_Node_Str""+ entity.GetFQName();
  CmdResult res=null;
  try {
    res=Cleartool.run(cmd);
  }
 catch (  AbnormalProcessTerminationException e) {
    Matcher match=pattern_tag_missing.matcher(e.getMessage());
    if (match.find()) {
      throw new UCMException(""String_Node_Str"" + match.group(1) + ""String_Node_Str"",UCMType.UNKNOWN_TAG);
    }
    throw e;
  }
  String tag=res.stdoutBuffer.toString();
  Matcher match=pattern_remove_verbose_tag.matcher(tag);
  if (!match.find()) {
    throw new UCMException(""String_Node_Str"",UCMType.TAG_CREATION_FAILED);
  }
  return match.group(1);
}",0.9773584905660376
44231,"public boolean SwipeView(File viewroot,boolean excludeRoot){
  logger.debug(viewroot.toString());
  List<String> vobs=ListVobs(viewroot);
  File[] files=viewroot.listFiles();
  String fls=""String_Node_Str"";
  List<File> other=new ArrayList<File>();
  List<File> root=new ArrayList<File>();
  for (  File f : files) {
    logger.debug(""String_Node_Str"" + f);
    if (!f.canWrite()) {
      logger.debug(""String_Node_Str"");
      continue;
    }
    if (f.isDirectory()) {
      if (IsVob(f)) {
        fls+=f.getAbsolutePath() + ""String_Node_Str"";
      }
 else {
        other.add(f);
      }
    }
 else {
      if (f.getName().equalsIgnoreCase(""String_Node_Str"")) {
        continue;
      }
      root.add(f);
    }
  }
  for (  File f : other) {
    logger.log(""String_Node_Str"" + f);
    net.praqma.utils.IO.DeleteDirectory(f);
  }
  if (fls.length() == 0) {
    logger.debug(""String_Node_Str"");
    return true;
  }
  String cmd=""String_Node_Str"" + fls;
  List<String> result=Cleartool.run(cmd).stdoutList;
  List<File> rnew=new ArrayList<File>();
  if (!excludeRoot) {
    rnew.addAll(root);
  }
  int total=result.size() + rnew.size();
  for (  String s : result) {
    logger.debug(s);
    if (s.matches(rx_co_file) || s.matches(rx_keep_file) || s.matches(rx_ctr_file)) {
      continue;
    }
    rnew.add(new File(s));
  }
  logger.debug(""String_Node_Str"" + total + ""String_Node_Str""+ (total - rnew.size())+ ""String_Node_Str"");
  List<File> dirs=new ArrayList<File>();
  int dircount=0;
  int filecount=0;
  for (  File f : rnew) {
    logger.debug(""String_Node_Str"" + f);
    if (f.exists()) {
      if (f.isDirectory()) {
        dirs.add(f);
      }
 else {
        logger.debug(""String_Node_Str"" + f);
        f.delete();
        filecount++;
      }
    }
 else {
      logger.debug(""String_Node_Str"" + f + ""String_Node_Str"");
    }
  }
  for (  File d : dirs) {
    try {
      d.delete();
      dircount++;
    }
 catch (    SecurityException e) {
      logger.log(""String_Node_Str"" + d + ""String_Node_Str"");
    }
  }
  logger.print(""String_Node_Str"" + dircount + ""String_Node_Str""+ (dircount == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ filecount+ ""String_Node_Str""+ (filecount == 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  if (dircount + filecount == total) {
    return true;
  }
 else {
    logger.warning(""String_Node_Str"");
    return false;
  }
}","public boolean SwipeView(File viewroot,boolean excludeRoot){
  logger.debug(viewroot.toString());
  List<String> vobs=ListVobs(viewroot);
  File[] files=viewroot.listFiles();
  String fls=""String_Node_Str"";
  List<File> other=new ArrayList<File>();
  List<File> root=new ArrayList<File>();
  for (  File f : files) {
    logger.debug(""String_Node_Str"" + f);
    if (!f.canWrite()) {
      logger.debug(""String_Node_Str"");
      continue;
    }
    if (f.isDirectory()) {
      if (IsVob(f)) {
        fls+=""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"";
      }
 else {
        other.add(f);
      }
    }
 else {
      if (f.getName().equalsIgnoreCase(""String_Node_Str"")) {
        continue;
      }
      root.add(f);
    }
  }
  for (  File f : other) {
    logger.log(""String_Node_Str"" + f);
    net.praqma.utils.IO.DeleteDirectory(f);
  }
  if (fls.length() == 0) {
    logger.debug(""String_Node_Str"");
    return true;
  }
  String cmd=""String_Node_Str"" + fls;
  List<String> result=Cleartool.run(cmd).stdoutList;
  List<File> rnew=new ArrayList<File>();
  if (!excludeRoot) {
    rnew.addAll(root);
  }
  int total=result.size() + rnew.size();
  for (  String s : result) {
    logger.debug(s);
    if (s.matches(rx_co_file) || s.matches(rx_keep_file) || s.matches(rx_ctr_file)) {
      continue;
    }
    rnew.add(new File(s));
  }
  logger.debug(""String_Node_Str"" + total + ""String_Node_Str""+ (total - rnew.size())+ ""String_Node_Str"");
  List<File> dirs=new ArrayList<File>();
  int dircount=0;
  int filecount=0;
  for (  File f : rnew) {
    logger.debug(""String_Node_Str"" + f);
    if (f.exists()) {
      if (f.isDirectory()) {
        dirs.add(f);
      }
 else {
        logger.debug(""String_Node_Str"" + f);
        f.delete();
        filecount++;
      }
    }
 else {
      logger.debug(""String_Node_Str"" + f + ""String_Node_Str"");
    }
  }
  for (  File d : dirs) {
    try {
      d.delete();
      dircount++;
    }
 catch (    SecurityException e) {
      logger.log(""String_Node_Str"" + d + ""String_Node_Str"");
    }
  }
  logger.print(""String_Node_Str"" + dircount + ""String_Node_Str""+ (dircount == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ filecount+ ""String_Node_Str""+ (filecount == 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  if (dircount + filecount == total) {
    return true;
  }
 else {
    logger.warning(""String_Node_Str"");
    return false;
  }
}",0.9958454507685915
44232,"public static void main(String[] args){
  UCM.SetContext(UCM.ContextType.CLEARTOOL);
  String id=Calendar.getInstance().getTime().toString();
  String comp=""String_Node_Str"";
  String stre=""String_Node_Str"" + id + ""String_Node_Str"";
  String intstre=""String_Node_Str"";
  File root=new File(""String_Node_Str"");
  String tag=""String_Node_Str"" + id;
  if (args.length > 0) {
    comp=args[0];
    System.out.println(""String_Node_Str"" + comp);
  }
  if (args.length > 1) {
    stre=args[1];
    System.out.println(""String_Node_Str"" + stre);
  }
  if (args.length > 2) {
    intstre=args[1];
    System.out.println(""String_Node_Str"" + intstre);
  }
  if (args.length > 3) {
    tag=args[3];
    System.out.println(""String_Node_Str"" + tag);
  }
  root=new File(root,tag);
  root.mkdir();
  Stream integrationStream=UCMEntity.GetStream(intstre);
  Component co1=UCMEntity.GetComponent(comp);
  BaselineList bls=co1.GetBaselines(integrationStream,Project.Plevel.INITIAL);
  List<Baseline> rec_bls=integrationStream.GetRecommendedBaselines();
  Baseline bl=rec_bls.get(0);
  Stream developmentStream=Stream.Create(integrationStream,stre,false,bl);
  SnapshotView view=SnapshotView.Create(developmentStream,root,tag);
  developmentStream.Rebase(view,bl,true);
}","public static void main(String[] args){
  UCM.SetContext(UCM.ContextType.CLEARTOOL);
  String id=Calendar.getInstance().getTime().getTime() + ""String_Node_Str"";
  String comp=""String_Node_Str"";
  String stre=""String_Node_Str"" + id + ""String_Node_Str"";
  String intstre=""String_Node_Str"";
  File root=new File(""String_Node_Str"");
  String tag=""String_Node_Str"" + id;
  if (args.length > 0) {
    comp=args[0];
    System.out.println(""String_Node_Str"" + comp);
  }
  if (args.length > 1) {
    stre=args[1];
    System.out.println(""String_Node_Str"" + stre);
  }
  if (args.length > 2) {
    intstre=args[1];
    System.out.println(""String_Node_Str"" + intstre);
  }
  if (args.length > 3) {
    tag=args[3];
    System.out.println(""String_Node_Str"" + tag);
  }
  root=new File(root,tag);
  root.mkdir();
  Stream integrationStream=UCMEntity.GetStream(intstre);
  Component co1=UCMEntity.GetComponent(comp);
  BaselineList bls=co1.GetBaselines(integrationStream,Project.Plevel.INITIAL);
  List<Baseline> rec_bls=integrationStream.GetRecommendedBaselines();
  Baseline bl=rec_bls.get(0);
  Stream developmentStream=Stream.Create(integrationStream,stre,false,bl);
  SnapshotView view=SnapshotView.Create(developmentStream,root,tag);
  developmentStream.Rebase(view,bl,true);
}",0.9845299484331614
44233,"public boolean RebaseStream(String viewtag,String stream,String baseline,boolean complete){
  logger.debug(""String_Node_Str"" + viewtag);
  String cmd=""String_Node_Str"" + (complete ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ viewtag+ ""String_Node_Str""+ stream+ ""String_Node_Str""+ baseline;
  CmdResult res=Cleartool.run(cmd);
  System.out.println(""String_Node_Str"" + res.errorBuffer.toString());
  System.out.println(""String_Node_Str"" + res.stdoutBuffer.toString());
  if (res.errorBuffer.toString().matches(""String_Node_Str"")) {
    return false;
  }
  return true;
}","public boolean RebaseStream(String viewtag,String stream,String baseline,boolean complete){
  logger.debug(""String_Node_Str"" + viewtag);
  String cmd=""String_Node_Str"" + (complete ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ viewtag+ ""String_Node_Str""+ stream+ ""String_Node_Str""+ baseline;
  CmdResult res=Cleartool.run(cmd);
  System.out.println(""String_Node_Str"" + res.errorBuffer.toString());
  System.out.println(""String_Node_Str"" + res.stdoutBuffer.toString());
  if (res.stdoutBuffer.toString().matches(""String_Node_Str"")) {
    return false;
  }
  return true;
}",0.9906063193851408
44234,"public static CmdResult run(String cmd) throws CommandLineException, AbnormalProcessTerminationException {
  return Command.run(""String_Node_Str"" + cmd);
}","public static CmdResult run(String cmd,File dir) throws CommandLineException, AbnormalProcessTerminationException {
  return Command.run(""String_Node_Str"" + cmd,dir);
}",0.959752321981424
44235,"public static CmdResult run(String cmd,File dir) throws CommandLineException, AbnormalProcessTerminationException {
  logger.trace_function();
  logger.debug(""String_Node_Str"" + cmd);
  String[] cmds=new String[3];
  cmds[0]=""String_Node_Str"";
  cmds[1]=""String_Node_Str"";
  cmds[2]=cmd;
  try {
    ProcessBuilder pb=new ProcessBuilder(cmd);
    if (dir != null) {
      logger.debug(""String_Node_Str"" + dir);
      pb.directory(dir);
    }
    CmdResult result=new CmdResult();
    Process p=pb.start();
    StreamGobbler output=new StreamGobbler(p.getInputStream());
    StreamGobbler errors=new StreamGobbler(p.getErrorStream());
    output.run();
    errors.run();
    int exitValue=p.waitFor();
    if (exitValue != 0) {
      logger.error(""String_Node_Str"" + errors.sres.toString());
      throw new AbnormalProcessTerminationException(errors.sres.toString());
    }
    p.getErrorStream().close();
    p.getOutputStream().close();
    p.getInputStream().close();
    result.stdoutBuffer=output.sres;
    result.stdoutList=output.lres;
    result.errorBuffer=errors.sres;
    result.errorList=errors.lres;
    return result;
  }
 catch (  IOException e) {
    logger.warning(""String_Node_Str"" + cmd + ""String_Node_Str""+ e.getMessage());
    throw new CommandLineException(""String_Node_Str"" + cmd + ""String_Node_Str""+ e.getMessage());
  }
catch (  InterruptedException e) {
    logger.warning(""String_Node_Str"" + cmd + ""String_Node_Str""+ e.getMessage());
    throw new CommandLineException(""String_Node_Str"" + cmd + ""String_Node_Str""+ e.getMessage());
  }
}","public static CmdResult run(String cmd,File dir) throws CommandLineException, AbnormalProcessTerminationException {
  logger.trace_function();
  logger.debug(""String_Node_Str"" + cmd);
  String[] cmds=new String[3];
  cmds[0]=""String_Node_Str"";
  cmds[1]=""String_Node_Str"";
  cmds[2]=cmd;
  try {
    ProcessBuilder pb=new ProcessBuilder(cmds);
    if (dir != null) {
      logger.debug(""String_Node_Str"" + dir);
      pb.directory(dir);
    }
    CmdResult result=new CmdResult();
    Process p=pb.start();
    StreamGobbler output=new StreamGobbler(p.getInputStream());
    StreamGobbler errors=new StreamGobbler(p.getErrorStream());
    output.run();
    errors.run();
    int exitValue=p.waitFor();
    if (exitValue != 0) {
      logger.error(""String_Node_Str"" + errors.sres.toString());
      throw new AbnormalProcessTerminationException(errors.sres.toString());
    }
    p.getErrorStream().close();
    p.getOutputStream().close();
    p.getInputStream().close();
    result.stdoutBuffer=output.sres;
    result.stdoutList=output.lres;
    result.errorBuffer=errors.sres;
    result.errorList=errors.lres;
    return result;
  }
 catch (  IOException e) {
    logger.warning(""String_Node_Str"" + cmd + ""String_Node_Str""+ e.getMessage());
    throw new CommandLineException(""String_Node_Str"" + cmd + ""String_Node_Str""+ e.getMessage());
  }
catch (  InterruptedException e) {
    logger.warning(""String_Node_Str"" + cmd + ""String_Node_Str""+ e.getMessage());
    throw new CommandLineException(""String_Node_Str"" + cmd + ""String_Node_Str""+ e.getMessage());
  }
}",0.999680204669012
44236,"@Override public List<String> GetBaselineDiff(File dir,String baseline,String other,boolean nmerge){
  CheckViewContext(dir);
  String cmd=""String_Node_Str"" + baseline;
  try {
    return Cleartool.run(cmd,dir).stdoutList;
  }
 catch (  AbnormalProcessTerminationException e) {
    if (e.getMessage().equalsIgnoreCase(""String_Node_Str"")) {
      logger.log(""String_Node_Str"" + baseline + ""String_Node_Str"");
      List<String> result=new ArrayList<String>();
      List<String> vobs=ListVobs(dir);
      for (      String vob : vobs) {
        List<String> files=Cleartool.run(""String_Node_Str"" + vob,dir).stdoutList;
        for (int i=0; i < files.size(); i++) {
          if (!files.get(i).matches(""String_Node_Str"")) {
            result.add(files.get(i));
          }
        }
      }
      return result;
    }
    throw e;
  }
}","@Override public List<String> GetBaselineDiff(File dir,String baseline,String other,boolean nmerge){
}",0.2174840085287846
44237,"private static void NewDate(Calendar n){
  nowDate=n;
  File file=null;
  if (fw != null) {
    try {
      fw.close();
      out.close();
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"");
    }
  }
  try {
    file=new File(path + ""String_Node_Str"" + logformat.format(nowDate.getTime())+ ""String_Node_Str"");
    fw=new FileWriter(file,append);
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + path + ""String_Node_Str"");
    path=""String_Node_Str"";
    try {
      file=new File(path + ""String_Node_Str"" + logformat.format(nowDate.getTime())+ ""String_Node_Str"");
      fw=new FileWriter(file,append);
    }
 catch (    IOException e1) {
      System.err.println(""String_Node_Str"");
      System.exit(1);
    }
  }
  System.out.println(""String_Node_Str"" + file.getAbsolutePath());
  out=new BufferedWriter(fw);
}","private static void NewDate(Calendar n){
  nowDate=n;
  File file=null;
  if (fw != null) {
    try {
      fw.close();
      out.close();
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"");
    }
  }
  try {
    file=new File(path + ""String_Node_Str"" + logformat.format(nowDate.getTime())+ ""String_Node_Str"");
    fw=new FileWriter(file,append);
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + path + ""String_Node_Str"");
    try {
      file=new File(""String_Node_Str"" + logformat.format(nowDate.getTime()) + ""String_Node_Str"");
      fw=new FileWriter(file,append);
    }
 catch (    IOException e1) {
      System.err.println(""String_Node_Str"");
      System.exit(1);
    }
  }
  System.out.println(""String_Node_Str"" + file.getAbsolutePath());
  out=new BufferedWriter(fw);
}",0.939929328621908
44238,"@Override public List<String> GetBaselineDiff(File dir,String baseline,String other,boolean nmerge){
}","@Override public List<String> GetBaselineDiff(File dir,String baseline,String other,boolean nmerge){
  CheckViewContext(dir);
  String cmd=""String_Node_Str"" + baseline;
  try {
    return Cleartool.run(cmd,dir).stdoutList;
  }
 catch (  AbnormalProcessTerminationException e) {
    if (e.getMessage().equalsIgnoreCase(""String_Node_Str"")) {
      logger.log(""String_Node_Str"" + baseline + ""String_Node_Str"");
      List<String> result=new ArrayList<String>();
      List<String> vobs=ListVobs(dir);
      for (      String vob : vobs) {
        List<String> files=Cleartool.run(""String_Node_Str"" + vob,dir).stdoutList;
        for (int i=0; i < files.size(); i++) {
          if (!files.get(i).matches(""String_Node_Str"")) {
            result.add(files.get(i));
          }
        }
      }
      return result;
    }
    throw e;
  }
}",0.2174840085287846
44239,"public static List<String> run(String cmd) throws CommandLineException, AbnormalProcessTerminationException {
  logger.trace_function();
  logger.debug(""String_Node_Str"" + cmd);
  String[] cmds=new String[3];
  cmds[0]=""String_Node_Str"";
  cmds[1]=""String_Node_Str"";
  cmds[2]=cmd;
  try {
    Process p=Runtime.getRuntime().exec(cmd);
    StreamGobbler output=new StreamGobbler(p.getInputStream());
    StreamGobbler errors=new StreamGobbler(p.getErrorStream());
    System.out.println(""String_Node_Str"");
    output.run();
    System.out.println(""String_Node_Str"");
    errors.run();
    int exitValue=p.waitFor();
    if (exitValue != 0) {
      logger.log(""String_Node_Str"" + output.sres.toString());
      throw new AbnormalProcessTerminationException(""String_Node_Str"" + output.sres.toString());
    }
    p.getErrorStream().close();
    p.getOutputStream().close();
    p.getInputStream().close();
    return output.lres;
  }
 catch (  IOException e) {
    logger.warning(""String_Node_Str"" + cmd + ""String_Node_Str""+ e.getMessage());
    throw new CommandLineException(""String_Node_Str"" + cmd + ""String_Node_Str""+ e.getMessage());
  }
catch (  InterruptedException e) {
    logger.warning(""String_Node_Str"" + cmd + ""String_Node_Str""+ e.getMessage());
    throw new CommandLineException(""String_Node_Str"" + cmd + ""String_Node_Str""+ e.getMessage());
  }
}","public static List<String> run(String cmd) throws CommandLineException, AbnormalProcessTerminationException {
  logger.trace_function();
  logger.debug(""String_Node_Str"" + cmd);
  String[] cmds=new String[3];
  cmds[0]=""String_Node_Str"";
  cmds[1]=""String_Node_Str"";
  cmds[2]=cmd;
  try {
    Process p=Runtime.getRuntime().exec(cmd);
    StreamGobbler output=new StreamGobbler(p.getInputStream());
    StreamGobbler errors=new StreamGobbler(p.getErrorStream());
    System.out.println(""String_Node_Str"");
    output.run();
    System.out.println(""String_Node_Str"");
    errors.run();
    int exitValue=p.waitFor();
    if (exitValue != 0) {
      logger.log(""String_Node_Str"" + output.sres.toString());
      throw new AbnormalProcessTerminationException(""String_Node_Str"" + errors.sres.toString());
    }
    p.getErrorStream().close();
    p.getOutputStream().close();
    p.getInputStream().close();
    return output.lres;
  }
 catch (  IOException e) {
    logger.warning(""String_Node_Str"" + cmd + ""String_Node_Str""+ e.getMessage());
    throw new CommandLineException(""String_Node_Str"" + cmd + ""String_Node_Str""+ e.getMessage());
  }
catch (  InterruptedException e) {
    logger.warning(""String_Node_Str"" + cmd + ""String_Node_Str""+ e.getMessage());
    throw new CommandLineException(""String_Node_Str"" + cmd + ""String_Node_Str""+ e.getMessage());
  }
}",0.9955882352941176
44240,"private static void NewDate(Calendar n){
  nowDate=n;
  if (fw != null) {
    try {
      fw.close();
      out.close();
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"");
    }
  }
  try {
    fw=new FileWriter(path + ""String_Node_Str"" + logformat.format(nowDate.getTime())+ ""String_Node_Str"",append);
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + path + ""String_Node_Str"");
    path=""String_Node_Str"";
    try {
      fw=new FileWriter(path + ""String_Node_Str"" + logformat.format(nowDate.getTime())+ ""String_Node_Str"",append);
    }
 catch (    IOException e1) {
      System.err.println(""String_Node_Str"");
      System.exit(1);
    }
  }
  out=new BufferedWriter(fw);
}","private static void NewDate(Calendar n){
  nowDate=n;
  String file=""String_Node_Str"";
  if (fw != null) {
    try {
      fw.close();
      out.close();
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"");
    }
  }
  try {
    file=""String_Node_Str"" + logformat.format(nowDate.getTime()) + ""String_Node_Str"";
    fw=new FileWriter(path + file,append);
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + path + ""String_Node_Str"");
    path=""String_Node_Str"";
    try {
      file=""String_Node_Str"" + logformat.format(nowDate.getTime()) + ""String_Node_Str"";
      fw=new FileWriter(path + file,append);
    }
 catch (    IOException e1) {
      System.err.println(""String_Node_Str"");
      System.exit(1);
    }
  }
  System.out.println(""String_Node_Str"" + path + file);
  out=new BufferedWriter(fw);
}",0.7332490518331226
44241,"public static HashMap<String,String> CGIToHash(String cgi){
  HashMap<String,String> hash=new HashMap<String,String>();
  logger.debug(""String_Node_Str"" + cgi);
  String[] entries=cgi.split(""String_Node_Str"");
  for (  String e : entries) {
    logger.debug(""String_Node_Str"" + e);
    String[] entry=e.split(""String_Node_Str"");
    hash.put(entry[0].trim(),entry[1].trim());
  }
  return hash;
}","public static HashMap<String,String> CGIToHash(String cgi){
  HashMap<String,String> hash=new HashMap<String,String>();
  logger.debug(""String_Node_Str"" + cgi);
  String[] entries=cgi.split(""String_Node_Str"");
  for (  String e : entries) {
    if (!e.contains(""String_Node_Str""))     continue;
    String[] entry=e.split(""String_Node_Str"");
    hash.put(entry[0].trim(),entry[1].trim());
  }
  return hash;
}",0.9043478260869564
44242,"public void Load(){
  String[] rs=context.LoadBaseline(this);
  String c=""String_Node_Str"" + (rs[1].matches(""String_Node_Str"") ? rs[1] : rs[1] + ""String_Node_Str"" + this.pvob);
  logger.debug(""String_Node_Str"" + c);
  String s=""String_Node_Str"" + (rs[2].matches(""String_Node_Str"") ? rs[2] : rs[2] + ""String_Node_Str"" + this.pvob);
  logger.debug(""String_Node_Str"" + s);
  this.component=(Component)UCMEntity.GetEntity(c);
  this.stream=(Stream)UCMEntity.GetEntity(s);
  this.plevel=GetPlevelFromString(rs[3]);
  this.user=rs[4];
  activities=new ArrayList<Activity>();
  this.loaded=true;
}","public void Load(){
  String[] rs=context.LoadBaseline(this);
  String c=(rs[1].matches(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + (rs[1].matches(""String_Node_Str"") ? rs[1] : rs[1] + ""String_Node_Str"" + this.pvob);
  logger.debug(""String_Node_Str"" + c);
  String s=(rs[2].matches(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + (rs[2].matches(""String_Node_Str"") ? rs[2] : rs[2] + ""String_Node_Str"" + this.pvob);
  logger.debug(""String_Node_Str"" + s);
  this.component=(Component)UCMEntity.GetEntity(c);
  this.stream=(Stream)UCMEntity.GetEntity(s);
  this.plevel=GetPlevelFromString(rs[3]);
  this.user=rs[4];
  activities=new ArrayList<Activity>();
  this.loaded=true;
}",0.8593508500772797
44243,"public boolean TagExists(String tagType,String tagID,UCMEntity entity){
  ArrayList<Tag> tags=context.ListTags(entity);
  for (  Tag t : tags) {
    t.Load();
    if (t.GetTagType().equals(t.GetTagType()) && t.GetTagID().equals(tagID)) {
      return true;
    }
  }
  return false;
}","public boolean TagExists(String tagType,String tagID,UCMEntity entity){
  ArrayList<Tag> tags=context.ListTags(entity);
  for (  Tag t : tags) {
    if (t.GetTagType().equals(t.GetTagType()) && t.GetTagID().equals(tagID)) {
      return true;
    }
  }
  return false;
}",0.9747292418772564
44244,"public Tag GetTag(String tagType,String tagID,UCMEntity entity){
  logger.debug(entity.toString());
  ArrayList<Tag> tags=context.ListTags(entity);
  for (  Tag t : tags) {
    t.Load();
    if (t.GetTagType().equals(t.GetTagType()) && t.GetTagID().equals(tagID)) {
      t.SetTagEntity(entity);
      return t;
    }
  }
  logger.log(""String_Node_Str"" + tagType + tagID+ ""String_Node_Str"");
  Tag tag=context.NewTag(tagType,tagID,entity,""String_Node_Str"");
  return tag;
}","public Tag GetTag(String tagType,String tagID,UCMEntity entity){
  logger.debug(entity.toString());
  ArrayList<Tag> tags=context.ListTags(entity);
  for (  Tag t : tags) {
    if (t.GetTagType().equals(t.GetTagType()) && t.GetTagID().equals(tagID)) {
      t.SetTagEntity(entity);
      return t;
    }
  }
  logger.log(""String_Node_Str"" + tagType + tagID+ ""String_Node_Str"");
  Tag tag=context.NewTag(tagType,tagID,entity,""String_Node_Str"");
  return tag;
}",0.9849785407725322
44245,"public void SaveState(){
  context.SaveState();
}","public static void SaveState(){
  context.SaveState();
}",0.9333333333333332
44246,"public Tuple<Stream,String> GetStreamFromView(File viewroot){
  String wvroot=strategy.GetCurrentViewRoot(viewroot);
  String viewtag=SnapshotView.ViewrootIsValid(wvroot);
  String streamstr=strategy.GetStreamFromView(viewtag);
  Stream stream=UCMEntity.GetStream(streamstr);
  return new Tuple<Stream,String>(stream,viewtag);
}","public Tuple<Stream,String> GetStreamFromView(File viewroot){
  File wvroot=strategy.GetCurrentViewRoot(viewroot);
  String viewtag=""String_Node_Str"";
  try {
    viewtag=strategy.ViewrootIsValid(wvroot);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  String streamstr=strategy.GetStreamFromView(viewtag);
  Stream stream=UCMEntity.GetStream(streamstr);
  return new Tuple<Stream,String>(stream,viewtag);
}",0.8277703604806409
44247,"public ArrayList<Tag> ListTags(UCMEntity entity){
  ArrayList<Tag> tags=new ArrayList<Tag>();
  String result=strategy.GetTags(entity.GetFQName()).trim();
  String[] rs=result.split(""String_Node_Str"");
  if (result.length() > 0) {
    for (    String s : rs) {
      tags.add((Tag)UCMEntity.GetEntity(s.trim()));
    }
  }
  return tags;
}","public ArrayList<Tag> ListTags(UCMEntity entity){
  ArrayList<Tag> tags=new ArrayList<Tag>();
  List<Tuple<String,String>> result=strategy.GetTags(entity.GetFQName());
  if (result.size() > 0) {
    for (    Tuple<String,String> s : result) {
      Tag tag=(Tag)UCMEntity.GetEntity(s.t1.trim());
      tag.SetKeyValue(s.t2);
      tags.add(tag);
    }
  }
  return tags;
}",0.7229254571026723
44248,"public void MakeSnapshotView(Stream stream,String viewroot,String viewtag){
  strategy.MakeSnapshotView(stream.GetFQName(),viewtag,viewroot);
}","public void MakeSnapshotView(Stream stream,File viewroot,String viewtag){
  strategy.MakeSnapshotView(stream.GetFQName(),viewroot,viewtag);
}",0.9366197183098592
44249,"public void printResults(IQuery query){
  String resultType=query.getResults().getResultType();
  outputStream.println(String.format(""String_Node_Str"",resultType));
  if (resultType.equalsIgnoreCase(ResultType.XML.toString())) {
    outputStream.println(XMLResult.class.cast(query).resultsAsMergedXML());
    return;
  }
  if (resultType.equalsIgnoreCase(ResultType.CTM.toString())) {
    outputStream.println(CTMResult.class.cast(query).resultsAsMergedCTM());
    return;
  }
  printComplexResults(query);
}","public void printResults(IQuery query){
  String resultType=query.getResults().getResultType();
  outputStream.println(String.format(""String_Node_Str"",resultType));
  if (resultType.equalsIgnoreCase(ResultType.XML.toString())) {
    outputStream.println(XMLResult.class.cast(query.getResults()).resultsAsMergedXML());
    return;
  }
  if (resultType.equalsIgnoreCase(ResultType.CTM.toString())) {
    outputStream.println(CTMResult.class.cast(query.getResults()).resultsAsMergedCTM());
    return;
  }
  printComplexResults(query);
}",0.9750479846449136
44250,"public void open() throws IOException {
  output.println(""String_Node_Str"");
  InputStreamReader converter=new InputStreamReader(System.in);
  BufferedReader in=new BufferedReader(converter);
  String q=""String_Node_Str"";
  while (true) {
    output.print(String.format(""String_Node_Str"",prefix,q.isEmpty() ? ""String_Node_Str"" : ""String_Node_Str""));
    String line=in.readLine();
    if (q.isEmpty()) {
      String trimedLine=line.trim();
      if (trimedLine.matches(""String_Node_Str""))       break;
      if (trimedLine.matches(""String_Node_Str"")) {
        printCommands();
        continue;
      }
      if (trimedLine.matches(""String_Node_Str"")) {
        printStats();
        continue;
      }
    }
    q=q.concat(line);
    if (!line.trim().endsWith(""String_Node_Str""))     continue;
    q=q.substring(0,q.lastIndexOf(""String_Node_Str""));
    runQuery(q);
    q=""String_Node_Str"";
  }
}","public void open() throws IOException {
  output.println(""String_Node_Str"");
  InputStreamReader converter=new InputStreamReader(System.in);
  BufferedReader in=new BufferedReader(converter);
  String q=""String_Node_Str"";
  while (true) {
    output.print(String.format(""String_Node_Str"",prefix,q.isEmpty() ? ""String_Node_Str"" : ""String_Node_Str""));
    String line=in.readLine();
    if (q.isEmpty()) {
      String trimedLine=line.trim();
      if (trimedLine.matches(""String_Node_Str""))       break;
      if (trimedLine.matches(""String_Node_Str"")) {
        printCommands();
        continue;
      }
      if (trimedLine.matches(""String_Node_Str"")) {
        printStats();
        continue;
      }
    }
    q=q.concat(line);
    if (!line.trim().endsWith(""String_Node_Str""))     continue;
    if (q.trim().length() > 1) {
      q=q.substring(0,q.lastIndexOf(""String_Node_Str""));
      runQuery(q);
    }
    q=""String_Node_Str"";
  }
}",0.9766177270255574
44251,"public void open() throws IOException {
  output.println(""String_Node_Str"");
  String q=""String_Node_Str"";
  String line;
  while ((line=reader.readLine(String.format(""String_Node_Str"",prefix,q.isEmpty() ? ""String_Node_Str"" : ""String_Node_Str""))) != null) {
    if (q.isEmpty()) {
      String trimedLine=line.trim();
      if (trimedLine.matches(""String_Node_Str""))       break;
      if (trimedLine.matches(""String_Node_Str"")) {
        printCommands();
        continue;
      }
      if (trimedLine.matches(""String_Node_Str"")) {
        printStats();
        continue;
      }
    }
    q=q.concat(line);
    if (!line.trim().endsWith(""String_Node_Str""))     continue;
    if (q.trim().length() > 1) {
      q=q.substring(0,q.lastIndexOf(""String_Node_Str""));
      runQuery(q);
    }
    q=""String_Node_Str"";
  }
}","public void open() throws IOException {
  output.println(""String_Node_Str"");
  String q=""String_Node_Str"";
  String line;
  while ((line=reader.readLine(String.format(""String_Node_Str"",prefix,q.isEmpty() ? ""String_Node_Str"" : ""String_Node_Str""))) != null) {
    if (q.isEmpty()) {
      String trimedLine=line.trim();
      if (trimedLine.matches(""String_Node_Str""))       break;
      if (trimedLine.matches(""String_Node_Str"")) {
        printCommands();
        continue;
      }
      if (trimedLine.matches(""String_Node_Str"")) {
        printStats();
        continue;
      }
    }
    q=q.concat(line + ""String_Node_Str"");
    if (!line.trim().endsWith(""String_Node_Str""))     continue;
    if (q.trim().length() > 1) {
      q=q.substring(0,q.lastIndexOf(""String_Node_Str""));
      runQuery(q);
    }
    q=""String_Node_Str"";
  }
}",0.9879227053140096
44252,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  boolean permission=false;
  try {
    permission=checkPermission((Player)sender,""String_Node_Str"");
  }
 catch (  Exception E) {
    permission=true;
  }
  if (!permission) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (args.length < 1) {
    return false;
  }
  if (args.length == 2 && args[0].compareTo(""String_Node_Str"") == 0) {
    try {
      int newMax=Integer.parseInt(args[0]);
      if (newMax >= 0) {
        plugin.setMobMax(newMax);
        sender.sendMessage(""String_Node_Str"" + newMax);
        return true;
      }
 else       return false;
    }
 catch (    Exception e) {
      return false;
    }
  }
  if (args.length == 1 && args[0].compareTo(""String_Node_Str"") == 0) {
    try {
      Player p=(Player)sender;
      plugin.purgeMobs(p.getWorld());
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
 catch (    Exception E) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
  }
  if (args.length == 2 && args[0].compareTo(""String_Node_Str"") == 0) {
    addBlackList(args[1]);
    sender.sendMessage(""String_Node_Str"" + args[1] + ""String_Node_Str"");
    return true;
  }
  if (args.length == 2 && args[0].compareTo(""String_Node_Str"") == 0) {
    boolean didWork=removeBlackList(args[1]);
    if (didWork) {
      sender.sendMessage(""String_Node_Str"" + args[1] + ""String_Node_Str"");
      return true;
    }
 else {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
  }
  return false;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  boolean permission=false;
  try {
    permission=checkPermission((Player)sender,""String_Node_Str"");
  }
 catch (  Exception E) {
    permission=true;
  }
  if (!permission) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  if (args.length < 1) {
    return false;
  }
  if (args.length == 2 && args[0].compareTo(""String_Node_Str"") == 0) {
    try {
      int newMax=Integer.parseInt(args[1]);
      if (newMax >= -1) {
        plugin.setMobMax(newMax);
        sender.sendMessage(""String_Node_Str"" + newMax);
        return true;
      }
 else       return false;
    }
 catch (    Exception e) {
      return false;
    }
  }
  if (args.length == 1 && args[0].compareTo(""String_Node_Str"") == 0) {
    try {
      Player p=(Player)sender;
      plugin.purgeMobs(p.getWorld());
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
 catch (    Exception E) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
  }
  if (args.length == 1 && args[0].compareTo(""String_Node_Str"") == 0) {
    sender.sendMessage(""String_Node_Str"" + mobMax);
    return true;
  }
  if (args.length == 1 && args[0].compareTo(""String_Node_Str"") == 0) {
    String mobs=""String_Node_Str"";
    boolean ran=false;
    for (    String mob : mobBlacklist) {
      mobs+=mob + ""String_Node_Str"";
      ran=true;
    }
    if (ran)     mobs=mobs.substring(0,mobs.length() - 2);
    sender.sendMessage(""String_Node_Str"" + mobs);
    return true;
  }
  if (args.length == 2 && args[0].compareTo(""String_Node_Str"") == 0) {
    addBlackList(args[1]);
    sender.sendMessage(""String_Node_Str"" + args[1] + ""String_Node_Str"");
    return true;
  }
  if (args.length == 2 && args[0].compareTo(""String_Node_Str"") == 0) {
    boolean didWork=removeBlackList(args[1]);
    if (didWork) {
      sender.sendMessage(""String_Node_Str"" + args[1] + ""String_Node_Str"");
      return true;
    }
 else {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
  }
  return false;
}",0.8621526841111411
44253,"public void setupMobMax(){
  config.load();
  mobMax=config.getInt(""String_Node_Str"",-1);
}","public void setupMobMax(){
  config.load();
  mobMax=config.getInt(""String_Node_Str"",-1);
  config.setProperty(""String_Node_Str"",mobMax);
  config.save();
}",0.7368421052631579
44254,"public void addBlackList(String type){
  config.load();
  String blacklist=config.getString(""String_Node_Str"");
  blacklist=blacklist + ""String_Node_Str"" + type.toLowerCase();
  config.setProperty(""String_Node_Str"",blacklist);
  mobBlacklist.add(type.toLowerCase());
}","public void addBlackList(String type){
  config.load();
  mobBlacklist.add(type.toLowerCase());
  String blacklist=""String_Node_Str"";
  for (  String mob : mobBlacklist) {
    blacklist+=mob + ""String_Node_Str"";
  }
  config.setProperty(""String_Node_Str"",blacklist.trim());
  config.save();
}",0.525
44255,"public boolean removeBlackList(String type){
  config.load();
  boolean wasThere=mobBlacklist.remove(type.toLowerCase());
  if (!wasThere) {
    return false;
  }
  String blacklist=""String_Node_Str"";
  for (  String mob : mobBlacklist) {
    blacklist=blacklist + ""String_Node_Str"" + mob;
  }
  config.setProperty(""String_Node_Str"",blacklist.trim());
  return true;
}","public boolean removeBlackList(String type){
  config.load();
  try {
    boolean wasThere=mobBlacklist.remove(type.toLowerCase());
    if (!wasThere) {
      return false;
    }
  }
 catch (  Exception e) {
    System.out.println(e);
    System.out.println(e.getMessage());
    return false;
  }
  String blacklist=""String_Node_Str"";
  for (  String mob : mobBlacklist) {
    blacklist+=mob + ""String_Node_Str"";
  }
  config.setProperty(""String_Node_Str"",blacklist.trim());
  config.save();
  return true;
}",0.8059360730593608
44256,"public void setupBlacklist(){
  config.load();
  String blacklist=config.getString(""String_Node_Str"");
  try {
    mobBlacklist=Arrays.asList(blacklist.split(""String_Node_Str""));
  }
 catch (  Exception e) {
    mobBlacklist=new ArrayList<String>();
  }
  for (  String mob : mobBlacklist) {
    mob=mob.toLowerCase();
  }
}","public void setupBlacklist(){
  config.load();
  mobBlacklist=new ArrayList<String>();
  try {
    String[] blacklist=config.getString(""String_Node_Str"").split(""String_Node_Str"");
    for (    String mob : blacklist) {
      mobBlacklist.add(mob);
    }
  }
 catch (  Exception e) {
    config.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
}",0.4606240713224368
44257,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.route);
  mRoute=(Route)getIntent().getParcelableExtra(""String_Node_Str"");
  initActionBar(mRoute.getTitle());
  mMapView=(MapView)findViewById(R.id.mapview);
  mMapView.setBuiltInZoomControls(true);
  mMapOverlays=mMapView.getOverlays();
  itemizedOverlay=new PlaceItemizedOverlay(this,mMapView);
  initList(mRoute);
  int index=1;
  for (  Place place : mRoute.getPlaces()) {
    addPlaceOverlay(place,index);
    index++;
  }
  mMapOverlays.add(itemizedOverlay);
  myLocationOverlay(mMapView);
  mMc=mMapView.getController();
  final MapController mc=mMc;
  if (mMapOverlays.size() > 0) {
    PlaceItemizedOverlay first=(PlaceItemizedOverlay)mMapOverlays.get(0);
    GeoPoint point=first.getCenter();
    mc.animateTo(point);
    mc.setZoom(14);
  }
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.route);
  mRoute=(Route)getIntent().getParcelableExtra(""String_Node_Str"");
  initActionBar(mRoute.getTitle());
  mMapView=(MapView)findViewById(R.id.mapview);
  mMapView.setBuiltInZoomControls(true);
  mMapOverlays=mMapView.getOverlays();
  itemizedOverlay=new PlaceItemizedOverlay(this,mMapView);
  initList(mRoute);
  int index=1;
  for (  Place place : mRoute.getPlaces()) {
    addPlaceOverlay(place,index);
    index++;
  }
  mMapOverlays.add(itemizedOverlay);
  myLocationOverlay(mMapView);
  mMc=mMapView.getController();
  final MapController mc=mMc;
  if (mMapOverlays.size() > 0) {
    PlaceItemizedOverlay first=(PlaceItemizedOverlay)mMapOverlays.get(0);
    GeoPoint point=first.getCenter();
    mc.animateTo(point);
    mc.setZoom(14);
  }
  onRotationChange(getResources().getConfiguration());
}",0.9713690786048932
44258,"/** 
 * @see android.app.Activity#onConfigurationChanged(android.content.res.Configuration)
 */
@Override public void onConfigurationChanged(Configuration newConfig){
  if (newConfig.orientation == newConfig.ORIENTATION_LANDSCAPE) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    mPlacesList.setVisibility(View.VISIBLE);
  }
 else {
    mPlacesList.setVisibility(View.GONE);
  }
  super.onConfigurationChanged(newConfig);
}","/** 
 * @see android.app.Activity#onConfigurationChanged(android.content.res.Configuration)
 */
@Override public void onConfigurationChanged(Configuration newConfig){
  onRotationChange(newConfig);
  super.onConfigurationChanged(newConfig);
}",0.573134328358209
44259,"public List<Route> list(){
  List<Route> routeList=new LinkedList<Route>();
  Route route=new Route();
  route.setTitle(""String_Node_Str"");
  User user=new User(""String_Node_Str"");
  route.setCreator(user);
  route.setDescription(""String_Node_Str"");
  Place place1=new Place();
  place1.setTitle(""String_Node_Str"");
  place1.setDescription(""String_Node_Str"");
  Place place2=new Place();
  place2.setTitle(""String_Node_Str"");
  place2.setDescription(""String_Node_Str"");
  Place place3=new Place();
  place3.setTitle(""String_Node_Str"");
  place3.setDescription(""String_Node_Str"");
  Place place4=new Place();
  place4.setTitle(""String_Node_Str"");
  place4.setDescription(""String_Node_Str"");
  Location loc1=new Location(""String_Node_Str"");
  loc1.setLatitude(62.4007043202567);
  loc1.setLongitude(17.2577392061653);
  place1.setGeoLocation(loc1);
  Location loc2=new Location(""String_Node_Str"");
  loc2.setLatitude(62.394369903217);
  loc2.setLongitude(17.2816450479837);
  place2.setGeoLocation(loc2);
  Location loc3=new Location(""String_Node_Str"");
  loc3.setLatitude(62.3897829867526);
  loc3.setLongitude(17.2995418371631);
  place3.setGeoLocation(loc3);
  Location loc4=new Location(""String_Node_Str"");
  loc4.setLatitude(62.391178326117);
  loc4.setLongitude(17.3004228024664);
  place4.setGeoLocation(loc4);
  Map<Integer,Place> placeRecordMap=new HashMap<Integer,Place>();
  placeRecordMap.put(1,place1);
  placeRecordMap.put(2,place2);
  placeRecordMap.put(3,place3);
  placeRecordMap.put(4,place4);
  List<Record> placeRecords=new ArrayList<Record>();
  try {
    for (    Integer i : placeRecordMap.keySet()) {
      String filename=String.format(""String_Node_Str"",i);
      InputStream is=this.mAssetManager.open(filename);
      XMLPull pull=new XMLPull(is);
      placeRecordMap.get(i).setRecords(pull.parse());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  List<Place> places=new LinkedList<Place>();
  places.add(place1);
  places.add(place2);
  places.add(place3);
  places.add(place4);
  route.setPlaces(places);
  routeList.add(route);
  return routeList;
}","public List<Route> list(){
  List<Route> routeList=new LinkedList<Route>();
  Route route=new Route();
  route.setTitle(""String_Node_Str"");
  User user=new User();
  user.setUserName(""String_Node_Str"");
  route.setCreatedBy(user);
  route.setDescription(""String_Node_Str"");
  Place place1=new Place();
  place1.setTitle(""String_Node_Str"");
  place1.setDescription(""String_Node_Str"");
  Place place2=new Place();
  place2.setTitle(""String_Node_Str"");
  place2.setDescription(""String_Node_Str"");
  Place place3=new Place();
  place3.setTitle(""String_Node_Str"");
  place3.setDescription(""String_Node_Str"");
  Place place4=new Place();
  place4.setTitle(""String_Node_Str"");
  place4.setDescription(""String_Node_Str"");
  Location loc1=new Location(""String_Node_Str"");
  loc1.setLatitude(62.4007043202567);
  loc1.setLongitude(17.2577392061653);
  place1.setGeoLocation(loc1);
  Location loc2=new Location(""String_Node_Str"");
  loc2.setLatitude(62.394369903217);
  loc2.setLongitude(17.2816450479837);
  place2.setGeoLocation(loc2);
  Location loc3=new Location(""String_Node_Str"");
  loc3.setLatitude(62.3897829867526);
  loc3.setLongitude(17.2995418371631);
  place3.setGeoLocation(loc3);
  Location loc4=new Location(""String_Node_Str"");
  loc4.setLatitude(62.391178326117);
  loc4.setLongitude(17.3004228024664);
  place4.setGeoLocation(loc4);
  Map<Integer,Place> placeRecordMap=new HashMap<Integer,Place>();
  placeRecordMap.put(1,place1);
  placeRecordMap.put(2,place2);
  placeRecordMap.put(3,place3);
  placeRecordMap.put(4,place4);
  List<Record> placeRecords=new ArrayList<Record>();
  try {
    for (    Integer i : placeRecordMap.keySet()) {
      String filename=String.format(""String_Node_Str"",i);
      InputStream is=this.mAssetManager.open(filename);
      XMLPull pull=new XMLPull(is);
      placeRecordMap.get(i).setRecords(pull.parse());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  List<Place> places=new LinkedList<Place>();
  places.add(place1);
  places.add(place2);
  places.add(place3);
  places.add(place4);
  route.setPlaces(places);
  routeList.add(route);
  return routeList;
}",0.989578398863098
44260,"@Override public void writeToParcel(Parcel dest,int flags){
  dest.writeString(this.title);
  dest.writeString(this.description);
  dest.writeTypedList(this.places);
}","@Override public void writeToParcel(Parcel dest,int flags){
  dest.writeString(title);
  dest.writeParcelable(createdBy,0);
  dest.writeString(description);
  dest.writeTypedList(places);
}",0.8539325842696629
44261,"public Route(Parcel parcel){
  this.title=parcel.readString();
  this.description=parcel.readString();
  this.places=new ArrayList<Place>();
  parcel.readTypedList(this.places,Place.CREATOR);
}","public Route(Parcel parcel){
  title=parcel.readString();
  createdBy=parcel.readParcelable(User.class.getClassLoader());
  description=parcel.readString();
  places=new ArrayList<Place>();
  parcel.readTypedList(places,Place.CREATOR);
}",0.7627906976744186
44262,"public List<Route> list(){
  List<Route> routeList=new LinkedList<Route>();
  Route route=new Route();
  route.setTitle(""String_Node_Str"");
  User user=new User(""String_Node_Str"");
  route.setCreator(user);
  route.setDescription(""String_Node_Str"");
  Place place1=new Place();
  place1.setTitle(""String_Node_Str"");
  place1.setDescription(""String_Node_Str"");
  Place place2=new Place();
  place2.setTitle(""String_Node_Str"");
  place2.setDescription(""String_Node_Str"");
  Place place3=new Place();
  place3.setTitle(""String_Node_Str"");
  place3.setDescription(""String_Node_Str"");
  Place place4=new Place();
  place4.setTitle(""String_Node_Str"");
  place4.setDescription(""String_Node_Str"");
  Location loc1=new Location(""String_Node_Str"");
  loc1.setLatitude(62.4007043202567);
  loc1.setLongitude(17.2577392061653);
  place1.setGeoLocation(loc1);
  Location loc2=new Location(""String_Node_Str"");
  loc2.setLatitude(62.394369903217);
  loc2.setLongitude(17.2816450479837);
  place2.setGeoLocation(loc2);
  Location loc3=new Location(""String_Node_Str"");
  loc3.setLatitude(62.3897829867526);
  loc3.setLongitude(17.2995418371631);
  place3.setGeoLocation(loc3);
  Location loc4=new Location(""String_Node_Str"");
  loc4.setLatitude(62.391178326117);
  loc4.setLongitude(17.3004228024664);
  place4.setGeoLocation(loc4);
  Map<Integer,Place> placeRecordMap=new HashMap<Integer,Place>();
  placeRecordMap.put(1,place1);
  placeRecordMap.put(2,place2);
  placeRecordMap.put(3,place3);
  placeRecordMap.put(4,place4);
  List<Record> placeRecords=new ArrayList<Record>();
  try {
    for (    Integer i : placeRecordMap.keySet()) {
      String filename=String.format(""String_Node_Str"",i);
      InputStream is=this.mAssetManager.open(""String_Node_Str"");
      XMLPull pull=new XMLPull(is);
      placeRecordMap.get(i).setRecords(pull.parse());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  List<Place> places=new LinkedList<Place>();
  places.add(place1);
  places.add(place2);
  places.add(place3);
  places.add(place4);
  route.setPlaces(places);
  routeList.add(route);
  return routeList;
}","public List<Route> list(){
  List<Route> routeList=new LinkedList<Route>();
  Route route=new Route();
  route.setTitle(""String_Node_Str"");
  User user=new User(""String_Node_Str"");
  route.setCreator(user);
  route.setDescription(""String_Node_Str"");
  Place place1=new Place();
  place1.setTitle(""String_Node_Str"");
  place1.setDescription(""String_Node_Str"");
  Place place2=new Place();
  place2.setTitle(""String_Node_Str"");
  place2.setDescription(""String_Node_Str"");
  Place place3=new Place();
  place3.setTitle(""String_Node_Str"");
  place3.setDescription(""String_Node_Str"");
  Place place4=new Place();
  place4.setTitle(""String_Node_Str"");
  place4.setDescription(""String_Node_Str"");
  Location loc1=new Location(""String_Node_Str"");
  loc1.setLatitude(62.4007043202567);
  loc1.setLongitude(17.2577392061653);
  place1.setGeoLocation(loc1);
  Location loc2=new Location(""String_Node_Str"");
  loc2.setLatitude(62.394369903217);
  loc2.setLongitude(17.2816450479837);
  place2.setGeoLocation(loc2);
  Location loc3=new Location(""String_Node_Str"");
  loc3.setLatitude(62.3897829867526);
  loc3.setLongitude(17.2995418371631);
  place3.setGeoLocation(loc3);
  Location loc4=new Location(""String_Node_Str"");
  loc4.setLatitude(62.391178326117);
  loc4.setLongitude(17.3004228024664);
  place4.setGeoLocation(loc4);
  Map<Integer,Place> placeRecordMap=new HashMap<Integer,Place>();
  placeRecordMap.put(1,place1);
  placeRecordMap.put(2,place2);
  placeRecordMap.put(3,place3);
  placeRecordMap.put(4,place4);
  List<Record> placeRecords=new ArrayList<Record>();
  try {
    for (    Integer i : placeRecordMap.keySet()) {
      String filename=String.format(""String_Node_Str"",i);
      InputStream is=this.mAssetManager.open(filename);
      XMLPull pull=new XMLPull(is);
      placeRecordMap.get(i).setRecords(pull.parse());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  List<Place> places=new LinkedList<Place>();
  places.add(place1);
  places.add(place2);
  places.add(place3);
  places.add(place4);
  route.setPlaces(places);
  routeList.add(route);
  return routeList;
}",0.9940575231756597
44263,"/** 
 * Write the given input stream to the appender
 * @param input
 */
public void write(InputStream input){
  if (enabled) {
    BufferedReader in=new BufferedReader(new InputStreamReader(input));
    String line=""String_Node_Str"";
    try {
      while ((line=in.readLine()) != null) {
synchronized (getOut()) {
          getOut().write(line + Logger.linesep);
          getOut().flush();
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * Write the given input stream to the appender
 * @param input
 */
public void write(InputStream input){
  if (enabled) {
    BufferedReader in=null;
    try {
      in=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
      String line=""String_Node_Str"";
      try {
        while ((line=in.readLine()) != null) {
synchronized (getOut()) {
            getOut().write(line + Logger.linesep);
            getOut().flush();
          }
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
  }
}",0.8354203935599285
44264,"public FileAppender(File file,LogLevel level) throws IOException {
  super(new PrintWriter(new FileWriter(file,true)),level);
  this.file=file;
}","public FileAppender(File file,LogLevel level) throws IOException {
  super(new PrintWriter(file,""String_Node_Str""),level);
  this.file=file;
}",0.89198606271777
44265,"public static JsonArray get(String roadName) throws EniroMapException {
  HttpClient client=new DefaultHttpClient();
  HttpGet get=null;
  try {
    URIBuilder builder=new URIBuilder(url);
    builder.setParameter(""String_Node_Str"",""String_Node_Str"");
    builder.setParameter(""String_Node_Str"",""String_Node_Str"");
    builder.setParameter(""String_Node_Str"",""String_Node_Str"");
    builder.setParameter(""String_Node_Str"",""String_Node_Str"");
    builder.setParameter(""String_Node_Str"",""String_Node_Str"");
    builder.setParameter(""String_Node_Str"",roadName);
    get=new HttpGet(builder.build());
  }
 catch (  URISyntaxException e) {
    throw new EniroMapException(e);
  }
  HttpResponse response=null;
  try {
    response=client.execute(get);
  }
 catch (  IOException e) {
    throw new EniroMapException(e);
  }
  HttpEntity entity=response.getEntity();
  if (entity != null) {
    JsonElement jelement=null;
    try {
      BufferedReader br=new BufferedReader(new InputStreamReader(entity.getContent()));
      String jsonLine=br.readLine();
      jelement=new JsonParser().parse(jsonLine);
    }
 catch (    IOException e) {
      throw new EniroMapException(e);
    }
    if (jelement.getAsJsonObject().getAsJsonObject(""String_Node_Str"").getAsJsonObject(""String_Node_Str"").getAsJsonArray(""String_Node_Str"") == null) {
      throw new EniroMapException(""String_Node_Str"" + roadName);
    }
    JsonObject geometry=null;
    try {
      geometry=jelement.getAsJsonObject().getAsJsonObject(""String_Node_Str"").getAsJsonObject(""String_Node_Str"").getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject().getAsJsonObject(""String_Node_Str"");
    }
 catch (    Exception e) {
      throw new EniroMapException(""String_Node_Str"",e);
    }
    JsonArray coords=geometry.getAsJsonArray(""String_Node_Str"");
    return coords;
  }
 else {
    throw new EniroMapException(""String_Node_Str"" + response.getStatusLine().toString());
  }
}","public static JsonArray get(String roadName) throws EniroMapException {
  HttpClient client=new DefaultHttpClient();
  HttpGet get=null;
  try {
    URIBuilder builder=new URIBuilder(url);
    builder.setParameter(""String_Node_Str"",""String_Node_Str"");
    builder.setParameter(""String_Node_Str"",""String_Node_Str"");
    builder.setParameter(""String_Node_Str"",""String_Node_Str"");
    builder.setParameter(""String_Node_Str"",""String_Node_Str"");
    builder.setParameter(""String_Node_Str"",""String_Node_Str"");
    builder.setParameter(""String_Node_Str"",roadName);
    get=new HttpGet(builder.build());
  }
 catch (  URISyntaxException e) {
    throw new EniroMapException(e);
  }
  HttpResponse response=null;
  try {
    response=client.execute(get);
  }
 catch (  IOException e) {
    throw new EniroMapException(e);
  }
  HttpEntity entity=response.getEntity();
  if (entity != null) {
    JsonElement jelement=null;
    try {
      BufferedReader br=new BufferedReader(new InputStreamReader(entity.getContent(),""String_Node_Str""));
      String jsonLine=br.readLine();
      jelement=new JsonParser().parse(jsonLine);
    }
 catch (    IOException e) {
      throw new EniroMapException(e);
    }
    if (jelement.getAsJsonObject().getAsJsonObject(""String_Node_Str"").getAsJsonObject(""String_Node_Str"").getAsJsonArray(""String_Node_Str"") == null) {
      throw new EniroMapException(""String_Node_Str"" + roadName);
    }
    JsonObject geometry=null;
    try {
      geometry=jelement.getAsJsonObject().getAsJsonObject(""String_Node_Str"").getAsJsonObject(""String_Node_Str"").getAsJsonArray(""String_Node_Str"").get(0).getAsJsonObject().getAsJsonObject(""String_Node_Str"");
    }
 catch (    Exception e) {
      throw new EniroMapException(""String_Node_Str"",e);
    }
    JsonArray coords=geometry.getAsJsonArray(""String_Node_Str"");
    return coords;
  }
 else {
    throw new EniroMapException(""String_Node_Str"" + response.getStatusLine().toString());
  }
}",0.995360824742268
44266,"public void setRecorder(Recorder recorder){
  this.recorder=recorder;
}","public static void setRecorder(Recorder recorder){
  recorder=recorder;
}",0.9166666666666666
44267,"public void run(){
  try {
    InputStreamReader isr=new InputStreamReader(is);
    BufferedReader br=new BufferedReader(isr);
    String line=null;
    while ((line=br.readLine()) != null) {
      lres.add(line);
    }
    for (int i=0; i < lres.size() - 1; ++i) {
      sres.append(lres.get(i) + linesep);
    }
    if (lres.size() > 0) {
      sres.append(lres.get(lres.size() - 1));
    }
synchronized (this) {
      notifyAll();
    }
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
}","public void run(){
  try {
    InputStreamReader isr=new InputStreamReader(is,""String_Node_Str"");
    BufferedReader br=new BufferedReader(isr);
    String line=null;
    while ((line=br.readLine()) != null) {
      lres.add(line);
    }
    for (int i=0; i < lres.size() - 1; ++i) {
      sres.append(lres.get(i) + linesep);
    }
    if (lres.size() > 0) {
      sres.append(lres.get(lres.size() - 1));
    }
synchronized (this) {
      notifyAll();
    }
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
}",0.9824902723735408
44268,"/** 
 * Convert   {@link InputStream} to {@link String}
 */
public static String toString(InputStream is){
  java.util.Scanner s=new java.util.Scanner(is).useDelimiter(""String_Node_Str"");
  return s.hasNext() ? s.next() : ""String_Node_Str"";
}","/** 
 * Convert   {@link InputStream} to {@link String}
 */
public static String toString(InputStream is){
  java.util.Scanner s=new java.util.Scanner(is,""String_Node_Str"").useDelimiter(""String_Node_Str"");
  return s.hasNext() ? s.next() : ""String_Node_Str"";
}",0.9641434262948207
44269,"public static String streamToString(InputStream is) throws IOException {
  if (is != null) {
    Writer writer=new StringWriter();
    char[] buffer=new char[1024];
    try {
      Reader reader=new BufferedReader(new InputStreamReader(is));
      int n;
      while ((n=reader.read(buffer)) != -1) {
        writer.write(buffer,0,n);
      }
    }
  finally {
      is.close();
    }
    return writer.toString();
  }
 else {
    return ""String_Node_Str"";
  }
}","public static String streamToString(InputStream is) throws IOException {
  if (is != null) {
    Writer writer=new StringWriter();
    char[] buffer=new char[1024];
    try {
      Reader reader=new BufferedReader(new InputStreamReader(is,""String_Node_Str""));
      int n;
      while ((n=reader.read(buffer)) != -1) {
        writer.write(buffer,0,n);
      }
    }
  finally {
      is.close();
    }
    return writer.toString();
  }
 else {
    return ""String_Node_Str"";
  }
}",0.9808917197452228
44270,"public static List<String> streamToStrings(InputStream is) throws IOException {
  if (is != null) {
    List<String> lines=new ArrayList<String>();
    try {
      BufferedReader reader=new BufferedReader(new InputStreamReader(is));
      String line=""String_Node_Str"";
      while ((line=reader.readLine()) != null) {
        lines.add(line);
      }
    }
  finally {
      is.close();
    }
    return lines;
  }
 else {
    return null;
  }
}","public static List<String> streamToStrings(InputStream is) throws IOException {
  if (is != null) {
    List<String> lines=new ArrayList<String>();
    try {
      BufferedReader reader=new BufferedReader(new InputStreamReader(is,""String_Node_Str""));
      String line=""String_Node_Str"";
      while ((line=reader.readLine()) != null) {
        lines.add(line);
      }
    }
  finally {
      is.close();
    }
    return lines;
  }
 else {
    return null;
  }
}",0.931868131868132
44271,"@Override public Feed fromFeed(XML xml) throws FeedException {
  Element root=xml.getRoot();
  String title=""String_Node_Str"";
  String id=""String_Node_Str"";
  Date updated=null;
  try {
    title=xml.getFirstElement(""String_Node_Str"").getTextContent();
    id=xml.getFirstElement(""String_Node_Str"").getTextContent();
    try {
      updated=format.parse(xml.getFirstElement(""String_Node_Str"").getTextContent());
    }
 catch (    ParseException e) {
      updated=oldformat.parse(xml.getFirstElement(""String_Node_Str"").getTextContent());
    }
  }
 catch (  Exception ex) {
    throw new FeedException(""String_Node_Str"",ex);
  }
  Feed feed=new Feed(title,id,updated);
  try {
    feed.author=getPerson(xml.getFirstElement(""String_Node_Str""),xml);
  }
 catch (  Exception ex) {
  }
  try {
    feed.link=xml.getFirstElement(""String_Node_Str"").getTextContent();
  }
 catch (  Exception ex) {
  }
  List<Element> elements=xml.getElements(root,""String_Node_Str"");
  for (  Element e : elements) {
    String etitle=""String_Node_Str"";
    String eid=""String_Node_Str"";
    Date eupdated=null;
    try {
      etitle=xml.getFirstElement(e,""String_Node_Str"").getTextContent();
      eid=xml.getFirstElement(e,""String_Node_Str"").getTextContent();
      eupdated=format.parse(xml.getFirstElement(e,""String_Node_Str"").getTextContent());
    }
 catch (    Exception ex) {
      continue;
    }
    Entry entry=new Entry(etitle,eid,eupdated);
    try {
      entry.summary=xml.getFirstElement(e,""String_Node_Str"").getTextContent();
    }
 catch (    Exception ex) {
    }
    try {
      entry.content=xml.getFirstElement(e,""String_Node_Str"").getTextContent();
    }
 catch (    Exception ex) {
    }
    try {
      entry.link=xml.getFirstElement(e,""String_Node_Str"").getTextContent();
    }
 catch (    Exception ex) {
    }
    try {
      entry.author=getPerson(xml.getFirstElement(e,""String_Node_Str""),xml);
    }
 catch (    Exception ex) {
    }
    feed.addEntry(entry);
  }
  return feed;
}","@Override public Feed fromFeed(XML xml) throws FeedException {
  Element root=xml.getRoot();
  String title=""String_Node_Str"";
  String id=""String_Node_Str"";
  Date updated=null;
  try {
    title=xml.getFirstElement(""String_Node_Str"").getTextContent();
    id=xml.getFirstElement(""String_Node_Str"").getTextContent();
    try {
      updated=format.parse(xml.getFirstElement(""String_Node_Str"").getTextContent());
    }
 catch (    ParseException e) {
      updated=oldformat.parse(xml.getFirstElement(""String_Node_Str"").getTextContent());
    }
  }
 catch (  Exception ex) {
    throw new FeedException(""String_Node_Str"",ex);
  }
  Feed feed=new Feed(title,id,updated);
  try {
    feed.author=getPerson(xml.getFirstElement(""String_Node_Str""),xml);
  }
 catch (  Exception ex) {
  }
  try {
    feed.link=xml.getFirstElement(""String_Node_Str"").getTextContent();
  }
 catch (  Exception ex) {
  }
  List<Element> elements=xml.getElements(root,""String_Node_Str"");
  for (  Element e : elements) {
    String etitle=""String_Node_Str"";
    String eid=""String_Node_Str"";
    Date eupdated=null;
    try {
      etitle=xml.getFirstElement(e,""String_Node_Str"").getTextContent();
      eid=xml.getFirstElement(e,""String_Node_Str"").getTextContent();
      eupdated=format.parse(xml.getFirstElement(e,""String_Node_Str"").getTextContent());
    }
 catch (    ParseException ex) {
      continue;
    }
    Entry entry=new Entry(etitle,eid,eupdated);
    try {
      entry.summary=xml.getFirstElement(e,""String_Node_Str"").getTextContent();
    }
 catch (    Exception ex) {
    }
    try {
      entry.content=xml.getFirstElement(e,""String_Node_Str"").getTextContent();
    }
 catch (    Exception ex) {
    }
    try {
      entry.link=xml.getFirstElement(e,""String_Node_Str"").getTextContent();
    }
 catch (    Exception ex) {
    }
    try {
      entry.author=getPerson(xml.getFirstElement(e,""String_Node_Str""),xml);
    }
 catch (    Exception ex) {
    }
    feed.addEntry(entry);
  }
  return feed;
}",0.9987446648255084
44272,"public static void removeAppender(Appender appender){
  if (appender != null) {
    appenders.remove(appender);
    appender.getOut().close();
  }
}","public static void removeAppender(Appender appender){
  if (appender != null) {
synchronized (appenders) {
      appenders.remove(appender);
      appender.getOut().close();
    }
  }
}",0.8888888888888888
44273,"public static void addAppender(Appender appender){
  appenders.add(appender);
}","public static void addAppender(Appender appender){
synchronized (appenders) {
    appenders.add(appender);
  }
}",0.8272251308900523
44274,"private CommandLine(){
  os=System.getProperty(""String_Node_Str"");
  logger.debug(""String_Node_Str"" + os);
  if (os.matches(""String_Node_Str"")) {
    logger.debug(""String_Node_Str"");
    cmd=new String[3];
    cmd[0]=""String_Node_Str"";
    cmd[1]=""String_Node_Str"";
    last=2;
  }
 else {
    thisos=OperatingSystem.UNIX;
    cmd=new String[1];
  }
  logger.debug(""String_Node_Str"");
}","private CommandLine(){
  os=System.getProperty(""String_Node_Str"");
  logger.debug(""String_Node_Str"" + os);
  if (os.matches(""String_Node_Str"")) {
    logger.debug(""String_Node_Str"");
    cmd=new String[3];
    cmd[0]=""String_Node_Str"";
    cmd[1]=""String_Node_Str"";
    last=2;
  }
 else {
    thisos=OperatingSystem.UNIX;
    cmd=new String[3];
    cmd[0]=""String_Node_Str"";
    cmd[1]=""String_Node_Str"";
    last=2;
  }
}",0.8677379480840544
44275,"public void parse(String[] args){
  String currentStr=null;
  Option current=null;
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith(""String_Node_Str"")) {
      if (args[i].startsWith(""String_Node_Str"",1)) {
        currentStr=args[i].substring(2);
        current=null;
        String[] val=currentStr.split(""String_Node_Str"",2);
        if (val.length == 2) {
          currentStr=val[0];
        }
        for (        Option o : options) {
          if (currentStr.equalsIgnoreCase(o.longName)) {
            current=o;
            if (val.length == 2) {
              o.addValue(val[1]);
            }
            o.setUsed();
          }
        }
      }
 else {
        currentStr=args[i].substring(1);
        current=null;
        for (        Option o : options) {
          if (currentStr.equals(o.shortName)) {
            current=o;
            o.setUsed();
          }
        }
      }
    }
 else {
      if (current != null) {
        current.addValue(args[i]);
      }
    }
  }
  this.verboseUsed();
  setTemplate();
  if (isVerbose()) {
    out.setMinimumLevel(LogLevel.VERBOSE);
  }
 else {
    out.setMinimumLevel(LogLevel.INFO);
  }
}","public void parse(String[] args){
  String currentStr=null;
  Option current=null;
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith(""String_Node_Str"")) {
      if (args[i].startsWith(""String_Node_Str"",1)) {
        currentStr=args[i].substring(2);
        current=null;
        String[] val=currentStr.split(""String_Node_Str"",2);
        if (val.length == 2) {
          currentStr=val[0];
        }
        for (        Option o : options) {
          if (currentStr.equalsIgnoreCase(o.longName)) {
            current=o;
            if (val.length == 2) {
              o.addValue(val[1]);
            }
            o.setUsed();
          }
        }
      }
 else {
        currentStr=args[i].substring(1);
        current=null;
        for (        Option o : options) {
          if (currentStr.equals(o.shortName)) {
            current=o;
            o.setUsed();
          }
        }
      }
    }
 else {
      if (current != null) {
        current.addValue(args[i]);
      }
    }
  }
  this.verboseUsed();
  setTemplate();
  if (isVerbose()) {
    out.setMinimumLevel(LogLevel.VERBOSE);
  }
 else {
    out.setMinimumLevel(LogLevel.INFO);
  }
  if (odebug.isUsed()) {
    out.setMinimumLevel(LogLevel.DEBUG);
  }
}",0.9702479338842976
44276,"public void setDefaultOptions(){
  ohelp=new Option(""String_Node_Str"",""String_Node_Str"",false,0,""String_Node_Str"");
  oversion=new Option(""String_Node_Str"",null,false,0,""String_Node_Str"");
  overbose=new Option(""String_Node_Str"",null,false,0,""String_Node_Str"");
  otemplate=new Option(""String_Node_Str"",null,false,1,""String_Node_Str"");
  ologfile=new Option(""String_Node_Str"",null,false,-1,""String_Node_Str"");
  this.setOption(ohelp);
  this.setOption(oversion);
  this.setOption(overbose);
  this.setOption(otemplate);
  this.setOption(ologfile);
}","public void setDefaultOptions(){
  ohelp=new Option(""String_Node_Str"",""String_Node_Str"",false,0,""String_Node_Str"");
  oversion=new Option(""String_Node_Str"",null,false,0,""String_Node_Str"");
  overbose=new Option(""String_Node_Str"",null,false,0,""String_Node_Str"");
  odebug=new Option(""String_Node_Str"",null,false,0,""String_Node_Str"");
  otemplate=new Option(""String_Node_Str"",null,false,1,""String_Node_Str"");
  ologfile=new Option(""String_Node_Str"",null,false,-1,""String_Node_Str"");
  this.setOption(ohelp);
  this.setOption(oversion);
  this.setOption(overbose);
  this.setOption(odebug);
  this.setOption(otemplate);
  this.setOption(ologfile);
}",0.9188284518828452
44277,"private void logfileUsed(){
  System.out.println(""String_Node_Str"" + logger);
  if (ologfile != null && ologfile.used) {
    try {
      List<String> as=ologfile.getStrings();
      logger.debug(""String_Node_Str"" + as.get(0));
      FileAppender appender=new FileAppender(new File(as.get(0)));
      if (as.size() > 1) {
        logger.debug(""String_Node_Str"" + as.get(1));
        appender.setMinimumLevel(LogLevel.valueOf(as.get(1)));
      }
      if (as.size() > 2) {
        Set<String> ss=new HashSet<String>(Arrays.asList(as.get(2).split(""String_Node_Str"")));
        if (ss.size() > 0) {
          logger.debug(""String_Node_Str"" + ss);
          appender.setSubscribeAll(false);
          appender.setSubscriptions(ss);
        }
      }
      if (as.size() > 3) {
        logger.debug(""String_Node_Str"" + as.get(3));
        appender.setTemplate(as.get(3));
      }
      Logger.addAppender(appender);
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + ologfile.getString());
    }
  }
}","private void logfileUsed(){
  System.out.println(""String_Node_Str"" + logger);
  if (ologfile != null && ologfile.used) {
    try {
      List<String> as=ologfile.getStrings();
      logger.debug(""String_Node_Str"" + as);
      logger.debug(""String_Node_Str"" + as.get(0));
      FileAppender appender=new FileAppender(new File(as.get(0)));
      if (as.size() > 1) {
        logger.debug(""String_Node_Str"" + as.get(1));
        appender.setMinimumLevel(LogLevel.valueOf(as.get(1)));
      }
      if (as.size() > 2) {
        Set<String> ss=new HashSet<String>(Arrays.asList(as.get(2).split(""String_Node_Str"")));
        if (ss.size() > 0 && as.get(2).length() > 0) {
          logger.debug(""String_Node_Str"" + ss);
          appender.setSubscribeAll(false);
          appender.setSubscriptions(ss);
        }
      }
      if (as.size() > 3) {
        logger.fatal(""String_Node_Str"" + as.get(3));
        appender.setTemplate(as.get(3));
      }
      Logger.addAppender(appender);
    }
 catch (    IOException e) {
      logger.warning(""String_Node_Str"" + ologfile.getString());
    }
  }
}",0.9621212121212122
44278,"protected void shutdown(){
  logger.verbose(""String_Node_Str"");
  Logger.removeAppender(out);
}","protected void shutdown(){
  logger.debug(""String_Node_Str"");
  Logger.removeAppender(out);
}",0.9574468085106383
44279,"public void setLocalLog(File log){
  System.out.println(""String_Node_Str"" + log);
  try {
    fw=new FileWriter(log,true);
  }
 catch (  Exception e1) {
    return;
  }
  System.out.println(""String_Node_Str"" + log.getAbsoluteFile());
  this.bwout=new BufferedWriter(fw);
  if (this.bwout == null) {
    System.out.println(""String_Node_Str"");
  }
 else {
    System.out.println(""String_Node_Str"");
  }
  if (this.getLocalLog() == null) {
    System.out.println(""String_Node_Str"");
  }
 else {
    System.out.println(""String_Node_Str"");
  }
}","public void setLocalLog(File log){
  try {
    fw=new FileWriter(log,true);
  }
 catch (  Exception e1) {
    return;
  }
  this.pwout=new PrintWriter(fw);
}",0.4361549497847919
44280,"public Logger(){
  System.out.println(""String_Node_Str"");
}","public Logger(){
}",0.4675324675324675
44281,"private static void newDate(Calendar n){
  nowDate=n;
  if (fw != null) {
    try {
      fw.close();
      out.close();
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"");
    }
  }
  try {
    file=new File(path + ""String_Node_Str"" + logformat.format(nowDate.getTime())+ ""String_Node_Str"");
    fw=new FileWriter(file,append);
  }
 catch (  IOException e) {
    try {
      file=new File(""String_Node_Str"" + logformat.format(nowDate.getTime()) + ""String_Node_Str"");
      fw=new FileWriter(file,append);
    }
 catch (    IOException e1) {
      System.err.println(""String_Node_Str"");
      System.exit(1);
    }
  }
  out=new BufferedWriter(fw);
}","private static void newDate(Calendar n){
  nowDate=n;
  if (fw != null) {
    try {
      fw.close();
      out.close();
    }
 catch (    IOException e) {
      System.err.println(""String_Node_Str"");
    }
  }
  try {
    file=new File(path + ""String_Node_Str"" + logformat.format(nowDate.getTime())+ ""String_Node_Str"");
    fw=new FileWriter(file,append);
  }
 catch (  IOException e) {
    try {
      file=new File(""String_Node_Str"" + logformat.format(nowDate.getTime()) + ""String_Node_Str"");
      fw=new FileWriter(file,append);
    }
 catch (    IOException e1) {
      System.err.println(""String_Node_Str"");
      System.exit(1);
    }
  }
  out=new PrintWriter(fw);
}",0.9903917220990393
44282,"public static Logger getLogger(Logger l){
  if (plogger == null) {
    plogger=new PraqmaLogger(true,true);
  }
  l.setLogger(plogger);
  l.bwout=null;
  return l;
}","public static Logger getLogger(Logger l){
  if (plogger == null) {
    plogger=new PraqmaLogger(true,true);
  }
  l.setLogger(plogger);
  return l;
}",0.9490445859872612
44283,"private String _log(Object msg,String type,Logger l,int size){
  if (!l.enabled) {
    return null;
  }
  StackTraceElement[] stack=Thread.currentThread().getStackTrace();
  String name=stack[size].getClassName();
  String myMsg=null;
  if (l.isIncluded(name) || PraqmaLogger.isIncluded(name) || l.all|| this.all) {
    Calendar now=Calendar.getInstance();
    if (getDate(now).after(getDate(nowDate))) {
      newDate(now);
    }
    if (type != null) {
      if (type.length() > PraqmaLogger.typemaxlength) {
        type=type.substring(0,8);
      }
      String stackMsg=stack[size].getClassName() + ""String_Node_Str"" + stack[size].getMethodName()+ ""String_Node_Str""+ stack[size].getLineNumber();
      String msg_=format.format(now.getTime()) + ""String_Node_Str"" + type+ ""String_Node_Str""+ new String(new char[PraqmaLogger.typemaxlength - type.length()]).replace(""String_Node_Str"",""String_Node_Str"")+ stackMsg;
      myMsg=msg_ + ""String_Node_Str"" + objectToString(msg)+ linesep;
    }
 else {
      myMsg=objectToString(msg) + linesep;
    }
    try {
      out.write(myMsg);
      out.flush();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    if (l.getLocalLog() != null) {
      System.out.println(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"");
    }
    if (l.getLocalLog() != null) {
      try {
        System.out.println(""String_Node_Str"");
        l.getLocalLog().write(myMsg);
        l.getLocalLog().flush();
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"");
      }
    }
  }
  return myMsg;
}","private String _log(Object msg,String type,Logger l,int size){
  if (!l.enabled) {
    return null;
  }
  StackTraceElement[] stack=Thread.currentThread().getStackTrace();
  String name=stack[size].getClassName();
  String myMsg=null;
  if (l.isIncluded(name) || PraqmaLogger.isIncluded(name) || l.all|| this.all) {
    Calendar now=Calendar.getInstance();
    if (getDate(now).after(getDate(nowDate))) {
      newDate(now);
    }
    if (type != null) {
      if (type.length() > PraqmaLogger.typemaxlength) {
        type=type.substring(0,8);
      }
      String stackMsg=stack[size].getClassName() + ""String_Node_Str"" + stack[size].getMethodName()+ ""String_Node_Str""+ stack[size].getLineNumber();
      String msg_=format.format(now.getTime()) + ""String_Node_Str"" + type+ ""String_Node_Str""+ new String(new char[PraqmaLogger.typemaxlength - type.length()]).replace(""String_Node_Str"",""String_Node_Str"")+ stackMsg;
      myMsg=msg_ + ""String_Node_Str"" + objectToString(msg)+ linesep;
    }
 else {
      myMsg=objectToString(msg) + linesep;
    }
    out.write(myMsg);
    out.flush();
    if (l.getLocalLog() != null) {
      l.getLocalLog().write(myMsg);
      l.getLocalLog().flush();
    }
  }
  return myMsg;
}",0.7998607727114514
44284,"public BufferedWriter getLocalLog(){
  if (this.bwout == null) {
    System.out.println(""String_Node_Str"");
  }
 else {
    System.out.println(""String_Node_Str"");
  }
  return this.bwout;
}","public PrintWriter getLocalLog(){
  return this.pwout;
}",0.4163265306122449
44285,"public void parse(String[] args){
  String currentStr=null;
  Option current=null;
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith(""String_Node_Str"")) {
      if (args[i].startsWith(""String_Node_Str"",1)) {
        currentStr=args[i].substring(2);
        current=null;
        String[] val=currentStr.split(""String_Node_Str"",1);
        if (val.length == 2) {
          currentStr=val[0];
        }
        for (        Option o : options) {
          if (currentStr.equalsIgnoreCase(o.longName)) {
            current=o;
            if (val.length == 2) {
              o.addValue(val[1]);
            }
            o.setUsed();
          }
        }
      }
 else {
        currentStr=args[i].substring(1);
        current=null;
        for (        Option o : options) {
          if (currentStr.equalsIgnoreCase(o.shortName)) {
            current=o;
            o.setUsed();
          }
        }
      }
    }
 else {
      if (current != null) {
        current.addValue(args[i]);
      }
    }
  }
}","public void parse(String[] args){
  String currentStr=null;
  Option current=null;
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith(""String_Node_Str"")) {
      if (args[i].startsWith(""String_Node_Str"",1)) {
        currentStr=args[i].substring(2);
        current=null;
        String[] val=currentStr.split(""String_Node_Str"",2);
        if (val.length == 2) {
          currentStr=val[0];
        }
        for (        Option o : options) {
          if (currentStr.equalsIgnoreCase(o.longName)) {
            current=o;
            if (val.length == 2) {
              o.addValue(val[1]);
            }
            o.setUsed();
          }
        }
      }
 else {
        currentStr=args[i].substring(1);
        current=null;
        for (        Option o : options) {
          if (currentStr.equalsIgnoreCase(o.shortName)) {
            current=o;
            o.setUsed();
          }
        }
      }
    }
 else {
      if (current != null) {
        current.addValue(args[i]);
      }
    }
  }
}",0.9990253411306044
44286,"public void checkOptions() throws Exception {
  for (  Option o : options) {
    if (o.required && !o.used) {
      throw new Exception(o.longName + ""String_Node_Str"");
    }
    if (o.arguments != o.values.size() && o.used) {
      throw new Exception(""String_Node_Str"" + o.longName + ""String_Node_Str""+ o.arguments+ ""String_Node_Str"");
    }
  }
}","public void checkOptions() throws Exception {
  String errors=""String_Node_Str"";
  for (  Option o : options) {
    if (o.required && !o.used) {
      errors+=o.longName + ""String_Node_Str"";
    }
    if (o.arguments != o.values.size() && o.used) {
      errors+=""String_Node_Str"" + o.longName + ""String_Node_Str""+ o.arguments+ ""String_Node_Str"";
    }
  }
  if (errors.length() > 0) {
    throw new Exception(errors);
  }
}",0.3725743855109961
44287,"protected FileObject getResource(String name) throws IOException {
  return processingEnv.getFiler().createResource(CLASS_OUTPUT,""String_Node_Str"",name);
}","protected FileObject getResource(String name) throws IOException {
  return processingEnv.getFiler().getResource(CLASS_OUTPUT,""String_Node_Str"",name);
}",0.98371335504886
44288,"protected void writePropertyFile(Properties p,String name) throws IOException {
  FileObject f=getResource(name);
  OutputStream os=f.openOutputStream();
  p.store(os,null);
  os.close();
}","protected void writePropertyFile(Properties p,String name) throws IOException {
  FileObject f=createResource(name);
  OutputStream os=f.openOutputStream();
  p.store(os,null);
  os.close();
}",0.9868766404199476
44289,"@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  if (roundEnv.processingOver()) {
    return false;
  }
  ElementScanner6<Void,Void> scanner=new ElementScanner6<Void,Void>(){
    @Override public Void visitExecutable(    ExecutableElement e,    Void aVoid){
      if (e.getAnnotation(DataBoundConstructor.class) != null) {
        write(e);
      }
 else {
        String javadoc=getJavadoc(e);
        if (javadoc != null && javadoc.contains(""String_Node_Str"")) {
          write(e);
        }
      }
      return super.visitExecutable(e,aVoid);
    }
  }
;
  for (  Element e : roundEnv.getRootElements())   scanner.scan(e,null);
  return false;
}","@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  ElementScanner6<Void,Void> scanner=new ElementScanner6<Void,Void>(){
    @Override public Void visitExecutable(    ExecutableElement e,    Void aVoid){
      if (e.getAnnotation(DataBoundConstructor.class) != null) {
        write(e);
      }
 else {
        String javadoc=getJavadoc(e);
        if (javadoc != null && javadoc.contains(""String_Node_Str"")) {
          write(e);
        }
      }
      return super.visitExecutable(e,aVoid);
    }
  }
;
  for (  Element e : roundEnv.getRootElements())   scanner.scan(e,null);
  return false;
}",0.9577464788732394
44290,"@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  try {
    if (roundEnv.processingOver()) {
      return false;
    }
    Multimap<TypeElement,Element> props=LinkedListMultimap.create();
    for (    Element exported : roundEnv.getElementsAnnotatedWith(Exported.class)) {
      props.put((TypeElement)exported.getEnclosingElement(),exported);
    }
    Set<String> exposedBeanNames=scanExisting();
    for (    Entry<TypeElement,Collection<Element>> e : props.asMap().entrySet()) {
      exposedBeanNames.add(e.getKey().getQualifiedName().toString());
      final Properties javadocs=new Properties();
      for (      Element md : e.getValue()) {
switch (md.getKind()) {
case FIELD:
case METHOD:
          String javadoc=getJavadoc(md);
        if (javadoc != null)         javadocs.put(md.getSimpleName().toString(),javadoc);
      break;
default :
    throw new AssertionError(""String_Node_Str"" + md);
}
}
String javadocFile=e.getKey().getQualifiedName().toString().replace('.','/') + ""String_Node_Str"";
notice(""String_Node_Str"" + javadocFile,e.getKey());
writePropertyFile(javadocs,javadocFile);
}
FileObject beans=getResource(STAPLER_BEAN_FILE);
PrintWriter w=new PrintWriter(new OutputStreamWriter(beans.openOutputStream(),""String_Node_Str""));
for (String beanName : exposedBeanNames) w.println(beanName);
w.close();
}
 catch (IOException x) {
error(x.toString());
}
return false;
}","@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  try {
    if (roundEnv.processingOver()) {
      return false;
    }
    Multimap<TypeElement,Element> props=LinkedListMultimap.create();
    for (    Element exported : roundEnv.getElementsAnnotatedWith(Exported.class)) {
      props.put((TypeElement)exported.getEnclosingElement(),exported);
    }
    Set<String> exposedBeanNames=scanExisting();
    for (    Entry<TypeElement,Collection<Element>> e : props.asMap().entrySet()) {
      exposedBeanNames.add(e.getKey().getQualifiedName().toString());
      final Properties javadocs=new Properties();
      for (      Element md : e.getValue()) {
switch (md.getKind()) {
case FIELD:
case METHOD:
          String javadoc=getJavadoc(md);
        if (javadoc != null)         javadocs.put(md.getSimpleName().toString(),javadoc);
      break;
default :
    throw new AssertionError(""String_Node_Str"" + md);
}
}
String javadocFile=e.getKey().getQualifiedName().toString().replace('.','/') + ""String_Node_Str"";
notice(""String_Node_Str"" + javadocFile,e.getKey());
writePropertyFile(javadocs,javadocFile);
}
FileObject beans=createResource(STAPLER_BEAN_FILE);
PrintWriter w=new PrintWriter(new OutputStreamWriter(beans.openOutputStream(),""String_Node_Str""));
for (String beanName : exposedBeanNames) w.println(beanName);
w.close();
}
 catch (IOException x) {
error(x.toString());
}
return false;
}",0.9968804159445408
44291,"/** 
 * @param m Method whose parameter has  {@link QueryParameter}
 */
private void write(ExecutableElement m) throws IOException {
  StringBuffer buf=new StringBuffer();
  for (  VariableElement p : m.getParameters()) {
    if (buf.length() > 0)     buf.append(',');
    buf.append(p.getSimpleName());
  }
  TypeElement t=(TypeElement)m.getEnclosingElement();
  FileObject f=getResource(t.getQualifiedName().toString().replace('.','/') + ""String_Node_Str"" + m.getSimpleName()+ ""String_Node_Str"");
  notice(""String_Node_Str"" + f,m);
  OutputStream os=f.openOutputStream();
  try {
    IOUtils.write(buf,os,""String_Node_Str"");
  }
  finally {
    os.close();
  }
}","/** 
 * @param m Method whose parameter has  {@link QueryParameter}
 */
private void write(ExecutableElement m) throws IOException {
  StringBuffer buf=new StringBuffer();
  for (  VariableElement p : m.getParameters()) {
    if (buf.length() > 0)     buf.append(',');
    buf.append(p.getSimpleName());
  }
  TypeElement t=(TypeElement)m.getEnclosingElement();
  FileObject f=createResource(t.getQualifiedName().toString().replace('.','/') + ""String_Node_Str"" + m.getSimpleName()+ ""String_Node_Str"");
  notice(""String_Node_Str"" + f,m);
  OutputStream os=f.openOutputStream();
  try {
    IOUtils.write(buf,os,""String_Node_Str"");
  }
  finally {
    os.close();
  }
}",0.9932381667918858
44292,"public List compile(CompilerConfiguration config) throws CompilerException {
  config.setTargetVersion(""String_Node_Str"");
  config.setSourceVersion(""String_Node_Str"");
  File destinationDir=new File(config.getOutputLocation());
  if (!destinationDir.exists()) {
    destinationDir.mkdirs();
  }
  String[] sourceFiles=getSourceFiles(config);
  if (sourceFiles.length == 0) {
    return Collections.EMPTY_LIST;
  }
  getLogger().info(""String_Node_Str"" + sourceFiles.length + ""String_Node_Str""+ ""String_Node_Str""+ (sourceFiles.length == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ destinationDir.getAbsolutePath());
  if (config.isFork()) {
    config.addClasspathEntry(whichJar(AnnotationProcessorFactoryImpl.class));
    config.addCompilerCustomArgument(""String_Node_Str"",AnnotationProcessorFactoryImpl.class.getName());
  }
  config.addCompilerCustomArgument(""String_Node_Str"",new File(config.getOutputLocation()).getAbsolutePath());
  String[] args=buildCompilerArguments(config,sourceFiles);
  if (config.isFork()) {
    String executable=config.getExecutable();
    if (StringUtils.isEmpty(executable))     executable=new File(new File(System.getProperty(""String_Node_Str"")),""String_Node_Str"").getAbsolutePath();
    return compileOutOfProcess(config,executable,args);
  }
 else {
    return compileInProcess(args);
  }
}","public List compile(CompilerConfiguration config) throws CompilerException {
  config.setTargetVersion(""String_Node_Str"");
  config.setSourceVersion(""String_Node_Str"");
  File destinationDir=new File(config.getOutputLocation());
  if (!destinationDir.exists()) {
    destinationDir.mkdirs();
  }
  String[] sourceFiles=getSourceFiles(config);
  if (sourceFiles.length == 0) {
    return Collections.EMPTY_LIST;
  }
  getLogger().info(""String_Node_Str"" + sourceFiles.length + ""String_Node_Str""+ ""String_Node_Str""+ (sourceFiles.length == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ destinationDir.getAbsolutePath());
  if (config.isFork()) {
    config.addClasspathEntry(whichJar(AnnotationProcessorFactoryImpl.class));
    config.addCompilerCustomArgument(""String_Node_Str"",AnnotationProcessorFactoryImpl.class.getName());
  }
  config.addCompilerCustomArgument(""String_Node_Str"",new File(config.getOutputLocation()).getAbsolutePath());
  String[] args=buildCompilerArguments(config,sourceFiles);
  if (config.isFork()) {
    String executable=config.getExecutable();
    if (StringUtils.isEmpty(executable)) {
      File apt=new File(new File(System.getProperty(""String_Node_Str"")),""String_Node_Str"");
      if (!apt.exists())       apt=new File(new File(System.getProperty(""String_Node_Str"")),""String_Node_Str"");
      executable=apt.getAbsolutePath();
    }
    return compileOutOfProcess(config,executable,args);
  }
 else {
    return compileInProcess(args);
  }
}",0.8940677966101694
44293,"private void parseTagLib(File dir,String uri,Library lib) throws IOException {
  getLog().info(""String_Node_Str"" + dir);
  List markerFile=FileUtils.readLines(new File(dir,""String_Node_Str""));
  if (markerFile.size() == 0)   markerFile.add(uri);
  lib.name(markerFile.get(0).toString());
  lib.prefix(uri.substring(uri.lastIndexOf('/') + 1)).uri(uri);
  lib.doc()._pcdata(join(markerFile.subList(1,markerFile.size())));
  File[] tagFiles=dir.listFiles(new FileFilter(){
    public boolean accept(    File f){
      return f.getName().endsWith(""String_Node_Str"");
    }
  }
);
  if (tagFiles == null)   return;
  for (  File tagFile : tagFiles)   parseTagFile(tagFile,lib.tag());
}","private void parseTagLib(File dir,String uri,Library lib) throws IOException {
  getLog().info(""String_Node_Str"" + dir);
  List markerFile=FileUtils.readLines(new File(dir,""String_Node_Str""));
  if (markerFile.size() == 0)   markerFile.add(uri);
  lib.name(markerFile.get(0).toString());
  lib.prefix(uri.substring(uri.lastIndexOf('/') + 1)).uri(uri);
  lib.doc()._pcdata(join(markerFile));
  File[] tagFiles=dir.listFiles(new FileFilter(){
    public boolean accept(    File f){
      return f.getName().endsWith(""String_Node_Str"");
    }
  }
);
  if (tagFiles == null)   return;
  for (  File tagFile : tagFiles)   parseTagFile(tagFile,lib.tag());
}",0.9782118707738544
44294,"public void execute() throws MojoExecutionException, MojoFailureException {
  writeTaglibXml();
  JellydocMojo jellydoc=new JellydocMojo();
  jellydoc.factory=factory;
  jellydoc.helper=helper;
  jellydoc.localRepository=localRepository;
  jellydoc.project=project;
  jellydoc.resolver=resolver;
  jellydoc.generateSchema();
}","@Override public void execute() throws MojoExecutionException, MojoFailureException {
  TaglibDocMojo.this.execute();
}",0.449438202247191
44295,"/** 
 * Parses a Jelly script and lists up all the property names used in there.
 */
private Set<String> findAllProperties(File file) throws MojoExecutionException {
  getLog().debug(""String_Node_Str"" + file);
  try {
    final Set<String> properties=new LinkedHashSet<String>();
    parser.parse(file,new DefaultHandler(){
      private final StringBuilder buf=new StringBuilder();
      private Locator locator;
      public void setDocumentLocator(      Locator locator){
        this.locator=locator;
      }
      public void startElement(      String uri,      String localName,      String qName,      Attributes attributes) throws SAXException {
        findExpressions();
      }
      public void endElement(      String uri,      String localName,      String qName) throws SAXException {
        findExpressions();
      }
      public void characters(      char ch[],      int start,      int length) throws SAXException {
        buf.append(ch,start,length);
      }
      /** 
 * Find property references of the form ""${%xxx(...)}"" from   {@link #buf}and list up property names.
 */
      private void findExpressions() throws SAXParseException {
        int idx=0;
        do {
          idx=buf.indexOf(""String_Node_Str"",idx);
          if (idx < 0)           break;
          int end=buf.indexOf(""String_Node_Str"",idx);
          if (end == -1)           throw new SAXParseException(""String_Node_Str"",locator);
          String exp=buf.substring(idx + 3,end);
          getLog().debug(""String_Node_Str"" + exp);
          int op=exp.indexOf('(');
          if (op >= 0)           exp=exp.substring(0,op);
          properties.add(exp);
        }
 while (true);
        buf.setLength(0);
      }
    }
);
    return properties;
  }
 catch (  SAXException e) {
    throw new MojoExecutionException(""String_Node_Str"" + file,e);
  }
catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"" + file,e);
  }
}","/** 
 * Parses a Jelly script and lists up all the property names used in there.
 */
private Set<String> findAllProperties(File file) throws MojoExecutionException {
  getLog().debug(""String_Node_Str"" + file);
  try {
    final Set<String> properties=new LinkedHashSet<String>();
    parser.parse(file,new DefaultHandler(){
      private final StringBuilder buf=new StringBuilder();
      private Locator locator;
      public void setDocumentLocator(      Locator locator){
        this.locator=locator;
      }
      public void startElement(      String uri,      String localName,      String qName,      Attributes attributes) throws SAXException {
        findExpressions();
      }
      public void endElement(      String uri,      String localName,      String qName) throws SAXException {
        findExpressions();
      }
      public void characters(      char ch[],      int start,      int length) throws SAXException {
        buf.append(ch,start,length);
      }
      /** 
 * Find property references of the form ""${%xxx(...)}"" from   {@link #buf}and list up property names.
 */
      private void findExpressions() throws SAXParseException {
        int idx=-1;
        do {
          idx=buf.indexOf(""String_Node_Str"",idx + 1);
          if (idx < 0)           break;
          int end=buf.indexOf(""String_Node_Str"",idx);
          if (end == -1)           throw new SAXParseException(""String_Node_Str"",locator);
          String exp=buf.substring(idx + 3,end);
          getLog().debug(""String_Node_Str"" + exp);
          int op=exp.indexOf('(');
          if (op >= 0)           exp=exp.substring(0,op);
          properties.add(exp);
        }
 while (true);
        buf.setLength(0);
      }
    }
);
    return properties;
  }
 catch (  SAXException e) {
    throw new MojoExecutionException(""String_Node_Str"" + file,e);
  }
catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"" + file,e);
  }
}",0.998200976612696
44296,"/** 
 * Find property references of the form ""${%xxx(...)}"" from   {@link #buf}and list up property names.
 */
private void findExpressions() throws SAXParseException {
  int idx=0;
  do {
    idx=buf.indexOf(""String_Node_Str"",idx);
    if (idx < 0)     break;
    int end=buf.indexOf(""String_Node_Str"",idx);
    if (end == -1)     throw new SAXParseException(""String_Node_Str"",locator);
    String exp=buf.substring(idx + 3,end);
    getLog().debug(""String_Node_Str"" + exp);
    int op=exp.indexOf('(');
    if (op >= 0)     exp=exp.substring(0,op);
    properties.add(exp);
  }
 while (true);
  buf.setLength(0);
}","/** 
 * Find property references of the form ""${%xxx(...)}"" from   {@link #buf}and list up property names.
 */
private void findExpressions() throws SAXParseException {
  int idx=-1;
  do {
    idx=buf.indexOf(""String_Node_Str"",idx + 1);
    if (idx < 0)     break;
    int end=buf.indexOf(""String_Node_Str"",idx);
    if (end == -1)     throw new SAXParseException(""String_Node_Str"",locator);
    String exp=buf.substring(idx + 3,end);
    getLog().debug(""String_Node_Str"" + exp);
    int op=exp.indexOf('(');
    if (op >= 0)     exp=exp.substring(0,op);
    properties.add(exp);
  }
 while (true);
  buf.setLength(0);
}",0.994341147938561
44297,"public void process(){
  File out=new File(env.getOptions().get(""String_Node_Str""));
  AnnotationTypeDeclaration $exposed=(AnnotationTypeDeclaration)env.getTypeDeclaration(Exposed.class.getName());
  Map<TypeDeclaration,List<MemberDeclaration>> props=new HashMap<TypeDeclaration,List<MemberDeclaration>>();
  for (  Declaration d : env.getDeclarationsAnnotatedWith($exposed)) {
    MemberDeclaration md=(MemberDeclaration)d;
    TypeDeclaration owner=md.getDeclaringType();
    List<MemberDeclaration> list=props.get(owner);
    if (list == null)     props.put(owner,list=new ArrayList<MemberDeclaration>());
    list.add(md);
  }
  for (  Entry<TypeDeclaration,List<MemberDeclaration>> e : props.entrySet()) {
    final Properties javadocs=new Properties();
    for (    MemberDeclaration md : e.getValue()) {
      md.accept(new SimpleDeclarationVisitor(){
        public void visitFieldDeclaration(        FieldDeclaration f){
          javadocs.put(f.getSimpleName(),f.getDocComment());
        }
        public void visitMethodDeclaration(        MethodDeclaration m){
          javadocs.put(m.getSimpleName() + ""String_Node_Str"",m.getDocComment());
        }
      }
);
    }
    try {
      File javadocFile=new File(out,e.getKey().getQualifiedName().replace('.','/') + ""String_Node_Str"");
      env.getMessager().printNotice(""String_Node_Str"" + javadocFile);
      OutputStream os=new FileOutputStream(javadocFile);
      try {
        javadocs.store(os,null);
      }
  finally {
        os.close();
      }
    }
 catch (    IOException x) {
      env.getMessager().printError(x.toString());
    }
  }
}","public void process(){
  File out=new File(env.getOptions().get(""String_Node_Str""));
  AnnotationTypeDeclaration $exposed=(AnnotationTypeDeclaration)env.getTypeDeclaration(Exposed.class.getName());
  Map<TypeDeclaration,List<MemberDeclaration>> props=new HashMap<TypeDeclaration,List<MemberDeclaration>>();
  for (  Declaration d : env.getDeclarationsAnnotatedWith($exposed)) {
    MemberDeclaration md=(MemberDeclaration)d;
    TypeDeclaration owner=md.getDeclaringType();
    List<MemberDeclaration> list=props.get(owner);
    if (list == null)     props.put(owner,list=new ArrayList<MemberDeclaration>());
    list.add(md);
  }
  for (  Entry<TypeDeclaration,List<MemberDeclaration>> e : props.entrySet()) {
    final Properties javadocs=new Properties();
    for (    MemberDeclaration md : e.getValue()) {
      md.accept(new SimpleDeclarationVisitor(){
        public void visitFieldDeclaration(        FieldDeclaration f){
          String javadoc=f.getDocComment();
          if (javadoc != null)           javadocs.put(f.getSimpleName(),javadoc);
        }
        public void visitMethodDeclaration(        MethodDeclaration m){
          String javadoc=m.getDocComment();
          if (javadoc != null)           javadocs.put(m.getSimpleName() + ""String_Node_Str"",javadoc);
        }
      }
);
    }
    try {
      File javadocFile=new File(out,e.getKey().getQualifiedName().replace('.','/') + ""String_Node_Str"");
      env.getMessager().printNotice(""String_Node_Str"" + javadocFile);
      OutputStream os=new FileOutputStream(javadocFile);
      try {
        javadocs.store(os,null);
      }
  finally {
        os.close();
      }
    }
 catch (    IOException x) {
      env.getMessager().printError(x.toString());
    }
  }
}",0.9392133492252682
44298,"public void visitFieldDeclaration(FieldDeclaration f){
  javadocs.put(f.getSimpleName(),f.getDocComment());
}","public void visitFieldDeclaration(FieldDeclaration f){
  String javadoc=f.getDocComment();
  if (javadoc != null)   javadocs.put(f.getSimpleName(),javadoc);
}",0.704119850187266
44299,"public void visitMethodDeclaration(MethodDeclaration m){
  javadocs.put(m.getSimpleName() + ""String_Node_Str"",m.getDocComment());
}","public void visitMethodDeclaration(MethodDeclaration m){
  String javadoc=m.getDocComment();
  if (javadoc != null)   javadocs.put(m.getSimpleName() + ""String_Node_Str"",javadoc);
}",0.7459807073954984
44300,"public void execute() throws MojoExecutionException, MojoFailureException {
  try {
    SAXParserFactory spf=SAXParserFactory.newInstance();
    spf.setNamespaceAware(true);
    parser=spf.newSAXParser();
  }
 catch (  SAXException e) {
    throw new Error(e);
  }
catch (  ParserConfigurationException e) {
    throw new Error(e);
  }
  for (  String path : (List<String>)project.getCompileSourceRoots()) {
    File dir=new File(path);
    processDirectory(dir);
  }
}","public void execute() throws MojoExecutionException, MojoFailureException {
  try {
    SAXParserFactory spf=SAXParserFactory.newInstance();
    spf.setNamespaceAware(true);
    parser=spf.newSAXParser();
  }
 catch (  SAXException e) {
    throw new Error(e);
  }
catch (  ParserConfigurationException e) {
    throw new Error(e);
  }
  for (  Resource res : (List<Resource>)project.getResources()) {
    File dir=new File(res.getDirectory());
    processDirectory(dir);
  }
}",0.8160676532769556
44301,"/** 
 * Parses a Jelly script and lists up all the property names used in there.
 */
private Set<String> findAllProperties(File file) throws MojoExecutionException {
  getLog().debug(""String_Node_Str"" + file);
  try {
    final Set<String> properties=new LinkedHashSet<String>();
    parser.parse(file,new DefaultHandler(){
      private final StringBuilder buf=new StringBuilder();
      private Locator locator;
      public void setDocumentLocator(      Locator locator){
        this.locator=locator;
      }
      public void startElement(      String uri,      String localName,      String qName,      Attributes attributes) throws SAXException {
        findExpressions();
      }
      public void endElement(      String uri,      String localName,      String qName) throws SAXException {
        findExpressions();
      }
      public void characters(      char ch[],      int start,      int length) throws SAXException {
        buf.append(ch,start,length);
      }
      /** 
 * Find property references of the form ""${#xxx(...)}"" from   {@link #buf}and list up property names.
 */
      private void findExpressions() throws SAXParseException {
        int idx=0;
        do {
          idx=buf.indexOf(""String_Node_Str"",idx);
          if (idx < 0)           break;
          int end=buf.indexOf(""String_Node_Str"",idx);
          if (end == -1)           throw new SAXParseException(""String_Node_Str"",locator);
          String exp=buf.substring(idx + 3,end);
          getLog().debug(""String_Node_Str"" + exp);
          int op=exp.indexOf('(');
          if (op >= 0)           exp=exp.substring(0,op);
          properties.add(exp);
        }
 while (true);
        buf.setLength(0);
      }
    }
);
    return properties;
  }
 catch (  SAXException e) {
    throw new MojoExecutionException(""String_Node_Str"" + file,e);
  }
catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"" + file,e);
  }
}","/** 
 * Parses a Jelly script and lists up all the property names used in there.
 */
private Set<String> findAllProperties(File file) throws MojoExecutionException {
  getLog().debug(""String_Node_Str"" + file);
  try {
    final Set<String> properties=new LinkedHashSet<String>();
    parser.parse(file,new DefaultHandler(){
      private final StringBuilder buf=new StringBuilder();
      private Locator locator;
      public void setDocumentLocator(      Locator locator){
        this.locator=locator;
      }
      public void startElement(      String uri,      String localName,      String qName,      Attributes attributes) throws SAXException {
        findExpressions();
      }
      public void endElement(      String uri,      String localName,      String qName) throws SAXException {
        findExpressions();
      }
      public void characters(      char ch[],      int start,      int length) throws SAXException {
        buf.append(ch,start,length);
      }
      /** 
 * Find property references of the form ""${%xxx(...)}"" from   {@link #buf}and list up property names.
 */
      private void findExpressions() throws SAXParseException {
        int idx=0;
        do {
          idx=buf.indexOf(""String_Node_Str"",idx);
          if (idx < 0)           break;
          int end=buf.indexOf(""String_Node_Str"",idx);
          if (end == -1)           throw new SAXParseException(""String_Node_Str"",locator);
          String exp=buf.substring(idx + 3,end);
          getLog().debug(""String_Node_Str"" + exp);
          int op=exp.indexOf('(');
          if (op >= 0)           exp=exp.substring(0,op);
          properties.add(exp);
        }
 while (true);
        buf.setLength(0);
      }
    }
);
    return properties;
  }
 catch (  SAXException e) {
    throw new MojoExecutionException(""String_Node_Str"" + file,e);
  }
catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"" + file,e);
  }
}",0.9994853319608852
44302,"/** 
 * Find property references of the form ""${#xxx(...)}"" from   {@link #buf}and list up property names.
 */
private void findExpressions() throws SAXParseException {
  int idx=0;
  do {
    idx=buf.indexOf(""String_Node_Str"",idx);
    if (idx < 0)     break;
    int end=buf.indexOf(""String_Node_Str"",idx);
    if (end == -1)     throw new SAXParseException(""String_Node_Str"",locator);
    String exp=buf.substring(idx + 3,end);
    getLog().debug(""String_Node_Str"" + exp);
    int op=exp.indexOf('(');
    if (op >= 0)     exp=exp.substring(0,op);
    properties.add(exp);
  }
 while (true);
  buf.setLength(0);
}","/** 
 * Find property references of the form ""${%xxx(...)}"" from   {@link #buf}and list up property names.
 */
private void findExpressions() throws SAXParseException {
  int idx=0;
  do {
    idx=buf.indexOf(""String_Node_Str"",idx);
    if (idx < 0)     break;
    int end=buf.indexOf(""String_Node_Str"",idx);
    if (end == -1)     throw new SAXParseException(""String_Node_Str"",locator);
    String exp=buf.substring(idx + 3,end);
    getLog().debug(""String_Node_Str"" + exp);
    int op=exp.indexOf('(');
    if (op >= 0)     exp=exp.substring(0,op);
    properties.add(exp);
  }
 while (true);
  buf.setLength(0);
}",0.9983766233766234
44303,"private void processJelly(File file) throws MojoExecutionException {
  Set<String> props=findAllProperties(file);
  if (props.isEmpty())   return;
  String fileName=file.getName();
  fileName=fileName.substring(0,fileName.length() - ""String_Node_Str"".length());
  fileName+='_' + locale + ""String_Node_Str"";
  File resourceFile=new File(file.getParentFile(),fileName);
  if (resourceFile.exists()) {
    Properties resource;
    try {
      resource=new Properties(resourceFile);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"" + resourceFile,e);
    }
    HashSet<String> unnecessaries=new HashSet<String>((Set)resource.keySet());
    unnecessaries.removeAll(props);
    for (    String s : unnecessaries)     getLog().warn(""String_Node_Str"" + s + ""String_Node_Str""+ resourceFile);
    props.removeAll(resource.keySet());
    try {
      RandomAccessFile f=new RandomAccessFile(resourceFile,""String_Node_Str"");
      if (f.length() > 0) {
        f.seek(f.length() - 1);
        int ch=f.read();
        if (!(ch == '\r' || ch == '\n'))         f.write(System.getProperty(""String_Node_Str"").getBytes());
      }
      f.close();
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"" + resourceFile,e);
    }
  }
  try {
    RandomAccessFile f=new RandomAccessFile(resourceFile,""String_Node_Str"");
    if (f.length() > 0) {
      f.seek(f.length() - 1);
      int ch=f.read();
      if (!(ch == '\r' || ch == '\n'))       f.write(System.getProperty(""String_Node_Str"").getBytes());
    }
    f.close();
    PrintWriter w=new PrintWriter(new FileWriter(resourceFile,true));
    for (    String p : props) {
      w.println(escape(p) + ""String_Node_Str"");
    }
    w.close();
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"" + resourceFile,e);
  }
}","private void processJelly(File file) throws MojoExecutionException {
  Set<String> props=findAllProperties(file);
  if (props.isEmpty())   return;
  String fileName=file.getName();
  fileName=fileName.substring(0,fileName.length() - ""String_Node_Str"".length());
  fileName+='_' + locale + ""String_Node_Str"";
  File resourceFile=new File(file.getParentFile(),fileName);
  if (resourceFile.exists()) {
    Properties resource;
    try {
      resource=new Properties(resourceFile);
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"" + resourceFile,e);
    }
    HashSet<String> unnecessaries=new HashSet<String>((Set)resource.keySet());
    unnecessaries.removeAll(props);
    for (    String s : unnecessaries)     getLog().warn(""String_Node_Str"" + s + ""String_Node_Str""+ resourceFile);
    props.removeAll(resource.keySet());
    try {
      RandomAccessFile f=new RandomAccessFile(resourceFile,""String_Node_Str"");
      if (f.length() > 0) {
        f.seek(f.length() - 1);
        int ch=f.read();
        if (!(ch == '\r' || ch == '\n'))         f.write(System.getProperty(""String_Node_Str"").getBytes());
      }
      f.close();
    }
 catch (    IOException e) {
      throw new MojoExecutionException(""String_Node_Str"" + resourceFile,e);
    }
  }
  if (props.isEmpty())   return;
  getLog().info(""String_Node_Str"" + resourceFile);
  try {
    RandomAccessFile f=new RandomAccessFile(resourceFile,""String_Node_Str"");
    if (f.length() > 0) {
      f.seek(f.length() - 1);
      int ch=f.read();
      if (!(ch == '\r' || ch == '\n'))       f.write(System.getProperty(""String_Node_Str"").getBytes());
    }
    f.close();
    PrintWriter w=new PrintWriter(new FileWriter(resourceFile,true));
    for (    String p : props) {
      w.println(escape(p) + ""String_Node_Str"");
    }
    w.close();
  }
 catch (  IOException e) {
    throw new MojoExecutionException(""String_Node_Str"" + resourceFile,e);
  }
}",0.9779874213836478
44304,"public static String stripMetadata(final String contents){
  final String[] lines=splitPreserveAllTokens(contents,""String_Node_Str"");
  final List<String> code=new ArrayList<String>();
  boolean started=false;
  boolean finished=false;
  for (  final String line : lines) {
    if (strip(line).startsWith(""String_Node_Str"")) {
      started=true;
      continue;
    }
    if (strip(line).endsWith(""String_Node_Str"")) {
      finished=true;
      continue;
    }
    if (started && !finished)     continue;
    code.add(line);
  }
  return join(code.toArray(new String[0]),""String_Node_Str"");
}","public static String stripMetadata(final String contents){
  final String[] lines=splitPreserveAllTokens(contents,""String_Node_Str"");
  final List<String> code=new ArrayList<String>();
  boolean started=false;
  boolean finished=false;
  for (  final String line : lines) {
    if (!finished && strip(line).startsWith(""String_Node_Str"")) {
      started=true;
      continue;
    }
    if (!finished && strip(line).endsWith(""String_Node_Str"")) {
      finished=true;
      continue;
    }
    if (started && !finished)     continue;
    code.add(line);
  }
  return join(code.toArray(new String[0]),""String_Node_Str"");
}",0.9785831960461284
44305,"private void flatView(final List<Object> elements){
  final List<VarDescriptor> set=new TreeList<VarDescriptor>();
  for (  final DOMDescriptor dom : doms)   for (  final VarDescriptor child : (VarDescriptor[])getChildren(dom))   set.add(child);
  elements.addAll(set);
  elements.addAll(includes);
  for (  final BundleDescriptor bundle : bundles)   for (  final Object child : getChildren(bundle))   elements.add(child);
}","private void flatView(final List<Object> elements){
  final List<VarDescriptor> set=new TreeList<VarDescriptor>();
  for (  final DOMDescriptor dom : doms)   for (  final VarDescriptor child : (VarDescriptor[])getChildren(dom))   set.add(child);
  elements.addAll(set);
  elements.addAll(includes);
  final Set<Object> exportedPackages=SetUtil.treeSet();
  for (  final BundleDescriptor bundle : bundles)   for (  final Object child : getChildren(bundle))   exportedPackages.add(child);
  elements.addAll(exportedPackages);
}",0.7502634351949421
44306,"public String toHeader(){
  final StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"").append(""String_Node_Str"");
  if (isNotBlank(getMenuName()))   buffer.append(getTagText(Tags.Type.MENU) + getMenuName()).append(""String_Node_Str"");
  if (isNotBlank(scriptPath()))   buffer.append(getTagText(Tags.Type.PATH) + scriptPath()).append(""String_Node_Str"");
  buffer.append(getTagText(Tags.Type.KUDOS) + getKudos()).append(""String_Node_Str"");
  buffer.append(getTagText(Tags.Type.LICENSE) + getLicense()).append(""String_Node_Str"");
  if (!getLang().equals(DEFAULT_LANG))   buffer.append(getTagText(Tags.Type.LANG) + getLang()).append(""String_Node_Str"");
  if (!getJobMode().equals(DEFAULT_JOB))   buffer.append(getTagText(Tags.Type.JOB) + getJobMode()).append(""String_Node_Str"");
  if (!getExecMode().equals(DEFAULT_MODE))   buffer.append(getTagText(Tags.Type.EXEC_MODE) + getExecMode()).append(""String_Node_Str"");
  for (  final DOMDescriptor dom : getDOMs())   if (!dom.equals(DEFAULT_DOM))   buffer.append(getTagText(Tags.Type.DOM) + dom).append(""String_Node_Str"");
  for (  final String include : getIncludes())   buffer.append(getTagText(Tags.Type.INCLUDE) + include).append(""String_Node_Str"");
  for (  final String include : getIncludedBundles())   if (!include.equals(PLUGIN_ID))   buffer.append(getTagText(Tags.Type.INCLUDE_BUNDLE) + include).append(""String_Node_Str"");
  for (  final Subscription subscription : getSubscriptions())   buffer.append(getTagText(Tags.Type.LISTENER) + subscription.getFilter()).append(""String_Node_Str"");
  buffer.append(""String_Node_Str"").append(""String_Node_Str"");
  buffer.append(""String_Node_Str"");
  return buffer.toString();
}","public String toHeader(){
  final StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"").append(""String_Node_Str"");
  if (isNotBlank(getMenuName()))   buffer.append(getTagText(Tags.Type.MENU) + getMenuName()).append(""String_Node_Str"");
  if (isNotBlank(scriptPath()))   buffer.append(getTagText(Tags.Type.PATH) + scriptPath()).append(""String_Node_Str"");
  buffer.append(getTagText(Tags.Type.KUDOS) + getKudos()).append(""String_Node_Str"");
  buffer.append(getTagText(Tags.Type.LICENSE) + getLicense()).append(""String_Node_Str"");
  if (!getLang().equals(DEFAULT_LANG))   buffer.append(getTagText(Tags.Type.LANG) + getLang()).append(""String_Node_Str"");
  if (!getJobMode().equals(DEFAULT_JOB))   buffer.append(getTagText(Tags.Type.JOB) + getJobMode()).append(""String_Node_Str"");
  if (!getExecMode().equals(DEFAULT_MODE))   buffer.append(getTagText(Tags.Type.EXEC_MODE) + getExecMode()).append(""String_Node_Str"");
  for (  final DOMDescriptor dom : getDOMs())   if (!dom.equals(DEFAULT_DOM))   buffer.append(getTagText(Tags.Type.DOM) + dom).append(""String_Node_Str"");
  for (  final String include : getIncludes())   buffer.append(getTagText(Tags.Type.INCLUDE) + include).append(""String_Node_Str"");
  for (  final String include : getIncludedBundles())   if (!include.equals(PLUGIN_ID))   buffer.append(getTagText(Tags.Type.INCLUDE_BUNDLE) + include).append(""String_Node_Str"");
  for (  final Subscription subscription : getSubscriptions())   buffer.append(getTagText(Tags.Type.LISTENER) + subscription.getFilter()).append(""String_Node_Str"");
  buffer.append(""String_Node_Str"").append(""String_Node_Str"");
  return buffer.toString();
}",0.9892150988615938
44307,"public static String stripMetadata(final String contents){
  final String[] lines=split(contents,""String_Node_Str"");
  final List<String> code=new ArrayList<String>();
  boolean started=false;
  boolean finished=false;
  for (  final String line : lines) {
    if (strip(line).startsWith(""String_Node_Str"")) {
      started=true;
      continue;
    }
    if (strip(line).endsWith(""String_Node_Str"")) {
      finished=true;
      continue;
    }
    if (started && !finished)     continue;
    code.add(line);
  }
  return join(code.toArray(new String[0]),""String_Node_Str"");
}","public static String stripMetadata(final String contents){
  final String[] lines=splitPreserveAllTokens(contents,""String_Node_Str"");
  final List<String> code=new ArrayList<String>();
  boolean started=false;
  boolean finished=false;
  for (  final String line : lines) {
    if (strip(line).startsWith(""String_Node_Str"")) {
      started=true;
      continue;
    }
    if (strip(line).endsWith(""String_Node_Str"")) {
      finished=true;
      continue;
    }
    if (started && !finished)     continue;
    code.add(line);
  }
  return join(code.toArray(new String[0]),""String_Node_Str"");
}",0.9854824935952178
44308,"/** 
 * set the properties
 * @param bean
 * @param properties
 */
protected void setBeanProperties(Object bean,Map<?,?> properties){
  if (bean instanceof Control) {
    Control control=(Control)bean;
    Object size=properties.remove(""String_Node_Str"");
    if (size != null) {
      setSize(control,size);
    }
    Object colorValue=properties.remove(""String_Node_Str"");
    if (colorValue != null) {
      Color background=getColor(control,colorValue);
      control.setBackground(background);
    }
    colorValue=properties.remove(""String_Node_Str"");
    if (colorValue != null) {
      Color foreground=getColor(control,colorValue);
      control.setForeground(foreground);
    }
  }
  for (Iterator<?> iter=properties.entrySet().iterator(); iter.hasNext(); ) {
    Map.Entry<?,?> entry=(Map.Entry<?,?>)iter.next();
    String property=entry.getKey().toString();
    Object value=entry.getValue();
    Field field=null;
    try {
      field=bean.getClass().getDeclaredField(property);
      if (value instanceof Boolean) {
        field.setBoolean(bean,((Boolean)value).booleanValue());
      }
 else       if (value instanceof Integer) {
        field.setInt(bean,((Integer)value).intValue());
      }
 else       if (value instanceof Double) {
        field.setDouble(bean,((Double)value).doubleValue());
      }
 else       if (value instanceof Float) {
        field.setFloat(bean,((Float)value).floatValue());
      }
 else {
        InvokerHelper.setProperty(bean,property,value);
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
    if (field == null) {
      InvokerHelper.setProperty(bean,property,value);
    }
  }
}","/** 
 * set the properties
 * @param bean
 * @param properties
 */
protected void setBeanProperties(Object bean,Map<?,?> properties){
  if (bean instanceof Control) {
    Control control=(Control)bean;
    Object size=properties.remove(""String_Node_Str"");
    if (size != null) {
      setSize(control,size);
    }
    Object colorValue=properties.remove(""String_Node_Str"");
    if (colorValue != null) {
      Color background=getColor(control,colorValue);
      control.setBackground(background);
    }
    colorValue=properties.remove(""String_Node_Str"");
    if (colorValue != null) {
      Color foreground=getColor(control,colorValue);
      control.setForeground(foreground);
    }
  }
  for (final Iterator<?> iter=properties.entrySet().iterator(); iter.hasNext(); ) {
    final Map.Entry<?,?> entry=(Map.Entry<?,?>)iter.next();
    final String property=entry.getKey().toString();
    final Object value=entry.getValue();
    try {
      InvokerHelper.setProperty(bean,property,value);
    }
 catch (    final Exception e) {
      throw new RuntimeException(e);
    }
  }
}",0.7640857869865504
44309,"/** 
 * Put the details of the status of the error onto the stream.
 * @param buildingStatus
 * @param buffer
 * @param nesting
 */
private void populateCopyBuffer(IStatus buildingStatus,StringBuffer buffer,int nesting){
  if (!buildingStatus.matches(displayMask)) {
    return;
  }
  for (int i=0; i < nesting; i++) {
    buffer.append(NESTING_INDENT);
  }
  buffer.append(buildingStatus.getMessage());
  buffer.append(""String_Node_Str"");
  Throwable t=buildingStatus.getException();
  if (t instanceof CoreException) {
    CoreException ce=(CoreException)t;
    populateCopyBuffer(ce.getStatus(),buffer,nesting + 1);
  }
  IStatus[] children=buildingStatus.getChildren();
  for (int i=0; i < children.length; i++) {
    populateCopyBuffer(children[i],buffer,nesting + 1);
  }
}","/** 
 * Put the details of the status of the error onto the stream.
 * @param buildingStatus
 * @param buffer
 * @param nesting
 */
private void populateCopyBuffer(IStatus buildingStatus,StringBuffer buffer,int nesting){
  if (!buildingStatus.matches(displayMask)) {
    return;
  }
  for (int i=0; i < nesting; i++) {
    buffer.append(NESTING_INDENT);
  }
  buffer.append(buildingStatus.getMessage());
  buffer.append(""String_Node_Str"");
  if (buildingStatus.getException() != null) {
    buffer.append(getFullStackTrace(buildingStatus.getException()));
    buffer.append(""String_Node_Str"");
  }
  Throwable t=buildingStatus.getException();
  if (t instanceof CoreException) {
    CoreException ce=(CoreException)t;
    populateCopyBuffer(ce.getStatus(),buffer,nesting + 1);
  }
  IStatus[] children=buildingStatus.getChildren();
  for (int i=0; i < children.length; i++) {
    populateCopyBuffer(children[i],buffer,nesting + 1);
  }
}",0.844988344988345
44310,"@Override public final synchronized void notifySuccess(final T object){
  Validate.notNull(object,""String_Node_Str"");
  Validate.isTrue(getRemainingNotificationsCount() == 0,""String_Node_Str"");
  succededObjects.add(object);
  onSuccessNotification(object);
  notificationHandler();
}","@Override public final synchronized void notifySuccess(final T object){
  Validate.notNull(object,""String_Node_Str"");
  if (getRemainingNotificationsCount() == 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  succededObjects.add(object);
  onSuccessNotification(object);
  notificationHandler();
}",0.8948247078464107
44311,"@Override public final synchronized void notifyFailure(final F failedTask,final Throwable t){
  Validate.notNull(t,""String_Node_Str"");
  Validate.isTrue(getRemainingNotificationsCount() == 0,""String_Node_Str"");
  failedTasks.add(new DefaultFailedTask<F>(failedTask,t));
  ++failureNotifications;
  onFailureNotification(failedTask,t);
  notificationHandler();
}","@Override public final synchronized void notifyFailure(final F failedTask,final Throwable t){
  Validate.notNull(t,""String_Node_Str"");
  if (getRemainingNotificationsCount() == 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  failedTasks.add(new DefaultFailedTask<F>(failedTask,t));
  ++failureNotifications;
  onFailureNotification(failedTask,t);
  notificationHandler();
}",0.9163346613545816
44312,"/** 
 * @see Closure#execute(Object) 
 */
public final void execute(final T t){
  if (dryrun) {
    target.execute(t);
  }
 else {
    boolean participate=false;
    EntityTransaction transaction=null;
    if (TransactionSynchronizationManager.hasResource(emf)) {
      participate=true;
    }
 else {
      try {
        final EntityManager em=emf.createEntityManager();
        if (openTx) {
          if (!warningPrinted) {
            logger.warn(""String_Node_Str"" + ""String_Node_Str"");
          }
          transaction=em.getTransaction();
          transaction.begin();
        }
        TransactionSynchronizationManager.bindResource(emf,new EntityManagerHolder(em));
      }
 catch (      PersistenceException ex) {
        throw new DataAccessResourceFailureException(""String_Node_Str"",ex);
      }
    }
    if (openTx) {
      try {
        target.execute(t);
        if (transaction.getRollbackOnly()) {
          transaction.rollback();
        }
 else {
          transaction.commit();
        }
      }
 catch (      final Throwable e) {
        if (transaction != null && transaction.isActive()) {
          transaction.rollback();
        }
        throw new UnhandledException(e);
      }
 finally {
        if (!participate) {
          final EntityManagerHolder emHolder=(EntityManagerHolder)TransactionSynchronizationManager.unbindResource(emf);
          EntityManagerFactoryUtils.closeEntityManager(emHolder.getEntityManager());
        }
      }
    }
 else {
      try {
        target.execute(t);
      }
  finally {
        if (!participate) {
          final EntityManagerHolder emHolder=(EntityManagerHolder)TransactionSynchronizationManager.unbindResource(emf);
          EntityManagerFactoryUtils.closeEntityManager(emHolder.getEntityManager());
        }
      }
    }
  }
}","/** 
 * @see Closure#execute(Object) 
 */
public final void execute(final T t){
  if (dryrun) {
    target.execute(t);
  }
 else {
    boolean participate=false;
    EntityTransaction transaction=null;
    if (TransactionSynchronizationManager.hasResource(emf)) {
      participate=true;
    }
 else {
      try {
        final EntityManager em=emf.createEntityManager();
        if (openTx) {
          if (!warningPrinted) {
            logger.warn(""String_Node_Str"" + ""String_Node_Str"");
          }
          transaction=em.getTransaction();
          transaction.begin();
        }
        TransactionSynchronizationManager.bindResource(emf,new EntityManagerHolder(em));
      }
 catch (      PersistenceException ex) {
        throw new DataAccessResourceFailureException(""String_Node_Str"",ex);
      }
    }
    if (transaction != null) {
      try {
        target.execute(t);
        if (transaction.getRollbackOnly()) {
          transaction.rollback();
        }
 else {
          transaction.commit();
        }
      }
 catch (      final Throwable e) {
        if (transaction != null && transaction.isActive()) {
          transaction.rollback();
        }
        throw new UnhandledException(e);
      }
 finally {
        if (!participate) {
          final EntityManagerHolder emHolder=(EntityManagerHolder)TransactionSynchronizationManager.unbindResource(emf);
          EntityManagerFactoryUtils.closeEntityManager(emHolder.getEntityManager());
        }
      }
    }
 else {
      try {
        target.execute(t);
      }
  finally {
        if (!participate) {
          final EntityManagerHolder emHolder=(EntityManagerHolder)TransactionSynchronizationManager.unbindResource(emf);
          EntityManagerFactoryUtils.closeEntityManager(emHolder.getEntityManager());
        }
      }
    }
  }
}",0.9931072511717672
44313,"/** 
 * dado paths jndi retorna archivos de propiedades 
 */
public static Resource[] getJndiLocations(final String[] filePathJndiNames){
  final ResourceLoader resourceLoader=new DefaultResourceLoader();
  try {
    final InitialContext initCtx=new InitialContext();
    final Context envCtx=(Context)initCtx.lookup(""String_Node_Str"");
    final Resource[] locations=new Resource[filePathJndiNames.length];
    for (int i=0; i < filePathJndiNames.length; i++) {
      locations[i]=resourceLoader.getResource((String)envCtx.lookup(filePathJndiNames[i]));
    }
    return locations;
  }
 catch (  final NamingException e) {
    LOGGER.warn(""String_Node_Str"" + ""String_Node_Str"" + e.getExplanation());
    return null;
  }
}","/** 
 * dado paths jndi retorna archivos de propiedades 
 */
public static Resource[] getJndiLocations(final String[] filePathJndiNames){
  final ResourceLoader resourceLoader=new DefaultResourceLoader();
  try {
    final InitialContext initCtx=new InitialContext();
    final Resource[] locations=new Resource[filePathJndiNames.length];
    boolean found=false;
    try {
      final Context envCtx=(Context)initCtx.lookup(""String_Node_Str"");
      for (int i=0; i < filePathJndiNames.length; i++) {
        locations[i]=resourceLoader.getResource((String)envCtx.lookup(filePathJndiNames[i]));
      }
      found=true;
    }
 catch (    final NamingException e) {
      LOGGER.warn(""String_Node_Str"" + e.getExplanation());
    }
    if (!found) {
      try {
        for (int i=0; i < filePathJndiNames.length; i++) {
          locations[i]=resourceLoader.getResource((String)initCtx.lookup(filePathJndiNames[i]));
        }
      }
 catch (      final NamingException e) {
        LOGGER.warn(""String_Node_Str"" + ""String_Node_Str"" + e.getExplanation());
        return null;
      }
    }
    return locations;
  }
 catch (  final NamingException e) {
    LOGGER.warn(""String_Node_Str"" + ""String_Node_Str"" + e.getExplanation());
    return null;
  }
}",0.6299292214357938
44314,"/** 
 * Construye un uri 
 */
public static String buildVarArgs(final PageContext ctx,final String uriKey,final Object... params){
  Validate.notNull(uriKey);
  Validate.notNull(ctx);
  WebApplicationContext appCtx=RequestContextUtils.getWebApplicationContext(ctx.getRequest());
  UriFactory uriFactory=appCtx.getBean(SpringBeans.ASSET_URIFACTORY_KEY,UriFactory.class);
  return uriFactory.buildUri(uriKey,params);
}","/** 
 * Construye un uri 
 */
public static String buildVarArgs(final PageContext ctx,final String uriKey,final Object... params){
  Validate.notNull(uriKey);
  Validate.notNull(ctx);
  WebApplicationContext appCtx=RequestContextUtils.getWebApplicationContext(ctx.getRequest());
  UriFactory uriFactory=appCtx.getBean(SpringBeans.LINK_URIFACTORY_KEY,UriFactory.class);
  return uriFactory.buildUri(uriKey,params);
}",0.9891696750902528
44315,"/** 
 * @see Persistible#getReference() 
 */
@SuppressWarnings(""String_Node_Str"") public <T>Reference<? extends Persistible> generateReference(){
  return new Reference(getClass(),getId());
}","/** 
 * @see Persistible#getReference() 
 */
@SuppressWarnings(""String_Node_Str"") public <T>Reference<? extends Persistible> generateReference(){
  if (getId() == null) {
    return new Reference(getClass());
  }
  return new Reference(getClass(),getId().longValue());
}",0.8286334056399133
44316,"/** 
 * @see Persistible#getReference() 
 */
public final <T>Reference<? extends Persistible> generateReference(){
  return new Reference(this.getClass(),getId(),getVersion());
}","/** 
 * @see Persistible#getReference() 
 */
@SuppressWarnings(""String_Node_Str"") public final <T>Reference<? extends Persistible> generateReference(){
  Reference<? extends Persistible> ret;
  if (getId() == null) {
    ret=new Reference(this.getClass());
  }
 else {
    if (version == null) {
      ret=new Reference(this.getClass(),getId().longValue());
    }
 else {
      ret=new Reference(this.getClass(),getId().longValue(),getVersion().longValue());
    }
  }
  return ret;
}",0.4984894259818731
44317,"/** 
 * @see Repository#aggregate(Query,Class) 
 */
@SuppressWarnings(""String_Node_Str"") public final <R,T extends Persistible>R aggregate(final Query<T> query,final AggregateFunction aggregateFunction,final Class<R> retClazz){
  Validate.notNull(query);
  Validate.notNull(aggregateFunction);
  Validate.notNull(retClazz);
  final DetachedCriteria criteria=(DetachedCriteria)getCriteriaSpecification(null,query,true);
  final ProjectionAggregateFunctionVisitor visitor=new ProjectionAggregateFunctionVisitor();
  aggregateFunction.accept(visitor);
  criteria.setProjection(visitor.getProjection());
  return (R)getHibernateTemplate().execute(new HibernateCallback(){
    public Object doInHibernate(    final Session session) throws HibernateException, SQLException {
      criteria.getExecutableCriteria(session).setCacheable(query.getCacheable());
      final List l=criteria.getExecutableCriteria(session).list();
      return l.size() == 0 ? null : l.size() == 1 ? l.get(0) : l;
    }
  }
);
}","/** 
 * @see Repository#aggregate(Query,Class) 
 */
@SuppressWarnings(""String_Node_Str"") public final <R,T extends Persistible>R aggregate(final Query<T> query,final AggregateFunction aggregateFunction,final Class<R> retClazz){
  Validate.notNull(query);
  Validate.notNull(aggregateFunction);
  Validate.notNull(retClazz);
  boolean ignoreOrder=true;
  if (aggregateFunction instanceof CompositeAggregateFunction) {
    List<AggregateFunction> list=((CompositeAggregateFunction)aggregateFunction).getFunctions();
    for (    AggregateFunction a : list) {
      if (a instanceof GroupPropertyAggregateFilter) {
        ignoreOrder=false;
      }
    }
  }
 else   if (aggregateFunction instanceof GroupPropertyAggregateFilter) {
    ignoreOrder=false;
  }
  final DetachedCriteria criteria=(DetachedCriteria)getCriteriaSpecification(null,query,ignoreOrder);
  final ProjectionAggregateFunctionVisitor visitor=new ProjectionAggregateFunctionVisitor();
  aggregateFunction.accept(visitor);
  criteria.setProjection(visitor.getProjection());
  return (R)getHibernateTemplate().execute(new HibernateCallback(){
    public Object doInHibernate(    final Session session) throws HibernateException, SQLException {
      criteria.getExecutableCriteria(session).setCacheable(query.getCacheable());
      final List l=criteria.getExecutableCriteria(session).list();
      return l.size() == 0 ? null : l.size() == 1 ? l.get(0) : l;
    }
  }
);
}",0.8160919540229885
44318,"/** 
 * @see ContentProvider#getContent(URL) 
 */
public final InputStream getContent(final URL url){
  final String destURL=map.get(url);
  if (destURL == null) {
    throw new NoSuchEntityException(url);
  }
  return getClass().getClassLoader().getResourceAsStream(destURL);
}","/** 
 * @see ContentProvider#getContent(URL) 
 */
public final InputStream getContent(final URL url){
  final String destURL=map.get(url);
  if (destURL == null) {
    throw new NoSuchEntityException(url);
  }
  final InputStream is=getClass().getClassLoader().getResourceAsStream(destURL);
  if (is == null) {
    throw new NoSuchEntityException(url);
  }
  return is;
}",0.8351309707241911
44319,"/** 
 * copia los atributos a otro 
 */
protected final void copyTo(final XMPPMessageAttributes other,final Map<String,Object> model){
  other.setMessageType(getMessageType());
  other.setMessageType(getMessageType());
  other.setLangBodies(translateLangBodies());
  if (getHtmlStringMessage() != null) {
    other.setHtmlMessage(new StringResource(renderString(getHtmlStringMessage(),model)));
  }
  final List<PacketExtension> packetExtensions=new LinkedList<PacketExtension>(getExtensions());
  for (  final XMPPMessagePacketExtensionTemplate template : packetExtensionTemplates) {
    packetExtensions.add(template.render(model));
  }
  other.setExtensions(packetExtensions);
  other.setConnection(getConnection());
}","/** 
 * copia los atributos a otro 
 */
protected final void copyTo(final XMPPMessageAttributes other,final Map<String,Object> model){
  other.setMessageType(getMessageType());
  other.setMessageType(getMessageType());
  other.setLangBodies(translateLangBodies());
  if (getHtmlStringMessage() != null) {
    other.setHtmlMessage(new StringResource(renderString(getHtmlStringMessage(),model)));
  }
  final List<PacketExtension> packetExtensions=new LinkedList<PacketExtension>(getExtensions());
  for (  final XMPPMessagePacketExtensionTemplate template : packetExtensionTemplates) {
    packetExtensions.add(template.render(model));
  }
  if (packetExtensions != null) {
    other.setExtensions(packetExtensions);
  }
  other.setConnection(getConnection());
}",0.9730094466936572
44320,"/** 
 * @param persistibleClasses persistible classes that may requiere dependencyinjection
 */
public SpringInjectionInterceptor(final List<Class> persistibleClasses){
  Validate.noNullElements(persistibleClasses);
  for (  final Class clazz : persistibleClasses) {
    final List<Entry<Field,String>> fields=new LinkedList<Entry<Field,String>>();
    for (    final Annotation annotation : clazz.getAnnotations()) {
      if (annotation instanceof Configurable) {
        for (        final Field field : clazz.getDeclaredFields()) {
          for (          final Annotation a : field.getAnnotations()) {
            if (a instanceof Qualifier) {
              String n=((Qualifier)a).value();
              if (StringUtils.isBlank(n)) {
                n=field.getName();
              }
              final String name=n;
              fields.add(new Entry<Field,String>(){
                public Field getKey(){
                  return field;
                }
                public String getValue(){
                  return name;
                }
                public String setValue(                final String value){
                  return null;
                }
              }
);
            }
          }
        }
      }
    }
    if (fields.size() > 0) {
      dependencyCache.put(clazz,new DependencyInjection(fields,InitializingBean.class.isAssignableFrom(clazz)));
    }
  }
}","/** 
 * @param persistibleClasses persistible classes that may requiere dependencyinjection
 */
public SpringInjectionInterceptor(final List<Class> persistibleClasses){
  Validate.noNullElements(persistibleClasses);
  for (  final Class clazz : persistibleClasses) {
    final List<Entry<Field,String>> fields=new LinkedList<Entry<Field,String>>();
    for (    final Annotation annotation : clazz.getAnnotations()) {
      if (annotation instanceof Configurable) {
        final List<Field> clazzFields=new LinkedList<Field>();
        Class c=clazz;
        while (c != null) {
          clazzFields.addAll(Arrays.asList(c.getDeclaredFields()));
          c=c.getSuperclass();
        }
        for (        final Field field : clazzFields) {
          for (          final Annotation a : field.getAnnotations()) {
            if (a instanceof Qualifier) {
              String n=((Qualifier)a).value();
              if (StringUtils.isBlank(n)) {
                n=field.getName();
              }
              final String name=n;
              fields.add(new Entry<Field,String>(){
                public Field getKey(){
                  return field;
                }
                public String getValue(){
                  return name;
                }
                public String setValue(                final String value){
                  return null;
                }
              }
);
            }
          }
        }
      }
    }
    if (fields.size() > 0) {
      dependencyCache.put(clazz,new DependencyInjection(fields,InitializingBean.class.isAssignableFrom(clazz)));
    }
  }
}",0.9096325719960278
44321,"/** 
 * @return the context path  
 */
public final String getCtx(final HttpServletRequest request){
  final String ret;
  if (prefix == null) {
    try {
      String encoding=request.getCharacterEncoding();
      if (StringUtils.isBlank(encoding)) {
        encoding=this.defaultEncoding;
      }
      String uri=(String)request.getAttribute(""String_Node_Str"");
      if (uri == null) {
        uri=request.getRequestURI();
      }
      uri=URLDecoder.decode(uri,encoding);
      uri=uri.substring(URLDecoder.decode(request.getContextPath(),encoding).length());
      if (uri.startsWith(""String_Node_Str"")) {
        uri=uri.substring(1);
      }
      int slashses=0;
      for (int i=0; i < uri.length(); i++) {
        if (uri.charAt(i) == '/') {
          slashses++;
        }
      }
      final StringBuilder sb=new StringBuilder();
      for (int i=0; i < slashses; i++) {
        sb.append(""String_Node_Str"");
        if (i + 1 < slashses) {
          sb.append('/');
        }
      }
      ret=sb.toString();
    }
 catch (    UnsupportedEncodingException e) {
      throw new UnhandledException(e);
    }
  }
 else {
    ret=prefix;
  }
  return ret;
}","/** 
 * @return the context path  
 */
public final String getCtx(final HttpServletRequest request){
  final String ret;
  if (prefix == null) {
    try {
      String encoding=request.getCharacterEncoding();
      if (StringUtils.isBlank(encoding)) {
        encoding=this.defaultEncoding;
      }
      String uri=(String)request.getAttribute(""String_Node_Str"");
      if (uri == null) {
        uri=request.getRequestURI();
      }
      uri=URLDecoder.decode(uri,encoding);
      uri=uri.substring(URLDecoder.decode(request.getContextPath(),encoding).length());
      if (uri.startsWith(""String_Node_Str"")) {
        uri=uri.substring(1);
      }
      int slashses=0;
      for (int i=0; i < uri.length(); i++) {
        if (uri.charAt(i) == '/') {
          slashses++;
        }
      }
      final StringBuilder sb=new StringBuilder();
      for (int i=0; i < slashses; i++) {
        sb.append(""String_Node_Str"");
        if (i + 1 < slashses) {
          sb.append('/');
        }
      }
      if (sb.toString().length() == 0) {
        ret=""String_Node_Str"";
      }
 else {
        ret=sb.toString();
      }
    }
 catch (    UnsupportedEncodingException e) {
      throw new UnhandledException(e);
    }
  }
 else {
    ret=prefix;
  }
  return ret;
}",0.9556285949055052
44322,"/** 
 * @see URLRequestMapperDAO#save(URLRequestMapper) 
 */
public final void save(final URLRequestMapper urlRequestMapper){
  final Properties result=new Properties();
  long i=0;
  if (urlRequestMapper instanceof ChainedURLRequestMapper) {
    final ChainedURLRequestMapper c=(ChainedURLRequestMapper)urlRequestMapper;
    final URLRequestMapper[] mappers=c.getChain();
    for (    final URLRequestMapper mapper : mappers) {
      result.put(i++,mapper.toString());
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + urlRequestMapper.getClass().getName());
  }
  persister.save(result);
}","/** 
 * @see URLRequestMapperDAO#save(URLRequestMapper) 
 */
public final void save(final URLRequestMapper urlRequestMapper){
  final Properties result=new Properties();
  long i=0;
  if (urlRequestMapper instanceof ChainedURLRequestMapper) {
    final ChainedURLRequestMapper c=(ChainedURLRequestMapper)urlRequestMapper;
    final URLRequestMapper[] mappers=c.getChain();
    for (    final URLRequestMapper mapper : mappers) {
      result.put(Long.toString(i++),mapper.toString());
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + urlRequestMapper.getClass().getName());
  }
  persister.save(result);
}",0.988009592326139
44323,"/** 
 * constructor
 * @param encoders
 */
AcegiLdapUserPasswordEncoder(final Map<String,PasswordEncoder> encoders){
  Validate.notNull(encoders);
  this.encoders=encoders;
}","/** 
 * constructor
 * @param encoders
 */
public AcegiLdapUserPasswordEncoder(final Map<String,PasswordEncoder> encoders){
  Validate.notNull(encoders);
  this.encoders=encoders;
}",0.9802816901408452
44324,"/** 
 * @see ApplicationContextAware#setApplicationContext(ApplicationContext) 
 */
public final void setApplicationContext(final ApplicationContext ctx) throws BeansException {
  this.ctx=(WebApplicationContext)ctx;
}","/** 
 * @see ApplicationContextAware#setApplicationContext(ApplicationContext) 
 */
public final void setApplicationContext(final ApplicationContext ctx) throws BeansException {
  if (ctx instanceof WebApplicationContext) {
    this.ctx=(WebApplicationContext)ctx;
  }
}",0.8934426229508197
44325,"/** 
 * @see CaseBlock#evaluate() 
 */
public final boolean evaluate(){
  return regex.matcher(ctx.getServletContext().getRealPath(""String_Node_Str"")).lookingAt();
}","/** 
 * @see CaseBlock#evaluate() 
 */
public final boolean evaluate(){
  return ctx == null ? false : regex.matcher(ctx.getServletContext().getRealPath(""String_Node_Str"")).lookingAt();
}",0.9375
44326,"/** 
 * @see StreetsDAO#getIntersection(String,String) 
 */
public final Collection<IntersectionResult> getIntersection(final String street1Param,final String street2Param){
  final Collection<IntersectionResult> ret=new ArrayList<IntersectionResult>();
  if ((street1Param != null && street1Param.length() <= 2) || (street2Param != null && street2Param.length() <= 2)) {
    return ret;
  }
  final String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String street1Filtered=executeFilters(street1Param);
  String street2Filtered=executeFilters(street2Param);
  template.query(sql,new Object[]{""String_Node_Str"" + escapeForLike(street1Filtered,'+') + ""String_Node_Str"",""String_Node_Str"" + escapeForLike(street2Filtered,'+') + ""String_Node_Str""},new ResultSetExtractor(){
    /** 
 * @see ResultSetExtractor#extractData(java.sql.ResultSet) 
 */
    public Object extractData(    final ResultSet rs) throws SQLException, DataAccessException {
      while (rs.next()) {
        try {
          final Geometry geom=wktReader.read(rs.getString(""String_Node_Str""));
          if (!geom.isEmpty()) {
            ret.add(new IntersectionResult(rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),(Point)geom));
          }
        }
 catch (        final ParseException e) {
          throw new DataRetrievalFailureException(""String_Node_Str"");
        }
      }
      return null;
    }
  }
);
  return ret;
}","/** 
 * @see StreetsDAO#getIntersection(String,String) 
 */
public final Collection<IntersectionResult> getIntersection(final String street1Param,final String street2Param){
  final Collection<IntersectionResult> ret=new ArrayList<IntersectionResult>();
  if ((street1Param != null && street1Param.length() <= 2) || (street2Param != null && street2Param.length() <= 2)) {
    return ret;
  }
  final String wildcard;
  if (street1Param.startsWith(street2Param) || street2Param.startsWith(street1Param)) {
    wildcard=""String_Node_Str"";
  }
 else {
    wildcard=""String_Node_Str"";
  }
  final String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String street1Filtered=executeFilters(street1Param);
  String street2Filtered=executeFilters(street2Param);
  template.query(sql,new Object[]{wildcard + escapeForLike(street1Filtered,'+') + wildcard,wildcard + escapeForLike(street2Filtered,'+') + wildcard},new ResultSetExtractor(){
    /** 
 * @see ResultSetExtractor#extractData(java.sql.ResultSet) 
 */
    public Object extractData(    final ResultSet rs) throws SQLException, DataAccessException {
      while (rs.next()) {
        try {
          final Geometry geom=wktReader.read(rs.getString(""String_Node_Str""));
          if (!geom.isEmpty()) {
            if (geom instanceof Point) {
              ret.add(new IntersectionResult(rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),(Point)geom));
            }
          }
        }
 catch (        final ParseException e) {
          throw new DataRetrievalFailureException(""String_Node_Str"");
        }
      }
      return null;
    }
  }
);
  return ret;
}",0.8917748917748918
44327,"/** 
 * @see StreetsDAO#getIntersection(String,String) 
 */
public final Collection<IntersectionResult> getIntersection(final String street1Param,final String street2Param){
  final Collection<IntersectionResult> ret=new ArrayList<IntersectionResult>();
  if ((street1Param != null && street1Param.length() <= 2) || (street2Param != null && street2Param.length() <= 2)) {
    return ret;
  }
  final String wildcard;
  if (street1Param.startsWith(street2Param) || street2Param.startsWith(street1Param)) {
    wildcard=""String_Node_Str"";
  }
 else {
    wildcard=""String_Node_Str"";
  }
  final String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String street1Filtered=executeFilters(street1Param);
  String street2Filtered=executeFilters(street2Param);
  template.query(sql,new Object[]{wildcard + escapeForLike(street1Filtered,'+') + wildcard,wildcard + escapeForLike(street2Filtered,'+') + wildcard},new ResultSetExtractor(){
    /** 
 * @see ResultSetExtractor#extractData(java.sql.ResultSet) 
 */
    public Object extractData(    final ResultSet rs) throws SQLException, DataAccessException {
      while (rs.next()) {
        try {
          final Geometry geom=wktReader.read(rs.getString(""String_Node_Str""));
          if (!geom.isEmpty()) {
            if (geom instanceof Point) {
              ret.add(new IntersectionResult(rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),(Point)geom));
            }
          }
        }
 catch (        final ParseException e) {
          throw new DataRetrievalFailureException(""String_Node_Str"");
        }
      }
      return null;
    }
  }
);
  return ret;
}","/** 
 * @see StreetsDAO#getIntersection(String,String) 
 */
public final Collection<IntersectionResult> getIntersection(final String street1Param,final String street2Param){
  final Collection<IntersectionResult> ret=new ArrayList<IntersectionResult>();
  if ((street1Param != null && street1Param.length() <= 2) || (street2Param != null && street2Param.length() <= 2)) {
    return ret;
  }
  final String wildcard;
  if (street1Param.startsWith(street2Param) || street2Param.startsWith(street1Param)) {
    wildcard=""String_Node_Str"";
  }
 else {
    wildcard=""String_Node_Str"";
  }
  final String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String street1Filtered=executeFilters(street1Param);
  String street2Filtered=executeFilters(street2Param);
  template.query(sql,new Object[]{wildcard + escapeForLike(street1Filtered,'+') + wildcard,wildcard + escapeForLike(street2Filtered,'+') + wildcard},new ResultSetExtractor(){
    /** 
 * @see ResultSetExtractor#extractData(java.sql.ResultSet) 
 */
    public Object extractData(    final ResultSet rs) throws SQLException, DataAccessException {
      while (rs.next()) {
        try {
          final Geometry geom=wktReader.read(rs.getString(""String_Node_Str""));
          if (!geom.isEmpty()) {
            if (geom instanceof Point) {
              ret.add(new IntersectionResult(rs.getString(""String_Node_Str""),rs.getString(""String_Node_Str""),(Point)geom));
            }
          }
        }
 catch (        final ParseException e) {
          throw new DataRetrievalFailureException(""String_Node_Str"");
        }
      }
      return null;
    }
  }
);
  return ret;
}",0.9945197577156044
44328,"/** 
 * @see AbstractUrlHandlerMapping#registerHandler(String) 
 */
@Override protected final void registerController(String beanName) throws BeansException, IllegalStateException {
  final Class controllerClass=getApplicationContext().getType(beanName);
  if (Controller.class.isAssignableFrom(controllerClass) && beanName.endsWith(CONTROLLER_SUFFIX)) {
    final StringBuffer pathMapping=new StringBuffer(""String_Node_Str"");
    final String path=getCompoundPath(beanName.substring(0,beanName.length() - CONTROLLER_SUFFIX.length()));
    pathMapping.append(path);
    pathMapping.append(""String_Node_Str"");
    super.registerHandler(pathMapping.toString(),beanName);
  }
 else {
    super.registerController(beanName);
  }
}","/** 
 * @see AbstractUrlHandlerMapping#registerHandler(String) 
 */
@Override protected final void registerController(String beanName) throws BeansException, IllegalStateException {
  final Class controllerClass=getApplicationContext().getType(beanName);
  if (Controller.class.isAssignableFrom(controllerClass) && beanName.endsWith(CONTROLLER_SUFFIX) && !beanName.equals(controllerClass.getName())) {
    final StringBuffer pathMapping=new StringBuffer(""String_Node_Str"");
    final String path=getCompoundPath(beanName.substring(0,beanName.length() - CONTROLLER_SUFFIX.length()));
    pathMapping.append(path);
    pathMapping.append(""String_Node_Str"");
    super.registerHandler(pathMapping.toString(),beanName);
  }
 else {
    super.registerController(beanName);
  }
}",0.9686457638425616
44329,"/** 
 * @see MessageFactory#createMessage(String,String,Map,NotificationAddress) 
 */
public final Message createMessage(final String stringMessage,final String subject,final Map<String,Object> model,final NotificationAddress address){
  Validate.notNull(stringMessage);
  Validate.notNull(model);
  return new StringMessage(renderString(stringMessage,model),subject,address);
}","/** 
 * @see MessageFactory#createMessage(String,String,Map,NotificationAddress) 
 */
public final Message createMessage(final String stringMessage,final String subject,final Map<String,Object> model,final NotificationAddress address){
  Validate.notNull(stringMessage);
  Validate.notNull(model);
  return new StringMessage(renderString(stringMessage,model),renderString(subject,model),address);
}",0.9742268041237112
44330,"AbstractViewTestCase(Set<String> absolutePaths,Set<String> recursivePaths,Set<String> configPaths,StreamProvider streamProvider){
  if (streamProvider == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (absolutePaths == null && recursivePaths == null)   throw new IllegalArgumentException(""String_Node_Str"" + AbstractViewTestCase.class.getName() + ""String_Node_Str"");
  if (configPaths == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (configPaths.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  Set<String> allPaths=new HashSet<String>(absolutePaths);
  for (  String path : recursivePaths) {
    explode(new File(path),allPaths,""String_Node_Str"");
    explode(new File(path),allPaths,""String_Node_Str"");
  }
  if (allPaths.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  parseResources(allPaths,streamProvider,viewsByPath);
  parseResources(configPaths,streamProvider,configByPath);
  parser=new ViewParser();
  Iterator<String> paths=configByPath.keySet().iterator();
  for (; paths.hasNext(); ) {
    String path=paths.next();
    parser.parse(configByPath.get(path),path);
  }
}","AbstractViewTestCase(Set<String> absolutePaths,Set<String> recursivePaths,Set<String> configPaths,StreamProvider streamProvider){
  if (streamProvider == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (absolutePaths == null && recursivePaths == null)   throw new IllegalArgumentException(""String_Node_Str"" + AbstractViewTestCase.class.getName() + ""String_Node_Str"");
  if (absolutePaths == null)   absolutePaths=new HashSet<String>();
  if (recursivePaths == null)   recursivePaths=new HashSet<String>();
  if (configPaths == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (configPaths.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  Set<String> allPaths=new HashSet<String>(absolutePaths);
  for (  String path : recursivePaths) {
    explode(new File(path),allPaths,""String_Node_Str"");
    explode(new File(path),allPaths,""String_Node_Str"");
  }
  if (allPaths.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  viewsByPath=new HashMap<String,Document>();
  configByPath=new HashMap<String,Document>();
  parser=new ViewParser();
  parseResources(allPaths,streamProvider,viewsByPath);
  parseResources(configPaths,streamProvider,configByPath);
  Iterator<String> paths=viewsByPath.keySet().iterator();
  for (; paths.hasNext(); ) {
    String path=paths.next();
    parser.parse(viewsByPath.get(path),path);
  }
}",0.8807766990291263
44331,"private void classDefinitions(Node node,String faceConfigPath){
  String nodeName=node.getNodeName();
  if (CLASS_CONSTRAINTS.keySet().contains(nodeName)) {
    Class clazz=new ClassUtils().loadClass(node.getNodeValue(),nodeName);
    Class[] constraints=CLASS_CONSTRAINTS.get(nodeName);
    if (constraints.length > 0 && !new ClassUtils().isAssignableFrom(constraints,clazz))     throw new RuntimeException(faceConfigPath + ""String_Node_Str"" + clazz.getName()+ ""String_Node_Str""+ nodeName+ ""String_Node_Str""+ new ClassUtils().getConstraintsList(constraints));
  }
 else {
    NodeList children=node.getChildNodes();
    for (int i=0; i < children.getLength(); i++)     classDefinitions(children.item(i),faceConfigPath);
  }
}","private void classDefinitions(Node node,String faceConfigPath){
  String nodeName=node.getNodeName();
  if (CLASS_CONSTRAINTS.keySet().contains(nodeName)) {
    Class clazz=new ClassUtils().loadClass(node.getTextContent(),nodeName);
    Class[] constraints=CLASS_CONSTRAINTS.get(nodeName);
    if (constraints.length > 0 && !new ClassUtils().isAssignableFrom(constraints,clazz))     throw new RuntimeException(faceConfigPath + ""String_Node_Str"" + clazz.getName()+ ""String_Node_Str""+ nodeName+ ""String_Node_Str""+ new ClassUtils().getConstraintsList(constraints));
  }
 else {
    NodeList children=node.getChildNodes();
    for (int i=0; i < children.getLength(); i++)     classDefinitions(children.item(i),faceConfigPath);
  }
}",0.9862448418156808
44332,"public Class loadClass(String clazzName,String elementName){
  try {
    return getClass().getClassLoader().loadClass(clazzName.trim());
  }
 catch (  ClassNotFoundException e) {
    try {
      return Thread.currentThread().getContextClassLoader().loadClass(clazzName.trim());
    }
 catch (    ClassNotFoundException e2) {
      throw new RuntimeException(""String_Node_Str"" + clazzName + ""String_Node_Str""+ elementName);
    }
  }
}","public Class loadClass(String clazzName,String elementName){
  if (clazzName == null)   throw new RuntimeException(""String_Node_Str"" + elementName);
  try {
    return getClass().getClassLoader().loadClass(clazzName.trim());
  }
 catch (  ClassNotFoundException e) {
    try {
      return Thread.currentThread().getContextClassLoader().loadClass(clazzName.trim());
    }
 catch (    ClassNotFoundException e2) {
      throw new RuntimeException(""String_Node_Str"" + clazzName + ""String_Node_Str""+ elementName);
    }
  }
}",0.698744769874477
44333,"public void testFacesConfigHappyPath(){
  new AbstractFacesConfigTestCase(TestUtils.STUBBED_RESOURCEPATH,new StringStreamProvider(TestUtils.getFacesConfig(CORRECT))){
  }
;
}","public void testFacesConfigHappyPath(){
  StreamProvider streamProvider=new StringStreamProvider(TestUtils.getFacesConfig(CORRECT));
  new AbstractFacesConfigTestCase(TestUtils.STUBBED_RESOURCEPATH,streamProvider){
  }
.testClassDefinitions();
}",0.5107398568019093
44334,"public void testClassDefinitions(){
  for (  String elementName : handler.getClassNamesByElement().keySet()) {
    List<String> classNames=handler.getClassNamesByElement().get(elementName);
    for (    String className : classNames) {
      Class clazz=new ClassUtils().loadClass(className,elementName);
      Class[] constraints=CLASS_CONSTRAINTS.get(elementName);
      if (!isAssignableFrom(constraints,clazz))       throw new RuntimeException(clazz.getName() + ""String_Node_Str"" + elementName+ ""String_Node_Str""+ getConstraintsList(constraints));
    }
  }
}","public void testClassDefinitions(){
  for (  String elementName : handler.getClassNamesByElement().keySet()) {
    List<String> classNames=handler.getClassNamesByElement().get(elementName);
    for (    String className : classNames) {
      Class clazz=new ClassUtils().loadClass(className,elementName);
      Class[] constraints=CLASS_CONSTRAINTS.get(elementName);
      if (constraints.length > 0 && !isAssignableFrom(constraints,clazz))       throw new RuntimeException(clazz.getName() + ""String_Node_Str"" + elementName+ ""String_Node_Str""+ getConstraintsList(constraints));
    }
  }
}",0.9774305555555556
44335,"public ArrayList<T> simpleSelectList(Connection con,T bean,BeanDescriptor descriptor) throws SQLException {
  ArrayList<T> beanList=new ArrayList<T>();
  Map<String,String> columnPropertyMap=Utils.getColumnPropertyMap(descriptor.getPropertyMap());
  PreparedStatement ps=buildSelectStatement(bean,descriptor,con);
  ResultSet rs=ps.executeQuery();
  HashMap<String,Object> props=new HashMap<String,Object>();
  ResultSetMetaData metaData=rs.getMetaData();
  int columnCount=metaData.getColumnCount();
  while (rs.next()) {
    for (int i=1; i <= columnCount; i++) {
      if (columnPropertyMap.containsKey(metaData.getColumnName((i)))) {
        if (metaData.getColumnType(i) == Types.BLOB) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
          }
          Blob blob=rs.getBlob(metaData.getColumnName(i));
          if (blob != null) {
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
            }
            ByteArrayOutputStream baos=new ByteArrayOutputStream(1024);
            BufferedInputStream bis=new BufferedInputStream(blob.getBinaryStream());
            byte[] buffer=new byte[1024];
            int curByte;
            try {
              while ((curByte=bis.read(buffer,0,buffer.length)) != -1) {
                baos.write(buffer,0,curByte);
              }
            }
 catch (            IOException e) {
              log.error(""String_Node_Str"",e);
              throw new RuntimeException(""String_Node_Str"",e);
            }
            props.put(Utils.getCamelCaseColumnName(metaData.getColumnName(i)),baos.toByteArray());
          }
        }
 else         if (metaData.getColumnType(i) == Types.CLOB) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"");
          }
          props.put(columnPropertyMap.get(metaData.getColumnName(i)),rs.getString(i));
        }
 else         if (metaData.getColumnType(i) == Types.DATE) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
          }
          props.put(columnPropertyMap.get(metaData.getColumnName(i)),rs.getTimestamp(i));
        }
 else         if (metaData.getColumnType(i) == Types.TIME) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
          }
          props.put(columnPropertyMap.get(metaData.getColumnName(i)),rs.getTime(i));
        }
 else         if (metaData.getColumnType(i) == Types.TIMESTAMP) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
          }
          props.put(columnPropertyMap.get(metaData.getColumnName(i)),rs.getTimestamp(i));
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
          }
          props.put(columnPropertyMap.get(metaData.getColumnName(i)),rs.getString(i));
        }
      }
    }
    T newBean;
    try {
      newBean=(T)bean.getClass().newInstance();
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      throw new RuntimeException(""String_Node_Str"",e);
    }
    ReflectionUtils.populateBean(newBean,props);
    beanList.add(newBean);
  }
  ps.close();
  return beanList;
}","public ArrayList<T> simpleSelectList(Connection con,T bean,BeanDescriptor descriptor) throws SQLException {
  ArrayList<T> beanList=new ArrayList<T>();
  Map<String,String> columnPropertyMap=Utils.getColumnPropertyMap(descriptor.getPropertyMap());
  PreparedStatement ps=buildSelectStatement(bean,descriptor,con);
  ResultSet rs=ps.executeQuery();
  ResultSetMetaData metaData=rs.getMetaData();
  int columnCount=metaData.getColumnCount();
  while (rs.next()) {
    HashMap<String,Object> props=new HashMap<String,Object>();
    for (int i=1; i <= columnCount; i++) {
      if (columnPropertyMap.containsKey(metaData.getColumnName((i)))) {
        if (metaData.getColumnType(i) == Types.BLOB) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
          }
          Blob blob=rs.getBlob(metaData.getColumnName(i));
          if (blob != null) {
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
            }
            ByteArrayOutputStream baos=new ByteArrayOutputStream(1024);
            BufferedInputStream bis=new BufferedInputStream(blob.getBinaryStream());
            byte[] buffer=new byte[1024];
            int curByte;
            try {
              while ((curByte=bis.read(buffer,0,buffer.length)) != -1) {
                baos.write(buffer,0,curByte);
              }
            }
 catch (            IOException e) {
              log.error(""String_Node_Str"",e);
              throw new RuntimeException(""String_Node_Str"",e);
            }
            props.put(Utils.getCamelCaseColumnName(metaData.getColumnName(i)),baos.toByteArray());
          }
        }
 else         if (metaData.getColumnType(i) == Types.CLOB) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"");
          }
          props.put(columnPropertyMap.get(metaData.getColumnName(i)),rs.getString(i));
        }
 else         if (metaData.getColumnType(i) == Types.DATE) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
          }
          props.put(columnPropertyMap.get(metaData.getColumnName(i)),rs.getTimestamp(i));
        }
 else         if (metaData.getColumnType(i) == Types.TIME) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
          }
          props.put(columnPropertyMap.get(metaData.getColumnName(i)),rs.getTime(i));
        }
 else         if (metaData.getColumnType(i) == Types.TIMESTAMP) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
          }
          props.put(columnPropertyMap.get(metaData.getColumnName(i)),rs.getTimestamp(i));
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + i + ""String_Node_Str"");
          }
          props.put(columnPropertyMap.get(metaData.getColumnName(i)),rs.getString(i));
        }
      }
    }
    T newBean;
    try {
      newBean=(T)bean.getClass().newInstance();
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      throw new RuntimeException(""String_Node_Str"",e);
    }
    ReflectionUtils.populateBean(newBean,props);
    beanList.add(newBean);
  }
  ps.close();
  return beanList;
}",0.9654447115384616
44336,"public static PreparedStatement prepareStatement(Connection con,String sql,ArrayList<BoundVariable> boundVariables) throws SQLException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  PreparedStatement statement=con.prepareStatement(sql);
  for (  BoundVariable bv : boundVariables) {
    if (bv.getPosition() == 0) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
      bv.setPosition(boundVariables.size());
    }
    if (bv.getValue() == null) {
      statement.setNull(bv.getPosition(),Types.VARCHAR);
      continue;
    }
    if (bv.getType() == String.class) {
      if (bv.getName().toLowerCase().indexOf(""String_Node_Str"") > 0) {
        if (""String_Node_Str"".equals(bv.getValue().toString())) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
          }
          statement.setNull(bv.getPosition(),Types.DATE);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"");
          }
          String format=""String_Node_Str"";
          if (bv.getName().toLowerCase().indexOf(""String_Node_Str"") > 0)           format=""String_Node_Str"";
          SimpleDateFormat sdf=new SimpleDateFormat(format);
          sdf.setLenient(false);
          try {
            java.util.Date dt=sdf.parse(bv.getValue().toString());
            Date newDate=new Date(dt.getTime());
            statement.setDate(bv.getPosition(),newDate);
          }
 catch (          ParseException e) {
            throw new RuntimeException(""String_Node_Str"" + bv.getValue(),e);
          }
        }
      }
 else {
        if (""String_Node_Str"".equals(bv.getValue().toString())) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
          }
          statement.setNull(bv.getPosition(),Types.VARCHAR);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
          }
          statement.setString(bv.getPosition(),bv.getValue().toString());
        }
      }
    }
 else     if (bv.getType() == Integer.class || ""String_Node_Str"".equals(bv.getType().getName())) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
      }
      statement.setInt(bv.getPosition(),Integer.parseInt(bv.getValue().toString(),10));
    }
 else     if (bv.getType() == Long.class || ""String_Node_Str"".equals(bv.getType().getName())) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
      }
      statement.setLong(bv.getPosition(),Long.parseLong(bv.getValue().toString(),10));
    }
 else     if (bv.getType() == Double.class || ""String_Node_Str"".equals(bv.getType().getName())) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
      }
      statement.setDouble(bv.getPosition(),Double.parseDouble(bv.getValue().toString()));
    }
 else     if (bv.getType() == Float.class || ""String_Node_Str"".equals(bv.getType().getName())) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
      }
      statement.setFloat(bv.getPosition(),Float.parseFloat(bv.getValue().toString()));
    }
 else     if (""String_Node_Str"".equals(bv.getType().getName())) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
      }
      statement.setString(bv.getPosition(),bv.getValue().toString());
    }
 else     if (bv.getValue() instanceof java.util.Date) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
      }
      statement.setTimestamp(bv.getPosition(),new java.sql.Timestamp(((java.util.Date)bv.getValue()).getTime()));
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
      }
      statement.setString(bv.getPosition(),bv.getValue().toString());
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  return statement;
}","public static PreparedStatement prepareStatement(Connection con,String sql,ArrayList<BoundVariable> boundVariables) throws SQLException {
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  PreparedStatement statement=con.prepareStatement(sql);
  for (  BoundVariable bv : boundVariables) {
    if (bv.getPosition() == 0) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
      bv.setPosition(boundVariables.size());
    }
    if (bv.getValue() == null) {
      statement.setNull(bv.getPosition(),Types.NULL);
      continue;
    }
    if (bv.getType() == String.class) {
      if (bv.getName().toLowerCase().indexOf(""String_Node_Str"") > 0) {
        if (""String_Node_Str"".equals(bv.getValue().toString())) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
          }
          statement.setNull(bv.getPosition(),Types.DATE);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"");
          }
          String format=""String_Node_Str"";
          if (bv.getName().toLowerCase().indexOf(""String_Node_Str"") > 0)           format=""String_Node_Str"";
          SimpleDateFormat sdf=new SimpleDateFormat(format);
          sdf.setLenient(false);
          try {
            java.util.Date dt=sdf.parse(bv.getValue().toString());
            Date newDate=new Date(dt.getTime());
            statement.setDate(bv.getPosition(),newDate);
          }
 catch (          ParseException e) {
            throw new RuntimeException(""String_Node_Str"" + bv.getValue(),e);
          }
        }
      }
 else {
        if (""String_Node_Str"".equals(bv.getValue().toString())) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
          }
          statement.setNull(bv.getPosition(),Types.VARCHAR);
        }
 else {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
          }
          statement.setString(bv.getPosition(),bv.getValue().toString());
        }
      }
    }
 else     if (bv.getType() == Integer.class || ""String_Node_Str"".equals(bv.getType().getName())) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
      }
      statement.setInt(bv.getPosition(),Integer.parseInt(bv.getValue().toString(),10));
    }
 else     if (bv.getType() == Long.class || ""String_Node_Str"".equals(bv.getType().getName())) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
      }
      statement.setLong(bv.getPosition(),Long.parseLong(bv.getValue().toString(),10));
    }
 else     if (bv.getType() == Double.class || ""String_Node_Str"".equals(bv.getType().getName())) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
      }
      statement.setDouble(bv.getPosition(),Double.parseDouble(bv.getValue().toString()));
    }
 else     if (bv.getType() == Float.class || ""String_Node_Str"".equals(bv.getType().getName())) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
      }
      statement.setFloat(bv.getPosition(),Float.parseFloat(bv.getValue().toString()));
    }
 else     if (bv.getType() == byte[].class) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
      }
      statement.setBlob(bv.getPosition(),new ByteArrayInputStream((byte[])bv.getValue()));
    }
 else     if (""String_Node_Str"".equals(bv.getType().getName())) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
      }
      statement.setString(bv.getPosition(),bv.getValue().toString());
    }
 else     if (bv.getValue() instanceof java.util.Date) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
      }
      statement.setTimestamp(bv.getPosition(),new java.sql.Timestamp(((java.util.Date)bv.getValue()).getTime()));
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + bv.getName() + ""String_Node_Str"");
      }
      statement.setString(bv.getPosition(),bv.getValue().toString());
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  return statement;
}",0.2741175117856732
44337,"public viewEvent(){
  User user=ReEventSession.get().getUserSignedIn();
  add(myEventList=new ListView<Event>(""String_Node_Str"",events.getByUser(user)){
    @Override protected void populateItem(    ListItem<Event> item){
      item.add(new Label(""String_Node_Str"",new PropertyModel(item.getModel(),""String_Node_Str"")));
      item.add(detailEvent=new Link(""String_Node_Str""){
        public void onClick(){
          Event obj=(Event)getModelObject();
          setResponsePage(new detailEvent(obj));
        }
      }
);
      item.add(new Label(""String_Node_Str"",new PropertyModel(item.getModel(),""String_Node_Str"")){
        @Override public <C>IConverter<C> getConverter(        Class<C> type){
          if (!Date.class.isAssignableFrom(type)) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          return (IConverter<C>)DateTimeConverter.both(DateFormat.SHORT,DateFormat.SHORT);
        }
      }
);
      item.add(new Label(""String_Node_Str"",new PropertyModel(item.getModel(),""String_Node_Str"")));
      item.add(new Label(""String_Node_Str"",new PropertyModel(item.getModel(),""String_Node_Str"")));
    }
  }
);
}","public viewEvent(){
  User user=ReEventSession.get().getModUserSignedIn().getObject();
  add(myEventList=new ListView<Event>(""String_Node_Str"",events.getByUser(user)){
    @Override protected void populateItem(    ListItem<Event> item){
      item.add(new Label(""String_Node_Str"",new PropertyModel(item.getModel(),""String_Node_Str"")));
      item.add(detailEvent=new Link(""String_Node_Str""){
        public void onClick(){
          Event obj=(Event)getModelObject();
          setResponsePage(new detailEvent(obj));
        }
      }
);
      item.add(new Label(""String_Node_Str"",new PropertyModel(item.getModel(),""String_Node_Str"")){
        @Override public <C>IConverter<C> getConverter(        Class<C> type){
          if (!Date.class.isAssignableFrom(type)) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          return (IConverter<C>)DateTimeConverter.both(DateFormat.SHORT,DateFormat.SHORT);
        }
      }
);
      item.add(new Label(""String_Node_Str"",new PropertyModel(item.getModel(),""String_Node_Str"")));
      item.add(new Label(""String_Node_Str"",new PropertyModel(item.getModel(),""String_Node_Str"")));
    }
  }
);
}",0.9935483870967742
44338,"public String getLanguageCode(Player player){
  boolean isin=util.PlayerDatabase(""String_Node_Str"",player,null,null);
  Language lang;
  if (isin) {
    lang=translation.GetPlayerLanguageHash(player);
  }
 else {
    lang=translation.GetLanguage(player,""String_Node_Str"");
  }
  return util.LanguageCode(""String_Node_Str"" + lang).toLowerCase();
}","public String getLanguageCode(Player player){
  return translation.languageCode(playerManager.getLanguageString(player));
}",0.3837953091684435
44339,"public String getCountryCode(Player player){
  boolean isin=util.PlayerDatabase(""String_Node_Str"",player,null,null);
  String CountryCode;
  if (isin) {
    CountryCode=translation.GetPlayerCountryHash(player);
  }
 else {
    CountryCode=translation.GetCountryCode(playerManager.getIP(player));
  }
  return CountryCode.toLowerCase();
}","public String getCountryCode(Player player){
  return playerManager.getCountryCode(player);
}",0.4
44340,"public String getLanguage(Player player){
  boolean isin=util.PlayerDatabase(""String_Node_Str"",player,null,null);
  Language lang;
  if (isin) {
    lang=translation.GetPlayerLanguageHash(player);
  }
 else {
    lang=translation.GetLanguage(player,""String_Node_Str"");
  }
  return util.LanguageName(""String_Node_Str"" + lang).toLowerCase();
}","public String getLanguage(Player player){
  return playerManager.getLanguageString(player);
}",0.3448275862068966
44341,"public String getCountry(Player player){
  String CountryName=translation.GetCountryName(playerManager.getIP(player));
  return CountryName.toLowerCase();
}","public String getCountry(Player player){
  return translation.getCountryName(playerManager.getIP(player));
}",0.7878787878787878
44342,"public void onPlayerChat(PlayerChatEvent event){
  if (!event.isCancelled()) {
    boolean isin=Util.PlayerDatabase(""String_Node_Str"",event.getPlayer(),null,null);
    Language langfrom;
    if (isin) {
      langfrom=translation.GetPlayerLanguageHash(event.getPlayer());
    }
 else {
      langfrom=translation.GetLanguage(event.getPlayer(),""String_Node_Str"");
    }
    if (Config.language_serverforced) {
      Language langto=Language.fromString(Config.language_default.toLowerCase());
      String NewMessage=translation.translate(event.getMessage(),langfrom,langto);
      event.setMessage(NewMessage);
    }
 else     if (Config.language_playerset) {
      int tempcounter=0;
      for (      Player player : Variables.server.getOnlinePlayers()) {
        boolean isin2=Util.PlayerDatabase(""String_Node_Str"",player,null,null);
        Language langto;
        if (isin2) {
          langto=translation.GetPlayerLanguageHash(player);
        }
 else {
          langto=translation.GetLanguage(player,""String_Node_Str"");
        }
        String NewMessage=null;
        if (langfrom.equals(langto)) {
          NewMessage=event.getMessage();
          player.sendMessage(event.getPlayer().getName() + ""String_Node_Str"" + NewMessage);
        }
 else {
          NewMessage=translation.Translate(event.getMessage(),langfrom,langto);
          player.sendMessage(event.getPlayer().getName() + ""String_Node_Str"" + NewMessage);
        }
        if (tempcounter == 0) {
          logging.info(event.getPlayer().getName() + ""String_Node_Str"" + NewMessage);
          tempcounter++;
        }
      }
    }
  }
  event.setCancelled(true);
}","public void onPlayerChat(PlayerChatEvent event){
  if (event.isCancelled()) {
    return;
  }
  Language langfrom=playerManager.getLanguage(event.getPlayer());
  if (Config.language_serverforced) {
    Language langto=Language.fromString(Config.language_default.toLowerCase());
    String NewMessage=translation.translate(event.getMessage(),langfrom,langto);
    event.setMessage(NewMessage);
  }
 else   if (Config.language_playerset) {
    int tempcounter=0;
    for (    Player player : Variables.server.getOnlinePlayers()) {
      Language langto=playerManager.getLanguage(player);
      String NewMessage=null;
      if (langfrom.equals(langto)) {
        NewMessage=event.getMessage();
        player.sendMessage(event.getPlayer().getName() + ""String_Node_Str"" + NewMessage);
      }
 else {
        NewMessage=translation.translate(event.getMessage(),langfrom,langto);
        player.sendMessage(event.getPlayer().getName() + ""String_Node_Str"" + NewMessage);
      }
      if (tempcounter == 0) {
        logging.info(event.getPlayer().getName() + ""String_Node_Str"" + NewMessage);
        tempcounter++;
      }
    }
  }
}",0.4799711295561169
44343,"public BabelCraftPlayerListener(BabelCraft instance){
  this.plugin=instance;
  if (Variables.plugintag) {
    TempPrefix=Variables.plugin_prefix;
  }
 else {
    TempPrefix=Variables.nextline_tag;
  }
}","public BabelCraftPlayerListener(BabelCraft instance){
  if (Variables.plugintag) {
    TempPrefix=Variables.plugin_prefix;
  }
 else {
    TempPrefix=Variables.nextline_tag;
  }
}",0.93717277486911
44344,"public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (split[0].equals(""String_Node_Str"") || split[0].equals(""String_Node_Str"")) {
    if (split.length == 2 || split.length == 3) {
      String parameter1=split[1];
      if (Util.isNumeric(parameter1)) {
        int counter=0;
        int page=Integer.parseInt(parameter1);
        int x1;
        if (page == 1) {
          x1=1;
        }
 else {
          x1=10 * page;
        }
        int x2=x1 + 8;
        player.sendMessage(Variables.plugin_prefix + ""String_Node_Str"" + page+ ""String_Node_Str"");
        for (        Language l : Language.values()) {
          if (counter >= x1 && counter <= x2) {
            player.sendMessage(Variables.plugin_prefix + Util.Capitalize(l.name().toLowerCase()) + ""String_Node_Str""+ l);
          }
          counter++;
        }
      }
 else       if (parameter1.equals(""String_Node_Str"") || parameter1.equals(""String_Node_Str"")) {
        if (split.length == 3) {
          int counter=0;
          String parameter2=split[2];
          player.sendMessage(Variables.plugin_prefix + ""String_Node_Str"" + parameter2+ ""String_Node_Str"");
          for (          Language l : Language.values()) {
            if (!l.name().toLowerCase().equals(""String_Node_Str"")) {
              if (l.name().toLowerCase().startsWith(parameter2.toLowerCase())) {
                player.sendMessage(TempPrefix + Util.Capitalize(l.name().toLowerCase()) + ""String_Node_Str""+ l);
                counter++;
              }
 else               if (l.toString().toLowerCase().startsWith(parameter2.toLowerCase())) {
                player.sendMessage(TempPrefix + Util.Capitalize(l.name().toLowerCase()) + ""String_Node_Str""+ l);
                counter++;
              }
            }
          }
          if (counter == 0) {
            player.sendMessage(TempPrefix + ""String_Node_Str"" + parameter2+ ""String_Node_Str"");
          }
        }
 else {
          player.sendMessage(Variables.plugin_prefix + ""String_Node_Str"");
        }
      }
 else       if (translation.IsLanguageSupported(parameter1)) {
        if (!Util.ToFile(""String_Node_Str"",event.getPlayer().getName().toLowerCase(),null)) {
          Util.ToFile(""String_Node_Str"",event.getPlayer().getName().toLowerCase() + ""String_Node_Str"" + parameter1,null);
          String CountryCode=translation.GetCountryCode(playerManager.getIP(event.getPlayer()));
          if (CountryCode.equals(""String_Node_Str"")) {
            CountryCode=""String_Node_Str"";
          }
          Util.PlayerDatabase(""String_Node_Str"",event.getPlayer(),parameter1,CountryCode);
        }
 else {
          String CountryCode=translation.GetCountryCode(playerManager.getIP(event.getPlayer()));
          if (CountryCode.equals(""String_Node_Str"")) {
            CountryCode=""String_Node_Str"";
          }
          Util.PlayerDatabase(""String_Node_Str"",event.getPlayer(),parameter1,CountryCode);
          Util.ToFile(""String_Node_Str"",event.getPlayer().getName().toLowerCase(),parameter1);
          player.sendMessage(Variables.plugin_prefix + ""String_Node_Str"");
          player.sendMessage(TempPrefix + ""String_Node_Str"" + translation.LanguageName(parameter1)+ ""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(Variables.plugin_prefix + ""String_Node_Str"");
        player.sendMessage(TempPrefix + ""String_Node_Str"");
        player.sendMessage(TempPrefix + ""String_Node_Str"");
      }
    }
 else {
      boolean isin=Util.PlayerDatabase(""String_Node_Str"",event.getPlayer(),null,null);
      Language lang;
      if (isin) {
        lang=translation.GetPlayerLanguageHash(event.getPlayer());
      }
 else {
        lang=translation.GetLanguage(event.getPlayer(),""String_Node_Str"");
      }
      player.sendMessage(Variables.plugin_prefix + ""String_Node_Str"" + translation.LanguageName(""String_Node_Str"" + lang)+ ""String_Node_Str"");
      player.sendMessage(TempPrefix + ""String_Node_Str"");
      player.sendMessage(TempPrefix + ""String_Node_Str"");
      player.sendMessage(TempPrefix + ""String_Node_Str"");
    }
    event.setCancelled(true);
  }
}","public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (split[0].equals(""String_Node_Str"") || split[0].equals(""String_Node_Str"")) {
    if (split.length == 2 || split.length == 3) {
      String parameter1=split[1];
      if (util.isNumeric(parameter1)) {
        int counter=0;
        int page=Integer.parseInt(parameter1);
        int x1;
        if (page == 1) {
          x1=1;
        }
 else {
          x1=10 * page;
        }
        int x2=x1 + 8;
        player.sendMessage(Variables.plugin_prefix + ""String_Node_Str"" + page+ ""String_Node_Str"");
        for (        Language l : Language.values()) {
          if (counter >= x1 && counter <= x2) {
            player.sendMessage(Variables.plugin_prefix + util.capitalize(l.name().toLowerCase()) + ""String_Node_Str""+ l);
          }
          counter++;
        }
      }
 else       if (parameter1.equals(""String_Node_Str"") || parameter1.equals(""String_Node_Str"")) {
        if (split.length == 3) {
          int counter=0;
          String parameter2=split[2];
          player.sendMessage(Variables.plugin_prefix + ""String_Node_Str"" + parameter2+ ""String_Node_Str"");
          for (          Language l : Language.values()) {
            if (!l.name().toLowerCase().equals(""String_Node_Str"")) {
              if (l.name().toLowerCase().startsWith(parameter2.toLowerCase())) {
                player.sendMessage(TempPrefix + util.capitalize(l.name().toLowerCase()) + ""String_Node_Str""+ l);
                counter++;
              }
 else               if (l.toString().toLowerCase().startsWith(parameter2.toLowerCase())) {
                player.sendMessage(TempPrefix + util.capitalize(l.name().toLowerCase()) + ""String_Node_Str""+ l);
                counter++;
              }
            }
          }
          if (counter == 0) {
            player.sendMessage(TempPrefix + ""String_Node_Str"" + parameter2+ ""String_Node_Str"");
          }
        }
 else {
          player.sendMessage(Variables.plugin_prefix + ""String_Node_Str"");
        }
      }
 else       if (translation.isLanguageSupported(parameter1)) {
        EBean eBeanClass=playerManager.checkPlayer(event.getPlayer(),true);
        eBeanClass.setLanguage(translation.languageName(parameter1));
        eBeanClass.save(eBeanClass);
        player.sendMessage(Variables.plugin_prefix + ""String_Node_Str"");
        player.sendMessage(TempPrefix + ""String_Node_Str"" + translation.languageName(parameter1)+ ""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(Variables.plugin_prefix + ""String_Node_Str"");
      player.sendMessage(TempPrefix + ""String_Node_Str"");
      player.sendMessage(TempPrefix + ""String_Node_Str"");
    }
  }
 else {
    String lang=playerManager.getLanguageString(event.getPlayer());
    player.sendMessage(Variables.plugin_prefix + ""String_Node_Str"" + lang+ ""String_Node_Str"");
    player.sendMessage(TempPrefix + ""String_Node_Str"");
    player.sendMessage(TempPrefix + ""String_Node_Str"");
    player.sendMessage(TempPrefix + ""String_Node_Str"");
  }
  event.setCancelled(true);
}",0.5444203683640303
44345,"public void onPlayerJoin(PlayerJoinEvent event){
  if (Util.PlayerDatabase(""String_Node_Str"",event.getPlayer(),null,null)) {
    Language lang=translation.GetPlayerLanguageHash(event.getPlayer());
    event.getPlayer().sendMessage(Variables.plugin_prefix + ""String_Node_Str"" + translation.LanguageName(""String_Node_Str"" + lang)+ ""String_Node_Str"");
    event.getPlayer().sendMessage(TempPrefix + ""String_Node_Str"");
  }
 else {
    if (!Util.ToFile(""String_Node_Str"",event.getPlayer().getName().toLowerCase(),null)) {
      String CountryCode=Util.GetCountryCode(Util.GetIP(event.getPlayer()));
      if (CountryCode.equals(""String_Node_Str"")) {
        CountryCode=""String_Node_Str"";
      }
      Util.ToFile(""String_Node_Str"",event.getPlayer().getName().toLowerCase() + ""String_Node_Str"" + Util.LanguageCode(Config.language_default).toLowerCase(),null);
      Util.PlayerDatabase(""String_Node_Str"",event.getPlayer(),Config.language_default,CountryCode);
      event.getPlayer().sendMessage(Config.plugin_prefix + ""String_Node_Str"" + translation.LanguageName(Config.language_default)+ ""String_Node_Str"");
      event.getPlayer().sendMessage(TempPrefix + ""String_Node_Str"");
    }
 else {
      Language lang=translation.GetLanguage(event.getPlayer(),null);
      event.getPlayer().sendMessage(Variables.plugin_prefix + ""String_Node_Str"" + translation.LanguageName(""String_Node_Str"" + lang)+ ""String_Node_Str"");
      event.getPlayer().sendMessage(TempPrefix + ""String_Node_Str"");
    }
  }
}","public void onPlayerJoin(PlayerJoinEvent event){
  event.getPlayer().sendMessage(Variables.plugin_prefix + ""String_Node_Str"" + playerManager.getLanguageString(event.getPlayer())+ ""String_Node_Str"");
  event.getPlayer().sendMessage(TempPrefix + ""String_Node_Str"");
}",0.1524459613196814
44346,"public String replaceStrings(String string,Player player,String additional){
  string=string.replaceAll(""String_Node_Str"",playerManager.getIP(player));
  string=string.replaceAll(""String_Node_Str"",player.getName());
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",Variables.pluginName);
  string=string.replaceAll(""String_Node_Str"",Variables.pluginVersion);
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return string;
}","public String replaceStrings(String string,Player player,String additional){
  string=string.replaceAll(""String_Node_Str"",playerManager.getIP(player));
  string=string.replaceAll(""String_Node_Str"",player.getName());
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  string=string.replaceAll(""String_Node_Str"",Variables.pluginName);
  string=string.replaceAll(""String_Node_Str"",Variables.pluginVersion);
  string=string.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return string;
}",0.3192637258013329
44347,"public static void setGlobal(Actor g){
  global=g;
}","public static void setGlobal(WyObject g){
  global=g;
}",0.9158878504672896
44348,"public static Actor Frame(String title){
  JFrame frame=new JFrame(title);
  c=new TetrisCanvas(name);
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  frame.add(c,BorderLayout.CENTER);
  frame.setSize(285,690);
  frame.pack();
  frame.setVisible(true);
  grid=new char[10][22];
  c.setFocusable(true);
  frame.transferFocus();
  frame.setResizable(true);
  Actor a=new Actor(frame);
  a.start();
  return a;
}","public static WyObject Frame(String title){
  JFrame frame=new JFrame(title);
  c=new TetrisCanvas(name);
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  frame.add(c,BorderLayout.CENTER);
  frame.setSize(285,690);
  frame.pack();
  frame.setVisible(true);
  grid=new char[10][22];
  c.setFocusable(true);
  frame.transferFocus();
  frame.setResizable(true);
  return new WyObject(frame);
}",0.902200488997555
44349,"public static void setNext(Actor a,BigInteger i){
switch (i.intValue()) {
case 1:
    block=BLOCK_I;
  return;
case 2:
block=BLOCK_J;
return;
case 3:
block=BLOCK_L;
return;
case 4:
block=BLOCK_O;
return;
case 5:
block=BLOCK_S;
return;
case 6:
block=BLOCK_T;
return;
case 7:
block=BLOCK_Z;
return;
default :
block=BLOCK_I;
}
}","public static void setNext(WyObject a,BigInteger i){
switch (i.intValue()) {
case 1:
    block=BLOCK_I;
  return;
case 2:
block=BLOCK_J;
return;
case 3:
block=BLOCK_L;
return;
case 4:
block=BLOCK_O;
return;
case 5:
block=BLOCK_S;
return;
case 6:
block=BLOCK_T;
return;
case 7:
block=BLOCK_Z;
return;
default :
block=BLOCK_I;
}
}",0.9800918836140888
44350,"public static void render(Actor a,String str){
  int x=0;
  int y=20;
  for (int i=0; i < str.length(); i++) {
    if (y < 0) {
      y=20;
      x++;
    }
    if (str.charAt(i) == '\'') {
    }
 else {
      grid[x][y]=str.charAt(i);
      y--;
    }
  }
  c.repaint();
}","public static void render(WyObject a,String str){
  int x=0;
  int y=20;
  for (int i=0; i < str.length(); i++) {
    if (y < 0) {
      y=20;
      x++;
    }
    if (str.charAt(i) == '\'') {
    }
 else {
      grid[x][y]=str.charAt(i);
      y--;
    }
  }
  c.repaint();
}",0.97632058287796
44351,"public static void updateStats(Actor a,BigInteger i,BigInteger sc,BigInteger lvl){
  filledRows=i.intValue();
  score=sc.intValue();
  level=lvl.intValue();
}","public static void updateStats(WyObject a,BigInteger i,BigInteger sc,BigInteger lvl){
  filledRows=i.intValue();
  score=sc.intValue();
  level=lvl.intValue();
}",0.9717868338557992
44352,"public static void main(String[] args){
  try {
    int[] data=readFile(args[0]);
    for (int i=0; i < data.length; ++i) {
      for (int j=i + 1; j < data.length; ++j) {
        System.out.println(gcd(i,j));
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    int[] data=readFile(args[0]);
    for (int i=0; i < data.length; ++i) {
      for (int j=i + 1; j < data.length; ++j) {
        System.out.println(gcd(data[i],data[j]));
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.972508591065292
44353,"public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  Player player=(Player)sender;
  String command=commandArg.getName().toLowerCase();
  String response=""String_Node_Str"";
  if (command.equalsIgnoreCase(""String_Node_Str"")) {
    if (player.isOp() || StealthLogin.Permissions.has(player,""String_Node_Str"") || (StealthLogin.Permissions.has(player,""String_Node_Str"") || StealthLogin.Permissions.has(player,""String_Node_Str""))) {
      for (      Player p : getServer().getOnlinePlayers()) {
        if (StealthLogin.Permissions.has(p,""String_Node_Str"")) {
          response+=p.toString() + ""String_Node_Str"";
        }
      }
      player.sendMessage(logPrefix + ""String_Node_Str"" + response);
    }
  }
  if (command.equalsIgnoreCase(""String_Node_Str"")) {
    if (player.isOp() || StealthLogin.Permissions.has(player,""String_Node_Str"") || (StealthLogin.Permissions.has(player,""String_Node_Str"") || StealthLogin.Permissions.has(player,""String_Node_Str""))) {
      for (      Player p : getServer().getOnlinePlayers()) {
        if (StealthLogin.Permissions.has(p,""String_Node_Str"")) {
          response+=p.toString() + ""String_Node_Str"";
        }
      }
      player.sendMessage(logPrefix + ""String_Node_Str"" + response);
    }
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command commandArg,String commandLabel,String[] arg){
  Player player=(Player)sender;
  String command=commandArg.getName().toLowerCase();
  String response=""String_Node_Str"";
  if (command.equalsIgnoreCase(""String_Node_Str"")) {
    if (player.isOp() || StealthLogin.Permissions.has(player,""String_Node_Str"") || (StealthLogin.Permissions.has(player,""String_Node_Str"") || StealthLogin.Permissions.has(player,""String_Node_Str""))) {
      for (      Player p : getServer().getOnlinePlayers()) {
        if (StealthLogin.Permissions.has(p,""String_Node_Str"")) {
          response+=p.toString() + ""String_Node_Str"";
        }
      }
      player.sendMessage(logPrefix + ""String_Node_Str"" + response);
      response=""String_Node_Str"";
    }
  }
  if (command.equalsIgnoreCase(""String_Node_Str"")) {
    if (player.isOp() || StealthLogin.Permissions.has(player,""String_Node_Str"") || (StealthLogin.Permissions.has(player,""String_Node_Str"") || StealthLogin.Permissions.has(player,""String_Node_Str""))) {
      for (      Player p : getServer().getOnlinePlayers()) {
        if (StealthLogin.Permissions.has(p,""String_Node_Str"")) {
          response+=p.toString() + ""String_Node_Str"";
        }
      }
      player.sendMessage(logPrefix + ""String_Node_Str"" + response);
      response=""String_Node_Str"";
    }
  }
  return true;
}",0.974512743628186
44354,"private void play(){
  boolean aux1=true;
  boolean aux2=true;
  if (System.currentTimeMillis() - playLoopStartTime > playLoopTime) {
    List<MoleSprite> moles=view.getMoles();
    if (System.currentTimeMillis() - levelStartTime > levelTimeDuration) {
      level++;
      levelStartTime=System.currentTimeMillis();
      levelTimeDuration=levelTimeDuration + 10000;
      playLoopTime=playLoopTime / 2;
    }
    if (level <= 7) {
      int chosenMole=(int)Math.floor(12 * Math.random() - 0.01);
      MoleSprite mole=moles.get(chosenMole);
      if (mole.getStatus() == 4) {
        mole.digUp();
        aux1=checkMoles.add(mole);
        waitStartTime=System.currentTimeMillis();
        Log.i(""String_Node_Str"",mole.toString());
        mole.setFullDigUpStartTime(System.currentTimeMillis());
      }
 else {
        playLoopStartTime=System.currentTimeMillis();
        play();
      }
      for (      MoleSprite moleCheck : checkMoles) {
        if (moleCheck.getStatus() == 0) {
          if (System.currentTimeMillis() - moleCheck.getFullDigUpStartTime() > 1500) {
            if (moleCheck.equals((checkMoles).peek())) {
              if (System.currentTimeMillis() - waitStartTime > waitTime) {
                moleCheck.digDown();
                aux2=checkMoles.remove(moleCheck);
                Log.i(""String_Node_Str"",moleCheck.toString());
                waitStartTime=System.currentTimeMillis();
              }
            }
          }
        }
      }
    }
    if (!aux1 || !aux2)     throw new IllegalArgumentException(""String_Node_Str"");
  }
}","private void play(){
  boolean aux1=true;
  boolean aux2=true;
  if (System.currentTimeMillis() - playLoopStartTime > playLoopTime) {
    List<MoleSprite> moles=view.getMoles();
    if (System.currentTimeMillis() - levelStartTime > levelTimeDuration) {
      level++;
      levelStartTime=System.currentTimeMillis();
      levelTimeDuration=levelTimeDuration + 10000;
      playLoopTime=playLoopTime / 2;
    }
    if (level <= 7) {
      int chosenMole=(int)Math.floor(12 * Math.random() - 0.01);
      MoleSprite mole=moles.get(chosenMole);
      if (mole.getStatus() == 4) {
        mole.digUp();
        aux1=checkMoles.add(mole);
        Log.i(""String_Node_Str"",mole.toString());
        mole.setFullDigUpStartTime(System.currentTimeMillis());
      }
 else {
        playLoopStartTime=System.currentTimeMillis();
        play();
      }
      Iterator<MoleSprite> it=checkMoles.iterator();
      MoleSprite moleCheck;
      while (it.hasNext()) {
        moleCheck=it.next();
        if (moleCheck.getStatus() == 0) {
          if (System.currentTimeMillis() - moleCheck.getFullDigUpStartTime() > 1500) {
            if (moleCheck.equals((checkMoles).peek())) {
              moleCheck.digDown();
              it.remove();
              Log.i(""String_Node_Str"",moleCheck.toString());
            }
          }
        }
      }
    }
    if (!aux1 || !aux2)     throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.7406666666666667
44355,"/** 
 * Get auth token from API for given creds
 * @param email of user
 * @param password of user
 * @return An ApiResponse with Credentials information containing the returned auth token
 */
public ApiResponse<Credentials> login(final String email,final String password){
  final String params=String.format(""String_Node_Str"",email,password);
  final String data=Api.encode(params);
  final String url=Constants.API_LOGIN_URL;
  final ApiResponse<String> response=Api.Post(userAgent,url,data);
  final ApiResponse<Credentials> result;
  if (response.status == HttpStatus.SC_OK) {
    result=new ApiResponse<Credentials>(response.status,new Credentials(response.payload,email),response.headers);
  }
 else {
    result=new ApiResponse<Credentials>(response.status,null,response.headers);
  }
  return result;
}","/** 
 * Get auth token from API for given creds
 * @param email of user
 * @param password of user
 * @return An ApiResponse with Credentials information containing the returned auth token
 */
public ApiResponse<Credentials> login(final String email,final String password){
  final String params=String.format(""String_Node_Str"",email,password);
  final String data=Api.encode(params);
  final String url=Constants.API_LOGIN_URL;
  final ApiResponse<String> response=Api.Post(userAgent,url,data);
  final ApiResponse<Credentials> result;
  if (response.status == HttpStatus.SC_OK) {
    result=new ApiResponse<Credentials>(response.status,new Credentials(response.payload,email),response.headers);
  }
 else {
    result=new ApiResponse<Credentials>(response.status,new Credentials(null,email,password),response.headers);
  }
  return result;
}",0.9770253929866988
44356,"/** 
 * Gibt das aktuelle Semester zurück
 * @return ein {@link String} (""WiSe XX/XX"" oder ""SoSe XX"")
 */
private String getActualExamSem(){
  String semString=""String_Node_Str"";
  Date dt=new Date();
  int year=dt.getYear() - 100;
  int month=dt.getMonth() + 1;
  if (month > 9 && month < 3) {
    if (month != (1 | 2)) {
      year++;
    }
    semString=""String_Node_Str"" + (year - 1) + ""String_Node_Str""+ year;
  }
 else {
    semString=""String_Node_Str"" + year;
  }
  return semString;
}","/** 
 * Gibt das aktuelle Semester zurück
 * @return ein {@link String} (""WiSe XX/XX"" oder ""SoSe XX"")
 */
private String getActualExamSem(){
  String semString=""String_Node_Str"";
  Date dt=new Date();
  int year=dt.getYear() - 100;
  int month=dt.getMonth() + 1;
  if (month > 9 || month < 3) {
    if (month != (1 | 2)) {
      year++;
    }
    semString=""String_Node_Str"" + (year - 1) + ""String_Node_Str""+ year;
  }
 else {
    semString=""String_Node_Str"" + year;
  }
  return semString;
}",0.9959349593495936
44357,"/** 
 * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)
 */
public void stop(BundleContext context) throws Exception {
  plugin=null;
  super.stop(context);
  IPath location=Platform.getStateLocation(context.getBundle());
  File store=location.append(STORE_NAME).toFile();
  if (store != null) {
    try {
      ObjectOutputStream stream=new ObjectOutputStream(new FileOutputStream(store));
      stream.writeObject(this.store);
    }
 catch (    IOException e) {
      getLog().log(new Status(IStatus.ERROR,PLUGIN_ID,""String_Node_Str"",e));
    }
  }
  this.store.dispose();
}","/** 
 * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)
 */
public void stop(BundleContext context) throws Exception {
  plugin=null;
  super.stop(context);
  IPath location=Platform.getStateLocation(context.getBundle());
  File store=location.append(STORE_NAME).toFile();
  if (store != null) {
    ObjectOutputStream stream=null;
    try {
      stream=new ObjectOutputStream(new FileOutputStream(store));
      stream.writeObject(this.store);
    }
 catch (    IOException e) {
      log(Messages.AvatarPlugin_ExceptionSavingStore,e);
    }
 finally {
      if (stream != null) {
        try {
          stream.close();
        }
 catch (        IOException ignore) {
        }
      }
    }
  }
  this.store.dispose();
}",0.727007299270073
44358,"/** 
 * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  IPath location=Platform.getStateLocation(context.getBundle());
  File store=location.append(STORE_NAME).toFile();
  if (store != null && store.exists()) {
    try {
      ObjectInputStream stream=new ObjectInputStream(new FileInputStream(store));
      this.store=(AvatarStore)stream.readObject();
    }
 catch (    IOException e) {
      getLog().log(new Status(IStatus.ERROR,PLUGIN_ID,""String_Node_Str"",e));
    }
catch (    ClassNotFoundException cnfe) {
      getLog().log(new Status(IStatus.ERROR,PLUGIN_ID,""String_Node_Str"",cnfe));
    }
  }
  if (this.store == null) {
    this.store=new AvatarStore();
  }
}","/** 
 * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  IPath location=Platform.getStateLocation(context.getBundle());
  File store=location.append(STORE_NAME).toFile();
  if (store != null && store.exists()) {
    ObjectInputStream stream=null;
    try {
      stream=new ObjectInputStream(new FileInputStream(store));
      this.store=(AvatarStore)stream.readObject();
    }
 catch (    IOException e) {
      log(Messages.AvatarPlugin_ExceptionLoadingStore,e);
    }
catch (    ClassNotFoundException cnfe) {
      log(Messages.AvatarPlugin_ExceptionLoadingStore,cnfe);
    }
 finally {
      if (stream != null) {
        try {
          stream.close();
        }
 catch (        IOException ignore) {
        }
      }
    }
  }
  if (this.store == null) {
    this.store=new AvatarStore();
  }
}",0.6864310148232611
44359,"private void createGplBreakpoint(IResource resource,String typeName,int lineNumber,int charStart,int charEnd) throws CoreException {
  this.gplBreakpoint=JDIDebugModel.createLineBreakpoint(resource,typeName,lineNumber,charStart,charEnd,0,true,null);
}","private void createGplBreakpoint(IResource resource,String typeName,int lineNumber,int charStart,int charEnd) throws CoreException {
  if (this.gplBreakpoint == null || !this.gplBreakpoint.isRegistered()) {
    this.gplBreakpoint=JDIDebugModel.createLineBreakpoint(resource,typeName,lineNumber,charStart,charEnd,0,true,null);
  }
}",0.8625429553264605
44360,"public void install(DSLDebugTarget debugTarget){
  this.debugTarget=debugTarget;
  SimpleMapping mapping=this.debugTarget.getMapping(this);
  if (mapping != null) {
    try {
      String typeName=mapping.getTarget().getFullPath().removeFileExtension().removeFirstSegments(2).toOSString().replace('/','.');
      int lineNumber=12;
      createGplBreakpoint(mapping.getTarget(),typeName,lineNumber,mapping.getTargetStartChar(),mapping.getTargetEndChar());
      IDebugTarget jDebugTarget=debugTarget.getJavaDebugTarget();
      if (jDebugTarget != null)       jDebugTarget.breakpointAdded(this.gplBreakpoint);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}","public void install(DSLDebugTarget debugTarget){
  this.debugTarget=debugTarget;
  SimpleMapping mapping=this.debugTarget.getMapping(this);
  if (mapping != null) {
    try {
      String typeName=mapping.getTarget().getFullPath().removeFileExtension().removeFirstSegments(2).toOSString().replace('/','.');
      int lineNumber=mapping.getTargetStartLineNumber();
      createGplBreakpoint(mapping.getTarget(),typeName,lineNumber,mapping.getTargetStartChar(),mapping.getTargetEndChar());
      IDebugTarget jDebugTarget=debugTarget.getJavaDebugTarget();
      if (jDebugTarget != null)       jDebugTarget.breakpointAdded(this.gplBreakpoint);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}",0.9743223965763196
44361,"@Override public boolean isTerminated(){
  return javaDebugTarget != null ? javaDebugTarget.isTerminated() : false;
}","@Override public boolean isTerminated(){
  return true;
}",0.632183908045977
44362,"@Override public IStackFrame[] getStackFrames() throws DebugException {
  return null;
}","@Override public IStackFrame[] getStackFrames() throws DebugException {
  return stackFrames.toArray(new IStackFrame[stackFrames.size()]);
}",0.7456140350877193
44363,"public DSLThread(IDebugTarget target,IJavaThread javaThread){
  super(target);
  this.javaThread=javaThread;
}","public DSLThread(IDebugTarget target,IJavaThread javaThread){
  super(target);
  this.javaThread=javaThread;
  this.stackFrames=new ArrayList<DSLStackFrame>();
  this.stackFrames.add(new DSLStackFrame(target,this));
}",0.672782874617737
44364,"@Override public boolean hasStackFrames() throws DebugException {
  return false;
}","@Override public boolean hasStackFrames() throws DebugException {
  return stackFrames.size() != 0;
}",0.8804347826086957
44365,"public ControlPanel(final DebugPanel parent){
  super(new FlowLayout(FlowLayout.LEFT));
  if (parent == null)   throw new NullPointerException();
  final Controller controller=parent.controller;
  JButton back=new JButton(""String_Node_Str"");
  back.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
synchronized (controller) {
        if (controller.isRunning())         return;
        parent.beginStep();
        try {
          controller.stepBack();
        }
 catch (        IllegalOpcodeException ex) {
        }
        parent.endStep();
      }
    }
  }
);
  add(back);
  JButton step=new JButton(""String_Node_Str"");
  step.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
synchronized (controller) {
        if (controller.isRunning() || parent.machine.isHalted())         return;
        parent.beginStep();
        try {
          controller.step();
        }
 catch (        IllegalOpcodeException ex) {
        }
        parent.endStep();
      }
    }
  }
);
  add(step);
  JButton resume=new JButton(""String_Node_Str"");
  resume.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (controller.isRunning())       return;
      parent.beginRun();
      new Thread(""String_Node_Str""){
        public void run(){
          controller.run();
          try {
            SwingUtilities.invokeAndWait(new Runnable(){
              public void run(){
                parent.endRun();
              }
            }
);
          }
 catch (          InvocationTargetException e) {
          }
catch (          InterruptedException e) {
          }
        }
      }
.start();
    }
  }
);
  add(resume);
  JButton suspend=new JButton(""String_Node_Str"");
  suspend.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      controller.suspend();
    }
  }
);
  add(suspend);
}","public ControlPanel(final DebugPanel parent){
  super(new FlowLayout(FlowLayout.LEFT));
  if (parent == null)   throw new NullPointerException();
  final Controller controller=parent.controller;
  JButton back=new JButton(""String_Node_Str"");
  back.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
synchronized (controller) {
        if (controller.isRunning())         return;
        parent.beginStep();
        try {
          controller.stepBack();
        }
 catch (        IllegalOpcodeException ex) {
        }
        parent.endStep();
      }
    }
  }
);
  add(back);
  JButton step=new JButton(""String_Node_Str"");
  step.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
synchronized (controller) {
        if (controller.isRunning() || controller.getMachine().isHalted())         return;
        parent.beginStep();
        try {
          controller.step();
        }
 catch (        IllegalOpcodeException ex) {
        }
        parent.endStep();
      }
    }
  }
);
  add(step);
  JButton resume=new JButton(""String_Node_Str"");
  resume.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (controller.isRunning())       return;
      parent.beginRun();
      new Thread(""String_Node_Str""){
        public void run(){
          controller.run();
          try {
            SwingUtilities.invokeAndWait(new Runnable(){
              public void run(){
                parent.endRun();
              }
            }
);
          }
 catch (          InvocationTargetException e) {
          }
catch (          InterruptedException e) {
          }
        }
      }
.start();
    }
  }
);
  add(resume);
  JButton suspend=new JButton(""String_Node_Str"");
  suspend.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      controller.suspend();
    }
  }
);
  add(suspend);
}",0.9936143039591316
44366,"public DebugPanel(DebugMachine m,Program p){
  if (m == null)   throw new NullPointerException();
  machine=m;
  controller=new Controller(m);
  setLayout(new GridBagLayout());
  GridBagConstraints g=new GridBagConstraints();
  g.anchor=GridBagConstraints.CENTER;
  g.insets=new Insets(4,4,4,4);
  g.gridx=0;
  g.gridy=0;
  g.weightx=0;
  g.weighty=0;
  g.fill=GridBagConstraints.NONE;
  registerPanel=new RegisterPanel(this);
  add(registerPanel,g);
  g.gridx=1;
  g.gridy=0;
  g.weightx=0;
  g.weighty=0;
  g.fill=GridBagConstraints.NONE;
  add(new ControlPanel(this),g);
  g.gridx=2;
  g.gridy=0;
  g.weightx=1;
  g.weighty=0;
  g.fill=GridBagConstraints.HORIZONTAL;
  add(new JPanel(),g);
  g.gridx=0;
  g.gridy=1;
  g.gridwidth=3;
  g.weightx=1;
  g.weighty=1;
  g.fill=GridBagConstraints.BOTH;
  tableModel=new MachineTableModel(this,p);
  JTable table=new JTable(tableModel);
  table.setFont(monospacedFont);
  table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  int[] columnWidths={30,100,80,400};
  for (int i=0; i < columnWidths.length; i++)   table.getColumnModel().getColumn(i).setPreferredWidth(columnWidths[i]);
  table.setColumnSelectionAllowed(true);
  JScrollPane scrollpane=new JScrollPane(table);
  add(scrollpane,g);
}","public DebugPanel(DebugMachine m,Program p){
  if (m == null)   throw new NullPointerException();
  controller=new Controller(m);
  setLayout(new GridBagLayout());
  GridBagConstraints g=new GridBagConstraints();
  g.anchor=GridBagConstraints.CENTER;
  g.insets=new Insets(4,4,4,4);
  g.gridx=0;
  g.gridy=0;
  g.weightx=0;
  g.weighty=0;
  g.fill=GridBagConstraints.NONE;
  registerPanel=new RegisterPanel(this);
  add(registerPanel,g);
  g.gridx=1;
  g.gridy=0;
  g.weightx=0;
  g.weighty=0;
  g.fill=GridBagConstraints.NONE;
  add(new ControlPanel(this),g);
  g.gridx=2;
  g.gridy=0;
  g.weightx=1;
  g.weighty=0;
  g.fill=GridBagConstraints.HORIZONTAL;
  add(new JPanel(),g);
  g.gridx=0;
  g.gridy=1;
  g.gridwidth=3;
  g.weightx=1;
  g.weighty=1;
  g.fill=GridBagConstraints.BOTH;
  tableModel=new MachineTableModel(this,p);
  JTable table=new JTable(tableModel);
  table.setFont(monospacedFont);
  table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  int[] columnWidths={30,100,80,400};
  for (int i=0; i < columnWidths.length; i++)   table.getColumnModel().getColumn(i).setPreferredWidth(columnWidths[i]);
  table.setColumnSelectionAllowed(true);
  JScrollPane scrollpane=new JScrollPane(table);
  add(scrollpane,g);
}",0.9947175944737912
44367,"public void beginRun(){
  machine.removeListener(this);
  updateThread=new Thread(""String_Node_Str""){
    public void run(){
      try {
        do {
          SwingUtilities.invokeAndWait(new Runnable(){
            public void run(){
              updateView();
            }
          }
);
        }
 while (!threadStopRequest.tryAcquire(1000,TimeUnit.MILLISECONDS));
      }
 catch (      InterruptedException e) {
      }
catch (      InvocationTargetException e) {
      }
    }
  }
;
  updateThread.start();
}","public void beginRun(){
  machine.removeListener(this);
  updateThread=new Thread(""String_Node_Str""){
    public void run(){
      try {
        do {
          SwingUtilities.invokeAndWait(new Runnable(){
            public void run(){
              updateView();
            }
          }
);
        }
 while (!threadStopRequest.tryAcquire(1000,TimeUnit.MILLISECONDS));
        updateThread=null;
        machine.addListener(MachineTableModel.this);
        fireTableDataChanged();
      }
 catch (      InterruptedException e) {
      }
catch (      InvocationTargetException e) {
      }
    }
  }
;
  updateThread.start();
}",0.902097902097902
44368,"public void endRun(){
  threadStopRequest.release();
  join(updateThread);
  updateThread=null;
  machine.addListener(this);
  fireTableDataChanged();
}","public void endRun(){
  threadStopRequest.release();
}",0.5242718446601942
44369,"public void beginRun(){
  oldAccumulator=machine.getAccumulator();
  oldConditionCode=machine.getConditionCode();
  updateThread=new Thread(""String_Node_Str""){
    public void run(){
      try {
        do {
          SwingUtilities.invokeAndWait(new Runnable(){
            public void run(){
              updateView();
            }
          }
);
        }
 while (!threadStopRequest.tryAcquire(1000,TimeUnit.MILLISECONDS));
      }
 catch (      InterruptedException e) {
      }
catch (      InvocationTargetException e) {
      }
    }
  }
;
  updateThread.start();
}","public void beginRun(){
  oldAccumulator=machine.getAccumulator();
  oldConditionCode=machine.getConditionCode();
  updateThread=new Thread(""String_Node_Str""){
    public void run(){
      try {
        do {
          SwingUtilities.invokeAndWait(new Runnable(){
            public void run(){
              updateView();
            }
          }
);
        }
 while (!threadStopRequest.tryAcquire(1000,TimeUnit.MILLISECONDS));
        updateThread=null;
        programCounterChanged(false);
        accumulatorChanged(false);
        conditionCodeChanged(false);
        stepCountChanged();
      }
 catch (      InterruptedException e) {
      }
catch (      InvocationTargetException e) {
      }
    }
  }
;
  updateThread.start();
}",0.8743335872048743
44370,"public void endRun(){
  threadStopRequest.release();
  join(updateThread);
  updateThread=null;
  programCounterChanged(false);
  accumulatorChanged(false);
  conditionCodeChanged(false);
  stepCountChanged();
}","public void endRun(){
  threadStopRequest.release();
}",0.4075471698113208
44371,"public static Program link(Set<Fragment> frags){
  Map<String,Integer> alllabels=new HashMap<String,Integer>();
  alllabels.put(""String_Node_Str"",Executor.OPSYS_ADDRESS);
  int offset=0;
  for (  Fragment f : frags) {
    Map<String,Integer> labels=f.getLabels();
    for (    String label : labels.keySet()) {
      if (alllabels.containsKey(label))       throw new IllegalArgumentException(String.format(""String_Node_Str"",label));
 else       alllabels.put(label,labels.get(label) + offset);
    }
    offset+=f.getImageLength();
  }
  IntBuffer allimage=new IntBuffer();
  for (  Fragment f : frags) {
    int[] image=resolveReferences(f,alllabels);
    allimage.append(image);
  }
  return new Program(allimage.toArray(),alllabels.get(""String_Node_Str""),new HashMap<Integer,String>());
}","public static Program link(Set<Fragment> frags){
  Map<String,Integer> alllabels=new HashMap<String,Integer>();
  alllabels.put(""String_Node_Str"",Executor.OPSYS_ADDRESS);
  int offset=0;
  for (  Fragment f : frags) {
    Map<String,Integer> labels=f.getLabels();
    for (    String label : labels.keySet()) {
      if (alllabels.containsKey(label))       throw new IllegalArgumentException(String.format(""String_Node_Str"",label));
 else       alllabels.put(label,labels.get(label) + offset);
    }
    offset+=f.getImageLength();
  }
  IntBuffer allimage=new IntBuffer();
  for (  Fragment f : frags) {
    int[] image=resolveReferences(f,alllabels);
    allimage.append(image);
  }
  Map<Integer,String> imageSourceCode=new HashMap<Integer,String>();
  offset=0;
  for (  Fragment f : frags) {
    int imagelen=f.getImageLength();
    for (int i=0; i < imagelen; i++)     imageSourceCode.put(i + offset,f.getSourceLine(i));
    offset+=imagelen;
  }
  return new Program(allimage.toArray(),alllabels.get(""String_Node_Str""),imageSourceCode);
}",0.8300653594771242
44372,"public static void main(String[] args) throws IOException {
  SourceCode s=SourceCode.readFile(new File(args[0]));
  Program p;
  try {
    p=Csc258Compiler.compile(s);
  }
 catch (  CompilationException e) {
    SortedMap<Integer,String> errorMessages=e.getErrorMessages();
    SourceCode sourceCode=e.getSourceCode();
    for (    int line : errorMessages.keySet()) {
      System.err.printf(""String_Node_Str"",line + 1,errorMessages.get(line));
      System.err.println(sourceCode.getLineAt(line));
      System.err.println();
    }
    System.err.printf(""String_Node_Str"",errorMessages.size(),errorMessages.size() == 1 ? ""String_Node_Str"" : ""String_Node_Str"");
    return;
  }
  ProbedMachine m=new ProbedMachine(System.in,System.out);
  StatePanel panel=new StatePanel(m);
  m.loadProgram(p);
  JFrame frame=new JFrame(""String_Node_Str"");
  frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  frame.add(panel);
  frame.pack();
  frame.setVisible(true);
}","public static void main(String[] args) throws IOException {
  Set<Fragment> frags=new HashSet<Fragment>();
  for (  String arg : args) {
    try {
      File file=new File(arg);
      SourceCode sc=SourceCode.readFile(file);
      Fragment f=Csc258Compiler.compile(sc);
      frags.add(f);
    }
 catch (    CompilationException e) {
      printCompilerErrors(e.getErrorMessages(),e.getSourceCode());
      System.exit(1);
      return;
    }
  }
  Program p=Csc258Linker.link(frags);
  ProbedMachine m=new ProbedMachine(System.in,System.out);
  StatePanel panel=new StatePanel(m);
  m.loadProgram(p);
  JFrame frame=new JFrame(""String_Node_Str"");
  frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  frame.add(panel);
  frame.pack();
  frame.setVisible(true);
}",0.5244956772334294
44373,"public void write(OutputStream out) throws IOException {
  out.write(new byte[]{op});
  out.write(new byte[]{htype});
  out.write(new byte[]{hlen});
  out.write(new byte[]{hops});
  out.write(xid);
  out.write(secs);
  out.write(flags);
  out.write(ciaddr);
  out.write(yiaddr);
  out.write(siaddr);
  out.write(giaddr);
  out.write(chaddr);
  out.write(sname);
  out.write(file);
  int len=0;
  out.write(Constants.magicCookie);
  len+=4;
  for (  Option option : options) {
    out.write(new byte[]{option.code});
    out.write(new byte[]{option.len});
    out.write(option.data);
    len+=option.len + 2;
  }
  out.write(new byte[]{(byte)255});
  len+=1;
  while (len % 64 != 0) {
    out.write(new byte[]{0});
    len+=1;
  }
}","public void write(OutputStream out) throws IOException {
  out.write(new byte[]{op});
  out.write(new byte[]{htype});
  out.write(new byte[]{hlen});
  out.write(new byte[]{hops});
  out.write(xid);
  out.write(secs);
  out.write(flags);
  out.write(ciaddr);
  out.write(yiaddr);
  out.write(siaddr);
  out.write(giaddr);
  out.write(chaddr);
  out.write(sname);
  out.write(file);
  int len=0;
  out.write(Constants.MAGICCOOKIE);
  len+=4;
  for (  Option option : options) {
    out.write(new byte[]{option.code});
    out.write(new byte[]{option.len});
    out.write(option.data);
    len+=option.len + 2;
  }
  out.write(new byte[]{(byte)255});
  len+=1;
  while (len % 64 != 0) {
    out.write(new byte[]{0});
    len+=1;
  }
}",0.9863201094391244
44374,"public void read(InputStream in) throws IOException {
  byte[] temp=new byte[1];
  in.read(temp);
  op=temp[0];
  in.read(temp);
  htype=temp[0];
  in.read(temp);
  hlen=temp[0];
  in.read(temp);
  hops=temp[0];
  xid=new byte[4];
  in.read(xid);
  secs=new byte[2];
  in.read(secs);
  flags=new byte[2];
  in.read(flags);
  ciaddr=new byte[4];
  in.read(ciaddr);
  yiaddr=new byte[4];
  in.read(yiaddr);
  siaddr=new byte[4];
  in.read(siaddr);
  giaddr=new byte[4];
  in.read(giaddr);
  chaddr=new byte[16];
  in.read(chaddr);
  sname=new byte[64];
  in.read(sname);
  file=new byte[128];
  in.read(file);
  byte[] magiccookie=new byte[4];
  in.read(magiccookie);
  if (!Arrays.equals(magiccookie,Constants.magicCookie))   throw new Error(""String_Node_Str"");
  while (in.available() > 0) {
    in.read(temp);
    byte code=temp[0];
    if (code == -1)     break;
    in.read(temp);
    byte len=temp[0];
    byte[] data=new byte[len];
    in.read(data);
    options.add(new Option(code,len,data));
  }
  padding=0;
  while (in.available() > 0) {
    in.read(temp);
    if (temp[0] != 0)     throw new IOException(""String_Node_Str"");
    padding++;
  }
}","public void read(InputStream in) throws IOException {
  byte[] temp=new byte[1];
  in.read(temp);
  op=temp[0];
  in.read(temp);
  htype=temp[0];
  in.read(temp);
  hlen=temp[0];
  in.read(temp);
  hops=temp[0];
  xid=new byte[4];
  in.read(xid);
  secs=new byte[2];
  in.read(secs);
  flags=new byte[2];
  in.read(flags);
  ciaddr=new byte[4];
  in.read(ciaddr);
  yiaddr=new byte[4];
  in.read(yiaddr);
  siaddr=new byte[4];
  in.read(siaddr);
  giaddr=new byte[4];
  in.read(giaddr);
  chaddr=new byte[16];
  in.read(chaddr);
  sname=new byte[64];
  in.read(sname);
  file=new byte[128];
  in.read(file);
  byte[] magiccookie=new byte[4];
  in.read(magiccookie);
  if (!Arrays.equals(magiccookie,Constants.MAGICCOOKIE))   throw new Error(""String_Node_Str"");
  while (in.available() > 0) {
    in.read(temp);
    byte code=temp[0];
    if (code == -1)     break;
    in.read(temp);
    byte len=temp[0];
    byte[] data=new byte[len];
    in.read(data);
    options.add(new Option(code,len,data));
  }
  padding=0;
  while (in.available() > 0) {
    in.read(temp);
    if (temp[0] != 0)     throw new IOException(""String_Node_Str"");
    padding++;
  }
}",0.9913419913419912
44375,"public void start(){
  System.out.println(""String_Node_Str"");
  while (true) {
    byte[] temp=new byte[MAX_LEN];
    DatagramPacket packet=new DatagramPacket(temp,MAX_LEN);
    try {
      socket.receive(packet);
      ReplyThread reply=new ReplyThread(packet);
      Thread replyThread=new Thread(reply);
      replyThread.run();
      System.out.println(""String_Node_Str"" + Calendar.getInstance() + ""String_Node_Str"");
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","public void start(){
  System.out.println(""String_Node_Str"");
  while (true) {
    byte[] temp=new byte[MAX_LEN];
    DatagramPacket packet=new DatagramPacket(temp,MAX_LEN);
    try {
      socket.receive(packet);
      ReplyThread reply=new ReplyThread(packet);
      Thread replyThread=new Thread(reply);
      replyThread.run();
      System.out.println(""String_Node_Str"" + Calendar.getInstance().getTime().toString() + ""String_Node_Str"");
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.9792284866468842
44376,"@Override public void run(){
  int len=requestPacket.getLength();
  byte[] requestdata=java.util.Arrays.copyOf(requestPacket.getData(),len);
  DHCPPacket request=new DHCPPacket();
  request.read(requestdata);
  DHCPPacket reply=new DHCPPacket();
  reply.setOp(Constants.BOOTREQUEST).setHtype((byte)1).setHlen((byte)6).setHops((byte)0).setXid(request.getXid()).setSecs(0).setBroadcastFlag(true).setCiaddr(0).setYiaddr(getNextAddress()).setSiaddr(requestPacket.getAddress().getAddress()).setGiaddr(0).setChaddr(request.getChaddr()).setSname(0).setFile(0);
  reply.addOption((byte)53,(byte)1,new byte[]{2}).addOption((byte)1,(byte)4,new byte[]{-1,-1,-1,0}).addOption((byte)3,(byte)4,new byte[]{(byte)192,(byte)168,(byte)1,(byte)1}).addOption((byte)6,(byte)4,new byte[]{(byte)192,(byte)168,(byte)1,(byte)1}).addOption((byte)58,(byte)4,new byte[]{(byte)0,(byte)1,(byte)0xfa,(byte)0x40}).addOption((byte)59,(byte)4,new byte[]{(byte)0,(byte)3,(byte)0x75,(byte)0xf0}).addOption((byte)51,(byte)4,new byte[]{(byte)0,(byte)3,(byte)0xf4,(byte)0x80}).addOption((byte)54,(byte)4,new byte[]{(byte)192,(byte)168,(byte)1,(byte)1});
  byte[] replydata=reply.array();
  DatagramPacket replyPacket=new DatagramPacket(replydata,replydata.length);
  DatagramSocket socket;
  try {
    socket=new DatagramSocket();
    replyPacket.setPort(68);
    replyPacket.setAddress(InetAddress.getByAddress(new byte[]{(byte)255,(byte)255,(byte)255,(byte)255}));
    socket.setBroadcast(true);
    socket.send(replyPacket);
  }
 catch (  SocketException e) {
    e.printStackTrace();
  }
catch (  UnknownHostException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","@Override public void run(){
  int len=requestPacket.getLength();
  byte[] requestdata=java.util.Arrays.copyOf(requestPacket.getData(),len);
  DHCPPacket request=new DHCPPacket();
  request.read(requestdata);
  if (request.getOption((byte)53)[0] == Constants.DHCPDISCOVER)   sendOffer(request);
}",0.2326053834433722
44377,"protected Dollars charge(int usage,Date start,Date end){
  Dollars result=calculateSummerWinterRate(usage,start,end);
  result=result.plus(result.times(TAX_RATE));
  return result.plus(new Dollars(usage * FUEL).times(1 + TAX_RATE)).round(2);
}","protected Dollars charge(int usage,Date start,Date end){
  Dollars result=calculateSummerWinterRate(usage,start,end);
  result.times(1 + TAX_RATE);
  result.plus(new Dollars(usage * FUEL).times(1 + TAX_RATE));
  result.round(2);
  return result;
}",0.8408163265306122
44378,"@Test public void ResidentialSite4000WholeYear() throws NoReadingsException {
  Zone zoneB=new Zone(""String_Node_Str"",0.07,0.06,new Date(1997,6,5),new Date(1997,8,31));
  ResidentialSite subject=new ResidentialSite(zoneB);
  subject.addReading(new Reading(1000,new Date(1997,1,1)));
  subject.addReading(new Reading(5000,new Date(1997,12,31)));
  assertEquals(new Dollars(713.5).getAmount(),subject.charge().getAmount());
}","@Test public void ResidentialSite4000WholeYear() throws NoReadingsException {
  Zone zoneB=new Zone(""String_Node_Str"",0.07,0.06,new Date(1997,6,5),new Date(1997,8,31));
  ResidentialSite subject=new ResidentialSite(zoneB);
  subject.addReading(new Reading(1000,new Date(1997,1,1)));
  subject.addReading(new Reading(5000,new Date(1997,12,31)));
  assertEquals(new Dollars(6793.5).getAmount(),subject.charge().getAmount());
}",0.9940968122786304
44379,"@Test public void ResidentialSite199Summer() throws NoReadingsException {
  Zone zoneA=new Zone(""String_Node_Str"",0.06,0.07,new Date(1997,5,15),new Date(1997,9,10));
  ResidentialSite subject=new ResidentialSite(zoneA);
  subject.addReading(new Reading(300,new Date(1997,6,15)));
  subject.addReading(new Reading(499,new Date(1997,31,8)));
  assertEquals(new Dollars(4.32).getAmount(),subject.charge().getAmount());
}","@Test public void ResidentialSite199Summer() throws NoReadingsException {
  Zone zoneA=new Zone(""String_Node_Str"",0.06,0.07,new Date(1997,5,15),new Date(1997,9,10));
  ResidentialSite subject=new ResidentialSite(zoneA);
  subject.addReading(new Reading(300,new Date(1997,6,15)));
  subject.addReading(new Reading(499,new Date(1997,31,8)));
  assertEquals(new Dollars(10.7).getAmount(),subject.charge().getAmount());
}",0.9904076738609112
44380,"@Override public void onAsyncFacilityQueryCompleted(List<Facility> result){
  MyLog.i(TAG,""String_Node_Str"" + result.size());
  final List<Overlay> overlays=mapView.getOverlays();
  overlays.clear();
  if (result.size() == 0) {
    MyLog.d(TAG,""String_Node_Str"");
    overlays.add(locationOverlay);
  }
 else {
    overlays.add(new FaciltiesOverlayBuilder(drawableCache).buildOverlay(result,this));
    overlays.add(locationOverlay);
    if (state.routeInformation != null) {
      overlays.add(routeOverlayManager.getOrRestoreOverlay(state.routeInformation));
    }
  }
  MyLog.d(TAG,""String_Node_Str"");
  mapView.invalidate();
  getSherlock().setProgressBarIndeterminateVisibility(false);
}","@Override public void onAsyncFacilityQueryCompleted(List<Facility> result){
  MyLog.i(TAG,""String_Node_Str"" + result.size());
  final List<Overlay> overlays=mapView.getOverlays();
  overlays.clear();
  if (result.size() > 0) {
    overlays.add(new FaciltiesOverlayBuilder(drawableCache).buildOverlay(result,this));
  }
  overlays.add(locationOverlay);
  if (state.routeInformation != null) {
    overlays.add(routeOverlayManager.getOrRestoreOverlay(state.routeInformation));
  }
  MyLog.d(TAG,""String_Node_Str"");
  mapView.invalidate();
  getSherlock().setProgressBarIndeterminateVisibility(false);
}",0.5386996904024768
44381,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_filter);
  receivedFilters=getIntent().getStringArrayExtra(INPUT_FILTER_ARRAY);
  currentDistance=getIntent().getIntExtra(INPUT_DISTANCE,DEFAULT_DISTANCE_IN_KILOMETERS);
  setListAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,FilterManager.availableFilters));
  getListView().setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
  checkInputFilters();
  distanceSeekBar=(SeekBar)findViewById(R.id.distance_seekbar);
  distanceTextView=(TextView)findViewById(R.id.distance_textview);
  distanceSeekBar.setMax(MAX_DISTANCE_IN_KILOMETERS);
  distanceSeekBar.setOnSeekBarChangeListener(listener);
  updateUI();
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_filter);
  receivedFilters=getIntent().getStringArrayExtra(INPUT_FILTER_ARRAY);
  currentDistance=getIntent().getIntExtra(INPUT_DISTANCE,DEFAULT_DISTANCE_IN_KILOMETERS);
  setListAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,FilterManager.availableFilters));
  getListView().setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
  checkInputFilters();
  distanceSeekBar=(SeekBar)findViewById(R.id.distance_seekbar);
  distanceTextView=(TextView)findViewById(R.id.distance_textview);
  distanceSeekBar.setMax(MAX_DISTANCE_IN_KILOMETERS - 1);
  distanceSeekBar.setOnSeekBarChangeListener(listener);
  updateUI();
}",0.997596153846154
44382,"public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
  currentDistance=seekBar.getProgress();
  updateUI();
}","public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
  currentDistance=seekBar.getProgress() + 1;
  updateUI();
}",0.9852941176470588
44383,"private void updateUI(){
  distanceSeekBar.setProgress(currentDistance);
  distanceTextView.setText(currentDistance + ""String_Node_Str"");
}","private void updateUI(){
  distanceSeekBar.setProgress(currentDistance - 1);
  distanceTextView.setText(currentDistance + ""String_Node_Str"");
}",0.9858156028368794
44384,"private void openFilterOptions(){
  final Intent intent=new Intent(this,ActivityFilter.class);
  intent.putExtra(ActivityFilter.INPUT_FILTER_ARRAY,filters);
  intent.putExtra(ActivityFilter.INPUT_DISTANCE,currentDistanceInKilometers);
  startActivityForResult(intent,ActivityFilter.FILTER_REQUEST_CODE);
}","private void openFilterOptions(){
  final Intent intent=new Intent(this,ActivityFilter.class);
  intent.putExtra(ActivityFilter.INPUT_FILTER_ARRAY,state.filters);
  intent.putExtra(ActivityFilter.INPUT_DISTANCE,currentDistanceInKilometers);
  startActivityForResult(intent,ActivityFilter.FILTER_REQUEST_CODE);
}",0.9902597402597404
44385,"private void setFilters(Intent intent){
  currentDistanceInKilometers=intent.getIntExtra(ActivityFilter.RESULT_DISTANCE,ActivityFilter.DEFAULT_DISTANCE_IN_KILOMETERS);
  filters=intent.getStringArrayExtra(ActivityFilter.RESULT_FILTER_ARRAY);
  ;
  Log.d(TAG,""String_Node_Str"" + currentDistanceInKilometers + ""String_Node_Str""+ Arrays.toString(filters));
}","private void setFilters(Intent intent){
  currentDistanceInKilometers=intent.getIntExtra(ActivityFilter.RESULT_DISTANCE,ActivityFilter.DEFAULT_DISTANCE_IN_KILOMETERS);
  state.filters=intent.getStringArrayExtra(ActivityFilter.RESULT_FILTER_ARRAY);
  Log.d(TAG,""String_Node_Str"" + currentDistanceInKilometers + ""String_Node_Str""+ Arrays.toString(state.filters));
}",0.977715877437326
44386,"/** 
 * Copies your database from your local assets-folder to the recently created empty  database in the default application directory. From there it can be managed as always. The whole operation is done by transferring the bytestream.
 */
private void copyDB() throws IOException {
  Log.d(TAG,""String_Node_Str"");
  final AssetManager assetManager=context.getAssets();
  String outFileName=DB_PATH + DatabaseContract.DATABASE_NAME;
  OutputStream myOutput=new FileOutputStream(outFileName);
  byte[] buffer=new byte[1024];
  int length;
  String[] fileList=assetManager.list(""String_Node_Str"");
  Arrays.sort(fileList);
  for (int i=0; i < MAX_CHUNK_COUNT; i++) {
    String fileName=String.format(DatabaseContract.DATABASE_NAME + ""String_Node_Str"",i);
    InputStream myInput=assetManager.open(fileName);
    while ((length=myInput.read(buffer)) > 0) {
      myOutput.write(buffer,0,length);
    }
    myInput.close();
  }
  myOutput.flush();
  myOutput.close();
}","/** 
 * Copies your database from your local assets-folder to the recently created empty  database in the default application directory. From there it can be managed as always. The whole operation is done by transferring the bytestream.
 */
private void copyDB() throws IOException {
  Log.d(TAG,""String_Node_Str"");
  final AssetManager assetManager=context.getAssets();
  String outFileName=DB_PATH + DatabaseContract.DATABASE_NAME;
  OutputStream myOutput=new FileOutputStream(outFileName);
  byte[] buffer=new byte[1024];
  int length;
  String[] fileList=assetManager.list(""String_Node_Str"");
  Arrays.sort(fileList);
  for (int i=0; i < MAX_CHUNK_COUNT; i++) {
    String fileName=String.format(DatabaseContract.DATABASE_NAME + ""String_Node_Str"",i);
    if (Arrays.binarySearch(fileList,fileName) < 0)     break;
    InputStream myInput=assetManager.open(fileName);
    while ((length=myInput.read(buffer)) > 0) {
      myOutput.write(buffer,0,length);
    }
    myInput.close();
  }
  myOutput.flush();
  myOutput.close();
}",0.9684526790185278
44387,"private boolean updateMessageStatus(Context context,Uri messageUri,byte[] pdu){
  boolean isStatusReport=false;
  Cursor cursor=SqliteWrapper.query(context,context.getContentResolver(),messageUri,ID_PROJECTION,null,null,null);
  try {
    if (cursor.moveToFirst()) {
      int messageId=cursor.getInt(0);
      Uri updateUri=ContentUris.withAppendedId(STATUS_URI,messageId);
      SmsMessage message=SmsMessage.createFromPdu(pdu);
      int status=message.getStatus();
      isStatusReport=message.isStatusReportMessage();
      ContentValues contentValues=new ContentValues(1);
      if (Log.isLoggable(LogTag.TAG,Log.DEBUG)) {
        log(""String_Node_Str"" + messageUri + ""String_Node_Str""+ status+ ""String_Node_Str""+ isStatusReport);
      }
      contentValues.put(Sms.STATUS,status);
      SqliteWrapper.update(context,context.getContentResolver(),updateUri,contentValues,null,null);
    }
 else {
      error(""String_Node_Str"" + messageUri);
    }
  }
  finally {
    cursor.close();
  }
  return isStatusReport;
}","private SmsMessage updateMessageStatus(Context context,Uri messageUri,byte[] pdu){
  Cursor cursor=SqliteWrapper.query(context,context.getContentResolver(),messageUri,ID_PROJECTION,null,null,null);
  SmsMessage message=SmsMessage.createFromPdu(pdu);
  try {
    if (cursor.moveToFirst()) {
      int messageId=cursor.getInt(0);
      Uri updateUri=ContentUris.withAppendedId(STATUS_URI,messageId);
      int status=message.getStatus();
      boolean isStatusReport=message.isStatusReportMessage();
      ContentValues contentValues=new ContentValues(1);
      if (Log.isLoggable(LogTag.TAG,Log.DEBUG)) {
        log(""String_Node_Str"" + messageUri + ""String_Node_Str""+ status+ ""String_Node_Str""+ isStatusReport);
      }
      contentValues.put(Sms.STATUS,status);
      SqliteWrapper.update(context,context.getContentResolver(),updateUri,contentValues,null,null);
    }
 else {
      error(""String_Node_Str"" + messageUri);
    }
  }
  finally {
    cursor.close();
  }
  return message;
}",0.8715139442231076
44388,"@Override public void onReceive(Context context,Intent intent){
  mContext=context;
  if (MESSAGE_STATUS_RECEIVED_ACTION.equals(intent.getAction())) {
    Uri messageUri=intent.getData();
    byte[] pdu=(byte[])intent.getExtra(""String_Node_Str"");
    boolean isStatusMessage=updateMessageStatus(context,messageUri,pdu);
    MessagingNotification.nonBlockingUpdateNewMessageIndicator(context,true,isStatusMessage);
  }
}","@Override public void onReceive(Context context,Intent intent){
  mContext=context;
  if (MESSAGE_STATUS_RECEIVED_ACTION.equals(intent.getAction())) {
    Uri messageUri=intent.getData();
    byte[] pdu=(byte[])intent.getExtra(""String_Node_Str"");
    SmsMessage message=updateMessageStatus(context,messageUri,pdu);
    if (message.getStatus() < Sms.STATUS_PENDING)     MessagingNotification.nonBlockingUpdateNewMessageIndicator(context,true,message.isStatusReportMessage());
  }
}",0.8609566184649611
44389,"private boolean updateMessageStatus(Context context,Uri messageUri,byte[] pdu){
  boolean isStatusReport=false;
  Cursor cursor=SqliteWrapper.query(context,context.getContentResolver(),messageUri,ID_PROJECTION,null,null,null);
  try {
    if (cursor.moveToFirst()) {
      int messageId=cursor.getInt(0);
      Uri updateUri=ContentUris.withAppendedId(STATUS_URI,messageId);
      SmsMessage message=SmsMessage.createFromPdu(pdu);
      int status=message.getStatus();
      isStatusReport=message.isStatusReportMessage();
      ContentValues contentValues=new ContentValues(1);
      if (Log.isLoggable(LogTag.TAG,Log.DEBUG)) {
        log(""String_Node_Str"" + messageUri + ""String_Node_Str""+ status+ ""String_Node_Str""+ isStatusReport);
      }
      contentValues.put(Sms.STATUS,status);
      SqliteWrapper.update(context,context.getContentResolver(),updateUri,contentValues,null,null);
    }
 else {
      error(""String_Node_Str"" + messageUri);
    }
  }
  finally {
    cursor.close();
  }
  return isStatusReport;
}","private SmsMessage updateMessageStatus(Context context,Uri messageUri,byte[] pdu){
  Cursor cursor=SqliteWrapper.query(context,context.getContentResolver(),messageUri,ID_PROJECTION,null,null,null);
  SmsMessage message=SmsMessage.createFromPdu(pdu);
  try {
    if (cursor.moveToFirst()) {
      int messageId=cursor.getInt(0);
      Uri updateUri=ContentUris.withAppendedId(STATUS_URI,messageId);
      int status=message.getStatus();
      boolean isStatusReport=message.isStatusReportMessage();
      ContentValues contentValues=new ContentValues(1);
      if (Log.isLoggable(LogTag.TAG,Log.DEBUG)) {
        log(""String_Node_Str"" + messageUri + ""String_Node_Str""+ status+ ""String_Node_Str""+ isStatusReport);
      }
      contentValues.put(Sms.STATUS,status);
      SqliteWrapper.update(context,context.getContentResolver(),updateUri,contentValues,null,null);
    }
 else {
      error(""String_Node_Str"" + messageUri);
    }
  }
  finally {
    cursor.close();
  }
  return message;
}",0.8715139442231076
44390,"@Override public void onReceive(Context context,Intent intent){
  mContext=context;
  if (MESSAGE_STATUS_RECEIVED_ACTION.equals(intent.getAction())) {
    Uri messageUri=intent.getData();
    byte[] pdu=(byte[])intent.getExtra(""String_Node_Str"");
    boolean isStatusMessage=updateMessageStatus(context,messageUri,pdu);
    MessagingNotification.nonBlockingUpdateNewMessageIndicator(context,true,isStatusMessage);
  }
}","@Override public void onReceive(Context context,Intent intent){
  mContext=context;
  if (MESSAGE_STATUS_RECEIVED_ACTION.equals(intent.getAction())) {
    Uri messageUri=intent.getData();
    byte[] pdu=(byte[])intent.getExtra(""String_Node_Str"");
    SmsMessage message=updateMessageStatus(context,messageUri,pdu);
    if (message.getStatus() < Sms.STATUS_PENDING)     MessagingNotification.nonBlockingUpdateNewMessageIndicator(context,true,message.isStatusReportMessage());
  }
}",0.8609566184649611
44391,"@Override protected void onListItemClick(ListView l,View v,int position,long id){
  if (LOCAL_LOGV) {
    Log.v(TAG,""String_Node_Str"" + position + ""String_Node_Str""+ id);
  }
  if (position == 0) {
    createNewMessage();
  }
 else   if (v instanceof ConversationListItem) {
    ConversationListItem headerView=(ConversationListItem)v;
    ConversationListItemData ch=headerView.getConversationHeader();
    openThread(ch.getThreadId());
  }
}","@Override protected void onListItemClick(ListView l,View v,int position,long id){
  if (LOCAL_LOGV) {
    Log.v(TAG,""String_Node_Str"" + position + ""String_Node_Str""+ id);
  }
  if (position == 0) {
    createNewMessage();
  }
 else {
    Cursor cursor=(Cursor)getListView().getItemAtPosition(position);
    Conversation conv=Conversation.from(this,cursor);
    long tid=conv.getThreadId();
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"" + position + ""String_Node_Str""+ v+ ""String_Node_Str""+ tid);
    }
    openThread(tid);
  }
}",0.5321100917431193
44392,"@Override protected void onListItemClick(ListView l,View v,int position,long id){
  if (LOCAL_LOGV) {
    Log.v(TAG,""String_Node_Str"" + position + ""String_Node_Str""+ id);
  }
  if (position == 0) {
    createNewMessage();
  }
 else {
    Cursor cursor=(Cursor)getListView().getItemAtPosition(position);
    Conversation conv=Conversation.from(this,cursor);
    long tid=conv.getThreadId();
    if (LogTag.VERBOSE) {
      Log.d(TAG,""String_Node_Str"" + position + ""String_Node_Str""+ v+ ""String_Node_Str""+ tid);
    }
    openThread(tid);
  }
}","@Override protected void onListItemClick(ListView l,View v,int position,long id){
  if (LOCAL_LOGV) {
    Log.v(TAG,""String_Node_Str"" + position + ""String_Node_Str""+ id);
  }
  if (position == 0) {
    createNewMessage();
  }
 else {
    Cursor cursor=(Cursor)getListView().getItemAtPosition(position);
    Conversation conv=Conversation.from(this,cursor);
    long tid=conv.getThreadId();
    openThread(tid);
  }
}",0.8684759916492694
44393,"@Override protected void onListItemClick(ListView l,View v,int position,long id){
  if (LOCAL_LOGV) {
    Log.v(TAG,""String_Node_Str"" + position + ""String_Node_Str""+ id);
  }
  if (position == 0) {
    createNewMessage();
  }
 else   if (v instanceof ConversationListItem) {
    ConversationListItem headerView=(ConversationListItem)v;
    ConversationListItemData ch=headerView.getConversationHeader();
    openThread(ch.getThreadId());
  }
}","@Override protected void onListItemClick(ListView l,View v,int position,long id){
  if (LOCAL_LOGV) {
    Log.v(TAG,""String_Node_Str"" + position + ""String_Node_Str""+ id);
  }
  if (position == 0) {
    createNewMessage();
  }
 else {
    Cursor cursor=(Cursor)getListView().getItemAtPosition(position);
    Conversation conv=Conversation.from(this,cursor);
    long tid=conv.getThreadId();
    openThread(tid);
  }
}",0.6053550640279395
44394,"@Override protected void onListItemClick(ListView l,View v,int position,long id){
  if (position == 0) {
    createNewMessage();
  }
 else   if (v instanceof ConversationListItem) {
    ConversationListItem headerView=(ConversationListItem)v;
    ConversationListItemData ch=headerView.getConversationHeader();
    long threadId=ch.getThreadId();
    if (LogTag.VERBOSE) {
      Log.d(TAG,""String_Node_Str"" + v + ""String_Node_Str""+ position+ ""String_Node_Str""+ id+ ""String_Node_Str""+ threadId);
    }
    openThread(threadId);
  }
}","@Override protected void onListItemClick(ListView l,View v,int position,long id){
  if (position == 0) {
    createNewMessage();
  }
 else {
    Cursor cursor=(Cursor)getListView().getItemAtPosition(position);
    Conversation conv=Conversation.from(this,cursor);
    long tid=conv.getThreadId();
    if (LogTag.VERBOSE) {
      Log.d(TAG,""String_Node_Str"" + position + ""String_Node_Str""+ v+ ""String_Node_Str""+ tid);
    }
    openThread(tid);
  }
}",0.6095820591233435
44395,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  mSentMessage=false;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId,false);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri,false);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  long convThreadId=0;
  if (conversation != null) {
    conversation.blockMarkAsRead(true);
    convThreadId=conversation.getThreadId();
  }
  if (sameThread || (convThreadId != 0 && convThreadId == mConversation.getThreadId())) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  mSentMessage=false;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId,false);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri,false);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  if (conversation != null) {
    conversation.blockMarkAsRead(true);
    sameThread=(conversation.getThreadId() == mConversation.getThreadId() && conversation.equals(mConversation));
  }
  if (sameThread) {
    log(""String_Node_Str"");
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}",0.830952380952381
44396,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  mSentMessage=false;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId,false);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri,false);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  long convThreadId=0;
  if (conversation != null) {
    conversation.blockMarkAsRead(true);
    convThreadId=conversation.getThreadId();
  }
  if (sameThread || (convThreadId != 0 && convThreadId == mConversation.getThreadId())) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  mSentMessage=false;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId,false);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri,false);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  if (conversation != null) {
    conversation.blockMarkAsRead(true);
    sameThread=(conversation.getThreadId() == mConversation.getThreadId() && conversation.equals(mConversation));
  }
  if (sameThread) {
    log(""String_Node_Str"");
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}",0.830952380952381
44397,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  mSentMessage=false;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId,false);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri,false);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  long convThreadId=0;
  if (conversation != null) {
    conversation.blockMarkAsRead(true);
    convThreadId=conversation.getThreadId();
  }
  if (sameThread || (convThreadId != 0 && convThreadId == mConversation.getThreadId())) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  mSentMessage=false;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId,false);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri,false);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  if (conversation != null) {
    conversation.blockMarkAsRead(true);
    sameThread=(conversation.getThreadId() == mConversation.getThreadId() && conversation.equals(mConversation));
  }
  if (sameThread) {
    log(""String_Node_Str"");
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}",0.830952380952381
44398,"/** 
 * Marks all messages in this conversation as read and updates relevant notifications.  This method returns immediately; work is dispatched to a background thread.
 */
public void markAsRead(){
  final Uri threadUri=getUri();
  new Thread(new Runnable(){
    public void run(){
synchronized (mMarkAsBlockedSyncer) {
        if (mMarkAsReadBlocked) {
          try {
            mMarkAsBlockedSyncer.wait();
          }
 catch (          InterruptedException e) {
          }
        }
        if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
          LogTag.debug(""String_Node_Str"" + threadUri);
        }
        if (threadUri != null) {
          buildReadContentValues();
          mHasUnreadMessages=true;
          Cursor c=mContext.getContentResolver().query(threadUri,READ_PROJECTION,""String_Node_Str"",null,null);
          if (c != null) {
            try {
              mHasUnreadMessages=c.getCount() > 0;
            }
  finally {
              c.close();
            }
          }
          if (mHasUnreadMessages) {
            mContext.getContentResolver().update(threadUri,mReadContentValues,""String_Node_Str"",null);
          }
        }
      }
      MessagingNotification.blockingUpdateAllNotifications(mContext);
    }
  }
).start();
}","/** 
 * Marks all messages in this conversation as read and updates relevant notifications.  This method returns immediately; work is dispatched to a background thread.
 */
public void markAsRead(){
  final Uri threadUri=getUri();
  new Thread(new Runnable(){
    public void run(){
synchronized (mMarkAsBlockedSyncer) {
        if (mMarkAsReadBlocked) {
          try {
            mMarkAsBlockedSyncer.wait();
          }
 catch (          InterruptedException e) {
          }
        }
        if (threadUri != null) {
          buildReadContentValues();
          boolean needUpdate=true;
          Cursor c=mContext.getContentResolver().query(threadUri,UNREAD_PROJECTION,UNREAD_SELECTION,null,null);
          if (c != null) {
            try {
              needUpdate=c.getCount() > 0;
            }
  finally {
              c.close();
            }
          }
          if (needUpdate) {
            LogTag.debug(""String_Node_Str"" + threadUri);
            mContext.getContentResolver().update(threadUri,mReadContentValues,UNREAD_SELECTION,null);
          }
          setHasUnreadMessages(false);
        }
      }
      MessagingNotification.blockingUpdateAllNotifications(mContext);
    }
  }
).start();
}",0.7169963665724667
44399,"/** 
 * Returns true if there are any unread messages in the conversation.
 */
public synchronized boolean hasUnreadMessages(){
  return mHasUnreadMessages;
}","/** 
 * Returns true if there are any unread messages in the conversation.
 */
public boolean hasUnreadMessages(){
synchronized (this) {
    return mHasUnreadMessages;
  }
}",0.8761329305135952
44400,"/** 
 * Fill the specified conversation with the values from the specified cursor, possibly setting recipients to empty if   {@value allowQuery}is false and the recipient IDs are not in cache.  The cursor should be one made via   {@link #startQueryForAll}.
 */
private static void fillFromCursor(Context context,Conversation conv,Cursor c,boolean allowQuery){
synchronized (conv) {
    conv.mThreadId=c.getLong(ID);
    conv.mDate=c.getLong(DATE);
    conv.mMessageCount=c.getInt(MESSAGE_COUNT);
    String snippet=MessageUtils.extractEncStrFromCursor(c,SNIPPET,SNIPPET_CS);
    if (TextUtils.isEmpty(snippet)) {
      snippet=context.getString(R.string.no_subject_view);
    }
    conv.mSnippet=snippet;
    conv.mHasUnreadMessages=(c.getInt(READ) == 0);
    conv.mHasError=(c.getInt(ERROR) != 0);
    conv.mHasAttachment=(c.getInt(HAS_ATTACHMENT) != 0);
  }
  String recipientIds=c.getString(RECIPIENT_IDS);
  ContactList recipients=ContactList.getByIds(recipientIds,allowQuery);
synchronized (conv) {
    conv.mRecipients=recipients;
  }
  if (Log.isLoggable(LogTag.THREAD_CACHE,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"" + conv + ""String_Node_Str""+ recipientIds);
  }
}","/** 
 * Fill the specified conversation with the values from the specified cursor, possibly setting recipients to empty if   {@value allowQuery}is false and the recipient IDs are not in cache.  The cursor should be one made via   {@link #startQueryForAll}.
 */
private static void fillFromCursor(Context context,Conversation conv,Cursor c,boolean allowQuery){
synchronized (conv) {
    conv.mThreadId=c.getLong(ID);
    conv.mDate=c.getLong(DATE);
    conv.mMessageCount=c.getInt(MESSAGE_COUNT);
    String snippet=MessageUtils.extractEncStrFromCursor(c,SNIPPET,SNIPPET_CS);
    if (TextUtils.isEmpty(snippet)) {
      snippet=context.getString(R.string.no_subject_view);
    }
    conv.mSnippet=snippet;
    conv.setHasUnreadMessages(c.getInt(READ) == 0);
    conv.mHasError=(c.getInt(ERROR) != 0);
    conv.mHasAttachment=(c.getInt(HAS_ATTACHMENT) != 0);
  }
  String recipientIds=c.getString(RECIPIENT_IDS);
  ContactList recipients=ContactList.getByIds(recipientIds,allowQuery);
synchronized (conv) {
    conv.mRecipients=recipients;
  }
  if (Log.isLoggable(LogTag.THREAD_CACHE,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"" + conv + ""String_Node_Str""+ recipientIds);
  }
}",0.9978840457046128
44401,"private static final MmsSmsNotificationInfo getMmsNewMessageNotificationInfo(Context context,Set<Long> threads){
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=SqliteWrapper.query(context,resolver,Mms.CONTENT_URI,MMS_STATUS_PROJECTION,NEW_INCOMING_MM_CONSTRAINT,null,Mms.DATE + ""String_Node_Str"");
  if (cursor == null) {
    return null;
  }
  try {
    if (!cursor.moveToFirst()) {
      return null;
    }
    long msgId=cursor.getLong(COLUMN_MMS_ID);
    Uri msgUri=Mms.CONTENT_URI.buildUpon().appendPath(Long.toString(msgId)).build();
    String address=AddressUtils.getFrom(context,msgUri);
    String subject=getMmsSubject(cursor.getString(COLUMN_SUBJECT),cursor.getInt(COLUMN_SUBJECT_CS));
    long threadId=cursor.getLong(COLUMN_THREAD_ID);
    long timeMillis=cursor.getLong(COLUMN_DATE) * 1000;
    MmsSmsNotificationInfo info=getNewMessageNotificationInfo(address,subject,context,R.drawable.stat_notify_mms,null,threadId,timeMillis,cursor.getCount());
    threads.add(threadId);
    while (cursor.moveToNext()) {
      threads.add(cursor.getLong(COLUMN_THREAD_ID));
    }
    return info;
  }
  finally {
    cursor.close();
  }
}","private static final MmsSmsNotificationInfo getMmsNewMessageNotificationInfo(Context context,Set<Long> threads){
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=SqliteWrapper.query(context,resolver,Mms.CONTENT_URI,MMS_STATUS_PROJECTION,NEW_INCOMING_MM_CONSTRAINT,null,Mms.DATE + ""String_Node_Str"");
  if (cursor == null) {
    return null;
  }
  try {
    if (!cursor.moveToFirst()) {
      return null;
    }
    long msgId=cursor.getLong(COLUMN_MMS_ID);
    Uri msgUri=Mms.CONTENT_URI.buildUpon().appendPath(Long.toString(msgId)).build();
    String address=AddressUtils.getFrom(context,msgUri);
    String subject=getMmsSubject(cursor.getString(COLUMN_SUBJECT),cursor.getInt(COLUMN_SUBJECT_CS));
    long threadId=cursor.getLong(COLUMN_THREAD_ID);
    long timeMillis=cursor.getLong(COLUMN_DATE) * 1000;
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      Log.d(TAG,""String_Node_Str"" + cursor.getCount() + ""String_Node_Str""+ address+ ""String_Node_Str""+ threadId);
    }
    MmsSmsNotificationInfo info=getNewMessageNotificationInfo(address,subject,context,R.drawable.stat_notify_mms,null,threadId,timeMillis,cursor.getCount());
    threads.add(threadId);
    while (cursor.moveToNext()) {
      threads.add(cursor.getLong(COLUMN_THREAD_ID));
    }
    return info;
  }
  finally {
    cursor.close();
  }
}",0.9321628092577812
44402,"private static final MmsSmsNotificationInfo getSmsNewMessageNotificationInfo(Context context,Set<Long> threads){
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=SqliteWrapper.query(context,resolver,Sms.CONTENT_URI,SMS_STATUS_PROJECTION,NEW_INCOMING_SM_CONSTRAINT,null,Sms.DATE + ""String_Node_Str"");
  if (cursor == null) {
    return null;
  }
  try {
    if (!cursor.moveToFirst()) {
      return null;
    }
    String address=cursor.getString(COLUMN_SMS_ADDRESS);
    String body=cursor.getString(COLUMN_SMS_BODY);
    long threadId=cursor.getLong(COLUMN_THREAD_ID);
    long timeMillis=cursor.getLong(COLUMN_DATE);
    MmsSmsNotificationInfo info=getNewMessageNotificationInfo(address,body,context,R.drawable.stat_notify_sms,null,threadId,timeMillis,cursor.getCount());
    threads.add(threadId);
    while (cursor.moveToNext()) {
      threads.add(cursor.getLong(COLUMN_THREAD_ID));
    }
    return info;
  }
  finally {
    cursor.close();
  }
}","private static final MmsSmsNotificationInfo getSmsNewMessageNotificationInfo(Context context,Set<Long> threads){
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=SqliteWrapper.query(context,resolver,Sms.CONTENT_URI,SMS_STATUS_PROJECTION,NEW_INCOMING_SM_CONSTRAINT,null,Sms.DATE + ""String_Node_Str"");
  if (cursor == null) {
    return null;
  }
  try {
    if (!cursor.moveToFirst()) {
      return null;
    }
    String address=cursor.getString(COLUMN_SMS_ADDRESS);
    String body=cursor.getString(COLUMN_SMS_BODY);
    long threadId=cursor.getLong(COLUMN_THREAD_ID);
    long timeMillis=cursor.getLong(COLUMN_DATE);
{
      Log.d(TAG,""String_Node_Str"" + cursor.getCount() + ""String_Node_Str""+ address+ ""String_Node_Str""+ threadId);
    }
    MmsSmsNotificationInfo info=getNewMessageNotificationInfo(address,body,context,R.drawable.stat_notify_sms,null,threadId,timeMillis,cursor.getCount());
    threads.add(threadId);
    while (cursor.moveToNext()) {
      threads.add(cursor.getLong(COLUMN_THREAD_ID));
    }
    return info;
  }
  finally {
    cursor.close();
  }
}",0.941233140655106
44403,"/** 
 * Checks to see if there are any ""unseen"" messages or delivery reports.  Shows the most recent notification if there is one.
 * @param context the context to use
 * @param isNew if notify a new message comes, it should be true, otherwise, false.
 */
public static void blockingUpdateNewMessageIndicator(Context context,boolean isNew,boolean isStatusMessage){
  SortedSet<MmsSmsNotificationInfo> accumulator=new TreeSet<MmsSmsNotificationInfo>(INFO_COMPARATOR);
  MmsSmsDeliveryInfo delivery=null;
  Set<Long> threads=new HashSet<Long>(4);
  int count=0;
  count+=accumulateNotificationInfo(accumulator,getMmsNewMessageNotificationInfo(context,threads));
  count+=accumulateNotificationInfo(accumulator,getSmsNewMessageNotificationInfo(context,threads));
  cancelNotification(context,NOTIFICATION_ID);
  if (!accumulator.isEmpty()) {
    accumulator.first().deliver(context,isNew,count,threads.size());
  }
  delivery=getSmsNewDeliveryInfo(context);
  if (delivery != null) {
    delivery.deliver(context,isStatusMessage);
  }
}","/** 
 * Checks to see if there are any ""unseen"" messages or delivery reports.  Shows the most recent notification if there is one.
 * @param context the context to use
 * @param isNew if notify a new message comes, it should be true, otherwise, false.
 */
public static void blockingUpdateNewMessageIndicator(Context context,boolean isNew,boolean isStatusMessage){
  SortedSet<MmsSmsNotificationInfo> accumulator=new TreeSet<MmsSmsNotificationInfo>(INFO_COMPARATOR);
  MmsSmsDeliveryInfo delivery=null;
  Set<Long> threads=new HashSet<Long>(4);
  int count=0;
  count+=accumulateNotificationInfo(accumulator,getMmsNewMessageNotificationInfo(context,threads));
  count+=accumulateNotificationInfo(accumulator,getSmsNewMessageNotificationInfo(context,threads));
  cancelNotification(context,NOTIFICATION_ID);
  if (!accumulator.isEmpty()) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ isNew);
    }
    accumulator.first().deliver(context,isNew,count,threads.size());
  }
  delivery=getSmsNewDeliveryInfo(context);
  if (delivery != null) {
    delivery.deliver(context,isStatusMessage);
  }
}",0.9420884632922936
44404,"private CharSequence formatMessage(MessageItem msgItem,String contact,String body,String subject,String timestamp,Pattern highlight,String contentType){
  CharSequence template=mContext.getResources().getText(R.string.name_colon);
  SpannableStringBuilder buf=new SpannableStringBuilder(TextUtils.replace(template,new String[]{""String_Node_Str""},new CharSequence[]{contact}));
  boolean hasSubject=!TextUtils.isEmpty(subject);
  if (hasSubject) {
    buf.append(mContext.getResources().getString(R.string.inline_subject,subject));
  }
  if (!TextUtils.isEmpty(body)) {
    if (contentType != null && ContentType.TEXT_HTML.equals(contentType)) {
      buf.append(""String_Node_Str"");
      buf.append(Html.fromHtml(body));
    }
 else {
      if (hasSubject) {
        buf.append(""String_Node_Str"");
      }
      SmileyParser parser=SmileyParser.getInstance();
      buf.append(parser.addSmileySpans(body));
    }
  }
  if (msgItem.isSending()) {
    timestamp=mContext.getResources().getString(R.string.sending_message);
  }
  if (!TextUtils.isEmpty(timestamp)) {
    buf.append(""String_Node_Str"");
    int startOffset=buf.length();
    startOffset=buf.length();
    buf.append(timestamp);
    buf.setSpan(mTextSmallSpan,startOffset,buf.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    buf.setSpan(mSpan,startOffset + 1,buf.length(),0);
    buf.setSpan(mColorSpan,startOffset,buf.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
  if (highlight != null) {
    Matcher m=highlight.matcher(buf.toString());
    while (m.find()) {
      buf.setSpan(new StyleSpan(Typeface.BOLD),m.start(),m.end(),0);
    }
  }
  buf.setSpan(mLeadingMarginSpan,0,buf.length(),0);
  return buf;
}","private CharSequence formatMessage(MessageItem msgItem,String contact,String body,String subject,String timestamp,Pattern highlight,String contentType){
  CharSequence template=mContext.getResources().getText(R.string.name_colon);
  SpannableStringBuilder buf=new SpannableStringBuilder(TextUtils.replace(template,new String[]{""String_Node_Str""},new CharSequence[]{contact}));
  boolean hasSubject=!TextUtils.isEmpty(subject);
  if (hasSubject) {
    buf.append(mContext.getResources().getString(R.string.inline_subject,subject));
  }
  if (!TextUtils.isEmpty(body)) {
    if (contentType != null && ContentType.TEXT_HTML.equals(contentType)) {
      buf.append(""String_Node_Str"");
      buf.append(Html.fromHtml(body));
    }
 else {
      if (hasSubject) {
        buf.append(""String_Node_Str"");
      }
      SmileyParser parser=SmileyParser.getInstance();
      buf.append(parser.addSmileySpans(body));
    }
  }
  if (msgItem.isSending()) {
    timestamp=mContext.getResources().getString(R.string.sending_message);
  }
  buf.append(""String_Node_Str"");
  int startOffset=buf.length();
  startOffset=buf.length();
  buf.append(TextUtils.isEmpty(timestamp) ? ""String_Node_Str"" : timestamp);
  buf.setSpan(mTextSmallSpan,startOffset,buf.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  buf.setSpan(mSpan,startOffset + 1,buf.length(),0);
  buf.setSpan(mColorSpan,startOffset,buf.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  if (highlight != null) {
    Matcher m=highlight.matcher(buf.toString());
    while (m.find()) {
      buf.setSpan(new StyleSpan(Typeface.BOLD),m.start(),m.end(),0);
    }
  }
  buf.setSpan(mLeadingMarginSpan,0,buf.length(),0);
  return buf;
}",0.9252839210998208
44405,"private void drawRightStatusIndicator(MessageItem msgItem){
  if (msgItem.mLocked) {
    mLockedIndicator.setImageResource(R.drawable.ic_lock_message_sms);
    mLockedIndicator.setVisibility(View.VISIBLE);
  }
 else {
    mLockedIndicator.setVisibility(View.GONE);
  }
  if (msgItem.isOutgoingMessage() && msgItem.isFailedMessage()) {
    mDeliveredIndicator.setImageResource(R.drawable.ic_sms_mms_not_delivered);
    setErrorIndicatorClickListener(msgItem);
    mDeliveredIndicator.setVisibility(View.VISIBLE);
  }
 else   if (msgItem.mDeliveryStatus == MessageItem.DeliveryStatus.FAILED) {
    mDeliveredIndicator.setImageResource(R.drawable.ic_sms_mms_not_delivered);
    mDeliveredIndicator.setVisibility(View.VISIBLE);
  }
 else   if (msgItem.mDeliveryStatus == MessageItem.DeliveryStatus.RECEIVED) {
    mDeliveredIndicator.setImageResource(R.drawable.ic_sms_mms_delivered);
    mDeliveredIndicator.setVisibility(View.VISIBLE);
  }
 else {
    mDeliveredIndicator.setVisibility(View.GONE);
  }
  if (msgItem.mDeliveryStatus == MessageItem.DeliveryStatus.INFO || msgItem.mReadReport) {
    mDetailsIndicator.setImageResource(R.drawable.ic_sms_mms_details);
    mDetailsIndicator.setVisibility(View.VISIBLE);
  }
 else {
    mDetailsIndicator.setVisibility(View.GONE);
  }
}","private void drawRightStatusIndicator(MessageItem msgItem){
  if (msgItem.mLocked) {
    mLockedIndicator.setImageResource(R.drawable.ic_lock_message_sms);
    mLockedIndicator.setVisibility(View.VISIBLE);
  }
 else {
    mLockedIndicator.setVisibility(View.GONE);
  }
  if (msgItem.isOutgoingMessage() && msgItem.isFailedMessage()) {
    mDeliveredIndicator.setImageResource(R.drawable.ic_list_alert_sms_failed);
    setErrorIndicatorClickListener(msgItem);
    mDeliveredIndicator.setVisibility(View.VISIBLE);
  }
 else   if (msgItem.mDeliveryStatus == MessageItem.DeliveryStatus.FAILED) {
    mDeliveredIndicator.setImageResource(R.drawable.ic_list_alert_sms_failed);
    mDeliveredIndicator.setVisibility(View.VISIBLE);
  }
 else   if (msgItem.mDeliveryStatus == MessageItem.DeliveryStatus.RECEIVED) {
    mDeliveredIndicator.setImageResource(R.drawable.ic_sms_mms_delivered);
    mDeliveredIndicator.setVisibility(View.VISIBLE);
  }
 else {
    mDeliveredIndicator.setVisibility(View.GONE);
  }
  if (msgItem.mDeliveryStatus == MessageItem.DeliveryStatus.INFO || msgItem.mReadReport) {
    mDetailsIndicator.setImageResource(R.drawable.ic_sms_mms_details);
    mDetailsIndicator.setVisibility(View.VISIBLE);
  }
 else {
    mDetailsIndicator.setVisibility(View.GONE);
  }
}",0.970266040688576
44406,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId,false);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri,false);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  long convThreadId=0;
  if (conversation != null) {
    conversation.blockMarkAsRead(true);
    convThreadId=conversation.getThreadId();
  }
  if (sameThread || (convThreadId != 0 && convThreadId == mConversation.getThreadId())) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  mSentMessage=false;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId,false);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri,false);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  long convThreadId=0;
  if (conversation != null) {
    conversation.blockMarkAsRead(true);
    convThreadId=conversation.getThreadId();
  }
  if (sameThread || (convThreadId != 0 && convThreadId == mConversation.getThreadId())) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}",0.9914728682170544
44407,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId,false);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri,false);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  long convThreadId=0;
  if (conversation != null) {
    conversation.blockMarkAsRead(true);
    convThreadId=conversation.getThreadId();
  }
  if (sameThread || (convThreadId != 0 && convThreadId == mConversation.getThreadId())) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  mSentMessage=false;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId,false);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri,false);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  long convThreadId=0;
  if (conversation != null) {
    conversation.blockMarkAsRead(true);
    convThreadId=conversation.getThreadId();
  }
  if (sameThread || (convThreadId != 0 && convThreadId == mConversation.getThreadId())) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}",0.9914728682170544
44408,"public void run(){
  cacheAllThreads(context);
}","public void run(){
  blockingMarkAllSmsMessagesAsSeen(context);
  blockingMarkAllMmsMessagesAsSeen(context);
  MessagingNotification.blockingUpdateAllNotifications(context);
}",0.3766816143497757
44409,"/** 
 * Marks all messages in this conversation as read and updates relevant notifications.  This method returns immediately; work is dispatched to a background thread.
 */
public void markAsRead(){
  final Uri threadUri=getUri();
  new Thread(new Runnable(){
    public void run(){
synchronized (mMarkAsBlockedSyncer) {
        if (mMarkAsReadBlocked) {
          try {
            mMarkAsBlockedSyncer.wait();
          }
 catch (          InterruptedException e) {
          }
        }
        if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
          LogTag.debug(""String_Node_Str"" + threadUri);
        }
        if (threadUri != null) {
          buildReadContentValues();
          mHasUnreadMessages=true;
          Cursor c=mContext.getContentResolver().query(threadUri,READ_PROJECTION,""String_Node_Str"",null,null);
          if (c != null) {
            try {
              mHasUnreadMessages=c.getCount() > 0;
            }
  finally {
              c.close();
            }
          }
          if (mHasUnreadMessages) {
            mContext.getContentResolver().update(threadUri,mReadContentValues,""String_Node_Str"",null);
          }
        }
      }
      MessagingNotification.updateAllNotifications(mContext);
    }
  }
).start();
}","/** 
 * Marks all messages in this conversation as read and updates relevant notifications.  This method returns immediately; work is dispatched to a background thread.
 */
public void markAsRead(){
  final Uri threadUri=getUri();
  new Thread(new Runnable(){
    public void run(){
synchronized (mMarkAsBlockedSyncer) {
        if (mMarkAsReadBlocked) {
          try {
            mMarkAsBlockedSyncer.wait();
          }
 catch (          InterruptedException e) {
          }
        }
        if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
          LogTag.debug(""String_Node_Str"" + threadUri);
        }
        if (threadUri != null) {
          buildReadContentValues();
          mHasUnreadMessages=true;
          Cursor c=mContext.getContentResolver().query(threadUri,READ_PROJECTION,""String_Node_Str"",null,null);
          if (c != null) {
            try {
              mHasUnreadMessages=c.getCount() > 0;
            }
  finally {
              c.close();
            }
          }
          if (mHasUnreadMessages) {
            mContext.getContentResolver().update(threadUri,mReadContentValues,""String_Node_Str"",null);
          }
        }
      }
      MessagingNotification.blockingUpdateAllNotifications(mContext);
    }
  }
).start();
}",0.996012759170654
44410,"/** 
 * Returns a temporary Conversation (not representing one on disk) wrapping the contents of the provided cursor.  The cursor should be the one returned to your AsyncQueryHandler passed in to   {@link startQueryForAll}. The recipient list of this conversation can be empty if the results were not in cache.
 */
public static Conversation from(Context context,Cursor cursor){
  return new Conversation(context,cursor,false);
}","/** 
 * Returns a temporary Conversation (not representing one on disk) wrapping the contents of the provided cursor.  The cursor should be the one returned to your AsyncQueryHandler passed in to   {@link #startQueryForAll}. The recipient list of this conversation can be empty if the results were not in cache.
 */
public static Conversation from(Context context,Cursor cursor){
  return new Conversation(context,cursor,false);
}",0.9988358556461
44411,"/** 
 * Create a new conversation with no recipients.    {@link setRecipients} canbe called as many times as you like; the conversation will not be created in the database until  {@link ensureThreadId} is called.
 */
public static Conversation createNew(Context context){
  return new Conversation(context);
}","/** 
 * Create a new conversation with no recipients.    {@link #setRecipients} canbe called as many times as you like; the conversation will not be created in the database until  {@link #ensureThreadId} is called.
 */
public static Conversation createNew(Context context){
  return new Conversation(context);
}",0.9967741935483873
44412,"private void buildReadContentValues(){
  if (mReadContentValues == null) {
    mReadContentValues=new ContentValues(1);
    mReadContentValues.put(""String_Node_Str"",1);
  }
}","private void buildReadContentValues(){
  if (mReadContentValues == null) {
    mReadContentValues=new ContentValues(2);
    mReadContentValues.put(""String_Node_Str"",1);
    mReadContentValues.put(""String_Node_Str"",1);
  }
}",0.871536523929471
44413,"/** 
 * Query the contact email table to get the name of an email address.
 */
private CacheEntry queryEmailDisplayName(String email){
  CacheEntry entry=new CacheEntry();
  mContactInfoSelectionArgs[0]=email;
  Cursor cursor=SqliteWrapper.query(mContext,mContext.getContentResolver(),EMAIL_WITH_PRESENCE_URI,EMAIL_PROJECTION,EMAIL_SELECTION,mContactInfoSelectionArgs,null);
  if (cursor != null) {
    try {
      while (cursor.moveToNext()) {
        entry.presenceResId=getPresenceIconResourceId(cursor.getInt(EMAIL_STATUS_COLUMN));
        entry.person_id=cursor.getLong(EMAIL_ID_COLUMN);
        String name=cursor.getString(EMAIL_NAME_COLUMN);
        if (TextUtils.isEmpty(name)) {
          name=cursor.getString(EMAIL_CONTACT_NAME_COLUMN);
        }
        if (!TextUtils.isEmpty(name)) {
          entry.name=name;
          loadAvatar(entry,cursor);
          if (LOCAL_DEBUG) {
            log(""String_Node_Str"" + entry.name + ""String_Node_Str""+ email+ ""String_Node_Str""+ entry.presenceResId);
          }
          break;
        }
      }
    }
  finally {
      cursor.close();
    }
  }
  return entry;
}","/** 
 * Query the contact email table to get the name of an email address.
 */
private CacheEntry queryEmailDisplayName(String email){
  CacheEntry entry=new CacheEntry();
  String contactInfoSelectionArgs[]=new String[1];
  contactInfoSelectionArgs[0]=email;
  Cursor cursor=SqliteWrapper.query(mContext,mContext.getContentResolver(),EMAIL_WITH_PRESENCE_URI,EMAIL_PROJECTION,EMAIL_SELECTION,contactInfoSelectionArgs,null);
  if (cursor != null) {
    try {
      while (cursor.moveToNext()) {
        entry.presenceResId=getPresenceIconResourceId(cursor.getInt(EMAIL_STATUS_COLUMN));
        entry.person_id=cursor.getLong(EMAIL_ID_COLUMN);
        String name=cursor.getString(EMAIL_NAME_COLUMN);
        if (TextUtils.isEmpty(name)) {
          name=cursor.getString(EMAIL_CONTACT_NAME_COLUMN);
        }
        if (!TextUtils.isEmpty(name)) {
          entry.name=name;
          loadAvatar(entry,cursor);
          if (LOCAL_DEBUG) {
            log(""String_Node_Str"" + entry.name + ""String_Node_Str""+ email+ ""String_Node_Str""+ entry.presenceResId);
          }
          break;
        }
      }
    }
  finally {
      cursor.close();
    }
  }
  return entry;
}",0.9751200349192491
44414,"/** 
 * Queries the caller id info with the phone number.
 * @return a CacheEntry containing the caller id info corresponding to the number.
 */
private CacheEntry queryContactInfoByNumber(String number){
  CacheEntry entry=new CacheEntry();
  entry.phoneNumber=number;
  mContactInfoSelectionArgs[0]=number;
  String selection=CALLER_ID_SELECTION.replace(""String_Node_Str"",PhoneNumberUtils.toCallerIDMinMatch(number));
  Cursor cursor=mContext.getContentResolver().query(PHONES_WITH_PRESENCE_URI,CALLER_ID_PROJECTION,selection,mContactInfoSelectionArgs,null);
  if (cursor == null) {
    Log.w(TAG,""String_Node_Str"" + number + ""String_Node_Str""+ ""String_Node_Str""+ PHONES_WITH_PRESENCE_URI);
    return entry;
  }
  try {
    if (cursor.moveToFirst()) {
      entry.phoneLabel=cursor.getString(PHONE_LABEL_COLUMN);
      entry.name=cursor.getString(CONTACT_NAME_COLUMN);
      entry.person_id=cursor.getLong(CONTACT_ID_COLUMN);
      entry.presenceResId=getPresenceIconResourceId(cursor.getInt(CONTACT_PRESENCE_COLUMN));
      entry.presenceText=cursor.getString(CONTACT_STATUS_COLUMN);
      if (LOCAL_DEBUG) {
        log(""String_Node_Str"" + entry.name + ""String_Node_Str""+ number+ ""String_Node_Str""+ entry.presenceResId);
      }
      loadAvatar(entry,cursor);
    }
  }
  finally {
    cursor.close();
  }
  return entry;
}","/** 
 * Queries the caller id info with the phone number.
 * @return a CacheEntry containing the caller id info corresponding to the number.
 */
private CacheEntry queryContactInfoByNumber(String number){
  CacheEntry entry=new CacheEntry();
  entry.phoneNumber=number;
  String contactInfoSelectionArgs[]=new String[1];
  contactInfoSelectionArgs[0]=number;
  String selection=CALLER_ID_SELECTION.replace(""String_Node_Str"",PhoneNumberUtils.toCallerIDMinMatch(number));
  Cursor cursor=mContext.getContentResolver().query(PHONES_WITH_PRESENCE_URI,CALLER_ID_PROJECTION,selection,contactInfoSelectionArgs,null);
  if (cursor == null) {
    Log.w(TAG,""String_Node_Str"" + number + ""String_Node_Str""+ ""String_Node_Str""+ PHONES_WITH_PRESENCE_URI);
    return entry;
  }
  try {
    if (cursor.moveToFirst()) {
      entry.phoneLabel=cursor.getString(PHONE_LABEL_COLUMN);
      entry.name=cursor.getString(CONTACT_NAME_COLUMN);
      entry.person_id=cursor.getLong(CONTACT_ID_COLUMN);
      entry.presenceResId=getPresenceIconResourceId(cursor.getInt(CONTACT_PRESENCE_COLUMN));
      entry.presenceText=cursor.getString(CONTACT_STATUS_COLUMN);
      if (LOCAL_DEBUG) {
        log(""String_Node_Str"" + entry.name + ""String_Node_Str""+ number+ ""String_Node_Str""+ entry.presenceResId);
      }
      loadAvatar(entry,cursor);
    }
  }
  finally {
    cursor.close();
  }
  return entry;
}",0.9789434798670116
44415,"/** 
 * Query the contact email table to get the name of an email address.
 */
private CacheEntry queryEmailDisplayName(String email){
  CacheEntry entry=new CacheEntry();
  mContactInfoSelectionArgs[0]=email;
  Cursor cursor=SqliteWrapper.query(mContext,mContext.getContentResolver(),EMAIL_WITH_PRESENCE_URI,EMAIL_PROJECTION,EMAIL_SELECTION,mContactInfoSelectionArgs,null);
  if (cursor != null) {
    try {
      while (cursor.moveToNext()) {
        entry.presenceResId=getPresenceIconResourceId(cursor.getInt(EMAIL_STATUS_COLUMN));
        entry.person_id=cursor.getLong(EMAIL_ID_COLUMN);
        String name=cursor.getString(EMAIL_NAME_COLUMN);
        if (TextUtils.isEmpty(name)) {
          name=cursor.getString(EMAIL_CONTACT_NAME_COLUMN);
        }
        if (!TextUtils.isEmpty(name)) {
          entry.name=name;
          loadAvatar(entry,cursor);
          if (LOCAL_DEBUG) {
            log(""String_Node_Str"" + entry.name + ""String_Node_Str""+ email+ ""String_Node_Str""+ entry.presenceResId);
          }
          break;
        }
      }
    }
  finally {
      cursor.close();
    }
  }
  return entry;
}","/** 
 * Query the contact email table to get the name of an email address.
 */
private CacheEntry queryEmailDisplayName(String email){
  CacheEntry entry=new CacheEntry();
  String contactInfoSelectionArgs[]=new String[1];
  contactInfoSelectionArgs[0]=email;
  Cursor cursor=SqliteWrapper.query(mContext,mContext.getContentResolver(),EMAIL_WITH_PRESENCE_URI,EMAIL_PROJECTION,EMAIL_SELECTION,contactInfoSelectionArgs,null);
  if (cursor != null) {
    try {
      while (cursor.moveToNext()) {
        entry.presenceResId=getPresenceIconResourceId(cursor.getInt(EMAIL_STATUS_COLUMN));
        entry.person_id=cursor.getLong(EMAIL_ID_COLUMN);
        String name=cursor.getString(EMAIL_NAME_COLUMN);
        if (TextUtils.isEmpty(name)) {
          name=cursor.getString(EMAIL_CONTACT_NAME_COLUMN);
        }
        if (!TextUtils.isEmpty(name)) {
          entry.name=name;
          loadAvatar(entry,cursor);
          if (LOCAL_DEBUG) {
            log(""String_Node_Str"" + entry.name + ""String_Node_Str""+ email+ ""String_Node_Str""+ entry.presenceResId);
          }
          break;
        }
      }
    }
  finally {
      cursor.close();
    }
  }
  return entry;
}",0.9751200349192491
44416,"/** 
 * Queries the caller id info with the phone number.
 * @return a CacheEntry containing the caller id info corresponding to the number.
 */
private CacheEntry queryContactInfoByNumber(String number){
  CacheEntry entry=new CacheEntry();
  entry.phoneNumber=number;
  mContactInfoSelectionArgs[0]=number;
  String selection=CALLER_ID_SELECTION.replace(""String_Node_Str"",PhoneNumberUtils.toCallerIDMinMatch(number));
  Cursor cursor=mContext.getContentResolver().query(PHONES_WITH_PRESENCE_URI,CALLER_ID_PROJECTION,selection,mContactInfoSelectionArgs,null);
  if (cursor == null) {
    Log.w(TAG,""String_Node_Str"" + number + ""String_Node_Str""+ ""String_Node_Str""+ PHONES_WITH_PRESENCE_URI);
    return entry;
  }
  try {
    if (cursor.moveToFirst()) {
      entry.phoneLabel=cursor.getString(PHONE_LABEL_COLUMN);
      entry.name=cursor.getString(CONTACT_NAME_COLUMN);
      entry.person_id=cursor.getLong(CONTACT_ID_COLUMN);
      entry.presenceResId=getPresenceIconResourceId(cursor.getInt(CONTACT_PRESENCE_COLUMN));
      entry.presenceText=cursor.getString(CONTACT_STATUS_COLUMN);
      if (LOCAL_DEBUG) {
        log(""String_Node_Str"" + entry.name + ""String_Node_Str""+ number+ ""String_Node_Str""+ entry.presenceResId);
      }
      loadAvatar(entry,cursor);
    }
  }
  finally {
    cursor.close();
  }
  return entry;
}","/** 
 * Queries the caller id info with the phone number.
 * @return a CacheEntry containing the caller id info corresponding to the number.
 */
private CacheEntry queryContactInfoByNumber(String number){
  CacheEntry entry=new CacheEntry();
  entry.phoneNumber=number;
  String contactInfoSelectionArgs[]=new String[1];
  contactInfoSelectionArgs[0]=number;
  String selection=CALLER_ID_SELECTION.replace(""String_Node_Str"",PhoneNumberUtils.toCallerIDMinMatch(number));
  Cursor cursor=mContext.getContentResolver().query(PHONES_WITH_PRESENCE_URI,CALLER_ID_PROJECTION,selection,contactInfoSelectionArgs,null);
  if (cursor == null) {
    Log.w(TAG,""String_Node_Str"" + number + ""String_Node_Str""+ ""String_Node_Str""+ PHONES_WITH_PRESENCE_URI);
    return entry;
  }
  try {
    if (cursor.moveToFirst()) {
      entry.phoneLabel=cursor.getString(PHONE_LABEL_COLUMN);
      entry.name=cursor.getString(CONTACT_NAME_COLUMN);
      entry.person_id=cursor.getLong(CONTACT_ID_COLUMN);
      entry.presenceResId=getPresenceIconResourceId(cursor.getInt(CONTACT_PRESENCE_COLUMN));
      entry.presenceText=cursor.getString(CONTACT_STATUS_COLUMN);
      if (LOCAL_DEBUG) {
        log(""String_Node_Str"" + entry.name + ""String_Node_Str""+ number+ ""String_Node_Str""+ entry.presenceResId);
      }
      loadAvatar(entry,cursor);
    }
  }
  finally {
    cursor.close();
  }
  return entry;
}",0.9789434798670116
44417,"private void updateNameAndNumber(){
  mNameAndNumber=formatNameAndNumber(mName,mNumber);
}","private synchronized void updateNameAndNumber(){
  notSynchronizedUpdateNameAndNumber();
}",0.6666666666666666
44418,"/** 
 * Queries the caller id info with the phone number.
 * @return a Contact containing the caller id info corresponding to the number.
 */
private Contact getContactInfoForPhoneNumber(String number){
  number=PhoneNumberUtils.stripSeparators(number);
  Contact entry=new Contact(number);
  mContactInfoSelectionArgs[0]=number;
  Cursor cursor=mContext.getContentResolver().query(PHONES_WITH_PRESENCE_URI,CALLER_ID_PROJECTION,CALLER_ID_SELECTION,mContactInfoSelectionArgs,null);
  if (cursor == null) {
    Log.w(TAG,""String_Node_Str"" + number + ""String_Node_Str""+ ""String_Node_Str""+ PHONES_WITH_PRESENCE_URI);
    return entry;
  }
  try {
    if (cursor.moveToFirst()) {
      entry.mLabel=cursor.getString(PHONE_LABEL_COLUMN);
      entry.mName=cursor.getString(CONTACT_NAME_COLUMN);
      entry.mPersonId=cursor.getLong(CONTACT_ID_COLUMN);
      entry.mPresenceResId=getPresenceIconResourceId(cursor.getInt(CONTACT_PRESENCE_COLUMN));
      entry.mPresenceText=cursor.getString(CONTACT_STATUS_COLUMN);
      if (V) {
        log(""String_Node_Str"" + entry.mName + ""String_Node_Str""+ number+ ""String_Node_Str""+ entry.mPresenceResId);
      }
      loadAvatarData(entry,cursor);
    }
  }
  finally {
    cursor.close();
  }
  return entry;
}","/** 
 * Queries the caller id info with the phone number.
 * @return a Contact containing the caller id info corresponding to the number.
 */
private Contact getContactInfoForPhoneNumber(String number){
  number=PhoneNumberUtils.stripSeparators(number);
  Contact entry=new Contact(number);
  String selection=CALLER_ID_SELECTION.replace(""String_Node_Str"",PhoneNumberUtils.toCallerIDMinMatch(number));
  Cursor cursor=mContext.getContentResolver().query(PHONES_WITH_PRESENCE_URI,CALLER_ID_PROJECTION,selection,new String[]{number},null);
  if (cursor == null) {
    Log.w(TAG,""String_Node_Str"" + number + ""String_Node_Str""+ ""String_Node_Str""+ PHONES_WITH_PRESENCE_URI);
    return entry;
  }
  try {
    if (cursor.moveToFirst()) {
synchronized (entry) {
        entry.mLabel=cursor.getString(PHONE_LABEL_COLUMN);
        entry.mName=cursor.getString(CONTACT_NAME_COLUMN);
        entry.mPersonId=cursor.getLong(CONTACT_ID_COLUMN);
        entry.mPresenceResId=getPresenceIconResourceId(cursor.getInt(CONTACT_PRESENCE_COLUMN));
        entry.mPresenceText=cursor.getString(CONTACT_STATUS_COLUMN);
        if (V) {
          log(""String_Node_Str"" + entry.mName + ""String_Node_Str""+ number+ ""String_Node_Str""+ entry.mPresenceResId);
        }
      }
      byte[] data=loadAvatarData(entry);
synchronized (entry) {
        entry.mAvatarData=data;
      }
    }
  }
  finally {
    cursor.close();
  }
  return entry;
}",0.8729323308270677
44419,"private void updateContact(final Contact c){
  if (c == null) {
    return;
  }
  Contact entry=getContactInfo(c.mNumber);
synchronized (ContactsCache.this) {
    if (contactChanged(c,entry)) {
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + entry.mName);
      }
      c.mName=entry.mName;
      c.mNumber=entry.mNumber;
      c.updateNameAndNumber();
      c.mLabel=entry.mLabel;
      c.mPersonId=entry.mPersonId;
      c.mPresenceResId=entry.mPresenceResId;
      c.mPresenceText=entry.mPresenceText;
      c.mAvatarData=entry.mAvatarData;
      c.mAvatar=entry.mAvatar;
      handleLocalNumber(c);
      for (      UpdateListener l : c.mListeners) {
        if (V)         Log.d(TAG,""String_Node_Str"" + l);
        l.onUpdate(c);
      }
    }
synchronized (c) {
      c.mQueryPending=false;
      c.notifyAll();
    }
  }
}","private void updateContact(final Contact c){
  if (c == null) {
    return;
  }
  Contact entry=getContactInfo(c.mNumber);
synchronized (c) {
    if (contactChanged(c,entry)) {
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + entry.mName);
      }
      c.mNumber=entry.mNumber;
      c.mLabel=entry.mLabel;
      c.mPersonId=entry.mPersonId;
      c.mPresenceResId=entry.mPresenceResId;
      c.mPresenceText=entry.mPresenceText;
      c.mAvatarData=entry.mAvatarData;
      c.mAvatar=entry.mAvatar;
      if (MessageUtils.isLocalNumber(c.mNumber)) {
        c.mName=mContext.getString(com.android.mms.R.string.me);
      }
 else {
        c.mName=entry.mName;
      }
      c.notSynchronizedUpdateNameAndNumber();
      for (      UpdateListener l : c.mListeners) {
        if (V)         Log.d(TAG,""String_Node_Str"" + l);
        l.onUpdate(c);
      }
    }
synchronized (c) {
      c.mQueryPending=false;
      c.notifyAll();
    }
  }
}",0.8447339847991314
44420,"private void loadAvatarData(Contact entry,Cursor cursor){
  if (entry.mPersonId == 0 || entry.mAvatar != null) {
    return;
  }
  Uri contactUri=ContentUris.withAppendedId(Contacts.CONTENT_URI,entry.mPersonId);
  InputStream avatarDataStream=Contacts.openContactPhotoInputStream(mContext.getContentResolver(),contactUri);
  try {
    if (avatarDataStream != null) {
      byte[] data=new byte[avatarDataStream.available()];
      avatarDataStream.read(data,0,data.length);
      entry.mAvatarData=data;
    }
  }
 catch (  IOException ex) {
  }
 finally {
    try {
      if (avatarDataStream != null) {
        avatarDataStream.close();
      }
    }
 catch (    IOException e) {
    }
  }
}","private byte[] loadAvatarData(Contact entry){
  byte[] data=null;
  if (entry.mPersonId == 0 || entry.mAvatar != null) {
    return null;
  }
  Uri contactUri=ContentUris.withAppendedId(Contacts.CONTENT_URI,entry.mPersonId);
  InputStream avatarDataStream=Contacts.openContactPhotoInputStream(mContext.getContentResolver(),contactUri);
  try {
    if (avatarDataStream != null) {
      data=new byte[avatarDataStream.available()];
      avatarDataStream.read(data,0,data.length);
    }
  }
 catch (  IOException ex) {
  }
 finally {
    try {
      if (avatarDataStream != null) {
        avatarDataStream.close();
      }
    }
 catch (    IOException e) {
    }
  }
  return data;
}",0.9222948438634712
44421,"/** 
 * Query the contact email table to get the name of an email address.
 */
private Contact getContactInfoForEmailAddress(String email){
  Contact entry=new Contact(email);
  mContactInfoSelectionArgs[0]=email;
  Cursor cursor=SqliteWrapper.query(mContext,mContext.getContentResolver(),EMAIL_WITH_PRESENCE_URI,EMAIL_PROJECTION,EMAIL_SELECTION,mContactInfoSelectionArgs,null);
  if (cursor != null) {
    try {
      while (cursor.moveToNext()) {
        entry.mPresenceResId=getPresenceIconResourceId(cursor.getInt(EMAIL_STATUS_COLUMN));
        entry.mPersonId=cursor.getLong(EMAIL_ID_COLUMN);
        String name=cursor.getString(EMAIL_NAME_COLUMN);
        if (TextUtils.isEmpty(name)) {
          name=cursor.getString(EMAIL_CONTACT_NAME_COLUMN);
        }
        if (!TextUtils.isEmpty(name)) {
          entry.mName=name;
          loadAvatarData(entry,cursor);
          if (V) {
            log(""String_Node_Str"" + entry.mName + ""String_Node_Str""+ email+ ""String_Node_Str""+ entry.mPresenceResId);
          }
          break;
        }
      }
    }
  finally {
      cursor.close();
    }
  }
  return entry;
}","/** 
 * Query the contact email table to get the name of an email address.
 */
private Contact getContactInfoForEmailAddress(String email){
  Contact entry=new Contact(email);
  Cursor cursor=SqliteWrapper.query(mContext,mContext.getContentResolver(),EMAIL_WITH_PRESENCE_URI,EMAIL_PROJECTION,EMAIL_SELECTION,new String[]{email},null);
  if (cursor != null) {
    try {
      while (cursor.moveToNext()) {
        boolean found=false;
synchronized (entry) {
          entry.mPresenceResId=getPresenceIconResourceId(cursor.getInt(EMAIL_STATUS_COLUMN));
          entry.mPersonId=cursor.getLong(EMAIL_ID_COLUMN);
          String name=cursor.getString(EMAIL_NAME_COLUMN);
          if (TextUtils.isEmpty(name)) {
            name=cursor.getString(EMAIL_CONTACT_NAME_COLUMN);
          }
          if (!TextUtils.isEmpty(name)) {
            entry.mName=name;
            if (V) {
              log(""String_Node_Str"" + entry.mName + ""String_Node_Str""+ email+ ""String_Node_Str""+ entry.mPresenceResId);
            }
            found=true;
          }
        }
        if (found) {
          byte[] data=loadAvatarData(entry);
synchronized (entry) {
            entry.mAvatarData=data;
          }
          break;
        }
      }
    }
  finally {
      cursor.close();
    }
  }
  return entry;
}",0.8449772633319553
44422,"void invalidate(){
synchronized (ContactsCache.this) {
    for (    ArrayList<Contact> alc : mContactsHash.values()) {
      for (      Contact c : alc) {
        c.mIsStale=true;
      }
    }
  }
}","void invalidate(){
synchronized (ContactsCache.this) {
    for (    ArrayList<Contact> alc : mContactsHash.values()) {
      for (      Contact c : alc) {
synchronized (c) {
          c.mIsStale=true;
        }
      }
    }
  }
}",0.8671328671328671
44423,"public synchronized void setNumber(String number){
  mNumber=number;
  updateNameAndNumber();
  mNumberIsModified=true;
}","public synchronized void setNumber(String number){
  mNumber=number;
  notSynchronizedUpdateNameAndNumber();
  mNumberIsModified=true;
}",0.933852140077821
44424,"public SlideModel get(int location){
  return mSlides.get(location);
}","public SlideModel get(int location){
  return (location >= 0 && location < mSlides.size()) ? mSlides.get(location) : null;
}",0.7216494845360825
44425,"public void onTextChanged(String s){
  mSlideshowEditor.changeText(mPosition,s);
}","public void onTextChanged(String s){
  if (!isFinishing()) {
    mSlideshowEditor.changeText(mPosition,s);
  }
}",0.845360824742268
44426,"private static void asyncUpdateContact(final Contact c,boolean canBlock){
  if (c == null) {
    return;
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + c.toString());
  }
  Runnable r=new Runnable(){
    public void run(){
      updateContact(c);
    }
  }
;
  if (canBlock) {
    r.run();
  }
 else {
    sTaskStack.push(r);
  }
}","private static void asyncUpdateContact(final Contact c,boolean canBlock){
  if (c == null) {
    return;
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + c.toString() + ""String_Node_Str""+ canBlock+ ""String_Node_Str""+ c.mIsStale);
  }
  Runnable r=new Runnable(){
    public void run(){
      updateContact(c);
    }
  }
;
  if (canBlock) {
    r.run();
  }
 else {
    sTaskStack.push(r);
  }
}",0.9226869455006336
44427,"private static void updateContact(final Contact c){
  if (c == null) {
    return;
  }
  c.mIsStale=false;
  if (handleLocalNumber(c)) {
    return;
  }
  ContactInfoCache cache=ContactInfoCache.getInstance();
  ContactInfoCache.CacheEntry entry=cache.getContactInfo(c.mNumber);
synchronized (Cache.getInstance()) {
    if (contactChanged(c,entry)) {
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + entry.name);
      }
      c.mName=entry.name;
      c.updateNameAndNumber();
      c.mLabel=entry.phoneLabel;
      c.mPersonId=entry.person_id;
      c.mPresenceResId=entry.presenceResId;
      c.mPresenceText=entry.presenceText;
      c.mAvatar=entry.mAvatar;
      for (      UpdateListener l : c.mListeners) {
        if (V)         Log.d(TAG,""String_Node_Str"" + l);
        l.onUpdate(c);
      }
    }
  }
}","private static void updateContact(final Contact c){
  if (c == null) {
    return;
  }
  if (handleLocalNumber(c)) {
    return;
  }
  ContactInfoCache cache=ContactInfoCache.getInstance();
  ContactInfoCache.CacheEntry entry=cache.getContactInfo(c.mNumber);
synchronized (Cache.getInstance()) {
    if (contactChanged(c,entry)) {
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + entry.name);
      }
      c.mName=entry.name;
      c.updateNameAndNumber();
      c.mLabel=entry.phoneLabel;
      c.mPersonId=entry.person_id;
      c.mPresenceResId=entry.presenceResId;
      c.mPresenceText=entry.presenceText;
      c.mAvatar=entry.mAvatar;
      c.mIsStale=false;
      for (      UpdateListener l : c.mListeners) {
        if (V)         Log.d(TAG,""String_Node_Str"" + l);
        l.onUpdate(c);
      }
    }
  }
}",0.9741480611045829
44428,"public void onUpdate(final Contact updated){
  mMessageListItemHandler.post(new Runnable(){
    public void run(){
      ContactList recipients=getRecipients();
      if (recipients.size() == 1) {
        updatePresence(recipients.get(0));
      }
 else {
        updatePresence(null);
      }
    }
  }
);
}","public void onUpdate(final Contact updated){
  mMessageListItemHandler.post(new Runnable(){
    public void run(){
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + updated);
      }
      ContactList recipients=getRecipients();
      if (recipients.size() == 1) {
        updatePresence(recipients.get(0));
      }
 else {
        updatePresence(null);
      }
      ComposeMessageActivity.this.mMsgListAdapter.notifyDataSetChanged();
    }
  }
);
}",0.7525252525252525
44429,"public void run(){
  ContactList recipients=getRecipients();
  if (recipients.size() == 1) {
    updatePresence(recipients.get(0));
  }
 else {
    updatePresence(null);
  }
}","public void run(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + updated);
  }
  ContactList recipients=getRecipients();
  if (recipients.size() == 1) {
    updatePresence(recipients.get(0));
  }
 else {
    updatePresence(null);
  }
  ComposeMessageActivity.this.mMsgListAdapter.notifyDataSetChanged();
}",0.6862745098039216
44430,"private static void asyncUpdateContact(final Contact c,boolean canBlock){
  if (c == null) {
    return;
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + c.toString());
  }
  Runnable r=new Runnable(){
    public void run(){
      updateContact(c);
    }
  }
;
  if (canBlock) {
    r.run();
  }
 else {
    sTaskStack.push(r);
  }
}","private static void asyncUpdateContact(final Contact c,boolean canBlock){
  if (c == null) {
    return;
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + c.toString() + ""String_Node_Str""+ canBlock+ ""String_Node_Str""+ c.mIsStale);
  }
  Runnable r=new Runnable(){
    public void run(){
      updateContact(c);
    }
  }
;
  if (canBlock) {
    r.run();
  }
 else {
    sTaskStack.push(r);
  }
}",0.9226869455006336
44431,"private static void updateContact(final Contact c){
  if (c == null) {
    return;
  }
  c.mIsStale=false;
  if (handleLocalNumber(c)) {
    return;
  }
  ContactInfoCache cache=ContactInfoCache.getInstance();
  ContactInfoCache.CacheEntry entry=cache.getContactInfo(c.mNumber);
synchronized (Cache.getInstance()) {
    if (contactChanged(c,entry)) {
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + entry.name);
      }
      c.mName=entry.name;
      c.updateNameAndNumber();
      c.mLabel=entry.phoneLabel;
      c.mPersonId=entry.person_id;
      c.mPresenceResId=entry.presenceResId;
      c.mPresenceText=entry.presenceText;
      c.mAvatar=entry.mAvatar;
      for (      UpdateListener l : c.mListeners) {
        if (V)         Log.d(TAG,""String_Node_Str"" + l);
        l.onUpdate(c);
      }
    }
  }
}","private static void updateContact(final Contact c){
  if (c == null) {
    return;
  }
  if (handleLocalNumber(c)) {
    return;
  }
  ContactInfoCache cache=ContactInfoCache.getInstance();
  ContactInfoCache.CacheEntry entry=cache.getContactInfo(c.mNumber);
synchronized (Cache.getInstance()) {
    if (contactChanged(c,entry)) {
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + entry.name);
      }
      c.mName=entry.name;
      c.updateNameAndNumber();
      c.mLabel=entry.phoneLabel;
      c.mPersonId=entry.person_id;
      c.mPresenceResId=entry.presenceResId;
      c.mPresenceText=entry.presenceText;
      c.mAvatar=entry.mAvatar;
      c.mIsStale=false;
      for (      UpdateListener l : c.mListeners) {
        if (V)         Log.d(TAG,""String_Node_Str"" + l);
        l.onUpdate(c);
      }
    }
  }
}",0.9741480611045829
44432,"public void onUpdate(final Contact updated){
  mMessageListItemHandler.post(new Runnable(){
    public void run(){
      ContactList recipients=getRecipients();
      if (recipients.size() == 1) {
        updatePresence(recipients.get(0));
      }
 else {
        updatePresence(null);
      }
    }
  }
);
}","public void onUpdate(final Contact updated){
  mMessageListItemHandler.post(new Runnable(){
    public void run(){
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + updated);
      }
      ContactList recipients=getRecipients();
      if (recipients.size() == 1) {
        updatePresence(recipients.get(0));
      }
 else {
        updatePresence(null);
      }
      ComposeMessageActivity.this.mMsgListAdapter.notifyDataSetChanged();
    }
  }
);
}",0.7525252525252525
44433,"public void run(){
  ContactList recipients=getRecipients();
  if (recipients.size() == 1) {
    updatePresence(recipients.get(0));
  }
 else {
    updatePresence(null);
  }
}","public void run(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + updated);
  }
  ContactList recipients=getRecipients();
  if (recipients.size() == 1) {
    updatePresence(recipients.get(0));
  }
 else {
    updatePresence(null);
  }
  ComposeMessageActivity.this.mMsgListAdapter.notifyDataSetChanged();
}",0.6862745098039216
44434,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  if (sameThread || conversation.getThreadId() == mConversation.getThreadId()) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  long convThreadId=conversation.getThreadId();
  if (sameThread || (convThreadId != 0 && convThreadId == mConversation.getThreadId())) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}",0.9558759283529926
44435,"public static List<Entry> getAddresses(String spaceSepIds){
synchronized (sInstance) {
    List<Entry> numbers=new ArrayList<Entry>();
    String[] ids=spaceSepIds.split(""String_Node_Str"");
    for (    String id : ids) {
      long longId;
      try {
        longId=Long.parseLong(id);
      }
 catch (      NumberFormatException ex) {
        continue;
      }
      String number=sInstance.mCache.get(longId);
      if (number == null) {
        Log.w(TAG,""String_Node_Str"" + id + ""String_Node_Str"");
        dump();
        fill();
        number=sInstance.mCache.get(id);
      }
      if (TextUtils.isEmpty(number)) {
        Log.w(TAG,""String_Node_Str"" + id + ""String_Node_Str"");
      }
 else {
        numbers.add(new Entry(longId,number));
      }
    }
    return numbers;
  }
}","public static List<Entry> getAddresses(String spaceSepIds){
synchronized (sInstance) {
    List<Entry> numbers=new ArrayList<Entry>();
    String[] ids=spaceSepIds.split(""String_Node_Str"");
    for (    String id : ids) {
      long longId;
      try {
        longId=Long.parseLong(id);
      }
 catch (      NumberFormatException ex) {
        continue;
      }
      String number=sInstance.mCache.get(longId);
      if (number == null) {
        Log.w(TAG,""String_Node_Str"" + longId + ""String_Node_Str"");
        dump();
        fill();
        number=sInstance.mCache.get(longId);
      }
      if (TextUtils.isEmpty(number)) {
        Log.w(TAG,""String_Node_Str"" + longId + ""String_Node_Str"");
      }
 else {
        numbers.add(new Entry(longId,number));
      }
    }
    return numbers;
  }
}",0.9886934673366834
44436,"public static List<Entry> getAddresses(String spaceSepIds){
synchronized (sInstance) {
    List<Entry> numbers=new ArrayList<Entry>();
    String[] ids=spaceSepIds.split(""String_Node_Str"");
    for (    String id : ids) {
      long longId;
      try {
        longId=Long.parseLong(id);
      }
 catch (      NumberFormatException ex) {
        continue;
      }
      String number=sInstance.mCache.get(longId);
      if (number == null) {
        Log.w(TAG,""String_Node_Str"" + id + ""String_Node_Str"");
        dump();
        fill();
        number=sInstance.mCache.get(id);
      }
      if (TextUtils.isEmpty(number)) {
        Log.w(TAG,""String_Node_Str"" + id + ""String_Node_Str"");
      }
 else {
        numbers.add(new Entry(longId,number));
      }
    }
    return numbers;
  }
}","public static List<Entry> getAddresses(String spaceSepIds){
synchronized (sInstance) {
    List<Entry> numbers=new ArrayList<Entry>();
    String[] ids=spaceSepIds.split(""String_Node_Str"");
    for (    String id : ids) {
      long longId;
      try {
        longId=Long.parseLong(id);
      }
 catch (      NumberFormatException ex) {
        continue;
      }
      String number=sInstance.mCache.get(longId);
      if (number == null) {
        Log.w(TAG,""String_Node_Str"" + longId + ""String_Node_Str"");
        dump();
        fill();
        number=sInstance.mCache.get(longId);
      }
      if (TextUtils.isEmpty(number)) {
        Log.w(TAG,""String_Node_Str"" + longId + ""String_Node_Str"");
      }
 else {
        numbers.add(new Entry(longId,number));
      }
    }
    return numbers;
  }
}",0.9886934673366834
44437,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  if (sameThread || conversation.getThreadId() == mConversation.getThreadId()) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  long convThreadId=conversation.getThreadId();
  if (sameThread || (convThreadId != 0 && convThreadId == mConversation.getThreadId())) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}",0.9558759283529926
44438,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  if (sameThread || conversation.getThreadId() == mConversation.getThreadId()) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  long convThreadId=conversation.getThreadId();
  if (sameThread || (convThreadId != 0 && convThreadId == mConversation.getThreadId())) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}",0.9558759283529926
44439,"public static List<Entry> getAddresses(String spaceSepIds){
synchronized (sInstance) {
    List<Entry> numbers=new ArrayList<Entry>();
    String[] ids=spaceSepIds.split(""String_Node_Str"");
    for (    String id : ids) {
      long longId;
      try {
        longId=Long.parseLong(id);
      }
 catch (      NumberFormatException ex) {
        continue;
      }
      String number=sInstance.mCache.get(longId);
      if (number == null) {
        Log.w(TAG,""String_Node_Str"" + id + ""String_Node_Str"");
        dump();
        fill();
        number=sInstance.mCache.get(id);
      }
      if (TextUtils.isEmpty(number)) {
        Log.w(TAG,""String_Node_Str"" + id + ""String_Node_Str"");
      }
 else {
        numbers.add(new Entry(longId,number));
      }
    }
    return numbers;
  }
}","public static List<Entry> getAddresses(String spaceSepIds){
synchronized (sInstance) {
    List<Entry> numbers=new ArrayList<Entry>();
    String[] ids=spaceSepIds.split(""String_Node_Str"");
    for (    String id : ids) {
      long longId;
      try {
        longId=Long.parseLong(id);
      }
 catch (      NumberFormatException ex) {
        continue;
      }
      String number=sInstance.mCache.get(longId);
      if (number == null) {
        Log.w(TAG,""String_Node_Str"" + longId + ""String_Node_Str"");
        dump();
        fill();
        number=sInstance.mCache.get(longId);
      }
      if (TextUtils.isEmpty(number)) {
        Log.w(TAG,""String_Node_Str"" + longId + ""String_Node_Str"");
      }
 else {
        numbers.add(new Entry(longId,number));
      }
    }
    return numbers;
  }
}",0.9886934673366834
44440,"public static List<Entry> getAddresses(String spaceSepIds){
synchronized (sInstance) {
    List<Entry> numbers=new ArrayList<Entry>();
    String[] ids=spaceSepIds.split(""String_Node_Str"");
    for (    String id : ids) {
      long longId;
      try {
        longId=Long.parseLong(id);
      }
 catch (      NumberFormatException ex) {
        continue;
      }
      String number=sInstance.mCache.get(longId);
      if (number == null) {
        Log.w(TAG,""String_Node_Str"" + id + ""String_Node_Str"");
        dump();
        fill();
        number=sInstance.mCache.get(id);
      }
      if (TextUtils.isEmpty(number)) {
        Log.w(TAG,""String_Node_Str"" + id + ""String_Node_Str"");
      }
 else {
        numbers.add(new Entry(longId,number));
      }
    }
    return numbers;
  }
}","public static List<Entry> getAddresses(String spaceSepIds){
synchronized (sInstance) {
    List<Entry> numbers=new ArrayList<Entry>();
    String[] ids=spaceSepIds.split(""String_Node_Str"");
    for (    String id : ids) {
      long longId;
      try {
        longId=Long.parseLong(id);
      }
 catch (      NumberFormatException ex) {
        continue;
      }
      String number=sInstance.mCache.get(longId);
      if (number == null) {
        Log.w(TAG,""String_Node_Str"" + longId + ""String_Node_Str"");
        dump();
        fill();
        number=sInstance.mCache.get(longId);
      }
      if (TextUtils.isEmpty(number)) {
        Log.w(TAG,""String_Node_Str"" + longId + ""String_Node_Str"");
      }
 else {
        numbers.add(new Entry(longId,number));
      }
    }
    return numbers;
  }
}",0.9886934673366834
44441,"public static List<Entry> getAddresses(String spaceSepIds){
synchronized (sInstance) {
    List<Entry> numbers=new ArrayList<Entry>();
    String[] ids=spaceSepIds.split(""String_Node_Str"");
    for (    String id : ids) {
      long longId;
      try {
        longId=Long.parseLong(id);
      }
 catch (      NumberFormatException ex) {
        continue;
      }
      String number=sInstance.mCache.get(longId);
      if (number == null) {
        Log.w(TAG,""String_Node_Str"" + id + ""String_Node_Str"");
        dump();
        fill();
        number=sInstance.mCache.get(id);
      }
      if (TextUtils.isEmpty(number)) {
        Log.w(TAG,""String_Node_Str"" + id + ""String_Node_Str"");
      }
 else {
        numbers.add(new Entry(longId,number));
      }
    }
    return numbers;
  }
}","public static List<Entry> getAddresses(String spaceSepIds){
synchronized (sInstance) {
    List<Entry> numbers=new ArrayList<Entry>();
    String[] ids=spaceSepIds.split(""String_Node_Str"");
    for (    String id : ids) {
      long longId;
      try {
        longId=Long.parseLong(id);
      }
 catch (      NumberFormatException ex) {
        continue;
      }
      String number=sInstance.mCache.get(longId);
      if (number == null) {
        Log.w(TAG,""String_Node_Str"" + longId + ""String_Node_Str"");
        dump();
        fill();
        number=sInstance.mCache.get(longId);
      }
      if (TextUtils.isEmpty(number)) {
        Log.w(TAG,""String_Node_Str"" + longId + ""String_Node_Str"");
      }
 else {
        numbers.add(new Entry(longId,number));
      }
    }
    return numbers;
  }
}",0.9886934673366834
44442,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  if (sameThread || conversation.getThreadId() == mConversation.getThreadId()) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  long convThreadId=conversation.getThreadId();
  if (sameThread || (convThreadId != 0 && convThreadId == mConversation.getThreadId())) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}",0.9558759283529926
44443,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  if (sameThread || conversation.getThreadId() == mConversation.getThreadId()) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  Conversation conversation=null;
  long threadId=intent.getLongExtra(""String_Node_Str"",0);
  Uri intentUri=intent.getData();
  boolean sameThread=false;
  if (threadId > 0) {
    conversation=Conversation.get(this,threadId);
  }
 else {
    if (mConversation.getThreadId() == 0) {
      mWorkingMessage.syncWorkingRecipients();
      sameThread=mConversation.sameRecipient(intentUri);
    }
    if (!sameThread) {
      conversation=Conversation.get(this,intentUri);
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + intentUri + ""String_Node_Str""+ threadId);
    log(""String_Node_Str"" + conversation + ""String_Node_Str""+ mConversation);
  }
  long convThreadId=conversation.getThreadId();
  if (sameThread || (convThreadId != 0 && convThreadId == mConversation.getThreadId())) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
  }
 else {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      log(""String_Node_Str"");
    }
    saveDraft();
    initialize(null);
    loadMessageContent();
  }
}",0.9558759283529926
44444,"/** 
 * Send this message over the network.  Will call back with onMessageSent() once it has been dispatched to the telephony stack.  This WorkingMessage object is no longer useful after this method has been called.
 */
public void send(){
  if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  prepareForSave(true);
  final Conversation conv=mConversation;
  String msgTxt=mText.toString();
  if (requiresMms() || addressContainsEmailToMms(conv,msgTxt)) {
    final Uri mmsUri=mMessageUri;
    final PduPersister persister=PduPersister.getPduPersister(mContext);
    final SlideshowModel slideshow=mSlideshow;
    final SendReq sendReq=makeSendReq(conv,mSubject);
    if (sendReq != null) {
      slideshow.prepareForSend();
      new Thread(new Runnable(){
        public void run(){
          sendMmsWorker(conv,mmsUri,persister,slideshow,sendReq);
        }
      }
).start();
    }
 else {
      Log.e(LogTag.TAG,""String_Node_Str"");
    }
  }
 else {
    final String msgText=mText.toString();
    new Thread(new Runnable(){
      public void run(){
        sendSmsWorker(conv,msgText);
      }
    }
).start();
  }
  mDiscarded=true;
}","/** 
 * Send this message over the network.  Will call back with onMessageSent() once it has been dispatched to the telephony stack.  This WorkingMessage object is no longer useful after this method has been called.
 */
public void send(){
  if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  prepareForSave(true);
  final Conversation conv=mConversation;
  String msgTxt=mText.toString();
  if (requiresMms() || addressContainsEmailToMms(conv,msgTxt)) {
    final Uri mmsUri=mMessageUri;
    final PduPersister persister=PduPersister.getPduPersister(mContext);
    final SlideshowModel slideshow=mSlideshow;
    final SendReq sendReq=makeSendReq(conv,mSubject);
    slideshow.prepareForSend();
    new Thread(new Runnable(){
      public void run(){
        sendMmsWorker(conv,mmsUri,persister,slideshow,sendReq);
      }
    }
).start();
  }
 else {
    final String msgText=mText.toString();
    new Thread(new Runnable(){
      public void run(){
        sendSmsWorker(conv,msgText);
      }
    }
).start();
  }
  mDiscarded=true;
}",0.7451499118165785
44445,"private static SendReq makeSendReq(Conversation conv,CharSequence subject){
  String[] dests=conv.getRecipients().getNumbers(true);
  if (dests.length == 0) {
    return null;
  }
  SendReq req=new SendReq();
  EncodedStringValue[] encodedNumbers=EncodedStringValue.encodeStrings(dests);
  if (encodedNumbers != null) {
    req.setTo(encodedNumbers);
  }
  if (!TextUtils.isEmpty(subject)) {
    req.setSubject(new EncodedStringValue(subject.toString()));
  }
  req.setDate(System.currentTimeMillis() / 1000L);
  return req;
}","/** 
 * makeSendReq should always return a non-null SendReq, whether the dest addresses are valid or not. 
 */
private static SendReq makeSendReq(Conversation conv,CharSequence subject){
  String[] dests=conv.getRecipients().getNumbers(true);
  SendReq req=new SendReq();
  EncodedStringValue[] encodedNumbers=EncodedStringValue.encodeStrings(dests);
  if (encodedNumbers != null) {
    req.setTo(encodedNumbers);
  }
  if (!TextUtils.isEmpty(subject)) {
    req.setSubject(new EncodedStringValue(subject.toString()));
  }
  req.setDate(System.currentTimeMillis() / 1000L);
  return req;
}",0.8573991031390135
44446,"/** 
 * Send this message over the network.  Will call back with onMessageSent() once it has been dispatched to the telephony stack.  This WorkingMessage object is no longer useful after this method has been called.
 */
public void send(){
  if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  prepareForSave(true);
  final Conversation conv=mConversation;
  String msgTxt=mText.toString();
  if (requiresMms() || addressContainsEmailToMms(conv,msgTxt)) {
    final Uri mmsUri=mMessageUri;
    final PduPersister persister=PduPersister.getPduPersister(mContext);
    final SlideshowModel slideshow=mSlideshow;
    final SendReq sendReq=makeSendReq(conv,mSubject);
    if (sendReq != null) {
      slideshow.prepareForSend();
      new Thread(new Runnable(){
        public void run(){
          sendMmsWorker(conv,mmsUri,persister,slideshow,sendReq);
        }
      }
).start();
    }
 else {
      Log.e(LogTag.TAG,""String_Node_Str"");
    }
  }
 else {
    final String msgText=mText.toString();
    new Thread(new Runnable(){
      public void run(){
        sendSmsWorker(conv,msgText);
      }
    }
).start();
  }
  mDiscarded=true;
}","/** 
 * Send this message over the network.  Will call back with onMessageSent() once it has been dispatched to the telephony stack.  This WorkingMessage object is no longer useful after this method has been called.
 */
public void send(){
  if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  prepareForSave(true);
  final Conversation conv=mConversation;
  String msgTxt=mText.toString();
  if (requiresMms() || addressContainsEmailToMms(conv,msgTxt)) {
    final Uri mmsUri=mMessageUri;
    final PduPersister persister=PduPersister.getPduPersister(mContext);
    final SlideshowModel slideshow=mSlideshow;
    final SendReq sendReq=makeSendReq(conv,mSubject);
    slideshow.prepareForSend();
    new Thread(new Runnable(){
      public void run(){
        sendMmsWorker(conv,mmsUri,persister,slideshow,sendReq);
      }
    }
).start();
  }
 else {
    final String msgText=mText.toString();
    new Thread(new Runnable(){
      public void run(){
        sendSmsWorker(conv,msgText);
      }
    }
).start();
  }
  mDiscarded=true;
}",0.7451499118165785
44447,"private static SendReq makeSendReq(Conversation conv,CharSequence subject){
  String[] dests=conv.getRecipients().getNumbers(true);
  if (dests.length == 0) {
    return null;
  }
  SendReq req=new SendReq();
  EncodedStringValue[] encodedNumbers=EncodedStringValue.encodeStrings(dests);
  if (encodedNumbers != null) {
    req.setTo(encodedNumbers);
  }
  if (!TextUtils.isEmpty(subject)) {
    req.setSubject(new EncodedStringValue(subject.toString()));
  }
  req.setDate(System.currentTimeMillis() / 1000L);
  return req;
}","/** 
 * makeSendReq should always return a non-null SendReq, whether the dest addresses are valid or not. 
 */
private static SendReq makeSendReq(Conversation conv,CharSequence subject){
  String[] dests=conv.getRecipients().getNumbers(true);
  SendReq req=new SendReq();
  EncodedStringValue[] encodedNumbers=EncodedStringValue.encodeStrings(dests);
  if (encodedNumbers != null) {
    req.setTo(encodedNumbers);
  }
  if (!TextUtils.isEmpty(subject)) {
    req.setSubject(new EncodedStringValue(subject.toString()));
  }
  req.setDate(System.currentTimeMillis() / 1000L);
  return req;
}",0.8573991031390135
44448,"/** 
 * Send this message over the network.  Will call back with onMessageSent() once it has been dispatched to the telephony stack.  This WorkingMessage object is no longer useful after this method has been called.
 */
public void send(){
  if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  prepareForSave(true);
  final Conversation conv=mConversation;
  String msgTxt=mText.toString();
  if (requiresMms() || addressContainsEmailToMms(conv,msgTxt)) {
    final Uri mmsUri=mMessageUri;
    final PduPersister persister=PduPersister.getPduPersister(mContext);
    final SlideshowModel slideshow=mSlideshow;
    final SendReq sendReq=makeSendReq(conv,mSubject);
    if (sendReq != null) {
      slideshow.prepareForSend();
      new Thread(new Runnable(){
        public void run(){
          sendMmsWorker(conv,mmsUri,persister,slideshow,sendReq);
        }
      }
).start();
    }
 else {
      Log.e(LogTag.TAG,""String_Node_Str"");
    }
  }
 else {
    final String msgText=mText.toString();
    new Thread(new Runnable(){
      public void run(){
        sendSmsWorker(conv,msgText);
      }
    }
).start();
  }
  mDiscarded=true;
}","/** 
 * Send this message over the network.  Will call back with onMessageSent() once it has been dispatched to the telephony stack.  This WorkingMessage object is no longer useful after this method has been called.
 */
public void send(){
  if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  prepareForSave(true);
  final Conversation conv=mConversation;
  String msgTxt=mText.toString();
  if (requiresMms() || addressContainsEmailToMms(conv,msgTxt)) {
    final Uri mmsUri=mMessageUri;
    final PduPersister persister=PduPersister.getPduPersister(mContext);
    final SlideshowModel slideshow=mSlideshow;
    final SendReq sendReq=makeSendReq(conv,mSubject);
    slideshow.prepareForSend();
    new Thread(new Runnable(){
      public void run(){
        sendMmsWorker(conv,mmsUri,persister,slideshow,sendReq);
      }
    }
).start();
  }
 else {
    final String msgText=mText.toString();
    new Thread(new Runnable(){
      public void run(){
        sendSmsWorker(conv,msgText);
      }
    }
).start();
  }
  mDiscarded=true;
}",0.7451499118165785
44449,"private static SendReq makeSendReq(Conversation conv,CharSequence subject){
  String[] dests=conv.getRecipients().getNumbers(true);
  if (dests.length == 0) {
    return null;
  }
  SendReq req=new SendReq();
  EncodedStringValue[] encodedNumbers=EncodedStringValue.encodeStrings(dests);
  if (encodedNumbers != null) {
    req.setTo(encodedNumbers);
  }
  if (!TextUtils.isEmpty(subject)) {
    req.setSubject(new EncodedStringValue(subject.toString()));
  }
  req.setDate(System.currentTimeMillis() / 1000L);
  return req;
}","/** 
 * makeSendReq should always return a non-null SendReq, whether the dest addresses are valid or not. 
 */
private static SendReq makeSendReq(Conversation conv,CharSequence subject){
  String[] dests=conv.getRecipients().getNumbers(true);
  SendReq req=new SendReq();
  EncodedStringValue[] encodedNumbers=EncodedStringValue.encodeStrings(dests);
  if (encodedNumbers != null) {
    req.setTo(encodedNumbers);
  }
  if (!TextUtils.isEmpty(subject)) {
    req.setSubject(new EncodedStringValue(subject.toString()));
  }
  req.setDate(System.currentTimeMillis() / 1000L);
  return req;
}",0.8573991031390135
44450,"/** 
 * Send this message over the network.  Will call back with onMessageSent() once it has been dispatched to the telephony stack.  This WorkingMessage object is no longer useful after this method has been called.
 */
public void send(){
  if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  prepareForSave(true);
  final Conversation conv=mConversation;
  String msgTxt=mText.toString();
  if (requiresMms() || addressContainsEmailToMms(conv,msgTxt)) {
    final Uri mmsUri=mMessageUri;
    final PduPersister persister=PduPersister.getPduPersister(mContext);
    final SlideshowModel slideshow=mSlideshow;
    final SendReq sendReq=makeSendReq(conv,mSubject);
    if (sendReq != null) {
      slideshow.prepareForSend();
      new Thread(new Runnable(){
        public void run(){
          sendMmsWorker(conv,mmsUri,persister,slideshow,sendReq);
        }
      }
).start();
    }
 else {
      Log.e(LogTag.TAG,""String_Node_Str"");
    }
  }
 else {
    final String msgText=mText.toString();
    new Thread(new Runnable(){
      public void run(){
        sendSmsWorker(conv,msgText);
      }
    }
).start();
  }
  mDiscarded=true;
}","/** 
 * Send this message over the network.  Will call back with onMessageSent() once it has been dispatched to the telephony stack.  This WorkingMessage object is no longer useful after this method has been called.
 */
public void send(){
  if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  prepareForSave(true);
  final Conversation conv=mConversation;
  String msgTxt=mText.toString();
  if (requiresMms() || addressContainsEmailToMms(conv,msgTxt)) {
    final Uri mmsUri=mMessageUri;
    final PduPersister persister=PduPersister.getPduPersister(mContext);
    final SlideshowModel slideshow=mSlideshow;
    final SendReq sendReq=makeSendReq(conv,mSubject);
    slideshow.prepareForSend();
    new Thread(new Runnable(){
      public void run(){
        sendMmsWorker(conv,mmsUri,persister,slideshow,sendReq);
      }
    }
).start();
  }
 else {
    final String msgText=mText.toString();
    new Thread(new Runnable(){
      public void run(){
        sendSmsWorker(conv,msgText);
      }
    }
).start();
  }
  mDiscarded=true;
}",0.7451499118165785
44451,"private static SendReq makeSendReq(Conversation conv,CharSequence subject){
  String[] dests=conv.getRecipients().getNumbers(true);
  if (dests.length == 0) {
    return null;
  }
  SendReq req=new SendReq();
  EncodedStringValue[] encodedNumbers=EncodedStringValue.encodeStrings(dests);
  if (encodedNumbers != null) {
    req.setTo(encodedNumbers);
  }
  if (!TextUtils.isEmpty(subject)) {
    req.setSubject(new EncodedStringValue(subject.toString()));
  }
  req.setDate(System.currentTimeMillis() / 1000L);
  return req;
}","/** 
 * makeSendReq should always return a non-null SendReq, whether the dest addresses are valid or not. 
 */
private static SendReq makeSendReq(Conversation conv,CharSequence subject){
  String[] dests=conv.getRecipients().getNumbers(true);
  SendReq req=new SendReq();
  EncodedStringValue[] encodedNumbers=EncodedStringValue.encodeStrings(dests);
  if (encodedNumbers != null) {
    req.setTo(encodedNumbers);
  }
  if (!TextUtils.isEmpty(subject)) {
    req.setSubject(new EncodedStringValue(subject.toString()));
  }
  req.setDate(System.currentTimeMillis() / 1000L);
  return req;
}",0.8573991031390135
44452,"/** 
 * Send this message over the network.  Will call back with onMessageSent() once it has been dispatched to the telephony stack.  This WorkingMessage object is no longer useful after this method has been called.
 */
public void send(){
  if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  prepareForSave(true);
  final Conversation conv=mConversation;
  String msgTxt=mText.toString();
  if (requiresMms() || addressContainsEmailToMms(conv,msgTxt)) {
    final Uri mmsUri=mMessageUri;
    final PduPersister persister=PduPersister.getPduPersister(mContext);
    final SlideshowModel slideshow=mSlideshow;
    final SendReq sendReq=makeSendReq(conv,mSubject);
    if (sendReq != null) {
      slideshow.prepareForSend();
      new Thread(new Runnable(){
        public void run(){
          sendMmsWorker(conv,mmsUri,persister,slideshow,sendReq);
        }
      }
).start();
    }
 else {
      Log.e(LogTag.TAG,""String_Node_Str"");
    }
  }
 else {
    final String msgText=mText.toString();
    new Thread(new Runnable(){
      public void run(){
        sendSmsWorker(conv,msgText);
      }
    }
).start();
  }
  mDiscarded=true;
}","/** 
 * Send this message over the network.  Will call back with onMessageSent() once it has been dispatched to the telephony stack.  This WorkingMessage object is no longer useful after this method has been called.
 */
public void send(){
  if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  prepareForSave(true);
  final Conversation conv=mConversation;
  String msgTxt=mText.toString();
  if (requiresMms() || addressContainsEmailToMms(conv,msgTxt)) {
    final Uri mmsUri=mMessageUri;
    final PduPersister persister=PduPersister.getPduPersister(mContext);
    final SlideshowModel slideshow=mSlideshow;
    final SendReq sendReq=makeSendReq(conv,mSubject);
    slideshow.prepareForSend();
    new Thread(new Runnable(){
      public void run(){
        sendMmsWorker(conv,mmsUri,persister,slideshow,sendReq);
      }
    }
).start();
  }
 else {
    final String msgText=mText.toString();
    new Thread(new Runnable(){
      public void run(){
        sendSmsWorker(conv,msgText);
      }
    }
).start();
  }
  mDiscarded=true;
}",0.7451499118165785
44453,"private static SendReq makeSendReq(Conversation conv,CharSequence subject){
  String[] dests=conv.getRecipients().getNumbers(true);
  if (dests.length == 0) {
    return null;
  }
  SendReq req=new SendReq();
  EncodedStringValue[] encodedNumbers=EncodedStringValue.encodeStrings(dests);
  if (encodedNumbers != null) {
    req.setTo(encodedNumbers);
  }
  if (!TextUtils.isEmpty(subject)) {
    req.setSubject(new EncodedStringValue(subject.toString()));
  }
  req.setDate(System.currentTimeMillis() / 1000L);
  return req;
}","/** 
 * makeSendReq should always return a non-null SendReq, whether the dest addresses are valid or not. 
 */
private static SendReq makeSendReq(Conversation conv,CharSequence subject){
  String[] dests=conv.getRecipients().getNumbers(true);
  SendReq req=new SendReq();
  EncodedStringValue[] encodedNumbers=EncodedStringValue.encodeStrings(dests);
  if (encodedNumbers != null) {
    req.setTo(encodedNumbers);
  }
  if (!TextUtils.isEmpty(subject)) {
    req.setSubject(new EncodedStringValue(subject.toString()));
  }
  req.setDate(System.currentTimeMillis() / 1000L);
  return req;
}",0.8573991031390135
44454,"private static void updateContact(final Contact c){
  if (c == null) {
    return;
  }
  c.mIsStale=false;
  if (handleLocalNumber(c)) {
    return;
  }
  ContactInfoCache cache=ContactInfoCache.getInstance();
  ContactInfoCache.CacheEntry entry=cache.getContactInfo(c.mNumber);
synchronized (Cache.getInstance()) {
    if (contactChanged(c,entry)) {
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + entry.name);
      }
      c.mName=entry.name;
      c.mNameAndNumber=formatNameAndNumber(c.mName,c.mNumber);
      c.mLabel=entry.phoneLabel;
      c.mPersonId=entry.person_id;
      c.mPresenceResId=entry.presenceResId;
      c.mPresenceText=entry.presenceText;
      c.mAvatar=entry.mAvatar;
      for (      UpdateListener l : c.mListeners) {
        if (V)         Log.d(TAG,""String_Node_Str"" + l);
        l.onUpdate(c);
      }
    }
  }
}","private static void updateContact(final Contact c){
  if (c == null) {
    return;
  }
  c.mIsStale=false;
  ContactInfoCache cache=ContactInfoCache.getInstance();
  ContactInfoCache.CacheEntry entry=cache.getContactInfo(c.mNumber);
synchronized (Cache.getInstance()) {
    if (contactChanged(c,entry)) {
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + entry.name);
      }
      c.mName=entry.name;
      c.mNameAndNumber=formatNameAndNumber(c.mName,c.mNumber);
      c.mLabel=entry.phoneLabel;
      c.mPersonId=entry.person_id;
      c.mPresenceResId=entry.presenceResId;
      c.mPresenceText=entry.presenceText;
      c.mAvatar=entry.mAvatar;
      handleLocalNumber(c);
      for (      UpdateListener l : c.mListeners) {
        if (V)         Log.d(TAG,""String_Node_Str"" + l);
        l.onUpdate(c);
      }
    }
  }
}",0.9575688073394496
44455,"private boolean canAddToContacts(Contact contact){
  final String name=contact.getName();
  if (!TextUtils.isEmpty(contact.getNumber())) {
    char c=contact.getNumber().charAt(0);
    if (isSpecialChar(c)) {
      return false;
    }
  }
  if (!TextUtils.isEmpty(name)) {
    char c=name.charAt(0);
    if (isSpecialChar(c)) {
      return false;
    }
  }
  if (!(Mms.isEmailAddress(name) || Mms.isPhoneNumber(name))) {
    return false;
  }
  return true;
}","private boolean canAddToContacts(Contact contact){
  final String name=contact.getName();
  if (!TextUtils.isEmpty(contact.getNumber())) {
    char c=contact.getNumber().charAt(0);
    if (isSpecialChar(c)) {
      return false;
    }
  }
  if (!TextUtils.isEmpty(name)) {
    char c=name.charAt(0);
    if (isSpecialChar(c)) {
      return false;
    }
  }
  if (!(Mms.isEmailAddress(name) || Mms.isPhoneNumber(name) || MessageUtils.isLocalNumber(contact.getNumber()))) {
    return false;
  }
  return true;
}",0.9474768280123584
44456,"private static void updateContact(final Contact c){
  if (c == null) {
    return;
  }
  c.mIsStale=false;
  if (handleLocalNumber(c)) {
    return;
  }
  ContactInfoCache cache=ContactInfoCache.getInstance();
  ContactInfoCache.CacheEntry entry=cache.getContactInfo(c.mNumber);
synchronized (Cache.getInstance()) {
    if (contactChanged(c,entry)) {
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + entry.name);
      }
      c.mName=entry.name;
      c.mNameAndNumber=formatNameAndNumber(c.mName,c.mNumber);
      c.mLabel=entry.phoneLabel;
      c.mPersonId=entry.person_id;
      c.mPresenceResId=entry.presenceResId;
      c.mPresenceText=entry.presenceText;
      c.mAvatar=entry.mAvatar;
      for (      UpdateListener l : c.mListeners) {
        if (V)         Log.d(TAG,""String_Node_Str"" + l);
        l.onUpdate(c);
      }
    }
  }
}","private static void updateContact(final Contact c){
  if (c == null) {
    return;
  }
  c.mIsStale=false;
  ContactInfoCache cache=ContactInfoCache.getInstance();
  ContactInfoCache.CacheEntry entry=cache.getContactInfo(c.mNumber);
synchronized (Cache.getInstance()) {
    if (contactChanged(c,entry)) {
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + entry.name);
      }
      c.mName=entry.name;
      c.mNameAndNumber=formatNameAndNumber(c.mName,c.mNumber);
      c.mLabel=entry.phoneLabel;
      c.mPersonId=entry.person_id;
      c.mPresenceResId=entry.presenceResId;
      c.mPresenceText=entry.presenceText;
      c.mAvatar=entry.mAvatar;
      handleLocalNumber(c);
      for (      UpdateListener l : c.mListeners) {
        if (V)         Log.d(TAG,""String_Node_Str"" + l);
        l.onUpdate(c);
      }
    }
  }
}",0.9575688073394496
44457,"private boolean canAddToContacts(Contact contact){
  final String name=contact.getName();
  if (!TextUtils.isEmpty(contact.getNumber())) {
    char c=contact.getNumber().charAt(0);
    if (isSpecialChar(c)) {
      return false;
    }
  }
  if (!TextUtils.isEmpty(name)) {
    char c=name.charAt(0);
    if (isSpecialChar(c)) {
      return false;
    }
  }
  if (!(Mms.isEmailAddress(name) || Mms.isPhoneNumber(name))) {
    return false;
  }
  return true;
}","private boolean canAddToContacts(Contact contact){
  final String name=contact.getName();
  if (!TextUtils.isEmpty(contact.getNumber())) {
    char c=contact.getNumber().charAt(0);
    if (isSpecialChar(c)) {
      return false;
    }
  }
  if (!TextUtils.isEmpty(name)) {
    char c=name.charAt(0);
    if (isSpecialChar(c)) {
      return false;
    }
  }
  if (!(Mms.isEmailAddress(name) || Mms.isPhoneNumber(name) || MessageUtils.isLocalNumber(contact.getNumber()))) {
    return false;
  }
  return true;
}",0.9474768280123584
44458,"private static void updateContact(final Contact c){
  if (c == null) {
    return;
  }
  c.mIsStale=false;
  if (handleLocalNumber(c)) {
    return;
  }
  ContactInfoCache cache=ContactInfoCache.getInstance();
  ContactInfoCache.CacheEntry entry=cache.getContactInfo(c.mNumber);
synchronized (Cache.getInstance()) {
    if (contactChanged(c,entry)) {
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + entry.name);
      }
      c.mName=entry.name;
      c.mNameAndNumber=formatNameAndNumber(c.mName,c.mNumber);
      c.mLabel=entry.phoneLabel;
      c.mPersonId=entry.person_id;
      c.mPresenceResId=entry.presenceResId;
      c.mPresenceText=entry.presenceText;
      c.mAvatar=entry.mAvatar;
      for (      UpdateListener l : c.mListeners) {
        if (V)         Log.d(TAG,""String_Node_Str"" + l);
        l.onUpdate(c);
      }
    }
  }
}","private static void updateContact(final Contact c){
  if (c == null) {
    return;
  }
  c.mIsStale=false;
  ContactInfoCache cache=ContactInfoCache.getInstance();
  ContactInfoCache.CacheEntry entry=cache.getContactInfo(c.mNumber);
synchronized (Cache.getInstance()) {
    if (contactChanged(c,entry)) {
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + entry.name);
      }
      c.mName=entry.name;
      c.mNameAndNumber=formatNameAndNumber(c.mName,c.mNumber);
      c.mLabel=entry.phoneLabel;
      c.mPersonId=entry.person_id;
      c.mPresenceResId=entry.presenceResId;
      c.mPresenceText=entry.presenceText;
      c.mAvatar=entry.mAvatar;
      handleLocalNumber(c);
      for (      UpdateListener l : c.mListeners) {
        if (V)         Log.d(TAG,""String_Node_Str"" + l);
        l.onUpdate(c);
      }
    }
  }
}",0.9575688073394496
44459,"private boolean canAddToContacts(Contact contact){
  final String name=contact.getName();
  if (!TextUtils.isEmpty(contact.getNumber())) {
    char c=contact.getNumber().charAt(0);
    if (isSpecialChar(c)) {
      return false;
    }
  }
  if (!TextUtils.isEmpty(name)) {
    char c=name.charAt(0);
    if (isSpecialChar(c)) {
      return false;
    }
  }
  if (!(Mms.isEmailAddress(name) || Mms.isPhoneNumber(name))) {
    return false;
  }
  return true;
}","private boolean canAddToContacts(Contact contact){
  final String name=contact.getName();
  if (!TextUtils.isEmpty(contact.getNumber())) {
    char c=contact.getNumber().charAt(0);
    if (isSpecialChar(c)) {
      return false;
    }
  }
  if (!TextUtils.isEmpty(name)) {
    char c=name.charAt(0);
    if (isSpecialChar(c)) {
      return false;
    }
  }
  if (!(Mms.isEmailAddress(name) || Mms.isPhoneNumber(name) || MessageUtils.isLocalNumber(contact.getNumber()))) {
    return false;
  }
  return true;
}",0.9474768280123584
44460,"public static boolean isLocalNumber(String number){
  if (Mms.isEmailAddress(number)) {
    return false;
  }
  return PhoneNumberUtils.compare(number,getLocalNumber());
}","public static boolean isLocalNumber(String number){
  if (number == null) {
    return false;
  }
  if (number.indexOf('@') >= 0) {
    return false;
  }
  return PhoneNumberUtils.compare(number,getLocalNumber());
}",0.7668393782383419
44461,"private void updateDraftSmsMessage(long thread_id,String contents){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"",thread_id,contents);
  }
  if (thread_id <= 0) {
    return;
  }
  if (TextUtils.isEmpty(contents)) {
    deleteDraftSmsMessage(thread_id);
    return;
  }
  ContentValues values=new ContentValues(3);
  values.put(Sms.THREAD_ID,thread_id);
  values.put(Sms.BODY,contents);
  values.put(Sms.TYPE,Sms.MESSAGE_TYPE_DRAFT);
  SqliteWrapper.insert(mContext,mContentResolver,Sms.CONTENT_URI,values);
  asyncDeleteDraftMmsMessage(thread_id);
}","private void updateDraftSmsMessage(long thread_id,String contents){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"",thread_id,contents);
  }
  if (thread_id <= 0) {
    return;
  }
  ContentValues values=new ContentValues(3);
  values.put(Sms.THREAD_ID,thread_id);
  values.put(Sms.BODY,contents);
  values.put(Sms.TYPE,Sms.MESSAGE_TYPE_DRAFT);
  SqliteWrapper.insert(mContext,mContentResolver,Sms.CONTENT_URI,values);
  asyncDeleteDraftMmsMessage(thread_id);
}",0.9159741458910434
44462,"/** 
 * Save this message as a draft in the conversation previously specified to   {@link setConversation}.
 */
public void saveDraft(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  if (mDiscarded) {
    return;
  }
  if (mConversation == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  prepareForSave(false);
  if (requiresMms()) {
    asyncUpdateDraftMmsMessage(mConversation);
  }
 else {
    asyncUpdateDraftSmsMessage(mConversation,mText.toString());
  }
  mConversation.setDraftState(true);
}","/** 
 * Save this message as a draft in the conversation previously specified to   {@link setConversation}.
 */
public void saveDraft(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  if (mDiscarded) {
    return;
  }
  if (mConversation == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  prepareForSave(false);
  if (requiresMms()) {
    asyncUpdateDraftMmsMessage(mConversation);
  }
 else {
    String content=mText.toString();
    if (!TextUtils.isEmpty(content)) {
      asyncUpdateDraftSmsMessage(mConversation,content);
    }
  }
  mConversation.setDraftState(true);
}",0.9047224523612262
44463,"public static boolean isLocalNumber(String number){
  if (Mms.isEmailAddress(number)) {
    return false;
  }
  return PhoneNumberUtils.compare(number,getLocalNumber());
}","public static boolean isLocalNumber(String number){
  if (number == null) {
    return false;
  }
  if (number.indexOf('@') >= 0) {
    return false;
  }
  return PhoneNumberUtils.compare(number,getLocalNumber());
}",0.7668393782383419
44464,"public Bitmap getBitmap(){
  Bitmap bm=mBitmapCache.get();
  if (bm == null) {
    bm=createThumbnailBitmap(THUMBNAIL_BOUNDS_LIMIT,getUri());
    mBitmapCache=new SoftReference<Bitmap>(bm);
  }
  return bm;
}","public Bitmap getBitmap(){
  return internalGetBitmap(getUri());
}",0.4233576642335766
44465,"public Bitmap getBitmapWithDrmCheck() throws DrmException {
  Bitmap bm=mBitmapCache.get();
  if (bm == null) {
    bm=createThumbnailBitmap(THUMBNAIL_BOUNDS_LIMIT,getUriWithDrmCheck());
    mBitmapCache=new SoftReference<Bitmap>(bm);
  }
  return bm;
}","public Bitmap getBitmapWithDrmCheck() throws DrmException {
  return internalGetBitmap(getUriWithDrmCheck());
}",0.5659340659340659
44466,"public static boolean isLocalNumber(String number){
  if (Mms.isEmailAddress(number)) {
    return false;
  }
  return PhoneNumberUtils.compare(number,getLocalNumber());
}","public static boolean isLocalNumber(String number){
  if (number == null) {
    return false;
  }
  if (number.indexOf('@') >= 0) {
    return false;
  }
  return PhoneNumberUtils.compare(number,getLocalNumber());
}",0.7668393782383419
44467,"private void updateDraftSmsMessage(long thread_id,String contents){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"",thread_id,contents);
  }
  if (thread_id <= 0) {
    return;
  }
  if (TextUtils.isEmpty(contents)) {
    deleteDraftSmsMessage(thread_id);
    return;
  }
  ContentValues values=new ContentValues(3);
  values.put(Sms.THREAD_ID,thread_id);
  values.put(Sms.BODY,contents);
  values.put(Sms.TYPE,Sms.MESSAGE_TYPE_DRAFT);
  SqliteWrapper.insert(mContext,mContentResolver,Sms.CONTENT_URI,values);
  asyncDeleteDraftMmsMessage(thread_id);
}","private void updateDraftSmsMessage(long thread_id,String contents){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"",thread_id,contents);
  }
  if (thread_id <= 0) {
    return;
  }
  ContentValues values=new ContentValues(3);
  values.put(Sms.THREAD_ID,thread_id);
  values.put(Sms.BODY,contents);
  values.put(Sms.TYPE,Sms.MESSAGE_TYPE_DRAFT);
  SqliteWrapper.insert(mContext,mContentResolver,Sms.CONTENT_URI,values);
  asyncDeleteDraftMmsMessage(thread_id);
}",0.9159741458910434
44468,"/** 
 * Save this message as a draft in the conversation previously specified to   {@link setConversation}.
 */
public void saveDraft(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  if (mDiscarded) {
    return;
  }
  if (mConversation == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  prepareForSave(false);
  if (requiresMms()) {
    asyncUpdateDraftMmsMessage(mConversation);
  }
 else {
    asyncUpdateDraftSmsMessage(mConversation,mText.toString());
  }
  mConversation.setDraftState(true);
}","/** 
 * Save this message as a draft in the conversation previously specified to   {@link setConversation}.
 */
public void saveDraft(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  if (mDiscarded) {
    return;
  }
  if (mConversation == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  prepareForSave(false);
  if (requiresMms()) {
    asyncUpdateDraftMmsMessage(mConversation);
  }
 else {
    String content=mText.toString();
    if (!TextUtils.isEmpty(content)) {
      asyncUpdateDraftSmsMessage(mConversation,content);
    }
  }
  mConversation.setDraftState(true);
}",0.9047224523612262
44469,"public Bitmap getBitmap(){
  Bitmap bm=mBitmapCache.get();
  if (bm == null) {
    bm=createThumbnailBitmap(THUMBNAIL_BOUNDS_LIMIT,getUri());
    mBitmapCache=new SoftReference<Bitmap>(bm);
  }
  return bm;
}","public Bitmap getBitmap(){
  return internalGetBitmap(getUri());
}",0.4233576642335766
44470,"public Bitmap getBitmapWithDrmCheck() throws DrmException {
  Bitmap bm=mBitmapCache.get();
  if (bm == null) {
    bm=createThumbnailBitmap(THUMBNAIL_BOUNDS_LIMIT,getUriWithDrmCheck());
    mBitmapCache=new SoftReference<Bitmap>(bm);
  }
  return bm;
}","public Bitmap getBitmapWithDrmCheck() throws DrmException {
  return internalGetBitmap(getUriWithDrmCheck());
}",0.5659340659340659
44471,"private void updateDraftSmsMessage(long thread_id,String contents){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"",thread_id,contents);
  }
  if (thread_id <= 0) {
    return;
  }
  if (TextUtils.isEmpty(contents)) {
    deleteDraftSmsMessage(thread_id);
    return;
  }
  ContentValues values=new ContentValues(3);
  values.put(Sms.THREAD_ID,thread_id);
  values.put(Sms.BODY,contents);
  values.put(Sms.TYPE,Sms.MESSAGE_TYPE_DRAFT);
  SqliteWrapper.insert(mContext,mContentResolver,Sms.CONTENT_URI,values);
  asyncDeleteDraftMmsMessage(thread_id);
}","private void updateDraftSmsMessage(long thread_id,String contents){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"",thread_id,contents);
  }
  if (thread_id <= 0) {
    return;
  }
  ContentValues values=new ContentValues(3);
  values.put(Sms.THREAD_ID,thread_id);
  values.put(Sms.BODY,contents);
  values.put(Sms.TYPE,Sms.MESSAGE_TYPE_DRAFT);
  SqliteWrapper.insert(mContext,mContentResolver,Sms.CONTENT_URI,values);
  asyncDeleteDraftMmsMessage(thread_id);
}",0.9159741458910434
44472,"/** 
 * Save this message as a draft in the conversation previously specified to   {@link setConversation}.
 */
public void saveDraft(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  if (mDiscarded) {
    return;
  }
  if (mConversation == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  prepareForSave(false);
  if (requiresMms()) {
    asyncUpdateDraftMmsMessage(mConversation);
  }
 else {
    asyncUpdateDraftSmsMessage(mConversation,mText.toString());
  }
  mConversation.setDraftState(true);
}","/** 
 * Save this message as a draft in the conversation previously specified to   {@link setConversation}.
 */
public void saveDraft(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  if (mDiscarded) {
    return;
  }
  if (mConversation == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  prepareForSave(false);
  if (requiresMms()) {
    asyncUpdateDraftMmsMessage(mConversation);
  }
 else {
    String content=mText.toString();
    if (!TextUtils.isEmpty(content)) {
      asyncUpdateDraftSmsMessage(mConversation,content);
    }
  }
  mConversation.setDraftState(true);
}",0.9047224523612262
44473,"public static boolean isLocalNumber(String number){
  return PhoneNumberUtils.compare(number,getLocalNumber());
}","public static boolean isLocalNumber(String number){
  if (Mms.isEmailAddress(number)) {
    return false;
  }
  return PhoneNumberUtils.compare(number,getLocalNumber());
}",0.795774647887324
44474,"public Bitmap getBitmap(){
  Bitmap bm=mBitmapCache.get();
  if (bm == null) {
    bm=createThumbnailBitmap(THUMBNAIL_BOUNDS_LIMIT,getUri());
    mBitmapCache=new SoftReference<Bitmap>(bm);
  }
  return bm;
}","public Bitmap getBitmap(){
  return internalGetBitmap(getUri());
}",0.4233576642335766
44475,"public Bitmap getBitmapWithDrmCheck() throws DrmException {
  Bitmap bm=mBitmapCache.get();
  if (bm == null) {
    bm=createThumbnailBitmap(THUMBNAIL_BOUNDS_LIMIT,getUriWithDrmCheck());
    mBitmapCache=new SoftReference<Bitmap>(bm);
  }
  return bm;
}","public Bitmap getBitmapWithDrmCheck() throws DrmException {
  return internalGetBitmap(getUriWithDrmCheck());
}",0.5659340659340659
44476,"private void updateDraftSmsMessage(long thread_id,String contents){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"",thread_id,contents);
  }
  if (thread_id <= 0) {
    return;
  }
  if (TextUtils.isEmpty(contents)) {
    deleteDraftSmsMessage(thread_id);
    return;
  }
  ContentValues values=new ContentValues(3);
  values.put(Sms.THREAD_ID,thread_id);
  values.put(Sms.BODY,contents);
  values.put(Sms.TYPE,Sms.MESSAGE_TYPE_DRAFT);
  SqliteWrapper.insert(mContext,mContentResolver,Sms.CONTENT_URI,values);
  asyncDeleteDraftMmsMessage(thread_id);
}","private void updateDraftSmsMessage(long thread_id,String contents){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"",thread_id,contents);
  }
  if (thread_id <= 0) {
    return;
  }
  ContentValues values=new ContentValues(3);
  values.put(Sms.THREAD_ID,thread_id);
  values.put(Sms.BODY,contents);
  values.put(Sms.TYPE,Sms.MESSAGE_TYPE_DRAFT);
  SqliteWrapper.insert(mContext,mContentResolver,Sms.CONTENT_URI,values);
  asyncDeleteDraftMmsMessage(thread_id);
}",0.9159741458910434
44477,"/** 
 * Save this message as a draft in the conversation previously specified to   {@link setConversation}.
 */
public void saveDraft(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  if (mDiscarded) {
    return;
  }
  if (mConversation == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  prepareForSave(false);
  if (requiresMms()) {
    asyncUpdateDraftMmsMessage(mConversation);
  }
 else {
    asyncUpdateDraftSmsMessage(mConversation,mText.toString());
  }
  mConversation.setDraftState(true);
}","/** 
 * Save this message as a draft in the conversation previously specified to   {@link setConversation}.
 */
public void saveDraft(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  if (mDiscarded) {
    return;
  }
  if (mConversation == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  prepareForSave(false);
  if (requiresMms()) {
    asyncUpdateDraftMmsMessage(mConversation);
  }
 else {
    String content=mText.toString();
    if (!TextUtils.isEmpty(content)) {
      asyncUpdateDraftSmsMessage(mConversation,content);
    }
  }
  mConversation.setDraftState(true);
}",0.9047224523612262
44478,"private void updateDraftSmsMessage(long thread_id,String contents){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"",thread_id,contents);
  }
  if (thread_id <= 0) {
    return;
  }
  if (TextUtils.isEmpty(contents)) {
    deleteDraftSmsMessage(thread_id);
    return;
  }
  ContentValues values=new ContentValues(3);
  values.put(Sms.THREAD_ID,thread_id);
  values.put(Sms.BODY,contents);
  values.put(Sms.TYPE,Sms.MESSAGE_TYPE_DRAFT);
  SqliteWrapper.insert(mContext,mContentResolver,Sms.CONTENT_URI,values);
  asyncDeleteDraftMmsMessage(thread_id);
}","private void updateDraftSmsMessage(long thread_id,String contents){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"",thread_id,contents);
  }
  if (thread_id <= 0) {
    return;
  }
  ContentValues values=new ContentValues(3);
  values.put(Sms.THREAD_ID,thread_id);
  values.put(Sms.BODY,contents);
  values.put(Sms.TYPE,Sms.MESSAGE_TYPE_DRAFT);
  SqliteWrapper.insert(mContext,mContentResolver,Sms.CONTENT_URI,values);
  asyncDeleteDraftMmsMessage(thread_id);
}",0.9159741458910434
44479,"/** 
 * Save this message as a draft in the conversation previously specified to   {@link setConversation}.
 */
public void saveDraft(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  if (mDiscarded) {
    return;
  }
  if (mConversation == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  prepareForSave(false);
  if (requiresMms()) {
    asyncUpdateDraftMmsMessage(mConversation);
  }
 else {
    asyncUpdateDraftSmsMessage(mConversation,mText.toString());
  }
  mConversation.setDraftState(true);
}","/** 
 * Save this message as a draft in the conversation previously specified to   {@link setConversation}.
 */
public void saveDraft(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"");
  }
  if (mDiscarded) {
    return;
  }
  if (mConversation == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  prepareForSave(false);
  if (requiresMms()) {
    asyncUpdateDraftMmsMessage(mConversation);
  }
 else {
    String content=mText.toString();
    if (!TextUtils.isEmpty(content)) {
      asyncUpdateDraftSmsMessage(mConversation,content);
    }
  }
  mConversation.setDraftState(true);
}",0.9047224523612262
44480,"static Contact get(String number){
  if (Mms.isEmailAddress(number))   return getEmail(number);
synchronized (sInstance) {
    for (    Contact c : sInstance.mCache) {
      if (PhoneNumberUtils.compare(number,c.mNumber)) {
        return c;
      }
    }
    return null;
  }
}","static Contact get(String number){
  if (Mms.isEmailAddress(number))   return getEmail(number);
synchronized (sInstance) {
    for (    Contact c : sInstance.mCache) {
      if (number.equals(c.mNumber) || PhoneNumberUtils.compare(number,c.mNumber)) {
        return c;
      }
    }
    return null;
  }
}",0.952054794520548
44481,"static void dumpCache(){
  if (DEBUG) {
synchronized (sInstance) {
      Log.v(TAG,""String_Node_Str"");
      for (      Conversation c : sInstance.mCache) {
        Log.v(TAG,""String_Node_Str"" + c + ""String_Node_Str""+ c.getThreadId()+ ""String_Node_Str""+ c.hashCode());
      }
    }
  }
}","static void dumpCache(){
  if (DEBUG) {
synchronized (sInstance) {
      LogTag.debug(""String_Node_Str"");
      for (      Conversation c : sInstance.mCache) {
        LogTag.debug(""String_Node_Str"" + c + ""String_Node_Str""+ c.getThreadId()+ ""String_Node_Str""+ c.hashCode());
      }
    }
  }
}",0.2989690721649484
44482,"/** 
 * Put the specified conversation in the cache.  The caller should not place an already-existing conversation in the cache, but rather update it in place.
 */
static void put(Conversation c){
synchronized (sInstance) {
    if (DEBUG) {
      Log.v(TAG,""String_Node_Str"" + c + ""String_Node_Str""+ c.getThreadId()+ ""String_Node_Str""+ c.hashCode());
      dumpCache();
    }
    if (sInstance.mCache.contains(c)) {
      throw new IllegalStateException(""String_Node_Str"" + c + ""String_Node_Str""+ c.mThreadId);
    }
    sInstance.mCache.add(c);
  }
}","/** 
 * Put the specified conversation in the cache.  The caller should not place an already-existing conversation in the cache, but rather update it in place.
 */
static void put(Conversation c){
synchronized (sInstance) {
    if (DEBUG) {
      LogTag.debug(""String_Node_Str"" + c + ""String_Node_Str""+ c.getThreadId()+ ""String_Node_Str""+ c.hashCode());
      dumpCache();
    }
    if (sInstance.mCache.contains(c)) {
      throw new IllegalStateException(""String_Node_Str"" + c + ""String_Node_Str""+ c.mThreadId);
    }
    sInstance.mCache.add(c);
  }
}",0.986425339366516
44483,"static void remove(long threadId){
  if (DEBUG) {
    Log.v(TAG,""String_Node_Str"" + threadId);
    dumpCache();
  }
  for (  Conversation c : sInstance.mCache) {
    if (c.getThreadId() == threadId) {
      sInstance.mCache.remove(c);
      return;
    }
  }
}","static void remove(long threadId){
  if (DEBUG) {
    LogTag.debug(""String_Node_Str"" + threadId);
    dumpCache();
  }
  for (  Conversation c : sInstance.mCache) {
    if (c.getThreadId() == threadId) {
      sInstance.mCache.remove(c);
      return;
    }
  }
}",0.97131931166348
44484,"/** 
 * Return the conversation with the specified recipient list, or null if it's not in cache.
 */
static Conversation get(ContactList list){
synchronized (sInstance) {
    if (DEBUG) {
      Log.v(TAG,""String_Node_Str"" + list);
      dumpCache();
    }
    for (    Conversation c : sInstance.mCache) {
      if (c.getRecipients().equals(list)) {
        return c;
      }
    }
  }
  return null;
}","/** 
 * Return the conversation with the specified recipient list, or null if it's not in cache.
 */
static Conversation get(ContactList list){
synchronized (sInstance) {
    if (DEBUG) {
      LogTag.debug(""String_Node_Str"" + list);
      dumpCache();
    }
    for (    Conversation c : sInstance.mCache) {
      if (c.getRecipients().equals(list)) {
        return c;
      }
    }
  }
  return null;
}",0.9814126394052044
44485,"private static void cacheAllThreads(Context context){
synchronized (Cache.getInstance()) {
    if (DEBUG) {
      Log.v(TAG,""String_Node_Str"");
    }
    HashSet<Long> threadsOnDisk=new HashSet<Long>();
    Cursor c=context.getContentResolver().query(sAllThreadsUri,ALL_THREADS_PROJECTION,null,null,null);
    try {
      while (c.moveToNext()) {
        long threadId=c.getLong(ID);
        threadsOnDisk.add(threadId);
        Conversation conv=Cache.get(threadId);
        if (conv == null) {
          conv=new Conversation(context,c,true);
          try {
            Cache.put(conv);
          }
 catch (          IllegalStateException e) {
            Log.e(TAG,""String_Node_Str"");
          }
        }
 else {
          fillFromCursor(context,conv,c,true);
        }
      }
    }
  finally {
      c.close();
    }
    Cache.keepOnly(threadsOnDisk);
  }
}","private static void cacheAllThreads(Context context){
synchronized (Cache.getInstance()) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      LogTag.debug(""String_Node_Str"");
    }
    HashSet<Long> threadsOnDisk=new HashSet<Long>();
    Cursor c=context.getContentResolver().query(sAllThreadsUri,ALL_THREADS_PROJECTION,null,null,null);
    try {
      while (c.moveToNext()) {
        long threadId=c.getLong(ID);
        threadsOnDisk.add(threadId);
        Conversation conv=Cache.get(threadId);
        if (conv == null) {
          conv=new Conversation(context,c,true);
          try {
            Cache.put(conv);
          }
 catch (          IllegalStateException e) {
            LogTag.error(""String_Node_Str"");
          }
        }
 else {
          fillFromCursor(context,conv,c,true);
        }
      }
    }
  finally {
      c.close();
    }
    Cache.keepOnly(threadsOnDisk);
  }
}",0.9609949123798756
44486,"/** 
 * Guarantees that the conversation has been created in the database. This will make a blocking database call if it hasn't.
 * @return The thread ID of this conversation in the database
 */
public synchronized long ensureThreadId(){
  if (DEBUG) {
    Log.v(""String_Node_Str"",""String_Node_Str"" + mThreadId);
  }
  if (mThreadId <= 0) {
    mThreadId=getOrCreateThreadId(mContext,mRecipients);
  }
  if (DEBUG) {
    Log.v(""String_Node_Str"",""String_Node_Str"" + mThreadId);
  }
  return mThreadId;
}","/** 
 * Guarantees that the conversation has been created in the database. This will make a blocking database call if it hasn't.
 * @return The thread ID of this conversation in the database
 */
public synchronized long ensureThreadId(){
  if (DEBUG) {
    LogTag.debug(""String_Node_Str"" + mThreadId);
  }
  if (mThreadId <= 0) {
    mThreadId=getOrCreateThreadId(mContext,mRecipients);
  }
  if (DEBUG) {
    LogTag.debug(""String_Node_Str"" + mThreadId);
  }
  return mThreadId;
}",0.9429735234215886
44487,"public synchronized void clearThreadId(){
  Cache.remove(mThreadId);
  mThreadId=0;
}","public synchronized void clearThreadId(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"" + mThreadId + ""String_Node_Str"");
  }
  Cache.remove(mThreadId);
  mThreadId=0;
}",0.584192439862543
44488,"private boolean loadFromThreadId(long threadId){
  Cursor c=mContext.getContentResolver().query(sAllThreadsUri,ALL_THREADS_PROJECTION,""String_Node_Str"" + Long.toString(threadId),null,null);
  try {
    if (c.moveToFirst()) {
      fillFromCursor(mContext,this,c,true);
    }
 else {
      Log.e(TAG,""String_Node_Str"" + threadId);
      return false;
    }
  }
  finally {
    c.close();
  }
  return true;
}","private boolean loadFromThreadId(long threadId){
  Cursor c=mContext.getContentResolver().query(sAllThreadsUri,ALL_THREADS_PROJECTION,""String_Node_Str"" + Long.toString(threadId),null,null);
  try {
    if (c.moveToFirst()) {
      fillFromCursor(mContext,this,c,true);
    }
 else {
      LogTag.error(""String_Node_Str"" + threadId);
      return false;
    }
  }
  finally {
    c.close();
  }
  return true;
}",0.9791921664626684
44489,"private static long getOrCreateThreadId(Context context,ContactList list){
  HashSet<String> recipients=new HashSet<String>();
  Contact cacheContact=null;
  for (  Contact c : list) {
    cacheContact=Contact.get(c.getNumber(),true);
    if (cacheContact != null) {
      recipients.add(cacheContact.getNumber());
    }
 else {
      recipients.add(c.getNumber());
    }
  }
  return Threads.getOrCreateThreadId(context,recipients);
}","private static long getOrCreateThreadId(Context context,ContactList list){
  HashSet<String> recipients=new HashSet<String>();
  Contact cacheContact=null;
  for (  Contact c : list) {
    cacheContact=Contact.get(c.getNumber(),true);
    if (cacheContact != null) {
      recipients.add(cacheContact.getNumber());
    }
 else {
      recipients.add(c.getNumber());
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"",recipients);
  }
  return Threads.getOrCreateThreadId(context,recipients);
}",0.8474226804123711
44490,"static void dumpCache(){
  if (DEBUG) {
synchronized (sInstance) {
      Log.v(TAG,""String_Node_Str"");
      for (      Conversation c : sInstance.mCache) {
        Log.v(TAG,""String_Node_Str"" + c + ""String_Node_Str""+ c.getThreadId()+ ""String_Node_Str""+ c.hashCode());
      }
    }
  }
}","static void dumpCache(){
  if (DEBUG) {
synchronized (sInstance) {
      LogTag.debug(""String_Node_Str"");
      for (      Conversation c : sInstance.mCache) {
        LogTag.debug(""String_Node_Str"" + c + ""String_Node_Str""+ c.getThreadId()+ ""String_Node_Str""+ c.hashCode());
      }
    }
  }
}",0.2989690721649484
44491,"/** 
 * Put the specified conversation in the cache.  The caller should not place an already-existing conversation in the cache, but rather update it in place.
 */
static void put(Conversation c){
synchronized (sInstance) {
    if (DEBUG) {
      Log.v(TAG,""String_Node_Str"" + c + ""String_Node_Str""+ c.getThreadId()+ ""String_Node_Str""+ c.hashCode());
      dumpCache();
    }
    if (sInstance.mCache.contains(c)) {
      throw new IllegalStateException(""String_Node_Str"" + c + ""String_Node_Str""+ c.mThreadId);
    }
    sInstance.mCache.add(c);
  }
}","/** 
 * Put the specified conversation in the cache.  The caller should not place an already-existing conversation in the cache, but rather update it in place.
 */
static void put(Conversation c){
synchronized (sInstance) {
    if (DEBUG) {
      LogTag.debug(""String_Node_Str"" + c + ""String_Node_Str""+ c.getThreadId()+ ""String_Node_Str""+ c.hashCode());
      dumpCache();
    }
    if (sInstance.mCache.contains(c)) {
      throw new IllegalStateException(""String_Node_Str"" + c + ""String_Node_Str""+ c.mThreadId);
    }
    sInstance.mCache.add(c);
  }
}",0.986425339366516
44492,"static void remove(long threadId){
  if (DEBUG) {
    Log.v(TAG,""String_Node_Str"" + threadId);
    dumpCache();
  }
  for (  Conversation c : sInstance.mCache) {
    if (c.getThreadId() == threadId) {
      sInstance.mCache.remove(c);
      return;
    }
  }
}","static void remove(long threadId){
  if (DEBUG) {
    LogTag.debug(""String_Node_Str"" + threadId);
    dumpCache();
  }
  for (  Conversation c : sInstance.mCache) {
    if (c.getThreadId() == threadId) {
      sInstance.mCache.remove(c);
      return;
    }
  }
}",0.97131931166348
44493,"/** 
 * Return the conversation with the specified recipient list, or null if it's not in cache.
 */
static Conversation get(ContactList list){
synchronized (sInstance) {
    if (DEBUG) {
      Log.v(TAG,""String_Node_Str"" + list);
      dumpCache();
    }
    for (    Conversation c : sInstance.mCache) {
      if (c.getRecipients().equals(list)) {
        return c;
      }
    }
  }
  return null;
}","/** 
 * Return the conversation with the specified recipient list, or null if it's not in cache.
 */
static Conversation get(ContactList list){
synchronized (sInstance) {
    if (DEBUG) {
      LogTag.debug(""String_Node_Str"" + list);
      dumpCache();
    }
    for (    Conversation c : sInstance.mCache) {
      if (c.getRecipients().equals(list)) {
        return c;
      }
    }
  }
  return null;
}",0.9814126394052044
44494,"private static void cacheAllThreads(Context context){
synchronized (Cache.getInstance()) {
    if (DEBUG) {
      Log.v(TAG,""String_Node_Str"");
    }
    HashSet<Long> threadsOnDisk=new HashSet<Long>();
    Cursor c=context.getContentResolver().query(sAllThreadsUri,ALL_THREADS_PROJECTION,null,null,null);
    try {
      while (c.moveToNext()) {
        long threadId=c.getLong(ID);
        threadsOnDisk.add(threadId);
        Conversation conv=Cache.get(threadId);
        if (conv == null) {
          conv=new Conversation(context,c,true);
          try {
            Cache.put(conv);
          }
 catch (          IllegalStateException e) {
            Log.e(TAG,""String_Node_Str"");
          }
        }
 else {
          fillFromCursor(context,conv,c,true);
        }
      }
    }
  finally {
      c.close();
    }
    Cache.keepOnly(threadsOnDisk);
  }
}","private static void cacheAllThreads(Context context){
synchronized (Cache.getInstance()) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      LogTag.debug(""String_Node_Str"");
    }
    HashSet<Long> threadsOnDisk=new HashSet<Long>();
    Cursor c=context.getContentResolver().query(sAllThreadsUri,ALL_THREADS_PROJECTION,null,null,null);
    try {
      while (c.moveToNext()) {
        long threadId=c.getLong(ID);
        threadsOnDisk.add(threadId);
        Conversation conv=Cache.get(threadId);
        if (conv == null) {
          conv=new Conversation(context,c,true);
          try {
            Cache.put(conv);
          }
 catch (          IllegalStateException e) {
            LogTag.error(""String_Node_Str"");
          }
        }
 else {
          fillFromCursor(context,conv,c,true);
        }
      }
    }
  finally {
      c.close();
    }
    Cache.keepOnly(threadsOnDisk);
  }
}",0.9609949123798756
44495,"/** 
 * Guarantees that the conversation has been created in the database. This will make a blocking database call if it hasn't.
 * @return The thread ID of this conversation in the database
 */
public synchronized long ensureThreadId(){
  if (DEBUG) {
    Log.v(""String_Node_Str"",""String_Node_Str"" + mThreadId);
  }
  if (mThreadId <= 0) {
    mThreadId=getOrCreateThreadId(mContext,mRecipients);
  }
  if (DEBUG) {
    Log.v(""String_Node_Str"",""String_Node_Str"" + mThreadId);
  }
  return mThreadId;
}","/** 
 * Guarantees that the conversation has been created in the database. This will make a blocking database call if it hasn't.
 * @return The thread ID of this conversation in the database
 */
public synchronized long ensureThreadId(){
  if (DEBUG) {
    LogTag.debug(""String_Node_Str"" + mThreadId);
  }
  if (mThreadId <= 0) {
    mThreadId=getOrCreateThreadId(mContext,mRecipients);
  }
  if (DEBUG) {
    LogTag.debug(""String_Node_Str"" + mThreadId);
  }
  return mThreadId;
}",0.9429735234215886
44496,"public synchronized void clearThreadId(){
  Cache.remove(mThreadId);
  mThreadId=0;
}","public synchronized void clearThreadId(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"" + mThreadId + ""String_Node_Str"");
  }
  Cache.remove(mThreadId);
  mThreadId=0;
}",0.584192439862543
44497,"private boolean loadFromThreadId(long threadId){
  Cursor c=mContext.getContentResolver().query(sAllThreadsUri,ALL_THREADS_PROJECTION,""String_Node_Str"" + Long.toString(threadId),null,null);
  try {
    if (c.moveToFirst()) {
      fillFromCursor(mContext,this,c,true);
    }
 else {
      Log.e(TAG,""String_Node_Str"" + threadId);
      return false;
    }
  }
  finally {
    c.close();
  }
  return true;
}","private boolean loadFromThreadId(long threadId){
  Cursor c=mContext.getContentResolver().query(sAllThreadsUri,ALL_THREADS_PROJECTION,""String_Node_Str"" + Long.toString(threadId),null,null);
  try {
    if (c.moveToFirst()) {
      fillFromCursor(mContext,this,c,true);
    }
 else {
      LogTag.error(""String_Node_Str"" + threadId);
      return false;
    }
  }
  finally {
    c.close();
  }
  return true;
}",0.9791921664626684
44498,"private static long getOrCreateThreadId(Context context,ContactList list){
  HashSet<String> recipients=new HashSet<String>();
  Contact cacheContact=null;
  for (  Contact c : list) {
    cacheContact=Contact.get(c.getNumber(),true);
    if (cacheContact != null) {
      recipients.add(cacheContact.getNumber());
    }
 else {
      recipients.add(c.getNumber());
    }
  }
  return Threads.getOrCreateThreadId(context,recipients);
}","private static long getOrCreateThreadId(Context context,ContactList list){
  HashSet<String> recipients=new HashSet<String>();
  Contact cacheContact=null;
  for (  Contact c : list) {
    cacheContact=Contact.get(c.getNumber(),true);
    if (cacheContact != null) {
      recipients.add(cacheContact.getNumber());
    }
 else {
      recipients.add(c.getNumber());
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"",recipients);
  }
  return Threads.getOrCreateThreadId(context,recipients);
}",0.8474226804123711
44499,"@Override public void process(){
  PduPersister persister=PduPersister.getPduPersister(mContext);
  try {
    ReadRecInd readRecInd=(ReadRecInd)persister.load(mReadReportURI);
    byte[] postingData=new PduComposer(mContext,readRecInd).make();
    sendPdu(postingData);
    Uri uri=persister.move(mReadReportURI,Sent.CONTENT_URI);
    mTransactionState.setState(TransactionState.SUCCESS);
    mTransactionState.setContentUri(uri);
  }
 catch (  IOException e) {
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"",e);
    }
  }
catch (  MmsException e) {
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"",e);
    }
  }
catch (  RuntimeException e) {
    if (LOCAL_LOGV) {
      Log.e(TAG,""String_Node_Str"",e);
    }
  }
 finally {
    if (mTransactionState.getState() != TransactionState.SUCCESS) {
      mTransactionState.setState(TransactionState.FAILED);
      mTransactionState.setContentUri(mReadReportURI);
    }
    notifyObservers();
  }
}","@Override public void process(){
  PduPersister persister=PduPersister.getPduPersister(mContext);
  try {
    ReadRecInd readRecInd=(ReadRecInd)persister.load(mReadReportURI);
    String lineNumber=MessageUtils.getLocalNumber();
    readRecInd.setFrom(new EncodedStringValue(lineNumber));
    byte[] postingData=new PduComposer(mContext,readRecInd).make();
    sendPdu(postingData);
    Uri uri=persister.move(mReadReportURI,Sent.CONTENT_URI);
    mTransactionState.setState(TransactionState.SUCCESS);
    mTransactionState.setContentUri(uri);
  }
 catch (  IOException e) {
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"",e);
    }
  }
catch (  MmsException e) {
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"",e);
    }
  }
catch (  RuntimeException e) {
    if (LOCAL_LOGV) {
      Log.e(TAG,""String_Node_Str"",e);
    }
  }
 finally {
    if (mTransactionState.getState() != TransactionState.SUCCESS) {
      mTransactionState.setState(TransactionState.FAILED);
      mTransactionState.setContentUri(mReadReportURI);
    }
    notifyObservers();
  }
}",0.9442525900345338
44500,"private void sendAcknowledgeInd(RetrieveConf rc) throws MmsException, IOException {
  byte[] tranId=rc.getTransactionId();
  if (tranId != null) {
    AcknowledgeInd acknowledgeInd=new AcknowledgeInd(PduHeaders.CURRENT_MMS_VERSION,tranId);
    if (MmsConfig.getNotifyWapMMSC()) {
      sendPdu(new PduComposer(mContext,acknowledgeInd).make(),mContentLocation);
    }
 else {
      sendPdu(new PduComposer(mContext,acknowledgeInd).make());
    }
  }
}","private void sendAcknowledgeInd(RetrieveConf rc) throws MmsException, IOException {
  byte[] tranId=rc.getTransactionId();
  if (tranId != null) {
    AcknowledgeInd acknowledgeInd=new AcknowledgeInd(PduHeaders.CURRENT_MMS_VERSION,tranId);
    String lineNumber=MessageUtils.getLocalNumber();
    acknowledgeInd.setFrom(new EncodedStringValue(lineNumber));
    if (MmsConfig.getNotifyWapMMSC()) {
      sendPdu(new PduComposer(mContext,acknowledgeInd).make(),mContentLocation);
    }
 else {
      sendPdu(new PduComposer(mContext,acknowledgeInd).make());
    }
  }
}",0.8849557522123894
44501,"public void run(){
  try {
    RateController rateCtlr=RateController.getInstance();
    if (rateCtlr.isLimitSurpassed() && !rateCtlr.isAllowedByUser()) {
      Log.e(TAG,""String_Node_Str"");
      return;
    }
    PduPersister persister=PduPersister.getPduPersister(mContext);
    SendReq sendReq=(SendReq)persister.load(mSendReqURI);
    long date=System.currentTimeMillis() / 1000L;
    sendReq.setDate(date);
    ContentValues values=new ContentValues(1);
    values.put(Mms.DATE,date);
    SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
    long tokenKey=ContentUris.parseId(mSendReqURI);
    byte[] response=sendPdu(SendingProgressTokenManager.get(tokenKey),new PduComposer(mContext,sendReq).make());
    SendingProgressTokenManager.remove(tokenKey);
    if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
      String respStr=new String(response);
      Log.d(TAG,""String_Node_Str"" + mId + ""String_Node_Str""+ respStr);
    }
    SendConf conf=(SendConf)new PduParser(response).parse();
    if (conf == null) {
      Log.e(TAG,""String_Node_Str"");
    }
    byte[] reqId=sendReq.getTransactionId();
    byte[] confId=conf.getTransactionId();
    if (!Arrays.equals(reqId,confId)) {
      Log.e(TAG,""String_Node_Str"" + new String(reqId) + ""String_Node_Str""+ new String(confId));
      return;
    }
    values=new ContentValues(2);
    int respStatus=conf.getResponseStatus();
    values.put(Mms.RESPONSE_STATUS,respStatus);
    if (respStatus != PduHeaders.RESPONSE_STATUS_OK) {
      SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
      Log.e(TAG,""String_Node_Str"" + respStatus);
      return;
    }
    String messageId=PduPersister.toIsoString(conf.getMessageId());
    values.put(Mms.MESSAGE_ID,messageId);
    SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
    Uri uri=persister.move(mSendReqURI,Sent.CONTENT_URI);
    mTransactionState.setState(TransactionState.SUCCESS);
    mTransactionState.setContentUri(uri);
  }
 catch (  Throwable t) {
    Log.e(TAG,Log.getStackTraceString(t));
  }
 finally {
    if (mTransactionState.getState() != TransactionState.SUCCESS) {
      mTransactionState.setState(TransactionState.FAILED);
      mTransactionState.setContentUri(mSendReqURI);
      Log.e(TAG,""String_Node_Str"");
    }
    notifyObservers();
  }
}","public void run(){
  try {
    RateController rateCtlr=RateController.getInstance();
    if (rateCtlr.isLimitSurpassed() && !rateCtlr.isAllowedByUser()) {
      Log.e(TAG,""String_Node_Str"");
      return;
    }
    PduPersister persister=PduPersister.getPduPersister(mContext);
    SendReq sendReq=(SendReq)persister.load(mSendReqURI);
    long date=System.currentTimeMillis() / 1000L;
    sendReq.setDate(date);
    ContentValues values=new ContentValues(1);
    values.put(Mms.DATE,date);
    SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
    String lineNumber=MessageUtils.getLocalNumber();
    sendReq.setFrom(new EncodedStringValue(lineNumber));
    long tokenKey=ContentUris.parseId(mSendReqURI);
    byte[] response=sendPdu(SendingProgressTokenManager.get(tokenKey),new PduComposer(mContext,sendReq).make());
    SendingProgressTokenManager.remove(tokenKey);
    if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
      String respStr=new String(response);
      Log.d(TAG,""String_Node_Str"" + mId + ""String_Node_Str""+ respStr);
    }
    SendConf conf=(SendConf)new PduParser(response).parse();
    if (conf == null) {
      Log.e(TAG,""String_Node_Str"");
    }
    byte[] reqId=sendReq.getTransactionId();
    byte[] confId=conf.getTransactionId();
    if (!Arrays.equals(reqId,confId)) {
      Log.e(TAG,""String_Node_Str"" + new String(reqId) + ""String_Node_Str""+ new String(confId));
      return;
    }
    values=new ContentValues(2);
    int respStatus=conf.getResponseStatus();
    values.put(Mms.RESPONSE_STATUS,respStatus);
    if (respStatus != PduHeaders.RESPONSE_STATUS_OK) {
      SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
      Log.e(TAG,""String_Node_Str"" + respStatus);
      return;
    }
    String messageId=PduPersister.toIsoString(conf.getMessageId());
    values.put(Mms.MESSAGE_ID,messageId);
    SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
    Uri uri=persister.move(mSendReqURI,Sent.CONTENT_URI);
    mTransactionState.setState(TransactionState.SUCCESS);
    mTransactionState.setContentUri(uri);
  }
 catch (  Throwable t) {
    Log.e(TAG,Log.getStackTraceString(t));
  }
 finally {
    if (mTransactionState.getState() != TransactionState.SUCCESS) {
      mTransactionState.setState(TransactionState.FAILED);
      mTransactionState.setContentUri(mSendReqURI);
      Log.e(TAG,""String_Node_Str"");
    }
    notifyObservers();
  }
}",0.977560179518564
44502,"private static String getLocalNumber(){
  if (null == sLocalNumber) {
    sLocalNumber=TelephonyManager.getDefault().getLine1Number();
  }
  return sLocalNumber;
}","public static String getLocalNumber(){
  if (null == sLocalNumber) {
    sLocalNumber=TelephonyManager.getDefault().getLine1Number();
  }
  return sLocalNumber;
}",0.9723076923076924
44503,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (LOCAL_LOGV) {
    Log.v(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode+ ""String_Node_Str""+ data);
  }
  mWaitingForSubActivity=false;
  if (data == null) {
    return;
  }
switch (requestCode) {
case REQUEST_CODE_CREATE_SLIDESHOW:
    if (data != null) {
      WorkingMessage newMessage=WorkingMessage.load(this,data.getData());
      if (newMessage != null) {
        mWorkingMessage=newMessage;
        mWorkingMessage.setConversation(mConversation);
        mAttachmentEditor.update(mWorkingMessage);
        drawTopPanel();
        updateSendButtonState();
      }
    }
  break;
case REQUEST_CODE_TAKE_PICTURE:
Bitmap bitmap=(Bitmap)data.getParcelableExtra(""String_Node_Str"");
if (bitmap == null) {
handleAddAttachmentError(WorkingMessage.UNKNOWN_ERROR,R.string.type_picture);
return;
}
addImage(bitmap);
break;
case REQUEST_CODE_ATTACH_IMAGE:
addImage(data.getData(),false);
break;
case REQUEST_CODE_TAKE_VIDEO:
case REQUEST_CODE_ATTACH_VIDEO:
addVideo(data.getData(),false);
break;
case REQUEST_CODE_ATTACH_SOUND:
Uri uri=(Uri)data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
if (Settings.System.DEFAULT_RINGTONE_URI.equals(uri)) {
break;
}
addAudio(uri);
break;
case REQUEST_CODE_RECORD_SOUND:
addAudio(data.getData());
break;
case REQUEST_CODE_ECM_EXIT_DIALOG:
boolean outOfEmergencyMode=data.getBooleanExtra(EXIT_ECM_RESULT,false);
if (outOfEmergencyMode) {
sendMessage(false);
}
break;
default :
break;
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (DEBUG) {
    log(""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode+ ""String_Node_Str""+ data);
  }
  mWaitingForSubActivity=false;
  if (requestCode != REQUEST_CODE_TAKE_PICTURE) {
    if (data == null) {
      return;
    }
  }
 else   if (resultCode != RESULT_OK) {
    if (DEBUG)     log(""String_Node_Str"" + resultCode);
    return;
  }
switch (requestCode) {
case REQUEST_CODE_CREATE_SLIDESHOW:
    if (data != null) {
      WorkingMessage newMessage=WorkingMessage.load(this,data.getData());
      if (newMessage != null) {
        mWorkingMessage=newMessage;
        mWorkingMessage.setConversation(mConversation);
        mAttachmentEditor.update(mWorkingMessage);
        drawTopPanel();
        updateSendButtonState();
      }
    }
  break;
case REQUEST_CODE_TAKE_PICTURE:
{
  Bitmap bitmap=BitmapFactory.decodeFile(Mms.ScrapSpace.SCRAP_FILE_PATH);
  if (bitmap == null) {
    handleAddAttachmentError(WorkingMessage.UNKNOWN_ERROR,R.string.type_picture);
    return;
  }
  addImage(bitmap);
  break;
}
case REQUEST_CODE_ATTACH_IMAGE:
{
addImage(data.getData(),false);
break;
}
case REQUEST_CODE_TAKE_VIDEO:
case REQUEST_CODE_ATTACH_VIDEO:
addVideo(data.getData(),false);
break;
case REQUEST_CODE_ATTACH_SOUND:
{
Uri uri=(Uri)data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
if (Settings.System.DEFAULT_RINGTONE_URI.equals(uri)) {
break;
}
addAudio(uri);
break;
}
case REQUEST_CODE_RECORD_SOUND:
addAudio(data.getData());
break;
case REQUEST_CODE_ECM_EXIT_DIALOG:
boolean outOfEmergencyMode=data.getBooleanExtra(EXIT_ECM_RESULT,false);
if (outOfEmergencyMode) {
sendMessage(false);
}
break;
default :
break;
}
}",0.8968446601941747
44504,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (LOCAL_LOGV) {
    Log.v(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode+ ""String_Node_Str""+ data);
  }
  mWaitingForSubActivity=false;
  if (data == null) {
    return;
  }
switch (requestCode) {
case REQUEST_CODE_CREATE_SLIDESHOW:
    if (data != null) {
      WorkingMessage newMessage=WorkingMessage.load(this,data.getData());
      if (newMessage != null) {
        mWorkingMessage=newMessage;
        mWorkingMessage.setConversation(mConversation);
        mAttachmentEditor.update(mWorkingMessage);
        drawTopPanel();
        updateSendButtonState();
      }
    }
  break;
case REQUEST_CODE_TAKE_PICTURE:
Bitmap bitmap=(Bitmap)data.getParcelableExtra(""String_Node_Str"");
if (bitmap == null) {
handleAddAttachmentError(WorkingMessage.UNKNOWN_ERROR,R.string.type_picture);
return;
}
addImage(bitmap);
break;
case REQUEST_CODE_ATTACH_IMAGE:
addImage(data.getData(),false);
break;
case REQUEST_CODE_TAKE_VIDEO:
case REQUEST_CODE_ATTACH_VIDEO:
addVideo(data.getData(),false);
break;
case REQUEST_CODE_ATTACH_SOUND:
Uri uri=(Uri)data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
if (Settings.System.DEFAULT_RINGTONE_URI.equals(uri)) {
break;
}
addAudio(uri);
break;
case REQUEST_CODE_RECORD_SOUND:
addAudio(data.getData());
break;
case REQUEST_CODE_ECM_EXIT_DIALOG:
boolean outOfEmergencyMode=data.getBooleanExtra(EXIT_ECM_RESULT,false);
if (outOfEmergencyMode) {
sendMessage(false);
}
break;
default :
break;
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (DEBUG) {
    log(""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode+ ""String_Node_Str""+ data);
  }
  mWaitingForSubActivity=false;
  if (requestCode != REQUEST_CODE_TAKE_PICTURE) {
    if (data == null) {
      return;
    }
  }
 else   if (resultCode != RESULT_OK) {
    if (DEBUG)     log(""String_Node_Str"" + resultCode);
    return;
  }
switch (requestCode) {
case REQUEST_CODE_CREATE_SLIDESHOW:
    if (data != null) {
      WorkingMessage newMessage=WorkingMessage.load(this,data.getData());
      if (newMessage != null) {
        mWorkingMessage=newMessage;
        mWorkingMessage.setConversation(mConversation);
        mAttachmentEditor.update(mWorkingMessage);
        drawTopPanel();
        updateSendButtonState();
      }
    }
  break;
case REQUEST_CODE_TAKE_PICTURE:
{
  Bitmap bitmap=BitmapFactory.decodeFile(Mms.ScrapSpace.SCRAP_FILE_PATH);
  if (bitmap == null) {
    handleAddAttachmentError(WorkingMessage.UNKNOWN_ERROR,R.string.type_picture);
    return;
  }
  addImage(bitmap);
  break;
}
case REQUEST_CODE_ATTACH_IMAGE:
{
addImage(data.getData(),false);
break;
}
case REQUEST_CODE_TAKE_VIDEO:
case REQUEST_CODE_ATTACH_VIDEO:
addVideo(data.getData(),false);
break;
case REQUEST_CODE_ATTACH_SOUND:
{
Uri uri=(Uri)data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
if (Settings.System.DEFAULT_RINGTONE_URI.equals(uri)) {
break;
}
addAudio(uri);
break;
}
case REQUEST_CODE_RECORD_SOUND:
addAudio(data.getData());
break;
case REQUEST_CODE_ECM_EXIT_DIALOG:
boolean outOfEmergencyMode=data.getBooleanExtra(EXIT_ECM_RESULT,false);
if (outOfEmergencyMode) {
sendMessage(false);
}
break;
default :
break;
}
}",0.8968446601941747
44505,"static Contact get(String number){
  if (Mms.isEmailAddress(number))   return getEmail(number);
synchronized (sInstance) {
    for (    Contact c : sInstance.mCache) {
      if (AddressUtils.phoneNumbersEqual(number,c.mNumber)) {
        return c;
      }
    }
    return null;
  }
}","static Contact get(String number){
  if (Mms.isEmailAddress(number))   return getEmail(number);
synchronized (sInstance) {
    for (    Contact c : sInstance.mCache) {
      if (PhoneNumberUtils.compare(number,c.mNumber)) {
        return c;
      }
    }
    return null;
  }
}",0.8896797153024911
44506,"@SmallTest public void testCompareSmsShortcode(){
  Log.i(LogTag.APP,""String_Node_Str"");
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
}","@SmallTest public void testCompareSmsShortcode(){
  Log.i(LogTag.APP,""String_Node_Str"");
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
}",0.776255707762557
44507,"private static void loadMmsSettings(Context context){
  XmlResourceParser parser=context.getResources().getXml(R.xml.mms_config);
  try {
    XmlUtils.beginDocument(parser,""String_Node_Str"");
    while (true) {
      XmlUtils.nextElement(parser);
      String tag=parser.getName();
      if (tag == null) {
        break;
      }
      String name=parser.getAttributeName(0);
      String value=parser.getAttributeValue(0);
      String text=null;
      if (parser.next() == XmlPullParser.TEXT) {
        text=parser.getText();
      }
      if (DEBUG) {
        Log.v(TAG,""String_Node_Str"" + tag + ""String_Node_Str""+ value);
      }
      if (""String_Node_Str"".equalsIgnoreCase(name)) {
        if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMmsEnabled=""String_Node_Str"".equalsIgnoreCase(text) ? 1 : 0;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mTransIdEnabled=""String_Node_Str"".equalsIgnoreCase(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mNotifyWapMMSC=""String_Node_Str"".equalsIgnoreCase(text);
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxMessageSize=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageHeight=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageWidth=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mDefaultSMSMessagesPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mDefaultMMSMessagesPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMinMessageCountPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxMessageCountPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mSmsToMmsTextThreshold=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mRecipientLimit=Integer.parseInt(text);
            if (mRecipientLimit < 0) {
              mRecipientLimit=Integer.MAX_VALUE;
            }
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpSocketTimeout=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMinimumSlideElementDuration=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxSizeScaleForPendingMmsAllowed=Integer.parseInt(text);
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUserAgent=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfTagName=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfUrl=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpParams=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpParamsLine1Key=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mEmailGateway=text;
          }
        }
      }
    }
  }
 catch (  XmlPullParserException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  NumberFormatException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
 finally {
    parser.close();
  }
  String errorStr=null;
  if (mMmsEnabled == -1) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxMessageSize == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageHeight == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageWidth == 0) {
    errorStr=""String_Node_Str"";
  }
  if (getMmsEnabled() && mUaProfUrl == null) {
    errorStr=""String_Node_Str"";
  }
  if (mUaProfTagName == null) {
    mUaProfTagName=DEFAULT_HTTP_KEY_X_WAP_PROFILE;
  }
  if (mUserAgent == null) {
    mUserAgent=DEFAULT_USER_AGENT;
  }
  if (errorStr != null) {
    String err=String.format(""String_Node_Str"",errorStr);
    Log.e(TAG,err);
    throw new ContentRestrictionException(err);
  }
}","private static void loadMmsSettings(Context context){
  XmlResourceParser parser=context.getResources().getXml(R.xml.mms_config);
  try {
    XmlUtils.beginDocument(parser,""String_Node_Str"");
    while (true) {
      XmlUtils.nextElement(parser);
      String tag=parser.getName();
      if (tag == null) {
        break;
      }
      String name=parser.getAttributeName(0);
      String value=parser.getAttributeValue(0);
      String text=null;
      if (parser.next() == XmlPullParser.TEXT) {
        text=parser.getText();
      }
      if (DEBUG) {
        Log.v(TAG,""String_Node_Str"" + tag + ""String_Node_Str""+ value);
      }
      if (""String_Node_Str"".equalsIgnoreCase(name)) {
        if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMmsEnabled=""String_Node_Str"".equalsIgnoreCase(text) ? 1 : 0;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mTransIdEnabled=""String_Node_Str"".equalsIgnoreCase(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mNotifyWapMMSC=""String_Node_Str"".equalsIgnoreCase(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mAliasEnabled=""String_Node_Str"".equalsIgnoreCase(text);
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxMessageSize=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageHeight=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageWidth=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mDefaultSMSMessagesPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mDefaultMMSMessagesPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMinMessageCountPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxMessageCountPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mSmsToMmsTextThreshold=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mRecipientLimit=Integer.parseInt(text);
            if (mRecipientLimit < 0) {
              mRecipientLimit=Integer.MAX_VALUE;
            }
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpSocketTimeout=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMinimumSlideElementDuration=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxSizeScaleForPendingMmsAllowed=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mAliasRuleMinChars=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mAliasRuleMaxChars=Integer.parseInt(text);
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUserAgent=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfTagName=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfUrl=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpParams=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpParamsLine1Key=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mEmailGateway=text;
          }
        }
      }
    }
  }
 catch (  XmlPullParserException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  NumberFormatException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
 finally {
    parser.close();
  }
  String errorStr=null;
  if (mMmsEnabled == -1) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxMessageSize == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageHeight == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageWidth == 0) {
    errorStr=""String_Node_Str"";
  }
  if (getMmsEnabled() && mUaProfUrl == null) {
    errorStr=""String_Node_Str"";
  }
  if (mUaProfTagName == null) {
    mUaProfTagName=DEFAULT_HTTP_KEY_X_WAP_PROFILE;
  }
  if (mUserAgent == null) {
    mUserAgent=DEFAULT_USER_AGENT;
  }
  if (errorStr != null) {
    String err=String.format(""String_Node_Str"",errorStr);
    Log.e(TAG,err);
    throw new ContentRestrictionException(err);
  }
}",0.9577086133802089
44508,"public static boolean isAlias(String string){
  if (!Mms.isPhoneNumber(string) && isAlphaNumeric(string) && string.length() > 1 && string.length() <= MAX_ALIAS_LENGTH) {
    return true;
  }
 else   return false;
}","public static boolean isAlias(String string){
  if (!MmsConfig.isAliasEnabled()) {
    return false;
  }
  if (TextUtils.isEmpty(string)) {
    return false;
  }
  if (Mms.isPhoneNumber(string)) {
    return false;
  }
  if (!isAlphaNumeric(string)) {
    return false;
  }
  int len=string.length();
  if (len < MmsConfig.getAliasMinChars() || len > MmsConfig.getAliasMaxChars()) {
    return false;
  }
  return true;
}",0.3748031496062992
44509,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (LOCAL_LOGV) {
    Log.v(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode+ ""String_Node_Str""+ data);
  }
  mWaitingForSubActivity=false;
  if (data == null) {
    return;
  }
switch (requestCode) {
case REQUEST_CODE_CREATE_SLIDESHOW:
    if (data != null) {
      WorkingMessage newMessage=WorkingMessage.load(this,data.getData());
      if (newMessage != null) {
        mWorkingMessage=newMessage;
        mWorkingMessage.setConversation(mConversation);
        mAttachmentEditor.update(mWorkingMessage);
        drawTopPanel();
        updateSendButtonState();
      }
    }
  break;
case REQUEST_CODE_TAKE_PICTURE:
Bitmap bitmap=(Bitmap)data.getParcelableExtra(""String_Node_Str"");
if (bitmap == null) {
handleAddAttachmentError(WorkingMessage.UNKNOWN_ERROR,R.string.type_picture);
return;
}
addImage(bitmap);
break;
case REQUEST_CODE_ATTACH_IMAGE:
addImage(data.getData(),false);
break;
case REQUEST_CODE_TAKE_VIDEO:
case REQUEST_CODE_ATTACH_VIDEO:
addVideo(data.getData(),false);
break;
case REQUEST_CODE_ATTACH_SOUND:
Uri uri=(Uri)data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
if (Settings.System.DEFAULT_RINGTONE_URI.equals(uri)) {
break;
}
addAudio(uri);
break;
case REQUEST_CODE_RECORD_SOUND:
addAudio(data.getData());
break;
case REQUEST_CODE_ECM_EXIT_DIALOG:
boolean outOfEmergencyMode=data.getBooleanExtra(EXIT_ECM_RESULT,false);
if (outOfEmergencyMode) {
sendMessage(false);
}
break;
default :
break;
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (DEBUG) {
    log(""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode+ ""String_Node_Str""+ data);
  }
  mWaitingForSubActivity=false;
  if (requestCode != REQUEST_CODE_TAKE_PICTURE) {
    if (data == null) {
      return;
    }
  }
 else   if (resultCode != RESULT_OK) {
    if (DEBUG)     log(""String_Node_Str"" + resultCode);
    return;
  }
switch (requestCode) {
case REQUEST_CODE_CREATE_SLIDESHOW:
    if (data != null) {
      WorkingMessage newMessage=WorkingMessage.load(this,data.getData());
      if (newMessage != null) {
        mWorkingMessage=newMessage;
        mWorkingMessage.setConversation(mConversation);
        mAttachmentEditor.update(mWorkingMessage);
        drawTopPanel();
        updateSendButtonState();
      }
    }
  break;
case REQUEST_CODE_TAKE_PICTURE:
{
  Bitmap bitmap=BitmapFactory.decodeFile(Mms.ScrapSpace.SCRAP_FILE_PATH);
  if (bitmap == null) {
    handleAddAttachmentError(WorkingMessage.UNKNOWN_ERROR,R.string.type_picture);
    return;
  }
  addImage(bitmap);
  break;
}
case REQUEST_CODE_ATTACH_IMAGE:
{
addImage(data.getData(),false);
break;
}
case REQUEST_CODE_TAKE_VIDEO:
case REQUEST_CODE_ATTACH_VIDEO:
addVideo(data.getData(),false);
break;
case REQUEST_CODE_ATTACH_SOUND:
{
Uri uri=(Uri)data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
if (Settings.System.DEFAULT_RINGTONE_URI.equals(uri)) {
break;
}
addAudio(uri);
break;
}
case REQUEST_CODE_RECORD_SOUND:
addAudio(data.getData());
break;
case REQUEST_CODE_ECM_EXIT_DIALOG:
boolean outOfEmergencyMode=data.getBooleanExtra(EXIT_ECM_RESULT,false);
if (outOfEmergencyMode) {
sendMessage(false);
}
break;
default :
break;
}
}",0.8968446601941747
44510,"@Override public void process(){
  PduPersister persister=PduPersister.getPduPersister(mContext);
  try {
    ReadRecInd readRecInd=(ReadRecInd)persister.load(mReadReportURI);
    byte[] postingData=new PduComposer(mContext,readRecInd).make();
    sendPdu(postingData);
    Uri uri=persister.move(mReadReportURI,Sent.CONTENT_URI);
    mTransactionState.setState(TransactionState.SUCCESS);
    mTransactionState.setContentUri(uri);
  }
 catch (  IOException e) {
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"",e);
    }
  }
catch (  MmsException e) {
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"",e);
    }
  }
catch (  RuntimeException e) {
    if (LOCAL_LOGV) {
      Log.e(TAG,""String_Node_Str"",e);
    }
  }
 finally {
    if (mTransactionState.getState() != TransactionState.SUCCESS) {
      mTransactionState.setState(TransactionState.FAILED);
      mTransactionState.setContentUri(mReadReportURI);
    }
    notifyObservers();
  }
}","@Override public void process(){
  PduPersister persister=PduPersister.getPduPersister(mContext);
  try {
    ReadRecInd readRecInd=(ReadRecInd)persister.load(mReadReportURI);
    String lineNumber=MessageUtils.getLocalNumber();
    readRecInd.setFrom(new EncodedStringValue(lineNumber));
    byte[] postingData=new PduComposer(mContext,readRecInd).make();
    sendPdu(postingData);
    Uri uri=persister.move(mReadReportURI,Sent.CONTENT_URI);
    mTransactionState.setState(TransactionState.SUCCESS);
    mTransactionState.setContentUri(uri);
  }
 catch (  IOException e) {
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"",e);
    }
  }
catch (  MmsException e) {
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"",e);
    }
  }
catch (  RuntimeException e) {
    if (LOCAL_LOGV) {
      Log.e(TAG,""String_Node_Str"",e);
    }
  }
 finally {
    if (mTransactionState.getState() != TransactionState.SUCCESS) {
      mTransactionState.setState(TransactionState.FAILED);
      mTransactionState.setContentUri(mReadReportURI);
    }
    notifyObservers();
  }
}",0.9442525900345338
44511,"private void sendAcknowledgeInd(RetrieveConf rc) throws MmsException, IOException {
  byte[] tranId=rc.getTransactionId();
  if (tranId != null) {
    AcknowledgeInd acknowledgeInd=new AcknowledgeInd(PduHeaders.CURRENT_MMS_VERSION,tranId);
    if (MmsConfig.getNotifyWapMMSC()) {
      sendPdu(new PduComposer(mContext,acknowledgeInd).make(),mContentLocation);
    }
 else {
      sendPdu(new PduComposer(mContext,acknowledgeInd).make());
    }
  }
}","private void sendAcknowledgeInd(RetrieveConf rc) throws MmsException, IOException {
  byte[] tranId=rc.getTransactionId();
  if (tranId != null) {
    AcknowledgeInd acknowledgeInd=new AcknowledgeInd(PduHeaders.CURRENT_MMS_VERSION,tranId);
    String lineNumber=MessageUtils.getLocalNumber();
    acknowledgeInd.setFrom(new EncodedStringValue(lineNumber));
    if (MmsConfig.getNotifyWapMMSC()) {
      sendPdu(new PduComposer(mContext,acknowledgeInd).make(),mContentLocation);
    }
 else {
      sendPdu(new PduComposer(mContext,acknowledgeInd).make());
    }
  }
}",0.8849557522123894
44512,"public void run(){
  try {
    RateController rateCtlr=RateController.getInstance();
    if (rateCtlr.isLimitSurpassed() && !rateCtlr.isAllowedByUser()) {
      Log.e(TAG,""String_Node_Str"");
      return;
    }
    PduPersister persister=PduPersister.getPduPersister(mContext);
    SendReq sendReq=(SendReq)persister.load(mSendReqURI);
    long date=System.currentTimeMillis() / 1000L;
    sendReq.setDate(date);
    ContentValues values=new ContentValues(1);
    values.put(Mms.DATE,date);
    SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
    long tokenKey=ContentUris.parseId(mSendReqURI);
    byte[] response=sendPdu(SendingProgressTokenManager.get(tokenKey),new PduComposer(mContext,sendReq).make());
    SendingProgressTokenManager.remove(tokenKey);
    if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
      String respStr=new String(response);
      Log.d(TAG,""String_Node_Str"" + mId + ""String_Node_Str""+ respStr);
    }
    SendConf conf=(SendConf)new PduParser(response).parse();
    if (conf == null) {
      Log.e(TAG,""String_Node_Str"");
    }
    byte[] reqId=sendReq.getTransactionId();
    byte[] confId=conf.getTransactionId();
    if (!Arrays.equals(reqId,confId)) {
      Log.e(TAG,""String_Node_Str"" + new String(reqId) + ""String_Node_Str""+ new String(confId));
      return;
    }
    values=new ContentValues(2);
    int respStatus=conf.getResponseStatus();
    values.put(Mms.RESPONSE_STATUS,respStatus);
    if (respStatus != PduHeaders.RESPONSE_STATUS_OK) {
      SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
      Log.e(TAG,""String_Node_Str"" + respStatus);
      return;
    }
    String messageId=PduPersister.toIsoString(conf.getMessageId());
    values.put(Mms.MESSAGE_ID,messageId);
    SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
    Uri uri=persister.move(mSendReqURI,Sent.CONTENT_URI);
    mTransactionState.setState(TransactionState.SUCCESS);
    mTransactionState.setContentUri(uri);
  }
 catch (  Throwable t) {
    Log.e(TAG,Log.getStackTraceString(t));
  }
 finally {
    if (mTransactionState.getState() != TransactionState.SUCCESS) {
      mTransactionState.setState(TransactionState.FAILED);
      mTransactionState.setContentUri(mSendReqURI);
      Log.e(TAG,""String_Node_Str"");
    }
    notifyObservers();
  }
}","public void run(){
  try {
    RateController rateCtlr=RateController.getInstance();
    if (rateCtlr.isLimitSurpassed() && !rateCtlr.isAllowedByUser()) {
      Log.e(TAG,""String_Node_Str"");
      return;
    }
    PduPersister persister=PduPersister.getPduPersister(mContext);
    SendReq sendReq=(SendReq)persister.load(mSendReqURI);
    long date=System.currentTimeMillis() / 1000L;
    sendReq.setDate(date);
    ContentValues values=new ContentValues(1);
    values.put(Mms.DATE,date);
    SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
    String lineNumber=MessageUtils.getLocalNumber();
    sendReq.setFrom(new EncodedStringValue(lineNumber));
    long tokenKey=ContentUris.parseId(mSendReqURI);
    byte[] response=sendPdu(SendingProgressTokenManager.get(tokenKey),new PduComposer(mContext,sendReq).make());
    SendingProgressTokenManager.remove(tokenKey);
    if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
      String respStr=new String(response);
      Log.d(TAG,""String_Node_Str"" + mId + ""String_Node_Str""+ respStr);
    }
    SendConf conf=(SendConf)new PduParser(response).parse();
    if (conf == null) {
      Log.e(TAG,""String_Node_Str"");
    }
    byte[] reqId=sendReq.getTransactionId();
    byte[] confId=conf.getTransactionId();
    if (!Arrays.equals(reqId,confId)) {
      Log.e(TAG,""String_Node_Str"" + new String(reqId) + ""String_Node_Str""+ new String(confId));
      return;
    }
    values=new ContentValues(2);
    int respStatus=conf.getResponseStatus();
    values.put(Mms.RESPONSE_STATUS,respStatus);
    if (respStatus != PduHeaders.RESPONSE_STATUS_OK) {
      SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
      Log.e(TAG,""String_Node_Str"" + respStatus);
      return;
    }
    String messageId=PduPersister.toIsoString(conf.getMessageId());
    values.put(Mms.MESSAGE_ID,messageId);
    SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
    Uri uri=persister.move(mSendReqURI,Sent.CONTENT_URI);
    mTransactionState.setState(TransactionState.SUCCESS);
    mTransactionState.setContentUri(uri);
  }
 catch (  Throwable t) {
    Log.e(TAG,Log.getStackTraceString(t));
  }
 finally {
    if (mTransactionState.getState() != TransactionState.SUCCESS) {
      mTransactionState.setState(TransactionState.FAILED);
      mTransactionState.setContentUri(mSendReqURI);
      Log.e(TAG,""String_Node_Str"");
    }
    notifyObservers();
  }
}",0.977560179518564
44513,"private static String getLocalNumber(){
  if (null == sLocalNumber) {
    sLocalNumber=TelephonyManager.getDefault().getLine1Number();
  }
  return sLocalNumber;
}","public static String getLocalNumber(){
  if (null == sLocalNumber) {
    sLocalNumber=TelephonyManager.getDefault().getLine1Number();
  }
  return sLocalNumber;
}",0.9723076923076924
44514,"@Override public void process(){
  PduPersister persister=PduPersister.getPduPersister(mContext);
  try {
    ReadRecInd readRecInd=(ReadRecInd)persister.load(mReadReportURI);
    byte[] postingData=new PduComposer(mContext,readRecInd).make();
    sendPdu(postingData);
    Uri uri=persister.move(mReadReportURI,Sent.CONTENT_URI);
    mTransactionState.setState(TransactionState.SUCCESS);
    mTransactionState.setContentUri(uri);
  }
 catch (  IOException e) {
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"",e);
    }
  }
catch (  MmsException e) {
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"",e);
    }
  }
catch (  RuntimeException e) {
    if (LOCAL_LOGV) {
      Log.e(TAG,""String_Node_Str"",e);
    }
  }
 finally {
    if (mTransactionState.getState() != TransactionState.SUCCESS) {
      mTransactionState.setState(TransactionState.FAILED);
      mTransactionState.setContentUri(mReadReportURI);
    }
    notifyObservers();
  }
}","@Override public void process(){
  PduPersister persister=PduPersister.getPduPersister(mContext);
  try {
    ReadRecInd readRecInd=(ReadRecInd)persister.load(mReadReportURI);
    String lineNumber=MessageUtils.getLocalNumber();
    readRecInd.setFrom(new EncodedStringValue(lineNumber));
    byte[] postingData=new PduComposer(mContext,readRecInd).make();
    sendPdu(postingData);
    Uri uri=persister.move(mReadReportURI,Sent.CONTENT_URI);
    mTransactionState.setState(TransactionState.SUCCESS);
    mTransactionState.setContentUri(uri);
  }
 catch (  IOException e) {
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"",e);
    }
  }
catch (  MmsException e) {
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"",e);
    }
  }
catch (  RuntimeException e) {
    if (LOCAL_LOGV) {
      Log.e(TAG,""String_Node_Str"",e);
    }
  }
 finally {
    if (mTransactionState.getState() != TransactionState.SUCCESS) {
      mTransactionState.setState(TransactionState.FAILED);
      mTransactionState.setContentUri(mReadReportURI);
    }
    notifyObservers();
  }
}",0.9442525900345338
44515,"private void sendAcknowledgeInd(RetrieveConf rc) throws MmsException, IOException {
  byte[] tranId=rc.getTransactionId();
  if (tranId != null) {
    AcknowledgeInd acknowledgeInd=new AcknowledgeInd(PduHeaders.CURRENT_MMS_VERSION,tranId);
    if (MmsConfig.getNotifyWapMMSC()) {
      sendPdu(new PduComposer(mContext,acknowledgeInd).make(),mContentLocation);
    }
 else {
      sendPdu(new PduComposer(mContext,acknowledgeInd).make());
    }
  }
}","private void sendAcknowledgeInd(RetrieveConf rc) throws MmsException, IOException {
  byte[] tranId=rc.getTransactionId();
  if (tranId != null) {
    AcknowledgeInd acknowledgeInd=new AcknowledgeInd(PduHeaders.CURRENT_MMS_VERSION,tranId);
    String lineNumber=MessageUtils.getLocalNumber();
    acknowledgeInd.setFrom(new EncodedStringValue(lineNumber));
    if (MmsConfig.getNotifyWapMMSC()) {
      sendPdu(new PduComposer(mContext,acknowledgeInd).make(),mContentLocation);
    }
 else {
      sendPdu(new PduComposer(mContext,acknowledgeInd).make());
    }
  }
}",0.8849557522123894
44516,"public void run(){
  try {
    RateController rateCtlr=RateController.getInstance();
    if (rateCtlr.isLimitSurpassed() && !rateCtlr.isAllowedByUser()) {
      Log.e(TAG,""String_Node_Str"");
      return;
    }
    PduPersister persister=PduPersister.getPduPersister(mContext);
    SendReq sendReq=(SendReq)persister.load(mSendReqURI);
    long date=System.currentTimeMillis() / 1000L;
    sendReq.setDate(date);
    ContentValues values=new ContentValues(1);
    values.put(Mms.DATE,date);
    SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
    long tokenKey=ContentUris.parseId(mSendReqURI);
    byte[] response=sendPdu(SendingProgressTokenManager.get(tokenKey),new PduComposer(mContext,sendReq).make());
    SendingProgressTokenManager.remove(tokenKey);
    if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
      String respStr=new String(response);
      Log.d(TAG,""String_Node_Str"" + mId + ""String_Node_Str""+ respStr);
    }
    SendConf conf=(SendConf)new PduParser(response).parse();
    if (conf == null) {
      Log.e(TAG,""String_Node_Str"");
    }
    byte[] reqId=sendReq.getTransactionId();
    byte[] confId=conf.getTransactionId();
    if (!Arrays.equals(reqId,confId)) {
      Log.e(TAG,""String_Node_Str"" + new String(reqId) + ""String_Node_Str""+ new String(confId));
      return;
    }
    values=new ContentValues(2);
    int respStatus=conf.getResponseStatus();
    values.put(Mms.RESPONSE_STATUS,respStatus);
    if (respStatus != PduHeaders.RESPONSE_STATUS_OK) {
      SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
      Log.e(TAG,""String_Node_Str"" + respStatus);
      return;
    }
    String messageId=PduPersister.toIsoString(conf.getMessageId());
    values.put(Mms.MESSAGE_ID,messageId);
    SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
    Uri uri=persister.move(mSendReqURI,Sent.CONTENT_URI);
    mTransactionState.setState(TransactionState.SUCCESS);
    mTransactionState.setContentUri(uri);
  }
 catch (  Throwable t) {
    Log.e(TAG,Log.getStackTraceString(t));
  }
 finally {
    if (mTransactionState.getState() != TransactionState.SUCCESS) {
      mTransactionState.setState(TransactionState.FAILED);
      mTransactionState.setContentUri(mSendReqURI);
      Log.e(TAG,""String_Node_Str"");
    }
    notifyObservers();
  }
}","public void run(){
  try {
    RateController rateCtlr=RateController.getInstance();
    if (rateCtlr.isLimitSurpassed() && !rateCtlr.isAllowedByUser()) {
      Log.e(TAG,""String_Node_Str"");
      return;
    }
    PduPersister persister=PduPersister.getPduPersister(mContext);
    SendReq sendReq=(SendReq)persister.load(mSendReqURI);
    long date=System.currentTimeMillis() / 1000L;
    sendReq.setDate(date);
    ContentValues values=new ContentValues(1);
    values.put(Mms.DATE,date);
    SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
    String lineNumber=MessageUtils.getLocalNumber();
    sendReq.setFrom(new EncodedStringValue(lineNumber));
    long tokenKey=ContentUris.parseId(mSendReqURI);
    byte[] response=sendPdu(SendingProgressTokenManager.get(tokenKey),new PduComposer(mContext,sendReq).make());
    SendingProgressTokenManager.remove(tokenKey);
    if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
      String respStr=new String(response);
      Log.d(TAG,""String_Node_Str"" + mId + ""String_Node_Str""+ respStr);
    }
    SendConf conf=(SendConf)new PduParser(response).parse();
    if (conf == null) {
      Log.e(TAG,""String_Node_Str"");
    }
    byte[] reqId=sendReq.getTransactionId();
    byte[] confId=conf.getTransactionId();
    if (!Arrays.equals(reqId,confId)) {
      Log.e(TAG,""String_Node_Str"" + new String(reqId) + ""String_Node_Str""+ new String(confId));
      return;
    }
    values=new ContentValues(2);
    int respStatus=conf.getResponseStatus();
    values.put(Mms.RESPONSE_STATUS,respStatus);
    if (respStatus != PduHeaders.RESPONSE_STATUS_OK) {
      SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
      Log.e(TAG,""String_Node_Str"" + respStatus);
      return;
    }
    String messageId=PduPersister.toIsoString(conf.getMessageId());
    values.put(Mms.MESSAGE_ID,messageId);
    SqliteWrapper.update(mContext,mContext.getContentResolver(),mSendReqURI,values,null,null);
    Uri uri=persister.move(mSendReqURI,Sent.CONTENT_URI);
    mTransactionState.setState(TransactionState.SUCCESS);
    mTransactionState.setContentUri(uri);
  }
 catch (  Throwable t) {
    Log.e(TAG,Log.getStackTraceString(t));
  }
 finally {
    if (mTransactionState.getState() != TransactionState.SUCCESS) {
      mTransactionState.setState(TransactionState.FAILED);
      mTransactionState.setContentUri(mSendReqURI);
      Log.e(TAG,""String_Node_Str"");
    }
    notifyObservers();
  }
}",0.977560179518564
44517,"private static String getLocalNumber(){
  if (null == sLocalNumber) {
    sLocalNumber=TelephonyManager.getDefault().getLine1Number();
  }
  return sLocalNumber;
}","public static String getLocalNumber(){
  if (null == sLocalNumber) {
    sLocalNumber=TelephonyManager.getDefault().getLine1Number();
  }
  return sLocalNumber;
}",0.9723076923076924
44518,"static void dumpCache(){
  if (DEBUG) {
synchronized (sInstance) {
      Log.v(TAG,""String_Node_Str"");
      for (      Conversation c : sInstance.mCache) {
        Log.v(TAG,""String_Node_Str"" + c + ""String_Node_Str""+ c.getThreadId()+ ""String_Node_Str""+ c.hashCode());
      }
    }
  }
}","static void dumpCache(){
  if (DEBUG) {
synchronized (sInstance) {
      LogTag.debug(""String_Node_Str"");
      for (      Conversation c : sInstance.mCache) {
        LogTag.debug(""String_Node_Str"" + c + ""String_Node_Str""+ c.getThreadId()+ ""String_Node_Str""+ c.hashCode());
      }
    }
  }
}",0.2989690721649484
44519,"/** 
 * Put the specified conversation in the cache.  The caller should not place an already-existing conversation in the cache, but rather update it in place.
 */
static void put(Conversation c){
synchronized (sInstance) {
    if (DEBUG) {
      Log.v(TAG,""String_Node_Str"" + c + ""String_Node_Str""+ c.getThreadId()+ ""String_Node_Str""+ c.hashCode());
      dumpCache();
    }
    if (sInstance.mCache.contains(c)) {
      throw new IllegalStateException(""String_Node_Str"" + c + ""String_Node_Str""+ c.mThreadId);
    }
    sInstance.mCache.add(c);
  }
}","/** 
 * Put the specified conversation in the cache.  The caller should not place an already-existing conversation in the cache, but rather update it in place.
 */
static void put(Conversation c){
synchronized (sInstance) {
    if (DEBUG) {
      LogTag.debug(""String_Node_Str"" + c + ""String_Node_Str""+ c.getThreadId()+ ""String_Node_Str""+ c.hashCode());
      dumpCache();
    }
    if (sInstance.mCache.contains(c)) {
      throw new IllegalStateException(""String_Node_Str"" + c + ""String_Node_Str""+ c.mThreadId);
    }
    sInstance.mCache.add(c);
  }
}",0.986425339366516
44520,"static void remove(long threadId){
  if (DEBUG) {
    Log.v(TAG,""String_Node_Str"" + threadId);
    dumpCache();
  }
  for (  Conversation c : sInstance.mCache) {
    if (c.getThreadId() == threadId) {
      sInstance.mCache.remove(c);
      return;
    }
  }
}","static void remove(long threadId){
  if (DEBUG) {
    LogTag.debug(""String_Node_Str"" + threadId);
    dumpCache();
  }
  for (  Conversation c : sInstance.mCache) {
    if (c.getThreadId() == threadId) {
      sInstance.mCache.remove(c);
      return;
    }
  }
}",0.97131931166348
44521,"/** 
 * Return the conversation with the specified recipient list, or null if it's not in cache.
 */
static Conversation get(ContactList list){
synchronized (sInstance) {
    if (DEBUG) {
      Log.v(TAG,""String_Node_Str"" + list);
      dumpCache();
    }
    for (    Conversation c : sInstance.mCache) {
      if (c.getRecipients().equals(list)) {
        return c;
      }
    }
  }
  return null;
}","/** 
 * Return the conversation with the specified recipient list, or null if it's not in cache.
 */
static Conversation get(ContactList list){
synchronized (sInstance) {
    if (DEBUG) {
      LogTag.debug(""String_Node_Str"" + list);
      dumpCache();
    }
    for (    Conversation c : sInstance.mCache) {
      if (c.getRecipients().equals(list)) {
        return c;
      }
    }
  }
  return null;
}",0.9814126394052044
44522,"private static void cacheAllThreads(Context context){
synchronized (Cache.getInstance()) {
    if (DEBUG) {
      Log.v(TAG,""String_Node_Str"");
    }
    HashSet<Long> threadsOnDisk=new HashSet<Long>();
    Cursor c=context.getContentResolver().query(sAllThreadsUri,ALL_THREADS_PROJECTION,null,null,null);
    try {
      while (c.moveToNext()) {
        long threadId=c.getLong(ID);
        threadsOnDisk.add(threadId);
        Conversation conv=Cache.get(threadId);
        if (conv == null) {
          conv=new Conversation(context,c,true);
          try {
            Cache.put(conv);
          }
 catch (          IllegalStateException e) {
            Log.e(TAG,""String_Node_Str"");
          }
        }
 else {
          fillFromCursor(context,conv,c,true);
        }
      }
    }
  finally {
      c.close();
    }
    Cache.keepOnly(threadsOnDisk);
  }
}","private static void cacheAllThreads(Context context){
synchronized (Cache.getInstance()) {
    if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
      LogTag.debug(""String_Node_Str"");
    }
    HashSet<Long> threadsOnDisk=new HashSet<Long>();
    Cursor c=context.getContentResolver().query(sAllThreadsUri,ALL_THREADS_PROJECTION,null,null,null);
    try {
      while (c.moveToNext()) {
        long threadId=c.getLong(ID);
        threadsOnDisk.add(threadId);
        Conversation conv=Cache.get(threadId);
        if (conv == null) {
          conv=new Conversation(context,c,true);
          try {
            Cache.put(conv);
          }
 catch (          IllegalStateException e) {
            LogTag.error(""String_Node_Str"");
          }
        }
 else {
          fillFromCursor(context,conv,c,true);
        }
      }
    }
  finally {
      c.close();
    }
    Cache.keepOnly(threadsOnDisk);
  }
}",0.9609949123798756
44523,"/** 
 * Guarantees that the conversation has been created in the database. This will make a blocking database call if it hasn't.
 * @return The thread ID of this conversation in the database
 */
public synchronized long ensureThreadId(){
  if (DEBUG) {
    Log.v(""String_Node_Str"",""String_Node_Str"" + mThreadId);
  }
  if (mThreadId <= 0) {
    mThreadId=getOrCreateThreadId(mContext,mRecipients);
  }
  if (DEBUG) {
    Log.v(""String_Node_Str"",""String_Node_Str"" + mThreadId);
  }
  return mThreadId;
}","/** 
 * Guarantees that the conversation has been created in the database. This will make a blocking database call if it hasn't.
 * @return The thread ID of this conversation in the database
 */
public synchronized long ensureThreadId(){
  if (DEBUG) {
    LogTag.debug(""String_Node_Str"" + mThreadId);
  }
  if (mThreadId <= 0) {
    mThreadId=getOrCreateThreadId(mContext,mRecipients);
  }
  if (DEBUG) {
    LogTag.debug(""String_Node_Str"" + mThreadId);
  }
  return mThreadId;
}",0.9429735234215886
44524,"public synchronized void clearThreadId(){
  Cache.remove(mThreadId);
  mThreadId=0;
}","public synchronized void clearThreadId(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"" + mThreadId + ""String_Node_Str"");
  }
  Cache.remove(mThreadId);
  mThreadId=0;
}",0.584192439862543
44525,"private boolean loadFromThreadId(long threadId){
  Cursor c=mContext.getContentResolver().query(sAllThreadsUri,ALL_THREADS_PROJECTION,""String_Node_Str"" + Long.toString(threadId),null,null);
  try {
    if (c.moveToFirst()) {
      fillFromCursor(mContext,this,c,true);
    }
 else {
      Log.e(TAG,""String_Node_Str"" + threadId);
      return false;
    }
  }
  finally {
    c.close();
  }
  return true;
}","private boolean loadFromThreadId(long threadId){
  Cursor c=mContext.getContentResolver().query(sAllThreadsUri,ALL_THREADS_PROJECTION,""String_Node_Str"" + Long.toString(threadId),null,null);
  try {
    if (c.moveToFirst()) {
      fillFromCursor(mContext,this,c,true);
    }
 else {
      LogTag.error(""String_Node_Str"" + threadId);
      return false;
    }
  }
  finally {
    c.close();
  }
  return true;
}",0.9791921664626684
44526,"private static long getOrCreateThreadId(Context context,ContactList list){
  HashSet<String> recipients=new HashSet<String>();
  Contact cacheContact=null;
  for (  Contact c : list) {
    cacheContact=Contact.get(c.getNumber(),true);
    if (cacheContact != null) {
      recipients.add(cacheContact.getNumber());
    }
 else {
      recipients.add(c.getNumber());
    }
  }
  return Threads.getOrCreateThreadId(context,recipients);
}","private static long getOrCreateThreadId(Context context,ContactList list){
  HashSet<String> recipients=new HashSet<String>();
  Contact cacheContact=null;
  for (  Contact c : list) {
    cacheContact=Contact.get(c.getNumber(),true);
    if (cacheContact != null) {
      recipients.add(cacheContact.getNumber());
    }
 else {
      recipients.add(c.getNumber());
    }
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    LogTag.debug(""String_Node_Str"",recipients);
  }
  return Threads.getOrCreateThreadId(context,recipients);
}",0.8474226804123711
44527,"static Contact get(String number){
  if (Mms.isEmailAddress(number))   return getEmail(number);
synchronized (sInstance) {
    for (    Contact c : sInstance.mCache) {
      if (AddressUtils.phoneNumbersEqual(number,c.mNumber)) {
        return c;
      }
    }
    return null;
  }
}","static Contact get(String number){
  if (Mms.isEmailAddress(number))   return getEmail(number);
synchronized (sInstance) {
    for (    Contact c : sInstance.mCache) {
      if (PhoneNumberUtils.compare(number,c.mNumber)) {
        return c;
      }
    }
    return null;
  }
}",0.8896797153024911
44528,"@SmallTest public void testCompareSmsShortcode(){
  Log.i(LogTag.APP,""String_Node_Str"");
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
}","@SmallTest public void testCompareSmsShortcode(){
  Log.i(LogTag.APP,""String_Node_Str"");
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
}",0.776255707762557
44529,"static Contact get(String number){
  if (Mms.isEmailAddress(number))   return getEmail(number);
synchronized (sInstance) {
    for (    Contact c : sInstance.mCache) {
      if (AddressUtils.phoneNumbersEqual(number,c.mNumber)) {
        return c;
      }
    }
    return null;
  }
}","static Contact get(String number){
  if (Mms.isEmailAddress(number))   return getEmail(number);
synchronized (sInstance) {
    for (    Contact c : sInstance.mCache) {
      if (PhoneNumberUtils.compare(number,c.mNumber)) {
        return c;
      }
    }
    return null;
  }
}",0.8896797153024911
44530,"@SmallTest public void testCompareSmsShortcode(){
  Log.i(LogTag.APP,""String_Node_Str"");
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
  assertFalse(AddressUtils.phoneNumbersEqual(""String_Node_Str"",""String_Node_Str""));
}","@SmallTest public void testCompareSmsShortcode(){
  Log.i(LogTag.APP,""String_Node_Str"");
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",""String_Node_Str""));
}",0.776255707762557
44531,"private boolean handleForwardedMessage(){
  Intent intent=getIntent();
  if (intent.getBooleanExtra(""String_Node_Str"",false) == false) {
    return false;
  }
  Uri uri=intent.getParcelableExtra(""String_Node_Str"");
  if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {
    log(""String_Node_Str"" + uri);
  }
  if (uri != null) {
    mWorkingMessage=WorkingMessage.load(this,uri);
    mWorkingMessage.setSubject(intent.getStringExtra(""String_Node_Str""),false);
  }
 else {
    mWorkingMessage.setText(intent.getStringExtra(""String_Node_Str""));
  }
  return true;
}","private boolean handleForwardedMessage(){
  Intent intent=getIntent();
  if (intent.getBooleanExtra(""String_Node_Str"",false) == false) {
    return false;
  }
  Uri uri=intent.getParcelableExtra(""String_Node_Str"");
  if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {
    log(""String_Node_Str"" + uri);
  }
  if (uri != null) {
    mWorkingMessage=WorkingMessage.load(this,uri);
    mWorkingMessage.setSubject(intent.getStringExtra(""String_Node_Str""),false);
  }
 else {
    mWorkingMessage.setText(intent.getStringExtra(""String_Node_Str""));
  }
  mMsgListAdapter.changeCursor(null);
  return true;
}",0.9668411867364748
44532,"private void bindToContactHeaderWidget(ContactList list){
switch (list.size()) {
case 0:
    mContactHeader.setDisplayName(mRecipientsEditor.getText().toString(),null);
  break;
case 1:
mContactHeader.bindFromPhoneNumber(list.get(0).getNumber());
break;
default :
String multipleRecipientsString=getString(R.string.multiple_recipients,list.size());
mContactHeader.setDisplayName(multipleRecipientsString,null);
break;
}
}","private void bindToContactHeaderWidget(ContactList list){
switch (list.size()) {
case 0:
    String recipient=""String_Node_Str"";
  if (mRecipientsEditor != null) {
    recipient=mRecipientsEditor.getText().toString();
  }
mContactHeader.setDisplayName(recipient,null);
break;
case 1:
mContactHeader.bindFromPhoneNumber(list.get(0).getNumber());
break;
default :
String multipleRecipientsString=getString(R.string.multiple_recipients,list.size());
mContactHeader.setDisplayName(multipleRecipientsString,null);
break;
}
}",0.8106382978723404
44533,"private boolean handleForwardedMessage(){
  Intent intent=getIntent();
  if (intent.getBooleanExtra(""String_Node_Str"",false) == false) {
    return false;
  }
  Uri uri=intent.getParcelableExtra(""String_Node_Str"");
  if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {
    log(""String_Node_Str"" + uri);
  }
  if (uri != null) {
    mWorkingMessage=WorkingMessage.load(this,uri);
    mWorkingMessage.setSubject(intent.getStringExtra(""String_Node_Str""),false);
  }
 else {
    mWorkingMessage.setText(intent.getStringExtra(""String_Node_Str""));
  }
  return true;
}","private boolean handleForwardedMessage(){
  Intent intent=getIntent();
  if (intent.getBooleanExtra(""String_Node_Str"",false) == false) {
    return false;
  }
  Uri uri=intent.getParcelableExtra(""String_Node_Str"");
  if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {
    log(""String_Node_Str"" + uri);
  }
  if (uri != null) {
    mWorkingMessage=WorkingMessage.load(this,uri);
    mWorkingMessage.setSubject(intent.getStringExtra(""String_Node_Str""),false);
  }
 else {
    mWorkingMessage.setText(intent.getStringExtra(""String_Node_Str""));
  }
  mMsgListAdapter.changeCursor(null);
  return true;
}",0.9668411867364748
44534,"private void bindToContactHeaderWidget(ContactList list){
switch (list.size()) {
case 0:
    mContactHeader.setDisplayName(mRecipientsEditor.getText().toString(),null);
  break;
case 1:
mContactHeader.bindFromPhoneNumber(list.get(0).getNumber());
break;
default :
String multipleRecipientsString=getString(R.string.multiple_recipients,list.size());
mContactHeader.setDisplayName(multipleRecipientsString,null);
break;
}
}","private void bindToContactHeaderWidget(ContactList list){
switch (list.size()) {
case 0:
    String recipient=""String_Node_Str"";
  if (mRecipientsEditor != null) {
    recipient=mRecipientsEditor.getText().toString();
  }
mContactHeader.setDisplayName(recipient,null);
break;
case 1:
mContactHeader.bindFromPhoneNumber(list.get(0).getNumber());
break;
default :
String multipleRecipientsString=getString(R.string.multiple_recipients,list.size());
mContactHeader.setDisplayName(multipleRecipientsString,null);
break;
}
}",0.8106382978723404
44535,"private boolean handleForwardedMessage(){
  Intent intent=getIntent();
  if (intent.getBooleanExtra(""String_Node_Str"",false) == false) {
    return false;
  }
  Uri uri=intent.getParcelableExtra(""String_Node_Str"");
  if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {
    log(""String_Node_Str"" + uri);
  }
  if (uri != null) {
    mWorkingMessage=WorkingMessage.load(this,uri);
    mWorkingMessage.setSubject(intent.getStringExtra(""String_Node_Str""),false);
  }
 else {
    mWorkingMessage.setText(intent.getStringExtra(""String_Node_Str""));
  }
  return true;
}","private boolean handleForwardedMessage(){
  Intent intent=getIntent();
  if (intent.getBooleanExtra(""String_Node_Str"",false) == false) {
    return false;
  }
  Uri uri=intent.getParcelableExtra(""String_Node_Str"");
  if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {
    log(""String_Node_Str"" + uri);
  }
  if (uri != null) {
    mWorkingMessage=WorkingMessage.load(this,uri);
    mWorkingMessage.setSubject(intent.getStringExtra(""String_Node_Str""),false);
  }
 else {
    mWorkingMessage.setText(intent.getStringExtra(""String_Node_Str""));
  }
  mMsgListAdapter.changeCursor(null);
  return true;
}",0.9668411867364748
44536,"private void bindToContactHeaderWidget(ContactList list){
switch (list.size()) {
case 0:
    mContactHeader.setDisplayName(mRecipientsEditor.getText().toString(),null);
  break;
case 1:
mContactHeader.bindFromPhoneNumber(list.get(0).getNumber());
break;
default :
String multipleRecipientsString=getString(R.string.multiple_recipients,list.size());
mContactHeader.setDisplayName(multipleRecipientsString,null);
break;
}
}","private void bindToContactHeaderWidget(ContactList list){
switch (list.size()) {
case 0:
    String recipient=""String_Node_Str"";
  if (mRecipientsEditor != null) {
    recipient=mRecipientsEditor.getText().toString();
  }
mContactHeader.setDisplayName(recipient,null);
break;
case 1:
mContactHeader.bindFromPhoneNumber(list.get(0).getNumber());
break;
default :
String multipleRecipientsString=getString(R.string.multiple_recipients,list.size());
mContactHeader.setDisplayName(multipleRecipientsString,null);
break;
}
}",0.8106382978723404
44537,"public void handleEvent(Event evt){
  String evtType=evt.getType();
  if (LOCAL_LOGV) {
    Log.v(TAG,""String_Node_Str"" + evtType + ""String_Node_Str""+ this);
  }
  MediaAction action=MediaAction.NO_ACTIVE_ACTION;
  if (evtType.equals(SmilMediaElementImpl.SMIL_MEDIA_START_EVENT)) {
    action=MediaAction.START;
    pauseMusicPlayer();
  }
 else   if (evtType.equals(SmilMediaElementImpl.SMIL_MEDIA_END_EVENT)) {
    action=MediaAction.STOP;
    resumeMusicPlayer();
  }
 else   if (evtType.equals(SmilMediaElementImpl.SMIL_MEDIA_PAUSE_EVENT)) {
    action=MediaAction.PAUSE;
  }
 else   if (evtType.equals(SmilMediaElementImpl.SMIL_MEDIA_SEEK_EVENT)) {
    action=MediaAction.SEEK;
    mSeekTo=evt.getSeekTo();
  }
  appendAction(action);
  notifyModelChanged(false);
}","public void handleEvent(Event evt){
  String evtType=evt.getType();
  if (LOCAL_LOGV) {
    Log.v(TAG,""String_Node_Str"" + evtType + ""String_Node_Str""+ this);
  }
  MediaAction action=MediaAction.NO_ACTIVE_ACTION;
  if (evtType.equals(SmilMediaElementImpl.SMIL_MEDIA_START_EVENT)) {
    action=MediaAction.START;
    pauseMusicPlayer();
  }
 else   if (evtType.equals(SmilMediaElementImpl.SMIL_MEDIA_END_EVENT)) {
    action=MediaAction.STOP;
  }
 else   if (evtType.equals(SmilMediaElementImpl.SMIL_MEDIA_PAUSE_EVENT)) {
    action=MediaAction.PAUSE;
  }
 else   if (evtType.equals(SmilMediaElementImpl.SMIL_MEDIA_SEEK_EVENT)) {
    action=MediaAction.SEEK;
    mSeekTo=evt.getSeekTo();
  }
  appendAction(action);
  notifyModelChanged(false);
}",0.9834983498349836
44538,"public void handleEvent(Event evt){
  String evtType=evt.getType();
  if (LOCAL_LOGV || Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    Log.v(TAG,""String_Node_Str"" + evt.getType() + ""String_Node_Str""+ this);
  }
  MediaAction action=MediaAction.NO_ACTIVE_ACTION;
  if (evtType.equals(SmilMediaElementImpl.SMIL_MEDIA_START_EVENT)) {
    action=MediaAction.START;
    pauseMusicPlayer();
    mVisible=true;
  }
 else   if (evtType.equals(SmilMediaElementImpl.SMIL_MEDIA_END_EVENT)) {
    action=MediaAction.STOP;
    if (mFill != ElementTime.FILL_FREEZE) {
      mVisible=false;
    }
    resumeMusicPlayer();
  }
 else   if (evtType.equals(SmilMediaElementImpl.SMIL_MEDIA_PAUSE_EVENT)) {
    action=MediaAction.PAUSE;
    mVisible=true;
  }
 else   if (evtType.equals(SmilMediaElementImpl.SMIL_MEDIA_SEEK_EVENT)) {
    action=MediaAction.SEEK;
    mSeekTo=evt.getSeekTo();
    mVisible=true;
  }
  appendAction(action);
  notifyModelChanged(false);
}","public void handleEvent(Event evt){
  String evtType=evt.getType();
  if (LOCAL_LOGV || Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    Log.v(TAG,""String_Node_Str"" + evt.getType() + ""String_Node_Str""+ this);
  }
  MediaAction action=MediaAction.NO_ACTIVE_ACTION;
  if (evtType.equals(SmilMediaElementImpl.SMIL_MEDIA_START_EVENT)) {
    action=MediaAction.START;
    pauseMusicPlayer();
    mVisible=true;
  }
 else   if (evtType.equals(SmilMediaElementImpl.SMIL_MEDIA_END_EVENT)) {
    action=MediaAction.STOP;
    if (mFill != ElementTime.FILL_FREEZE) {
      mVisible=false;
    }
  }
 else   if (evtType.equals(SmilMediaElementImpl.SMIL_MEDIA_PAUSE_EVENT)) {
    action=MediaAction.PAUSE;
    mVisible=true;
  }
 else   if (evtType.equals(SmilMediaElementImpl.SMIL_MEDIA_SEEK_EVENT)) {
    action=MediaAction.SEEK;
    mSeekTo=evt.getSeekTo();
    mVisible=true;
  }
  appendAction(action);
  notifyModelChanged(false);
}",0.9866238630283574
44539,"public synchronized void addListener(UpdateListener l){
  mListeners.add(l);
}","public synchronized void addListener(UpdateListener l){
  boolean added=mListeners.add(l);
  if (V && added)   dumpListeners();
}",0.7536231884057971
44540,"@Override public void onChange(boolean selfUpdate){
  invalidateCache();
}","@Override public void onChange(boolean selfUpdate){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"");
  }
  invalidateCache();
}",0.6491228070175439
44541,"public synchronized void removeListener(UpdateListener l){
  mListeners.remove(l);
}","public synchronized void removeListener(UpdateListener l){
  boolean removed=mListeners.remove(l);
  if (V && removed)   dumpListeners();
}",0.7533632286995515
44542,"@Override protected void onPause(){
  super.onPause();
  Contact.stopPresenceObserver();
  removeRecipientsListeners();
}","@Override protected void onPause(){
  super.onPause();
  removeRecipientsListeners();
}",0.8365384615384616
44543,"@Override protected void onResume(){
  super.onResume();
  Contact.startPresenceObserver();
  addRecipientsListeners();
}","@Override protected void onResume(){
  super.onResume();
  addRecipientsListeners();
}",0.8309178743961353
44544,"public final void bind(Context context,final ConversationHeader ch){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  setConversationHeader(ch);
  LayoutParams attachmentLayout=(LayoutParams)mAttachmentView.getLayoutParams();
  boolean hasError=ch.hasError();
  if (hasError) {
    attachmentLayout.addRule(RelativeLayout.LEFT_OF,R.id.error);
  }
 else {
    attachmentLayout.addRule(RelativeLayout.LEFT_OF,R.id.date);
  }
  boolean hasAttachment=ch.hasAttachment();
  mAttachmentView.setVisibility(hasAttachment ? VISIBLE : GONE);
  mDateView.setText(ch.getDate());
  mFromView.setText(formatMessage(ch));
  ContactList contacts=ch.getContacts();
  contacts.addListeners(this);
  setPresenceIcon(contacts.getPresenceResId());
  mSubjectView.setText(ch.getSubject());
  LayoutParams subjectLayout=(LayoutParams)mSubjectView.getLayoutParams();
  subjectLayout.addRule(RelativeLayout.LEFT_OF,hasAttachment ? R.id.attachment : (hasError ? R.id.error : R.id.date));
  mErrorIndicator.setVisibility(hasError ? VISIBLE : GONE);
  updateAvatarView();
}","public final void bind(Context context,final ConversationHeader ch){
  setConversationHeader(ch);
  LayoutParams attachmentLayout=(LayoutParams)mAttachmentView.getLayoutParams();
  boolean hasError=ch.hasError();
  if (hasError) {
    attachmentLayout.addRule(RelativeLayout.LEFT_OF,R.id.error);
  }
 else {
    attachmentLayout.addRule(RelativeLayout.LEFT_OF,R.id.date);
  }
  boolean hasAttachment=ch.hasAttachment();
  mAttachmentView.setVisibility(hasAttachment ? VISIBLE : GONE);
  mDateView.setText(ch.getDate());
  mFromView.setText(formatMessage(ch));
  ContactList contacts=ch.getContacts();
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + this);
  contacts.addListeners(this);
  setPresenceIcon(contacts.getPresenceResId());
  mSubjectView.setText(ch.getSubject());
  LayoutParams subjectLayout=(LayoutParams)mSubjectView.getLayoutParams();
  subjectLayout.addRule(RelativeLayout.LEFT_OF,hasAttachment ? R.id.attachment : (hasError ? R.id.error : R.id.date));
  mErrorIndicator.setVisibility(hasError ? VISIBLE : GONE);
  updateAvatarView();
}",0.2360248447204969
44545,"public final void unbind(){
  mConversationHeader.getContacts().removeListeners(this);
}","public final void unbind(){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + this);
  mConversationHeader.getContacts().removeListeners(this);
}",0.7719298245614035
44546,"private void initListAdapter(){
  mListAdapter=new ConversationListAdapter(this,null);
  setListAdapter(mListAdapter);
}","private void initListAdapter(){
  mListAdapter=new ConversationListAdapter(this,null);
  setListAdapter(mListAdapter);
  getListView().setRecyclerListener(mListAdapter);
}",0.8247422680412371
44547,"@Override protected void onStop(){
  super.onStop();
  mListAdapter.changeCursor(null);
}","@Override protected void onStop(){
  super.onStop();
  DraftCache.getInstance().removeOnDraftChangedListener(this);
  mListAdapter.changeCursor(null);
}",0.7385892116182573
44548,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.conversation_list_screen);
  mQueryHandler=new ThreadListQueryHandler(getContentResolver());
  ListView listView=getListView();
  LayoutInflater inflater=LayoutInflater.from(this);
  ConversationHeaderView headerView=(ConversationHeaderView)inflater.inflate(R.layout.conversation_header,listView,false);
  headerView.bind(getString(R.string.new_message),getString(R.string.create_new_message));
  listView.addHeaderView(headerView,null,true);
  listView.setOnCreateContextMenuListener(mConvListOnCreateContextMenuListener);
  listView.setOnKeyListener(mThreadListKeyListener);
  initListAdapter();
  handleCreationIntent(getIntent());
  mHandler=new Handler();
  mPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  boolean checkedMessageLimits=mPrefs.getBoolean(CHECKED_MESSAGE_LIMITS,false);
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + checkedMessageLimits);
  if (!checkedMessageLimits || DEBUG) {
    runOneTimeStorageLimitCheckForLegacyMessages();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.conversation_list_screen);
  mQueryHandler=new ThreadListQueryHandler(getContentResolver());
  ListView listView=getListView();
  LayoutInflater inflater=LayoutInflater.from(this);
  ConversationHeaderView headerView=(ConversationHeaderView)inflater.inflate(R.layout.conversation_header,listView,false);
  headerView.bind(getString(R.string.new_message),getString(R.string.create_new_message));
  listView.addHeaderView(headerView,null,true);
  listView.setOnCreateContextMenuListener(mConvListOnCreateContextMenuListener);
  listView.setOnKeyListener(mThreadListKeyListener);
  initListAdapter();
  mTitle=getString(R.string.app_label);
  mHandler=new Handler();
  mPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  boolean checkedMessageLimits=mPrefs.getBoolean(CHECKED_MESSAGE_LIMITS,false);
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + checkedMessageLimits);
  if (!checkedMessageLimits || DEBUG) {
    runOneTimeStorageLimitCheckForLegacyMessages();
  }
}",0.9710832973672852
44549,"public void onDraftChanged(long threadId,boolean hasDraft){
  mQueryHandler.post(new Runnable(){
    public void run(){
      mListAdapter.notifyDataSetChanged();
    }
  }
);
}","public void onDraftChanged(final long threadId,final boolean hasDraft){
  mQueryHandler.post(new Runnable(){
    public void run(){
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + threadId + ""String_Node_Str""+ hasDraft);
      }
      mListAdapter.notifyDataSetChanged();
    }
  }
);
}",0.7094188376753507
44550,"@Override protected void onNewIntent(Intent intent){
  handleCreationIntent(intent);
}","@Override protected void onNewIntent(Intent intent){
  privateOnStart();
}",0.825
44551,"/** 
 * Updates the has-draft status of a particular thread on a piecemeal basis, to be called when a draft has appeared or disappeared.
 */
public synchronized void setDraftState(long threadId,boolean hasDraft){
  if (threadId <= 0) {
    return;
  }
  if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {
    log(""String_Node_Str"" + threadId + ""String_Node_Str""+ hasDraft);
  }
  boolean changed;
  if (hasDraft) {
    changed=mDraftSet.add(threadId);
  }
 else {
    changed=mDraftSet.remove(threadId);
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    dump();
  }
  if (changed) {
    for (    OnDraftChangedListener l : mChangeListeners) {
      l.onDraftChanged(threadId,hasDraft);
    }
  }
}","/** 
 * Updates the has-draft status of a particular thread on a piecemeal basis, to be called when a draft has appeared or disappeared.
 */
public synchronized void setDraftState(long threadId,boolean hasDraft){
  if (threadId <= 0) {
    return;
  }
  boolean changed;
  if (hasDraft) {
    changed=mDraftSet.add(threadId);
  }
 else {
    changed=mDraftSet.remove(threadId);
  }
  if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {
    log(""String_Node_Str"" + threadId + ""String_Node_Str""+ hasDraft+ ""String_Node_Str""+ changed);
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    dump();
  }
  if (changed) {
    for (    OnDraftChangedListener l : mChangeListeners) {
      l.onDraftChanged(threadId,hasDraft);
    }
  }
}",0.7985915492957747
44552,"public synchronized void addOnDraftChangedListener(OnDraftChangedListener l){
  mChangeListeners.add(l);
}","public synchronized void addOnDraftChangedListener(OnDraftChangedListener l){
  if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {
    log(""String_Node_Str"" + l);
  }
  mChangeListeners.add(l);
}",0.7210884353741497
44553,"public synchronized void removeOnDraftChangedListener(OnDraftChangedListener l){
  mChangeListeners.remove(l);
}","public synchronized void removeOnDraftChangedListener(OnDraftChangedListener l){
  if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {
    log(""String_Node_Str"" + l);
  }
  mChangeListeners.remove(l);
}",0.7320261437908496
44554,"@Override public Cursor runQueryOnBackgroundThread(CharSequence constraint){
  String phone=""String_Node_Str"";
  String cons=null;
  if (constraint != null) {
    cons=constraint.toString();
    if (usefulAsDigits(cons)) {
      phone=PhoneNumberUtils.convertKeypadLettersToDigits(cons);
      if (phone.equals(cons)) {
        phone=""String_Node_Str"";
      }
 else {
        phone=phone.trim();
      }
    }
  }
  Uri uri=Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(cons));
  Cursor phoneCursor=mContentResolver.query(uri,PROJECTION_PHONE,Phone.TYPE + ""String_Node_Str"" + Phone.TYPE_MOBILE,null,SORT_ORDER);
  if (phone.length() > 0) {
    ArrayList result=new ArrayList();
    result.add(Integer.valueOf(-1));
    result.add(Long.valueOf(-1));
    result.add(Integer.valueOf(Phone.TYPE_CUSTOM));
    result.add(phone);
    result.add(""String_Node_Str"");
    result.add(cons);
    ArrayList<ArrayList> wrap=new ArrayList<ArrayList>();
    wrap.add(result);
    ArrayListCursor translated=new ArrayListCursor(PROJECTION_PHONE,wrap);
    return new MergeCursor(new Cursor[]{translated,phoneCursor});
  }
 else {
    return phoneCursor;
  }
}","@Override public Cursor runQueryOnBackgroundThread(CharSequence constraint){
  String phone=""String_Node_Str"";
  String cons=null;
  if (constraint != null) {
    cons=constraint.toString();
    if (usefulAsDigits(cons)) {
      phone=PhoneNumberUtils.convertKeypadLettersToDigits(cons);
      if (phone.equals(cons)) {
        phone=""String_Node_Str"";
      }
 else {
        phone=phone.trim();
      }
    }
  }
  Uri uri=Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(cons));
  Cursor phoneCursor=mContentResolver.query(uri,PROJECTION_PHONE,Phone.TYPE + '=' + Phone.TYPE_MOBILE+ ""String_Node_Str""+ Phone.TYPE+ '='+ Phone.TYPE_WORK_MOBILE,null,SORT_ORDER);
  if (phone.length() > 0) {
    ArrayList result=new ArrayList();
    result.add(Integer.valueOf(-1));
    result.add(Long.valueOf(-1));
    result.add(Integer.valueOf(Phone.TYPE_CUSTOM));
    result.add(phone);
    result.add(""String_Node_Str"");
    result.add(cons);
    ArrayList<ArrayList> wrap=new ArrayList<ArrayList>();
    wrap.add(result);
    ArrayListCursor translated=new ArrayListCursor(PROJECTION_PHONE,wrap);
    return new MergeCursor(new Cursor[]{translated,phoneCursor});
  }
 else {
    return phoneCursor;
  }
}",0.966044142614601
44555,"private void internalAdd(MediaModel media) throws IllegalStateException {
  if (media == null) {
    return;
  }
  if (media.isText()) {
    internalAddOrReplace(mText,media);
    mText=media;
  }
 else   if (media.isImage()) {
    if (mCanAddImage) {
      internalAddOrReplace(mImage,media);
      mImage=media;
      mCanAddVideo=false;
    }
 else {
      throw new IllegalStateException();
    }
  }
 else   if (media.isAudio()) {
    if (mCanAddAudio) {
      internalAddOrReplace(mAudio,media);
      mAudio=media;
      mCanAddVideo=false;
    }
 else {
      throw new IllegalStateException();
    }
  }
 else   if (media.isVideo()) {
    if (mCanAddVideo) {
      internalAddOrReplace(mVideo,media);
      mVideo=media;
      mCanAddImage=false;
      mCanAddAudio=false;
    }
 else {
      throw new IllegalStateException();
    }
  }
}","private void internalAdd(MediaModel media) throws IllegalStateException {
  if (media == null) {
    return;
  }
  if (media.isText()) {
    String contentType=media.getContentType();
    if (TextUtils.isEmpty(contentType) || ""String_Node_Str"".equals(contentType)) {
      internalAddOrReplace(mText,media);
      mText=media;
    }
 else {
      Log.w(TAG,""String_Node_Str"" + media.getContentType() + ""String_Node_Str"");
    }
  }
 else   if (media.isImage()) {
    if (mCanAddImage) {
      internalAddOrReplace(mImage,media);
      mImage=media;
      mCanAddVideo=false;
    }
 else {
      throw new IllegalStateException();
    }
  }
 else   if (media.isAudio()) {
    if (mCanAddAudio) {
      internalAddOrReplace(mAudio,media);
      mAudio=media;
      mCanAddVideo=false;
    }
 else {
      throw new IllegalStateException();
    }
  }
 else   if (media.isVideo()) {
    if (mCanAddVideo) {
      internalAddOrReplace(mVideo,media);
      mVideo=media;
      mCanAddImage=false;
      mCanAddAudio=false;
    }
 else {
      throw new IllegalStateException();
    }
  }
}",0.8783013982392542
44556,"MessageItem(Context context,String type,Cursor cursor,ColumnsMap columnsMap,String highlight) throws MmsException {
  mContext=context;
  mMsgId=cursor.getLong(columnsMap.mColumnMsgId);
  mHighlight=highlight != null ? highlight.toLowerCase() : null;
  mType=type;
  if (""String_Node_Str"".equals(type)) {
    mReadReport=false;
    mDeliveryReport=(cursor.getLong(columnsMap.mColumnSmsStatus) != Sms.STATUS_NONE);
    mMessageUri=ContentUris.withAppendedId(Sms.CONTENT_URI,mMsgId);
    mBoxId=cursor.getInt(columnsMap.mColumnSmsType);
    mAddress=cursor.getString(columnsMap.mColumnSmsAddress);
    if (Sms.isOutgoingFolder(mBoxId)) {
      String meString=context.getString(R.string.messagelist_sender_self);
      mContact=meString;
    }
 else {
      mContact=Contact.get(mAddress,true).getName();
    }
    mBody=cursor.getString(columnsMap.mColumnSmsBody);
    if (!isOutgoingMessage()) {
      long date=cursor.getLong(columnsMap.mColumnSmsDate);
      mTimestamp=String.format(context.getString(R.string.sent_on),MessageUtils.formatTimeStampString(context,date));
    }
    mLocked=cursor.getInt(columnsMap.mColumnSmsLocked) != 0;
  }
 else   if (""String_Node_Str"".equals(type)) {
    mMessageUri=ContentUris.withAppendedId(Mms.CONTENT_URI,mMsgId);
    mBoxId=cursor.getInt(columnsMap.mColumnMmsMessageBox);
    mMessageType=cursor.getInt(columnsMap.mColumnMmsMessageType);
    mErrorType=cursor.getInt(columnsMap.mColumnMmsErrorType);
    String subject=cursor.getString(columnsMap.mColumnMmsSubject);
    if (!TextUtils.isEmpty(subject)) {
      EncodedStringValue v=new EncodedStringValue(cursor.getInt(columnsMap.mColumnMmsSubjectCharset),PduPersister.getBytes(subject));
      mSubject=v.getString();
    }
    mLocked=cursor.getInt(columnsMap.mColumnMmsLocked) != 0;
    long timestamp=0L;
    PduPersister p=PduPersister.getPduPersister(mContext);
    if (PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND == mMessageType) {
      mDeliveryReport=false;
      NotificationInd notifInd=(NotificationInd)p.load(mMessageUri);
      interpretFrom(notifInd.getFrom());
      mBody=new String(notifInd.getContentLocation());
      mMessageSize=(int)notifInd.getMessageSize();
      timestamp=notifInd.getExpiry() * 1000L;
    }
 else {
      MultimediaMessagePdu msg=(MultimediaMessagePdu)p.load(mMessageUri);
      mSlideshow=SlideshowModel.createFromPduBody(context,msg.getBody());
      mAttachmentType=MessageUtils.getAttachmentType(mSlideshow);
      if (mMessageType == PduHeaders.MESSAGE_TYPE_RETRIEVE_CONF) {
        RetrieveConf retrieveConf=(RetrieveConf)msg;
        interpretFrom(retrieveConf.getFrom());
        timestamp=retrieveConf.getDate() * 1000L;
      }
 else {
        mContact=mAddress=context.getString(R.string.messagelist_sender_self);
        timestamp=((SendReq)msg).getDate() * 1000L;
      }
      String report=cursor.getString(columnsMap.mColumnMmsDeliveryReport);
      if ((report == null) || !mAddress.equals(context.getString(R.string.messagelist_sender_self))) {
        mDeliveryReport=false;
      }
 else {
        int reportInt;
        try {
          reportInt=Integer.parseInt(report);
          mDeliveryReport=(reportInt == PduHeaders.VALUE_YES);
        }
 catch (        NumberFormatException nfe) {
          Log.e(TAG,""String_Node_Str"");
          mDeliveryReport=false;
        }
      }
      report=cursor.getString(columnsMap.mColumnMmsReadReport);
      if ((report == null) || !mAddress.equals(context.getString(R.string.messagelist_sender_self))) {
        mReadReport=false;
      }
 else {
        int reportInt;
        try {
          reportInt=Integer.parseInt(report);
          mReadReport=(reportInt == PduHeaders.VALUE_YES);
        }
 catch (        NumberFormatException nfe) {
          Log.e(TAG,""String_Node_Str"");
          mReadReport=false;
        }
      }
      SlideModel slide=mSlideshow.get(0);
      if ((slide != null) && slide.hasText()) {
        TextModel tm=slide.getText();
        if (tm.isDrmProtected()) {
          mBody=mContext.getString(R.string.drm_protected_text);
        }
 else {
          mBody=slide.getText().getText();
        }
      }
      mMessageSize=mSlideshow.getCurrentMessageSize();
    }
    if (!isOutgoingMessage()) {
      mTimestamp=context.getString(getTimestampStrId(),MessageUtils.formatTimeStampString(context,timestamp));
    }
  }
 else {
    throw new MmsException(""String_Node_Str"" + type);
  }
}","MessageItem(Context context,String type,Cursor cursor,ColumnsMap columnsMap,String highlight) throws MmsException {
  mContext=context;
  mMsgId=cursor.getLong(columnsMap.mColumnMsgId);
  mHighlight=highlight != null ? highlight.toLowerCase() : null;
  mType=type;
  if (""String_Node_Str"".equals(type)) {
    mReadReport=false;
    mDeliveryReport=(cursor.getLong(columnsMap.mColumnSmsStatus) != Sms.STATUS_NONE);
    mMessageUri=ContentUris.withAppendedId(Sms.CONTENT_URI,mMsgId);
    mBoxId=cursor.getInt(columnsMap.mColumnSmsType);
    mAddress=cursor.getString(columnsMap.mColumnSmsAddress);
    if (Sms.isOutgoingFolder(mBoxId)) {
      String meString=context.getString(R.string.messagelist_sender_self);
      mContact=meString;
    }
 else {
      mContact=Contact.get(mAddress,true).getName();
    }
    mBody=cursor.getString(columnsMap.mColumnSmsBody);
    if (!isOutgoingMessage()) {
      long date=cursor.getLong(columnsMap.mColumnSmsDate);
      mTimestamp=String.format(context.getString(R.string.sent_on),MessageUtils.formatTimeStampString(context,date));
    }
    mLocked=cursor.getInt(columnsMap.mColumnSmsLocked) != 0;
  }
 else   if (""String_Node_Str"".equals(type)) {
    mMessageUri=ContentUris.withAppendedId(Mms.CONTENT_URI,mMsgId);
    mBoxId=cursor.getInt(columnsMap.mColumnMmsMessageBox);
    mMessageType=cursor.getInt(columnsMap.mColumnMmsMessageType);
    mErrorType=cursor.getInt(columnsMap.mColumnMmsErrorType);
    String subject=cursor.getString(columnsMap.mColumnMmsSubject);
    if (!TextUtils.isEmpty(subject)) {
      EncodedStringValue v=new EncodedStringValue(cursor.getInt(columnsMap.mColumnMmsSubjectCharset),PduPersister.getBytes(subject));
      mSubject=v.getString();
    }
    mLocked=cursor.getInt(columnsMap.mColumnMmsLocked) != 0;
    long timestamp=0L;
    PduPersister p=PduPersister.getPduPersister(mContext);
    if (PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND == mMessageType) {
      mDeliveryReport=false;
      NotificationInd notifInd=(NotificationInd)p.load(mMessageUri);
      interpretFrom(notifInd.getFrom());
      mBody=new String(notifInd.getContentLocation());
      mMessageSize=(int)notifInd.getMessageSize();
      timestamp=notifInd.getExpiry() * 1000L;
    }
 else {
      MultimediaMessagePdu msg=(MultimediaMessagePdu)p.load(mMessageUri);
      mSlideshow=SlideshowModel.createFromPduBody(context,msg.getBody());
      mAttachmentType=MessageUtils.getAttachmentType(mSlideshow);
      if (mMessageType == PduHeaders.MESSAGE_TYPE_RETRIEVE_CONF) {
        RetrieveConf retrieveConf=(RetrieveConf)msg;
        interpretFrom(retrieveConf.getFrom());
        timestamp=retrieveConf.getDate() * 1000L;
      }
 else {
        mContact=mAddress=context.getString(R.string.messagelist_sender_self);
        timestamp=((SendReq)msg).getDate() * 1000L;
      }
      String report=cursor.getString(columnsMap.mColumnMmsDeliveryReport);
      if ((report == null) || !mAddress.equals(context.getString(R.string.messagelist_sender_self))) {
        mDeliveryReport=false;
      }
 else {
        int reportInt;
        try {
          reportInt=Integer.parseInt(report);
          mDeliveryReport=(reportInt == PduHeaders.VALUE_YES);
        }
 catch (        NumberFormatException nfe) {
          Log.e(TAG,""String_Node_Str"");
          mDeliveryReport=false;
        }
      }
      report=cursor.getString(columnsMap.mColumnMmsReadReport);
      if ((report == null) || !mAddress.equals(context.getString(R.string.messagelist_sender_self))) {
        mReadReport=false;
      }
 else {
        int reportInt;
        try {
          reportInt=Integer.parseInt(report);
          mReadReport=(reportInt == PduHeaders.VALUE_YES);
        }
 catch (        NumberFormatException nfe) {
          Log.e(TAG,""String_Node_Str"");
          mReadReport=false;
        }
      }
      SlideModel slide=mSlideshow.get(0);
      if ((slide != null) && slide.hasText()) {
        TextModel tm=slide.getText();
        if (tm.isDrmProtected()) {
          mBody=mContext.getString(R.string.drm_protected_text);
        }
 else {
          mBody=tm.getText();
        }
      }
      mMessageSize=mSlideshow.getCurrentMessageSize();
    }
    if (!isOutgoingMessage()) {
      mTimestamp=context.getString(getTimestampStrId(),MessageUtils.formatTimeStampString(context,timestamp));
    }
  }
 else {
    throw new MmsException(""String_Node_Str"" + type);
  }
}",0.9980749631978258
44557,"private void drawBottomPanel(){
  resetCounter();
  if (mWorkingMessage.hasSlideshow()) {
    mBottomPanel.setVisibility(View.GONE);
    mAttachmentEditor.requestFocus();
    return;
  }
  mBottomPanel.setVisibility(View.VISIBLE);
  mTextEditor.setTextKeepState(mWorkingMessage.getText());
}","private void drawBottomPanel(){
  resetCounter();
  if (mWorkingMessage.hasSlideshow()) {
    mBottomPanel.setVisibility(View.GONE);
    mAttachmentEditor.requestFocus();
    return;
  }
  mBottomPanel.setVisibility(View.VISIBLE);
  CharSequence text=mWorkingMessage.getText();
  if (text != null) {
    mTextEditor.setTextKeepState(text);
  }
 else {
    mTextEditor.setText(""String_Node_Str"");
  }
}",0.7687861271676301
44558,"private void drawBottomPanel(){
  resetCounter();
  if (mWorkingMessage.hasSlideshow()) {
    mBottomPanel.setVisibility(View.GONE);
    mAttachmentEditor.requestFocus();
    return;
  }
  mBottomPanel.setVisibility(View.VISIBLE);
  mTextEditor.setTextKeepState(mWorkingMessage.getText());
}","private void drawBottomPanel(){
  resetCounter();
  if (mWorkingMessage.hasSlideshow()) {
    mBottomPanel.setVisibility(View.GONE);
    mAttachmentEditor.requestFocus();
    return;
  }
  mBottomPanel.setVisibility(View.VISIBLE);
  CharSequence text=mWorkingMessage.getText();
  if (text != null) {
    mTextEditor.setTextKeepState(text);
  }
 else {
    mTextEditor.setText(""String_Node_Str"");
  }
}",0.7687861271676301
44559,"@Override public Cursor runQueryOnBackgroundThread(CharSequence constraint){
  String phone=""String_Node_Str"";
  String cons=null;
  if (constraint != null) {
    cons=constraint.toString();
    if (usefulAsDigits(cons)) {
      phone=PhoneNumberUtils.convertKeypadLettersToDigits(cons);
      if (phone.equals(cons)) {
        phone=""String_Node_Str"";
      }
 else {
        phone=phone.trim();
      }
    }
  }
  Uri uri=Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(cons));
  Cursor phoneCursor=mContentResolver.query(uri,PROJECTION_PHONE,Phone.TYPE + ""String_Node_Str"" + Phone.TYPE_MOBILE,null,SORT_ORDER);
  if (phone.length() > 0) {
    ArrayList result=new ArrayList();
    result.add(Integer.valueOf(-1));
    result.add(Long.valueOf(-1));
    result.add(Integer.valueOf(Phone.TYPE_CUSTOM));
    result.add(phone);
    result.add(""String_Node_Str"");
    result.add(cons);
    ArrayList<ArrayList> wrap=new ArrayList<ArrayList>();
    wrap.add(result);
    ArrayListCursor translated=new ArrayListCursor(PROJECTION_PHONE,wrap);
    return new MergeCursor(new Cursor[]{translated,phoneCursor});
  }
 else {
    return phoneCursor;
  }
}","@Override public Cursor runQueryOnBackgroundThread(CharSequence constraint){
  String phone=""String_Node_Str"";
  String cons=null;
  if (constraint != null) {
    cons=constraint.toString();
    if (usefulAsDigits(cons)) {
      phone=PhoneNumberUtils.convertKeypadLettersToDigits(cons);
      if (phone.equals(cons)) {
        phone=""String_Node_Str"";
      }
 else {
        phone=phone.trim();
      }
    }
  }
  Uri uri=Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(cons));
  Cursor phoneCursor=mContentResolver.query(uri,PROJECTION_PHONE,Phone.TYPE + '=' + Phone.TYPE_MOBILE+ ""String_Node_Str""+ Phone.TYPE+ '='+ Phone.TYPE_WORK_MOBILE,null,SORT_ORDER);
  if (phone.length() > 0) {
    ArrayList result=new ArrayList();
    result.add(Integer.valueOf(-1));
    result.add(Long.valueOf(-1));
    result.add(Integer.valueOf(Phone.TYPE_CUSTOM));
    result.add(phone);
    result.add(""String_Node_Str"");
    result.add(cons);
    ArrayList<ArrayList> wrap=new ArrayList<ArrayList>();
    wrap.add(result);
    ArrayListCursor translated=new ArrayListCursor(PROJECTION_PHONE,wrap);
    return new MergeCursor(new Cursor[]{translated,phoneCursor});
  }
 else {
    return phoneCursor;
  }
}",0.966044142614601
44560,"public synchronized void addListener(UpdateListener l){
  mListeners.add(l);
}","public synchronized void addListener(UpdateListener l){
  boolean added=mListeners.add(l);
  if (V && added)   dumpListeners();
}",0.7536231884057971
44561,"@Override public void onChange(boolean selfUpdate){
  invalidateCache();
}","@Override public void onChange(boolean selfUpdate){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"");
  }
  invalidateCache();
}",0.6491228070175439
44562,"public synchronized void removeListener(UpdateListener l){
  mListeners.remove(l);
}","public synchronized void removeListener(UpdateListener l){
  boolean removed=mListeners.remove(l);
  if (V && removed)   dumpListeners();
}",0.7533632286995515
44563,"@Override protected void onPause(){
  super.onPause();
  Contact.stopPresenceObserver();
  removeRecipientsListeners();
}","@Override protected void onPause(){
  super.onPause();
  removeRecipientsListeners();
}",0.8365384615384616
44564,"@Override protected void onResume(){
  super.onResume();
  Contact.startPresenceObserver();
  addRecipientsListeners();
}","@Override protected void onResume(){
  super.onResume();
  addRecipientsListeners();
}",0.8309178743961353
44565,"public final void bind(Context context,final ConversationHeader ch){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  setConversationHeader(ch);
  LayoutParams attachmentLayout=(LayoutParams)mAttachmentView.getLayoutParams();
  boolean hasError=ch.hasError();
  if (hasError) {
    attachmentLayout.addRule(RelativeLayout.LEFT_OF,R.id.error);
  }
 else {
    attachmentLayout.addRule(RelativeLayout.LEFT_OF,R.id.date);
  }
  boolean hasAttachment=ch.hasAttachment();
  mAttachmentView.setVisibility(hasAttachment ? VISIBLE : GONE);
  mDateView.setText(ch.getDate());
  mFromView.setText(formatMessage(ch));
  ContactList contacts=ch.getContacts();
  contacts.addListeners(this);
  setPresenceIcon(contacts.getPresenceResId());
  mSubjectView.setText(ch.getSubject());
  LayoutParams subjectLayout=(LayoutParams)mSubjectView.getLayoutParams();
  subjectLayout.addRule(RelativeLayout.LEFT_OF,hasAttachment ? R.id.attachment : (hasError ? R.id.error : R.id.date));
  mErrorIndicator.setVisibility(hasError ? VISIBLE : GONE);
  updateAvatarView();
}","public final void bind(Context context,final ConversationHeader ch){
  setConversationHeader(ch);
  LayoutParams attachmentLayout=(LayoutParams)mAttachmentView.getLayoutParams();
  boolean hasError=ch.hasError();
  if (hasError) {
    attachmentLayout.addRule(RelativeLayout.LEFT_OF,R.id.error);
  }
 else {
    attachmentLayout.addRule(RelativeLayout.LEFT_OF,R.id.date);
  }
  boolean hasAttachment=ch.hasAttachment();
  mAttachmentView.setVisibility(hasAttachment ? VISIBLE : GONE);
  mDateView.setText(ch.getDate());
  mFromView.setText(formatMessage(ch));
  ContactList contacts=ch.getContacts();
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + this);
  contacts.addListeners(this);
  setPresenceIcon(contacts.getPresenceResId());
  mSubjectView.setText(ch.getSubject());
  LayoutParams subjectLayout=(LayoutParams)mSubjectView.getLayoutParams();
  subjectLayout.addRule(RelativeLayout.LEFT_OF,hasAttachment ? R.id.attachment : (hasError ? R.id.error : R.id.date));
  mErrorIndicator.setVisibility(hasError ? VISIBLE : GONE);
  updateAvatarView();
}",0.2360248447204969
44566,"public final void unbind(){
  mConversationHeader.getContacts().removeListeners(this);
}","public final void unbind(){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + this);
  mConversationHeader.getContacts().removeListeners(this);
}",0.7719298245614035
44567,"private void initListAdapter(){
  mListAdapter=new ConversationListAdapter(this,null);
  setListAdapter(mListAdapter);
}","private void initListAdapter(){
  mListAdapter=new ConversationListAdapter(this,null);
  setListAdapter(mListAdapter);
  getListView().setRecyclerListener(mListAdapter);
}",0.8247422680412371
44568,"@Override protected void onStop(){
  super.onStop();
  mListAdapter.changeCursor(null);
}","@Override protected void onStop(){
  super.onStop();
  DraftCache.getInstance().removeOnDraftChangedListener(this);
  mListAdapter.changeCursor(null);
}",0.7385892116182573
44569,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.conversation_list_screen);
  mQueryHandler=new ThreadListQueryHandler(getContentResolver());
  ListView listView=getListView();
  LayoutInflater inflater=LayoutInflater.from(this);
  ConversationHeaderView headerView=(ConversationHeaderView)inflater.inflate(R.layout.conversation_header,listView,false);
  headerView.bind(getString(R.string.new_message),getString(R.string.create_new_message));
  listView.addHeaderView(headerView,null,true);
  listView.setOnCreateContextMenuListener(mConvListOnCreateContextMenuListener);
  listView.setOnKeyListener(mThreadListKeyListener);
  initListAdapter();
  handleCreationIntent(getIntent());
  mHandler=new Handler();
  mPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  boolean checkedMessageLimits=mPrefs.getBoolean(CHECKED_MESSAGE_LIMITS,false);
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + checkedMessageLimits);
  if (!checkedMessageLimits || DEBUG) {
    runOneTimeStorageLimitCheckForLegacyMessages();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.conversation_list_screen);
  mQueryHandler=new ThreadListQueryHandler(getContentResolver());
  ListView listView=getListView();
  LayoutInflater inflater=LayoutInflater.from(this);
  ConversationHeaderView headerView=(ConversationHeaderView)inflater.inflate(R.layout.conversation_header,listView,false);
  headerView.bind(getString(R.string.new_message),getString(R.string.create_new_message));
  listView.addHeaderView(headerView,null,true);
  listView.setOnCreateContextMenuListener(mConvListOnCreateContextMenuListener);
  listView.setOnKeyListener(mThreadListKeyListener);
  initListAdapter();
  mTitle=getString(R.string.app_label);
  mHandler=new Handler();
  mPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  boolean checkedMessageLimits=mPrefs.getBoolean(CHECKED_MESSAGE_LIMITS,false);
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + checkedMessageLimits);
  if (!checkedMessageLimits || DEBUG) {
    runOneTimeStorageLimitCheckForLegacyMessages();
  }
}",0.9710832973672852
44570,"public void onDraftChanged(long threadId,boolean hasDraft){
  mQueryHandler.post(new Runnable(){
    public void run(){
      mListAdapter.notifyDataSetChanged();
    }
  }
);
}","public void onDraftChanged(final long threadId,final boolean hasDraft){
  mQueryHandler.post(new Runnable(){
    public void run(){
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + threadId + ""String_Node_Str""+ hasDraft);
      }
      mListAdapter.notifyDataSetChanged();
    }
  }
);
}",0.7094188376753507
44571,"@Override protected void onNewIntent(Intent intent){
  handleCreationIntent(intent);
}","@Override protected void onNewIntent(Intent intent){
  privateOnStart();
}",0.825
44572,"/** 
 * Updates the has-draft status of a particular thread on a piecemeal basis, to be called when a draft has appeared or disappeared.
 */
public synchronized void setDraftState(long threadId,boolean hasDraft){
  if (threadId <= 0) {
    return;
  }
  if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {
    log(""String_Node_Str"" + threadId + ""String_Node_Str""+ hasDraft);
  }
  boolean changed;
  if (hasDraft) {
    changed=mDraftSet.add(threadId);
  }
 else {
    changed=mDraftSet.remove(threadId);
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    dump();
  }
  if (changed) {
    for (    OnDraftChangedListener l : mChangeListeners) {
      l.onDraftChanged(threadId,hasDraft);
    }
  }
}","/** 
 * Updates the has-draft status of a particular thread on a piecemeal basis, to be called when a draft has appeared or disappeared.
 */
public synchronized void setDraftState(long threadId,boolean hasDraft){
  if (threadId <= 0) {
    return;
  }
  boolean changed;
  if (hasDraft) {
    changed=mDraftSet.add(threadId);
  }
 else {
    changed=mDraftSet.remove(threadId);
  }
  if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {
    log(""String_Node_Str"" + threadId + ""String_Node_Str""+ hasDraft+ ""String_Node_Str""+ changed);
  }
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    dump();
  }
  if (changed) {
    for (    OnDraftChangedListener l : mChangeListeners) {
      l.onDraftChanged(threadId,hasDraft);
    }
  }
}",0.7985915492957747
44573,"public synchronized void addOnDraftChangedListener(OnDraftChangedListener l){
  mChangeListeners.add(l);
}","public synchronized void addOnDraftChangedListener(OnDraftChangedListener l){
  if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {
    log(""String_Node_Str"" + l);
  }
  mChangeListeners.add(l);
}",0.7210884353741497
44574,"public synchronized void removeOnDraftChangedListener(OnDraftChangedListener l){
  mChangeListeners.remove(l);
}","public synchronized void removeOnDraftChangedListener(OnDraftChangedListener l){
  if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {
    log(""String_Node_Str"" + l);
  }
  mChangeListeners.remove(l);
}",0.7320261437908496
44575,"/** 
 * Removes the subject if it is empty, possibly converting back to SMS.
 */
private void removeSubjectIfEmpty(){
  if (!hasSubject()) {
    setSubject(null,true);
  }
}","/** 
 * Removes the subject if it is empty, possibly converting back to SMS.
 */
private void removeSubjectIfEmpty(boolean notify){
  if (!hasSubject()) {
    setSubject(null,notify);
  }
}",0.9392265193370166
44576,"/** 
 * Force the message to be saved as MMS and return the Uri of the message. Typically used when handing a message off to another activity.
 */
public Uri saveAsMms(){
  if (DEBUG)   debug(""String_Node_Str"",mConversation);
  if (mDiscarded) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  updateState(FORCE_MMS,true,false);
  prepareForSave();
  mConversation.ensureThreadId();
  mConversation.setDraftState(true);
  PduPersister persister=PduPersister.getPduPersister(mContext);
  SendReq sendReq=makeSendReq(mConversation,mSubject);
  if (mMessageUri == null) {
    mMessageUri=createDraftMmsMessage(persister,sendReq,mSlideshow);
  }
 else {
    updateDraftMmsMessage(mMessageUri,persister,mSlideshow,sendReq);
  }
  return mMessageUri;
}","/** 
 * Force the message to be saved as MMS and return the Uri of the message. Typically used when handing a message off to another activity.
 */
public Uri saveAsMms(){
  if (DEBUG)   debug(""String_Node_Str"",mConversation);
  if (mDiscarded) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  updateState(FORCE_MMS,true,false);
  prepareForSave(true);
  mConversation.ensureThreadId();
  mConversation.setDraftState(true);
  PduPersister persister=PduPersister.getPduPersister(mContext);
  SendReq sendReq=makeSendReq(mConversation,mSubject);
  if (mMessageUri == null) {
    mMessageUri=createDraftMmsMessage(persister,sendReq,mSlideshow);
  }
 else {
    updateDraftMmsMessage(mMessageUri,persister,mSlideshow,sendReq);
  }
  return mMessageUri;
}",0.9973753280839897
44577,"/** 
 * Gets internal message state ready for storage.  Should be called any time the message is about to be sent or written to disk.
 */
private void prepareForSave(){
  syncWorkingRecipients();
  if (requiresMms()) {
    ensureSlideshow();
    syncTextToSlideshow();
    removeSubjectIfEmpty();
  }
}","/** 
 * Gets internal message state ready for storage.  Should be called any time the message is about to be sent or written to disk.
 */
private void prepareForSave(boolean notify){
  syncWorkingRecipients();
  if (requiresMms()) {
    ensureSlideshow();
    syncTextToSlideshow();
    removeSubjectIfEmpty(notify);
  }
}",0.967948717948718
44578,"/** 
 * Send this message over the network.  Will call back with onMessageSent() once it has been dispatched to the telephony stack.  This WorkingMessage object is no longer useful after this method has been called.
 */
public void send(){
  if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
    debug(""String_Node_Str"");
  }
  prepareForSave();
  final Conversation conv=mConversation;
  String msgTxt=mText.toString();
  if (requiresMms() || addressContainsEmailToMms(conv,msgTxt)) {
    final Uri mmsUri=mMessageUri;
    final PduPersister persister=PduPersister.getPduPersister(mContext);
    final SlideshowModel slideshow=mSlideshow;
    final SendReq sendReq=makeSendReq(conv,mSubject);
    slideshow.prepareForSend();
    new Thread(new Runnable(){
      public void run(){
        sendMmsWorker(conv,mmsUri,persister,slideshow,sendReq);
      }
    }
).start();
  }
 else {
    final String msgText=mText.toString();
    new Thread(new Runnable(){
      public void run(){
        sendSmsWorker(conv,msgText);
      }
    }
).start();
  }
  mDiscarded=true;
}","/** 
 * Send this message over the network.  Will call back with onMessageSent() once it has been dispatched to the telephony stack.  This WorkingMessage object is no longer useful after this method has been called.
 */
public void send(){
  if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
    debug(""String_Node_Str"");
  }
  prepareForSave(true);
  final Conversation conv=mConversation;
  String msgTxt=mText.toString();
  if (requiresMms() || addressContainsEmailToMms(conv,msgTxt)) {
    final Uri mmsUri=mMessageUri;
    final PduPersister persister=PduPersister.getPduPersister(mContext);
    final SlideshowModel slideshow=mSlideshow;
    final SendReq sendReq=makeSendReq(conv,mSubject);
    slideshow.prepareForSend();
    new Thread(new Runnable(){
      public void run(){
        sendMmsWorker(conv,mmsUri,persister,slideshow,sendReq);
      }
    }
).start();
  }
 else {
    final String msgText=mText.toString();
    new Thread(new Runnable(){
      public void run(){
        sendSmsWorker(conv,msgText);
      }
    }
).start();
  }
  mDiscarded=true;
}",0.9981378026070764
44579,"/** 
 * Save this message as a draft in the conversation previously specified to   {@link setConversation}.
 */
public void saveDraft(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    debug(""String_Node_Str"");
  }
  if (mDiscarded) {
    return;
  }
  if (mConversation == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  prepareForSave();
  if (requiresMms()) {
    asyncUpdateDraftMmsMessage(mConversation);
  }
 else {
    asyncUpdateDraftSmsMessage(mConversation,mText.toString());
  }
  mConversation.setDraftState(true);
}","/** 
 * Save this message as a draft in the conversation previously specified to   {@link setConversation}.
 */
public void saveDraft(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    debug(""String_Node_Str"");
  }
  if (mDiscarded) {
    return;
  }
  if (mConversation == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  prepareForSave(false);
  if (requiresMms()) {
    asyncUpdateDraftMmsMessage(mConversation);
  }
 else {
    asyncUpdateDraftSmsMessage(mConversation,mText.toString());
  }
  mConversation.setDraftState(true);
}",0.995507637017071
44580,"/** 
 * Removes the subject if it is empty, possibly converting back to SMS.
 */
private void removeSubjectIfEmpty(){
  if (!hasSubject()) {
    setSubject(null,true);
  }
}","/** 
 * Removes the subject if it is empty, possibly converting back to SMS.
 */
private void removeSubjectIfEmpty(boolean notify){
  if (!hasSubject()) {
    setSubject(null,notify);
  }
}",0.9392265193370166
44581,"/** 
 * Force the message to be saved as MMS and return the Uri of the message. Typically used when handing a message off to another activity.
 */
public Uri saveAsMms(){
  if (DEBUG)   debug(""String_Node_Str"",mConversation);
  if (mDiscarded) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  updateState(FORCE_MMS,true,false);
  prepareForSave();
  mConversation.ensureThreadId();
  mConversation.setDraftState(true);
  PduPersister persister=PduPersister.getPduPersister(mContext);
  SendReq sendReq=makeSendReq(mConversation,mSubject);
  if (mMessageUri == null) {
    mMessageUri=createDraftMmsMessage(persister,sendReq,mSlideshow);
  }
 else {
    updateDraftMmsMessage(mMessageUri,persister,mSlideshow,sendReq);
  }
  return mMessageUri;
}","/** 
 * Force the message to be saved as MMS and return the Uri of the message. Typically used when handing a message off to another activity.
 */
public Uri saveAsMms(){
  if (DEBUG)   debug(""String_Node_Str"",mConversation);
  if (mDiscarded) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  updateState(FORCE_MMS,true,false);
  prepareForSave(true);
  mConversation.ensureThreadId();
  mConversation.setDraftState(true);
  PduPersister persister=PduPersister.getPduPersister(mContext);
  SendReq sendReq=makeSendReq(mConversation,mSubject);
  if (mMessageUri == null) {
    mMessageUri=createDraftMmsMessage(persister,sendReq,mSlideshow);
  }
 else {
    updateDraftMmsMessage(mMessageUri,persister,mSlideshow,sendReq);
  }
  return mMessageUri;
}",0.9973753280839897
44582,"/** 
 * Gets internal message state ready for storage.  Should be called any time the message is about to be sent or written to disk.
 */
private void prepareForSave(){
  syncWorkingRecipients();
  if (requiresMms()) {
    ensureSlideshow();
    syncTextToSlideshow();
    removeSubjectIfEmpty();
  }
}","/** 
 * Gets internal message state ready for storage.  Should be called any time the message is about to be sent or written to disk.
 */
private void prepareForSave(boolean notify){
  syncWorkingRecipients();
  if (requiresMms()) {
    ensureSlideshow();
    syncTextToSlideshow();
    removeSubjectIfEmpty(notify);
  }
}",0.967948717948718
44583,"/** 
 * Send this message over the network.  Will call back with onMessageSent() once it has been dispatched to the telephony stack.  This WorkingMessage object is no longer useful after this method has been called.
 */
public void send(){
  if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
    debug(""String_Node_Str"");
  }
  prepareForSave();
  final Conversation conv=mConversation;
  String msgTxt=mText.toString();
  if (requiresMms() || addressContainsEmailToMms(conv,msgTxt)) {
    final Uri mmsUri=mMessageUri;
    final PduPersister persister=PduPersister.getPduPersister(mContext);
    final SlideshowModel slideshow=mSlideshow;
    final SendReq sendReq=makeSendReq(conv,mSubject);
    slideshow.prepareForSend();
    new Thread(new Runnable(){
      public void run(){
        sendMmsWorker(conv,mmsUri,persister,slideshow,sendReq);
      }
    }
).start();
  }
 else {
    final String msgText=mText.toString();
    new Thread(new Runnable(){
      public void run(){
        sendSmsWorker(conv,msgText);
      }
    }
).start();
  }
  mDiscarded=true;
}","/** 
 * Send this message over the network.  Will call back with onMessageSent() once it has been dispatched to the telephony stack.  This WorkingMessage object is no longer useful after this method has been called.
 */
public void send(){
  if (Log.isLoggable(LogTag.TRANSACTION,Log.VERBOSE)) {
    debug(""String_Node_Str"");
  }
  prepareForSave(true);
  final Conversation conv=mConversation;
  String msgTxt=mText.toString();
  if (requiresMms() || addressContainsEmailToMms(conv,msgTxt)) {
    final Uri mmsUri=mMessageUri;
    final PduPersister persister=PduPersister.getPduPersister(mContext);
    final SlideshowModel slideshow=mSlideshow;
    final SendReq sendReq=makeSendReq(conv,mSubject);
    slideshow.prepareForSend();
    new Thread(new Runnable(){
      public void run(){
        sendMmsWorker(conv,mmsUri,persister,slideshow,sendReq);
      }
    }
).start();
  }
 else {
    final String msgText=mText.toString();
    new Thread(new Runnable(){
      public void run(){
        sendSmsWorker(conv,msgText);
      }
    }
).start();
  }
  mDiscarded=true;
}",0.9981378026070764
44584,"/** 
 * Save this message as a draft in the conversation previously specified to   {@link setConversation}.
 */
public void saveDraft(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    debug(""String_Node_Str"");
  }
  if (mDiscarded) {
    return;
  }
  if (mConversation == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  prepareForSave();
  if (requiresMms()) {
    asyncUpdateDraftMmsMessage(mConversation);
  }
 else {
    asyncUpdateDraftSmsMessage(mConversation,mText.toString());
  }
  mConversation.setDraftState(true);
}","/** 
 * Save this message as a draft in the conversation previously specified to   {@link setConversation}.
 */
public void saveDraft(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    debug(""String_Node_Str"");
  }
  if (mDiscarded) {
    return;
  }
  if (mConversation == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  prepareForSave(false);
  if (requiresMms()) {
    asyncUpdateDraftMmsMessage(mConversation);
  }
 else {
    asyncUpdateDraftSmsMessage(mConversation,mText.toString());
  }
  mConversation.setDraftState(true);
}",0.995507637017071
44585,"public void run(){
  Contact c=Cache.get(number);
  if (c == null) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  if (handleLocalNumber(c))   return;
  ContactInfoCache cache=ContactInfoCache.getInstance();
  ContactInfoCache.CacheEntry entry=cache.getContactInfo(number);
synchronized (Cache.getInstance()) {
    if (contactChanged(c,entry)) {
      c.mName=entry.name;
      c.mNameAndNumber=formatNameAndNumber(c.mName,c.mNumber);
      c.mLabel=entry.phoneLabel;
      c.mPersonId=entry.person_id;
      c.mPresenceResId=entry.presenceResId;
      c.mPresenceText=entry.presenceText;
      c.mAvatar=entry.mAvatar;
      for (      UpdateListener l : c.mListeners) {
        if (V)         Log.d(TAG,""String_Node_Str"" + l);
        l.onUpdate(c);
      }
    }
  }
}","public void run(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"");
  }
  for (  Contact c : contacts) {
    updateContact(c);
  }
}",0.235042735042735
44586,"static Contact get(String number){
  if (Mms.isEmailAddress(number))   return getEmail(number);
synchronized (sInstance) {
    for (    Contact c : sInstance.mCache) {
      if (PhoneNumberUtils.compare(number,c.mNumber)) {
        return c;
      }
    }
    return null;
  }
}","static Contact get(String number){
  if (Mms.isEmailAddress(number))   return getEmail(number);
synchronized (sInstance) {
    for (    Contact c : sInstance.mCache) {
      if (AddressUtils.phoneNumbersEqual(number,c.mNumber)) {
        return c;
      }
    }
    return null;
  }
}",0.9395017793594306
44587,"private static void updateContact(final String number,boolean canBlock){
  Runnable r=new Runnable(){
    public void run(){
      Contact c=Cache.get(number);
      if (c == null) {
        Log.w(TAG,""String_Node_Str"");
        return;
      }
      if (handleLocalNumber(c))       return;
      ContactInfoCache cache=ContactInfoCache.getInstance();
      ContactInfoCache.CacheEntry entry=cache.getContactInfo(number);
synchronized (Cache.getInstance()) {
        if (contactChanged(c,entry)) {
          c.mName=entry.name;
          c.mNameAndNumber=formatNameAndNumber(c.mName,c.mNumber);
          c.mLabel=entry.phoneLabel;
          c.mPersonId=entry.person_id;
          c.mPresenceResId=entry.presenceResId;
          c.mPresenceText=entry.presenceText;
          c.mAvatar=entry.mAvatar;
          for (          UpdateListener l : c.mListeners) {
            if (V)             Log.d(TAG,""String_Node_Str"" + l);
            l.onUpdate(c);
          }
        }
      }
    }
  }
;
  if (canBlock) {
    r.run();
  }
 else {
    sTaskStack.push(r);
  }
}","private static void updateContact(final Contact c){
  if (c == null) {
    return;
  }
  if (handleLocalNumber(c)) {
    return;
  }
  ContactInfoCache cache=ContactInfoCache.getInstance();
  ContactInfoCache.CacheEntry entry=cache.getContactInfo(c.mNumber);
synchronized (Cache.getInstance()) {
    if (contactChanged(c,entry)) {
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + entry.name);
      }
      c.mName=entry.name;
      c.mNameAndNumber=formatNameAndNumber(c.mName,c.mNumber);
      c.mLabel=entry.phoneLabel;
      c.mPersonId=entry.person_id;
      c.mPresenceResId=entry.presenceResId;
      c.mPresenceText=entry.presenceText;
      c.mAvatar=entry.mAvatar;
      for (      UpdateListener l : c.mListeners) {
        if (V)         Log.d(TAG,""String_Node_Str"" + l);
        l.onUpdate(c);
      }
    }
  }
}",0.1027503892060197
44588,"public static void invalidateCache(){
  if (V)   Log.d(TAG,""String_Node_Str"");
  ContactInfoCache.getInstance().invalidateCache();
  sTaskStack.clear();
  String[] numbersToUpdate=Cache.getNumbers();
  for (  String number : numbersToUpdate) {
    updateContact(number,false);
  }
}","public static void invalidateCache(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"");
  }
  ContactInfoCache.getInstance().invalidateCache();
  sTaskStack.clear();
  asyncUpdateContacts(Cache.getContacts(),false);
}",0.5980952380952381
44589,"public SmsMessageSender(Context context,String[] dests,String msgText,long threadId){
  mContext=context;
  mMessageText=msgText;
  mNumberOfDests=dests.length;
  mDests=new String[mNumberOfDests];
  System.arraycopy(dests,0,mDests,0,mNumberOfDests);
  mTimestamp=System.currentTimeMillis();
  mThreadId=threadId;
  mServiceCenter=getOutgoingServiceCenter(mThreadId);
}","public SmsMessageSender(Context context,String[] dests,String msgText,long threadId){
  if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {
    log(""String_Node_Str"" + threadId + ""String_Node_Str"");
    for (    String addr : dests) {
      log(""String_Node_Str"" + addr);
    }
  }
  mContext=context;
  mMessageText=msgText;
  mNumberOfDests=dests.length;
  mDests=new String[mNumberOfDests];
  System.arraycopy(dests,0,mDests,0,mNumberOfDests);
  mTimestamp=System.currentTimeMillis();
  mThreadId=threadId;
  mServiceCenter=getOutgoingServiceCenter(mThreadId);
}",0.796976241900648
44590,"/** 
 * Helper method to verify which field has the focus
 * @param focused The view that should be focused (all others should not have focus)
 */
private void checkFocused(View focused){
  assertEquals(focused == mRecipientsView,mRecipientsView.isFocused());
  assertEquals(focused == mTextEditor,mTextEditor.isFocused());
}","/** 
 * Helper method to verify which field has the focus
 * @param focused The view that should be focused (all others should not have focus)
 */
@SmallTest private void checkFocused(View focused){
  assertEquals(focused == mRecipientsView,mRecipientsView.isFocused());
  assertEquals(focused == mTextEditor,mTextEditor.isFocused());
}",0.983358547655068
44591,"public float getDur(){
  float dur=0;
  try {
    String durString=mSmilElement.getAttribute(""String_Node_Str"");
    if (durString != null) {
      dur=TimeImpl.parseClockValue(durString) / 1000f;
    }
  }
 catch (  IllegalArgumentException e) {
  }
  if (dur == 0) {
    dur=MmsConfig.getMinimumSlideElementDuration();
  }
  return dur;
}","public float getDur(){
  float dur=0;
  try {
    String durString=mSmilElement.getAttribute(""String_Node_Str"");
    if (durString != null) {
      dur=TimeImpl.parseClockValue(durString) / 1000f;
    }
  }
 catch (  IllegalArgumentException e) {
  }
  return dur;
}",0.834983498349835
44592,"private static MediaModel getGenericMediaModel(Context context,String tag,String src,SMILMediaElement sme,PduPart part,RegionModel regionModel) throws DrmException, IOException, MmsException {
  byte[] bytes=part.getContentType();
  if (bytes == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String contentType=new String(bytes);
  MediaModel media=null;
  if (ContentType.isDrmType(contentType)) {
    DrmWrapper wrapper=new DrmWrapper(contentType,part.getDataUri(),part.getData());
    if (tag.equals(SmilHelper.ELEMENT_TAG_TEXT)) {
      media=new TextModel(context,contentType,src,part.getCharset(),wrapper,regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_IMAGE)) {
      media=new ImageModel(context,contentType,src,wrapper,regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_VIDEO)) {
      media=new VideoModel(context,contentType,src,wrapper,regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_AUDIO)) {
      media=new AudioModel(context,contentType,src,wrapper);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_REF)) {
      String drmContentType=wrapper.getContentType();
      if (ContentType.isTextType(drmContentType)) {
        media=new TextModel(context,contentType,src,part.getCharset(),wrapper,regionModel);
      }
 else       if (ContentType.isImageType(drmContentType)) {
        media=new ImageModel(context,contentType,src,wrapper,regionModel);
      }
 else       if (ContentType.isVideoType(drmContentType)) {
        media=new VideoModel(context,contentType,src,wrapper,regionModel);
      }
 else       if (ContentType.isAudioType(drmContentType)) {
        media=new AudioModel(context,contentType,src,wrapper);
      }
 else {
        throw new UnsupportContentTypeException(""String_Node_Str"" + drmContentType);
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + tag);
    }
  }
 else {
    if (tag.equals(SmilHelper.ELEMENT_TAG_TEXT)) {
      media=new TextModel(context,contentType,src,part.getCharset(),part.getData(),regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_IMAGE)) {
      media=new ImageModel(context,contentType,src,part.getDataUri(),regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_VIDEO)) {
      media=new VideoModel(context,contentType,src,part.getDataUri(),regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_AUDIO)) {
      media=new AudioModel(context,contentType,src,part.getDataUri());
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_REF)) {
      if (ContentType.isTextType(contentType)) {
        media=new TextModel(context,contentType,src,part.getCharset(),part.getData(),regionModel);
      }
 else       if (ContentType.isImageType(contentType)) {
        media=new ImageModel(context,contentType,src,part.getDataUri(),regionModel);
      }
 else       if (ContentType.isVideoType(contentType)) {
        media=new VideoModel(context,contentType,src,part.getDataUri(),regionModel);
      }
 else       if (ContentType.isAudioType(contentType)) {
        media=new AudioModel(context,contentType,src,part.getDataUri());
      }
 else {
        throw new UnsupportContentTypeException(""String_Node_Str"" + contentType);
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + tag);
    }
  }
  int begin=0;
  TimeList tl=sme.getBegin();
  if ((tl != null) && (tl.getLength() > 0)) {
    Time t=tl.item(0);
    begin=(int)(t.getResolvedOffset() * 1000);
  }
  media.setBegin(begin);
  int duration=(int)(sme.getDur() * 1000);
  if (duration <= 0) {
    tl=sme.getEnd();
    if ((tl != null) && (tl.getLength() > 0)) {
      Time t=tl.item(0);
      if (t.getTimeType() != Time.SMIL_TIME_INDEFINITE) {
        duration=(int)(t.getResolvedOffset() * 1000) - begin;
      }
    }
  }
  media.setDuration(duration);
  media.setFill(sme.getFill());
  return media;
}","private static MediaModel getGenericMediaModel(Context context,String tag,String src,SMILMediaElement sme,PduPart part,RegionModel regionModel) throws DrmException, IOException, MmsException {
  byte[] bytes=part.getContentType();
  if (bytes == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String contentType=new String(bytes);
  MediaModel media=null;
  if (ContentType.isDrmType(contentType)) {
    DrmWrapper wrapper=new DrmWrapper(contentType,part.getDataUri(),part.getData());
    if (tag.equals(SmilHelper.ELEMENT_TAG_TEXT)) {
      media=new TextModel(context,contentType,src,part.getCharset(),wrapper,regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_IMAGE)) {
      media=new ImageModel(context,contentType,src,wrapper,regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_VIDEO)) {
      media=new VideoModel(context,contentType,src,wrapper,regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_AUDIO)) {
      media=new AudioModel(context,contentType,src,wrapper);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_REF)) {
      String drmContentType=wrapper.getContentType();
      if (ContentType.isTextType(drmContentType)) {
        media=new TextModel(context,contentType,src,part.getCharset(),wrapper,regionModel);
      }
 else       if (ContentType.isImageType(drmContentType)) {
        media=new ImageModel(context,contentType,src,wrapper,regionModel);
      }
 else       if (ContentType.isVideoType(drmContentType)) {
        media=new VideoModel(context,contentType,src,wrapper,regionModel);
      }
 else       if (ContentType.isAudioType(drmContentType)) {
        media=new AudioModel(context,contentType,src,wrapper);
      }
 else {
        throw new UnsupportContentTypeException(""String_Node_Str"" + drmContentType);
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + tag);
    }
  }
 else {
    if (tag.equals(SmilHelper.ELEMENT_TAG_TEXT)) {
      media=new TextModel(context,contentType,src,part.getCharset(),part.getData(),regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_IMAGE)) {
      media=new ImageModel(context,contentType,src,part.getDataUri(),regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_VIDEO)) {
      media=new VideoModel(context,contentType,src,part.getDataUri(),regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_AUDIO)) {
      media=new AudioModel(context,contentType,src,part.getDataUri());
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_REF)) {
      if (ContentType.isTextType(contentType)) {
        media=new TextModel(context,contentType,src,part.getCharset(),part.getData(),regionModel);
      }
 else       if (ContentType.isImageType(contentType)) {
        media=new ImageModel(context,contentType,src,part.getDataUri(),regionModel);
      }
 else       if (ContentType.isVideoType(contentType)) {
        media=new VideoModel(context,contentType,src,part.getDataUri(),regionModel);
      }
 else       if (ContentType.isAudioType(contentType)) {
        media=new AudioModel(context,contentType,src,part.getDataUri());
      }
 else {
        throw new UnsupportContentTypeException(""String_Node_Str"" + contentType);
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + tag);
    }
  }
  int begin=0;
  TimeList tl=sme.getBegin();
  if ((tl != null) && (tl.getLength() > 0)) {
    Time t=tl.item(0);
    begin=(int)(t.getResolvedOffset() * 1000);
  }
  media.setBegin(begin);
  int duration=(int)(sme.getDur() * 1000);
  if (duration <= 0) {
    tl=sme.getEnd();
    if ((tl != null) && (tl.getLength() > 0)) {
      Time t=tl.item(0);
      if (t.getTimeType() != Time.SMIL_TIME_INDEFINITE) {
        duration=(int)(t.getResolvedOffset() * 1000) - begin;
        if (duration == 0 && (media instanceof AudioModel || media instanceof VideoModel)) {
          duration=MmsConfig.getMinimumSlideElementDuration();
          if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
            Log.d(TAG,""String_Node_Str"" + tag + ""String_Node_Str""+ duration);
          }
        }
      }
    }
  }
  media.setDuration(duration);
  media.setFill(sme.getFill());
  return media;
}",0.9563297350343474
44593,"public void deliver(Context context,boolean isNew,int count,int uniqueThreads){
  updateNotification(context,mClickIntent,mDescription,mIconResourceId,isNew,mTicker,mTimeMillis,mTitle,count,uniqueThreads);
}","public void deliver(Context context,boolean isNew,int count,int uniqueThreads){
  updateNotification(context,mClickIntent,mDescription,mIconResourceId,isNew,(isNew ? mTicker : null),mTimeMillis,mTitle,count,uniqueThreads);
}",0.9605568445475638
44594,"public void run(){
  Contact c=Cache.get(number);
  if (c == null) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  if (handleLocalNumber(c))   return;
  ContactInfoCache cache=ContactInfoCache.getInstance();
  ContactInfoCache.CacheEntry entry=cache.getContactInfo(number);
synchronized (Cache.getInstance()) {
    if (contactChanged(c,entry)) {
      c.mName=entry.name;
      c.mNameAndNumber=formatNameAndNumber(c.mName,c.mNumber);
      c.mLabel=entry.phoneLabel;
      c.mPersonId=entry.person_id;
      c.mPresenceResId=entry.presenceResId;
      c.mPresenceText=entry.presenceText;
      c.mAvatar=entry.mAvatar;
      for (      UpdateListener l : c.mListeners) {
        if (V)         Log.d(TAG,""String_Node_Str"" + l);
        l.onUpdate(c);
      }
    }
  }
}","public void run(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"");
  }
  for (  Contact c : contacts) {
    updateContact(c);
  }
}",0.235042735042735
44595,"static Contact get(String number){
  if (Mms.isEmailAddress(number))   return getEmail(number);
synchronized (sInstance) {
    for (    Contact c : sInstance.mCache) {
      if (PhoneNumberUtils.compare(number,c.mNumber)) {
        return c;
      }
    }
    return null;
  }
}","static Contact get(String number){
  if (Mms.isEmailAddress(number))   return getEmail(number);
synchronized (sInstance) {
    for (    Contact c : sInstance.mCache) {
      if (AddressUtils.phoneNumbersEqual(number,c.mNumber)) {
        return c;
      }
    }
    return null;
  }
}",0.9395017793594306
44596,"private static void updateContact(final String number,boolean canBlock){
  Runnable r=new Runnable(){
    public void run(){
      Contact c=Cache.get(number);
      if (c == null) {
        Log.w(TAG,""String_Node_Str"");
        return;
      }
      if (handleLocalNumber(c))       return;
      ContactInfoCache cache=ContactInfoCache.getInstance();
      ContactInfoCache.CacheEntry entry=cache.getContactInfo(number);
synchronized (Cache.getInstance()) {
        if (contactChanged(c,entry)) {
          c.mName=entry.name;
          c.mNameAndNumber=formatNameAndNumber(c.mName,c.mNumber);
          c.mLabel=entry.phoneLabel;
          c.mPersonId=entry.person_id;
          c.mPresenceResId=entry.presenceResId;
          c.mPresenceText=entry.presenceText;
          c.mAvatar=entry.mAvatar;
          for (          UpdateListener l : c.mListeners) {
            if (V)             Log.d(TAG,""String_Node_Str"" + l);
            l.onUpdate(c);
          }
        }
      }
    }
  }
;
  if (canBlock) {
    r.run();
  }
 else {
    sTaskStack.push(r);
  }
}","private static void updateContact(final Contact c){
  if (c == null) {
    return;
  }
  if (handleLocalNumber(c)) {
    return;
  }
  ContactInfoCache cache=ContactInfoCache.getInstance();
  ContactInfoCache.CacheEntry entry=cache.getContactInfo(c.mNumber);
synchronized (Cache.getInstance()) {
    if (contactChanged(c,entry)) {
      if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
        log(""String_Node_Str"" + entry.name);
      }
      c.mName=entry.name;
      c.mNameAndNumber=formatNameAndNumber(c.mName,c.mNumber);
      c.mLabel=entry.phoneLabel;
      c.mPersonId=entry.person_id;
      c.mPresenceResId=entry.presenceResId;
      c.mPresenceText=entry.presenceText;
      c.mAvatar=entry.mAvatar;
      for (      UpdateListener l : c.mListeners) {
        if (V)         Log.d(TAG,""String_Node_Str"" + l);
        l.onUpdate(c);
      }
    }
  }
}",0.1027503892060197
44597,"public static void invalidateCache(){
  if (V)   Log.d(TAG,""String_Node_Str"");
  ContactInfoCache.getInstance().invalidateCache();
  sTaskStack.clear();
  String[] numbersToUpdate=Cache.getNumbers();
  for (  String number : numbersToUpdate) {
    updateContact(number,false);
  }
}","public static void invalidateCache(){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"");
  }
  ContactInfoCache.getInstance().invalidateCache();
  sTaskStack.clear();
  asyncUpdateContacts(Cache.getContacts(),false);
}",0.5980952380952381
44598,"public SmsMessageSender(Context context,String[] dests,String msgText,long threadId){
  mContext=context;
  mMessageText=msgText;
  mNumberOfDests=dests.length;
  mDests=new String[mNumberOfDests];
  System.arraycopy(dests,0,mDests,0,mNumberOfDests);
  mTimestamp=System.currentTimeMillis();
  mThreadId=threadId;
  mServiceCenter=getOutgoingServiceCenter(mThreadId);
}","public SmsMessageSender(Context context,String[] dests,String msgText,long threadId){
  if (Log.isLoggable(LogTag.APP,Log.DEBUG)) {
    log(""String_Node_Str"" + threadId + ""String_Node_Str"");
    for (    String addr : dests) {
      log(""String_Node_Str"" + addr);
    }
  }
  mContext=context;
  mMessageText=msgText;
  mNumberOfDests=dests.length;
  mDests=new String[mNumberOfDests];
  System.arraycopy(dests,0,mDests,0,mNumberOfDests);
  mTimestamp=System.currentTimeMillis();
  mThreadId=threadId;
  mServiceCenter=getOutgoingServiceCenter(mThreadId);
}",0.796976241900648
44599,"/** 
 * Helper method to verify which field has the focus
 * @param focused The view that should be focused (all others should not have focus)
 */
private void checkFocused(View focused){
  assertEquals(focused == mRecipientsView,mRecipientsView.isFocused());
  assertEquals(focused == mTextEditor,mTextEditor.isFocused());
}","/** 
 * Helper method to verify which field has the focus
 * @param focused The view that should be focused (all others should not have focus)
 */
@SmallTest private void checkFocused(View focused){
  assertEquals(focused == mRecipientsView,mRecipientsView.isFocused());
  assertEquals(focused == mTextEditor,mTextEditor.isFocused());
}",0.983358547655068
44600,"public float getDur(){
  float dur=0;
  try {
    String durString=mSmilElement.getAttribute(""String_Node_Str"");
    if (durString != null) {
      dur=TimeImpl.parseClockValue(durString) / 1000f;
    }
  }
 catch (  IllegalArgumentException e) {
  }
  if (dur == 0) {
    dur=MmsConfig.getMinimumSlideElementDuration();
  }
  return dur;
}","public float getDur(){
  float dur=0;
  try {
    String durString=mSmilElement.getAttribute(""String_Node_Str"");
    if (durString != null) {
      dur=TimeImpl.parseClockValue(durString) / 1000f;
    }
  }
 catch (  IllegalArgumentException e) {
  }
  return dur;
}",0.834983498349835
44601,"private static MediaModel getGenericMediaModel(Context context,String tag,String src,SMILMediaElement sme,PduPart part,RegionModel regionModel) throws DrmException, IOException, MmsException {
  byte[] bytes=part.getContentType();
  if (bytes == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String contentType=new String(bytes);
  MediaModel media=null;
  if (ContentType.isDrmType(contentType)) {
    DrmWrapper wrapper=new DrmWrapper(contentType,part.getDataUri(),part.getData());
    if (tag.equals(SmilHelper.ELEMENT_TAG_TEXT)) {
      media=new TextModel(context,contentType,src,part.getCharset(),wrapper,regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_IMAGE)) {
      media=new ImageModel(context,contentType,src,wrapper,regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_VIDEO)) {
      media=new VideoModel(context,contentType,src,wrapper,regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_AUDIO)) {
      media=new AudioModel(context,contentType,src,wrapper);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_REF)) {
      String drmContentType=wrapper.getContentType();
      if (ContentType.isTextType(drmContentType)) {
        media=new TextModel(context,contentType,src,part.getCharset(),wrapper,regionModel);
      }
 else       if (ContentType.isImageType(drmContentType)) {
        media=new ImageModel(context,contentType,src,wrapper,regionModel);
      }
 else       if (ContentType.isVideoType(drmContentType)) {
        media=new VideoModel(context,contentType,src,wrapper,regionModel);
      }
 else       if (ContentType.isAudioType(drmContentType)) {
        media=new AudioModel(context,contentType,src,wrapper);
      }
 else {
        throw new UnsupportContentTypeException(""String_Node_Str"" + drmContentType);
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + tag);
    }
  }
 else {
    if (tag.equals(SmilHelper.ELEMENT_TAG_TEXT)) {
      media=new TextModel(context,contentType,src,part.getCharset(),part.getData(),regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_IMAGE)) {
      media=new ImageModel(context,contentType,src,part.getDataUri(),regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_VIDEO)) {
      media=new VideoModel(context,contentType,src,part.getDataUri(),regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_AUDIO)) {
      media=new AudioModel(context,contentType,src,part.getDataUri());
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_REF)) {
      if (ContentType.isTextType(contentType)) {
        media=new TextModel(context,contentType,src,part.getCharset(),part.getData(),regionModel);
      }
 else       if (ContentType.isImageType(contentType)) {
        media=new ImageModel(context,contentType,src,part.getDataUri(),regionModel);
      }
 else       if (ContentType.isVideoType(contentType)) {
        media=new VideoModel(context,contentType,src,part.getDataUri(),regionModel);
      }
 else       if (ContentType.isAudioType(contentType)) {
        media=new AudioModel(context,contentType,src,part.getDataUri());
      }
 else {
        throw new UnsupportContentTypeException(""String_Node_Str"" + contentType);
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + tag);
    }
  }
  int begin=0;
  TimeList tl=sme.getBegin();
  if ((tl != null) && (tl.getLength() > 0)) {
    Time t=tl.item(0);
    begin=(int)(t.getResolvedOffset() * 1000);
  }
  media.setBegin(begin);
  int duration=(int)(sme.getDur() * 1000);
  if (duration <= 0) {
    tl=sme.getEnd();
    if ((tl != null) && (tl.getLength() > 0)) {
      Time t=tl.item(0);
      if (t.getTimeType() != Time.SMIL_TIME_INDEFINITE) {
        duration=(int)(t.getResolvedOffset() * 1000) - begin;
      }
    }
  }
  media.setDuration(duration);
  media.setFill(sme.getFill());
  return media;
}","private static MediaModel getGenericMediaModel(Context context,String tag,String src,SMILMediaElement sme,PduPart part,RegionModel regionModel) throws DrmException, IOException, MmsException {
  byte[] bytes=part.getContentType();
  if (bytes == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String contentType=new String(bytes);
  MediaModel media=null;
  if (ContentType.isDrmType(contentType)) {
    DrmWrapper wrapper=new DrmWrapper(contentType,part.getDataUri(),part.getData());
    if (tag.equals(SmilHelper.ELEMENT_TAG_TEXT)) {
      media=new TextModel(context,contentType,src,part.getCharset(),wrapper,regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_IMAGE)) {
      media=new ImageModel(context,contentType,src,wrapper,regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_VIDEO)) {
      media=new VideoModel(context,contentType,src,wrapper,regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_AUDIO)) {
      media=new AudioModel(context,contentType,src,wrapper);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_REF)) {
      String drmContentType=wrapper.getContentType();
      if (ContentType.isTextType(drmContentType)) {
        media=new TextModel(context,contentType,src,part.getCharset(),wrapper,regionModel);
      }
 else       if (ContentType.isImageType(drmContentType)) {
        media=new ImageModel(context,contentType,src,wrapper,regionModel);
      }
 else       if (ContentType.isVideoType(drmContentType)) {
        media=new VideoModel(context,contentType,src,wrapper,regionModel);
      }
 else       if (ContentType.isAudioType(drmContentType)) {
        media=new AudioModel(context,contentType,src,wrapper);
      }
 else {
        throw new UnsupportContentTypeException(""String_Node_Str"" + drmContentType);
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + tag);
    }
  }
 else {
    if (tag.equals(SmilHelper.ELEMENT_TAG_TEXT)) {
      media=new TextModel(context,contentType,src,part.getCharset(),part.getData(),regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_IMAGE)) {
      media=new ImageModel(context,contentType,src,part.getDataUri(),regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_VIDEO)) {
      media=new VideoModel(context,contentType,src,part.getDataUri(),regionModel);
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_AUDIO)) {
      media=new AudioModel(context,contentType,src,part.getDataUri());
    }
 else     if (tag.equals(SmilHelper.ELEMENT_TAG_REF)) {
      if (ContentType.isTextType(contentType)) {
        media=new TextModel(context,contentType,src,part.getCharset(),part.getData(),regionModel);
      }
 else       if (ContentType.isImageType(contentType)) {
        media=new ImageModel(context,contentType,src,part.getDataUri(),regionModel);
      }
 else       if (ContentType.isVideoType(contentType)) {
        media=new VideoModel(context,contentType,src,part.getDataUri(),regionModel);
      }
 else       if (ContentType.isAudioType(contentType)) {
        media=new AudioModel(context,contentType,src,part.getDataUri());
      }
 else {
        throw new UnsupportContentTypeException(""String_Node_Str"" + contentType);
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + tag);
    }
  }
  int begin=0;
  TimeList tl=sme.getBegin();
  if ((tl != null) && (tl.getLength() > 0)) {
    Time t=tl.item(0);
    begin=(int)(t.getResolvedOffset() * 1000);
  }
  media.setBegin(begin);
  int duration=(int)(sme.getDur() * 1000);
  if (duration <= 0) {
    tl=sme.getEnd();
    if ((tl != null) && (tl.getLength() > 0)) {
      Time t=tl.item(0);
      if (t.getTimeType() != Time.SMIL_TIME_INDEFINITE) {
        duration=(int)(t.getResolvedOffset() * 1000) - begin;
        if (duration == 0 && (media instanceof AudioModel || media instanceof VideoModel)) {
          duration=MmsConfig.getMinimumSlideElementDuration();
          if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
            Log.d(TAG,""String_Node_Str"" + tag + ""String_Node_Str""+ duration);
          }
        }
      }
    }
  }
  media.setDuration(duration);
  media.setFill(sme.getFill());
  return media;
}",0.9563297350343474
44602,"public void deliver(Context context,boolean isNew,int count,int uniqueThreads){
  updateNotification(context,mClickIntent,mDescription,mIconResourceId,isNew,mTicker,mTimeMillis,mTitle,count,uniqueThreads);
}","public void deliver(Context context,boolean isNew,int count,int uniqueThreads){
  updateNotification(context,mClickIntent,mDescription,mIconResourceId,isNew,(isNew ? mTicker : null),mTimeMillis,mTitle,count,uniqueThreads);
}",0.9605568445475638
44603,"private void showSubjectEditor(boolean show){
  if (mSubjectTextEditor == null) {
    if (show == false) {
      return;
    }
    mSubjectTextEditor=(EditText)findViewById(R.id.subject);
    mSubjectTextEditor.setOnKeyListener(mSubjectKeyListener);
    mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher);
  }
  mSubjectTextEditor.setText(mWorkingMessage.getSubject());
  mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE);
  hideOrShowTopPanel();
}","private void showSubjectEditor(boolean show){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + show);
  }
  if (mSubjectTextEditor == null) {
    if (show == false) {
      return;
    }
    mSubjectTextEditor=(EditText)findViewById(R.id.subject);
  }
  mSubjectTextEditor.setOnKeyListener(show ? mSubjectKeyListener : null);
  if (show) {
    mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher);
  }
 else {
    mSubjectTextEditor.removeTextChangedListener(mSubjectEditorWatcher);
  }
  mSubjectTextEditor.setText(mWorkingMessage.getSubject());
  mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE);
  hideOrShowTopPanel();
}",0.7754749568221071
44604,"private void showSubjectEditor(boolean show){
  if (mSubjectTextEditor == null) {
    if (show == false) {
      return;
    }
    mSubjectTextEditor=(EditText)findViewById(R.id.subject);
    mSubjectTextEditor.setOnKeyListener(mSubjectKeyListener);
    mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher);
  }
  mSubjectTextEditor.setText(mWorkingMessage.getSubject());
  mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE);
  hideOrShowTopPanel();
}","private void showSubjectEditor(boolean show){
  if (Log.isLoggable(LogTag.APP,Log.VERBOSE)) {
    log(""String_Node_Str"" + show);
  }
  if (mSubjectTextEditor == null) {
    if (show == false) {
      return;
    }
    mSubjectTextEditor=(EditText)findViewById(R.id.subject);
  }
  mSubjectTextEditor.setOnKeyListener(show ? mSubjectKeyListener : null);
  if (show) {
    mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher);
  }
 else {
    mSubjectTextEditor.removeTextChangedListener(mSubjectEditorWatcher);
  }
  mSubjectTextEditor.setText(mWorkingMessage.getSubject());
  mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE);
  hideOrShowTopPanel();
}",0.7754749568221071
44605,"private static void loadMmsSettings(Context context){
  XmlResourceParser parser=context.getResources().getXml(R.xml.mms_config);
  try {
    XmlUtils.beginDocument(parser,""String_Node_Str"");
    while (true) {
      XmlUtils.nextElement(parser);
      String tag=parser.getName();
      if (tag == null) {
        break;
      }
      String name=parser.getAttributeName(0);
      String value=parser.getAttributeValue(0);
      String text=null;
      if (parser.next() == XmlPullParser.TEXT) {
        text=parser.getText();
      }
      if (DEBUG) {
        Log.v(TAG,""String_Node_Str"" + tag + ""String_Node_Str""+ value);
      }
      if (""String_Node_Str"".equalsIgnoreCase(name)) {
        if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMmsEnabled=""String_Node_Str"".equalsIgnoreCase(text) ? 1 : 0;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mTransIdEnabled=""String_Node_Str"".equalsIgnoreCase(text);
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxMessageSize=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageHeight=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageWidth=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mDefaultSMSMessagesPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mDefaultMMSMessagesPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMinMessageCountPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxMessageCountPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mSmsToMmsTextThreshold=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mRecipientLimit=Integer.parseInt(text);
            if (mRecipientLimit < 0) {
              mRecipientLimit=Integer.MAX_VALUE;
            }
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUserAgent=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfTagName=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfUrl=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpParams=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpParamsLine1Key=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mEmailGateway=text;
          }
        }
      }
    }
  }
 catch (  XmlPullParserException e) {
  }
catch (  NumberFormatException e) {
  }
catch (  IOException e) {
  }
 finally {
    parser.close();
  }
  String errorStr=null;
  if (mMmsEnabled == -1) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxMessageSize == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageHeight == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageWidth == 0) {
    errorStr=""String_Node_Str"";
  }
  if (getMmsEnabled() && mUaProfUrl == null) {
    errorStr=""String_Node_Str"";
  }
  if (mUaProfTagName == null) {
    mUaProfTagName=DEFAULT_HTTP_KEY_X_WAP_PROFILE;
  }
  if (mUserAgent == null) {
    mUserAgent=DEFAULT_USER_AGENT;
  }
  if (errorStr != null) {
    String err=String.format(""String_Node_Str"",errorStr);
    Log.e(TAG,err);
    throw new ContentRestrictionException(err);
  }
}","private static void loadMmsSettings(Context context){
  XmlResourceParser parser=context.getResources().getXml(R.xml.mms_config);
  try {
    XmlUtils.beginDocument(parser,""String_Node_Str"");
    while (true) {
      XmlUtils.nextElement(parser);
      String tag=parser.getName();
      if (tag == null) {
        break;
      }
      String name=parser.getAttributeName(0);
      String value=parser.getAttributeValue(0);
      String text=null;
      if (parser.next() == XmlPullParser.TEXT) {
        text=parser.getText();
      }
      if (DEBUG) {
        Log.v(TAG,""String_Node_Str"" + tag + ""String_Node_Str""+ value);
      }
      if (""String_Node_Str"".equalsIgnoreCase(name)) {
        if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMmsEnabled=""String_Node_Str"".equalsIgnoreCase(text) ? 1 : 0;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mTransIdEnabled=""String_Node_Str"".equalsIgnoreCase(text);
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxMessageSize=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageHeight=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageWidth=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mDefaultSMSMessagesPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mDefaultMMSMessagesPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMinMessageCountPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxMessageCountPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mSmsToMmsTextThreshold=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mRecipientLimit=Integer.parseInt(text);
            if (mRecipientLimit < 0) {
              mRecipientLimit=Integer.MAX_VALUE;
            }
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpSocketTimeout=Integer.parseInt(text);
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUserAgent=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfTagName=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfUrl=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpParams=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpParamsLine1Key=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mEmailGateway=text;
          }
        }
      }
    }
  }
 catch (  XmlPullParserException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  NumberFormatException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
 finally {
    parser.close();
  }
  String errorStr=null;
  if (mMmsEnabled == -1) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxMessageSize == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageHeight == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageWidth == 0) {
    errorStr=""String_Node_Str"";
  }
  if (getMmsEnabled() && mUaProfUrl == null) {
    errorStr=""String_Node_Str"";
  }
  if (mUaProfTagName == null) {
    mUaProfTagName=DEFAULT_HTTP_KEY_X_WAP_PROFILE;
  }
  if (mUserAgent == null) {
    mUserAgent=DEFAULT_USER_AGENT;
  }
  if (errorStr != null) {
    String err=String.format(""String_Node_Str"",errorStr);
    Log.e(TAG,err);
    throw new ContentRestrictionException(err);
  }
}",0.970559371933268
44606,"protected void initMediaDuration() throws MmsException {
  if (mUri == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  MediaMetadataRetriever retriever=new MediaMetadataRetriever();
  retriever.setMode(MediaMetadataRetriever.MODE_GET_METADATA_ONLY);
  int duration=0;
  try {
    retriever.setDataSource(mContext,mUri);
    String dur=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION);
    if (dur != null) {
      duration=Integer.parseInt(dur);
    }
    mDuration=duration;
  }
 catch (  Exception ex) {
    Log.e(TAG,""String_Node_Str"",ex);
    throw new MmsException(ex);
  }
 finally {
    retriever.release();
  }
}","protected void initMediaDuration() throws MmsException {
  if (mUri == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  MediaMetadataRetriever retriever=new MediaMetadataRetriever();
  retriever.setMode(MediaMetadataRetriever.MODE_GET_METADATA_ONLY);
  int duration=0;
  try {
    retriever.setDataSource(mContext,mUri);
    String dur=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION);
    if (dur != null) {
      duration=Integer.parseInt(dur);
    }
    mDuration=duration;
  }
 catch (  Exception ex) {
    Log.e(TAG,""String_Node_Str"" + mUri.getPath(),ex);
    throw new MmsException(ex);
  }
 finally {
    retriever.release();
  }
}",0.9874353288987436
44607,"private static AndroidHttpClient createHttpClient(){
  AndroidHttpClient client=AndroidHttpClient.newInstance(MmsConfig.getUserAgent());
  HttpParams params=client.getParams();
  HttpProtocolParams.setContentCharset(params,""String_Node_Str"");
  return client;
}","private static AndroidHttpClient createHttpClient(){
  AndroidHttpClient client=AndroidHttpClient.newInstance(MmsConfig.getUserAgent());
  HttpParams params=client.getParams();
  HttpProtocolParams.setContentCharset(params,""String_Node_Str"");
  int soTimeout=MmsConfig.getHttpSocketTimeout();
  if (Log.isLoggable(TAG,Log.DEBUG)) {
    Log.d(TAG,""String_Node_Str"" + soTimeout + ""String_Node_Str"");
  }
  HttpConnectionParams.setSoTimeout(params,soTimeout);
  return client;
}",0.6684782608695652
44608,"/** 
 * Looks to see if there are any valid parts of the attachment that can be copied to a SD card.
 * @param msgId
 */
private boolean haveSomethingToCopyToSDCard(long msgId){
  PduBody body=PduBodyCache.getPduBody(this,ContentUris.withAppendedId(Mms.CONTENT_URI,msgId));
  if (body == null) {
    return false;
  }
  boolean result=false;
  int partNum=body.getPartsNum();
  for (int i=0; i < partNum; i++) {
    PduPart part=body.getPart(i);
    String type=new String(part.getContentType());
    if (ContentType.isImageType(type) || ContentType.isVideoType(type) || ContentType.isAudioType(type)) {
      result=true;
      break;
    }
  }
  return result;
}","/** 
 * Looks to see if there are any valid parts of the attachment that can be copied to a SD card.
 * @param msgId
 */
private boolean haveSomethingToCopyToSDCard(long msgId){
  PduBody body=PduBodyCache.getPduBody(this,ContentUris.withAppendedId(Mms.CONTENT_URI,msgId));
  if (body == null) {
    return false;
  }
  boolean result=false;
  int partNum=body.getPartsNum();
  for (int i=0; i < partNum; i++) {
    PduPart part=body.getPart(i);
    String type=new String(part.getContentType());
    if (Log.isLoggable(MmsApp.LOG_TAG,Log.DEBUG)) {
      log(""String_Node_Str"" + i + ""String_Node_Str""+ type);
    }
    if (ContentType.isImageType(type) || ContentType.isVideoType(type) || ContentType.isAudioType(type)) {
      result=true;
      break;
    }
  }
  return result;
}",0.9183955739972336
44609,"private boolean copyPart(PduPart part){
  Uri uri=part.getDataUri();
  InputStream input=null;
  FileOutputStream fout=null;
  try {
    input=mContentResolver.openInputStream(uri);
    if (input instanceof FileInputStream) {
      FileInputStream fin=(FileInputStream)input;
      byte[] location=part.getName();
      if (location == null) {
        location=part.getFilename();
      }
      if (location == null) {
        location=part.getContentLocation();
      }
      String fileName=new String(location);
      String dir=""String_Node_Str"";
      String extension;
      int index;
      if ((index=fileName.indexOf(""String_Node_Str"")) == -1) {
        String type=new String(part.getContentType());
        extension=MimeTypeMap.getSingleton().getExtensionFromMimeType(type);
      }
 else {
        extension=fileName.substring(index + 1,fileName.length());
        fileName=fileName.substring(0,index);
      }
      File file=getUniqueDestination(dir + fileName,extension);
      File parentFile=file.getParentFile();
      if (!parentFile.exists() && !parentFile.mkdirs()) {
        Log.e(TAG,""String_Node_Str"" + parentFile.getPath() + ""String_Node_Str"");
        return false;
      }
      fout=new FileOutputStream(file);
      byte[] buffer=new byte[8000];
      while (fin.read(buffer) != -1) {
        fout.write(buffer);
      }
      sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,Uri.fromFile(file)));
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return false;
  }
 finally {
    if (null != input) {
      try {
        input.close();
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"",e);
        return false;
      }
    }
    if (null != fout) {
      try {
        fout.close();
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"",e);
        return false;
      }
    }
  }
  return true;
}","private boolean copyPart(PduPart part){
  Uri uri=part.getDataUri();
  InputStream input=null;
  FileOutputStream fout=null;
  try {
    input=mContentResolver.openInputStream(uri);
    if (input instanceof FileInputStream) {
      FileInputStream fin=(FileInputStream)input;
      byte[] location=part.getName();
      if (location == null) {
        location=part.getFilename();
      }
      if (location == null) {
        location=part.getContentLocation();
      }
      String fileName=new String(location);
      String dir=""String_Node_Str"";
      String extension;
      int index;
      if ((index=fileName.indexOf(""String_Node_Str"")) == -1) {
        String type=new String(part.getContentType());
        extension=MimeTypeMap.getSingleton().getExtensionFromMimeType(type);
      }
 else {
        extension=fileName.substring(index + 1,fileName.length());
        fileName=fileName.substring(0,index);
      }
      File file=getUniqueDestination(dir + fileName,extension);
      File parentFile=file.getParentFile();
      if (!parentFile.exists() && !parentFile.mkdirs()) {
        Log.e(TAG,""String_Node_Str"" + parentFile.getPath() + ""String_Node_Str"");
        return false;
      }
      fout=new FileOutputStream(file);
      byte[] buffer=new byte[8000];
      int size=0;
      while ((size=fin.read(buffer)) != -1) {
        fout.write(buffer,0,size);
      }
      sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,Uri.fromFile(file)));
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return false;
  }
 finally {
    if (null != input) {
      try {
        input.close();
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"",e);
        return false;
      }
    }
    if (null != fout) {
      try {
        fout.close();
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"",e);
        return false;
      }
    }
  }
  return true;
}",0.9917184265010353
44610,"private static void loadMmsSettings(Context context){
  XmlResourceParser parser=context.getResources().getXml(R.xml.mms_config);
  try {
    XmlUtils.beginDocument(parser,""String_Node_Str"");
    while (true) {
      XmlUtils.nextElement(parser);
      String tag=parser.getName();
      if (tag == null) {
        break;
      }
      String name=parser.getAttributeName(0);
      String value=parser.getAttributeValue(0);
      String text=null;
      if (parser.next() == XmlPullParser.TEXT) {
        text=parser.getText();
      }
      if (DEBUG) {
        Log.v(TAG,""String_Node_Str"" + tag + ""String_Node_Str""+ value);
      }
      if (""String_Node_Str"".equalsIgnoreCase(name)) {
        if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMmsEnabled=""String_Node_Str"".equalsIgnoreCase(text) ? 1 : 0;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mTransIdEnabled=""String_Node_Str"".equalsIgnoreCase(text);
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxMessageSize=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageHeight=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageWidth=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mDefaultSMSMessagesPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mDefaultMMSMessagesPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMinMessageCountPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxMessageCountPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mSmsToMmsTextThreshold=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mRecipientLimit=Integer.parseInt(text);
            if (mRecipientLimit < 0) {
              mRecipientLimit=Integer.MAX_VALUE;
            }
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUserAgent=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfTagName=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfUrl=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpParams=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpParamsLine1Key=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mEmailGateway=text;
          }
        }
      }
    }
  }
 catch (  XmlPullParserException e) {
  }
catch (  NumberFormatException e) {
  }
catch (  IOException e) {
  }
 finally {
    parser.close();
  }
  String errorStr=null;
  if (mMmsEnabled == -1) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxMessageSize == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageHeight == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageWidth == 0) {
    errorStr=""String_Node_Str"";
  }
  if (getMmsEnabled() && mUaProfUrl == null) {
    errorStr=""String_Node_Str"";
  }
  if (mUaProfTagName == null) {
    mUaProfTagName=DEFAULT_HTTP_KEY_X_WAP_PROFILE;
  }
  if (mUserAgent == null) {
    mUserAgent=DEFAULT_USER_AGENT;
  }
  if (errorStr != null) {
    String err=String.format(""String_Node_Str"",errorStr);
    Log.e(TAG,err);
    throw new ContentRestrictionException(err);
  }
}","private static void loadMmsSettings(Context context){
  XmlResourceParser parser=context.getResources().getXml(R.xml.mms_config);
  try {
    XmlUtils.beginDocument(parser,""String_Node_Str"");
    while (true) {
      XmlUtils.nextElement(parser);
      String tag=parser.getName();
      if (tag == null) {
        break;
      }
      String name=parser.getAttributeName(0);
      String value=parser.getAttributeValue(0);
      String text=null;
      if (parser.next() == XmlPullParser.TEXT) {
        text=parser.getText();
      }
      if (DEBUG) {
        Log.v(TAG,""String_Node_Str"" + tag + ""String_Node_Str""+ value);
      }
      if (""String_Node_Str"".equalsIgnoreCase(name)) {
        if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMmsEnabled=""String_Node_Str"".equalsIgnoreCase(text) ? 1 : 0;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mTransIdEnabled=""String_Node_Str"".equalsIgnoreCase(text);
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxMessageSize=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageHeight=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageWidth=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mDefaultSMSMessagesPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mDefaultMMSMessagesPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMinMessageCountPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxMessageCountPerThread=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mSmsToMmsTextThreshold=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mRecipientLimit=Integer.parseInt(text);
            if (mRecipientLimit < 0) {
              mRecipientLimit=Integer.MAX_VALUE;
            }
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpSocketTimeout=Integer.parseInt(text);
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUserAgent=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfTagName=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfUrl=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpParams=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpParamsLine1Key=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mEmailGateway=text;
          }
        }
      }
    }
  }
 catch (  XmlPullParserException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  NumberFormatException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
 finally {
    parser.close();
  }
  String errorStr=null;
  if (mMmsEnabled == -1) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxMessageSize == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageHeight == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageWidth == 0) {
    errorStr=""String_Node_Str"";
  }
  if (getMmsEnabled() && mUaProfUrl == null) {
    errorStr=""String_Node_Str"";
  }
  if (mUaProfTagName == null) {
    mUaProfTagName=DEFAULT_HTTP_KEY_X_WAP_PROFILE;
  }
  if (mUserAgent == null) {
    mUserAgent=DEFAULT_USER_AGENT;
  }
  if (errorStr != null) {
    String err=String.format(""String_Node_Str"",errorStr);
    Log.e(TAG,err);
    throw new ContentRestrictionException(err);
  }
}",0.970559371933268
44611,"protected void initMediaDuration() throws MmsException {
  if (mUri == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  MediaMetadataRetriever retriever=new MediaMetadataRetriever();
  retriever.setMode(MediaMetadataRetriever.MODE_GET_METADATA_ONLY);
  int duration=0;
  try {
    retriever.setDataSource(mContext,mUri);
    String dur=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION);
    if (dur != null) {
      duration=Integer.parseInt(dur);
    }
    mDuration=duration;
  }
 catch (  Exception ex) {
    Log.e(TAG,""String_Node_Str"",ex);
    throw new MmsException(ex);
  }
 finally {
    retriever.release();
  }
}","protected void initMediaDuration() throws MmsException {
  if (mUri == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  MediaMetadataRetriever retriever=new MediaMetadataRetriever();
  retriever.setMode(MediaMetadataRetriever.MODE_GET_METADATA_ONLY);
  int duration=0;
  try {
    retriever.setDataSource(mContext,mUri);
    String dur=retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION);
    if (dur != null) {
      duration=Integer.parseInt(dur);
    }
    mDuration=duration;
  }
 catch (  Exception ex) {
    Log.e(TAG,""String_Node_Str"" + mUri.getPath(),ex);
    throw new MmsException(ex);
  }
 finally {
    retriever.release();
  }
}",0.9874353288987436
44612,"private static AndroidHttpClient createHttpClient(){
  AndroidHttpClient client=AndroidHttpClient.newInstance(MmsConfig.getUserAgent());
  HttpParams params=client.getParams();
  HttpProtocolParams.setContentCharset(params,""String_Node_Str"");
  return client;
}","private static AndroidHttpClient createHttpClient(){
  AndroidHttpClient client=AndroidHttpClient.newInstance(MmsConfig.getUserAgent());
  HttpParams params=client.getParams();
  HttpProtocolParams.setContentCharset(params,""String_Node_Str"");
  int soTimeout=MmsConfig.getHttpSocketTimeout();
  if (Log.isLoggable(TAG,Log.DEBUG)) {
    Log.d(TAG,""String_Node_Str"" + soTimeout + ""String_Node_Str"");
  }
  HttpConnectionParams.setSoTimeout(params,soTimeout);
  return client;
}",0.6684782608695652
44613,"/** 
 * Looks to see if there are any valid parts of the attachment that can be copied to a SD card.
 * @param msgId
 */
private boolean haveSomethingToCopyToSDCard(long msgId){
  PduBody body=PduBodyCache.getPduBody(this,ContentUris.withAppendedId(Mms.CONTENT_URI,msgId));
  if (body == null) {
    return false;
  }
  boolean result=false;
  int partNum=body.getPartsNum();
  for (int i=0; i < partNum; i++) {
    PduPart part=body.getPart(i);
    String type=new String(part.getContentType());
    if (ContentType.isImageType(type) || ContentType.isVideoType(type) || ContentType.isAudioType(type)) {
      result=true;
      break;
    }
  }
  return result;
}","/** 
 * Looks to see if there are any valid parts of the attachment that can be copied to a SD card.
 * @param msgId
 */
private boolean haveSomethingToCopyToSDCard(long msgId){
  PduBody body=PduBodyCache.getPduBody(this,ContentUris.withAppendedId(Mms.CONTENT_URI,msgId));
  if (body == null) {
    return false;
  }
  boolean result=false;
  int partNum=body.getPartsNum();
  for (int i=0; i < partNum; i++) {
    PduPart part=body.getPart(i);
    String type=new String(part.getContentType());
    if (Log.isLoggable(MmsApp.LOG_TAG,Log.DEBUG)) {
      log(""String_Node_Str"" + i + ""String_Node_Str""+ type);
    }
    if (ContentType.isImageType(type) || ContentType.isVideoType(type) || ContentType.isAudioType(type)) {
      result=true;
      break;
    }
  }
  return result;
}",0.9183955739972336
44614,"private boolean copyPart(PduPart part){
  Uri uri=part.getDataUri();
  InputStream input=null;
  FileOutputStream fout=null;
  try {
    input=mContentResolver.openInputStream(uri);
    if (input instanceof FileInputStream) {
      FileInputStream fin=(FileInputStream)input;
      byte[] location=part.getName();
      if (location == null) {
        location=part.getFilename();
      }
      if (location == null) {
        location=part.getContentLocation();
      }
      String fileName=new String(location);
      String dir=""String_Node_Str"";
      String extension;
      int index;
      if ((index=fileName.indexOf(""String_Node_Str"")) == -1) {
        String type=new String(part.getContentType());
        extension=MimeTypeMap.getSingleton().getExtensionFromMimeType(type);
      }
 else {
        extension=fileName.substring(index + 1,fileName.length());
        fileName=fileName.substring(0,index);
      }
      File file=getUniqueDestination(dir + fileName,extension);
      File parentFile=file.getParentFile();
      if (!parentFile.exists() && !parentFile.mkdirs()) {
        Log.e(TAG,""String_Node_Str"" + parentFile.getPath() + ""String_Node_Str"");
        return false;
      }
      fout=new FileOutputStream(file);
      byte[] buffer=new byte[8000];
      while (fin.read(buffer) != -1) {
        fout.write(buffer);
      }
      sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,Uri.fromFile(file)));
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return false;
  }
 finally {
    if (null != input) {
      try {
        input.close();
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"",e);
        return false;
      }
    }
    if (null != fout) {
      try {
        fout.close();
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"",e);
        return false;
      }
    }
  }
  return true;
}","private boolean copyPart(PduPart part){
  Uri uri=part.getDataUri();
  InputStream input=null;
  FileOutputStream fout=null;
  try {
    input=mContentResolver.openInputStream(uri);
    if (input instanceof FileInputStream) {
      FileInputStream fin=(FileInputStream)input;
      byte[] location=part.getName();
      if (location == null) {
        location=part.getFilename();
      }
      if (location == null) {
        location=part.getContentLocation();
      }
      String fileName=new String(location);
      String dir=""String_Node_Str"";
      String extension;
      int index;
      if ((index=fileName.indexOf(""String_Node_Str"")) == -1) {
        String type=new String(part.getContentType());
        extension=MimeTypeMap.getSingleton().getExtensionFromMimeType(type);
      }
 else {
        extension=fileName.substring(index + 1,fileName.length());
        fileName=fileName.substring(0,index);
      }
      File file=getUniqueDestination(dir + fileName,extension);
      File parentFile=file.getParentFile();
      if (!parentFile.exists() && !parentFile.mkdirs()) {
        Log.e(TAG,""String_Node_Str"" + parentFile.getPath() + ""String_Node_Str"");
        return false;
      }
      fout=new FileOutputStream(file);
      byte[] buffer=new byte[8000];
      int size=0;
      while ((size=fin.read(buffer)) != -1) {
        fout.write(buffer,0,size);
      }
      sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,Uri.fromFile(file)));
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return false;
  }
 finally {
    if (null != input) {
      try {
        input.close();
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"",e);
        return false;
      }
    }
    if (null != fout) {
      try {
        fout.close();
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"",e);
        return false;
      }
    }
  }
  return true;
}",0.9917184265010353
44615,"/** 
 * Put the specified conversation in the cache.  The caller should not place an already-existing conversation in the cache, but rather update it in place.
 */
static void put(Conversation c){
synchronized (sInstance) {
    if (sInstance.mCache.contains(c)) {
      throw new IllegalStateException(""String_Node_Str"" + c + ""String_Node_Str""+ c.mThreadId);
    }
    sInstance.mCache.add(c);
  }
}","/** 
 * Put the specified conversation in the cache.  The caller should not place an already-existing conversation in the cache, but rather update it in place.
 */
static void put(Conversation c){
synchronized (sInstance) {
    if (DEBUG) {
      Log.v(TAG,""String_Node_Str"" + c + ""String_Node_Str""+ c.getThreadId()+ ""String_Node_Str""+ c.hashCode());
      dumpCache();
    }
    if (sInstance.mCache.contains(c)) {
      throw new IllegalStateException(""String_Node_Str"" + c + ""String_Node_Str""+ c.mThreadId);
    }
    sInstance.mCache.add(c);
  }
}",0.84
44616,"/** 
 * Return the conversation with the specified recipient list, or null if it's not in cache.
 */
static Conversation get(ContactList list){
synchronized (sInstance) {
    for (    Conversation c : sInstance.mCache) {
      if (c.getRecipients().equals(list)) {
        return c;
      }
    }
  }
  return null;
}","/** 
 * Return the conversation with the specified recipient list, or null if it's not in cache.
 */
static Conversation get(ContactList list){
synchronized (sInstance) {
    if (DEBUG) {
      Log.v(TAG,""String_Node_Str"" + list);
      dumpCache();
    }
    for (    Conversation c : sInstance.mCache) {
      if (c.getRecipients().equals(list)) {
        return c;
      }
    }
  }
  return null;
}",0.8817802503477051
44617,"private static void cacheAllThreads(Context context){
synchronized (Cache.getInstance()) {
    HashSet<Long> threadsOnDisk=new HashSet<Long>();
    Cursor c=context.getContentResolver().query(sAllThreadsUri,ALL_THREADS_PROJECTION,null,null,null);
    try {
      while (c.moveToNext()) {
        long threadId=c.getLong(ID);
        threadsOnDisk.add(threadId);
        Conversation conv=Cache.get(threadId);
        if (conv == null) {
          conv=new Conversation(context,c,true);
          Cache.put(conv);
        }
 else {
          fillFromCursor(context,conv,c,true);
        }
      }
    }
  finally {
      c.close();
    }
    Cache.keepOnly(threadsOnDisk);
  }
}","private static void cacheAllThreads(Context context){
synchronized (Cache.getInstance()) {
    if (DEBUG) {
      Log.v(TAG,""String_Node_Str"");
    }
    HashSet<Long> threadsOnDisk=new HashSet<Long>();
    Cursor c=context.getContentResolver().query(sAllThreadsUri,ALL_THREADS_PROJECTION,null,null,null);
    try {
      while (c.moveToNext()) {
        long threadId=c.getLong(ID);
        threadsOnDisk.add(threadId);
        Conversation conv=Cache.get(threadId);
        if (conv == null) {
          conv=new Conversation(context,c,true);
          Cache.put(conv);
        }
 else {
          fillFromCursor(context,conv,c,true);
        }
      }
    }
  finally {
      c.close();
    }
    Cache.keepOnly(threadsOnDisk);
  }
}",0.9582448690728944
44618,"/** 
 * Guarantees that the conversation has been created in the database. This will make a blocking database call if it hasn't.
 * @return The thread ID of this conversation in the database
 */
public synchronized long ensureThreadId(){
  if (mThreadId <= 0) {
    mThreadId=getOrCreateThreadId(mContext,mRecipients);
  }
  return mThreadId;
}","/** 
 * Guarantees that the conversation has been created in the database. This will make a blocking database call if it hasn't.
 * @return The thread ID of this conversation in the database
 */
public synchronized long ensureThreadId(){
  if (DEBUG) {
    Log.v(""String_Node_Str"",""String_Node_Str"" + mThreadId);
  }
  if (mThreadId <= 0) {
    mThreadId=getOrCreateThreadId(mContext,mRecipients);
  }
  if (DEBUG) {
    Log.v(""String_Node_Str"",""String_Node_Str"" + mThreadId);
  }
  return mThreadId;
}",0.8132387706855791
44619,"public synchronized void clearThreadId(){
  mThreadId=0;
}","public synchronized void clearThreadId(){
  Cache.remove(mThreadId);
  mThreadId=0;
}",0.8111888111888111
44620,"/** 
 * Reads a draft message for the given thread ID from the database, if there is one, deletes it from the database, and returns it.
 * @return The draft message or an empty string.
 */
private static String readDraftSmsMessage(Context context,long thread_id){
  if (DEBUG)   debug(""String_Node_Str"",thread_id);
  ContentResolver cr=context.getContentResolver();
  if (thread_id <= 0) {
    return ""String_Node_Str"";
  }
  Uri thread_uri=ContentUris.withAppendedId(Sms.Conversations.CONTENT_URI,thread_id);
  String body=""String_Node_Str"";
  Cursor c=SqliteWrapper.query(context,cr,thread_uri,SMS_BODY_PROJECTION,SMS_DRAFT_WHERE,null,null);
  try {
    if (c.moveToFirst()) {
      body=c.getString(SMS_BODY_INDEX);
    }
  }
  finally {
    c.close();
  }
  SqliteWrapper.delete(context,cr,thread_uri,SMS_DRAFT_WHERE,null);
  return body;
}","/** 
 * Reads a draft message for the given thread ID from the database, if there is one, deletes it from the database, and returns it.
 * @return The draft message or an empty string.
 */
private static String readDraftSmsMessage(Context context,long thread_id,Conversation conv){
  if (DEBUG)   debug(""String_Node_Str"",thread_id);
  ContentResolver cr=context.getContentResolver();
  if (thread_id <= 0) {
    return ""String_Node_Str"";
  }
  Uri thread_uri=ContentUris.withAppendedId(Sms.Conversations.CONTENT_URI,thread_id);
  String body=""String_Node_Str"";
  Cursor c=SqliteWrapper.query(context,cr,thread_uri,SMS_BODY_PROJECTION,SMS_DRAFT_WHERE,null,null);
  try {
    if (c.moveToFirst()) {
      body=c.getString(SMS_BODY_INDEX);
    }
  }
  finally {
    c.close();
  }
  SqliteWrapper.delete(context,cr,thread_uri,SMS_DRAFT_WHERE,null);
  if (conv.getMessageCount() == 0) {
    if (DEBUG)     debug(""String_Node_Str"");
    conv.clearThreadId();
  }
  return body;
}",0.9207920792079208
44621,"private boolean loadFromConversation(Conversation conv){
  if (DEBUG)   debug(""String_Node_Str"",conv);
  long threadId=conv.getThreadId();
  if (threadId <= 0) {
    return false;
  }
  mText=readDraftSmsMessage(mContext,threadId);
  if (!TextUtils.isEmpty(mText)) {
    if (conv.getMessageCount() == 0) {
      conv.clearThreadId();
    }
    return true;
  }
  StringBuilder sb=new StringBuilder();
  Uri uri=readDraftMmsMessage(mContext,threadId,sb);
  if (uri != null) {
    if (loadFromUri(uri)) {
      if (sb.length() > 0) {
        setSubject(sb.toString());
      }
      return true;
    }
  }
  return false;
}","private boolean loadFromConversation(Conversation conv){
  if (DEBUG)   debug(""String_Node_Str"",conv);
  long threadId=conv.getThreadId();
  if (threadId <= 0) {
    return false;
  }
  mText=readDraftSmsMessage(mContext,threadId,conv);
  if (!TextUtils.isEmpty(mText)) {
    return true;
  }
  StringBuilder sb=new StringBuilder();
  Uri uri=readDraftMmsMessage(mContext,threadId,sb);
  if (uri != null) {
    if (loadFromUri(uri)) {
      if (sb.length() > 0) {
        setSubject(sb.toString());
      }
      return true;
    }
  }
  return false;
}",0.9335604770017036
44622,"@Override protected void onDeleteComplete(int token,Object cookie,int result){
switch (token) {
case DELETE_CONVERSATION_TOKEN:
    MessagingNotification.updateNewMessageIndicator(ConversationList.this);
  MessagingNotification.updateSendFailedNotification(ConversationList.this);
startAsyncQuery();
onContentChanged();
break;
}
}","@Override protected void onDeleteComplete(int token,Object cookie,int result){
switch (token) {
case DELETE_CONVERSATION_TOKEN:
    Conversation.init(ConversationList.this);
  MessagingNotification.updateNewMessageIndicator(ConversationList.this);
MessagingNotification.updateSendFailedNotification(ConversationList.this);
startAsyncQuery();
onContentChanged();
break;
}
}",0.9344729344729344
44623,"/** 
 * Marks all messages in this conversation as read and updates relevant notifications.  This method returns immediately; work is dispatched to a background thread.
 */
public synchronized void markAsRead(){
  if (!hasUnreadMessages()) {
    return;
  }
  final Uri threadUri=getUri();
  if (threadUri == null)   return;
  final ContentValues values=new ContentValues(1);
  values.put(""String_Node_Str"",1);
  new Thread(new Runnable(){
    public void run(){
      mContext.getContentResolver().update(threadUri,values,""String_Node_Str"",null);
      MessagingNotification.updateAllNotifications(mContext);
    }
  }
).start();
}","/** 
 * Marks all messages in this conversation as read and updates relevant notifications.  This method returns immediately; work is dispatched to a background thread.
 */
public synchronized void markAsRead(){
  final Uri threadUri=getUri();
  new Thread(new Runnable(){
    public void run(){
      if (threadUri != null) {
        buildReadContentValues();
        mContext.getContentResolver().update(threadUri,mReadContentValues,""String_Node_Str"",null);
        mHasUnreadMessages=false;
      }
      MessagingNotification.updateAllNotifications(mContext);
    }
  }
).start();
}",0.5582922824302134
44624,"@Override protected void onPause(){
  super.onPause();
  cancelPresencePollingRequests();
}","@Override protected void onPause(){
  super.onPause();
  Contact.stopPresenceObserver();
  removeRecipientsListeners();
}",0.7358490566037735
44625,"private void sendMessage(){
  mWorkingMessage.send();
  resetMessage();
  if (mExitOnSent) {
    finish();
  }
}","private void sendMessage(){
  removeRecipientsListeners();
  mWorkingMessage.send();
  addRecipientsListeners();
  resetMessage();
  if (mExitOnSent) {
    finish();
  }
}",0.7915194346289752
44626,"private void startQueryForContactInfo(){
  ContactList recipients=getRecipients();
  cancelPresencePollingRequests();
  if (recipients.size() != 1) {
    setPresenceIcon(0);
    startPresencePollingRequest();
    return;
  }
  String number=recipients.get(0).getNumber();
  mContactInfoSelectionArgs[0]=number;
  if (Mms.isEmailAddress(number)) {
    mBackgroundQueryHandler.cancelOperation(EMAIL_CONTACT_QUERY_TOKEN);
    mBackgroundQueryHandler.startQuery(EMAIL_CONTACT_QUERY_TOKEN,null,METHOD_WITH_PRESENCE_URI,EMAIL_QUERY_PROJECTION,METHOD_LOOKUP,mContactInfoSelectionArgs,null);
  }
 else {
    mBackgroundQueryHandler.cancelOperation(CALLER_ID_QUERY_TOKEN);
    mBackgroundQueryHandler.startQuery(CALLER_ID_QUERY_TOKEN,null,PHONES_WITH_PRESENCE_URI,CALLER_ID_PROJECTION,NUMBER_LOOKUP,mContactInfoSelectionArgs,null);
  }
}","private void startQueryForContactInfo(){
  ContactList recipients=getRecipients();
  if (recipients.size() != 1) {
    setPresenceIcon(0);
    return;
  }
  String number=recipients.get(0).getNumber();
  mContactInfoSelectionArgs[0]=number;
  if (Mms.isEmailAddress(number)) {
    mBackgroundQueryHandler.cancelOperation(EMAIL_CONTACT_QUERY_TOKEN);
    mBackgroundQueryHandler.startQuery(EMAIL_CONTACT_QUERY_TOKEN,null,METHOD_WITH_PRESENCE_URI,EMAIL_QUERY_PROJECTION,METHOD_LOOKUP,mContactInfoSelectionArgs,null);
  }
 else {
    mBackgroundQueryHandler.cancelOperation(CALLER_ID_QUERY_TOKEN);
    mBackgroundQueryHandler.startQuery(CALLER_ID_QUERY_TOKEN,null,PHONES_WITH_PRESENCE_URI,CALLER_ID_PROJECTION,NUMBER_LOOKUP,mContactInfoSelectionArgs,null);
  }
}",0.9558638083228248
44627,"public void run(){
  goToConversationList();
}","public void run(){
  setPresenceIcon(updated.getPresenceResId());
}",0.5663716814159292
44628,"@Override protected void onResume(){
  super.onResume();
  startPresencePollingRequest();
}","@Override protected void onResume(){
  super.onResume();
  Contact.startPresenceObserver();
  addRecipientsListeners();
}",0.7735849056603774
44629,"@Override public void handleMessage(Message msg){
  if (msg.what == REFRESH_PRESENCE) {
    startQueryForContactInfo();
  }
}","@Override public void handleMessage(Message msg){
  String type;
switch (msg.what) {
case MessageListItem.MSG_LIST_EDIT_MMS:
    type=""String_Node_Str"";
  break;
case MessageListItem.MSG_LIST_EDIT_SMS:
type=""String_Node_Str"";
break;
default :
Log.w(TAG,""String_Node_Str"" + msg.what);
return;
}
MessageItem msgItem=getMessageItem(type,(Long)msg.obj);
if (msgItem != null) {
editMessageItem(msgItem);
drawBottomPanel();
}
}",0.2490842490842491
44630,"@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
switch (token) {
case MESSAGE_LIST_QUERY_TOKEN:
    mMsgListAdapter.changeCursor(cursor);
  if (cursor.getCount() == 0 && !isRecipientsEditorVisible()) {
    initRecipientsEditor();
  }
mTextEditor.requestFocus();
return;
case CALLER_ID_QUERY_TOKEN:
case EMAIL_CONTACT_QUERY_TOKEN:
cleanupContactInfoCursor();
mContactInfoCursor=cursor;
updateContactInfo();
startPresencePollingRequest();
return;
}
}","@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
switch (token) {
case MESSAGE_LIST_QUERY_TOKEN:
    mMsgListAdapter.changeCursor(cursor);
  if (cursor.getCount() == 0 && !isRecipientsEditorVisible()) {
    initRecipientsEditor();
  }
mTextEditor.requestFocus();
return;
case CALLER_ID_QUERY_TOKEN:
case EMAIL_CONTACT_QUERY_TOKEN:
cleanupContactInfoCursor();
mContactInfoCursor=cursor;
updateContactInfo();
return;
}
}",0.966702470461869
44631,"private void initRecipientsEditor(){
  if (isRecipientsEditorVisible()) {
    return;
  }
  ViewStub stub=(ViewStub)findViewById(R.id.recipients_editor_stub);
  if (stub != null) {
    mRecipientsEditor=(RecipientsEditor)stub.inflate();
  }
 else {
    mRecipientsEditor=(RecipientsEditor)findViewById(R.id.recipients_editor);
    mRecipientsEditor.setVisibility(View.VISIBLE);
  }
  mRecipientsEditor.setAdapter(new RecipientsAdapter(this));
  mRecipientsEditor.populate(getRecipients());
  mRecipientsEditor.setOnCreateContextMenuListener(mRecipientsMenuCreateListener);
  mRecipientsEditor.addTextChangedListener(mRecipientsWatcher);
  mRecipientsEditor.setFilters(new InputFilter[]{new InputFilter.LengthFilter(RECIPIENTS_MAX_LENGTH)});
  mRecipientsEditor.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (mRecipientsEditor.getRecipientCount() == 1) {
        final InputMethodManager inputManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
        if (inputManager == null || !inputManager.isFullscreenMode()) {
          mTextEditor.requestFocus();
        }
      }
    }
  }
);
  mTopPanel.setVisibility(View.VISIBLE);
}","private void initRecipientsEditor(){
  if (isRecipientsEditorVisible()) {
    return;
  }
  ContactList recipients=getRecipients();
  ViewStub stub=(ViewStub)findViewById(R.id.recipients_editor_stub);
  if (stub != null) {
    mRecipientsEditor=(RecipientsEditor)stub.inflate();
  }
 else {
    mRecipientsEditor=(RecipientsEditor)findViewById(R.id.recipients_editor);
    mRecipientsEditor.setVisibility(View.VISIBLE);
  }
  mRecipientsEditor.setAdapter(new RecipientsAdapter(this));
  mRecipientsEditor.populate(recipients);
  mRecipientsEditor.setOnCreateContextMenuListener(mRecipientsMenuCreateListener);
  mRecipientsEditor.addTextChangedListener(mRecipientsWatcher);
  mRecipientsEditor.setFilters(new InputFilter[]{new InputFilter.LengthFilter(RECIPIENTS_MAX_LENGTH)});
  mRecipientsEditor.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (mRecipientsEditor.getRecipientCount() == 1) {
        final InputMethodManager inputManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
        if (inputManager == null || !inputManager.isFullscreenMode()) {
          mTextEditor.requestFocus();
        }
      }
    }
  }
);
  mTopPanel.setVisibility(View.VISIBLE);
}",0.9741012756088132
44632,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_PROGRESS);
  requestWindowFeature(Window.FEATURE_LEFT_ICON);
  setContentView(R.layout.compose_message_activity);
  setProgressBarVisibility(false);
  setTitle(""String_Node_Str"");
  initResourceRefs();
  mContentResolver=getContentResolver();
  mBackgroundQueryHandler=new BackgroundQueryHandler(mContentResolver);
  mWorkingMessage=WorkingMessage.createEmpty(this);
  initActivityState(savedInstanceState,getIntent());
  if (LOCAL_LOGV) {
    Log.v(TAG,""String_Node_Str"" + savedInstanceState);
    Log.v(TAG,""String_Node_Str"" + getIntent());
  }
  if (cancelFailedToDeliverNotification(getIntent(),this)) {
    undeliveredMessageDialog(getMessageDate(null));
  }
  cancelFailedDownloadNotification(getIntent(),this);
  initMessageList();
  mConversation.markAsRead();
  if (!handleSendIntent(getIntent()) && !handleForwardedMessage()) {
    loadDraft();
  }
  mWorkingMessage.setConversation(mConversation);
  if (mConversation.getThreadId() <= 0) {
    initRecipientsEditor();
  }
  updateSendButtonState();
  drawTopPanel();
  drawBottomPanel();
  mAttachmentEditor.update(mWorkingMessage);
  Configuration config=getResources().getConfiguration();
  mIsKeyboardOpen=config.keyboardHidden == KEYBOARDHIDDEN_NO;
  mIsLandscape=config.orientation == Configuration.ORIENTATION_LANDSCAPE;
  onKeyboardStateChanged(mIsKeyboardOpen);
  if (TRACE) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_PROGRESS);
  requestWindowFeature(Window.FEATURE_LEFT_ICON);
  setContentView(R.layout.compose_message_activity);
  setProgressBarVisibility(false);
  setTitle(""String_Node_Str"");
  initResourceRefs();
  mContentResolver=getContentResolver();
  mBackgroundQueryHandler=new BackgroundQueryHandler(mContentResolver);
  mWorkingMessage=WorkingMessage.createEmpty(this);
  initActivityState(savedInstanceState,getIntent());
  if (LOCAL_LOGV) {
    Log.v(TAG,""String_Node_Str"" + savedInstanceState + ""String_Node_Str""+ getIntent()+ ""String_Node_Str""+ getRecipients());
  }
  if (cancelFailedToDeliverNotification(getIntent(),this)) {
    undeliveredMessageDialog(getMessageDate(null));
  }
  cancelFailedDownloadNotification(getIntent(),this);
  initMessageList();
  mConversation.markAsRead();
  if (!handleSendIntent(getIntent()) && !handleForwardedMessage()) {
    loadDraft();
  }
  mWorkingMessage.setConversation(mConversation);
  if (mConversation.getThreadId() <= 0) {
    initRecipientsEditor();
  }
  updateSendButtonState();
  drawTopPanel();
  drawBottomPanel();
  mAttachmentEditor.update(mWorkingMessage);
  Configuration config=getResources().getConfiguration();
  mIsKeyboardOpen=config.keyboardHidden == KEYBOARDHIDDEN_NO;
  mIsLandscape=config.orientation == Configuration.ORIENTATION_LANDSCAPE;
  onKeyboardStateChanged(mIsKeyboardOpen);
  if (TRACE) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
}",0.981724911830715
44633,"private void buildAddAddressToContactMenuItem(Menu menu){
  for (  Contact c : getRecipients()) {
    if (!c.existsInDatabase()) {
      Intent intent=ConversationList.createAddContactIntent(c.getNumber());
      menu.add(0,MENU_ADD_ADDRESS_TO_CONTACTS,0,R.string.menu_add_to_contacts).setIcon(android.R.drawable.ic_menu_add).setIntent(intent);
      break;
    }
  }
}","private void buildAddAddressToContactMenuItem(Menu menu){
  for (  Contact c : getRecipients()) {
    if (!c.existsInDatabase() && canAddToContacts(c)) {
      Intent intent=ConversationList.createAddContactIntent(c.getNumber());
      menu.add(0,MENU_ADD_ADDRESS_TO_CONTACTS,0,R.string.menu_add_to_contacts).setIcon(android.R.drawable.ic_menu_add).setIntent(intent);
      break;
    }
  }
}",0.9697766097240472
44634,"private void handleAddAttachmentError(int error,int mediaTypeStringId){
  if (error == WorkingMessage.OK) {
    return;
  }
  Resources res=getResources();
  String mediaType=res.getString(mediaTypeStringId);
  String title, message;
switch (error) {
case WorkingMessage.UNKNOWN_ERROR:
    message=res.getString(R.string.failed_to_add_media,mediaType);
  Toast.makeText(this,message,Toast.LENGTH_SHORT);
return;
case WorkingMessage.UNSUPPORTED_TYPE:
title=res.getString(R.string.unsupported_media_format,mediaType);
message=res.getString(R.string.select_different_media,mediaType);
break;
case WorkingMessage.MESSAGE_SIZE_EXCEEDED:
title=res.getString(R.string.exceed_message_size_limitation,mediaType);
message=res.getString(R.string.failed_to_add_media,mediaType);
break;
case WorkingMessage.IMAGE_TOO_LARGE:
title=res.getString(R.string.failed_to_resize_image);
message=res.getString(R.string.resize_image_error_information);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + error);
}
MessageUtils.showErrorDialog(this,title,message);
}","private void handleAddAttachmentError(int error,int mediaTypeStringId){
  if (error == WorkingMessage.OK) {
    return;
  }
  Resources res=getResources();
  String mediaType=res.getString(mediaTypeStringId);
  String title, message;
switch (error) {
case WorkingMessage.UNKNOWN_ERROR:
    message=res.getString(R.string.failed_to_add_media,mediaType);
  Toast.makeText(this,message,Toast.LENGTH_SHORT).show();
return;
case WorkingMessage.UNSUPPORTED_TYPE:
title=res.getString(R.string.unsupported_media_format,mediaType);
message=res.getString(R.string.select_different_media,mediaType);
break;
case WorkingMessage.MESSAGE_SIZE_EXCEEDED:
title=res.getString(R.string.exceed_message_size_limitation,mediaType);
message=res.getString(R.string.failed_to_add_media,mediaType);
break;
case WorkingMessage.IMAGE_TOO_LARGE:
title=res.getString(R.string.failed_to_resize_image);
message=res.getString(R.string.resize_image_error_information);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + error);
}
MessageUtils.showErrorDialog(this,title,message);
}",0.996715157203191
44635,"public static List<String> getNumbers(String spaceSepIds){
synchronized (sInstance) {
    List<String> numbers=new ArrayList<String>();
    String[] ids=spaceSepIds.split(""String_Node_Str"");
    for (    String id : ids) {
      String number=sInstance.mCache.get(id);
      if (number == null) {
        Log.w(TAG,""String_Node_Str"" + id + ""String_Node_Str"");
        dump();
        fill();
        number=sInstance.mCache.get(id);
      }
      numbers.add(number);
    }
    return numbers;
  }
}","public static List<String> getNumbers(String spaceSepIds){
synchronized (sInstance) {
    List<String> numbers=new ArrayList<String>();
    String[] ids=spaceSepIds.split(""String_Node_Str"");
    for (    String id : ids) {
      String number=sInstance.mCache.get(id);
      if (number == null) {
        Log.w(TAG,""String_Node_Str"" + id + ""String_Node_Str"");
        dump();
        fill();
        number=sInstance.mCache.get(id);
      }
      if (TextUtils.isEmpty(number)) {
        Log.w(TAG,""String_Node_Str"" + id + ""String_Node_Str"");
      }
 else {
        numbers.add(number);
      }
    }
    return numbers;
  }
}",0.8152753108348135
44636,"private static void loadMmsSettings(Context context){
  XmlResourceParser parser=context.getResources().getXml(R.xml.mms_config);
  try {
    XmlUtils.beginDocument(parser,""String_Node_Str"");
    while (true) {
      XmlUtils.nextElement(parser);
      String tag=parser.getName();
      if (tag == null) {
        break;
      }
      String name=parser.getAttributeName(0);
      String value=parser.getAttributeValue(0);
      String text=null;
      if (parser.next() == XmlPullParser.TEXT) {
        text=parser.getText();
      }
      if (""String_Node_Str"".equalsIgnoreCase(name)) {
        if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMmsEnabled=""String_Node_Str"".equalsIgnoreCase(text) ? 1 : 0;
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxMessageSize=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageHeight=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageWidth=Integer.parseInt(text);
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUserAgent=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfTagName=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfUrl=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpParams=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpParamsLine1Key=text;
          }
        }
      }
    }
  }
 catch (  XmlPullParserException e) {
  }
catch (  NumberFormatException e) {
  }
catch (  IOException e) {
  }
 finally {
    parser.close();
  }
  String errorStr=null;
  if (mMmsEnabled == -1) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxMessageSize == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageHeight == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageWidth == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mUaProfUrl == null) {
    errorStr=""String_Node_Str"";
  }
  if (mUaProfTagName == null) {
    mUaProfTagName=DEFAULT_HTTP_KEY_X_WAP_PROFILE;
  }
  if (mUserAgent == null) {
    mUserAgent=DEFAULT_USER_AGENT;
  }
  if (errorStr != null) {
    String err=String.format(""String_Node_Str"",errorStr);
    Log.e(TAG,err);
    throw new ContentRestrictionException(err);
  }
}","private static void loadMmsSettings(Context context){
  XmlResourceParser parser=context.getResources().getXml(R.xml.mms_config);
  try {
    XmlUtils.beginDocument(parser,""String_Node_Str"");
    while (true) {
      XmlUtils.nextElement(parser);
      String tag=parser.getName();
      if (tag == null) {
        break;
      }
      String name=parser.getAttributeName(0);
      String value=parser.getAttributeValue(0);
      String text=null;
      if (parser.next() == XmlPullParser.TEXT) {
        text=parser.getText();
      }
      if (""String_Node_Str"".equalsIgnoreCase(name)) {
        if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMmsEnabled=""String_Node_Str"".equalsIgnoreCase(text) ? 1 : 0;
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxMessageSize=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageHeight=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageWidth=Integer.parseInt(text);
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUserAgent=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfTagName=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfUrl=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpParams=text;
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mHttpParamsLine1Key=text;
          }
        }
      }
    }
  }
 catch (  XmlPullParserException e) {
  }
catch (  NumberFormatException e) {
  }
catch (  IOException e) {
  }
 finally {
    parser.close();
  }
  String errorStr=null;
  if (mMmsEnabled == -1) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxMessageSize == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageHeight == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageWidth == 0) {
    errorStr=""String_Node_Str"";
  }
  if (getMmsEnabled() && mUaProfUrl == null) {
    errorStr=""String_Node_Str"";
  }
  if (mUaProfTagName == null) {
    mUaProfTagName=DEFAULT_HTTP_KEY_X_WAP_PROFILE;
  }
  if (mUserAgent == null) {
    mUserAgent=DEFAULT_USER_AGENT;
  }
  if (errorStr != null) {
    String err=String.format(""String_Node_Str"",errorStr);
    Log.e(TAG,err);
    throw new ContentRestrictionException(err);
  }
}",0.9964332645015956
44637,"private boolean loadFromConversation(Conversation conv){
  if (DEBUG)   debug(""String_Node_Str"",conv);
  long threadId=conv.getThreadId();
  if (threadId <= 0) {
    return false;
  }
  mText=readDraftSmsMessage(mContext,threadId);
  if (!TextUtils.isEmpty(mText)) {
    conv.clearThreadId();
    return true;
  }
  StringBuilder sb=new StringBuilder();
  Uri uri=readDraftMmsMessage(mContext,threadId,sb);
  if (uri != null) {
    if (loadFromUri(uri)) {
      if (sb.length() > 0) {
        setSubject(sb.toString());
      }
      return true;
    }
  }
  return false;
}","private boolean loadFromConversation(Conversation conv){
  if (DEBUG)   debug(""String_Node_Str"",conv);
  long threadId=conv.getThreadId();
  if (threadId <= 0) {
    return false;
  }
  mText=readDraftSmsMessage(mContext,threadId);
  if (!TextUtils.isEmpty(mText)) {
    if (conv.getMessageCount() == 0) {
      conv.clearThreadId();
    }
    return true;
  }
  StringBuilder sb=new StringBuilder();
  Uri uri=readDraftMmsMessage(mContext,threadId,sb);
  if (uri != null) {
    if (loadFromUri(uri)) {
      if (sb.length() > 0) {
        setSubject(sb.toString());
      }
      return true;
    }
  }
  return false;
}",0.9606694560669456
44638,"private boolean loadFromConversation(Conversation conv){
  if (DEBUG)   debug(""String_Node_Str"",conv);
  long threadId=conv.getThreadId();
  if (threadId <= 0) {
    return false;
  }
  mText=readDraftSmsMessage(mContext,threadId);
  if (!TextUtils.isEmpty(mText)) {
    return true;
  }
  StringBuilder sb=new StringBuilder();
  Uri uri=readDraftMmsMessage(mContext,threadId,sb);
  if (uri != null) {
    if (loadFromUri(uri)) {
      if (sb.length() > 0) {
        setSubject(sb.toString());
      }
      return true;
    }
  }
  return false;
}","private boolean loadFromConversation(Conversation conv){
  if (DEBUG)   debug(""String_Node_Str"",conv);
  long threadId=conv.getThreadId();
  if (threadId <= 0) {
    return false;
  }
  mText=readDraftSmsMessage(mContext,threadId);
  if (!TextUtils.isEmpty(mText)) {
    conv.clearThreadId();
    return true;
  }
  StringBuilder sb=new StringBuilder();
  Uri uri=readDraftMmsMessage(mContext,threadId,sb);
  if (uri != null) {
    if (loadFromUri(uri)) {
      if (sb.length() > 0) {
        setSubject(sb.toString());
      }
      return true;
    }
  }
  return false;
}",0.9768270944741532
44639,"private static void loadMmsSettings(Context context){
  XmlResourceParser parser=context.getResources().getXml(R.xml.mms_config);
  try {
    XmlUtils.beginDocument(parser,""String_Node_Str"");
    while (true) {
      XmlUtils.nextElement(parser);
      String tag=parser.getName();
      if (tag == null) {
        break;
      }
      String name=parser.getAttributeName(0);
      String value=parser.getAttributeValue(0);
      String text=null;
      if (parser.next() == XmlPullParser.TEXT) {
        text=parser.getText();
      }
      if (""String_Node_Str"".equalsIgnoreCase(name)) {
        if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMmsEnabled=""String_Node_Str"".equalsIgnoreCase(text) ? 1 : 0;
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxMessageSize=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageHeight=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageWidth=Integer.parseInt(text);
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfUrl=text;
          }
        }
      }
    }
  }
 catch (  XmlPullParserException e) {
  }
catch (  NumberFormatException e) {
  }
catch (  IOException e) {
  }
 finally {
    parser.close();
  }
  String errorStr=null;
  if (mMmsEnabled == -1) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxMessageSize == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageHeight == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageWidth == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mUaProfUrl == null) {
    errorStr=""String_Node_Str"";
  }
  if (errorStr != null) {
    String err=String.format(""String_Node_Str"",errorStr);
    Log.e(TAG,err);
    throw new ContentRestrictionException(err);
  }
}","private static void loadMmsSettings(Context context){
  XmlResourceParser parser=context.getResources().getXml(R.xml.mms_config);
  try {
    XmlUtils.beginDocument(parser,""String_Node_Str"");
    while (true) {
      XmlUtils.nextElement(parser);
      String tag=parser.getName();
      if (tag == null) {
        break;
      }
      String name=parser.getAttributeName(0);
      String value=parser.getAttributeValue(0);
      String text=null;
      if (parser.next() == XmlPullParser.TEXT) {
        text=parser.getText();
      }
      if (""String_Node_Str"".equalsIgnoreCase(name)) {
        if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMmsEnabled=""String_Node_Str"".equalsIgnoreCase(text) ? 1 : 0;
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxMessageSize=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageHeight=Integer.parseInt(text);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mMaxImageWidth=Integer.parseInt(text);
          }
        }
 else         if (""String_Node_Str"".equals(tag)) {
          if (""String_Node_Str"".equalsIgnoreCase(value)) {
            mUaProfUrl=text;
          }
        }
      }
    }
  }
 catch (  XmlPullParserException e) {
  }
catch (  NumberFormatException e) {
  }
catch (  IOException e) {
  }
 finally {
    parser.close();
  }
  String errorStr=null;
  if (mMmsEnabled == -1) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxMessageSize == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageHeight == 0) {
    errorStr=""String_Node_Str"";
  }
  if (mMaxImageWidth == 0) {
    errorStr=""String_Node_Str"";
  }
  if (getMmsEnabled() && mUaProfUrl == null) {
    errorStr=""String_Node_Str"";
  }
  if (errorStr != null) {
    String err=String.format(""String_Node_Str"",errorStr);
    Log.e(TAG,err);
    throw new ContentRestrictionException(err);
  }
}",0.9954139512430604
44640,"private void sendMmsWorker(Conversation conv,Uri mmsUri,PduPersister persister,SlideshowModel slideshow,SendReq sendReq){
  long threadId=conv.ensureThreadId();
  if (DEBUG)   debug(""String_Node_Str"" + mmsUri);
  if (mmsUri == null) {
    mmsUri=createDraftMmsMessage(persister,sendReq,slideshow);
  }
 else {
    updateDraftMmsMessage(mmsUri,persister,slideshow,sendReq);
  }
  deleteDraftSmsMessage(threadId);
  MessageSender sender=new MmsMessageSender(mContext,mmsUri);
  try {
    if (!sender.sendMessage(threadId)) {
      SqliteWrapper.delete(mContext,mContentResolver,mmsUri,null,null);
    }
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + mmsUri + ""String_Node_Str""+ threadId,e);
  }
  mStatusListener.onMessageSent();
}","private void sendMmsWorker(Conversation conv,Uri mmsUri,PduPersister persister,SlideshowModel slideshow,SendReq sendReq){
  long threadId=conv.ensureThreadId();
  if (DEBUG)   debug(""String_Node_Str"" + mmsUri);
  if (mmsUri == null) {
    mmsUri=createDraftMmsMessage(persister,sendReq,slideshow);
  }
 else {
    updateDraftMmsMessage(mmsUri,persister,slideshow,sendReq);
  }
  deleteDraftSmsMessage(threadId);
  MessageSender sender=new MmsMessageSender(mContext,mmsUri);
  try {
    if (!sender.sendMessage(threadId)) {
      SqliteWrapper.delete(mContext,mContentResolver,mmsUri,null,null);
    }
    Recycler.getMmsRecycler().deleteOldMessagesByThreadId(mContext,threadId);
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + mmsUri + ""String_Node_Str""+ threadId,e);
  }
  mStatusListener.onMessageSent();
}",0.9502551020408164
44641,"public void run(){
  DownloadManager downloadManager=DownloadManager.getInstance();
  boolean autoDownload=downloadManager.isAuto();
  try {
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"" + this);
    }
    int status=STATUS_DEFERRED;
    if (!autoDownload) {
      downloadManager.markState(mUri,DownloadManager.STATE_UNSTARTED);
      sendNotifyRespInd(status);
      return;
    }
    downloadManager.markState(mUri,DownloadManager.STATE_DOWNLOADING);
    byte[] clBytes=mNotificationInd.getContentLocation();
    if (clBytes == null) {
      throw new MmsException(""String_Node_Str"");
    }
    String contentLocation=new String(clBytes);
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"" + contentLocation);
    }
    byte[] retrieveConfData=null;
    try {
      retrieveConfData=getPdu(contentLocation);
    }
 catch (    IOException e) {
      mTransactionState.setState(FAILED);
    }
    if (retrieveConfData != null) {
      GenericPdu pdu=new PduParser(retrieveConfData).parse();
      if ((pdu == null) || (pdu.getMessageType() != MESSAGE_TYPE_RETRIEVE_CONF)) {
        Log.e(TAG,""String_Node_Str"");
        mTransactionState.setState(FAILED);
        status=STATUS_UNRECOGNIZED;
      }
 else {
        PduPersister p=PduPersister.getPduPersister(mContext);
        Uri uri=p.persist(pdu,Inbox.CONTENT_URI);
        SqliteWrapper.delete(mContext,mContext.getContentResolver(),mUri,null,null);
        mUri=uri;
        status=STATUS_RETRIEVED;
      }
    }
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"" + Integer.toHexString(status));
    }
switch (status) {
case STATUS_RETRIEVED:
      mTransactionState.setState(SUCCESS);
    break;
case STATUS_DEFERRED:
  if (mTransactionState.getState() == INITIALIZED) {
    mTransactionState.setState(SUCCESS);
  }
break;
}
sendNotifyRespInd(status);
}
 catch (Throwable t) {
Log.e(TAG,Log.getStackTraceString(t));
}
 finally {
mTransactionState.setContentUri(mUri);
if (!autoDownload) {
mTransactionState.setState(SUCCESS);
}
if (mTransactionState.getState() != SUCCESS) {
mTransactionState.setState(FAILED);
Log.e(TAG,""String_Node_Str"");
}
notifyObservers();
}
}","public void run(){
  DownloadManager downloadManager=DownloadManager.getInstance();
  boolean autoDownload=downloadManager.isAuto();
  try {
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"" + this);
    }
    int status=STATUS_DEFERRED;
    if (!autoDownload) {
      downloadManager.markState(mUri,DownloadManager.STATE_UNSTARTED);
      sendNotifyRespInd(status);
      return;
    }
    downloadManager.markState(mUri,DownloadManager.STATE_DOWNLOADING);
    byte[] clBytes=mNotificationInd.getContentLocation();
    if (clBytes == null) {
      throw new MmsException(""String_Node_Str"");
    }
    String contentLocation=new String(clBytes);
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"" + contentLocation);
    }
    byte[] retrieveConfData=null;
    try {
      retrieveConfData=getPdu(contentLocation);
    }
 catch (    IOException e) {
      mTransactionState.setState(FAILED);
    }
    if (retrieveConfData != null) {
      GenericPdu pdu=new PduParser(retrieveConfData).parse();
      if ((pdu == null) || (pdu.getMessageType() != MESSAGE_TYPE_RETRIEVE_CONF)) {
        Log.e(TAG,""String_Node_Str"");
        mTransactionState.setState(FAILED);
        status=STATUS_UNRECOGNIZED;
      }
 else {
        PduPersister p=PduPersister.getPduPersister(mContext);
        Uri uri=p.persist(pdu,Inbox.CONTENT_URI);
        SqliteWrapper.delete(mContext,mContext.getContentResolver(),mUri,null,null);
        mUri=uri;
        status=STATUS_RETRIEVED;
      }
    }
    if (LOCAL_LOGV) {
      Log.v(TAG,""String_Node_Str"" + Integer.toHexString(status));
    }
switch (status) {
case STATUS_RETRIEVED:
      mTransactionState.setState(SUCCESS);
    break;
case STATUS_DEFERRED:
  if (mTransactionState.getState() == INITIALIZED) {
    mTransactionState.setState(SUCCESS);
  }
break;
}
sendNotifyRespInd(status);
Cursor cursor=SqliteWrapper.query(mContext,mContext.getContentResolver(),mUri,new String[]{Mms.THREAD_ID},null,null,null);
try {
if ((cursor.getCount() == 1) && cursor.moveToFirst()) {
long threadId=cursor.getLong(0);
Recycler.getMmsRecycler().deleteOldMessagesByThreadId(mContext,threadId);
}
}
  finally {
cursor.close();
}
}
 catch (Throwable t) {
Log.e(TAG,Log.getStackTraceString(t));
}
 finally {
mTransactionState.setContentUri(mUri);
if (!autoDownload) {
mTransactionState.setState(SUCCESS);
}
if (mTransactionState.getState() != SUCCESS) {
mTransactionState.setState(FAILED);
Log.e(TAG,""String_Node_Str"");
}
notifyObservers();
}
}",0.9293760831889082
44642,"public void run(){
  try {
    DownloadManager.getInstance().markState(mUri,DownloadManager.STATE_DOWNLOADING);
    byte[] resp=getPdu(mContentLocation);
    RetrieveConf retrieveConf=(RetrieveConf)new PduParser(resp).parse();
    if (null == retrieveConf) {
      throw new MmsException(""String_Node_Str"");
    }
    if (isDuplicateMessage(mContext,retrieveConf)) {
      mTransactionState.setState(TransactionState.FAILED);
      mTransactionState.setContentUri(mUri);
    }
 else {
      PduPersister persister=PduPersister.getPduPersister(mContext);
      Uri uri=persister.persist(retrieveConf,Inbox.CONTENT_URI);
      mTransactionState.setState(TransactionState.SUCCESS);
      mTransactionState.setContentUri(uri);
      updateContentLocation(mContext,uri,mContentLocation);
    }
    SqliteWrapper.delete(mContext,mContext.getContentResolver(),mUri,null,null);
    sendAcknowledgeInd(retrieveConf);
    Recycler.getMmsRecycler().deleteOldMessages(mContext);
  }
 catch (  Throwable t) {
    Log.e(TAG,Log.getStackTraceString(t));
  }
 finally {
    if (mTransactionState.getState() != TransactionState.SUCCESS) {
      mTransactionState.setState(TransactionState.FAILED);
      mTransactionState.setContentUri(mUri);
      Log.e(TAG,""String_Node_Str"");
    }
    notifyObservers();
  }
}","public void run(){
  try {
    DownloadManager.getInstance().markState(mUri,DownloadManager.STATE_DOWNLOADING);
    byte[] resp=getPdu(mContentLocation);
    RetrieveConf retrieveConf=(RetrieveConf)new PduParser(resp).parse();
    if (null == retrieveConf) {
      throw new MmsException(""String_Node_Str"");
    }
    if (isDuplicateMessage(mContext,retrieveConf)) {
      mTransactionState.setState(TransactionState.FAILED);
      mTransactionState.setContentUri(mUri);
    }
 else {
      PduPersister persister=PduPersister.getPduPersister(mContext);
      Uri uri=persister.persist(retrieveConf,Inbox.CONTENT_URI);
      mTransactionState.setState(TransactionState.SUCCESS);
      mTransactionState.setContentUri(uri);
      updateContentLocation(mContext,uri,mContentLocation);
    }
    SqliteWrapper.delete(mContext,mContext.getContentResolver(),mUri,null,null);
    sendAcknowledgeInd(retrieveConf);
  }
 catch (  Throwable t) {
    Log.e(TAG,Log.getStackTraceString(t));
  }
 finally {
    if (mTransactionState.getState() != TransactionState.SUCCESS) {
      mTransactionState.setState(TransactionState.FAILED);
      mTransactionState.setContentUri(mUri);
      Log.e(TAG,""String_Node_Str"");
    }
    notifyObservers();
  }
}",0.9767074615080932
44643,"private void handleSmsReceived(Intent intent){
  SmsMessage[] msgs=Intents.getMessagesFromIntent(intent);
  Uri messageUri=insertMessage(this,msgs);
  if (messageUri != null) {
    MessagingNotification.updateNewMessageIndicator(this,true);
  }
  Recycler.getSmsRecycler().deleteOldMessages(getApplicationContext());
}","private void handleSmsReceived(Intent intent){
  SmsMessage[] msgs=Intents.getMessagesFromIntent(intent);
  Uri messageUri=insertMessage(this,msgs);
  if (messageUri != null) {
    MessagingNotification.updateNewMessageIndicator(this,true);
  }
}",0.8723404255319149
44644,"private Uri storeMessage(Context context,SmsMessage[] msgs){
  SmsMessage sms=msgs[0];
  ContentValues values=extractContentValues(sms);
  int pduCount=msgs.length;
  if (pduCount == 1) {
    values.put(Inbox.BODY,sms.getDisplayMessageBody());
  }
 else {
    StringBuilder body=new StringBuilder();
    for (int i=0; i < pduCount; i++) {
      sms=msgs[i];
      body.append(sms.getDisplayMessageBody());
    }
    values.put(Inbox.BODY,body.toString());
  }
  ContentResolver resolver=context.getContentResolver();
  return SqliteWrapper.insert(context,resolver,Inbox.CONTENT_URI,values);
}","private Uri storeMessage(Context context,SmsMessage[] msgs){
  SmsMessage sms=msgs[0];
  ContentValues values=extractContentValues(sms);
  int pduCount=msgs.length;
  if (pduCount == 1) {
    values.put(Inbox.BODY,sms.getDisplayMessageBody());
  }
 else {
    StringBuilder body=new StringBuilder();
    for (int i=0; i < pduCount; i++) {
      sms=msgs[i];
      body.append(sms.getDisplayMessageBody());
    }
    values.put(Inbox.BODY,body.toString());
  }
  Long threadId=values.getAsLong(Sms.THREAD_ID);
  String address=values.getAsString(Sms.ADDRESS);
  if (((threadId == null) || (threadId == 0)) && (address != null)) {
    values.put(Sms.THREAD_ID,Threads.getOrCreateThreadId(context,address));
  }
  ContentResolver resolver=context.getContentResolver();
  Uri insertedUri=SqliteWrapper.insert(context,resolver,Inbox.CONTENT_URI,values);
  threadId=values.getAsLong(Sms.THREAD_ID);
  Recycler.getSmsRecycler().deleteOldMessagesByThreadId(getApplicationContext(),threadId);
  return insertedUri;
}",0.7317073170731707
44645,"private void launchTransaction(int serviceId,TransactionBundle txnBundle,boolean noNetwork){
  if (noNetwork) {
    Log.w(TAG,""String_Node_Str"");
    onNetworkUnavailable(serviceId,txnBundle.getTransactionType());
    return;
  }
  Message msg=mServiceHandler.obtainMessage(EVENT_TRANSACTION_REQUEST);
  msg.arg1=serviceId;
  msg.obj=txnBundle;
  if (Log.isLoggable(MmsApp.LOG_TAG,Log.VERBOSE)) {
    Log.v(TAG,""String_Node_Str"" + msg);
  }
  mServiceHandler.sendMessage(msg);
  Recycler.getMmsRecycler().deleteOldMessages(getApplicationContext());
}","private void launchTransaction(int serviceId,TransactionBundle txnBundle,boolean noNetwork){
  if (noNetwork) {
    Log.w(TAG,""String_Node_Str"");
    onNetworkUnavailable(serviceId,txnBundle.getTransactionType());
    return;
  }
  Message msg=mServiceHandler.obtainMessage(EVENT_TRANSACTION_REQUEST);
  msg.arg1=serviceId;
  msg.obj=txnBundle;
  if (Log.isLoggable(MmsApp.LOG_TAG,Log.VERBOSE)) {
    Log.v(TAG,""String_Node_Str"" + msg);
  }
  mServiceHandler.sendMessage(msg);
}",0.9299610894941636
44646,"private static void notifyFailed(Context context,boolean isDownload,long threadId,boolean noisy){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(context);
  boolean enabled=sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_ENABLED,true);
  if (!enabled) {
    return;
  }
  NotificationManager nm=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  long[] msgThreadId={0};
  int totalFailedCount=getUndeliveredMessageCount(context,msgThreadId);
  Intent failedIntent;
  Notification notification=new Notification();
  String title;
  String description;
  if (totalFailedCount > 1) {
    description=context.getString(R.string.notification_failed_multiple,Integer.toString(totalFailedCount));
    title=context.getString(R.string.notification_failed_multiple_title);
    failedIntent=new Intent(context,ConversationList.class);
  }
 else {
    title=isDownload ? context.getString(R.string.message_download_failed_title) : context.getString(R.string.message_send_failed_title);
    description=context.getString(R.string.message_failed_body);
    threadId=(msgThreadId[0] != 0 ? msgThreadId[0] : 0);
    failedIntent=new Intent(context,ComposeMessageActivity.class);
    failedIntent.putExtra(""String_Node_Str"",threadId);
    failedIntent.putExtra(""String_Node_Str"",true);
  }
  failedIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,failedIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  notification.icon=R.drawable.stat_notify_sms_failed;
  notification.tickerText=title;
  notification.setLatestEventInfo(context,title,description,pendingIntent);
  if (noisy) {
    boolean vibrate=sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_VIBRATE,true);
    if (vibrate) {
      notification.defaults|=Notification.DEFAULT_VIBRATE;
    }
    String ringtoneStr=sp.getString(MessagingPreferenceActivity.NOTIFICATION_RINGTONE,null);
    notification.sound=TextUtils.isEmpty(ringtoneStr) ? null : Uri.parse(ringtoneStr);
  }
  if (isDownload) {
    nm.notify(DOWNLOAD_FAILED_NOTIFICATION_ID,notification);
  }
 else {
    nm.notify(MESSAGE_FAILED_NOTIFICATION_ID,notification);
  }
}","private static void notifyFailed(Context context,boolean isDownload,long threadId,boolean noisy){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(context);
  boolean enabled=sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_ENABLED,true);
  if (!enabled) {
    return;
  }
  NotificationManager nm=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  long[] msgThreadId={0};
  int totalFailedCount=getUndeliveredMessageCount(context,msgThreadId);
  Intent failedIntent;
  Notification notification=new Notification();
  String title;
  String description;
  if (totalFailedCount > 1) {
    description=context.getString(R.string.notification_failed_multiple,Integer.toString(totalFailedCount));
    title=context.getString(R.string.notification_failed_multiple_title);
    failedIntent=new Intent(context,ConversationList.class);
  }
 else {
    title=isDownload ? context.getString(R.string.message_download_failed_title) : context.getString(R.string.message_send_failed_title);
    description=context.getString(R.string.message_failed_body);
    failedIntent=new Intent(context,ComposeMessageActivity.class);
    if (isDownload) {
      failedIntent.putExtra(""String_Node_Str"",true);
    }
 else {
      threadId=(msgThreadId[0] != 0 ? msgThreadId[0] : 0);
      failedIntent.putExtra(""String_Node_Str"",true);
    }
    failedIntent.putExtra(""String_Node_Str"",threadId);
  }
  failedIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,failedIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  notification.icon=R.drawable.stat_notify_sms_failed;
  notification.tickerText=title;
  notification.setLatestEventInfo(context,title,description,pendingIntent);
  if (noisy) {
    boolean vibrate=sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_VIBRATE,true);
    if (vibrate) {
      notification.defaults|=Notification.DEFAULT_VIBRATE;
    }
    String ringtoneStr=sp.getString(MessagingPreferenceActivity.NOTIFICATION_RINGTONE,null);
    notification.sound=TextUtils.isEmpty(ringtoneStr) ? null : Uri.parse(ringtoneStr);
  }
  if (isDownload) {
    nm.notify(DOWNLOAD_FAILED_NOTIFICATION_ID,notification);
  }
 else {
    nm.notify(MESSAGE_FAILED_NOTIFICATION_ID,notification);
  }
}",0.9445053739855231
44647,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_PROGRESS);
  requestWindowFeature(Window.FEATURE_LEFT_ICON);
  setContentView(R.layout.compose_message_activity);
  setProgressBarVisibility(false);
  setTitle(""String_Node_Str"");
  initResourceRefs();
  mContentResolver=getContentResolver();
  mBackgroundQueryHandler=new BackgroundQueryHandler(mContentResolver);
  mWorkingMessage=WorkingMessage.createEmpty(this);
  initActivityState(savedInstanceState,getIntent());
  if (LOCAL_LOGV) {
    Log.v(TAG,""String_Node_Str"" + savedInstanceState);
    Log.v(TAG,""String_Node_Str"" + getIntent());
  }
  if (cancelFailedToDeliverNotification(getIntent(),getApplicationContext())) {
    undeliveredMessageDialog(getMessageDate(null));
  }
  initMessageList();
  mConversation.markAsRead();
  if (!handleSendIntent(getIntent()) && !handleForwardedMessage()) {
    loadDraft();
  }
  mWorkingMessage.setConversation(mConversation);
  if (mConversation.getThreadId() <= 0) {
    initRecipientsEditor();
  }
  updateSendButtonState();
  drawTopPanel();
  drawBottomPanel();
  mAttachmentEditor.update(mWorkingMessage);
  Configuration config=getResources().getConfiguration();
  mIsKeyboardOpen=config.keyboardHidden == KEYBOARDHIDDEN_NO;
  mIsLandscape=config.orientation == Configuration.ORIENTATION_LANDSCAPE;
  onKeyboardStateChanged(mIsKeyboardOpen);
  if (TRACE) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_PROGRESS);
  requestWindowFeature(Window.FEATURE_LEFT_ICON);
  setContentView(R.layout.compose_message_activity);
  setProgressBarVisibility(false);
  setTitle(""String_Node_Str"");
  initResourceRefs();
  mContentResolver=getContentResolver();
  mBackgroundQueryHandler=new BackgroundQueryHandler(mContentResolver);
  mWorkingMessage=WorkingMessage.createEmpty(this);
  initActivityState(savedInstanceState,getIntent());
  if (LOCAL_LOGV) {
    Log.v(TAG,""String_Node_Str"" + savedInstanceState);
    Log.v(TAG,""String_Node_Str"" + getIntent());
  }
  if (cancelFailedToDeliverNotification(getIntent(),this)) {
    undeliveredMessageDialog(getMessageDate(null));
  }
  cancelFailedDownloadNotification(getIntent(),this);
  initMessageList();
  mConversation.markAsRead();
  if (!handleSendIntent(getIntent()) && !handleForwardedMessage()) {
    loadDraft();
  }
  mWorkingMessage.setConversation(mConversation);
  if (mConversation.getThreadId() <= 0) {
    initRecipientsEditor();
  }
  updateSendButtonState();
  drawTopPanel();
  drawBottomPanel();
  mAttachmentEditor.update(mWorkingMessage);
  Configuration config=getResources().getConfiguration();
  mIsKeyboardOpen=config.keyboardHidden == KEYBOARDHIDDEN_NO;
  mIsLandscape=config.orientation == Configuration.ORIENTATION_LANDSCAPE;
  onKeyboardStateChanged(mIsKeyboardOpen);
  if (TRACE) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
}",0.9735553379040156
44648,"static public boolean cancelFailedToDeliverNotification(Intent intent,Context context){
  if (ConversationList.isFailedToDeliver(intent)) {
    MessagingNotification.cancelNotification(context,MessagingNotification.MESSAGE_FAILED_NOTIFICATION_ID);
    return true;
  }
  return false;
}","public static boolean cancelFailedToDeliverNotification(Intent intent,Context context){
  if (MessagingNotification.isFailedToDeliver(intent)) {
    MessagingNotification.cancelNotification(context,MessagingNotification.MESSAGE_FAILED_NOTIFICATION_ID);
    return true;
  }
  return false;
}",0.9116117850953206
44649,"@Override public void onChange(boolean selfUpdate){
  mCachedNames.clear();
}","@Override public void onChange(boolean selfUpdate){
  mCachedNames.clear();
  mListAdapter.invalidateAddressCache();
}",0.7897435897435897
44650,"public CachingNameStoreImpl(Context ctxt){
  mContext=ctxt;
  mPhonesObserver=new ContentObserver(new Handler()){
    @Override public void onChange(    boolean selfUpdate){
      mCachedNames.clear();
    }
  }
;
  ctxt.getContentResolver().registerContentObserver(Contacts.Phones.CONTENT_URI,true,mPhonesObserver);
}","public CachingNameStoreImpl(Context ctxt){
  mPhonesObserver=new ContentObserver(new Handler()){
    @Override public void onChange(    boolean selfUpdate){
      mCachedNames.clear();
      mListAdapter.invalidateAddressCache();
    }
  }
;
  ctxt.getContentResolver().registerContentObserver(People.CONTENT_URI,true,mPhonesObserver);
}",0.8763358778625954
44651,"public static Intent createAddContactIntent(String address){
  Intent intent=new Intent(Intent.ACTION_INSERT_OR_EDIT);
  intent.setType(Contacts.People.CONTENT_ITEM_TYPE);
  if (Recipient.isPhoneNumber(address)) {
    intent.putExtra(Insert.PHONE,address);
  }
 else {
    intent.putExtra(Insert.EMAIL,address);
  }
  intent.putExtra(Insert.NAME,address);
  return intent;
}","public static Intent createAddContactIntent(String address){
  Intent intent=new Intent(Intent.ACTION_INSERT_OR_EDIT);
  intent.setType(Contacts.People.CONTENT_ITEM_TYPE);
  if (Recipient.isPhoneNumber(address)) {
    intent.putExtra(Insert.PHONE,address);
  }
 else {
    intent.putExtra(Insert.EMAIL,address);
  }
  return intent;
}",0.943502824858757
44652,"public static Intent createAddContactIntent(String address){
  Intent intent=new Intent(Intent.ACTION_INSERT_OR_EDIT);
  intent.setType(Contacts.People.CONTENT_ITEM_TYPE);
  if (Recipient.isPhoneNumber(address)) {
    intent.putExtra(Insert.PHONE,address);
  }
 else {
    intent.putExtra(Insert.EMAIL,address);
  }
  intent.putExtra(Insert.NAME,address);
  return intent;
}","public static Intent createAddContactIntent(String address){
  Intent intent=new Intent(Intent.ACTION_INSERT_OR_EDIT);
  intent.setType(Contacts.People.CONTENT_ITEM_TYPE);
  if (Recipient.isPhoneNumber(address)) {
    intent.putExtra(Insert.PHONE,address);
  }
 else {
    intent.putExtra(Insert.EMAIL,address);
  }
  return intent;
}",0.943502824858757
44653,"public static Intent createAddContactIntent(String address){
  Intent intent=new Intent(Intent.ACTION_INSERT_OR_EDIT);
  intent.setType(Contacts.People.CONTENT_ITEM_TYPE);
  if (Recipient.isPhoneNumber(address)) {
    intent.putExtra(Insert.PHONE,address);
  }
 else {
    intent.putExtra(Insert.EMAIL,address);
  }
  intent.putExtra(Insert.NAME,address);
  return intent;
}","public static Intent createAddContactIntent(String address){
  Intent intent=new Intent(Intent.ACTION_INSERT_OR_EDIT);
  intent.setType(Contacts.People.CONTENT_ITEM_TYPE);
  if (Recipient.isPhoneNumber(address)) {
    intent.putExtra(Insert.PHONE,address);
  }
 else {
    intent.putExtra(Insert.EMAIL,address);
  }
  return intent;
}",0.943502824858757
44654,"private static void updateNotification(Context context,Intent clickIntent,String description,int iconRes,boolean isNew,CharSequence ticker,long timeMillis,String title,int messageCount,int uniqueThreadCount){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(context);
  if (!sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_ENABLED,true)) {
    return;
  }
  Notification notification=new Notification(iconRes,ticker,timeMillis);
  if (uniqueThreadCount > 1) {
    title=context.getString(R.string.notification_multiple_title);
    clickIntent=getAppIntent();
    clickIntent.setAction(Intent.ACTION_MAIN);
    clickIntent.setType(""String_Node_Str"");
  }
  if (messageCount > 1) {
    description=context.getString(R.string.notification_multiple,Integer.toString(messageCount));
  }
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,clickIntent,0);
  notification.setLatestEventInfo(context,title,description,pendingIntent);
  if (isNew) {
    boolean vibrate=sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_VIBRATE,true);
    if (vibrate) {
      notification.defaults|=Notification.DEFAULT_VIBRATE;
    }
    String ringtoneStr=sp.getString(MessagingPreferenceActivity.NOTIFICATION_RINGTONE,null);
    notification.sound=TextUtils.isEmpty(ringtoneStr) ? null : Uri.parse(ringtoneStr);
  }
  notification.flags|=Notification.FLAG_SHOW_LIGHTS;
  notification.ledARGB=0xff00ff00;
  notification.ledOnMS=500;
  notification.ledOffMS=2000;
  NotificationManager nm=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  nm.notify(NOTIFICATION_ID,notification);
}","private static void updateNotification(Context context,Intent clickIntent,String description,int iconRes,boolean isNew,CharSequence ticker,long timeMillis,String title,int messageCount,int uniqueThreadCount){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(context);
  if (!sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_ENABLED,true)) {
    return;
  }
  Notification notification=new Notification(iconRes,ticker,timeMillis);
  if (uniqueThreadCount > 1) {
    title=context.getString(R.string.notification_multiple_title);
    clickIntent=getAppIntent();
    clickIntent.setAction(Intent.ACTION_MAIN);
    clickIntent.setType(""String_Node_Str"");
  }
  if (messageCount > 1) {
    description=context.getString(R.string.notification_multiple,Integer.toString(messageCount));
  }
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  notification.setLatestEventInfo(context,title,description,pendingIntent);
  if (isNew) {
    boolean vibrate=sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_VIBRATE,true);
    if (vibrate) {
      notification.defaults|=Notification.DEFAULT_VIBRATE;
    }
    String ringtoneStr=sp.getString(MessagingPreferenceActivity.NOTIFICATION_RINGTONE,null);
    notification.sound=TextUtils.isEmpty(ringtoneStr) ? null : Uri.parse(ringtoneStr);
  }
  notification.flags|=Notification.FLAG_SHOW_LIGHTS;
  notification.ledARGB=0xff00ff00;
  notification.ledOnMS=500;
  notification.ledOffMS=2000;
  NotificationManager nm=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  nm.notify(NOTIFICATION_ID,notification);
}",0.9896844660194176
44655,"private static void notifyFailed(Context context,boolean isDownload,long threadId,boolean noisy){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(context);
  boolean enabled=sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_ENABLED,true);
  if (!enabled) {
    return;
  }
  NotificationManager nm=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  long[] msgThreadId={0};
  int totalFailedCount=getUndeliveredMessageCount(context,msgThreadId);
  Intent failedIntent;
  Notification notification=new Notification();
  String title;
  String description;
  if (totalFailedCount > 1) {
    description=context.getString(R.string.notification_failed_multiple,Integer.toString(totalFailedCount));
    title=context.getString(R.string.notification_failed_multiple_title);
    failedIntent=new Intent(context,ConversationList.class);
  }
 else {
    title=isDownload ? context.getString(R.string.message_download_failed_title) : context.getString(R.string.message_send_failed_title);
    description=context.getString(R.string.message_failed_body);
    threadId=(msgThreadId[0] != 0 ? msgThreadId[0] : 0);
    failedIntent=new Intent(context,ComposeMessageActivity.class);
    failedIntent.putExtra(""String_Node_Str"",threadId);
    failedIntent.putExtra(""String_Node_Str"",true);
  }
  failedIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,failedIntent,0);
  notification.icon=R.drawable.stat_notify_sms_failed;
  notification.tickerText=title;
  notification.setLatestEventInfo(context,title,description,pendingIntent);
  if (noisy) {
    boolean vibrate=sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_VIBRATE,true);
    if (vibrate) {
      notification.defaults|=Notification.DEFAULT_VIBRATE;
    }
    String ringtoneStr=sp.getString(MessagingPreferenceActivity.NOTIFICATION_RINGTONE,null);
    notification.sound=TextUtils.isEmpty(ringtoneStr) ? null : Uri.parse(ringtoneStr);
  }
  if (isDownload) {
    nm.notify(DOWNLOAD_FAILED_NOTIFICATION_ID,notification);
  }
 else {
    nm.notify(MESSAGE_FAILED_NOTIFICATION_ID,notification);
  }
}","private static void notifyFailed(Context context,boolean isDownload,long threadId,boolean noisy){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(context);
  boolean enabled=sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_ENABLED,true);
  if (!enabled) {
    return;
  }
  NotificationManager nm=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  long[] msgThreadId={0};
  int totalFailedCount=getUndeliveredMessageCount(context,msgThreadId);
  Intent failedIntent;
  Notification notification=new Notification();
  String title;
  String description;
  if (totalFailedCount > 1) {
    description=context.getString(R.string.notification_failed_multiple,Integer.toString(totalFailedCount));
    title=context.getString(R.string.notification_failed_multiple_title);
    failedIntent=new Intent(context,ConversationList.class);
  }
 else {
    title=isDownload ? context.getString(R.string.message_download_failed_title) : context.getString(R.string.message_send_failed_title);
    description=context.getString(R.string.message_failed_body);
    threadId=(msgThreadId[0] != 0 ? msgThreadId[0] : 0);
    failedIntent=new Intent(context,ComposeMessageActivity.class);
    failedIntent.putExtra(""String_Node_Str"",threadId);
    failedIntent.putExtra(""String_Node_Str"",true);
  }
  failedIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,failedIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  notification.icon=R.drawable.stat_notify_sms_failed;
  notification.tickerText=title;
  notification.setLatestEventInfo(context,title,description,pendingIntent);
  if (noisy) {
    boolean vibrate=sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_VIBRATE,true);
    if (vibrate) {
      notification.defaults|=Notification.DEFAULT_VIBRATE;
    }
    String ringtoneStr=sp.getString(MessagingPreferenceActivity.NOTIFICATION_RINGTONE,null);
    notification.sound=TextUtils.isEmpty(ringtoneStr) ? null : Uri.parse(ringtoneStr);
  }
  if (isDownload) {
    nm.notify(DOWNLOAD_FAILED_NOTIFICATION_ID,notification);
  }
 else {
    nm.notify(MESSAGE_FAILED_NOTIFICATION_ID,notification);
  }
}",0.9923215898825656
44656,"private static void updateNotification(Context context,Intent clickIntent,String description,int iconRes,boolean isNew,CharSequence ticker,long timeMillis,String title,int messageCount,int uniqueThreadCount){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(context);
  if (!sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_ENABLED,true)) {
    return;
  }
  Notification notification=new Notification(iconRes,ticker,timeMillis);
  if (uniqueThreadCount > 1) {
    title=context.getString(R.string.notification_multiple_title);
    clickIntent=getAppIntent();
    clickIntent.setAction(Intent.ACTION_MAIN);
    clickIntent.setType(""String_Node_Str"");
  }
  if (messageCount > 1) {
    description=context.getString(R.string.notification_multiple,Integer.toString(messageCount));
  }
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,clickIntent,0);
  notification.setLatestEventInfo(context,title,description,pendingIntent);
  if (isNew) {
    boolean vibrate=sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_VIBRATE,true);
    if (vibrate) {
      notification.defaults|=Notification.DEFAULT_VIBRATE;
    }
    String ringtoneStr=sp.getString(MessagingPreferenceActivity.NOTIFICATION_RINGTONE,null);
    notification.sound=TextUtils.isEmpty(ringtoneStr) ? null : Uri.parse(ringtoneStr);
  }
  notification.flags|=Notification.FLAG_SHOW_LIGHTS;
  notification.ledARGB=0xff00ff00;
  notification.ledOnMS=500;
  notification.ledOffMS=2000;
  NotificationManager nm=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  nm.notify(NOTIFICATION_ID,notification);
}","private static void updateNotification(Context context,Intent clickIntent,String description,int iconRes,boolean isNew,CharSequence ticker,long timeMillis,String title,int messageCount,int uniqueThreadCount){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(context);
  if (!sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_ENABLED,true)) {
    return;
  }
  Notification notification=new Notification(iconRes,ticker,timeMillis);
  if (uniqueThreadCount > 1) {
    title=context.getString(R.string.notification_multiple_title);
    clickIntent=getAppIntent();
    clickIntent.setAction(Intent.ACTION_MAIN);
    clickIntent.setType(""String_Node_Str"");
  }
  if (messageCount > 1) {
    description=context.getString(R.string.notification_multiple,Integer.toString(messageCount));
  }
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,clickIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  notification.setLatestEventInfo(context,title,description,pendingIntent);
  if (isNew) {
    boolean vibrate=sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_VIBRATE,true);
    if (vibrate) {
      notification.defaults|=Notification.DEFAULT_VIBRATE;
    }
    String ringtoneStr=sp.getString(MessagingPreferenceActivity.NOTIFICATION_RINGTONE,null);
    notification.sound=TextUtils.isEmpty(ringtoneStr) ? null : Uri.parse(ringtoneStr);
  }
  notification.flags|=Notification.FLAG_SHOW_LIGHTS;
  notification.ledARGB=0xff00ff00;
  notification.ledOnMS=500;
  notification.ledOffMS=2000;
  NotificationManager nm=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  nm.notify(NOTIFICATION_ID,notification);
}",0.9896844660194176
44657,"private static void notifyFailed(Context context,boolean isDownload,long threadId,boolean noisy){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(context);
  boolean enabled=sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_ENABLED,true);
  if (!enabled) {
    return;
  }
  NotificationManager nm=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  long[] msgThreadId={0};
  int totalFailedCount=getUndeliveredMessageCount(context,msgThreadId);
  Intent failedIntent;
  Notification notification=new Notification();
  String title;
  String description;
  if (totalFailedCount > 1) {
    description=context.getString(R.string.notification_failed_multiple,Integer.toString(totalFailedCount));
    title=context.getString(R.string.notification_failed_multiple_title);
    failedIntent=new Intent(context,ConversationList.class);
  }
 else {
    title=isDownload ? context.getString(R.string.message_download_failed_title) : context.getString(R.string.message_send_failed_title);
    description=context.getString(R.string.message_failed_body);
    threadId=(msgThreadId[0] != 0 ? msgThreadId[0] : 0);
    failedIntent=new Intent(context,ComposeMessageActivity.class);
    failedIntent.putExtra(""String_Node_Str"",threadId);
    failedIntent.putExtra(""String_Node_Str"",true);
  }
  failedIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,failedIntent,0);
  notification.icon=R.drawable.stat_notify_sms_failed;
  notification.tickerText=title;
  notification.setLatestEventInfo(context,title,description,pendingIntent);
  if (noisy) {
    boolean vibrate=sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_VIBRATE,true);
    if (vibrate) {
      notification.defaults|=Notification.DEFAULT_VIBRATE;
    }
    String ringtoneStr=sp.getString(MessagingPreferenceActivity.NOTIFICATION_RINGTONE,null);
    notification.sound=TextUtils.isEmpty(ringtoneStr) ? null : Uri.parse(ringtoneStr);
  }
  if (isDownload) {
    nm.notify(DOWNLOAD_FAILED_NOTIFICATION_ID,notification);
  }
 else {
    nm.notify(MESSAGE_FAILED_NOTIFICATION_ID,notification);
  }
}","private static void notifyFailed(Context context,boolean isDownload,long threadId,boolean noisy){
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(context);
  boolean enabled=sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_ENABLED,true);
  if (!enabled) {
    return;
  }
  NotificationManager nm=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  long[] msgThreadId={0};
  int totalFailedCount=getUndeliveredMessageCount(context,msgThreadId);
  Intent failedIntent;
  Notification notification=new Notification();
  String title;
  String description;
  if (totalFailedCount > 1) {
    description=context.getString(R.string.notification_failed_multiple,Integer.toString(totalFailedCount));
    title=context.getString(R.string.notification_failed_multiple_title);
    failedIntent=new Intent(context,ConversationList.class);
  }
 else {
    title=isDownload ? context.getString(R.string.message_download_failed_title) : context.getString(R.string.message_send_failed_title);
    description=context.getString(R.string.message_failed_body);
    threadId=(msgThreadId[0] != 0 ? msgThreadId[0] : 0);
    failedIntent=new Intent(context,ComposeMessageActivity.class);
    failedIntent.putExtra(""String_Node_Str"",threadId);
    failedIntent.putExtra(""String_Node_Str"",true);
  }
  failedIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,failedIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  notification.icon=R.drawable.stat_notify_sms_failed;
  notification.tickerText=title;
  notification.setLatestEventInfo(context,title,description,pendingIntent);
  if (noisy) {
    boolean vibrate=sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_VIBRATE,true);
    if (vibrate) {
      notification.defaults|=Notification.DEFAULT_VIBRATE;
    }
    String ringtoneStr=sp.getString(MessagingPreferenceActivity.NOTIFICATION_RINGTONE,null);
    notification.sound=TextUtils.isEmpty(ringtoneStr) ? null : Uri.parse(ringtoneStr);
  }
  if (isDownload) {
    nm.notify(DOWNLOAD_FAILED_NOTIFICATION_ID,notification);
  }
 else {
    nm.notify(MESSAGE_FAILED_NOTIFICATION_ID,notification);
  }
}",0.9923215898825656
44658,"public static String getPKGNameFromAddr(Context cxt,String localIP,int localPort,String remoteIP,int remotePort){
  if (AppNameQueryEngine.isValidQuery(remoteIP,remotePort,localPort) == false)   return null;
  String knownService=AppNameQueryEngine.queryServiceByPort(remotePort);
  if (knownService != null)   return knownService;
  int uid=-1;
  String networkAddr=toString(remoteIP,remotePort,localPort);
  if (connectionCache.contains(networkAddr)) {
    uid=connectionCache.get(networkAddr).uid;
  }
 else {
    debugInfo=""String_Node_Str"";
    for (int i=0; i < 3; i++) {
      uid=getConnectionUid(localIP,localPort,remoteIP,remotePort);
      Log.d(TAG,""String_Node_Str"" + uid);
      if (uid >= 0) {
        break;
      }
 else {
        try {
          Thread.sleep(5);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        Log.d(TAG,""String_Node_Str"" + i + ""String_Node_Str""+ networkAddr+ ""String_Node_Str"");
        Log.d(TAG,debugInfo);
        Log.d(TAG,""String_Node_Str"");
      }
    }
    if (uid < 0)     return null;
    connectionCache.put(networkAddr,new ConnectionCacheItem(uid));
  }
  if (monitorThread == null || monitorThread.isAlive() == false) {
    monitorThread=new Thread(new CacheMonitor());
    monitorThread.start();
  }
  if (uid2PkgName.containsKey(uid) == false) {
    refreshCache(cxt,uid);
  }
  return uid2PkgName.get(uid);
}","public static String getPKGNameFromAddr(Context cxt,String localIP,int localPort,String remoteIP,int remotePort){
  if (AppNameQueryEngine.isValidQuery(remoteIP,remotePort,localPort) == false)   return null;
  String knownService=AppNameQueryEngine.queryServiceByPort(remotePort);
  if (knownService != null)   return knownService;
  if (localPort == skypeInfo.listenPort)   return skypeInfo.pkgName;
  int uid=-1;
  String networkAddr=toString(remoteIP,remotePort,localPort);
  if (connectionCache.contains(networkAddr)) {
    uid=connectionCache.get(networkAddr).uid;
  }
 else {
    debugInfo=""String_Node_Str"";
    uid=getConnectionUid(localIP,localPort,remoteIP,remotePort);
  }
  if (uid < 0)   return null;
  connectionCache.put(networkAddr,new ConnectionCacheItem(uid));
  if (monitorThread == null || monitorThread.isAlive() == false) {
    monitorThread=new Thread(new CacheMonitor());
    monitorThread.start();
  }
  if (uid2PkgName.containsKey(uid) == false) {
    refreshCache(cxt,uid);
  }
  return uid2PkgName.get(uid);
}",0.6628571428571428
44659,"public static int getUidFromFile(String localAddr,String remoteAddr,String file){
  ArrayList<String> lines=Utility.readLinesFromFile(file);
  int uid=-1;
  debugInfo+=""String_Node_Str"" + localAddr + ""String_Node_Str""+ remoteAddr+ ""String_Node_Str""+ file+ ""String_Node_Str"";
  for (  String line : lines) {
    debugInfo+=line + ""String_Node_Str"";
    try {
      String[] items=line.split(""String_Node_Str"");
      if (items[1].equalsIgnoreCase(localAddr) && items[2].equalsIgnoreCase(remoteAddr)) {
        debugInfo+=""String_Node_Str"" + items[7];
        uid=Integer.parseInt(items[7]);
        debugInfo+=""String_Node_Str"" + uid + ""String_Node_Str"";
        break;
      }
    }
 catch (    Exception e) {
      Log.d(TAG,""String_Node_Str"" + e.getMessage());
    }
  }
  return uid;
}","public static int getUidFromFile(String localAddr,String remoteAddr,String file){
  ArrayList<String> lines=Utility.readLinesFromFile(file);
  int uid=-1;
  for (  String line : lines) {
    try {
      String[] items=line.split(""String_Node_Str"");
      if (items[1].equalsIgnoreCase(localAddr) && items[2].equalsIgnoreCase(remoteAddr)) {
        uid=Integer.parseInt(items[7]);
        break;
      }
    }
 catch (    Exception e) {
      Log.d(TAG,""String_Node_Str"" + e.getMessage());
    }
  }
  return uid;
}",0.7588325652841782
44660,"public static void refreshCache(Context cxt,int uid){
  if (SystemService.id2Service.containsKey(uid)) {
    uid2PkgName.put(uid,SystemService.id2Service.get(uid));
  }
 else {
    PackageManager pm=cxt.getPackageManager();
    List<ApplicationInfo> packages=pm.getInstalledApplications(PackageManager.GET_META_DATA);
    for (int i=0; i < packages.size(); i++) {
      ApplicationInfo appInfo=packages.get(i);
      if (!uid2PkgName.containsKey(appInfo.uid)) {
        uid2PkgName.put(appInfo.uid,appInfo.processName);
      }
    }
  }
  if (uid2PkgName.containsKey(uid) == false) {
    uid2PkgName.put(uid,""String_Node_Str"" + uid);
  }
}","public static void refreshCache(Context cxt,int uid){
  if (SystemService.id2Service.containsKey(uid)) {
    uid2PkgName.put(uid,SystemService.id2Service.get(uid));
  }
 else {
    PackageManager pm=cxt.getPackageManager();
    List<ApplicationInfo> packages=pm.getInstalledApplications(PackageManager.GET_META_DATA);
    for (int i=0; i < packages.size(); i++) {
      ApplicationInfo appInfo=packages.get(i);
      if (!uid2PkgName.containsKey(appInfo.uid)) {
        uid2PkgName.put(appInfo.uid,appInfo.processName);
      }
      if (appInfo.processName.contains(""String_Node_Str"")) {
        skypeInfo.dataDir=appInfo.dataDir;
        skypeInfo.pkgName=appInfo.processName;
        skypeInfo.uid=appInfo.uid;
        skypeInfo.getListenPort();
      }
    }
  }
  if (uid2PkgName.containsKey(uid) == false) {
    uid2PkgName.put(uid,""String_Node_Str"" + uid);
  }
}",0.8482438701126573
44661,"public static String getPKGNameFromAddr(Context cxt,String localIP,int localPort,String remoteIP,int remotePort){
  if (AppNameQueryEngine.isValidQuery(remoteIP,remotePort,localPort) == false)   return null;
  String knownService=AppNameQueryEngine.queryServiceByPort(remotePort);
  if (knownService != null)   return knownService;
  int uid=-1;
  if (connectionCache.contains(toString(remoteIP,remotePort,localPort))) {
    uid=connectionCache.get(toString(remoteIP,remotePort,localPort)).uid;
  }
 else {
    uid=getConnectionUid(localIP,localPort,remoteIP,remotePort);
    if (uid < 0)     return null;
    connectionCache.put(toString(remoteIP,remotePort,localPort),new ConnectionCacheItem(uid));
  }
  if (monitorThread == null || monitorThread.isAlive() == false) {
    monitorThread=new Thread(new CacheMonitor());
    monitorThread.start();
  }
  if (uid2PkgName.containsKey(uid) == false) {
    refreshCache(cxt,uid);
  }
  return uid2PkgName.get(uid);
}","public static String getPKGNameFromAddr(Context cxt,String localIP,int localPort,String remoteIP,int remotePort){
  if (AppNameQueryEngine.isValidQuery(remoteIP,remotePort,localPort) == false)   return null;
  String knownService=AppNameQueryEngine.queryServiceByPort(remotePort);
  if (knownService != null)   return knownService;
  int uid=-1;
  String networkAddr=toString(remoteIP,remotePort,localPort);
  if (connectionCache.contains(networkAddr)) {
    uid=connectionCache.get(networkAddr).uid;
  }
 else {
    debugInfo=""String_Node_Str"";
    for (int i=0; i < 3; i++) {
      uid=getConnectionUid(localIP,localPort,remoteIP,remotePort);
      Log.d(TAG,""String_Node_Str"" + uid);
      if (uid >= 0) {
        break;
      }
 else {
        try {
          Thread.sleep(5);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        Log.d(TAG,""String_Node_Str"" + i + ""String_Node_Str""+ networkAddr+ ""String_Node_Str"");
        Log.d(TAG,debugInfo);
        Log.d(TAG,""String_Node_Str"");
      }
    }
    if (uid < 0)     return null;
    connectionCache.put(networkAddr,new ConnectionCacheItem(uid));
  }
  if (monitorThread == null || monitorThread.isAlive() == false) {
    monitorThread=new Thread(new CacheMonitor());
    monitorThread.start();
  }
  if (uid2PkgName.containsKey(uid) == false) {
    refreshCache(cxt,uid);
  }
  return uid2PkgName.get(uid);
}",0.5875420875420876
44662,"/** 
 * get uid info of a connection by looking up proc/net/tcp (tcp6, udp, udp6)
 * @param localIP
 * @param localPort
 * @param remoteIP
 * @param remotePort
 * @return < 0 if not found
 */
public static int getConnectionUid(String localIP,int localPort,String remoteIP,int remotePort){
  String[] ipv4files={""String_Node_Str"",""String_Node_Str""};
  String[] ipv6files={""String_Node_Str"",""String_Node_Str""};
  String localAddr=toHexNetworkAddr(localIP,localPort);
  String remoteAddr=toHexNetworkAddr(remoteIP,remotePort);
  int uid=-1;
  for (  String file : ipv4files) {
    if ((uid=getUidFromFile(localAddr,remoteAddr,file)) > 0)     break;
  }
  if (uid < 0) {
    localAddr=""String_Node_Str"" + localAddr;
    if (remoteAddr.equals(""String_Node_Str""))     remoteAddr=""String_Node_Str"" + remoteAddr;
 else     remoteAddr=""String_Node_Str"" + remoteAddr;
    for (    String file : ipv6files) {
      if ((uid=getUidFromFile(localAddr,remoteAddr,file)) > 0)       break;
    }
  }
  if (uid < 0) {
    ConnectionCacheItem item=connectionCache.get(toString(remoteIP,remotePort,localPort));
    if (item != null)     uid=item.uid;
  }
  return uid;
}","/** 
 * get uid info of a connection by looking up proc/net/tcp (tcp6, udp, udp6)
 * @param localIP
 * @param localPort
 * @param remoteIP
 * @param remotePort
 * @return < 0 if not found
 */
public static int getConnectionUid(String localIP,int localPort,String remoteIP,int remotePort){
  String[] ipv4files={""String_Node_Str"",""String_Node_Str""};
  String[] ipv6files={""String_Node_Str"",""String_Node_Str""};
  String localAddr=toHexNetworkAddr(localIP,localPort);
  String remoteAddr=toHexNetworkAddr(remoteIP,remotePort);
  int uid=-1;
  for (  String file : ipv4files) {
    if ((uid=getUidFromFile(localAddr,remoteAddr,file)) >= 0)     break;
  }
  if (uid < 0) {
    localAddr=""String_Node_Str"" + localAddr;
    if (remoteAddr.equals(""String_Node_Str""))     remoteAddr=""String_Node_Str"" + remoteAddr;
 else     remoteAddr=""String_Node_Str"" + remoteAddr;
    for (    String file : ipv6files) {
      if ((uid=getUidFromFile(localAddr,remoteAddr,file)) >= 0)       break;
    }
  }
  if (uid < 0) {
    ConnectionCacheItem item=connectionCache.get(toString(remoteIP,remotePort,localPort));
    if (item != null)     uid=item.uid;
  }
  return uid;
}",0.9991319444444444
44663,"public static int getUidFromFile(String localAddr,String remoteAddr,String file){
  ArrayList<String> lines=Utility.readLinesFromFile(file);
  int uid=-1;
  for (  String line : lines) {
    try {
      String[] items=line.split(""String_Node_Str"");
      if (items[1].equalsIgnoreCase(localAddr) && items[2].equalsIgnoreCase(remoteAddr)) {
        uid=Integer.parseInt(items[7]);
      }
    }
 catch (    Exception e) {
      Log.d(TAG,""String_Node_Str"" + e.getMessage());
    }
  }
  return uid;
}","public static int getUidFromFile(String localAddr,String remoteAddr,String file){
  ArrayList<String> lines=Utility.readLinesFromFile(file);
  int uid=-1;
  debugInfo+=""String_Node_Str"" + localAddr + ""String_Node_Str""+ remoteAddr+ ""String_Node_Str""+ file+ ""String_Node_Str"";
  for (  String line : lines) {
    debugInfo+=line + ""String_Node_Str"";
    try {
      String[] items=line.split(""String_Node_Str"");
      if (items[1].equalsIgnoreCase(localAddr) && items[2].equalsIgnoreCase(remoteAddr)) {
        debugInfo+=""String_Node_Str"" + items[7];
        uid=Integer.parseInt(items[7]);
        debugInfo+=""String_Node_Str"" + uid + ""String_Node_Str"";
        break;
      }
    }
 catch (    Exception e) {
      Log.d(TAG,""String_Node_Str"" + e.getMessage());
    }
  }
  return uid;
}",0.7428127428127428
44664,"private void sendOFPacket(Socket socket,byte[] data){
  try {
    OutputStream out=socket.getOutputStream();
    out.write(data);
    out.flush();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","private void sendOFPacket(Socket socket,byte[] data){
  try {
    OutputStream out=socket.getOutputStream();
    out.write(data);
    out.flush();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  SocketException e) {
    ;
  }
}",0.9078947368421052
44665,"private void sendOFPacket(Socket socket,byte[] data){
  try {
    OutputStream out=socket.getOutputStream();
    out.write(data);
    out.flush();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  SocketException e) {
    ;
  }
}","private void sendOFPacket(Socket socket,byte[] data){
  try {
    OutputStream out=socket.getOutputStream();
    out.write(data);
    out.flush();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.912280701754386
44666,"@Override public void setMac(String mac){
  String[] command={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + getName() + ""String_Node_Str""+ mac};
  try {
    Runtime.getRuntime().exec(command).waitFor();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  super.setMac(mac);
}","@Override public void setMac(String mac){
  String[] if_down_cmd={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + getName() + ""String_Node_Str""};
  String[] set_mac_cmd={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + getName() + ""String_Node_Str""+ mac};
  String[] if_up_cmd={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + getName() + ""String_Node_Str""};
  try {
    Runtime.getRuntime().exec(if_down_cmd).waitFor();
    Runtime.getRuntime().exec(set_mac_cmd).waitFor();
    Runtime.getRuntime().exec(if_up_cmd).waitFor();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  super.setMac(mac);
}",0.6095444685466378
44667,"public void doVethInit(){
  NativeCallWrapper.runCommand(""String_Node_Str"");
  String cmd=""String_Node_Str"" + HostNetworkState.vethIP + ""String_Node_Str""+ HostNetworkState.vethIPMask+ ""String_Node_Str"";
  NativeCallWrapper.runCommand(cmd);
}","public void doVethInit(){
  NativeCallWrapper.runCommand(""String_Node_Str"");
  String cmd=""String_Node_Str"" + HostNetworkConfig.vethIP + ""String_Node_Str""+ HostNetworkConfig.vethIPMask+ ""String_Node_Str"";
  NativeCallWrapper.runCommand(cmd);
}",0.9545454545454546
44668,"public void doMobileInit(){
  HostNetworkState.mobileGWIP=System.getProperty(""String_Node_Str"");
}","public void doMobileInit(){
  HostNetworkConfig.mobileGWIP=System.getProperty(""String_Node_Str"");
}",0.9441624365482234
44669,"public void doWiFiInit(){
  WifiManager wifiMan=(WifiManager)this.getSystemService(Context.WIFI_SERVICE);
  if (wifi_included && !wifiMan.isWifiEnabled()) {
    wifiMan.setWifiEnabled(true);
  }
  WifiInfo wifiInf=wifiMan.getConnectionInfo();
  HostNetworkState.wifiMACaddr=wifiInf.getMacAddress();
  int wifiIP=wifiInf.getIpAddress();
  HostNetworkState.wifiIPaddr=IPv4.fromIPv4Address(wifiIP);
}","public void doWiFiInit(){
  WifiManager wifiMan=(WifiManager)this.getSystemService(Context.WIFI_SERVICE);
  if (wifi_included && !wifiMan.isWifiEnabled()) {
    wifiMan.setWifiEnabled(true);
  }
  WifiInfo wifiInf=wifiMan.getConnectionInfo();
  HostNetworkConfig.wifiMACaddr=wifiInf.getMacAddress();
  int wifiIP=wifiInf.getIpAddress();
  HostNetworkConfig.wifiIPaddr=IPv4.fromIPv4Address(wifiIP);
}",0.9723618090452262
44670,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((clazz == null) ? 0 : clazz.hashCode());
  result=prime * result + ((data == null) ? 0 : data.hashCode());
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((data == null) ? 0 : data.hashCode());
  return result;
}",0.8201058201058201
44671,"@Override public Set<T> intersection(Set<T> set){
  Set<T> intersection=Sets.empty();
  for (  T value : set.sequence()) {
    if (Contains(value)) {
      intersection=intersection.add(value);
    }
  }
  return intersection;
}","@Override public Set<T> intersection(Set<T> set){
  Set<T> intersection=Sets.empty();
  for (  T value : set.sequence()) {
    if (contains(value)) {
      intersection=intersection.add(value);
    }
  }
  return intersection;
}",0.9956140350877192
44672,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  @SuppressWarnings(""String_Node_Str"") ImmutableHashSet<T> other=(ImmutableHashSet<T>)obj;
  if (isHashCodeCached() && other.isHashCodeCached() && hashCode() != other.hashCode()) {
    return false;
  }
  int size=0;
  for (  T value : other.sequence()) {
    if (!Contains(value)) {
      return false;
    }
    size++;
  }
  return size() == size;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  @SuppressWarnings(""String_Node_Str"") ImmutableHashSet<T> other=(ImmutableHashSet<T>)obj;
  if (isHashCodeCached() && other.isHashCodeCached() && hashCode() != other.hashCode()) {
    return false;
  }
  int size=0;
  for (  T value : other.sequence()) {
    if (!contains(value)) {
      return false;
    }
    size++;
  }
  return size() == size;
}",0.998069498069498
44673,"protected BitmappedNode<T> bitmap(int shift,int hash,T value){
  int shift1=(getHash() >>> shift) & 0x1f;
  int shift2=(hash >>> shift) & 0x1f;
  int tableSize=Math.max(shift1,shift2) + 1;
  List<Node<T>> table=ListUtilites.CreateListWithNullValues(tableSize);
  table.set(shift1,this);
  int bits1=1 << shift1;
  int bits2=1 << shift2;
  if (shift1 == shift2) {
    table.set(shift2,table.get(shift2).add(shift + 5,hash,value));
  }
 else {
    table.set(shift2,new LeafNode<T>(hash,value));
  }
  return new BitmappedNode<T>(shift,bits1 | bits2,table);
}","protected BitmappedNode<T> bitmap(int shift,int hash,T value){
  int shift1=(getHash() >>> shift) & 0x1f;
  int shift2=(hash >>> shift) & 0x1f;
  int tableSize=Math.max(shift1,shift2) + 1;
  List<Node<T>> table=ListUtilites.createListWithNullValues(tableSize);
  table.set(shift1,this);
  int bits1=1 << shift1;
  int bits2=1 << shift2;
  if (shift1 == shift2) {
    table.set(shift2,table.get(shift2).add(shift + 5,hash,value));
  }
 else {
    table.set(shift2,new LeafNode<T>(hash,value));
  }
  return new BitmappedNode<T>(shift,bits1 | bits2,table);
}",0.9982014388489208
44674,"private void assertOutsideInterval(Interval<Integer> interval,int value){
  String message=String.format(""String_Node_Str"",value,interval);
  assertFalse(message,interval.Contains(value));
}","private void assertOutsideInterval(Interval<Integer> interval,int value){
  String message=String.format(""String_Node_Str"",value,interval);
  assertFalse(message,interval.contains(value));
}",0.9947368421052633
44675,"private <T extends Comparable<T>>void assertContains(Interval<T> interval,T value){
  String message=String.format(""String_Node_Str"",value,interval);
  assertTrue(message,interval.Contains(value));
}","private <T extends Comparable<T>>void assertContains(Interval<T> interval,T value){
  String message=String.format(""String_Node_Str"",value,interval);
  assertTrue(message,interval.contains(value));
}",0.9949748743718592
44676,"@Test public void allOdd() throws Exception {
  assertTrue(oddSequence.toString(),oddSequence.All(Predicates.oddPredicate));
}","@Test public void allOdd() throws Exception {
  assertTrue(oddSequence.toString(),oddSequence.all(Predicates.oddPredicate));
}",0.992063492063492
44677,"@Test public void allReturnsTrueForEmptySequence() throws Exception {
  Sequence<Integer> empty=Sequences.<Integer>empty();
  assertTrue(""String_Node_Str"",empty.All(Predicates.oddPredicate));
}","@Test public void allReturnsTrueForEmptySequence() throws Exception {
  Sequence<Integer> empty=Sequences.<Integer>empty();
  assertTrue(""String_Node_Str"",empty.all(Predicates.oddPredicate));
}",0.9948186528497408
44678,"@Test public void notAllOdd() throws Exception {
  assertFalse(mixedSequence.toString(),mixedSequence.All(Predicates.oddPredicate));
}","@Test public void notAllOdd() throws Exception {
  assertFalse(mixedSequence.toString(),mixedSequence.all(Predicates.oddPredicate));
}",0.9925373134328358
44679,"@Test public void containsNonExistingElementFromCollisionNode() throws Exception {
  Set<TestElement> set=Sets.empty();
  set=set.add(new TestElement(1));
  set=set.add(new TestElement(2));
  assertFalse(""String_Node_Str"",set.Contains(new TestElement(3)));
}","@Test public void containsNonExistingElementFromCollisionNode() throws Exception {
  Set<TestElement> set=Sets.empty();
  set=set.add(new TestElement(1));
  set=set.add(new TestElement(2));
  assertFalse(""String_Node_Str"",set.contains(new TestElement(3)));
}",0.996124031007752
44680,"@Test public void addedStringsCanBeFound() throws Exception {
  Set<String> set=Sets.empty();
  int numberOfElements=10000;
  for (int i=0; i < numberOfElements; i++) {
    set=set.add(Integer.toString(i));
  }
  for (int i=0; i < numberOfElements; i++) {
    assertTrue(String.format(""String_Node_Str"",i),set.Contains(Integer.toString(i)));
  }
}","@Test public void addedStringsCanBeFound() throws Exception {
  Set<String> set=Sets.empty();
  int numberOfElements=10000;
  for (int i=0; i < numberOfElements; i++) {
    set=set.add(Integer.toString(i));
  }
  for (int i=0; i < numberOfElements; i++) {
    assertTrue(String.format(""String_Node_Str"",i),set.contains(Integer.toString(i)));
  }
}",0.9971181556195964
44681,"@Test public void containsNonExistingElementFromLeafNode() throws Exception {
  Set<Integer> set=Sets.empty();
  set=set.add(1);
  assertFalse(""String_Node_Str"",set.Contains(2));
}","@Test public void containsNonExistingElementFromLeafNode() throws Exception {
  Set<Integer> set=Sets.empty();
  set=set.add(1);
  assertFalse(""String_Node_Str"",set.contains(2));
}",0.9944444444444444
44682,"@Test public void addedIntegersCanBeFound() throws Exception {
  Set<Integer> set=Sets.empty();
  int numberOfElements=10000;
  for (int i=0; i < numberOfElements; i++) {
    set=set.add(i);
  }
  for (int i=0; i < numberOfElements; i++) {
    assertTrue(String.format(""String_Node_Str"",i),set.Contains(i));
  }
}","@Test public void addedIntegersCanBeFound() throws Exception {
  Set<Integer> set=Sets.empty();
  int numberOfElements=10000;
  for (int i=0; i < numberOfElements; i++) {
    set=set.add(i);
  }
  for (int i=0; i < numberOfElements; i++) {
    assertTrue(String.format(""String_Node_Str"",i),set.contains(i));
  }
}",0.9968051118210862
44683,"@Test public void addingTwoElementsUnequalButWithSameHash() throws Exception {
  Set<TestElement> set=Sets.empty();
  set=set.add(new TestElement(0)).add(new TestElement(1)).add(new TestElement(1)).add(new TestElement(100)).add(new TestElement(101));
  assertEquals(""String_Node_Str"",4,set.size());
  assertTrue(""String_Node_Str"",set.Contains(new TestElement(0)));
  assertTrue(""String_Node_Str"",set.Contains(new TestElement(1)));
  assertTrue(""String_Node_Str"",set.Contains(new TestElement(100)));
  assertTrue(""String_Node_Str"",set.Contains(new TestElement(101)));
}","@Test public void addingTwoElementsUnequalButWithSameHash() throws Exception {
  Set<TestElement> set=Sets.empty();
  set=set.add(new TestElement(0)).add(new TestElement(1)).add(new TestElement(1)).add(new TestElement(100)).add(new TestElement(101));
  assertEquals(""String_Node_Str"",4,set.size());
  assertTrue(""String_Node_Str"",set.contains(new TestElement(0)));
  assertTrue(""String_Node_Str"",set.contains(new TestElement(1)));
  assertTrue(""String_Node_Str"",set.contains(new TestElement(100)));
  assertTrue(""String_Node_Str"",set.contains(new TestElement(101)));
}",0.9929577464788732
44684,"@Test public void containsOnNonExistingElement() throws Exception {
  Set<Integer> set=Sets.empty();
  set=set.add(1).add(2).add(4);
  assertFalse(""String_Node_Str"",set.Contains(3));
}","@Test public void containsOnNonExistingElement() throws Exception {
  Set<Integer> set=Sets.empty();
  set=set.add(1).add(2).add(4);
  assertFalse(""String_Node_Str"",set.contains(3));
}",0.9945652173913044
44685,"public Sem(int count){
  this.Count=count;
}","public Sem(int count){
  this.Count=count;
  s=new Semaphore(Count);
}",0.7719298245614035
44686,"public String getContentType(){
  return contentType;
}","public Optional<String> getContentType(){
  return contentType;
}",0.9166666666666666
44687,"public MetaInfo setContentType(String contentType){
  this.contentType=contentType;
  return this;
}","public MetaInfo setContentType(String contentType){
  return setContentType(Optional.of(contentType));
}",0.696078431372549
44688,"static Resource of(int status,String content,String contentType){
  return new Resource(status,content,contentType);
}","static Resource of(int status,byte[] content,Optional<String> contentType){
  return new Resource(status,content,contentType);
}",0.91869918699187
44689,"Resource(int status,String content,String contentType){
  this.status=status;
  this.content=content;
  this.contentType=contentType;
}","Resource(int status,byte[] content,Optional<String> contentType){
  this.status=status;
  this.content=content;
  this.contentType=contentType;
}",0.9285714285714286
44690,"public String contentType(){
  return contentType;
}","public Optional<String> contentType(){
  return contentType;
}",0.912280701754386
44691,"public String content(){
  return content;
}","public byte[] content(){
  return content;
}",0.8863636363636364
44692,"@Override public void handle(Interest request,Queue response) throws IOException {
  logger.info(""String_Node_Str"" + request.getName().getName());
  try {
    Optional<Resource> content=WorldWideWeb.get(request.getName().getName());
    if (content.isPresent()) {
      logger.info(""String_Node_Str"");
      Packets.Data data=new Packets.Data();
      data.getName().setName(request.getName().getName());
      data.getMetadata().setFreshnessPeriod(2);
      data.getMetadata().setContentType(content.get().contentType());
      data.setContent(content.get().content().getBytes());
      response.push(data);
      logger.info(""String_Node_Str"");
    }
  }
 catch (  SocketException e) {
    logger.error(""String_Node_Str"",e);
    throw new RuntimeException(""String_Node_Str"");
  }
catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
}","@Override public void handle(Interest request,Queue response) throws IOException {
  logger.info(""String_Node_Str"" + request.getName().getName());
  try {
    Optional<Resource> content=WorldWideWeb.get(request.getName().getName());
    if (content.isPresent()) {
      logger.info(""String_Node_Str"");
      Packets.Data data=new Packets.Data();
      data.getName().setName(request.getName().getName());
      data.getMetadata().setFreshnessPeriod(2);
      data.getMetadata().setContentType(content.get().contentType());
      data.setContent(content.get().content());
      response.push(data);
      logger.info(""String_Node_Str"");
    }
  }
 catch (  SocketException e) {
    logger.error(""String_Node_Str"",e);
    throw new RuntimeException(""String_Node_Str"");
  }
catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
}",0.993502658003544
44693,"@Override public void service(ServletRequest req,ServletResponse res) throws ServletException, IOException {
  Packets.Interest interest=new Packets.Interest();
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)res;
  String url=assemble(request.getRequestURL().toString());
  if (sameHost(url,host,port)) {
    logger.info(""String_Node_Str"" + url);
    response.sendError(400);
    return;
  }
  interest.getName().setName(url);
  try {
    logger.info(""String_Node_Str"" + url + ""String_Node_Str""+ req.getRemoteAddr());
    Optional<Data> result=client.send(InetSocketAddresses.parse(entrypoint),interest);
    if (result.isPresent()) {
      logger.info(""String_Node_Str"");
      response.getOutputStream().write(result.get().getContent());
      response.setContentType(result.get().getMetadata().getContentType());
    }
 else {
      logger.info(""String_Node_Str"");
      response.sendError(404);
    }
  }
 catch (  IllegalArgumentException|IllegalAccessException|InstantiationException e) {
    logger.error(e);
    response.sendError(500);
  }
 finally {
    response.getOutputStream().close();
  }
}","@Override public void service(ServletRequest req,ServletResponse res) throws ServletException, IOException {
  Packets.Interest interest=new Packets.Interest();
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)res;
  String url=assemble(request.getRequestURL().toString());
  if (sameHost(url,host,port)) {
    logger.info(""String_Node_Str"" + url);
    response.sendError(400);
    return;
  }
  interest.getName().setName(url);
  try {
    logger.info(""String_Node_Str"" + url + ""String_Node_Str""+ req.getRemoteAddr());
    Optional<Data> result=client.send(InetSocketAddresses.parse(entrypoint),interest);
    if (result.isPresent()) {
      logger.info(""String_Node_Str"");
      response.getOutputStream().write(result.get().getContent());
      if (result.get().getMetadata().getContentType().isPresent()) {
        response.setContentType(result.get().getMetadata().getContentType().get());
      }
    }
 else {
      logger.info(""String_Node_Str"");
      response.sendError(404);
    }
  }
 catch (  IllegalArgumentException|IllegalAccessException|InstantiationException e) {
    logger.error(e);
    response.sendError(500);
  }
 finally {
    response.getOutputStream().close();
  }
}",0.930791545793618
44694,"public void testRunnningAll() throws Exception {
  Server www=WorldWideWebServer.server(WorldWideWebServer.defaultServlets());
  www.bind(InetSocketAddresses.parse(""String_Node_Str""));
  Gateway.main(new String[]{""String_Node_Str"",""String_Node_Str""});
  Router.main(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  Proxy.main(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  Optional<Resource> content=WorldWideWeb.get(InetSocketAddresses.parse(""String_Node_Str""),""String_Node_Str"");
  assertTrue(content.isPresent());
  assertEquals(""String_Node_Str"",content.get().content());
}","public void testRunnningAll() throws Exception {
  Server www=WorldWideWebServer.server(WorldWideWebServer.defaultServlets());
  www.bind(InetSocketAddresses.parse(""String_Node_Str""));
  Gateway.main(new String[]{""String_Node_Str"",""String_Node_Str""});
  Router.main(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  Proxy.main(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  Optional<Resource> content=WorldWideWeb.get(InetSocketAddresses.parse(""String_Node_Str""),""String_Node_Str"");
  assertTrue(content.isPresent());
  assertEquals(""String_Node_Str"",new String(content.get().content()));
}",0.9556259904912836
44695,"public void testsThatTheContentTypeIsPropagatedThroughTheNetwork() throws Exception {
  Optional<Resource> content=WorldWideWeb.get(InetSocketAddresses.parse(""String_Node_Str""),""String_Node_Str"");
  assertTrue(content.isPresent());
  assertEquals(""String_Node_Str"",content.get().contentType());
}","public void testsThatTheContentTypeIsPropagatedThroughTheNetwork() throws Exception {
  Optional<Resource> content=WorldWideWeb.get(InetSocketAddresses.parse(""String_Node_Str""),""String_Node_Str"");
  assertTrue(content.isPresent());
  assertEquals(""String_Node_Str"",content.get().contentType().get());
}",0.9899665551839464
44696,"public void test200_direclty() throws IOException {
  Optional<Resource> result=WorldWideWeb.get(""String_Node_Str"");
  assertTrue(result.isPresent());
  assertEquals(""String_Node_Str"",result.get().content());
}","public void test200_direclty() throws IOException {
  Optional<Resource> result=WorldWideWeb.get(""String_Node_Str"");
  assertTrue(result.isPresent());
  assertEquals(""String_Node_Str"",new String(result.get().content()));
}",0.875
44697,"public void test200_throughNetwork() throws IOException {
  Optional<Resource> result=WorldWideWeb.get(new InetSocketAddress(""String_Node_Str"",8080),""String_Node_Str"");
  assertTrue(result.isPresent());
  assertEquals(""String_Node_Str"",result.get().content());
}","public void test200_throughNetwork() throws IOException {
  Optional<Resource> result=WorldWideWeb.get(new InetSocketAddress(""String_Node_Str"",8080),""String_Node_Str"");
  assertTrue(result.isPresent());
  assertEquals(""String_Node_Str"",new String(result.get().content()));
}",0.8992537313432836
44698,"public void testRunnningAll() throws Exception {
  for (int i=0; i < 10; i++) {
    Optional<Resource> content=WorldWideWeb.get(InetSocketAddresses.parse(""String_Node_Str""),""String_Node_Str"");
    assertTrue(content.isPresent());
    assertEquals(1000 * 1000,content.get().content().length());
  }
}","public void testRunnningAll() throws Exception {
  for (int i=0; i < 10; i++) {
    Optional<Resource> content=WorldWideWeb.get(InetSocketAddresses.parse(""String_Node_Str""),""String_Node_Str"");
    assertTrue(content.isPresent());
    assertEquals(1000 * 1000,content.get().content().length);
  }
}",0.9966442953020134
44699,"public void testRunnningAll() throws Exception {
  List<String> urls=ImmutableList.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  for (  String url : urls) {
    WorldWideWeb.setTimeout(TimeUnit.MINUTES.toMillis(5));
    Optional<Resource> content=WorldWideWeb.get(InetSocketAddresses.parse(""String_Node_Str""),url);
    assertTrue(content.isPresent());
  }
}","public void testRunnningAll() throws Exception {
  List<String> urls=ImmutableList.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  for (  String url : urls) {
    WorldWideWeb.setTimeout(TimeUnit.MINUTES.toMillis(5));
    Optional<Resource> content=WorldWideWeb.get(InetSocketAddresses.parse(""String_Node_Str""),url);
    assertTrue(content.isPresent());
  }
}",0.9793103448275862
44700,"@SuppressWarnings(""String_Node_Str"") public <T>T get(String name){
  Optional<String> value=Optional.absent();
  Object defaultValue=defaultValues.get(name);
  if (line.hasOption(name)) {
    value=Optional.of(line.getOptionValue(name));
  }
  if (defaultValue instanceof Integer) {
    Integer result=value.isPresent() ? Integer.parseInt(value.get()) : (Integer)defaultValue;
    return (T)result;
  }
 else   if (defaultValue instanceof String) {
    String result=value.isPresent() ? value.get() : (String)defaultValue;
    return (T)result;
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"" + name);
  }
}","@Override public String get(){
  Preconditions.checkArgument(argv.length == 2,""String_Node_Str"" + arg);
  return argv[1];
}",0.1984126984126984
44701,"@Inject public Client(InetSocketAddress host){
  Packets.register();
  this.host=host;
}","@Inject public Client(@Flag(""String_Node_Str"") String entrypoint){
  Packets.register();
  this.host=InetSocketAddresses.parse(entrypoint);
}",0.6200873362445415
44702,"public static void main(String[] args) throws Exception {
  logger.info(""String_Node_Str"");
  Set<Flag<?>> options=ImmutableSet.of(Flag.of(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str""),Flag.of(""String_Node_Str"",""String_Node_Str"",true,8082),Flag.of(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str""));
  Flags flags=Flags.parse(options,args);
  final String host=flags.get(""String_Node_Str"");
  final int port=flags.get(""String_Node_Str"");
  final String forwarding=flags.get(""String_Node_Str"");
  Router router=Guice.createInjector(new Module(InetSocketAddresses.parse(forwarding))).getInstance(Router.class);
  router.bind(new InetSocketAddress(host,port));
}","public static void main(String[] args) throws Exception {
  logger.info(""String_Node_Str"");
  Router router=Guice.createInjector(new Module(),Flags.asModule(args)).getInstance(Router.class);
  router.bind(new InetSocketAddress(router.host,router.port));
}",0.2302771855010661
44703,"@Override protected void configure(){
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build();
  bind(ExecutorService.class).toInstance(Executors.newFixedThreadPool(1,factory));
  bind(InetSocketAddress.class).toInstance(forwardingRouter);
}","@Override protected void configure(){
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build();
  bind(ExecutorService.class).toInstance(Executors.newFixedThreadPool(1,factory));
}",0.8739837398373984
44704,"public static void main(String[] args) throws Exception {
  logger.info(""String_Node_Str"");
  Set<Flag<?>> options=ImmutableSet.of(Flag.of(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str""),Flag.of(""String_Node_Str"",""String_Node_Str"",true,8081));
  Flags flags=Flags.parse(options,args);
  final String host=flags.get(""String_Node_Str"");
  final int port=flags.get(""String_Node_Str"");
  Gateway router=Guice.createInjector(new Module()).getInstance(Gateway.class);
  router.bind(new InetSocketAddress(host,port));
}","public static void main(String[] args) throws Exception {
  logger.info(""String_Node_Str"");
  Gateway gateway=Guice.createInjector(new Module(),Flags.asModule(args)).getInstance(Gateway.class);
  gateway.bind(new InetSocketAddress(gateway.host,gateway.port));
}",0.2751592356687898
44705,"@Override public void service(ServletRequest req,ServletResponse res) throws ServletException, IOException {
  Packets.Interest interest=new Packets.Interest();
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)res;
  String url=assemble(request.getRequestURL().toString());
  interest.getName().setName(url);
  try {
    logger.info(""String_Node_Str"" + url);
    Optional<Data> result=client.send(interest);
    if (result.isPresent()) {
      logger.info(""String_Node_Str"");
      response.getOutputStream().write(result.get().getContent());
    }
 else {
      logger.info(""String_Node_Str"");
      response.sendError(404);
    }
  }
 catch (  IllegalArgumentException|IllegalAccessException|InstantiationException e) {
    logger.error(e);
    response.sendError(500);
  }
}","@Override public void service(ServletRequest req,ServletResponse res) throws ServletException, IOException {
  Packets.Interest interest=new Packets.Interest();
  HttpServletRequest request=(HttpServletRequest)req;
  HttpServletResponse response=(HttpServletResponse)res;
  String url=assemble(request.getRequestURL().toString());
  interest.getName().setName(url);
  try {
    logger.info(""String_Node_Str"" + url + ""String_Node_Str""+ req.getRemoteAddr());
    Optional<Data> result=client.send(interest);
    if (result.isPresent()) {
      logger.info(""String_Node_Str"");
      response.getOutputStream().write(result.get().getContent());
    }
 else {
      logger.info(""String_Node_Str"");
      response.sendError(404);
    }
  }
 catch (  IllegalArgumentException|IllegalAccessException|InstantiationException e) {
    logger.error(e);
    response.sendError(500);
  }
 finally {
    response.getOutputStream().close();
  }
}",0.9455782312925172
44706,"public static void main(String[] args) throws Exception {
  logger.info(""String_Node_Str"");
  Set<Flag<?>> options=ImmutableSet.of(Flag.of(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str""),Flag.of(""String_Node_Str"",""String_Node_Str"",true,8083),Flag.of(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str""));
  Flags flags=Flags.parse(options,args);
  final String host=flags.get(""String_Node_Str"");
  final int port=flags.get(""String_Node_Str"");
  final String entrypoint=flags.get(""String_Node_Str"");
  Proxy proxy=Guice.createInjector(new Module(InetSocketAddresses.parse(entrypoint))).getInstance(Proxy.class);
  proxy.bind(new InetSocketAddress(host,port));
}","public static void main(String[] args) throws Exception {
  logger.info(""String_Node_Str"");
  Proxy proxy=Guice.createInjector(new Module(),Flags.asModule(args)).getInstance(Proxy.class);
  proxy.bind(new InetSocketAddress(proxy.host,proxy.port));
}",0.2327586206896551
44707,"@Override protected void configure(){
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build();
  bind(ExecutorService.class).toInstance(Executors.newFixedThreadPool(1,factory));
}","@Override protected void configure(){
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build();
  bind(ExecutorService.class).toInstance(Executors.newFixedThreadPool(10,factory));
}",0.9976798143851509
44708,"@Override public void run(){
  while (running.get()) {
    try {
      Socket connection=socket.accept();
      logger.info(""String_Node_Str"");
      OutputStream stream=connection.getOutputStream();
      DataOutputStream out=new DataOutputStream(stream);
      Object request=Serializer.unserialize(connection.getInputStream());
      Handler<?> handler=handlers.get(request.getClass());
      if (handler == null) {
        throw new RuntimeException(""String_Node_Str"" + request.getClass());
      }
      handle(handler,request,out);
      stream.close();
      connection.close();
      logger.info(""String_Node_Str"");
    }
 catch (    IllegalArgumentException|IllegalAccessException|InstantiationException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    ConnectException e) {
      e.printStackTrace();
    }
catch (    SocketException e) {
      Preconditions.checkArgument(!running.get(),""String_Node_Str"");
    }
catch (    IOException e) {
      e.printStackTrace();
      logger.error(""String_Node_Str"",e);
    }
  }
}","@Override public void run(){
  try {
    OutputStream stream=connection.getOutputStream();
    logger.info(""String_Node_Str"");
    DataOutputStream out=new DataOutputStream(stream);
    Object request=Serializer.unserialize(connection.getInputStream());
    Handler<?> handler=handlers.get(request.getClass());
    if (handler == null) {
      throw new RuntimeException(""String_Node_Str"" + request.getClass());
    }
    handle(handler,request,out);
    stream.close();
    connection.close();
  }
 catch (  IllegalArgumentException|IllegalAccessException|InstantiationException e) {
    e.printStackTrace();
    logger.error(""String_Node_Str"",e);
  }
catch (  ConnectException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
    logger.error(""String_Node_Str"",e);
  }
 finally {
    logger.info(""String_Node_Str"");
    try {
      connection.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
      logger.error(""String_Node_Str"",e);
    }
  }
}",0.6553562772661173
44709,"public static Optional<String> get(String url) throws IOException {
  return get(new HttpGet(url));
}","public static Optional<String> get(String url) throws IOException {
  return get(new HttpGet(url),RequestConfig.custom());
}",0.8977777777777778
44710,"@Override protected void configure(){
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build();
  bind(ExecutorService.class).toInstance(Executors.newFixedThreadPool(1,factory));
}","@Override protected void configure(){
  ThreadFactory factory=new ThreadFactoryBuilder().setNameFormat(""String_Node_Str"").build();
  bind(ExecutorService.class).toInstance(Executors.newFixedThreadPool(10,factory));
}",0.9976798143851509
44711,"public static Server server(){
  return server(ImmutableMap.<String,Class<? extends Servlet>>builder().put(""String_Node_Str"",HelloWorldServlet.class).put(""String_Node_Str"",ServerErrorServlet.class).build());
}","public static Server server(String path,Class<? extends Servlet> servlet){
  return server(ImmutableMap.<String,Class<? extends Servlet>>builder().put(path,servlet).build());
}",0.6649350649350649
44712,"public void testRunnningAll() throws Exception {
  Server www=WorldWideWebServer.server();
  www.bind(InetSocketAddresses.parse(""String_Node_Str""));
  Gateway.main(new String[]{""String_Node_Str"",""String_Node_Str""});
  Router.main(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  Proxy.main(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  Optional<String> content=WorldWideWeb.get(InetSocketAddresses.parse(""String_Node_Str""),""String_Node_Str"");
  assertTrue(content.isPresent());
  assertEquals(""String_Node_Str"",content.get());
}","public void testRunnningAll() throws Exception {
  Server www=WorldWideWebServer.server(WorldWideWebServer.defaultServlets());
  www.bind(InetSocketAddresses.parse(""String_Node_Str""));
  Gateway.main(new String[]{""String_Node_Str"",""String_Node_Str""});
  Router.main(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  Proxy.main(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  Optional<String> content=WorldWideWeb.get(InetSocketAddresses.parse(""String_Node_Str""),""String_Node_Str"");
  assertTrue(content.isPresent());
  assertEquals(""String_Node_Str"",content.get());
}",0.969747899159664
44713,"static <T>void serialize(ByteArrayOutputStream stream,T object) throws IllegalArgumentException, IllegalAccessException, IOException {
  List<TLV> values=new ArrayList<TLV>();
  for (  java.lang.reflect.Field property : object.getClass().getDeclaredFields()) {
    Field field=property.getAnnotation(Field.class);
    if (field == null) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    boolean optional=property.getType().equals(Optional.class);
    if (optional) {
      if (property.get(object) == null || !((Optional<?>)property.get(object)).isPresent()) {
        continue;
      }
    }
    final Class<?> type=optional ? (Class<?>)((ParameterizedType)(property.getGenericType())).getActualTypeArguments()[0] : property.getType();
    Object value=(optional ? ((Optional<?>)property.get(object)).get() : property.get(object));
    if (type.equals(String.class)) {
      Preconditions.checkNotNull(value,""String_Node_Str"" + property.getName());
      values.add(TLV.of(field.value(),((String)value).getBytes()));
    }
 else     if (type.equals(int.class)) {
      values.add(TLV.of(field.value(),ByteBuffer.allocate(4).putInt((Integer)value).array()));
    }
 else     if (type.equals(long.class)) {
      values.add(TLV.of(field.value(),ByteBuffer.allocate(8).putLong((Long)value).array()));
    }
 else {
      ByteArrayOutputStream nested=new ByteArrayOutputStream();
      serialize(nested,value);
      values.add(TLV.of(field.value(),nested.toByteArray()));
    }
  }
  Marshaller.marshall(stream,values);
}","static <T>void serialize(ByteArrayOutputStream stream,T object) throws IllegalArgumentException, IllegalAccessException, IOException {
  Type annotation=object.getClass().getAnnotation(Type.class);
  Preconditions.checkNotNull(annotation,""String_Node_Str"" + object.getClass());
  int container=annotation.value();
  ByteArrayOutputStream content=new ByteArrayOutputStream();
  for (  java.lang.reflect.Field property : object.getClass().getDeclaredFields()) {
    Field field=property.getAnnotation(Field.class);
    boolean optional=property.getType().equals(Optional.class);
    final Class<?> type=optional ? (Class<?>)((ParameterizedType)(property.getGenericType())).getActualTypeArguments()[0] : property.getType();
    if (field == null) {
      if (type.getAnnotation(Type.class) == null) {
        throw new UnsupportedOperationException(""String_Node_Str"" + ""String_Node_Str"" + property);
      }
    }
 else     if (type.getAnnotation(Type.class) != null) {
      throw new UnsupportedOperationException(""String_Node_Str"" + ""String_Node_Str"");
    }
    if (optional) {
      if (property.get(object) == null || !((Optional<?>)property.get(object)).isPresent()) {
        continue;
      }
    }
    Object value=(optional ? ((Optional<?>)property.get(object)).get() : property.get(object));
    if (type.equals(String.class)) {
      Preconditions.checkNotNull(value,""String_Node_Str"" + property.getName());
      marshall(content,TLV.of(field.value(),((String)value).getBytes()));
    }
 else     if (type.equals(int.class)) {
      marshall(content,TLV.of(field.value(),ByteBuffer.allocate(4).putInt((Integer)value).array()));
    }
 else     if (type.equals(long.class)) {
      marshall(content,TLV.of(field.value(),ByteBuffer.allocate(8).putLong((Long)value).array()));
    }
 else {
      serialize(content,value);
    }
  }
  marshall(stream,TLV.of(container,content.toByteArray()));
}",0.1449695563931574
44714,"static <T>T unserialize(Class<T> clazz,ByteArrayInputStream stream) throws IllegalArgumentException, IllegalAccessException, InstantiationException {
  List<TLV> values=Marshaller.unmarshall(stream);
  T result=clazz.newInstance();
  for (  java.lang.reflect.Field property : result.getClass().getDeclaredFields()) {
    Field field=property.getAnnotation(Field.class);
    if (field == null) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    boolean optional=(property.getType() == Optional.class);
    boolean found=false;
    for (    TLV value : values) {
      if (value.type == field.value()) {
        final Class<?> type=optional ? (Class<?>)((ParameterizedType)(property.getGenericType())).getActualTypeArguments()[0] : property.getType();
        if (type == String.class) {
          String content=new String(value.content);
          property.set(result,!optional ? content : Optional.of(content));
        }
 else         if (type == int.class) {
          int content=ByteBuffer.wrap(value.content).getInt();
          property.set(result,!optional ? content : Optional.of(content));
        }
 else         if (type == long.class) {
          long content=ByteBuffer.wrap(value.content).getLong();
          property.set(result,!optional ? content : Optional.of(content));
        }
 else {
          Object content=unserialize(type,new ByteArrayInputStream(value.content));
          property.set(result,!optional ? content : Optional.of(content));
        }
        found=true;
        break;
      }
    }
    if (!found) {
      if (optional) {
        property.set(result,Optional.absent());
      }
 else {
        throw new UnsupportedOperationException(""String_Node_Str"" + property);
      }
    }
  }
  return result;
}","static <T>T unserialize(Class<T> clazz,ByteArrayInputStream stream) throws IllegalArgumentException, IllegalAccessException, InstantiationException {
  Type annotation=clazz.getAnnotation(Type.class);
  Preconditions.checkNotNull(annotation,""String_Node_Str"" + clazz);
  int container=annotation.value();
  TLV data=unmarshall(stream);
  Preconditions.checkArgument(data.type == container,""String_Node_Str"" + data.type + ""String_Node_Str""+ container);
  T result=clazz.newInstance();
  ByteArrayInputStream body=new ByteArrayInputStream(data.content);
  for (  java.lang.reflect.Field property : result.getClass().getDeclaredFields()) {
    boolean optional=property.getType().equals(Optional.class);
    if (optional) {
      property.set(result,Optional.absent());
    }
  }
  while (body.available() != 0) {
    long id=decode(body);
    int length=(int)decode(body);
    ByteBuffer buffer=ByteBuffer.allocate(length);
    body.read(buffer.array(),0,length);
    byte[] content=buffer.array();
    for (    java.lang.reflect.Field property : result.getClass().getDeclaredFields()) {
      int match;
      Field field=property.getAnnotation(Field.class);
      boolean optional=property.getType().equals(Optional.class);
      Class<?> type=optional ? (Class<?>)((ParameterizedType)(property.getGenericType())).getActualTypeArguments()[0] : property.getType();
      if (field != null) {
        match=field.value();
        Preconditions.checkArgument(property.getType().getAnnotation(Type.class) == null,""String_Node_Str"");
      }
 else       if (type != null) {
        match=type.getAnnotation(Type.class).value();
      }
 else {
        throw new UnsupportedOperationException(""String_Node_Str"" + ""String_Node_Str"" + property);
      }
      if (match != id) {
        continue;
      }
      if (type == String.class) {
        String value=new String(content);
        property.set(result,!optional ? value : Optional.of(value));
      }
 else       if (type == int.class) {
        int value=ByteBuffer.wrap(content).getInt();
        property.set(result,!optional ? value : Optional.of(value));
      }
 else       if (type == long.class) {
        long value=ByteBuffer.wrap(content).getLong();
        property.set(result,!optional ? value : Optional.of(value));
      }
 else {
        byte[] header1=encode(id);
        byte[] header2=encode(length);
        ByteBuffer buf=ByteBuffer.allocate(header1.length + header2.length + content.length);
        buf.put(header1);
        buf.put(header2);
        buf.put(content);
        Object value=unserialize(type,new ByteArrayInputStream(buf.array()));
        property.set(result,!optional ? value : Optional.of(value));
      }
    }
  }
  return result;
}",0.452846975088968
44715,"@Override protected void onDestroy(){
  Log.i(TAG,""String_Node_Str"");
  unregisterReceiver(updateReceiver);
  unbindService(connection);
  super.onDestroy();
}","@Override protected void onDestroy(){
  Log.i(TAG,""String_Node_Str"");
  unregisterReceiver(updateReceiver);
  super.onDestroy();
}",0.8996539792387543
44716,"public String getKey(){
  return keyView.getText().toString();
}","public String getKey(){
  EditText keyView=(EditText)getView().findViewById(R.id.key);
  return keyView.getText().toString();
}",0.6701570680628273
44717,"public String getValue(){
  return valueView.getText().toString();
}","public String getValue(){
  EditText valueView=(EditText)getView().findViewById(R.id.value);
  return valueView.getText().toString();
}",0.6699507389162561
44718,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.create_fragment,container,false);
  keyView=(EditText)rootView.findViewById(R.id.key);
  valueView=(EditText)rootView.findViewById(R.id.value);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  return inflater.inflate(R.layout.create_fragment,container,false);
}",0.7020408163265306
44719,"public void appendText(String text){
  mDisplay.append(text);
}","public void appendText(String text){
  TextView mDisplay=(TextView)getView().findViewById(R.id.serp);
  mDisplay.append(text);
}",0.6596858638743456
44720,"public void setText(String text){
  mDisplay.setText(text);
}","public void setText(String text){
  TextView mDisplay=(TextView)getView().findViewById(R.id.serp);
  mDisplay.setText(text);
}",0.6524064171122995
44721,"public static ArrayList<String> getKit(String kit) throws Exception {
  if (KitsMap.containsKey(kit)) {
    ArrayList<String> al=KitsMap.get(kit);
    return al;
  }
  throw new Exception(""String_Node_Str"" + kit);
}","public static ArrayList<Object> getKit(String kit) throws Exception {
  if (KitsMap.containsKey(kit)) {
    ArrayList<Object> al=KitsMap.get(kit);
    return al;
  }
  throw new Exception(""String_Node_Str"" + kit);
}",0.944186046511628
44722,"public static void showInventory(Player p,ArrayList<String> itemList){
  CraftPlayer cp=(CraftPlayer)p;
  CraftInventoryPlayer inv=new CraftInventoryPlayer(new InventoryPlayer(cp.getHandle()));
  inv.clear();
  try {
switch (itemList.size()) {
case 1:
      for (int i=0; i < 36; i++)       inv.addItem(getItem(itemList.get(0)));
    break;
case 2:
  for (int i=0; i < 18; i++)   inv.addItem(getItem(itemList.get(0)));
for (int i=0; i < 18; i++) inv.addItem(getItem(itemList.get(1)));
break;
case 3:
for (int i=0; i < 4; i++) {
inv.setItem((i * 9),getItem(itemList.get(0)));
inv.setItem((i * 9) + 1,getItem(itemList.get(0)));
inv.setItem((i * 9) + 2,getItem(itemList.get(0)));
inv.setItem((i * 9) + 3,getItem(itemList.get(1)));
inv.setItem((i * 9) + 4,getItem(itemList.get(1)));
inv.setItem((i * 9) + 5,getItem(itemList.get(1)));
inv.setItem((i * 9) + 6,getItem(itemList.get(2)));
inv.setItem((i * 9) + 7,getItem(itemList.get(2)));
inv.setItem((i * 9) + 8,getItem(itemList.get(2)));
}
break;
case 4:
for (int i=0; i < 4; i++) for (int j=0; j < 9; j++) inv.setItem((i * 9) + j,getItem(itemList.get(i)));
break;
case 5:
for (int i=0; i < 4; i++) for (int j=0; j < 7; j++) inv.setItem((i * 9) + j,getItem(itemList.get(i)));
for (int k=0; k < 4; k++) {
inv.setItem((k * 9) + 7,getItem(itemList.get(4)));
inv.setItem((k * 9) + 8,getItem(itemList.get(4)));
}
break;
case 6:
for (int i=0; i < 2; i++) {
inv.setItem((i * 9),getItem(itemList.get(0)));
inv.setItem((i * 9) + 1,getItem(itemList.get(0)));
inv.setItem((i * 9) + 2,getItem(itemList.get(0)));
inv.setItem((i * 9) + 3,getItem(itemList.get(1)));
inv.setItem((i * 9) + 4,getItem(itemList.get(1)));
inv.setItem((i * 9) + 5,getItem(itemList.get(1)));
inv.setItem((i * 9) + 6,getItem(itemList.get(2)));
inv.setItem((i * 9) + 7,getItem(itemList.get(2)));
inv.setItem((i * 9) + 8,getItem(itemList.get(2)));
}
for (int i=2; i < 4; i++) {
inv.setItem((i * 9),getItem(itemList.get(3)));
inv.setItem((i * 9) + 1,getItem(itemList.get(3)));
inv.setItem((i * 9) + 2,getItem(itemList.get(3)));
inv.setItem((i * 9) + 3,getItem(itemList.get(4)));
inv.setItem((i * 9) + 4,getItem(itemList.get(4)));
inv.setItem((i * 9) + 5,getItem(itemList.get(4)));
inv.setItem((i * 9) + 6,getItem(itemList.get(5)));
inv.setItem((i * 9) + 7,getItem(itemList.get(5)));
inv.setItem((i * 9) + 8,getItem(itemList.get(5)));
}
break;
case 7:
for (int i=0; i < 7; i++) {
int jmax;
if (i % 2 == 0) jmax=5;
 else jmax=4;
for (int j=0; j < jmax; j++) inv.addItem(getItem(itemList.get(i)));
}
break;
case 8:
for (int i=0; i < 4; i++) {
inv.addItem(getItem(itemList.get((2 * i))));
inv.addItem(getItem(itemList.get((2 * i))));
inv.addItem(getItem(itemList.get((2 * i))));
inv.addItem(getItem(itemList.get((2 * i))));
inv.addItem(getItem(itemList.get((2 * i) + 1)));
inv.addItem(getItem(itemList.get((2 * i) + 1)));
inv.addItem(getItem(itemList.get((2 * i) + 1)));
inv.addItem(getItem(itemList.get((2 * i) + 1)));
inv.addItem(getItem(itemList.get((2 * i) + 1)));
}
break;
case 9:
for (int j=0; j < 4; j++) for (int i=0; i < 9; i++) inv.addItem(getItem(itemList.get(i)));
break;
case 10:
case 11:
case 12:
for (int i=0; i < itemList.size(); i++) for (int j=0; j < 3; j++) inv.addItem(getItem(itemList.get(i)));
break;
case 13:
case 14:
case 15:
case 16:
case 17:
case 18:
int pos;
for (int i=0; i < itemList.size(); i++) {
if (i < 9) pos=i;
 else pos=i + 9;
inv.setItem(pos,getItem(itemList.get(i)));
inv.setItem(pos + 9,getItem(itemList.get(i)));
}
break;
default :
for (int i=0; i < itemList.size(); i++) inv.setItem(i,getItem(itemList.get(i)));
}
}
 catch (Exception e) {
System.out.println(""String_Node_Str"" + e.getMessage());
}
IInventory ii=(IInventory)inv.getInventory();
cp.getHandle().a(ii);
}","public static void showInventory(Player p,ArrayList<Object> itemList){
  CraftPlayer cp=(CraftPlayer)p;
  CraftInventoryPlayer inv=new CraftInventoryPlayer(new InventoryPlayer(cp.getHandle()));
  inv.clear();
  try {
switch (itemList.size()) {
case 1:
      for (int i=0; i < 36; i++)       inv.addItem(getItem(itemList.get(0).toString()));
    break;
case 2:
  for (int i=0; i < 18; i++)   inv.addItem(getItem(itemList.get(0).toString()));
for (int i=0; i < 18; i++) inv.addItem(getItem(itemList.get(1).toString()));
break;
case 3:
for (int i=0; i < 4; i++) {
inv.setItem((i * 9),getItem(itemList.get(0).toString()));
inv.setItem((i * 9) + 1,getItem(itemList.get(0).toString()));
inv.setItem((i * 9) + 2,getItem(itemList.get(0).toString()));
inv.setItem((i * 9) + 3,getItem(itemList.get(1).toString()));
inv.setItem((i * 9) + 4,getItem(itemList.get(1).toString()));
inv.setItem((i * 9) + 5,getItem(itemList.get(1).toString()));
inv.setItem((i * 9) + 6,getItem(itemList.get(2).toString()));
inv.setItem((i * 9) + 7,getItem(itemList.get(2).toString()));
inv.setItem((i * 9) + 8,getItem(itemList.get(2).toString()));
}
break;
case 4:
for (int i=0; i < 4; i++) for (int j=0; j < 9; j++) inv.setItem((i * 9) + j,getItem(itemList.get(i).toString()));
break;
case 5:
for (int i=0; i < 4; i++) for (int j=0; j < 7; j++) inv.setItem((i * 9) + j,getItem(itemList.get(i).toString()));
for (int k=0; k < 4; k++) {
inv.setItem((k * 9) + 7,getItem(itemList.get(4).toString()));
inv.setItem((k * 9) + 8,getItem(itemList.get(4).toString()));
}
break;
case 6:
for (int i=0; i < 2; i++) {
inv.setItem((i * 9),getItem(itemList.get(0).toString()));
inv.setItem((i * 9) + 1,getItem(itemList.get(0).toString()));
inv.setItem((i * 9) + 2,getItem(itemList.get(0).toString()));
inv.setItem((i * 9) + 3,getItem(itemList.get(1).toString()));
inv.setItem((i * 9) + 4,getItem(itemList.get(1).toString()));
inv.setItem((i * 9) + 5,getItem(itemList.get(1).toString()));
inv.setItem((i * 9) + 6,getItem(itemList.get(2).toString()));
inv.setItem((i * 9) + 7,getItem(itemList.get(2).toString()));
inv.setItem((i * 9) + 8,getItem(itemList.get(2).toString()));
}
for (int i=2; i < 4; i++) {
inv.setItem((i * 9),getItem(itemList.get(3).toString()));
inv.setItem((i * 9) + 1,getItem(itemList.get(3).toString()));
inv.setItem((i * 9) + 2,getItem(itemList.get(3).toString()));
inv.setItem((i * 9) + 3,getItem(itemList.get(4).toString()));
inv.setItem((i * 9) + 4,getItem(itemList.get(4).toString()));
inv.setItem((i * 9) + 5,getItem(itemList.get(4).toString()));
inv.setItem((i * 9) + 6,getItem(itemList.get(5).toString()));
inv.setItem((i * 9) + 7,getItem(itemList.get(5).toString()));
inv.setItem((i * 9) + 8,getItem(itemList.get(5).toString()));
}
break;
case 7:
for (int i=0; i < 7; i++) {
int jmax;
if (i % 2 == 0) jmax=5;
 else jmax=4;
for (int j=0; j < jmax; j++) inv.addItem(getItem(itemList.get(i).toString()));
}
break;
case 8:
for (int i=0; i < 4; i++) {
inv.addItem(getItem(itemList.get((2 * i)).toString()));
inv.addItem(getItem(itemList.get((2 * i)).toString()));
inv.addItem(getItem(itemList.get((2 * i)).toString()));
inv.addItem(getItem(itemList.get((2 * i)).toString()));
inv.addItem(getItem(itemList.get((2 * i) + 1).toString()));
inv.addItem(getItem(itemList.get((2 * i) + 1).toString()));
inv.addItem(getItem(itemList.get((2 * i) + 1).toString()));
inv.addItem(getItem(itemList.get((2 * i) + 1).toString()));
inv.addItem(getItem(itemList.get((2 * i) + 1).toString()));
}
break;
case 9:
for (int j=0; j < 4; j++) for (int i=0; i < 9; i++) inv.addItem(getItem(itemList.get(i).toString()));
break;
case 10:
case 11:
case 12:
for (int i=0; i < itemList.size(); i++) for (int j=0; j < 3; j++) inv.addItem(getItem(itemList.get(i).toString()));
break;
case 13:
case 14:
case 15:
case 16:
case 17:
case 18:
int pos;
for (int i=0; i < itemList.size(); i++) {
if (i < 9) pos=i;
 else pos=i + 9;
inv.setItem(pos,getItem(itemList.get(i).toString()));
inv.setItem(pos + 9,getItem(itemList.get(i).toString()));
}
break;
default :
for (int i=0; i < itemList.size(); i++) inv.setItem(i,getItem(itemList.get(i).toString()));
}
}
 catch (Exception e) {
System.out.println(""String_Node_Str"" + e.getMessage());
}
IInventory ii=(IInventory)inv.getInventory();
cp.getHandle().a(ii);
}",0.9306831047930556
44723,"public void onEnable(){
  setupPermissions();
  try {
    folder=this.getDataFolder();
    if (!folder.exists()) {
      folder.mkdirs();
    }
    loadConfig();
    loadItems();
    loadKits();
    if (KitsMap == null) {
      KitsMap=new HashMap<String,ArrayList<String>>();
      ArrayList<String> al=new ArrayList<String>();
      al.add(""String_Node_Str"");
      KitsMap.put(""String_Node_Str"",al);
    }
    System.out.println(""String_Node_Str"" + ConfigMap.size() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + ItemsMap.size() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + KitsMap.size() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Type.SIGN_CHANGE,blockListener,Priority.Monitor,this);
  pm.registerEvent(Type.BLOCK_PLACE,blockListener,Priority.Monitor,this);
  pm.registerEvent(Type.BLOCK_BREAK,blockListener,Priority.Monitor,this);
  pm.registerEvent(Type.PLAYER_INTERACT,playerListener,Priority.Monitor,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  System.out.println(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}","public void onEnable(){
  setupPermissions();
  try {
    folder=this.getDataFolder();
    if (!folder.exists()) {
      folder.mkdirs();
    }
    loadConfig();
    loadItems();
    loadKits();
    if (KitsMap == null) {
      KitsMap=new HashMap<String,ArrayList<Object>>();
      ArrayList<Object> al=new ArrayList<Object>();
      al.add(""String_Node_Str"");
      KitsMap.put(""String_Node_Str"",al);
    }
    System.out.println(""String_Node_Str"" + ConfigMap.size() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + ItemsMap.size() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + KitsMap.size() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Type.SIGN_CHANGE,blockListener,Priority.Monitor,this);
  pm.registerEvent(Type.BLOCK_PLACE,blockListener,Priority.Monitor,this);
  pm.registerEvent(Type.BLOCK_BREAK,blockListener,Priority.Monitor,this);
  pm.registerEvent(Type.PLAYER_INTERACT,playerListener,Priority.Monitor,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  System.out.println(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}",0.9856687898089171
44724,"@SuppressWarnings(""String_Node_Str"") public static void loadKits() throws IOException {
  File kitsFile=new File(folder,""String_Node_Str"");
  if (!kitsFile.exists()) {
    kitsFile.createNewFile();
    InputStream res=SupplySign.class.getResourceAsStream(""String_Node_Str"");
    FileWriter tx=new FileWriter(kitsFile);
    for (int i=0; (i=res.read()) > 0; )     tx.write(i);
    tx.flush();
    tx.close();
    res.close();
  }
  BufferedReader rx=new BufferedReader(new FileReader(kitsFile));
  Yaml yaml=new Yaml();
  KitsMap.clear();
  try {
    KitsMap=(HashMap<String,ArrayList<String>>)yaml.load(rx);
  }
  finally {
    rx.close();
  }
}","@SuppressWarnings(""String_Node_Str"") public static void loadKits() throws IOException {
  File kitsFile=new File(folder,""String_Node_Str"");
  if (!kitsFile.exists()) {
    kitsFile.createNewFile();
    InputStream res=SupplySign.class.getResourceAsStream(""String_Node_Str"");
    FileWriter tx=new FileWriter(kitsFile);
    for (int i=0; (i=res.read()) > 0; )     tx.write(i);
    tx.flush();
    tx.close();
    res.close();
  }
  BufferedReader rx=new BufferedReader(new FileReader(kitsFile));
  Yaml yaml=new Yaml();
  KitsMap.clear();
  try {
    KitsMap=(HashMap<String,ArrayList<Object>>)yaml.load(rx);
  }
  finally {
    rx.close();
  }
}",0.9906976744186048
44725,"@Override public void onPlayerInteract(PlayerInteractEvent event){
  if (event.isCancelled() || event.getAction() != Action.RIGHT_CLICK_BLOCK)   return;
  Block block=event.getClickedBlock();
  if (block.getType() != Material.WALL_SIGN && block.getType() != Material.SIGN_POST && block.getType() != Material.CHEST)   return;
  Sign sign;
  if (block.getType() == Material.CHEST) {
    sign=SupplySign.getAttachedSign(block);
    if (sign == null)     return;
  }
 else   sign=new CraftSign(block);
  try {
    if (sign.getLine(0).equals(""String_Node_Str"")) {
      event.setCancelled(true);
      ArrayList<String> itemList=new ArrayList<String>();
      if (sign.getLine(1).trim().contains(""String_Node_Str"")) {
        String[] split=sign.getLine(1).trim().split(""String_Node_Str"");
        if (SupplySign.isAuthorized(event.getPlayer(),""String_Node_Str"") || SupplySign.isAuthorized(event.getPlayer(),""String_Node_Str"" + split[1]))         itemList=SupplySign.getKit(split[1]);
 else         if (SupplySign.getConfigShowErrorsInClient()) {
          event.getPlayer().sendMessage(""String_Node_Str"");
          return;
        }
      }
 else {
        if (SupplySign.isAuthorized(event.getPlayer(),""String_Node_Str"")) {
          if (!sign.getLine(1).trim().equalsIgnoreCase(""String_Node_Str""))           itemList.add(sign.getLine(1).trim());
          if (!sign.getLine(2).trim().equalsIgnoreCase(""String_Node_Str""))           itemList.add(sign.getLine(2).trim());
          if (!sign.getLine(3).trim().equalsIgnoreCase(""String_Node_Str""))           itemList.add(sign.getLine(3).trim());
        }
 else         if (SupplySign.getConfigShowErrorsInClient()) {
          event.getPlayer().sendMessage(""String_Node_Str"");
          return;
        }
      }
      if (itemList.size() > 0)       SupplySign.showInventory(event.getPlayer(),itemList);
      return;
    }
  }
 catch (  Throwable ex) {
    if (SupplySign.getConfigShowErrorsInClient())     event.getPlayer().sendMessage(""String_Node_Str"" + ex.getMessage());
  }
}","@Override public void onPlayerInteract(PlayerInteractEvent event){
  if (event.isCancelled() || event.getAction() != Action.RIGHT_CLICK_BLOCK)   return;
  Block block=event.getClickedBlock();
  if (block.getType() != Material.WALL_SIGN && block.getType() != Material.SIGN_POST && block.getType() != Material.CHEST)   return;
  Sign sign;
  if (block.getType() == Material.CHEST) {
    sign=SupplySign.getAttachedSign(block);
    if (sign == null)     return;
  }
 else   sign=new CraftSign(block);
  try {
    if (sign.getLine(0).equals(""String_Node_Str"")) {
      event.setCancelled(true);
      ArrayList<Object> itemList=new ArrayList<Object>();
      if (sign.getLine(1).trim().contains(""String_Node_Str"")) {
        String[] split=sign.getLine(1).trim().split(""String_Node_Str"");
        if (SupplySign.isAuthorized(event.getPlayer(),""String_Node_Str"") || SupplySign.isAuthorized(event.getPlayer(),""String_Node_Str"" + split[1]))         itemList=SupplySign.getKit(split[1]);
 else         if (SupplySign.getConfigShowErrorsInClient())         event.getPlayer().sendMessage(""String_Node_Str"");
      }
 else {
        if (SupplySign.isAuthorized(event.getPlayer(),""String_Node_Str"")) {
          if (!sign.getLine(1).trim().equalsIgnoreCase(""String_Node_Str""))           itemList.add(sign.getLine(1).trim());
          if (!sign.getLine(2).trim().equalsIgnoreCase(""String_Node_Str""))           itemList.add(sign.getLine(2).trim());
          if (!sign.getLine(3).trim().equalsIgnoreCase(""String_Node_Str""))           itemList.add(sign.getLine(3).trim());
        }
 else         if (SupplySign.getConfigShowErrorsInClient())         event.getPlayer().sendMessage(""String_Node_Str"");
      }
      if (itemList.size() > 0)       SupplySign.showInventory(event.getPlayer(),itemList);
      return;
    }
  }
 catch (  Throwable ex) {
    if (SupplySign.getConfigShowErrorsInClient())     event.getPlayer().sendMessage(""String_Node_Str"" + ex.getMessage());
  }
}",0.9779448621553885
44726,"public Console(CommandProcessor processor,InputStream in,PrintStream out,PrintStream err,Terminal term,Runnable closeCallback) throws Exception {
  this.in=in;
  this.out=out;
  this.err=err;
  this.queue=new ArrayBlockingQueue<Integer>(1024);
  this.terminal=term == null ? new UnsupportedTerminal() : term;
  this.consoleInput=new ConsoleInputStream();
  this.session=processor.createSession(this.consoleInput,this.out,this.err);
  this.session.put(""String_Node_Str"",""String_Node_Str"");
  this.closeCallback=closeCallback;
  reader=new ConsoleReader(this.consoleInput,new PrintWriter(this.out),getClass().getResourceAsStream(""String_Node_Str""),this.terminal);
  final File file=getHistoryFile();
  file.getParentFile().mkdirs();
  reader.setHistory(new FileHistory(file));
  session.put(""String_Node_Str"",reader.getHistory());
  Completer completer=createCompleter();
  if (completer != null) {
    reader.addCompleter(new CompleterAsCompletor(completer));
  }
  if (Boolean.getBoolean(""String_Node_Str"")) {
    reader.setBellEnabled(false);
  }
  pipe=new Thread(new Pipe());
  pipe.setName(""String_Node_Str"");
  pipe.setDaemon(true);
}","public Console(CommandProcessor processor,InputStream in,PrintStream out,PrintStream err,Terminal term,Runnable closeCallback) throws Exception {
  this.in=in;
  this.out=out;
  this.err=err;
  this.queue=new ArrayBlockingQueue<Integer>(1024);
  this.terminal=term == null ? new UnsupportedTerminal() : term;
  this.consoleInput=new ConsoleInputStream();
  this.session=processor.createSession(this.consoleInput,this.out,this.err);
  this.session.put(""String_Node_Str"",""String_Node_Str"");
  this.closeCallback=closeCallback;
  reader=new ConsoleReader(this.consoleInput,new PrintWriter(this.out),getClass().getResourceAsStream(""String_Node_Str""),this.terminal);
  final File file=getHistoryFile();
  file.getParentFile().mkdirs();
  if (file.exists() && file.canRead()) {
    reader.setHistory(new FileHistory(file){
      boolean failed=false;
      @Override public void flush() throws IOException {
        if (!failed) {
          try {
            super.flush();
          }
 catch (          IOException e) {
            failed=true;
            LOGGER.debug(""String_Node_Str"" + file,e);
          }
        }
      }
      @Override public void purge() throws IOException {
        if (!failed) {
          try {
            super.purge();
          }
 catch (          IOException e) {
            failed=true;
            LOGGER.debug(""String_Node_Str"" + file,e);
          }
        }
      }
    }
);
  }
  session.put(""String_Node_Str"",reader.getHistory());
  Completer completer=createCompleter();
  if (completer != null) {
    reader.addCompleter(new CompleterAsCompletor(completer));
  }
  if (Boolean.getBoolean(""String_Node_Str"")) {
    reader.setBellEnabled(false);
  }
  pipe=new Thread(new Pipe());
  pipe.setName(""String_Node_Str"");
  pipe.setDaemon(true);
}",0.7694415895854745
44727,"public synchronized void renameInstance(String oldName,String newName) throws Exception {
  if (instances.get(newName) != null) {
    throw new IllegalArgumentException(""String_Node_Str"" + newName + ""String_Node_Str"");
  }
  Instance instance=instances.get(oldName);
  if (instance == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + oldName + ""String_Node_Str"");
  }
  if (instance.isRoot()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (instance.getPid() != 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  println(Ansi.ansi().a(""String_Node_Str"").a(Ansi.Attribute.INTENSITY_BOLD).a(oldName).a(Ansi.Attribute.RESET).a(""String_Node_Str"").a(Ansi.Attribute.INTENSITY_BOLD).a(newName).toString());
  instances.remove(oldName);
  instance.setName(newName);
  String oldLocationPath=instance.getLocation();
  File oldLocation=new File(oldLocationPath);
  String basedir=oldLocation.getParent();
  File newLocation=new File(basedir,newName);
  oldLocation.renameTo(newLocation);
  instance.setLocation(newLocation.getPath());
  HashMap<String,String> props=new HashMap<String,String>();
  props.put(oldName,newName);
  props.put(oldLocationPath,newLocation.getPath());
  filterResource(newLocation,""String_Node_Str"",props);
  filterResource(newLocation,""String_Node_Str"",props);
  filterResource(newLocation,""String_Node_Str"",props);
  filterResource(newLocation,""String_Node_Str"",props);
  filterResource(newLocation,""String_Node_Str"",props);
  filterResource(newLocation,""String_Node_Str"",props);
  filterResource(newLocation,""String_Node_Str"",props);
  instances.put(newName,instance);
  saveState();
}","public synchronized void renameInstance(String oldName,String newName) throws Exception {
  if (instances.get(newName) != null) {
    throw new IllegalArgumentException(""String_Node_Str"" + newName + ""String_Node_Str"");
  }
  Instance instance=instances.get(oldName);
  if (instance == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + oldName + ""String_Node_Str"");
  }
  if (instance.isRoot()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (instance.getPid() != 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  println(Ansi.ansi().a(""String_Node_Str"").a(Ansi.Attribute.INTENSITY_BOLD).a(oldName).a(Ansi.Attribute.RESET).a(""String_Node_Str"").a(Ansi.Attribute.INTENSITY_BOLD).a(newName).a(Ansi.Attribute.RESET).toString());
  instances.remove(oldName);
  instance.setName(newName);
  String oldLocationPath=instance.getLocation();
  File oldLocation=new File(oldLocationPath);
  String basedir=oldLocation.getParent();
  File newLocation=new File(basedir,newName);
  oldLocation.renameTo(newLocation);
  instance.setLocation(newLocation.getPath());
  HashMap<String,String> props=new HashMap<String,String>();
  props.put(oldName,newName);
  props.put(oldLocationPath,newLocation.getPath());
  filterResource(newLocation,""String_Node_Str"",props);
  filterResource(newLocation,""String_Node_Str"",props);
  filterResource(newLocation,""String_Node_Str"",props);
  filterResource(newLocation,""String_Node_Str"",props);
  filterResource(newLocation,""String_Node_Str"",props);
  filterResource(newLocation,""String_Node_Str"",props);
  filterResource(newLocation,""String_Node_Str"",props);
  instances.put(newName,instance);
  saveState();
}",0.9928272564255828
44728,"public void contextDestroyed(ServletContextEvent sce){
  try {
    System.err.println(""String_Node_Str"");
    if (main != null) {
      main.destroy(false);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void contextDestroyed(ServletContextEvent sce){
  try {
    System.err.println(""String_Node_Str"");
    if (main != null) {
      main.destroy();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9886104783599088
44729,"public synchronized void init(){
  Configuration.setConfiguration(this);
}","public void init(){
  Configuration.setConfiguration(this);
}",0.9037037037037036
44730,"public synchronized void unregister(JaasRealm realm,Map<String,?> properties){
  for (Iterator<JaasRealm> it=realms.iterator(); it.hasNext(); ) {
    if (it.next() == realm) {
      it.remove();
    }
  }
}","public void unregister(JaasRealm realm,Map<String,?> properties){
  realms.remove(realm);
}",0.5791245791245792
44731,"public synchronized void refresh(){
}","public void refresh(){
}",0.7868852459016393
44732,"public synchronized void close(){
  realms.clear();
  Configuration.setConfiguration(null);
}","public void close(){
  realms.clear();
  Configuration.setConfiguration(null);
}",0.9248554913294798
44733,"public synchronized AppConfigurationEntry[] getAppConfigurationEntry(String name){
  JaasRealm realm=null;
  for (  JaasRealm r : realms) {
    if (r.getName().equals(name)) {
      if (realm == null || r.getRank() > realm.getRank()) {
        realm=r;
      }
    }
  }
  if (realm != null) {
    return realm.getEntries();
  }
  return null;
}","public AppConfigurationEntry[] getAppConfigurationEntry(String name){
  JaasRealm realm=null;
  for (  JaasRealm r : realms) {
    if (r.getName().equals(name)) {
      if (realm == null || r.getRank() > realm.getRank()) {
        realm=r;
      }
    }
  }
  if (realm != null) {
    return realm.getEntries();
  }
  return null;
}",0.9807976366322008
44734,"public synchronized void register(JaasRealm realm,Map<String,?> properties){
  realms.add(realm);
}","public void register(JaasRealm realm,Map<String,?> properties){
  realms.add(realm);
}",0.9297297297297298
44735,"@Test public void testCompleteArgumnets() throws Exception {
  CommandSession session=new DummyCommandSession();
  Completer comp=new ArgumentCompleter(session,new SimpleCommand(MyAction.class),""String_Node_Str"");
  assertEquals(Arrays.asList(""String_Node_Str""),complete(comp,""String_Node_Str""));
  assertEquals(Arrays.asList(""String_Node_Str""),complete(comp,""String_Node_Str""));
  assertEquals(Arrays.asList(""String_Node_Str""),complete(comp,""String_Node_Str""));
}","@Test public void testCompleteArgumnets() throws Exception {
  CommandSession session=new DummyCommandSession();
  Completer comp=new ArgumentCompleter(session,new SimpleCommand(MyAction.class),""String_Node_Str"");
  assertEquals(Arrays.asList(""String_Node_Str"" + File.separator),complete(comp,""String_Node_Str""));
  assertEquals(Arrays.asList(""String_Node_Str"" + File.separator),complete(comp,""String_Node_Str""));
  assertEquals(Arrays.asList(""String_Node_Str"" + File.separator),complete(comp,""String_Node_Str""));
}",0.947906026557712
44736,"@Override protected Object doExecute() throws Exception {
  Map<Constructor,List<Object>> matches=findMatchingConstructors(clazz,args,Arrays.asList(new ReifiedType[args.size()]));
  if (matches.size() == 1) {
    try {
      Map.Entry<Constructor,List<Object>> match=matches.entrySet().iterator().next();
      return newInstance(match.getKey(),match.getValue().toArray());
    }
 catch (    Throwable e) {
      throw new ComponentDefinitionException(""String_Node_Str"" + clazz.getName(),getRealCause(e));
    }
  }
 else   if (matches.size() == 0) {
    throw new ComponentDefinitionException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ args+ ""String_Node_Str"");
  }
 else {
    throw new ComponentDefinitionException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ args+ ""String_Node_Str""+ matches.keySet());
  }
}","@Override protected Object doExecute() throws Exception {
  if (args == null) {
    args=Collections.emptyList();
  }
  Map<Constructor,List<Object>> matches=findMatchingConstructors(clazz,args,Arrays.asList(new ReifiedType[args.size()]));
  if (matches.size() == 1) {
    try {
      Map.Entry<Constructor,List<Object>> match=matches.entrySet().iterator().next();
      return newInstance(match.getKey(),match.getValue().toArray());
    }
 catch (    Throwable e) {
      throw new ComponentDefinitionException(""String_Node_Str"" + clazz.getName(),getRealCause(e));
    }
  }
 else   if (matches.size() == 0) {
    throw new ComponentDefinitionException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ args+ ""String_Node_Str"");
  }
 else {
    throw new ComponentDefinitionException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ args+ ""String_Node_Str""+ matches.keySet());
  }
}",0.9654377880184332
44737,"protected void doExecute(ConfigurationAdmin admin) throws Exception {
  Configuration[] configs=admin.listConfigurations(query);
  for (  Configuration config : configs) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + config.getPid());
    if (config.getFactoryPid() != null) {
      System.out.println(""String_Node_Str"" + config.getFactoryPid());
    }
    System.out.println(""String_Node_Str"" + config.getBundleLocation());
    if (config.getProperties() != null) {
      System.out.println(""String_Node_Str"");
      Dictionary props=config.getProperties();
      for (Enumeration e=props.keys(); e.hasMoreElements(); ) {
        Object key=e.nextElement();
        System.out.println(""String_Node_Str"" + key + ""String_Node_Str""+ props.get(key));
      }
    }
  }
}","protected void doExecute(ConfigurationAdmin admin) throws Exception {
  Configuration[] configs=admin.listConfigurations(query);
  if (configs != null) {
    for (    Configuration config : configs) {
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + config.getPid());
      if (config.getFactoryPid() != null) {
        System.out.println(""String_Node_Str"" + config.getFactoryPid());
      }
      System.out.println(""String_Node_Str"" + config.getBundleLocation());
      if (config.getProperties() != null) {
        System.out.println(""String_Node_Str"");
        Dictionary props=config.getProperties();
        for (Enumeration e=props.keys(); e.hasMoreElements(); ) {
          Object key=e.nextElement();
          System.out.println(""String_Node_Str"" + key + ""String_Node_Str""+ props.get(key));
        }
      }
    }
  }
}",0.6182251340083383
44738,"protected void printUsage(CommandSession session,Action action,Map<Option,Field> optionsMap,Map<Argument,Field> argsMap,PrintStream out){
  Command command=action.getClass().getAnnotation(Command.class);
  Terminal term=(Terminal)session.get(""String_Node_Str"");
  List<Argument> arguments=new ArrayList<Argument>(argsMap.keySet());
  Collections.sort(arguments,new Comparator<Argument>(){
    public int compare(    Argument o1,    Argument o2){
      return Integer.valueOf(o1.index()).compareTo(Integer.valueOf(o2.index()));
    }
  }
);
  Set<Option> options=new HashSet<Option>(optionsMap.keySet());
  options.add(HELP);
  if (command != null && (command.description() != null || command.name() != null)) {
    out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(""String_Node_Str"").a(Ansi.Attribute.RESET));
    out.print(""String_Node_Str"");
    if (command.name() != null) {
      out.println(Ansi.ansi().a(command.scope()).a(""String_Node_Str"").a(Ansi.Attribute.INTENSITY_BOLD).a(command.name()).a(Ansi.Attribute.RESET));
      out.println();
    }
    out.print(""String_Node_Str"");
    out.println(command.description());
    out.println();
  }
  StringBuffer syntax=new StringBuffer();
  if (command != null) {
    syntax.append(String.format(""String_Node_Str"",command.scope(),command.name()));
  }
  if (options.size() > 0) {
    syntax.append(""String_Node_Str"");
  }
  if (arguments.size() > 0) {
    syntax.append(' ');
    for (    Argument argument : arguments) {
      if (!argument.required()) {
        syntax.append(String.format(""String_Node_Str"",argument.name()));
      }
 else {
        syntax.append(String.format(""String_Node_Str"",argument.name()));
      }
    }
  }
  out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(""String_Node_Str"").a(Ansi.Attribute.RESET));
  out.print(""String_Node_Str"");
  out.println(syntax.toString());
  out.println();
  if (arguments.size() > 0) {
    out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(""String_Node_Str"").a(Ansi.Attribute.RESET));
    for (    Argument argument : arguments) {
      out.print(""String_Node_Str"");
      out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(argument.name()).a(Ansi.Attribute.RESET));
      printFormatted(""String_Node_Str"",argument.description(),term != null ? term.getTerminalWidth() : 80,out);
      if (!argument.required()) {
        try {
          argsMap.get(argument).setAccessible(true);
          Object o=argsMap.get(argument).get(action);
          if (o != null && (!(o instanceof Boolean) || ((Boolean)o)) && (!(o instanceof Number) || ((Number)o).doubleValue() != 0.0)) {
            out.print(""String_Node_Str"");
            out.print(o.toString());
            out.println(""String_Node_Str"");
          }
        }
 catch (        Throwable t) {
        }
      }
    }
    out.println();
  }
  if (options.size() > 0) {
    out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(""String_Node_Str"").a(Ansi.Attribute.RESET));
    for (    Option option : options) {
      String opt=option.name();
      for (      String alias : option.aliases()) {
        opt+=""String_Node_Str"" + alias;
      }
      out.print(""String_Node_Str"");
      out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(opt).a(Ansi.Attribute.RESET));
      printFormatted(""String_Node_Str"",option.description(),term != null ? term.getTerminalWidth() : 80,out);
      try {
        optionsMap.get(option).setAccessible(true);
        Object o=optionsMap.get(option).get(action);
        if (o != null && (!(o instanceof Boolean) || ((Boolean)o)) && (!(o instanceof Number) || ((Number)o).doubleValue() != 0.0)) {
          out.print(""String_Node_Str"");
          out.print(o.toString());
          out.println(""String_Node_Str"");
        }
      }
 catch (      Throwable t) {
      }
    }
    out.println();
  }
  if (command.detailedDescription().length() > 0) {
    out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(""String_Node_Str"").a(Ansi.Attribute.RESET));
    String desc=loadDescription(action.getClass(),command.detailedDescription());
    printFormatted(""String_Node_Str"",desc,term != null ? term.getTerminalWidth() : 80,out);
  }
}","protected void printUsage(CommandSession session,Action action,Map<Option,Field> optionsMap,Map<Argument,Field> argsMap,PrintStream out){
  Command command=action.getClass().getAnnotation(Command.class);
  Terminal term=session != null ? (Terminal)session.get(""String_Node_Str"") : null;
  List<Argument> arguments=new ArrayList<Argument>(argsMap.keySet());
  Collections.sort(arguments,new Comparator<Argument>(){
    public int compare(    Argument o1,    Argument o2){
      return Integer.valueOf(o1.index()).compareTo(Integer.valueOf(o2.index()));
    }
  }
);
  Set<Option> options=new HashSet<Option>(optionsMap.keySet());
  options.add(HELP);
  if (command != null && (command.description() != null || command.name() != null)) {
    out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(""String_Node_Str"").a(Ansi.Attribute.RESET));
    out.print(""String_Node_Str"");
    if (command.name() != null) {
      out.println(Ansi.ansi().a(command.scope()).a(""String_Node_Str"").a(Ansi.Attribute.INTENSITY_BOLD).a(command.name()).a(Ansi.Attribute.RESET));
      out.println();
    }
    out.print(""String_Node_Str"");
    out.println(command.description());
    out.println();
  }
  StringBuffer syntax=new StringBuffer();
  if (command != null) {
    syntax.append(String.format(""String_Node_Str"",command.scope(),command.name()));
  }
  if (options.size() > 0) {
    syntax.append(""String_Node_Str"");
  }
  if (arguments.size() > 0) {
    syntax.append(' ');
    for (    Argument argument : arguments) {
      if (!argument.required()) {
        syntax.append(String.format(""String_Node_Str"",argument.name()));
      }
 else {
        syntax.append(String.format(""String_Node_Str"",argument.name()));
      }
    }
  }
  out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(""String_Node_Str"").a(Ansi.Attribute.RESET));
  out.print(""String_Node_Str"");
  out.println(syntax.toString());
  out.println();
  if (arguments.size() > 0) {
    out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(""String_Node_Str"").a(Ansi.Attribute.RESET));
    for (    Argument argument : arguments) {
      out.print(""String_Node_Str"");
      out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(argument.name()).a(Ansi.Attribute.RESET));
      printFormatted(""String_Node_Str"",argument.description(),term != null ? term.getTerminalWidth() : 80,out);
      if (!argument.required()) {
        try {
          argsMap.get(argument).setAccessible(true);
          Object o=argsMap.get(argument).get(action);
          if (o != null && (!(o instanceof Boolean) || ((Boolean)o)) && (!(o instanceof Number) || ((Number)o).doubleValue() != 0.0)) {
            out.print(""String_Node_Str"");
            out.print(o.toString());
            out.println(""String_Node_Str"");
          }
        }
 catch (        Throwable t) {
        }
      }
    }
    out.println();
  }
  if (options.size() > 0) {
    out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(""String_Node_Str"").a(Ansi.Attribute.RESET));
    for (    Option option : options) {
      String opt=option.name();
      for (      String alias : option.aliases()) {
        opt+=""String_Node_Str"" + alias;
      }
      out.print(""String_Node_Str"");
      out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(opt).a(Ansi.Attribute.RESET));
      printFormatted(""String_Node_Str"",option.description(),term != null ? term.getTerminalWidth() : 80,out);
      try {
        optionsMap.get(option).setAccessible(true);
        Object o=optionsMap.get(option).get(action);
        if (o != null && (!(o instanceof Boolean) || ((Boolean)o)) && (!(o instanceof Number) || ((Number)o).doubleValue() != 0.0)) {
          out.print(""String_Node_Str"");
          out.print(o.toString());
          out.println(""String_Node_Str"");
        }
      }
 catch (      Throwable t) {
      }
    }
    out.println();
  }
  if (command.detailedDescription().length() > 0) {
    out.println(Ansi.ansi().a(Ansi.Attribute.INTENSITY_BOLD).a(""String_Node_Str"").a(Ansi.Attribute.RESET));
    String desc=loadDescription(action.getClass(),command.detailedDescription());
    printFormatted(""String_Node_Str"",desc,term != null ? term.getTerminalWidth() : 80,out);
  }
}",0.9970191963753428
44739,"protected void testArchetype(String groupId,String artifactId,String version,Properties archetypeRequiredParameters) throws Exception {
  File targetDir=new File(baseDir,""String_Node_Str"" + artifactId);
  FileUtils.deleteDirectory(targetDir);
  targetDir.mkdirs();
  EventMonitor eventMonitor=new DefaultEventMonitor(new PlexusLoggerAdapter(new MavenEmbedderConsoleLogger()));
  Properties props=new Properties();
  props.setProperty(""String_Node_Str"",groupId);
  props.setProperty(""String_Node_Str"",artifactId);
  props.setProperty(""String_Node_Str"",version);
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",UUID.randomUUID().toString());
  props.setProperty(""String_Node_Str"",targetDir.getAbsolutePath());
  props.setProperty(""String_Node_Str"",targetDir.getAbsolutePath());
  if (archetypeRequiredParameters != null) {
    for (    String key : archetypeRequiredParameters.stringPropertyNames()) {
      props.setProperty(key,archetypeRequiredParameters.getProperty(key));
    }
  }
  MavenProject parent=maven.readProject(getDefaultArchetypePom(new File(targetDir,""String_Node_Str"")));
  System.setProperties((Properties)sysProps.clone());
  maven.execute(parent,Collections.singletonList(""String_Node_Str""),eventMonitor,new ConsoleDownloadMonitor(),props,targetDir);
  System.setProperties((Properties)sysProps.clone());
  targetDir=new File(targetDir,props.getProperty(""String_Node_Str""));
  MavenProject prj=maven.readProject(new File(targetDir,""String_Node_Str""));
  maven.execute(prj,Collections.singletonList(""String_Node_Str""),eventMonitor,new ConsoleDownloadMonitor(),new Properties(),targetDir);
}","protected void testArchetype(String groupId,String artifactId,String version,Properties archetypeRequiredParameters) throws Exception {
  File targetDir=new File(baseDir,""String_Node_Str"" + artifactId);
  FileUtils.deleteDirectory(targetDir);
  targetDir.mkdirs();
  EventMonitor eventMonitor=new DefaultEventMonitor(new PlexusLoggerAdapter(new MavenEmbedderConsoleLogger()));
  Properties props=new Properties();
  props.setProperty(""String_Node_Str"",groupId);
  props.setProperty(""String_Node_Str"",artifactId);
  props.setProperty(""String_Node_Str"",version);
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",UUID.randomUUID().toString());
  props.setProperty(""String_Node_Str"",targetDir.getAbsolutePath());
  props.setProperty(""String_Node_Str"",targetDir.getAbsolutePath());
  if (archetypeRequiredParameters != null) {
    for (Enumeration e=archetypeRequiredParameters.propertyNames(); e.hasMoreElements(); ) {
      String key=(String)e.nextElement();
      props.setProperty(key,archetypeRequiredParameters.getProperty(key));
    }
  }
  MavenProject parent=maven.readProject(getDefaultArchetypePom(new File(targetDir,""String_Node_Str"")));
  System.setProperties((Properties)sysProps.clone());
  maven.execute(parent,Collections.singletonList(""String_Node_Str""),eventMonitor,new ConsoleDownloadMonitor(),props,targetDir);
  System.setProperties((Properties)sysProps.clone());
  targetDir=new File(targetDir,props.getProperty(""String_Node_Str""));
  MavenProject prj=maven.readProject(new File(targetDir,""String_Node_Str""));
  maven.execute(prj,Collections.singletonList(""String_Node_Str""),eventMonitor,new ConsoleDownloadMonitor(),new Properties(),targetDir);
}",0.970166379804934
44740,"@Override public void initialize(Subject sub,CallbackHandler handler,Map sharedState,Map options){
  super.initialize(sub,handler,options);
  usersFile=(String)options.get(USER_FILE) + ""String_Node_Str"";
  if (debug) {
    LOG.debug(""String_Node_Str"" + debug + ""String_Node_Str""+ usersFile);
  }
}","public void initialize(Subject sub,CallbackHandler handler,Map sharedState,Map options){
  super.initialize(sub,handler,options);
  usersFile=(String)options.get(USER_FILE) + ""String_Node_Str"";
  if (debug) {
    LOG.debug(""String_Node_Str"" + debug + ""String_Node_Str""+ usersFile);
  }
}",0.9828767123287672
44741,"public void init(){
  createListener();
}","public void init(){
  getListener();
}",0.9367088607594936
44742,"public BundleStateListener getListener(){
  if (listener == null) {
    listener=createListener();
  }
  return listener;
}","public synchronized BundleStateListener getListener(){
  if (listener == null) {
    listener=createListener();
  }
  return listener;
}",0.9498069498069498
44743,"public void setFeaturesServiceRegistry(FeaturesRegistry featuresRegistry){
  this.featuresRegistry=featuresRegistry;
}","public void setFeaturesServiceRegistry(FeaturesRegistry featuresRegistry){
  this.featuresRegistry=featuresRegistry;
  this.featuresRegistry.setFeaturesService(this);
}",0.8251748251748252
44744,"public void init() throws Exception {
  if (managementAgent == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (namingStrategy == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","public void init() throws Exception {
  if (managementAgent == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (namingStrategy == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mbeanServer != null) {
    registerMBeanServer(mbeanServer,null);
  }
}",0.8582089552238806
44745,"public void registerMBeanServer(MBeanServer mbeanServer,Map props) throws Exception {
  if (mbeanServer != null) {
    mbeanServerInitialized=true;
  }
  managementAgent.register(this,namingStrategy.getObjectName(this));
  for (  ManagedRepository repository : repositories.values()) {
    managementAgent.register(repository,namingStrategy.getObjectName(repository));
  }
  for (  ManagedFeature feature : availableFeatures.values()) {
    managementAgent.register(feature,namingStrategy.getObjectName(feature));
  }
  for (  ManagedFeature feature : installedFeatures.values()) {
    installedFeatures.put(feature.getId(),feature);
    managementAgent.register(feature,namingStrategy.getObjectName(feature,true));
  }
}","public void registerMBeanServer(MBeanServer mbeanServer,Map props) throws Exception {
  if (mbeanServer != null) {
    this.mbeanServer=mbeanServer;
  }
  if (managementAgent == null) {
    return;
  }
  mbeanServerInitialized=true;
  managementAgent.register(this,namingStrategy.getObjectName(this));
  for (  ManagedRepository repository : repositories.values()) {
    managementAgent.register(repository,namingStrategy.getObjectName(repository));
  }
  for (  ManagedFeature feature : availableFeatures.values()) {
    managementAgent.register(feature,namingStrategy.getObjectName(feature));
  }
  for (  ManagedFeature feature : installedFeatures.values()) {
    installedFeatures.put(feature.getId(),feature);
    managementAgent.register(feature,namingStrategy.getObjectName(feature,true));
  }
}",0.9415627051871308
44746,"public void bundleChanged(BundleEvent event){
  if (event.getType() == BundleEvent.RESOLVED) {
    executor.execute(new Runnable(){
      public void run(){
        retryPendingStartBundles();
      }
    }
);
  }
}","public void bundleChanged(BundleEvent event){
  if (event.getType() == BundleEvent.RESOLVED) {
    executor.execute(new Runnable(){
      public void run(){
        retryPendingStartBundles();
      }
    }
);
  }
 else   if (event.getType() == BundleEvent.UNINSTALLED) {
    pendingStartBundles.remove(event.getBundle());
  }
}",0.7882136279926335
44747,"private void rescheduleStart(Bundle bundle){
synchronized (pendingStartBundles) {
    pendingStartBundles.add(bundle);
    if (bundleListener == null) {
      bundleListener=new BundleListener(){
        public void bundleChanged(        BundleEvent event){
          if (event.getType() == BundleEvent.RESOLVED) {
            executor.execute(new Runnable(){
              public void run(){
                retryPendingStartBundles();
              }
            }
);
          }
        }
      }
;
      getContext().addBundleListener(bundleListener);
    }
  }
}","private void rescheduleStart(Bundle bundle){
synchronized (pendingStartBundles) {
    pendingStartBundles.add(bundle);
    if (bundleListener == null) {
      bundleListener=new BundleListener(){
        public void bundleChanged(        BundleEvent event){
          if (event.getType() == BundleEvent.RESOLVED) {
            executor.execute(new Runnable(){
              public void run(){
                retryPendingStartBundles();
              }
            }
);
          }
 else           if (event.getType() == BundleEvent.UNINSTALLED) {
            pendingStartBundles.remove(event.getBundle());
          }
        }
      }
;
      getContext().addBundleListener(bundleListener);
    }
  }
}",0.8922108575924469
44748,"public <P extends Page>P getPage(String url) throws FailingHttpStatusCodeException, MalformedURLException, IOException {
  String hostAddress=MessageFormat.format(""String_Node_Str"",getServer().getPort());
  P page=webClient.getPage(hostAddress + url);
  return page;
}","public <P extends Page>P getPage(String url) throws FailingHttpStatusCodeException, MalformedURLException, IOException {
  String hostAddress=MessageFormat.format(""String_Node_Str"",getServer().getPort());
  P page=webClient.<P>getPage(hostAddress + url);
  return page;
}",0.9944341372912802
44749,"public <P extends Page>P getPage(String url) throws FailingHttpStatusCodeException, MalformedURLException, IOException {
  return environment.getPage(url);
}","public <P extends Page>P getPage(String url) throws FailingHttpStatusCodeException, MalformedURLException, IOException {
  return environment.<P>getPage(url);
}",0.9905362776025236
44750,"public Integer getPermission(Integer func){
  Integer n=this.permissions.get(func);
  if (n == null)   return MAX_LEVEL;
  return n;
}","public Integer getPermission(Integer func){
  Integer n=this.permissions.get(new Long(func));
  if (n == null)   return MAX_LEVEL;
  return n;
}",0.9640287769784172
44751,"@Override public Player getUserPlayer(User user,Long server){
  UserServer userServer;
  Player player;
  try {
    userServer=userServerDAO.findByUserAndServer(user.getKey(),server);
  }
 catch (  EntityDoesNotExistsException e) {
    log.trace(""String_Node_Str"",server.toString(),user.getLoginId());
    return null;
  }
  if (userServer.getPlayer() == null || userServer.getPlayer().equals(0)) {
    log.trace(""String_Node_Str"",user.getLoginId());
    return null;
  }
  try {
    player=playerDAO.get(userServer.getPlayer());
  }
 catch (  EntityDoesNotExistsException e) {
    log.trace(""String_Node_Str"",userServer.getPlayer());
    return null;
  }
  return player;
}","@Override public Player getUserPlayer(User user,Long server){
  UserServer userServer;
  Player player;
  try {
    userServer=userServerDAO.findByUserAndServer(user.getKey(),server);
  }
 catch (  EntityDoesNotExistsException e) {
    log.warn(""String_Node_Str"",server.toString(),user.getLoginId());
    return null;
  }
  if (userServer.getPlayer() == null || userServer.getPlayer().equals(0)) {
    log.warn(""String_Node_Str"",user.getLoginId());
    return null;
  }
  try {
    player=playerDAO.get(userServer.getPlayer());
  }
 catch (  EntityDoesNotExistsException e) {
    log.warn(""String_Node_Str"",userServer.getPlayer());
    return null;
  }
  return player;
}",0.9799256505576208
44752,"@Override public boolean hasPermission(Long server,Integer level){
  Subject subject=this.getCurrentUser();
  if (!subject.isAuthenticated())   return false;
  if (subject.isSuperAdmin())   return true;
  Player player=getSubjectPlayer(server);
  if (player != null && player.getLevel() != null && player.getLevel().intValue() >= level.intValue()) {
    return true;
  }
  return false;
}","@Override public boolean hasPermission(Long server,Integer level){
  Subject subject=this.getCurrentUser();
  if (!subject.isAuthenticated())   return false;
  if (subject.isSuperAdmin())   return true;
  Player player=getSubjectPlayer(server);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",player.getKey(),player.getLevel());
    log.debug(""String_Node_Str"",level);
  }
  if (player != null && player.getLevel() != null && player.getLevel().intValue() >= level.intValue()) {
    return true;
  }
  return false;
}",0.8453159041394336
44753,"protected void createCache(String namespace){
  try {
    this.cacheImpl=CacheFactory.getInstance().getCache(""String_Node_Str"");
  }
 catch (  UnavailableCacheException e) {
    this.cacheImpl=null;
  }
}","protected void createCache(String namespace){
  try {
    this.cacheImpl=CacheFactory.getInstance().getCache(namespace);
  }
 catch (  UnavailableCacheException e) {
    this.cacheImpl=null;
  }
}",0.945
44754,"@Override public User get(String loginId) throws EntityDoesNotExistsException {
  User user=(User)cacheGet(loginId);
  if (user != null)   return user;
  user=this.impl.get(loginId);
  cacheUser(user);
  return user;
}","@Override public User get(String loginId) throws EntityDoesNotExistsException {
  User user=(User)cacheGet(""String_Node_Str"" + loginId);
  if (user != null)   return user;
  user=this.impl.get(loginId);
  cacheUser(user);
  return user;
}",0.956140350877193
44755,"private void cacheUser(User user){
  cachePut(user.getLoginId(),user,10);
  cachePut(""String_Node_Str"" + user.getKey().toString(),user,10);
}","private void cacheUser(User user){
  cachePut(""String_Node_Str"" + user.getLoginId(),user,10);
  cachePut(""String_Node_Str"" + user.getKey().toString(),user,10);
}",0.933774834437086
44756,"@Override public Subject getCurrentUser(){
  return context.getSubject();
}","@Override public Subject getCurrentUser(){
  try {
    return getContext().getSubject();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e.getClass().getName(),e.getMessage());
    return new AnonymousSubject();
  }
}",0.4393442622950819
44757,"private void saveLocal(Subject subject){
  context.setSubject(subject);
}","private void saveLocal(Subject subject){
  try {
    getContext().setSubject(subject);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e.getClass().getName(),e.getMessage());
  }
}",0.5413533834586466
44758,"@Override public void cleanUp(){
  try {
    context.removeSubject();
  }
 catch (  Exception e) {
  }
}","@Override public void cleanUp(){
  try {
    getContext().removeSubject();
  }
 catch (  Exception e) {
  }
}",0.9671361502347418
44759,"@Deprecated protected PlayerInfo processEventInfo(Object o) throws Exception {
  Object[] values=((Object[])o);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"",Arrays.toString(values));
  String event=(String)values[0];
  PlayerInfo playerInfo=new PlayerInfo(event);
  playerInfo.setName((String)values[1]);
  playerInfo.setHash((String)values[2]);
  playerInfo.setClientId(parseLong(values[3]));
  playerInfo.setIp((String)values[4]);
  playerInfo.setLevel(parseLong(values[5]));
  if (values.length > 6) {
    Date updated;
    if (values[6] instanceof Date) {
      updated=(Date)values[6];
    }
 else {
      try {
        updated=DateUtils.timestampToDate((Long)values[6]);
      }
 catch (      Exception e) {
        log.error(e.getMessage());
        updated=new Date();
      }
    }
    playerInfo.setUpdated(updated);
  }
  if (Events.BAN.equals(event)) {
    Object[] data=(Object[])values[7];
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"",Arrays.toString(data));
    PenaltyInfo penalty=new PenaltyInfo();
    penalty.setType(Penalty.BAN);
    penalty.setCreated(DateUtils.timestampToDate(parseLong(data[1])));
    penalty.setDuration(parseLong(data[2]));
    penalty.setReason((String)data[3]);
    penalty.setAdmin((String)data[4]);
    penalty.setAdminId(smartCast(data[5]));
    playerInfo.setPenaltyInfo(penalty);
  }
 else   if (Events.ADDNOTE.equals(event)) {
    Object[] data=(Object[])values[7];
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"",Arrays.toString(data));
    PenaltyInfo penalty=new PenaltyInfo();
    penalty.setType(Penalty.NOTICE);
    penalty.setCreated(DateUtils.timestampToDate(parseLong(data[0])));
    penalty.setReason((String)data[1]);
    penalty.setAdmin((String)data[2]);
    penalty.setAdminId(smartCast(data[3]));
    playerInfo.setPenaltyInfo(penalty);
  }
  return playerInfo;
}","@Deprecated protected PlayerInfo processEventInfo(Object o) throws Exception {
  Object[] values=((Object[])o);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"",Arrays.toString(values));
  String event=(String)values[0];
  PlayerInfo playerInfo=new PlayerInfo(event);
  playerInfo.setName((String)values[1]);
  playerInfo.setHash((String)values[2]);
  playerInfo.setClientId(parseLong(values[3]));
  playerInfo.setIp((String)values[4]);
  playerInfo.setLevel(parseLong(values[5]));
  if (values.length > 6) {
    Date updated;
    if (values[6] instanceof Date) {
      updated=(Date)values[6];
    }
 else {
      try {
        updated=DateUtils.timestampToDate(parseLong(values[6]));
      }
 catch (      Exception e) {
        log.error(e.getMessage());
        updated=new Date();
      }
    }
    playerInfo.setUpdated(updated);
  }
  if (Events.BAN.equals(event)) {
    Object[] data=(Object[])values[7];
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"",Arrays.toString(data));
    PenaltyInfo penalty=new PenaltyInfo();
    penalty.setType(Penalty.BAN);
    penalty.setCreated(DateUtils.timestampToDate(parseLong(data[1])));
    penalty.setDuration(parseLong(data[2]));
    penalty.setReason((String)data[3]);
    penalty.setAdmin((String)data[4]);
    penalty.setAdminId(smartCast(data[5]));
    playerInfo.setPenaltyInfo(penalty);
  }
 else   if (Events.ADDNOTE.equals(event)) {
    Object[] data=(Object[])values[7];
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"",Arrays.toString(data));
    PenaltyInfo penalty=new PenaltyInfo();
    penalty.setType(Penalty.NOTICE);
    penalty.setCreated(DateUtils.timestampToDate(parseLong(data[0])));
    penalty.setReason((String)data[1]);
    penalty.setAdmin((String)data[2]);
    penalty.setAdminId(smartCast(data[3]));
    playerInfo.setPenaltyInfo(penalty);
  }
  return playerInfo;
}",0.9975993598292878
44760,"/** 
 * Updates the name of a server given its uid. <p> Invoked by the servers when they change their public server name.
 * @param key the server uid.
 * @param name the server's new name.
 * @param version plugin version number
 * @param permission allowed actions for server admins
 * @param remoteAddr the server's remote address.
 * @since 0.5
 */
public void updateName(String key,String name,String version,Integer permission,String remoteAddr){
  try {
    Server server=ServerManager.getAuthorizedServer(key,remoteAddr,name);
    server.setName(name);
    server.setPermission(permission);
    server.setUpdated(new Date());
    server.setPluginVersion(version);
    serverDAO.save(server);
  }
 catch (  UnauthorizedUpdateException e) {
    try {
      MailManager.getInstance().sendAdminMail(""String_Node_Str"",e.getMessage(),null);
    }
 catch (    Exception me) {
      log.error(me.getMessage());
    }
    log.error(e.getMessage());
  }
catch (  Exception e) {
    log.error(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.error(w.getBuffer().toString());
  }
}","/** 
 * Updates the name of a server given its uid. <p> Invoked by the servers when they change their public server name.
 * @param key the server uid.
 * @param name the server's new name.
 * @param version plugin version number
 * @param permission allowed actions for server admins
 * @param remoteAddr the server's remote address.
 * @since 0.5
 */
public void updateName(String key,String name,String version,Integer permission,String remoteAddr){
  try {
    Server server=ServerManager.getAuthorizedServer(key,remoteAddr,name);
    server.setName(name);
    server.setRemotePermission(permission);
    server.setUpdated(new Date());
    server.setPluginVersion(version);
    serverDAO.save(server);
  }
 catch (  UnauthorizedUpdateException e) {
    try {
      MailManager.getInstance().sendAdminMail(""String_Node_Str"",e.getMessage(),null);
    }
 catch (    Exception me) {
      log.error(me.getMessage());
    }
    log.error(e.getMessage());
  }
catch (  Exception e) {
    log.error(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.error(w.getBuffer().toString());
  }
}",0.9973637961335676
44761,"public void addServer(String name,String admin,String uid,String ip,boolean disabled){
  Server server=new Server();
  server.setAdminEmail(admin);
  server.setCreated(new Date());
  server.setUid(uid);
  server.setName(name);
  server.setOnlinePlayers(0);
  server.setAddress(ip);
  server.setDisabled(disabled);
  server.setPermission(0);
  server.setMaxBanDuration(RemotePermissions.DEFAULT_MAXBAN);
  server.setTotalPlayers(0);
  serverDAO.save(server);
}","public void addServer(String name,String admin,String uid,String ip,boolean disabled){
  Server server=new Server();
  server.setAdminEmail(admin);
  server.setCreated(new Date());
  server.setUid(uid);
  server.setName(name);
  server.setOnlinePlayers(0);
  server.setAddress(ip);
  server.setDisabled(disabled);
  server.setRemotePermission(0);
  server.setMaxBanDuration(RemotePermissions.DEFAULT_MAXBAN);
  server.setTotalPlayers(0);
  serverDAO.save(server);
}",0.9935064935064936
44762,"public Integer getAdminLevel(){
  if (this.permissions == null || this.permissions.size() == 0)   return 100;
  List<Integer> levels=new ArrayList<Integer>(this.permissions.values());
  Collections.sort(levels);
  return levels.get(0);
}","public Integer getAdminLevel(){
  if (this.permissions == null || this.permissions.size() == 0)   return MAX_LEVEL;
  List<Integer> levels=new ArrayList<Integer>(this.permissions.values());
  Collections.sort(levels);
  return levels.get(0);
}",0.975
44763,"public Integer getPermission(){
  return permission;
}","public Integer getPermission(Integer func){
  Integer n=this.permissions.get(func);
  if (n == null)   return MAX_LEVEL;
  return n;
}",0.4787234042553192
44764,"@Override public void save(Server server){
  String sql;
  if (server.getKey() == null) {
    sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  Connection conn=null;
  try {
    conn=ConnectionFactory.getMasterConnection();
    PreparedStatement st=conn.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
    st.setString(1,server.getUid());
    st.setString(2,server.getName());
    st.setString(3,server.getAdminEmail());
    if (server.getCreated() == null)     server.setCreated(new java.util.Date());
    st.setTimestamp(4,new Timestamp(server.getCreated().getTime()));
    if (server.getUpdated() == null) {
      st.setNull(5,Types.TIMESTAMP);
    }
 else {
      st.setTimestamp(5,new Timestamp(server.getUpdated().getTime()));
    }
    st.setInt(6,server.getOnlinePlayers());
    st.setString(7,server.getAddress());
    st.setString(8,server.getPluginVersion());
    st.setInt(9,server.getMaxLevel());
    if (server.getDirty() == null)     server.setDirty(false);
    st.setBoolean(10,server.getDirty());
    st.setInt(11,server.getPermission());
    if (server.getDisabled() == null)     server.setDisabled(false);
    st.setBoolean(12,server.getDisabled());
    st.setLong(13,server.getMaxBanDuration());
    st.setInt(14,server.getTotalPlayers());
    if (server.getKey() != null)     st.setLong(15,server.getKey());
    st.executeUpdate();
    if (server.getKey() == null) {
      ResultSet rs=st.getGeneratedKeys();
      if (rs != null && rs.next()) {
        server.setKey(rs.getLong(1));
      }
 else {
        logger.warn(""String_Node_Str"",server.getUid());
      }
    }
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    logger.trace(w.getBuffer().toString());
  }
 finally {
    try {
      if (conn != null)       conn.close();
    }
 catch (    Exception e) {
    }
  }
}","@Override public void save(Server server){
  String sql;
  if (server.getKey() == null) {
    sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  Connection conn=null;
  try {
    conn=ConnectionFactory.getMasterConnection();
    PreparedStatement st=conn.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
    st.setString(1,server.getUid());
    st.setString(2,server.getName());
    st.setString(3,server.getAdminEmail());
    if (server.getCreated() == null)     server.setCreated(new java.util.Date());
    st.setTimestamp(4,new Timestamp(server.getCreated().getTime()));
    if (server.getUpdated() == null) {
      st.setNull(5,Types.TIMESTAMP);
    }
 else {
      st.setTimestamp(5,new Timestamp(server.getUpdated().getTime()));
    }
    st.setInt(6,server.getOnlinePlayers());
    st.setString(7,server.getAddress());
    st.setString(8,server.getPluginVersion());
    st.setInt(9,server.getMaxLevel());
    if (server.getDirty() == null)     server.setDirty(false);
    st.setBoolean(10,server.getDirty());
    st.setInt(11,server.getRemotePermission());
    if (server.getDisabled() == null)     server.setDisabled(false);
    st.setBoolean(12,server.getDisabled());
    st.setLong(13,server.getMaxBanDuration());
    st.setInt(14,server.getTotalPlayers());
    if (server.getKey() != null)     st.setLong(15,server.getKey());
    st.executeUpdate();
    if (server.getKey() == null) {
      ResultSet rs=st.getGeneratedKeys();
      if (rs != null && rs.next()) {
        server.setKey(rs.getLong(1));
      }
 else {
        logger.warn(""String_Node_Str"",server.getUid());
      }
    }
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    logger.trace(w.getBuffer().toString());
  }
 finally {
    try {
      if (conn != null)       conn.close();
    }
 catch (    Exception e) {
    }
  }
}",0.998829496683574
44765,"private void loadServer(Server server,ResultSet rs) throws SQLException {
  server.setKey(rs.getLong(""String_Node_Str""));
  server.setUid(rs.getString(""String_Node_Str""));
  server.setName(rs.getString(""String_Node_Str""));
  server.setAdminEmail(rs.getString(""String_Node_Str""));
  server.setCreated(rs.getTimestamp(""String_Node_Str""));
  server.setUpdated(rs.getTimestamp(""String_Node_Str""));
  server.setOnlinePlayers(rs.getInt(""String_Node_Str""));
  server.setAddress(rs.getString(""String_Node_Str""));
  server.setPluginVersion(rs.getString(""String_Node_Str""));
  server.setMaxLevel(rs.getInt(""String_Node_Str""));
  server.setDirty(rs.getBoolean(""String_Node_Str""));
  server.setPermission(rs.getInt(""String_Node_Str""));
  server.setDisabled(rs.getBoolean(""String_Node_Str""));
  server.setTotalPlayers(rs.getInt(""String_Node_Str""));
  server.setMaxBanDuration(rs.getLong(""String_Node_Str""));
}","private void loadServer(Server server,ResultSet rs) throws SQLException {
  server.setKey(rs.getLong(""String_Node_Str""));
  server.setUid(rs.getString(""String_Node_Str""));
  server.setName(rs.getString(""String_Node_Str""));
  server.setAdminEmail(rs.getString(""String_Node_Str""));
  server.setCreated(rs.getTimestamp(""String_Node_Str""));
  server.setUpdated(rs.getTimestamp(""String_Node_Str""));
  server.setOnlinePlayers(rs.getInt(""String_Node_Str""));
  server.setAddress(rs.getString(""String_Node_Str""));
  server.setPluginVersion(rs.getString(""String_Node_Str""));
  server.setMaxLevel(rs.getInt(""String_Node_Str""));
  server.setDirty(rs.getBoolean(""String_Node_Str""));
  server.setRemotePermission(rs.getInt(""String_Node_Str""));
  server.setDisabled(rs.getBoolean(""String_Node_Str""));
  server.setTotalPlayers(rs.getInt(""String_Node_Str""));
  server.setMaxBanDuration(rs.getLong(""String_Node_Str""));
}",0.996662958843159
44766,"@Override public String doProcess(ResolverContext context) throws ProcessorException {
  IDDBService app=(IDDBService)context.getServletContext().getAttribute(""String_Node_Str"");
  HttpServletRequest req=context.getRequest();
  String id=context.getParameter(""String_Node_Str"");
  Player player;
  try {
    player=app.getPlayer(id);
  }
 catch (  Exception e) {
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.error(w.getBuffer().toString());
    throw new HttpError(HttpServletResponse.SC_NOT_FOUND);
  }
  Server server;
  try {
    server=app.getServer(player.getServer(),true);
  }
 catch (  EntityDoesNotExistsException e) {
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.error(w.getBuffer().toString());
    throw new ProcessorException(e);
  }
  Integer minLevel=server.getAdminLevel();
  Boolean hasAdmin=UserServiceFactory.getUserService().hasAnyServer(minLevel);
  Boolean hasServerAdmin=UserServiceFactory.getUserService().hasPermission(server.getKey());
  Boolean canApplyAction=false;
  Player currentPlayer=UserServiceFactory.getUserService().getSubjectPlayer(server.getKey());
  if (currentPlayer != null && (currentPlayer.getLevel() > player.getLevel())) {
    canApplyAction=true;
  }
  List<NoticeViewBean> notices=null;
  List<PenaltyEventViewBean> events=null;
  PlayerViewBean infoView=new PlayerViewBean();
  infoView.setKey(player.getKey().toString());
  infoView.setName(player.getNickname());
  if (hasAdmin) {
    infoView.setGuid(player.getGuid());
    infoView.setIp(player.getIp());
  }
 else {
    infoView.setIp(Functions.maskIpAddress(player.getIp()));
  }
  infoView.setUpdated(player.getUpdated());
  infoView.setServer(server);
  if (hasAdmin) {
    Penalty ban=app.getLastPenalty(player);
    if (ban != null) {
      PenaltyViewBean penaltyViewBean=new PenaltyViewBean();
      penaltyViewBean.setKey(ban.getKey());
      penaltyViewBean.setCreated(ban.getCreated());
      penaltyViewBean.setDuration(ban.getDuration());
      penaltyViewBean.setReason(ban.getReason());
      if (ban.getAdmin() != null) {
        try {
          Player admin=app.getPlayer(ban.getAdmin());
          penaltyViewBean.setAdmin(admin.getNickname());
        }
 catch (        EntityDoesNotExistsException e) {
          log.warn(e.getMessage());
        }
      }
      infoView.setBanInfo(penaltyViewBean);
    }
    List<Penalty> pn=app.getActivePenalties(player.getKey(),Penalty.NOTICE);
    notices=new ArrayList<NoticeViewBean>();
    for (    Penalty notice : pn) {
      NoticeViewBean noticeViewBean=new NoticeViewBean();
      noticeViewBean.setKey(notice.getKey());
      noticeViewBean.setCreated(notice.getCreated());
      noticeViewBean.setReason(notice.getReason());
      if (notice.getAdmin() != null) {
        try {
          Player admin=app.getPlayer(notice.getAdmin());
          noticeViewBean.setAdmin(admin.getNickname());
        }
 catch (        EntityDoesNotExistsException e) {
          log.warn(e.getMessage());
        }
      }
      notices.add(noticeViewBean);
    }
    List<PenaltyHistory> historyList=app.listPenaltyEvents(player.getKey(),10);
    events=new ArrayList<PenaltyEventViewBean>();
    for (    PenaltyHistory history : historyList) {
      PenaltyEventViewBean event=new PenaltyEventViewBean();
      event.setStatus(MessageResource.getMessage(""String_Node_Str"" + history.getStatus().toString()));
      event.setUpdated(history.getUpdated());
      User user=null;
      try {
        user=UserServiceFactory.getUserService().getUser(history.getAdminId());
        Player pa=UserServiceFactory.getUserService().getUserPlayer(user,server.getKey());
        if (pa != null) {
          event.setAdmin(pa.getNickname());
        }
 else {
          event.setAdmin(user.getLoginId());
        }
      }
 catch (      EntityDoesNotExistsException e) {
        event.setAdmin(""String_Node_Str"");
      }
      try {
        Penalty pe=app.getPenalty(history.getPenaltyId());
        if (pe.getType().equals(Penalty.BAN)) {
          if (history.getFuncId() == PenaltyHistory.FUNC_ID_ADD) {
            event.setType(MessageResource.getMessage(""String_Node_Str""));
          }
 else {
            event.setType(MessageResource.getMessage(""String_Node_Str""));
          }
        }
 else {
          if (history.getFuncId() == PenaltyHistory.FUNC_ID_ADD) {
            event.setType(MessageResource.getMessage(""String_Node_Str""));
          }
 else {
            event.setType(MessageResource.getMessage(""String_Node_Str""));
          }
        }
      }
 catch (      EntityDoesNotExistsException e) {
        event.setType(""String_Node_Str"");
      }
      events.add(event);
    }
  }
 else {
    if (player.getBanInfo() != null) {
      infoView.setBanInfo(new PenaltyViewBean(true));
    }
  }
  infoView.setAliases(new ArrayList<AliasResult>());
  infoView.setClientId(player.getClientId() != null ? ""String_Node_Str"" + player.getClientId().toString() : ""String_Node_Str"");
  infoView.setPlaying(player.isConnected());
  if (hasAdmin && player.getLevel() != null) {
    infoView.setLevel(player.getLevel().toString());
  }
 else {
    infoView.setLevel(""String_Node_Str"");
  }
  req.setAttribute(""String_Node_Str"",infoView);
  req.setAttribute(""String_Node_Str"",events);
  req.setAttribute(""String_Node_Str"",server);
  req.setAttribute(""String_Node_Str"",notices);
  req.setAttribute(""String_Node_Str"",hasAdmin);
  req.setAttribute(""String_Node_Str"",hasServerAdmin);
  req.setAttribute(""String_Node_Str"",server.getPermission());
  req.setAttribute(""String_Node_Str"",canApplyAction);
  return null;
}","@Override public String doProcess(ResolverContext context) throws ProcessorException {
  IDDBService app=(IDDBService)context.getServletContext().getAttribute(""String_Node_Str"");
  HttpServletRequest req=context.getRequest();
  String id=context.getParameter(""String_Node_Str"");
  Player player;
  try {
    player=app.getPlayer(id);
  }
 catch (  Exception e) {
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.error(w.getBuffer().toString());
    throw new HttpError(HttpServletResponse.SC_NOT_FOUND);
  }
  Server server;
  try {
    server=app.getServer(player.getServer(),true);
  }
 catch (  EntityDoesNotExistsException e) {
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.error(w.getBuffer().toString());
    throw new ProcessorException(e);
  }
  Integer minLevel=server.getAdminLevel();
  Boolean hasAdmin=UserServiceFactory.getUserService().hasAnyServer(minLevel);
  Boolean hasServerAdmin=UserServiceFactory.getUserService().hasPermission(server.getKey());
  Boolean canApplyAction=false;
  Player currentPlayer=UserServiceFactory.getUserService().getSubjectPlayer(server.getKey());
  if (currentPlayer != null && (currentPlayer.getLevel() > player.getLevel())) {
    canApplyAction=true;
  }
  List<NoticeViewBean> notices=null;
  List<PenaltyEventViewBean> events=null;
  PlayerViewBean infoView=new PlayerViewBean();
  infoView.setKey(player.getKey().toString());
  infoView.setName(player.getNickname());
  if (hasAdmin) {
    infoView.setGuid(player.getGuid());
    infoView.setIp(player.getIp());
  }
 else {
    infoView.setIp(Functions.maskIpAddress(player.getIp()));
  }
  infoView.setUpdated(player.getUpdated());
  infoView.setServer(server);
  if (hasAdmin) {
    Penalty ban=app.getLastPenalty(player);
    if (ban != null) {
      PenaltyViewBean penaltyViewBean=new PenaltyViewBean();
      penaltyViewBean.setKey(ban.getKey());
      penaltyViewBean.setCreated(ban.getCreated());
      penaltyViewBean.setDuration(ban.getDuration());
      penaltyViewBean.setReason(ban.getReason());
      if (ban.getAdmin() != null) {
        try {
          Player admin=app.getPlayer(ban.getAdmin());
          penaltyViewBean.setAdmin(admin.getNickname());
        }
 catch (        EntityDoesNotExistsException e) {
          log.warn(e.getMessage());
        }
      }
      infoView.setBanInfo(penaltyViewBean);
    }
    List<Penalty> pn=app.getActivePenalties(player.getKey(),Penalty.NOTICE);
    notices=new ArrayList<NoticeViewBean>();
    for (    Penalty notice : pn) {
      NoticeViewBean noticeViewBean=new NoticeViewBean();
      noticeViewBean.setKey(notice.getKey());
      noticeViewBean.setCreated(notice.getCreated());
      noticeViewBean.setReason(notice.getReason());
      if (notice.getAdmin() != null) {
        try {
          Player admin=app.getPlayer(notice.getAdmin());
          noticeViewBean.setAdmin(admin.getNickname());
        }
 catch (        EntityDoesNotExistsException e) {
          log.warn(e.getMessage());
        }
      }
      notices.add(noticeViewBean);
    }
    List<PenaltyHistory> historyList=app.listPenaltyEvents(player.getKey(),10);
    events=new ArrayList<PenaltyEventViewBean>();
    for (    PenaltyHistory history : historyList) {
      PenaltyEventViewBean event=new PenaltyEventViewBean();
      event.setStatus(MessageResource.getMessage(""String_Node_Str"" + history.getStatus().toString()));
      event.setUpdated(history.getUpdated());
      User user=null;
      try {
        user=UserServiceFactory.getUserService().getUser(history.getAdminId());
        Player pa=UserServiceFactory.getUserService().getUserPlayer(user,server.getKey());
        if (pa != null) {
          event.setAdmin(pa.getNickname());
        }
 else {
          event.setAdmin(user.getLoginId());
        }
      }
 catch (      EntityDoesNotExistsException e) {
        event.setAdmin(""String_Node_Str"");
      }
      try {
        Penalty pe=app.getPenalty(history.getPenaltyId());
        if (pe.getType().equals(Penalty.BAN)) {
          if (history.getFuncId() == PenaltyHistory.FUNC_ID_ADD) {
            event.setType(MessageResource.getMessage(""String_Node_Str""));
          }
 else {
            event.setType(MessageResource.getMessage(""String_Node_Str""));
          }
        }
 else {
          if (history.getFuncId() == PenaltyHistory.FUNC_ID_ADD) {
            event.setType(MessageResource.getMessage(""String_Node_Str""));
          }
 else {
            event.setType(MessageResource.getMessage(""String_Node_Str""));
          }
        }
      }
 catch (      EntityDoesNotExistsException e) {
        event.setType(""String_Node_Str"");
      }
      events.add(event);
    }
  }
 else {
    if (player.getBanInfo() != null) {
      infoView.setBanInfo(new PenaltyViewBean(true));
    }
  }
  infoView.setAliases(new ArrayList<AliasResult>());
  infoView.setClientId(player.getClientId() != null ? ""String_Node_Str"" + player.getClientId().toString() : ""String_Node_Str"");
  infoView.setPlaying(player.isConnected());
  if (hasAdmin && player.getLevel() != null) {
    infoView.setLevel(player.getLevel().toString());
  }
 else {
    infoView.setLevel(""String_Node_Str"");
  }
  req.setAttribute(""String_Node_Str"",infoView);
  req.setAttribute(""String_Node_Str"",events);
  req.setAttribute(""String_Node_Str"",server);
  req.setAttribute(""String_Node_Str"",notices);
  req.setAttribute(""String_Node_Str"",hasAdmin);
  req.setAttribute(""String_Node_Str"",hasServerAdmin);
  req.setAttribute(""String_Node_Str"",server.getRemotePermission());
  req.setAttribute(""String_Node_Str"",canApplyAction);
  return null;
}",0.9994697773064688
44767,"/** 
 * @param req
 * @param redirect
 * @param player
 * @param server
 * @param penalty
 * @return
 * @throws HttpError
 */
private String removePenalty(HttpServletRequest req,String redirect,Player player,Server server,Penalty penalty) throws HttpError {
  if (!penalty.getPlayer().equals(player.getKey())) {
    log.debug(""String_Node_Str"");
    Flash.error(req,MessageResource.getMessage(""String_Node_Str""));
    throw new HttpError(HttpServletResponse.SC_FORBIDDEN);
  }
  if (penalty.getType().equals(Penalty.BAN)) {
    if (!UserServiceFactory.getUserService().hasPermission(server.getKey(),server.getPermissions().get(RemotePermissions.REMOVE_BAN))) {
      log.debug(""String_Node_Str"");
      Flash.error(req,MessageResource.getMessage(""String_Node_Str""));
      throw new HttpError(HttpServletResponse.SC_FORBIDDEN);
    }
    if (!((server.getPermission() & RemotePermissions.REMOVE_BAN) == RemotePermissions.REMOVE_BAN)) {
      Flash.error(req,MessageResource.getMessage(""String_Node_Str""));
      return redirect;
    }
    Flash.info(req,MessageResource.getMessage(""String_Node_Str""));
    penalty.setSynced(false);
  }
 else {
    if (!UserServiceFactory.getUserService().hasPermission(server.getKey(),server.getPermissions().get(RemotePermissions.REMOVE_NOTICE))) {
      log.debug(""String_Node_Str"");
      Flash.error(req,MessageResource.getMessage(""String_Node_Str""));
      throw new HttpError(HttpServletResponse.SC_FORBIDDEN);
    }
    if (!((server.getPermission() & RemotePermissions.REMOVE_NOTICE) == RemotePermissions.REMOVE_NOTICE)) {
      Flash.warn(req,MessageResource.getMessage(""String_Node_Str""));
      penalty.setSynced(true);
      penalty.setActive(false);
    }
 else {
      Flash.info(req,MessageResource.getMessage(""String_Node_Str""));
      penalty.setSynced(false);
    }
  }
  return null;
}","/** 
 * @param req
 * @param redirect
 * @param player
 * @param server
 * @param penalty
 * @return
 * @throws HttpError
 */
private String removePenalty(HttpServletRequest req,String redirect,Player player,Server server,Penalty penalty) throws HttpError {
  if (!penalty.getPlayer().equals(player.getKey())) {
    log.debug(""String_Node_Str"");
    Flash.error(req,MessageResource.getMessage(""String_Node_Str""));
    throw new HttpError(HttpServletResponse.SC_FORBIDDEN);
  }
  if (penalty.getType().equals(Penalty.BAN)) {
    if (!UserServiceFactory.getUserService().hasPermission(server.getKey(),server.getPermission(RemotePermissions.REMOVE_BAN))) {
      log.debug(""String_Node_Str"");
      Flash.error(req,MessageResource.getMessage(""String_Node_Str""));
      throw new HttpError(HttpServletResponse.SC_FORBIDDEN);
    }
    if (!((server.getRemotePermission() & RemotePermissions.REMOVE_BAN) == RemotePermissions.REMOVE_BAN)) {
      Flash.error(req,MessageResource.getMessage(""String_Node_Str""));
      return redirect;
    }
    Flash.info(req,MessageResource.getMessage(""String_Node_Str""));
    penalty.setSynced(false);
  }
 else {
    if (!UserServiceFactory.getUserService().hasPermission(server.getKey(),server.getPermission(RemotePermissions.REMOVE_NOTICE))) {
      log.debug(""String_Node_Str"");
      Flash.error(req,MessageResource.getMessage(""String_Node_Str""));
      throw new HttpError(HttpServletResponse.SC_FORBIDDEN);
    }
    if (!((server.getRemotePermission() & RemotePermissions.REMOVE_NOTICE) == RemotePermissions.REMOVE_NOTICE)) {
      Flash.warn(req,MessageResource.getMessage(""String_Node_Str""));
      penalty.setSynced(true);
      penalty.setActive(false);
    }
 else {
      Flash.info(req,MessageResource.getMessage(""String_Node_Str""));
      penalty.setSynced(false);
    }
  }
  return null;
}",0.9929232444202504
44768,"/** 
 * @param req
 * @param penalty
 * @param type
 * @param reason
 * @param duration
 * @param durationType
 * @param redirect
 * @param player
 * @param server
 * @param currentPlayer
 * @return
 * @throws HttpError
 */
private String createPenalty(HttpServletRequest req,Penalty penalty,String type,String reason,String duration,String durationType,String redirect,Player player,Server server,Player currentPlayer) throws HttpError {
  penalty.setReason(reason);
  penalty.setPlayer(player.getKey());
  if (currentPlayer != null)   penalty.setAdmin(currentPlayer.getKey());
  if (type.equals(""String_Node_Str"")) {
    if (!UserServiceFactory.getUserService().hasPermission(server.getKey(),server.getPermissions().get(RemotePermissions.ADD_NOTICE))) {
      Flash.error(req,MessageResource.getMessage(""String_Node_Str""));
      throw new HttpError(HttpServletResponse.SC_FORBIDDEN);
    }
    penalty.setType(Penalty.NOTICE);
    if ((server.getPermission() & RemotePermissions.ADD_NOTICE) == RemotePermissions.ADD_NOTICE) {
      penalty.setSynced(false);
      penalty.setActive(false);
      Flash.info(req,MessageResource.getMessage(""String_Node_Str""));
    }
 else {
      penalty.setSynced(true);
      penalty.setActive(true);
      Flash.warn(req,MessageResource.getMessage(""String_Node_Str""));
    }
  }
 else {
    if (!UserServiceFactory.getUserService().hasPermission(server.getKey(),server.getPermissions().get(RemotePermissions.ADD_BAN))) {
      Flash.error(req,MessageResource.getMessage(""String_Node_Str""));
      throw new HttpError(HttpServletResponse.SC_FORBIDDEN);
    }
    Long dm=Functions.time2minutes(duration + durationType);
    if (dm.equals(0)) {
      Flash.error(req,MessageResource.getMessage(""String_Node_Str""));
      return redirect;
    }
    if ((server.getPermission() & RemotePermissions.ADD_BAN) == RemotePermissions.ADD_BAN) {
      penalty.setSynced(false);
      penalty.setActive(false);
      Flash.info(req,MessageResource.getMessage(""String_Node_Str""));
    }
 else {
      Flash.error(req,MessageResource.getMessage(""String_Node_Str""));
      return redirect;
    }
    penalty.setType(Penalty.BAN);
    penalty.setDuration(dm);
  }
  return null;
}","/** 
 * @param req
 * @param penalty
 * @param type
 * @param reason
 * @param duration
 * @param durationType
 * @param redirect
 * @param player
 * @param server
 * @param currentPlayer
 * @return
 * @throws HttpError
 */
private String createPenalty(HttpServletRequest req,Penalty penalty,String type,String reason,String duration,String durationType,String redirect,Player player,Server server,Player currentPlayer) throws HttpError {
  penalty.setReason(reason);
  penalty.setPlayer(player.getKey());
  if (currentPlayer != null)   penalty.setAdmin(currentPlayer.getKey());
  if (type.equals(""String_Node_Str"")) {
    if (!UserServiceFactory.getUserService().hasPermission(server.getKey(),server.getPermission(RemotePermissions.ADD_NOTICE))) {
      Flash.error(req,MessageResource.getMessage(""String_Node_Str""));
      throw new HttpError(HttpServletResponse.SC_FORBIDDEN);
    }
    penalty.setType(Penalty.NOTICE);
    if ((server.getRemotePermission() & RemotePermissions.ADD_NOTICE) == RemotePermissions.ADD_NOTICE) {
      penalty.setSynced(false);
      penalty.setActive(false);
      Flash.info(req,MessageResource.getMessage(""String_Node_Str""));
    }
 else {
      penalty.setSynced(true);
      penalty.setActive(true);
      Flash.warn(req,MessageResource.getMessage(""String_Node_Str""));
    }
  }
 else {
    if (!UserServiceFactory.getUserService().hasPermission(server.getKey(),server.getPermission(RemotePermissions.ADD_BAN))) {
      Flash.error(req,MessageResource.getMessage(""String_Node_Str""));
      throw new HttpError(HttpServletResponse.SC_FORBIDDEN);
    }
    Long dm=Functions.time2minutes(duration + durationType);
    if (dm.equals(0)) {
      Flash.error(req,MessageResource.getMessage(""String_Node_Str""));
      return redirect;
    }
    if ((server.getRemotePermission() & RemotePermissions.ADD_BAN) == RemotePermissions.ADD_BAN) {
      penalty.setSynced(false);
      penalty.setActive(false);
      Flash.info(req,MessageResource.getMessage(""String_Node_Str""));
    }
 else {
      Flash.error(req,MessageResource.getMessage(""String_Node_Str""));
      return redirect;
    }
    penalty.setType(Penalty.BAN);
    penalty.setDuration(dm);
  }
  return null;
}",0.9940935938209904
44769,"public void saveServerPermissions(Server server,List<ServerPermission> perm){
  if (server.getPermissions() == null)   server.setPermissions(new HashMap<Long,Integer>(4));
  for (  ServerPermission p : perm) {
    server.getPermissions().put(p.getFuncId().longValue(),p.getLevel());
  }
  serverDAO.savePermissions(server);
}","public void saveServerPermissions(Server server,List<ServerPermission> perm){
  if (server.getPermissions() == null)   server.setPermissions(new HashMap<Integer,Integer>(4));
  for (  ServerPermission p : perm) {
    server.getPermissions().put(p.getFuncId(),p.getLevel());
  }
  serverDAO.savePermissions(server);
}",0.9641185647425896
44770,"@Override public String toString(){
  StringBuilder b=new StringBuilder();
  b.append(this.nickname);
  b.append(""String_Node_Str"");
  b.append(guid);
  b.append(""String_Node_Str"");
  b.append(""String_Node_Str"").append(this.server);
  return b.toString();
}","@Override public String toString(){
  StringBuilder b=new StringBuilder();
  b.append(this.nickname);
  b.append(""String_Node_Str"").append(guid).append(""String_Node_Str"");
  b.append(""String_Node_Str"").append(level);
  b.append(""String_Node_Str"").append(level);
  b.append(""String_Node_Str"").append(server);
  return b.toString();
}",0.5568760611205433
44771,"public void setPermissions(Map<Long,Integer> permissions){
  this.permissions=permissions;
}","public void setPermissions(Map<Integer,Integer> permissions){
  this.permissions=permissions;
}",0.962566844919786
44772,"public Map<Long,Integer> getPermissions(){
  return permissions;
}","public Map<Integer,Integer> getPermissions(){
  return permissions;
}",0.9481481481481482
44773,"@Override public void savePermissions(Server server){
  String sqlI=""String_Node_Str"";
  String sqlU=""String_Node_Str"";
  String sql=""String_Node_Str"";
  Connection conn=null;
  try {
    conn=ConnectionFactory.getMasterConnection();
    PreparedStatement st;
    ResultSet rs;
    for (    Entry<Long,Integer> entry : server.getPermissions().entrySet()) {
      st=conn.prepareStatement(sql);
      st.setLong(1,server.getKey());
      st.setInt(2,entry.getKey().intValue());
      rs=st.executeQuery();
      if (rs.next()) {
        st=conn.prepareStatement(sqlU);
        st.setInt(1,entry.getValue());
        st.setLong(2,server.getKey());
        st.setInt(3,entry.getKey().intValue());
      }
 else {
        st=conn.prepareStatement(sqlI);
        st.setLong(1,server.getKey());
        st.setInt(2,entry.getKey().intValue());
        st.setInt(3,entry.getValue());
      }
      st.executeUpdate();
    }
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"",e.getMessage());
  }
catch (  IOException e) {
    logger.error(""String_Node_Str"",e.getMessage());
  }
 finally {
    try {
      if (conn != null)       conn.close();
    }
 catch (    Exception e) {
    }
  }
}","@Override public void savePermissions(Server server){
  String sqlI=""String_Node_Str"";
  String sqlU=""String_Node_Str"";
  String sql=""String_Node_Str"";
  Connection conn=null;
  try {
    conn=ConnectionFactory.getMasterConnection();
    PreparedStatement st;
    ResultSet rs;
    for (    Entry<Integer,Integer> entry : server.getPermissions().entrySet()) {
      st=conn.prepareStatement(sql);
      st.setLong(1,server.getKey());
      st.setInt(2,entry.getKey());
      rs=st.executeQuery();
      if (rs.next()) {
        st=conn.prepareStatement(sqlU);
        st.setInt(1,entry.getValue());
        st.setLong(2,server.getKey());
        st.setInt(3,entry.getKey());
      }
 else {
        st=conn.prepareStatement(sqlI);
        st.setLong(1,server.getKey());
        st.setInt(2,entry.getKey());
        st.setInt(3,entry.getValue());
      }
      st.executeUpdate();
    }
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"",e.getMessage());
  }
catch (  IOException e) {
    logger.error(""String_Node_Str"",e.getMessage());
  }
 finally {
    try {
      if (conn != null)       conn.close();
    }
 catch (    Exception e) {
    }
  }
}",0.9813559322033898
44774,"@Override public Server get(Long key,boolean fetchPermissions) throws EntityDoesNotExistsException {
  String sql=""String_Node_Str"";
  Connection conn=null;
  Server server=null;
  try {
    conn=ConnectionFactory.getSecondaryConnection();
    PreparedStatement st=conn.prepareStatement(sql);
    st.setLong(1,key);
    ResultSet rs=st.executeQuery();
    if (rs.next()) {
      server=new Server();
      loadServer(server,rs);
    }
 else {
      throw new EntityDoesNotExistsException(""String_Node_Str"",key.toString());
    }
    if (fetchPermissions) {
      sql=""String_Node_Str"";
      st=conn.prepareStatement(sql);
      st.setLong(1,key);
      rs=st.executeQuery();
      server.setPermissions(new HashMap<Long,Integer>());
      while (rs.next()) {
        server.getPermissions().put(new Long(rs.getInt(""String_Node_Str"")),rs.getInt(""String_Node_Str""));
      }
    }
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
 finally {
    try {
      if (conn != null)       conn.close();
    }
 catch (    Exception e) {
    }
  }
  return server;
}","@Override public Server get(Long key,boolean fetchPermissions) throws EntityDoesNotExistsException {
  String sql=""String_Node_Str"";
  Connection conn=null;
  Server server=null;
  try {
    conn=ConnectionFactory.getSecondaryConnection();
    PreparedStatement st=conn.prepareStatement(sql);
    st.setLong(1,key);
    ResultSet rs=st.executeQuery();
    if (rs.next()) {
      server=new Server();
      loadServer(server,rs);
    }
 else {
      throw new EntityDoesNotExistsException(""String_Node_Str"",key.toString());
    }
    if (fetchPermissions) {
      sql=""String_Node_Str"";
      st=conn.prepareStatement(sql);
      st.setLong(1,key);
      rs=st.executeQuery();
      server.setPermissions(new HashMap<Integer,Integer>());
      while (rs.next()) {
        server.getPermissions().put(new Integer(rs.getInt(""String_Node_Str"")),rs.getInt(""String_Node_Str""));
      }
    }
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
 finally {
    try {
      if (conn != null)       conn.close();
    }
 catch (    Exception e) {
    }
  }
  return server;
}",0.9904596704249784
44775,"@Override public boolean hasPermission(Long server,Integer level){
  Subject subject=this.getCurrentUser();
  if (!subject.isAuthenticated())   return false;
  if (subject.isSuperAdmin())   return true;
  Player player=getSubjectPlayer(server);
  if (player != null && player.getLevel() != null && player.getLevel() >= level) {
    return true;
  }
  return false;
}","@Override public boolean hasPermission(Long server,Integer level){
  Subject subject=this.getCurrentUser();
  if (!subject.isAuthenticated())   return false;
  if (subject.isSuperAdmin())   return true;
  Player player=getSubjectPlayer(server);
  if (player != null && player.getLevel() != null && player.getLevel().intValue() >= level.intValue()) {
    return true;
  }
  return false;
}",0.9708222811671088
44776,"@Override public String doProcess(ResolverContext context) throws ProcessorException {
  IDDBService app=(IDDBService)context.getServletContext().getAttribute(""String_Node_Str"");
  HttpServletRequest req=context.getRequest();
  String id=context.getParameter(""String_Node_Str"");
  log.debug(""String_Node_Str"",id);
  Player player;
  try {
    player=app.getPlayer(id);
  }
 catch (  Exception e) {
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.error(w.getBuffer().toString());
    throw new HttpError(HttpServletResponse.SC_NOT_FOUND);
  }
  Server server;
  try {
    server=app.getServer(player.getServer(),true);
  }
 catch (  EntityDoesNotExistsException e) {
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.error(w.getBuffer().toString());
    throw new ProcessorException(e);
  }
  Integer minLevel=server.getAdminLevel();
  Boolean hasAdmin=UserServiceFactory.getUserService().hasAnyServer(minLevel);
  Boolean hasServerAdmin=UserServiceFactory.getUserService().hasPermission(server.getKey());
  Boolean canApplyAction=false;
  Player currentPlayer=UserServiceFactory.getUserService().getSubjectPlayer(server.getKey());
  if (currentPlayer != null && (currentPlayer.getLevel() > player.getLevel())) {
    canApplyAction=true;
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",UserServiceFactory.getUserService().getCurrentUser().getLoginId());
    log.debug(""String_Node_Str"",currentPlayer);
    log.debug(""String_Node_Str"",minLevel);
    log.debug(""String_Node_Str"",hasAdmin);
    log.debug(""String_Node_Str"",hasServerAdmin);
    log.debug(""String_Node_Str"",canApplyAction);
  }
  List<NoticeViewBean> notices=null;
  List<PenaltyEventViewBean> events=null;
  PlayerViewBean infoView=new PlayerViewBean();
  infoView.setKey(player.getKey().toString());
  infoView.setName(player.getNickname());
  if (hasAdmin) {
    infoView.setGuid(player.getGuid());
    infoView.setIp(player.getIp());
  }
 else {
    infoView.setIp(Functions.maskIpAddress(player.getIp()));
  }
  infoView.setUpdated(player.getUpdated());
  infoView.setServer(server);
  if (hasAdmin) {
    getLastPlayerPenalty(app,player,infoView);
    notices=getPlayerNotices(app,player);
    events=listPlayerEvents(app,player,server);
  }
 else {
    if (player.getBanInfo() != null) {
      infoView.setBanInfo(new PenaltyViewBean(true));
    }
  }
  infoView.setAliases(new ArrayList<AliasResult>());
  infoView.setClientId(player.getClientId() != null ? ""String_Node_Str"" + player.getClientId().toString() : ""String_Node_Str"");
  infoView.setPlaying(player.isConnected());
  if (hasAdmin && player.getLevel() != null) {
    infoView.setLevel(player.getLevel().toString());
  }
 else {
    infoView.setLevel(""String_Node_Str"");
  }
  req.setAttribute(""String_Node_Str"",infoView);
  req.setAttribute(""String_Node_Str"",events);
  req.setAttribute(""String_Node_Str"",server);
  req.setAttribute(""String_Node_Str"",notices);
  req.setAttribute(""String_Node_Str"",hasAdmin);
  req.setAttribute(""String_Node_Str"",hasServerAdmin);
  req.setAttribute(""String_Node_Str"",server.getRemotePermission());
  req.setAttribute(""String_Node_Str"",canApplyAction);
  return null;
}","@Override public String doProcess(ResolverContext context) throws ProcessorException {
  IDDBService app=(IDDBService)context.getServletContext().getAttribute(""String_Node_Str"");
  HttpServletRequest req=context.getRequest();
  String id=context.getParameter(""String_Node_Str"");
  log.debug(""String_Node_Str"",id);
  Player player;
  try {
    player=app.getPlayer(id);
  }
 catch (  Exception e) {
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.error(w.getBuffer().toString());
    throw new HttpError(HttpServletResponse.SC_NOT_FOUND);
  }
  Server server;
  try {
    server=app.getServer(player.getServer(),true);
  }
 catch (  EntityDoesNotExistsException e) {
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.error(w.getBuffer().toString());
    throw new ProcessorException(e);
  }
  Integer minLevel=server.getAdminLevel();
  Boolean hasAdmin=UserServiceFactory.getUserService().hasAnyServer(minLevel);
  Boolean hasServerAdmin=UserServiceFactory.getUserService().hasPermission(server.getKey());
  Boolean canApplyAction=Boolean.FALSE;
  Player currentPlayer=UserServiceFactory.getUserService().getSubjectPlayer(server.getKey());
  if (currentPlayer != null && (currentPlayer.getLevel().intValue() > player.getLevel().intValue())) {
    canApplyAction=Boolean.TRUE;
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",UserServiceFactory.getUserService().getCurrentUser().getLoginId());
    log.debug(""String_Node_Str"",currentPlayer);
    log.debug(""String_Node_Str"",minLevel);
    log.debug(""String_Node_Str"",hasAdmin);
    log.debug(""String_Node_Str"",hasServerAdmin);
    log.debug(""String_Node_Str"",canApplyAction);
    log.debug(""String_Node_Str"",server.getRemotePermission());
    log.debug(""String_Node_Str"",server.getPermissions().keySet());
  }
  List<NoticeViewBean> notices=null;
  List<PenaltyEventViewBean> events=null;
  PlayerViewBean infoView=new PlayerViewBean();
  infoView.setKey(player.getKey().toString());
  infoView.setName(player.getNickname());
  if (hasAdmin) {
    infoView.setGuid(player.getGuid());
    infoView.setIp(player.getIp());
  }
 else {
    infoView.setIp(Functions.maskIpAddress(player.getIp()));
  }
  infoView.setUpdated(player.getUpdated());
  infoView.setServer(server);
  if (hasAdmin) {
    getLastPlayerPenalty(app,player,infoView);
    notices=getPlayerNotices(app,player);
    events=listPlayerEvents(app,player,server);
  }
 else {
    if (player.getBanInfo() != null) {
      infoView.setBanInfo(new PenaltyViewBean(true));
    }
  }
  infoView.setAliases(new ArrayList<AliasResult>());
  infoView.setClientId(player.getClientId() != null ? ""String_Node_Str"" + player.getClientId().toString() : ""String_Node_Str"");
  infoView.setPlaying(player.isConnected());
  if (hasAdmin && player.getLevel() != null) {
    infoView.setLevel(player.getLevel().toString());
  }
 else {
    infoView.setLevel(""String_Node_Str"");
  }
  req.setAttribute(""String_Node_Str"",infoView);
  req.setAttribute(""String_Node_Str"",events);
  req.setAttribute(""String_Node_Str"",server);
  req.setAttribute(""String_Node_Str"",notices);
  req.setAttribute(""String_Node_Str"",hasAdmin);
  req.setAttribute(""String_Node_Str"",hasServerAdmin);
  req.setAttribute(""String_Node_Str"",server.getRemotePermission());
  req.setAttribute(""String_Node_Str"",canApplyAction);
  return null;
}",0.971945701357466
44777,"private boolean checkRoles(Subject s,HttpServletRequest req,HttpServletResponse resp,String p) throws IOException {
  if (s.isAuthenticated()) {
    Set<String> r=urls.get(p);
    for (    String role : r) {
      if (""String_Node_Str"".equals(role) || s.hasRole(role)) {
        return true;
      }
      resp.sendError(HttpServletResponse.SC_FORBIDDEN);
    }
  }
 else {
    UrlReverse reverse=new UrlReverse(this.context);
    try {
      resp.sendRedirect(req.getContextPath() + reverse.resolve(""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(req.getRequestURI(),""String_Node_Str""));
    }
 catch (    RuleNotFoundException e) {
      log.error(e.getMessage());
      resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
catch (    ReverseException e) {
      log.error(e.getMessage());
      resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
  }
  return false;
}","private boolean checkRoles(Subject s,HttpServletRequest req,HttpServletResponse resp,String p) throws IOException {
  if (s.isAuthenticated()) {
    Set<String> r=urls.get(p);
    for (    String role : r) {
      if (""String_Node_Str"".equals(role) || s.hasRole(role)) {
        log.debug(""String_Node_Str"");
        return true;
      }
      log.debug(""String_Node_Str"");
      resp.sendError(HttpServletResponse.SC_FORBIDDEN);
    }
  }
 else {
    log.debug(""String_Node_Str"");
    UrlReverse reverse=new UrlReverse(this.context);
    try {
      resp.sendRedirect(req.getContextPath() + reverse.resolve(""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(req.getRequestURI(),""String_Node_Str""));
    }
 catch (    RuleNotFoundException e) {
      log.error(e.getMessage());
      resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
catch (    ReverseException e) {
      log.error(e.getMessage());
      resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
  }
  return false;
}",0.9440993788819876
44778,"/** 
 * @param s
 * @param request
 * @return
 * @throws IOException 
 */
private boolean haveAccess(Subject s,HttpServletRequest req,HttpServletResponse resp) throws IOException {
  String path=req.getRequestURI();
  if (!""String_Node_Str"".equals(req.getContextPath())) {
    path=StringUtils.removeStartIgnoreCase(path,req.getContextPath());
  }
  for (  String p : urls.keySet()) {
    if (p.endsWith(""String_Node_Str"")) {
      if (path.startsWith(p.substring(0,p.length() - 2))) {
        return checkRoles(s,req,resp,p);
      }
    }
 else {
      if (path.equalsIgnoreCase(p)) {
        return checkRoles(s,req,resp,p);
      }
    }
  }
  return true;
}","/** 
 * @param s
 * @param request
 * @return
 * @throws IOException 
 */
private boolean haveAccess(Subject s,HttpServletRequest req,HttpServletResponse resp) throws IOException {
  String path=req.getRequestURI();
  log.debug(""String_Node_Str"",path);
  if (!req.getContextPath().isEmpty()) {
    path=StringUtils.removeStartIgnoreCase(path,req.getContextPath());
  }
  if (!path.startsWith(""String_Node_Str"")) {
    path=""String_Node_Str"" + path;
  }
 else   if (path.startsWith(""String_Node_Str"")) {
    path=path.substring(1);
  }
  for (  String p : urls.keySet()) {
    if (p.endsWith(""String_Node_Str"")) {
      if (path.startsWith(p.substring(0,p.length() - 2))) {
        return checkRoles(s,req,resp,p);
      }
    }
 else {
      if (path.equalsIgnoreCase(p)) {
        return checkRoles(s,req,resp,p);
      }
    }
  }
  return true;
}",0.7610853739245532
44779,"private PlayerInfo processEventInfo(Object o) throws Exception {
  Object[] values=((Object[])o);
  if (log.isDebugEnabled())   log.debug(Arrays.toString(values));
  String event=(String)values[0];
  PlayerInfo playerInfo=new PlayerInfo(event,(String)values[1],(String)values[2],parseLong(values[3]),(String)values[4],parseLong(values[5]));
  if (values.length > 6) {
    Date updated;
    if (values[6] instanceof Date) {
      updated=(Date)values[6];
    }
 else {
      try {
        updated=new Date((Integer)values[6] * 1000L);
      }
 catch (      Exception e) {
        log.error(e.getMessage());
        updated=new Date();
      }
    }
    playerInfo.setUpdated(updated);
  }
  if (Events.BAN.equals(event)) {
    Object[] data=(Object[])values[7];
    if (log.isDebugEnabled())     log.debug(Arrays.toString(data));
    PenaltyInfo penalty=new PenaltyInfo();
    penalty.setType(Penalty.BAN);
    penalty.setCreated(parseLong(data[1]));
    penalty.setDuration(parseLong(data[2]));
    penalty.setReason((String)data[3]);
    penalty.setAdmin((String)data[4]);
    penalty.setAdminId(smartCast(data[5]));
    playerInfo.setPenaltyInfo(penalty);
  }
 else   if (Events.ADDNOTE.equals(event)) {
    Object[] data=(Object[])values[7];
    if (log.isDebugEnabled())     log.debug(Arrays.toString(data));
    PenaltyInfo penalty=new PenaltyInfo();
    penalty.setType(Penalty.NOTICE);
    penalty.setCreated(parseLong(data[0]));
    penalty.setReason((String)data[1]);
    penalty.setAdmin((String)data[2]);
    penalty.setAdminId(smartCast(data[3]));
    playerInfo.setPenaltyInfo(penalty);
  }
  return playerInfo;
}","private PlayerInfo processEventInfo(Object o) throws Exception {
  Object[] values=((Object[])o);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"",Arrays.toString(values));
  String event=(String)values[0];
  PlayerInfo playerInfo=new PlayerInfo(event,(String)values[1],(String)values[2],parseLong(values[3]),(String)values[4],parseLong(values[5]));
  if (values.length > 6) {
    Date updated;
    if (values[6] instanceof Date) {
      updated=(Date)values[6];
    }
 else {
      try {
        updated=new Date((Integer)values[6] * 1000L);
      }
 catch (      Exception e) {
        log.error(e.getMessage());
        updated=new Date();
      }
    }
    playerInfo.setUpdated(updated);
  }
  if (Events.BAN.equals(event)) {
    Object[] data=(Object[])values[7];
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"",Arrays.toString(data));
    PenaltyInfo penalty=new PenaltyInfo();
    penalty.setType(Penalty.BAN);
    penalty.setCreated(parseLong(data[1]));
    penalty.setDuration(parseLong(data[2]));
    penalty.setReason((String)data[3]);
    penalty.setAdmin((String)data[4]);
    penalty.setAdminId(smartCast(data[5]));
    playerInfo.setPenaltyInfo(penalty);
  }
 else   if (Events.ADDNOTE.equals(event)) {
    Object[] data=(Object[])values[7];
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"",Arrays.toString(data));
    PenaltyInfo penalty=new PenaltyInfo();
    penalty.setType(Penalty.NOTICE);
    penalty.setCreated(parseLong(data[0]));
    penalty.setReason((String)data[1]);
    penalty.setAdmin((String)data[2]);
    penalty.setAdminId(smartCast(data[3]));
    playerInfo.setPenaltyInfo(penalty);
  }
  return playerInfo;
}",0.9836660617059892
44780,"public void update(String key,Object[] plist) throws UpdateApiException, Exception {
  try {
    Server server=ServerManager.getAuthorizedServer(key,JIPDBSXmlRpc3Servlet.getClientIpAddress());
    List<PlayerInfo> list=new ArrayList<PlayerInfo>();
    for (    Object o : plist) {
      try {
        list.add(processEventInfo(o));
      }
 catch (      Exception e) {
        log.error(e.getMessage());
      }
    }
    if (list.size() > 0) {
      if (list.size() > maxListSize) {
        log.warn(""String_Node_Str"" + Integer.toString(list.size()));
        list=list.subList(list.size() - maxListSize,list.size());
      }
 else {
        log.info(""String_Node_Str"" + Integer.toString(list.size()));
      }
      updateApi.updatePlayer(server,list);
    }
 else {
      if (server.getOnlinePlayers() > 0) {
        log.debug(""String_Node_Str"" + server.getName());
        updateApi.cleanServer(server);
      }
    }
  }
 catch (  UnauthorizedUpdateException e) {
    log.warn(e.getMessage());
  }
catch (  Exception e) {
    log.error(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.error(w.getBuffer().toString());
    throw e;
  }
}","public void update(String key,Object[] plist) throws UpdateApiException, Exception {
  try {
    Server server=ServerManager.getAuthorizedServer(key,JIPDBSXmlRpc3Servlet.getClientIpAddress());
    List<PlayerInfo> list=new ArrayList<PlayerInfo>();
    for (    Object o : plist) {
      try {
        list.add(processEventInfo(o));
      }
 catch (      Exception e) {
        log.error(e.getMessage());
      }
    }
    if (list.size() > 0) {
      if (list.size() > maxListSize) {
        log.warn(""String_Node_Str"" + Integer.toString(list.size()));
        list=list.subList(list.size() - maxListSize,list.size());
      }
 else {
        log.info(""String_Node_Str"" + Integer.toString(list.size()));
      }
      updateApi.updatePlayer(server,list);
    }
 else {
      if (server.getOnlinePlayers() > 0 || server.getDirty()) {
        log.debug(""String_Node_Str"" + server.getName());
        updateApi.cleanServer(server);
      }
    }
  }
 catch (  UnauthorizedUpdateException e) {
    log.warn(e.getMessage());
  }
catch (  Exception e) {
    log.error(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.error(w.getBuffer().toString());
    throw e;
  }
}",0.9913187267465896
44781,"@Override public void save(AliasIP alias){
  String sql;
  if (alias.getKey() == null) {
    sql=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  Connection conn=null;
  try {
    conn=ConnectionFactory.getConnection();
    PreparedStatement st=conn.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
    st.setLong(1,alias.getPlayer());
    st.setLong(2,Functions.ipToDecimal(alias.getIp()));
    st.setTimestamp(3,new java.sql.Timestamp(alias.getCreated().getTime()));
    st.setTimestamp(4,new java.sql.Timestamp(alias.getUpdated().getTime()));
    st.setLong(5,alias.getCount());
    if (alias.getKey() != null)     st.setLong(6,alias.getKey());
    st.executeUpdate();
    if (alias.getKey() == null) {
      ResultSet rs=st.getGeneratedKeys();
      if (rs != null && rs.next()) {
        alias.setKey(rs.getLong(1));
      }
 else {
        logger.warn(""String_Node_Str"",alias.getIp());
      }
    }
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
 finally {
    try {
      if (conn != null)       conn.close();
    }
 catch (    Exception e) {
    }
  }
}","@Override public void save(AliasIP alias){
  String sql;
  if (alias.getKey() == null) {
    sql=""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  Connection conn=null;
  try {
    conn=ConnectionFactory.getConnection();
    PreparedStatement st=conn.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
    st.setLong(1,alias.getPlayer());
    st.setLong(2,Functions.ipToDecimal(alias.getIp()));
    if (alias.getCreated() == null)     alias.setCreated(new Date());
    if (alias.getUpdated() == null)     alias.setUpdated(new Date());
    st.setTimestamp(3,new java.sql.Timestamp(alias.getCreated().getTime()));
    st.setTimestamp(4,new java.sql.Timestamp(alias.getUpdated().getTime()));
    st.setLong(5,alias.getCount());
    if (alias.getKey() != null)     st.setLong(6,alias.getKey());
    st.executeUpdate();
    if (alias.getKey() == null) {
      ResultSet rs=st.getGeneratedKeys();
      if (rs != null && rs.next()) {
        alias.setKey(rs.getLong(1));
      }
 else {
        logger.warn(""String_Node_Str"",alias.getIp());
      }
    }
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
  }
 finally {
    try {
      if (conn != null)       conn.close();
    }
 catch (    Exception e) {
    }
  }
}",0.947289156626506
44782,"private String generatePaginator(){
  boolean in_leading_range=false;
  boolean in_trailing_range=false;
  List<Integer> pages_outside_leading_range=new ArrayList<Integer>();
  List<Integer> pages_outside_trailing_range=new ArrayList<Integer>();
  List<Integer> page_numbers;
  if (totalPages <= LEADING_PAGE_RANGE_DISPLAYED) {
    in_leading_range=in_trailing_range=true;
    page_numbers=Functions.range(1,totalPages + 1);
  }
 else   if (currentPage <= LEADING_PAGE_RANGE) {
    in_leading_range=true;
    page_numbers=Functions.range(1,LEADING_PAGE_RANGE_DISPLAYED + 1);
    pages_outside_leading_range=Functions.range(0,-NUM_PAGES_OUTSIDE_RANGE,totalPages);
  }
 else   if (currentPage > totalPages - TRAILING_PAGE_RANGE) {
    in_trailing_range=true;
    page_numbers=Functions.range(totalPages - TRAILING_PAGE_RANGE_DISPLAYED + 1,totalPages + 1);
    pages_outside_trailing_range=Functions.range(0,NUM_PAGES_OUTSIDE_RANGE,1);
  }
 else {
    page_numbers=Functions.range(currentPage - ADJACENT_PAGES,currentPage + ADJACENT_PAGES + 1);
    pages_outside_leading_range=Functions.range(0,-NUM_PAGES_OUTSIDE_RANGE,totalPages);
    pages_outside_trailing_range=Functions.range(0,NUM_PAGES_OUTSIDE_RANGE,1);
  }
  StringBuilder html=new StringBuilder();
  html.append(""String_Node_Str"");
  if (currentPage > 1) {
    html.append(""String_Node_Str"");
    html.append(url);
    html.append(""String_Node_Str"" + Integer.toString(currentPage - 1));
    html.append(""String_Node_Str"" + Integer.toString(pageSize));
    html.append(""String_Node_Str"");
  }
 else {
    html.append(""String_Node_Str"");
  }
  if (!in_leading_range) {
    for (    Integer num : pages_outside_trailing_range) {
      html.append(""String_Node_Str"");
      html.append(url);
      html.append(""String_Node_Str"" + Integer.toString(num));
      html.append(""String_Node_Str"" + Integer.toString(pageSize));
      html.append(""String_Node_Str"");
      html.append(Integer.toString(num));
      html.append(""String_Node_Str"");
    }
    html.append(""String_Node_Str"");
  }
  if (page_numbers.size() > 0) {
    for (    Integer num : page_numbers) {
      if (num <= totalPages) {
        if (currentPage.equals(num)) {
          html.append(""String_Node_Str"");
          html.append(Integer.toString(num));
          html.append(""String_Node_Str"");
        }
 else {
          html.append(""String_Node_Str"");
          html.append(url);
          html.append(""String_Node_Str"" + Integer.toString(num));
          html.append(""String_Node_Str"" + Integer.toString(pageSize));
          html.append(""String_Node_Str"");
          html.append(Integer.toString(num));
          html.append(""String_Node_Str"");
        }
      }
    }
  }
 else {
    html.append(""String_Node_Str"");
  }
  Collections.reverse(pages_outside_leading_range);
  if (!in_trailing_range) {
    html.append(""String_Node_Str"");
    for (    Integer num : pages_outside_leading_range) {
      html.append(""String_Node_Str"");
      html.append(url);
      html.append(""String_Node_Str"" + Integer.toString(num));
      html.append(""String_Node_Str"" + Integer.toString(pageSize));
      html.append(""String_Node_Str"");
      html.append(Integer.toString(num));
      html.append(""String_Node_Str"");
    }
  }
  if (currentPage < totalPages) {
    html.append(""String_Node_Str"");
    html.append(url);
    html.append(""String_Node_Str"" + Integer.toString(currentPage + 1));
    html.append(""String_Node_Str"" + Integer.toString(pageSize));
    html.append(""String_Node_Str"");
  }
 else {
    html.append(""String_Node_Str"");
  }
  return html.toString();
}","private String generatePaginator(){
  boolean in_leading_range=false;
  boolean in_trailing_range=false;
  List<Integer> pages_outside_leading_range=new ArrayList<Integer>();
  List<Integer> pages_outside_trailing_range=new ArrayList<Integer>();
  List<Integer> page_numbers;
  if (totalPages <= LEADING_PAGE_RANGE_DISPLAYED) {
    in_leading_range=in_trailing_range=true;
    page_numbers=Functions.range(1,totalPages + 1);
  }
 else   if (currentPage <= LEADING_PAGE_RANGE) {
    in_leading_range=true;
    page_numbers=Functions.range(1,LEADING_PAGE_RANGE_DISPLAYED + 1);
    pages_outside_leading_range=Functions.range(0,-NUM_PAGES_OUTSIDE_RANGE,totalPages);
  }
 else   if (currentPage > totalPages - TRAILING_PAGE_RANGE) {
    in_trailing_range=true;
    page_numbers=Functions.range(totalPages - TRAILING_PAGE_RANGE_DISPLAYED + 1,totalPages + 1);
    pages_outside_trailing_range=Functions.range(0,NUM_PAGES_OUTSIDE_RANGE,1);
  }
 else {
    page_numbers=Functions.range(currentPage - ADJACENT_PAGES,currentPage + ADJACENT_PAGES + 1);
    pages_outside_leading_range=Functions.range(0,-NUM_PAGES_OUTSIDE_RANGE,totalPages);
    pages_outside_trailing_range=Functions.range(0,NUM_PAGES_OUTSIDE_RANGE,1);
  }
  StringBuilder html=new StringBuilder();
  html.append(""String_Node_Str"");
  String pageUrl=url.contains(""String_Node_Str"") ? url + ""String_Node_Str"" : url + ""String_Node_Str"";
  if (currentPage > 1) {
    html.append(""String_Node_Str"");
    html.append(pageUrl);
    html.append(""String_Node_Str"" + Integer.toString(currentPage - 1));
    html.append(""String_Node_Str"" + Integer.toString(pageSize));
    html.append(""String_Node_Str"");
  }
 else {
    html.append(""String_Node_Str"");
  }
  if (!in_leading_range) {
    for (    Integer num : pages_outside_trailing_range) {
      html.append(""String_Node_Str"");
      html.append(pageUrl);
      html.append(""String_Node_Str"" + Integer.toString(num));
      html.append(""String_Node_Str"" + Integer.toString(pageSize));
      html.append(""String_Node_Str"");
      html.append(Integer.toString(num));
      html.append(""String_Node_Str"");
    }
    html.append(""String_Node_Str"");
  }
  if (page_numbers.size() > 0) {
    for (    Integer num : page_numbers) {
      if (num <= totalPages) {
        if (currentPage.equals(num)) {
          html.append(""String_Node_Str"");
          html.append(Integer.toString(num));
          html.append(""String_Node_Str"");
        }
 else {
          html.append(""String_Node_Str"");
          html.append(pageUrl);
          html.append(""String_Node_Str"" + Integer.toString(num));
          html.append(""String_Node_Str"" + Integer.toString(pageSize));
          html.append(""String_Node_Str"");
          html.append(Integer.toString(num));
          html.append(""String_Node_Str"");
        }
      }
    }
  }
 else {
    html.append(""String_Node_Str"");
  }
  Collections.reverse(pages_outside_leading_range);
  if (!in_trailing_range) {
    html.append(""String_Node_Str"");
    for (    Integer num : pages_outside_leading_range) {
      html.append(""String_Node_Str"");
      html.append(pageUrl);
      html.append(""String_Node_Str"" + Integer.toString(num));
      html.append(""String_Node_Str"" + Integer.toString(pageSize));
      html.append(""String_Node_Str"");
      html.append(Integer.toString(num));
      html.append(""String_Node_Str"");
    }
  }
  if (currentPage < totalPages) {
    html.append(""String_Node_Str"");
    html.append(pageUrl);
    html.append(""String_Node_Str"" + Integer.toString(currentPage + 1));
    html.append(""String_Node_Str"" + Integer.toString(pageSize));
    html.append(""String_Node_Str"");
  }
 else {
    html.append(""String_Node_Str"");
  }
  return html.toString();
}",0.981883063409278
44783,"public void parseRaw(String data){
  if (data.startsWith(""String_Node_Str"")) {
    data=data.substring(1);
  }
  String[] parts=data.split(""String_Node_Str"");
  setType(Long.parseLong(parts[0]));
  setCreated(Long.parseLong(parts[1]));
  setAdmin(parts[2]);
  if (parts[3].equals(""String_Node_Str"")) {
    setReason(null);
  }
 else {
    setReason(parts[3]);
  }
  setDuration(Long.parseLong(parts[4]));
}","public void parseRaw(String data){
  log.fine(""String_Node_Str"" + data);
  if (data.startsWith(""String_Node_Str"")) {
    data=data.substring(1);
  }
  String[] parts=data.split(""String_Node_Str"");
  try {
    setType(Long.parseLong(parts[0]));
    setCreated(Long.parseLong(parts[1]));
    setAdmin(parts[2]);
    if (""String_Node_Str"".equals(parts[3])) {
      setReason(null);
    }
 else {
      setReason(parts[3]);
    }
    setDuration(Long.parseLong(parts[4]));
  }
 catch (  NumberFormatException e) {
    setType(Penalty.BAN);
    setCreated(Long.parseLong(parts[1]));
    setDuration(Long.parseLong(parts[2]));
    if (parts[3].equals(""String_Node_Str"")) {
      setReason(null);
    }
 else {
      setReason(parts[3]);
    }
  }
}",0.6376306620209059
44784,"/** 
 * Begin masking until asked to stop.
 */
public void run(){
  int priority=Thread.currentThread().getPriority();
  Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
  try {
    stop=true;
    while (stop) {
      System.out.print(""String_Node_Str"" + echochar);
      try {
        Thread.currentThread().sleep(1);
      }
 catch (      InterruptedException iex) {
        Thread.currentThread().interrupt();
        return;
      }
    }
  }
  finally {
    Thread.currentThread().setPriority(priority);
  }
}","/** 
 * Begin masking until asked to stop.
 */
public void run(){
  int priority=Thread.currentThread().getPriority();
  Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
  try {
    stop=true;
    while (stop) {
      try {
        Thread.currentThread().sleep(1);
      }
 catch (      InterruptedException iex) {
        Thread.currentThread().interrupt();
        return;
      }
      System.out.print(""String_Node_Str"" + echochar);
    }
  }
  finally {
    Thread.currentThread().setPriority(priority);
  }
}",0.6724137931034483
44785,"@Override public void withEntity(Entity entity,DatastoreService ds) throws Exception {
  Alias alias=new Alias(entity);
  StringBuilder a=new StringBuilder();
  a.append(""String_Node_Str"").append(EscapeChars.toString(EscapeChars.forJSON(alias.getNickname()))).append(""String_Node_Str"");
  a.append(""String_Node_Str"").append(EscapeChars.toString(alias.getIp())).append(""String_Node_Str"");
  a.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(alias.getCreated()))).append(""String_Node_Str"");
  a.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(alias.getUpdated()))).append(""String_Node_Str"");
  a.append(""String_Node_Str"").append(EscapeChars.toString(alias.getCount())).append(""String_Node_Str"");
  StringBuilder ngrams=new StringBuilder();
  for (Iterator<String> it=alias.getNgrams().iterator(); it.hasNext(); ) {
    ngrams.append(EscapeChars.toString(EscapeChars.forJSON(it.next())));
    if (it.hasNext())     ngrams.append(""String_Node_Str"");
  }
  a.append(""String_Node_Str"").append(ngrams.toString()).append(""String_Node_Str"");
  aliases.add(""String_Node_Str"" + a.toString() + ""String_Node_Str"");
}","@Override public void withEntity(Entity entity,DatastoreService ds) throws Exception {
  Alias alias=new Alias(entity);
  StringBuilder a=new StringBuilder();
  a.append(""String_Node_Str"").append(EscapeChars.toString(EscapeChars.forJSON(alias.getNickname()))).append(""String_Node_Str"");
  a.append(""String_Node_Str"").append(EscapeChars.toString(alias.getIp())).append(""String_Node_Str"");
  a.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(alias.getCreated()))).append(""String_Node_Str"");
  a.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(alias.getUpdated()))).append(""String_Node_Str"");
  a.append(""String_Node_Str"").append(EscapeChars.toString(alias.getCount())).append(""String_Node_Str"");
  StringBuilder ngrams=new StringBuilder();
  if (alias.getNgrams() != null) {
    for (Iterator<String> it=alias.getNgrams().iterator(); it.hasNext(); ) {
      ngrams.append(EscapeChars.toString(EscapeChars.forJSON(it.next())));
      if (it.hasNext())       ngrams.append(""String_Node_Str"");
    }
  }
  a.append(""String_Node_Str"").append(ngrams.toString()).append(""String_Node_Str"");
  aliases.add(""String_Node_Str"" + a.toString() + ""String_Node_Str"");
}",0.9794721407624634
44786,"@Override protected void execute(String[] args) throws Exception {
  final int maxEntities=Integer.MAX_VALUE;
  final AliasDAO aliasDAO=new AliasDAOImpl();
  Writer wrt=new FileWriter(args[0]);
  System.out.println(""String_Node_Str"" + args[0]);
  int offset=0;
  try {
    offset=Integer.parseInt(args[1]);
  }
 catch (  Exception e) {
  }
  int limit=maxEntities;
  try {
    limit=Integer.parseInt(args[2]);
  }
 catch (  Exception e) {
  }
  DatastoreService ds=DatastoreServiceFactory.getDatastoreService();
  PreparedQuery pq=ds.prepare(new Query(""String_Node_Str""));
  final int total=pq.countEntities(withLimit(limit).offset(offset));
  count=0;
  System.out.println(""String_Node_Str"" + total + ""String_Node_Str"");
  final BufferedWriter out=new BufferedWriter(wrt);
  EntityIterator.iterate(""String_Node_Str"",limit,offset,100,new Callback(){
    @SuppressWarnings(""String_Node_Str"") @Override public void withEntity(    Entity entity,    DatastoreService ds) throws Exception {
      final Player player=new Player(entity);
      count=count + 1;
      Alias lastAlias=null;
      if (player.getNickname() != null) {
        lastAlias=new Alias(player.getKey());
        lastAlias.setNickname(player.getNickname());
        lastAlias.setIp(player.getIp());
      }
 else {
        lastAlias=aliasDAO.getLastUsedAlias(player.getKey());
      }
      if (lastAlias == null)       return;
      ServerDAO serverDAO=new ServerDAOImpl();
      Server server=serverDAO.get(player.getServer());
      if (server == null)       return;
      StringBuilder serverb=new StringBuilder();
      serverb.append(""String_Node_Str"").append(EscapeChars.toString(server.getUid())).append(""String_Node_Str"");
      serverb.append(""String_Node_Str"").append(EscapeChars.toString(server.getName())).append(""String_Node_Str"");
      serverb.append(""String_Node_Str"").append(EscapeChars.toString(server.getAdmin().getEmail())).append(""String_Node_Str"");
      serverb.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(server.getCreated()))).append(""String_Node_Str"");
      serverb.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(server.getUpdated()))).append(""String_Node_Str"");
      serverb.append(""String_Node_Str"").append(EscapeChars.toString(server.getAddress())).append(""String_Node_Str"");
      serverb.append(""String_Node_Str"").append(EscapeChars.toString(server.getPluginVersion())).append(""String_Node_Str"");
      serverb.append(""String_Node_Str"").append(EscapeChars.toString(server.getMaxLevel())).append(""String_Node_Str"");
      final List<String> aliases=new ArrayList<String>();
      Query aliasQuery=new Query(""String_Node_Str"");
      aliasQuery.setAncestor(player.getKey());
      EntityIterator.iterate(aliasQuery,Integer.MAX_VALUE,new Callback(){
        @Override public void withEntity(        Entity entity,        DatastoreService ds) throws Exception {
          Alias alias=new Alias(entity);
          StringBuilder a=new StringBuilder();
          a.append(""String_Node_Str"").append(EscapeChars.toString(EscapeChars.forJSON(alias.getNickname()))).append(""String_Node_Str"");
          a.append(""String_Node_Str"").append(EscapeChars.toString(alias.getIp())).append(""String_Node_Str"");
          a.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(alias.getCreated()))).append(""String_Node_Str"");
          a.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(alias.getUpdated()))).append(""String_Node_Str"");
          a.append(""String_Node_Str"").append(EscapeChars.toString(alias.getCount())).append(""String_Node_Str"");
          StringBuilder ngrams=new StringBuilder();
          for (Iterator<String> it=alias.getNgrams().iterator(); it.hasNext(); ) {
            ngrams.append(EscapeChars.toString(EscapeChars.forJSON(it.next())));
            if (it.hasNext())             ngrams.append(""String_Node_Str"");
          }
          a.append(""String_Node_Str"").append(ngrams.toString()).append(""String_Node_Str"");
          aliases.add(""String_Node_Str"" + a.toString() + ""String_Node_Str"");
        }
      }
);
      StringBuilder p=new StringBuilder();
      p.append(""String_Node_Str"").append(EscapeChars.toString(EscapeChars.forJSON(lastAlias.getNickname()))).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(lastAlias.getIp())).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(player.getGuid())).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(player.getBanInfo())).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(player.getBanInfoUpdated()))).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(player.getCreated()))).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(player.getUpdated()))).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(player.getClientId())).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(player.getLevel())).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(EscapeChars.forJSON(player.getNote()))).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(serverb.toString()).append(""String_Node_Str"").append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(Functions.join(aliases,""String_Node_Str"")).append(""String_Node_Str"");
      out.write(""String_Node_Str"" + p.toString() + ""String_Node_Str"");
      out.flush();
      System.out.println(""String_Node_Str"" + (count * 100) / total);
    }
  }
);
  out.close();
  wrt.close();
  System.out.print(""String_Node_Str"");
}","@Override protected void execute(String[] args) throws Exception {
  final int maxEntities=Integer.MAX_VALUE;
  final AliasDAO aliasDAO=new AliasDAOImpl();
  Writer wrt=new FileWriter(args[0]);
  System.out.println(""String_Node_Str"" + args[0]);
  int offset=0;
  try {
    offset=Integer.parseInt(args[1]);
  }
 catch (  Exception e) {
  }
  int limit=maxEntities;
  try {
    limit=Integer.parseInt(args[2]);
  }
 catch (  Exception e) {
  }
  DatastoreService ds=DatastoreServiceFactory.getDatastoreService();
  PreparedQuery pq=ds.prepare(new Query(""String_Node_Str""));
  final int total=pq.countEntities(withLimit(limit).offset(offset));
  count=0;
  System.out.println(""String_Node_Str"" + total + ""String_Node_Str"");
  final BufferedWriter out=new BufferedWriter(wrt);
  EntityIterator.iterate(""String_Node_Str"",limit,offset,100,new Callback(){
    @SuppressWarnings(""String_Node_Str"") @Override public void withEntity(    Entity entity,    DatastoreService ds) throws Exception {
      final Player player=new Player(entity);
      count=count + 1;
      Alias lastAlias=null;
      if (player.getNickname() != null) {
        lastAlias=new Alias(player.getKey());
        lastAlias.setNickname(player.getNickname());
        lastAlias.setIp(player.getIp());
      }
 else {
        lastAlias=aliasDAO.getLastUsedAlias(player.getKey());
      }
      if (lastAlias == null)       return;
      ServerDAO serverDAO=new ServerDAOImpl();
      Server server=serverDAO.get(player.getServer());
      if (server == null)       return;
      StringBuilder serverb=new StringBuilder();
      serverb.append(""String_Node_Str"").append(EscapeChars.toString(server.getUid())).append(""String_Node_Str"");
      serverb.append(""String_Node_Str"").append(EscapeChars.toString(server.getName())).append(""String_Node_Str"");
      serverb.append(""String_Node_Str"").append(EscapeChars.toString(server.getAdmin().getEmail())).append(""String_Node_Str"");
      serverb.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(server.getCreated()))).append(""String_Node_Str"");
      serverb.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(server.getUpdated()))).append(""String_Node_Str"");
      serverb.append(""String_Node_Str"").append(EscapeChars.toString(server.getAddress())).append(""String_Node_Str"");
      serverb.append(""String_Node_Str"").append(EscapeChars.toString(server.getPluginVersion())).append(""String_Node_Str"");
      serverb.append(""String_Node_Str"").append(EscapeChars.toString(server.getMaxLevel())).append(""String_Node_Str"");
      final List<String> aliases=new ArrayList<String>();
      Query aliasQuery=new Query(""String_Node_Str"");
      aliasQuery.setAncestor(player.getKey());
      EntityIterator.iterate(aliasQuery,Integer.MAX_VALUE,new Callback(){
        @Override public void withEntity(        Entity entity,        DatastoreService ds) throws Exception {
          Alias alias=new Alias(entity);
          StringBuilder a=new StringBuilder();
          a.append(""String_Node_Str"").append(EscapeChars.toString(EscapeChars.forJSON(alias.getNickname()))).append(""String_Node_Str"");
          a.append(""String_Node_Str"").append(EscapeChars.toString(alias.getIp())).append(""String_Node_Str"");
          a.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(alias.getCreated()))).append(""String_Node_Str"");
          a.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(alias.getUpdated()))).append(""String_Node_Str"");
          a.append(""String_Node_Str"").append(EscapeChars.toString(alias.getCount())).append(""String_Node_Str"");
          StringBuilder ngrams=new StringBuilder();
          if (alias.getNgrams() != null) {
            for (Iterator<String> it=alias.getNgrams().iterator(); it.hasNext(); ) {
              ngrams.append(EscapeChars.toString(EscapeChars.forJSON(it.next())));
              if (it.hasNext())               ngrams.append(""String_Node_Str"");
            }
          }
          a.append(""String_Node_Str"").append(ngrams.toString()).append(""String_Node_Str"");
          aliases.add(""String_Node_Str"" + a.toString() + ""String_Node_Str"");
        }
      }
);
      StringBuilder p=new StringBuilder();
      p.append(""String_Node_Str"").append(EscapeChars.toString(EscapeChars.forJSON(lastAlias.getNickname()))).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(lastAlias.getIp())).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(player.getGuid())).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(player.getBanInfo())).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(player.getBanInfoUpdated()))).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(player.getCreated()))).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(Transformer.date_to_string(player.getUpdated()))).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(player.getClientId())).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(player.getLevel())).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(EscapeChars.toString(EscapeChars.forJSON(player.getNote()))).append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(serverb.toString()).append(""String_Node_Str"").append(""String_Node_Str"");
      p.append(""String_Node_Str"").append(Functions.join(aliases,""String_Node_Str"")).append(""String_Node_Str"");
      out.write(""String_Node_Str"" + p.toString() + ""String_Node_Str"");
      out.flush();
      System.out.println(""String_Node_Str"" + (count * 100) / total);
    }
  }
);
  out.close();
  wrt.close();
  System.out.print(""String_Node_Str"");
}",0.9945207788923544
44787,"public List<SearchResult> byServerSearch(String query,int offset,int limit,int[] count){
  try {
    List<SearchResult> results=new ArrayList<SearchResult>();
    Server server=serverDAO.get(KeyFactory.stringToKey(query));
    if (server != null) {
      for (      Player player : playerDAO.findByServer(query,offset,limit,count)) {
        results.add(marshall(player,server));
      }
    }
    return results;
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.severe(""String_Node_Str"" + e.getMessage());
    count[0]=0;
    return Collections.emptyList();
  }
}","public List<SearchResult> byServerSearch(String query,int offset,int limit,int[] count){
  try {
    List<SearchResult> results=new ArrayList<SearchResult>();
    Server server=serverDAO.get(KeyFactory.stringToKey(query));
    if (server != null) {
      for (      Player player : playerDAO.findByServer(query,offset,limit,count)) {
        results.add(marshall(player,server));
      }
    }
    return results;
  }
 catch (  Exception e) {
    log.severe(""String_Node_Str"" + e.getMessage());
    count[0]=0;
    return Collections.emptyList();
  }
}",0.9778565101860052
44788,"public Boolean getOffline(){
  Date today=new Date();
  long diff=today.getTime() - this.updated.getTime();
  return (diff / 86400000 >= 2);
}","public Boolean getOffline(){
  Date today=new Date();
  if (this.updated != null) {
    long diff=today.getTime() - this.updated.getTime();
    return (diff / 86400000 >= 2);
  }
  return true;
}",0.8427299703264095
44789,"@Override public Server get(Key server) throws EntityNotFoundException {
  DatastoreService service=DatastoreServiceFactory.getDatastoreService();
  return new Server(service.get(server));
}","@Override public Server get(Key server) throws EntityNotFoundException {
  DatastoreService service=DatastoreServiceFactory.getDatastoreService();
  try {
    Entity entity=service.get(server);
    if (entity != null)     return new Server(entity);
  }
 catch (  Exception e) {
  }
  return null;
}",0.6926229508196722
44790,"public BanInfo(String data){
  String[] parts=StringUtils.split(data,""String_Node_Str"");
  setType(parts[0]);
  setCreated(new Date(Long.parseLong(parts[1]) * 1000L));
  setDuration(Long.parseLong(parts[2]));
  if (parts.length == 4)   setReason(parts[3]);
 else   setReason(""String_Node_Str"");
}","public BanInfo(String data){
  String[] parts=data.split(""String_Node_Str"");
  setType(parts[0]);
  setCreated(new Date(Long.parseLong(parts[1]) * 1000L));
  setDuration(Long.parseLong(parts[2]));
  if (parts.length == 4)   setReason(parts[3]);
 else   setReason(""String_Node_Str"");
}",0.9413793103448276
44791,"public static String fixIp(String query){
  String[] parts=StringUtils.split(query,""String_Node_Str"");
  String[] r=new String[4];
  for (int i=0; i < 3; i++) {
    if (i < parts.length)     r[i]=parts[i];
 else     r[i]=""String_Node_Str"";
  }
  r[3]=""String_Node_Str"";
  if (""String_Node_Str"".equals(r[0]))   return ""String_Node_Str"";
  return join(r,""String_Node_Str"");
}","public static String fixIp(String query){
  String[] parts=query.split(""String_Node_Str"");
  String[] r=new String[4];
  for (int i=0; i < 3; i++) {
    if (i < parts.length)     r[i]=parts[i];
 else     r[i]=""String_Node_Str"";
  }
  r[3]=""String_Node_Str"";
  if (""String_Node_Str"".equals(r[0]))   return ""String_Node_Str"";
  return join(r,""String_Node_Str"");
}",0.9700272479564032
44792,"public static final Long ipToDecimal(String ip){
  if (StringUtils.isEmpty(ip))   return 0l;
  String[] parts=StringUtils.split(ip,""String_Node_Str"");
  Long n=16777216 * Long.parseLong(parts[0]);
  n+=65536 * Long.parseLong(parts[1]);
  n+=256 * Long.parseLong(parts[2]);
  n+=Long.parseLong(parts[3]);
  return n;
}","public static final Long ipToDecimal(String ip){
  if (StringUtils.isEmpty(ip))   return 0l;
  String[] parts=ip.split(""String_Node_Str"");
  Long n=16777216 * Long.parseLong(parts[0]);
  n+=65536 * Long.parseLong(parts[1]);
  n+=256 * Long.parseLong(parts[2]);
  n+=Long.parseLong(parts[3]);
  return n;
}",0.9517684887459807
44793,"public static final String maskIpAddress(String ip){
  if (StringUtils.isEmpty(ip))   return ""String_Node_Str"";
  String[] parts=StringUtils.split(ip,""String_Node_Str"");
  Integer n=IP_SEED;
  n+=Integer.parseInt(parts[0]);
  n-=Integer.parseInt(parts[1]);
  n+=Integer.parseInt(parts[2]);
  n-=Integer.parseInt(parts[3]);
  n=Math.abs(n);
  return parts[0] + ""String_Node_Str"" + parts[1]+ ""String_Node_Str""+ parts[2]+ ""String_Node_Str""+ Integer.toHexString(n).toUpperCase();
}","public static final String maskIpAddress(String ip){
  if (StringUtils.isEmpty(ip))   return ""String_Node_Str"";
  String[] parts=ip.split(""String_Node_Str"");
  Integer n=IP_SEED;
  n+=Integer.parseInt(parts[0]);
  n-=Integer.parseInt(parts[1]);
  n+=Integer.parseInt(parts[2]);
  n-=Integer.parseInt(parts[3]);
  n=Math.abs(n);
  return parts[0] + ""String_Node_Str"" + parts[1]+ ""String_Node_Str""+ parts[2]+ ""String_Node_Str""+ Integer.toHexString(n).toUpperCase();
}",0.970276008492569
44794,"@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  DateFormat format=new SimpleDateFormat(""String_Node_Str"");
  String[] ver=StringUtils.split(SystemProperty.applicationVersion.get(),""String_Node_Str"");
  long longversion=(long)(Long.parseLong(ver[ver.length - 1]) / Math.pow(2,28));
  Date d=new Date(longversion * 1000);
  ver[ver.length - 1]=format.format(d);
  ver[0]=ver[0].replace('-','.');
  App app=new App(Functions.join(ver,""String_Node_Str""));
  req.setAttribute(""String_Node_Str"",app);
}","@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  DateFormat format=new SimpleDateFormat(""String_Node_Str"");
  String[] ver=SystemProperty.applicationVersion.get().split(""String_Node_Str"");
  long longversion=(long)(Long.parseLong(ver[ver.length - 1]) / Math.pow(2,28));
  Date d=new Date(longversion * 1000);
  ver[ver.length - 1]=format.format(d);
  ver[0]=ver[0].replace('-','.');
  App app=new App(Functions.join(ver,""String_Node_Str""));
  req.setAttribute(""String_Node_Str"",app);
}",0.9769094138543516
44795,"@Override public XmlRpcHandler getHandler(String methodName) throws XmlRpcNoSuchHandlerException, XmlRpcException {
  return new XmlRpcHandler(){
    @Override public Object execute(    XmlRpcRequest req) throws XmlRpcException {
      try {
        String[] methods=StringUtils.split(req.getMethodName(),""String_Node_Str"");
        String methodName=methods[methods.length - 1];
        Class<?>[] types=new Class<?>[req.getParameterCount()];
        Object[] args=new Object[req.getParameterCount()];
        for (int i=0; i < args.length; i++) {
          Object param=req.getParameter(i);
          args[i]=param;
          types[i]=param.getClass();
        }
        Method method=instance.getClass().getMethod(methodName,types);
        Object result=method.invoke(instance,args);
        return result != null ? result : ""String_Node_Str"";
      }
 catch (      Exception e) {
        throw new XmlRpcException(e.getMessage());
      }
    }
  }
;
}","@Override public XmlRpcHandler getHandler(String methodName) throws XmlRpcNoSuchHandlerException, XmlRpcException {
  return new XmlRpcHandler(){
    @Override public Object execute(    XmlRpcRequest req) throws XmlRpcException {
      try {
        String[] methods=req.getMethodName().split(""String_Node_Str"");
        String methodName=methods[methods.length - 1];
        Class<?>[] types=new Class<?>[req.getParameterCount()];
        Object[] args=new Object[req.getParameterCount()];
        for (int i=0; i < args.length; i++) {
          Object param=req.getParameter(i);
          args[i]=param;
          types[i]=param.getClass();
        }
        Method method=instance.getClass().getMethod(methodName,types);
        Object result=method.invoke(instance,args);
        return result != null ? result : ""String_Node_Str"";
      }
 catch (      Exception e) {
        throw new XmlRpcException(e.getMessage());
      }
    }
  }
;
}",0.9863301787592008
44796,"@Override public Object execute(XmlRpcRequest req) throws XmlRpcException {
  try {
    String[] methods=StringUtils.split(req.getMethodName(),""String_Node_Str"");
    String methodName=methods[methods.length - 1];
    Class<?>[] types=new Class<?>[req.getParameterCount()];
    Object[] args=new Object[req.getParameterCount()];
    for (int i=0; i < args.length; i++) {
      Object param=req.getParameter(i);
      args[i]=param;
      types[i]=param.getClass();
    }
    Method method=instance.getClass().getMethod(methodName,types);
    Object result=method.invoke(instance,args);
    return result != null ? result : ""String_Node_Str"";
  }
 catch (  Exception e) {
    throw new XmlRpcException(e.getMessage());
  }
}","@Override public Object execute(XmlRpcRequest req) throws XmlRpcException {
  try {
    String[] methods=req.getMethodName().split(""String_Node_Str"");
    String methodName=methods[methods.length - 1];
    Class<?>[] types=new Class<?>[req.getParameterCount()];
    Object[] args=new Object[req.getParameterCount()];
    for (int i=0; i < args.length; i++) {
      Object param=req.getParameter(i);
      args[i]=param;
      types[i]=param.getClass();
    }
    Method method=instance.getClass().getMethod(methodName,types);
    Object result=method.invoke(instance,args);
    return result != null ? result : ""String_Node_Str"";
  }
 catch (  Exception e) {
    throw new XmlRpcException(e.getMessage());
  }
}",0.9818688981868898
44797,"/** 
 * Update player info
 * @param server the server instance
 * @param list a list of jipdbs.bean.PlayerInfo
 * @throws Exception 
 * @since 0.5
 */
public void updatePlayer(Server server,List<PlayerInfo> list) throws Exception {
  log.info(""String_Node_Str"" + server.getName());
  try {
    for (    PlayerInfo playerInfo : list) {
      try {
        Date playerLastUpdate;
        Player player=playerDAO.findByServerAndGuid(server.getKey(),playerInfo.getGuid());
        if (player == null) {
          player=new Player();
          player.setCreated(new Date());
          player.setGuid(playerInfo.getGuid());
          player.setLevel(playerInfo.getLevel());
          player.setClientId(playerInfo.getClientId());
          player.setServer(server.getKey());
          player.setBanInfo(null);
          player.setBanInfoUpdated(null);
          playerLastUpdate=playerInfo.getUpdated();
        }
 else {
          player.setLevel(playerInfo.getLevel());
          if (player.getClientId() == null) {
            player.setClientId(playerInfo.getClientId());
          }
          playerLastUpdate=player.getUpdated();
        }
        player.setNickname(playerInfo.getName());
        player.setIp(playerInfo.getIp());
        if (playerInfo.getUpdated().after(player.getUpdated())) {
          player.setUpdated(playerInfo.getUpdated());
        }
        handlePlayerEvent(playerInfo,player);
        playerDAO.save(player);
        boolean update=false;
        if (Events.CONNECT.equals(playerInfo.getEvent())) {
          if (server.getUpdated() == null || server.getUpdated().after(playerLastUpdate)) {
            update=true;
          }
        }
        AliasManager.createAlias(player,update);
      }
 catch (      Exception e) {
        log.severe(e.getMessage());
        StringWriter w=new StringWriter();
        e.printStackTrace(new PrintWriter(w));
        log.severe(w.getBuffer().toString());
      }
    }
    server.setDirty(true);
    server.setUpdated(new Date());
    serverDAO.save(server);
  }
 catch (  Exception e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
    throw e;
  }
}","/** 
 * Update player info
 * @param server the server instance
 * @param list a list of jipdbs.bean.PlayerInfo
 * @throws Exception 
 * @since 0.5
 */
public void updatePlayer(Server server,List<PlayerInfo> list) throws Exception {
  log.info(""String_Node_Str"" + server.getName());
  try {
    for (    PlayerInfo playerInfo : list) {
      try {
        Date playerLastUpdate;
        Player player=playerDAO.findByServerAndGuid(server.getKey(),playerInfo.getGuid());
        if (player == null) {
          player=new Player();
          player.setCreated(new Date());
          player.setGuid(playerInfo.getGuid());
          player.setLevel(playerInfo.getLevel());
          player.setClientId(playerInfo.getClientId());
          player.setServer(server.getKey());
          player.setBanInfo(null);
          player.setBanInfoUpdated(null);
          playerLastUpdate=playerInfo.getUpdated();
        }
 else {
          player.setLevel(playerInfo.getLevel());
          if (player.getClientId() == null) {
            player.setClientId(playerInfo.getClientId());
          }
          playerLastUpdate=player.getUpdated();
        }
        player.setNickname(playerInfo.getName());
        player.setIp(playerInfo.getIp());
        if (player.getUpdated() == null || playerInfo.getUpdated().after(player.getUpdated())) {
          player.setUpdated(playerInfo.getUpdated());
        }
        handlePlayerEvent(playerInfo,player);
        playerDAO.save(player);
        boolean update=false;
        if (Events.CONNECT.equals(playerInfo.getEvent())) {
          if (server.getUpdated() == null || server.getUpdated().after(playerLastUpdate)) {
            update=true;
          }
        }
        AliasManager.createAlias(player,update);
      }
 catch (      Exception e) {
        log.severe(e.getMessage());
        StringWriter w=new StringWriter();
        e.printStackTrace(new PrintWriter(w));
        log.severe(w.getBuffer().toString());
      }
    }
    server.setDirty(true);
    server.setUpdated(new Date());
    serverDAO.save(server);
  }
 catch (  Exception e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
    throw e;
  }
}",0.9931157006440152
44798,"/** 
 * Update player info
 * @param server the server instance
 * @param list a list of jipdbs.bean.PlayerInfo
 * @since 0.5
 */
public void updatePlayer(Server server,List<PlayerInfo> list){
  try {
    int connected=server.getOnlinePlayers();
    for (    PlayerInfo playerInfo : list) {
      try {
        Date playerLastUpdate;
        Player player=playerDAO.findByServerAndGuid(server.getKey(),playerInfo.getGuid());
        if (player == null) {
          player=new Player();
          player.setCreated(playerInfo.getUpdated());
          player.setGuid(playerInfo.getGuid());
          player.setLevel(playerInfo.getLevel());
          player.setClientId(playerInfo.getClientId());
          player.setServer(server.getKey());
          player.setBanInfo(null);
          player.setBanInfoUpdated(null);
          playerLastUpdate=playerInfo.getUpdated();
        }
 else {
          player.setLevel(playerInfo.getLevel());
          if (player.getClientId() == null) {
            player.setClientId(playerInfo.getClientId());
          }
          playerLastUpdate=player.getUpdated();
        }
        if (Events.BAN.equals(playerInfo.getEvent())) {
          BanInfo banInfo=new BanInfo(playerInfo.getExtra());
          player.setBanInfo(banInfo.toString());
          player.setBanInfoUpdated(playerInfo.getUpdated());
          player.setConnected(false);
          connected+=-1;
        }
 else         if (Events.CONNECT.equals(playerInfo.getEvent()) || Events.DISCONNECT.equals(playerInfo.getEvent()) || Events.UNBAN.equals(playerInfo.getEvent())|| Events.UPDATE.equals(playerInfo.getEvent())) {
          player.setBanInfo(null);
          player.setBanInfoUpdated(null);
          if (Events.CONNECT.equals(playerInfo.getEvent()) || Events.UPDATE.equals(playerInfo.getEvent())) {
            player.setConnected(true);
            if (Events.CONNECT.equals(playerInfo.getEvent())) {
              connected+=1;
            }
          }
 else           if (Events.DISCONNECT.equals(playerInfo.getEvent())) {
            player.setConnected(false);
            connected+=-1;
          }
        }
 else         if (Events.ADDNOTE.equals(playerInfo.getEvent())) {
          player.setNote(playerInfo.getExtra());
        }
 else         if (Events.DELNOTE.equals(playerInfo.getEvent())) {
          player.setNote(null);
        }
        player.setUpdated(playerInfo.getUpdated());
        playerDAO.save(player);
        Alias alias;
        alias=aliasDAO.findByPlayerAndNicknameAndIp(player.getKey(),playerInfo.getName(),playerInfo.getIp());
        if (alias == null) {
          alias=new Alias();
          alias.setCount(1L);
          alias.setCreated(playerInfo.getUpdated());
          alias.setNickname(playerInfo.getName());
          alias.setNgrams(NGrams.ngrams(playerInfo.getName()));
          alias.setPlayer(player.getKey());
          alias.setIp(playerInfo.getIp());
          alias.setServer(server.getKey());
          alias.setUpdated(playerInfo.getUpdated());
        }
 else {
          if (Events.CONNECT.equals(playerInfo.getEvent())) {
            if (server.getUpdated() == null || server.getUpdated().after(playerLastUpdate)) {
              alias.setCount(alias.getCount() + 1L);
            }
          }
          alias.setUpdated(playerInfo.getUpdated());
        }
        aliasDAO.save(alias,true);
      }
 catch (      Exception e) {
        log.severe(e.getMessage());
        StringWriter w=new StringWriter();
        e.printStackTrace(new PrintWriter(w));
        log.severe(w.getBuffer().toString());
      }
    }
    server.setUpdated(new Date());
    if (connected < 0)     connected=0;
    server.setOnlinePlayers(connected);
    serverDAO.save(server);
  }
 catch (  Exception e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
  }
}","/** 
 * Update player info
 * @param server the server instance
 * @param list a list of jipdbs.bean.PlayerInfo
 * @since 0.5
 */
public void updatePlayer(Server server,List<PlayerInfo> list){
  try {
    for (    PlayerInfo playerInfo : list) {
      try {
        Date playerLastUpdate;
        Player player=playerDAO.findByServerAndGuid(server.getKey(),playerInfo.getGuid());
        if (player == null) {
          player=new Player();
          player.setCreated(playerInfo.getUpdated());
          player.setGuid(playerInfo.getGuid());
          player.setLevel(playerInfo.getLevel());
          player.setClientId(playerInfo.getClientId());
          player.setServer(server.getKey());
          player.setBanInfo(null);
          player.setBanInfoUpdated(null);
          playerLastUpdate=playerInfo.getUpdated();
        }
 else {
          player.setLevel(playerInfo.getLevel());
          if (player.getClientId() == null) {
            player.setClientId(playerInfo.getClientId());
          }
          playerLastUpdate=player.getUpdated();
        }
        if (Events.BAN.equals(playerInfo.getEvent())) {
          BanInfo banInfo=new BanInfo(playerInfo.getExtra());
          player.setBanInfo(banInfo.toString());
          player.setBanInfoUpdated(playerInfo.getUpdated());
          player.setConnected(false);
        }
 else         if (Events.CONNECT.equals(playerInfo.getEvent()) || Events.DISCONNECT.equals(playerInfo.getEvent()) || Events.UNBAN.equals(playerInfo.getEvent())|| Events.UPDATE.equals(playerInfo.getEvent())) {
          player.setBanInfo(null);
          player.setBanInfoUpdated(null);
          if (Events.CONNECT.equals(playerInfo.getEvent()) || Events.UPDATE.equals(playerInfo.getEvent())) {
            player.setConnected(true);
          }
 else           if (Events.DISCONNECT.equals(playerInfo.getEvent())) {
            player.setConnected(false);
          }
        }
 else         if (Events.ADDNOTE.equals(playerInfo.getEvent())) {
          player.setNote(playerInfo.getExtra());
        }
 else         if (Events.DELNOTE.equals(playerInfo.getEvent())) {
          player.setNote(null);
        }
        player.setUpdated(playerInfo.getUpdated());
        playerDAO.save(player);
        Alias alias;
        alias=aliasDAO.findByPlayerAndNicknameAndIp(player.getKey(),playerInfo.getName(),playerInfo.getIp());
        if (alias == null) {
          alias=new Alias();
          alias.setCount(1L);
          alias.setCreated(playerInfo.getUpdated());
          alias.setNickname(playerInfo.getName());
          alias.setNgrams(NGrams.ngrams(playerInfo.getName()));
          alias.setPlayer(player.getKey());
          alias.setIp(playerInfo.getIp());
          alias.setServer(server.getKey());
          alias.setUpdated(playerInfo.getUpdated());
        }
 else {
          if (Events.CONNECT.equals(playerInfo.getEvent())) {
            if (server.getUpdated() == null || server.getUpdated().after(playerLastUpdate)) {
              alias.setCount(alias.getCount() + 1L);
            }
          }
          alias.setUpdated(playerInfo.getUpdated());
        }
        aliasDAO.save(alias,true);
      }
 catch (      Exception e) {
        log.severe(e.getMessage());
        StringWriter w=new StringWriter();
        e.printStackTrace(new PrintWriter(w));
        log.severe(w.getBuffer().toString());
      }
    }
    server.setDirty(true);
    serverDAO.save(server);
  }
 catch (  Exception e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
  }
}",0.9590457256461232
44799,"public void cleanServer(Server server){
  playerDAO.cleanConnected(server.getKey());
  server.setOnlinePlayers(0);
  serverDAO.save(server);
}","public void cleanServer(Server server){
  playerDAO.cleanConnected(server.getKey());
  server.setOnlinePlayers(0);
  server.setDirty(false);
  serverDAO.save(server);
}",0.9161290322580644
44800,"public Server(Entity entity){
  this.setKey(entity.getKey());
  this.setPluginVersion((String)entity.getProperty(""String_Node_Str""));
  this.setCreated((Date)entity.getProperty(""String_Node_Str""));
  this.setUpdated((Date)entity.getProperty(""String_Node_Str""));
  this.setAdmin((Email)entity.getProperty(""String_Node_Str""));
  this.setName((String)entity.getProperty(""String_Node_Str""));
  this.setUid((String)entity.getProperty(""String_Node_Str""));
  this.setOnlinePlayers(((Long)entity.getProperty(""String_Node_Str"")).intValue());
  this.setAddress((String)entity.getProperty(""String_Node_Str""));
  this.setMaxLevel((Long)entity.getProperty(""String_Node_Str""));
  if (this.getMaxLevel() == null) {
    this.setMaxLevel(2L);
  }
}","public Server(Entity entity){
  this.setKey(entity.getKey());
  this.setPluginVersion((String)entity.getProperty(""String_Node_Str""));
  this.setCreated((Date)entity.getProperty(""String_Node_Str""));
  this.setUpdated((Date)entity.getProperty(""String_Node_Str""));
  this.setAdmin((Email)entity.getProperty(""String_Node_Str""));
  this.setName((String)entity.getProperty(""String_Node_Str""));
  this.setUid((String)entity.getProperty(""String_Node_Str""));
  this.setOnlinePlayers(((Long)entity.getProperty(""String_Node_Str"")).intValue());
  this.setAddress((String)entity.getProperty(""String_Node_Str""));
  this.setMaxLevel((Long)entity.getProperty(""String_Node_Str""));
  if (this.getMaxLevel() == null) {
    this.setMaxLevel(2L);
  }
  Boolean b=(Boolean)entity.getProperty(""String_Node_Str"");
  this.setDirty(b != null ? b : true);
}",0.9365791159513132
44801,"public Entity toEntity(){
  Entity entity=this.getKey() == null ? new Entity(""String_Node_Str"") : new Entity(this.getKey());
  entity.setProperty(""String_Node_Str"",this.getName());
  entity.setProperty(""String_Node_Str"",this.getUpdated());
  entity.setProperty(""String_Node_Str"",this.getUid());
  entity.setProperty(""String_Node_Str"",this.getAddress());
  entity.setUnindexedProperty(""String_Node_Str"",this.getCreated());
  entity.setUnindexedProperty(""String_Node_Str"",this.getPluginVersion());
  entity.setUnindexedProperty(""String_Node_Str"",this.getMaxLevel());
  entity.setUnindexedProperty(""String_Node_Str"",this.getOnlinePlayers());
  entity.setUnindexedProperty(""String_Node_Str"",this.getAdmin());
  return entity;
}","public Entity toEntity(){
  Entity entity=this.getKey() == null ? new Entity(""String_Node_Str"") : new Entity(this.getKey());
  entity.setProperty(""String_Node_Str"",this.getName());
  entity.setProperty(""String_Node_Str"",this.getUpdated());
  entity.setProperty(""String_Node_Str"",this.getUid());
  entity.setProperty(""String_Node_Str"",this.getAddress());
  entity.setProperty(""String_Node_Str"",this.getDirty());
  entity.setUnindexedProperty(""String_Node_Str"",this.getCreated());
  entity.setUnindexedProperty(""String_Node_Str"",this.getPluginVersion());
  entity.setUnindexedProperty(""String_Node_Str"",this.getMaxLevel());
  entity.setUnindexedProperty(""String_Node_Str"",this.getOnlinePlayers());
  entity.setUnindexedProperty(""String_Node_Str"",this.getAdmin());
  return entity;
}",0.9620758483033932
44802,"@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (""String_Node_Str"".equalsIgnoreCase(req.getPathInfo())) {
    List<PlayerInfo> list=new ArrayList<PlayerInfo>();
    String key=req.getParameter(""String_Node_Str"");
    JSONArray players=(JSONArray)JSONValue.parse(req.getParameter(""String_Node_Str""));
    PlayerInfo p;
    for (    Object obPlayer : players) {
      JSONArray player=(JSONArray)obPlayer;
      p=new PlayerInfo(Events.UPDATE,((String)player.get(0)).trim(),((String)player.get(2)).trim(),null,((String)player.get(1)).trim(),null);
      list.add(p);
    }
    app.updateConnect(key,list,null);
  }
}","@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (""String_Node_Str"".equalsIgnoreCase(req.getPathInfo())) {
    List<PlayerInfo> list=new ArrayList<PlayerInfo>();
    String key=req.getParameter(""String_Node_Str"");
    JSONArray players=(JSONArray)JSONValue.parse(req.getParameter(""String_Node_Str""));
    PlayerInfo p;
    for (    Object obPlayer : players) {
      JSONArray player=(JSONArray)obPlayer;
      p=new PlayerInfo(Events.UPDATE,((String)player.get(0)).trim(),((String)player.get(2)).trim(),null,((String)player.get(1)).trim(),null);
      list.add(p);
    }
    app.updateConnect(key,list,null);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(req.getPathInfo())) {
    resp.setContentType(""String_Node_Str"");
    String key=req.getParameter(""String_Node_Str"");
    Server server=null;
    try {
      server=app.getServer(key);
    }
 catch (    EntityNotFoundException e) {
      log.severe(e.getMessage());
    }
    if (server == null) {
      resp.getWriter().println(""String_Node_Str"" + key + ""String_Node_Str"");
    }
 else {
      if (server.getDirty()) {
        app.refreshServerInfo(server);
      }
      resp.getWriter().println(""String_Node_Str"" + server.getKeyString() + ""String_Node_Str""+ server.getOnlinePlayers()+ ""String_Node_Str""+ server.getName()+ ""String_Node_Str"");
    }
  }
}",0.663147792706334
44803,"public void doGet(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  Server server=null;
  try {
    server=app.getServer(req.getParameter(""String_Node_Str""));
  }
 catch (  EntityNotFoundException e) {
    e.printStackTrace();
  }
  req.setAttribute(""String_Node_Str"",server);
}","public void doGet(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  Server server=null;
  try {
    server=app.getServer(req.getParameter(""String_Node_Str""));
  }
 catch (  EntityNotFoundException e) {
    log.severe(e.getMessage());
  }
  req.setAttribute(""String_Node_Str"",server);
}",0.929159802306425
44804,"/** 
 * Updates the current list of players for a given server.
 * @param key the server key.
 * @param list the list of currently logged in players.
 * @since 0.1
 */
@Deprecated public void updateConnect(String key,List<PlayerInfo> list,String remoteAddr){
  DatastoreService service=DatastoreServiceFactory.getDatastoreService();
  ServerManager serverManager=new ServerManager();
  try {
    Date stamp=new Date();
    Server server=serverManager.getAuthorizedServer(key,remoteAddr);
    log.info(""String_Node_Str"" + server.getName());
    Map<String,Entity> entities=new HashMap<String,Entity>();
    for (    PlayerInfo info : list) {
      String playerKey=""String_Node_Str"" + key + info.getGuid();
      Player player=playerDAO.findByServerAndGuid(server.getKey(),info.getGuid());
      Date playerLastUpdate=null;
      if (player == null) {
        player=new Player();
        player.setCreated(stamp);
        player.setGuid(info.getGuid());
        player.setServer(server.getKey());
        player.setBanInfo(null);
        player.setBanInfoUpdated(null);
        if (info.getUpdated() != null) {
          player.setUpdated(info.getUpdated());
        }
 else {
          player.setUpdated(stamp);
        }
        playerDAO.save(player);
      }
 else {
        if (player.getBanInfo() != null) {
          player.setBanInfo(null);
          player.setBanInfoUpdated(null);
        }
        playerLastUpdate=player.getUpdated();
        player.setUpdated(stamp);
        playerDAO.save(player,false);
        entities.put(playerKey,player.toEntity());
      }
      String aliasKey=""String_Node_Str"" + player.getGuid() + info.getName()+ info.getIp();
      Alias alias=aliasDAO.findByPlayerAndNicknameAndIp(player.getKey(),info.getName(),info.getIp());
      if (alias == null) {
        alias=new Alias();
        alias.setCount(1L);
        alias.setCreated(stamp);
        alias.setNickname(info.getName());
        alias.setNgrams(NGrams.ngrams(info.getName()));
        alias.setPlayer(player.getKey());
        alias.setIp(info.getIp());
        alias.setServer(server.getKey());
        if (info.getUpdated() != null) {
          alias.setUpdated(info.getUpdated());
        }
 else {
          alias.setUpdated(stamp);
        }
      }
 else {
        if (server.getUpdated() == null || playerLastUpdate == null || server.getUpdated().after(playerLastUpdate)) {
          alias.setCount(alias.getCount() + 1);
        }
        alias.setUpdated(stamp);
        aliasDAO.save(alias,false);
      }
      entities.put(aliasKey,alias.toEntity());
    }
    server.setUpdated(stamp);
    service.put(entities.values());
    serverDAO.save(server);
  }
 catch (  UnauthorizedUpdateException e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
  }
catch (  Exception e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
  }
}","/** 
 * Updates the current list of players for a given server.
 * @param key the server key.
 * @param list the list of currently logged in players.
 * @since 0.1
 */
@Deprecated public void updateConnect(String key,List<PlayerInfo> list,String remoteAddr){
  DatastoreService service=DatastoreServiceFactory.getDatastoreService();
  ServerManager serverManager=new ServerManager();
  try {
    Date stamp=new Date();
    Server server=serverManager.getAuthorizedServer(key,remoteAddr);
    log.info(""String_Node_Str"" + server.getName());
    Map<String,Entity> entities=new LinkedHashMap<String,Entity>();
    for (    PlayerInfo info : list) {
      String playerKey=""String_Node_Str"" + key + info.getGuid();
      Player player=playerDAO.findByServerAndGuid(server.getKey(),info.getGuid());
      Date playerLastUpdate=null;
      if (player == null) {
        player=new Player();
        player.setCreated(stamp);
        player.setGuid(info.getGuid());
        player.setServer(server.getKey());
        player.setBanInfo(null);
        player.setBanInfoUpdated(null);
        if (info.getUpdated() != null) {
          player.setUpdated(info.getUpdated());
        }
 else {
          player.setUpdated(stamp);
        }
        playerDAO.save(player);
      }
 else {
        if (player.getBanInfo() != null) {
          player.setBanInfo(null);
          player.setBanInfoUpdated(null);
        }
        playerLastUpdate=player.getUpdated();
        player.setUpdated(stamp);
        playerDAO.save(player,false);
        entities.put(playerKey,player.toEntity());
      }
      String aliasKey=""String_Node_Str"" + player.getGuid() + info.getName()+ info.getIp();
      Alias alias=aliasDAO.findByPlayerAndNicknameAndIp(player.getKey(),info.getName(),info.getIp());
      if (alias == null) {
        alias=new Alias();
        alias.setCount(1L);
        alias.setCreated(stamp);
        alias.setNickname(info.getName());
        alias.setNgrams(NGrams.ngrams(info.getName()));
        alias.setPlayer(player.getKey());
        alias.setIp(info.getIp());
        alias.setServer(server.getKey());
        if (info.getUpdated() != null) {
          alias.setUpdated(info.getUpdated());
        }
 else {
          alias.setUpdated(stamp);
        }
      }
 else {
        if (server.getUpdated() == null || playerLastUpdate == null || server.getUpdated().after(playerLastUpdate)) {
          alias.setCount(alias.getCount() + 1);
        }
        alias.setUpdated(stamp);
        aliasDAO.save(alias,false);
      }
      entities.put(aliasKey,alias.toEntity());
    }
    server.setUpdated(stamp);
    service.put(entities.values());
    serverDAO.save(server);
  }
 catch (  UnauthorizedUpdateException e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
  }
catch (  Exception e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
  }
}",0.9990215264187868
44805,"/** 
 * Bulk updates banning information for the given players.
 * @param key the server uid.
 * @param list the ban information list. If  {@link BanInfo#getReason()} isnull or empty, stores <code>null</code> y the datastore. That's in order to unban a player.
 * @since 0.1
 */
@Deprecated public void updateBanInfo(String key,List<BanInfo> list,String remoteAddr){
  DatastoreService service=DatastoreServiceFactory.getDatastoreService();
  ServerManager serverManager=new ServerManager();
  try {
    Date stamp=new Date();
    Server server=serverManager.getAuthorizedServer(key,remoteAddr);
    log.info(""String_Node_Str"" + server.getName());
    Map<String,Entity> entities=new HashMap<String,Entity>();
    for (    BanInfo info : list) {
      Player player=playerDAO.findByServerAndGuid(server.getKey(),info.getGuid());
      String reason=info.getReason();
      Date banInfoUpdated=info.getUpdated() != null ? info.getUpdated() : new Date();
      if (StringUtils.isEmpty(reason))       reason=null;
      if (player == null) {
        player=new Player();
        player.setCreated(stamp);
        player.setGuid(info.getGuid());
        player.setServer(server.getKey());
        if (info.getUpdated() != null)         player.setUpdated(info.getUpdated());
        player.setBanInfo(reason);
        player.setBanInfoUpdated(reason != null ? banInfoUpdated : null);
        playerDAO.save(player);
      }
 else {
        if (info.getUpdated() != null)         player.setUpdated(info.getUpdated());
        player.setBanInfo(reason);
        player.setBanInfoUpdated(reason != null ? banInfoUpdated : null);
        entities.put(""String_Node_Str"" + player.getGuid(),player.toEntity());
        playerDAO.save(player,false);
      }
      String aliasKey=""String_Node_Str"" + player.getGuid() + info.getName()+ info.getIp();
      Alias alias=aliasDAO.findByPlayerAndNicknameAndIp(player.getKey(),info.getName(),info.getIp());
      if (alias == null) {
        alias=new Alias();
        alias.setCount(1L);
        alias.setCreated(stamp);
        alias.setNickname(info.getName());
        alias.setNgrams(NGrams.ngrams(info.getName()));
        alias.setPlayer(player.getKey());
        alias.setIp(info.getIp());
        if (info.getUpdated() != null) {
          alias.setUpdated(info.getUpdated());
        }
        alias.setServer(server.getKey());
        entities.put(aliasKey,alias.toEntity());
      }
 else {
        if (info.getUpdated() != null) {
          alias.setUpdated(info.getUpdated());
          entities.put(aliasKey,alias.toEntity());
        }
        aliasDAO.save(alias,false);
      }
    }
    service.put(entities.values());
  }
 catch (  UnauthorizedUpdateException e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
  }
catch (  Exception e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
  }
}","/** 
 * Bulk updates banning information for the given players.
 * @param key the server uid.
 * @param list the ban information list. If  {@link BanInfo#getReason()} isnull or empty, stores <code>null</code> y the datastore. That's in order to unban a player.
 * @since 0.1
 */
@Deprecated public void updateBanInfo(String key,List<BanInfo> list,String remoteAddr){
  DatastoreService service=DatastoreServiceFactory.getDatastoreService();
  ServerManager serverManager=new ServerManager();
  try {
    Date stamp=new Date();
    Server server=serverManager.getAuthorizedServer(key,remoteAddr);
    log.info(""String_Node_Str"" + server.getName());
    Map<String,Entity> entities=new LinkedHashMap<String,Entity>();
    for (    BanInfo info : list) {
      Player player=playerDAO.findByServerAndGuid(server.getKey(),info.getGuid());
      String reason=info.getReason();
      Date banInfoUpdated=info.getUpdated() != null ? info.getUpdated() : new Date();
      if (StringUtils.isEmpty(reason))       reason=null;
      if (player == null) {
        player=new Player();
        player.setCreated(stamp);
        player.setGuid(info.getGuid());
        player.setServer(server.getKey());
        if (info.getUpdated() != null)         player.setUpdated(info.getUpdated());
        player.setBanInfo(reason);
        player.setBanInfoUpdated(reason != null ? banInfoUpdated : null);
        playerDAO.save(player);
      }
 else {
        if (info.getUpdated() != null)         player.setUpdated(info.getUpdated());
        player.setBanInfo(reason);
        player.setBanInfoUpdated(reason != null ? banInfoUpdated : null);
        entities.put(""String_Node_Str"" + player.getGuid(),player.toEntity());
        playerDAO.save(player,false);
      }
      String aliasKey=""String_Node_Str"" + player.getGuid() + info.getName()+ info.getIp();
      Alias alias=aliasDAO.findByPlayerAndNicknameAndIp(player.getKey(),info.getName(),info.getIp());
      if (alias == null) {
        alias=new Alias();
        alias.setCount(1L);
        alias.setCreated(stamp);
        alias.setNickname(info.getName());
        alias.setNgrams(NGrams.ngrams(info.getName()));
        alias.setPlayer(player.getKey());
        alias.setIp(info.getIp());
        if (info.getUpdated() != null) {
          alias.setUpdated(info.getUpdated());
        }
        alias.setServer(server.getKey());
        entities.put(aliasKey,alias.toEntity());
      }
 else {
        if (info.getUpdated() != null) {
          alias.setUpdated(info.getUpdated());
          entities.put(aliasKey,alias.toEntity());
        }
        aliasDAO.save(alias,false);
      }
    }
    service.put(entities.values());
  }
 catch (  UnauthorizedUpdateException e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
  }
catch (  Exception e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
  }
}",0.9990208877284597
44806,"/** 
 * @since 0.2
 */
@Deprecated public void updateDisconnect(String key,List<PlayerInfo> list,String remoteAddr){
  DatastoreService service=DatastoreServiceFactory.getDatastoreService();
  ServerManager serverManager=new ServerManager();
  try {
    Date stamp=new Date();
    Server server=serverManager.getAuthorizedServer(key,remoteAddr);
    log.info(""String_Node_Str"" + server.getName());
    Map<String,Entity> entities=new HashMap<String,Entity>();
    for (    PlayerInfo info : list) {
      String playerKey=""String_Node_Str"" + key + info.getGuid();
      Player player=playerDAO.findByServerAndGuid(server.getKey(),info.getGuid());
      if (player == null) {
        player=new Player();
        player.setCreated(stamp);
        player.setUpdated(stamp);
        player.setGuid(info.getGuid());
        player.setServer(server.getKey());
        player.setBanInfo(null);
        player.setBanInfoUpdated(null);
        playerDAO.save(player);
      }
 else {
        player.setUpdated(stamp);
        playerDAO.save(player,false);
        entities.put(playerKey,player.toEntity());
      }
      String aliasKey=""String_Node_Str"" + player.getGuid() + info.getName()+ info.getIp();
      Alias alias=aliasDAO.findByPlayerAndNicknameAndIp(player.getKey(),info.getName(),info.getIp());
      if (alias == null) {
        alias=new Alias();
        alias.setCount(1L);
        alias.setCreated(stamp);
        alias.setNickname(info.getName());
        alias.setNgrams(NGrams.ngrams(info.getName()));
        alias.setPlayer(player.getKey());
        alias.setIp(info.getIp());
        alias.setUpdated(stamp);
        alias.setServer(server.getKey());
        entities.put(aliasKey,alias.toEntity());
      }
 else {
        alias.setUpdated(stamp);
        aliasDAO.save(alias,false);
      }
    }
    server.setUpdated(stamp);
    service.put(entities.values());
    serverDAO.save(server);
  }
 catch (  UnauthorizedUpdateException e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
  }
catch (  Exception e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
  }
}","/** 
 * @since 0.2
 */
@Deprecated public void updateDisconnect(String key,List<PlayerInfo> list,String remoteAddr){
  DatastoreService service=DatastoreServiceFactory.getDatastoreService();
  ServerManager serverManager=new ServerManager();
  try {
    Date stamp=new Date();
    Server server=serverManager.getAuthorizedServer(key,remoteAddr);
    log.info(""String_Node_Str"" + server.getName());
    Map<String,Entity> entities=new LinkedHashMap<String,Entity>();
    for (    PlayerInfo info : list) {
      String playerKey=""String_Node_Str"" + key + info.getGuid();
      Player player=playerDAO.findByServerAndGuid(server.getKey(),info.getGuid());
      if (player == null) {
        player=new Player();
        player.setCreated(stamp);
        player.setUpdated(stamp);
        player.setGuid(info.getGuid());
        player.setServer(server.getKey());
        player.setBanInfo(null);
        player.setBanInfoUpdated(null);
        playerDAO.save(player);
      }
 else {
        player.setUpdated(stamp);
        playerDAO.save(player,false);
        entities.put(playerKey,player.toEntity());
      }
      String aliasKey=""String_Node_Str"" + player.getGuid() + info.getName()+ info.getIp();
      Alias alias=aliasDAO.findByPlayerAndNicknameAndIp(player.getKey(),info.getName(),info.getIp());
      if (alias == null) {
        alias=new Alias();
        alias.setCount(1L);
        alias.setCreated(stamp);
        alias.setNickname(info.getName());
        alias.setNgrams(NGrams.ngrams(info.getName()));
        alias.setPlayer(player.getKey());
        alias.setIp(info.getIp());
        alias.setUpdated(stamp);
        alias.setServer(server.getKey());
        entities.put(aliasKey,alias.toEntity());
      }
 else {
        alias.setUpdated(stamp);
        aliasDAO.save(alias,false);
      }
    }
    server.setUpdated(stamp);
    service.put(entities.values());
    serverDAO.save(server);
  }
 catch (  UnauthorizedUpdateException e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
  }
catch (  Exception e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
  }
}",0.998697351280938
44807,"/** 
 * Update player info
 * @param server the server instance
 * @param list a list of jipdbs.bean.PlayerInfo
 * @since 0.5
 */
public void updatePlayer(Server server,List<PlayerInfo> list){
  try {
    Map<String,Entity> entities=new LinkedHashMap<String,Entity>(15);
    int connected=server.getOnlinePlayers();
    for (    PlayerInfo playerInfo : list) {
      try {
        Date playerLastUpdate;
        Player player=playerDAO.findByServerAndGuid(server.getKey(),playerInfo.getGuid());
        if (player == null) {
          player=new Player();
          player.setCreated(playerInfo.getUpdated());
          player.setGuid(playerInfo.getGuid());
          player.setLevel(playerInfo.getLevel());
          player.setClientId(playerInfo.getClientId());
          player.setServer(server.getKey());
          player.setBanInfo(null);
          player.setBanInfoUpdated(null);
          playerLastUpdate=playerInfo.getUpdated();
        }
 else {
          player.setLevel(playerInfo.getLevel());
          if (player.getClientId() == null) {
            player.setClientId(playerInfo.getClientId());
          }
          playerLastUpdate=player.getUpdated();
        }
        if (Events.BAN.equals(playerInfo.getEvent())) {
          BanInfo banInfo=new BanInfo(playerInfo.getExtra());
          player.setBanInfo(banInfo.toString());
          player.setBanInfoUpdated(playerInfo.getUpdated());
          player.setConnected(false);
          connected+=-1;
        }
 else         if (Events.CONNECT.equals(playerInfo.getEvent()) || Events.DISCONNECT.equals(playerInfo.getEvent()) || Events.UNBAN.equals(playerInfo.getEvent())|| Events.UPDATE.equals(playerInfo.getEvent())) {
          player.setBanInfo(null);
          player.setBanInfoUpdated(null);
          if (Events.CONNECT.equals(playerInfo.getEvent()) || Events.UPDATE.equals(playerInfo.getEvent())) {
            player.setConnected(true);
            if (Events.CONNECT.equals(playerInfo.getEvent())) {
              connected+=1;
            }
          }
 else           if (Events.DISCONNECT.equals(playerInfo.getEvent())) {
            player.setConnected(false);
            connected+=-1;
          }
        }
 else         if (Events.ADDNOTE.equals(playerInfo.getEvent())) {
          player.setNote(playerInfo.getExtra());
        }
 else         if (Events.DELNOTE.equals(playerInfo.getEvent())) {
          player.setNote(null);
        }
        player.setUpdated(playerInfo.getUpdated());
        playerDAO.save(player,player.getKey() == null);
        entities.put(""String_Node_Str"" + player.getGuid(),player.toEntity());
        String aliasKey=""String_Node_Str"" + player.getGuid() + playerInfo.getName()+ playerInfo.getIp();
        Entity aliasEntity=entities.get(aliasKey);
        Alias alias;
        if (aliasEntity != null) {
          alias=new Alias(aliasEntity);
        }
 else {
          alias=aliasDAO.findByPlayerAndNicknameAndIp(player.getKey(),playerInfo.getName(),playerInfo.getIp());
        }
        if (alias == null) {
          alias=new Alias();
          alias.setCount(1L);
          alias.setCreated(playerInfo.getUpdated());
          alias.setNickname(playerInfo.getName());
          alias.setNgrams(NGrams.ngrams(playerInfo.getName()));
          alias.setPlayer(player.getKey());
          alias.setIp(playerInfo.getIp());
          alias.setServer(server.getKey());
          alias.setUpdated(playerInfo.getUpdated());
        }
 else {
          if (Events.CONNECT.equals(playerInfo.getEvent())) {
            if (server.getUpdated() == null || server.getUpdated().after(playerLastUpdate)) {
              alias.setCount(alias.getCount() + 1L);
            }
          }
          alias.setUpdated(playerInfo.getUpdated());
        }
        aliasDAO.save(alias,false);
        entities.put(aliasKey,alias.toEntity());
      }
 catch (      Exception e) {
        log.severe(e.getMessage());
        StringWriter w=new StringWriter();
        e.printStackTrace(new PrintWriter(w));
        log.severe(w.getBuffer().toString());
      }
    }
    DatastoreService service=DatastoreServiceFactory.getDatastoreService();
    service.put(entities.values());
    server.setUpdated(new Date());
    if (connected < 0)     connected=0;
    server.setOnlinePlayers(connected);
    serverDAO.save(server);
  }
 catch (  Exception e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
  }
}","/** 
 * Update player info
 * @param server the server instance
 * @param list a list of jipdbs.bean.PlayerInfo
 * @since 0.5
 */
public void updatePlayer(Server server,List<PlayerInfo> list){
  try {
    int connected=server.getOnlinePlayers();
    for (    PlayerInfo playerInfo : list) {
      try {
        Date playerLastUpdate;
        Player player=playerDAO.findByServerAndGuid(server.getKey(),playerInfo.getGuid());
        if (player == null) {
          player=new Player();
          player.setCreated(playerInfo.getUpdated());
          player.setGuid(playerInfo.getGuid());
          player.setLevel(playerInfo.getLevel());
          player.setClientId(playerInfo.getClientId());
          player.setServer(server.getKey());
          player.setBanInfo(null);
          player.setBanInfoUpdated(null);
          playerLastUpdate=playerInfo.getUpdated();
        }
 else {
          player.setLevel(playerInfo.getLevel());
          if (player.getClientId() == null) {
            player.setClientId(playerInfo.getClientId());
          }
          playerLastUpdate=player.getUpdated();
        }
        if (Events.BAN.equals(playerInfo.getEvent())) {
          BanInfo banInfo=new BanInfo(playerInfo.getExtra());
          player.setBanInfo(banInfo.toString());
          player.setBanInfoUpdated(playerInfo.getUpdated());
          player.setConnected(false);
          connected+=-1;
        }
 else         if (Events.CONNECT.equals(playerInfo.getEvent()) || Events.DISCONNECT.equals(playerInfo.getEvent()) || Events.UNBAN.equals(playerInfo.getEvent())|| Events.UPDATE.equals(playerInfo.getEvent())) {
          player.setBanInfo(null);
          player.setBanInfoUpdated(null);
          if (Events.CONNECT.equals(playerInfo.getEvent()) || Events.UPDATE.equals(playerInfo.getEvent())) {
            player.setConnected(true);
            if (Events.CONNECT.equals(playerInfo.getEvent())) {
              connected+=1;
            }
          }
 else           if (Events.DISCONNECT.equals(playerInfo.getEvent())) {
            player.setConnected(false);
            connected+=-1;
          }
        }
 else         if (Events.ADDNOTE.equals(playerInfo.getEvent())) {
          player.setNote(playerInfo.getExtra());
        }
 else         if (Events.DELNOTE.equals(playerInfo.getEvent())) {
          player.setNote(null);
        }
        player.setUpdated(playerInfo.getUpdated());
        playerDAO.save(player);
        Alias alias;
        alias=aliasDAO.findByPlayerAndNicknameAndIp(player.getKey(),playerInfo.getName(),playerInfo.getIp());
        if (alias == null) {
          alias=new Alias();
          alias.setCount(1L);
          alias.setCreated(playerInfo.getUpdated());
          alias.setNickname(playerInfo.getName());
          alias.setNgrams(NGrams.ngrams(playerInfo.getName()));
          alias.setPlayer(player.getKey());
          alias.setIp(playerInfo.getIp());
          alias.setServer(server.getKey());
          alias.setUpdated(playerInfo.getUpdated());
        }
 else {
          if (Events.CONNECT.equals(playerInfo.getEvent())) {
            if (server.getUpdated() == null || server.getUpdated().after(playerLastUpdate)) {
              alias.setCount(alias.getCount() + 1L);
            }
          }
          alias.setUpdated(playerInfo.getUpdated());
        }
        aliasDAO.save(alias,true);
      }
 catch (      Exception e) {
        log.severe(e.getMessage());
        StringWriter w=new StringWriter();
        e.printStackTrace(new PrintWriter(w));
        log.severe(w.getBuffer().toString());
      }
    }
    server.setUpdated(new Date());
    if (connected < 0)     connected=0;
    server.setOnlinePlayers(connected);
    serverDAO.save(server);
  }
 catch (  Exception e) {
    log.severe(e.getMessage());
    StringWriter w=new StringWriter();
    e.printStackTrace(new PrintWriter(w));
    log.severe(w.getBuffer().toString());
  }
}",0.928715454868936
44808,"public void setName(String name){
  this.name=name;
}","public void setName(String name){
  this.name=name.trim();
}",0.9380530973451328
44809,"public Entity toEntity(){
  Entity entity=this.getKey() == null ? new Entity(""String_Node_Str"",this.getPlayer()) : new Entity(this.getKey());
  entity.setProperty(""String_Node_Str"",this.getUpdated());
  entity.setProperty(""String_Node_Str"",Functions.ipToDecimal(this.getIp()));
  entity.setProperty(""String_Node_Str"",this.getNickname());
  entity.setProperty(""String_Node_Str"",this.getNgrams());
  entity.setProperty(""String_Node_Str"",this.getPlayer());
  entity.setProperty(""String_Node_Str"",this.getServer());
  entity.setUnindexedProperty(""String_Node_Str"",this.getCreated());
  entity.setUnindexedProperty(""String_Node_Str"",this.getCount());
  return entity;
}","public Entity toEntity(){
  Entity entity;
  if (this.entity != null) {
    entity=this.entity;
  }
 else {
    entity=this.getKey() == null ? new Entity(""String_Node_Str"",this.getPlayer()) : new Entity(this.getKey());
  }
  entity.setProperty(""String_Node_Str"",this.getUpdated());
  entity.setProperty(""String_Node_Str"",Functions.ipToDecimal(this.getIp()));
  entity.setProperty(""String_Node_Str"",this.getNickname());
  entity.setProperty(""String_Node_Str"",this.getNgrams());
  entity.setProperty(""String_Node_Str"",this.getPlayer());
  entity.setProperty(""String_Node_Str"",this.getServer());
  entity.setUnindexedProperty(""String_Node_Str"",this.getCreated());
  entity.setUnindexedProperty(""String_Node_Str"",this.getCount());
  return entity;
}",0.9425124201561392
44810,"@SuppressWarnings(""String_Node_Str"") public Alias(Entity entity){
  this.setKey(entity.getKey());
  this.setPlayer((Key)entity.getParent());
  this.setCreated((Date)entity.getProperty(""String_Node_Str""));
  this.setUpdated((Date)entity.getProperty(""String_Node_Str""));
  this.setCount((Long)entity.getProperty(""String_Node_Str""));
  this.setIp((String)Functions.decimalToIp((Long)entity.getProperty(""String_Node_Str"")));
  this.setNickname((String)entity.getProperty(""String_Node_Str""));
  this.setNgrams((Collection<String>)entity.getProperty(""String_Node_Str""));
  this.setServer((Key)entity.getProperty(""String_Node_Str""));
}","@SuppressWarnings(""String_Node_Str"") public Alias(Entity entity){
  this.setKey(entity.getKey());
  this.setPlayer((Key)entity.getParent());
  this.setCreated((Date)entity.getProperty(""String_Node_Str""));
  this.setUpdated((Date)entity.getProperty(""String_Node_Str""));
  this.setCount((Long)entity.getProperty(""String_Node_Str""));
  this.setIp((String)Functions.decimalToIp((Long)entity.getProperty(""String_Node_Str"")));
  this.setNickname((String)entity.getProperty(""String_Node_Str""));
  this.setNgrams((Collection<String>)entity.getProperty(""String_Node_Str""));
  this.setServer((Key)entity.getProperty(""String_Node_Str""));
  this.entity=entity;
}",0.9827856025039124
44811,"@Override public List<Player> findLatest(int offset,int limit,int[] count){
  DatastoreService service=DatastoreServiceFactory.getDatastoreService();
  Query q=new Query(""String_Node_Str"");
  q.addSort(""String_Node_Str"",SortDirection.DESCENDING);
  PreparedQuery pq=service.prepare(q);
  count[0]=pq.countEntities(withPrefetchSize(limit));
  List<Player> players=new ArrayList<Player>();
  for (  Entity entity : pq.asIterable(withOffset(offset).limit(limit)))   players.add(new Player(entity));
  return players;
}","@Override public List<Player> findLatest(int offset,int limit,int[] count){
  DatastoreService service=DatastoreServiceFactory.getDatastoreService();
  Query q=new Query(""String_Node_Str"");
  q.addSort(""String_Node_Str"",SortDirection.DESCENDING);
  q.addSort(""String_Node_Str"",SortDirection.DESCENDING);
  PreparedQuery pq=service.prepare(q);
  count[0]=pq.countEntities(withPrefetchSize(limit));
  List<Player> players=new ArrayList<Player>();
  for (  Entity entity : pq.asIterable(withOffset(offset).limit(limit)))   players.add(new Player(entity));
  return players;
}",0.9475620975160992
44812,"public List<Alias> findByNickname(DatastoreService service,String query,int offset,int limit,int[] count){
  Collection<String> ngrams=new ArrayList<String>();
  ngrams.add(query.toLowerCase());
  Query q=new Query(""String_Node_Str"");
  q.addFilter(""String_Node_Str"",FilterOperator.IN,ngrams);
  q.addSort(""String_Node_Str"",SortDirection.DESCENDING);
  PreparedQuery pq=service.prepare(q);
  pq.countEntities(withPrefetchSize(limit));
  List<Entity> list=pq.asList(withLimit(limit).offset(offset));
  List<Alias> result=new ArrayList<Alias>();
  for (  Entity alias : list)   result.add(map(alias));
  return result;
}","public List<Alias> findByNickname(DatastoreService service,String query,int offset,int limit,int[] count){
  Collection<String> ngrams=new ArrayList<String>();
  ngrams.add(query.toLowerCase());
  Query q=new Query(""String_Node_Str"");
  q.addFilter(""String_Node_Str"",FilterOperator.IN,ngrams);
  q.addSort(""String_Node_Str"",SortDirection.DESCENDING);
  PreparedQuery pq=service.prepare(q);
  count[0]=pq.countEntities(withPrefetchSize(limit));
  List<Entity> list=pq.asList(withLimit(limit).offset(offset));
  List<Alias> result=new ArrayList<Alias>();
  for (  Entity alias : list)   result.add(map(alias));
  return result;
}",0.9927710843373494
44813,"@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  int page=1;
  int pageSize=DEFAULT_PAGE_SIZE;
  try {
    page=Integer.parseInt(req.getParameter(""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
  }
  try {
    pageSize=Integer.parseInt(req.getParameter(""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
  }
  int offset=(page - 1) * pageSize;
  int limit=pageSize;
  String query=req.getParameter(""String_Node_Str"");
  String type=req.getParameter(""String_Node_Str"");
  List<SearchResult> list=new ArrayList<SearchResult>();
  int[] total=new int[1];
  if (query == null || ""String_Node_Str"".equals(query))   list=app.rootQuery(offset,limit,total);
 else   list=app.search(query,type,offset,limit,total);
  int totalPages=(int)Math.ceil((double)total[0] / pageSize);
  req.setAttribute(""String_Node_Str"",list);
  req.setAttribute(""String_Node_Str"",query);
  req.setAttribute(""String_Node_Str"",type);
  req.setAttribute(""String_Node_Str"",new PageLink(page,pageSize,totalPages));
}","@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  int page=1;
  int pageSize=DEFAULT_PAGE_SIZE;
  try {
    page=Integer.parseInt(req.getParameter(""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
  }
  try {
    pageSize=Integer.parseInt(req.getParameter(""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
  }
  int offset=(page - 1) * pageSize;
  int limit=pageSize;
  String query=req.getParameter(""String_Node_Str"");
  String type=req.getParameter(""String_Node_Str"");
  List<SearchResult> list=new ArrayList<SearchResult>();
  int[] total=new int[1];
  long time=System.currentTimeMillis();
  if (query == null || ""String_Node_Str"".equals(query))   list=app.rootQuery(offset,limit,total);
 else   list=app.search(query,type,offset,limit,total);
  time=System.currentTimeMillis() - time;
  int totalPages=(int)Math.ceil((double)total[0] / pageSize);
  req.setAttribute(""String_Node_Str"",list);
  req.setAttribute(""String_Node_Str"",query);
  req.setAttribute(""String_Node_Str"",type);
  req.setAttribute(""String_Node_Str"",total[0]);
  req.setAttribute(""String_Node_Str"",time);
  req.setAttribute(""String_Node_Str"",new PageLink(page,pageSize,totalPages));
}",0.9252577319587628
44814,"/** 
 * Vytahne se vsechna potrebna data z   {@link EntityRelease}.
 * @param release Zdroj dat.
 */
public Book(EntityRelease release){
  this.isbn=release.getIsbn();
  this.title=release.getBook().getTitle();
  this.description=release.getBook().getDescription();
  for (  EntityAuthor entityAuthor : release.getBook().getAuthorCollection()) {
    Author author=new Author(entityAuthor.getName(),entityAuthor.getSurname());
    this.authors.add(author);
  }
  this.publisher=release.getPublisher();
  this.publishDate=DateFormat.getDateInstance(DateFormat.MEDIUM).format(release.getPublishDate());
}","/** 
 * Vytahne se vsechna potrebna data z   {@link EntityRelease}.
 * @param release Zdroj dat.
 */
public Book(EntityRelease release){
  this.isbn=release.getIsbn();
  this.title=release.getBook().getTitle();
  this.description=release.getBook().getDescription();
  for (  EntityAuthor entityAuthor : release.getBook().getAuthorCollection()) {
    Author author=new Author(entityAuthor.getName(),entityAuthor.getSurname());
    this.authors.add(author);
  }
  this.publisher=release.getPublisher();
  this.publishDate=DateFormat.getDateInstance(DateFormat.MEDIUM).format(release.getPublishDate());
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(release.getPublishDate());
  this.publishYear=calendar.get(Calendar.YEAR);
}",0.8970149253731343
44815,"@PUT @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_XML) @Produces(MediaType.APPLICATION_XML) public Book createBook(Book newBook){
  try {
    List<EntityAuthor> authors=new ArrayList<EntityAuthor>(newBook.authors.size());
    for (    Author author : newBook.authors) {
      EntityAuthor entityAuthor=new EntityAuthor();
      entityAuthor.setName(author.name);
      entityAuthor.setSurname(author.surname);
      authors.add(entityAuthor);
    }
    EntityBook book=new EntityBook();
    book.setDescription(newBook.description);
    book.setTitle(newBook.title);
    EntityRelease release=new EntityRelease();
    release.setIsbn(newBook.isbn);
    release.setEan(newBook.ean);
    Date date;
    DateFormat formatter=DateFormat.getDateInstance(DateFormat.MEDIUM);
    date=(Date)formatter.parse(newBook.publishDate);
    release.setPublishDate(date);
    release.setPublisher(newBook.publisher);
    beanSeasonBook.addBook(book,authors,release);
  }
 catch (  Exception e) {
    throw new VerboseException(""String_Node_Str"",Status.BAD_REQUEST);
  }
  return getBook(newBook.isbn);
}","@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_XML) @Produces(MediaType.APPLICATION_XML) public Response createBook(Book newBook){
  try {
    List<EntityAuthor> authors=new ArrayList<EntityAuthor>(newBook.authors.size());
    for (    Author author : newBook.authors) {
      EntityAuthor entityAuthor=new EntityAuthor();
      entityAuthor.setName(author.name);
      entityAuthor.setSurname(author.surname);
      authors.add(entityAuthor);
    }
    EntityBook book=new EntityBook();
    book.setDescription(newBook.description);
    book.setTitle(newBook.title);
    EntityRelease release=new EntityRelease();
    release.setIsbn(newBook.isbn);
    release.setEan(newBook.ean);
    Date date;
    DateFormat formatter=DateFormat.getDateInstance(DateFormat.MEDIUM);
    date=(Date)formatter.parse(newBook.publishDate);
    release.setPublishDate(date);
    release.setPublisher(newBook.publisher);
    beanSeasonBook.addBook(book,authors,release);
  }
 catch (  Exception e) {
    throw new VerboseException(""String_Node_Str"",Status.BAD_REQUEST);
  }
  URI baseUri=uriInfo.getBaseUri();
  Response response=null;
  try {
    response=Response.created(new URI(baseUri.toString() + ""String_Node_Str"" + newBook.isbn)).entity(getBook(newBook.isbn)).build();
  }
 catch (  URISyntaxException ex) {
    throw new VerboseException(""String_Node_Str"",Status.BAD_REQUEST);
  }
  return response;
}",0.8523543495610535
44816,"/** 
 * Tests the Bug 6418074: ARCo webapplication can not display results with empty value tags
 * @throws java.lang.Exception
 */
public void test6418074() throws Exception {
  ObjectFactory faq=new ObjectFactory();
  Result res=faq.createResult();
  res.setName(""String_Node_Str"");
  res.setCategory(""String_Node_Str"");
  res.setSql(""String_Node_Str"");
  Class[] columnTypes={Integer.class,String.class,Double.class,Date.class};
  for (int i=0; i < columnTypes.length; i++) {
    ResultColumn column=faq.createResultColumn();
    column.setIndex(i);
    column.setName(""String_Node_Str"" + i);
    column.setType(ResultConverter.getColumnType(columnTypes[i]));
    res.getColumn().add(column);
  }
  int rowCount=2;
  res.setRowCount(rowCount);
  ResultRow rowObj=null;
  int row=0;
  int col=0;
  List valueList=null;
  List rowList=res.getRow();
  for (row=0; row < rowCount; row++) {
    rowObj=faq.createResultRow();
    rowList.add(rowObj);
    valueList=rowObj.getValue();
    for (col=0; col < columnTypes.length; col++) {
      valueList.add(ResultConverter.objToStr(null));
    }
  }
  XMLQueryResult xmlQueryResult=new XMLQueryResult(res);
  xmlQueryResult.execute();
}","/** 
 * Tests the Bug 6418074: ARCo webapplication can not display results with empty value tags
 * @throws java.lang.Exception
 */
public void test6418074() throws Exception {
  ObjectFactory faq=new ObjectFactory();
  Result res=faq.createResult();
  res.setName(""String_Node_Str"");
  res.setCategory(""String_Node_Str"");
  res.setSql(""String_Node_Str"");
  Class[] columnTypes={Integer.class,String.class,Double.class,Date.class};
  for (int i=0; i < columnTypes.length; i++) {
    ResultColumn column=faq.createResultColumn();
    column.setIndex(i);
    column.setName(""String_Node_Str"" + i);
    column.setType(ResultConverter.getColumnType(columnTypes[i]));
    res.getColumn().add(column);
  }
  int rowCount=2;
  res.setRowCount(rowCount);
  ResultRow rowObj=null;
  int row=0;
  int col=0;
  List valueList=null;
  List rowList=res.getRow();
  for (row=0; row < rowCount; row++) {
    rowObj=faq.createResultRow();
    rowList.add(rowObj);
    valueList=rowObj.getValue();
    for (col=0; col < columnTypes.length; col++) {
      valueList.add(ResultConverter.objToStr(null));
    }
  }
  res.setClusterName(""String_Node_Str"");
  XMLQueryResult xmlQueryResult=new XMLQueryResult(res);
  xmlQueryResult.execute();
}",0.9829379941739492
44817,"/** 
 * Creates a new instance of QueryResult 
 */
protected QueryResult(QueryType query){
  this.query=query;
  if (query == null || query.getClusterName() == null || query.getClusterName().length() == 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (query instanceof Query) {
    List filterList=query.getFilter();
    Iterator iter=filterList.iterator();
    Filter filter=null;
    lastBindingCount=0;
    while (iter.hasNext()) {
      filter=(Filter)iter.next();
      if (filter.isActive() && filter.isLateBinding()) {
        lateBindingMap.put(filter.getName(),null);
        lastBindingCount++;
        break;
      }
    }
  }
}","/** 
 * Creates a new instance of QueryResult 
 */
protected QueryResult(QueryType query){
  this.query=query;
  if (query instanceof Query) {
    List filterList=query.getFilter();
    Iterator iter=filterList.iterator();
    Filter filter=null;
    lastBindingCount=0;
    while (iter.hasNext()) {
      filter=(Filter)iter.next();
      if (filter.isActive() && filter.isLateBinding()) {
        lateBindingMap.put(filter.getName(),null);
        lastBindingCount++;
        break;
      }
    }
  }
}",0.8652360515021459
44818,"public Object getValue(String name){
  Map valueMap=getValueMap();
  Object ret=valueMap.get(name);
  if (ret == null) {
    try {
      int columnIndex=Integer.parseInt(name);
      ret=result.getValue(getRowIndex(),columnIndex);
      if (SGELog.isLoggable(Level.FINE)) {
        SGELog.fine(""String_Node_Str"" + getRowIndex() + ""String_Node_Str""+ name+ ""String_Node_Str""+ ret);
      }
      valueMap.put(name,ret);
    }
 catch (    NumberFormatException ex) {
      throw new IllegalStateException(name + ""String_Node_Str"");
    }
  }
  return ret;
}","public Object getValue(String name){
  Map valueMap=getValueMap();
  SGELog.info(""String_Node_Str"",name);
  Object ret=valueMap.get(name);
  if (ret == null) {
    try {
      int columnIndex=Integer.parseInt(name);
      ret=result.getValue(getRowIndex(),columnIndex);
      if (SGELog.isLoggable(Level.FINE)) {
        SGELog.fine(""String_Node_Str"" + getRowIndex() + ""String_Node_Str""+ name+ ""String_Node_Str""+ ret);
      }
      valueMap.put(name,ret);
    }
 catch (    NumberFormatException ex) {
      throw new IllegalStateException(name + ""String_Node_Str"");
    }
  }
  return ret;
}",0.9659982563208368
44819,"private void writeSFCJavascript(PrintWriter pw,boolean enabled){
  if (enabled) {
    pw.print(""String_Node_Str"" + CHILD_VIEW_SFR_RADIO_BUTTON + ""String_Node_Str"");
    pw.print(""String_Node_Str"" + CHILD_VIEW_SERIES_TYPE_FIELD + ""String_Node_Str""+ ArcoConstants.CHART_SERIES_FROM_COL+ ""String_Node_Str"");
  }
 else {
    pw.print(""String_Node_Str"" + CHILD_VIEW_SFC_RADIO_BUTTON + ""String_Node_Str"");
    pw.print(""String_Node_Str"" + CHILD_VIEW_SERIES_TYPE_FIELD + ""String_Node_Str""+ ArcoConstants.CHART_SERIES_FROM_ROW+ ""String_Node_Str"");
  }
  pw.print(""String_Node_Str"" + CHILD_VIEW_LABEL_DROP_DOWN + ""String_Node_Str""+ enabled+ ""String_Node_Str"");
  pw.print(""String_Node_Str"" + CHILD_VIEW_VALUE_DROP_DOWN + ""String_Node_Str""+ enabled+ ""String_Node_Str"");
}","private void writeSFCJavascript(PrintWriter pw,boolean enabled){
  if (enabled) {
    pw.print(""String_Node_Str"" + CHILD_VIEW_SFR_RADIO_BUTTON + ""String_Node_Str"");
    pw.print(""String_Node_Str"" + CHILD_VIEW_SERIES_TYPE_FIELD + ""String_Node_Str""+ ArcoConstants.CHART_SERIES_FROM_COL+ ""String_Node_Str"");
  }
 else {
    pw.print(""String_Node_Str"" + CHILD_VIEW_SFC_RADIO_BUTTON + ""String_Node_Str"");
    pw.print(""String_Node_Str"" + CHILD_VIEW_SERIES_TYPE_FIELD + ""String_Node_Str""+ ArcoConstants.CHART_SERIES_FROM_ROW+ ""String_Node_Str"");
  }
  writeEnabledDisabled(pw,enabled);
}",0.8286140089418778
44820,"private void writeGraphSection(PrintWriter pw,Graphic graph,boolean isFirst,boolean isLast){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  writeButtonProperty(pw,CHILD_REMOVE_GRAPHIC_BUTTON,""String_Node_Str"");
  if (!isFirst) {
    writeButtonProperty(pw,CHILD_GRAPHIC_UP_BUTTON,""String_Node_Str"");
  }
  if (!isLast) {
    writeButtonProperty(pw,CHILD_GRAPHIC_DOWN_BUTTON,""String_Node_Str"");
  }
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + CHILD_VIEW_DIAGRAM_DROP_DOWN + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + CHILD_VIEW_SERIES_TYPE_FIELD + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + CHILD_VIEW_XAXIS_DROP_DOWN + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + CHILD_VIEW_SFC_RADIO_BUTTON + ""String_Node_Str"");
  pw.println(""String_Node_Str"" + ArcoConstants.CHART_SERIES_FROM_COL + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.print(""String_Node_Str"");
  writeSFCJavascript(pw,true);
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + CHILD_VIEW_COLUMN_ADD_REMOVE + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + CHILD_VIEW_SFR_RADIO_BUTTON + ""String_Node_Str"");
  pw.println(""String_Node_Str"" + ArcoConstants.CHART_SERIES_FROM_ROW + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.print(""String_Node_Str"");
  writeSFCJavascript(pw,false);
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + CHILD_VIEW_LABEL_DROP_DOWN + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + CHILD_VIEW_VALUE_DROP_DOWN + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  writeBooleanProperty(pw,CHILD_VIEW_SHOW_LEGEND,""String_Node_Str"");
  if (graph != null && graph.getChart() != null && (ArcoConstants.CHART_TYPE_PIE.equals(graph.getChart().getType()) || ArcoConstants.CHART_TYPE_PIE_3D.equals(graph.getChart().getType()))) {
    writeBooleanProperty(pw,CHILD_VIEW_PIE_SHOW_LABEL,""String_Node_Str"");
  }
  pw.println(""String_Node_Str"");
}","private void writeGraphSection(PrintWriter pw,Graphic graph,boolean isFirst,boolean isLast){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  writeButtonProperty(pw,CHILD_REMOVE_GRAPHIC_BUTTON,""String_Node_Str"");
  if (!isFirst) {
    writeButtonProperty(pw,CHILD_GRAPHIC_UP_BUTTON,""String_Node_Str"");
  }
  if (!isLast) {
    writeButtonProperty(pw,CHILD_GRAPHIC_DOWN_BUTTON,""String_Node_Str"");
  }
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + CHILD_VIEW_DIAGRAM_DROP_DOWN + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + CHILD_VIEW_SERIES_TYPE_FIELD + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + CHILD_VIEW_XAXIS_DROP_DOWN + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + CHILD_VIEW_SFC_RADIO_BUTTON + ""String_Node_Str"");
  pw.println(""String_Node_Str"" + ArcoConstants.CHART_SERIES_FROM_COL + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.print(""String_Node_Str"");
  writeSFCJavascript(pw,true);
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + CHILD_VIEW_COLUMN_ADD_REMOVE + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + CHILD_VIEW_SFR_RADIO_BUTTON + ""String_Node_Str"");
  pw.println(""String_Node_Str"" + ArcoConstants.CHART_SERIES_FROM_ROW + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.print(""String_Node_Str"");
  writeSFCJavascript(pw,false);
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + CHILD_VIEW_LABEL_DROP_DOWN + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"" + CHILD_VIEW_VALUE_DROP_DOWN + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  writeBooleanProperty(pw,CHILD_VIEW_SHOW_LEGEND,""String_Node_Str"");
  if (graph != null && graph.getChart() != null && (ArcoConstants.CHART_TYPE_PIE.equals(graph.getChart().getType()) || ArcoConstants.CHART_TYPE_PIE_3D.equals(graph.getChart().getType()))) {
    writeBooleanProperty(pw,CHILD_VIEW_PIE_SHOW_LABEL,""String_Node_Str"");
  }
  pw.println(""String_Node_Str"");
}",0.9749658625398272
44821,"private void writeButtonProperty(PrintWriter pw,String name,String resourceName){
  pw.println(""String_Node_Str"" + name + ""String_Node_Str"");
  pw.println(""String_Node_Str"" + resourceName + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}","private void writeButtonProperty(PrintWriter pw,String name,String resourceName){
  pw.println(""String_Node_Str"" + name + ""String_Node_Str"");
  pw.println(""String_Node_Str"" + resourceName + ""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}",0.9437819420783644
44822,"/** 
 * Adds a checkbox menu item for each of the preferred encodings, and a special item that invokes a dialog that allows the list of preferred encodings to be customized.
 */
protected void populateMenu(){
  Vector<String> encodings=EncodingPreferences.getPreferredEncodings();
  if (selectedEncoding != null && !encodings.contains(selectedEncoding))   encodings.insertElementAt(selectedEncoding,0);
  int nbEncodings=encodings.size();
  String enc;
  JCheckBoxMenuItem item;
  ButtonGroup group=new ButtonGroup();
  for (int i=0; i < nbEncodings; i++) {
    enc=encodings.elementAt(i);
    item=new JCheckBoxMenuItem(enc);
    if (selectedEncoding != null && selectedEncoding.equals(enc))     item.setSelected(true);
    item.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        String oldEncoding=selectedEncoding;
        selectedEncoding=((JCheckBoxMenuItem)e.getSource()).getText();
        if (!oldEncoding.equals(selectedEncoding)) {
          fireEncodingListener(oldEncoding,EncodingMenu.this.selectedEncoding);
        }
      }
    }
);
    group.add(item);
    add(item);
  }
  add(new JSeparator());
  JMenuItem customizeItem=new JMenuItem(Translator.get(""String_Node_Str"") + ""String_Node_Str"");
  customizeItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Window owner=dialogOwner.getOwner();
      if (owner instanceof Frame)       new PreferredEncodingsDialog((Frame)owner).showDialog();
 else       new PreferredEncodingsDialog((Dialog)owner).showDialog();
      removeAll();
      populateMenu();
    }
  }
);
  add(customizeItem);
}","/** 
 * Adds a checkbox menu item for each of the preferred encodings, and a special item that invokes a dialog that allows the list of preferred encodings to be customized.
 */
protected void populateMenu(){
  java.util.List<String> encodings=EncodingPreferences.getPreferredEncodings();
  if (selectedEncoding != null && !encodings.contains(selectedEncoding))   encodings.add(0,selectedEncoding);
  int nbEncodings=encodings.size();
  JCheckBoxMenuItem item;
  ButtonGroup group=new ButtonGroup();
  for (  String enc : encodings) {
    item=new JCheckBoxMenuItem(enc);
    if (selectedEncoding != null && selectedEncoding.equals(enc))     item.setSelected(true);
    item.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        String oldEncoding=selectedEncoding;
        selectedEncoding=((JCheckBoxMenuItem)e.getSource()).getText();
        if (!oldEncoding.equals(selectedEncoding)) {
          fireEncodingListener(oldEncoding,EncodingMenu.this.selectedEncoding);
        }
      }
    }
);
    group.add(item);
    add(item);
  }
  add(new JSeparator());
  JMenuItem customizeItem=new JMenuItem(Translator.get(""String_Node_Str"") + ""String_Node_Str"");
  customizeItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Window owner=dialogOwner.getOwner();
      if (owner instanceof Frame)       new PreferredEncodingsDialog((Frame)owner).showDialog();
 else       new PreferredEncodingsDialog((Dialog)owner).showDialog();
      removeAll();
      populateMenu();
    }
  }
);
  add(customizeItem);
}",0.946948788715118
44823,"/** 
 * Returns a user-defined list of preferred encodings.
 * @return a user-defined list of preferred encodings.
 */
public static Vector<String> getPreferredEncodings(){
  Vector<String> vector=MuConfiguration.getListVariable(MuConfiguration.PREFERRED_ENCODINGS,""String_Node_Str"");
  if (vector == null) {
    vector=getDefaultPreferredEncodings();
    MuConfiguration.setVariable(MuConfiguration.PREFERRED_ENCODINGS,vector,""String_Node_Str"");
  }
  return vector;
}","/** 
 * Returns a user-defined list of preferred encodings.
 * @return a user-defined list of preferred encodings.
 */
public static List<String> getPreferredEncodings(){
  List<String> vector=MuConfiguration.getListVariable(MuConfiguration.PREFERRED_ENCODINGS,""String_Node_Str"");
  if (vector == null) {
    vector=getDefaultPreferredEncodings();
    MuConfiguration.setVariable(MuConfiguration.PREFERRED_ENCODINGS,vector,""String_Node_Str"");
  }
  return vector;
}",0.9785867237687366
44824,"/** 
 * Adds a checkbox menu item for each of the preferred encodings, and a special item that invokes a dialog that allows the list of preferred encodings to be customized.
 * @param selectEncoding the encoding that will be selected, <code>null</code> for the first one
 */
protected void populateComboBox(String selectEncoding){
  Vector<String> encodings=EncodingPreferences.getPreferredEncodings();
  if (selectEncoding != null && !encodings.contains(selectEncoding))   selectEncoding=null;
  int nbEncodings=encodings.size();
  for (int i=0; i < nbEncodings; i++)   comboBox.addItem(encodings.elementAt(i));
  if (selectEncoding != null) {
    comboBox.setSelectedItem(selectEncoding);
    currentEncoding=selectEncoding;
  }
 else   if (nbEncodings > 0) {
    comboBox.setSelectedItem(encodings.elementAt(0));
    currentEncoding=selectEncoding;
  }
}","/** 
 * Adds a checkbox menu item for each of the preferred encodings, and a special item that invokes a dialog that allows the list of preferred encodings to be customized.
 * @param selectEncoding the encoding that will be selected, <code>null</code> for the first one
 */
protected void populateComboBox(String selectEncoding){
  java.util.List<String> encodings=EncodingPreferences.getPreferredEncodings();
  if (selectEncoding != null && !encodings.contains(selectEncoding))   selectEncoding=null;
  int nbEncodings=encodings.size();
  for (  String encoding : encodings)   comboBox.addItem(encoding);
  if (selectEncoding != null) {
    comboBox.setSelectedItem(selectEncoding);
    currentEncoding=selectEncoding;
  }
 else   if (nbEncodings > 0) {
    comboBox.setSelectedItem(encodings.get(0));
    currentEncoding=selectEncoding;
  }
}",0.9318448883666276
44825,"/** 
 * Selects all the checkboxes which correspond to an encoding that is present in the given vector.
 * @param selectedEncodings list of encodings to select
 */
protected void selectCheckboxes(Vector<String> selectedEncodings){
  JCheckBox checkbox;
  int nbCheckboxes=checkboxes.size();
  for (int i=0; i < nbCheckboxes; i++) {
    checkbox=checkboxes.elementAt(i);
    checkbox.setSelected(selectedEncodings.contains(checkbox.getText()));
  }
}","/** 
 * Selects all the checkboxes which correspond to an encoding that is present in the given vector.
 * @param selectedEncodings list of encodings to select
 */
protected void selectCheckboxes(java.util.List<String> selectedEncodings){
  JCheckBox checkbox;
  int nbCheckboxes=checkboxes.size();
  for (int i=0; i < nbCheckboxes; i++) {
    checkbox=checkboxes.elementAt(i);
    checkbox.setSelected(selectedEncodings.contains(checkbox.getText()));
  }
}",0.977924944812362
44826,"public FilePresenter(){
  super(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
}","public FilePresenter(){
  super(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  addFocusListener(new FocusListener(){
    @Override public void focusLost(    FocusEvent e){
    }
    @Override public void focusGained(    FocusEvent e){
      Component component=FilePresenter.this.getViewport().getComponent(0);
      if (component != null)       component.requestFocus();
    }
  }
);
}",0.4358974358974359
44827,"public ImageViewer(){
  imageViewerImpl=new ImageViewerImpl();
  addComponentToPresent(imageViewerImpl);
  MnemonicHelper menuMnemonicHelper=new MnemonicHelper();
  controlsMenu=MenuToolkit.addMenu(Translator.get(""String_Node_Str""),menuMnemonicHelper,null);
  zoomInItem=MenuToolkit.addMenuItem(controlsMenu,Translator.get(""String_Node_Str""),menuMnemonicHelper,KeyStroke.getKeyStroke(KeyEvent.VK_ADD,0),this);
  zoomOutItem=MenuToolkit.addMenuItem(controlsMenu,Translator.get(""String_Node_Str""),menuMnemonicHelper,KeyStroke.getKeyStroke(KeyEvent.VK_SUBTRACT,0),this);
}","public ImageViewer(){
  imageViewerImpl=new ImageViewerImpl();
  setComponentToPresent(imageViewerImpl);
  MnemonicHelper menuMnemonicHelper=new MnemonicHelper();
  controlsMenu=MenuToolkit.addMenu(Translator.get(""String_Node_Str""),menuMnemonicHelper,null);
  zoomInItem=MenuToolkit.addMenuItem(controlsMenu,Translator.get(""String_Node_Str""),menuMnemonicHelper,KeyStroke.getKeyStroke(KeyEvent.VK_ADD,0),this);
  zoomOutItem=MenuToolkit.addMenuItem(controlsMenu,Translator.get(""String_Node_Str""),menuMnemonicHelper,KeyStroke.getKeyStroke(KeyEvent.VK_SUBTRACT,0),this);
}",0.9947275922671354
44828,"public TextEditor(){
  textViewerDelegate=new TextViewer(textEditorImpl=new TextEditorImpl(true)){
    @Override protected void addComponentToPresent(    JComponent component){
      TextEditor.this.addComponentToPresent(component);
    }
    @Override protected void showLineNumbers(    boolean show){
      TextEditor.this.setRowHeaderView(show ? new TextLineNumbersPanel(textEditorImpl.getTextArea()) : null);
    }
    @Override protected void initMenuBarItems(){
      editMenu=new JMenu(Translator.get(""String_Node_Str""));
      MnemonicHelper menuItemMnemonicHelper=new MnemonicHelper();
      copyItem=MenuToolkit.addMenuItem(editMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,null,TextEditor.this);
      cutItem=MenuToolkit.addMenuItem(editMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,null,TextEditor.this);
      pasteItem=MenuToolkit.addMenuItem(editMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,null,TextEditor.this);
      selectAllItem=MenuToolkit.addMenuItem(editMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,null,TextEditor.this);
      editMenu.addSeparator();
      findItem=MenuToolkit.addMenuItem(editMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,KeyStroke.getKeyStroke(KeyEvent.VK_F,KeyEvent.CTRL_DOWN_MASK),TextEditor.this);
      findNextItem=MenuToolkit.addMenuItem(editMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,KeyStroke.getKeyStroke(KeyEvent.VK_F3,0),TextEditor.this);
      findPreviousItem=MenuToolkit.addMenuItem(editMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,KeyStroke.getKeyStroke(KeyEvent.VK_F3,KeyEvent.SHIFT_DOWN_MASK),TextEditor.this);
      viewMenu=new JMenu(Translator.get(""String_Node_Str""));
      toggleWordWrapItem=MenuToolkit.addCheckBoxMenuItem(viewMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,null,TextEditor.this);
      toggleWordWrapItem.setSelected(textEditorImpl.isWrap());
      toggleLineNumbersItem=MenuToolkit.addCheckBoxMenuItem(viewMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,null,TextEditor.this);
      toggleLineNumbersItem.setSelected(TextEditor.this.getRowHeader().getView() != null);
    }
  }
;
  addComponentToPresent(textEditorImpl.getTextArea());
}","public TextEditor(){
  textViewerDelegate=new TextViewer(textEditorImpl=new TextEditorImpl(true)){
    @Override protected void setComponentToPresent(    JComponent component){
      TextEditor.this.setComponentToPresent(component);
    }
    @Override protected void showLineNumbers(    boolean show){
      TextEditor.this.setRowHeaderView(show ? new TextLineNumbersPanel(textEditorImpl.getTextArea()) : null);
    }
    @Override protected void initMenuBarItems(){
      editMenu=new JMenu(Translator.get(""String_Node_Str""));
      MnemonicHelper menuItemMnemonicHelper=new MnemonicHelper();
      copyItem=MenuToolkit.addMenuItem(editMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,null,TextEditor.this);
      cutItem=MenuToolkit.addMenuItem(editMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,null,TextEditor.this);
      pasteItem=MenuToolkit.addMenuItem(editMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,null,TextEditor.this);
      selectAllItem=MenuToolkit.addMenuItem(editMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,null,TextEditor.this);
      editMenu.addSeparator();
      findItem=MenuToolkit.addMenuItem(editMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,KeyStroke.getKeyStroke(KeyEvent.VK_F,KeyEvent.CTRL_DOWN_MASK),TextEditor.this);
      findNextItem=MenuToolkit.addMenuItem(editMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,KeyStroke.getKeyStroke(KeyEvent.VK_F3,0),TextEditor.this);
      findPreviousItem=MenuToolkit.addMenuItem(editMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,KeyStroke.getKeyStroke(KeyEvent.VK_F3,KeyEvent.SHIFT_DOWN_MASK),TextEditor.this);
      viewMenu=new JMenu(Translator.get(""String_Node_Str""));
      toggleWordWrapItem=MenuToolkit.addCheckBoxMenuItem(viewMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,null,TextEditor.this);
      toggleWordWrapItem.setSelected(textEditorImpl.isWrap());
      toggleLineNumbersItem=MenuToolkit.addCheckBoxMenuItem(viewMenu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,null,TextEditor.this);
      toggleLineNumbersItem.setSelected(TextEditor.this.getRowHeader().getView() != null);
    }
  }
;
  setComponentToPresent(textEditorImpl.getTextArea());
}",0.996033494931688
44829,"TextViewer(TextEditorImpl textEditorImpl){
  this.textEditorImpl=textEditorImpl;
  addComponentToPresent(textEditorImpl.getTextArea());
  showLineNumbers(MuConfiguration.getVariable(MuConfiguration.LINE_NUMBERS,MuConfiguration.DEFAULT_LINE_NUMBERS));
  textEditorImpl.wrap(MuConfiguration.getVariable(MuConfiguration.WORD_WRAP,MuConfiguration.DEFAULT_WORD_WRAP));
  initMenuBarItems();
}","TextViewer(TextEditorImpl textEditorImpl){
  this.textEditorImpl=textEditorImpl;
  setComponentToPresent(textEditorImpl.getTextArea());
  showLineNumbers(MuConfiguration.getVariable(MuConfiguration.LINE_NUMBERS,MuConfiguration.DEFAULT_LINE_NUMBERS));
  textEditorImpl.wrap(MuConfiguration.getVariable(MuConfiguration.WORD_WRAP,MuConfiguration.DEFAULT_WORD_WRAP));
  initMenuBarItems();
}",0.992248062015504
44830,"/** 
 * @return
 * @throws IOException
 */
public Collection getEntries(){
  return archive.getFileHeaders();
}","public Collection getEntries(){
  return archive.getFileHeaders();
}",0.7597765363128491
44831,"/** 
 * create a new archive object using the given file
 * @param file the file to extract
 * @throws RarException
 */
public Archive(InputStream in) throws RarException, IOException {
  parseHeaders(in);
  dataIO=new ComprDataIO(this);
}","/** 
 * create a new archive object using the given stream
 * @param in the stream to extract
 * @throws RarException
 */
public Archive(InputStream in) throws RarException, IOException {
  parseHeaders(in);
  dataIO=new ComprDataIO(this);
}",0.925
44832,"/** 
 * Extract the file specified by the given header and write it to the supplied output stream.
 * @param isHeaderSolid - true if the given header represent a solid entry.
 * @param header - given FileHeader.
 * @param in1 - input stream to the archive file.
 * @param os 
 * @param in2 - if isSolid==true, is an input stream to the archive file. null otherwise.
 * @throws Exception.
 */
public void extractEntry(boolean isHeaderSolid,FileHeader header,InputStream in1,OutputStream os,InputStream in2) throws Exception {
  if (isHeaderSolid) {
    int headerIndex=((Integer)indexMap.get(header.getFileNameString())).intValue();
    FileHeader entry=null;
    for (int i=headerIndex - 1; i >= 0; --i)     if (!(entry=(FileHeader)entries.get(i)).isSolid())     break;
    extractSolidEntry(entry,header,os,in1,in2);
  }
 else {
    extractNotSolidEntry(header,os,in1);
  }
}","/** 
 * Extract the file specified by the given header and write it to the supplied output stream.
 * @param isHeaderSolid - true if the given header represent a solid entry.
 * @param header - given FileHeader.
 * @param in1 - input stream to the archive file.
 * @param os 
 * @param in2 - if isSolid==true, is an input stream to thearchive file. null otherwise.
 * @throws Exception
 */
public void extractEntry(boolean isHeaderSolid,FileHeader header,InputStream in1,OutputStream os,InputStream in2) throws Exception {
  if (isHeaderSolid) {
    int headerIndex=((Integer)indexMap.get(header.getFileNameString())).intValue();
    FileHeader entry=null;
    for (int i=headerIndex - 1; i >= 0; --i)     if (!(entry=(FileHeader)entries.get(i)).isSolid())     break;
    extractSolidEntry(entry,header,os,in1,in2);
  }
 else {
    extractNotSolidEntry(header,os,in1);
  }
}",0.9988571428571428
44833,"/** 
 * @param pos the position in the file
 * @return success ? true : false 
 */
public void setPosition(long pos) throws IOException ;","/** 
 * @param pos the position in the file
 */
public void setPosition(long pos) throws IOException ;",0.8535564853556485
44834,"/** 
 * the filename is also present in unicode
 * @return
 */
public boolean isUnicode(){
  return (flags & LHD_UNICODE) != 0;
}","/** 
 * the filename is also present in unicode
 */
public boolean isUnicode(){
  return (flags & LHD_UNICODE) != 0;
}",0.9554655870445344
44835,"/** 
 * the file will be continued in the next archive part
 * @return
 */
public boolean isSplitAfter(){
  return (this.flags & BlockHeader.LHD_SPLIT_AFTER) != 0;
}","/** 
 * the file will be continued in the next archive part
 */
public boolean isSplitAfter(){
  return (this.flags & BlockHeader.LHD_SPLIT_AFTER) != 0;
}",0.9655172413793104
44836,"/** 
 * this file is compressed as solid (all files handeled as one)
 * @return
 */
public boolean isSolid(){
  return (this.flags & LHD_SOLID) != 0;
}","/** 
 * this file is compressed as solid (all files handeled as one)
 */
public boolean isSolid(){
  return (this.flags & LHD_SOLID) != 0;
}",0.9621993127147768
44837,"/** 
 * the file is continued in this archive
 * @return
 */
public boolean isSplitBefore(){
  return (this.flags & LHD_SPLIT_BEFORE) != 0;
}","/** 
 * the file is continued in this archive
 */
public boolean isSplitBefore(){
  return (this.flags & LHD_SPLIT_BEFORE) != 0;
}",0.959409594095941
44838,"/** 
 * the file is encrypted
 * @return
 */
public boolean isEncrypted(){
  return (this.flags & BlockHeader.LHD_PASSWORD) != 0;
}","/** 
 * the file is encrypted
 */
public boolean isEncrypted(){
  return (this.flags & BlockHeader.LHD_PASSWORD) != 0;
}",0.9561752988047808
44839,"/** 
 * whether this fileheader represents a directory
 * @return
 */
public boolean isDirectory(){
  return (flags & LHD_WINDOWMASK) == LHD_DIRECTORY;
}","/** 
 * whether this fileheader represents a directory
 */
public boolean isDirectory(){
  return (flags & LHD_WINDOWMASK) == LHD_DIRECTORY;
}",0.9627118644067796
44840,"/** 
 * return whether the archive is a multivolume archive
 * @return
 */
public boolean isMultiVolume(){
  return (this.flags & BaseBlock.MHD_VOLUME) != 0;
}","/** 
 * return whether the archive is a multivolume archive
 */
public boolean isMultiVolume(){
  return (this.flags & BaseBlock.MHD_VOLUME) != 0;
}",0.9641693811074918
44841,"/** 
 * the version the the encryption 
 * @return
 */
public byte getEncryptVersion(){
  return encryptVersion;
}","/** 
 * the version the the encryption 
 */
public byte getEncryptVersion(){
  return encryptVersion;
}",0.9493087557603688
44842,"/** 
 * returns whether this archive is solid. in this case you can only extract all file at once
 * @return
 */
public boolean isSolid(){
  return (this.flags & MHD_SOLID) != 0;
}","/** 
 * returns whether this archive is solid. in this case you can only extract all file at once
 */
public boolean isSolid(){
  return (this.flags & MHD_SOLID) != 0;
}",0.968481375358166
44843,"/** 
 * if the archive is a multivolume archive this method returns whether this instance is the first part of the multivolume archive
 * @return
 */
public boolean isFirstVolume(){
  return (this.flags & BaseBlock.MHD_FIRSTVOLUME) != 0;
}","/** 
 * if the archive is a multivolume archive this method returns whether this instance is the first part of the multivolume archive
 */
public boolean isFirstVolume(){
  return (this.flags & BaseBlock.MHD_FIRSTVOLUME) != 0;
}",0.9764453961456104
44844,"/** 
 * returns whether the archive is encrypted 
 * @return
 */
public boolean isEncrypted(){
  return (this.flags & BaseBlock.MHD_PASSWORD) != 0;
}","/** 
 * returns whether the archive is encrypted 
 */
public boolean isEncrypted(){
  return (this.flags & BaseBlock.MHD_PASSWORD) != 0;
}",0.9616724738675958
44845,"/** 
 * the numbering format a multivolume archive
 * @return
 */
public boolean isNewNumbering(){
  return (this.flags & MHD_NEWNUMBERING) != 0;
}","/** 
 * the numbering format a multivolume archive
 */
public boolean isNewNumbering(){
  return (this.flags & MHD_NEWNUMBERING) != 0;
}",0.96113074204947
44846,"/** 
 * @return
 */
public byte getLevel(){
  return level;
}","public byte getLevel(){
  return level;
}",0.803921568627451
44847,"/** 
 * @return
 */
public SubBlockHeaderType getSubType(){
  return SubBlockHeaderType.findSubblockHeaderType(subType);
}","public SubBlockHeaderType getSubType(){
  return SubBlockHeaderType.findSubblockHeaderType(subType);
}",0.9107142857142856
44848,"/** 
 * find the header type for the given short value
 * @param SubType the short value
 * @return the correspo nding enum or null
 */
public static SubBlockHeaderType findSubblockHeaderType(short type){
  return types[type - 0x100];
}","/** 
 * find the header type for the given short value
 * @param type the short value
 * @return the correspo nding enum or null
 */
public static SubBlockHeaderType findSubblockHeaderType(short type){
  return types[type - 0x100];
}",0.9893390191897654
44849,"/** 
 * needs to set the fields of this object to the values in the byte[]  at the given position. be aware of the byte order
 * @param pos the position this object should point to
 * @return true if the address could be set
 */
public void setAddress(int pos){
  if (mem == null)   System.err.println(""String_Node_Str"");
  if (!((pos >= 0) && (pos < mem.length)))   System.err.println(""String_Node_Str"" + pos + ""String_Node_Str"");
  this.pos=pos;
}","/** 
 * needs to set the fields of this object to the values in the byte[]  at the given position. be aware of the byte order
 * @param pos the position this object should point to
 */
public void setAddress(int pos){
  if (mem == null)   System.err.println(""String_Node_Str"");
  if (!((pos >= 0) && (pos < mem.length)))   System.err.println(""String_Node_Str"" + pos + ""String_Node_Str"");
  this.pos=pos;
}",0.9484777517564404
44850,"public void mouseClicked(MouseEvent e){
  if (mainFrame.getNoEventsMode())   return;
  Object source=e.getSource();
  if ((System.currentTimeMillis() - doubleClickTime) < DOUBLE_CLICK_INTERVAL) {
    if (doubleClickCounter == 1) {
      doubleClickCounter=2;
      e.consume();
    }
  }
 else {
    doubleClickTime=System.currentTimeMillis();
    doubleClickCounter=1;
  }
  if (source == this && DesktopManager.isLeftMouseButton(e)) {
    if ((doubleClickCounter == 1) && (System.currentTimeMillis() - selectionChangedTimestamp) > EDIT_NAME_CLICK_DELAY) {
      int clickX=e.getX();
      Point p=new Point(clickX,e.getY());
      final int row=rowAtPoint(p);
      final int viewColumn=columnAtPoint(p);
      final int column=convertColumnIndexToModel(viewColumn);
      if (row == currentRow && !isParentFolderSelected() && (column == Columns.NAME || column == Columns.DATE || column == Columns.PERMISSIONS)) {
        FontMetrics fm=getFontMetrics(FileTableCellRenderer.getCellFont());
        int labelWidth=fm.stringWidth((String)tableModel.getValueAt(row,column));
        int columnX=(int)getTableHeader().getHeaderRect(viewColumn).getX();
        if (clickX < columnX + CellLabel.CELL_BORDER_WIDTH || clickX > columnX + labelWidth + CellLabel.CELL_BORDER_WIDTH)         return;
        if (hasFocus() && System.currentTimeMillis() - focusGainedTime > 100) {
          new Thread(){
            @Override public void run(){
              try {
                sleep(800);
              }
 catch (              InterruptedException e) {
              }
              if ((System.currentTimeMillis() - lastDoubleClickTimestamp) > 1000 && row == currentRow) {
                if (column == Columns.NAME) {
                  if (!isEditing())                   editCurrentFilename();
                }
 else                 if (column == Columns.DATE) {
                  ActionManager.performAction(com.mucommander.ui.action.impl.ChangeDateAction.Descriptor.ACTION_ID,mainFrame);
                }
 else                 if (column == Columns.PERMISSIONS) {
                  if (getSelectedFile().getChangeablePermissions().getIntValue() != 0)                   ActionManager.performAction(com.mucommander.ui.action.impl.ChangePermissionsAction.Descriptor.ACTION_ID,mainFrame);
                }
              }
            }
          }
.start();
        }
      }
    }
 else     if (doubleClickCounter == 2) {
      this.lastDoubleClickTimestamp=System.currentTimeMillis();
      ActionManager.performAction(e.isShiftDown() ? com.mucommander.ui.action.impl.OpenNativelyAction.Descriptor.ACTION_ID : com.mucommander.ui.action.impl.OpenAction.Descriptor.ACTION_ID,mainFrame);
    }
  }
}","public void mouseClicked(MouseEvent e){
  if (mainFrame.getNoEventsMode())   return;
  Object source=e.getSource();
  if ((System.currentTimeMillis() - doubleClickTime) < DOUBLE_CLICK_INTERVAL && selectionChangedTimestamp < doubleClickTime) {
    if (doubleClickCounter == 1) {
      doubleClickCounter=2;
      e.consume();
    }
  }
 else {
    doubleClickTime=System.currentTimeMillis();
    doubleClickCounter=1;
  }
  if (source == this && DesktopManager.isLeftMouseButton(e)) {
    if ((doubleClickCounter == 1) && (System.currentTimeMillis() - selectionChangedTimestamp) > EDIT_NAME_CLICK_DELAY) {
      int clickX=e.getX();
      Point p=new Point(clickX,e.getY());
      final int row=rowAtPoint(p);
      final int viewColumn=columnAtPoint(p);
      final int column=convertColumnIndexToModel(viewColumn);
      if (row == currentRow && !isParentFolderSelected() && (column == Columns.NAME || column == Columns.DATE || column == Columns.PERMISSIONS)) {
        FontMetrics fm=getFontMetrics(FileTableCellRenderer.getCellFont());
        int labelWidth=fm.stringWidth((String)tableModel.getValueAt(row,column));
        int columnX=(int)getTableHeader().getHeaderRect(viewColumn).getX();
        if (clickX < columnX + CellLabel.CELL_BORDER_WIDTH || clickX > columnX + labelWidth + CellLabel.CELL_BORDER_WIDTH)         return;
        if (hasFocus() && System.currentTimeMillis() - focusGainedTime > 100) {
          new Thread(){
            @Override public void run(){
              try {
                sleep(800);
              }
 catch (              InterruptedException e) {
              }
              if ((System.currentTimeMillis() - lastDoubleClickTimestamp) > 1000 && row == currentRow) {
                if (column == Columns.NAME) {
                  if (!isEditing())                   editCurrentFilename();
                }
 else                 if (column == Columns.DATE) {
                  ActionManager.performAction(com.mucommander.ui.action.impl.ChangeDateAction.Descriptor.ACTION_ID,mainFrame);
                }
 else                 if (column == Columns.PERMISSIONS) {
                  if (getSelectedFile().getChangeablePermissions().getIntValue() != 0)                   ActionManager.performAction(com.mucommander.ui.action.impl.ChangePermissionsAction.Descriptor.ACTION_ID,mainFrame);
                }
              }
            }
          }
.start();
        }
      }
    }
 else     if (doubleClickCounter == 2) {
      this.lastDoubleClickTimestamp=System.currentTimeMillis();
      ActionManager.performAction(e.isShiftDown() ? com.mucommander.ui.action.impl.OpenNativelyAction.Descriptor.ACTION_ID : com.mucommander.ui.action.impl.OpenAction.Descriptor.ACTION_ID,mainFrame);
    }
  }
}",0.9913555269450064
44851,"/** 
 * Listens to certain configuration variables.
 */
public void configurationChanged(ConfigurationEvent event){
  String var=event.getVariable();
  if (var.equals(MuConfiguration.DISPLAY_COMPACT_FILE_SIZE) || var.equals(MuConfiguration.DATE_FORMAT) || var.equals(MuConfiguration.DATE_SEPARATOR)|| var.equals(MuConfiguration.TIME_FORMAT)) {
    CustomDateFormat.updateDateFormat();
    tableModel.fillCellCache();
    resizeAndRepaint();
  }
 else   if (var.equals(MuConfiguration.TABLE_ICON_SCALE)) {
    setRowHeight();
  }
 else   if (var.equals(MuConfiguration.USE_SYSTEM_FILE_ICONS))   repaint();
}","/** 
 * Listens to certain configuration variables.
 */
public void configurationChanged(ConfigurationEvent event){
  String var=event.getVariable();
  if (var.equals(MuConfiguration.DISPLAY_COMPACT_FILE_SIZE)) {
    FileTableModel.setSizeFormat(event.getBooleanValue());
    tableModel.fillCellCache();
    resizeAndRepaint();
  }
 else   if (var.equals(MuConfiguration.DATE_FORMAT) || var.equals(MuConfiguration.DATE_SEPARATOR) || var.equals(MuConfiguration.TIME_FORMAT)) {
    CustomDateFormat.updateDateFormat();
    tableModel.fillCellCache();
    resizeAndRepaint();
  }
 else   if (var.equals(MuConfiguration.TABLE_ICON_SCALE)) {
    setRowHeight();
  }
 else   if (var.equals(MuConfiguration.USE_SYSTEM_FILE_ICONS))   repaint();
}",0.8958333333333334
44852,"/** 
 * Sets the SizeFormat format used to create the size column's string.
 * @param compactSize true to use a compact size format, false for full size in bytes 
 */
private static void setSizeFormat(boolean compactSize){
  if (compactSize)   sizeFormat=SizeFormat.DIGITS_MEDIUM | SizeFormat.UNIT_SHORT | SizeFormat.ROUND_TO_KB;
 else   sizeFormat=SizeFormat.DIGITS_FULL | SizeFormat.UNIT_NONE;
  sizeFormat|=SizeFormat.INCLUDE_SPACE;
}","/** 
 * Sets the SizeFormat format used to create the size column's string.
 * @param compactSize true to use a compact size format, false for full size in bytes 
 */
static void setSizeFormat(boolean compactSize){
  if (compactSize)   sizeFormat=SizeFormat.DIGITS_MEDIUM | SizeFormat.UNIT_SHORT | SizeFormat.ROUND_TO_KB;
 else   sizeFormat=SizeFormat.DIGITS_FULL | SizeFormat.UNIT_NONE;
  sizeFormat|=SizeFormat.INCLUDE_SPACE;
}",0.9907621247113164
44853,"@Override public void renameTo(AbstractFile destFile) throws IOException, UnsupportedFileOperationException {
  checkRenamePrerequisites(destFile,true,false);
  destFile=destFile.getTopAncestor();
  File destJavaIoFile=((LocalFile)destFile).file;
  if (IS_WINDOWS) {
    if (!getRoot().equals(destFile.getRoot()))     throw new IOException();
    if (OsVersions.WINDOWS_ME.isCurrentOrLower()) {
      if (destFile.exists())       if (!destJavaIoFile.delete())       throw new IOException();
    }
 else     if (Kernel32.isAvailable()) {
      if (!Kernel32.getInstance().MoveFileEx(absPath,destFile.getAbsolutePath(),Kernel32API.MOVEFILE_REPLACE_EXISTING | Kernel32API.MOVEFILE_WRITE_THROUGH))       throw new IOException();
    }
  }
  if (!file.renameTo(destJavaIoFile))   throw new IOException();
}","@Override public void renameTo(AbstractFile destFile) throws IOException, UnsupportedFileOperationException {
  checkRenamePrerequisites(destFile,true,false);
  destFile=destFile.getTopAncestor();
  File destJavaIoFile=((LocalFile)destFile).file;
  if (IS_WINDOWS) {
    if (!getRoot().equals(destFile.getRoot()))     throw new IOException();
    if (OsVersions.WINDOWS_ME.isCurrentOrLower()) {
      if (destFile.exists())       if (!destJavaIoFile.delete())       throw new IOException();
    }
 else     if (Kernel32.isAvailable()) {
      if (!Kernel32.getInstance().MoveFileEx(absPath,destFile.getAbsolutePath(),Kernel32API.MOVEFILE_REPLACE_EXISTING | Kernel32API.MOVEFILE_WRITE_THROUGH)) {
        String errorMessage=Integer.toString(Kernel32.getInstance().GetLastError());
        throw new IOException(""String_Node_Str"" + errorMessage);
      }
 else {
        return;
      }
    }
  }
  if (!file.renameTo(destJavaIoFile))   throw new IOException();
}",0.9086783891094724
44854,"private boolean areActionsChanged(){
  String[] commandBarActionIds=CommandBarAttributes.getActions();
  int nbActions=commandBarActionIds.length;
  for (int i=0; i < nbActions; ++i) {
    CommandBarButtonForDisplay buttonI=(CommandBarButtonForDisplay)commandBarButtons.get(i);
    if (buttonI == null) {
      if (commandBarActionIds[i] != null)       return true;
    }
 else     if (!buttonI.getActionId().equals(commandBarActionIds[i]))     return true;
  }
  return false;
}","private boolean areActionsChanged(){
  String[] commandBarActionIds=CommandBarAttributes.getActions();
  int nbActions=commandBarActionIds.length;
  if (nbActions != commandBarButtons.size())   return true;
  for (int i=0; i < nbActions; ++i) {
    CommandBarButtonForDisplay buttonI=(CommandBarButtonForDisplay)commandBarButtons.get(i);
    if (buttonI == null) {
      if (commandBarActionIds[i] != null)       return true;
    }
 else     if (!buttonI.getActionId().equals(commandBarActionIds[i]))     return true;
  }
  return false;
}",0.9410609037328096
44855,"private boolean areAlternativeActionsChanged(){
  String[] commandBarAlternativeActionIds=CommandBarAttributes.getAlternateActions();
  int nbActions=commandBarAlternativeActionIds.length;
  for (int i=0; i < nbActions; ++i) {
    CommandBarButtonForDisplay buttonI=(CommandBarButtonForDisplay)commandBarAlternativeButtons.get(i);
    if (buttonI == null) {
      if (commandBarAlternativeActionIds[i] != null)       return true;
    }
 else     if (!buttonI.getActionId().equals(commandBarAlternativeActionIds[i]))     return true;
  }
  return false;
}","private boolean areAlternativeActionsChanged(){
  String[] commandBarAlternativeActionIds=CommandBarAttributes.getAlternateActions();
  int nbActions=commandBarAlternativeActionIds.length;
  if (nbActions != commandBarAlternativeButtons.size())   return true;
  for (int i=0; i < nbActions; ++i) {
    CommandBarButtonForDisplay buttonI=(CommandBarButtonForDisplay)commandBarAlternativeButtons.get(i);
    if (buttonI == null) {
      if (commandBarAlternativeActionIds[i] != null)       return true;
    }
 else     if (!buttonI.getActionId().equals(commandBarAlternativeActionIds[i]))     return true;
  }
  return false;
}",0.9397794741306192
44856,"/** 
 * Parses the keystrokes defined in the given attribute map (if any) and associates them with the given action id. The keystroke will not be associated in any of the following cases: <ul> <li>the keystrokes attributes do not contain any value.</li> <li>the keystrokes attributes have values that do not represent a valid KeyStroke (syntax error).</li> </ul> If a given keystroke is already associated to an action, the existing association is replaced.  If there is a valid alternative keystroke defined but there is no valid primary keystroke defined, the primary keystroke  is replaced by the alternative keystroke.
 * @param actionId the action id to associate the keystroke with
 * @param attributes the attributes map that holds the value
 */
private void processKeystrokeAttribute(String actionId,Attributes attributes){
  String keyStrokeString;
  KeyStroke alternateKeyStroke=null;
  KeyStroke primaryKeyStroke=null;
  keyStrokeString=attributes.getValue(PRIMARY_KEYSTROKE_ATTRIBUTE);
  if (keyStrokeString != null) {
    primaryKeyStroke=KeyStroke.getKeyStroke(keyStrokeString);
    if (primaryKeyStroke == null)     AppLogger.info(""String_Node_Str"" + keyStrokeString);
 else {
      String prevAssignedActionId=ActionKeymap.getRegisteredActionIdForKeystroke(primaryKeyStroke);
      if (prevAssignedActionId != null && !prevAssignedActionId.equals(actionId))       AppLogger.fine(""String_Node_Str"" + keyStrokeString + ""String_Node_Str""+ actionId);
    }
  }
  keyStrokeString=attributes.getValue(ALTERNATE_KEYSTROKE_ATTRIBUTE);
  if (keyStrokeString != null) {
    alternateKeyStroke=KeyStroke.getKeyStroke(keyStrokeString);
    if (alternateKeyStroke == null)     AppLogger.info(""String_Node_Str"" + keyStrokeString);
 else {
      String prevAssignedActionId=ActionKeymap.getRegisteredActionIdForKeystroke(alternateKeyStroke);
      if (prevAssignedActionId != null && !prevAssignedActionId.equals(actionId))       AppLogger.fine(""String_Node_Str"" + keyStrokeString + ""String_Node_Str""+ actionId);
    }
  }
  if (primaryKeyStroke != null || alternateKeyStroke != null) {
    if (primaryKeyStroke == null) {
      AppLogger.fine(""String_Node_Str"" + actionId + ""String_Node_Str"");
      primaryActionsReadKeymap.put(actionId,alternateKeyStroke);
      alternateActionsReadKeymap.put(actionId,null);
      setModified();
    }
 else {
      primaryActionsReadKeymap.put(actionId,primaryKeyStroke);
      alternateActionsReadKeymap.put(actionId,alternateKeyStroke);
    }
  }
}","/** 
 * Parses the keystrokes defined in the given attribute map (if any) and associates them with the given action id. The keystroke will not be associated in any of the following cases: <ul> <li>the keystrokes attributes do not contain any value.</li> <li>the keystrokes attributes have values that do not represent a valid KeyStroke (syntax error).</li> </ul> If a given keystroke is already associated to an action, the existing association is replaced.  If there is a valid alternative keystroke defined but there is no valid primary keystroke defined, the primary keystroke  is replaced by the alternative keystroke.
 * @param actionId the action id to associate the keystroke with
 * @param attributes the attributes map that holds the value
 */
private void processKeystrokeAttribute(String actionId,Attributes attributes){
  String keyStrokeString;
  KeyStroke alternateKeyStroke=null;
  KeyStroke primaryKeyStroke=null;
  keyStrokeString=attributes.getValue(PRIMARY_KEYSTROKE_ATTRIBUTE);
  if (keyStrokeString != null) {
    primaryKeyStroke=KeyStroke.getKeyStroke(keyStrokeString);
    if (primaryKeyStroke == null)     AppLogger.info(""String_Node_Str"" + keyStrokeString);
 else {
      String prevAssignedActionId=ActionKeymap.getRegisteredActionIdForKeystroke(primaryKeyStroke);
      if (prevAssignedActionId != null && !prevAssignedActionId.equals(actionId))       AppLogger.fine(""String_Node_Str"" + keyStrokeString + ""String_Node_Str""+ actionId);
    }
  }
  keyStrokeString=attributes.getValue(ALTERNATE_KEYSTROKE_ATTRIBUTE);
  if (keyStrokeString != null) {
    alternateKeyStroke=KeyStroke.getKeyStroke(keyStrokeString);
    if (alternateKeyStroke == null)     AppLogger.info(""String_Node_Str"" + keyStrokeString);
 else {
      String prevAssignedActionId=ActionKeymap.getRegisteredActionIdForKeystroke(alternateKeyStroke);
      if (prevAssignedActionId != null && !prevAssignedActionId.equals(actionId))       AppLogger.fine(""String_Node_Str"" + keyStrokeString + ""String_Node_Str""+ actionId);
    }
  }
  if (primaryKeyStroke == null) {
    AppLogger.fine(""String_Node_Str"" + actionId + ""String_Node_Str"");
    primaryActionsReadKeymap.put(actionId,alternateKeyStroke);
    alternateActionsReadKeymap.put(actionId,null);
    setModified();
  }
 else {
    primaryActionsReadKeymap.put(actionId,primaryKeyStroke);
    alternateActionsReadKeymap.put(actionId,alternateKeyStroke);
  }
}",0.9824274621986104
44857,"public void mouseClicked(MouseEvent e){
  if (mainFrame.getNoEventsMode())   return;
  Object source=e.getSource();
  if ((System.currentTimeMillis() - doubleClickTime) < DOUBLE_CLICK_INTERVAL) {
    if (doubleClickCounter == 1) {
      doubleClickCounter=2;
      e.consume();
    }
  }
 else {
    doubleClickTime=System.currentTimeMillis();
    doubleClickCounter=1;
  }
  if (source == this && DesktopManager.isLeftMouseButton(e)) {
    if ((doubleClickCounter == 1) && (System.currentTimeMillis() - selectionChangedTimestamp) > EDIT_NAME_CLICK_DELAY) {
      int clickX=e.getX();
      Point p=new Point(clickX,e.getY());
      final int row=rowAtPoint(p);
      final int viewColumn=columnAtPoint(p);
      final int column=convertColumnIndexToModel(viewColumn);
      if (row == currentRow && !isParentFolderSelected() && (column == Columns.NAME || column == Columns.DATE || column == Columns.PERMISSIONS)) {
        FontMetrics fm=getFontMetrics(FileTableCellRenderer.getCellFont());
        int labelWidth=fm.stringWidth((String)tableModel.getValueAt(row,column));
        int columnX=(int)getTableHeader().getHeaderRect(viewColumn).getX();
        if (clickX < columnX + CellLabel.CELL_BORDER_WIDTH || clickX > columnX + labelWidth + CellLabel.CELL_BORDER_WIDTH)         return;
        if (hasFocus() && System.currentTimeMillis() - focusGainedTime > 100) {
          new Thread(){
            public void run(){
              try {
                sleep(800);
              }
 catch (              InterruptedException e) {
              }
              if ((System.currentTimeMillis() - lastDoubleClickTimestamp) > 1000 && row == currentRow) {
                if (column == Columns.NAME) {
                  if (!isEditing())                   editCurrentFilename();
                }
 else                 if (column == Columns.DATE) {
                  ActionManager.performAction(com.mucommander.ui.action.impl.ChangeDateAction.Descriptor.ACTION_ID,mainFrame);
                }
 else                 if (column == Columns.PERMISSIONS) {
                  if (getSelectedFile().getChangeablePermissions().getIntValue() != 0)                   ActionManager.performAction(com.mucommander.ui.action.impl.ChangePermissionsAction.Descriptor.ACTION_ID,mainFrame);
                }
              }
            }
          }
.start();
        }
      }
    }
 else     if (doubleClickCounter == 2) {
      ActionManager.performAction(e.isShiftDown() ? com.mucommander.ui.action.impl.OpenNativelyAction.Descriptor.ACTION_ID : com.mucommander.ui.action.impl.OpenAction.Descriptor.ACTION_ID,mainFrame);
    }
  }
}","public void mouseClicked(MouseEvent e){
  if (mainFrame.getNoEventsMode())   return;
  Object source=e.getSource();
  if ((System.currentTimeMillis() - doubleClickTime) < DOUBLE_CLICK_INTERVAL) {
    if (doubleClickCounter == 1) {
      doubleClickCounter=2;
      e.consume();
    }
  }
 else {
    doubleClickTime=System.currentTimeMillis();
    doubleClickCounter=1;
  }
  if (source == this && DesktopManager.isLeftMouseButton(e)) {
    if ((doubleClickCounter == 1) && (System.currentTimeMillis() - selectionChangedTimestamp) > EDIT_NAME_CLICK_DELAY) {
      int clickX=e.getX();
      Point p=new Point(clickX,e.getY());
      final int row=rowAtPoint(p);
      final int viewColumn=columnAtPoint(p);
      final int column=convertColumnIndexToModel(viewColumn);
      if (row == currentRow && !isParentFolderSelected() && (column == Columns.NAME || column == Columns.DATE || column == Columns.PERMISSIONS)) {
        FontMetrics fm=getFontMetrics(FileTableCellRenderer.getCellFont());
        int labelWidth=fm.stringWidth((String)tableModel.getValueAt(row,column));
        int columnX=(int)getTableHeader().getHeaderRect(viewColumn).getX();
        if (clickX < columnX + CellLabel.CELL_BORDER_WIDTH || clickX > columnX + labelWidth + CellLabel.CELL_BORDER_WIDTH)         return;
        if (hasFocus() && System.currentTimeMillis() - focusGainedTime > 100) {
          new Thread(){
            public void run(){
              try {
                sleep(800);
              }
 catch (              InterruptedException e) {
              }
              if ((System.currentTimeMillis() - lastDoubleClickTimestamp) > 1000 && row == currentRow) {
                if (column == Columns.NAME) {
                  if (!isEditing())                   editCurrentFilename();
                }
 else                 if (column == Columns.DATE) {
                  ActionManager.performAction(com.mucommander.ui.action.impl.ChangeDateAction.Descriptor.ACTION_ID,mainFrame);
                }
 else                 if (column == Columns.PERMISSIONS) {
                  if (getSelectedFile().getChangeablePermissions().getIntValue() != 0)                   ActionManager.performAction(com.mucommander.ui.action.impl.ChangePermissionsAction.Descriptor.ACTION_ID,mainFrame);
                }
              }
            }
          }
.start();
        }
      }
    }
 else     if (doubleClickCounter == 2) {
      this.lastDoubleClickTimestamp=System.currentTimeMillis();
      ActionManager.performAction(e.isShiftDown() ? com.mucommander.ui.action.impl.OpenNativelyAction.Descriptor.ACTION_ID : com.mucommander.ui.action.impl.OpenAction.Descriptor.ACTION_ID,mainFrame);
    }
  }
}",0.9879381831888427
44858,"/** 
 * Returns true if the given KeyStroke is one of this action's accelerators. This method always returns false if this method has no accelerator.
 * @param keyStroke the KeyStroke to test against this action's accelerators
 * @return true if the given KeyStroke is one of this action's accelerators
 */
public boolean isAccelerator(KeyStroke keyStroke){
  KeyStroke accelerator=getAccelerator();
  if (accelerator != null && accelerator.equals(keyStroke))   return true;
  accelerator=getAlternateAccelerator();
  return accelerator != null && accelerator.equals(keyStroke);
}","/** 
 * Returns <code>true</code> if the given KeyStroke is one of this action's accelerators. Keystrokes are compared using   {@link #acceleratorsEqual(KeyStroke,KeyStroke)}, so that the   {@link KeyStroke#isOnKeyRelease()} flagis not taken into account. This method always returns <code>false</code> if this method has no accelerator.
 * @param keyStroke the KeyStroke to test against this action's accelerators
 * @return true if the given KeyStroke is one of this action's accelerators
 */
public boolean isAccelerator(KeyStroke keyStroke){
  KeyStroke accelerator=getAccelerator();
  if (accelerator != null && acceleratorsEqual(accelerator,keyStroke))   return true;
  accelerator=getAlternateAccelerator();
  return accelerator != null && acceleratorsEqual(accelerator,keyStroke);
}",0.8327246165084002
44859,"public synchronized void keyPressed(KeyEvent e){
  if (mainFrame.getNoEventsMode())   return;
  char keyChar=e.getKeyChar();
  if (!isActive()) {
    if (!isValidQuickSearchInput(e))     return;
    if (ActionKeymap.isKeyStrokeRegistered(KeyStroke.getKeyStrokeForEvent(e)))     return;
    start();
  }
  int keyCode=e.getKeyCode();
  if (keyCode == KeyEvent.VK_BACK_SPACE) {
    int searchStringLen=searchString.length();
    if (searchStringLen == 0)     return;
    searchString=searchString.substring(0,searchStringLen - 1);
    if (searchString.length() != 0)     FileTable.this.repaint();
    findMatch(0,true,true);
  }
 else   if (keyCode == KeyEvent.VK_ESCAPE) {
    stop();
  }
 else   if (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_DOWN) {
    if (e.isShiftDown()) {
      if (!isParentFolderSelected())       setRowMarked(currentRow,!tableModel.isRowMarked(currentRow));
    }
    if (keyCode == KeyEvent.VK_UP)     findMatch(currentRow - 1,false,false);
 else     findMatch(currentRow + 1,true,false);
  }
 else   if (isValidQuickSearchInput(e)) {
    searchString+=keyChar;
    FileTable.this.repaint();
    findMatch(0,true,true);
  }
 else {
    String muActionId=ActionKeymap.getRegisteredActionIdForKeystroke(KeyStroke.getKeyStrokeForEvent(e));
    if (muActionId != null) {
      e.consume();
      stop();
      ActionManager.getActionInstance(muActionId,mainFrame).performAction();
    }
    return;
  }
  lastSearchStringChange=System.currentTimeMillis();
}","public synchronized void keyPressed(KeyEvent e){
  if (mainFrame.getNoEventsMode())   return;
  char keyChar=e.getKeyChar();
  if (!isActive()) {
    if (!isValidQuickSearchInput(e))     return;
    if (ActionKeymap.isKeyStrokeRegistered(KeyStroke.getKeyStrokeForEvent(e)))     return;
    start();
  }
  int keyCode=e.getKeyCode();
  boolean keyHasModifiers=(e.getModifiersEx() & (KeyEvent.SHIFT_DOWN_MASK | KeyEvent.ALT_DOWN_MASK | KeyEvent.CTRL_DOWN_MASK| KeyEvent.META_DOWN_MASK)) != 0;
  if (keyCode == KeyEvent.VK_BACK_SPACE && !keyHasModifiers) {
    int searchStringLen=searchString.length();
    if (searchStringLen == 0)     return;
    searchString=searchString.substring(0,searchStringLen - 1);
    if (searchString.length() != 0)     FileTable.this.repaint();
    findMatch(0,true,true);
  }
 else   if (keyCode == KeyEvent.VK_ESCAPE && !keyHasModifiers) {
    stop();
  }
 else   if ((keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_DOWN) && !keyHasModifiers) {
    if (keyCode == KeyEvent.VK_UP)     findMatch(currentRow - 1,false,false);
 else     findMatch(currentRow + 1,true,false);
  }
 else   if (ActionManager.getActionInstance(MarkSelectedFileAction.Descriptor.ACTION_ID,mainFrame).isAccelerator(KeyStroke.getKeyStrokeForEvent(e)) || ActionManager.getActionInstance(MarkNextRowAction.Descriptor.ACTION_ID,mainFrame).isAccelerator(KeyStroke.getKeyStrokeForEvent(e))) {
    if (!isParentFolderSelected())     setRowMarked(currentRow,!tableModel.isRowMarked(currentRow));
    findMatch(currentRow + 1,true,false);
  }
 else   if (ActionManager.getActionInstance(MarkPreviousRowAction.Descriptor.ACTION_ID,mainFrame).isAccelerator(KeyStroke.getKeyStrokeForEvent(e))) {
    if (!isParentFolderSelected())     setRowMarked(currentRow,!tableModel.isRowMarked(currentRow));
    findMatch(currentRow - 1,false,false);
  }
 else   if (isValidQuickSearchInput(e)) {
    searchString+=keyChar;
    FileTable.this.repaint();
    findMatch(0,true,true);
  }
 else {
    String muActionId=ActionKeymap.getRegisteredActionIdForKeystroke(KeyStroke.getKeyStrokeForEvent(e));
    if (muActionId != null) {
      e.consume();
      stop();
      ActionManager.getActionInstance(muActionId,mainFrame).performAction();
    }
    return;
  }
  lastSearchStringChange=System.currentTimeMillis();
}",0.5232312565997888
44860,"/** 
 * Marks or unmarks the current selected file (current row) and advance current row to the next one,  with the following exceptions: <ul> <li>if quick search is active, this method does nothing <li>if '..' file is selected, file is not marked but current row is still advanced to the next one <li>if the   {@link com.mucommander.ui.action.impl.MarkSelectedFileAction} key event is repeated and the last file has alreadybeen marked/unmarked since the key was last released, the file is not marked in order to avoid marked/unmarked flaps when the mark key is kept pressed. </ul>
 * @see com.mucommander.ui.action.impl.MarkSelectedFileAction
 */
public void markSelectedFile(){
  if (markKeyRepeated && lastRowMarked)   return;
  if (!isParentFolderSelected()) {
    setRowMarked(currentRow,!tableModel.isRowMarked(currentRow));
  }
  if (currentRow != tableModel.getRowCount() - 1) {
    selectRow(currentRow + 1);
  }
 else   if (!lastRowMarked) {
    repaintRow(currentRow);
    lastRowMarked=true;
  }
  markKeyRepeated=true;
}","/** 
 * Marks or unmarks the current selected file (current row) and advance current row to the next one,  with the following exceptions: <ul> <li>if quick search is active, this method does nothing <li>if '..' file is selected, file is not marked but current row is still advanced to the next one <li>if the   {@link MarkSelectedFileAction} key event is repeated and the last file has alreadybeen marked/unmarked since the key was last released, the file is not marked in order to avoid marked/unmarked flaps when the mark key is kept pressed. </ul>
 * @see MarkSelectedFileAction
 */
public void markSelectedFile(){
  if (markKeyRepeated && lastRowMarked)   return;
  if (!isParentFolderSelected()) {
    setRowMarked(currentRow,!tableModel.isRowMarked(currentRow));
  }
  if (currentRow != tableModel.getRowCount() - 1) {
    selectRow(currentRow + 1);
  }
 else   if (!lastRowMarked) {
    repaintRow(currentRow);
    lastRowMarked=true;
  }
  markKeyRepeated=true;
}",0.969061876247505
44861,"/** 
 * Reacts to buttons being pushed.
 */
public void actionPerformed(ActionEvent e){
  Object source=e.getSource();
  if (source == okButton || source == applyButton) {
    commit();
  }
  if (source == okButton || source == cancelButton)   dispose();
}","/** 
 * Reacts to buttons being pushed.
 */
public void actionPerformed(ActionEvent e){
  Object source=e.getSource();
  if (source == okButton || source == applyButton)   commit();
  if (source == applyButton)   setCommitButtonsEnabled(false);
  if (source == okButton || source == cancelButton)   dispose();
}",0.8853615520282186
44862,"private JPanel createFilteringPanel(){
  JPanel panel=new JPanel(new FlowLayout(FlowLayout.LEFT));
  panel.setBorder(BorderFactory.createEmptyBorder());
  panel.add(new JLabel(Translator.get(""String_Node_Str"" + ""String_Node_Str"") + ""String_Node_Str""));
  Iterator actionCategoriesIterator=ActionProperties.getActionCategories().iterator();
  final JComboBox combo=new JComboBox();
  combo.addItem(ActionCategories.ALL);
  while (actionCategoriesIterator.hasNext())   combo.addItem(actionCategoriesIterator.next());
  combo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final ActionCategory selectedActionCategory=(ActionCategory)combo.getSelectedItem();
      shortcutsTable.updateModel(new ShortcutsTable.ActionFilter(){
        public boolean accept(        String actionId){
          return selectedActionCategory.contains(actionId);
        }
      }
);
    }
  }
);
  combo.setSelectedIndex(0);
  panel.add(combo);
  return panel;
}","private JPanel createFilteringPanel(){
  JPanel panel=new JPanel(new FlowLayout(FlowLayout.LEFT));
  panel.setBorder(BorderFactory.createEmptyBorder());
  panel.add(new JLabel(Translator.get(""String_Node_Str"" + ""String_Node_Str"") + ""String_Node_Str""));
  Iterator actionCategoriesIterator=ActionProperties.getActionCategories().iterator();
  final JComboBox combo=new JComboBox();
  combo.addItem(ActionCategories.ALL);
  while (actionCategoriesIterator.hasNext())   combo.addItem(actionCategoriesIterator.next());
  combo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final ActionCategory selectedActionCategory=(ActionCategory)combo.getSelectedItem();
      shortcutsTable.updateModel(new ShortcutsTable.ActionFilter(){
        public boolean accept(        String actionId){
          return selectedActionCategory.contains(actionId);
        }
      }
);
      tooltipBar.showDefaultMessage();
    }
  }
);
  combo.setSelectedIndex(0);
  panel.add(combo);
  return panel;
}",0.9806835066864784
44863,"public void dialogValidated(){
  try {
    portSpinner.commitEdit();
  }
 catch (  ParseException e) {
  }
  updateValues();
}","public void dialogValidated(){
  updateValues();
}",0.5681818181818182
44864,"HTTPPanel(ServerConnectDialog dialog,MainFrame mainFrame){
  super(dialog,mainFrame);
  urlField=new JTextField(lastURL);
  urlField.selectAll();
  addTextFieldListeners(urlField,true);
  addRow(Translator.get(""String_Node_Str""),urlField,5);
  portSpinner=createPortSpinner(lastPort);
  addRow(Translator.get(""String_Node_Str""),portSpinner,20);
  addRow(new JLabel(Translator.get(""String_Node_Str"")),10);
  usernameField=new JTextField(lastUsername);
  usernameField.selectAll();
  addTextFieldListeners(usernameField,false);
  addRow(Translator.get(""String_Node_Str""),usernameField,5);
  passwordField=new JPasswordField(lastPassword);
  addTextFieldListeners(passwordField,false);
  addRow(Translator.get(""String_Node_Str""),passwordField,0);
}","HTTPPanel(ServerConnectDialog dialog,MainFrame mainFrame){
  super(dialog,mainFrame);
  urlField=new JTextField(lastURL);
  urlField.selectAll();
  addTextFieldListeners(urlField,true);
  addRow(Translator.get(""String_Node_Str""),urlField,20);
  addRow(new JLabel(Translator.get(""String_Node_Str"")),10);
  usernameField=new JTextField(lastUsername);
  usernameField.selectAll();
  addTextFieldListeners(usernameField,false);
  addRow(Translator.get(""String_Node_Str""),usernameField,5);
  passwordField=new JPasswordField(lastPassword);
  addTextFieldListeners(passwordField,false);
  addRow(Translator.get(""String_Node_Str""),passwordField,0);
}",0.926512968299712
44865,"private void updateValues(){
  lastURL=urlField.getText();
  lastUsername=usernameField.getText();
  lastPassword=new String(passwordField.getPassword());
  lastPort=((Integer)portSpinner.getValue()).intValue();
}","private void updateValues(){
  lastURL=urlField.getText();
  lastUsername=usernameField.getText();
  lastPassword=new String(passwordField.getPassword());
}",0.8455284552845529
44866,"FileURL getServerURL() throws MalformedURLException {
  updateValues();
  if (!lastURL.toLowerCase().startsWith(FileProtocols.HTTP + ""String_Node_Str""))   lastURL=FileProtocols.HTTP + ""String_Node_Str"" + lastURL;
  FileURL fileURL=FileURL.getFileURL(lastURL);
  fileURL.setPort(lastPort);
  fileURL.setCredentials(new Credentials(lastUsername,lastPassword));
  return fileURL;
}","FileURL getServerURL() throws MalformedURLException {
  updateValues();
  if (!(lastURL.toLowerCase().startsWith(FileProtocols.HTTP + ""String_Node_Str"") || lastURL.toLowerCase().startsWith(FileProtocols.HTTPS + ""String_Node_Str"")))   lastURL=FileProtocols.HTTP + ""String_Node_Str"" + lastURL;
  FileURL fileURL=FileURL.getFileURL(lastURL);
  fileURL.setCredentials(new Credentials(lastUsername,lastPassword));
  return fileURL;
}",0.7146401985111662
44867,"private Collection initCommandBarActionsList(){
  String[] commandBarActionIds=CommandBarAttributes.getActions();
  int nbCommandBarActionIds=commandBarActionIds.length;
  for (int i=0; i < nbCommandBarActionIds; ++i)   commandBarButtons.add(CommandBarButtonForDisplay.create(commandBarActionIds[i]));
  commandBarButtonsList=new DynamicList(commandBarButtons);
  commandBarButtonsList.setCellRenderer(new CommandBarButtonListCellRenderer());
  commandBarButtonsList.setLayoutOrientation(JList.HORIZONTAL_WRAP);
  commandBarButtonsList.setVisibleRowCount(1);
  commandBarButtonsList.setDragEnabled(true);
  commandBarButtonsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  commandBarButtonsList.setTransferHandler(new CommandBarActionsListTransferHandler());
  commandBarButtonsList.setBackground(JBUTTON_BACKGROUND_COLOR);
  try {
    commandBarButtonsList.getDropTarget().addDropTargetListener(new DropTargetListener(){
      public void dragEnter(      DropTargetDragEvent dtde){
      }
      public void dragExit(      DropTargetEvent dte){
        selectedCommandBarButtonIndex=-2;
        commandBarButtonsList.repaint();
      }
      public void dragOver(      DropTargetDragEvent dtde){
        int index;
        int newSide=0;
        if (canImport) {
          Point dropLocation=dtde.getLocation();
          index=commandBarButtonsList.locationToIndex(dropLocation);
          Point cellLocation=commandBarButtonsList.indexToLocation(index);
          newSide=cellLocation.x + CommandBarButtonForDisplay.PREFERRED_SIZE.width / 2 > dropLocation.x ? LEFT : RIGHT;
        }
 else         index=-2;
        if (index != selectedCommandBarButtonIndex || selectedCommandBarButtonSide != newSide) {
          selectedCommandBarButtonIndex=index;
          selectedCommandBarButtonSide=newSide;
          commandBarButtonsList.repaint();
        }
      }
      public void drop(      DropTargetDropEvent dtde){
        if (!isImported)         return;
        Point dropLocation=dtde.getLocation();
        int index=commandBarButtonsList.locationToIndex(dropLocation);
        Point cellLocation=commandBarButtonsList.indexToLocation(index);
        if (cellLocation.x + CommandBarButtonForDisplay.PREFERRED_SIZE.width / 2 < dropLocation.x)         index++;
        commandBarButtons.add(index,transferedButton);
        commandBarAlternativeButtons.add(index,transferedButtonProperties.getSource() == COMMAND_BAR_BUTTONS_LIST_ID ? commandBarAlternativeButtons.remove(transferedButtonProperties.getIndex()) : null);
        commandBarButtonsList.ensureIndexIsVisible(index);
      }
      public void dropActionChanged(      DropTargetDragEvent dtde){
      }
    }
);
  }
 catch (  TooManyListenersException e) {
    AppLogger.fine(""String_Node_Str"",e);
  }
  return Arrays.asList(commandBarActionIds);
}","private Collection initCommandBarActionsList(){
  String[] commandBarActionIds=CommandBarAttributes.getActions();
  int nbCommandBarActionIds=commandBarActionIds.length;
  for (int i=0; i < nbCommandBarActionIds; ++i)   commandBarButtons.add(CommandBarButtonForDisplay.create(commandBarActionIds[i]));
  commandBarButtonsList=new DynamicList(commandBarButtons);
  commandBarButtonsList.setCellRenderer(new CommandBarButtonListCellRenderer());
  commandBarButtonsList.setLayoutOrientation(JList.HORIZONTAL_WRAP);
  commandBarButtonsList.setVisibleRowCount(1);
  commandBarButtonsList.setDragEnabled(true);
  commandBarButtonsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  commandBarButtonsList.setTransferHandler(new CommandBarActionsListTransferHandler());
  commandBarButtonsList.setBackground(JBUTTON_BACKGROUND_COLOR);
  try {
    commandBarButtonsList.getDropTarget().addDropTargetListener(new DropTargetListener(){
      public void dragEnter(      DropTargetDragEvent dtde){
      }
      public void dragExit(      DropTargetEvent dte){
        selectedCommandBarButtonIndex=-2;
        commandBarButtonsList.repaint();
      }
      public void dragOver(      DropTargetDragEvent dtde){
        int index;
        int newSide=0;
        if (canImport) {
          Point dropLocation=dtde.getLocation();
          index=commandBarButtonsList.locationToIndex(dropLocation);
          Point cellLocation=commandBarButtonsList.indexToLocation(index);
          newSide=cellLocation.x + CommandBarButtonForDisplay.PREFERRED_SIZE.width / 2 > dropLocation.x ? LEFT : RIGHT;
        }
 else         index=-2;
        if (index != selectedCommandBarButtonIndex || selectedCommandBarButtonSide != newSide) {
          selectedCommandBarButtonIndex=index;
          selectedCommandBarButtonSide=newSide;
          commandBarButtonsList.repaint();
        }
      }
      public void drop(      DropTargetDropEvent dtde){
        if (!isImported)         return;
        Point dropLocation=dtde.getLocation();
        int index=commandBarButtonsList.locationToIndex(dropLocation);
        Point cellLocation=commandBarButtonsList.indexToLocation(index);
        if (cellLocation.x + CommandBarButtonForDisplay.PREFERRED_SIZE.width / 2 < dropLocation.x)         index++;
        index+=transferedButtonProperties.getSource() == COMMAND_BAR_BUTTONS_LIST_ID && index > transferedButtonProperties.getIndex() ? -1 : 0;
        commandBarButtons.add(index,transferedButton);
        commandBarAlternativeButtons.add(index,transferedButtonProperties.getSource() == COMMAND_BAR_BUTTONS_LIST_ID ? commandBarAlternativeButtons.remove(transferedButtonProperties.getIndex()) : null);
        commandBarButtonsList.ensureIndexIsVisible(index);
      }
      public void dropActionChanged(      DropTargetDragEvent dtde){
      }
    }
);
  }
 catch (  TooManyListenersException e) {
    AppLogger.fine(""String_Node_Str"",e);
  }
  return Arrays.asList(commandBarActionIds);
}",0.9444827586206896
44868,"public void flush(){
}","public synchronized void flush(){
}",0.7719298245614035
44869,"/** 
 * Returns the last records that were collected by this handler.
 * @return the last records that were collected by this handler.
 */
public LogRecord[] getLogRecords(){
  LogRecord[] records=new LogRecord[logRecords.size()];
  logRecords.toArray(records);
  return records;
}","/** 
 * Returns the last records that were collected by this handler.
 * @return the last records that were collected by this handler.
 */
public synchronized LogRecord[] getLogRecords(){
  LogRecord[] records=new LogRecord[logRecords.size()];
  logRecords.toArray(records);
  return records;
}",0.977391304347826
44870,"public void publish(LogRecord record){
  if (logRecords.size() == bufferSize)   logRecords.removeFirst();
  logRecords.add(record);
}","public synchronized void publish(LogRecord record){
  if (logRecords.size() == bufferSize)   logRecords.removeFirst();
  logRecords.add(record);
}",0.953405017921147
44871,"public void close() throws SecurityException {
  logRecords.clear();
}","public synchronized void close() throws SecurityException {
  logRecords.clear();
}",0.915032679738562
44872,"/** 
 * Register new accelerators to the given action.
 * @param actionId - id of the MuAction.
 * @param accelerator - KeyStroke that would be primary accelerator of the given action.
 * @param alternateAccelerator - KeyStroke that would be alternative accelerator of the given action.
 */
public static void changeActionAccelerators(String actionId,KeyStroke accelerator,KeyStroke alternateAccelerator){
  if (isKeyStrokeRegistered(accelerator)) {
    String prevAcceleratorActionId=getRegisteredActionIdForKeystroke(accelerator);
switch (getAcceleratorType(accelerator)) {
case AcceleratorMap.PRIMARY_ACCELERATOR:
      registerActionAccelerators(prevAcceleratorActionId,null,getAlternateAccelerator(prevAcceleratorActionId));
    break;
case AcceleratorMap.ALTERNATIVE_ACCELERATOR:
  registerActionAccelerators(prevAcceleratorActionId,getAccelerator(prevAcceleratorActionId),null);
break;
}
}
if (isKeyStrokeRegistered(alternateAccelerator)) {
String prevAltAcceleratorActionId=getRegisteredActionIdForKeystroke(alternateAccelerator);
switch (getAcceleratorType(alternateAccelerator)) {
case AcceleratorMap.PRIMARY_ACCELERATOR:
registerActionAccelerators(prevAltAcceleratorActionId,null,getAlternateAccelerator(prevAltAcceleratorActionId));
break;
case AcceleratorMap.ALTERNATIVE_ACCELERATOR:
registerActionAccelerators(prevAltAcceleratorActionId,getAccelerator(prevAltAcceleratorActionId),null);
break;
}
}
acceleratorMap.remove((KeyStroke)customPrimaryActionKeymap.remove(actionId));
acceleratorMap.remove((KeyStroke)customAlternateActionKeymap.remove(actionId));
registerActionAccelerators(actionId,accelerator,alternateAccelerator);
}","/** 
 * Register new accelerators to the given action.
 * @param actionId - id of the MuAction.
 * @param accelerator - KeyStroke that would be primary accelerator of the given action.
 * @param alternateAccelerator - KeyStroke that would be alternative accelerator of the given action.
 */
public static void changeActionAccelerators(String actionId,KeyStroke accelerator,KeyStroke alternateAccelerator){
  String previousActionForAccelerator=getRegisteredActionIdForKeystroke(accelerator);
  if (previousActionForAccelerator != null && !previousActionForAccelerator.equals(actionId))   unregisterAcceleratorFromAction(previousActionForAccelerator,accelerator);
  String previousActionForAlternativeAccelerator=getRegisteredActionIdForKeystroke(alternateAccelerator);
  if (previousActionForAlternativeAccelerator != null && !previousActionForAlternativeAccelerator.equals(alternateAccelerator))   unregisterAcceleratorFromAction(previousActionForAlternativeAccelerator,alternateAccelerator);
  acceleratorMap.remove((KeyStroke)customPrimaryActionKeymap.remove(actionId));
  acceleratorMap.remove((KeyStroke)customAlternateActionKeymap.remove(actionId));
  registerActionAccelerators(actionId,accelerator,alternateAccelerator);
}",0.3426183844011142
44873,"/** 
 * Return accelerator type: primary\alternative\not registered.
 * @param ks - accelerator.
 * @return accelerator type.
 */
public static int getAcceleratorType(KeyStroke ks){
  int type=acceleratorMap.getAcceleratorType(ks);
  return type != 0 ? type : ActionProperties.getDefaultAcceleratorType(ks);
}","/** 
 * Return accelerator type: primary\alternative\not registered.
 * @param ks - accelerator.
 * @return accelerator type.
 */
private static int getAcceleratorType(KeyStroke ks){
  int type=acceleratorMap.getAcceleratorType(ks);
  return type != 0 ? type : ActionProperties.getDefaultAcceleratorType(ks);
}",0.9822294022617124
44874,"private Hashtable createCategoryToItsActionsWithShortcutsMap(){
  Iterator actionCategoriesIterator=ActionProperties.getActionCategories().iterator();
  Hashtable categoryToItsActionsWithShortcutsIdsMap=new Hashtable();
  while (actionCategoriesIterator.hasNext())   categoryToItsActionsWithShortcutsIdsMap.put(actionCategoriesIterator.next(),new LinkedList());
  Enumeration actionIds=ActionManager.getActionIds();
  while (actionIds.hasMoreElements()) {
    String actionId=(String)actionIds.nextElement();
    ActionCategory category=ActionProperties.getActionCategory(actionId);
    if (category != null && ActionKeymap.getAccelerator(actionId) != null)     ((LinkedList)categoryToItsActionsWithShortcutsIdsMap.get(category)).add(actionId);
  }
  return categoryToItsActionsWithShortcutsIdsMap;
}","private Hashtable createCategoryToItsActionsWithShortcutsMap(){
  Iterator actionCategoriesIterator=ActionProperties.getActionCategories().iterator();
  Hashtable categoryToItsActionsWithShortcutsIdsMap=new Hashtable();
  while (actionCategoriesIterator.hasNext())   categoryToItsActionsWithShortcutsIdsMap.put(actionCategoriesIterator.next(),new LinkedList());
  Enumeration actionIds=ActionManager.getActionIds();
  while (actionIds.hasMoreElements()) {
    String actionId=(String)actionIds.nextElement();
    ActionCategory category=ActionProperties.getActionCategory(actionId);
    if (category != null && ActionKeymap.doesActionHaveShortcut(actionId))     ((LinkedList)categoryToItsActionsWithShortcutsIdsMap.get(category)).add(actionId);
  }
  return categoryToItsActionsWithShortcutsIdsMap;
}",0.96
44875,"public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int rowIndex,int vColIndex){
  DotBorderedCellLabel label;
  int columnId;
  columnId=convertColumnIndexToModel(vColIndex);
  label=cellLabels[columnId];
  if (columnId == ACTION_DESCRIPTION_COLUMN_INDEX) {
    ActionDescription description=(ActionDescription)value;
    label.setIcon(description.icon);
    label.setText(description.text);
    label.setForeground(ThemeCache.foregroundColors[ThemeCache.ACTIVE][ThemeCache.NORMAL][ThemeCache.PLAIN_FILE]);
  }
 else {
    final KeyStroke key=(KeyStroke)value;
    String text=key == null ? ""String_Node_Str"" : KeyStrokeUtils.getKeyStrokeDisplayableRepresentation(key);
    if (table.getColumnModel().getColumn(vColIndex).getWidth() < label.getPreferredSize().getWidth())     label.setToolTipText(text);
 else     label.setToolTipText(null);
    label.setText(text);
    if (key != null) {
      boolean customized;
switch (columnId) {
case ACCELERATOR_COLUMN_INDEX:
        customized=!key.equals(ActionProperties.getDefaultAccelerator(data.getActionId(convertRowIndexToModel(rowIndex))));
      break;
case ALTERNATE_ACCELERATOR_COLUMN_INDEX:
    customized=!key.equals(ActionProperties.getDefaultAlternativeAccelerator(data.getActionId(convertRowIndexToModel(rowIndex))));
  break;
default :
customized=false;
}
label.setForeground(customized ? ThemeCache.foregroundColors[ThemeCache.ACTIVE][ThemeCache.NORMAL][ThemeCache.SYMLINK] : ThemeCache.foregroundColors[ThemeCache.ACTIVE][ThemeCache.NORMAL][ThemeCache.PLAIN_FILE]);
}
}
label.setOutline(hasFocus ? ThemeCache.backgroundColors[ThemeCache.ACTIVE][ThemeCache.SELECTED] : null);
label.setBackground(ThemeCache.backgroundColors[ThemeCache.ACTIVE][rowIndex % 2 == 0 ? ThemeCache.NORMAL : ThemeCache.ALTERNATE]);
return label;
}","public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int rowIndex,int vColIndex){
  DotBorderedCellLabel label;
  int columnId;
  columnId=convertColumnIndexToModel(vColIndex);
  label=cellLabels[columnId];
  if (columnId == ACTION_DESCRIPTION_COLUMN_INDEX) {
    ActionDescription description=(ActionDescription)value;
    label.setIcon(description.icon);
    label.setText(description.text);
    label.setForeground(ThemeCache.foregroundColors[ThemeCache.ACTIVE][ThemeCache.NORMAL][ThemeCache.PLAIN_FILE]);
  }
 else {
    final KeyStroke key=(KeyStroke)value;
    String text=key == null ? ""String_Node_Str"" : KeyStrokeUtils.getKeyStrokeDisplayableRepresentation(key);
    if (table.getColumnModel().getColumn(vColIndex).getWidth() < label.getPreferredSize().getWidth())     label.setToolTipText(text);
 else     label.setToolTipText(null);
    label.setText(text);
    if (key != null) {
      boolean customized;
switch (columnId) {
case ACCELERATOR_COLUMN_INDEX:
        customized=!key.equals(ActionProperties.getDefaultAccelerator(data.getActionId(rowIndex)));
      break;
case ALTERNATE_ACCELERATOR_COLUMN_INDEX:
    customized=!key.equals(ActionProperties.getDefaultAlternativeAccelerator(data.getActionId(rowIndex)));
  break;
default :
customized=false;
}
label.setForeground(customized ? ThemeCache.foregroundColors[ThemeCache.ACTIVE][ThemeCache.NORMAL][ThemeCache.SYMLINK] : ThemeCache.foregroundColors[ThemeCache.ACTIVE][ThemeCache.NORMAL][ThemeCache.PLAIN_FILE]);
}
}
label.setOutline(hasFocus ? ThemeCache.backgroundColors[ThemeCache.ACTIVE][ThemeCache.SELECTED] : null);
label.setBackground(ThemeCache.backgroundColors[ThemeCache.ACTIVE][rowIndex % 2 == 0 ? ThemeCache.NORMAL : ThemeCache.ALTERNATE]);
return label;
}",0.98568281938326
44876,"/** 
 * @return the default quick list header font.
 */
private static Font getMenuHeaderFont(){
  if (DEFAULT_MENU_HEADER_FONT == null) {
    if ((DEFAULT_MENU_HEADER_FONT=UIManager.getDefaults().getFont(""String_Node_Str"")) == null)     DEFAULT_MENU_HEADER_FONT=new JInternalFrame().getRootPane().getFont();
  }
  return DEFAULT_MENU_HEADER_FONT;
}","/** 
 * @return the default quick list header font.
 */
private static Font getMenuHeaderFont(){
  if (DEFAULT_MENU_HEADER_FONT == null) {
    if ((DEFAULT_MENU_HEADER_FONT=UIManager.getDefaults().getFont(""String_Node_Str"")) == null)     DEFAULT_MENU_HEADER_FONT=new JTable().getFont();
  }
  return DEFAULT_MENU_HEADER_FONT;
}",0.8254437869822485
44877,"/** 
 * Executes the split job.
 */
private void startJob(){
  long size=getBytes();
  if (size < 1) {
    return;
  }
  String destPath=edtTargetDirectory.getText();
  PathUtils.ResolvedDestination resolvedDest=PathUtils.resolveDestination(destPath,mainFrame.getActiveTable().getCurrentFolder());
  if (resolvedDest == null || (files.size() > 1 && resolvedDest.getDestinationType() != PathUtils.ResolvedDestination.EXISTING_FOLDER)) {
    showErrorDialog(Translator.get(""String_Node_Str"",destPath),Translator.get(""String_Node_Str""));
    return;
  }
  long parts=getParts();
  if (parts > MAX_PARTS) {
    showErrorDialog(Translator.get(""String_Node_Str"",Integer.toString(MAX_PARTS)),Translator.get(""String_Node_Str""));
    return;
  }
  ProgressDialog progressDialog=new ProgressDialog(mainFrame,Translator.get(""String_Node_Str""));
  SplitFileJob job=new SplitFileJob(progressDialog,mainFrame,file,resolvedDest.getDestinationFolder(),size,(int)parts);
  job.setIntegrityCheckEnabled(cbGenerateCRC.isSelected());
  progressDialog.start(job);
}","/** 
 * Executes the split job.
 */
private void startJob(){
  long size=getBytes();
  if (size < 1) {
    return;
  }
  String destPath=edtTargetDirectory.getText();
  PathUtils.ResolvedDestination resolvedDest=PathUtils.resolveDestination(destPath,mainFrame.getActiveTable().getCurrentFolder());
  if (resolvedDest == null || (files.size() > 1 && resolvedDest.getDestinationType() != PathUtils.ResolvedDestination.EXISTING_FOLDER)) {
    showErrorDialog(Translator.get(""String_Node_Str"",destPath),Translator.get(""String_Node_Str""));
    return;
  }
  long parts=getParts();
  if (parts > MAX_PARTS) {
    showErrorDialog(Translator.get(""String_Node_Str"",Integer.toString(MAX_PARTS)),Translator.get(""String_Node_Str""));
    return;
  }
  ProgressDialog progressDialog=new ProgressDialog(mainFrame,Translator.get(""String_Node_Str""));
  SplitFileJob job=new SplitFileJob(progressDialog,mainFrame,file,resolvedDest.getDestinationFolder(),(int)size,(int)parts);
  job.setIntegrityCheckEnabled(cbGenerateCRC.isSelected());
  progressDialog.start(job);
}",0.9976110845676064
44878,"/** 
 * Finds the resource with the given path and returns a URL pointing to its location, or <code>null</code> if the resource couldn't be located. The given <code>ClassLoader</code> is used for locating the resource. <p>The given resource path must be forward slash (<code>/</code>) separated. It may or may not start with a leading forward slash character, this doesn't affect the way it is interpreted.</p> <p>The <code>rootPackageFile</code> argument can be used to limit the scope of the search to a specific location (JAR file or directory) in the classpath: resources located outside of this location will not be matched. This avoids potential ambiguities that can arise if the specified resource path exists in several locations. If this parameter is <code>null</code>, the resource is looked up in the whole class path. In that case and if several resources with the specified path exist, the choice of the resource to return is arbitrary.</p>
 * @param path forward slash-separated path to the resource to look for, relative to the parent classpathlocation (directory or JAR file) that contains it.
 * @param classLoader the ClassLoader used for locating the resource. May not be <code>null</code>.
 * @param rootPackageFile root package location (JAR file or directory) that limits the scope of the search,<code>null</code> to look for the resource in the whole class path.
 * @return a URL pointing to the resource, or <code>null</code> if the resource couldn't be located
 */
public static URL getResourceAsURL(String path,ClassLoader classLoader,AbstractFile rootPackageFile){
  path=removeLeadingSlash(path);
  if (rootPackageFile == null)   return classLoader.getResource(path);
  String separator=rootPackageFile.getSeparator();
  if (!separator.equals(""String_Node_Str""))   path=StringUtils.replaceCompat(path,""String_Node_Str"",separator);
  try {
    Enumeration resourceEnum=classLoader.getResources(removeLeadingSlash(path));
    String rootPackagePath=rootPackageFile.getAbsolutePath();
    String resourcePath=rootPackageFile.getAbsolutePath(true) + path;
    URL resourceURL;
    while (resourceEnum.hasMoreElements()) {
      resourceURL=(URL)resourceEnum.nextElement();
      if (""String_Node_Str"".equals(resourceURL.getProtocol())) {
        if (getJarFilePath(resourceURL).equals(rootPackagePath))         return resourceURL;
      }
 else {
        if (normalizeUrlPath(getDecodedURLPath(resourceURL)).equals(resourcePath))         return resourceURL;
      }
    }
  }
 catch (  IOException e) {
    FileLogger.fine(""String_Node_Str"" + path,e);
    return null;
  }
  return null;
}","/** 
 * Finds the resource with the given path and returns a URL pointing to its location, or <code>null</code> if the resource couldn't be located. The given <code>ClassLoader</code> is used for locating the resource. <p>The given resource path must be forward slash (<code>/</code>) separated. It may or may not start with a leading forward slash character, this doesn't affect the way it is interpreted.</p> <p>The <code>rootPackageFile</code> argument can be used to limit the scope of the search to a specific location (JAR file or directory) in the classpath: resources located outside of this location will not be matched. This avoids potential ambiguities that can arise if the specified resource path exists in several locations. If this parameter is <code>null</code>, the resource is looked up in the whole class path. In that case and if several resources with the specified path exist, the choice of the resource to return is arbitrary.</p>
 * @param path forward slash-separated path to the resource to look for, relative to the parent classpathlocation (directory or JAR file) that contains it.
 * @param classLoader the ClassLoader used for locating the resource. May not be <code>null</code>.
 * @param rootPackageFile root package location (JAR file or directory) that limits the scope of the search,<code>null</code> to look for the resource in the whole class path.
 * @return a URL pointing to the resource, or <code>null</code> if the resource couldn't be located
 */
public static URL getResourceAsURL(String path,ClassLoader classLoader,AbstractFile rootPackageFile){
  path=removeLeadingSlash(path);
  if (rootPackageFile == null)   return classLoader.getResource(path);
  String separator=rootPackageFile.getSeparator();
  String nativePath;
  if (separator.equals(""String_Node_Str""))   nativePath=path;
 else   nativePath=StringUtils.replaceCompat(path,""String_Node_Str"",separator);
  try {
    Enumeration resourceEnum=classLoader.getResources(path);
    String rootPackagePath=rootPackageFile.getAbsolutePath();
    String resourcePath=rootPackageFile.getAbsolutePath(true) + nativePath;
    URL resourceURL;
    while (resourceEnum.hasMoreElements()) {
      resourceURL=(URL)resourceEnum.nextElement();
      if (""String_Node_Str"".equals(resourceURL.getProtocol())) {
        if (getJarFilePath(resourceURL).equals(rootPackagePath))         return resourceURL;
      }
 else {
        if (normalizeUrlPath(getDecodedURLPath(resourceURL)).equals(resourcePath))         return resourceURL;
      }
    }
  }
 catch (  IOException e) {
    FileLogger.fine(""String_Node_Str"" + path,e);
    return null;
  }
  return null;
}",0.9811894356830704
44879,"public void requestFocus(){
  textEditorImpl.getTextArea().requestFocus();
}","public void requestFocus(){
  textEditorImpl.requestFocus();
}",0.8985507246376812
44880,"protected void saveAs(AbstractFile destFile) throws IOException {
  OutputStream out=destFile.getOutputStream(false);
  out.write(textEditorImpl.getTextArea().getText().getBytes(textEditorImpl.getFileEncoding()));
  out.close();
  setSaveNeeded(false);
}","protected void saveAs(AbstractFile destFile) throws IOException {
  OutputStream out;
  out=null;
  try {
    out=destFile.getOutputStream(false);
    textEditorImpl.write(out);
    setSaveNeeded(false);
  }
  finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.4353741496598639
44881,"void loadDocument(InputStream in,String encoding) throws IOException {
  this.encoding=encoding;
  if (encoding.toLowerCase().startsWith(""String_Node_Str""))   in=new BOMInputStream(in);
  InputStreamReader isr=new InputStreamReader(in,encoding);
  try {
    textArea.read(isr,null);
    isr.close();
    if (documentListener != null)     textArea.getDocument().addDocumentListener(documentListener);
    textArea.setCaretPosition(0);
  }
  finally {
    isr.close();
  }
}","void loadDocument(InputStream in,String encoding) throws IOException {
  this.encoding=encoding;
  if (encoding.toLowerCase().startsWith(""String_Node_Str""))   in=new BOMInputStream(in);
  Reader isr=new BufferedReader(new InputStreamReader(in,encoding));
  textArea.read(isr,null);
  if (documentListener != null)   textArea.getDocument().addDocumentListener(documentListener);
  textArea.setCaretPosition(0);
}",0.8471121177802945
44882,"void startEditing(AbstractFile file,DocumentListener documentListener) throws IOException {
  this.file=file;
  this.documentListener=documentListener;
  InputStream in=null;
  if (file.hasRandomAccessInputStream()) {
    try {
      in=file.getRandomAccessInputStream();
    }
 catch (    IOException e) {
    }
  }
  if (in == null)   in=file.getInputStream();
  String encoding=EncodingDetector.detectEncoding(in);
  if (encoding == null || !Charset.isSupported(encoding))   encoding=""String_Node_Str"";
  if (in instanceof RandomAccessInputStream) {
    ((RandomAccessInputStream)in).seek(0);
  }
 else {
    in.close();
    in=file.getInputStream();
  }
  loadDocument(in,encoding);
  ThemeManager.addCurrentThemeListener(this);
}","void startEditing(AbstractFile file,DocumentListener documentListener) throws IOException {
  this.file=file;
  this.documentListener=documentListener;
  InputStream in=null;
  try {
    if (file.hasRandomAccessInputStream()) {
      try {
        in=file.getRandomAccessInputStream();
      }
 catch (      IOException e) {
      }
    }
    if (in == null)     in=file.getInputStream();
    String encoding=EncodingDetector.detectEncoding(in);
    if (encoding == null || !Charset.isSupported(encoding))     encoding=""String_Node_Str"";
    if (in instanceof RandomAccessInputStream) {
      ((RandomAccessInputStream)in).seek(0);
    }
 else {
      in.close();
      in=file.getInputStream();
    }
    loadDocument(in,encoding);
  }
  finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
      }
    }
  }
  ThemeManager.addCurrentThemeListener(this);
}",0.8324192565508836
44883,"/** 
 * This method updates ActionKeymap with the modified shortcuts.
 */
public void updateActions(){
  Iterator iterator=state.getDirtyRowsIterator();
  while (iterator.hasNext()) {
    Integer row=(Integer)iterator.next();
    ActionKeymap.changeActionAccelerators(data.getActionId(row),data.getAccelerator(row),data.getAltAccelerator(row));
  }
  state.resetDirtyRows();
}","/** 
 * This method updates ActionKeymap with the modified shortcuts.
 */
public void updateActions(){
  Iterator iterator=state.getDirtyRowsIterator();
  while (iterator.hasNext()) {
    int row=((Integer)iterator.next()).intValue();
    ActionKeymap.changeActionAccelerators(data.getActionId(row),data.getAccelerator(row),data.getAltAccelerator(row));
  }
  state.resetDirtyRows();
}",0.9540078843626808
44884,"public int read(byte b[],int off,int len) throws IOException {
  if (leadingBytes == null)   return in.read(b,off,len);
  int nbBytes=Math.min(leadingBytes.length - leadingBytesOff,len);
  System.arraycopy(leadingBytes,leadingBytesOff,b,off,nbBytes);
  leadingBytesOff+=nbBytes;
  if (leadingBytesOff >= leadingBytes.length)   leadingBytes=null;
  return nbBytes;
}","public int read(byte b[],int off,int len) throws IOException {
  if (leadingBytes == null || leadingBytesOff >= leadingBytes.length)   return in.read(b,off,len);
  int nbBytes=Math.min(leadingBytes.length - leadingBytesOff,len);
  System.arraycopy(leadingBytes,leadingBytesOff,b,off,nbBytes);
  leadingBytesOff+=nbBytes;
  return nbBytes;
}",0.8368794326241135
44885,"/** 
 * Initialises this desktop. <p> This method is empty. See   {@link DesktopAdapter#init(boolean)} for information onhow to override it. </p>
 * @param install                        <code>true</code> if this is the application's first boot, <code>false</code> otherwise.
 * @throws DesktopInitialisationException if any error occurs.
 */
public void init(boolean install) throws DesktopInitialisationException {
  try {
    Integer value=((Integer)Toolkit.getDefaultToolkit().getDesktopProperty(""String_Node_Str""));
    if (value == null)     multiClickInterval=DEFAULT_MULTICLICK_INTERVAL;
 else     multiClickInterval=value.intValue();
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e);
    multiClickInterval=DEFAULT_MULTICLICK_INTERVAL;
  }
}","/** 
 * Initialises this desktop. <p> This method is empty. See   {@link DesktopAdapter#init(boolean)} for information onhow to override it. </p>
 * @param install                        <code>true</code> if this is the application's first boot, <code>false</code> otherwise.
 * @throws DesktopInitialisationException if any error occurs.
 */
public void init(boolean install) throws DesktopInitialisationException {
}",0.6937759336099585
44886,"private static Iterator predefinedThemeNames(){
  return getThemeNames(ResourceLoader.getResourceAsFile(RuntimeConstants.THEMES_PATH));
}","private static Iterator predefinedThemeNames(){
  try {
    return getThemeNames(ResourceLoader.getRootPackageAsFile(ThemeManager.class).getChild(PathUtils.removeLeadingSeparator(RuntimeConstants.THEMES_PATH,""String_Node_Str"")));
  }
 catch (  IOException e) {
    return Collections.emptyList().iterator();
  }
}",0.5822222222222222
44887,"/** 
 * Updates the divider component's location to keep the current proportional divider location. 
 */
public void updateDividerLocation(){
  if (!window.isVisible())   return;
  lastDividerLocation=-1;
  setDividerLocation((int)(splitRatio * (getOrientation() == HORIZONTAL_SPLIT ? getWidth() : getHeight())));
}","/** 
 * Updates the divider component's location to keep the current proportional divider location. 
 */
public void updateDividerLocation(){
  if (!window.isVisible())   return;
  lastDividerLocation=-1;
  setDividerLocation(splitRatio);
}",0.8648648648648649
44888,"/** 
 * Sets the divider location when the ContentPane has been resized so that it stays at the same proportional (not absolute) location.
 */
public void componentResized(ComponentEvent e){
  Object source=e.getSource();
  if (source == window) {
    updateDividerLocation();
  }
}","/** 
 * Sets the divider location when the ContentPane has been resized so that it stays at the same proportional (not absolute) location.
 */
public void componentResized(ComponentEvent e){
  Object source=e.getSource();
  if (source == window) {
    windowWidth=window.getWidth();
    updateDividerLocation();
  }
}",0.9415692821368948
44889,"public void componentMoved(ComponentEvent e){
  if (e.getSource() == getDividerComponent()) {
    if (lastDividerLocation == -1) {
      lastDividerLocation=getDividerLocation();
      return;
    }
 else     if (lastDividerLocation == getDividerLocation())     return;
    lastDividerLocation=getDividerLocation();
    splitRatio=lastDividerLocation / (float)(getOrientation() == HORIZONTAL_SPLIT ? getWidth() : getHeight());
  }
}","public void componentMoved(ComponentEvent e){
  if (e.getSource() == getDividerComponent()) {
    if (lastDividerLocation == -1) {
      lastDividerLocation=getDividerLocation();
      return;
    }
 else     if (lastDividerLocation == getDividerLocation())     return;
    if (windowWidth != window.getWidth()) {
      windowWidth=window.getWidth();
      return;
    }
    lastDividerLocation=getDividerLocation();
    splitRatio=lastDividerLocation / (float)(getOrientation() == HORIZONTAL_SPLIT ? getWidth() : getHeight());
  }
}",0.8953367875647669
44890,"public Object clone() throws CloneNotSupportedException {
  return super.clone();
}","public Object clone() throws CloneNotSupportedException {
  PreviewLabel label;
  label=(PreviewLabel)super.clone();
  label.addPropertyChangeListener(label);
  return label;
}",0.61003861003861
44891,"private void addMapping(Class actionClass,KeyStroke[] keyStrokes) throws IOException {
  XmlAttributes attributes=new XmlAttributes();
  attributes.add(CLASS_ATTRIBUTE,actionClass.getCanonicalName());
  if (Debug.ON)   Debug.trace(""String_Node_Str"" + actionClass.getSimpleName() + ""String_Node_Str""+ keyStrokes[0]+ ""String_Node_Str""+ keyStrokes[1]);
  if (keyStrokes[0] != null)   attributes.add(PRIMARY_KEYSTROKE_ATTRIBUTE,keyStrokes[0].toString());
  if (keyStrokes[1] != null)   attributes.add(ALTERNATE_KEYSTROKE_ATTRIBUTE,keyStrokes[1].toString());
  writer.writeStandAloneElement(ACTION_ELEMENT,attributes);
}","private void addMapping(Class actionClass,KeyStroke[] keyStrokes) throws IOException {
  XmlAttributes attributes=new XmlAttributes();
  attributes.add(CLASS_ATTRIBUTE,actionClass.getCanonicalName());
  if (Debug.ON)   Debug.trace(""String_Node_Str"" + actionClass.getSimpleName() + ""String_Node_Str""+ keyStrokes[0]+ ""String_Node_Str""+ keyStrokes[1]);
  if (keyStrokes[0] != null)   attributes.add(PRIMARY_KEYSTROKE_ATTRIBUTE,KeyStrokeUtils.getKeyStrokeRepresentation(keyStrokes[0]));
  if (keyStrokes[1] != null)   attributes.add(ALTERNATE_KEYSTROKE_ATTRIBUTE,KeyStrokeUtils.getKeyStrokeRepresentation(keyStrokes[1]));
  writer.writeStandAloneElement(ACTION_ELEMENT,attributes);
}",0.919629057187017
44892,"/** 
 * Returns a String representation for the given KeyStroke for display, in the following format:<br> <code>modifier+modifier+...+key</code> <p>For example, <code>KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_MASK|InputEvent.ALT_MASK)</code> will return <code>Ctrl+Alt+C</code>.</p>
 * @param ks the KeyStroke for which to return a String representation
 * @return a String representation of the given KeyStroke for display, in the <code>[modifier]+[modifier]+...+key</code> format
 */
public static String getKeyStrokeRepresentation(KeyStroke ks){
  String toString=ks.toString();
  return toString.replaceAll(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Returns a String representation for the given KeyStroke for display, in the following format:<br> <code>modifier+modifier+...+key</code> <p>For example, <code>KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_MASK|InputEvent.ALT_MASK)</code> will return <code>Ctrl+Alt+C</code>.</p>
 * @param ks the KeyStroke for which to return a String representation
 * @return a String representation of the given KeyStroke for display, in the <code>[modifier]+[modifier]+...+key</code> format
 */
public static String getKeyStrokeRepresentation(KeyStroke ks){
  return ks.toString().replaceFirst(""String_Node_Str"",""String_Node_Str"");
}",0.9491525423728814
44893,"public void mouseClicked(MouseEvent e){
  if (DesktopManager.isRightMouseButton(e)) {
    JPopupMenu popupMenu=new JPopupMenu();
    popupMenu.add(ActionManager.getActionInstance(com.mucommander.ui.action.ToggleCommandBarAction.class,mainFrame));
    popupMenu.add(ActionManager.getActionInstance(com.mucommander.ui.action.CustomizeCommandBarAction.class,mainFrame));
    popupMenu.show(this,e.getX(),e.getY());
    popupMenu.setVisible(true);
  }
}","public void mouseClicked(MouseEvent e){
  if (DesktopManager.isRightMouseButton(e)) {
    JPopupMenu popupMenu=new JPopupMenu();
    popupMenu.add(ActionManager.getActionInstance(com.mucommander.ui.action.ToggleCommandBarAction.class,mainFrame));
    popupMenu.add(ActionManager.getActionInstance(com.mucommander.ui.action.CustomizeCommandBarAction.class,mainFrame));
    Point clickLocation=SwingUtilities.convertPoint(e.getComponent(),e.getPoint(),this);
    popupMenu.show(this,clickLocation.x,clickLocation.y);
    popupMenu.setVisible(true);
  }
}",0.8431568431568431
44894,"/** 
 * Main method used to startup muCommander.
 * @param args command line arguments.
 */
public static void main(String args[]){
  int i;
  fatalWarnings=false;
  verbose=true;
  for (i=0; i < args.length; i++) {
    if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     printVersion();
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     printUsage();
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.command.CommandManager.setAssociationFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.command.CommandManager.setCommandFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.bookmark.BookmarkManager.setBookmarksFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        MuConfiguration.setConfigurationFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        ShellHistoryManager.setHistoryFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.ui.action.ActionKeymapIO.setActionsFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        ToolBarIO.setDescriptionFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        CommandBarIO.setDescriptionFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.auth.CredentialsManager.setCredentialsFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (Debug.ON && (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")))     Debug.setEnabled(false);
 else     if (Debug.ON && (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")))     Debug.setEnabled(true);
 else     if ((args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        PlatformManager.setPreferencesFolder(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if ((args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        ExtensionManager.setExtensionsFolder(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     fatalWarnings=false;
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     fatalWarnings=true;
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     verbose=false;
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     verbose=true;
 else     break;
  }
  boolean isFirstBoot;
  try {
    isFirstBoot=!MuConfiguration.getConfigurationFile().exists();
  }
 catch (  IOException e) {
    isFirstBoot=true;
  }
  if (OsFamilies.MAC_OS_X.isCurrent()) {
    try {
      MuConfiguration.read();
    }
 catch (    Exception e) {
      printFileError(""String_Node_Str"",e,fatalWarnings);
    }
    try {
      Class osxIntegrationClass=Class.forName(""String_Node_Str"");
      Constructor constructor=osxIntegrationClass.getConstructor(new Class[]{});
      constructor.newInstance(new Object[]{});
    }
 catch (    Exception e) {
      if (Debug.ON)       Debug.trace(""String_Node_Str"");
    }
  }
  try {
    ExtensionManager.addExtensionsToClasspath();
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"");
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (!OsFamilies.MAC_OS_X.isCurrent()) {
    try {
      MuConfiguration.read();
    }
 catch (    Exception e) {
      printFileError(""String_Node_Str"",e,fatalWarnings);
    }
  }
  useSplash=MuConfiguration.getVariable(MuConfiguration.SHOW_SPLASH_SCREEN,MuConfiguration.DEFAULT_SHOW_SPLASH_SCREEN);
  if (useSplash) {
    splashScreen=new SplashScreen(RuntimeConstants.VERSION,""String_Node_Str"");
  }
  boolean showSetup;
  showSetup=MuConfiguration.getVariable(MuConfiguration.THEME_TYPE) == null;
  Runtime.getRuntime().addShutdownHook(new ShutdownHook());
  configureFilesystems();
  try {
    com.mucommander.desktop.DesktopManager.init(isFirstBoot);
  }
 catch (  Exception e) {
    printError(""String_Node_Str"",e,true);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.text.Translator.loadDictionaryFile();
  }
 catch (  Exception e) {
    printError(""String_Node_Str"",e,true);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.command.CommandManager.loadCommands();
    migrateCommand(""String_Node_Str"",""String_Node_Str"",CommandManager.VIEWER_ALIAS);
    migrateCommand(""String_Node_Str"",""String_Node_Str"",CommandManager.EDITOR_ALIAS);
    try {
      CommandManager.writeCommands();
    }
 catch (    CommandException e) {
    }
  }
 catch (  Exception e) {
    if (Debug.ON)     printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  try {
    com.mucommander.command.CommandManager.loadAssociations();
  }
 catch (  Exception e) {
    if (Debug.ON)     printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.bookmark.BookmarkManager.loadBookmarks();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.auth.CredentialsManager.loadCredentials();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    ShellHistoryManager.loadHistory();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  com.mucommander.text.CustomDateFormat.init();
  printStartupMessage(""String_Node_Str"");
  SwingFileIconProvider.forceInit();
  com.mucommander.ui.icon.FileIcons.setScaleFactor(Math.max(1.0f,MuConfiguration.getVariable(MuConfiguration.TABLE_ICON_SCALE,MuConfiguration.DEFAULT_TABLE_ICON_SCALE)));
  com.mucommander.ui.icon.FileIcons.setSystemIconsPolicy(MuConfiguration.getVariable(MuConfiguration.USE_SYSTEM_FILE_ICONS,MuConfiguration.DEFAULT_USE_SYSTEM_FILE_ICONS));
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.ui.action.ActionKeymapIO.loadActionKeymap();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    ToolBarIO.loadDescriptionFile();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    CommandBarIO.loadCommandBar();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  com.mucommander.ui.theme.ThemeManager.loadCurrentTheme();
  printStartupMessage(""String_Node_Str"");
  com.mucommander.bonjour.BonjourDirectory.setActive(MuConfiguration.getVariable(MuConfiguration.ENABLE_BONJOUR_DISCOVERY,MuConfiguration.DEFAULT_ENABLE_BONJOUR_DISCOVERY));
  printStartupMessage(""String_Node_Str"");
  for (; i < args.length; i+=2) {
    if (i < args.length - 1)     WindowManager.createNewMainFrame(args[i],args[i + 1]);
 else     WindowManager.createNewMainFrame(args[i],null);
  }
  if (WindowManager.getCurrentMainFrame() == null)   WindowManager.createNewMainFrame();
  if (MuConfiguration.getVariable(MuConfiguration.ENABLE_SYSTEM_NOTIFICATIONS,MuConfiguration.DEFAULT_ENABLE_SYSTEM_NOTIFICATIONS)) {
    printStartupMessage(""String_Node_Str"");
    if (com.mucommander.ui.notifier.AbstractNotifier.isAvailable())     com.mucommander.ui.notifier.AbstractNotifier.getNotifier().setEnabled(true);
  }
  if (useSplash)   splashScreen.dispose();
  if (MuConfiguration.getVariable(MuConfiguration.CHECK_FOR_UPDATE,MuConfiguration.DEFAULT_CHECK_FOR_UPDATE))   new CheckVersionDialog(WindowManager.getCurrentMainFrame(),false);
  if (showSetup)   new InitialSetupDialog(WindowManager.getCurrentMainFrame()).showDialog();
}","/** 
 * Main method used to startup muCommander.
 * @param args command line arguments.
 */
public static void main(String args[]){
  int i;
  fatalWarnings=false;
  verbose=true;
  for (i=0; i < args.length; i++) {
    if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     printVersion();
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     printUsage();
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.command.CommandManager.setAssociationFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.command.CommandManager.setCommandFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.bookmark.BookmarkManager.setBookmarksFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        MuConfiguration.setConfigurationFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        ShellHistoryManager.setHistoryFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.ui.action.ActionKeymapIO.setActionsFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        ToolBarIO.setDescriptionFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        CommandBarIO.setDescriptionFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.auth.CredentialsManager.setCredentialsFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (Debug.ON && (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")))     Debug.setEnabled(false);
 else     if (Debug.ON && (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")))     Debug.setEnabled(true);
 else     if ((args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        PlatformManager.setPreferencesFolder(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if ((args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        ExtensionManager.setExtensionsFolder(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     fatalWarnings=false;
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     fatalWarnings=true;
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     verbose=false;
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     verbose=true;
 else     break;
  }
  boolean isFirstBoot;
  try {
    isFirstBoot=!MuConfiguration.getConfigurationFile().exists();
  }
 catch (  IOException e) {
    isFirstBoot=true;
  }
  if (OsFamilies.MAC_OS_X.isCurrent()) {
    try {
      MuConfiguration.read();
    }
 catch (    Exception e) {
      printFileError(""String_Node_Str"",e,fatalWarnings);
    }
    try {
      Class osxIntegrationClass=Class.forName(""String_Node_Str"");
      Constructor constructor=osxIntegrationClass.getConstructor(new Class[]{});
      constructor.newInstance(new Object[]{});
    }
 catch (    Exception e) {
      if (Debug.ON)       Debug.trace(""String_Node_Str"");
    }
  }
  try {
    ExtensionManager.addExtensionsToClasspath();
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"");
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (!OsFamilies.MAC_OS_X.isCurrent()) {
    try {
      MuConfiguration.read();
    }
 catch (    Exception e) {
      printFileError(""String_Node_Str"",e,fatalWarnings);
    }
  }
  useSplash=MuConfiguration.getVariable(MuConfiguration.SHOW_SPLASH_SCREEN,MuConfiguration.DEFAULT_SHOW_SPLASH_SCREEN);
  if (useSplash) {
    splashScreen=new SplashScreen(RuntimeConstants.VERSION,""String_Node_Str"");
  }
  boolean showSetup;
  showSetup=MuConfiguration.getVariable(MuConfiguration.THEME_TYPE) == null;
  Runtime.getRuntime().addShutdownHook(new ShutdownHook());
  configureFilesystems();
  try {
    com.mucommander.desktop.DesktopManager.init(isFirstBoot);
  }
 catch (  Exception e) {
    printError(""String_Node_Str"",e,true);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.text.Translator.loadDictionaryFile();
  }
 catch (  Exception e) {
    printError(""String_Node_Str"",e,true);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.command.CommandManager.loadCommands();
  }
 catch (  Exception e) {
    if (Debug.ON)     printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  migrateCommand(""String_Node_Str"",""String_Node_Str"",CommandManager.VIEWER_ALIAS);
  migrateCommand(""String_Node_Str"",""String_Node_Str"",CommandManager.EDITOR_ALIAS);
  try {
    CommandManager.writeCommands();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  try {
    com.mucommander.command.CommandManager.loadAssociations();
  }
 catch (  Exception e) {
    if (Debug.ON)     printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.bookmark.BookmarkManager.loadBookmarks();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.auth.CredentialsManager.loadCredentials();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    ShellHistoryManager.loadHistory();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  com.mucommander.text.CustomDateFormat.init();
  printStartupMessage(""String_Node_Str"");
  SwingFileIconProvider.forceInit();
  com.mucommander.ui.icon.FileIcons.setScaleFactor(Math.max(1.0f,MuConfiguration.getVariable(MuConfiguration.TABLE_ICON_SCALE,MuConfiguration.DEFAULT_TABLE_ICON_SCALE)));
  com.mucommander.ui.icon.FileIcons.setSystemIconsPolicy(MuConfiguration.getVariable(MuConfiguration.USE_SYSTEM_FILE_ICONS,MuConfiguration.DEFAULT_USE_SYSTEM_FILE_ICONS));
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.ui.action.ActionKeymapIO.loadActionKeymap();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    ToolBarIO.loadDescriptionFile();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    CommandBarIO.loadCommandBar();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  com.mucommander.ui.theme.ThemeManager.loadCurrentTheme();
  printStartupMessage(""String_Node_Str"");
  com.mucommander.bonjour.BonjourDirectory.setActive(MuConfiguration.getVariable(MuConfiguration.ENABLE_BONJOUR_DISCOVERY,MuConfiguration.DEFAULT_ENABLE_BONJOUR_DISCOVERY));
  printStartupMessage(""String_Node_Str"");
  for (; i < args.length; i+=2) {
    if (i < args.length - 1)     WindowManager.createNewMainFrame(args[i],args[i + 1]);
 else     WindowManager.createNewMainFrame(args[i],null);
  }
  if (WindowManager.getCurrentMainFrame() == null)   WindowManager.createNewMainFrame();
  if (MuConfiguration.getVariable(MuConfiguration.ENABLE_SYSTEM_NOTIFICATIONS,MuConfiguration.DEFAULT_ENABLE_SYSTEM_NOTIFICATIONS)) {
    printStartupMessage(""String_Node_Str"");
    if (com.mucommander.ui.notifier.AbstractNotifier.isAvailable())     com.mucommander.ui.notifier.AbstractNotifier.getNotifier().setEnabled(true);
  }
  if (useSplash)   splashScreen.dispose();
  if (MuConfiguration.getVariable(MuConfiguration.CHECK_FOR_UPDATE,MuConfiguration.DEFAULT_CHECK_FOR_UPDATE))   new CheckVersionDialog(WindowManager.getCurrentMainFrame(),false);
  if (showSetup)   new InitialSetupDialog(WindowManager.getCurrentMainFrame()).showDialog();
}",0.9863975006008172
44895,"public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus){
  JPanel panel=new JPanel(new FlowLayout(FlowLayout.CENTER));
  CommandBarButton button=(CommandBarButton)value;
  panel.add(button);
  panel.setToolTipText(button.getToolTipText());
  return panel;
}","public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus){
  JPanel panel=new JPanel(new BorderLayout());
  CommandBarButton button=(CommandBarButton)value;
  panel.add(button,BorderLayout.CENTER);
  panel.setToolTipText(button.getToolTipText());
  return panel;
}",0.7426810477657936
44896,"public void performAction(){
  FileSet selectedFiles;
  selectedFiles=mainFrame.getActiveTable().getSelectedFiles();
  if (selectedFiles.size() == 0)   return;
  if (selectedFiles.getBaseFolder().getURL().getScheme().equals(FileProtocols.FILE) && (selectedFiles.getBaseFolder() instanceof LocalFile)) {
    try {
      ProcessRunner.execute(command.getTokens(selectedFiles),selectedFiles.getBaseFolder());
    }
 catch (    Exception e) {
      ErrorDialog.showErrorDialog(mainFrame);
      if (Debug.ON) {
        Debug.trace(""String_Node_Str"" + command.getCommand());
        Debug.trace(e);
      }
    }
  }
 else {
    ProgressDialog progressDialog=new ProgressDialog(mainFrame,Translator.get(""String_Node_Str""));
    progressDialog.start(new TempOpenWithJob(new ProgressDialog(mainFrame,Translator.get(""String_Node_Str"")),mainFrame,selectedFiles,command));
  }
}","public void performAction(){
  FileSet selectedFiles;
  selectedFiles=mainFrame.getActiveTable().getSelectedFiles();
  if (selectedFiles.size() == 0)   return;
  if (selectedFiles.getBaseFolder().getURL().getScheme().equals(FileProtocols.FILE) && (selectedFiles.getBaseFolder().getTopAncestor() instanceof LocalFile)) {
    try {
      ProcessRunner.execute(command.getTokens(selectedFiles),selectedFiles.getBaseFolder());
    }
 catch (    Exception e) {
      ErrorDialog.showErrorDialog(mainFrame);
      if (Debug.ON) {
        Debug.trace(""String_Node_Str"" + command.getCommand());
        Debug.trace(e);
      }
    }
  }
 else {
    ProgressDialog progressDialog=new ProgressDialog(mainFrame,Translator.get(""String_Node_Str""));
    progressDialog.start(new TempOpenWithJob(new ProgressDialog(mainFrame,Translator.get(""String_Node_Str"")),mainFrame,selectedFiles,command));
  }
}",0.9903023388476896
44897,"/** 
 * Writes the current command bar to the user's command bar file.
 * @throws IOException 
 * @throws IOException
 */
public static void saveCommandBar() throws IOException {
  if (isCommandBarChanged)   new CommandBarWriter();
 else   if (Debug.ON)   Debug.trace(""String_Node_Str"");
}","/** 
 * Writes the current command bar to the user's command bar file.
 * @throws IOException 
 * @throws IOException
 */
public static void saveCommandBar() throws IOException {
  if (commandBarWriter != null)   commandBarWriter.write();
 else   Debug.trace(""String_Node_Str"");
}",0.8927943760984183
44898,"/** 
 * Parses the XML file describing the command bar's buttons and associated actions. If the file doesn't exist yet, it is copied from the default resource file within the JAR. This method must be called before instantiating CommandBar for the first time.
 */
public static void loadCommandBar() throws Exception {
  AbstractFile commandBarFile=getDescriptionFile();
  if (commandBarFile.exists())   new CommandBarReader();
 else   if (com.mucommander.Debug.ON)   com.mucommander.Debug.trace(COMMAND_BAR_RESOURCE_PATH + ""String_Node_Str"");
}","/** 
 * Parses the XML file describing the command bar's buttons and associated actions. If the file doesn't exist yet, it is copied from the default resource file within the JAR. This method must be called before instantiating CommandBar for the first time.
 */
public static void loadCommandBar() throws Exception {
  AbstractFile commandBarFile=getDescriptionFile();
  if (commandBarFile.exists())   new CommandBarReader();
 else   if (com.mucommander.Debug.ON)   com.mucommander.Debug.trace(COMMAND_BAR_RESOURCE_PATH + ""String_Node_Str"");
  commandBarWriter=CommandBarWriter.create();
}",0.9594356261022928
44899,"CommandBarWriter() throws IOException {
  Class[] commandBarActions=CommandBarAttributes.getActions();
  Class[] commandBarAlterativeActions=CommandBarAttributes.getAlternateActions();
  KeyStroke commandBarModifier=CommandBarAttributes.getModifier();
  BackupOutputStream bos=null;
  try {
    bos=new BackupOutputStream(getDescriptionFile());
    new Writer(bos).write(commandBarActions,commandBarAlterativeActions,commandBarModifier);
    isCommandBarChanged=false;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    bos.close();
  }
}","private CommandBarWriter(){
  CommandBarAttributes.addCommandBarAttributesListener(this);
}",0.2304147465437788
44900,"/** 
 * Returns a canonical value of the given path, where '.' and '..' path fragments are factored out, and '~' replaced by the specified value (if not <code>null</code>).
 * @param path the path to canonize
 * @param separator the path separator to use that delimits path fragments.
 * @param tildeReplacement if the specified value is not null, it is used to replace path fragments equal to '~'
 * @return the canonized path
 * @throws MalformedURLException if the path is invalid
 */
protected String canonizePath(String path,String separator,String tildeReplacement) throws MalformedURLException {
  if (!path.equals(""String_Node_Str"")) {
    int pos;
    int pos2=0;
    String dir;
    String dirWS;
    Vector pathV=new Vector();
    while ((pos=pos2) != -1) {
      pos2=path.indexOf(separator,pos);
      if (pos2 == -1) {
        dir=path.substring(pos);
        dirWS=dir;
      }
 else {
        dir=path.substring(pos,++pos2);
        dirWS=dir.substring(0,dir.length() - 1);
      }
      if ((dirWS.equals(""String_Node_Str"") && pathV.size() > 0) || dirWS.equals(""String_Node_Str"")) {
        continue;
      }
 else       if (dirWS.equals(""String_Node_Str"")) {
        if (pathV.size() == 0)         throw new MalformedURLException();
        pathV.removeElementAt(pathV.size() - 1);
        continue;
      }
 else       if (dirWS.equals(""String_Node_Str"") && (tildeReplacement != null)) {
        path=path.substring(0,pos) + tildeReplacement + path.substring(pos + 1);
        pos2=pos;
        continue;
      }
      pathV.add(dir);
    }
    path=""String_Node_Str"";
    int nbDirs=pathV.size();
    for (int i=0; i < nbDirs; i++)     path+=pathV.elementAt(i);
  }
  return path;
}","/** 
 * Returns a canonical value of the given path, where '.' and '..' path fragments are factored out, and '~' replaced by the specified value (if not <code>null</code>).
 * @param path the path to canonize
 * @param separator the path separator to use that delimits path fragments.
 * @param tildeReplacement if the specified value is not null, it is used to replace path fragments equal to '~'
 * @return the canonized path
 * @throws MalformedURLException if the path is invalid
 */
protected String canonizePath(String path,String separator,String tildeReplacement) throws MalformedURLException {
  if (!path.equals(""String_Node_Str"")) {
    int pos;
    int pos2=0;
    int separatorLen=separator.length();
    String dir;
    String dirWS;
    Vector pathV=new Vector();
    while ((pos=pos2) != -1) {
      pos2=path.indexOf(separator,pos);
      if (pos2 == -1) {
        dir=path.substring(pos);
        dirWS=dir;
      }
 else {
        pos2+=separatorLen;
        dir=path.substring(pos,separatorLen);
        dirWS=dir.substring(0,dir.length() - separatorLen);
      }
      if ((dirWS.equals(""String_Node_Str"") && pathV.size() > 0) || dirWS.equals(""String_Node_Str"")) {
        continue;
      }
 else       if (dirWS.equals(""String_Node_Str"")) {
        if (pathV.size() == 0)         throw new MalformedURLException();
        pathV.removeElementAt(pathV.size() - 1);
        continue;
      }
 else       if (tildeReplacement != null && dirWS.equals(""String_Node_Str"")) {
        path=path.substring(0,pos) + tildeReplacement + path.substring(pos + 1);
        pos2=pos;
        continue;
      }
      pathV.add(dir);
    }
    path=""String_Node_Str"";
    int nbDirs=pathV.size();
    for (int i=0; i < nbDirs; i++)     path+=pathV.elementAt(i);
  }
  return path;
}",0.9547018348623854
44901,"/** 
 * Creates and returns an instance of AbstractFile for the given FileURL and uses the specified parent file (if any) as the created file's parent. <p>Specifying the file parent if an instance already exists allows to recycle the AbstractFile instance instead of creating a new one when the parent file is requested.
 * @param fileURL the file URL representing the file to be created
 * @param parent the parent AbstractFile to use as the created file's parent, can be <code>null</code>
 * @return an instance of {@link AbstractFile} for the given {@link FileURL}.
 * @throws java.io.IOException if something went wrong during file creation.
 */
public static AbstractFile getFile(FileURL fileURL,AbstractFile parent) throws IOException {
  String filePath=fileURL.getPath();
  if (OsFamilies.WINDOWS.isCurrent() && FileProtocols.FILE.equals(fileURL.getScheme()))   filePath=PathUtils.removeLeadingSeparator(filePath,""String_Node_Str"");
  PathTokenizer pt=new PathTokenizer(filePath,fileURL.getPathSeparator(),false);
  AbstractFile currentFile=null;
  boolean lastFileResolved=false;
  while (pt.hasMoreFilenames()) {
    if (isArchiveFilename(pt.nextFilename())) {
      String currentPath=PathUtils.removeTrailingSeparator(pt.getCurrentPath());
      if (currentFile == null || !(currentFile instanceof AbstractArchiveFile)) {
        FileURL clonedURL=(FileURL)fileURL.clone();
        clonedURL.setPath(currentPath);
        currentFile=wrapArchive(createRawFile(clonedURL));
        lastFileResolved=true;
      }
 else {
        AbstractFile tempEntryFile=((AbstractArchiveFile)currentFile).getArchiveEntryFile(PathUtils.removeLeadingSeparator(currentPath.substring(currentFile.getURL().getPath().length(),currentPath.length())));
        if (tempEntryFile instanceof AbstractArchiveFile) {
          currentFile=tempEntryFile;
          lastFileResolved=true;
        }
 else {
          lastFileResolved=false;
        }
      }
    }
 else {
      lastFileResolved=false;
    }
  }
  if (!lastFileResolved) {
    String currentPath=pt.getCurrentPath();
    if (currentFile == null || !(currentFile instanceof AbstractArchiveFile)) {
      FileURL clonedURL=(FileURL)fileURL.clone();
      clonedURL.setPath(currentPath);
      currentFile=createRawFile(clonedURL);
    }
 else {
      currentFile=((AbstractArchiveFile)currentFile).getArchiveEntryFile(PathUtils.removeLeadingSeparator(currentPath.substring(currentFile.getURL().getPath().length(),currentPath.length())));
    }
  }
  if (parent != null)   currentFile.setParent(parent);
  return currentFile;
}","/** 
 * Creates and returns an instance of AbstractFile for the given FileURL and uses the specified parent file (if any) as the created file's parent. <p>Specifying the file parent if an instance already exists allows to recycle the AbstractFile instance instead of creating a new one when the parent file is requested.
 * @param fileURL the file URL representing the file to be created
 * @param parent the parent AbstractFile to use as the created file's parent, can be <code>null</code>
 * @return an instance of {@link AbstractFile} for the given {@link FileURL}.
 * @throws java.io.IOException if something went wrong during file creation.
 */
public static AbstractFile getFile(FileURL fileURL,AbstractFile parent) throws IOException {
  String filePath=fileURL.getPath();
  if (OsFamilies.WINDOWS.isCurrent() && FileProtocols.FILE.equals(fileURL.getScheme()))   filePath=PathUtils.removeLeadingSeparator(filePath,""String_Node_Str"");
  String pathSeparator=fileURL.getPathSeparator();
  PathTokenizer pt=new PathTokenizer(filePath,pathSeparator,false);
  AbstractFile currentFile=null;
  boolean lastFileResolved=false;
  while (pt.hasMoreFilenames()) {
    if (isArchiveFilename(pt.nextFilename())) {
      String currentPath=PathUtils.removeTrailingSeparator(pt.getCurrentPath(),pathSeparator);
      if (currentFile == null || !(currentFile instanceof AbstractArchiveFile)) {
        FileURL clonedURL=(FileURL)fileURL.clone();
        clonedURL.setPath(currentPath);
        currentFile=wrapArchive(createRawFile(clonedURL));
        lastFileResolved=true;
      }
 else {
        AbstractFile tempEntryFile=((AbstractArchiveFile)currentFile).getArchiveEntryFile(PathUtils.removeLeadingSeparator(currentPath.substring(currentFile.getURL().getPath().length(),currentPath.length()),pathSeparator));
        if (tempEntryFile instanceof AbstractArchiveFile) {
          currentFile=tempEntryFile;
          lastFileResolved=true;
        }
 else {
          lastFileResolved=false;
        }
      }
    }
 else {
      lastFileResolved=false;
    }
  }
  if (!lastFileResolved) {
    String currentPath=pt.getCurrentPath();
    if (currentFile == null || !(currentFile instanceof AbstractArchiveFile)) {
      FileURL clonedURL=(FileURL)fileURL.clone();
      clonedURL.setPath(currentPath);
      currentFile=createRawFile(clonedURL);
    }
 else {
      currentFile=((AbstractArchiveFile)currentFile).getArchiveEntryFile(PathUtils.removeLeadingSeparator(currentPath.substring(currentFile.getURL().getPath().length(),currentPath.length()),pathSeparator));
    }
  }
  if (parent != null)   currentFile.setParent(parent);
  return currentFile;
}",0.9793420045906656
44902,"public JPopupMenu getPopupMenu(){
  JPopupMenu popupMenu=new JPopupMenu();
  volumes=getDisplayableVolumes();
  int nbVolumes=volumes.length;
  final MainFrame mainFrame=folderPanel.getMainFrame();
  MnemonicHelper mnemonicHelper=new MnemonicHelper();
  JMenuItem item;
  boolean useExtendedDriveNames=fileSystemView != null;
  ArrayList itemsV=new ArrayList();
  for (int i=0; i < nbVolumes; i++) {
    item=popupMenu.add(new CustomOpenLocationAction(mainFrame,new Hashtable(),volumes[i]));
    setMnemonic(item,mnemonicHelper);
    item.setIcon((Icon)iconCache.get(volumes[i]));
    if (useExtendedDriveNames) {
      String previousExtendedName=(String)extendedNameCache.get(volumes[i]);
      if (previousExtendedName != null)       item.setText(previousExtendedName);
    }
    itemsV.add(item);
  }
  new RefreshDriveNamesAndIcons(popupMenu,itemsV).start();
  popupMenu.add(new JSeparator());
  Vector bookmarks=BookmarkManager.getBookmarks();
  int nbBookmarks=bookmarks.size();
  Bookmark b;
  if (nbBookmarks > 0) {
    for (int i=0; i < nbBookmarks; i++) {
      b=(Bookmark)bookmarks.elementAt(i);
      item=popupMenu.add(new CustomOpenLocationAction(mainFrame,new Hashtable(),b));
      setMnemonic(item,mnemonicHelper);
    }
  }
 else {
    popupMenu.add(Translator.get(""String_Node_Str"")).setEnabled(false);
  }
  popupMenu.add(new JSeparator());
  setMnemonic(popupMenu.add(new BonjourMenu(){
    public MuAction getMenuItemAction(    BonjourService bs){
      return new CustomOpenLocationAction(mainFrame,new Hashtable(),bs);
    }
  }
),mnemonicHelper);
  popupMenu.add(new JSeparator());
  setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",SMBPanel.class)),mnemonicHelper);
  setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",FTPPanel.class)),mnemonicHelper);
  if (com.mucommander.file.impl.sftp.SFTPProtocolProvider.isAvailable())   setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",SFTPPanel.class)),mnemonicHelper);
  setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",HTTPPanel.class)),mnemonicHelper);
  setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",NFSPanel.class)),mnemonicHelper);
  return popupMenu;
}","public JPopupMenu getPopupMenu(){
  JPopupMenu popupMenu=new JPopupMenu();
  volumes=getDisplayableVolumes();
  int nbVolumes=volumes.length;
  final MainFrame mainFrame=folderPanel.getMainFrame();
  MnemonicHelper mnemonicHelper=new MnemonicHelper();
  JMenuItem item;
  MuAction action;
  String volumeName;
  boolean useExtendedDriveNames=fileSystemView != null;
  ArrayList itemsV=new ArrayList();
  for (int i=0; i < nbVolumes; i++) {
    action=new CustomOpenLocationAction(mainFrame,new Hashtable(),volumes[i]);
    volumeName=volumes[i].getName();
    for (int j=0; j < nbVolumes; j++) {
      if (j != i && volumes[j].getName().equalsIgnoreCase(volumeName)) {
        action.setLabel(volumes[i].getAbsolutePath());
        break;
      }
    }
    item=popupMenu.add(action);
    setMnemonic(item,mnemonicHelper);
    item.setIcon((Icon)iconCache.get(volumes[i]));
    if (useExtendedDriveNames) {
      String previousExtendedName=(String)extendedNameCache.get(volumes[i]);
      if (previousExtendedName != null)       item.setText(previousExtendedName);
    }
    itemsV.add(item);
  }
  new RefreshDriveNamesAndIcons(popupMenu,itemsV).start();
  popupMenu.add(new JSeparator());
  Vector bookmarks=BookmarkManager.getBookmarks();
  int nbBookmarks=bookmarks.size();
  Bookmark b;
  if (nbBookmarks > 0) {
    for (int i=0; i < nbBookmarks; i++) {
      b=(Bookmark)bookmarks.elementAt(i);
      item=popupMenu.add(new CustomOpenLocationAction(mainFrame,new Hashtable(),b));
      setMnemonic(item,mnemonicHelper);
    }
  }
 else {
    popupMenu.add(Translator.get(""String_Node_Str"")).setEnabled(false);
  }
  popupMenu.add(new JSeparator());
  setMnemonic(popupMenu.add(new BonjourMenu(){
    public MuAction getMenuItemAction(    BonjourService bs){
      return new CustomOpenLocationAction(mainFrame,new Hashtable(),bs);
    }
  }
),mnemonicHelper);
  popupMenu.add(new JSeparator());
  setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",SMBPanel.class)),mnemonicHelper);
  setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",FTPPanel.class)),mnemonicHelper);
  if (com.mucommander.file.impl.sftp.SFTPProtocolProvider.isAvailable())   setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",SFTPPanel.class)),mnemonicHelper);
  setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",HTTPPanel.class)),mnemonicHelper);
  setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",NFSPanel.class)),mnemonicHelper);
  return popupMenu;
}",0.9306346194391736
44903,"/** 
 * Returns the list of volumes to be displayed in the popup menu. <p>The raw list of volumes is fetched using   {@link com.mucommander.file.RootFolders#getRootFolders()} and thenfiltered using the regexp defined in the  {@link MuConfiguration#VOLUME_EXCLUDE_REGEXP} configuration variable(if defined).</p>
 * @return the list of volumes to be displayed in the popup menu
 */
public static AbstractFile[] getDisplayableVolumes(){
  AbstractFile[] volumes=RootFolders.getRootFolders();
  if (volumeFilter != null)   return volumeFilter.filter(volumes);
  return volumes;
}","/** 
 * Returns the list of volumes to be displayed in the popup menu. <p>The raw list of volumes is fetched using   {@link LocalFile#getVolumes()} and thenfiltered using the regexp defined in the  {@link MuConfiguration#VOLUME_EXCLUDE_REGEXP} configuration variable(if defined).</p>
 * @return the list of volumes to be displayed in the popup menu
 */
public static AbstractFile[] getDisplayableVolumes(){
  AbstractFile[] volumes=LocalFile.getVolumes();
  if (volumeFilter != null)   return volumeFilter.filter(volumes);
  return volumes;
}",0.9203222918531782
44904,"public JPopupMenu getPopupMenu(){
  JPopupMenu popupMenu=new JPopupMenu();
  volumes=getDisplayableVolumes();
  int nbVolumes=volumes.length;
  final MainFrame mainFrame=folderPanel.getMainFrame();
  MnemonicHelper mnemonicHelper=new MnemonicHelper();
  JMenuItem item;
  MuAction action;
  String volumeName;
  boolean useExtendedDriveNames=fileSystemView != null;
  ArrayList itemsV=new ArrayList();
  for (int i=0; i < nbVolumes; i++) {
    action=new CustomOpenLocationAction(mainFrame,new Hashtable(),volumes[i]);
    volumeName=volumes[i].getName();
    for (int j=0; j < nbVolumes; j++) {
      if (j != i && volumes[j].getName().equalsIgnoreCase(volumeName)) {
        action.setLabel(volumes[i].getAbsolutePath());
        break;
      }
    }
    item=popupMenu.add(action);
    setMnemonic(item,mnemonicHelper);
    item.setIcon((Icon)iconCache.get(volumes[i]));
    if (useExtendedDriveNames) {
      String previousExtendedName=(String)extendedNameCache.get(volumes[i]);
      if (previousExtendedName != null)       item.setText(previousExtendedName);
    }
    itemsV.add(item);
  }
  new RefreshDriveNamesAndIcons(popupMenu,itemsV).start();
  popupMenu.add(new JSeparator());
  Vector bookmarks=BookmarkManager.getBookmarks();
  int nbBookmarks=bookmarks.size();
  Bookmark b;
  if (nbBookmarks > 0) {
    for (int i=0; i < nbBookmarks; i++) {
      b=(Bookmark)bookmarks.elementAt(i);
      item=popupMenu.add(new CustomOpenLocationAction(mainFrame,new Hashtable(),b));
      setMnemonic(item,mnemonicHelper);
    }
  }
 else {
    popupMenu.add(Translator.get(""String_Node_Str"")).setEnabled(false);
  }
  popupMenu.add(new JSeparator());
  setMnemonic(popupMenu.add(new BonjourMenu(){
    public MuAction getMenuItemAction(    BonjourService bs){
      return new CustomOpenLocationAction(mainFrame,new Hashtable(),bs);
    }
  }
),mnemonicHelper);
  popupMenu.add(new JSeparator());
  setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",SMBPanel.class)),mnemonicHelper);
  setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",FTPPanel.class)),mnemonicHelper);
  if (com.mucommander.file.impl.sftp.SFTPProtocolProvider.isAvailable())   setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",SFTPPanel.class)),mnemonicHelper);
  setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",HTTPPanel.class)),mnemonicHelper);
  setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",NFSPanel.class)),mnemonicHelper);
  return popupMenu;
}","public JPopupMenu getPopupMenu(){
  JPopupMenu popupMenu=new JPopupMenu();
  volumes=getDisplayableVolumes();
  int nbVolumes=volumes.length;
  final MainFrame mainFrame=folderPanel.getMainFrame();
  MnemonicHelper mnemonicHelper=new MnemonicHelper();
  JMenuItem item;
  MuAction action;
  String volumeName;
  boolean useExtendedDriveNames=fileSystemView != null;
  ArrayList itemsV=new ArrayList();
  for (int i=0; i < nbVolumes; i++) {
    action=new CustomOpenLocationAction(mainFrame,new Hashtable(),volumes[i]);
    volumeName=volumes[i].getName();
    for (int j=0; j < nbVolumes; j++) {
      if (j != i && volumes[j].getName().equalsIgnoreCase(volumeName)) {
        action.setLabel(volumes[i].getAbsolutePath());
        break;
      }
    }
    item=popupMenu.add(action);
    setMnemonic(item,mnemonicHelper);
    Icon icon=(Icon)iconCache.get(volumes[i]);
    if (icon != null) {
      item.setIcon(icon);
    }
    if (useExtendedDriveNames) {
      String previousExtendedName=(String)extendedNameCache.get(volumes[i]);
      if (previousExtendedName != null)       item.setText(previousExtendedName);
    }
    itemsV.add(item);
  }
  new RefreshDriveNamesAndIcons(popupMenu,itemsV).start();
  popupMenu.add(new JSeparator());
  Vector bookmarks=BookmarkManager.getBookmarks();
  int nbBookmarks=bookmarks.size();
  Bookmark b;
  if (nbBookmarks > 0) {
    for (int i=0; i < nbBookmarks; i++) {
      b=(Bookmark)bookmarks.elementAt(i);
      item=popupMenu.add(new CustomOpenLocationAction(mainFrame,new Hashtable(),b));
      setMnemonic(item,mnemonicHelper);
    }
  }
 else {
    popupMenu.add(Translator.get(""String_Node_Str"")).setEnabled(false);
  }
  popupMenu.add(new JSeparator());
  setMnemonic(popupMenu.add(new BonjourMenu(){
    public MuAction getMenuItemAction(    BonjourService bs){
      return new CustomOpenLocationAction(mainFrame,new Hashtable(),bs);
    }
  }
),mnemonicHelper);
  popupMenu.add(new JSeparator());
  setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",SMBPanel.class)),mnemonicHelper);
  setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",FTPPanel.class)),mnemonicHelper);
  if (com.mucommander.file.impl.sftp.SFTPProtocolProvider.isAvailable())   setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",SFTPPanel.class)),mnemonicHelper);
  setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",HTTPPanel.class)),mnemonicHelper);
  setMnemonic(popupMenu.add(new ServerConnectAction(""String_Node_Str"",NFSPanel.class)),mnemonicHelper);
  return popupMenu;
}",0.9854559748427671
44905,"public void run(){
  popupMenu.pack();
}","public void run(){
  popupMenu.invalidate();
  popupMenu.pack();
}",0.7547169811320755
44906,"/** 
 * Tries to copy the given source file to the specified destination file (see   {@link #copyFile(AbstractFile,AbstractFile,boolean)}displaying a generic error dialog   {@link #showErrorDialog(String,String) #showErrorDialog()} if something went wrong, and giving the user the choice to skip the file, retry or cancel.
 * @return true if the file was properly copied, false if the transfer was interrupted / aborted by the user
 */
protected boolean tryCopyFile(AbstractFile sourceFile,AbstractFile destFile,boolean append,String errorDialogTitle){
  do {
    try {
      copyFile(sourceFile,destFile,append);
      return true;
    }
 catch (    FileTransferException e) {
      if (getState() == INTERRUPTED || wasCurrentFileSkipped())       return false;
      if (com.mucommander.Debug.ON) {
        com.mucommander.Debug.trace(""String_Node_Str"" + e);
        e.printStackTrace();
      }
      int reason=e.getReason();
      int choice;
switch (reason) {
case FileTransferException.OPENING_SOURCE:
        choice=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",sourceFile.getName()));
      break;
case FileTransferException.OPENING_DESTINATION:
    choice=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",sourceFile.getName()));
  break;
case FileTransferException.SOURCE_AND_DESTINATION_IDENTICAL:
choice=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str""));
break;
case FileTransferException.CHECKSUM_MISMATCH:
choice=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str""));
break;
default :
choice=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",sourceFile.getName()),new String[]{SKIP_TEXT,APPEND_TEXT,RETRY_TEXT,CANCEL_TEXT},new int[]{SKIP_ACTION,APPEND_ACTION,RETRY_ACTION,CANCEL_ACTION});
break;
}
if (choice == RETRY_ACTION || choice == APPEND_ACTION) {
currentFileByteCounter.reset();
currentFileSkippedByteCounter.reset();
append=choice == APPEND_ACTION;
continue;
}
return false;
}
}
 while (true);
}","/** 
 * Tries to copy the given source file to the specified destination file (see   {@link #copyFile(AbstractFile,AbstractFile,boolean)}displaying a generic error dialog   {@link #showErrorDialog(String,String) #showErrorDialog()} if something went wrong, and giving the user the choice to skip the file, retry or cancel.
 * @return true if the file was properly copied, false if the transfer was interrupted / aborted by the user
 */
protected boolean tryCopyFile(AbstractFile sourceFile,AbstractFile destFile,boolean append,String errorDialogTitle){
  do {
    try {
      copyFile(sourceFile,destFile,append);
      return true;
    }
 catch (    FileTransferException e) {
      if (getState() == INTERRUPTED || wasCurrentFileSkipped())       return false;
      if (com.mucommander.Debug.ON) {
        com.mucommander.Debug.trace(""String_Node_Str"" + e);
        e.printStackTrace();
      }
      int reason=e.getReason();
      int choice;
switch (reason) {
case FileTransferException.OPENING_SOURCE:
        choice=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",sourceFile.getName()));
      break;
case FileTransferException.OPENING_DESTINATION:
    choice=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",destFile.getName()));
  break;
case FileTransferException.SOURCE_AND_DESTINATION_IDENTICAL:
choice=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str""));
break;
case FileTransferException.CHECKSUM_MISMATCH:
choice=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str""));
break;
default :
choice=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",sourceFile.getName()),new String[]{SKIP_TEXT,APPEND_TEXT,RETRY_TEXT,CANCEL_TEXT},new int[]{SKIP_ACTION,APPEND_ACTION,RETRY_ACTION,CANCEL_ACTION});
break;
}
if (choice == RETRY_ACTION || choice == APPEND_ACTION) {
currentFileByteCounter.reset();
currentFileSkippedByteCounter.reset();
append=choice == APPEND_ACTION;
continue;
}
return false;
}
}
 while (true);
}",0.9975012493753124
44907,"/** 
 * Skips exactly <code>n</code>bytes from the given InputStream. <p>This method calls the <code>skip()</code> method of the given stream until the requested number of bytes have been skipped, or throws an   {@link EOFException} if the end of file has been reached prematurely.</p>
 * @param in the InputStream to skip bytes from
 * @param n the number of bytes to skip
 * @throws java.io.EOFException if the EOF is reached before all bytes have been skipped
 * @throws java.io.IOException if an I/O error occurs
 */
public static void skipFully(InputStream in,long n) throws IOException {
  if (n <= 0)   return;
  do {
    long nbSkipped=in.skip(n);
    if (nbSkipped < 0)     throw new IOException();
    n-=nbSkipped;
  }
 while (n > 0);
}","/** 
 * Skips exactly <code>n</code>bytes from the given InputStream. <p>This method calls the <code>skip()</code> method of the given stream until the requested number of bytes have been skipped, or throws an   {@link EOFException} if the end of file has been reached prematurely.</p>
 * @param in the InputStream to skip bytes from
 * @param n the number of bytes to skip
 * @throws java.io.EOFException if the EOF is reached before all bytes have been skipped
 * @throws java.io.IOException if an I/O error occurs
 */
public static void skipFully(InputStream in,long n) throws IOException {
  if (n <= 0)   return;
  do {
    long nbSkipped=in.skip(n);
    if (nbSkipped < 0)     throw new EOFException();
    n-=nbSkipped;
  }
 while (n > 0);
}",0.9979933110367892
44908,"/** 
 * Performs tasks before shut down, such as writing the configuration file. This method can only be called once, any further call will be ignored (no-op).
 */
private synchronized static void performShutdownTasks(){
  if (shutdownTasksPerformed)   return;
  try {
    MuConfiguration.write();
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e);
  }
  try {
    ShellHistoryManager.writeHistory();
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e);
  }
  try {
    CredentialsManager.writeCredentials(false);
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e);
  }
  try {
    BookmarkManager.writeBookmarks(false);
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e);
  }
  try {
    ThemeManager.saveCurrentTheme();
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e);
  }
  try {
    CommandManager.writeCommands();
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e);
  }
  try {
    CommandManager.writeAssociations();
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e);
  }
  shutdownTasksPerformed=true;
}","/** 
 * Performs tasks before shut down, such as writing the configuration file. This method can only be called once, any further call will be ignored (no-op).
 */
private synchronized static void performShutdownTasks(){
  if (shutdownTasksPerformed)   return;
  TreeIOThreadManager.getInstance().interrupt();
  try {
    MuConfiguration.write();
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e);
  }
  try {
    ShellHistoryManager.writeHistory();
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e);
  }
  try {
    CredentialsManager.writeCredentials(false);
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e);
  }
  try {
    BookmarkManager.writeBookmarks(false);
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e);
  }
  try {
    ThemeManager.saveCurrentTheme();
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e);
  }
  try {
    CommandManager.writeCommands();
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e);
  }
  try {
    CommandManager.writeAssociations();
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e);
  }
  shutdownTasksPerformed=true;
}",0.9809115699259836
44909,"/** 
 * Gets children of current directory. Files are filtered and then sorted. This method is executed in caching thread.
 */
private void lsAsync(){
  if (getCachedIcon() == null) {
    setCachedIcon(FileIcons.getFileIcon(getProxiedFile()));
  }
  AbstractFile[] children=null;
  try {
    children=file.ls(cache.getFilter());
  }
 catch (  Exception e) {
    e.printStackTrace();
    children=new AbstractFile[0];
    cachedIcon=IconManager.getIcon(IconManager.FILE_ICON_SET,CustomFileIconProvider.NOT_ACCESSIBLE_FILE);
  }
  Arrays.sort(children,cache.getSort());
  Icon icons[]=new Icon[children.length];
  for (int i=0; i < children.length; i++) {
    icons[i]=FileIcons.getFileIcon(children[i]);
  }
synchronized (cache) {
    for (int i=0; i < children.length; i++) {
      CachedDirectory cachedChild=cache.getOrAdd(children[i]);
      cachedChild.setCachedIcon(icons[i]);
    }
  }
  final AbstractFile[] children2=children;
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      public void run(){
        setLsCache(children2,file.getDate());
      }
    }
);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
}","/** 
 * Gets children of current directory. Files are filtered and then sorted. This method is executed in caching thread.
 */
private void lsAsync(){
  if (getCachedIcon() == null || getCachedIcon() == NOT_ACCESSIBLE_ICON) {
    setCachedIcon(FileIcons.getFileIcon(getProxiedFile()));
  }
  AbstractFile[] children=null;
  try {
    children=file.ls(cache.getFilter());
  }
 catch (  Exception e) {
    e.printStackTrace();
    children=new AbstractFile[0];
    setCachedIcon(NOT_ACCESSIBLE_ICON);
  }
  Arrays.sort(children,cache.getSort());
  Icon icons[]=new Icon[children.length];
  for (int i=0; i < children.length; i++) {
    icons[i]=FileIcons.getFileIcon(children[i]);
  }
synchronized (cache) {
    for (int i=0; i < children.length; i++) {
      CachedDirectory cachedChild=cache.getOrAdd(children[i]);
      cachedChild.setCachedIcon(icons[i]);
    }
  }
  final AbstractFile[] children2=children;
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      public void run(){
        setLsCache(children2,file.getDate());
      }
    }
);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
}",0.7431648715824358
44910,"/** 
 * Checks if this directory is already cached. If it isn't cached then a new cache thread is started.
 * @return true if directory is cached, false otherwise
 */
public synchronized boolean isCached(){
  if (isReadingChildren()) {
    return false;
  }
  if (lsTimeStamp != file.getDate()) {
    setReadingChildren(true);
    Thread lsThread=new Thread(""String_Node_Str""){
      public void run(){
        lsAsync();
      }
    }
;
    lsThread.start();
    return false;
  }
  return true;
}","/** 
 * Checks if this directory is already cached. If it isn't cached then a new cache thread is started.
 * @return true if directory is cached, false otherwise
 */
public synchronized boolean isCached(){
  if (isReadingChildren()) {
    return false;
  }
  if (lsTimeStamp != file.getDate()) {
    setReadingChildren(true);
    TreeIOThreadManager.getInstance().addTask(new Runnable(){
      public void run(){
        lsAsync();
      }
    }
);
    return false;
  }
  return true;
}",0.9006085192697769
44911,"/** 
 * Reads the central directory of the given archive and populates the internal tables with ZipEntry instances. <p>The ZipEntrys will know all data that can be obtained from the central directory alone, but not the data that requires the local file header or additional data to be read.</p>
 * @throws IOException if an I/O error occurred
 * @throws ZipException if this file is not a valid Zip file
 */
private void parseCentralDirectory() throws IOException, ZipException {
  positionAtCentralDirectory();
  byte[] cfh=new byte[CFH_LEN];
  byte[] signatureBytes=new byte[4];
  rais.readFully(signatureBytes);
  long sig=ZipLong.getValue(signatureBytes);
  final long cfhSig=ZipLong.getValue(CFH_SIG);
  boolean defaultEncodingSet=defaultEncoding != null;
  ByteArrayOutputStream encodingAccumulator=defaultEncodingSet ? null : new ByteArrayOutputStream();
  while (sig == cfhSig) {
    ZipEntryInfo entryInfo=new ZipEntryInfo();
    entryInfo.centralHeaderOffset=rais.getOffset() - 4;
    rais.readFully(cfh);
    ZipEntry ze=new ZipEntry();
    int versionMadeBy=ZipShort.getValue(cfh,0);
    ze.setPlatform((versionMadeBy >> 8) & 0x0F);
    int gp=ZipShort.getValue(cfh,4);
    boolean isUTF8=(gp & 0x800) != 0;
    if (isUTF8) {
      entryInfo.encoding=UTF_8;
      if (Debug.ON)       Debug.trace(""String_Node_Str"");
    }
 else     if (defaultEncodingSet) {
      entryInfo.encoding=defaultEncoding;
      if (Debug.ON)       Debug.trace(""String_Node_Str"" + defaultEncoding);
    }
 else {
    }
    entryInfo.hasDataDescriptor=(gp & 8) != 0;
    int method=ZipShort.getValue(cfh,6);
    if (method != DEFLATED && method != STORED)     throw new ZipException(""String_Node_Str"");
    ze.setMethod(method);
    ze.setDosTime(ZipLong.getValue(cfh,8));
    ze.setCrc(ZipLong.getValue(cfh,12));
    ze.setCompressedSize(ZipLong.getValue(cfh,16));
    ze.setSize(ZipLong.getValue(cfh,20));
    int fileNameLen=ZipShort.getValue(cfh,24);
    int extraLen=ZipShort.getValue(cfh,26);
    int commentLen=ZipShort.getValue(cfh,28);
    ze.setInternalAttributes(ZipShort.getValue(cfh,32));
    ze.setExternalAttributes(ZipLong.getValue(cfh,34));
    byte[] filename=new byte[fileNameLen];
    rais.readFully(filename);
    if (entryInfo.encoding != null) {
      ze.setName(getString(filename,entryInfo.encoding));
    }
 else {
      entryInfo.filename=filename;
      feedEncodingAccumulator(encodingAccumulator,filename);
    }
    entryInfo.headerOffset=ZipLong.getValue(cfh,38);
    byte extra[]=new byte[extraLen];
    rais.readFully(extra);
    ze.setExtra(extra);
    byte[] comment=new byte[commentLen];
    rais.readFully(comment);
    if (entryInfo.encoding != null) {
      ze.setComment(getString(comment,entryInfo.encoding));
    }
 else {
      entryInfo.comment=comment;
      feedEncodingAccumulator(encodingAccumulator,comment);
    }
    entryInfo.centralHeaderLen=46 + fileNameLen + extraLen+ commentLen;
    ze.setEntryInfo(entryInfo);
    entries.add(ze);
    nameMap.put(ze.getName(),ze);
    rais.readFully(signatureBytes);
    sig=ZipLong.getValue(signatureBytes);
  }
  if (encodingAccumulator != null && encodingAccumulator.size() > 0) {
    int nbEntries=entries.size();
    String guessedEncoding=EncodingDetector.detectEncoding(encodingAccumulator.toByteArray());
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + guessedEncoding);
    ZipEntry entry;
    ZipEntryInfo entryInfo;
    for (int i=0; i < nbEntries; i++) {
      entry=(ZipEntry)entries.elementAt(i);
      entryInfo=entry.getEntryInfo();
      if (entryInfo.encoding != null)       continue;
      entryInfo.encoding=guessedEncoding;
      entry.setName(getString(entryInfo.filename,guessedEncoding));
      entryInfo.filename=null;
      entry.setComment(getString(entryInfo.comment,guessedEncoding));
      entryInfo.comment=null;
    }
  }
}","/** 
 * Reads the central directory of the given archive and populates the internal tables with ZipEntry instances. <p>The ZipEntrys will know all data that can be obtained from the central directory alone, but not the data that requires the local file header or additional data to be read.</p>
 * @throws IOException if an I/O error occurred
 * @throws ZipException if this file is not a valid Zip file
 */
private void parseCentralDirectory() throws IOException, ZipException {
  positionAtCentralDirectory();
  byte[] cfh=new byte[CFH_LEN];
  byte[] signatureBytes=new byte[4];
  rais.readFully(signatureBytes);
  long sig=ZipLong.getValue(signatureBytes);
  final long cfhSig=ZipLong.getValue(CFH_SIG);
  boolean defaultEncodingSet=defaultEncoding != null;
  ByteArrayOutputStream encodingAccumulator=defaultEncodingSet ? null : new ByteArrayOutputStream();
  while (sig == cfhSig) {
    ZipEntryInfo entryInfo=new ZipEntryInfo();
    entryInfo.centralHeaderOffset=rais.getOffset() - 4;
    rais.readFully(cfh);
    ZipEntry ze=new ZipEntry();
    int versionMadeBy=ZipShort.getValue(cfh,0);
    ze.setPlatform((versionMadeBy >> 8) & 0x0F);
    int gp=ZipShort.getValue(cfh,4);
    boolean isUTF8=(gp & 0x800) != 0;
    if (isUTF8) {
      entryInfo.encoding=UTF_8;
      if (Debug.ON)       Debug.trace(""String_Node_Str"");
    }
 else     if (defaultEncodingSet) {
      entryInfo.encoding=defaultEncoding;
      if (Debug.ON)       Debug.trace(""String_Node_Str"" + defaultEncoding);
    }
 else {
    }
    entryInfo.hasDataDescriptor=(gp & 8) != 0;
    int method=ZipShort.getValue(cfh,6);
    if (method != DEFLATED && method != STORED)     throw new ZipException(""String_Node_Str"");
    ze.setMethod(method);
    ze.setDosTime(ZipLong.getValue(cfh,8));
    ze.setCrc(ZipLong.getValue(cfh,12));
    ze.setCompressedSize(ZipLong.getValue(cfh,16));
    ze.setSize(ZipLong.getValue(cfh,20));
    int fileNameLen=ZipShort.getValue(cfh,24);
    int extraLen=ZipShort.getValue(cfh,26);
    int commentLen=ZipShort.getValue(cfh,28);
    ze.setInternalAttributes(ZipShort.getValue(cfh,32));
    ze.setExternalAttributes(ZipLong.getValue(cfh,34));
    byte[] filename=new byte[fileNameLen];
    rais.readFully(filename);
    if (entryInfo.encoding != null) {
      setFilename(ze,getString(filename,entryInfo.encoding));
    }
 else {
      entryInfo.filename=filename;
      feedEncodingAccumulator(encodingAccumulator,filename);
    }
    entryInfo.headerOffset=ZipLong.getValue(cfh,38);
    byte extra[]=new byte[extraLen];
    rais.readFully(extra);
    ze.setExtra(extra);
    byte[] comment=new byte[commentLen];
    rais.readFully(comment);
    if (entryInfo.encoding != null) {
      ze.setComment(getString(comment,entryInfo.encoding));
    }
 else {
      entryInfo.comment=comment;
      feedEncodingAccumulator(encodingAccumulator,comment);
    }
    entryInfo.centralHeaderLen=46 + fileNameLen + extraLen+ commentLen;
    ze.setEntryInfo(entryInfo);
    entries.add(ze);
    nameMap.put(ze.getName(),ze);
    rais.readFully(signatureBytes);
    sig=ZipLong.getValue(signatureBytes);
  }
  if (encodingAccumulator != null && encodingAccumulator.size() > 0) {
    int nbEntries=entries.size();
    String guessedEncoding=EncodingDetector.detectEncoding(encodingAccumulator.toByteArray());
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + guessedEncoding);
    ZipEntry entry;
    ZipEntryInfo entryInfo;
    for (int i=0; i < nbEntries; i++) {
      entry=(ZipEntry)entries.elementAt(i);
      entryInfo=entry.getEntryInfo();
      if (entryInfo.encoding != null)       continue;
      entryInfo.encoding=guessedEncoding;
      setFilename(entry,getString(entryInfo.filename,guessedEncoding));
      entryInfo.filename=null;
      entry.setComment(getString(entryInfo.comment,guessedEncoding));
      entryInfo.comment=null;
    }
  }
}",0.9929797191887676
44912,"/** 
 * Creates a panel with directory tree attached to a specified folder panel.
 * @param folderPanel a folder panel to attach tree
 */
public FoldersTreePanel(FolderPanel folderPanel){
  super();
  this.folderPanel=folderPanel;
  setLayout(new BorderLayout());
  AttributeFileFilter dirFilter=new AttributeFileFilter(AttributeFileFilter.DIRECTORY);
  FileComparator sort=new FileComparator(FileComparator.NAME_CRITERION,true,true);
  model=new FilesTreeModel(dirFilter,sort);
  tree=new JTree(model);
  tree.setFont(ThemeCache.tableFont);
  tree.setBackground(ThemeCache.backgroundColors[ThemeCache.INACTIVE][ThemeCache.NORMAL]);
  tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  tree.setExpandsSelectedPaths(true);
  tree.getModel().addTreeModelListener(this);
  JScrollPane sp=new JScrollPane(tree);
  sp.setBorder(null);
  add(sp,BorderLayout.CENTER);
  FoldersTreeRenderer renderer=new FoldersTreeRenderer(tree);
  tree.setCellRenderer(renderer);
  tree.addTreeSelectionListener(this);
  tree.addFocusListener(this);
  final JPopupMenu popup=new JPopupMenu();
  JMenuItem item=new JMenuItem(Translator.get(""String_Node_Str""),KeyEvent.VK_R);
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      model.refresh(tree.getSelectionPath());
    }
  }
);
  popup.add(item);
  tree.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      maybeShowPopup(e);
    }
    public void mouseReleased(    MouseEvent e){
      maybeShowPopup(e);
    }
    private void maybeShowPopup(    MouseEvent e){
      if (e.isPopupTrigger()) {
        popup.show(e.getComponent(),e.getX(),e.getY());
      }
    }
  }
);
  ThemeCache.addThemeListener(this);
}","/** 
 * Creates a panel with directory tree attached to a specified folder panel.
 * @param folderPanel a folder panel to attach tree
 */
public FoldersTreePanel(FolderPanel folderPanel){
  super();
  this.folderPanel=folderPanel;
  setLayout(new BorderLayout());
  chainedFileFilter=new AndFileFilter();
  AttributeFileFilter dirFilter=new AttributeFileFilter(AttributeFileFilter.DIRECTORY);
  chainedFileFilter.addFileFilter(dirFilter);
  filterHelper=new FileFilterHelper(chainedFileFilter);
  FileComparator sort=new FileComparator(FileComparator.NAME_CRITERION,true,true);
  model=new FilesTreeModel(chainedFileFilter,sort);
  tree=new JTree(model);
  tree.setFont(ThemeCache.tableFont);
  tree.setBackground(ThemeCache.backgroundColors[ThemeCache.INACTIVE][ThemeCache.NORMAL]);
  tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  tree.setExpandsSelectedPaths(true);
  tree.getModel().addTreeModelListener(this);
  JScrollPane sp=new JScrollPane(tree);
  sp.setBorder(null);
  add(sp,BorderLayout.CENTER);
  FoldersTreeRenderer renderer=new FoldersTreeRenderer(tree);
  tree.setCellRenderer(renderer);
  tree.addTreeSelectionListener(this);
  tree.addFocusListener(this);
  final JPopupMenu popup=new JPopupMenu();
  JMenuItem item=new JMenuItem(Translator.get(""String_Node_Str""),KeyEvent.VK_R);
  item.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      model.refresh(tree.getSelectionPath());
    }
  }
);
  popup.add(item);
  tree.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      maybeShowPopup(e);
    }
    public void mouseReleased(    MouseEvent e){
      maybeShowPopup(e);
    }
    private void maybeShowPopup(    MouseEvent e){
      if (e.isPopupTrigger()) {
        popup.show(e.getComponent(),e.getX(),e.getY());
      }
    }
  }
);
  ThemeCache.addThemeListener(this);
  MuConfiguration.addConfigurationListener(this);
}",0.944518895738408
44913,"public boolean hasChanged(){
  return !String.valueOf(ICON_SCALE_FACTORS[getSelectedIndex()]).equals(MuConfiguration.getVariable(MuConfiguration.TOOLBAR_ICON_SCALE));
}","public boolean hasChanged(){
  return !String.valueOf(ICON_SCALE_FACTORS[getSelectedIndex()]).equals(MuConfiguration.getVariable(confVar));
}",0.8932038834951457
44914,"/** 
 * Creates a combo box that allows to choose a size for a certain type of icon. The returned combo box is filled with allowed choices, and the current configuration value is selected.
 * @param confVar the name of the configuration variable that contains the icon scale factor
 * @param defaultValue the default value for the icon scale factor if the configuration variable has no value
 * @return a combo box that allows to choose a size for a certain type of icon
 */
private PrefComboBox createIconSizeCombo(String confVar,float defaultValue){
  PrefComboBox iconSizeCombo=new PrefComboBox(){
    public boolean hasChanged(){
      return !String.valueOf(ICON_SCALE_FACTORS[getSelectedIndex()]).equals(MuConfiguration.getVariable(MuConfiguration.TOOLBAR_ICON_SCALE));
    }
  }
;
  for (int i=0; i < ICON_SIZES.length; i++)   iconSizeCombo.addItem(ICON_SIZES[i]);
  float scaleFactor=MuConfiguration.getVariable(confVar,defaultValue);
  int index=0;
  for (int i=0; i < ICON_SCALE_FACTORS.length; i++) {
    if (scaleFactor == ICON_SCALE_FACTORS[i]) {
      index=i;
      break;
    }
  }
  iconSizeCombo.setSelectedIndex(index);
  return iconSizeCombo;
}","/** 
 * Creates a combo box that allows to choose a size for a certain type of icon. The returned combo box is filled with allowed choices, and the current configuration value is selected.
 * @param confVar the name of the configuration variable that contains the icon scale factor
 * @param defaultValue the default value for the icon scale factor if the configuration variable has no value
 * @return a combo box that allows to choose a size for a certain type of icon
 */
private PrefComboBox createIconSizeCombo(final String confVar,float defaultValue){
  PrefComboBox iconSizeCombo=new PrefComboBox(){
    public boolean hasChanged(){
      return !String.valueOf(ICON_SCALE_FACTORS[getSelectedIndex()]).equals(MuConfiguration.getVariable(confVar));
    }
  }
;
  for (int i=0; i < ICON_SIZES.length; i++)   iconSizeCombo.addItem(ICON_SIZES[i]);
  float scaleFactor=MuConfiguration.getVariable(confVar,defaultValue);
  int index=0;
  for (int i=0; i < ICON_SCALE_FACTORS.length; i++) {
    if (scaleFactor == ICON_SCALE_FACTORS[i]) {
      index=i;
      break;
    }
  }
  iconSizeCombo.setSelectedIndex(index);
  return iconSizeCombo;
}",0.9796272214997832
44915,"public void windowDeactivated(WindowEvent e){
  Object source=e.getSource();
  if (!(source instanceof MainFrame))   return;
  ((MainFrame)e.getSource()).setForegroundActive(false);
}","public void windowDeactivated(WindowEvent e){
  Object source=e.getSource();
  MenuSelectionManager.defaultManager().clearSelectedPath();
  if (!(source instanceof MainFrame))   return;
  ((MainFrame)e.getSource()).setForegroundActive(false);
}",0.8571428571428571
44916,"public synchronized int read(byte b[],int off,int len) throws IOException {
  if (len > getRemainingBytes())   throw outOfBoundException;
  int nbRead=in.read(b,off,len);
  if (nbRead > 0)   totalRead+=nbRead;
  return nbRead;
}","public synchronized int read(byte b[],int off,int len) throws IOException {
  int canRead=(int)Math.min(getRemainingBytes(),len);
  if (canRead == 0)   throw outOfBoundException;
  int nbRead=in.read(b,off,canRead);
  if (nbRead > 0)   totalRead+=nbRead;
  return nbRead;
}",0.8622754491017964
44917,"/** 
 * Tests a <code>BoundedInputStream</code> operating in bounded mode.
 * @throws IOException should not happen
 */
public void testBoundedStream() throws IOException {
  BoundedInputStream bin=new BoundedInputStream(new ByteArrayInputStream(TEST_BYTES),4);
  assertEquals(0,bin.getReadCounter());
  assertEquals(4,bin.getRemainingBytes());
  assertEquals(4,bin.getAllowedBytes());
  assertTrue(bin.read() != -1);
  assertEquals(1,bin.getReadCounter());
  assertEquals(3,bin.getRemainingBytes());
  assertEquals(4,bin.getAllowedBytes());
  assertTrue(bin.read(new byte[1]) != -1);
  assertEquals(2,bin.getReadCounter());
  assertEquals(2,bin.getRemainingBytes());
  assertEquals(4,bin.getAllowedBytes());
  assertTrue(bin.read(new byte[1],0,1) != -1);
  assertEquals(3,bin.getReadCounter());
  assertEquals(1,bin.getRemainingBytes());
  assertEquals(4,bin.getAllowedBytes());
  assertTrue(bin.skip(1) != -1);
  assertEquals(4,bin.getReadCounter());
  assertEquals(0,bin.getRemainingBytes());
  assertEquals(4,bin.getAllowedBytes());
  boolean exceptionThrown=false;
  try {
    bin.read();
  }
 catch (  BoundedInputStream.StreamOutOfBoundException e) {
    exceptionThrown=true;
  }
  assertTrue(exceptionThrown);
  exceptionThrown=false;
  try {
    bin.read(new byte[1]);
  }
 catch (  BoundedInputStream.StreamOutOfBoundException e) {
    exceptionThrown=true;
  }
  assertTrue(exceptionThrown);
  exceptionThrown=false;
  try {
    bin.read(new byte[1],0,1);
  }
 catch (  BoundedInputStream.StreamOutOfBoundException e) {
    exceptionThrown=true;
  }
  assertTrue(exceptionThrown);
  exceptionThrown=false;
  try {
    bin.skip(1);
  }
 catch (  BoundedInputStream.StreamOutOfBoundException e) {
    exceptionThrown=true;
  }
  assertTrue(exceptionThrown);
  assertEquals(4,bin.getReadCounter());
  assertEquals(0,bin.getRemainingBytes());
  assertEquals(4,bin.getAllowedBytes());
}","/** 
 * Tests a <code>BoundedInputStream</code> operating in bounded mode.
 * @throws IOException should not happen
 */
public void testBoundedStream() throws IOException {
  BoundedInputStream bin=new BoundedInputStream(new ByteArrayInputStream(TEST_BYTES),4);
  assertEquals(0,bin.getReadCounter());
  assertEquals(4,bin.getRemainingBytes());
  assertEquals(4,bin.getAllowedBytes());
  assertTrue(bin.read() != -1);
  assertEquals(1,bin.getReadCounter());
  assertEquals(3,bin.getRemainingBytes());
  assertEquals(4,bin.getAllowedBytes());
  assertTrue(bin.read(new byte[1]) != -1);
  assertEquals(2,bin.getReadCounter());
  assertEquals(2,bin.getRemainingBytes());
  assertEquals(4,bin.getAllowedBytes());
  assertTrue(bin.read(new byte[1],0,1) != -1);
  assertEquals(3,bin.getReadCounter());
  assertEquals(1,bin.getRemainingBytes());
  assertEquals(4,bin.getAllowedBytes());
  assertTrue(bin.skip(1) != -1);
  assertEquals(4,bin.getReadCounter());
  assertEquals(0,bin.getRemainingBytes());
  assertEquals(4,bin.getAllowedBytes());
  boolean exceptionThrown=false;
  try {
    bin.read();
  }
 catch (  BoundedInputStream.StreamOutOfBoundException e) {
    exceptionThrown=true;
  }
  assertTrue(exceptionThrown);
  exceptionThrown=false;
  try {
    bin.read(new byte[1]);
  }
 catch (  BoundedInputStream.StreamOutOfBoundException e) {
    exceptionThrown=true;
  }
  assertTrue(exceptionThrown);
  exceptionThrown=false;
  try {
    bin.read(new byte[1],0,1);
  }
 catch (  BoundedInputStream.StreamOutOfBoundException e) {
    exceptionThrown=true;
  }
  assertTrue(exceptionThrown);
  exceptionThrown=false;
  try {
    bin.skip(1);
  }
 catch (  BoundedInputStream.StreamOutOfBoundException e) {
    exceptionThrown=true;
  }
  assertTrue(exceptionThrown);
  assertEquals(4,bin.getReadCounter());
  assertEquals(0,bin.getRemainingBytes());
  assertEquals(4,bin.getAllowedBytes());
  bin=new BoundedInputStream(new ByteArrayInputStream(TEST_BYTES),4);
  assertTrue(bin.read(new byte[6]) != -1);
}",0.971018209797384
44918,"public RarFile(AbstractFile file) throws IOException {
  this.file=file;
  RarDebug.trace(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"");
  archive=new Archive(file.getInputStream());
}","public RarFile(AbstractFile file) throws IOException {
  this.file=file;
  RarDebug.trace(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"");
  InputStream fileIn=file.getInputStream();
  try {
    archive=new Archive(fileIn);
  }
  finally {
    fileIn.close();
  }
}",0.7536231884057971
44919,"public InputStream getEntryInputStream(String path) throws IOException {
  final FileHeader header=archive.getFileHeader(path);
  if (header.isSplitAfter())   throw new RarException(RarExceptionType.mvNotImplemented);
  final PipedInputStream in=new PipedInputStream();
  final PipedOutputStream out=new PipedOutputStream(in);
  threadPool.execute(new Runnable(){
    public void run(){
      BufferedOutputStream bufferStream=null;
      try {
        bufferStream=new BufferedOutputStream(out);
        boolean isSolid=header.isSolid();
        archive.extractEntry(isSolid,header,file.getInputStream(),bufferStream,isSolid ? file.getInputStream() : null);
        bufferStream.flush();
      }
 catch (      Exception ex) {
        RarDebug.trace(""String_Node_Str"" + header.getFileNameString() + ""String_Node_Str""+ ex.getMessage());
        close(in);
        if (ex.getCause() != null && !ex.getCause().getLocalizedMessage().equals(""String_Node_Str""))         throw new RuntimeException(ex);
      }
 finally {
        close(bufferStream);
      }
    }
  }
);
  return in;
}","public InputStream getEntryInputStream(String path) throws IOException {
  final FileHeader header=archive.getFileHeader(path);
  if (header.isSplitAfter())   throw new RarException(RarExceptionType.mvNotImplemented);
  final FailSafePipedInputStream in=new FailSafePipedInputStream();
  final PipedOutputStream out=new PipedOutputStream(in);
  threadPool.execute(new Runnable(){
    public void run(){
      BufferedOutputStream bufferStream=null;
      InputStream fileIn1=null;
      InputStream fileIn2=null;
      try {
        bufferStream=new BufferedOutputStream(out);
        boolean isSolid=header.isSolid();
        fileIn1=file.getInputStream();
        fileIn2=isSolid ? file.getInputStream() : null;
        archive.extractEntry(isSolid,header,fileIn1,bufferStream,fileIn2);
        bufferStream.flush();
      }
 catch (      Exception ex) {
        RarDebug.trace(""String_Node_Str"" + header.getFileNameString() + ""String_Node_Str""+ ex.getMessage());
        in.setExternalFailure(ex instanceof IOException ? (IOException)ex : new IOException(ex.getMessage()));
        if (ex.getCause() != null && !ex.getCause().getLocalizedMessage().equals(""String_Node_Str""))         throw new RuntimeException(ex);
      }
 finally {
        close(bufferStream);
        close(fileIn1);
        close(fileIn2);
      }
    }
  }
);
  return in;
}",0.8369028006589786
44920,"public void run(){
  BufferedOutputStream bufferStream=null;
  try {
    bufferStream=new BufferedOutputStream(out);
    boolean isSolid=header.isSolid();
    archive.extractEntry(isSolid,header,file.getInputStream(),bufferStream,isSolid ? file.getInputStream() : null);
    bufferStream.flush();
  }
 catch (  Exception ex) {
    RarDebug.trace(""String_Node_Str"" + header.getFileNameString() + ""String_Node_Str""+ ex.getMessage());
    close(in);
    if (ex.getCause() != null && !ex.getCause().getLocalizedMessage().equals(""String_Node_Str""))     throw new RuntimeException(ex);
  }
 finally {
    close(bufferStream);
  }
}","public void run(){
  BufferedOutputStream bufferStream=null;
  InputStream fileIn1=null;
  InputStream fileIn2=null;
  try {
    bufferStream=new BufferedOutputStream(out);
    boolean isSolid=header.isSolid();
    fileIn1=file.getInputStream();
    fileIn2=isSolid ? file.getInputStream() : null;
    archive.extractEntry(isSolid,header,fileIn1,bufferStream,fileIn2);
    bufferStream.flush();
  }
 catch (  Exception ex) {
    RarDebug.trace(""String_Node_Str"" + header.getFileNameString() + ""String_Node_Str""+ ex.getMessage());
    in.setExternalFailure(ex instanceof IOException ? (IOException)ex : new IOException(ex.getMessage()));
    if (ex.getCause() != null && !ex.getCause().getLocalizedMessage().equals(""String_Node_Str""))     throw new RuntimeException(ex);
  }
 finally {
    close(bufferStream);
    close(fileIn1);
    close(fileIn2);
  }
}",0.7594594594594595
44921,"public void run(){
  setLsCache(children,file.getDate());
}","public void run(){
  setLsCache(children2,file.getDate());
}",0.9915966386554622
44922,"/** 
 * Gets children of current directory. Files are filtered and then sorted. This method is executed in caching thread.
 */
private void lsAsync(){
  try {
    final AbstractFile[] children=file.ls(cache.getFilter());
    Arrays.sort(children,cache.getSort());
    if (getCachedIcon() == null) {
      setCachedIcon(FileIcons.getFileIcon(getProxiedFile()));
    }
    Icon icons[]=new Icon[children.length];
    for (int i=0; i < children.length; i++) {
      icons[i]=FileIcons.getFileIcon(children[i]);
    }
synchronized (cache) {
      for (int i=0; i < children.length; i++) {
        CachedDirectory cachedChild=cache.getOrAdd(children[i]);
        cachedChild.setCachedIcon(icons[i]);
      }
    }
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        public void run(){
          setLsCache(children,file.getDate());
        }
      }
);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * Gets children of current directory. Files are filtered and then sorted. This method is executed in caching thread.
 */
private void lsAsync(){
  if (getCachedIcon() == null) {
    setCachedIcon(FileIcons.getFileIcon(getProxiedFile()));
  }
  AbstractFile[] children=null;
  try {
    children=file.ls(cache.getFilter());
  }
 catch (  Exception e) {
    e.printStackTrace();
    children=new AbstractFile[0];
    cachedIcon=IconManager.getIcon(IconManager.FILE_ICON_SET,CustomFileIconProvider.NOT_ACCESSIBLE_FILE);
  }
  Arrays.sort(children,cache.getSort());
  Icon icons[]=new Icon[children.length];
  for (int i=0; i < children.length; i++) {
    icons[i]=FileIcons.getFileIcon(children[i]);
  }
synchronized (cache) {
    for (int i=0; i < children.length; i++) {
      CachedDirectory cachedChild=cache.getOrAdd(children[i]);
      cachedChild.setCachedIcon(icons[i]);
    }
  }
  final AbstractFile[] children2=children;
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      public void run(){
        setLsCache(children2,file.getDate());
      }
    }
);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
}",0.7522855898998694
44923,"/** 
 * Refreshes folder after a change (e.g. mkdir).
 * @param folder
 */
public void refreshFolder(AbstractFile folder){
  if (!isVisible())   return;
  model.fireTreeStructureChanged(tree,new TreePath(model.getPathToRoot(folder)));
}","/** 
 * Refreshes folder after a change (e.g. mkdir).
 * @param folder a folder to refresh on the tree
 */
public void refreshFolder(AbstractFile folder){
  if (!isVisible())   return;
  model.fireTreeStructureChanged(tree,new TreePath(model.getPathToRoot(folder)));
}",0.9365079365079364
44924,"/** 
 * Updates selection in a tree to the current folder. When necessary updates the current root of a tree.
 */
private void updateSelectedFolder(){
  final AbstractFile currentFolder=folderPanel.getCurrentFolder();
  AbstractFile tempFolder=currentFolder;
  AbstractFile tempParent;
  while (!tempFolder.isDirectory()) {
    tempParent=currentFolder.getParentSilently();
    if (tempParent == null)     break;
    tempFolder=tempParent;
  }
  final AbstractFile selectedFolder=tempFolder;
  TreePath selectionPath=tree.getSelectionPath();
  if (selectionPath != null) {
    if (selectionPath.getLastPathComponent() == currentFolder)     return;
  }
  try {
    final AbstractFile currentRoot=selectedFolder.getRoot();
    if (!currentRoot.equals(model.getRoot())) {
      model.setRoot(currentRoot);
    }
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        try {
          TreePath path=new TreePath(model.getPathToRoot(selectedFolder));
          tree.expandPath(path);
          tree.setSelectionPath(path);
          tree.scrollPathToVisible(path);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * Updates selection in a tree to the current folder. When necessary updates the current root of a tree. Invoked when location on folder pane has changed or  when a tree has been updated (when directories have been loaded).
 */
private void updateSelectedFolder(){
  final AbstractFile currentFolder=folderPanel.getCurrentFolder();
  AbstractFile tempFolder=currentFolder;
  AbstractFile tempParent;
  while (!tempFolder.isDirectory()) {
    tempParent=currentFolder.getParentSilently();
    if (tempParent == null)     break;
    tempFolder=tempParent;
  }
  final AbstractFile selectedFolder=tempFolder;
  TreePath selectionPath=tree.getSelectionPath();
  if (selectionPath != null) {
    if (selectionPath.getLastPathComponent() == currentFolder)     return;
  }
  try {
    final AbstractFile currentRoot=selectedFolder.getRoot();
    if (!currentRoot.equals(model.getRoot())) {
      model.setRoot(currentRoot);
    }
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        try {
          TreePath path=new TreePath(model.getPathToRoot(selectedFolder));
          tree.expandPath(path);
          tree.setSelectionPath(path);
          tree.scrollPathToVisible(path);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9543536632144228
44925,"public InputStream getEntryInputStream(String path) throws IOException {
  final FileHeader header=archive.getFileHeader(path);
  final PipedInputStream in=new PipedInputStream();
  final PipedOutputStream out=new PipedOutputStream(in);
  threadPool.execute(new Runnable(){
    public void run(){
      BufferedOutputStream bufferStream=null;
      try {
        bufferStream=new BufferedOutputStream(out);
        boolean isSolid=header.isSolid();
        archive.extractEntry(isSolid,header,file.getInputStream(),bufferStream,isSolid ? file.getInputStream() : null);
        bufferStream.flush();
      }
 catch (      Exception ex) {
        RarDebug.trace(""String_Node_Str"" + header.getFileNameString() + ""String_Node_Str""+ ex.getMessage());
        close(in);
        if (ex.getCause() != null && !ex.getCause().getLocalizedMessage().equals(""String_Node_Str""))         throw new RuntimeException(ex);
      }
 finally {
        close(bufferStream);
      }
    }
  }
);
  return in;
}","public InputStream getEntryInputStream(String path) throws IOException {
  final FileHeader header=archive.getFileHeader(path);
  if (header.isSplitAfter())   throw new RarException(RarExceptionType.mvNotImplemented);
  final PipedInputStream in=new PipedInputStream();
  final PipedOutputStream out=new PipedOutputStream(in);
  threadPool.execute(new Runnable(){
    public void run(){
      BufferedOutputStream bufferStream=null;
      try {
        bufferStream=new BufferedOutputStream(out);
        boolean isSolid=header.isSolid();
        archive.extractEntry(isSolid,header,file.getInputStream(),bufferStream,isSolid ? file.getInputStream() : null);
        bufferStream.flush();
      }
 catch (      Exception ex) {
        RarDebug.trace(""String_Node_Str"" + header.getFileNameString() + ""String_Node_Str""+ ex.getMessage());
        close(in);
        if (ex.getCause() != null && !ex.getCause().getLocalizedMessage().equals(""String_Node_Str""))         throw new RuntimeException(ex);
      }
 finally {
        close(bufferStream);
      }
    }
  }
);
  return in;
}",0.9564796905222436
44926,"/** 
 * Read the headers of the archive
 * @throws RarException
 */
private void readHeaders(InputStream in) throws IOException, RarException {
  markHead=null;
  newMhd=null;
  headers.clear();
  long position=0;
  long read=0;
  byte[] baseBlockBuffer=new byte[BaseBlock.BaseBlockSize];
  byte[] buff=BufferPool.getByteArray();
  BaseBlock block;
  while ((read=in.read(baseBlockBuffer)) > 0) {
    block=new BaseBlock(baseBlockBuffer);
    block.setPositionInFile(position);
    position+=read;
switch (block.getHeaderType()) {
case UnrarHeadertype.MarkHeaderCode:
      RarDebug.trace(""String_Node_Str"");
    markHead=new MarkHeader(block);
  if (!markHead.isSignature()) {
    throw new RarException(RarExceptionType.badRarArchive);
  }
headers.add(markHead);
break;
case UnrarHeadertype.MainHeaderCode:
RarDebug.trace(""String_Node_Str"");
buff=realloc(buff,block.hasEncryptVersion() ? MainHeader.mainHeaderSizeWithEnc : MainHeader.mainHeaderSize);
position+=in.read(buff);
MainHeader mainhead=new MainHeader(block,buff);
headers.add(mainhead);
this.newMhd=mainhead;
if (newMhd.isEncrypted()) {
throw new RarException(RarExceptionType.rarEncryptedException);
}
break;
case UnrarHeadertype.SignHeaderCode:
RarDebug.trace(""String_Node_Str"");
buff=realloc(buff,SignHeader.signHeaderSize);
position+=in.read(buff);
headers.add(new SignHeader(block,buff));
break;
case UnrarHeadertype.AvHeaderCode:
RarDebug.trace(""String_Node_Str"");
buff=realloc(buff,AVHeader.avHeaderSize);
position+=in.read(buff);
headers.add(new AVHeader(block,buff));
break;
case UnrarHeadertype.CommHeaderCode:
RarDebug.trace(""String_Node_Str"");
buff=realloc(buff,CommentHeader.commentHeaderSize);
position+=in.read(buff);
CommentHeader header=new CommentHeader(block,buff);
headers.add(header);
position+=in.skip(header.getHeaderSize());
break;
case UnrarHeadertype.EndArcHeaderCode:
RarDebug.trace(""String_Node_Str"");
int toRead=0;
toRead+=block.hasArchiveDataCRC() ? EndArcHeader.endArcArchiveDataCrcSize : 0;
toRead+=block.hasVolumeNumber() ? EndArcHeader.endArcVolumeNumberSize : 0;
EndArcHeader endArcHead;
if (toRead > 0) {
buff=realloc(buff,toRead);
position+=in.read(buff);
endArcHead=new EndArcHeader(block,buff);
RarDebug.trace(""String_Node_Str"");
}
 else {
endArcHead=new EndArcHeader(block,null);
RarDebug.trace(""String_Node_Str"");
}
headers.add(endArcHead);
return;
default :
buff=realloc(buff,BlockHeader.blockHeaderSize);
position+=in.read(buff);
BlockHeader blockHead=new BlockHeader(block,buff);
switch (blockHead.getHeaderType()) {
case UnrarHeadertype.NewSubHeaderCode:
case UnrarHeadertype.FileHeaderCode:
RarDebug.trace(""String_Node_Str"");
buff=realloc(buff,blockHead.getHeaderSize() - BlockHeader.blockHeaderSize - BaseBlock.BaseBlockSize);
position+=in.read(buff);
FileHeader fh=new FileHeader(blockHead,buff);
headers.add(fh);
position+=in.skip(fh.getPositionInFile() + fh.getHeaderSize() + fh.getFullPackSize() - position);
break;
case UnrarHeadertype.ProtectHeaderCode:
RarDebug.trace(""String_Node_Str"");
buff=realloc(buff,blockHead.getHeaderSize() - BaseBlock.BaseBlockSize - BlockHeader.blockHeaderSize);
position+=in.read(buff);
ProtectHeader ph=new ProtectHeader(blockHead,buff);
position+=in.skip(ph.getHeaderSize());
break;
case UnrarHeadertype.SubHeaderCode:
{
RarDebug.trace(""String_Node_Str"");
buff=realloc(buff,SubBlockHeader.subBlockHeaderSize);
position+=in.read(buff);
SubBlockHeader sh=new SubBlockHeader(blockHead,buff);
switch (sh.getSubType().getSubblocktype()) {
case SubBlockHeaderType.MAC_HEAD_CODE:
{
buff=realloc(buff,MacInfoHeader.MacInfoHeaderSize);
position+=in.read(buff);
MacInfoHeader macHeader=new MacInfoHeader(sh,buff);
headers.add(macHeader);
break;
}
case SubBlockHeaderType.BEEA_HEAD_CODE:
break;
case SubBlockHeaderType.EA_HEAD_CODE:
{
buff=realloc(buff,EAHeader.EAHeaderSize);
position+=in.read(buff);
EAHeader eaHeader=new EAHeader(sh,buff);
headers.add(eaHeader);
break;
}
case SubBlockHeaderType.NTACL_HEAD_CODE:
break;
case SubBlockHeaderType.STREAM_HEAD_CODE:
break;
case SubBlockHeaderType.UO_HEAD_CODE:
toRead=sh.getHeaderSize();
toRead-=BaseBlock.BaseBlockSize;
toRead-=BlockHeader.blockHeaderSize;
toRead-=SubBlockHeader.subBlockHeaderSize;
buff=realloc(buff,toRead);
position+=in.read(buff);
UnixOwnersHeader uoHeader=new UnixOwnersHeader(sh,buff);
headers.add(uoHeader);
break;
default :
break;
}
break;
}
default :
RarDebug.trace(""String_Node_Str"" + blockHead.getHeaderType());
throw new RarException(RarExceptionType.wrongHeaderType);
}
}
}
BufferPool.releaseByteArray(buff);
if (read == -1) {
RarDebug.trace(""String_Node_Str"");
throw new RarException(RarExceptionType.badRarArchive);
}
}","/** 
 * Read the headers of the archive
 * @throws RarException
 */
private void readHeaders(InputStream in) throws IOException, RarException {
  markHead=null;
  newMhd=null;
  headers.clear();
  long position=0;
  long read=0;
  byte[] baseBlockBuffer=new byte[BaseBlock.BaseBlockSize];
  byte[] buff=BufferPool.getByteArray();
  BaseBlock block;
  while ((read=in.read(baseBlockBuffer)) > 0) {
    block=new BaseBlock(baseBlockBuffer);
    block.setPositionInFile(position);
    position+=read;
switch (block.getHeaderType()) {
case UnrarHeadertype.MarkHeaderCode:
      RarDebug.trace(""String_Node_Str"");
    markHead=new MarkHeader(block);
  if (!markHead.isSignature()) {
    throw new RarException(RarExceptionType.badRarArchive);
  }
headers.add(markHead);
break;
case UnrarHeadertype.MainHeaderCode:
RarDebug.trace(""String_Node_Str"");
buff=realloc(buff,block.hasEncryptVersion() ? MainHeader.mainHeaderSizeWithEnc : MainHeader.mainHeaderSize);
position+=in.read(buff);
MainHeader mainhead=new MainHeader(block,buff);
headers.add(mainhead);
this.newMhd=mainhead;
if (newMhd.isEncrypted()) throw new RarException(RarExceptionType.rarEncryptedException);
break;
case UnrarHeadertype.SignHeaderCode:
RarDebug.trace(""String_Node_Str"");
buff=realloc(buff,SignHeader.signHeaderSize);
position+=in.read(buff);
headers.add(new SignHeader(block,buff));
break;
case UnrarHeadertype.AvHeaderCode:
RarDebug.trace(""String_Node_Str"");
buff=realloc(buff,AVHeader.avHeaderSize);
position+=in.read(buff);
headers.add(new AVHeader(block,buff));
break;
case UnrarHeadertype.CommHeaderCode:
RarDebug.trace(""String_Node_Str"");
buff=realloc(buff,CommentHeader.commentHeaderSize);
position+=in.read(buff);
CommentHeader header=new CommentHeader(block,buff);
headers.add(header);
position+=in.skip(header.getHeaderSize());
break;
case UnrarHeadertype.EndArcHeaderCode:
RarDebug.trace(""String_Node_Str"");
int toRead=0;
toRead+=block.hasArchiveDataCRC() ? EndArcHeader.endArcArchiveDataCrcSize : 0;
toRead+=block.hasVolumeNumber() ? EndArcHeader.endArcVolumeNumberSize : 0;
EndArcHeader endArcHead;
if (toRead > 0) {
buff=realloc(buff,toRead);
position+=in.read(buff);
endArcHead=new EndArcHeader(block,buff);
RarDebug.trace(""String_Node_Str"");
}
 else {
endArcHead=new EndArcHeader(block,null);
RarDebug.trace(""String_Node_Str"");
}
headers.add(endArcHead);
return;
default :
buff=realloc(buff,BlockHeader.blockHeaderSize);
position+=in.read(buff);
BlockHeader blockHead=new BlockHeader(block,buff);
switch (blockHead.getHeaderType()) {
case UnrarHeadertype.NewSubHeaderCode:
case UnrarHeadertype.FileHeaderCode:
RarDebug.trace(""String_Node_Str"");
buff=realloc(buff,blockHead.getHeaderSize() - BlockHeader.blockHeaderSize - BaseBlock.BaseBlockSize);
position+=in.read(buff);
FileHeader fh=new FileHeader(blockHead,buff);
headers.add(fh);
position+=in.skip(fh.getPositionInFile() + fh.getHeaderSize() + fh.getFullPackSize() - position);
break;
case UnrarHeadertype.ProtectHeaderCode:
RarDebug.trace(""String_Node_Str"");
buff=realloc(buff,blockHead.getHeaderSize() - BaseBlock.BaseBlockSize - BlockHeader.blockHeaderSize);
position+=in.read(buff);
ProtectHeader ph=new ProtectHeader(blockHead,buff);
position+=in.skip(ph.getHeaderSize());
break;
case UnrarHeadertype.SubHeaderCode:
{
RarDebug.trace(""String_Node_Str"");
buff=realloc(buff,SubBlockHeader.subBlockHeaderSize);
position+=in.read(buff);
SubBlockHeader sh=new SubBlockHeader(blockHead,buff);
switch (sh.getSubType().getSubblocktype()) {
case SubBlockHeaderType.MAC_HEAD_CODE:
{
buff=realloc(buff,MacInfoHeader.MacInfoHeaderSize);
position+=in.read(buff);
MacInfoHeader macHeader=new MacInfoHeader(sh,buff);
headers.add(macHeader);
break;
}
case SubBlockHeaderType.BEEA_HEAD_CODE:
break;
case SubBlockHeaderType.EA_HEAD_CODE:
{
buff=realloc(buff,EAHeader.EAHeaderSize);
position+=in.read(buff);
EAHeader eaHeader=new EAHeader(sh,buff);
headers.add(eaHeader);
break;
}
case SubBlockHeaderType.NTACL_HEAD_CODE:
break;
case SubBlockHeaderType.STREAM_HEAD_CODE:
break;
case SubBlockHeaderType.UO_HEAD_CODE:
toRead=sh.getHeaderSize();
toRead-=BaseBlock.BaseBlockSize;
toRead-=BlockHeader.blockHeaderSize;
toRead-=SubBlockHeader.subBlockHeaderSize;
buff=realloc(buff,toRead);
position+=in.read(buff);
UnixOwnersHeader uoHeader=new UnixOwnersHeader(sh,buff);
headers.add(uoHeader);
break;
default :
break;
}
break;
}
default :
RarDebug.trace(""String_Node_Str"" + blockHead.getHeaderType());
throw new RarException(RarExceptionType.wrongHeaderType);
}
}
}
BufferPool.releaseByteArray(buff);
if (read == -1) {
RarDebug.trace(""String_Node_Str"");
throw new RarException(RarExceptionType.buttomlessArchive);
}
}",0.9980586712683348
44927,"public static boolean mergeArchive(Archive archive,ComprDataIO dataIO) throws IOException {
  return true;
}","public static boolean mergeArchive(Archive archive,ComprDataIO dataIO) throws IOException {
  throw new RarException(RarExceptionType.mvNotImplemented);
}",0.7938931297709924
44928,"public FileHeader(BlockHeader bh,byte[] fileHeader){
  super(bh);
  int position=0;
  unpSize=Raw.readIntLittleEndian(fileHeader,position);
  position+=4;
  hostOS=HostSystem.findHostSystem(fileHeader[4]);
  position++;
  fileCRC=Raw.readIntLittleEndian(fileHeader,position);
  position+=4;
  fileTime=Raw.readIntLittleEndian(fileHeader,position);
  position+=4;
  unpVersion|=fileHeader[13] & 0xff;
  position++;
  unpMethod|=fileHeader[14] & 0xff;
  position++;
  nameSize=Raw.readShortLittleEndian(fileHeader,position);
  position+=2;
  fileAttr=Raw.readIntLittleEndian(fileHeader,position);
  position+=4;
  if (isLargeBlock()) {
    highPackSize=Raw.readIntLittleEndian(fileHeader,position);
    position+=4;
    highUnpackSize=Raw.readIntLittleEndian(fileHeader,position);
    position+=4;
  }
 else {
    highPackSize=0;
    highUnpackSize=0;
    if (unpSize == 0xffffffff) {
      unpSize=0xffffffff;
      highUnpackSize=Integer.MAX_VALUE;
    }
  }
  fullPackSize|=highPackSize;
  fullPackSize<<=32;
  fullPackSize|=getPackSize();
  fullUnpackSize|=highUnpackSize;
  fullUnpackSize<<=32;
  fullUnpackSize|=unpSize;
  nameSize=nameSize > 4 * 1024 ? 4 * 1024 : nameSize;
  fileName=new byte[nameSize];
  for (int i=0; i < nameSize; i++) {
    fileName[i]=fileHeader[position];
    position++;
  }
  if (isFileHeader()) {
    if (isUnicode()) {
      int length=strlen(fileName);
      if (length == nameSize) {
      }
 else {
        byte[] buff1=new byte[length];
        int j=0;
        for (; j < length; j++)         buff1[j]=fileName[j];
        ++length;
        byte[] buff2=new byte[nameSize - length];
        int k=0;
        for (j=length; j < nameSize; k++, j++)         buff2[k]=fileName[j];
        fileNameW=FileNameDecoder.decode(new String(buff1),buff2);
      }
    }
 else {
      fileNameW=new String(fileName);
    }
  }
  if (UnrarHeadertype.NewSubHeader.equals(headerType)) {
    int datasize=headerSize - NEWLHD_SIZE - nameSize;
    if (hasSalt()) {
      datasize-=SALT_SIZE;
    }
    if (datasize > 0) {
      subData=new byte[datasize];
      for (int i=0; i < datasize; i++) {
        subData[i]=(fileHeader[position]);
        position++;
      }
    }
    if (NewSubHeaderType.SUBHEAD_TYPE_RR.byteEquals(fileName)) {
      recoverySectors=subData[8] + (subData[9] << 8) + (subData[10] << 16)+ (subData[11] << 24);
    }
  }
  if (hasSalt()) {
    for (int i=0; i < SALT_SIZE; i++) {
      salt[i]=fileHeader[position];
      position++;
    }
  }
  mTime=getDateDos(fileTime);
}","public FileHeader(BlockHeader bh,byte[] fileHeader){
  super(bh);
  int position=0;
  unpSize=Raw.readIntLittleEndian(fileHeader,position);
  position+=4;
  hostOS=HostSystem.findHostSystem(fileHeader[4]);
  position++;
  fileCRC=Raw.readIntLittleEndian(fileHeader,position);
  position+=4;
  fileTime=Raw.readIntLittleEndian(fileHeader,position);
  position+=4;
  unpVersion|=fileHeader[13] & 0xff;
  position++;
  unpMethod|=fileHeader[14] & 0xff;
  position++;
  nameSize=Raw.readShortLittleEndian(fileHeader,position);
  position+=2;
  fileAttr=Raw.readIntLittleEndian(fileHeader,position);
  position+=4;
  if (isLargeBlock()) {
    highPackSize=Raw.readIntLittleEndian(fileHeader,position);
    position+=4;
    highUnpackSize=Raw.readIntLittleEndian(fileHeader,position);
    position+=4;
  }
 else {
    highPackSize=0;
    highUnpackSize=0;
    if (unpSize == 0xffffffff) {
      unpSize=0xffffffff;
      highUnpackSize=Integer.MAX_VALUE;
    }
  }
  fullPackSize|=highPackSize;
  fullPackSize<<=32;
  fullPackSize|=getPackSize();
  fullUnpackSize|=highUnpackSize;
  fullUnpackSize<<=32;
  fullUnpackSize|=unpSize;
  nameSize=nameSize > 4 * 1024 ? 4 * 1024 : nameSize;
  fileName=new byte[nameSize];
  for (int i=0; i < nameSize; i++) {
    fileName[i]=fileHeader[position];
    position++;
  }
  if (isFileHeader()) {
    if (isUnicode()) {
      int length=0;
      fileNameW=""String_Node_Str"";
      while (length < fileName.length && fileName[length] != 0) {
        length++;
      }
      byte[] name=new byte[length];
      System.arraycopy(fileName,0,name,0,name.length);
      if (length != nameSize) {
        length++;
        fileNameW=FileNameDecoder.decode(fileName,length);
      }
 else       fileNameW=new String(name);
    }
 else {
      fileNameW=new String(fileName);
    }
  }
  if (UnrarHeadertype.NewSubHeader.equals(headerType)) {
    int datasize=headerSize - NEWLHD_SIZE - nameSize;
    if (hasSalt()) {
      datasize-=SALT_SIZE;
    }
    if (datasize > 0) {
      subData=new byte[datasize];
      for (int i=0; i < datasize; i++) {
        subData[i]=(fileHeader[position]);
        position++;
      }
    }
    if (NewSubHeaderType.SUBHEAD_TYPE_RR.byteEquals(fileName)) {
      recoverySectors=subData[8] + (subData[9] << 8) + (subData[10] << 16)+ (subData[11] << 24);
    }
  }
  if (hasSalt()) {
    for (int i=0; i < SALT_SIZE; i++) {
      salt[i]=fileHeader[position];
      position++;
    }
  }
  mTime=getDateDos(fileTime);
}",0.8756756756756757
44929,"public static String decode(String name,byte[] encName){
  UnsignedByte flags=null;
  int flagsBits=0;
  int flagsPos=0;
  int destSize=0;
  int encPos=0, decPos=0;
  UnsignedByte highByte=new UnsignedByte(encName[encPos++]);
  String nameW=""String_Node_Str"";
  while (encPos < encName.length) {
    if (flagsBits == 0) {
      flags=new UnsignedByte(encName[encPos++]);
      flagsBits=8;
    }
switch (flags.getValue() >> 6) {
case 0:
      nameW+=byteToChar(encName[encPos++]);
    decPos++;
  break;
case 1:
{
  UnsignedByte ubyte=new UnsignedByte(encName[encPos++]);
  ubyte.add((short)(highByte.getValue() << 8));
  nameW+=ubyte.toChar();
  decPos++;
}
break;
case 2:
nameW+=(char)((encName[encPos] + (encName[encPos + 1] << 8)) & 0xff);
decPos++;
encPos+=2;
break;
case 3:
{
int length=encName[encPos++];
if ((length & 0x80) != 0) {
byte correction=encName[encPos++];
for (length=(length & 0x7f) + 2; length > 0; length--, decPos++) nameW+=((name.charAt(decPos) + correction));
}
 else for (length+=2; length > 0; length--, decPos++) nameW+=name.charAt(decPos);
}
break;
}
flags=new UnsignedByte((byte)(flags.getValue() << 2));
flagsBits-=2;
}
return nameW;
}","public static String decode(byte[] name,int encPos){
  int decPos=0;
  int flags=0;
  int flagBits=0;
  int low=0;
  int high=0;
  int highByte=getChar(name,encPos++);
  StringBuffer buf=new StringBuffer();
  while (encPos < name.length) {
    if (flagBits == 0) {
      flags=getChar(name,encPos++);
      flagBits=8;
    }
switch (flags >> 6) {
case 0:
      buf.append((char)(getChar(name,encPos++)));
    ++decPos;
  break;
case 1:
buf.append((char)(getChar(name,encPos++) + (highByte << 8)));
++decPos;
break;
case 2:
low=getChar(name,encPos);
high=getChar(name,encPos + 1);
buf.append((char)((high << 8) + low));
++decPos;
encPos+=2;
break;
case 3:
int length=getChar(name,encPos++);
if ((length & 0x80) != 0) {
int correction=getChar(name,encPos++);
for (length=(length & 0x7f) + 2; length > 0 && decPos < name.length; length--, decPos++) {
low=(getChar(name,decPos) + correction) & 0xff;
buf.append((char)((highByte << 8) + low));
}
}
 else {
for (length+=2; length > 0 && decPos < name.length; length--, decPos++) {
buf.append((char)(getChar(name,decPos)));
}
}
break;
}
flags=(flags << 2) & 0xff;
flagBits-=2;
}
return buf.toString();
}",0.0899653979238754
44930,"/** 
 * Creates a new CommandBar instance associated with the given MainFrame.
 */
public CommandBar(MainFrame mainFrame){
  super(new GridLayout(0,actions.length));
  this.mainFrame=mainFrame;
  mainFrame.getLeftPanel().getFileTable().addKeyListener(this);
  mainFrame.getRightPanel().getFileTable().addKeyListener(this);
  addMouseListener(this);
  MuConfiguration.addConfigurationListener(this);
  int nbButtons=actions.length;
  buttons=new JButton[nbButtons];
  for (int i=0; i < nbButtons; i++) {
    MuAction action=ActionManager.getActionInstance(actions[i],mainFrame);
    JButton button=new NonFocusableButton();
    if (OsFamilies.MAC_OS_X.isCurrent() && OsVersions.MAC_OS_X_10_5.isCurrentOrHigher() && JavaVersions.JAVA_1_5.isCurrentOrHigher()) {
      button.setMargin(new Insets(6,8,6,8));
      button.putClientProperty(""String_Node_Str"",""String_Node_Str"");
      button.putClientProperty(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      button.setMargin(new Insets(3,4,3,4));
    }
    setButtonAction(button,action);
    button.setMinimumSize(new Dimension(40,(int)button.getPreferredSize().getHeight()));
    button.addMouseListener(this);
    add(button);
    buttons[i]=button;
  }
}","/** 
 * Creates a new CommandBar instance associated with the given MainFrame.
 */
public CommandBar(MainFrame mainFrame){
  super(new GridLayout(0,actions.length));
  this.mainFrame=mainFrame;
  mainFrame.getLeftPanel().getFileTable().addKeyListener(this);
  mainFrame.getRightPanel().getFileTable().addKeyListener(this);
  addMouseListener(this);
  MuConfiguration.addConfigurationListener(this);
  int nbButtons=actions.length;
  buttons=new JButton[nbButtons];
  for (int i=0; i < nbButtons; i++) {
    MuAction action=ActionManager.getActionInstance(actions[i],mainFrame);
    JButton button=new NonFocusableButton();
    if (OsFamilies.MAC_OS_X.isCurrent() && OsVersions.MAC_OS_X_10_5.isCurrentOrHigher() && JavaVersions.JAVA_1_5.isCurrentOrHigher()) {
      button.putClientProperty(""String_Node_Str"",""String_Node_Str"");
      button.putClientProperty(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      button.setMargin(new Insets(3,4,3,4));
    }
    setButtonAction(button,action);
    button.setMinimumSize(new Dimension(40,(int)button.getPreferredSize().getHeight()));
    button.addMouseListener(this);
    add(button);
    buttons[i]=button;
  }
}",0.9810844892812106
44931,"/** 
 * Creates a new StatusBar instance.
 */
public StatusBar(MainFrame mainFrame){
  setLayout(new BoxLayout(this,BoxLayout.X_AXIS));
  this.mainFrame=mainFrame;
  selectedFilesLabel=new JLabel(""String_Node_Str"");
  dial=new SpinningDial();
  add(selectedFilesLabel);
  add(Box.createHorizontalGlue());
  if (DesktopManager.getTrash() != null) {
    TrashPopupButton trashButton=new TrashPopupButton(mainFrame);
    trashButton.setMargin(new Insets(2,2,2,2));
    trashButton.setPopupMenuLocation(SwingConstants.TOP);
    add(trashButton);
    add(Box.createRigidArea(new Dimension(2,0)));
  }
  volumeSpaceLabel=new VolumeSpaceLabel();
  add(volumeSpaceLabel);
  setVisible(MuConfiguration.getVariable(MuConfiguration.STATUS_BAR_VISIBLE,MuConfiguration.DEFAULT_STATUS_BAR_VISIBLE));
  FolderPanel leftPanel=mainFrame.getLeftPanel();
  leftPanel.getLocationManager().addLocationListener(this);
  FolderPanel rightPanel=mainFrame.getRightPanel();
  rightPanel.getLocationManager().addLocationListener(this);
  leftPanel.getFileTable().addTableSelectionListener(this);
  rightPanel.getFileTable().addTableSelectionListener(this);
  mainFrame.addActivePanelListener(this);
  selectedFilesLabel.addMouseListener(this);
  volumeSpaceLabel.addMouseListener(this);
  addMouseListener(this);
  addComponentListener(this);
  selectedFilesLabel.setFont(ThemeManager.getCurrentFont(Theme.STATUS_BAR_FONT));
  selectedFilesLabel.setForeground(ThemeManager.getCurrentColor(Theme.STATUS_BAR_FOREGROUND_COLOR));
  volumeSpaceLabel.setFont(ThemeManager.getCurrentFont(Theme.STATUS_BAR_FONT));
  volumeSpaceLabel.setForeground(ThemeManager.getCurrentColor(Theme.STATUS_BAR_FOREGROUND_COLOR));
  ThemeManager.addCurrentThemeListener(this);
}","/** 
 * Creates a new StatusBar instance.
 */
public StatusBar(MainFrame mainFrame){
  setLayout(new BoxLayout(this,BoxLayout.X_AXIS));
  this.mainFrame=mainFrame;
  selectedFilesLabel=new JLabel(""String_Node_Str"");
  dial=new SpinningDial();
  add(selectedFilesLabel);
  add(Box.createHorizontalGlue());
  if (DesktopManager.getTrash() != null) {
    TrashPopupButton trashButton=new TrashPopupButton(mainFrame);
    trashButton.setPopupMenuLocation(SwingConstants.TOP);
    add(trashButton);
    add(Box.createRigidArea(new Dimension(2,0)));
  }
  volumeSpaceLabel=new VolumeSpaceLabel();
  add(volumeSpaceLabel);
  setVisible(MuConfiguration.getVariable(MuConfiguration.STATUS_BAR_VISIBLE,MuConfiguration.DEFAULT_STATUS_BAR_VISIBLE));
  FolderPanel leftPanel=mainFrame.getLeftPanel();
  leftPanel.getLocationManager().addLocationListener(this);
  FolderPanel rightPanel=mainFrame.getRightPanel();
  rightPanel.getLocationManager().addLocationListener(this);
  leftPanel.getFileTable().addTableSelectionListener(this);
  rightPanel.getFileTable().addTableSelectionListener(this);
  mainFrame.addActivePanelListener(this);
  selectedFilesLabel.addMouseListener(this);
  volumeSpaceLabel.addMouseListener(this);
  addMouseListener(this);
  addComponentListener(this);
  selectedFilesLabel.setFont(ThemeManager.getCurrentFont(Theme.STATUS_BAR_FONT));
  selectedFilesLabel.setForeground(ThemeManager.getCurrentColor(Theme.STATUS_BAR_FOREGROUND_COLOR));
  volumeSpaceLabel.setFont(ThemeManager.getCurrentFont(Theme.STATUS_BAR_FONT));
  volumeSpaceLabel.setForeground(ThemeManager.getCurrentColor(Theme.STATUS_BAR_FOREGROUND_COLOR));
  ThemeManager.addCurrentThemeListener(this);
}",0.9858906525573192
44932,"/** 
 * Initialises the tabbed panel's UI.
 */
private void initUI(){
  Container contentPane;
  XBoxPanel buttonsPanel;
  JPanel tempPanel;
  prefPanels=new Vector();
  tabbedPane=new JTabbedPane(JTabbedPane.TOP);
  contentPane=getContentPane();
  contentPane.setLayout(new BorderLayout());
  contentPane.add(tabbedPane,BorderLayout.CENTER);
  buttonsPanel=new XBoxPanel();
  buttonsPanel.add(applyButton=new JButton(Translator.get(""String_Node_Str"")));
  buttonsPanel.addSpace(20);
  buttonsPanel.add(okButton=new JButton(Translator.get(""String_Node_Str"")));
  buttonsPanel.add(cancelButton=new JButton(Translator.get(""String_Node_Str"")));
  applyButton.addActionListener(this);
  okButton.addActionListener(this);
  cancelButton.addActionListener(this);
  tempPanel=new JPanel(new FlowLayout(FlowLayout.RIGHT));
  tempPanel.add(buttonsPanel);
  contentPane.add(tempPanel,BorderLayout.SOUTH);
  getRootPane().setDefaultButton(okButton);
}","/** 
 * Initialises the tabbed panel's UI.
 */
private void initUI(){
  Container contentPane;
  XBoxPanel buttonsPanel;
  JPanel tempPanel;
  prefPanels=new Vector();
  tabbedPane=new JTabbedPane(JTabbedPane.TOP);
  contentPane=getContentPane();
  contentPane.setLayout(new BorderLayout());
  contentPane.add(tabbedPane,BorderLayout.CENTER);
  buttonsPanel=new XBoxPanel();
  buttonsPanel.add(applyButton=new JButton(Translator.get(""String_Node_Str"")));
  buttonsPanel.addSpace(20);
  buttonsPanel.add(okButton=new JButton(Translator.get(""String_Node_Str"")));
  buttonsPanel.add(cancelButton=new JButton(Translator.get(""String_Node_Str"")));
  okButton.setEnabled(false);
  applyButton.setEnabled(false);
  applyButton.addActionListener(this);
  okButton.addActionListener(this);
  cancelButton.addActionListener(this);
  tempPanel=new JPanel(new FlowLayout(FlowLayout.RIGHT));
  tempPanel.add(buttonsPanel);
  contentPane.add(tempPanel,BorderLayout.SOUTH);
  getRootPane().setDefaultButton(okButton);
}",0.9675759135357694
44933,"/** 
 * Calls   {@link PreferencesPanel#commit()} on all registered preference panels.
 */
public void commit(){
  int nbPanels=prefPanels.size();
  for (int i=0; i < nbPanels; i++)   ((PreferencesPanel)prefPanels.elementAt(i)).commit();
}","/** 
 * Calls   {@link PreferencesPanel#commit()} on all registered preference panels.
 */
public void commit(){
  int nbPanels=prefPanels.size();
  for (int i=0; i < nbPanels; i++)   ((PreferencesPanel)prefPanels.elementAt(i)).commit();
  setCommitButtonsEnabled(false);
}",0.93359375
44934,"/** 
 * update list model depending on the data in text component
 * @param list - auto-completion popup's list.
 * @param comp - text component
 * @return true if list model was updated successfully, false otherwise.
 */
public abstract boolean updateListData(final JList list,AutocompleterTextComponent comp);","/** 
 * update list model depending on the data in text component
 * @param list - auto-completion popup's list that should be updated.
 * @param comp - text component
 * @return true if an auto-completion popup with the updated list should be shown, false otherwise.
 */
public boolean updateListData(final JList list,AutocompleterTextComponent comp){
  list.setListData(getUpdatedSuggestions(comp));
  if (list.getModel().getSize() == 1) {
    try {
      String typedFilename=FileURL.getFileURL(comp.getText()).getFilename();
      if (typedFilename.equalsIgnoreCase((String)list.getModel().getElementAt(0)))       return false;
    }
 catch (    MalformedURLException e) {
    }
  }
  return list.getModel().getSize() > 0;
}",0.5178055822906641
44935,"/** 
 * Read the headers of the archive
 * @throws RarException
 */
private void readHeaders(InputStream in) throws IOException, RarException {
  markHead=null;
  newMhd=null;
  headers.clear();
  long position=0;
  long read=0;
  byte[] baseBlockBuffer=new byte[BaseBlock.BaseBlockSize];
  byte[] buff=BufferPool.getByteArray();
  BaseBlock block;
  while ((read=in.read(baseBlockBuffer)) != 0) {
    block=new BaseBlock(baseBlockBuffer);
    block.setPositionInFile(position);
    position+=read;
    logger.info(""String_Node_Str"" + block.getHeaderType());
switch (block.getHeaderType()) {
case UnrarHeadertype.MarkHeaderCode:
      logger.info(""String_Node_Str"");
    markHead=new MarkHeader(block);
  if (!markHead.isSignature()) {
    throw new RarException(RarExceptionType.badRarArchive);
  }
headers.add(markHead);
break;
case UnrarHeadertype.MainHeaderCode:
logger.info(""String_Node_Str"");
buff=realloc(buff,block.hasEncryptVersion() ? MainHeader.mainHeaderSizeWithEnc : MainHeader.mainHeaderSize);
position+=in.read(buff);
MainHeader mainhead=new MainHeader(block,buff);
headers.add(mainhead);
this.newMhd=mainhead;
if (newMhd.isEncrypted()) {
throw new RarException(RarExceptionType.rarEncryptedException);
}
break;
case UnrarHeadertype.SignHeaderCode:
logger.info(""String_Node_Str"");
buff=realloc(buff,SignHeader.signHeaderSize);
position+=in.read(buff);
headers.add(new SignHeader(block,buff));
break;
case UnrarHeadertype.AvHeaderCode:
logger.info(""String_Node_Str"");
buff=realloc(buff,AVHeader.avHeaderSize);
position+=in.read(buff);
headers.add(new AVHeader(block,buff));
break;
case UnrarHeadertype.CommHeaderCode:
logger.info(""String_Node_Str"");
buff=realloc(buff,CommentHeader.commentHeaderSize);
position+=in.read(buff);
CommentHeader header=new CommentHeader(block,buff);
headers.add(header);
position+=in.skip(header.getHeaderSize());
break;
case UnrarHeadertype.EndArcHeaderCode:
logger.info(""String_Node_Str"");
int toRead=0;
toRead+=block.hasArchiveDataCRC() ? EndArcHeader.endArcArchiveDataCrcSize : 0;
toRead+=block.hasVolumeNumber() ? EndArcHeader.endArcVolumeNumberSize : 0;
EndArcHeader endArcHead;
if (toRead > 0) {
buff=realloc(buff,toRead);
position+=in.read(buff);
endArcHead=new EndArcHeader(block,buff);
logger.info(""String_Node_Str"");
}
 else {
endArcHead=new EndArcHeader(block,null);
logger.info(""String_Node_Str"");
}
headers.add(endArcHead);
return;
default :
buff=realloc(buff,BlockHeader.blockHeaderSize);
position+=in.read(buff);
BlockHeader blockHead=new BlockHeader(block,buff);
logger.info(""String_Node_Str"" + blockHead.getHeaderType());
switch (blockHead.getHeaderType()) {
case UnrarHeadertype.NewSubHeaderCode:
case UnrarHeadertype.FileHeaderCode:
logger.info(""String_Node_Str"");
buff=realloc(buff,blockHead.getHeaderSize() - BlockHeader.blockHeaderSize - BaseBlock.BaseBlockSize);
position+=in.read(buff);
FileHeader fh=new FileHeader(blockHead,buff);
headers.add(fh);
position+=in.skip(fh.getPositionInFile() + fh.getHeaderSize() + fh.getFullPackSize() - position);
break;
case UnrarHeadertype.ProtectHeaderCode:
logger.info(""String_Node_Str"");
buff=realloc(buff,blockHead.getHeaderSize() - BaseBlock.BaseBlockSize - BlockHeader.blockHeaderSize);
position+=in.read(buff);
ProtectHeader ph=new ProtectHeader(blockHead,buff);
position+=in.skip(ph.getHeaderSize());
break;
case UnrarHeadertype.SubHeaderCode:
{
logger.info(""String_Node_Str"");
buff=realloc(buff,SubBlockHeader.subBlockHeaderSize);
position+=in.read(buff);
SubBlockHeader sh=new SubBlockHeader(blockHead,buff);
switch (sh.getSubType().getSubblocktype()) {
case SubBlockHeaderType.MAC_HEAD_CODE:
{
buff=realloc(buff,MacInfoHeader.MacInfoHeaderSize);
position+=in.read(buff);
MacInfoHeader macHeader=new MacInfoHeader(sh,buff);
headers.add(macHeader);
break;
}
case SubBlockHeaderType.BEEA_HEAD_CODE:
break;
case SubBlockHeaderType.EA_HEAD_CODE:
{
buff=realloc(buff,EAHeader.EAHeaderSize);
position+=in.read(buff);
EAHeader eaHeader=new EAHeader(sh,buff);
headers.add(eaHeader);
break;
}
case SubBlockHeaderType.NTACL_HEAD_CODE:
break;
case SubBlockHeaderType.STREAM_HEAD_CODE:
break;
case SubBlockHeaderType.UO_HEAD_CODE:
toRead=sh.getHeaderSize();
toRead-=BaseBlock.BaseBlockSize;
toRead-=BlockHeader.blockHeaderSize;
toRead-=SubBlockHeader.subBlockHeaderSize;
buff=realloc(buff,toRead);
position+=in.read(buff);
UnixOwnersHeader uoHeader=new UnixOwnersHeader(sh,buff);
headers.add(uoHeader);
break;
default :
break;
}
break;
}
default :
logger.warning(""String_Node_Str"" + blockHead.getHeaderType());
throw new RarException(RarExceptionType.notRarArchive);
}
BufferPool.releaseByteArray(buff);
}
}
}","/** 
 * Read the headers of the archive
 * @throws RarException
 */
private void readHeaders(InputStream in) throws IOException, RarException {
  markHead=null;
  newMhd=null;
  headers.clear();
  long position=0;
  long read=0;
  byte[] baseBlockBuffer=new byte[BaseBlock.BaseBlockSize];
  byte[] buff=BufferPool.getByteArray();
  BaseBlock block;
  while ((read=in.read(baseBlockBuffer)) > 0) {
    block=new BaseBlock(baseBlockBuffer);
    block.setPositionInFile(position);
    position+=read;
    logger.info(""String_Node_Str"" + block.getHeaderType());
switch (block.getHeaderType()) {
case UnrarHeadertype.MarkHeaderCode:
      logger.info(""String_Node_Str"");
    markHead=new MarkHeader(block);
  if (!markHead.isSignature()) {
    throw new RarException(RarExceptionType.badRarArchive);
  }
headers.add(markHead);
break;
case UnrarHeadertype.MainHeaderCode:
logger.info(""String_Node_Str"");
buff=realloc(buff,block.hasEncryptVersion() ? MainHeader.mainHeaderSizeWithEnc : MainHeader.mainHeaderSize);
position+=in.read(buff);
MainHeader mainhead=new MainHeader(block,buff);
headers.add(mainhead);
this.newMhd=mainhead;
if (newMhd.isEncrypted()) {
throw new RarException(RarExceptionType.rarEncryptedException);
}
break;
case UnrarHeadertype.SignHeaderCode:
logger.info(""String_Node_Str"");
buff=realloc(buff,SignHeader.signHeaderSize);
position+=in.read(buff);
headers.add(new SignHeader(block,buff));
break;
case UnrarHeadertype.AvHeaderCode:
logger.info(""String_Node_Str"");
buff=realloc(buff,AVHeader.avHeaderSize);
position+=in.read(buff);
headers.add(new AVHeader(block,buff));
break;
case UnrarHeadertype.CommHeaderCode:
logger.info(""String_Node_Str"");
buff=realloc(buff,CommentHeader.commentHeaderSize);
position+=in.read(buff);
CommentHeader header=new CommentHeader(block,buff);
headers.add(header);
position+=in.skip(header.getHeaderSize());
break;
case UnrarHeadertype.EndArcHeaderCode:
logger.info(""String_Node_Str"");
int toRead=0;
toRead+=block.hasArchiveDataCRC() ? EndArcHeader.endArcArchiveDataCrcSize : 0;
toRead+=block.hasVolumeNumber() ? EndArcHeader.endArcVolumeNumberSize : 0;
EndArcHeader endArcHead;
if (toRead > 0) {
buff=realloc(buff,toRead);
position+=in.read(buff);
endArcHead=new EndArcHeader(block,buff);
logger.info(""String_Node_Str"");
}
 else {
endArcHead=new EndArcHeader(block,null);
logger.info(""String_Node_Str"");
}
headers.add(endArcHead);
return;
default :
buff=realloc(buff,BlockHeader.blockHeaderSize);
position+=in.read(buff);
BlockHeader blockHead=new BlockHeader(block,buff);
logger.info(""String_Node_Str"" + blockHead.getHeaderType());
switch (blockHead.getHeaderType()) {
case UnrarHeadertype.NewSubHeaderCode:
case UnrarHeadertype.FileHeaderCode:
logger.info(""String_Node_Str"");
buff=realloc(buff,blockHead.getHeaderSize() - BlockHeader.blockHeaderSize - BaseBlock.BaseBlockSize);
position+=in.read(buff);
FileHeader fh=new FileHeader(blockHead,buff);
headers.add(fh);
position+=in.skip(fh.getPositionInFile() + fh.getHeaderSize() + fh.getFullPackSize() - position);
break;
case UnrarHeadertype.ProtectHeaderCode:
logger.info(""String_Node_Str"");
buff=realloc(buff,blockHead.getHeaderSize() - BaseBlock.BaseBlockSize - BlockHeader.blockHeaderSize);
position+=in.read(buff);
ProtectHeader ph=new ProtectHeader(blockHead,buff);
position+=in.skip(ph.getHeaderSize());
break;
case UnrarHeadertype.SubHeaderCode:
{
logger.info(""String_Node_Str"");
buff=realloc(buff,SubBlockHeader.subBlockHeaderSize);
position+=in.read(buff);
SubBlockHeader sh=new SubBlockHeader(blockHead,buff);
switch (sh.getSubType().getSubblocktype()) {
case SubBlockHeaderType.MAC_HEAD_CODE:
{
buff=realloc(buff,MacInfoHeader.MacInfoHeaderSize);
position+=in.read(buff);
MacInfoHeader macHeader=new MacInfoHeader(sh,buff);
headers.add(macHeader);
break;
}
case SubBlockHeaderType.BEEA_HEAD_CODE:
break;
case SubBlockHeaderType.EA_HEAD_CODE:
{
buff=realloc(buff,EAHeader.EAHeaderSize);
position+=in.read(buff);
EAHeader eaHeader=new EAHeader(sh,buff);
headers.add(eaHeader);
break;
}
case SubBlockHeaderType.NTACL_HEAD_CODE:
break;
case SubBlockHeaderType.STREAM_HEAD_CODE:
break;
case SubBlockHeaderType.UO_HEAD_CODE:
toRead=sh.getHeaderSize();
toRead-=BaseBlock.BaseBlockSize;
toRead-=BlockHeader.blockHeaderSize;
toRead-=SubBlockHeader.subBlockHeaderSize;
buff=realloc(buff,toRead);
position+=in.read(buff);
UnixOwnersHeader uoHeader=new UnixOwnersHeader(sh,buff);
headers.add(uoHeader);
break;
default :
break;
}
break;
}
default :
logger.warning(""String_Node_Str"" + blockHead.getHeaderType());
throw new RarException(RarExceptionType.notRarArchive);
}
}
}
BufferPool.releaseByteArray(buff);
if (read == -1) throw new RarException(RarExceptionType.badRarArchive);
}",0.9910685462175832
44936,"/** 
 * Sets the capacity of the   {@link LRUCache} that caches frequently accessed file instances. The more the capacity,the more frequent the cache is hit but the higher the memory usage. By default, the capacity is {@link #DEFAULT_FILE_CACHE_CAPACITY}. <p>If the specified capacity is different from the current one, a new cache instance will be created, thus clearing all previously cached files.</p>
 * @param capacity the capacity of the LRU cache that caches frequently accessed file instances
 * @see com.mucommander.cache.LRUCache
 */
public static void setFileCacheCapacity(int capacity){
  if (fileCache == null || fileCache.getCapacity() != capacity)   fileCache=LRUCache.createInstance(DEFAULT_FILE_CACHE_CAPACITY);
}","/** 
 * Sets the capacity of the   {@link LRUCache} that caches frequently accessed file instances. The more the capacity,the more frequent the cache is hit but the higher the memory usage. By default, the capacity is {@link #DEFAULT_FILE_CACHE_CAPACITY}. <p>If the specified capacity is different from the current one, a new cache instance will be created, thus clearing all previously cached files.</p>
 * @param capacity the capacity of the LRU cache that caches frequently accessed file instances
 * @see com.mucommander.cache.LRUCache
 */
public static void setFileCacheCapacity(int capacity){
  if (fileCache == null || fileCache.getCapacity() != capacity)   fileCache=LRUCache.createInstance(capacity);
}",0.9757113115891742
44937,"/** 
 * Sets the given button's action, custom label showing the accelerator, and icon taking into account the scale factor.
 */
private void setButtonAction(JButton button,MuAction action){
  button.setAction(action);
  button.setText(action.getLabel() + ""String_Node_Str"" + action.getAcceleratorText()+ ""String_Node_Str"");
  if (scaleFactor != 1.0f)   button.setIcon(IconManager.getScaledIcon(action.getIcon(),scaleFactor));
}","/** 
 * Sets the given button's action, custom label showing the accelerator, and icon taking into account the scale factor.
 */
private void setButtonAction(JButton button,MuAction action){
  button.setAction(action);
  String label;
  label=action.getLabel();
  if (action.getAcceleratorText() != null)   label+=""String_Node_Str"" + action.getAcceleratorText() + ']';
  button.setText(label);
  if (scaleFactor != 1.0f)   button.setIcon(IconManager.getScaledIcon(action.getIcon(),scaleFactor));
}",0.825945945945946
44938,"public void show(FolderPanel folderPanel){
  this.folderPanel=folderPanel;
  int y=folderPanel.getLocationTextField().getHeight();
  show(folderPanel,folderPanel.getWidth() / 2,y);
  int x=(x=((folderPanel.getWidth() - getWidth()) / 2)) < 0 ? 0 : x;
  y+=(y=(folderPanel.getHeight() - getHeight()) / 3) < 0 ? 0 : y;
  show(folderPanel,x,y);
}","public void show(FolderPanel folderPanel){
  this.folderPanel=folderPanel;
  Dimension dim=getPreferredSize();
  int x=Math.max((folderPanel.getWidth() - (int)dim.getWidth()) / 2,0);
  int y=folderPanel.getLocationTextField().getHeight() + Math.max((folderPanel.getHeight() - (int)dim.getHeight()) / 3,0);
  show(folderPanel,x,y);
}",0.4629080118694362
44939,"public void show(FolderPanel folderPanel){
  this.folderPanel=folderPanel;
  Dimension dim=getPreferredSize();
  int x=Math.max((folderPanel.getWidth() - (int)dim.getWidth()) / 2,0);
  int y=folderPanel.getLocationTextField().getHeight() + Math.max((folderPanel.getHeight() - (int)dim.getHeight()) / 3,0);
  show(folderPanel,x,y);
}","public void show(FolderPanel folderPanel){
  this.folderPanel=folderPanel;
  if (prepareForShowing()) {
    Dimension dim=getPreferredSize();
    int x=Math.max((folderPanel.getWidth() - (int)dim.getWidth()) / 2,0);
    int y=folderPanel.getLocationTextField().getHeight() + Math.max((folderPanel.getHeight() - (int)dim.getHeight()) / 3,0);
    show(folderPanel,x,y);
  }
}",0.9418439716312056
44940,"public EmptyMessageMenuItem(String text){
  super(text);
}","public EmptyMessageMenuItem(String text){
  super(text);
  dim=new Dimension((int)Math.ceil(getFontMetrics(FONT).stringWidth(text) * 1.1),FONT.getSize() * 2);
}",0.5321100917431193
44941,"public HeaderMenuItem(String text){
  super(text);
}","public HeaderMenuItem(String text){
  super(text);
  dim=new Dimension((int)Math.ceil(getFontMetrics(HEADER_FONT).stringWidth(text) * 1.1),(int)(HEADER_FONT.getSize() * 1.5));
}",0.4541484716157205
44942,"/** 
 * Populates the look&feel combo box will all available look&feels.
 */
private void populateLookAndFeels(){
  int currentIndex;
  String currentName;
  String buffer;
  lookAndFeelComboBox.removeAllItems();
  initialiseAvailableLookAndFeels();
  currentIndex=-1;
  currentName=UIManager.getLookAndFeel().getName();
  for (int i=0; i < lookAndFeels.length; i++) {
    buffer=lookAndFeels[i].getName();
    if (currentName.equals(buffer))     currentIndex=i;
 else     if (currentIndex == -1 && (currentName.startsWith(buffer) || buffer.startsWith(currentName)))     currentIndex=i;
    lookAndFeelComboBox.addItem(buffer);
  }
  if (currentIndex == -1)   currentIndex=0;
  lookAndFeelComboBox.setSelectedIndex(currentIndex);
}","/** 
 * Populates the look&feel combo box will all available look&feels.
 */
private void populateLookAndFeels(){
  int currentIndex;
  String currentName;
  lookAndFeelComboBox.removeAllItems();
  initialiseAvailableLookAndFeels();
  currentIndex=-1;
  currentName=UIManager.getLookAndFeel().getClass().getName();
  for (int i=0; i < lookAndFeels.length; i++) {
    if (lookAndFeels[i].getClassName().equals(currentName))     currentIndex=i;
    lookAndFeelComboBox.addItem(lookAndFeels[i].getName());
  }
  if (currentIndex == -1)   currentIndex=0;
  lookAndFeelComboBox.setSelectedIndex(currentIndex);
}",0.7195213163799551
44943,"/** 
 * Adds auto-completion capabilities to this text field.
 */
private void enableAutoCompletion(){
  new TextFieldCompletion(new AutocompleterTextComponent(this){
    public void OnEnterPressed(    KeyEvent keyEvent){
      textFieldValidated();
    }
    public void OnEscPressed(    KeyEvent keyEvent){
      textFieldCancelled();
    }
  }
,CompleterFactory.getLocationCompleter());
}","/** 
 * Adds auto-completion capabilities to this text field.
 */
private void enableAutoCompletion(){
  new TextFieldCompletion(new AutocompleterTextComponent(this){
    public void OnEnterPressed(    KeyEvent keyEvent){
      if (textFieldValidated())       folderChangeCompleted(false);
      keyEvent.consume();
    }
    public void OnEscPressed(    KeyEvent keyEvent){
      textFieldCancelled();
    }
  }
,CompleterFactory.getLocationCompleter());
}",0.9221698113207548
44944,"public void OnEnterPressed(KeyEvent keyEvent){
  textFieldValidated();
}","public void OnEnterPressed(KeyEvent keyEvent){
  if (textFieldValidated())   folderChangeCompleted(false);
  keyEvent.consume();
}",0.7128712871287128
44945,"public void textFieldValidated(){
  String location=getText();
  if (OsFamilies.WINDOWS.isCurrent() && location.indexOf(""String_Node_Str"") == 1) {
    Matcher matcher=windowsTrailingSpacePattern.matcher(location);
    if (matcher.find())     location=location.substring(0,matcher.start());
  }
  Bookmark b=BookmarkManager.getBookmark(location);
  if (b != null) {
    folderPanel.tryChangeCurrentFolder(b.getLocation());
    return;
  }
  AbstractFile rootFolders[]=RootFolders.getRootFolders();
  for (int i=0; i < rootFolders.length; i++) {
    if (rootFolders[i].getName().equalsIgnoreCase(location)) {
      folderPanel.tryChangeCurrentFolder(rootFolders[i]);
      return;
    }
  }
  if (location.startsWith(""String_Node_Str"")) {
    String variableKey=location.substring(1);
    String variableValue=System.getenv(variableKey);
    if (variableValue != null)     location=variableValue;
  }
  folderChangeInitiatedByLocationField=true;
  locationFieldTextSave=location;
  folderPanel.tryChangeCurrentFolder(location);
}","/** 
 * @return true if a malformed url was entered, false otherwise.
 */
public boolean textFieldValidated(){
  String location=getText();
  if (OsFamilies.WINDOWS.isCurrent() && location.indexOf(""String_Node_Str"") == 1) {
    Matcher matcher=windowsTrailingSpacePattern.matcher(location);
    if (matcher.find())     location=location.substring(0,matcher.start());
  }
  locationFieldTextSave=location;
  boolean tryToInterpretEnteredString=true;
  Bookmark b=BookmarkManager.getBookmark(location);
  if (b != null) {
    setText(location=b.getLocation());
    tryToInterpretEnteredString=false;
  }
  AbstractFile rootFolders[]=RootFolders.getRootFolders();
  for (int i=0; tryToInterpretEnteredString && i < rootFolders.length; i++) {
    if (rootFolders[i].getName().equalsIgnoreCase(location)) {
      setText(location=rootFolders[i].getAbsolutePath());
      tryToInterpretEnteredString=false;
    }
  }
  if (tryToInterpretEnteredString && location.startsWith(""String_Node_Str"")) {
    String variableKey=location.substring(1);
    String variableValue=System.getenv(variableKey);
    if (variableValue != null)     setText(location=variableValue);
  }
  folderChangeInitiatedByLocationField=true;
  return folderPanel.tryChangeCurrentFolder(location) == null;
}",0.3491510666086199
44946,"public void treeStructureChanged(TreeModelEvent e){
  updateSelectedFolder();
  tree.repaint();
}","public void treeStructureChanged(TreeModelEvent e){
  if (!changeTimer.isRunning()) {
    updateSelectedFolder();
    tree.repaint();
  }
}",0.8220338983050848
44947,"/** 
 * Changes the current folder in an associated folder panel, depending on the current selection in tree.
 */
public void valueChanged(TreeSelectionEvent e){
  TreePath path=e.getNewLeadSelectionPath();
  if (path != null) {
    AbstractFile f=(AbstractFile)path.getLastPathComponent();
    if (f != null && f.isBrowsable() && f != folderPanel.getCurrentFolder()) {
      if (changeTimer == null) {
        changeTimer=new ChangeTimer();
      }
      changeTimer.folder=f;
      changeTimer.restart();
    }
  }
}","/** 
 * Changes the current folder in an associated folder panel, depending on the current selection in tree.
 */
public void valueChanged(TreeSelectionEvent e){
  TreePath path=e.getNewLeadSelectionPath();
  if (path != null) {
    AbstractFile f=(AbstractFile)path.getLastPathComponent();
    if (f != null && f.isBrowsable() && f != folderPanel.getCurrentFolder()) {
      changeTimer.folder=f;
      changeTimer.restart();
    }
  }
}",0.8765690376569037
44948,"/** 
 * Skips (up to) the specified number of bytes and returns the number of bytes effectively skipped. The exact given number of bytes will be skipped as long as the current offset as returned by   {@link #getOffset()}plus the number of bytes to skip doesn't exceed the length of this stream as returned by   {@link #getLength()}. If it does, all the remaining bytes will be skipped so that the offset of this stream will be positionned to  {@link #getLength()}.
 * @param n number of bytes to skip
 * @return the number of bytes that have effectively been skipped
 * @throws IOException if something went wrong
 */
public long skip(long n) throws IOException {
  long offset=getOffset();
  long length=getLength();
  if (offset + n >= length) {
    seek(length - 1);
    return length - offset - 1;
  }
  seek(offset + n);
  return n;
}","/** 
 * Skips (up to) the specified number of bytes and returns the number of bytes effectively skipped. The exact given number of bytes will be skipped as long as the current offset as returned by   {@link #getOffset()}plus the number of bytes to skip doesn't exceed the length of this stream as returned by   {@link #getLength()}. If it does, all the remaining bytes will be skipped so that the offset of this stream will be positionned to  {@link #getLength()}. Returns <code>-1</code> if the offset is already positionned to the end of the stream when this method is called.
 * @param n number of bytes to skip
 * @return the number of bytes that have effectively been skipped, -1 if the offset is already positionned to theend of the stream when this method is called
 * @throws IOException if something went wrong
 */
public long skip(long n) throws IOException {
  if (n <= 0)   return 0;
  long offset=getOffset();
  long length=getLength();
  if (offset >= length)   return -1;
  long newOffset=offset + n;
  if (newOffset > length)   newOffset=length;
  seek(newOffset);
  return (int)(newOffset - offset);
}",0.7552376085845682
44949,"/** 
 * Creates and returns an instance of AbstractFile for the given FileURL and uses the specified parent file (if any) as the created file's parent. <p>Specifying the file parent if an instance already exists allows to recycle the AbstractFile instance instead of creating a new one when the parent file is requested.
 * @param fileURL the file URL representing the file to be created
 * @param parent the parent AbstractFile to use as the created file's parent, can be <code>null</code>
 * @return an instance of {@link AbstractFile} for the given {@link FileURL}.
 * @throws java.io.IOException if something went wrong during file creation.
 */
public static AbstractFile getFile(FileURL fileURL,AbstractFile parent) throws IOException {
  String filePath=fileURL.getPath();
  if (OsFamilies.WINDOWS.isCurrent() && FileProtocols.FILE.equals(fileURL.getProtocol()))   filePath=FileToolkit.removeLeadingSeparator(filePath,""String_Node_Str"");
  PathTokenizer pt=new PathTokenizer(filePath,fileURL.getPathSeparator(),false);
  AbstractFile currentFile=null;
  boolean lastFileResolved=false;
  while (pt.hasMoreFilenames()) {
    if (isArchiveFilename(pt.nextFilename())) {
      String currentPath=FileToolkit.removeTrailingSeparator(pt.getCurrentPath());
      if (currentFile == null || !(currentFile instanceof AbstractArchiveFile)) {
        FileURL clonedURL=(FileURL)fileURL.clone();
        clonedURL.setPath(currentPath);
        currentFile=wrapArchive(createRawFile(clonedURL));
        lastFileResolved=true;
      }
 else {
        AbstractFile tempEntryFile=((AbstractArchiveFile)currentFile).getArchiveEntryFile(FileToolkit.removeLeadingSeparator(currentPath.substring(currentFile.getAbsolutePath().length(),currentPath.length())));
        if (tempEntryFile instanceof AbstractArchiveFile) {
          currentFile=tempEntryFile;
          lastFileResolved=true;
        }
 else {
          lastFileResolved=false;
        }
      }
    }
 else {
      lastFileResolved=false;
    }
  }
  if (!lastFileResolved) {
    String currentPath=pt.getCurrentPath();
    if (currentFile == null || !(currentFile instanceof AbstractArchiveFile)) {
      FileURL clonedURL=(FileURL)fileURL.clone();
      clonedURL.setPath(currentPath);
      currentFile=createRawFile(clonedURL);
    }
 else {
      currentFile=((AbstractArchiveFile)currentFile).getArchiveEntryFile(FileToolkit.removeLeadingSeparator(currentPath.substring(currentFile.getAbsolutePath().length(),currentPath.length())));
    }
  }
  if (parent != null)   currentFile.setParent(parent);
  return currentFile;
}","/** 
 * Creates and returns an instance of AbstractFile for the given FileURL and uses the specified parent file (if any) as the created file's parent. <p>Specifying the file parent if an instance already exists allows to recycle the AbstractFile instance instead of creating a new one when the parent file is requested.
 * @param fileURL the file URL representing the file to be created
 * @param parent the parent AbstractFile to use as the created file's parent, can be <code>null</code>
 * @return an instance of {@link AbstractFile} for the given {@link FileURL}.
 * @throws java.io.IOException if something went wrong during file creation.
 */
public static AbstractFile getFile(FileURL fileURL,AbstractFile parent) throws IOException {
  String filePath=fileURL.getPath();
  if (OsFamilies.WINDOWS.isCurrent() && FileProtocols.FILE.equals(fileURL.getProtocol()))   filePath=FileToolkit.removeLeadingSeparator(filePath,""String_Node_Str"");
  PathTokenizer pt=new PathTokenizer(filePath,fileURL.getPathSeparator(),false);
  AbstractFile currentFile=null;
  boolean lastFileResolved=false;
  while (pt.hasMoreFilenames()) {
    if (isArchiveFilename(pt.nextFilename())) {
      String currentPath=FileToolkit.removeTrailingSeparator(pt.getCurrentPath());
      if (currentFile == null || !(currentFile instanceof AbstractArchiveFile)) {
        FileURL clonedURL=(FileURL)fileURL.clone();
        clonedURL.setPath(currentPath);
        currentFile=wrapArchive(createRawFile(clonedURL));
        lastFileResolved=true;
      }
 else {
        AbstractFile tempEntryFile=((AbstractArchiveFile)currentFile).getArchiveEntryFile(FileToolkit.removeLeadingSeparator(currentPath.substring(currentFile.getURL().getPath().length(),currentPath.length())));
        if (tempEntryFile instanceof AbstractArchiveFile) {
          currentFile=tempEntryFile;
          lastFileResolved=true;
        }
 else {
          lastFileResolved=false;
        }
      }
    }
 else {
      lastFileResolved=false;
    }
  }
  if (!lastFileResolved) {
    String currentPath=pt.getCurrentPath();
    if (currentFile == null || !(currentFile instanceof AbstractArchiveFile)) {
      FileURL clonedURL=(FileURL)fileURL.clone();
      clonedURL.setPath(currentPath);
      currentFile=createRawFile(clonedURL);
    }
 else {
      currentFile=((AbstractArchiveFile)currentFile).getArchiveEntryFile(FileToolkit.removeLeadingSeparator(currentPath.substring(currentFile.getURL().getPath().length(),currentPath.length())));
    }
  }
  if (parent != null)   currentFile.setParent(parent);
  return currentFile;
}",0.7564847077042199
44950,"/** 
 * Creates and returns an instance of AbstractFile for the given FileURL and uses the specified parent file (if any) as the created file's parent. <p>Specifying the file parent if an instance already exists allows to recycle the AbstractFile instance instead of creating a new one when the parent file is requested.
 * @param fileURL the file URL representing the file to be created
 * @param parent the parent AbstractFile to use as the created file's parent, can be <code>null</code>
 * @return an instance of {@link AbstractFile} for the given {@link FileURL}.
 * @throws java.io.IOException if something went wrong during file creation.
 */
public static AbstractFile getFile(FileURL fileURL,AbstractFile parent) throws IOException {
  PathTokenizer pt=new PathTokenizer(fileURL.getPath(),fileURL.getPathSeparator(),false);
  AbstractFile currentFile=null;
  boolean lastFileResolved=false;
  while (pt.hasMoreFilenames()) {
    if (isArchiveFilename(pt.nextFilename())) {
      String currentPath=FileToolkit.removeTrailingSeparator(pt.getCurrentPath());
      if (currentFile == null || !(currentFile instanceof AbstractArchiveFile)) {
        FileURL clonedURL=(FileURL)fileURL.clone();
        clonedURL.setPath(currentPath);
        currentFile=wrapArchive(createRawFile(clonedURL));
        lastFileResolved=true;
      }
 else {
        AbstractFile tempEntryFile=((AbstractArchiveFile)currentFile).getArchiveEntryFile(FileToolkit.removeLeadingSeparator(currentPath.substring(currentFile.getURL().getPath().length(),currentPath.length())));
        if (tempEntryFile instanceof AbstractArchiveFile) {
          currentFile=tempEntryFile;
          lastFileResolved=true;
        }
 else {
          lastFileResolved=false;
        }
      }
    }
 else {
      lastFileResolved=false;
    }
  }
  if (!lastFileResolved) {
    String currentPath=pt.getCurrentPath();
    if (currentFile == null || !(currentFile instanceof AbstractArchiveFile)) {
      FileURL clonedURL=(FileURL)fileURL.clone();
      clonedURL.setPath(currentPath);
      currentFile=createRawFile(clonedURL);
    }
 else {
      currentFile=((AbstractArchiveFile)currentFile).getArchiveEntryFile(FileToolkit.removeLeadingSeparator(currentPath.substring(currentFile.getURL().getPath().length(),currentPath.length())));
    }
  }
  if (parent != null)   currentFile.setParent(parent);
  return currentFile;
}","/** 
 * Creates and returns an instance of AbstractFile for the given FileURL and uses the specified parent file (if any) as the created file's parent. <p>Specifying the file parent if an instance already exists allows to recycle the AbstractFile instance instead of creating a new one when the parent file is requested.
 * @param fileURL the file URL representing the file to be created
 * @param parent the parent AbstractFile to use as the created file's parent, can be <code>null</code>
 * @return an instance of {@link AbstractFile} for the given {@link FileURL}.
 * @throws java.io.IOException if something went wrong during file creation.
 */
public static AbstractFile getFile(FileURL fileURL,AbstractFile parent) throws IOException {
  String filePath=fileURL.getPath();
  if (OsFamilies.WINDOWS.isCurrent() && FileProtocols.FILE.equals(fileURL.getProtocol()))   filePath=FileToolkit.removeLeadingSeparator(filePath,""String_Node_Str"");
  PathTokenizer pt=new PathTokenizer(filePath,fileURL.getPathSeparator(),false);
  AbstractFile currentFile=null;
  boolean lastFileResolved=false;
  while (pt.hasMoreFilenames()) {
    if (isArchiveFilename(pt.nextFilename())) {
      String currentPath=FileToolkit.removeTrailingSeparator(pt.getCurrentPath());
      if (currentFile == null || !(currentFile instanceof AbstractArchiveFile)) {
        FileURL clonedURL=(FileURL)fileURL.clone();
        clonedURL.setPath(currentPath);
        currentFile=wrapArchive(createRawFile(clonedURL));
        lastFileResolved=true;
      }
 else {
        AbstractFile tempEntryFile=((AbstractArchiveFile)currentFile).getArchiveEntryFile(FileToolkit.removeLeadingSeparator(currentPath.substring(currentFile.getAbsolutePath().length(),currentPath.length())));
        if (tempEntryFile instanceof AbstractArchiveFile) {
          currentFile=tempEntryFile;
          lastFileResolved=true;
        }
 else {
          lastFileResolved=false;
        }
      }
    }
 else {
      lastFileResolved=false;
    }
  }
  if (!lastFileResolved) {
    String currentPath=pt.getCurrentPath();
    if (currentFile == null || !(currentFile instanceof AbstractArchiveFile)) {
      FileURL clonedURL=(FileURL)fileURL.clone();
      clonedURL.setPath(currentPath);
      currentFile=createRawFile(clonedURL);
    }
 else {
      currentFile=((AbstractArchiveFile)currentFile).getArchiveEntryFile(FileToolkit.removeLeadingSeparator(currentPath.substring(currentFile.getAbsolutePath().length(),currentPath.length())));
    }
  }
  if (parent != null)   currentFile.setParent(parent);
  return currentFile;
}",0.9193645686708224
44951,"/** 
 * Overrides   {@link AbstractFile#moveTo(AbstractFile)} to move/rename the file directly if the destination fileis also a local file.
 */
public boolean moveTo(AbstractFile destFile) throws FileTransferException {
  if (!destFile.getURL().getProtocol().equals(FileProtocols.FILE)) {
    return super.moveTo(destFile);
  }
  destFile=destFile.getTopAncestor();
  if (!(destFile instanceof LocalFile)) {
    return super.moveTo(destFile);
  }
  checkCopyPrerequisites(destFile,true);
  return file.renameTo(((LocalFile)destFile).file);
}","/** 
 * Overrides   {@link AbstractFile#moveTo(AbstractFile)} to move/rename the file directly if the destination fileis also a local file.
 */
public boolean moveTo(AbstractFile destFile) throws FileTransferException {
  if (!destFile.getURL().getProtocol().equals(FileProtocols.FILE)) {
    return super.moveTo(destFile);
  }
  destFile=destFile.getTopAncestor();
  if (!(destFile instanceof LocalFile)) {
    return super.moveTo(destFile);
  }
  checkCopyPrerequisites(destFile,true);
  File destJavaIoFile=((LocalFile)destFile).file;
  if (IS_WINDOWS) {
    if (OsVersions.WINDOWS_ME.isCurrentOrLower() && destFile.exists()) {
      destJavaIoFile.delete();
    }
 else {
      return Kernel32API.INSTANCE.MoveFileEx(absPath,destFile.getAbsolutePath(),Kernel32API.MOVEFILE_REPLACE_EXISTING | Kernel32API.MOVEFILE_WRITE_THROUGH);
    }
  }
  return file.renameTo(destJavaIoFile);
}",0.7270175438596491
44952,"public void setColumnModel(TableColumnModel columnModel){
  if (filenameEditor != null)   columnModel.getColumn(convertColumnIndexToView(Columns.NAME)).setCellEditor(filenameEditor);
  super.setColumnModel(columnModel);
}","public void setColumnModel(TableColumnModel columnModel){
  super.setColumnModel(columnModel);
  if (filenameEditor != null)   columnModel.getColumn(convertColumnIndexToView(Columns.NAME)).setCellEditor(filenameEditor);
  if (usesTableHeaderRenderingProperties())   setTableHeaderRenderingProperties();
}",0.7314285714285714
44953,"/** 
 * Under Mac OS X 10.5 (Leopard) and up, sets client properties on this table's JTableHeader to indicate the current sort criterion/column and sort order (ascending or descending). These properties allow Mac OS X/Java to render the headers accordingly, instead of having to use a   {@link FileTableHeaderRenderer custom header renderer}. This method has no effect whatsoever on platforms other where   {@link #usesTableHeaderRenderingProperties()}returns <code>false</code>.
 */
private void setTableHeaderRenderingProperties(){
  if (usesTableHeaderRenderingProperties()) {
    JTableHeader tableHeader=getTableHeader();
    boolean isActiveTable=isActiveTable();
    tableHeader.putClientProperty(""String_Node_Str"",isActiveTable ? new Integer(getColumnPosition(getSortByCriteria())) : null);
    tableHeader.putClientProperty(""String_Node_Str"",isActiveTable ? isSortAscending() ? ""String_Node_Str"" : ""String_Node_Str"" : null);
  }
}","/** 
 * Under Mac OS X 10.5 (Leopard) and up, sets client properties on this table's JTableHeader to indicate the current sort criterion/column and sort order (ascending or descending). These properties allow Mac OS X/Java to render the headers accordingly, instead of having to use a   {@link FileTableHeaderRenderer custom header renderer}. This method has no effect whatsoever on platforms other where   {@link #usesTableHeaderRenderingProperties()}returns <code>false</code>.
 */
private void setTableHeaderRenderingProperties(){
  if (usesTableHeaderRenderingProperties()) {
    JTableHeader tableHeader=getTableHeader();
    if (tableHeader == null)     return;
    boolean isActiveTable=isActiveTable();
    tableHeader.putClientProperty(""String_Node_Str"",isActiveTable ? new Integer(getColumnPosition(getSortByCriteria())) : null);
    tableHeader.putClientProperty(""String_Node_Str"",isActiveTable ? isSortAscending() ? ""String_Node_Str"" : ""String_Node_Str"" : null);
  }
}",0.9786347055758208
44954,"/** 
 * Edits the currently selected file.
 */
public synchronized void performAction(){
  AbstractFile file;
  boolean useCustomCommand;
  Command customCommand;
  file=mainFrame.getActiveTable().getSelectedFile();
  if (file != null && !(file.isDirectory() || file.isSymlink())) {
    useCustomCommand=useCustomCommand();
    customCommand=getCustomCommand();
    if (useCustomCommand && customCommand != null) {
      if (file.getURL().getProtocol().equals(FileProtocols.FILE) && (file instanceof LocalFile)) {
        try {
          ProcessRunner.execute(customCommand.getTokens(file),file);
        }
 catch (        Exception e) {
          reportGenericError();
        }
      }
 else {
        ProgressDialog progressDialog=new ProgressDialog(mainFrame,Translator.get(""String_Node_Str""));
        TempOpenWithJob job=new TempOpenWithJob(progressDialog,mainFrame,file,customCommand);
        progressDialog.start(job);
      }
    }
 else     performInternalAction(file);
  }
}","/** 
 * Edits the currently selected file.
 */
public synchronized void performAction(){
  AbstractFile file;
  boolean useCustomCommand;
  Command customCommand;
  file=mainFrame.getActiveTable().getSelectedFile();
  if (file != null) {
    useCustomCommand=useCustomCommand();
    customCommand=getCustomCommand();
    if (useCustomCommand && customCommand != null) {
      if (file.getURL().getProtocol().equals(FileProtocols.FILE) && (file instanceof LocalFile)) {
        try {
          ProcessRunner.execute(customCommand.getTokens(file),file);
        }
 catch (        Exception e) {
          reportGenericError();
        }
      }
 else {
        ProgressDialog progressDialog=new ProgressDialog(mainFrame,Translator.get(""String_Node_Str""));
        TempOpenWithJob job=new TempOpenWithJob(progressDialog,mainFrame,file,customCommand);
        progressDialog.start(job);
      }
    }
 else     performInternalAction(file);
  }
}",0.9766476388168136
44955,"public boolean canViewFile(AbstractFile file){
  return filter.accept(file);
}","public boolean canViewFile(AbstractFile file){
  if (file.isDirectory())   return false;
  return filter.accept(file);
}",0.7878787878787878
44956,"private boolean doGenericChecks(AbstractFile file) throws WarnUserException {
  if (file.getSize() > 1048576)   throw new WarnUserException(Translator.get(""String_Node_Str""));
  InputStream in=null;
  try {
    in=file.getInputStream();
    if (BinaryDetector.guessBinary(in))     throw new WarnUserException(Translator.get(""String_Node_Str""));
  }
 catch (  IOException e) {
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e2) {
      }
    }
  }
  return true;
}","private boolean doGenericChecks(AbstractFile file) throws WarnUserException {
  if (file.isDirectory())   return false;
  if (file.getSize() > 1048576)   throw new WarnUserException(Translator.get(""String_Node_Str""));
  InputStream in=null;
  try {
    in=file.getInputStream();
    if (BinaryDetector.guessBinary(in))     throw new WarnUserException(Translator.get(""String_Node_Str""));
  }
 catch (  IOException e) {
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e2) {
      }
    }
  }
  return true;
}",0.9611111111111112
44957,"public AbstractFile getParent() throws IOException {
  if (!getParentSet) {
    getParent=file.getParent();
    if (recurseInstances)     getParent=new CachedFile(getParent,true);
    getParentSet=true;
  }
  return getParent;
}","public AbstractFile getParent() throws IOException {
  if (!getParentSet) {
    getParent=file.getParent();
    if (recurseInstances && getParent != null)     getParent=new CachedFile(getParent,true);
    getParentSet=true;
  }
  return getParent;
}",0.9559748427672956
44958,"/** 
 * Opens both the active and inactive folder panel's parent directories.
 */
public void performAction(){
synchronized (lock) {
    if (goToParent(mainFrame.getActiveTable().getFolderPanel())) {
      isWaiting=true;
      status=false;
      while (isWaiting) {
        try {
          wait();
        }
 catch (        Exception e) {
        }
      }
      if (status)       goToParent(mainFrame.getInactiveTable().getFolderPanel());
    }
  }
}","/** 
 * Opens both the active and inactive folder panel's parent directories.
 */
public void performAction(){
  Thread openThread;
  AbstractFile parent;
  if ((parent=mainFrame.getActiveTable().getFolderPanel().getCurrentFolder().getParentSilently()) != null) {
    openThread=mainFrame.getActiveTable().getFolderPanel().tryChangeCurrentFolder(parent);
    if ((parent=mainFrame.getInactiveTable().getFolderPanel().getCurrentFolder().getParentSilently()) != null) {
      if (openThread != null) {
        while (openThread.isAlive()) {
          try {
            openThread.join();
          }
 catch (          InterruptedException e) {
          }
        }
      }
      mainFrame.getInactiveTable().getFolderPanel().tryChangeCurrentFolder(parent);
    }
  }
}",0.3721311475409836
44959,"/** 
 * Opens the current selection and its inactive equivalent.
 */
public void performAction(){
synchronized (lock) {
    AbstractFile file;
    AbstractFile otherFile;
    if ((file=mainFrame.getActiveTable().getSelectedFile(true)) == null)     return;
    try {
      if (mainFrame.getActiveTable().isParentFolderSelected())       otherFile=mainFrame.getInactiveTable().getCurrentFolder().getParentSilently();
 else {
        otherFile=mainFrame.getInactiveTable().getCurrentFolder().getDirectChild(file.getName());
        if (!(file.isBrowsable() == otherFile.isBrowsable()))         otherFile=null;
      }
    }
 catch (    Exception e) {
      otherFile=null;
    }
    open(file,mainFrame.getActiveTable().getFolderPanel());
    if (!file.isBrowsable())     open(otherFile,mainFrame.getInactiveTable().getFolderPanel());
 else     if (otherFile != null && otherFile.exists()) {
      isWaiting=true;
      status=true;
      while (isWaiting) {
        try {
          wait();
        }
 catch (        Exception e) {
        }
      }
      if (status)       open(otherFile,mainFrame.getInactiveTable().getFolderPanel());
    }
  }
}","/** 
 * Opens the current selection and its inactive equivalent.
 */
public void performAction(){
  Thread openThread;
  AbstractFile file;
  AbstractFile otherFile;
  if ((file=mainFrame.getActiveTable().getSelectedFile(true)) == null || !file.isBrowsable())   return;
  try {
    if (mainFrame.getActiveTable().isParentFolderSelected())     otherFile=mainFrame.getInactiveTable().getCurrentFolder().getParentSilently();
 else {
      otherFile=mainFrame.getInactiveTable().getCurrentFolder().getDirectChild(file.getName());
      if (!otherFile.exists() && !otherFile.isBrowsable())       otherFile=null;
    }
  }
 catch (  Exception e) {
    otherFile=null;
  }
  openThread=mainFrame.getActiveTable().getFolderPanel().tryChangeCurrentFolder(file);
  if (otherFile != null) {
    if (openThread != null) {
      while (openThread.isAlive()) {
        try {
          openThread.join();
        }
 catch (        InterruptedException e) {
        }
      }
    }
    mainFrame.getInactiveTable().getFolderPanel().tryChangeCurrentFolder(otherFile);
  }
}",0.6718181818181819
44960,"/** 
 * Creates a new <code>OpenInBothPanelsAction</code> with the specified parameters.
 * @param mainFrame  frame to which the action is attached.
 * @param properties action's properties.
 */
public OpenInBothPanelsAction(MainFrame mainFrame,Hashtable properties){
  super(mainFrame,properties);
  mainFrame.getFolderPanel1().getLocationManager().addLocationListener(this);
  mainFrame.getFolderPanel2().getLocationManager().addLocationListener(this);
}","/** 
 * Creates a new <code>OpenInBothPanelsAction</code> with the specified parameters.
 * @param mainFrame  frame to which the action is attached.
 * @param properties action's properties.
 */
public OpenInBothPanelsAction(MainFrame mainFrame,Hashtable properties){
  super(mainFrame,properties);
  setSelectedFileFilter(new AttributeFileFilter(AttributeFileFilter.BROWSABLE));
}",0.7335722819593787
44961,"public void write(byte b[],int off,int len) throws IOException {
  int nbToWrite;
synchronized (bb) {
    bb.position(0);
    nbToWrite=Math.min(bb.capacity(),len);
    bb.limit(nbToWrite);
    bb.put(b,off,nbToWrite);
    bb.position(0);
    channel.write(bb);
  }
}","public void write(byte b[],int off,int len) throws IOException {
  int nbToWrite;
synchronized (bb) {
    do {
      bb.position(0);
      nbToWrite=Math.min(bb.capacity(),len);
      bb.limit(nbToWrite);
      bb.put(b,off,nbToWrite);
      bb.position(0);
      nbToWrite=channel.write(bb);
      len-=nbToWrite;
      off+=nbToWrite;
    }
 while (len > 0);
  }
}",0.8436018957345972
44962,public abstract void performInternalAction(AbstractFile file);,"/** 
 * Opens the specified file without a custom command.
 * @param file file to open.
 */
public abstract void performInternalAction(AbstractFile file);",0.5740740740740741
44963,"/** 
 * Edits the currently selected file.
 */
public synchronized void performAction(){
  AbstractFile file;
  file=mainFrame.getActiveTable().getSelectedFile();
  if (file != null && !(file.isDirectory() || file.isSymlink())) {
    if (useCustomCommand && customCommand != null) {
      if (file.getURL().getProtocol().equals(FileProtocols.FILE) && (file instanceof LocalFile)) {
        try {
          ProcessRunner.execute(customCommand.getTokens(file),file);
        }
 catch (        Exception e) {
          reportGenericError();
        }
      }
 else {
        ProgressDialog progressDialog=new ProgressDialog(mainFrame,Translator.get(""String_Node_Str""));
        TempOpenWithJob job=new TempOpenWithJob(progressDialog,mainFrame,file,customCommand);
        progressDialog.start(job);
      }
    }
 else     performInternalAction(file);
  }
}","/** 
 * Edits the currently selected file.
 */
public synchronized void performAction(){
  AbstractFile file;
  boolean useCustomCommand;
  Command customCommand;
  file=mainFrame.getActiveTable().getSelectedFile();
  if (file != null && !(file.isDirectory() || file.isSymlink())) {
    useCustomCommand=useCustomCommand();
    customCommand=getCustomCommand();
    if (useCustomCommand && customCommand != null) {
      if (file.getURL().getProtocol().equals(FileProtocols.FILE) && (file instanceof LocalFile)) {
        try {
          ProcessRunner.execute(customCommand.getTokens(file),file);
        }
 catch (        Exception e) {
          reportGenericError();
        }
      }
 else {
        ProgressDialog progressDialog=new ProgressDialog(mainFrame,Translator.get(""String_Node_Str""));
        TempOpenWithJob job=new TempOpenWithJob(progressDialog,mainFrame,file,customCommand);
        progressDialog.start(job);
      }
    }
 else     performInternalAction(file);
  }
}",0.9282608695652174
44964,"/** 
 * Sets the custom editor to the specified command.
 * @param command command to use as a custom editor.
 */
protected void setCustomCommand(String command){
  if (command == null)   customCommand=null;
 else   customCommand=new Command(getClass().getName(),command);
}","/** 
 * Sets the command to use to open files.
 * @param command command that will be used to open files.
 */
protected void setCustomCommand(String command){
  putValue(CUSTOM_COMMAND_PROPERTY_KEY,command == null ? null : new Command(getClass().getName(),command));
}",0.3321033210332103
44965,"public AbstractViewerAction(MainFrame mainFrame,Hashtable properties){
  super(mainFrame,properties);
  setSelectedFileFilter(new AttributeFileFilter(AttributeFileFilter.DIRECTORY,true));
  MuConfiguration.addConfigurationListener(this);
}","/** 
 * Creates a new instance of <code>AbstractViewerAction</code>.
 * @param mainFrame  frame to which the action is attached.
 * @param properties action's properties.
 */
public AbstractViewerAction(MainFrame mainFrame,Hashtable properties){
  super(mainFrame,properties);
  setSelectedFileFilter(new AttributeFileFilter(AttributeFileFilter.DIRECTORY,true));
}",0.6268656716417911
44966,"protected void setUseCustomCommand(boolean use){
  useCustomCommand=use;
}","/** 
 * Sets whether or not to use custom commands to open files.
 * @param use whether or not to use custom commands.
 */
protected void setUseCustomCommand(boolean use){
  putValue(USE_CUSTOM_COMMAND_PROPERTY_KEY,new Boolean(use));
}",0.3495145631067961
44967,"public EditAction(MainFrame mainFrame,Hashtable properties){
  super(mainFrame,properties);
  setUseCustomCommand(MuConfiguration.getVariable(MuConfiguration.USE_CUSTOM_EDITOR,MuConfiguration.DEFAULT_USE_CUSTOM_EDITOR));
  setCustomCommand(MuConfiguration.getVariable(MuConfiguration.CUSTOM_EDITOR));
}","/** 
 * Creates a new instance of <code>EditAction</code>.
 * @param mainFrame  frame to which the action is attached.
 * @param properties action's properties.
 */
public EditAction(MainFrame mainFrame,Hashtable properties){
  super(mainFrame,properties);
  setUseCustomCommand(MuConfiguration.getVariable(MuConfiguration.USE_CUSTOM_EDITOR,MuConfiguration.DEFAULT_USE_CUSTOM_EDITOR));
  setCustomCommand(MuConfiguration.getVariable(MuConfiguration.CUSTOM_EDITOR));
  MuConfiguration.addConfigurationListener(this);
}",0.7374847374847375
44968,"public ViewAction(MainFrame mainFrame,Hashtable properties){
  super(mainFrame,properties);
  setUseCustomCommand(MuConfiguration.getVariable(MuConfiguration.USE_CUSTOM_VIEWER,MuConfiguration.DEFAULT_USE_CUSTOM_VIEWER));
  setCustomCommand(MuConfiguration.getVariable(MuConfiguration.CUSTOM_VIEWER));
}","/** 
 * Creates a new instance of <code>ViewAction</code>.
 * @param mainFrame  frame to which the action is attached.
 * @param properties action's properties.
 */
public ViewAction(MainFrame mainFrame,Hashtable properties){
  super(mainFrame,properties);
  setUseCustomCommand(MuConfiguration.getVariable(MuConfiguration.USE_CUSTOM_VIEWER,MuConfiguration.DEFAULT_USE_CUSTOM_VIEWER));
  setCustomCommand(MuConfiguration.getVariable(MuConfiguration.CUSTOM_VIEWER));
  MuConfiguration.addConfigurationListener(this);
}",0.7374847374847375
44969,"public static long getUnitBytes(int unit){
  long bytes;
switch (unit) {
case BYTE_UNIT:
    bytes=1;
  break;
case KILO_BYTE_UNIT:
bytes=KB_1;
break;
case MEGA_BYTE_UNIT:
bytes=MB_1;
break;
case GIGA_BYTE_UNIT:
bytes=GB_1;
break;
case TERA_BYTE_UNIT:
bytes=TB_1;
break;
default :
return 0;
}
return bytes;
}","/** 
 * Returns the size in bytes of the given byte unit, e.g. <code>1024</code> for   {@link #KILOBYTE_UNIT}.
 * @param unit a unit constant, see constant fields for allowed values
 * @return the size in bytes of the given byte unit
 */
public static long getUnitBytes(int unit){
  long bytes;
switch (unit) {
case BYTE_UNIT:
    bytes=1;
  break;
case KILOBYTE_UNIT:
bytes=KB_1;
break;
case MEGABYTE_UNIT:
bytes=MB_1;
break;
case GIGABYTE_UNIT:
bytes=GB_1;
break;
case TERABYTE_UNIT:
bytes=TB_1;
break;
default :
return 0;
}
return bytes;
}",0.7152941176470589
44970,"public static String format(long size,int format){
  if (size < 0)   return ""String_Node_Str"";
  String digitsString;
  String unitString;
  boolean unitLong=(format & UNIT_LONG) != 0;
  boolean unitShort=(format & UNIT_SHORT) != 0;
  boolean noUnit=!(unitLong || unitShort);
  boolean digitsShort=(format & DIGITS_SHORT) != 0;
  boolean roundToKb=(format & ROUND_TO_KB) != 0;
  if ((format & DIGITS_FULL) != 0) {
synchronized (DECIMAL_FORMAT) {
      digitsString=DECIMAL_FORMAT.format(size);
    }
    unitString=unitLong ? BYTES : unitShort ? B : ""String_Node_Str"";
  }
 else {
    if (size < KB_1) {
      if (roundToKb) {
        digitsString=size == 0 ? ""String_Node_Str"" : ""String_Node_Str"";
        unitString=noUnit ? ""String_Node_Str"" : KB;
      }
 else {
        digitsString=""String_Node_Str"" + size;
        unitString=unitLong ? (size <= 1 ? BYTE : BYTES) : unitShort ? B : ""String_Node_Str"";
      }
    }
 else     if (size < KB_10 && !digitsShort) {
      int nKB=(int)size / KB_1;
      digitsString=nKB + DECIMAL_SEPARATOR + ((""String_Node_Str"" + (size - nKB * KB_1) / (float)KB_1).charAt(2));
      unitString=noUnit ? ""String_Node_Str"" : KB;
    }
 else     if (size < MB_1) {
      digitsString=""String_Node_Str"" + size / KB_1;
      unitString=noUnit ? ""String_Node_Str"" : KB;
    }
 else     if (size < MB_10 && !digitsShort) {
      int nMB=(int)size / MB_1;
      digitsString=nMB + DECIMAL_SEPARATOR + ((""String_Node_Str"" + (size - nMB * MB_1) / (float)MB_1).charAt(2));
      unitString=noUnit ? ""String_Node_Str"" : MB;
    }
 else     if (size < GB_1) {
      digitsString=""String_Node_Str"" + size / MB_1;
      unitString=noUnit ? ""String_Node_Str"" : MB;
    }
 else     if (size < GB_10 && !digitsShort) {
      long nGB=size / GB_1;
      digitsString=nGB + DECIMAL_SEPARATOR + ((""String_Node_Str"" + (size - nGB * GB_1) / (float)GB_1).charAt(2));
      unitString=noUnit ? ""String_Node_Str"" : GB;
    }
 else     if (size < TB_1) {
      digitsString=""String_Node_Str"" + size / GB_1;
      unitString=noUnit ? ""String_Node_Str"" : GB;
    }
 else     if (size < TB_10 && !digitsShort) {
      long nTB=size / TB_1;
      digitsString=nTB + DECIMAL_SEPARATOR + ((""String_Node_Str"" + (size - nTB * TB_1) / (float)TB_1).charAt(2));
      unitString=noUnit ? ""String_Node_Str"" : TB;
    }
 else {
      digitsString=""String_Node_Str"" + size / TB_1;
      unitString=noUnit ? ""String_Node_Str"" : TB;
    }
  }
  if ((format & UNIT_SPEED) != 0)   unitString=Translator.get(SPEED_KEY,unitString);
  return digitsString + ((format & INCLUDE_SPACE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"") + unitString;
}","/** 
 * Returns a String representation of the given byte size.
 * @param size the size to format
 * @param format format bitmask, see constant fields for allowed values
 * @return a String representation of the given byte size
 */
public static String format(long size,int format){
  if (size < 0)   return ""String_Node_Str"";
  String digitsString;
  String unitString;
  boolean unitLong=(format & UNIT_LONG) != 0;
  boolean unitShort=(format & UNIT_SHORT) != 0;
  boolean noUnit=!(unitLong || unitShort);
  boolean digitsShort=(format & DIGITS_SHORT) != 0;
  boolean roundToKb=(format & ROUND_TO_KB) != 0;
  if (size < KB_1) {
    if (roundToKb) {
      digitsString=size == 0 ? ""String_Node_Str"" : ""String_Node_Str"";
      unitString=noUnit ? ""String_Node_Str"" : KB;
    }
 else {
      digitsString=""String_Node_Str"" + size;
      unitString=unitLong ? (size <= 1 ? BYTE : BYTES) : unitShort ? B : ""String_Node_Str"";
    }
  }
 else   if ((format & DIGITS_FULL) != 0) {
synchronized (DECIMAL_FORMAT) {
      digitsString=DECIMAL_FORMAT.format(size);
    }
    unitString=unitLong ? BYTES : unitShort ? B : ""String_Node_Str"";
  }
 else {
    if (size < KB_10 && !digitsShort) {
      int nKB=(int)size / KB_1;
      digitsString=nKB + DECIMAL_SEPARATOR + (int)((size - nKB * KB_1) / (float)KB_1 * 10);
      unitString=noUnit ? ""String_Node_Str"" : KB;
    }
 else     if (size < MB_1) {
      digitsString=""String_Node_Str"" + size / KB_1;
      unitString=noUnit ? ""String_Node_Str"" : KB;
    }
 else     if (size < MB_10 && !digitsShort) {
      int nMB=(int)size / MB_1;
      digitsString=nMB + DECIMAL_SEPARATOR + (int)((size - nMB * MB_1) / (float)MB_1 * 10);
      unitString=noUnit ? ""String_Node_Str"" : MB;
    }
 else     if (size < GB_1) {
      digitsString=""String_Node_Str"" + size / MB_1;
      unitString=noUnit ? ""String_Node_Str"" : MB;
    }
 else     if (size < GB_10 && !digitsShort) {
      long nGB=size / GB_1;
      digitsString=nGB + DECIMAL_SEPARATOR + (int)((size - nGB * GB_1) / (double)GB_1 * 10);
      unitString=noUnit ? ""String_Node_Str"" : GB;
    }
 else     if (size < TB_1) {
      digitsString=""String_Node_Str"" + size / GB_1;
      unitString=noUnit ? ""String_Node_Str"" : GB;
    }
 else     if (size < TB_10 && !digitsShort) {
      long nTB=size / TB_1;
      digitsString=nTB + DECIMAL_SEPARATOR + (int)((size - nTB * TB_1) / (double)TB_1 * 10);
      unitString=noUnit ? ""String_Node_Str"" : TB;
    }
 else {
      digitsString=""String_Node_Str"" + size / TB_1;
      unitString=noUnit ? ""String_Node_Str"" : TB;
    }
  }
  if ((format & UNIT_SPEED) != 0)   unitString=Translator.get(SPEED_KEY,unitString);
  return digitsString + ((format & INCLUDE_SPACE) != 0 ? ""String_Node_Str"" : ""String_Node_Str"") + unitString;
}",0.7953281423804227
44971,"public static String getUnitString(int unit,boolean speedUnit){
  String unitString;
switch (unit) {
case BYTE_UNIT:
    unitString=B;
  break;
case KILO_BYTE_UNIT:
unitString=KB;
break;
case MEGA_BYTE_UNIT:
unitString=MB;
break;
case GIGA_BYTE_UNIT:
unitString=GB;
break;
case TERA_BYTE_UNIT:
unitString=TB;
break;
default :
return ""String_Node_Str"";
}
return speedUnit ? Translator.get(SPEED_KEY,unitString) : unitString;
}","public static String getUnitString(int unit,boolean speedUnit){
  String unitString;
switch (unit) {
case BYTE_UNIT:
    unitString=B;
  break;
case KILOBYTE_UNIT:
unitString=KB;
break;
case MEGABYTE_UNIT:
unitString=MB;
break;
case GIGABYTE_UNIT:
unitString=GB;
break;
case TERABYTE_UNIT:
unitString=TB;
break;
default :
return ""String_Node_Str"";
}
return speedUnit ? Translator.get(SPEED_KEY,unitString) : unitString;
}",0.9952718676122932
44972,"public AbstractFile[] ls(FilenameFilter filenameFilter) throws IOException {
  String names[]=file.list();
  if (names == null)   throw new IOException();
  if (filenameFilter != null)   names=filenameFilter.filter(names);
  AbstractFile children[]=new AbstractFile[names.length];
  FileURL childURL;
  for (int i=0; i < names.length; i++) {
    childURL=(FileURL)fileURL.clone();
    childURL.setPath(absPath + SEPARATOR + names[i]);
    children[i]=FileFactory.getFile(childURL,this);
  }
  return children;
}","public AbstractFile[] ls(FilenameFilter filenameFilter) throws IOException {
  String names[]=file.list();
  if (names == null)   throw new IOException();
  if (filenameFilter != null)   names=filenameFilter.filter(names);
  AbstractFile children[]=new AbstractFile[names.length];
  FileURL childURL;
  for (int i=0; i < names.length; i++) {
    childURL=(FileURL)fileURL.clone();
    if (isUNC)     childURL.setPath(addTrailingSeparator(fileURL.getPath()) + names[i]);
 else     childURL.setPath(absPath + SEPARATOR + names[i]);
    children[i]=FileFactory.getFile(childURL,this);
  }
  return children;
}",0.9149507609668756
44973,"/** 
 * Creates a new instance of LocalFile. The given FileURL's protocol should be   {@link FileProtocols#FILE}, and the host   {@link FileURL#LOCALHOST}.  
 */
public LocalFile(FileURL fileURL) throws IOException {
  super(fileURL);
  String path=fileURL.getPath();
  String hostname=fileURL.getHost();
  if (IS_WINDOWS && !FileURL.LOCALHOST.equals(hostname))   path=""String_Node_Str"" + hostname + fileURL.getPath().replace('/','\\');
  this.file=new File(path);
  if (!file.isAbsolute())   throw new IOException();
  this.parentFilePath=file.getParent();
  this.absPath=file.getAbsolutePath();
  this.absPath=absPath.endsWith(SEPARATOR) ? absPath.substring(0,absPath.length() - 1) : absPath;
}","/** 
 * Creates a new instance of LocalFile. The given FileURL's protocol should be   {@link FileProtocols#FILE}, and the host   {@link FileURL#LOCALHOST}.  
 */
public LocalFile(FileURL fileURL) throws IOException {
  super(fileURL);
  String path=fileURL.getPath();
  String hostname=fileURL.getHost();
  if (IS_WINDOWS && !FileURL.LOCALHOST.equals(hostname)) {
    path=""String_Node_Str"" + hostname + fileURL.getPath().replace('/','\\');
    isUNC=true;
  }
  this.file=new File(path);
  if (!file.isAbsolute())   throw new IOException();
  this.parentFilePath=file.getParent();
  this.absPath=file.getAbsolutePath();
  this.absPath=absPath.endsWith(SEPARATOR) ? absPath.substring(0,absPath.length() - 1) : absPath;
}",0.9830508474576272
44974,"/** 
 * Returns <code>true</code> if a quick search is being performed.
 */
public boolean isActive(){
  return timerThread != null;
}","/** 
 * Returns <code>true</code> if a quick search is being performed.
 * @return true if a quick search is being performed
 */
public boolean isActive(){
  return timerThread != null;
}",0.8348909657320872
44975,"public void keyPressed(KeyEvent e){
  if (mainFrame.getNoEventsMode())   return;
  char keyChar=e.getKeyChar();
  if (!isActive()) {
    if ((e.getModifiers() & (KeyEvent.ALT_DOWN_MASK | KeyEvent.CTRL_DOWN_MASK | KeyEvent.META_DOWN_MASK)) != 0 || keyChar < 32 || keyChar == 127 || !Character.isDefined(keyChar))     return;
    if (ActionKeymap.isKeyStrokeRegistered(KeyStroke.getKeyStrokeForEvent(e)))     return;
    start();
  }
  int keyCode=e.getKeyCode();
  if (keyCode == KeyEvent.VK_BACK_SPACE) {
    int searchStringLen=searchString.length();
    if (searchStringLen == 0)     return;
    searchString=searchString.substring(0,searchStringLen - 1);
    if (searchString.length() != 0)     FileTable.this.repaint();
    findMatch(0,true,true);
  }
 else   if (keyCode == KeyEvent.VK_ESCAPE) {
    cancel();
  }
 else   if (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_DOWN) {
    if (e.isShiftDown()) {
      if (!isParentFolderSelected())       setRowMarked(currentRow,!tableModel.isRowMarked(currentRow));
    }
    if (keyCode == KeyEvent.VK_UP)     findMatch(currentRow - 1,false,false);
 else     findMatch(currentRow + 1,true,false);
  }
 else   if ((e.getModifiers() & (KeyEvent.ALT_DOWN_MASK | KeyEvent.CTRL_DOWN_MASK | KeyEvent.META_DOWN_MASK)) == 0 && keyChar >= 32 && keyChar != 127 && Character.isDefined(keyChar)) {
    searchString+=keyChar;
    FileTable.this.repaint();
    findMatch(0,true,true);
  }
 else {
    Class muActionClass=ActionKeymap.getRegisteredActionClassForKeystroke(KeyStroke.getKeyStrokeForEvent(e));
    if (muActionClass != null) {
      e.consume();
      cancel();
      ActionManager.getActionInstance(muActionClass,mainFrame).performAction();
    }
    return;
  }
  lastSearchStringChange=System.currentTimeMillis();
}","public void keyPressed(KeyEvent e){
  if (mainFrame.getNoEventsMode())   return;
  char keyChar=e.getKeyChar();
  if (!isActive()) {
    if (!isValidQuickSearchInput(e))     return;
    if (ActionKeymap.isKeyStrokeRegistered(KeyStroke.getKeyStrokeForEvent(e)))     return;
    start();
  }
  int keyCode=e.getKeyCode();
  if (keyCode == KeyEvent.VK_BACK_SPACE) {
    int searchStringLen=searchString.length();
    if (searchStringLen == 0)     return;
    searchString=searchString.substring(0,searchStringLen - 1);
    if (searchString.length() != 0)     FileTable.this.repaint();
    findMatch(0,true,true);
  }
 else   if (keyCode == KeyEvent.VK_ESCAPE) {
    cancel();
  }
 else   if (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_DOWN) {
    if (e.isShiftDown()) {
      if (!isParentFolderSelected())       setRowMarked(currentRow,!tableModel.isRowMarked(currentRow));
    }
    if (keyCode == KeyEvent.VK_UP)     findMatch(currentRow - 1,false,false);
 else     findMatch(currentRow + 1,true,false);
  }
 else   if (isValidQuickSearchInput(e)) {
    searchString+=keyChar;
    FileTable.this.repaint();
    findMatch(0,true,true);
  }
 else {
    Class muActionClass=ActionKeymap.getRegisteredActionClassForKeystroke(KeyStroke.getKeyStrokeForEvent(e));
    if (muActionClass != null) {
      e.consume();
      cancel();
      ActionManager.getActionInstance(muActionClass,mainFrame).performAction();
    }
    return;
  }
  lastSearchStringChange=System.currentTimeMillis();
}",0.2640122511485451
44976,"/** 
 * Returns <code>true</code> the current quick search string matches the given filename. Always returns <code>false</code> when the quick search is inactive.
 * @param filename the filename to test against the quick search string
 * @return true if the current quick search string matches the given filename
 */
public boolean matches(String filename){
  if (!isActive())   return false;
  return filename.toLowerCase().indexOf(searchString.toLowerCase()) != -1;
}","/** 
 * Returns <code>true</code> the current quick search string matches the given filename. Always returns <code>false</code> when the quick search is inactive.
 * @param filename the filename to test against the quick search string
 * @return true if the current quick search string matches the given filename
 */
public boolean matches(String filename){
  return isActive() && filename.toLowerCase().indexOf(searchString.toLowerCase()) != -1;
}",0.8157033805888768
44977,"public void setLength(long newLength) throws IOException {
  raf.setLength(newLength);
}","public void setLength(long newLength) throws IOException {
  raf.setLength(newLength);
  if (getOffset() > newLength)   raf.seek(newLength);
}",0.7652173913043478
44978,"/** 
 * Registers a FileEditor.
 */
public static void registerFileEditor(EditorFactory factory){
  editorFactories.add(factory);
}","/** 
 * Registers a FileEditor.
 * @param factory file editor factory to register.
 */
public static void registerFileEditor(EditorFactory factory){
  editorFactories.add(factory);
}",0.8370607028753994
44979,"/** 
 * Returns a description of the file currently being edited which will be used as a window title. This method returns the file's path but it can be overridden to provide more information.
 */
public String getTitle(){
  return file.getAbsolutePath();
}","/** 
 * Returns a description of the file currently being edited which will be used as a window title. This method returns the file's path but it can be overridden to provide more information.
 * @return the editor's title.
 */
public String getTitle(){
  return file.getAbsolutePath();
}",0.943119266055046
44980,"/** 
 * This method is invoked when the user asked to save current file to the specified file.
 * @param saveAsFile the file which should be used to save the file currently being edited(path can be different from current file if the user chose 'Save as').
 */
protected abstract void saveAs(AbstractFile saveAsFile) throws IOException ;","/** 
 * This method is invoked when the user asked to save current file to the specified file.
 * @param saveAsFile the file which should be used to save the file currently being edited(path can be different from current file if the user chose 'Save as').
 * @throws IOException if an I/O error occurs.
 */
protected abstract void saveAs(AbstractFile saveAsFile) throws IOException ;",0.7732962447844228
44981,"/** 
 * Sets the EditorFrame (separate window) that contains this FileEditor.
 */
public void setFrame(EditorFrame frame){
  this.frame=frame;
}","/** 
 * Sets the EditorFrame (separate window) that contains this FileEditor.
 * @param frame frame that contains this <code>FileEditor</code>.
 * @see #getFrame()
 */
public void setFrame(EditorFrame frame){
  this.frame=frame;
}",0.7700534759358288
44982,"/** 
 * This method is invoked when the specified file is about to be edited. This method should retrieve the file and do whatever's necessary for this component can be displayed.
 * @param file the file that is about to be edited.
 */
public abstract void edit(AbstractFile file) throws IOException ;","/** 
 * This method is invoked when the specified file is about to be edited. This method should retrieve the file and do whatever's necessary for this component can be displayed.
 * @param file the file that is about to be edited.
 * @throws IOException if an I/O error occurs.
 */
public abstract void edit(AbstractFile file) throws IOException ;",0.7827426810477658
44983,"/** 
 * Returns the frame which contains this editor, may return <code>null</code> if the editor is not inside a EditorFrame.
 */
protected EditorFrame getFrame(){
  return frame;
}","/** 
 * Returns the frame which contains this editor. <p> This method may return <code>null</code> if the editor is not inside a EditorFrame.
 * @return the frame which contains this editor.
 * @see #setFrame(EditorFrame)
 */
protected EditorFrame getFrame(){
  return frame;
}",0.7860262008733624
44984,"/** 
 * Returns maximum file size this FileEditor can handle for sure, -1 if there is no such limit. If a user wish to edit a file that exceeds this size, he/she will be asked if he/she still wants to edit it.
 */
public long getMaxRecommendedSize(){
  return -1;
}","/** 
 * Returns the maximum file size this FileEditor can handle. <p> If there is no maximum limit, returns <code>-1</code>. </p> <p> If a user wish to edit a file that exceeds this size, he/she will be asked if he/she still wants to edit it. </p>
 * @return the maximum file size this <code>FileEditor</code> can handle.
 */
public long getMaxRecommendedSize(){
  return -1;
}",0.7165109034267912
44985,"/** 
 * Sets the file that is to be edited. This method will automatically be called after a file editor is created and should not be called directly.
 */
public final void setCurrentFile(AbstractFile file){
  this.file=file;
}","/** 
 * Sets the file that is to be edited. This method will automatically be called after a file editor is created and should not be called directly.
 * @param file file that is to be edited.
 */
public final void setCurrentFile(AbstractFile file){
  this.file=file;
}",0.9153225806451613
44986,"/** 
 * Returns <code>true</code> if the given file can be handled by this FileEditor.<br> The FileEditor may base its decision only upon the filename and its extension or may wish to read some of the file and compare it to a magic number.
 */
public static boolean canEditFile(AbstractFile file){
  return false;
}","/** 
 * Returns <code>true</code> if the given file can be handled by this FileEditor. <p> The FileEditor may base its decision only upon the filename and its extension or may wish to read some of the file and compare it to a magic number. </p>
 * @param file file that must be checked.
 * @return <code>true</code> if the given file can be handled by this FileEditor, <code>false</code> otherwise.
 */
public static boolean canEditFile(AbstractFile file){
  return false;
}",0.7908745247148289
44987,"/** 
 * This method is invoked when the specified file is about to be viewed. This method should retrieve the file and do the necessary so that this component can be displayed.
 * @param file the file that is about to be viewed.
 */
public abstract void view(AbstractFile file) throws IOException ;","/** 
 * This method is invoked when the specified file is about to be viewed. This method should retrieve the file and do the necessary so that this component can be displayed.
 * @param file        the file that is about to be viewed.
 * @throws IOException if an I/O error occurs.
 */
public abstract void view(AbstractFile file) throws IOException ;",0.7723076923076924
44988,"/** 
 * Returns a description of the file currently being viewed which will be used as a window title. This method returns the file's name but it can be overridden to provide more information.
 */
public String getTitle(){
  return file.getName();
}","/** 
 * Returns a description of the file currently being viewed which will be used as a window title. This method returns the file's name but it can be overridden to provide more information.
 * @return this dialog's title.
 */
public String getTitle(){
  return file.getName();
}",0.939622641509434
44989,"/** 
 * Sets the ViewerFrame (separate window) that contains this FileViewer.
 */
public void setFrame(ViewerFrame frame){
  this.frame=frame;
}","/** 
 * Sets the ViewerFrame (separate window) that contains this FileViewer.
 * @param frame frame that contains this <code>FileViewer</code>.
 * @see #getFrame()
 */
public void setFrame(ViewerFrame frame){
  this.frame=frame;
}",0.7700534759358288
44990,"/** 
 * Returns <code>true</code> if the given file can be handled by this FileViewer.<br> The FileViewer may base its decision only upon the filename and its extension or may wish to read some of the file and compare it to a magic number.
 */
public static boolean canViewFile(AbstractFile file){
  return false;
}","/** 
 * Returns <code>true</code> if the given file can be handled by this FileViewer. <p> The FileViewer may base its decision only upon the filename and its extension or may wish to read some of the file and compare it to a magic number. </p>
 * @param file file that must be checked.
 * @return      <code>true</code> if the given file can be handled by this <code>FileViewer</code>, <code>false</code> otherwise.
 */
public static boolean canViewFile(AbstractFile file){
  return false;
}",0.7732342007434945
44991,"/** 
 * Returns the frame which contains this viewer, may return <code>null</code> if the viewer is not inside a ViewerFrame.
 */
protected ViewerFrame getFrame(){
  return frame;
}","/** 
 * Returns the frame which contains this viewer. <p> This method may return <code>null</code>if the viewer is not inside a ViewerFrame. </p>
 * @return the frame which contains this viewer.
 * @see #setFrame(ViewerFrame)
 */
protected ViewerFrame getFrame(){
  return frame;
}",0.7748917748917749
44992,"/** 
 * Returns maximum file size this FileViewer can handle for sure, -1 if there is no such limit. If a user wish to view a file that exceeds this size, he/she will be asked if he/she still wants to view it.
 */
public long getMaxRecommendedSize(){
  return -1;
}","/** 
 * Returns maximum file size this FileViewer can handle for sure. <p> If there is no maximum limit, returns <code>-1</code>. </p> <p> If a user wish to view a file that exceeds this size, he/she will be asked if he/she still wants to view it. </p>
 * @return the maximum file size this file viewer can handle.
 */
public long getMaxRecommendedSize(){
  return -1;
}",0.752755905511811
44993,"/** 
 * Sets the file that is to be viewed. This method will automatically be called after a file viewer is created and should not be called directly.
 */
public final void setCurrentFile(AbstractFile file){
  this.file=file;
}","/** 
 * Sets the file that is to be viewed. This method will automatically be called after a file viewer is created and should not be called directly.
 * @param file file that is to be viewed.
 */
public final void setCurrentFile(AbstractFile file){
  this.file=file;
}",0.9153225806451613
44994,"/** 
 * Registers a FileViewer.
 */
public static void registerFileViewer(ViewerFactory factory){
  viewerFactories.add(factory);
}","/** 
 * Registers a FileViewer.
 * @param factory file viewer factory to register.
 */
public static void registerFileViewer(ViewerFactory factory){
  viewerFactories.add(factory);
}",0.8370607028753994
44995,"/** 
 * Removes the specified VectorChangeListener from the list of registered listeners.
 * @param listener the VectorChangeListener to remove from the list of registered listeners.
 */
public void removeVectorChangeListener(VectorChangeListener listener){
  listeners.remove(listener);
}","/** 
 * Removes the specified VectorChangeListener from the list of registered listeners.
 * @param listener the VectorChangeListener to remove from the list of registered listeners.
 * @see #addVectorChangeListener(VectorChangeListener)
 */
public void removeVectorChangeListener(VectorChangeListener listener){
  listeners.remove(listener);
}",0.9131121642969984
44996,"/** 
 * Adds the specified VectorChangeListener to the list of registered listeners. <p>Listeners are stored as weak references so   {@link #removeVectorChangeListener(VectorChangeListener)}doesn't need to be called for listeners to be garbage collected when they're not used anymore.</p>
 * @param listener the VectorChangeListener to add to the list of registered listeners.
 */
public void addVectorChangeListener(VectorChangeListener listener){
  listeners.put(listener,null);
}","/** 
 * Adds the specified VectorChangeListener to the list of registered listeners. <p>Listeners are stored as weak references so   {@link #removeVectorChangeListener(VectorChangeListener)}doesn't need to be called for listeners to be garbage collected when they're not used anymore.</p>
 * @param listener the VectorChangeListener to add to the list of registered listeners.
 * @see #removeVectorChangeListener(VectorChangeListener)
 */
public void addVectorChangeListener(VectorChangeListener listener){
  listeners.put(listener,null);
}",0.943248532289628
44997,"/** 
 * Forces CustomDateFormat to update the date format by looking it up in the preferences.
 */
public static void updateDateFormat(){
  dateFormat=createDateFormat();
}","/** 
 * Forces CustomDateFormat to update the date format by looking it up in the preferences.
 */
public static synchronized void updateDateFormat(){
  dateFormat=createDateFormat();
}",0.9635854341736696
44998,"/** 
 * Listens to some configuration variables.
 */
public void configurationChanged(ConfigurationEvent event){
  String var=event.getVariable();
  if (var.equals(MuConfiguration.TIME_FORMAT) || var.equals(MuConfiguration.DATE_FORMAT) || var.equals(MuConfiguration.DATE_SEPARATOR))   dateFormat=createDateFormat();
}","/** 
 * Listens to some configuration variables.
 */
public void configurationChanged(ConfigurationEvent event){
  String var=event.getVariable();
  if (var.equals(MuConfiguration.TIME_FORMAT) || var.equals(MuConfiguration.DATE_FORMAT) || var.equals(MuConfiguration.DATE_SEPARATOR))   updateDateFormat();
}",0.9630818619582664
44999,"/** 
 * Returns an <code>OsVersion</code> instance corresponding to the specified system property's value.
 * @param osVersionProp the value of the ""os.version"" system property
 * @param osFamily the current OS family
 * @return an OsVersion instance corresponding to the specified system property's value
 */
static OsVersion parseSystemProperty(String osVersionProp,OsFamily osFamily){
  OsVersion osVersion;
  if (osFamily == OsFamilies.WINDOWS) {
    if (osVersionProp.equals(""String_Node_Str"")) {
      osVersion=WINDOWS_95;
    }
 else     if (osVersionProp.equals(""String_Node_Str"")) {
      osVersion=WINDOWS_98;
    }
 else     if (osVersionProp.equals(""String_Node_Str"")) {
      osVersion=WINDOWS_ME;
    }
 else     if (osVersionProp.equals(""String_Node_Str"")) {
      osVersion=WINDOWS_NT;
    }
 else     if (osVersionProp.equals(""String_Node_Str"")) {
      osVersion=WINDOWS_2000;
    }
 else     if (osVersionProp.equals(""String_Node_Str"")) {
      osVersion=WINDOWS_XP;
    }
 else     if (osVersionProp.equals(""String_Node_Str"")) {
      osVersion=WINDOWS_2003;
    }
 else     if (osVersionProp.equals(""String_Node_Str"")) {
      osVersion=WINDOWS_VISTA;
    }
 else {
      osVersion=WINDOWS_VISTA;
    }
  }
 else   if (osFamily == OsFamilies.MAC_OS_X) {
    if (osVersionProp.startsWith(""String_Node_Str"")) {
      osVersion=MAC_OS_X_10_5;
    }
 else     if (osVersionProp.startsWith(""String_Node_Str"")) {
      osVersion=MAC_OS_X_10_4;
    }
 else     if (osVersionProp.startsWith(""String_Node_Str"")) {
      osVersion=MAC_OS_X_10_3;
    }
 else     if (osVersionProp.startsWith(""String_Node_Str"")) {
      osVersion=MAC_OS_X_10_2;
    }
 else     if (osVersionProp.startsWith(""String_Node_Str"")) {
      osVersion=MAC_OS_X_10_1;
    }
 else     if (osVersionProp.startsWith(""String_Node_Str"")) {
      osVersion=MAC_OS_X_10_0;
    }
 else {
      osVersion=MAC_OS_X_10_5;
    }
  }
 else {
    osVersion=OsVersions.UNKNOWN_VERSION;
  }
  return osVersion;
}","/** 
 * Returns an <code>OsVersion</code> instance corresponding to the specified system property's value.
 * @param osVersionProp the value of the ""os.version"" system property
 * @param osNameProp the value of the ""os.name"" system property
 * @param osFamily the current OS family
 * @return an OsVersion instance corresponding to the specified system property's value
 */
static OsVersion parseSystemProperty(String osVersionProp,String osNameProp,OsFamily osFamily){
  OsVersion osVersion;
  if (osFamily == OsFamilies.WINDOWS) {
    if (osNameProp.equals(""String_Node_Str"")) {
      osVersion=WINDOWS_95;
    }
 else     if (osNameProp.equals(""String_Node_Str"")) {
      osVersion=WINDOWS_98;
    }
 else     if (osNameProp.equals(""String_Node_Str"")) {
      osVersion=WINDOWS_ME;
    }
 else     if (osNameProp.equals(""String_Node_Str"")) {
      osVersion=WINDOWS_NT;
    }
 else     if (osNameProp.equals(""String_Node_Str"")) {
      osVersion=WINDOWS_2000;
    }
 else     if (osNameProp.equals(""String_Node_Str"")) {
      osVersion=WINDOWS_XP;
    }
 else     if (osNameProp.equals(""String_Node_Str"")) {
      osVersion=WINDOWS_2003;
    }
 else     if (osNameProp.equals(""String_Node_Str"")) {
      osVersion=WINDOWS_VISTA;
    }
 else {
      osVersion=WINDOWS_VISTA;
    }
  }
 else   if (osFamily == OsFamilies.MAC_OS_X) {
    if (osVersionProp.startsWith(""String_Node_Str"")) {
      osVersion=MAC_OS_X_10_5;
    }
 else     if (osVersionProp.startsWith(""String_Node_Str"")) {
      osVersion=MAC_OS_X_10_4;
    }
 else     if (osVersionProp.startsWith(""String_Node_Str"")) {
      osVersion=MAC_OS_X_10_3;
    }
 else     if (osVersionProp.startsWith(""String_Node_Str"")) {
      osVersion=MAC_OS_X_10_2;
    }
 else     if (osVersionProp.startsWith(""String_Node_Str"")) {
      osVersion=MAC_OS_X_10_1;
    }
 else     if (osVersionProp.startsWith(""String_Node_Str"")) {
      osVersion=MAC_OS_X_10_0;
    }
 else {
      osVersion=MAC_OS_X_10_5;
    }
  }
 else {
    osVersion=OsVersions.UNKNOWN_VERSION;
  }
  return osVersion;
}",0.95773247140726
45000,"/** 
 * Determines the current value by parsing the corresponding system property. This method is called automatically by this class the first time the current value is accessed. However, this method has been made public to allow to force the initialization if it needs to happen at a predictable time.
 */
public static void init(){
  if (currentValue == null) {
    currentValue=parseSystemProperty(getRawSystemProperty(),OsFamily.getCurrent());
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + currentValue);
  }
}","/** 
 * Determines the current value by parsing the corresponding system property. This method is called automatically by this class the first time the current value is accessed. However, this method has been made public to allow to force the initialization if it needs to happen at a predictable time.
 */
public static void init(){
  if (currentValue == null) {
    currentValue=parseSystemProperty(getRawSystemProperty(),OsFamily.getRawSystemProperty(),OsFamily.getCurrent());
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + currentValue);
  }
}",0.9702602230483272
