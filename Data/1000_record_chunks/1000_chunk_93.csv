record_number,buggy_code,fixed_code,code_similarity
92001,"/** 
 * Getter/Setter tests
 */
@Test public void testGetAndSetter(){
  EventInfo fixture=new EventInfo(""String_Node_Str"");
  fixture.setEventType(TraceEventType.TRACEPOINT);
  TraceEventType result=fixture.getEventType();
  assertNotNull(result);
  assertEquals(""String_Node_Str"",result.getInName());
  assertEquals(""String_Node_Str"",result.name());
  assertEquals(""String_Node_Str"",result.toString());
  assertEquals(0,result.ordinal());
  fixture.setEventType(TraceEventType.UNKNOWN);
  result=fixture.getEventType();
  assertEquals(""String_Node_Str"",result.getInName());
  assertEquals(""String_Node_Str"",result.name());
  assertEquals(""String_Node_Str"",result.toString());
  assertEquals(3,result.ordinal());
  String typeName=""String_Node_Str"";
  fixture.setEventType(typeName);
  result=fixture.getEventType();
  assertEquals(""String_Node_Str"",result.getInName());
  assertEquals(""String_Node_Str"",result.name());
  assertEquals(""String_Node_Str"",result.toString());
  assertEquals(3,result.ordinal());
  typeName=""String_Node_Str"";
  fixture.setEventType(typeName);
  result=fixture.getEventType();
  assertEquals(""String_Node_Str"",result.getInName());
  assertEquals(""String_Node_Str"",result.name());
  assertEquals(""String_Node_Str"",result.toString());
  assertEquals(3,result.ordinal());
  fixture.setState(""String_Node_Str"");
  TraceEnablement state=fixture.getState();
  assertEquals(""String_Node_Str"",state.getInName());
  assertEquals(""String_Node_Str"",state.name());
  assertEquals(""String_Node_Str"",state.toString());
  assertEquals(0,state.ordinal());
  fixture.setState(""String_Node_Str"");
  state=fixture.getState();
  assertEquals(""String_Node_Str"",state.getInName());
  assertEquals(""String_Node_Str"",state.name());
  assertEquals(""String_Node_Str"",state.toString());
  assertEquals(0,state.ordinal());
  fixture.setState(""String_Node_Str"");
  state=fixture.getState();
  assertEquals(""String_Node_Str"",state.getInName());
  assertEquals(""String_Node_Str"",state.name());
  assertEquals(""String_Node_Str"",state.toString());
  assertEquals(1,state.ordinal());
  fixture.setState(TraceEnablement.DISABLED);
  state=fixture.getState();
  assertEquals(""String_Node_Str"",state.getInName());
  assertEquals(""String_Node_Str"",state.name());
  assertEquals(""String_Node_Str"",state.toString());
  assertEquals(0,state.ordinal());
  fixture.setState(TraceEnablement.ENABLED);
  state=fixture.getState();
  assertEquals(""String_Node_Str"",state.getInName());
  assertEquals(""String_Node_Str"",state.name());
  assertEquals(""String_Node_Str"",state.toString());
  assertEquals(1,state.ordinal());
}","/** 
 * Getter/Setter tests
 */
@Test public void testGetAndSetter(){
  EventInfo fixture=new EventInfo(""String_Node_Str"");
  fixture.setEventType(TraceEventType.TRACEPOINT);
  TraceEventType result=fixture.getEventType();
  assertNotNull(result);
  assertEquals(""String_Node_Str"",result.getInName());
  assertEquals(""String_Node_Str"",result.name());
  assertEquals(""String_Node_Str"",result.toString());
  assertEquals(0,result.ordinal());
  fixture.setEventType(TraceEventType.UNKNOWN);
  result=fixture.getEventType();
  assertEquals(""String_Node_Str"",result.getInName());
  assertEquals(""String_Node_Str"",result.name());
  assertEquals(""String_Node_Str"",result.toString());
  assertEquals(4,result.ordinal());
  String typeName=""String_Node_Str"";
  fixture.setEventType(typeName);
  result=fixture.getEventType();
  assertEquals(""String_Node_Str"",result.getInName());
  assertEquals(""String_Node_Str"",result.name());
  assertEquals(""String_Node_Str"",result.toString());
  assertEquals(4,result.ordinal());
  typeName=""String_Node_Str"";
  fixture.setEventType(typeName);
  result=fixture.getEventType();
  assertEquals(""String_Node_Str"",result.getInName());
  assertEquals(""String_Node_Str"",result.name());
  assertEquals(""String_Node_Str"",result.toString());
  assertEquals(4,result.ordinal());
  fixture.setState(""String_Node_Str"");
  TraceEnablement state=fixture.getState();
  assertEquals(""String_Node_Str"",state.getInName());
  assertEquals(""String_Node_Str"",state.name());
  assertEquals(""String_Node_Str"",state.toString());
  assertEquals(0,state.ordinal());
  fixture.setState(""String_Node_Str"");
  state=fixture.getState();
  assertEquals(""String_Node_Str"",state.getInName());
  assertEquals(""String_Node_Str"",state.name());
  assertEquals(""String_Node_Str"",state.toString());
  assertEquals(0,state.ordinal());
  fixture.setState(""String_Node_Str"");
  state=fixture.getState();
  assertEquals(""String_Node_Str"",state.getInName());
  assertEquals(""String_Node_Str"",state.name());
  assertEquals(""String_Node_Str"",state.toString());
  assertEquals(1,state.ordinal());
  fixture.setState(TraceEnablement.DISABLED);
  state=fixture.getState();
  assertEquals(""String_Node_Str"",state.getInName());
  assertEquals(""String_Node_Str"",state.name());
  assertEquals(""String_Node_Str"",state.toString());
  assertEquals(0,state.ordinal());
  fixture.setState(TraceEnablement.ENABLED);
  state=fixture.getState();
  assertEquals(""String_Node_Str"",state.getInName());
  assertEquals(""String_Node_Str"",state.name());
  assertEquals(""String_Node_Str"",state.toString());
  assertEquals(1,state.ordinal());
}",0.9988474836726854
92002,"public ModelImplFactory(){
  fFieldInfo1=new FieldInfo(""String_Node_Str"");
  fFieldInfo1.setFieldType(""String_Node_Str"");
  fFieldInfo2=new FieldInfo(""String_Node_Str"");
  fFieldInfo2.setFieldType(""String_Node_Str"");
  fBaseEventInfo1=new BaseEventInfo(""String_Node_Str"");
  fBaseEventInfo1.setEventType(TraceEventType.UNKNOWN);
  fBaseEventInfo1.setLogLevel(TraceLogLevel.TRACE_ERR);
  fBaseEventInfo1.addField(fFieldInfo1);
  fBaseEventInfo1.addField(fFieldInfo2);
  fBaseEventInfo1.setFilterExpression(""String_Node_Str"");
  fBaseEventInfo2=new BaseEventInfo(""String_Node_Str"");
  fBaseEventInfo2.setEventType(TraceEventType.TRACEPOINT);
  fBaseEventInfo1.setLogLevel(TraceLogLevel.TRACE_DEBUG);
  fEventInfo1=new EventInfo(""String_Node_Str"");
  fEventInfo1.setEventType(TraceEventType.TRACEPOINT);
  fEventInfo1.setState(TraceEnablement.ENABLED);
  fEventInfo2=new EventInfo(""String_Node_Str"");
  fEventInfo2.setEventType(TraceEventType.UNKNOWN);
  fEventInfo2.setState(TraceEnablement.DISABLED);
  fEventInfo3=new EventInfo(""String_Node_Str"");
  fEventInfo3.setEventType(TraceEventType.TRACEPOINT);
  fEventInfo3.setState(TraceEnablement.DISABLED);
  fUstProviderInfo1=new UstProviderInfo(""String_Node_Str"");
  fUstProviderInfo1.setPid(1234);
  fUstProviderInfo1.addEvent(fBaseEventInfo1);
  fUstProviderInfo2=new UstProviderInfo(""String_Node_Str"");
  fUstProviderInfo2.setPid(2345);
  fUstProviderInfo2.addEvent(fBaseEventInfo1);
  fUstProviderInfo2.addEvent(fBaseEventInfo2);
  fChannelInfo1=new ChannelInfo(""String_Node_Str"");
  fChannelInfo1.setSwitchTimer(10L);
  fChannelInfo1.setOverwriteMode(true);
  fChannelInfo1.setReadTimer(11L);
  fChannelInfo1.setState(TraceEnablement.DISABLED);
  fChannelInfo1.setNumberOfSubBuffers(12);
  fChannelInfo1.setOutputType(""String_Node_Str"");
  fChannelInfo1.setSubBufferSize(13L);
  fChannelInfo1.addEvent(fEventInfo1);
  fChannelInfo2=new ChannelInfo(""String_Node_Str"");
  fChannelInfo2.setSwitchTimer(1L);
  fChannelInfo2.setOverwriteMode(false);
  fChannelInfo2.setReadTimer(2L);
  fChannelInfo2.setState(TraceEnablement.ENABLED);
  fChannelInfo2.setNumberOfSubBuffers(3);
  fChannelInfo2.setOutputType(""String_Node_Str"");
  fChannelInfo2.setSubBufferSize(4L);
  fChannelInfo2.addEvent(fEventInfo2);
  fChannelInfo2.addEvent(fEventInfo3);
  fDomainInfo1=new DomainInfo(""String_Node_Str"");
  fDomainInfo1.addChannel(fChannelInfo1);
  fDomainInfo2=new DomainInfo(""String_Node_Str"");
  fDomainInfo2.addChannel(fChannelInfo1);
  fDomainInfo2.addChannel(fChannelInfo2);
  fSessionInfo1=new SessionInfo(""String_Node_Str"");
  fSessionInfo1.setSessionPath(""String_Node_Str"");
  fSessionInfo1.setSessionState(TraceSessionState.ACTIVE);
  fSessionInfo1.addDomain(fDomainInfo1);
  fSessionInfo2=new SessionInfo(""String_Node_Str"");
  fSessionInfo2.setSessionPath(""String_Node_Str"");
  fSessionInfo2.setSessionState(TraceSessionState.INACTIVE);
  fSessionInfo2.addDomain(fDomainInfo1);
  fSessionInfo2.addDomain(fDomainInfo2);
  fSessionInfo2.setStreamedTrace(true);
  fProbeEventInfo1=new ProbeEventInfo(""String_Node_Str"");
  fProbeEventInfo1.setEventType(TraceEventType.TRACEPOINT);
  fProbeEventInfo1.setState(TraceEnablement.ENABLED);
  fProbeEventInfo1.setAddress(""String_Node_Str"");
  fProbeEventInfo2=new ProbeEventInfo(""String_Node_Str"");
  fProbeEventInfo2.setEventType(TraceEventType.UNKNOWN);
  fProbeEventInfo2.setState(TraceEnablement.DISABLED);
  fProbeEventInfo2.setOffset(""String_Node_Str"");
  fProbeEventInfo2.setSymbol(""String_Node_Str"");
  fSnapshotInfo1=new SnapshotInfo(""String_Node_Str"");
  fSnapshotInfo1.setId(1);
  fSnapshotInfo1.setSnapshotPath(""String_Node_Str"");
  fSnapshotInfo2=new SnapshotInfo(""String_Node_Str"");
  fSnapshotInfo2.setId(1);
  fSnapshotInfo2.setSnapshotPath(""String_Node_Str"");
  fSnapshotInfo2.setStreamedSnapshot(true);
  fSessionInfo1.setSnapshotInfo(fSnapshotInfo1);
}","public ModelImplFactory(){
  fFieldInfo1=new FieldInfo(""String_Node_Str"");
  fFieldInfo1.setFieldType(""String_Node_Str"");
  fFieldInfo2=new FieldInfo(""String_Node_Str"");
  fFieldInfo2.setFieldType(""String_Node_Str"");
  fBaseEventInfo1=new BaseEventInfo(""String_Node_Str"");
  fBaseEventInfo1.setEventType(TraceEventType.UNKNOWN);
  fBaseEventInfo1.setLogLevel(TraceLogLevel.TRACE_ERR);
  fBaseEventInfo1.addField(fFieldInfo1);
  fBaseEventInfo1.addField(fFieldInfo2);
  fBaseEventInfo1.setFilterExpression(""String_Node_Str"");
  fBaseEventInfo2=new BaseEventInfo(""String_Node_Str"");
  fBaseEventInfo2.setEventType(TraceEventType.TRACEPOINT);
  fBaseEventInfo1.setLogLevel(TraceLogLevel.TRACE_DEBUG);
  fEventInfo1=new EventInfo(""String_Node_Str"");
  fEventInfo1.setEventType(TraceEventType.TRACEPOINT);
  fEventInfo1.setState(TraceEnablement.ENABLED);
  fEventInfo2=new EventInfo(""String_Node_Str"");
  fEventInfo2.setEventType(TraceEventType.UNKNOWN);
  fEventInfo2.setState(TraceEnablement.DISABLED);
  fEventInfo3=new EventInfo(""String_Node_Str"");
  fEventInfo3.setEventType(TraceEventType.TRACEPOINT);
  fEventInfo3.setState(TraceEnablement.DISABLED);
  fUstProviderInfo1=new UstProviderInfo(""String_Node_Str"");
  fUstProviderInfo1.setPid(1234);
  fUstProviderInfo1.addEvent(fBaseEventInfo1);
  fUstProviderInfo2=new UstProviderInfo(""String_Node_Str"");
  fUstProviderInfo2.setPid(2345);
  fUstProviderInfo2.addEvent(fBaseEventInfo1);
  fUstProviderInfo2.addEvent(fBaseEventInfo2);
  fChannelInfo1=new ChannelInfo(""String_Node_Str"");
  fChannelInfo1.setSwitchTimer(10L);
  fChannelInfo1.setOverwriteMode(true);
  fChannelInfo1.setReadTimer(11L);
  fChannelInfo1.setState(TraceEnablement.DISABLED);
  fChannelInfo1.setNumberOfSubBuffers(12);
  fChannelInfo1.setOutputType(""String_Node_Str"");
  fChannelInfo1.setSubBufferSize(13L);
  fChannelInfo1.addEvent(fEventInfo1);
  fChannelInfo2=new ChannelInfo(""String_Node_Str"");
  fChannelInfo2.setSwitchTimer(1L);
  fChannelInfo2.setOverwriteMode(false);
  fChannelInfo2.setReadTimer(2L);
  fChannelInfo2.setState(TraceEnablement.ENABLED);
  fChannelInfo2.setNumberOfSubBuffers(3);
  fChannelInfo2.setOutputType(""String_Node_Str"");
  fChannelInfo2.setSubBufferSize(4L);
  fChannelInfo2.addEvent(fEventInfo2);
  fChannelInfo2.addEvent(fEventInfo3);
  fDomainInfo1=new DomainInfo(""String_Node_Str"");
  fDomainInfo1.addChannel(fChannelInfo1);
  fDomainInfo2=new DomainInfo(""String_Node_Str"");
  fDomainInfo2.addChannel(fChannelInfo1);
  fDomainInfo2.addChannel(fChannelInfo2);
  fSessionInfo1=new SessionInfo(""String_Node_Str"");
  fSessionInfo1.setSessionPath(""String_Node_Str"");
  fSessionInfo1.setSessionState(TraceSessionState.ACTIVE);
  fSessionInfo1.addDomain(fDomainInfo1);
  fSessionInfo2=new SessionInfo(""String_Node_Str"");
  fSessionInfo2.setSessionPath(""String_Node_Str"");
  fSessionInfo2.setSessionState(TraceSessionState.INACTIVE);
  fSessionInfo2.addDomain(fDomainInfo1);
  fSessionInfo2.addDomain(fDomainInfo2);
  fSessionInfo2.setStreamedTrace(true);
  fProbeEventInfo1=new ProbeEventInfo(""String_Node_Str"");
  fProbeEventInfo1.setEventType(TraceEventType.TRACEPOINT);
  fProbeEventInfo1.setState(TraceEnablement.ENABLED);
  fProbeEventInfo1.setAddress(""String_Node_Str"");
  fProbeEventInfo2=new ProbeEventInfo(""String_Node_Str"");
  fProbeEventInfo2.setEventType(TraceEventType.FUNCTION);
  fProbeEventInfo2.setState(TraceEnablement.DISABLED);
  fProbeEventInfo2.setOffset(""String_Node_Str"");
  fProbeEventInfo2.setSymbol(""String_Node_Str"");
  fSnapshotInfo1=new SnapshotInfo(""String_Node_Str"");
  fSnapshotInfo1.setId(1);
  fSnapshotInfo1.setSnapshotPath(""String_Node_Str"");
  fSnapshotInfo2=new SnapshotInfo(""String_Node_Str"");
  fSnapshotInfo2.setId(1);
  fSnapshotInfo2.setSnapshotPath(""String_Node_Str"");
  fSnapshotInfo2.setStreamedSnapshot(true);
  fSessionInfo1.setSnapshotInfo(fSnapshotInfo1);
}",0.999092911753272
92003,"/** 
 * Run the BaseEventInfo() constructor test.
 */
@Test public void testBaseEventInfo(){
  ProbeEventInfo fixture=new ProbeEventInfo(""String_Node_Str"");
  assertNotNull(fixture);
  TraceEventType result=fixture.getEventType();
  assertEquals(""String_Node_Str"",fixture.getName());
  assertEquals(""String_Node_Str"",result.getInName());
  assertEquals(""String_Node_Str"",result.name());
  assertEquals(""String_Node_Str"",result.toString());
  assertEquals(3,result.ordinal());
  TraceEnablement state=fixture.getState();
  assertEquals(""String_Node_Str"",state.getInName());
  assertEquals(""String_Node_Str"",state.name());
  assertEquals(""String_Node_Str"",state.toString());
  assertEquals(0,state.ordinal());
  assertNull(fixture.getAddress());
  assertNull(fixture.getOffset());
  assertNull(fixture.getSymbol());
}","/** 
 * Run the BaseEventInfo() constructor test.
 */
@Test public void testBaseEventInfo(){
  ProbeEventInfo fixture=new ProbeEventInfo(""String_Node_Str"");
  assertNotNull(fixture);
  TraceEventType result=fixture.getEventType();
  assertEquals(""String_Node_Str"",fixture.getName());
  assertEquals(""String_Node_Str"",result.getInName());
  assertEquals(""String_Node_Str"",result.name());
  assertEquals(""String_Node_Str"",result.toString());
  assertEquals(4,result.ordinal());
  TraceEnablement state=fixture.getState();
  assertEquals(""String_Node_Str"",state.getInName());
  assertEquals(""String_Node_Str"",state.name());
  assertEquals(""String_Node_Str"",state.toString());
  assertEquals(0,state.ordinal());
  assertNull(fixture.getAddress());
  assertNull(fixture.getOffset());
  assertNull(fixture.getSymbol());
}",0.9987730061349692
92004,"@Override public void setEventType(String typeName){
  if (TraceEventType.TRACEPOINT.getInName().equals(typeName)) {
    fEventType=TraceEventType.TRACEPOINT;
  }
 else   if (TraceEventType.SYSCALL.getInName().equals(typeName)) {
    fEventType=TraceEventType.SYSCALL;
  }
 else   if (TraceEventType.PROBE.getInName().equals(typeName)) {
    fEventType=TraceEventType.PROBE;
  }
 else {
    fEventType=TraceEventType.UNKNOWN;
  }
}","@Override public void setEventType(String typeName){
  if (TraceEventType.TRACEPOINT.getInName().equals(typeName)) {
    fEventType=TraceEventType.TRACEPOINT;
  }
 else   if (TraceEventType.SYSCALL.getInName().equals(typeName)) {
    fEventType=TraceEventType.SYSCALL;
  }
 else   if (TraceEventType.PROBE.getInName().equals(typeName)) {
    fEventType=TraceEventType.PROBE;
  }
 else   if (TraceEventType.FUNCTION.getInName().equals(typeName)) {
    fEventType=TraceEventType.FUNCTION;
  }
 else {
    fEventType=TraceEventType.UNKNOWN;
  }
}",0.8850102669404517
92005,"/** 
 * Run the TraceControlComponent.
 * @throws Exception Would fail the test
 */
@Test public void testTraceSessionTree() throws Exception {
  fProxy.setTestFile(fTestFile);
  fProxy.setScenario(TraceControlTestFacility.SCEN_INIT_TEST);
  ITraceControlComponent root=fFacility.getControlView().getTraceControlRoot();
  ISystemRegistry registry=RSECorePlugin.getTheSystemRegistry();
  ISystemProfile profile=registry.createSystemProfile(""String_Node_Str"",true);
  IHost host=registry.createLocalHost(profile,""String_Node_Str"",""String_Node_Str"");
  TargetNodeComponent node=new TargetNodeComponent(""String_Node_Str"",root,host,fProxy);
  root.addChild(node);
  fFacility.waitForJobs();
  fFacility.executeCommand(node,""String_Node_Str"");
  int i=0;
  while ((i < 10) && (node.getTargetNodeState() != TargetNodeState.CONNECTED)) {
    i++;
    fFacility.delay(TraceControlTestFacility.GUI_REFESH_DELAY);
  }
  assertEquals(TargetNodeState.CONNECTED,node.getTargetNodeState());
  ITraceControlComponent[] groups=node.getChildren();
  assertNotNull(groups);
  assertEquals(2,groups.length);
  TraceControlDialogFactory.getInstance().setCreateSessionDialog(new CreateSessionDialogStub());
  TraceControlDialogFactory.getInstance().setGetEventInfoDialog(new GetEventInfoDialogStub());
  TraceControlDialogFactory.getInstance().setConfirmDialog(new DestroyConfirmDialogStub());
  fProxy.setScenario(TraceControlTestFacility.SCEN_SCENARIO_SESSION_HANDLING);
  TraceSessionComponent session=fFacility.createSession(groups[1]);
  assertNotNull(session);
  assertEquals(""String_Node_Str"",session.getName());
  assertEquals(""String_Node_Str"",session.getSessionPath());
  assertEquals(TraceSessionState.INACTIVE,session.getSessionState());
  fProxy.setScenario(SCEN_SCENARIO3_TEST);
  EnableChannelDialogStub channelStub=new EnableChannelDialogStub();
  channelStub.setIsKernel(true);
  TraceControlDialogFactory.getInstance().setEnableChannelDialog(channelStub);
  fFacility.executeCommand(session,""String_Node_Str"");
  ITraceControlComponent[] domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  assertEquals(""String_Node_Str"",domains[0].getName());
  ITraceControlComponent[] channels=domains[0].getChildren();
  assertNotNull(channels);
  assertEquals(1,channels.length);
  assertTrue(channels[0] instanceof TraceChannelComponent);
  TraceChannelComponent channel=(TraceChannelComponent)channels[0];
  assertEquals(""String_Node_Str"",channel.getName());
  assertEquals(4,channel.getNumberOfSubBuffers());
  assertEquals(""String_Node_Str"",channel.getOutputType());
  assertEquals(true,channel.isOverwriteMode());
  assertEquals(200,channel.getReadTimer());
  assertEquals(TraceEnablement.ENABLED,channel.getState());
  assertEquals(16384,channel.getSubBufferSize());
  assertEquals(100,channel.getSwitchTimer());
  ChannelInfo info=(ChannelInfo)channelStub.getChannelInfo();
  info.setName(""String_Node_Str"");
  info.setOverwriteMode(false);
  info.setSubBufferSize(32768);
  info.setNumberOfSubBuffers(2);
  info.setSwitchTimer(100);
  info.setReadTimer(200);
  channelStub.setChannelInfo(info);
  fFacility.executeCommand(domains[0],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  assertNotNull(channels);
  assertEquals(2,channels.length);
  assertTrue(channels[1] instanceof TraceChannelComponent);
  channel=(TraceChannelComponent)channels[1];
  assertEquals(""String_Node_Str"",channel.getName());
  assertEquals(2,channel.getNumberOfSubBuffers());
  assertEquals(""String_Node_Str"",channel.getOutputType());
  assertEquals(false,channel.isOverwriteMode());
  assertEquals(200,channel.getReadTimer());
  assertEquals(TraceEnablement.ENABLED,channel.getState());
  assertEquals(32768,channel.getSubBufferSize());
  assertEquals(100,channel.getSwitchTimer());
  EnableEventsDialogStub eventsDialogStub=new EnableEventsDialogStub();
  eventsDialogStub.setIsTracePoints(true);
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"");
  eventsDialogStub.setNames(events);
  eventsDialogStub.setIsKernel(true);
  TraceControlDialogFactory.getInstance().setEnableEventsDialog(eventsDialogStub);
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  assertNotNull(channels);
  assertEquals(2,channels.length);
  fFacility.executeCommand(channels,""String_Node_Str"");
  assertEquals(TraceEnablement.DISABLED,((TraceChannelComponent)channels[0]).getState());
  assertEquals(TraceEnablement.DISABLED,((TraceChannelComponent)channels[1]).getState());
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  assertNotNull(channels);
  assertEquals(2,channels.length);
  fFacility.executeCommand(channels,""String_Node_Str"");
  assertEquals(TraceEnablement.ENABLED,((TraceChannelComponent)channels[0]).getState());
  assertEquals(TraceEnablement.ENABLED,((TraceChannelComponent)channels[1]).getState());
  fFacility.executeCommand(session,""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  assertNotNull(channels);
  assertEquals(3,channels.length);
  assertTrue(channels[2] instanceof TraceChannelComponent);
  channel=(TraceChannelComponent)channels[2];
  assertEquals(""String_Node_Str"",channel.getName());
  ITraceControlComponent[] channel0Events=channel.getChildren();
  assertEquals(2,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceEventComponent);
  assertTrue(channel0Events[1] instanceof TraceEventComponent);
  TraceEventComponent event=(TraceEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.TRACE_EMERG,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  event=(TraceEventComponent)channel0Events[1];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.TRACE_EMERG,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  events.clear();
  events.add(""String_Node_Str"");
  eventsDialogStub.setNames(events);
  fFacility.executeCommand(domains[0],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[2];
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  assertEquals(3,channel0Events.length);
  assertTrue(channel0Events[2] instanceof TraceEventComponent);
  event=(TraceEventComponent)channel0Events[2];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.TRACE_EMERG,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  events.clear();
  eventsDialogStub.setNames(events);
  eventsDialogStub.setIsAllTracePoints(true);
  fFacility.executeCommand(channels[1],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[1];
  channel0Events=channel.getChildren();
  assertEquals(3,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceEventComponent);
  assertTrue(channel0Events[1] instanceof TraceEventComponent);
  assertTrue(channel0Events[2] instanceof TraceEventComponent);
  event=(TraceEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.TRACE_EMERG,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  event=(TraceEventComponent)channel0Events[1];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.TRACE_EMERG,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  event=(TraceEventComponent)channel0Events[2];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.TRACE_EMERG,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  events.clear();
  eventsDialogStub.setIsTracePoints(false);
  eventsDialogStub.setIsAllTracePoints(false);
  eventsDialogStub.setIsSysCalls(true);
  fFacility.executeCommand(channels[0],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[0];
  channel=(TraceChannelComponent)channels[0];
  channel0Events=channel.getChildren();
  assertEquals(1,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceEventComponent);
  event=(TraceEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,event.getLogLevel());
  assertEquals(TraceEventType.SYSCALL,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  fFacility.executeCommand(domains[0],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[0];
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  assertEquals(4,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceEventComponent);
  event=(TraceEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,event.getLogLevel());
  assertEquals(TraceEventType.SYSCALL,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  fFacility.executeCommand(session,""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[0];
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  assertEquals(4,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceEventComponent);
  event=(TraceEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,event.getLogLevel());
  assertEquals(TraceEventType.SYSCALL,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  events.clear();
  eventsDialogStub.setIsSysCalls(false);
  eventsDialogStub.setIsDynamicProbe(true);
  eventsDialogStub.setDynamicProbe(""String_Node_Str"");
  eventsDialogStub.setProbeEventName(""String_Node_Str"");
  fFacility.executeCommand(domains[0],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  assertEquals(5,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceProbeEventComponent);
  TraceProbeEventComponent probeEvent=(TraceProbeEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",probeEvent.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,probeEvent.getLogLevel());
  assertEquals(TraceEventType.PROBE,probeEvent.getEventType());
  assertEquals(TraceEnablement.ENABLED,probeEvent.getState());
  assertNull(probeEvent.getOffset());
  assertEquals(""String_Node_Str"",probeEvent.getAddress());
  assertNull(probeEvent.getSymbol());
  eventsDialogStub.setIsDynamicProbe(true);
  eventsDialogStub.setDynamicProbe(""String_Node_Str"");
  eventsDialogStub.setProbeEventName(""String_Node_Str"");
  fFacility.executeCommand(channels[2],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  assertEquals(6,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceProbeEventComponent);
  probeEvent=(TraceProbeEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",probeEvent.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,probeEvent.getLogLevel());
  assertEquals(TraceEventType.PROBE,probeEvent.getEventType());
  assertEquals(TraceEnablement.ENABLED,probeEvent.getState());
  assertEquals(""String_Node_Str"",probeEvent.getOffset());
  assertNull(null,probeEvent.getAddress());
  assertEquals(""String_Node_Str"",probeEvent.getSymbol());
  eventsDialogStub.setIsDynamicProbe(true);
  eventsDialogStub.setDynamicProbe(""String_Node_Str"");
  eventsDialogStub.setProbeEventName(""String_Node_Str"");
  fFacility.executeCommand(session,""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  assertEquals(7,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceProbeEventComponent);
  probeEvent=(TraceProbeEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",probeEvent.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,probeEvent.getLogLevel());
  assertEquals(TraceEventType.PROBE,probeEvent.getEventType());
  assertEquals(TraceEnablement.ENABLED,probeEvent.getState());
  assertEquals(""String_Node_Str"",probeEvent.getOffset());
  assertNull(null,probeEvent.getAddress());
  assertEquals(""String_Node_Str"",probeEvent.getSymbol());
  eventsDialogStub.setIsDynamicProbe(false);
  eventsDialogStub.setDynamicProbe(null);
  eventsDialogStub.setProbeEventName(null);
  eventsDialogStub.setIsFunctionProbe(true);
  eventsDialogStub.setFunctionEventName(""String_Node_Str"");
  eventsDialogStub.setFunctionProbe(""String_Node_Str"");
  fFacility.executeCommand(session,""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  assertEquals(8,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceProbeEventComponent);
  probeEvent=(TraceProbeEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",probeEvent.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,probeEvent.getLogLevel());
  assertEquals(TraceEventType.PROBE,probeEvent.getEventType());
  assertEquals(TraceEnablement.ENABLED,probeEvent.getState());
  assertEquals(""String_Node_Str"",probeEvent.getOffset());
  assertNull(null,probeEvent.getAddress());
  assertEquals(""String_Node_Str"",probeEvent.getSymbol());
  eventsDialogStub.setIsFunctionProbe(true);
  eventsDialogStub.setFunctionEventName(""String_Node_Str"");
  eventsDialogStub.setFunctionProbe(""String_Node_Str"");
  fFacility.executeCommand(domains[0],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  assertEquals(9,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceProbeEventComponent);
  probeEvent=(TraceProbeEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",probeEvent.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,probeEvent.getLogLevel());
  assertEquals(TraceEventType.PROBE,probeEvent.getEventType());
  assertEquals(TraceEnablement.ENABLED,probeEvent.getState());
  assertEquals(""String_Node_Str"",probeEvent.getOffset());
  assertNull(null,probeEvent.getAddress());
  assertEquals(""String_Node_Str"",probeEvent.getSymbol());
  eventsDialogStub.setIsFunctionProbe(true);
  eventsDialogStub.setFunctionEventName(""String_Node_Str"");
  eventsDialogStub.setFunctionProbe(""String_Node_Str"");
  fFacility.executeCommand(channels[0],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[0];
  channel0Events=channel.getChildren();
  assertEquals(2,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceProbeEventComponent);
  probeEvent=(TraceProbeEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",probeEvent.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,probeEvent.getLogLevel());
  assertEquals(TraceEventType.PROBE,probeEvent.getEventType());
  assertEquals(TraceEnablement.ENABLED,probeEvent.getState());
  assertEquals(""String_Node_Str"",probeEvent.getOffset());
  assertNull(null,probeEvent.getAddress());
  assertEquals(""String_Node_Str"",probeEvent.getSymbol());
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  AddContextDialogStub addContextStub=new AddContextDialogStub();
  List<String> contexts=new ArrayList<String>();
  contexts.add(""String_Node_Str"");
  contexts.add(""String_Node_Str"");
  contexts.add(""String_Node_Str"");
  addContextStub.setContexts(contexts);
  TraceControlDialogFactory.getInstance().setAddContextDialog(addContextStub);
  fFacility.executeCommand(domains[0],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[0];
  try {
    addContextStub.setContexts(contexts);
  }
 catch (  IllegalArgumentException e) {
    fail(""String_Node_Str"");
  }
  fFacility.executeCommand(channel,""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  event=(TraceEventComponent)channel0Events[6];
  fFacility.executeCommand(event,""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  fFacility.executeCommand(domains[0],""String_Node_Str"");
  fFacility.executeCommand(node,""String_Node_Str"");
  groups=node.getChildren();
  assertNotNull(groups);
  assertEquals(2,groups.length);
  assertEquals(3,groups[0].getChildren().length);
  assertEquals(1,groups[1].getChildren().length);
  assertEquals(1,groups[1].getChildren()[0].getChildren().length);
  assertEquals(3,groups[1].getChildren()[0].getChildren()[0].getChildren().length);
  assertEquals(2,groups[1].getChildren()[0].getChildren()[0].getChildren()[0].getChildren().length);
  fProxy.setScenario(TraceControlTestFacility.SCEN_SCENARIO_SESSION_HANDLING);
  session=(TraceSessionComponent)groups[1].getChildren()[0];
  fFacility.startSession(session);
  assertEquals(TraceSessionState.ACTIVE,session.getSessionState());
  fFacility.stopSession(session);
  assertEquals(TraceSessionState.INACTIVE,session.getSessionState());
  fFacility.destroySession(session);
  assertEquals(0,groups[1].getChildren().length);
  fFacility.executeCommand(node,""String_Node_Str"");
  assertEquals(TargetNodeState.DISCONNECTED,node.getTargetNodeState());
  fFacility.executeCommand(node,""String_Node_Str"");
  assertEquals(0,fFacility.getControlView().getTraceControlRoot().getChildren().length);
}","/** 
 * Run the TraceControlComponent.
 * @throws Exception Would fail the test
 */
@Test public void testTraceSessionTree() throws Exception {
  fProxy.setTestFile(fTestFile);
  fProxy.setScenario(TraceControlTestFacility.SCEN_INIT_TEST);
  ITraceControlComponent root=fFacility.getControlView().getTraceControlRoot();
  ISystemRegistry registry=RSECorePlugin.getTheSystemRegistry();
  ISystemProfile profile=registry.createSystemProfile(""String_Node_Str"",true);
  IHost host=registry.createLocalHost(profile,""String_Node_Str"",""String_Node_Str"");
  TargetNodeComponent node=new TargetNodeComponent(""String_Node_Str"",root,host,fProxy);
  root.addChild(node);
  fFacility.waitForJobs();
  fFacility.executeCommand(node,""String_Node_Str"");
  int i=0;
  while ((i < 10) && (node.getTargetNodeState() != TargetNodeState.CONNECTED)) {
    i++;
    fFacility.delay(TraceControlTestFacility.GUI_REFESH_DELAY);
  }
  assertEquals(TargetNodeState.CONNECTED,node.getTargetNodeState());
  ITraceControlComponent[] groups=node.getChildren();
  assertNotNull(groups);
  assertEquals(2,groups.length);
  TraceControlDialogFactory.getInstance().setCreateSessionDialog(new CreateSessionDialogStub());
  TraceControlDialogFactory.getInstance().setGetEventInfoDialog(new GetEventInfoDialogStub());
  TraceControlDialogFactory.getInstance().setConfirmDialog(new DestroyConfirmDialogStub());
  fProxy.setScenario(TraceControlTestFacility.SCEN_SCENARIO_SESSION_HANDLING);
  TraceSessionComponent session=fFacility.createSession(groups[1]);
  assertNotNull(session);
  assertEquals(""String_Node_Str"",session.getName());
  assertEquals(""String_Node_Str"",session.getSessionPath());
  assertEquals(TraceSessionState.INACTIVE,session.getSessionState());
  fProxy.setScenario(SCEN_SCENARIO3_TEST);
  EnableChannelDialogStub channelStub=new EnableChannelDialogStub();
  channelStub.setIsKernel(true);
  TraceControlDialogFactory.getInstance().setEnableChannelDialog(channelStub);
  fFacility.executeCommand(session,""String_Node_Str"");
  ITraceControlComponent[] domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  assertEquals(""String_Node_Str"",domains[0].getName());
  ITraceControlComponent[] channels=domains[0].getChildren();
  assertNotNull(channels);
  assertEquals(1,channels.length);
  assertTrue(channels[0] instanceof TraceChannelComponent);
  TraceChannelComponent channel=(TraceChannelComponent)channels[0];
  assertEquals(""String_Node_Str"",channel.getName());
  assertEquals(4,channel.getNumberOfSubBuffers());
  assertEquals(""String_Node_Str"",channel.getOutputType());
  assertEquals(true,channel.isOverwriteMode());
  assertEquals(200,channel.getReadTimer());
  assertEquals(TraceEnablement.ENABLED,channel.getState());
  assertEquals(16384,channel.getSubBufferSize());
  assertEquals(100,channel.getSwitchTimer());
  ChannelInfo info=(ChannelInfo)channelStub.getChannelInfo();
  info.setName(""String_Node_Str"");
  info.setOverwriteMode(false);
  info.setSubBufferSize(32768);
  info.setNumberOfSubBuffers(2);
  info.setSwitchTimer(100);
  info.setReadTimer(200);
  channelStub.setChannelInfo(info);
  fFacility.executeCommand(domains[0],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  assertNotNull(channels);
  assertEquals(2,channels.length);
  assertTrue(channels[1] instanceof TraceChannelComponent);
  channel=(TraceChannelComponent)channels[1];
  assertEquals(""String_Node_Str"",channel.getName());
  assertEquals(2,channel.getNumberOfSubBuffers());
  assertEquals(""String_Node_Str"",channel.getOutputType());
  assertEquals(false,channel.isOverwriteMode());
  assertEquals(200,channel.getReadTimer());
  assertEquals(TraceEnablement.ENABLED,channel.getState());
  assertEquals(32768,channel.getSubBufferSize());
  assertEquals(100,channel.getSwitchTimer());
  EnableEventsDialogStub eventsDialogStub=new EnableEventsDialogStub();
  eventsDialogStub.setIsTracePoints(true);
  List<String> events=new ArrayList<String>();
  events.add(""String_Node_Str"");
  events.add(""String_Node_Str"");
  eventsDialogStub.setNames(events);
  eventsDialogStub.setIsKernel(true);
  TraceControlDialogFactory.getInstance().setEnableEventsDialog(eventsDialogStub);
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  assertNotNull(channels);
  assertEquals(2,channels.length);
  fFacility.executeCommand(channels,""String_Node_Str"");
  assertEquals(TraceEnablement.DISABLED,((TraceChannelComponent)channels[0]).getState());
  assertEquals(TraceEnablement.DISABLED,((TraceChannelComponent)channels[1]).getState());
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  assertNotNull(channels);
  assertEquals(2,channels.length);
  fFacility.executeCommand(channels,""String_Node_Str"");
  assertEquals(TraceEnablement.ENABLED,((TraceChannelComponent)channels[0]).getState());
  assertEquals(TraceEnablement.ENABLED,((TraceChannelComponent)channels[1]).getState());
  fFacility.executeCommand(session,""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  assertNotNull(channels);
  assertEquals(3,channels.length);
  assertTrue(channels[2] instanceof TraceChannelComponent);
  channel=(TraceChannelComponent)channels[2];
  assertEquals(""String_Node_Str"",channel.getName());
  ITraceControlComponent[] channel0Events=channel.getChildren();
  assertEquals(2,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceEventComponent);
  assertTrue(channel0Events[1] instanceof TraceEventComponent);
  TraceEventComponent event=(TraceEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.TRACE_EMERG,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  event=(TraceEventComponent)channel0Events[1];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.TRACE_EMERG,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  events.clear();
  events.add(""String_Node_Str"");
  eventsDialogStub.setNames(events);
  fFacility.executeCommand(domains[0],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[2];
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  assertEquals(3,channel0Events.length);
  assertTrue(channel0Events[2] instanceof TraceEventComponent);
  event=(TraceEventComponent)channel0Events[2];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.TRACE_EMERG,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  events.clear();
  eventsDialogStub.setNames(events);
  eventsDialogStub.setIsAllTracePoints(true);
  fFacility.executeCommand(channels[1],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[1];
  channel0Events=channel.getChildren();
  assertEquals(3,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceEventComponent);
  assertTrue(channel0Events[1] instanceof TraceEventComponent);
  assertTrue(channel0Events[2] instanceof TraceEventComponent);
  event=(TraceEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.TRACE_EMERG,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  event=(TraceEventComponent)channel0Events[1];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.TRACE_EMERG,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  event=(TraceEventComponent)channel0Events[2];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.TRACE_EMERG,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  events.clear();
  eventsDialogStub.setIsTracePoints(false);
  eventsDialogStub.setIsAllTracePoints(false);
  eventsDialogStub.setIsSysCalls(true);
  fFacility.executeCommand(channels[0],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[0];
  channel=(TraceChannelComponent)channels[0];
  channel0Events=channel.getChildren();
  assertEquals(1,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceEventComponent);
  event=(TraceEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,event.getLogLevel());
  assertEquals(TraceEventType.SYSCALL,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  fFacility.executeCommand(domains[0],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[0];
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  assertEquals(4,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceEventComponent);
  event=(TraceEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,event.getLogLevel());
  assertEquals(TraceEventType.SYSCALL,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  fFacility.executeCommand(session,""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[0];
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  assertEquals(4,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceEventComponent);
  event=(TraceEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,event.getLogLevel());
  assertEquals(TraceEventType.SYSCALL,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  events.clear();
  eventsDialogStub.setIsSysCalls(false);
  eventsDialogStub.setIsDynamicProbe(true);
  eventsDialogStub.setDynamicProbe(""String_Node_Str"");
  eventsDialogStub.setProbeEventName(""String_Node_Str"");
  fFacility.executeCommand(domains[0],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  assertEquals(5,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceProbeEventComponent);
  TraceProbeEventComponent probeEvent=(TraceProbeEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",probeEvent.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,probeEvent.getLogLevel());
  assertEquals(TraceEventType.PROBE,probeEvent.getEventType());
  assertEquals(TraceEnablement.ENABLED,probeEvent.getState());
  assertNull(probeEvent.getOffset());
  assertEquals(""String_Node_Str"",probeEvent.getAddress());
  assertNull(probeEvent.getSymbol());
  eventsDialogStub.setIsDynamicProbe(true);
  eventsDialogStub.setDynamicProbe(""String_Node_Str"");
  eventsDialogStub.setProbeEventName(""String_Node_Str"");
  fFacility.executeCommand(channels[2],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  assertEquals(6,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceProbeEventComponent);
  probeEvent=(TraceProbeEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",probeEvent.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,probeEvent.getLogLevel());
  assertEquals(TraceEventType.PROBE,probeEvent.getEventType());
  assertEquals(TraceEnablement.ENABLED,probeEvent.getState());
  assertEquals(""String_Node_Str"",probeEvent.getOffset());
  assertNull(null,probeEvent.getAddress());
  assertEquals(""String_Node_Str"",probeEvent.getSymbol());
  eventsDialogStub.setIsDynamicProbe(true);
  eventsDialogStub.setDynamicProbe(""String_Node_Str"");
  eventsDialogStub.setProbeEventName(""String_Node_Str"");
  fFacility.executeCommand(session,""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  assertEquals(7,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceProbeEventComponent);
  probeEvent=(TraceProbeEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",probeEvent.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,probeEvent.getLogLevel());
  assertEquals(TraceEventType.PROBE,probeEvent.getEventType());
  assertEquals(TraceEnablement.ENABLED,probeEvent.getState());
  assertEquals(""String_Node_Str"",probeEvent.getOffset());
  assertNull(null,probeEvent.getAddress());
  assertEquals(""String_Node_Str"",probeEvent.getSymbol());
  eventsDialogStub.setIsDynamicProbe(false);
  eventsDialogStub.setDynamicProbe(null);
  eventsDialogStub.setProbeEventName(null);
  eventsDialogStub.setIsFunctionProbe(true);
  eventsDialogStub.setFunctionEventName(""String_Node_Str"");
  eventsDialogStub.setFunctionProbe(""String_Node_Str"");
  fFacility.executeCommand(session,""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  assertEquals(8,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceProbeEventComponent);
  probeEvent=(TraceProbeEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",probeEvent.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,probeEvent.getLogLevel());
  assertEquals(TraceEventType.FUNCTION,probeEvent.getEventType());
  assertEquals(TraceEnablement.ENABLED,probeEvent.getState());
  assertEquals(""String_Node_Str"",probeEvent.getOffset());
  assertNull(null,probeEvent.getAddress());
  assertEquals(""String_Node_Str"",probeEvent.getSymbol());
  eventsDialogStub.setIsFunctionProbe(true);
  eventsDialogStub.setFunctionEventName(""String_Node_Str"");
  eventsDialogStub.setFunctionProbe(""String_Node_Str"");
  fFacility.executeCommand(domains[0],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  assertEquals(9,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceProbeEventComponent);
  probeEvent=(TraceProbeEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",probeEvent.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,probeEvent.getLogLevel());
  assertEquals(TraceEventType.PROBE,probeEvent.getEventType());
  assertEquals(TraceEnablement.ENABLED,probeEvent.getState());
  assertEquals(""String_Node_Str"",probeEvent.getOffset());
  assertNull(null,probeEvent.getAddress());
  assertEquals(""String_Node_Str"",probeEvent.getSymbol());
  eventsDialogStub.setIsFunctionProbe(true);
  eventsDialogStub.setFunctionEventName(""String_Node_Str"");
  eventsDialogStub.setFunctionProbe(""String_Node_Str"");
  fFacility.executeCommand(channels[0],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[0];
  channel0Events=channel.getChildren();
  assertEquals(2,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceProbeEventComponent);
  probeEvent=(TraceProbeEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",probeEvent.getName());
  assertEquals(TraceLogLevel.LEVEL_UNKNOWN,probeEvent.getLogLevel());
  assertEquals(TraceEventType.PROBE,probeEvent.getEventType());
  assertEquals(TraceEnablement.ENABLED,probeEvent.getState());
  assertEquals(""String_Node_Str"",probeEvent.getOffset());
  assertNull(null,probeEvent.getAddress());
  assertEquals(""String_Node_Str"",probeEvent.getSymbol());
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  AddContextDialogStub addContextStub=new AddContextDialogStub();
  List<String> contexts=new ArrayList<String>();
  contexts.add(""String_Node_Str"");
  contexts.add(""String_Node_Str"");
  contexts.add(""String_Node_Str"");
  addContextStub.setContexts(contexts);
  TraceControlDialogFactory.getInstance().setAddContextDialog(addContextStub);
  fFacility.executeCommand(domains[0],""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[0];
  try {
    addContextStub.setContexts(contexts);
  }
 catch (  IllegalArgumentException e) {
    fail(""String_Node_Str"");
  }
  fFacility.executeCommand(channel,""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  channels=domains[0].getChildren();
  channel=(TraceChannelComponent)channels[2];
  channel0Events=channel.getChildren();
  event=(TraceEventComponent)channel0Events[6];
  fFacility.executeCommand(event,""String_Node_Str"");
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  fFacility.executeCommand(domains[0],""String_Node_Str"");
  fFacility.executeCommand(node,""String_Node_Str"");
  groups=node.getChildren();
  assertNotNull(groups);
  assertEquals(2,groups.length);
  assertEquals(3,groups[0].getChildren().length);
  assertEquals(1,groups[1].getChildren().length);
  assertEquals(1,groups[1].getChildren()[0].getChildren().length);
  assertEquals(3,groups[1].getChildren()[0].getChildren()[0].getChildren().length);
  assertEquals(2,groups[1].getChildren()[0].getChildren()[0].getChildren()[0].getChildren().length);
  fProxy.setScenario(TraceControlTestFacility.SCEN_SCENARIO_SESSION_HANDLING);
  session=(TraceSessionComponent)groups[1].getChildren()[0];
  fFacility.startSession(session);
  assertEquals(TraceSessionState.ACTIVE,session.getSessionState());
  fFacility.stopSession(session);
  assertEquals(TraceSessionState.INACTIVE,session.getSessionState());
  fFacility.destroySession(session);
  assertEquals(0,groups[1].getChildren().length);
  fFacility.executeCommand(node,""String_Node_Str"");
  assertEquals(TargetNodeState.DISCONNECTED,node.getTargetNodeState());
  fFacility.executeCommand(node,""String_Node_Str"");
  assertEquals(0,fFacility.getControlView().getTraceControlRoot().getChildren().length);
}",0.9997203650507156
92006,"@Override public boolean test(Object receiver,String property,Object[] args,Object expectedValue){
  if (IS_IN_TRACE_FOLDER.equals(property)) {
    if (receiver != null && receiver instanceof IStructuredSelection) {
      Iterator<?> iter=((IStructuredSelection)receiver).iterator();
      while (iter.hasNext()) {
        Object item=iter.next();
        if (item instanceof TmfTraceElement) {
          TmfTraceElement trace=(TmfTraceElement)item;
          if (!(trace.getParent() instanceof TmfTraceFolder)) {
            return false;
          }
        }
 else {
          return false;
        }
      }
      return true;
    }
  }
  if (IS_EXPERIMENT_TRACE.equals(property)) {
    if (receiver != null && receiver instanceof TmfTraceElement) {
      TmfTraceElement trace=(TmfTraceElement)receiver;
      return trace.getParent() instanceof TmfExperimentElement;
    }
    return false;
  }
  if (HAS_SUPPLEMENTARY_FILES.equals(property)) {
    if (receiver == null) {
      return false;
    }
    if (receiver instanceof TmfTraceElement) {
      TmfTraceElement trace=(TmfTraceElement)receiver;
      return trace.hasSupplementaryResources();
    }
 else     if (receiver instanceof TmfExperimentElement) {
      TmfExperimentElement trace=(TmfExperimentElement)receiver;
      boolean hasHistory=false;
      for (      TmfTraceElement aTrace : trace.getTraces()) {
        hasHistory|=aTrace.hasSupplementaryResources();
      }
      return hasHistory;
    }
    return false;
  }
  if (TRACE_TYPE.equals(property)) {
    if (receiver != null && receiver instanceof TmfTraceElement) {
      TmfTraceElement trace=(TmfTraceElement)receiver;
      if (expectedValue instanceof String && expectedValue.equals(trace.getTraceType())) {
        return true;
      }
    }
    return false;
  }
  return false;
}","@Override public boolean test(Object receiver,String property,Object[] args,Object expectedValue){
  if (IS_IN_TRACE_FOLDER.equals(property)) {
    if (receiver != null && receiver instanceof IStructuredSelection) {
      Iterator<?> iter=((IStructuredSelection)receiver).iterator();
      while (iter.hasNext()) {
        Object item=iter.next();
        if (item instanceof TmfTraceElement) {
          TmfTraceElement trace=(TmfTraceElement)item;
          if (!(trace.getParent() instanceof TmfTraceFolder)) {
            return false;
          }
        }
 else {
          return false;
        }
      }
      return true;
    }
  }
  if (IS_EXPERIMENT_TRACE.equals(property)) {
    if (receiver != null && receiver instanceof TmfTraceElement) {
      TmfTraceElement trace=(TmfTraceElement)receiver;
      return trace.getParent() instanceof TmfExperimentElement;
    }
    return false;
  }
  if (HAS_SUPPLEMENTARY_FILES.equals(property)) {
    if (receiver == null) {
      return false;
    }
    if (receiver instanceof TmfTraceElement) {
      TmfTraceElement trace=(TmfTraceElement)receiver;
      return trace.hasSupplementaryResources();
    }
 else     if (receiver instanceof TmfExperimentElement) {
      TmfExperimentElement trace=(TmfExperimentElement)receiver;
      boolean hasHistory=false;
      for (      TmfTraceElement aTrace : trace.getTraces()) {
        hasHistory|=aTrace.hasSupplementaryResources();
      }
      hasHistory|=trace.hasSupplementaryResources();
      return hasHistory;
    }
    return false;
  }
  if (TRACE_TYPE.equals(property)) {
    if (receiver != null && receiver instanceof TmfTraceElement) {
      TmfTraceElement trace=(TmfTraceElement)receiver;
      if (expectedValue instanceof String && expectedValue.equals(trace.getTraceType())) {
        return true;
      }
    }
    return false;
  }
  return false;
}",0.9856485242350392
92007,"@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null) {
    return null;
  }
  IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IWorkbenchPart part=page.getActivePart();
  if (part == null) {
    return false;
  }
  ISelectionProvider selectionProvider=part.getSite().getSelectionProvider();
  if (selectionProvider == null) {
    return false;
  }
  ISelection selection=selectionProvider.getSelection();
  if (selection instanceof TreeSelection) {
    TreeSelection sel=(TreeSelection)selection;
    Object element=sel.getFirstElement();
    List<IResource> resourcesList=new ArrayList<IResource>();
    if (element instanceof TmfExperimentElement) {
      TmfExperimentElement experiment=(TmfExperimentElement)element;
      IResource[] resources=experiment.getSupplementaryResources();
      resourcesList.addAll(Arrays.asList(resources));
      HashMap<IResource,TmfTraceElement> traceMap=new HashMap<IResource,TmfTraceElement>();
      for (      TmfTraceElement aTrace : experiment.getTraces()) {
        aTrace=aTrace.getElementUnderTraceFolder();
        resources=aTrace.getSupplementaryResources();
        resourcesList.addAll(Arrays.asList(resources));
        for (        IResource resource : resources) {
          traceMap.put(resource,aTrace);
        }
      }
      SelectSupplementaryResourcesDialog dialog=new SelectSupplementaryResourcesDialog(window.getShell(),resourcesList.toArray(new IResource[resourcesList.size()]));
      if (dialog.open() != Window.OK) {
        return null;
      }
      IResource[] resourcesToDelete=dialog.getResources();
      for (      IResource resource : resourcesToDelete) {
        traceMap.get(resource).closeEditors();
        try {
          resource.delete(true,new NullProgressMonitor());
        }
 catch (        CoreException e) {
          Activator.getDefault().logError(""String_Node_Str"" + resource,e);
        }
      }
      IResource resource=experiment.getProject().getResource();
      if (resource != null) {
        try {
          resource.refreshLocal(IResource.DEPTH_INFINITE,null);
        }
 catch (        CoreException e) {
          Activator.getDefault().logError(""String_Node_Str"" + resource,e);
        }
      }
    }
  }
  return null;
}","@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null) {
    return null;
  }
  IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IWorkbenchPart part=page.getActivePart();
  if (part == null) {
    return false;
  }
  ISelectionProvider selectionProvider=part.getSite().getSelectionProvider();
  if (selectionProvider == null) {
    return false;
  }
  ISelection selection=selectionProvider.getSelection();
  if (selection instanceof TreeSelection) {
    TreeSelection sel=(TreeSelection)selection;
    Object element=sel.getFirstElement();
    List<IResource> resourcesList=new ArrayList<IResource>();
    if (element instanceof TmfExperimentElement) {
      TmfExperimentElement experiment=(TmfExperimentElement)element;
      IResource[] resources=experiment.getSupplementaryResources();
      List<IResource> experimentResources=Arrays.asList(resources);
      resourcesList.addAll(experimentResources);
      HashMap<IResource,TmfTraceElement> traceMap=new HashMap<IResource,TmfTraceElement>();
      for (      TmfTraceElement aTrace : experiment.getTraces()) {
        aTrace=aTrace.getElementUnderTraceFolder();
        resources=aTrace.getSupplementaryResources();
        resourcesList.addAll(Arrays.asList(resources));
        for (        IResource resource : resources) {
          traceMap.put(resource,aTrace);
        }
      }
      SelectSupplementaryResourcesDialog dialog=new SelectSupplementaryResourcesDialog(window.getShell(),resourcesList.toArray(new IResource[resourcesList.size()]));
      if (dialog.open() != Window.OK) {
        return null;
      }
      IResource[] resourcesToDelete=dialog.getResources();
      for (      IResource resource : resourcesToDelete) {
        if (experimentResources.contains(resource)) {
          experiment.closeEditors();
        }
 else {
          traceMap.get(resource).closeEditors();
        }
        try {
          resource.delete(true,new NullProgressMonitor());
        }
 catch (        CoreException e) {
          Activator.getDefault().logError(""String_Node_Str"" + resource,e);
        }
      }
      IResource resource=experiment.getProject().getResource();
      if (resource != null) {
        try {
          resource.refreshLocal(IResource.DEPTH_INFINITE,null);
        }
 catch (        CoreException e) {
          Activator.getDefault().logError(""String_Node_Str"" + resource,e);
        }
      }
    }
  }
  return null;
}",0.9209470304975924
92008,"@Override public void launch(ILaunchConfiguration config,String mode,ILaunch launch,IProgressMonitor monitor) throws CoreException {
  this.config=config;
  Oprofile.OprofileProject.setProject(getProject());
  LaunchOptions options=new LaunchOptions();
  options.loadConfiguration(config);
  IPath exePath=getExePath(config);
  options.setBinaryImage(exePath.toOSString());
  OprofileDaemonEvent[] daemonEvents=null;
  ArrayList<OprofileDaemonEvent> events=new ArrayList<OprofileDaemonEvent>();
  if (!config.getAttribute(OprofileLaunchPlugin.ATTR_USE_DEFAULT_EVENT,false)) {
    OprofileCounter[] counters=oprofileCounters(config);
    for (int i=0; i < counters.length; ++i) {
      if (counters[i].getEnabled())       events.add(counters[i].getDaemonEvent());
    }
    daemonEvents=new OprofileDaemonEvent[events.size()];
    events.toArray(daemonEvents);
  }
  if (!preExec(options,daemonEvents,launch))   return;
  Process process=null;
  if (OprofileProject.getProfilingBinary().equals(OprofileProject.OPCONTROL_BINARY)) {
    String arguments[]=getProgramArgumentsArray(config);
    IRemoteCommandLauncher launcher=RemoteProxyManager.getInstance().getLauncher(oprofileProject());
    IPath workingDirPath=new Path(oprofileWorkingDirURI(config).getPath());
    for (int i=0; i < options.getExecutionsNumber(); i++) {
      process=launcher.execute(exePath,arguments,getEnvironment(config),workingDirPath,monitor);
      DebugPlugin.newProcess(launch,process,renderProcessLabel(exePath.toOSString()));
      try {
        process.waitFor();
      }
 catch (      InterruptedException e) {
        process.destroy();
        Status status=new Status(IStatus.ERROR,OprofileLaunchPlugin.PLUGIN_ID,OprofileLaunchMessages.getString(""String_Node_Str""));
        throw new CoreException(status);
      }
    }
  }
  if (OprofileProject.getProfilingBinary().equals(OprofileProject.OPERF_BINARY)) {
    String eventsString=EVENTS;
    for (int i=0; i < events.size(); i++) {
      eventsString+=events.get(i).getEvent().getText() + ""String_Node_Str"" + events.get(i).getEvent().getMinCount()+ ""String_Node_Str"";
    }
    ArrayList<String> argArray=new ArrayList<String>(Arrays.asList(getProgramArgumentsArray(config)));
    IFolder dataFolder=Oprofile.OprofileProject.getProject().getFolder(OPROFILE_DATA);
    if (!dataFolder.exists()) {
      dataFolder.create(false,true,null);
    }
    argArray.add(0,exePath.toOSString());
    if (events.size() > 0)     argArray.add(0,eventsString);
    argArray.add(0,SESSION_DIR + oprofileWorkingDirURI(config).getPath() + IPath.SEPARATOR+ OPROFILE_DATA);
    argArray.add(0,OprofileProject.OPERF_BINARY);
    for (int i=0; i < options.getExecutionsNumber(); i++) {
      if (i != 0)       argArray.add(APPEND);
      String[] arguments=new String[argArray.size()];
      arguments=argArray.toArray(arguments);
      try {
        process=RuntimeProcessFactory.getFactory().exec(arguments,OprofileProject.getProject());
      }
 catch (      IOException e1) {
        process.destroy();
        Status status=new Status(IStatus.ERROR,OprofileLaunchPlugin.PLUGIN_ID,OprofileLaunchMessages.getString(""String_Node_Str""));
        throw new CoreException(status);
      }
      DebugPlugin.newProcess(launch,process,renderProcessLabel(exePath.toOSString()));
      try {
        process.waitFor();
      }
 catch (      InterruptedException e) {
        process.destroy();
        Status status=new Status(IStatus.ERROR,OprofileLaunchPlugin.PLUGIN_ID,OprofileLaunchMessages.getString(""String_Node_Str""));
        throw new CoreException(status);
      }
    }
  }
  postExec(options,daemonEvents,process);
}","@Override public void launch(ILaunchConfiguration config,String mode,ILaunch launch,IProgressMonitor monitor) throws CoreException {
  this.config=config;
  Oprofile.OprofileProject.setProject(getProject());
  LaunchOptions options=new LaunchOptions();
  options.loadConfiguration(config);
  IPath exePath=getExePath(config);
  options.setBinaryImage(exePath.toOSString());
  Oprofile.OprofileProject.setProfilingBinary(options.getOprofileComboText());
  OprofileDaemonEvent[] daemonEvents=null;
  ArrayList<OprofileDaemonEvent> events=new ArrayList<OprofileDaemonEvent>();
  if (!config.getAttribute(OprofileLaunchPlugin.ATTR_USE_DEFAULT_EVENT,false)) {
    OprofileCounter[] counters=oprofileCounters(config);
    for (int i=0; i < counters.length; ++i) {
      if (counters[i].getEnabled())       events.add(counters[i].getDaemonEvent());
    }
    daemonEvents=new OprofileDaemonEvent[events.size()];
    events.toArray(daemonEvents);
  }
  if (!preExec(options,daemonEvents,launch))   return;
  Process process=null;
  if (OprofileProject.getProfilingBinary().equals(OprofileProject.OPCONTROL_BINARY)) {
    String arguments[]=getProgramArgumentsArray(config);
    IRemoteCommandLauncher launcher=RemoteProxyManager.getInstance().getLauncher(oprofileProject());
    IPath workingDirPath=new Path(oprofileWorkingDirURI(config).getPath());
    for (int i=0; i < options.getExecutionsNumber(); i++) {
      process=launcher.execute(exePath,arguments,getEnvironment(config),workingDirPath,monitor);
      DebugPlugin.newProcess(launch,process,renderProcessLabel(exePath.toOSString()));
      try {
        process.waitFor();
      }
 catch (      InterruptedException e) {
        process.destroy();
        Status status=new Status(IStatus.ERROR,OprofileLaunchPlugin.PLUGIN_ID,OprofileLaunchMessages.getString(""String_Node_Str""));
        throw new CoreException(status);
      }
    }
  }
  if (OprofileProject.getProfilingBinary().equals(OprofileProject.OPERF_BINARY)) {
    String eventsString=EVENTS;
    for (int i=0; i < events.size(); i++) {
      eventsString+=events.get(i).getEvent().getText() + ""String_Node_Str"" + events.get(i).getEvent().getMinCount()+ ""String_Node_Str"";
    }
    ArrayList<String> argArray=new ArrayList<String>(Arrays.asList(getProgramArgumentsArray(config)));
    IFolder dataFolder=Oprofile.OprofileProject.getProject().getFolder(OPROFILE_DATA);
    if (!dataFolder.exists()) {
      dataFolder.create(false,true,null);
    }
    argArray.add(0,exePath.toOSString());
    if (events.size() > 0)     argArray.add(0,eventsString);
    argArray.add(0,SESSION_DIR + oprofileWorkingDirURI(config).getPath() + IPath.SEPARATOR+ OPROFILE_DATA);
    argArray.add(0,OprofileProject.OPERF_BINARY);
    for (int i=0; i < options.getExecutionsNumber(); i++) {
      if (i != 0)       argArray.add(APPEND);
      String[] arguments=new String[argArray.size()];
      arguments=argArray.toArray(arguments);
      try {
        process=RuntimeProcessFactory.getFactory().exec(arguments,OprofileProject.getProject());
      }
 catch (      IOException e1) {
        process.destroy();
        Status status=new Status(IStatus.ERROR,OprofileLaunchPlugin.PLUGIN_ID,OprofileLaunchMessages.getString(""String_Node_Str""));
        throw new CoreException(status);
      }
      DebugPlugin.newProcess(launch,process,renderProcessLabel(exePath.toOSString()));
      try {
        process.waitFor();
      }
 catch (      InterruptedException e) {
        process.destroy();
        Status status=new Status(IStatus.ERROR,OprofileLaunchPlugin.PLUGIN_ID,OprofileLaunchMessages.getString(""String_Node_Str""));
        throw new CoreException(status);
      }
    }
  }
  postExec(options,daemonEvents,process);
}",0.9892706777128888
92009,"@Override public void open(IPath file){
  String projectName=ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(file).getProject().getName();
  ILaunchConfiguration config=createDefaultConfiguration(projectName);
  PerfCore.Report(config,null,null,null,file.toOSString(),null);
  PerfCore.RefreshView(file.toOSString());
}","@Override public void open(IPath file){
  String projectName=null;
  IFile location=ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(file);
  if (location == null) {
    IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    ISelection selection=page.getSelection();
    if (selection instanceof ITreeSelection) {
      Object element=((ITreeSelection)selection).getFirstElement();
      if (element instanceof IFile) {
        IProject project=((IFile)element).getProject();
        projectName=project.getName();
        URI fileURI=((IFile)element).getLocationURI();
        ILaunchConfiguration config=createDefaultConfiguration(projectName);
        PerfCore.Report(config,null,null,null,fileURI.getPath().toString(),null);
        PerfCore.RefreshView(fileURI.toString());
      }
    }
  }
 else {
    projectName=ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(file).getProject().getName();
    ILaunchConfiguration config=createDefaultConfiguration(projectName);
    PerfCore.Report(config,null,null,null,file.toOSString(),null);
    PerfCore.RefreshView(file.toOSString());
  }
}",0.4251012145748988
92010,"/** 
 * Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.
 * @param parent a widget which will be the parent of the new instance (cannot be null)
 * @param style the style of widget to construct
 * @param weights The relative weights of each side of the sash form
 * @since 2.1
 */
public TimeGraphCombo(Composite parent,int style,int[] weights){
  super(parent,style);
  setLayout(new FillLayout());
  final SashForm sash=new SashForm(this,SWT.NONE);
  fTreeViewer=new TreeViewer(sash,SWT.FULL_SELECTION | SWT.H_SCROLL);
  final Tree tree=fTreeViewer.getTree();
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  fTimeGraphViewer=new TimeGraphViewer(sash,SWT.NONE);
  fTimeGraphViewer.setItemHeight(getItemHeight(tree));
  fTimeGraphViewer.setHeaderHeight(tree.getHeaderHeight());
  fTimeGraphViewer.setBorderWidth(tree.getBorderWidth());
  fTimeGraphViewer.setNameWidthPref(0);
  fFilter=new RawViewerFilter();
  addFilter(fFilter);
  fFilterDialog=new TimeGraphFilterDialog(getShell());
  tree.addControlListener(new ControlAdapter(){
    private int depth=0;
    @Override public void controlResized(    ControlEvent e){
      if (depth == 0) {
        depth++;
        tree.getVerticalBar().setEnabled(false);
        tree.getVerticalBar().setVisible(false);
        depth--;
      }
      fTimeGraphViewer.setHeaderHeight(tree.getHeaderHeight());
    }
  }
);
  fTreeViewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      fTimeGraphViewer.setExpandedState((ITimeGraphEntry)event.getElement(),false);
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      ITimeGraphEntry entry=(ITimeGraphEntry)event.getElement();
      fTimeGraphViewer.setExpandedState(entry,true);
      for (      ITimeGraphEntry child : entry.getChildren()) {
        boolean expanded=fTreeViewer.getExpandedState(child);
        fTimeGraphViewer.setExpandedState(child,expanded);
      }
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      final TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          tree.setTopItem(treeItem);
        }
      }
);
    }
  }
);
  fTimeGraphViewer.addTreeListener(new ITimeGraphTreeListener(){
    @Override public void treeCollapsed(    TimeGraphTreeExpansionEvent event){
      fTreeViewer.setExpandedState(event.getEntry(),false);
    }
    @Override public void treeExpanded(    TimeGraphTreeExpansionEvent event){
      ITimeGraphEntry entry=event.getEntry();
      fTreeViewer.setExpandedState(entry,true);
      for (      ITimeGraphEntry child : entry.getChildren()) {
        boolean expanded=fTreeViewer.getExpandedState(child);
        fTimeGraphViewer.setExpandedState(child,expanded);
      }
    }
  }
);
  tree.addListener(SWT.MouseDown,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem treeItem=tree.getItem(new Point(event.x,event.y));
      if (treeItem == null || treeItem.getData() == FILLER) {
        event.doit=false;
        List<TreeItem> treeItems=getVisibleExpandedItems(tree);
        if (treeItems.size() == 0) {
          fTreeViewer.setSelection(new StructuredSelection());
          fTimeGraphViewer.setSelection(null);
          return;
        }
        tree.select(treeItems.get(treeItems.size() - 1));
        fTreeViewer.setSelection(new StructuredSelection());
        fTimeGraphViewer.setSelection(null);
      }
    }
  }
);
  tree.addListener(SWT.MouseWheel,new Listener(){
    @Override public void handleEvent(    Event event){
      event.doit=false;
      Slider scrollBar=fTimeGraphViewer.getVerticalBar();
      fTimeGraphViewer.setTopIndex(scrollBar.getSelection() - event.count);
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  tree.addListener(SWT.KeyDown,new Listener(){
    @Override public void handleEvent(    Event event){
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        fTreeViewer.setSelection(new StructuredSelection());
        event.doit=false;
        return;
      }
      if (event.keyCode == SWT.ARROW_DOWN) {
        int index=Math.min(fTimeGraphViewer.getSelectionIndex() + 1,treeItems.size() - 1);
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
        event.doit=false;
      }
 else       if (event.keyCode == SWT.PAGE_DOWN) {
        int height=tree.getSize().y - tree.getHeaderHeight() - tree.getHorizontalBar().getSize().y;
        int countPerPage=height / getItemHeight(tree);
        int index=Math.min(fTimeGraphViewer.getSelectionIndex() + countPerPage - 1,treeItems.size() - 1);
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
        event.doit=false;
      }
 else       if (event.keyCode == SWT.END) {
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(treeItems.size() - 1).getData());
        event.doit=false;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
      if (fTimeGraphViewer.getSelectionIndex() >= 0) {
        fTreeViewer.setSelection(new StructuredSelection(fTimeGraphViewer.getSelection()));
      }
 else {
        fTreeViewer.setSelection(new StructuredSelection());
      }
    }
  }
);
  fTimeGraphViewer.getTimeGraphControl().addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTreeViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      if (fInhibitTreeSelection) {
        return;
      }
      if (event.getSelection() instanceof IStructuredSelection) {
        Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
        if (selection instanceof ITimeGraphEntry) {
          fTimeGraphViewer.setSelection((ITimeGraphEntry)selection);
        }
        List<TreeItem> treeItems=getVisibleExpandedItems(tree);
        if (treeItems.size() == 0) {
          return;
        }
        TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
        tree.setTopItem(treeItem);
      }
    }
  }
);
  fTimeGraphViewer.addSelectionListener(new ITimeGraphSelectionListener(){
    @Override public void selectionChanged(    TimeGraphSelectionEvent event){
      ITimeGraphEntry entry=fTimeGraphViewer.getSelection();
      fInhibitTreeSelection=true;
      if (entry != null) {
        StructuredSelection selection=new StructuredSelection(entry);
        fTreeViewer.setSelection(selection);
      }
 else {
        fTreeViewer.setSelection(new StructuredSelection());
      }
      fInhibitTreeSelection=false;
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTimeGraphViewer.getVerticalBar().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTimeGraphViewer.getTimeGraphControl().addMouseWheelListener(new MouseWheelListener(){
    @Override public void mouseScrolled(    MouseEvent e){
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTreeViewer.getControl().addMouseTrackListener(new MouseTrackAdapter(){
    @Override public void mouseEnter(    MouseEvent e){
      if (fTimeGraphViewer.getTimeGraphControl().isFocusControl()) {
        fTreeViewer.getControl().setFocus();
      }
    }
  }
);
  fTimeGraphViewer.getTimeGraphControl().addMouseTrackListener(new MouseTrackAdapter(){
    @Override public void mouseEnter(    MouseEvent e){
      if (fTreeViewer.getControl().isFocusControl()) {
        fTimeGraphViewer.getTimeGraphControl().setFocus();
      }
    }
  }
);
  fTimeGraphViewer.getTimeGraphScale().addMouseTrackListener(new MouseTrackAdapter(){
    @Override public void mouseEnter(    MouseEvent e){
      if (fTreeViewer.getControl().isFocusControl()) {
        fTimeGraphViewer.getTimeGraphControl().setFocus();
      }
    }
  }
);
  tree.addPaintListener(new PaintListener(){
    @Override public void paintControl(    PaintEvent e){
      List<TreeItem> items=getVisibleExpandedItems(tree);
      for (int i=0; i < items.size() - 1; i++) {
        TreeItem item=items.get(i);
        Integer itemHeight=items.get(i + 1).getBounds().y - item.getBounds().y;
        if (!itemHeight.equals(item.getData(ITEM_HEIGHT))) {
          ITimeGraphEntry entry=(ITimeGraphEntry)item.getData();
          if (fTimeGraphViewer.getTimeGraphControl().setItemHeight(entry,itemHeight)) {
            item.setData(ITEM_HEIGHT,itemHeight);
          }
        }
      }
    }
  }
);
  fNumFillerRows=Display.getDefault().getBounds().height / getItemHeight(tree);
  sash.setWeights(weights);
}","/** 
 * Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.
 * @param parent a widget which will be the parent of the new instance (cannot be null)
 * @param style the style of widget to construct
 * @param weights The relative weights of each side of the sash form
 * @since 2.1
 */
public TimeGraphCombo(Composite parent,int style,int[] weights){
  super(parent,style);
  setLayout(new FillLayout());
  final SashForm sash=new SashForm(this,SWT.NONE);
  fTreeViewer=new TreeViewer(sash,SWT.FULL_SELECTION | SWT.H_SCROLL);
  final Tree tree=fTreeViewer.getTree();
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  fTimeGraphViewer=new TimeGraphViewer(sash,SWT.NONE);
  fTimeGraphViewer.setItemHeight(getItemHeight(tree));
  fTimeGraphViewer.setHeaderHeight(tree.getHeaderHeight());
  fTimeGraphViewer.setBorderWidth(tree.getBorderWidth());
  fTimeGraphViewer.setNameWidthPref(0);
  fFilter=new RawViewerFilter();
  addFilter(fFilter);
  fFilterDialog=new TimeGraphFilterDialog(getShell());
  tree.addControlListener(new ControlAdapter(){
    private int depth=0;
    @Override public void controlResized(    ControlEvent e){
      if (depth == 0) {
        depth++;
        tree.getVerticalBar().setEnabled(false);
        tree.getVerticalBar().setVisible(false);
        depth--;
      }
      fTimeGraphViewer.setHeaderHeight(tree.getHeaderHeight());
    }
  }
);
  fTreeViewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      fTimeGraphViewer.setExpandedState((ITimeGraphEntry)event.getElement(),false);
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      int topIndex=fTimeGraphViewer.getTopIndex();
      if (topIndex >= treeItems.size()) {
        return;
      }
      TreeItem treeItem=treeItems.get(topIndex);
      tree.setTopItem(treeItem);
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      ITimeGraphEntry entry=(ITimeGraphEntry)event.getElement();
      fTimeGraphViewer.setExpandedState(entry,true);
      for (      ITimeGraphEntry child : entry.getChildren()) {
        boolean expanded=fTreeViewer.getExpandedState(child);
        fTimeGraphViewer.setExpandedState(child,expanded);
      }
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      int topIndex=fTimeGraphViewer.getTopIndex();
      if (topIndex >= treeItems.size()) {
        return;
      }
      final TreeItem treeItem=treeItems.get(topIndex);
      getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          tree.setTopItem(treeItem);
        }
      }
);
    }
  }
);
  fTimeGraphViewer.addTreeListener(new ITimeGraphTreeListener(){
    @Override public void treeCollapsed(    TimeGraphTreeExpansionEvent event){
      fTreeViewer.setExpandedState(event.getEntry(),false);
    }
    @Override public void treeExpanded(    TimeGraphTreeExpansionEvent event){
      ITimeGraphEntry entry=event.getEntry();
      fTreeViewer.setExpandedState(entry,true);
      for (      ITimeGraphEntry child : entry.getChildren()) {
        boolean expanded=fTreeViewer.getExpandedState(child);
        fTimeGraphViewer.setExpandedState(child,expanded);
      }
    }
  }
);
  tree.addListener(SWT.MouseDown,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem treeItem=tree.getItem(new Point(event.x,event.y));
      if (treeItem == null || treeItem.getData() == FILLER) {
        event.doit=false;
        List<TreeItem> treeItems=getVisibleExpandedItems(tree);
        if (treeItems.size() == 0) {
          fTreeViewer.setSelection(new StructuredSelection());
          fTimeGraphViewer.setSelection(null);
          return;
        }
        tree.select(treeItems.get(treeItems.size() - 1));
        fTreeViewer.setSelection(new StructuredSelection());
        fTimeGraphViewer.setSelection(null);
      }
    }
  }
);
  tree.addListener(SWT.MouseWheel,new Listener(){
    @Override public void handleEvent(    Event event){
      event.doit=false;
      Slider scrollBar=fTimeGraphViewer.getVerticalBar();
      fTimeGraphViewer.setTopIndex(scrollBar.getSelection() - event.count);
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      int topIndex=fTimeGraphViewer.getTopIndex();
      if (topIndex >= treeItems.size()) {
        return;
      }
      TreeItem treeItem=treeItems.get(topIndex);
      tree.setTopItem(treeItem);
    }
  }
);
  tree.addListener(SWT.KeyDown,new Listener(){
    @Override public void handleEvent(    Event event){
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        fTreeViewer.setSelection(new StructuredSelection());
        event.doit=false;
        return;
      }
      if (event.keyCode == SWT.ARROW_DOWN) {
        int index=Math.min(fTimeGraphViewer.getSelectionIndex() + 1,treeItems.size() - 1);
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
        event.doit=false;
      }
 else       if (event.keyCode == SWT.PAGE_DOWN) {
        int height=tree.getSize().y - tree.getHeaderHeight() - tree.getHorizontalBar().getSize().y;
        int countPerPage=height / getItemHeight(tree);
        int index=Math.min(fTimeGraphViewer.getSelectionIndex() + countPerPage - 1,treeItems.size() - 1);
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
        event.doit=false;
      }
 else       if (event.keyCode == SWT.END) {
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(treeItems.size() - 1).getData());
        event.doit=false;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
      if (fTimeGraphViewer.getSelectionIndex() >= 0) {
        fTreeViewer.setSelection(new StructuredSelection(fTimeGraphViewer.getSelection()));
      }
 else {
        fTreeViewer.setSelection(new StructuredSelection());
      }
    }
  }
);
  fTimeGraphViewer.getTimeGraphControl().addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      int topIndex=fTimeGraphViewer.getTopIndex();
      if (topIndex >= treeItems.size()) {
        return;
      }
      TreeItem treeItem=treeItems.get(topIndex);
      tree.setTopItem(treeItem);
    }
  }
);
  fTreeViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      if (fInhibitTreeSelection) {
        return;
      }
      if (event.getSelection() instanceof IStructuredSelection) {
        Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
        if (selection instanceof ITimeGraphEntry) {
          fTimeGraphViewer.setSelection((ITimeGraphEntry)selection);
        }
        List<TreeItem> treeItems=getVisibleExpandedItems(tree);
        int topIndex=fTimeGraphViewer.getTopIndex();
        if (topIndex >= treeItems.size()) {
          return;
        }
        TreeItem treeItem=treeItems.get(topIndex);
        tree.setTopItem(treeItem);
      }
    }
  }
);
  fTimeGraphViewer.addSelectionListener(new ITimeGraphSelectionListener(){
    @Override public void selectionChanged(    TimeGraphSelectionEvent event){
      ITimeGraphEntry entry=fTimeGraphViewer.getSelection();
      fInhibitTreeSelection=true;
      if (entry != null) {
        StructuredSelection selection=new StructuredSelection(entry);
        fTreeViewer.setSelection(selection);
      }
 else {
        fTreeViewer.setSelection(new StructuredSelection());
      }
      fInhibitTreeSelection=false;
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      int topIndex=fTimeGraphViewer.getTopIndex();
      if (topIndex >= treeItems.size()) {
        return;
      }
      TreeItem treeItem=treeItems.get(topIndex);
      tree.setTopItem(treeItem);
    }
  }
);
  fTimeGraphViewer.getVerticalBar().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      int topIndex=fTimeGraphViewer.getTopIndex();
      if (topIndex >= treeItems.size()) {
        return;
      }
      TreeItem treeItem=treeItems.get(topIndex);
      tree.setTopItem(treeItem);
    }
  }
);
  fTimeGraphViewer.getTimeGraphControl().addMouseWheelListener(new MouseWheelListener(){
    @Override public void mouseScrolled(    MouseEvent e){
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      int topIndex=fTimeGraphViewer.getTopIndex();
      if (topIndex >= treeItems.size()) {
        return;
      }
      TreeItem treeItem=treeItems.get(topIndex);
      tree.setTopItem(treeItem);
    }
  }
);
  fTreeViewer.getControl().addMouseTrackListener(new MouseTrackAdapter(){
    @Override public void mouseEnter(    MouseEvent e){
      if (fTimeGraphViewer.getTimeGraphControl().isFocusControl()) {
        fTreeViewer.getControl().setFocus();
      }
    }
  }
);
  fTimeGraphViewer.getTimeGraphControl().addMouseTrackListener(new MouseTrackAdapter(){
    @Override public void mouseEnter(    MouseEvent e){
      if (fTreeViewer.getControl().isFocusControl()) {
        fTimeGraphViewer.getTimeGraphControl().setFocus();
      }
    }
  }
);
  fTimeGraphViewer.getTimeGraphScale().addMouseTrackListener(new MouseTrackAdapter(){
    @Override public void mouseEnter(    MouseEvent e){
      if (fTreeViewer.getControl().isFocusControl()) {
        fTimeGraphViewer.getTimeGraphControl().setFocus();
      }
    }
  }
);
  tree.addPaintListener(new PaintListener(){
    @Override public void paintControl(    PaintEvent e){
      List<TreeItem> items=getVisibleExpandedItems(tree);
      for (int i=0; i < items.size() - 1; i++) {
        TreeItem item=items.get(i);
        Integer itemHeight=items.get(i + 1).getBounds().y - item.getBounds().y;
        if (!itemHeight.equals(item.getData(ITEM_HEIGHT))) {
          ITimeGraphEntry entry=(ITimeGraphEntry)item.getData();
          if (fTimeGraphViewer.getTimeGraphControl().setItemHeight(entry,itemHeight)) {
            item.setData(ITEM_HEIGHT,itemHeight);
          }
        }
      }
    }
  }
);
  fNumFillerRows=Display.getDefault().getBounds().height / getItemHeight(tree);
  sash.setWeights(weights);
}",0.9100894245723172
92011,"@Override public void controlResized(ControlEvent e){
  List<TreeItem> treeItems=getVisibleExpandedItems(tree);
  if (treeItems.size() == 0) {
    return;
  }
  TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
  tree.setTopItem(treeItem);
}","@Override public void controlResized(ControlEvent e){
  List<TreeItem> treeItems=getVisibleExpandedItems(tree);
  int topIndex=fTimeGraphViewer.getTopIndex();
  if (topIndex >= treeItems.size()) {
    return;
  }
  TreeItem treeItem=treeItems.get(topIndex);
  tree.setTopItem(treeItem);
}",0.5367647058823529
92012,"/** 
 * Sets the current selection for this time graph combo.
 * @param selection the new selection
 */
public void setSelection(ITimeGraphEntry selection){
  fTimeGraphViewer.setSelection(selection);
  fInhibitTreeSelection=true;
  if (selection != null) {
    StructuredSelection structuredSelection=new StructuredSelection(selection);
    fTreeViewer.setSelection(structuredSelection);
  }
 else {
    fTreeViewer.setSelection(new StructuredSelection());
  }
  fInhibitTreeSelection=false;
  List<TreeItem> treeItems=getVisibleExpandedItems(fTreeViewer.getTree());
  if (treeItems.size() == 0) {
    return;
  }
  TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
  fTreeViewer.getTree().setTopItem(treeItem);
}","/** 
 * Sets the current selection for this time graph combo.
 * @param selection the new selection
 */
public void setSelection(ITimeGraphEntry selection){
  fTimeGraphViewer.setSelection(selection);
  fInhibitTreeSelection=true;
  if (selection != null) {
    StructuredSelection structuredSelection=new StructuredSelection(selection);
    fTreeViewer.setSelection(structuredSelection);
  }
 else {
    fTreeViewer.setSelection(new StructuredSelection());
  }
  fInhibitTreeSelection=false;
  List<TreeItem> treeItems=getVisibleExpandedItems(fTreeViewer.getTree());
  int topIndex=fTimeGraphViewer.getTopIndex();
  if (topIndex >= treeItems.size()) {
    return;
  }
  TreeItem treeItem=treeItems.get(topIndex);
  fTreeViewer.getTree().setTopItem(treeItem);
}",0.7906040268456376
92013,"@Override public void mouseScrolled(MouseEvent e){
  List<TreeItem> treeItems=getVisibleExpandedItems(tree);
  if (treeItems.size() == 0) {
    return;
  }
  TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
  tree.setTopItem(treeItem);
}","@Override public void mouseScrolled(MouseEvent e){
  List<TreeItem> treeItems=getVisibleExpandedItems(tree);
  int topIndex=fTimeGraphViewer.getTopIndex();
  if (topIndex >= treeItems.size()) {
    return;
  }
  TreeItem treeItem=treeItems.get(topIndex);
  tree.setTopItem(treeItem);
}",0.5315985130111525
92014,"@Override public void widgetSelected(SelectionEvent e){
  List<TreeItem> treeItems=getVisibleExpandedItems(tree);
  if (treeItems.size() == 0) {
    return;
  }
  TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
  tree.setTopItem(treeItem);
}","@Override public void widgetSelected(SelectionEvent e){
  List<TreeItem> treeItems=getVisibleExpandedItems(tree);
  int topIndex=fTimeGraphViewer.getTopIndex();
  if (topIndex >= treeItems.size()) {
    return;
  }
  TreeItem treeItem=treeItems.get(topIndex);
  tree.setTopItem(treeItem);
}",0.5401459854014599
92015,"@Override public void selectionChanged(TimeGraphSelectionEvent event){
  ITimeGraphEntry entry=fTimeGraphViewer.getSelection();
  fInhibitTreeSelection=true;
  if (entry != null) {
    StructuredSelection selection=new StructuredSelection(entry);
    fTreeViewer.setSelection(selection);
  }
 else {
    fTreeViewer.setSelection(new StructuredSelection());
  }
  fInhibitTreeSelection=false;
  List<TreeItem> treeItems=getVisibleExpandedItems(tree);
  if (treeItems.size() == 0) {
    return;
  }
  TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
  tree.setTopItem(treeItem);
}","@Override public void selectionChanged(TimeGraphSelectionEvent event){
  ITimeGraphEntry entry=fTimeGraphViewer.getSelection();
  fInhibitTreeSelection=true;
  if (entry != null) {
    StructuredSelection selection=new StructuredSelection(entry);
    fTreeViewer.setSelection(selection);
  }
 else {
    fTreeViewer.setSelection(new StructuredSelection());
  }
  fInhibitTreeSelection=false;
  List<TreeItem> treeItems=getVisibleExpandedItems(tree);
  int topIndex=fTimeGraphViewer.getTopIndex();
  if (topIndex >= treeItems.size()) {
    return;
  }
  TreeItem treeItem=treeItems.get(topIndex);
  tree.setTopItem(treeItem);
}",0.8213114754098361
92016,"@Override protected Control createDialogArea(Composite parent){
  int numColumn=2;
  if (fTargetNodeComponent.isBufferTypeConfigSupported()) {
    numColumn=3;
  }
  Composite dialogComposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,true);
  dialogComposite.setLayout(layout);
  Composite commonModeGroup=new Composite(dialogComposite,SWT.NONE);
  layout=new GridLayout(3,true);
  commonModeGroup.setLayout(layout);
  Label channelNameLabel=new Label(commonModeGroup,SWT.RIGHT);
  channelNameLabel.setText(Messages.TraceControl_EnableChannelNameLabel);
  fChannelNameText=new Text(commonModeGroup,SWT.NONE);
  fChannelNameText.setToolTipText(Messages.TraceControl_EnableChannelNameTooltip);
  Label subBufferSizeLabel=new Label(commonModeGroup,SWT.RIGHT);
  subBufferSizeLabel.setText(Messages.TraceControl_SubBufferSizePropertyName);
  fSubBufferSizeText=new Text(commonModeGroup,SWT.NONE);
  fSubBufferSizeText.setToolTipText(Messages.TraceControl_EnableChannelSubBufferSizeTooltip);
  fSubBufferSizeText.addVerifyListener(fVerifyListener);
  fSubBufferSizeText.addFocusListener(fFocusListener);
  fSubBufferSizeText.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));
  Label numSubBufferLabel=new Label(commonModeGroup,SWT.RIGHT);
  numSubBufferLabel.setText(Messages.TraceControl_NbSubBuffersPropertyName);
  fNumberOfSubBuffersText=new Text(commonModeGroup,SWT.NONE);
  fNumberOfSubBuffersText.setToolTipText(Messages.TraceControl_EnableChannelNbSubBuffersTooltip);
  fNumberOfSubBuffersText.addVerifyListener(fVerifyListener);
  fNumberOfSubBuffersText.addFocusListener(fFocusListener);
  Label switchTimerLabel=new Label(commonModeGroup,SWT.RIGHT);
  switchTimerLabel.setText(Messages.TraceControl_SwitchTimerPropertyName);
  fSwitchTimerText=new Text(commonModeGroup,SWT.NONE);
  fSwitchTimerText.setToolTipText(Messages.TraceControl_EnableChannelSwitchTimerTooltip);
  fSwitchTimerText.addVerifyListener(fVerifyListener);
  fSwitchTimerText.addFocusListener(fFocusListener);
  Label readTimerLabel=new Label(commonModeGroup,SWT.RIGHT);
  readTimerLabel.setText(Messages.TraceControl_ReadTimerPropertyName);
  fReadTimerText=new Text(commonModeGroup,SWT.NONE);
  fReadTimerText.setToolTipText(Messages.TraceControl_EnableChannelReadTimerTooltip);
  fReadTimerText.addVerifyListener(fVerifyListener);
  fReadTimerText.addFocusListener(fFocusListener);
  if (fTargetNodeComponent.isTraceFileRotationSupported()) {
    Label maxSizeTraceFilesLabel=new Label(commonModeGroup,SWT.RIGHT);
    maxSizeTraceFilesLabel.setText(Messages.TraceControl_MaxSizeTraceFilesPropertyName);
    fMaxSizeTraceText=new Text(commonModeGroup,SWT.NONE);
    fMaxSizeTraceText.setToolTipText(Messages.TraceControl_EnbleChannelMaxSizeTraceFilesTooltip);
    fMaxSizeTraceText.addVerifyListener(fVerifyListener);
    fMaxSizeTraceText.addFocusListener(fFocusListener);
    Label maxNumTraceFilesLabel=new Label(commonModeGroup,SWT.RIGHT);
    maxNumTraceFilesLabel.setText(Messages.TraceControl_MaxNumTraceFilesPropertyName);
    fMaxNumberTraceText=new Text(commonModeGroup,SWT.NONE);
    fMaxNumberTraceText.setToolTipText(Messages.TraceControl_EnbleChannelMaxNumTraceFilesTooltip);
    fMaxNumberTraceText.addVerifyListener(fVerifyListener);
    fMaxNumberTraceText.addFocusListener(fFocusListener);
  }
  if (fTargetNodeComponent.isPeriodicalMetadataFlushSupported()) {
    fMetadataChannelButton=new Button(commonModeGroup,SWT.CHECK);
    fMetadataChannelButton.setText(Messages.TraceControl_ConfigureMetadataChannelName);
    fMetadataChannelButton.setSelection(false);
    fMetadataChannelButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (fMetadataChannelButton.getSelection()) {
          fPreviousChannelName=fChannelNameText.getText();
          fChannelNameText.setText(""String_Node_Str"");
          fChannelNameText.setEnabled(false);
        }
 else {
          fChannelNameText.setText(fPreviousChannelName);
          fChannelNameText.setEnabled(true);
        }
      }
    }
);
  }
  Group discardModeGroup=new Group(dialogComposite,SWT.SHADOW_NONE);
  discardModeGroup.setText(Messages.TraceControl_EnableChannelDiscardModeGroupName);
  layout=new GridLayout(numColumn,true);
  discardModeGroup.setLayout(layout);
  fDiscardModeButton=new Button(discardModeGroup,SWT.RADIO);
  fDiscardModeButton.setText(Messages.TraceControl_EnableChannelDiscardModeLabel);
  fDiscardModeButton.setToolTipText(Messages.TraceControl_EnableChannelDiscardModeTooltip);
  fDiscardModeButton.setSelection(true);
  fOverwriteModeButton=new Button(discardModeGroup,SWT.RADIO);
  fOverwriteModeButton.setText(Messages.TraceControl_EnableChannelOverwriteModeLabel);
  fOverwriteModeButton.setToolTipText(Messages.TraceControl_EnableChannelOverwriteModeTooltip);
  fOverwriteModeButton.setSelection(false);
  Group domainGroup=new Group(dialogComposite,SWT.SHADOW_NONE);
  domainGroup.setText(Messages.TraceControl_DomainDisplayName);
  layout=new GridLayout(numColumn,true);
  domainGroup.setLayout(layout);
  fKernelButton=new Button(domainGroup,SWT.RADIO);
  fKernelButton.setText(Messages.TraceControl_KernelDomainDisplayName);
  fKernelButton.setSelection(fIsKernel);
  fUstButton=new Button(domainGroup,SWT.RADIO);
  fUstButton.setText(Messages.TraceControl_UstDisplayName);
  fUstButton.setSelection(!fIsKernel);
  if (fTargetNodeComponent.isBufferTypeConfigSupported()) {
    Group bufferTypeGroup=new Group(dialogComposite,SWT.SHADOW_NONE);
    bufferTypeGroup.setText(Messages.TraceControl_BufferTypeDisplayName);
    layout=new GridLayout(numColumn,true);
    bufferTypeGroup.setLayout(layout);
    GridData data=new GridData(GridData.FILL,GridData.BEGINNING,false,false);
    data.horizontalSpan=3;
    bufferTypeGroup.setLayoutData(data);
    fSharedBuffersButton=new Button(bufferTypeGroup,SWT.RADIO);
    fSharedBuffersButton.setText(Messages.TraceControl_SharedBuffersDisplayName);
    fSharedBuffersButton.setSelection(fIsKernel);
    fSharedBuffersButton.setEnabled(false);
    fPIDBuffersButton=new Button(bufferTypeGroup,SWT.RADIO);
    fPIDBuffersButton.setText(Messages.TraceControl_PerPidBuffersDisplayName);
    fPIDBuffersButton.setToolTipText(Messages.TraceControl_PerPidBuffersTooltip);
    fPIDBuffersButton.setSelection(false);
    fUIDBuffersButton=new Button(bufferTypeGroup,SWT.RADIO);
    fUIDBuffersButton.setText(Messages.TraceControl_PerUidBuffersDisplayName);
    fUIDBuffersButton.setToolTipText(Messages.TraceControl_PerPidBuffersTooltip);
    fUIDBuffersButton.setSelection(false);
    fUIDBuffersButton.setEnabled(!fIsKernel);
    fPIDBuffersButton.setEnabled(!fIsKernel);
    fUstButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (fUstButton.getSelection()) {
          fSharedBuffersButton.setSelection(false);
          fPIDBuffersButton.setSelection(false);
          fUIDBuffersButton.setSelection(false);
          fPIDBuffersButton.setEnabled(true);
          fUIDBuffersButton.setEnabled(true);
        }
 else {
          fSharedBuffersButton.setSelection(true);
          fPIDBuffersButton.setSelection(false);
          fUIDBuffersButton.setSelection(false);
          fPIDBuffersButton.setEnabled(false);
          fUIDBuffersButton.setEnabled(false);
        }
      }
    }
);
  }
  if ((fDomain != null) || (!fHasKernel)) {
    fKernelButton.setEnabled(false);
    fUstButton.setEnabled(false);
    if (fTargetNodeComponent.isBufferTypeConfigSupported()) {
      fSharedBuffersButton.setEnabled(false);
      fUIDBuffersButton.setEnabled(false);
      fPIDBuffersButton.setEnabled(false);
      if (fDomain.getBufferType() != null) {
switch (fDomain.getBufferType()) {
case BUFFER_PER_PID:
          fPIDBuffersButton.setSelection(true);
        break;
case BUFFER_PER_UID:
      fUIDBuffersButton.setSelection(true);
    break;
case BUFFER_SHARED:
  fSharedBuffersButton.setSelection(true);
break;
default :
break;
}
}
}
}
GridData data=new GridData(GridData.FILL,GridData.BEGINNING,false,false);
data.horizontalSpan=3;
discardModeGroup.setLayoutData(data);
data=new GridData(SWT.BEGINNING,SWT.BEGINNING,true,true);
fDiscardModeButton.setLayoutData(data);
data=new GridData(SWT.BEGINNING,SWT.BEGINNING,true,true);
fOverwriteModeButton.setLayoutData(data);
data=new GridData(GridData.FILL,GridData.BEGINNING,false,false);
data.horizontalSpan=3;
domainGroup.setLayoutData(data);
data=new GridData(SWT.BEGINNING,SWT.BEGINNING,true,true);
fKernelButton.setLayoutData(data);
data=new GridData(SWT.BEGINNING,SWT.BEGINNING,true,true);
fUstButton.setLayoutData(data);
if (fTargetNodeComponent.isBufferTypeConfigSupported()) {
data=new GridData(SWT.BEGINNING,SWT.BEGINNING,true,true);
fSharedBuffersButton.setLayoutData(data);
data=new GridData(SWT.BEGINNING,SWT.BEGINNING,true,true);
fPIDBuffersButton.setLayoutData(data);
data=new GridData(SWT.BEGINNING,SWT.BEGINNING,true,true);
fUIDBuffersButton.setLayoutData(data);
}
if (fTargetNodeComponent.isPeriodicalMetadataFlushSupported()) {
data=new GridData(SWT.BEGINNING,SWT.BEGINNING,true,true);
data.horizontalSpan=numColumn;
fMetadataChannelButton.setLayoutData(data);
}
data=new GridData(GridData.FILL_HORIZONTAL);
data.horizontalSpan=2;
fChannelNameText.setLayoutData(data);
fSubBufferSizeText.setLayoutData(data);
fNumberOfSubBuffersText.setLayoutData(data);
fSwitchTimerText.setLayoutData(data);
fReadTimerText.setLayoutData(data);
if (fTargetNodeComponent.isTraceFileRotationSupported()) {
fMaxNumberTraceText.setLayoutData(data);
fMaxSizeTraceText.setLayoutData(data);
}
setDefaults();
return dialogComposite;
}","@Override protected Control createDialogArea(Composite parent){
  int numColumn=2;
  if (fTargetNodeComponent.isBufferTypeConfigSupported()) {
    numColumn=3;
  }
  Composite dialogComposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,true);
  dialogComposite.setLayout(layout);
  Composite commonModeGroup=new Composite(dialogComposite,SWT.NONE);
  layout=new GridLayout(3,true);
  commonModeGroup.setLayout(layout);
  Label channelNameLabel=new Label(commonModeGroup,SWT.RIGHT);
  channelNameLabel.setText(Messages.TraceControl_EnableChannelNameLabel);
  fChannelNameText=new Text(commonModeGroup,SWT.NONE);
  fChannelNameText.setToolTipText(Messages.TraceControl_EnableChannelNameTooltip);
  Label subBufferSizeLabel=new Label(commonModeGroup,SWT.RIGHT);
  subBufferSizeLabel.setText(Messages.TraceControl_SubBufferSizePropertyName);
  fSubBufferSizeText=new Text(commonModeGroup,SWT.NONE);
  fSubBufferSizeText.setToolTipText(Messages.TraceControl_EnableChannelSubBufferSizeTooltip);
  fSubBufferSizeText.addVerifyListener(fVerifyListener);
  fSubBufferSizeText.addFocusListener(fFocusListener);
  fSubBufferSizeText.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));
  Label numSubBufferLabel=new Label(commonModeGroup,SWT.RIGHT);
  numSubBufferLabel.setText(Messages.TraceControl_NbSubBuffersPropertyName);
  fNumberOfSubBuffersText=new Text(commonModeGroup,SWT.NONE);
  fNumberOfSubBuffersText.setToolTipText(Messages.TraceControl_EnableChannelNbSubBuffersTooltip);
  fNumberOfSubBuffersText.addVerifyListener(fVerifyListener);
  fNumberOfSubBuffersText.addFocusListener(fFocusListener);
  Label switchTimerLabel=new Label(commonModeGroup,SWT.RIGHT);
  switchTimerLabel.setText(Messages.TraceControl_SwitchTimerPropertyName);
  fSwitchTimerText=new Text(commonModeGroup,SWT.NONE);
  fSwitchTimerText.setToolTipText(Messages.TraceControl_EnableChannelSwitchTimerTooltip);
  fSwitchTimerText.addVerifyListener(fVerifyListener);
  fSwitchTimerText.addFocusListener(fFocusListener);
  Label readTimerLabel=new Label(commonModeGroup,SWT.RIGHT);
  readTimerLabel.setText(Messages.TraceControl_ReadTimerPropertyName);
  fReadTimerText=new Text(commonModeGroup,SWT.NONE);
  fReadTimerText.setToolTipText(Messages.TraceControl_EnableChannelReadTimerTooltip);
  fReadTimerText.addVerifyListener(fVerifyListener);
  fReadTimerText.addFocusListener(fFocusListener);
  if (fTargetNodeComponent.isTraceFileRotationSupported()) {
    Label maxSizeTraceFilesLabel=new Label(commonModeGroup,SWT.RIGHT);
    maxSizeTraceFilesLabel.setText(Messages.TraceControl_MaxSizeTraceFilesPropertyName);
    fMaxSizeTraceText=new Text(commonModeGroup,SWT.NONE);
    fMaxSizeTraceText.setToolTipText(Messages.TraceControl_EnbleChannelMaxSizeTraceFilesTooltip);
    fMaxSizeTraceText.addVerifyListener(fVerifyListener);
    fMaxSizeTraceText.addFocusListener(fFocusListener);
    Label maxNumTraceFilesLabel=new Label(commonModeGroup,SWT.RIGHT);
    maxNumTraceFilesLabel.setText(Messages.TraceControl_MaxNumTraceFilesPropertyName);
    fMaxNumberTraceText=new Text(commonModeGroup,SWT.NONE);
    fMaxNumberTraceText.setToolTipText(Messages.TraceControl_EnbleChannelMaxNumTraceFilesTooltip);
    fMaxNumberTraceText.addVerifyListener(fVerifyListener);
    fMaxNumberTraceText.addFocusListener(fFocusListener);
  }
  if (fTargetNodeComponent.isPeriodicalMetadataFlushSupported()) {
    fMetadataChannelButton=new Button(commonModeGroup,SWT.CHECK);
    fMetadataChannelButton.setText(Messages.TraceControl_ConfigureMetadataChannelName);
    fMetadataChannelButton.setSelection(false);
    fMetadataChannelButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (fMetadataChannelButton.getSelection()) {
          fPreviousChannelName=fChannelNameText.getText();
          fChannelNameText.setText(""String_Node_Str"");
          fChannelNameText.setEnabled(false);
        }
 else {
          fChannelNameText.setText(fPreviousChannelName);
          fChannelNameText.setEnabled(true);
        }
      }
    }
);
  }
  Group discardModeGroup=new Group(dialogComposite,SWT.SHADOW_NONE);
  discardModeGroup.setText(Messages.TraceControl_EnableChannelDiscardModeGroupName);
  layout=new GridLayout(numColumn,true);
  discardModeGroup.setLayout(layout);
  fDiscardModeButton=new Button(discardModeGroup,SWT.RADIO);
  fDiscardModeButton.setText(Messages.TraceControl_EnableChannelDiscardModeLabel);
  fDiscardModeButton.setToolTipText(Messages.TraceControl_EnableChannelDiscardModeTooltip);
  fDiscardModeButton.setSelection(true);
  fOverwriteModeButton=new Button(discardModeGroup,SWT.RADIO);
  fOverwriteModeButton.setText(Messages.TraceControl_EnableChannelOverwriteModeLabel);
  fOverwriteModeButton.setToolTipText(Messages.TraceControl_EnableChannelOverwriteModeTooltip);
  fOverwriteModeButton.setSelection(false);
  Group domainGroup=new Group(dialogComposite,SWT.SHADOW_NONE);
  domainGroup.setText(Messages.TraceControl_DomainDisplayName);
  layout=new GridLayout(numColumn,true);
  domainGroup.setLayout(layout);
  fKernelButton=new Button(domainGroup,SWT.RADIO);
  fKernelButton.setText(Messages.TraceControl_KernelDomainDisplayName);
  fKernelButton.setSelection(fIsKernel);
  fUstButton=new Button(domainGroup,SWT.RADIO);
  fUstButton.setText(Messages.TraceControl_UstDisplayName);
  fUstButton.setSelection(!fIsKernel);
  if (fTargetNodeComponent.isBufferTypeConfigSupported()) {
    Group bufferTypeGroup=new Group(dialogComposite,SWT.SHADOW_NONE);
    bufferTypeGroup.setText(Messages.TraceControl_BufferTypeDisplayName);
    layout=new GridLayout(numColumn,true);
    bufferTypeGroup.setLayout(layout);
    GridData data=new GridData(GridData.FILL,GridData.BEGINNING,false,false);
    data.horizontalSpan=3;
    bufferTypeGroup.setLayoutData(data);
    fSharedBuffersButton=new Button(bufferTypeGroup,SWT.RADIO);
    fSharedBuffersButton.setText(Messages.TraceControl_SharedBuffersDisplayName);
    fSharedBuffersButton.setSelection(fIsKernel);
    fSharedBuffersButton.setEnabled(false);
    fPIDBuffersButton=new Button(bufferTypeGroup,SWT.RADIO);
    fPIDBuffersButton.setText(Messages.TraceControl_PerPidBuffersDisplayName);
    fPIDBuffersButton.setToolTipText(Messages.TraceControl_PerPidBuffersTooltip);
    fPIDBuffersButton.setSelection(false);
    fUIDBuffersButton=new Button(bufferTypeGroup,SWT.RADIO);
    fUIDBuffersButton.setText(Messages.TraceControl_PerUidBuffersDisplayName);
    fUIDBuffersButton.setToolTipText(Messages.TraceControl_PerPidBuffersTooltip);
    fUIDBuffersButton.setSelection(false);
    fUIDBuffersButton.setEnabled(!fIsKernel);
    fPIDBuffersButton.setEnabled(!fIsKernel);
    fUstButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (fUstButton.getSelection()) {
          fSharedBuffersButton.setSelection(false);
          fPIDBuffersButton.setSelection(false);
          fUIDBuffersButton.setSelection(false);
          fPIDBuffersButton.setEnabled(true);
          fUIDBuffersButton.setEnabled(true);
        }
 else {
          fSharedBuffersButton.setSelection(true);
          fPIDBuffersButton.setSelection(false);
          fUIDBuffersButton.setSelection(false);
          fPIDBuffersButton.setEnabled(false);
          fUIDBuffersButton.setEnabled(false);
        }
      }
    }
);
  }
  if ((fDomain != null) || (!fHasKernel)) {
    fKernelButton.setEnabled(false);
    fUstButton.setEnabled(false);
    if (fTargetNodeComponent.isBufferTypeConfigSupported()) {
      fSharedBuffersButton.setEnabled(false);
      fUIDBuffersButton.setEnabled(!fHasKernel);
      fPIDBuffersButton.setEnabled(!fHasKernel);
      setBufferTypeButtonSelection();
    }
  }
  GridData data=new GridData(GridData.FILL,GridData.BEGINNING,false,false);
  data.horizontalSpan=3;
  discardModeGroup.setLayoutData(data);
  data=new GridData(SWT.BEGINNING,SWT.BEGINNING,true,true);
  fDiscardModeButton.setLayoutData(data);
  data=new GridData(SWT.BEGINNING,SWT.BEGINNING,true,true);
  fOverwriteModeButton.setLayoutData(data);
  data=new GridData(GridData.FILL,GridData.BEGINNING,false,false);
  data.horizontalSpan=3;
  domainGroup.setLayoutData(data);
  data=new GridData(SWT.BEGINNING,SWT.BEGINNING,true,true);
  fKernelButton.setLayoutData(data);
  data=new GridData(SWT.BEGINNING,SWT.BEGINNING,true,true);
  fUstButton.setLayoutData(data);
  if (fTargetNodeComponent.isBufferTypeConfigSupported()) {
    data=new GridData(SWT.BEGINNING,SWT.BEGINNING,true,true);
    fSharedBuffersButton.setLayoutData(data);
    data=new GridData(SWT.BEGINNING,SWT.BEGINNING,true,true);
    fPIDBuffersButton.setLayoutData(data);
    data=new GridData(SWT.BEGINNING,SWT.BEGINNING,true,true);
    fUIDBuffersButton.setLayoutData(data);
  }
  if (fTargetNodeComponent.isPeriodicalMetadataFlushSupported()) {
    data=new GridData(SWT.BEGINNING,SWT.BEGINNING,true,true);
    data.horizontalSpan=numColumn;
    fMetadataChannelButton.setLayoutData(data);
  }
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=2;
  fChannelNameText.setLayoutData(data);
  fSubBufferSizeText.setLayoutData(data);
  fNumberOfSubBuffersText.setLayoutData(data);
  fSwitchTimerText.setLayoutData(data);
  fReadTimerText.setLayoutData(data);
  if (fTargetNodeComponent.isTraceFileRotationSupported()) {
    fMaxNumberTraceText.setLayoutData(data);
    fMaxSizeTraceText.setLayoutData(data);
  }
  setDefaults();
  return dialogComposite;
}",0.9744656508398772
92017,"/** 
 * Sets default value depending on Kernel or UST
 */
private void setDefaults(){
  fSwitchTimerText.setText(DEFAULT_TEXT);
  fSwitchTimerText.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));
  fReadTimerText.setText(DEFAULT_TEXT);
  fReadTimerText.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));
  fOverwriteModeButton.setSelection(IChannelInfo.DEFAULT_OVERWRITE_MODE);
  if (fTargetNodeComponent.isTraceFileRotationSupported()) {
    fMaxSizeTraceText.setText(DEFAULT_TEXT);
    fMaxSizeTraceText.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));
    fMaxNumberTraceText.setText(DEFAULT_TEXT);
    fMaxNumberTraceText.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));
  }
  fSubBufferSizeText.setText(DEFAULT_TEXT);
  fSubBufferSizeText.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));
  fNumberOfSubBuffersText.setText(DEFAULT_TEXT);
  fNumberOfSubBuffersText.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));
  if (fTargetNodeComponent.isBufferTypeConfigSupported()) {
    fPIDBuffersButton.setSelection(false);
    fUIDBuffersButton.setSelection(false);
  }
}","/** 
 * Sets default value depending on Kernel or UST
 */
private void setDefaults(){
  fSwitchTimerText.setText(DEFAULT_TEXT);
  fSwitchTimerText.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));
  fReadTimerText.setText(DEFAULT_TEXT);
  fReadTimerText.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));
  fOverwriteModeButton.setSelection(IChannelInfo.DEFAULT_OVERWRITE_MODE);
  if (fTargetNodeComponent.isTraceFileRotationSupported()) {
    fMaxSizeTraceText.setText(DEFAULT_TEXT);
    fMaxSizeTraceText.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));
    fMaxNumberTraceText.setText(DEFAULT_TEXT);
    fMaxNumberTraceText.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));
  }
  fSubBufferSizeText.setText(DEFAULT_TEXT);
  fSubBufferSizeText.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));
  fNumberOfSubBuffersText.setText(DEFAULT_TEXT);
  fNumberOfSubBuffersText.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));
  if (fTargetNodeComponent.isBufferTypeConfigSupported()) {
    setBufferTypeButtonSelection();
  }
}",0.9727195225916454
92018,"@Override protected void okPressed(){
  fChannelInfo=new ChannelInfo(fChannelNameText.getText());
  fChannelInfo.setSubBufferSize(fSubBufferSizeText.getText().equals(DEFAULT_TEXT) ? LTTngControlServiceConstants.UNUSED_VALUE : Long.parseLong(fSubBufferSizeText.getText()));
  fChannelInfo.setNumberOfSubBuffers(fNumberOfSubBuffersText.getText().equals(DEFAULT_TEXT) ? LTTngControlServiceConstants.UNUSED_VALUE : Integer.parseInt(fNumberOfSubBuffersText.getText()));
  fChannelInfo.setSwitchTimer(fSwitchTimerText.getText().equals(DEFAULT_TEXT) ? LTTngControlServiceConstants.UNUSED_VALUE : Long.parseLong(fSwitchTimerText.getText()));
  fChannelInfo.setReadTimer(fReadTimerText.getText().equals(DEFAULT_TEXT) ? LTTngControlServiceConstants.UNUSED_VALUE : Long.parseLong(fReadTimerText.getText()));
  fChannelInfo.setOverwriteMode(fOverwriteModeButton.getSelection());
  if (fTargetNodeComponent.isTraceFileRotationSupported()) {
    fChannelInfo.setMaxSizeTraceFiles(fMaxSizeTraceText.getText().equals(DEFAULT_TEXT) ? LTTngControlServiceConstants.UNUSED_VALUE : Integer.parseInt(fMaxSizeTraceText.getText()));
    fChannelInfo.setMaxNumberTraceFiles(fMaxNumberTraceText.getText().equals(DEFAULT_TEXT) ? LTTngControlServiceConstants.UNUSED_VALUE : Integer.parseInt(fMaxNumberTraceText.getText()));
  }
  if (fTargetNodeComponent.isBufferTypeConfigSupported()) {
    if (fSharedBuffersButton.getSelection()) {
      fChannelInfo.setBufferType(BufferType.BUFFER_SHARED);
    }
 else     if (fPIDBuffersButton.getSelection()) {
      fChannelInfo.setBufferType(BufferType.BUFFER_PER_PID);
    }
 else     if (fUIDBuffersButton.getSelection()) {
      fChannelInfo.setBufferType(BufferType.BUFFER_PER_UID);
    }
 else {
      fChannelInfo.setBufferType(BufferType.BUFFER_TYPE_UNKNOWN);
    }
  }
  fIsKernel=fKernelButton.getSelection();
  if (!fChannelInfo.getName().matches(""String_Node_Str"")) {
    MessageDialog.openError(getShell(),Messages.TraceControl_EnableChannelDialogTitle,Messages.TraceControl_InvalidChannelNameError + ""String_Node_Str"" + fChannelInfo.getName()+ ""String_Node_Str"");
    return;
  }
  if (fDomain != null && fDomain.containsChild(fChannelInfo.getName())) {
    MessageDialog.openError(getShell(),Messages.TraceControl_EnableChannelDialogTitle,Messages.TraceControl_ChannelAlreadyExistsError + ""String_Node_Str"" + fChannelInfo.getName()+ ""String_Node_Str"");
    return;
  }
  super.okPressed();
}","@Override protected void okPressed(){
  ChannelInfo channelInfo=new ChannelInfo(fChannelNameText.getText());
  channelInfo.setSubBufferSize(fSubBufferSizeText.getText().equals(DEFAULT_TEXT) ? LTTngControlServiceConstants.UNUSED_VALUE : Long.parseLong(fSubBufferSizeText.getText()));
  channelInfo.setNumberOfSubBuffers(fNumberOfSubBuffersText.getText().equals(DEFAULT_TEXT) ? LTTngControlServiceConstants.UNUSED_VALUE : Integer.parseInt(fNumberOfSubBuffersText.getText()));
  channelInfo.setSwitchTimer(fSwitchTimerText.getText().equals(DEFAULT_TEXT) ? LTTngControlServiceConstants.UNUSED_VALUE : Long.parseLong(fSwitchTimerText.getText()));
  channelInfo.setReadTimer(fReadTimerText.getText().equals(DEFAULT_TEXT) ? LTTngControlServiceConstants.UNUSED_VALUE : Long.parseLong(fReadTimerText.getText()));
  channelInfo.setOverwriteMode(fOverwriteModeButton.getSelection());
  if (fTargetNodeComponent.isTraceFileRotationSupported()) {
    channelInfo.setMaxSizeTraceFiles(fMaxSizeTraceText.getText().equals(DEFAULT_TEXT) ? LTTngControlServiceConstants.UNUSED_VALUE : Integer.parseInt(fMaxSizeTraceText.getText()));
    channelInfo.setMaxNumberTraceFiles(fMaxNumberTraceText.getText().equals(DEFAULT_TEXT) ? LTTngControlServiceConstants.UNUSED_VALUE : Integer.parseInt(fMaxNumberTraceText.getText()));
  }
  if (fTargetNodeComponent.isBufferTypeConfigSupported()) {
    if (fSharedBuffersButton.getSelection()) {
      channelInfo.setBufferType(BufferType.BUFFER_SHARED);
    }
 else     if (fPIDBuffersButton.getSelection()) {
      channelInfo.setBufferType(BufferType.BUFFER_PER_PID);
    }
 else     if (fUIDBuffersButton.getSelection()) {
      channelInfo.setBufferType(BufferType.BUFFER_PER_UID);
    }
 else {
      channelInfo.setBufferType(BufferType.BUFFER_TYPE_UNKNOWN);
    }
  }
  fIsKernel=fKernelButton.getSelection();
  if (!channelInfo.getName().matches(""String_Node_Str"")) {
    MessageDialog.openError(getShell(),Messages.TraceControl_EnableChannelDialogTitle,Messages.TraceControl_InvalidChannelNameError + ""String_Node_Str"" + channelInfo.getName()+ ""String_Node_Str"");
    return;
  }
  if (fDomain != null && fDomain.containsChild(channelInfo.getName())) {
    MessageDialog.openError(getShell(),Messages.TraceControl_EnableChannelDialogTitle,Messages.TraceControl_ChannelAlreadyExistsError + ""String_Node_Str"" + channelInfo.getName()+ ""String_Node_Str"");
    return;
  }
  fChannelInfo=channelInfo;
  super.okPressed();
}",0.9819004524886876
92019,"/** 
 * Validates the kernel composite input data.
 * @return true if configured data is valid and can be retrieved.
 */
public boolean isValid(){
  fIsTracepoints=fTracepointsActivateButton.getSelection();
  fIsSysCalls=fSysCallsActivateButton.getSelection();
  fIsDynamicProbe=fProbeActivateButton.getSelection();
  fIsDynamicFunctionProbe=fFunctionActivateButton.getSelection();
  fIsAllTracepoints=false;
  fSelectedEvents=new ArrayList<String>();
  if (fIsTracepoints) {
    List<ITraceControlComponent> comps=fProviderGroup.getChildren(KernelProviderComponent.class);
    fIsAllTracepoints=fTracepointsViewer.getChecked(comps.get(0));
    Object[] checkedElements=fTracepointsViewer.getCheckedElements();
    for (int i=0; i < checkedElements.length; i++) {
      ITraceControlComponent component=(ITraceControlComponent)checkedElements[i];
      if (component instanceof BaseEventComponent) {
        fSelectedEvents.add(component.getName());
      }
    }
  }
  if (fIsDynamicProbe) {
    String temp=fProbeEventNameText.getText();
    if (!temp.matches(""String_Node_Str"") && !temp.matches(""String_Node_Str"")) {
      MessageDialog.openError(getShell(),Messages.TraceControl_EnableEventsDialogTitle,Messages.TraceControl_InvalidProbeNameError + ""String_Node_Str"" + temp+ ""String_Node_Str"");
      return false;
    }
    if (!fProbeText.getText().matches(""String_Node_Str"")) {
      fProbeEventName=temp;
      fProbeString=fProbeText.getText();
    }
  }
  fFunctionEventName=null;
  fFunctionString=null;
  if (fIsDynamicFunctionProbe) {
    String functionTemp=fFunctionEventNameText.getText();
    if (!functionTemp.matches(""String_Node_Str"") && !functionTemp.matches(""String_Node_Str"")) {
      MessageDialog.openError(getShell(),Messages.TraceControl_EnableEventsDialogTitle,Messages.TraceControl_InvalidProbeNameError + ""String_Node_Str"" + functionTemp+ ""String_Node_Str"");
      return false;
    }
    if (!fFunctionText.getText().matches(""String_Node_Str"")) {
      fFunctionEventName=functionTemp;
      fFunctionString=fFunctionText.getText();
    }
  }
  return true;
}","/** 
 * Validates the kernel composite input data.
 * @return true if configured data is valid and can be retrieved.
 */
public boolean isValid(){
  fIsTracepoints=fTracepointsActivateButton.getSelection();
  fIsSysCalls=fSysCallsActivateButton.getSelection();
  fIsDynamicProbe=fProbeActivateButton.getSelection();
  fIsDynamicFunctionProbe=fFunctionActivateButton.getSelection();
  fIsAllTracepoints=false;
  fSelectedEvents=new ArrayList<String>();
  if (fIsTracepoints) {
    List<ITraceControlComponent> comps=fProviderGroup.getChildren(KernelProviderComponent.class);
    fIsAllTracepoints=fTracepointsViewer.getChecked(comps.get(0));
    Object[] checkedElements=fTracepointsViewer.getCheckedElements();
    for (int i=0; i < checkedElements.length; i++) {
      ITraceControlComponent component=(ITraceControlComponent)checkedElements[i];
      if (component instanceof BaseEventComponent) {
        fSelectedEvents.add(component.getName());
      }
    }
  }
  if (fIsDynamicProbe) {
    String temp=fProbeEventNameText.getText();
    if (temp.isEmpty() || fProbeText.getText().matches(""String_Node_Str"") || (!temp.matches(""String_Node_Str"") && !temp.matches(""String_Node_Str""))) {
      MessageDialog.openError(getShell(),Messages.TraceControl_EnableEventsDialogTitle,Messages.TraceControl_InvalidProbeNameError + ""String_Node_Str"" + temp+ ""String_Node_Str"");
      return false;
    }
    fProbeEventName=temp;
    fProbeString=fProbeText.getText();
  }
  fFunctionEventName=null;
  fFunctionString=null;
  if (fIsDynamicFunctionProbe) {
    String functionTemp=fFunctionEventNameText.getText();
    if (functionTemp.isEmpty() || functionTemp.matches(""String_Node_Str"") || (!functionTemp.matches(""String_Node_Str"") && !functionTemp.matches(""String_Node_Str""))) {
      MessageDialog.openError(getShell(),Messages.TraceControl_EnableEventsDialogTitle,Messages.TraceControl_InvalidProbeNameError + ""String_Node_Str"" + functionTemp+ ""String_Node_Str"");
      return false;
    }
    fFunctionEventName=functionTemp;
    fFunctionString=fFunctionText.getText();
  }
  return true;
}",0.8801148600143575
92020,"/** 
 * Validates the UST composite input data.
 * @return true if configured data is valid and can be retrieved.
 */
public boolean isValid(){
  fIsTracepoints=fTracepointsActivateButton.getSelection();
  fIsWildcard=fWildcardActivateButton.getSelection();
  fIsLogLevel=fLogLevelActivateButton.getSelection();
  fIsAllTracepoints=false;
  fSelectedEvents=new ArrayList<String>();
  if (fIsTracepoints) {
    fIsAllTracepoints=fTracepointsViewer.getChecked(fProviderGroup);
    Set<String> set=new HashSet<String>();
    Object[] checkedElements=fTracepointsViewer.getCheckedElements();
    for (int i=0; i < checkedElements.length; i++) {
      ITraceControlComponent component=(ITraceControlComponent)checkedElements[i];
      if (!set.contains(component.getName()) && (component instanceof BaseEventComponent)) {
        set.add(component.getName());
        fSelectedEvents.add(component.getName());
      }
    }
  }
  fLogLevelType=LogLevelType.LOGLEVEL_NONE;
  fLogLevelEventName=null;
  if (fIsLogLevel) {
    if (fLogLevelButton.getSelection()) {
      fLogLevelType=LogLevelType.LOGLEVEL;
    }
 else     if (fLogLevelOnlyButton.getSelection()) {
      fLogLevelType=LogLevelType.LOGLEVEL_ONLY;
    }
    String temp=fLogLevelEventNameText.getText();
    if (!temp.matches(""String_Node_Str"") && !temp.matches(""String_Node_Str"")) {
      MessageDialog.openError(getShell(),Messages.TraceControl_EnableEventsDialogTitle,Messages.TraceControl_InvalidLogLevelEventNameError + ""String_Node_Str"" + temp+ ""String_Node_Str"");
      return false;
    }
    if (!temp.matches(""String_Node_Str"")) {
      fLogLevelEventName=temp;
    }
    TraceLogLevel[] levels=TraceLogLevel.values();
    int id=fLogLevelCombo.getSelectionIndex();
    if (id < 0) {
      MessageDialog.openError(getShell(),Messages.TraceControl_EnableEventsDialogTitle,Messages.TraceControl_InvalidLogLevel + ""String_Node_Str"" + temp+ ""String_Node_Str"");
      return false;
    }
    fLogLevel=levels[id];
  }
  fWildcard=null;
  if (fIsWildcard) {
    String tempWildcard=fWildcardText.getText();
    if (!tempWildcard.matches(""String_Node_Str"") && !tempWildcard.matches(""String_Node_Str"")) {
      MessageDialog.openError(getShell(),Messages.TraceControl_EnableEventsDialogTitle,Messages.TraceControl_InvalidWildcardError + ""String_Node_Str"" + tempWildcard+ ""String_Node_Str"");
      return false;
    }
    if (!tempWildcard.matches(""String_Node_Str"")) {
      fWildcard=tempWildcard;
    }
  }
  fFilterExpression=null;
  if (fProviderGroup.isEventFilteringSupported()) {
    String tempFilter=fFilterText.getText();
    if (!tempFilter.matches(""String_Node_Str"")) {
      fFilterExpression=tempFilter;
    }
  }
  return true;
}","/** 
 * Validates the UST composite input data.
 * @return true if configured data is valid and can be retrieved.
 */
public boolean isValid(){
  fIsTracepoints=fTracepointsActivateButton.getSelection();
  fIsWildcard=fWildcardActivateButton.getSelection();
  fIsLogLevel=fLogLevelActivateButton.getSelection();
  fIsAllTracepoints=false;
  fSelectedEvents=new ArrayList<String>();
  if (fIsTracepoints) {
    fIsAllTracepoints=fTracepointsViewer.getChecked(fProviderGroup);
    Set<String> set=new HashSet<String>();
    Object[] checkedElements=fTracepointsViewer.getCheckedElements();
    for (int i=0; i < checkedElements.length; i++) {
      ITraceControlComponent component=(ITraceControlComponent)checkedElements[i];
      if (!set.contains(component.getName()) && (component instanceof BaseEventComponent)) {
        set.add(component.getName());
        fSelectedEvents.add(component.getName());
      }
    }
  }
  fLogLevelType=LogLevelType.LOGLEVEL_NONE;
  fLogLevelEventName=null;
  if (fIsLogLevel) {
    if (fLogLevelButton.getSelection()) {
      fLogLevelType=LogLevelType.LOGLEVEL;
    }
 else     if (fLogLevelOnlyButton.getSelection()) {
      fLogLevelType=LogLevelType.LOGLEVEL_ONLY;
    }
    String temp=fLogLevelEventNameText.getText();
    if (temp.isEmpty() || temp.matches(""String_Node_Str"") || (!temp.matches(""String_Node_Str"") && !temp.matches(""String_Node_Str""))) {
      MessageDialog.openError(getShell(),Messages.TraceControl_EnableEventsDialogTitle,Messages.TraceControl_InvalidLogLevelEventNameError + ""String_Node_Str"" + temp+ ""String_Node_Str"");
      return false;
    }
    fLogLevelEventName=temp;
    TraceLogLevel[] levels=TraceLogLevel.values();
    int id=fLogLevelCombo.getSelectionIndex();
    if (id < 0) {
      MessageDialog.openError(getShell(),Messages.TraceControl_EnableEventsDialogTitle,Messages.TraceControl_InvalidLogLevel + ""String_Node_Str"" + temp+ ""String_Node_Str"");
      return false;
    }
    fLogLevel=levels[id];
  }
  fWildcard=null;
  if (fIsWildcard) {
    String tempWildcard=fWildcardText.getText();
    if (tempWildcard.isEmpty() || tempWildcard.matches(""String_Node_Str"") || (!tempWildcard.matches(""String_Node_Str"") && !tempWildcard.matches(""String_Node_Str""))) {
      MessageDialog.openError(getShell(),Messages.TraceControl_EnableEventsDialogTitle,Messages.TraceControl_InvalidWildcardError + ""String_Node_Str"" + tempWildcard+ ""String_Node_Str"");
      return false;
    }
    fWildcard=tempWildcard;
  }
  fFilterExpression=null;
  if (fProviderGroup.isEventFilteringSupported()) {
    String tempFilter=fFilterText.getText();
    if (!tempFilter.isEmpty() && !tempFilter.matches(""String_Node_Str"")) {
      fFilterExpression=tempFilter;
    }
  }
  return true;
}",0.8753442261795483
92021,"@Override protected void okPressed(){
  if (fSessionsCombo.getSelectionIndex() < 0) {
    MessageDialog.openError(getShell(),Messages.TraceControl_EnableEventsDialogTitle,Messages.TraceControl_EnableEventsNoSessionError);
    return;
  }
  fSessionIndex=fSessionsCombo.getSelectionIndex();
  fChannel=null;
  if ((fChannels != null) && (fChannelsCombo.getSelectionIndex() >= 0)) {
    fChannel=fChannels[fChannelsCombo.getSelectionIndex()];
  }
  fFilterExpression=null;
  if (fSessions[0].isEventFilteringSupported() && !fIsKernel) {
    String tempFilter=fFilterText.getText();
    if (!tempFilter.matches(""String_Node_Str"")) {
      fFilterExpression=tempFilter;
    }
  }
  super.okPressed();
}","@Override protected void okPressed(){
  if (fSessionsCombo.getSelectionIndex() < 0) {
    MessageDialog.openError(getShell(),Messages.TraceControl_EnableEventsDialogTitle,Messages.TraceControl_EnableEventsNoSessionError);
    return;
  }
  fSessionIndex=fSessionsCombo.getSelectionIndex();
  fChannel=null;
  if ((fChannels != null) && (fChannelsCombo.getSelectionIndex() >= 0)) {
    fChannel=fChannels[fChannelsCombo.getSelectionIndex()];
  }
  fFilterExpression=null;
  if (fSessions[0].isEventFilteringSupported() && !fIsKernel) {
    String tempFilter=fFilterText.getText();
    if (!tempFilter.isEmpty() && !tempFilter.matches(""String_Node_Str"")) {
      fFilterExpression=tempFilter;
    }
  }
  super.okPressed();
}",0.9824067558057706
92022,"@Override protected void okPressed(){
  fSessionName=fSessionNameText.getText();
  fSessionPath=fSessionPathText.getText();
  if (!""String_Node_Str"".equals(fSessionPath)) {
    if (!fIsStreamedTrace) {
      TargetNodeComponent node=(TargetNodeComponent)fParent.getParent();
      IRemoteSystemProxy proxy=node.getRemoteSystemProxy();
      IFileServiceSubSystem fsss=proxy.getFileServiceSubSystem();
      if (fsss != null) {
        try {
          IRemoteFile remoteFolder=fsss.getRemoteFileObject(fSessionPath,new NullProgressMonitor());
          if (remoteFolder.exists()) {
            MessageDialog.openError(getShell(),Messages.TraceControl_CreateSessionDialogTitle,Messages.TraceControl_SessionPathAlreadyExistsError + ""String_Node_Str"" + fSessionPath+ ""String_Node_Str"");
            return;
          }
        }
 catch (        SystemMessageException e) {
          MessageDialog.openError(getShell(),Messages.TraceControl_CreateSessionDialogTitle,Messages.TraceControl_FileSubSystemError + ""String_Node_Str"" + e);
          return;
        }
      }
    }
    fIsDefaultPath=false;
  }
  fNetworkUrl=null;
  fControlUrl=null;
  fDataUrl=null;
  if (fIsStreamedTrace) {
    fTracePath=fTracePathText.getText();
    if (fControlProtocolCombo.getSelectionIndex() < 0) {
      MessageDialog.openError(getShell(),Messages.TraceControl_CreateSessionDialogTitle,""String_Node_Str"");
      return;
    }
    if (""String_Node_Str"".equals(fControlHostAddressText.getText())) {
      MessageDialog.openError(getShell(),Messages.TraceControl_CreateSessionDialogTitle,""String_Node_Str"");
      return;
    }
    if (!fLinkDataWithControlButton.getSelection()) {
      if (fDataProtocolCombo.getSelectionIndex() < 0) {
        MessageDialog.openError(getShell(),Messages.TraceControl_CreateSessionDialogTitle,""String_Node_Str"");
        return;
      }
      if (""String_Node_Str"".equals(fDataHostAddressText.getText())) {
        MessageDialog.openError(getShell(),Messages.TraceControl_CreateSessionDialogTitle,""String_Node_Str"");
        return;
      }
      fControlUrl=getUrlString(fControlProtocolCombo.getItem(fControlProtocolCombo.getSelectionIndex()),fControlHostAddressText.getText(),fControlPortText.getText(),null,fTracePath);
      fDataUrl=getUrlString(fControlProtocolCombo.getItem(fDataProtocolCombo.getSelectionIndex()),fDataHostAddressText.getText(),null,fDataPortText.getText(),fTracePath);
    }
 else {
      fNetworkUrl=getUrlString(fControlProtocolCombo.getItem(fDataProtocolCombo.getSelectionIndex()),fControlHostAddressText.getText(),fControlPortText.getText(),fDataPortText.getText(),fTracePath);
    }
  }
  if (!""String_Node_Str"".equals(fSessionName) && !fSessionName.matches(""String_Node_Str"")) {
    MessageDialog.openError(getShell(),Messages.TraceControl_CreateSessionDialogTitle,Messages.TraceControl_InvalidSessionNameError + ""String_Node_Str"" + fSessionName+ ""String_Node_Str"");
    return;
  }
  if (fParent.containsChild(fSessionName)) {
    MessageDialog.openError(getShell(),Messages.TraceControl_CreateSessionDialogTitle,Messages.TraceControl_SessionAlreadyExistsError + ""String_Node_Str"" + fSessionName+ ""String_Node_Str"");
    return;
  }
  super.okPressed();
}","@Override protected void okPressed(){
  fSessionName=fSessionNameText.getText();
  fSessionPath=fSessionPathText.getText();
  if (!""String_Node_Str"".equals(fSessionPath)) {
    if (!fIsStreamedTrace) {
      TargetNodeComponent node=(TargetNodeComponent)fParent.getParent();
      IRemoteSystemProxy proxy=node.getRemoteSystemProxy();
      IFileServiceSubSystem fsss=proxy.getFileServiceSubSystem();
      if (fsss != null) {
        try {
          IRemoteFile remoteFolder=fsss.getRemoteFileObject(fSessionPath,new NullProgressMonitor());
          if (remoteFolder == null) {
            MessageDialog.openError(getShell(),Messages.TraceControl_CreateSessionDialogTitle,Messages.TraceControl_InvalidSessionPathError + ""String_Node_Str"" + fSessionPath+ ""String_Node_Str"");
            return;
          }
          if (remoteFolder.exists()) {
            MessageDialog.openError(getShell(),Messages.TraceControl_CreateSessionDialogTitle,Messages.TraceControl_SessionPathAlreadyExistsError + ""String_Node_Str"" + fSessionPath+ ""String_Node_Str"");
            return;
          }
        }
 catch (        SystemMessageException e) {
          MessageDialog.openError(getShell(),Messages.TraceControl_CreateSessionDialogTitle,Messages.TraceControl_FileSubSystemError + ""String_Node_Str"" + e);
          return;
        }
      }
    }
    fIsDefaultPath=false;
  }
  fNetworkUrl=null;
  fControlUrl=null;
  fDataUrl=null;
  if (fIsStreamedTrace) {
    fTracePath=fTracePathText.getText();
    if (fControlProtocolCombo.getSelectionIndex() < 0) {
      MessageDialog.openError(getShell(),Messages.TraceControl_CreateSessionDialogTitle,""String_Node_Str"");
      return;
    }
    if (""String_Node_Str"".equals(fControlHostAddressText.getText())) {
      MessageDialog.openError(getShell(),Messages.TraceControl_CreateSessionDialogTitle,""String_Node_Str"");
      return;
    }
    if (!fLinkDataWithControlButton.getSelection()) {
      if (fDataProtocolCombo.getSelectionIndex() < 0) {
        MessageDialog.openError(getShell(),Messages.TraceControl_CreateSessionDialogTitle,""String_Node_Str"");
        return;
      }
      if (""String_Node_Str"".equals(fDataHostAddressText.getText())) {
        MessageDialog.openError(getShell(),Messages.TraceControl_CreateSessionDialogTitle,""String_Node_Str"");
        return;
      }
      fControlUrl=getUrlString(fControlProtocolCombo.getItem(fControlProtocolCombo.getSelectionIndex()),fControlHostAddressText.getText(),fControlPortText.getText(),null,fTracePath);
      fDataUrl=getUrlString(fControlProtocolCombo.getItem(fDataProtocolCombo.getSelectionIndex()),fDataHostAddressText.getText(),null,fDataPortText.getText(),fTracePath);
    }
 else {
      fNetworkUrl=getUrlString(fControlProtocolCombo.getItem(fDataProtocolCombo.getSelectionIndex()),fControlHostAddressText.getText(),fControlPortText.getText(),fDataPortText.getText(),fTracePath);
    }
  }
  if (!""String_Node_Str"".equals(fSessionName) && !fSessionName.matches(""String_Node_Str"")) {
    MessageDialog.openError(getShell(),Messages.TraceControl_CreateSessionDialogTitle,Messages.TraceControl_InvalidSessionNameError + ""String_Node_Str"" + fSessionName+ ""String_Node_Str"");
    return;
  }
  if (fParent.containsChild(fSessionName)) {
    MessageDialog.openError(getShell(),Messages.TraceControl_CreateSessionDialogTitle,Messages.TraceControl_SessionAlreadyExistsError + ""String_Node_Str"" + fSessionName+ ""String_Node_Str"");
    return;
  }
  super.okPressed();
}",0.9574340527577938
92023,"/** 
 * Create a link and replace what was already there.
 * @param parentFolder the resource to import to, does not contain the element name
 * @param location where the resource (file/directory) is located
 * @param targetName the name to display
 * @return the resource created. Should not be null
 * @throws CoreException an exception made by createLink.
 */
public static IResource createLink(IFolder parentFolder,IPath location,String targetName) throws CoreException {
  File source=new File(location.toString());
  IResource res=null;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (source.isDirectory()) {
    IFolder folder=parentFolder.getFolder(targetName);
    IStatus result=workspace.validateLinkLocation(folder,location);
    if (result.isOK()) {
      folder.createLink(location,IResource.REPLACE,new NullProgressMonitor());
    }
 else {
      Activator.getDefault().logError(result.getMessage());
    }
  }
 else {
    IFile file=parentFolder.getFile(targetName);
    IStatus result=workspace.validateLinkLocation(file,location);
    if (result.isOK()) {
      file.createLink(location,IResource.REPLACE,new NullProgressMonitor());
    }
 else {
      Activator.getDefault().logError(result.getMessage());
    }
  }
  forceFolderRefresh(parentFolder);
  res=parentFolder.findMember(location.lastSegment());
  return res;
}","/** 
 * Create a link and replace what was already there.
 * @param parentFolder the resource to import to, does not contain the element name
 * @param location where the resource (file/directory) is located
 * @param targetName the name to display
 * @return the resource created. Should not be null
 * @throws CoreException an exception made by createLink.
 */
public static IResource createLink(IFolder parentFolder,IPath location,String targetName) throws CoreException {
  File source=new File(location.toString());
  IResource res=null;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (source.isDirectory()) {
    IFolder folder=parentFolder.getFolder(targetName);
    IStatus result=workspace.validateLinkLocation(folder,location);
    if (result.isOK()) {
      folder.createLink(location,IResource.REPLACE,new NullProgressMonitor());
    }
 else {
      Activator.getDefault().logError(result.getMessage());
    }
  }
 else {
    IFile file=parentFolder.getFile(targetName);
    IStatus result=workspace.validateLinkLocation(file,location);
    if (result.isOK()) {
      file.createLink(location,IResource.REPLACE,new NullProgressMonitor());
    }
 else {
      Activator.getDefault().logError(result.getMessage());
    }
  }
  forceFolderRefresh(parentFolder);
  res=parentFolder.findMember(targetName);
  return res;
}",0.9896142433234422
92024,"private boolean importTraces(){
  boolean success=false;
  IOverwriteQuery overwriteQuery=new IOverwriteQuery(){
    @Override public String queryOverwrite(    String file){
      return fOverwrite ? IOverwriteQuery.ALL : IOverwriteQuery.NO_ALL;
    }
  }
;
  FileSystemStructureProvider fileSystemStructureProvider=FileSystemStructureProvider.INSTANCE;
  for (  FileAndName traceToImport : fTraces) {
    try {
      if (fLinked) {
        if (TmfImportHelper.createLink(fTargetFolder,Path.fromOSString(traceToImport.getFile().getAbsolutePath()),traceToImport.getName()) != null) {
          success=false;
        }
 else {
          success=setTraceType(traceToImport).isOK();
        }
      }
 else {
        List<File> subList=new ArrayList<File>();
        IPath path=fTargetFolder.getFullPath();
        File parentFile=traceToImport.getFile();
        final boolean isFile=parentFile.isFile();
        if (isFile) {
          IFile resource=ResourcesPlugin.getWorkspace().getRoot().getFile(path.append(traceToImport.getName()));
          if (fOverwrite || !resource.exists()) {
            subList.add(parentFile);
            parentFile=parentFile.getParentFile();
            final FileInputStream source=new FileInputStream(traceToImport.getFile());
            if (resource.exists()) {
              resource.delete(IResource.FORCE,new NullProgressMonitor());
            }
            resource.create(source,true,new NullProgressMonitor());
            source.close();
            setTraceType(traceToImport);
            success=true;
          }
        }
 else {
          subList.add(traceToImport.getFile());
          File[] fileList=traceToImport.getFile().listFiles();
          for (          File child : fileList) {
            subList.add(child);
          }
          Collections.sort(subList,new Comparator<File>(){
            @Override public int compare(            File o1,            File o2){
              return o1.getAbsolutePath().compareTo(o2.getAbsolutePath());
            }
          }
);
          ImportOperation operation=new ImportOperation(path,parentFile.getParentFile(),fileSystemStructureProvider,overwriteQuery,subList);
          operation.setContext(getShell());
          operation.setCreateContainerStructure(false);
          if (executeImportOperation(operation)) {
            setTraceType(traceToImport);
            success=true;
          }
        }
      }
    }
 catch (    Exception e) {
    }
  }
  return success;
}","private boolean importTraces(){
  boolean success=false;
  IOverwriteQuery overwriteQuery=new IOverwriteQuery(){
    @Override public String queryOverwrite(    String file){
      return fOverwrite ? IOverwriteQuery.ALL : IOverwriteQuery.NO_ALL;
    }
  }
;
  FileSystemStructureProvider fileSystemStructureProvider=FileSystemStructureProvider.INSTANCE;
  for (  FileAndName traceToImport : fTraces) {
    try {
      if (fLinked) {
        if (TmfImportHelper.createLink(fTargetFolder,Path.fromOSString(traceToImport.getFile().getAbsolutePath()),traceToImport.getName()) == null) {
          success=false;
        }
 else {
          success=setTraceType(traceToImport).isOK();
        }
      }
 else {
        List<File> subList=new ArrayList<File>();
        IPath path=fTargetFolder.getFullPath();
        File parentFile=traceToImport.getFile();
        final boolean isFile=parentFile.isFile();
        if (isFile) {
          IFile resource=ResourcesPlugin.getWorkspace().getRoot().getFile(path.append(traceToImport.getName()));
          if (fOverwrite || !resource.exists()) {
            subList.add(parentFile);
            parentFile=parentFile.getParentFile();
            final FileInputStream source=new FileInputStream(traceToImport.getFile());
            if (resource.exists()) {
              resource.delete(IResource.FORCE,new NullProgressMonitor());
            }
            resource.create(source,true,new NullProgressMonitor());
            source.close();
            setTraceType(traceToImport);
            success=true;
          }
        }
 else {
          subList.add(traceToImport.getFile());
          File[] fileList=traceToImport.getFile().listFiles();
          for (          File child : fileList) {
            subList.add(child);
          }
          Collections.sort(subList,new Comparator<File>(){
            @Override public int compare(            File o1,            File o2){
              return o1.getAbsolutePath().compareTo(o2.getAbsolutePath());
            }
          }
);
          ImportOperation operation=new ImportOperation(path,parentFile.getParentFile(),fileSystemStructureProvider,overwriteQuery,subList);
          operation.setContext(getShell());
          operation.setCreateContainerStructure(false);
          if (executeImportOperation(operation)) {
            setTraceType(traceToImport);
            success=true;
          }
        }
      }
    }
 catch (    Exception e) {
    }
  }
  return success;
}",0.999597261377366
92025,"private long testMain(){
  List<CTFCallsite> l=fTrace.getCallsiteCandidates(callsites[0]);
  CTFCallsite cs=fTrace.getCallsite(1);
  CTFCallsite cs1=fTrace.getCallsite(callsites[0]);
  CTFCallsite cs2=fTrace.getCallsite(callsites[0],1);
  assertNotNull(l);
  assertNotNull(cs);
  assertNotNull(cs1);
  assertNotNull(cs2);
  long start=System.nanoTime();
  perfTest();
  long end=System.nanoTime();
  long diff=end - start;
  assertTrue(diff > 0);
  return diff;
}","private long testMain(){
  TreeSet<CTFCallsite> l=fTrace.getCallsiteCandidates(callsites[0]);
  CTFCallsite cs=fTrace.getCallsite(1);
  CTFCallsite cs1=fTrace.getCallsite(callsites[0]);
  CTFCallsite cs2=fTrace.getCallsite(callsites[0],1);
  assertNotNull(l);
  assertNotNull(cs);
  assertNotNull(cs1);
  assertNotNull(cs2);
  long start=System.nanoTime();
  perfTest();
  long end=System.nanoTime();
  long diff=end - start;
  assertTrue(diff > 0);
  return diff;
}",0.9903121636167922
92026,"/** 
 * Gets the list of callsites associated to an event name. O(1)
 * @param eventName the event name
 * @return the callsite list can be empty
 * @since 1.2
 */
public List<CTFCallsite> getCallsiteCandidates(String eventName){
  LinkedList<CTFCallsite> retVal=callsitesByName.get(eventName);
  if (retVal == null) {
    retVal=new LinkedList<CTFCallsite>();
  }
  return retVal;
}","/** 
 * Gets the set of callsites associated to an event name. O(1)
 * @param eventName the event name
 * @return the callsite set can be empty
 * @since 3.0
 */
public TreeSet<CTFCallsite> getCallsiteCandidates(String eventName){
  TreeSet<CTFCallsite> retVal=callsitesByName.get(eventName);
  if (retVal == null) {
    retVal=new TreeSet<CTFCallsite>(ctfCallsiteComparator);
  }
  return retVal;
}",0.90537084398977
92027,"/** 
 * Gets a callsite using the event name and instruction pointer O(log(n))
 * @param eventName the name of the event
 * @param ip the instruction pointer
 * @return the closest matching callsite, can be null
 */
public CTFCallsite getCallsite(String eventName,long ip){
  final LinkedList<CTFCallsite> candidates=callsitesByName.get(eventName);
  final CTFCallsite dummyCs=new CTFCallsite(null,null,ip,null,-1);
  final int pos=Collections.binarySearch(candidates,dummyCs) + 1;
  if (pos >= candidates.size()) {
    return null;
  }
  return candidates.get(pos);
}","/** 
 * Gets a callsite using the event name and instruction pointer O(log(n))
 * @param eventName the name of the event
 * @param ip the instruction pointer
 * @return the closest matching callsite, can be null
 */
public CTFCallsite getCallsite(String eventName,long ip){
  final TreeSet<CTFCallsite> candidates=callsitesByName.get(eventName);
  final CTFCallsite dummyCs=new CTFCallsite(null,null,ip,null,-1);
  final CTFCallsite callsite=candidates.ceiling(dummyCs);
  if (callsite == null) {
    return candidates.floor(dummyCs);
  }
  return callsite;
}",0.7701863354037267
92028,"/** 
 * Adds a callsite
 * @param eventName the event name of the callsite
 * @param funcName the name of the callsite function
 * @param ip the ip of the callsite
 * @param fileName the filename of the callsite
 * @param lineNumber the line number of the callsite
 */
public void addCallsite(String eventName,String funcName,long ip,String fileName,long lineNumber){
  final CTFCallsite cs=new CTFCallsite(eventName,funcName,ip,fileName,lineNumber);
  LinkedList<CTFCallsite> csl=callsitesByName.get(eventName);
  if (csl == null) {
    csl=new LinkedList<CTFCallsite>();
    callsitesByName.put(eventName,csl);
  }
  ListIterator<CTFCallsite> iter=csl.listIterator();
  int index=0;
  for (; index < csl.size(); index++) {
    if (iter.next().compareTo(cs) < 0) {
      break;
    }
  }
  csl.add(index,cs);
  callsitesByIP.add(cs);
}","/** 
 * Adds a callsite
 * @param eventName the event name of the callsite
 * @param funcName the name of the callsite function
 * @param ip the ip of the callsite
 * @param fileName the filename of the callsite
 * @param lineNumber the line number of the callsite
 */
public void addCallsite(String eventName,String funcName,long ip,String fileName,long lineNumber){
  final CTFCallsite cs=new CTFCallsite(eventName,funcName,ip,fileName,lineNumber);
  TreeSet<CTFCallsite> csl=callsitesByName.get(eventName);
  if (csl == null) {
    csl=new TreeSet<CTFCallsite>(ctfCallsiteComparator);
    callsitesByName.put(eventName,csl);
  }
  csl.add(cs);
  callsitesByIP.add(cs);
}",0.8429423459244533
92029,"public void parseGcdaRecord(DataInput stream) throws IOException, CoreException {
  int magic=0;
  GcnoFunction currentFnctn=null;
  magic=stream.readInt();
  if (magic == GCOV_DATA_MAGIC) {
    stream=new BEDataInputStream((DataInputStream)stream);
  }
 else {
    magic=(magic >> 16) | (magic << 16);
    magic=((magic & 0xff00ff) << 8) | ((magic >> 8) & 0xff00ff);
    if (magic == GCOV_DATA_MAGIC) {
      stream=new LEDataInputStream((DataInputStream)stream);
    }
 else {
      String message=magic + ""String_Node_Str"";
      Status status=new Status(IStatus.ERROR,Activator.PLUGIN_ID,message);
      throw new CoreException(status);
    }
  }
  int version=stream.readInt();
  stream.readInt();
  while (true) {
    try {
      int tag=stream.readInt();
      long length=(stream.readInt() & MasksGenerator.UNSIGNED_INT_MASK);
switch (tag) {
case GCOV_TAG_FUNCTION:
{
          long fnctnId=stream.readInt() & MasksGenerator.UNSIGNED_INT_MASK;
          if (!fnctns.isEmpty()) {
            boolean fnctnFound=false;
            for (            GcnoFunction f : fnctns) {
              if (f.getIdent() == fnctnId) {
                fnctnFound=true;
                currentFnctn=f;
                long fnctnChksm=stream.readInt() & MasksGenerator.UNSIGNED_INT_MASK;
                if (f.getCheksum() != fnctnChksm) {
                  String message=""String_Node_Str"" + currentFnctn.getName() + ""String_Node_Str""+ fnctnId+ ""String_Node_Str"";
                  Status status=new Status(IStatus.ERROR,Activator.PLUGIN_ID,message);
                  throw new CoreException(status);
                }
                if (version >= 875575082) {
                  stream.readInt();
                }
                break;
              }
            }
            if (fnctnFound == false) {
              currentFnctn=null;
              String message=""String_Node_Str"" + fnctnId + ""String_Node_Str"";
              Status status=new Status(IStatus.ERROR,Activator.PLUGIN_ID,message);
              throw new CoreException(status);
            }
          }
          break;
        }
case GCOV_COUNTER_ARCS:
{
        if (currentFnctn == null) {
          String message=""String_Node_Str"";
          Status status=new Status(IStatus.ERROR,Activator.PLUGIN_ID,message);
          throw new CoreException(status);
        }
        if (length != 2 * (currentFnctn.getNumCounts())) {
          String message=""String_Node_Str"";
          Status status=new Status(IStatus.ERROR,Activator.PLUGIN_ID,message);
          throw new CoreException(status);
        }
        ArrayList<Block> fnctnBlcks=currentFnctn.getFunctionBlocks();
        if (fnctnBlcks.isEmpty()) {
          String message=""String_Node_Str"";
          Status status=new Status(IStatus.ERROR,Activator.PLUGIN_ID,message);
          throw new CoreException(status);
        }
        for (int i=0; i < fnctnBlcks.size(); i++) {
          Block b=fnctnBlcks.get(i);
          int nonFakeExit=0;
          ArrayList<Arc> arcsExit=b.getExitArcs();
          for (          Arc extArc : arcsExit) {
            if (extArc.isFake() == false)             nonFakeExit++;
            if (extArc.isOnTree() == false) {
              long arcsCnts=stream.readLong();
              extArc.setCount(arcsCnts);
              extArc.setCountValid(true);
              b.decNumSuccs();
              extArc.getDstnatnBlock().decNumPreds();
            }
          }
          if (nonFakeExit == 1) {
            for (            Arc extArc : arcsExit) {
              if (extArc.isFake() == false) {
                extArc.setUnconditionnal(true);
                if (b.isCallSite() == true && extArc.isFallthrough() == true && extArc.getDstnatnBlock().getEntryArcs().get(0).equals(extArc) && extArc.getDstnatnBlock().getEntryArcs().size() == 1)                 extArc.getDstnatnBlock().setCallReturn(true);
              }
            }
          }
        }
        currentFnctn=null;
        break;
      }
case GCOV_TAG_OBJECT_SYMMARY:
{
      objSmryChksm=(stream.readInt() & MasksGenerator.UNSIGNED_INT_MASK);
      objSmryArcCnts=(stream.readInt() & MasksGenerator.UNSIGNED_INT_MASK);
      objSmryNbrPgmRuns=(stream.readInt() & MasksGenerator.UNSIGNED_INT_MASK);
      objSmrytotalCnts=stream.readLong();
      objSmryRunMax=stream.readLong();
      objSmrySumMax=stream.readLong();
      break;
    }
case GCOV_TAG_PROGRAM_SUMMARY:
{
    pgmSmryChksm=(stream.readInt() & MasksGenerator.UNSIGNED_INT_MASK);
    for (int i=0; i < length - 1; i++) {
      stream.readInt();
    }
    break;
  }
default :
{
  break;
}
}
}
 catch (EOFException _) {
break;
}
}
}","public void parseGcdaRecord(DataInput stream) throws IOException, CoreException {
  int magic=0;
  GcnoFunction currentFnctn=null;
  magic=stream.readInt();
  if (magic == GCOV_DATA_MAGIC) {
    stream=new BEDataInputStream((DataInputStream)stream);
  }
 else {
    magic=(magic >> 16) | (magic << 16);
    magic=((magic & 0xff00ff) << 8) | ((magic >> 8) & 0xff00ff);
    if (magic == GCOV_DATA_MAGIC) {
      stream=new LEDataInputStream((DataInputStream)stream);
    }
 else {
      String message=magic + ""String_Node_Str"";
      Status status=new Status(IStatus.ERROR,Activator.PLUGIN_ID,message);
      throw new CoreException(status);
    }
  }
  int version=stream.readInt();
  stream.readInt();
  while (true) {
    try {
      int tag=stream.readInt();
      if (tag == 0) {
        continue;
      }
      long length=(stream.readInt() & MasksGenerator.UNSIGNED_INT_MASK);
switch (tag) {
case GCOV_TAG_FUNCTION:
{
          long fnctnId=stream.readInt() & MasksGenerator.UNSIGNED_INT_MASK;
          if (!fnctns.isEmpty()) {
            boolean fnctnFound=false;
            for (            GcnoFunction f : fnctns) {
              if (f.getIdent() == fnctnId) {
                fnctnFound=true;
                currentFnctn=f;
                long fnctnChksm=stream.readInt() & MasksGenerator.UNSIGNED_INT_MASK;
                if (f.getCheksum() != fnctnChksm) {
                  String message=""String_Node_Str"" + currentFnctn.getName() + ""String_Node_Str""+ fnctnId+ ""String_Node_Str"";
                  Status status=new Status(IStatus.ERROR,Activator.PLUGIN_ID,message);
                  throw new CoreException(status);
                }
                if (version >= 875575082) {
                  stream.readInt();
                }
                break;
              }
            }
            if (fnctnFound == false) {
              currentFnctn=null;
              String message=""String_Node_Str"" + fnctnId + ""String_Node_Str"";
              Status status=new Status(IStatus.ERROR,Activator.PLUGIN_ID,message);
              throw new CoreException(status);
            }
          }
          break;
        }
case GCOV_COUNTER_ARCS:
{
        if (currentFnctn == null) {
          String message=""String_Node_Str"";
          Status status=new Status(IStatus.ERROR,Activator.PLUGIN_ID,message);
          throw new CoreException(status);
        }
        if (length != 2 * (currentFnctn.getNumCounts())) {
          String message=""String_Node_Str"";
          Status status=new Status(IStatus.ERROR,Activator.PLUGIN_ID,message);
          throw new CoreException(status);
        }
        ArrayList<Block> fnctnBlcks=currentFnctn.getFunctionBlocks();
        if (fnctnBlcks.isEmpty()) {
          String message=""String_Node_Str"";
          Status status=new Status(IStatus.ERROR,Activator.PLUGIN_ID,message);
          throw new CoreException(status);
        }
        for (int i=0; i < fnctnBlcks.size(); i++) {
          Block b=fnctnBlcks.get(i);
          int nonFakeExit=0;
          ArrayList<Arc> arcsExit=b.getExitArcs();
          for (          Arc extArc : arcsExit) {
            if (extArc.isFake() == false)             nonFakeExit++;
            if (extArc.isOnTree() == false) {
              long arcsCnts=stream.readLong();
              extArc.setCount(arcsCnts);
              extArc.setCountValid(true);
              b.decNumSuccs();
              extArc.getDstnatnBlock().decNumPreds();
            }
          }
          if (nonFakeExit == 1) {
            for (            Arc extArc : arcsExit) {
              if (extArc.isFake() == false) {
                extArc.setUnconditionnal(true);
                if (b.isCallSite() == true && extArc.isFallthrough() == true && extArc.getDstnatnBlock().getEntryArcs().get(0).equals(extArc) && extArc.getDstnatnBlock().getEntryArcs().size() == 1)                 extArc.getDstnatnBlock().setCallReturn(true);
              }
            }
          }
        }
        currentFnctn=null;
        break;
      }
case GCOV_TAG_OBJECT_SYMMARY:
{
      objSmryChksm=(stream.readInt() & MasksGenerator.UNSIGNED_INT_MASK);
      objSmryArcCnts=(stream.readInt() & MasksGenerator.UNSIGNED_INT_MASK);
      objSmryNbrPgmRuns=(stream.readInt() & MasksGenerator.UNSIGNED_INT_MASK);
      objSmrytotalCnts=stream.readLong();
      objSmryRunMax=stream.readLong();
      objSmrySumMax=stream.readLong();
      break;
    }
case GCOV_TAG_PROGRAM_SUMMARY:
{
    pgmSmryChksm=(stream.readInt() & MasksGenerator.UNSIGNED_INT_MASK);
    for (int i=0; i < length - 1; i++) {
      stream.readInt();
    }
    break;
  }
default :
{
  break;
}
}
}
 catch (EOFException _) {
break;
}
}
}",0.9948353776630084
92030,"@Override public void run(){
  if (ss == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  ITmfEvent event;
  try {
    event=eventsQueue.take();
    while (event.getTimestamp().getValue() != -1) {
      currentEvent=event;
      if (eventType.isInstance(event) && event.getType() != null) {
        eventHandle(event);
      }
      event=eventsQueue.take();
    }
    closeStateSystem();
    return;
  }
 catch (  InterruptedException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
}","@Override public void run(){
  if (ss == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  ITmfEvent event;
  try {
    event=eventsQueue.take();
    while (event.getTimestamp().getValue() != -1) {
      if (event instanceof EmptyEvent) {
        event=eventsQueue.take();
        continue;
      }
      currentEvent=event;
      if (eventType.isInstance(event) && event.getType() != null) {
        eventHandle(event);
      }
      event=eventsQueue.take();
    }
    closeStateSystem();
    return;
  }
 catch (  InterruptedException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
}",0.913601368691189
92031,"/** 
 * Block the caller until the events queue is empty.
 */
public void waitForEmptyQueue(){
  TmfTimestamp ts=new TmfTimestamp(0);
  TmfEvent ev=new TmfEvent(null,ts,null,null,null,null);
  try {
    eventsQueue.put(ev);
    while (!eventsQueue.isEmpty()) {
      Thread.sleep(100);
    }
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","/** 
 * Block the caller until the events queue is empty.
 */
public void waitForEmptyQueue(){
  TmfEvent ev=new EmptyEvent();
  try {
    eventsQueue.put(ev);
    while (!eventsQueue.isEmpty()) {
      Thread.sleep(100);
    }
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}",0.8454545454545455
92032,"/** 
 * Gets an event Declaration hashmap for a given StreamInput
 * @param id the StreamInput
 * @return the hashmap with the event definitions
 * @since 2.0
 */
public Map<Long,EventDefinition> getEventDefs(StreamInput id){
  if (!eventDefs.containsKey(id)) {
    eventDefs.put(id,new HashMap<Long,EventDefinition>());
  }
  return eventDefs.get(id);
}","/** 
 * Gets an event Declaration hashmap for a given StreamInput
 * @param id the StreamInput
 * @return an empty hashmap, please see deprecated
 * @since 2.0
 * @deprecated You should be using {@link StreamInputReader#getEventDefinitions()}instead.
 */
@Deprecated public Map<Long,EventDefinition> getEventDefs(StreamInput id){
  return new HashMap<Long,EventDefinition>();
}",0.6238030095759234
92033,"/** 
 * Reads the next event of the packet into the right event definition.
 * @return The event definition containing the event data that was justread.
 * @throws CTFReaderException If there was a problem reading the trace
 */
public EventDefinition readNextEvent() throws CTFReaderException {
  long eventID=0;
  long timestamp=0;
  if (lostEventsInThisPacket > lostSoFar) {
    EventDefinition eventDef=EventDeclaration.getLostEventDeclaration().createDefinition(streamInputReader);
    eventDef.setTimestamp(this.lastTimestamp);
    ++lostSoFar;
    return eventDef;
  }
  final StructDefinition sehd=streamEventHeaderDef;
  final BitBuffer currentBitBuffer=bitBuffer;
  if (sehd != null) {
    sehd.read(currentBitBuffer);
    Definition idDef=sehd.lookupDefinition(""String_Node_Str"");
    if (idDef instanceof SimpleDatatypeDefinition) {
      eventID=((SimpleDatatypeDefinition)idDef).getIntegerValue();
    }
    IntegerDefinition timestampDef=sehd.lookupInteger(""String_Node_Str"");
    if (timestampDef != null) {
      timestamp=calculateTimestamp(timestampDef);
    }
    Definition variantDef=sehd.lookupDefinition(""String_Node_Str"");
    if (variantDef instanceof VariantDefinition) {
      StructDefinition variantCurrentField=(StructDefinition)((VariantDefinition)variantDef).getCurrentField();
      Definition idIntegerDef=variantCurrentField.lookupDefinition(""String_Node_Str"");
      if (idIntegerDef instanceof IntegerDefinition) {
        eventID=((IntegerDefinition)idIntegerDef).getValue();
      }
      Definition def=variantCurrentField.lookupDefinition(""String_Node_Str"");
      if (def instanceof IntegerDefinition) {
        timestamp=calculateTimestamp((IntegerDefinition)def);
      }
    }
  }
  if (streamEventContextDef != null) {
    streamEventContextDef.read(currentBitBuffer);
  }
  EventDefinition eventDef=events.get(eventID);
  if (eventDef == null) {
    throw new CTFReaderException(""String_Node_Str"" + eventID);
  }
  if (eventDef.getEventContext() != null) {
    eventDef.getEventContext().read(currentBitBuffer);
  }
  if (eventDef.getFields() != null) {
    eventDef.getFields().read(currentBitBuffer);
  }
  eventDef.setTimestamp(timestamp);
  return eventDef;
}","/** 
 * Reads the next event of the packet into the right event definition.
 * @return The event definition containing the event data that was justread.
 * @throws CTFReaderException If there was a problem reading the trace
 */
public EventDefinition readNextEvent() throws CTFReaderException {
  long eventID=0;
  long timestamp=0;
  if (lostEventsInThisPacket > lostSoFar) {
    EventDefinition eventDef=EventDeclaration.getLostEventDeclaration().createDefinition(streamInputReader);
    eventDef.setTimestamp(this.lastTimestamp);
    ++lostSoFar;
    return eventDef;
  }
  final StructDefinition sehd=streamEventHeaderDef;
  final BitBuffer currentBitBuffer=bitBuffer;
  if (sehd != null) {
    sehd.read(currentBitBuffer);
    Definition idDef=sehd.lookupDefinition(""String_Node_Str"");
    if (idDef instanceof SimpleDatatypeDefinition) {
      eventID=((SimpleDatatypeDefinition)idDef).getIntegerValue();
    }
    IntegerDefinition timestampDef=sehd.lookupInteger(""String_Node_Str"");
    if (timestampDef != null) {
      timestamp=calculateTimestamp(timestampDef);
    }
    Definition variantDef=sehd.lookupDefinition(""String_Node_Str"");
    if (variantDef instanceof VariantDefinition) {
      StructDefinition variantCurrentField=(StructDefinition)((VariantDefinition)variantDef).getCurrentField();
      Definition idIntegerDef=variantCurrentField.lookupDefinition(""String_Node_Str"");
      if (idIntegerDef instanceof IntegerDefinition) {
        eventID=((IntegerDefinition)idIntegerDef).getValue();
      }
      Definition def=variantCurrentField.lookupDefinition(""String_Node_Str"");
      if (def instanceof IntegerDefinition) {
        timestamp=calculateTimestamp((IntegerDefinition)def);
      }
    }
  }
  if (streamEventContextDef != null) {
    streamEventContextDef.read(currentBitBuffer);
  }
  EventDefinition eventDef=streamInputReader.getEventDefinitions().get(eventID);
  if (eventDef == null) {
    throw new CTFReaderException(""String_Node_Str"" + eventID);
  }
  if (eventDef.getEventContext() != null) {
    eventDef.getEventContext().read(currentBitBuffer);
  }
  if (eventDef.getFields() != null) {
    eventDef.getFields().read(currentBitBuffer);
  }
  eventDef.setTimestamp(timestamp);
  return eventDef;
}",0.989894453177633
92034,"/** 
 * Constructs a StreamInputPacketReader.
 * @param streamInputReader The StreamInputReader to which this packet reader belongs to.
 */
public StreamInputPacketReader(StreamInputReader streamInputReader){
  this.streamInputReader=streamInputReader;
  bitBuffer=new BitBuffer();
  bitBuffer.setByteOrder(streamInputReader.getByteOrder());
  events=streamInputReader.getStreamInput().getStream().getTrace().getEventDefs(streamInputReader.getStreamInput());
  lostSoFar=0;
  final Stream currentStream=streamInputReader.getStreamInput().getStream();
  StructDeclaration tracePacketHeaderDecl=currentStream.getTrace().getPacketHeader();
  if (tracePacketHeaderDecl != null) {
    tracePacketHeaderDef=tracePacketHeaderDecl.createDefinition(this,""String_Node_Str"");
  }
 else {
    tracePacketHeaderDef=null;
  }
  StructDeclaration streamPacketContextDecl=currentStream.getPacketContextDecl();
  if (streamPacketContextDecl != null) {
    streamPacketContextDef=streamPacketContextDecl.createDefinition(this,""String_Node_Str"");
  }
 else {
    streamPacketContextDef=null;
  }
  StructDeclaration streamEventHeaderDecl=currentStream.getEventHeaderDecl();
  if (streamEventHeaderDecl != null) {
    streamEventHeaderDef=streamEventHeaderDecl.createDefinition(this,""String_Node_Str"");
  }
 else {
    streamEventHeaderDef=null;
  }
  StructDeclaration streamEventContextDecl=currentStream.getEventContextDecl();
  if (streamEventContextDecl != null) {
    streamEventContextDef=streamEventContextDecl.createDefinition(this,""String_Node_Str"");
  }
 else {
    streamEventContextDef=null;
  }
  Collection<IEventDeclaration> eventDecls=streamInputReader.getStreamInput().getStream().getEvents().values();
  for (  IEventDeclaration event : eventDecls) {
    if (!events.containsKey(event.getId())) {
      EventDefinition eventDef=event.createDefinition(streamInputReader);
      events.put(event.getId(),eventDef);
    }
  }
}","/** 
 * Constructs a StreamInputPacketReader.
 * @param streamInputReader The StreamInputReader to which this packet reader belongs to.
 */
public StreamInputPacketReader(StreamInputReader streamInputReader){
  this.streamInputReader=streamInputReader;
  bitBuffer=new BitBuffer();
  bitBuffer.setByteOrder(streamInputReader.getByteOrder());
  lostSoFar=0;
  final Stream currentStream=streamInputReader.getStreamInput().getStream();
  StructDeclaration tracePacketHeaderDecl=currentStream.getTrace().getPacketHeader();
  if (tracePacketHeaderDecl != null) {
    tracePacketHeaderDef=tracePacketHeaderDecl.createDefinition(this,""String_Node_Str"");
  }
 else {
    tracePacketHeaderDef=null;
  }
  StructDeclaration streamPacketContextDecl=currentStream.getPacketContextDecl();
  if (streamPacketContextDecl != null) {
    streamPacketContextDef=streamPacketContextDecl.createDefinition(this,""String_Node_Str"");
  }
 else {
    streamPacketContextDef=null;
  }
  StructDeclaration streamEventHeaderDecl=currentStream.getEventHeaderDecl();
  if (streamEventHeaderDecl != null) {
    streamEventHeaderDef=streamEventHeaderDecl.createDefinition(this,""String_Node_Str"");
  }
 else {
    streamEventHeaderDef=null;
  }
  StructDeclaration streamEventContextDecl=currentStream.getEventContextDecl();
  if (streamEventContextDecl != null) {
    streamEventContextDef=streamEventContextDecl.createDefinition(this,""String_Node_Str"");
  }
 else {
    streamEventContextDef=null;
  }
  Collection<IEventDeclaration> eventDecls=streamInputReader.getStreamInput().getStream().getEvents().values();
  for (  IEventDeclaration event : eventDecls) {
    if (!streamInputReader.getEventDefinitions().containsKey(event.getId())) {
      EventDefinition eventDef=event.createDefinition(streamInputReader);
      streamInputReader.addEventDefinition(event.getId(),eventDef);
    }
  }
}",0.946673706441394
92035,"/** 
 * Check if the user has permission to run opcontrol
 * @param project The project to be run
 * @return true if the user has sudo permission to run opcontrol, otherwise false
 * @throws OpcontrolException
 */
public boolean hasPermissions(IProject project) throws OpcontrolException ;","/** 
 * Check if the user has permission to run opcontrol
 * @param project The project to be run
 * @return true if the user has sudo permission to run opcontrol, otherwise false
 * @throws OpcontrolException
 * @since 2.0
 */
public boolean hasPermissions(IProject project) throws OpcontrolException ;",0.9763513513513512
92036,"protected STChangeRulerColumn createSTRulerColumn(ISTAnnotationColumn annotationColumn){
  fSTChangeRulerColumn=new STChangeRulerColumn(getSharedColors(),annotationColumn);
  ((IChangeRulerColumn)fSTChangeRulerColumn).setHover(createChangeHover());
  initializeLineNumberRulerColumn(fLineNumberRulerColumn);
  return fSTChangeRulerColumn;
}","/** 
 * @since 5.0
 */
protected STChangeRulerColumn createSTRulerColumn(ISTAnnotationColumn annotationColumn){
  fSTChangeRulerColumn=new STChangeRulerColumn(getSharedColors(),annotationColumn);
  ((IChangeRulerColumn)fSTChangeRulerColumn).setHover(createChangeHover());
  initializeLineNumberRulerColumn(fLineNumberRulerColumn);
  return fSTChangeRulerColumn;
}",0.9672830725462304
92037,public abstract FileStoreEditorInput getInput(IFileStore fs);,"/** 
 * @since 5.0
 */
public abstract FileStoreEditorInput getInput(IFileStore fs);",0.8413793103448276
92038,"/** 
 * Return whether the receiver is showing or not by default.
 * @return boolean
 */
boolean isShowingByDefault();","/** 
 * Return whether the receiver is showing or not by default.
 * @return boolean
 * @since 5.0
 */
boolean isShowingByDefault();",0.944
92039,"/** 
 * Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.
 * @param parent a widget which will be the parent of the new instance (cannot be null)
 * @param style the style of widget to construct
 */
public TimeGraphCombo(Composite parent,int style){
  super(parent,style);
  setLayout(new FillLayout());
  final SashForm sash=new SashForm(this,SWT.NONE);
  fTreeViewer=new TreeViewer(sash,SWT.FULL_SELECTION | SWT.H_SCROLL);
  final Tree tree=fTreeViewer.getTree();
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  fTimeGraphViewer=new TimeGraphViewer(sash,SWT.NONE);
  fTimeGraphViewer.setItemHeight(getItemHeight(tree));
  fTimeGraphViewer.setHeaderHeight(tree.getHeaderHeight());
  fTimeGraphViewer.setBorderWidth(tree.getBorderWidth());
  fTimeGraphViewer.setNameWidthPref(0);
  fFilter=new RawViewerFilter();
  addFilter(fFilter);
  fFilterDialog=new TimeGraphFilterDialog(getShell());
  tree.addControlListener(new ControlAdapter(){
    private int depth=0;
    @Override public void controlResized(    ControlEvent e){
      if (depth == 0) {
        depth++;
        tree.getVerticalBar().setEnabled(false);
        tree.getVerticalBar().setVisible(false);
        depth--;
      }
      fTimeGraphViewer.setHeaderHeight(tree.getHeaderHeight());
    }
  }
);
  fTreeViewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      fTimeGraphViewer.setExpandedState((ITimeGraphEntry)event.getElement(),false);
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      fTimeGraphViewer.setExpandedState((ITimeGraphEntry)event.getElement(),true);
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      final TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          tree.setTopItem(treeItem);
        }
      }
);
    }
  }
);
  fTimeGraphViewer.addTreeListener(new ITimeGraphTreeListener(){
    @Override public void treeCollapsed(    TimeGraphTreeExpansionEvent event){
      fTreeViewer.setExpandedState(event.getEntry(),false);
    }
    @Override public void treeExpanded(    TimeGraphTreeExpansionEvent event){
      fTreeViewer.setExpandedState(event.getEntry(),true);
    }
  }
);
  tree.addListener(SWT.MouseDown,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem treeItem=tree.getItem(new Point(event.x,event.y));
      if (treeItem == null || treeItem.getData() == FILLER) {
        event.doit=false;
        List<TreeItem> treeItems=getVisibleExpandedItems(tree);
        if (treeItems.size() == 0) {
          fTreeViewer.setSelection(new StructuredSelection());
          fTimeGraphViewer.setSelection(null);
          return;
        }
        tree.select(treeItems.get(treeItems.size() - 1));
        fTreeViewer.setSelection(new StructuredSelection());
        fTimeGraphViewer.setSelection(null);
      }
    }
  }
);
  tree.addListener(SWT.MouseWheel,new Listener(){
    @Override public void handleEvent(    Event event){
      event.doit=false;
      Slider scrollBar=fTimeGraphViewer.getVerticalBar();
      fTimeGraphViewer.setTopIndex(scrollBar.getSelection() - event.count);
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  tree.addListener(SWT.KeyDown,new Listener(){
    @Override public void handleEvent(    Event event){
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        fTreeViewer.setSelection(new StructuredSelection());
        event.doit=false;
        return;
      }
      if (event.keyCode == SWT.ARROW_DOWN) {
        int index=Math.min(fTimeGraphViewer.getSelectionIndex() + 1,treeItems.size() - 1);
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
        event.doit=false;
      }
 else       if (event.keyCode == SWT.PAGE_DOWN) {
        int height=tree.getSize().y - tree.getHeaderHeight() - tree.getHorizontalBar().getSize().y;
        int countPerPage=height / getItemHeight(tree);
        int index=Math.min(fTimeGraphViewer.getSelectionIndex() + countPerPage - 1,treeItems.size() - 1);
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
        event.doit=false;
      }
 else       if (event.keyCode == SWT.END) {
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(treeItems.size() - 1).getData());
        event.doit=false;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
      if (fTimeGraphViewer.getSelectionIndex() >= 0) {
        fTreeViewer.setSelection(new StructuredSelection(fTimeGraphViewer.getSelection()));
      }
 else {
        fTreeViewer.setSelection(new StructuredSelection());
      }
    }
  }
);
  fTimeGraphViewer.getTimeGraphControl().addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTreeViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      if (fInhibitTreeSelection) {
        return;
      }
      if (event.getSelection() instanceof IStructuredSelection) {
        Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
        if (selection instanceof ITimeGraphEntry) {
          fTimeGraphViewer.setSelection((ITimeGraphEntry)selection);
        }
        List<TreeItem> treeItems=getVisibleExpandedItems(tree);
        if (treeItems.size() == 0) {
          return;
        }
        TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
        tree.setTopItem(treeItem);
      }
    }
  }
);
  fTimeGraphViewer.addSelectionListener(new ITimeGraphSelectionListener(){
    @Override public void selectionChanged(    TimeGraphSelectionEvent event){
      ITimeGraphEntry entry=fTimeGraphViewer.getSelection();
      fInhibitTreeSelection=true;
      if (entry != null) {
        StructuredSelection selection=new StructuredSelection(entry);
        fTreeViewer.setSelection(selection);
      }
 else {
        fTreeViewer.setSelection(new StructuredSelection());
      }
      fInhibitTreeSelection=false;
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTimeGraphViewer.getVerticalBar().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTimeGraphViewer.getTimeGraphControl().addMouseWheelListener(new MouseWheelListener(){
    @Override public void mouseScrolled(    MouseEvent e){
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTreeViewer.getControl().addMouseTrackListener(new MouseTrackAdapter(){
    @Override public void mouseEnter(    MouseEvent e){
      if (fTimeGraphViewer.getTimeGraphControl().isFocusControl()) {
        fTreeViewer.getControl().setFocus();
      }
    }
  }
);
  fTimeGraphViewer.getTimeGraphControl().addMouseTrackListener(new MouseTrackAdapter(){
    @Override public void mouseEnter(    MouseEvent e){
      if (fTreeViewer.getControl().isFocusControl()) {
        fTimeGraphViewer.getTimeGraphControl().setFocus();
      }
    }
  }
);
  fTimeGraphViewer.getTimeGraphScale().addMouseTrackListener(new MouseTrackAdapter(){
    @Override public void mouseEnter(    MouseEvent e){
      if (fTreeViewer.getControl().isFocusControl()) {
        fTimeGraphViewer.getTimeGraphControl().setFocus();
      }
    }
  }
);
  fNumFillerRows=Display.getDefault().getBounds().height / getItemHeight(tree);
  sash.setWeights(new int[]{1,1});
}","/** 
 * Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.
 * @param parent a widget which will be the parent of the new instance (cannot be null)
 * @param style the style of widget to construct
 */
public TimeGraphCombo(Composite parent,int style){
  super(parent,style);
  setLayout(new FillLayout());
  final SashForm sash=new SashForm(this,SWT.NONE);
  fTreeViewer=new TreeViewer(sash,SWT.FULL_SELECTION | SWT.H_SCROLL);
  final Tree tree=fTreeViewer.getTree();
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  fTimeGraphViewer=new TimeGraphViewer(sash,SWT.NONE);
  fTimeGraphViewer.setItemHeight(getItemHeight(tree));
  fTimeGraphViewer.setHeaderHeight(tree.getHeaderHeight());
  fTimeGraphViewer.setBorderWidth(tree.getBorderWidth());
  fTimeGraphViewer.setNameWidthPref(0);
  fFilter=new RawViewerFilter();
  addFilter(fFilter);
  fFilterDialog=new TimeGraphFilterDialog(getShell());
  tree.addControlListener(new ControlAdapter(){
    private int depth=0;
    @Override public void controlResized(    ControlEvent e){
      if (depth == 0) {
        depth++;
        tree.getVerticalBar().setEnabled(false);
        tree.getVerticalBar().setVisible(false);
        depth--;
      }
      fTimeGraphViewer.setHeaderHeight(tree.getHeaderHeight());
    }
  }
);
  fTreeViewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      fTimeGraphViewer.setExpandedState((ITimeGraphEntry)event.getElement(),false);
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      ITimeGraphEntry entry=(ITimeGraphEntry)event.getElement();
      fTimeGraphViewer.setExpandedState(entry,true);
      for (      ITimeGraphEntry child : entry.getChildren()) {
        boolean expanded=fTreeViewer.getExpandedState(child);
        fTimeGraphViewer.setExpandedState(child,expanded);
      }
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      final TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          tree.setTopItem(treeItem);
        }
      }
);
    }
  }
);
  fTimeGraphViewer.addTreeListener(new ITimeGraphTreeListener(){
    @Override public void treeCollapsed(    TimeGraphTreeExpansionEvent event){
      fTreeViewer.setExpandedState(event.getEntry(),false);
    }
    @Override public void treeExpanded(    TimeGraphTreeExpansionEvent event){
      ITimeGraphEntry entry=event.getEntry();
      fTreeViewer.setExpandedState(entry,true);
      for (      ITimeGraphEntry child : entry.getChildren()) {
        boolean expanded=fTreeViewer.getExpandedState(child);
        fTimeGraphViewer.setExpandedState(child,expanded);
      }
    }
  }
);
  tree.addListener(SWT.MouseDown,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem treeItem=tree.getItem(new Point(event.x,event.y));
      if (treeItem == null || treeItem.getData() == FILLER) {
        event.doit=false;
        List<TreeItem> treeItems=getVisibleExpandedItems(tree);
        if (treeItems.size() == 0) {
          fTreeViewer.setSelection(new StructuredSelection());
          fTimeGraphViewer.setSelection(null);
          return;
        }
        tree.select(treeItems.get(treeItems.size() - 1));
        fTreeViewer.setSelection(new StructuredSelection());
        fTimeGraphViewer.setSelection(null);
      }
    }
  }
);
  tree.addListener(SWT.MouseWheel,new Listener(){
    @Override public void handleEvent(    Event event){
      event.doit=false;
      Slider scrollBar=fTimeGraphViewer.getVerticalBar();
      fTimeGraphViewer.setTopIndex(scrollBar.getSelection() - event.count);
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  tree.addListener(SWT.KeyDown,new Listener(){
    @Override public void handleEvent(    Event event){
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        fTreeViewer.setSelection(new StructuredSelection());
        event.doit=false;
        return;
      }
      if (event.keyCode == SWT.ARROW_DOWN) {
        int index=Math.min(fTimeGraphViewer.getSelectionIndex() + 1,treeItems.size() - 1);
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
        event.doit=false;
      }
 else       if (event.keyCode == SWT.PAGE_DOWN) {
        int height=tree.getSize().y - tree.getHeaderHeight() - tree.getHorizontalBar().getSize().y;
        int countPerPage=height / getItemHeight(tree);
        int index=Math.min(fTimeGraphViewer.getSelectionIndex() + countPerPage - 1,treeItems.size() - 1);
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
        event.doit=false;
      }
 else       if (event.keyCode == SWT.END) {
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(treeItems.size() - 1).getData());
        event.doit=false;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
      if (fTimeGraphViewer.getSelectionIndex() >= 0) {
        fTreeViewer.setSelection(new StructuredSelection(fTimeGraphViewer.getSelection()));
      }
 else {
        fTreeViewer.setSelection(new StructuredSelection());
      }
    }
  }
);
  fTimeGraphViewer.getTimeGraphControl().addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTreeViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      if (fInhibitTreeSelection) {
        return;
      }
      if (event.getSelection() instanceof IStructuredSelection) {
        Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
        if (selection instanceof ITimeGraphEntry) {
          fTimeGraphViewer.setSelection((ITimeGraphEntry)selection);
        }
        List<TreeItem> treeItems=getVisibleExpandedItems(tree);
        if (treeItems.size() == 0) {
          return;
        }
        TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
        tree.setTopItem(treeItem);
      }
    }
  }
);
  fTimeGraphViewer.addSelectionListener(new ITimeGraphSelectionListener(){
    @Override public void selectionChanged(    TimeGraphSelectionEvent event){
      ITimeGraphEntry entry=fTimeGraphViewer.getSelection();
      fInhibitTreeSelection=true;
      if (entry != null) {
        StructuredSelection selection=new StructuredSelection(entry);
        fTreeViewer.setSelection(selection);
      }
 else {
        fTreeViewer.setSelection(new StructuredSelection());
      }
      fInhibitTreeSelection=false;
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTimeGraphViewer.getVerticalBar().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTimeGraphViewer.getTimeGraphControl().addMouseWheelListener(new MouseWheelListener(){
    @Override public void mouseScrolled(    MouseEvent e){
      List<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTreeViewer.getControl().addMouseTrackListener(new MouseTrackAdapter(){
    @Override public void mouseEnter(    MouseEvent e){
      if (fTimeGraphViewer.getTimeGraphControl().isFocusControl()) {
        fTreeViewer.getControl().setFocus();
      }
    }
  }
);
  fTimeGraphViewer.getTimeGraphControl().addMouseTrackListener(new MouseTrackAdapter(){
    @Override public void mouseEnter(    MouseEvent e){
      if (fTreeViewer.getControl().isFocusControl()) {
        fTimeGraphViewer.getTimeGraphControl().setFocus();
      }
    }
  }
);
  fTimeGraphViewer.getTimeGraphScale().addMouseTrackListener(new MouseTrackAdapter(){
    @Override public void mouseEnter(    MouseEvent e){
      if (fTreeViewer.getControl().isFocusControl()) {
        fTimeGraphViewer.getTimeGraphControl().setFocus();
      }
    }
  }
);
  fNumFillerRows=Display.getDefault().getBounds().height / getItemHeight(tree);
  sash.setWeights(new int[]{1,1});
}",0.9711705831157528
92040,"@Override public void treeExpanded(TimeGraphTreeExpansionEvent event){
  fTreeViewer.setExpandedState(event.getEntry(),true);
}","@Override public void treeExpanded(TimeGraphTreeExpansionEvent event){
  ITimeGraphEntry entry=event.getEntry();
  fTreeViewer.setExpandedState(entry,true);
  for (  ITimeGraphEntry child : entry.getChildren()) {
    boolean expanded=fTreeViewer.getExpandedState(child);
    fTimeGraphViewer.setExpandedState(child,expanded);
  }
}",0.4890829694323144
92041,"/** 
 * Handler for the trace selected signal
 * @param signal The signal that's received
 */
@TmfSignalHandler public void traceSelected(final TmfTraceSelectedSignal signal){
  if (signal.getTrace() == fTrace) {
    return;
  }
  fTrace=signal.getTrace();
synchronized (fEntryListMap) {
    fEntryList=fEntryListMap.get(fTrace);
    if (fEntryList == null) {
synchronized (fBuildThreadMap) {
        BuildThread buildThread=new BuildThread(fTrace);
        fBuildThreadMap.put(fTrace,buildThread);
        buildThread.start();
      }
    }
 else {
      fStartTime=fTrace.getStartTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
      fEndTime=fTrace.getEndTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
      refresh();
    }
  }
}","/** 
 * Handler for the trace selected signal
 * @param signal The incoming signal
 */
@TmfSignalHandler public void traceSelected(final TmfTraceSelectedSignal signal){
  if (signal.getTrace() == fTrace) {
    return;
  }
  fTrace=signal.getTrace();
  loadTrace();
}",0.4640776699029126
92042,"/** 
 * Handler for the trace selected signal
 * @param signal The incoming signal
 */
@TmfSignalHandler public void traceSelected(final TmfTraceSelectedSignal signal){
  if (signal.getTrace() == fTrace) {
    return;
  }
  fTrace=signal.getTrace();
synchronized (fEntryListMap) {
    fEntryList=fEntryListMap.get(fTrace);
    if (fEntryList == null) {
synchronized (fBuildThreadMap) {
        BuildThread buildThread=new BuildThread(fTrace);
        fBuildThreadMap.put(fTrace,buildThread);
        buildThread.start();
      }
    }
 else {
      fStartTime=fTrace.getStartTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
      fEndTime=fTrace.getEndTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
      refresh();
    }
  }
}","/** 
 * Handler for the trace selected signal
 * @param signal The incoming signal
 */
@TmfSignalHandler public void traceSelected(final TmfTraceSelectedSignal signal){
  if (signal.getTrace() == fTrace) {
    return;
  }
  fTrace=signal.getTrace();
  loadTrace();
}",0.4965786901270772
92043,"/** 
 * Register an object to the signal manager as a ""VIP"" listener. All VIP listeners will all receive the signal before the manager moves on to the lowly, non-VIP listeners.
 * @param listener The object that will be notified of new signals
 */
public static synchronized void registerVIP(Object listener){
  Method[] methods=getSignalHandlerMethods(listener);
  if (methods.length > 0) {
    fVIPListeners.put(listener,methods);
  }
}","/** 
 * Register an object to the signal manager as a ""VIP"" listener. All VIP listeners will all receive the signal before the manager moves on to the lowly, non-VIP listeners.
 * @param listener The object that will be notified of new signals
 */
public static synchronized void registerVIP(Object listener){
  deregister(listener);
  Method[] methods=getSignalHandlerMethods(listener);
  if (methods.length > 0) {
    fVIPListeners.put(listener,methods);
  }
}",0.9733333333333334
92044,"/** 
 * Register an object to the signal manager. This object can then implement handler methods, marked with @TmfSignalHandler and with the expected signal type as parameter.
 * @param listener The object that will be notified of new signals
 */
public static synchronized void register(Object listener){
  Method[] methods=getSignalHandlerMethods(listener);
  if (methods.length > 0) {
    fListeners.put(listener,methods);
  }
}","/** 
 * Register an object to the signal manager. This object can then implement handler methods, marked with @TmfSignalHandler and with the expected signal type as parameter.
 * @param listener The object that will be notified of new signals
 */
public static synchronized void register(Object listener){
  deregister(listener);
  Method[] methods=getSignalHandlerMethods(listener);
  if (methods.length > 0) {
    fListeners.put(listener,methods);
  }
}",0.9729119638826184
92045,"/** 
 * Initialize the trace common attributes and the base component.
 * @param resource the Eclipse resource (trace)
 * @param path the trace path
 * @param type the trace event type
 * @throws TmfTraceException If something failed during the initialization
 */
protected void initialize(final IResource resource,final String path,final Class<? extends ITmfEvent> type) throws TmfTraceException {
  if (path == null) {
    throw new TmfTraceException(""String_Node_Str"");
  }
  fPath=path;
  fResource=resource;
  String traceName=(resource != null) ? resource.getName() : null;
  if (traceName == null) {
    final int sep=path.lastIndexOf(IPath.SEPARATOR);
    traceName=(sep >= 0) ? path.substring(sep + 1) : path;
  }
  if (fParser == null) {
    if (this instanceof ITmfEventParser) {
      fParser=(ITmfEventParser)this;
    }
 else {
      throw new TmfTraceException(""String_Node_Str"");
    }
  }
  super.init(traceName,type);
}","/** 
 * Initialize the trace common attributes and the base component.
 * @param resource the Eclipse resource (trace)
 * @param path the trace path
 * @param type the trace event type
 * @throws TmfTraceException If something failed during the initialization
 */
protected void initialize(final IResource resource,final String path,final Class<? extends ITmfEvent> type) throws TmfTraceException {
  if (path == null) {
    throw new TmfTraceException(""String_Node_Str"");
  }
  fPath=path;
  fResource=resource;
  String traceName=(resource != null) ? resource.getName() : null;
  if (traceName == null) {
    final int sep=path.lastIndexOf(IPath.SEPARATOR);
    traceName=(sep >= 0) ? path.substring(sep + 1) : path;
  }
  if (fParser == null) {
    if (this instanceof ITmfEventParser) {
      fParser=(ITmfEventParser)this;
    }
 else {
      throw new TmfTraceException(""String_Node_Str"");
    }
  }
  super.init(traceName,type);
  TmfSignalManager.registerVIP(this);
}",0.9801255230125524
92046,"/** 
 * Handler for the trace selected signal
 * @param signal The incoming signal
 */
@TmfSignalHandler public void traceSelected(final TmfTraceSelectedSignal signal){
  if (signal.getTrace() == fTrace) {
    return;
  }
  fTrace=signal.getTrace();
synchronized (fEntryListMap) {
    fEntryList=fEntryListMap.get(fTrace);
    if (fEntryList == null) {
synchronized (fBuildThreadMap) {
        BuildThread buildThread=new BuildThread(fTrace);
        fBuildThreadMap.put(fTrace,buildThread);
        buildThread.start();
      }
    }
 else {
      fStartTime=fTrace.getStartTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
      fEndTime=fTrace.getEndTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
      refresh();
    }
  }
}","/** 
 * Handler for the trace selected signal
 * @param signal The incoming signal
 */
@TmfSignalHandler public void traceSelected(final TmfTraceSelectedSignal signal){
  if (signal.getTrace() == fTrace) {
    return;
  }
  fTrace=signal.getTrace();
  loadTrace();
}",0.4965786901270772
92047,"/** 
 * Handles trace opened signal. Loads histogram if new trace time range is not equal <code>TmfTimeRange.NULL_RANGE</code>
 * @param signal the trace selected signal
 * @since 2.0
 */
@TmfSignalHandler public void traceOpened(TmfTraceOpenedSignal signal){
  assert(signal != null);
  fTrace=signal.getTrace();
  loadTrace();
}","/** 
 * Handles trace opened signal. Loads histogram if new trace time range is not equal <code>TmfTimeRange.NULL_RANGE</code>
 * @param signal the trace opened signal
 * @since 2.0
 */
@TmfSignalHandler public void traceOpened(TmfTraceOpenedSignal signal){
  assert(signal != null);
  fTrace=signal.getTrace();
  loadTrace();
}",0.9848024316109424
92048,"/** 
 * Handler for the trace selected signal. This will make the view display the information for the newly-selected trace.
 * @param signal The incoming signal
 */
@TmfSignalHandler public void traceSelected(TmfTraceSelectedSignal signal){
  ITmfTrace trace=signal.getTrace();
  if (trace != fTrace) {
    fTrace=trace;
    Thread thread=new Thread(""String_Node_Str""){
      @Override public void run(){
        createTable();
      }
    }
;
    thread.start();
  }
}","/** 
 * Handler for the trace selected signal. This will make the view display the information for the newly-selected trace.
 * @param signal The incoming signal
 */
@TmfSignalHandler public void traceSelected(TmfTraceSelectedSignal signal){
  ITmfTrace trace=signal.getTrace();
  if (trace != fTrace) {
    fTrace=trace;
    loadTrace();
  }
}",0.8255528255528255
92049,"@Override public void run(){
  ITmfTimestamp currentTime=signal.getCurrentTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE);
  fCurrentTimestamp=currentTime.getValue();
  updateTable();
}","@Override public void run(){
  createTable();
}",0.4
92050,"public synchronized void reset(){
  Iterator<Entry<IBinaryObject,AutoDisposeAddr2line>> iter=addr2lines.entrySet().iterator();
  while (iter.hasNext()) {
    Entry<IBinaryObject,AutoDisposeAddr2line> entry=iter.next();
    AutoDisposeAddr2line ada2l=entry.getValue();
    ada2l.addr2line.dispose();
    ada2l.addr2line=null;
    iter.remove();
  }
  Iterator<Entry<String,AutoDisposeCPPFilt>> iter2=cppfilts.entrySet().iterator();
  while (iter2.hasNext()) {
    Entry<String,AutoDisposeCPPFilt> entry=iter2.next();
    AutoDisposeCPPFilt adcppf=entry.getValue();
    adcppf.cppfilt.dispose();
    adcppf.cppfilt=null;
  }
}","/** 
 * @since 4.1
 */
public synchronized void reset(){
  Iterator<Entry<IBinaryObject,AutoDisposeAddr2line>> iter=addr2lines.entrySet().iterator();
  while (iter.hasNext()) {
    Entry<IBinaryObject,AutoDisposeAddr2line> entry=iter.next();
    AutoDisposeAddr2line ada2l=entry.getValue();
    ada2l.addr2line.dispose();
    ada2l.addr2line=null;
    iter.remove();
  }
  Iterator<Entry<String,AutoDisposeCPPFilt>> iter2=cppfilts.entrySet().iterator();
  while (iter2.hasNext()) {
    Entry<String,AutoDisposeCPPFilt> entry=iter2.next();
    AutoDisposeCPPFilt adcppf=entry.getValue();
    adcppf.cppfilt.dispose();
    adcppf.cppfilt=null;
  }
}",0.981904012588513
92051,"@Override public boolean isShowingByDefault(){
  return true;
}","/** 
 * @since 5.0
 */
@Override public boolean isShowingByDefault(){
  return true;
}",0.8456375838926175
92052,"/** 
 * It creates the wrapped TableViewer
 * @param parent - the parent Composite
 * @param style - the table style
 * @return a TableViewer
 * @since 4.1
 */
@Override protected TableViewer createViewer(Composite parent,int style){
  Table t=createTable(parent,style);
  return new TableViewer(t);
}","/** 
 * It creates the wrapped TableViewer
 * @param parent - the parent Composite
 * @param style - the table style
 * @return a TableViewer
 * @since 5.0
 */
@Override protected TableViewer createViewer(Composite parent,int style){
  Table t=createTable(parent,style);
  return new TableViewer(t);
}",0.9933554817275748
92053,"/** 
 * (non-Javadoc)
 * @see org.eclipse.linuxtools.dataviewers.abstractviewers.AbstractSTViewer#getColumns()
 * @since 4.1
 */
@Override public TableColumn[] getColumns(){
  return getViewer().getTable().getColumns();
}","/** 
 * (non-Javadoc)
 * @see org.eclipse.linuxtools.dataviewers.abstractviewers.AbstractSTViewer#getColumns()
 * @since 5.0
 */
@Override public TableColumn[] getColumns(){
  return getViewer().getTable().getColumns();
}",0.986425339366516
92054,"/** 
 * It creates the wrapped TreeViewer
 * @param parent - the parent Composite
 * @param style - the table style
 * @return a TreeViewer
 * @since 4.1
 */
@Override protected TreeViewer createViewer(Composite parent,int style){
  Tree t=createTree(parent,style);
  return new TreeViewer(t);
}","/** 
 * It creates the wrapped TreeViewer
 * @param parent - the parent Composite
 * @param style - the table style
 * @return a TreeViewer
 * @since 5.0
 */
@Override protected TreeViewer createViewer(Composite parent,int style){
  Tree t=createTree(parent,style);
  return new TreeViewer(t);
}",0.9932203389830508
92055,"/** 
 * (non-Javadoc)
 * @see org.eclipse.linuxtools.dataviewers.abstractviewers.AbstractSTViewer#getColumns()
 * @since 4.1
 */
@Override public TreeColumn[] getColumns(){
  return getViewer().getTree().getColumns();
}","/** 
 * (non-Javadoc)
 * @see org.eclipse.linuxtools.dataviewers.abstractviewers.AbstractSTViewer#getColumns()
 * @since 5.0
 */
@Override public TreeColumn[] getColumns(){
  return getViewer().getTree().getColumns();
}",0.9863013698630136
92056,"/** 
 * Updates the columns width and status
 */
public void updateColumns(){
  Item[] columns=stViewer.getColumns();
  for (int i=columns.length; i-- > 0; ) {
    Item column=columns[i];
    if (getState(i) == STDataViewersHideShowManager.STATE_HIDDEN) {
      stViewer.setColumnWidth(column,0);
      stViewer.setColumnResizable(column,false);
    }
 else {
      stViewer.setColumnWidth(column,getWidth(i));
      stViewer.setColumnResizable(column,true);
    }
  }
}","/** 
 * Updates the columns width and status
 * @since 5.0
 */
public void updateColumns(){
  Item[] columns=stViewer.getColumns();
  for (int i=columns.length; i-- > 0; ) {
    Item column=columns[i];
    if (getState(i) == STDataViewersHideShowManager.STATE_HIDDEN) {
      stViewer.setColumnWidth(column,0);
      stViewer.setColumnResizable(column,false);
    }
 else {
      stViewer.setColumnWidth(column,getWidth(i));
      stViewer.setColumnResizable(column,true);
    }
  }
}",0.9853249475890984
92057,"@Override public void init(IWorkbenchWindow window){
  this.window=window;
}","/** 
 * @since 2.0
 */
@Override public void init(IWorkbenchWindow window){
  this.window=window;
}",0.8685714285714285
92058,"@Override public void selectionChanged(IAction act,ISelection select){
  action=act;
  action.setEnabled(true);
}","/** 
 * @since 2.0
 */
@Override public void selectionChanged(IAction act,ISelection select){
  action=act;
  action.setEnabled(true);
}",0.9076305220883534
92059,"@Override public void dispose(){
  window=null;
  action=null;
}","/** 
 * @since 2.0
 */
@Override public void dispose(){
  window=null;
  action=null;
}",0.847682119205298
92060,"private boolean importTraces(){
  boolean success=false;
  IOverwriteQuery overwriteQuery=new IOverwriteQuery(){
    @Override public String queryOverwrite(    String file){
      return fOverwrite ? IOverwriteQuery.ALL : IOverwriteQuery.NO_ALL;
    }
  }
;
  FileSystemStructureProvider fileSystemStructureProvider=FileSystemStructureProvider.INSTANCE;
  for (  FileAndName traceToImport : fTraces) {
    try {
      if (fLinked) {
        createLink(fTargetFolder,Path.fromOSString(traceToImport.getFile().getAbsolutePath()),traceToImport.getName());
        success=setTraceType(traceToImport).isOK();
      }
 else {
        List<File> subList=new ArrayList<File>();
        IPath path=fTargetFolder.getFullPath();
        File parentFile=traceToImport.getFile();
        final boolean isFile=parentFile.isFile();
        if (isFile) {
          IFile resource=ResourcesPlugin.getWorkspace().getRoot().getFile(path.append(traceToImport.getName()));
          if (fOverwrite || !resource.exists()) {
            subList.add(parentFile);
            parentFile=parentFile.getParentFile();
            final FileInputStream source=new FileInputStream(traceToImport.getFile());
            if (resource.exists()) {
              resource.delete(IResource.FORCE,new NullProgressMonitor());
            }
            resource.create(source,true,new NullProgressMonitor());
            source.close();
            setTraceType(traceToImport);
            success=true;
          }
        }
 else {
          path=fTargetFolder.getFullPath().append(traceToImport.getName());
          File[] fileList=traceToImport.getFile().listFiles();
          for (          File child : fileList) {
            subList.add(child);
          }
          Collections.sort(subList,new Comparator<File>(){
            @Override public int compare(            File o1,            File o2){
              return o1.getAbsolutePath().compareTo(o2.getAbsolutePath());
            }
          }
);
          ImportOperation operation=new ImportOperation(path,parentFile,fileSystemStructureProvider,overwriteQuery,subList);
          operation.setContext(getShell());
          operation.setCreateContainerStructure(false);
          if (executeImportOperation(operation)) {
            setTraceType(traceToImport);
            success=true;
          }
        }
      }
    }
 catch (    Exception e) {
    }
  }
  return success;
}","private boolean importTraces(){
  boolean success=false;
  IOverwriteQuery overwriteQuery=new IOverwriteQuery(){
    @Override public String queryOverwrite(    String file){
      return fOverwrite ? IOverwriteQuery.ALL : IOverwriteQuery.NO_ALL;
    }
  }
;
  FileSystemStructureProvider fileSystemStructureProvider=FileSystemStructureProvider.INSTANCE;
  for (  FileAndName traceToImport : fTraces) {
    try {
      if (fLinked) {
        createLink(fTargetFolder,Path.fromOSString(traceToImport.getFile().getAbsolutePath()),traceToImport.getName());
        success=setTraceType(traceToImport).isOK();
      }
 else {
        List<File> subList=new ArrayList<File>();
        IPath path=fTargetFolder.getFullPath();
        File parentFile=traceToImport.getFile();
        final boolean isFile=parentFile.isFile();
        if (isFile) {
          IFile resource=ResourcesPlugin.getWorkspace().getRoot().getFile(path.append(traceToImport.getName()));
          if (fOverwrite || !resource.exists()) {
            subList.add(parentFile);
            parentFile=parentFile.getParentFile();
            final FileInputStream source=new FileInputStream(traceToImport.getFile());
            if (resource.exists()) {
              resource.delete(IResource.FORCE,new NullProgressMonitor());
            }
            resource.create(source,true,new NullProgressMonitor());
            source.close();
            setTraceType(traceToImport);
            success=true;
          }
        }
 else {
          subList.add(traceToImport.getFile());
          File[] fileList=traceToImport.getFile().listFiles();
          for (          File child : fileList) {
            subList.add(child);
          }
          Collections.sort(subList,new Comparator<File>(){
            @Override public int compare(            File o1,            File o2){
              return o1.getAbsolutePath().compareTo(o2.getAbsolutePath());
            }
          }
);
          ImportOperation operation=new ImportOperation(path,parentFile.getParentFile(),fileSystemStructureProvider,overwriteQuery,subList);
          operation.setContext(getShell());
          operation.setCreateContainerStructure(false);
          if (executeImportOperation(operation)) {
            setTraceType(traceToImport);
            success=true;
          }
        }
      }
    }
 catch (    Exception e) {
    }
  }
  return success;
}",0.9825291181364392
92061,"/** 
 * Finish the import.
 * @return <code>true</code> if successful else false
 */
public boolean finish(){
  File sourceDir=new File(getSourceDirectoryName());
  if (!sourceDir.isDirectory()) {
    setErrorMessage(Messages.ImportTraceWizard_InvalidTraceDirectory);
    return false;
  }
  try {
    sourceDir.getCanonicalPath();
  }
 catch (  IOException e) {
    MessageDialog.openInformation(getContainer().getShell(),Messages.ImportTraceWizard_Information,Messages.ImportTraceWizard_InvalidTraceDirectory);
    return false;
  }
  fRootDirectory=getSourceDirectoryName();
  List<FileSystemElement> selectedResources=getSelectedResources();
  Iterator<FileSystemElement> resources=selectedResources.iterator();
  Map<String,File> fileSystemObjects=new HashMap<String,File>();
  while (resources.hasNext()) {
    File file=(File)resources.next().getFileSystemObject();
    String key=file.getAbsolutePath();
    fileSystemObjects.put(key,file);
  }
  if (fileSystemObjects.size() > 0) {
    boolean ok=importResources(fileSystemObjects);
    String traceBundle=null;
    String traceTypeId=null;
    String traceIcon=null;
    String traceType=fTraceTypes.getText();
    boolean traceTypeOK=false;
    if (traceType.startsWith(TmfTraceType.CUSTOM_TXT_CATEGORY)) {
      for (      CustomTxtTraceDefinition def : CustomTxtTraceDefinition.loadAll()) {
        if (traceType.equals(TmfTraceType.CUSTOM_TXT_CATEGORY + ""String_Node_Str"" + def.definitionName)) {
          traceTypeOK=true;
          traceBundle=Activator.getDefault().getBundle().getSymbolicName();
          traceTypeId=CustomTxtTrace.class.getCanonicalName() + ""String_Node_Str"" + def.definitionName;
          traceIcon=DEFAULT_TRACE_ICON_PATH;
          break;
        }
      }
    }
 else     if (traceType.startsWith(TmfTraceType.CUSTOM_XML_CATEGORY)) {
      for (      CustomXmlTraceDefinition def : CustomXmlTraceDefinition.loadAll()) {
        if (traceType.equals(TmfTraceType.CUSTOM_XML_CATEGORY + ""String_Node_Str"" + def.definitionName)) {
          traceTypeOK=true;
          traceBundle=Activator.getDefault().getBundle().getSymbolicName();
          traceTypeId=CustomXmlTrace.class.getCanonicalName() + ""String_Node_Str"" + def.definitionName;
          traceIcon=DEFAULT_TRACE_ICON_PATH;
          break;
        }
      }
    }
 else {
      String temp[]=traceType.split(""String_Node_Str"",2);
      if (temp.length < 2) {
        Activator.getDefault().logError(""String_Node_Str"" + traceType);
        return false;
      }
      final String traceId=TmfTraceType.getInstance().getTraceTypeId(temp[0],temp[1]);
      if (traceId != null) {
        if (!TmfTraceType.getInstance().validateTrace(traceId,getSelectedResources())) {
          setMessage(null);
          setErrorMessage(Messages.ImportTraceWizard_TraceValidationFailed);
          return false;
        }
      }
 else {
        setMessage(null);
        setErrorMessage(Messages.ImportTraceWizard_TraceValidationFailed);
        return false;
      }
      IConfigurationElement ce=TmfTraceType.getInstance().getTraceAttributes(traceId);
      if (ce != null) {
        traceTypeOK=true;
        traceBundle=ce.getContributor().getName();
        traceTypeId=ce.getAttribute(TmfTraceType.ID_ATTR);
        traceIcon=ce.getAttribute(TmfTraceType.ICON_ATTR);
      }
    }
    if (ok && traceTypeOK && !traceType.equals(""String_Node_Str"")) {
      List<String> files=new ArrayList<String>(fileSystemObjects.keySet());
      Collections.sort(files,new Comparator<String>(){
        @Override public int compare(        String o1,        String o2){
          String v1=o1 + File.separatorChar;
          String v2=o2 + File.separatorChar;
          return v1.compareTo(v2);
        }
      }
);
      String prefix=null;
      for (int i=0; i < files.size(); i++) {
        File file=fileSystemObjects.get(files.get(i));
        String name=file.getAbsolutePath() + File.separatorChar;
        if (fTargetFolder != null && (prefix == null || !name.startsWith(prefix))) {
          prefix=name;
          IResource resource=fTargetFolder.findMember(file.getName());
          if (resource != null) {
            try {
              resource.setPersistentProperty(TmfCommonConstants.TRACEBUNDLE,traceBundle);
              resource.setPersistentProperty(TmfCommonConstants.TRACETYPE,traceTypeId);
              resource.setPersistentProperty(TmfCommonConstants.TRACEICON,traceIcon);
              TmfProjectElement tmfProject=TmfProjectRegistry.getProject(resource.getProject());
              if (tmfProject != null) {
                for (                TmfTraceElement traceElement : tmfProject.getTracesFolder().getTraces()) {
                  if (traceElement.getName().equals(resource.getName())) {
                    traceElement.refreshTraceType();
                    break;
                  }
                }
              }
            }
 catch (            CoreException e) {
              Activator.getDefault().logError(""String_Node_Str"" + resource.getName(),e);
            }
          }
        }
      }
    }
    return ok;
  }
  MessageDialog.openInformation(getContainer().getShell(),Messages.ImportTraceWizard_Information,Messages.ImportTraceWizard_SelectTraceNoneSelected);
  return false;
}","/** 
 * Finish the import.
 * @return <code>true</code> if successful else false
 */
public boolean finish(){
  File sourceDir=new File(getSourceDirectoryName());
  if (!sourceDir.isDirectory()) {
    setErrorMessage(Messages.ImportTraceWizard_InvalidTraceDirectory);
    return false;
  }
  try {
    sourceDir.getCanonicalPath();
  }
 catch (  IOException e) {
    MessageDialog.openInformation(getContainer().getShell(),Messages.ImportTraceWizard_Information,Messages.ImportTraceWizard_InvalidTraceDirectory);
    return false;
  }
  fRootDirectory=getSourceDirectoryName();
  List<FileSystemElement> selectedResources=getSelectedResources();
  Iterator<FileSystemElement> resources=selectedResources.iterator();
  Map<String,File> fileSystemObjects=new HashMap<String,File>();
  while (resources.hasNext()) {
    File file=(File)resources.next().getFileSystemObject();
    String key=file.getAbsolutePath();
    fileSystemObjects.put(key,file);
  }
  if (fileSystemObjects.size() > 0) {
    boolean ok=importResources(fileSystemObjects);
    String traceBundle=null;
    String traceTypeId=null;
    String traceIcon=null;
    String traceType=fTraceTypes.getText();
    boolean traceTypeOK=false;
    if (traceType.startsWith(TmfTraceType.CUSTOM_TXT_CATEGORY)) {
      for (      CustomTxtTraceDefinition def : CustomTxtTraceDefinition.loadAll()) {
        if (traceType.equals(TmfTraceType.CUSTOM_TXT_CATEGORY + ""String_Node_Str"" + def.definitionName)) {
          traceTypeOK=true;
          traceBundle=Activator.getDefault().getBundle().getSymbolicName();
          traceTypeId=CustomTxtTrace.class.getCanonicalName() + ""String_Node_Str"" + def.definitionName;
          traceIcon=DEFAULT_TRACE_ICON_PATH;
          break;
        }
      }
    }
 else     if (traceType.startsWith(TmfTraceType.CUSTOM_XML_CATEGORY)) {
      for (      CustomXmlTraceDefinition def : CustomXmlTraceDefinition.loadAll()) {
        if (traceType.equals(TmfTraceType.CUSTOM_XML_CATEGORY + ""String_Node_Str"" + def.definitionName)) {
          traceTypeOK=true;
          traceBundle=Activator.getDefault().getBundle().getSymbolicName();
          traceTypeId=CustomXmlTrace.class.getCanonicalName() + ""String_Node_Str"" + def.definitionName;
          traceIcon=DEFAULT_TRACE_ICON_PATH;
          break;
        }
      }
    }
 else {
      if (!traceType.equals(""String_Node_Str"")) {
        String temp[]=traceType.split(""String_Node_Str"",2);
        if (temp.length < 2) {
          Activator.getDefault().logError(""String_Node_Str"" + traceType);
          return false;
        }
        final String traceId=TmfTraceType.getInstance().getTraceTypeId(temp[0],temp[1]);
        if (traceId != null) {
          if (!TmfTraceType.getInstance().validateTrace(traceId,getSelectedResources())) {
            setMessage(null);
            setErrorMessage(Messages.ImportTraceWizard_TraceValidationFailed);
            return false;
          }
        }
 else {
          setMessage(null);
          setErrorMessage(Messages.ImportTraceWizard_TraceValidationFailed);
          return false;
        }
        IConfigurationElement ce=TmfTraceType.getInstance().getTraceAttributes(traceId);
        if (ce != null) {
          traceTypeOK=true;
          traceBundle=ce.getContributor().getName();
          traceTypeId=ce.getAttribute(TmfTraceType.ID_ATTR);
          traceIcon=ce.getAttribute(TmfTraceType.ICON_ATTR);
        }
      }
    }
    if (ok && traceTypeOK && !traceType.equals(""String_Node_Str"")) {
      List<String> files=new ArrayList<String>(fileSystemObjects.keySet());
      Collections.sort(files,new Comparator<String>(){
        @Override public int compare(        String o1,        String o2){
          String v1=o1 + File.separatorChar;
          String v2=o2 + File.separatorChar;
          return v1.compareTo(v2);
        }
      }
);
      String prefix=null;
      for (int i=0; i < files.size(); i++) {
        File file=fileSystemObjects.get(files.get(i));
        String name=file.getAbsolutePath() + File.separatorChar;
        if (fTargetFolder != null && (prefix == null || !name.startsWith(prefix))) {
          prefix=name;
          IResource resource=fTargetFolder.findMember(file.getName());
          if (resource != null) {
            try {
              resource.setPersistentProperty(TmfCommonConstants.TRACEBUNDLE,traceBundle);
              resource.setPersistentProperty(TmfCommonConstants.TRACETYPE,traceTypeId);
              resource.setPersistentProperty(TmfCommonConstants.TRACEICON,traceIcon);
              TmfProjectElement tmfProject=TmfProjectRegistry.getProject(resource.getProject());
              if (tmfProject != null) {
                for (                TmfTraceElement traceElement : tmfProject.getTracesFolder().getTraces()) {
                  if (traceElement.getName().equals(resource.getName())) {
                    traceElement.refreshTraceType();
                    break;
                  }
                }
              }
            }
 catch (            CoreException e) {
              Activator.getDefault().logError(""String_Node_Str"" + resource.getName(),e);
            }
          }
        }
      }
    }
    return ok;
  }
  MessageDialog.openInformation(getContainer().getShell(),Messages.ImportTraceWizard_Information,Messages.ImportTraceWizard_SelectTraceNoneSelected);
  return false;
}",0.9821361414065438
92062,"@Override public void checkStateChanged(CheckStateChangedEvent event){
  boolean checkStatus=event.getChecked();
  Object element=event.getElement();
  fTreeView.setGrayed(element,false);
  fTreeView.setSubtreeChecked(element,checkStatus);
  ITreeContentProvider tcp=(ITreeContentProvider)fTreeView.getContentProvider();
  String parentElement=(String)tcp.getParent(element);
  if (parentElement != null) {
    String[] siblings=(String[])tcp.getChildren(parentElement);
    final String first=siblings[0];
    final boolean isFirstChecked=fTreeView.getChecked(first);
    boolean allSame=true;
    for (    String peer : siblings) {
      final boolean peerChecked=fTreeView.getChecked(peer);
      if (peerChecked != isFirstChecked) {
        allSame=false;
      }
    }
    if (allSame) {
      fTreeView.setGrayed(parentElement,false);
      fTreeView.setChecked(parentElement,checkStatus);
    }
 else {
      fTreeView.setChecked(parentElement,false);
      fTreeView.setGrayed(parentElement,true);
    }
  }
  getWizard().getContainer().updateButtons();
}","@Override public void checkStateChanged(CheckStateChangedEvent event){
  boolean checkStatus=event.getChecked();
  Object element=event.getElement();
  fTreeView.setGrayed(element,false);
  fTreeView.setSubtreeChecked(element,checkStatus);
  ITreeContentProvider tcp=(ITreeContentProvider)fTreeView.getContentProvider();
  String parentElement=(String)tcp.getParent(element);
  if (parentElement != null) {
    TraceTypeHelper[] siblings=(TraceTypeHelper[])tcp.getChildren(parentElement);
    final TraceTypeHelper first=siblings[0];
    final boolean isFirstChecked=fTreeView.getChecked(first);
    boolean allSame=true;
    for (    TraceTypeHelper peer : siblings) {
      final boolean peerChecked=fTreeView.getChecked(peer);
      if (peerChecked != isFirstChecked) {
        allSame=false;
      }
    }
    if (allSame) {
      fTreeView.setGrayed(parentElement,false);
      fTreeView.setChecked(parentElement,checkStatus);
    }
 else {
      fTreeView.setChecked(parentElement,false);
      fTreeView.setGrayed(parentElement,true);
    }
  }
  getWizard().getContainer().updateButtons();
}",0.9611470860314524
92063,"@Override public Object getParent(Object element){
  if (element instanceof String) {
    for (    String key : fTraceCategory) {
      List<TraceTypeHelper> traceSet=fTraceType.get(key);
      if (traceSet != null) {
        if (traceSet.contains(element)) {
          return key;
        }
      }
    }
  }
  return null;
}","@Override public Object getParent(Object element){
  if (element instanceof TraceTypeHelper) {
    for (    String key : fTraceCategory) {
      List<TraceTypeHelper> traceSet=fTraceType.get(key);
      if (traceSet != null) {
        if (traceSet.contains(element)) {
          return key;
        }
      }
    }
  }
  return null;
}",0.9682299546142208
92064,"@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  TmfTraceFolder traceFolder=getTraceFolder();
  if (traceFolder == null) {
    return null;
  }
  IWorkbench workbench=PlatformUI.getWorkbench();
  if (workbench != null) {
    final IWorkbenchWindow activeWorkbenchWindow=workbench.getActiveWorkbenchWindow();
    if (activeWorkbenchWindow != null) {
      Shell shell=activeWorkbenchWindow.getShell();
      BatchImportTraceWizard wizard=new BatchImportTraceWizard();
      wizard.init(PlatformUI.getWorkbench(),new StructuredSelection(traceFolder));
      WizardDialog dialog=new NonModalWizardDialog(shell,wizard);
      dialog.open();
      traceFolder.refresh();
    }
  }
  return null;
}","@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  TmfTraceFolder traceFolder=getTraceFolder();
  if (traceFolder == null) {
    return null;
  }
  IWorkbench workbench=PlatformUI.getWorkbench();
  if (workbench != null) {
    final IWorkbenchWindow activeWorkbenchWindow=workbench.getActiveWorkbenchWindow();
    if (activeWorkbenchWindow != null) {
      Shell shell=activeWorkbenchWindow.getShell();
      BatchImportTraceWizard wizard=new BatchImportTraceWizard();
      wizard.init(PlatformUI.getWorkbench(),new StructuredSelection(traceFolder));
      WizardDialog dialog=new WizardDialog(shell,wizard);
      dialog.open();
      traceFolder.refresh();
    }
  }
  return null;
}",0.9944674965421854
92065,"/** 
 * Add a file to scan
 * @param fileName the file to scan
 */
public void addFileToScan(final String fileName){
  fParentFilesToScan.add(fileName);
  startUpdateTask(Messages.BatchImportTraceWizard_add + ""String_Node_Str"" + fileName);
}","/** 
 * Add a file to scan
 * @param fileName the file to scan
 */
public void addFileToScan(final String fileName){
  if (!fParentFiles.containsKey(fileName)) {
    fParentFiles.put(fileName,new HashSet<String>());
    startUpdateTask(Messages.BatchImportTraceWizard_add + ' ' + fileName,fileName);
  }
}",0.7545787545787546
92066,"private synchronized IStatus updateFiles(IProgressMonitor monitor){
  final Set<String> filesToScan=new TreeSet<String>();
  final String[] parentFiles=fParentFilesToScan.toArray(new String[0]);
  final String[] traceTypes=fTraceTypesToScan.toArray(new String[0]);
  int workToDo=1;
  for (  String name : parentFiles) {
    final File file=new File(name);
    final File[] listFiles=file.listFiles();
    if (listFiles != null) {
      workToDo+=listFiles.length;
    }
  }
  int step=TOTALWORK / workToDo;
  try {
    for (    String name : parentFiles) {
      final File fileToAdd=new File(name);
      recurse(filesToScan,fileToAdd,monitor,step);
    }
    for (    String fileToScan : filesToScan) {
      for (      String traceCat : traceTypes) {
        TraceValidationHelper tv=new TraceValidationHelper(fileToScan,traceCat);
        if (!fResults.containsKey(tv)) {
          if (!fTracesToScan.contains(tv)) {
            fTracesToScan.put(tv);
            monitor.subTask(tv.getTraceToScan());
          }
        }
      }
    }
  }
 catch (  InterruptedException e) {
    monitor.done();
    return new Status(IStatus.ERROR,Activator.PLUGIN_ID,e.getMessage(),e);
  }
  monitor.done();
  return Status.OK_STATUS;
}","private synchronized IStatus updateFiles(IProgressMonitor monitor,String traceToScan){
  final Set<String> filesToScan=new TreeSet<String>();
  int workToDo=1;
  for (  String name : fParentFiles.keySet()) {
    final File file=new File(name);
    final File[] listFiles=file.listFiles();
    if (listFiles != null) {
      workToDo+=listFiles.length;
    }
  }
  int step=TOTALWORK / workToDo;
  try {
    for (    String name : fParentFiles.keySet()) {
      final File fileToAdd=new File(name);
      final Set<String> parentFilesToScan=fParentFiles.get(fileToAdd.getAbsolutePath());
      recurse(parentFilesToScan,fileToAdd,monitor,step);
      if (monitor.isCanceled()) {
        fParentFilesToScan.remove(traceToScan);
        fParentFiles.remove(traceToScan);
        return CANCEL_STATUS;
      }
    }
    filesToScan.clear();
    for (    String name : fParentFiles.keySet()) {
      filesToScan.addAll(fParentFiles.get(name));
      fParentFilesToScan.add(name);
    }
    for (    String fileToScan : filesToScan) {
      for (      String traceCat : fTraceTypesToScan) {
        TraceValidationHelper tv=new TraceValidationHelper(fileToScan,traceCat);
        if (!fResults.containsKey(tv)) {
          if (!fTracesToScan.contains(tv)) {
            fTracesToScan.put(tv);
            monitor.subTask(tv.getTraceToScan());
            if (monitor.isCanceled()) {
              fParentFilesToScan.remove(traceToScan);
              fParentFiles.remove(traceToScan);
              return CANCEL_STATUS;
            }
          }
        }
      }
    }
  }
 catch (  InterruptedException e) {
    monitor.done();
    return new Status(IStatus.ERROR,Activator.PLUGIN_ID,e.getMessage(),e);
  }
  monitor.done();
  return Status.OK_STATUS;
}",0.6628609805238415
92067,"@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
synchronized (BatchImportTraceWizard.this) {
    SubMonitor sm;
    sm=SubMonitor.convert(monitor);
    sm.setTaskName(taskName);
    sm.setWorkRemaining(TOTALWORK);
    updateFiles(sm);
    sm.done();
  }
}","@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
synchronized (BatchImportTraceWizard.this) {
    SubMonitor sm;
    sm=SubMonitor.convert(monitor);
    sm.setTaskName(taskName);
    sm.setWorkRemaining(TOTALWORK);
    updateFiles(sm,fileName);
    sm.done();
  }
}",0.9859594383775352
92068,"private void startUpdateTask(final String taskName){
  try {
    this.getContainer().run(true,false,new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
synchronized (BatchImportTraceWizard.this) {
          SubMonitor sm;
          sm=SubMonitor.convert(monitor);
          sm.setTaskName(taskName);
          sm.setWorkRemaining(TOTALWORK);
          updateFiles(sm);
          sm.done();
        }
      }
    }
);
  }
 catch (  InvocationTargetException e) {
  }
catch (  InterruptedException e) {
  }
 finally {
  }
}","private void startUpdateTask(final String taskName,final String fileName){
  try {
    this.getContainer().run(true,true,new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
synchronized (BatchImportTraceWizard.this) {
          SubMonitor sm;
          sm=SubMonitor.convert(monitor);
          sm.setTaskName(taskName);
          sm.setWorkRemaining(TOTALWORK);
          updateFiles(sm,fileName);
          sm.done();
        }
      }
    }
);
  }
 catch (  InvocationTargetException e) {
  }
catch (  InterruptedException e) {
  }
}",0.8938547486033519
92069,"/** 
 * Remove files from selection
 * @param fileName the name of the file to remove
 */
public void removeFile(final String fileName){
  fParentFilesToScan.remove(fileName);
  startUpdateTask(Messages.BatchImportTraceWizard_remove + ""String_Node_Str"" + fileName);
}","/** 
 * Remove files from selection
 * @param fileName the name of the file to remove
 */
public void removeFile(final String fileName){
  fParentFiles.remove(fileName);
  fParentFilesToScan.remove(fileName);
  startUpdateTask(Messages.BatchImportTraceWizard_remove + ' ' + fileName,null);
}",0.8960573476702509
92070,"@Override public void addPages(){
  addPage(fSelectTypePage);
  addPage(fSelectDirectoriesPage);
  addPage(fScanPage);
  final WizardDialog container=(WizardDialog)getContainer();
  container.setPageSize(800,400);
  container.updateSize();
}","@Override public void addPages(){
  addPage(fSelectTypePage);
  addPage(fSelectDirectoriesPage);
  addPage(fScanPage);
  final WizardDialog container=(WizardDialog)getContainer();
  if (container != null) {
    container.setPageSize(WIN_WIDTH,WIN_HEIGHT);
    container.updateSize();
  }
}",0.8754716981132076
92071,"private void recurse(Set<String> filesToScan,File fileToAdd){
  final String absolutePath=fileToAdd.getAbsolutePath();
  if (!filesToScan.contains(absolutePath) && (filesToScan.size() < MAX_FILES)) {
    filesToScan.add(absolutePath);
    final File[] listFiles=fileToAdd.listFiles();
    if (null != listFiles) {
      for (      File child : listFiles) {
        recurse(filesToScan,child);
      }
    }
  }
}","private IStatus recurse(Set<String> filesToScan,File fileToAdd,IProgressMonitor monitor){
  final String absolutePath=fileToAdd.getAbsolutePath();
  if (!filesToScan.contains(absolutePath) && (filesToScan.size() < MAX_FILES)) {
    filesToScan.add(absolutePath);
    final File[] listFiles=fileToAdd.listFiles();
    if (null != listFiles) {
      for (      File child : listFiles) {
        if (monitor.isCanceled()) {
          return CANCEL_STATUS;
        }
        IStatus retVal=recurse(filesToScan,child,monitor);
        if (retVal.getSeverity() == IStatus.CANCEL) {
          return retVal;
        }
      }
    }
  }
  return Status.OK_STATUS;
}",0.7633302151543498
92072,"public ScanRunnable(String name){
  super(name);
}","public ScanRunnable(String name){
  super(name);
  this.setSystem(true);
}",0.8064516129032258
92073,"/** 
 * Gets all the custom trace types
 * @return the list of custom trace types
 * @since 2.0
 */
public List<String> getCustomTraceTypes(){
  List<String> traceTypes=new ArrayList<String>();
  final String[] keySet=fTraceTypes.keySet().toArray(new String[0]);
  for (  String key : keySet) {
    if (fTraceTypes.get(key).getCategoryName().equals(CUSTOM_TXT_CATEGORY) || fTraceTypes.get(key).getCategoryName().equals(CUSTOM_XML_CATEGORY)) {
      fTraceTypes.remove(key);
    }
  }
  for (  CustomTxtTraceDefinition def : CustomTxtTraceDefinition.loadAll()) {
    String traceTypeName=CUSTOM_TXT_CATEGORY + ""String_Node_Str"" + def.definitionName;
    TraceTypeHelper tt=new TraceTypeHelper(traceTypeName,CUSTOM_TXT_CATEGORY,def.definitionName,null);
    fTraceTypes.put(traceTypeName,tt);
    traceTypes.add(traceTypeName);
  }
  for (  CustomXmlTraceDefinition def : CustomXmlTraceDefinition.loadAll()) {
    String traceTypeName=CUSTOM_XML_CATEGORY + ""String_Node_Str"" + def.definitionName;
    TraceTypeHelper tt=new TraceTypeHelper(traceTypeName,CUSTOM_TXT_CATEGORY,def.definitionName,null);
    fTraceTypes.put(traceTypeName,tt);
    traceTypes.add(traceTypeName);
  }
  return traceTypes;
}","/** 
 * Gets all the custom trace types
 * @return the list of custom trace types
 * @since 2.0
 */
public List<String> getCustomTraceTypes(){
  List<String> traceTypes=new ArrayList<String>();
  final String[] keySet=fTraceTypes.keySet().toArray(new String[0]);
  for (  String key : keySet) {
    if (fTraceTypes.get(key).getCategoryName().equals(CUSTOM_TXT_CATEGORY) || fTraceTypes.get(key).getCategoryName().equals(CUSTOM_XML_CATEGORY)) {
      fTraceTypes.remove(key);
    }
  }
  for (  CustomTxtTraceDefinition def : CustomTxtTraceDefinition.loadAll()) {
    String traceTypeName=CUSTOM_TXT_CATEGORY + SEPARATOR + def.definitionName;
    TraceTypeHelper tt=new TraceTypeHelper(traceTypeName,CUSTOM_TXT_CATEGORY,def.definitionName,null);
    fTraceTypes.put(traceTypeName,tt);
    traceTypes.add(traceTypeName);
  }
  for (  CustomXmlTraceDefinition def : CustomXmlTraceDefinition.loadAll()) {
    String traceTypeName=CUSTOM_XML_CATEGORY + SEPARATOR + def.definitionName;
    TraceTypeHelper tt=new TraceTypeHelper(traceTypeName,CUSTOM_TXT_CATEGORY,def.definitionName,null);
    fTraceTypes.put(traceTypeName,tt);
    traceTypes.add(traceTypeName);
  }
  return traceTypes;
}",0.9781512605042016
92074,"/** 
 * Returns a list of ""category : tracetype , ...""
 * @return returns a list of ""category : tracetype , ...""
 * @since 2.0
 */
public String[] getAvailableTraceTypes(){
  List<String> traceTypes=new ArrayList<String>();
  List<String> customTypes=getCustomTraceTypes();
  for (  String key : this.fTraceTypes.keySet()) {
    TraceTypeHelper tt=this.fTraceTypes.get(key);
    traceTypes.add(tt.getCategoryName() + ""String_Node_Str"" + tt.getName());
  }
  traceTypes.addAll(customTypes);
  return traceTypes.toArray(new String[traceTypes.size()]);
}","/** 
 * Returns a list of ""category:tracetype , ...""
 * @return returns a list of ""category:tracetype , ...""
 * @since 2.0
 */
public String[] getAvailableTraceTypes(){
  List<String> traceTypes=new ArrayList<String>();
  List<String> customTypes=getCustomTraceTypes();
  for (  String key : this.fTraceTypes.keySet()) {
    TraceTypeHelper tt=this.fTraceTypes.get(key);
    traceTypes.add(tt.getCategoryName() + SEPARATOR + tt.getName());
  }
  traceTypes.addAll(customTypes);
  return traceTypes.toArray(new String[traceTypes.size()]);
}",0.9724770642201837
92075,"@Override public void addPages(){
  addPage(fSelectTypePage);
  addPage(fSelectDirectoriesPage);
  addPage(fScanPage);
  final WizardDialog container=(WizardDialog)getContainer();
  if (container != null) {
    container.setPageSize(WIN_WIDTH,WIN_HEIGHT);
    container.updateSize();
  }
}","@Override public void addPages(){
  addPage(fSelectTypePage);
  addPage(fSelectDirectoriesPage);
  addPage(fScanPage);
  addPage(fOptions);
  final WizardDialog container=(WizardDialog)getContainer();
  if (container != null) {
    container.setPageSize(WIN_WIDTH,WIN_HEIGHT);
  }
}",0.914185639229422
92076,"@Override public void init(IWorkbench workbench,IStructuredSelection selection){
  fSelectDirectoriesPage=new ImportTraceWizardSelectDirectoriesPage(workbench,selection);
  fScanPage=new ImportTraceWizardScanPage(workbench,selection);
  fSelectTypePage=new ImportTraceWizardSelectTraceTypePage(workbench,selection);
  Iterator<?> iter=selection.iterator();
  while (iter.hasNext()) {
    Object selected=iter.next();
    if (selected instanceof TmfTraceFolder) {
      fTargetFolder=((TmfTraceFolder)selected).getResource();
      break;
    }
  }
  fResults.clear();
}","@Override public void init(IWorkbench workbench,IStructuredSelection selection){
  fSelectDirectoriesPage=new ImportTraceWizardSelectDirectoriesPage(workbench,selection);
  fScanPage=new ImportTraceWizardScanPage(workbench,selection);
  fSelectTypePage=new ImportTraceWizardSelectTraceTypePage(workbench,selection);
  fOptions=new ImportTraceWizardPageOptions(workbench,selection);
  Iterator<?> iter=selection.iterator();
  while (iter.hasNext()) {
    Object selected=iter.next();
    if (selected instanceof TmfTraceFolder) {
      fTargetFolder=((TmfTraceFolder)selected).getResource();
      break;
    }
  }
  fResults.clear();
}",0.9451827242524916
92077,"@Override public boolean canFinish(){
  return super.canFinish() && hasTracesToImport() && !hasConflicts();
}","@Override public boolean canFinish(){
  return super.canFinish() && hasTracesToImport() && !hasConflicts()&& (fTargetFolder != null);
}",0.8934426229508197
92078,"private IStatus setTraceType(FileAndName traceToImport){
  IPath path=fTargetFolder.getFullPath().append(traceToImport.getName());
  IResource resource=ResourcesPlugin.getWorkspace().getRoot().findMember(path);
  if (resource != null) {
    try {
      boolean traceTypeOK=false;
      String traceBundle=null, traceTypeId=null, traceIcon=null;
      traceTypeId=traceToImport.getTraceTypeId();
      IConfigurationElement ce=TmfTraceType.getInstance().getTraceAttributes(traceTypeId);
      if ((ce != null) && (ce.getContributor() != null)) {
        traceTypeOK=true;
        traceBundle=ce.getContributor().getName();
        traceTypeId=ce.getAttribute(TmfTraceType.ID_ATTR);
        traceIcon=ce.getAttribute(TmfTraceType.ICON_ATTR);
      }
      final String traceType=traceTypeId;
      if (!traceTypeOK && (traceType.startsWith(TmfTraceType.CUSTOM_TXT_CATEGORY) || traceType.startsWith(TmfTraceType.CUSTOM_XML_CATEGORY))) {
        traceTypeOK=true;
        traceBundle=Activator.getDefault().getBundle().getSymbolicName();
        traceTypeId=CustomTxtTrace.class.getCanonicalName() + ""String_Node_Str"" + traceType;
        traceIcon=DEFAULT_TRACE_ICON_PATH;
      }
      if (traceTypeOK) {
        resource.setPersistentProperty(TmfCommonConstants.TRACEBUNDLE,traceBundle);
        resource.setPersistentProperty(TmfCommonConstants.TRACETYPE,traceTypeId);
        resource.setPersistentProperty(TmfCommonConstants.TRACEICON,traceIcon);
      }
      TmfProjectElement tmfProject=TmfProjectRegistry.getProject(resource.getProject());
      if (tmfProject != null) {
        for (        TmfTraceElement traceElement : tmfProject.getTracesFolder().getTraces()) {
          if (traceElement.getName().equals(resource.getName())) {
            traceElement.refreshTraceType();
            break;
          }
        }
      }
    }
 catch (    CoreException e) {
      Activator.getDefault().logError(Messages.BatchImportTraceWizardErrorImportingTraceResource + ""String_Node_Str"" + resource.getName(),e);
    }
  }
  return Status.OK_STATUS;
}","private IStatus setTraceType(FileAndName traceToImport){
  IStatus validate=Status.OK_STATUS;
  IPath path=fTargetFolder.getFullPath().append(traceToImport.getName());
  IResource resource=ResourcesPlugin.getWorkspace().getRoot().findMember(path);
  if (resource != null) {
    try {
      boolean traceTypeOK=false;
      String traceBundle=null, traceTypeId=null, traceIcon=null;
      traceTypeId=traceToImport.getTraceTypeId();
      IConfigurationElement ce=TmfTraceType.getInstance().getTraceAttributes(traceTypeId);
      if ((ce != null) && (ce.getContributor() != null)) {
        traceTypeOK=true;
        traceBundle=ce.getContributor().getName();
        traceTypeId=ce.getAttribute(TmfTraceType.ID_ATTR);
        traceIcon=ce.getAttribute(TmfTraceType.ICON_ATTR);
      }
      final String traceType=traceTypeId;
      final boolean startsWithTxt=traceType.startsWith(TmfTraceType.CUSTOM_TXT_CATEGORY);
      final boolean startsWithXML=traceType.startsWith(TmfTraceType.CUSTOM_XML_CATEGORY);
      if (!traceTypeOK && (startsWithTxt || startsWithXML)) {
        final char SEPARATOR=':';
        traceTypeOK=true;
        String traceTypeToken[]=traceType.split(""String_Node_Str"",2);
        if (traceTypeToken.length == 2) {
          traceBundle=Activator.getDefault().getBundle().getSymbolicName();
          if (startsWithTxt) {
            traceTypeId=CustomTxtTrace.class.getCanonicalName() + SEPARATOR + traceTypeToken[1];
          }
 else {
            traceTypeId=CustomXmlTrace.class.getCanonicalName() + SEPARATOR + traceTypeToken[1];
          }
          traceIcon=DEFAULT_TRACE_ICON_PATH;
        }
 else {
          traceTypeOK=false;
        }
      }
      if (traceTypeOK) {
        resource.setPersistentProperty(TmfCommonConstants.TRACEBUNDLE,traceBundle);
        resource.setPersistentProperty(TmfCommonConstants.TRACETYPE,traceTypeId);
        resource.setPersistentProperty(TmfCommonConstants.TRACEICON,traceIcon);
      }
      TmfProjectElement tmfProject=TmfProjectRegistry.getProject(resource.getProject());
      if (tmfProject != null) {
        final TmfTraceFolder tracesFolder=tmfProject.getTracesFolder();
        tracesFolder.refresh();
        List<TmfTraceElement> traces=tracesFolder.getTraces();
        boolean found=false;
        for (        TmfTraceElement traceElement : traces) {
          if (traceElement.getName().equals(resource.getName())) {
            traceElement.refreshTraceType();
            found=true;
            break;
          }
        }
        if (!found) {
          TmfTraceElement te=new TmfTraceElement(traceToImport.getName(),resource,tracesFolder);
          te.refreshTraceType();
          traces=tracesFolder.getTraces();
          for (          TmfTraceElement traceElement : traces) {
            if (traceElement.getName().equals(resource.getName())) {
              traceElement.refreshTraceType();
              ITmfTrace tmfTrace=null;
              try {
                tmfTrace=traceElement.instantiateTrace();
                if (tmfTrace != null) {
                  validate=tmfTrace.validate(tmfProject.getResource(),traceElement.getLocation().getPath());
                }
 else {
                  return new Status(IStatus.ERROR,traceElement.getName(),""String_Node_Str"" + traceElement.getLocation().getPath());
                }
              }
  finally {
                if (tmfTrace != null) {
                  tmfTrace.dispose();
                }
              }
              break;
            }
          }
        }
      }
    }
 catch (    CoreException e) {
      Activator.getDefault().logError(Messages.BatchImportTraceWizardErrorImportingTraceResource + ""String_Node_Str"" + resource.getName(),e);
    }
  }
  return validate;
}",0.6374913852515507
92079,"private static void initializeOperation(ImportOperation op){
  op.setCreateContainerStructure(false);
  op.setOverwriteResources(false);
  op.setCreateLinks(true);
  op.setVirtualFolders(false);
}","private static void initializeOperation(ImportOperation op){
  op.setCreateContainerStructure(false);
  op.setOverwriteResources(false);
  op.setVirtualFolders(false);
}",0.926027397260274
92080,"/** 
 * Gets the folder in the resource (project)
 * @param targetFolder the folder to import to
 */
public void setTraceFolder(IFolder targetFolder){
  fTargetFolder=targetFolder;
}","/** 
 * Gets the folder in the resource (project)
 * @param targetFolder the folder to import to
 */
public void setTraceFolder(IFolder targetFolder){
  fTargetFolder=targetFolder;
  if (this.getContainer() != null && this.getContainer().getCurrentPage() != null) {
    this.getContainer().updateButtons();
  }
}",0.7368421052631579
92081,"private boolean importTraces(){
  boolean success=false;
  IOverwriteQuery overwriteQuery=new IOverwriteQuery(){
    @Override public String queryOverwrite(    String file){
      return fOverwrite ? IOverwriteQuery.ALL : IOverwriteQuery.NO_ALL;
    }
  }
;
  FileSystemStructureProvider fileSystemStructureProvider=FileSystemStructureProvider.INSTANCE;
  for (  FileAndName traceToImport : fTraces) {
    try {
      if (fLinked) {
        createLink(fTargetFolder,Path.fromOSString(traceToImport.getFile().getAbsolutePath()),traceToImport.getName());
        success=setTraceType(traceToImport).isOK();
      }
 else {
        List<File> subList=new ArrayList<File>();
        subList.add(traceToImport.getFile());
        IPath path=fTargetFolder.getFullPath().append(traceToImport.getName());
        final File parentFile=traceToImport.getFile().getParentFile();
        ImportOperation operation=new ImportOperation(path,parentFile,fileSystemStructureProvider,overwriteQuery,subList);
        operation.setContext(getShell());
        if (executeImportOperation(operation)) {
          setTraceType(traceToImport);
          success=true;
        }
      }
    }
 catch (    Exception e) {
    }
  }
  return success;
}","private boolean importTraces(){
  boolean success=false;
  IOverwriteQuery overwriteQuery=new IOverwriteQuery(){
    @Override public String queryOverwrite(    String file){
      return fOverwrite ? IOverwriteQuery.ALL : IOverwriteQuery.NO_ALL;
    }
  }
;
  FileSystemStructureProvider fileSystemStructureProvider=FileSystemStructureProvider.INSTANCE;
  for (  FileAndName traceToImport : fTraces) {
    try {
      if (fLinked) {
        createLink(fTargetFolder,Path.fromOSString(traceToImport.getFile().getAbsolutePath()),traceToImport.getName());
        success=setTraceType(traceToImport).isOK();
      }
 else {
        List<File> subList=new ArrayList<File>();
        IPath path=fTargetFolder.getFullPath();
        File parentFile=traceToImport.getFile();
        final boolean isFile=parentFile.isFile();
        if (isFile) {
          IFile resource=ResourcesPlugin.getWorkspace().getRoot().getFile(path.append(traceToImport.getName()));
          if (fOverwrite || !resource.exists()) {
            subList.add(parentFile);
            parentFile=parentFile.getParentFile();
            final FileInputStream source=new FileInputStream(traceToImport.getFile());
            if (resource.exists()) {
              resource.delete(IResource.FORCE,new NullProgressMonitor());
            }
            resource.create(source,true,new NullProgressMonitor());
            source.close();
            setTraceType(traceToImport);
            success=true;
          }
        }
 else {
          path=fTargetFolder.getFullPath().append(traceToImport.getName());
          File[] fileList=traceToImport.getFile().listFiles();
          for (          File child : fileList) {
            subList.add(child);
          }
          Collections.sort(subList,new Comparator<File>(){
            @Override public int compare(            File o1,            File o2){
              return o1.getAbsolutePath().compareTo(o2.getAbsolutePath());
            }
          }
);
          ImportOperation operation=new ImportOperation(path,parentFile,fileSystemStructureProvider,overwriteQuery,subList);
          operation.setContext(getShell());
          operation.setCreateContainerStructure(false);
          if (executeImportOperation(operation)) {
            setTraceType(traceToImport);
            success=true;
          }
        }
      }
    }
 catch (    Exception e) {
    }
  }
  return success;
}",0.6283356258596974
92082,"/** 
 * Returns the time graph control associated with this viewer.
 * @return the time graph control
 */
TimeGraphControl getTimeGraphControl(){
  return _stateCtrl;
}","/** 
 * Returns the time graph control associated with this viewer.
 * @return the time graph control
 * @since 2.0
 */
public TimeGraphControl getTimeGraphControl(){
  return _stateCtrl;
}",0.9411764705882352
92083,"/** 
 * Refresh the view
 */
public void refresh(){
  setInput(_stateCtrl.getTraces());
}","/** 
 * Refresh the view
 */
public void refresh(){
  setTimeRange(_stateCtrl.getTraces());
  _verticalScrollBar.setEnabled(true);
  refreshAllData(_stateCtrl.getTraces());
}",0.6615969581749049
92084,"/** 
 * Returns the time graph scale associated with this viewer.
 * @return the time graph scale
 */
TimeGraphScale getTimeGraphScale(){
  return _timeScaleCtrl;
}","/** 
 * Returns the time graph scale associated with this viewer.
 * @return the time graph scale
 * @since 2.0
 */
public TimeGraphScale getTimeGraphScale(){
  return _timeScaleCtrl;
}",0.9398280802292264
92085,"/** 
 * zoom in using single click
 */
public void zoomIn(){
  long _time0=_timeProvider.getTime0();
  long _time1=_timeProvider.getTime1();
  long _range=_time1 - _time0;
  long selTime=_timeProvider.getSelectedTime();
  if (selTime <= _time0 || selTime >= _time1) {
    selTime=(_time0 + _time1) / 2;
  }
  long time0=selTime - (long)((selTime - _time0) / zoomCoeff);
  long time1=selTime + (long)((_time1 - selTime) / zoomCoeff);
  long inaccuracy=(_timeProvider.getMaxTime() - _timeProvider.getMinTime()) - (time1 - time0);
  if (inaccuracy > 0 && inaccuracy < 100) {
    _timeProvider.setStartFinishTimeNotify(_timeProvider.getMinTime(),_timeProvider.getMaxTime());
    return;
  }
  long m=_timeProvider.getMinTimeInterval();
  if ((time1 - time0) < m) {
    time0=selTime - (selTime - _time0) * m / _range;
    time1=time0 + m;
  }
  _timeProvider.setStartFinishTimeNotify(time0,time1);
}","/** 
 * zoom in using single click
 */
public void zoomIn(){
  long _time0=_timeProvider.getTime0();
  long _time1=_timeProvider.getTime1();
  long _range=_time1 - _time0;
  if (_range == 0) {
    return;
  }
  long selTime=_timeProvider.getSelectedTime();
  if (selTime <= _time0 || selTime >= _time1) {
    selTime=(_time0 + _time1) / 2;
  }
  long time0=selTime - (long)((selTime - _time0) / zoomCoeff);
  long time1=selTime + (long)((_time1 - selTime) / zoomCoeff);
  long inaccuracy=(_timeProvider.getMaxTime() - _timeProvider.getMinTime()) - (time1 - time0);
  if (inaccuracy > 0 && inaccuracy < 100) {
    _timeProvider.setStartFinishTimeNotify(_timeProvider.getMinTime(),_timeProvider.getMaxTime());
    return;
  }
  long m=_timeProvider.getMinTimeInterval();
  if ((time1 - time0) < m) {
    time0=selTime - (selTime - _time0) * m / _range;
    time1=time0 + m;
  }
  _timeProvider.setStartFinishTimeNotify(time0,time1);
}",0.9797482211275316
92086,"/** 
 * Callback for the mouse-over tooltip
 * @param control The control object to use
 */
public void activateHoverHelp(final Control control){
  control.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (_tipShell != null && !_tipShell.isDisposed()) {
        _tipShell.dispose();
      }
    }
  }
);
  control.addMouseMoveListener(new MouseMoveListener(){
    @Override public void mouseMove(    MouseEvent e){
      if (_tipShell != null && !_tipShell.isDisposed()) {
        _tipShell.dispose();
      }
    }
  }
);
  control.addMouseTrackListener(new MouseTrackAdapter(){
    @Override public void mouseExit(    MouseEvent e){
      if (_tipShell != null && !_tipShell.isDisposed()) {
        Point pt=control.toDisplay(e.x,e.y);
        if (!_tipShell.getBounds().contains(pt)) {
          _tipShell.dispose();
        }
      }
    }
    private void addItem(    String name,    String value){
      Label nameLabel=new Label(_tipComposite,SWT.NO_FOCUS);
      nameLabel.setText(name);
      setupControl(nameLabel);
      Label separator=new Label(_tipComposite,SWT.NO_FOCUS | SWT.SEPARATOR | SWT.VERTICAL);
      GridData gd=new GridData(SWT.CENTER,SWT.CENTER,false,false);
      gd.heightHint=nameLabel.computeSize(SWT.DEFAULT,SWT.DEFAULT).y;
      separator.setLayoutData(gd);
      setupControl(separator);
      Label valueLabel=new Label(_tipComposite,SWT.NO_FOCUS);
      valueLabel.setText(value);
      setupControl(valueLabel);
    }
    private void fillValues(    Point pt,    TimeGraphControl timeGraphControl,    ITimeGraphEntry entry){
      if (entry == null) {
        return;
      }
      if (entry.hasTimeEvents()) {
        long currPixelTime=timeGraphControl.getTimeAtX(pt.x);
        long nextPixelTime=timeGraphControl.getTimeAtX(pt.x + 1);
        if (nextPixelTime == currPixelTime) {
          nextPixelTime++;
        }
        ITimeEvent currEvent=Utils.findEvent(entry,currPixelTime,0);
        ITimeEvent nextEvent=Utils.findEvent(entry,currPixelTime,1);
        if (currEvent == null || currEvent.getTime() < currPixelTime) {
          if (nextEvent != null && nextEvent.getTime() < nextPixelTime) {
            currEvent=nextEvent;
            currPixelTime=nextEvent.getTime();
          }
        }
        String stateTypeName=_utilImp.getStateTypeName(entry);
        String entryName=entry.getName();
        if (stateTypeName == null) {
          stateTypeName=_utilImp.getStateTypeName();
        }
        if (!entryName.isEmpty()) {
          addItem(stateTypeName,entry.getName());
        }
        if (currEvent == null) {
          return;
        }
        String state=_utilImp.getEventName(currEvent);
        if (state != null) {
          addItem(Messages.TmfTimeTipHandler_TRACE_STATE,state);
        }
        Map<String,String> eventAddOns=_utilImp.getEventHoverToolTipInfo(currEvent,currPixelTime);
        if (eventAddOns != null) {
          for (Iterator<String> iter=eventAddOns.keySet().iterator(); iter.hasNext(); ) {
            String message=iter.next();
            addItem(message,eventAddOns.get(message));
          }
        }
        long eventStartTime=-1;
        long eventDuration=-1;
        long eventEndTime=-1;
        eventStartTime=currEvent.getTime();
        eventDuration=currEvent.getDuration();
        if (eventDuration < 0 && nextEvent != null) {
          eventEndTime=nextEvent.getTime();
          eventDuration=eventEndTime - eventStartTime;
        }
 else {
          eventEndTime=eventStartTime + eventDuration;
        }
        Resolution res=Resolution.NANOSEC;
        TimeFormat tf=_timeDataProvider.getTimeFormat();
        if (tf == TimeFormat.CALENDAR) {
          addItem(Messages.TmfTimeTipHandler_TRACE_DATE,eventStartTime > -1 ? Utils.formatDate(eventStartTime) : ""String_Node_Str"");
        }
        if (eventDuration > 0) {
          addItem(Messages.TmfTimeTipHandler_TRACE_START_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,tf,res) : ""String_Node_Str"");
          addItem(Messages.TmfTimeTipHandler_TRACE_STOP_TIME,eventEndTime > -1 ? Utils.formatTime(eventEndTime,tf,res) : ""String_Node_Str"");
        }
 else {
          addItem(Messages.TmfTimeTipHandler_TRACE_EVENT_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,tf,res) : ""String_Node_Str"");
        }
        if (eventDuration > 0) {
          if (tf == TimeFormat.CALENDAR) {
            tf=TimeFormat.RELATIVE;
          }
          addItem(Messages.TmfTimeTipHandler_DURATION,eventDuration > -1 ? Utils.formatTime(eventDuration,tf,res) : ""String_Node_Str"");
        }
      }
    }
    @Override public void mouseHover(    MouseEvent event){
      if ((event.stateMask & SWT.BUTTON_MASK) != 0) {
        return;
      }
      Point pt=new Point(event.x,event.y);
      TimeGraphControl timeGraphControl=(TimeGraphControl)event.widget;
      createTooltipShell(timeGraphControl.getShell());
      ITimeGraphEntry entry=timeGraphControl.getEntry(pt);
      for (      Control child : _tipComposite.getChildren()) {
        child.dispose();
      }
      fillValues(pt,timeGraphControl,entry);
      if (_tipComposite.getChildren().length == 0) {
        return;
      }
      _tipShell.pack();
      _tipPosition=control.toDisplay(pt);
      _tipShell.pack();
      setHoverLocation(_tipShell,_tipPosition);
      _tipShell.setVisible(true);
    }
  }
);
}","/** 
 * Callback for the mouse-over tooltip
 * @param control The control object to use
 */
public void activateHoverHelp(final Control control){
  control.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (_tipShell != null && !_tipShell.isDisposed()) {
        _tipShell.dispose();
      }
    }
  }
);
  control.addMouseMoveListener(new MouseMoveListener(){
    @Override public void mouseMove(    MouseEvent e){
      if (_tipShell != null && !_tipShell.isDisposed()) {
        _tipShell.dispose();
      }
    }
  }
);
  control.addMouseTrackListener(new MouseTrackAdapter(){
    @Override public void mouseExit(    MouseEvent e){
      if (_tipShell != null && !_tipShell.isDisposed()) {
        Point pt=control.toDisplay(e.x,e.y);
        if (!_tipShell.getBounds().contains(pt)) {
          _tipShell.dispose();
        }
      }
    }
    private void addItem(    String name,    String value){
      Label nameLabel=new Label(_tipComposite,SWT.NO_FOCUS);
      nameLabel.setText(name);
      setupControl(nameLabel);
      Label separator=new Label(_tipComposite,SWT.NO_FOCUS | SWT.SEPARATOR | SWT.VERTICAL);
      GridData gd=new GridData(SWT.CENTER,SWT.CENTER,false,false);
      gd.heightHint=nameLabel.computeSize(SWT.DEFAULT,SWT.DEFAULT).y;
      separator.setLayoutData(gd);
      setupControl(separator);
      Label valueLabel=new Label(_tipComposite,SWT.NO_FOCUS);
      valueLabel.setText(value);
      setupControl(valueLabel);
    }
    private void fillValues(    Point pt,    TimeGraphControl timeGraphControl,    ITimeGraphEntry entry){
      if (entry == null) {
        return;
      }
      if (entry.hasTimeEvents()) {
        long currPixelTime=timeGraphControl.getTimeAtX(pt.x);
        long nextPixelTime=timeGraphControl.getTimeAtX(pt.x + 1);
        if (nextPixelTime == currPixelTime) {
          nextPixelTime++;
        }
        ITimeEvent currEvent=Utils.findEvent(entry,currPixelTime,0);
        ITimeEvent nextEvent=Utils.findEvent(entry,currPixelTime,1);
        if (currEvent == null || currEvent.getTime() < currPixelTime) {
          if (nextEvent != null && nextEvent.getTime() < nextPixelTime) {
            currEvent=nextEvent;
            currPixelTime=nextEvent.getTime();
          }
        }
        String stateTypeName=_utilImp.getStateTypeName(entry);
        String entryName=entry.getName();
        if (stateTypeName == null) {
          stateTypeName=_utilImp.getStateTypeName();
        }
        if (!entryName.isEmpty()) {
          addItem(stateTypeName,entry.getName());
        }
        if (currEvent == null || currEvent instanceof NullTimeEvent) {
          return;
        }
        String state=_utilImp.getEventName(currEvent);
        if (state != null) {
          addItem(Messages.TmfTimeTipHandler_TRACE_STATE,state);
        }
        Map<String,String> eventAddOns=_utilImp.getEventHoverToolTipInfo(currEvent,currPixelTime);
        if (eventAddOns != null) {
          for (Iterator<String> iter=eventAddOns.keySet().iterator(); iter.hasNext(); ) {
            String message=iter.next();
            addItem(message,eventAddOns.get(message));
          }
        }
        long eventStartTime=-1;
        long eventDuration=-1;
        long eventEndTime=-1;
        eventStartTime=currEvent.getTime();
        eventDuration=currEvent.getDuration();
        if (eventDuration < 0 && nextEvent != null) {
          eventEndTime=nextEvent.getTime();
          eventDuration=eventEndTime - eventStartTime;
        }
 else {
          eventEndTime=eventStartTime + eventDuration;
        }
        Resolution res=Resolution.NANOSEC;
        TimeFormat tf=_timeDataProvider.getTimeFormat();
        if (tf == TimeFormat.CALENDAR) {
          addItem(Messages.TmfTimeTipHandler_TRACE_DATE,eventStartTime > -1 ? Utils.formatDate(eventStartTime) : ""String_Node_Str"");
        }
        if (eventDuration > 0) {
          addItem(Messages.TmfTimeTipHandler_TRACE_START_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,tf,res) : ""String_Node_Str"");
          addItem(Messages.TmfTimeTipHandler_TRACE_STOP_TIME,eventEndTime > -1 ? Utils.formatTime(eventEndTime,tf,res) : ""String_Node_Str"");
        }
 else {
          addItem(Messages.TmfTimeTipHandler_TRACE_EVENT_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,tf,res) : ""String_Node_Str"");
        }
        if (eventDuration > 0) {
          if (tf == TimeFormat.CALENDAR) {
            tf=TimeFormat.RELATIVE;
          }
          addItem(Messages.TmfTimeTipHandler_DURATION,eventDuration > -1 ? Utils.formatTime(eventDuration,tf,res) : ""String_Node_Str"");
        }
      }
    }
    @Override public void mouseHover(    MouseEvent event){
      if ((event.stateMask & SWT.BUTTON_MASK) != 0) {
        return;
      }
      Point pt=new Point(event.x,event.y);
      TimeGraphControl timeGraphControl=(TimeGraphControl)event.widget;
      createTooltipShell(timeGraphControl.getShell());
      ITimeGraphEntry entry=timeGraphControl.getEntry(pt);
      for (      Control child : _tipComposite.getChildren()) {
        child.dispose();
      }
      fillValues(pt,timeGraphControl,entry);
      if (_tipComposite.getChildren().length == 0) {
        return;
      }
      _tipShell.pack();
      _tipPosition=control.toDisplay(pt);
      _tipShell.pack();
      setHoverLocation(_tipShell,_tipPosition);
      _tipShell.setVisible(true);
    }
  }
);
}",0.9965022091310752
92087,"private void fillValues(Point pt,TimeGraphControl timeGraphControl,ITimeGraphEntry entry){
  if (entry == null) {
    return;
  }
  if (entry.hasTimeEvents()) {
    long currPixelTime=timeGraphControl.getTimeAtX(pt.x);
    long nextPixelTime=timeGraphControl.getTimeAtX(pt.x + 1);
    if (nextPixelTime == currPixelTime) {
      nextPixelTime++;
    }
    ITimeEvent currEvent=Utils.findEvent(entry,currPixelTime,0);
    ITimeEvent nextEvent=Utils.findEvent(entry,currPixelTime,1);
    if (currEvent == null || currEvent.getTime() < currPixelTime) {
      if (nextEvent != null && nextEvent.getTime() < nextPixelTime) {
        currEvent=nextEvent;
        currPixelTime=nextEvent.getTime();
      }
    }
    String stateTypeName=_utilImp.getStateTypeName(entry);
    String entryName=entry.getName();
    if (stateTypeName == null) {
      stateTypeName=_utilImp.getStateTypeName();
    }
    if (!entryName.isEmpty()) {
      addItem(stateTypeName,entry.getName());
    }
    if (currEvent == null) {
      return;
    }
    String state=_utilImp.getEventName(currEvent);
    if (state != null) {
      addItem(Messages.TmfTimeTipHandler_TRACE_STATE,state);
    }
    Map<String,String> eventAddOns=_utilImp.getEventHoverToolTipInfo(currEvent,currPixelTime);
    if (eventAddOns != null) {
      for (Iterator<String> iter=eventAddOns.keySet().iterator(); iter.hasNext(); ) {
        String message=iter.next();
        addItem(message,eventAddOns.get(message));
      }
    }
    long eventStartTime=-1;
    long eventDuration=-1;
    long eventEndTime=-1;
    eventStartTime=currEvent.getTime();
    eventDuration=currEvent.getDuration();
    if (eventDuration < 0 && nextEvent != null) {
      eventEndTime=nextEvent.getTime();
      eventDuration=eventEndTime - eventStartTime;
    }
 else {
      eventEndTime=eventStartTime + eventDuration;
    }
    Resolution res=Resolution.NANOSEC;
    TimeFormat tf=_timeDataProvider.getTimeFormat();
    if (tf == TimeFormat.CALENDAR) {
      addItem(Messages.TmfTimeTipHandler_TRACE_DATE,eventStartTime > -1 ? Utils.formatDate(eventStartTime) : ""String_Node_Str"");
    }
    if (eventDuration > 0) {
      addItem(Messages.TmfTimeTipHandler_TRACE_START_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,tf,res) : ""String_Node_Str"");
      addItem(Messages.TmfTimeTipHandler_TRACE_STOP_TIME,eventEndTime > -1 ? Utils.formatTime(eventEndTime,tf,res) : ""String_Node_Str"");
    }
 else {
      addItem(Messages.TmfTimeTipHandler_TRACE_EVENT_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,tf,res) : ""String_Node_Str"");
    }
    if (eventDuration > 0) {
      if (tf == TimeFormat.CALENDAR) {
        tf=TimeFormat.RELATIVE;
      }
      addItem(Messages.TmfTimeTipHandler_DURATION,eventDuration > -1 ? Utils.formatTime(eventDuration,tf,res) : ""String_Node_Str"");
    }
  }
}","private void fillValues(Point pt,TimeGraphControl timeGraphControl,ITimeGraphEntry entry){
  if (entry == null) {
    return;
  }
  if (entry.hasTimeEvents()) {
    long currPixelTime=timeGraphControl.getTimeAtX(pt.x);
    long nextPixelTime=timeGraphControl.getTimeAtX(pt.x + 1);
    if (nextPixelTime == currPixelTime) {
      nextPixelTime++;
    }
    ITimeEvent currEvent=Utils.findEvent(entry,currPixelTime,0);
    ITimeEvent nextEvent=Utils.findEvent(entry,currPixelTime,1);
    if (currEvent == null || currEvent.getTime() < currPixelTime) {
      if (nextEvent != null && nextEvent.getTime() < nextPixelTime) {
        currEvent=nextEvent;
        currPixelTime=nextEvent.getTime();
      }
    }
    String stateTypeName=_utilImp.getStateTypeName(entry);
    String entryName=entry.getName();
    if (stateTypeName == null) {
      stateTypeName=_utilImp.getStateTypeName();
    }
    if (!entryName.isEmpty()) {
      addItem(stateTypeName,entry.getName());
    }
    if (currEvent == null || currEvent instanceof NullTimeEvent) {
      return;
    }
    String state=_utilImp.getEventName(currEvent);
    if (state != null) {
      addItem(Messages.TmfTimeTipHandler_TRACE_STATE,state);
    }
    Map<String,String> eventAddOns=_utilImp.getEventHoverToolTipInfo(currEvent,currPixelTime);
    if (eventAddOns != null) {
      for (Iterator<String> iter=eventAddOns.keySet().iterator(); iter.hasNext(); ) {
        String message=iter.next();
        addItem(message,eventAddOns.get(message));
      }
    }
    long eventStartTime=-1;
    long eventDuration=-1;
    long eventEndTime=-1;
    eventStartTime=currEvent.getTime();
    eventDuration=currEvent.getDuration();
    if (eventDuration < 0 && nextEvent != null) {
      eventEndTime=nextEvent.getTime();
      eventDuration=eventEndTime - eventStartTime;
    }
 else {
      eventEndTime=eventStartTime + eventDuration;
    }
    Resolution res=Resolution.NANOSEC;
    TimeFormat tf=_timeDataProvider.getTimeFormat();
    if (tf == TimeFormat.CALENDAR) {
      addItem(Messages.TmfTimeTipHandler_TRACE_DATE,eventStartTime > -1 ? Utils.formatDate(eventStartTime) : ""String_Node_Str"");
    }
    if (eventDuration > 0) {
      addItem(Messages.TmfTimeTipHandler_TRACE_START_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,tf,res) : ""String_Node_Str"");
      addItem(Messages.TmfTimeTipHandler_TRACE_STOP_TIME,eventEndTime > -1 ? Utils.formatTime(eventEndTime,tf,res) : ""String_Node_Str"");
    }
 else {
      addItem(Messages.TmfTimeTipHandler_TRACE_EVENT_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,tf,res) : ""String_Node_Str"");
    }
    if (eventDuration > 0) {
      if (tf == TimeFormat.CALENDAR) {
        tf=TimeFormat.RELATIVE;
      }
      addItem(Messages.TmfTimeTipHandler_DURATION,eventDuration > -1 ? Utils.formatTime(eventDuration,tf,res) : ""String_Node_Str"");
    }
  }
}",0.9933566433566432
92088,"private void stopmodule(DashboardModule module){
  IViewPart ivp=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(ActiveModuleBrowserView.ID);
  ActiveModuleBrowserView ambv=(ActiveModuleBrowserView)ivp;
  GraphTreeNode graphNode;
  DashboardGraphData graphData;
  if (ambv.isActive(module)) {
    ActiveModuleTreeNode node=ambv.remove(module);
    ActiveModuleData amd=(ActiveModuleData)node.getData();
    ivp=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(DashboardView.ID);
    DashboardView dv=(DashboardView)ivp;
    for (int i=0; i < node.getChildCount(); i++) {
      graphNode=(GraphTreeNode)node.getChildAt(i);
      graphData=(DashboardGraphData)graphNode.getData();
      if (null != graphData.adapter) {
        dv.removeGraph(graphData.adapter,module.getcategory());
        graphData.adapter=null;
      }
    }
    if (!amd.paused) {
      if (amd.cmd.isRunning())       amd.cmd.stop();
      amd.data=null;
    }
    dv.closeComposite(amd.module.category);
    amd=null;
    fireActionEvent();
  }
  setEnablement(false);
  buildEnablementChecks();
}","private void stopmodule(DashboardModule module){
  IViewPart ivp=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(ActiveModuleBrowserView.ID);
  ActiveModuleBrowserView ambv=(ActiveModuleBrowserView)ivp;
  GraphTreeNode graphNode;
  DashboardGraphData graphData;
  if (ambv.isActive(module)) {
    ActiveModuleTreeNode node=ambv.remove(module);
    ActiveModuleData amd=(ActiveModuleData)node.getData();
    ivp=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(DashboardView.ID);
    DashboardView dv=(DashboardView)ivp;
    for (int i=0; i < node.getChildCount(); i++) {
      graphNode=(GraphTreeNode)node.getChildAt(i);
      graphData=(DashboardGraphData)graphNode.getData();
      if (null != graphData.adapter) {
        dv.removeGraph(graphData.adapter,module.getcategory());
        graphData.adapter=null;
      }
    }
    if (!amd.paused) {
      if (amd.cmd.isRunning()) {
        amd.cmd.stop();
      }
      amd.data=null;
    }
    dv.closeComposite(amd.module.category);
    amd=null;
    fireActionEvent();
  }
  setEnablement(false);
  buildEnablementChecks();
}",0.9567519858781994
92089,"/** 
 * This method fires the event when a module is run to every listener that is registered.
 */
private static void fireActionEvent(){
  for (int i=0; i < listeners.size(); i++)   listeners.get(i).handleActionEvent();
}","/** 
 * This method fires the event when a module is run to every listener that is registered.
 */
private static void fireActionEvent(){
  for (int i=0; i < listeners.size(); i++) {
    listeners.get(i).handleActionEvent();
  }
}",0.9823008849557522
92090,"public void performCommand(String[] cmd,int fd){
  BufferedReader buff=null;
  BufferedReader bufftmp=null;
  try {
    Process proc=RuntimeProcessFactory.getFactory().exec(cmd,null);
switch (fd) {
case 1:
      buff=new BufferedReader(new InputStreamReader(proc.getInputStream()));
    bufftmp=new BufferedReader(new InputStreamReader(proc.getErrorStream()));
  break;
case 2:
buff=new BufferedReader(new InputStreamReader(proc.getErrorStream()));
bufftmp=new BufferedReader(new InputStreamReader(proc.getInputStream()));
break;
default :
buff=new BufferedReader(new InputStreamReader(proc.getInputStream()));
bufftmp=new BufferedReader(new InputStreamReader(proc.getErrorStream()));
}
StringBuffer strBuff=new StringBuffer();
String line=""String_Node_Str"";
while (bufftmp.readLine() != null) {
}
while ((line=buff.readLine()) != null) {
strBuff.append(line);
strBuff.append(""String_Node_Str"");
}
text=strBuff.toString();
}
 catch (IOException e) {
text=""String_Node_Str"";
}
 finally {
try {
if (buff != null) {
buff.close();
}
if (bufftmp != null) {
bufftmp.close();
}
}
 catch (IOException e) {
}
}
}","public void performCommand(String[] cmd,int fd){
  BufferedReader buffData=null;
  BufferedReader buffTmp=null;
  try {
    Process proc=RuntimeProcessFactory.getFactory().exec(cmd,null);
    StringBuffer strBuffData=new StringBuffer();
    StringBuffer strBuffTmp=new StringBuffer();
    String line=""String_Node_Str"";
switch (fd) {
case 1:
      buffData=new BufferedReader(new InputStreamReader(proc.getInputStream()));
    buffTmp=new BufferedReader(new InputStreamReader(proc.getErrorStream()));
  while ((line=buffData.readLine()) != null) {
    strBuffData.append(line);
    strBuffData.append(""String_Node_Str"");
  }
while ((line=buffTmp.readLine()) != null) {
  strBuffTmp.append(line);
  strBuffTmp.append(""String_Node_Str"");
}
break;
case 2:
buffData=new BufferedReader(new InputStreamReader(proc.getErrorStream()));
buffTmp=new BufferedReader(new InputStreamReader(proc.getInputStream()));
while ((line=buffTmp.readLine()) != null) {
strBuffTmp.append(line);
strBuffTmp.append(""String_Node_Str"");
}
while ((line=buffData.readLine()) != null) {
strBuffData.append(line);
strBuffData.append(""String_Node_Str"");
}
break;
default :
buffData=new BufferedReader(new InputStreamReader(proc.getInputStream()));
buffTmp=new BufferedReader(new InputStreamReader(proc.getErrorStream()));
while ((line=buffData.readLine()) != null) {
strBuffData.append(line);
strBuffData.append(""String_Node_Str"");
}
while ((line=buffTmp.readLine()) != null) {
strBuffTmp.append(line);
strBuffTmp.append(""String_Node_Str"");
}
}
text=strBuffData.toString();
}
 catch (IOException e) {
text=""String_Node_Str"";
}
 finally {
try {
if (buffData != null) {
buffData.close();
}
if (buffTmp != null) {
buffTmp.close();
}
}
 catch (IOException e) {
}
}
}",0.565677966101695
92091,"public static int openError(String title,Exception e){
  Status status=new Status(IStatus.ERROR,StructuresPlugin.PLUGIN_ID,title,e);
  StringWriter writer=new StringWriter();
  e.printStackTrace(new PrintWriter(writer));
  return ErrorDialog.openError(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),title,writer.toString(),status);
}","public static int openError(String message,Exception e){
  StringWriter writer=new StringWriter();
  e.printStackTrace(new PrintWriter(writer));
  Status status=new Status(IStatus.ERROR,StructuresPlugin.PLUGIN_ID,e.toString(),new Throwable(writer.toString()));
  return ErrorDialog.openError(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),message,message,status);
}",0.6284153005464481
92092,"@Override public void launch(ILaunchConfiguration config,String mode,ILaunch launch,IProgressMonitor monitor) throws CoreException {
  if (!PerfCore.checkPerfInPath()) {
    IStatus status=new Status(IStatus.ERROR,PerfPlugin.PLUGIN_ID,""String_Node_Str"");
    throw new CoreException(status);
  }
  IPath exePath=CDebugUtils.verifyProgramPath(config);
  String arguments[]=getProgramArgumentsArray(config);
  File wd=getWorkingDirectory(config);
  if (wd == null) {
    wd=new File(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  }
  IPath workingDir=Path.fromOSString(wd.toURI().getPath());
  PerfPlugin.getDefault().setWorkingDir(workingDir);
  if (config.getAttribute(PerfPlugin.ATTR_ShowStat,PerfPlugin.ATTR_ShowStat_default)) {
    int runCount=config.getAttribute(PerfPlugin.ATTR_StatRunCount,PerfPlugin.ATTR_StatRunCount_default);
    StringBuffer args=new StringBuffer();
    for (    String arg : arguments) {
      args.append(arg);
      args.append(""String_Node_Str"");
    }
    String title=renderProcessLabel(""String_Node_Str"" + exePath.toOSString() + ""String_Node_Str""+ args.toString()+ ""String_Node_Str""+ runCount+ ""String_Node_Str"");
    StatData sd=null;
    Object[] configEvents=config.getAttribute(PerfPlugin.ATTR_SelectedEvents,PerfPlugin.ATTR_SelectedEvents_default).toArray();
    String[] statEvents=new String[0];
    if (!config.getAttribute(PerfPlugin.ATTR_DefaultEvent,PerfPlugin.ATTR_DefaultEvent_default)) {
      statEvents=configEvents == null ? statEvents : Arrays.asList(configEvents).toArray(new String[]{});
    }
    sd=new StatData(title,exePath.toOSString(),arguments,runCount,statEvents);
    sd.parse();
    PerfPlugin.getDefault().setStatData(sd);
    StatView.refreshView();
  }
 else {
    ArrayList<String> command=new ArrayList<String>();
    command.addAll(Arrays.asList(PerfCore.getRecordString(config)));
    command.add(exePath.toOSString());
    command.addAll(Arrays.asList(arguments));
    String[] commandArray=command.toArray(new String[]{});
    boolean usePty=config.getAttribute(ICDTLaunchConfigurationConstants.ATTR_USE_TERMINAL,ICDTLaunchConfigurationConstants.USE_TERMINAL_DEFAULT);
    Process process;
    try {
      process=execute(commandArray,getEnvironment(config),wd,usePty);
      createNewProcess(launch,process,commandArray[0]);
      process.waitFor();
      PrintStream print=null;
      if (config.getAttribute(IDebugUIConstants.ATTR_CAPTURE_IN_CONSOLE,true)) {
        ConsolePlugin plugin=ConsolePlugin.getDefault();
        IConsoleManager conMan=plugin.getConsoleManager();
        IConsole[] existing=conMan.getConsoles();
        IOConsole binaryOutCons=null;
        for (        IConsole x : existing) {
          if (x.getName().contains(renderProcessLabel(commandArray[0]))) {
            binaryOutCons=(IOConsole)x;
          }
        }
        if ((binaryOutCons == null) && (existing.length != 0)) {
          if (existing[existing.length - 1] instanceof IOConsole)           binaryOutCons=(IOConsole)existing[existing.length - 1];
        }
        OutputStream outputTo;
        if (binaryOutCons != null) {
          outputTo=binaryOutCons.newOutputStream();
          print=new PrintStream(outputTo);
          for (int i=0; i < commandArray.length; i++) {
            print.print(commandArray[i] + ""String_Node_Str"");
          }
          print.println();
          print.println(""String_Node_Str"");
        }
      }
      PerfCore.Report(config,getEnvironment(config),workingDir,monitor,null,print);
      PerfCore.RefreshView(renderProcessLabel(exePath.toOSString()));
      if (config.getAttribute(PerfPlugin.ATTR_ShowSourceDisassembly,PerfPlugin.ATTR_ShowSourceDisassembly_default)) {
        String title=renderProcessLabel(workingDir + ""String_Node_Str"");
        SourceDisassemblyData sdData=new SourceDisassemblyData(title,workingDir);
        sdData.parse();
        PerfPlugin.getDefault().setSourceDisassemblyData(sdData);
        SourceDisassemblyView.refreshView();
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","@Override public void launch(ILaunchConfiguration config,String mode,ILaunch launch,IProgressMonitor monitor) throws CoreException {
  if (!PerfCore.checkPerfInPath()) {
    IStatus status=new Status(IStatus.ERROR,PerfPlugin.PLUGIN_ID,""String_Node_Str"");
    throw new CoreException(status);
  }
  IPath exePath=CDebugUtils.verifyProgramPath(config);
  String arguments[]=getProgramArgumentsArray(config);
  File wd=getWorkingDirectory(config);
  if (wd == null) {
    wd=new File(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  }
  IPath workingDir=Path.fromOSString(wd.toURI().getPath());
  PerfPlugin.getDefault().setWorkingDir(workingDir);
  if (config.getAttribute(PerfPlugin.ATTR_ShowStat,PerfPlugin.ATTR_ShowStat_default)) {
    int runCount=config.getAttribute(PerfPlugin.ATTR_StatRunCount,PerfPlugin.ATTR_StatRunCount_default);
    StringBuffer args=new StringBuffer();
    for (    String arg : arguments) {
      args.append(arg);
      args.append(""String_Node_Str"");
    }
    String title=renderProcessLabel(""String_Node_Str"" + exePath.toOSString() + ""String_Node_Str""+ args.toString()+ ""String_Node_Str""+ runCount+ ""String_Node_Str"");
    StatData sd=null;
    List<String> configEvents=config.getAttribute(PerfPlugin.ATTR_SelectedEvents,PerfPlugin.ATTR_SelectedEvents_default);
    String[] statEvents=new String[]{};
    if (!config.getAttribute(PerfPlugin.ATTR_DefaultEvent,PerfPlugin.ATTR_DefaultEvent_default)) {
      statEvents=(configEvents == null) ? statEvents : configEvents.toArray(new String[]{});
    }
    sd=new StatData(title,exePath.toOSString(),arguments,runCount,statEvents);
    sd.parse();
    PerfPlugin.getDefault().setStatData(sd);
    StatView.refreshView();
  }
 else {
    ArrayList<String> command=new ArrayList<String>();
    command.addAll(Arrays.asList(PerfCore.getRecordString(config)));
    command.add(exePath.toOSString());
    command.addAll(Arrays.asList(arguments));
    String[] commandArray=command.toArray(new String[]{});
    boolean usePty=config.getAttribute(ICDTLaunchConfigurationConstants.ATTR_USE_TERMINAL,ICDTLaunchConfigurationConstants.USE_TERMINAL_DEFAULT);
    Process process;
    try {
      process=execute(commandArray,getEnvironment(config),wd,usePty);
      createNewProcess(launch,process,commandArray[0]);
      process.waitFor();
      PrintStream print=null;
      if (config.getAttribute(IDebugUIConstants.ATTR_CAPTURE_IN_CONSOLE,true)) {
        ConsolePlugin plugin=ConsolePlugin.getDefault();
        IConsoleManager conMan=plugin.getConsoleManager();
        IConsole[] existing=conMan.getConsoles();
        IOConsole binaryOutCons=null;
        for (        IConsole x : existing) {
          if (x.getName().contains(renderProcessLabel(commandArray[0]))) {
            binaryOutCons=(IOConsole)x;
          }
        }
        if ((binaryOutCons == null) && (existing.length != 0)) {
          if (existing[existing.length - 1] instanceof IOConsole)           binaryOutCons=(IOConsole)existing[existing.length - 1];
        }
        OutputStream outputTo;
        if (binaryOutCons != null) {
          outputTo=binaryOutCons.newOutputStream();
          print=new PrintStream(outputTo);
          for (int i=0; i < commandArray.length; i++) {
            print.print(commandArray[i] + ""String_Node_Str"");
          }
          print.println();
          print.println(""String_Node_Str"");
        }
      }
      PerfCore.Report(config,getEnvironment(config),workingDir,monitor,null,print);
      PerfCore.RefreshView(renderProcessLabel(exePath.toOSString()));
      if (config.getAttribute(PerfPlugin.ATTR_ShowSourceDisassembly,PerfPlugin.ATTR_ShowSourceDisassembly_default)) {
        String title=renderProcessLabel(workingDir + ""String_Node_Str"");
        SourceDisassemblyData sdData=new SourceDisassemblyData(title,workingDir);
        sdData.parse();
        PerfPlugin.getDefault().setSourceDisassemblyData(sdData);
        SourceDisassemblyView.refreshView();
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}",0.9938544739429696
92093,"/** 
 * Parse annotation file for a dso given a symbol
 * @param monitor monitor
 * @param input annotation file input stream
 * @param workingDir working directory configuration
 * @param currentDso dso
 * @param currentSym symbol
 */
public static void parseAnnotation(IProgressMonitor monitor,BufferedReader input,IPath workingDir,PMDso currentDso,PMSymbol currentSym){
  if (monitor != null && monitor.isCanceled()) {
    return;
  }
  boolean grabBlock=false;
  boolean blockStarted=false;
  String dsoName, lineRef;
  String line=null;
  String items[];
  float percent;
  try {
    while ((line=input.readLine()) != null) {
      if (line.startsWith(""String_Node_Str"")) {
        grabBlock=true;
        dsoName=line.replace(""String_Node_Str"",""String_Node_Str"");
        blockStarted=false;
        if ((workingDir != null) && (dsoName.startsWith(""String_Node_Str""))) {
          if (workingDir.toOSString().endsWith(""String_Node_Str"")) {
            dsoName=workingDir.toOSString() + dsoName.substring(2);
          }
 else {
            dsoName=workingDir.toOSString() + dsoName.substring(1);
          }
        }
        currentDso.setPath(dsoName);
      }
 else       if (line.startsWith(""String_Node_Str"")) {
        if (blockStarted) {
          blockStarted=false;
          grabBlock=false;
        }
 else {
          blockStarted=true;
        }
      }
 else       if (grabBlock && blockStarted) {
        items=line.trim().split(""String_Node_Str"");
        if (items.length != 2) {
          continue;
        }
        percent=Float.parseFloat(items[0]);
        lineRef=items[1];
        items=lineRef.split(""String_Node_Str"");
        if (currentDso == null) {
          break;
        }
 else {
          currentSym.addPercent(Integer.parseInt(items[1]),percent);
          if (currentSym.getParent().getName().equals(PerfPlugin.STRINGS_UnfiledSymbols)) {
            currentSym.getParent().removeChild(currentSym);
            currentDso.getFile(items[0]).addChild(currentSym);
          }
 else           if (!((PMFile)currentSym.getParent()).getPath().equals(items[0])) {
            currentSym.markConflict();
            currentSym.getParent().removeChild(currentSym);
            currentDso.getFile(PerfPlugin.STRINGS_MultipleFilesForSymbol).addChild(currentSym);
          }
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * Parse annotation file for a dso given a symbol
 * @param monitor monitor
 * @param input annotation file input stream
 * @param workingDir working directory configuration
 * @param currentDso dso
 * @param currentSym symbol
 */
public static void parseAnnotation(IProgressMonitor monitor,BufferedReader input,IPath workingDir,PMDso currentDso,PMSymbol currentSym){
  if (monitor != null && monitor.isCanceled()) {
    return;
  }
  boolean grabBlock=false;
  boolean blockStarted=false;
  String dsoName, lineRef;
  String line=null;
  String items[];
  float percent;
  try {
    while ((line=input.readLine()) != null) {
      if (line.startsWith(""String_Node_Str"")) {
        grabBlock=true;
        dsoName=line.replace(""String_Node_Str"",""String_Node_Str"");
        blockStarted=false;
        if ((workingDir != null) && (dsoName.startsWith(""String_Node_Str""))) {
          if (workingDir.toOSString().endsWith(""String_Node_Str"")) {
            dsoName=workingDir.toOSString() + dsoName.substring(2);
          }
 else {
            dsoName=workingDir.toOSString() + dsoName.substring(1);
          }
        }
        currentDso.setPath(dsoName);
      }
 else       if (line.startsWith(""String_Node_Str"")) {
        if (blockStarted) {
          blockStarted=false;
          grabBlock=false;
        }
 else {
          blockStarted=true;
        }
      }
 else       if (grabBlock && blockStarted) {
        items=line.trim().split(""String_Node_Str"");
        if (items.length != 2) {
          continue;
        }
        percent=Float.parseFloat(items[0]);
        lineRef=items[1];
        items=lineRef.split(""String_Node_Str"");
        if (currentDso == null) {
          break;
        }
 else {
          int lineNum=-1;
          try {
            lineNum=Integer.parseInt(items[1]);
          }
 catch (          NumberFormatException e) {
          }
          currentSym.addPercent(lineNum,percent);
          if (currentSym.getParent().getName().equals(PerfPlugin.STRINGS_UnfiledSymbols)) {
            currentSym.getParent().removeChild(currentSym);
            currentDso.getFile(items[0]).addChild(currentSym);
          }
 else           if (!((PMFile)currentSym.getParent()).getPath().equals(items[0])) {
            currentSym.markConflict();
            currentSym.getParent().removeChild(currentSym);
            currentDso.getFile(PerfPlugin.STRINGS_MultipleFilesForSymbol).addChild(currentSym);
          }
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.963038180341186
92094,"@Override protected URI oprofileWorkingDirURI(){
  return oprofileProject().getLocationURI();
}","@Override protected URI oprofileWorkingDirURI(ILaunchConfiguration config){
  return oprofileProject().getLocationURI();
}",0.8755760368663594
92095,"@Override public void launch(ILaunchConfiguration config,String mode,ILaunch launch,IProgressMonitor monitor) throws CoreException {
  this.config=config;
  Oprofile.OprofileProject.setProject(getProject());
  LaunchOptions options=new LaunchOptions();
  options.loadConfiguration(config);
  IPath exePath=getExePath(config);
  options.setBinaryImage(exePath.toOSString());
  OprofileDaemonEvent[] daemonEvents=null;
  if (!config.getAttribute(OprofileLaunchPlugin.ATTR_USE_DEFAULT_EVENT,false)) {
    OprofileCounter[] counters=oprofileCounters(config);
    ArrayList<OprofileDaemonEvent> events=new ArrayList<OprofileDaemonEvent>();
    for (int i=0; i < counters.length; ++i) {
      if (counters[i].getEnabled())       events.add(counters[i].getDaemonEvent());
    }
    daemonEvents=new OprofileDaemonEvent[events.size()];
    events.toArray(daemonEvents);
  }
  if (!preExec(options,daemonEvents,launch))   return;
  IRemoteCommandLauncher launcher=RemoteProxyManager.getInstance().getLauncher(oprofileProject());
  IPath workingDirPath=new Path(oprofileWorkingDirURI().getPath());
  String arguments[]=getProgramArgumentsArray(config);
  Process process=null;
  for (int i=0; i < options.getExecutionsNumber(); i++) {
    process=launcher.execute(exePath,arguments,getEnvironment(config),workingDirPath,monitor);
    DebugPlugin.newProcess(launch,process,renderProcessLabel(exePath.toOSString()));
    try {
      process.waitFor();
    }
 catch (    InterruptedException e) {
      process.destroy();
      Status status=new Status(IStatus.ERROR,OprofileLaunchPlugin.PLUGIN_ID,OprofileLaunchMessages.getString(""String_Node_Str""));
      throw new CoreException(status);
    }
  }
  postExec(options,daemonEvents,process);
}","@Override public void launch(ILaunchConfiguration config,String mode,ILaunch launch,IProgressMonitor monitor) throws CoreException {
  this.config=config;
  Oprofile.OprofileProject.setProject(getProject());
  LaunchOptions options=new LaunchOptions();
  options.loadConfiguration(config);
  IPath exePath=getExePath(config);
  options.setBinaryImage(exePath.toOSString());
  OprofileDaemonEvent[] daemonEvents=null;
  if (!config.getAttribute(OprofileLaunchPlugin.ATTR_USE_DEFAULT_EVENT,false)) {
    OprofileCounter[] counters=oprofileCounters(config);
    ArrayList<OprofileDaemonEvent> events=new ArrayList<OprofileDaemonEvent>();
    for (int i=0; i < counters.length; ++i) {
      if (counters[i].getEnabled())       events.add(counters[i].getDaemonEvent());
    }
    daemonEvents=new OprofileDaemonEvent[events.size()];
    events.toArray(daemonEvents);
  }
  if (!preExec(options,daemonEvents,launch))   return;
  IRemoteCommandLauncher launcher=RemoteProxyManager.getInstance().getLauncher(oprofileProject());
  IPath workingDirPath=new Path(oprofileWorkingDirURI(config).getPath());
  String arguments[]=getProgramArgumentsArray(config);
  Process process=null;
  for (int i=0; i < options.getExecutionsNumber(); i++) {
    process=launcher.execute(exePath,arguments,getEnvironment(config),workingDirPath,monitor);
    DebugPlugin.newProcess(launch,process,renderProcessLabel(exePath.toOSString()));
    try {
      process.waitFor();
    }
 catch (    InterruptedException e) {
      process.destroy();
      Status status=new Status(IStatus.ERROR,OprofileLaunchPlugin.PLUGIN_ID,OprofileLaunchMessages.getString(""String_Node_Str""));
      throw new CoreException(status);
    }
  }
  postExec(options,daemonEvents,process);
}",0.9982698961937716
92096,"/** 
 * Return the URI of the current working directory from the current project's file proxy.
 * @return URI URI of the working directory.
 * @throws CoreException
 */
protected URI oprofileWorkingDirURI() throws CoreException {
  IRemoteFileProxy proxy=RemoteProxyManager.getInstance().getFileProxy(oprofileProject());
  return proxy.getWorkingDir();
}","/** 
 * Return the URI of the current working directory from the current project's file proxy.
 * @return URI URI of the working directory.
 * @throws CoreException
 */
protected URI oprofileWorkingDirURI(ILaunchConfiguration config) throws CoreException {
  File workingDirectory=this.getWorkingDirectory(config);
  if (workingDirectory == null) {
    return getProject().getLocationURI();
  }
 else {
    URI uri=null;
    try {
      uri=new URI(workingDirectory.getAbsolutePath());
    }
 catch (    URISyntaxException e) {
      Status status=new Status(IStatus.ERROR,OprofileCorePlugin.getId(),OprofileLaunchMessages.getString(""String_Node_Str""));
      throw new CoreException(status);
    }
    return uri;
  }
}",0.4711359404096834
92097,"/** 
 * Given data, extract <tapset>
 * @param data - hint data
 * @return
 */
private String getTapset(String data){
  int i=data.indexOf('.');
  if (i < 0)   throw new StringIndexOutOfBoundsException();
  return data.substring(0,data.indexOf('.'));
}","/** 
 * Given data, extract <tapset>
 * @param data - hint data
 * @return
 */
private String getTapset(String data){
  int i=data.indexOf('.');
  if (i < 0) {
    return data;
  }
  return data.substring(0,data.indexOf('.'));
}",0.8625
92098,"@Override public synchronized void resume(){
  super.resume();
  monitor.notifyAll();
}","@Override public synchronized void resume(){
  super.resume();
synchronized (monitor) {
    monitor.notifyAll();
  }
}",0.848780487804878
92099,"/** 
 * Test method for   {@link org.eclipse.linuxtools.internal.tmf.core.request.TmfRequestExecutor#execute(java.lang.Runnable)}.
 */
public void testExecute(){
  final long TIMEOUT=100;
  MyProvider provider=new MyProvider();
  MyRequest request1=new MyRequest(ITmfRequest.TmfRequestPriority.NORMAL,Integer.MAX_VALUE / 10,reqmon1);
  MyThread thread1=new MyThread(provider,request1,thrmon1);
  MyRequest request2=new MyRequest(ITmfRequest.TmfRequestPriority.HIGH,Integer.MAX_VALUE / 100,reqmon2);
  MyThread thread2=new MyThread(provider,request2,thrmon2);
  MyRequest request3=new MyRequest(ITmfRequest.TmfRequestPriority.HIGH,Integer.MAX_VALUE / 100,reqmon3);
  MyThread thread3=new MyThread(provider,request3,thrmon3);
  fExecutor.execute(thread1);
synchronized (reqmon1) {
    try {
      reqmon1.wait();
      assertTrue(""String_Node_Str"",thread1.isRunning());
    }
 catch (    InterruptedException e) {
    }
  }
  fExecutor.execute(thread2);
synchronized (reqmon2) {
    try {
      reqmon2.wait();
      assertFalse(""String_Node_Str"",thread1.isRunning());
      assertTrue(""String_Node_Str"",thread2.isRunning());
    }
 catch (    InterruptedException e) {
    }
  }
  try {
synchronized (reqmon2) {
      reqmon2.wait();
      assertTrue(""String_Node_Str"",thread2.isCompleted());
    }
synchronized (thrmon1) {
      thrmon1.wait(TIMEOUT);
      assertTrue(""String_Node_Str"",thread1.isRunning());
    }
  }
 catch (  InterruptedException e) {
  }
  fExecutor.execute(thread3);
synchronized (reqmon3) {
    try {
      reqmon3.wait();
      assertFalse(""String_Node_Str"",thread1.isRunning());
      assertTrue(""String_Node_Str"",thread3.isRunning());
    }
 catch (    InterruptedException e) {
    }
  }
  try {
synchronized (reqmon3) {
      reqmon3.wait();
      assertTrue(""String_Node_Str"",thread3.isCompleted());
    }
synchronized (thrmon1) {
      thrmon1.wait(TIMEOUT);
      assertTrue(""String_Node_Str"",thread1.isRunning());
    }
  }
 catch (  InterruptedException e) {
  }
  try {
synchronized (reqmon1) {
      reqmon1.wait();
      assertTrue(""String_Node_Str"",thread1.isCompleted());
    }
  }
 catch (  InterruptedException e) {
  }
}","/** 
 * Test method for   {@link org.eclipse.linuxtools.internal.tmf.core.request.TmfRequestExecutor#execute(java.lang.Runnable)}.
 */
public void testExecute(){
  final long TIMEOUT=100;
  final long ONE_MINUTE=60 * 1000;
  MyProvider provider=new MyProvider();
  MyRequest request1=new MyRequest(ITmfRequest.TmfRequestPriority.NORMAL,Integer.MAX_VALUE / 10,reqmon1);
  MyThread thread1=new MyThread(provider,request1,thrmon1);
  MyRequest request2=new MyRequest(ITmfRequest.TmfRequestPriority.HIGH,Integer.MAX_VALUE / 100,reqmon2);
  MyThread thread2=new MyThread(provider,request2,thrmon2);
  MyRequest request3=new MyRequest(ITmfRequest.TmfRequestPriority.HIGH,Integer.MAX_VALUE / 100,reqmon3);
  MyThread thread3=new MyThread(provider,request3,thrmon3);
synchronized (reqmon1) {
    try {
      fExecutor.execute(thread1);
      reqmon1.wait(ONE_MINUTE);
      assertTrue(""String_Node_Str"",thread1.isRunning());
    }
 catch (    InterruptedException e) {
    }
  }
synchronized (reqmon2) {
    try {
      fExecutor.execute(thread2);
      reqmon2.wait(ONE_MINUTE);
      assertFalse(""String_Node_Str"",thread1.isRunning());
      assertTrue(""String_Node_Str"",thread2.isRunning());
    }
 catch (    InterruptedException e) {
    }
  }
  try {
synchronized (reqmon2) {
      reqmon2.wait(ONE_MINUTE);
      assertTrue(""String_Node_Str"",thread2.isCompleted());
    }
synchronized (thrmon1) {
      thrmon1.wait(TIMEOUT);
      assertTrue(""String_Node_Str"",thread1.isRunning());
    }
  }
 catch (  InterruptedException e) {
  }
synchronized (reqmon3) {
    try {
      fExecutor.execute(thread3);
      reqmon3.wait(ONE_MINUTE);
      assertFalse(""String_Node_Str"",thread1.isRunning());
      assertTrue(""String_Node_Str"",thread3.isRunning());
    }
 catch (    InterruptedException e) {
    }
  }
  try {
synchronized (reqmon3) {
      reqmon3.wait(ONE_MINUTE);
      assertTrue(""String_Node_Str"",thread3.isCompleted());
    }
synchronized (thrmon1) {
      thrmon1.wait(TIMEOUT);
      assertTrue(""String_Node_Str"",thread1.isRunning());
    }
  }
 catch (  InterruptedException e) {
  }
  try {
synchronized (reqmon1) {
      reqmon1.wait(ONE_MINUTE);
      assertTrue(""String_Node_Str"",thread1.isCompleted());
    }
  }
 catch (  InterruptedException e) {
  }
}",0.9230074508918492
92100,"@Override public void run(){
  TmfCoreTracer.traceRequest(fRequest,""String_Node_Str"" + fProvider.getName());
  fRequest.start();
  long nbRequested=fRequest.getNbRequested();
  int nbRead=0;
  isCompleted=false;
  ITmfContext context=fProvider.armRequest(fRequest);
  if (context == null) {
    fRequest.cancel();
    return;
  }
  try {
    ITmfEvent event=fProvider.getNext(context);
    TmfCoreTracer.traceRequest(fRequest,""String_Node_Str"");
    while (event != null && !fProvider.isCompleted(fRequest,event,nbRead)) {
      if (isPaused) {
        try {
          while (isPaused) {
synchronized (object) {
              object.wait();
            }
          }
        }
 catch (        InterruptedException e) {
        }
      }
      TmfCoreTracer.traceEvent(fProvider,fRequest,event);
      fRequest.handleEvent(event);
      if (++nbRead < nbRequested) {
        event=fProvider.getNext(context);
      }
    }
    isCompleted=true;
    if (fRequest.isCancelled()) {
      fRequest.cancel();
    }
 else {
      fRequest.done();
    }
  }
 catch (  Exception e) {
    fRequest.fail();
  }
  context.dispose();
}","@Override public void run(){
  TmfCoreTracer.traceRequest(fRequest,""String_Node_Str"" + fProvider.getName());
  fRequest.start();
  long nbRequested=fRequest.getNbRequested();
  int nbRead=0;
  isCompleted=false;
  ITmfContext context=fProvider.armRequest(fRequest);
  if (context == null) {
    fRequest.cancel();
    return;
  }
  try {
    ITmfEvent event=fProvider.getNext(context);
    TmfCoreTracer.traceRequest(fRequest,""String_Node_Str"");
    while (event != null && !fProvider.isCompleted(fRequest,event,nbRead)) {
      while (isPaused) {
        try {
synchronized (object) {
            if (isPaused) {
              object.wait();
            }
          }
        }
 catch (        InterruptedException e) {
        }
      }
      TmfCoreTracer.traceEvent(fProvider,fRequest,event);
      fRequest.handleEvent(event);
      if (++nbRead < nbRequested) {
        event=fProvider.getNext(context);
      }
    }
    isCompleted=true;
    if (fRequest.isCancelled()) {
      fRequest.cancel();
    }
 else {
      fRequest.done();
    }
  }
 catch (  Exception e) {
    fRequest.fail();
  }
  context.dispose();
}",0.9634906500445236
92101,"@Override public void notifyParent(ITmfRequest child){
  if (--fNbSubRequests <= 0) {
    done();
    super.notifyParent(this);
  }
}","@Override public synchronized void notifyParent(ITmfRequest child){
  if (--fNbSubRequests <= 0) {
    done();
    super.notifyParent(this);
  }
}",0.953405017921147
92102,"/** 
 * @param pattern the new default time pattern
 */
public static void setDefaultTimeFormat(final String pattern){
  fDefaultTimePattern=pattern;
  fDefaultTimeFormat=new TmfTimestampFormat(fDefaultTimePattern);
  TmfSignalManager.dispatchSignal(new TmfTimestampFormatUpdateSignal(null));
}","/** 
 * @param pattern the new default time pattern
 */
public static synchronized void setDefaultTimeFormat(final String pattern){
  fDefaultTimePattern=pattern;
  fDefaultTimeFormat=new TmfTimestampFormat(fDefaultTimePattern);
  TmfSignalManager.dispatchSignal(new TmfTimestampFormatUpdateSignal(null));
}",0.978369384359401
92103,"/** 
 * @return the default time format pattern
 */
public static TmfTimestampFormat getDefaulTimeFormat(){
  if (fDefaultTimeFormat == null) {
    fDefaultTimeFormat=new TmfTimestampFormat(DEFAULT_TIME_PATTERN);
  }
  return fDefaultTimeFormat;
}","/** 
 * @return the default time format pattern
 */
public static synchronized TmfTimestampFormat getDefaulTimeFormat(){
  if (fDefaultTimeFormat == null) {
    fDefaultTimeFormat=new TmfTimestampFormat(DEFAULT_TIME_PATTERN);
  }
  return fDefaultTimeFormat;
}",0.9743589743589745
92104,"/** 
 * @return the default interval format pattern
 */
public static TmfTimestampFormat getDefaulIntervalFormat(){
  if (fDefaultIntervalFormat == null) {
    fDefaultIntervalFormat=new TmfTimestampFormat(DEFAULT_INTERVAL_PATTERN);
  }
  return fDefaultIntervalFormat;
}","/** 
 * @return the default interval format pattern
 */
public static synchronized TmfTimestampFormat getDefaulIntervalFormat(){
  if (fDefaultIntervalFormat == null) {
    fDefaultIntervalFormat=new TmfTimestampFormat(DEFAULT_INTERVAL_PATTERN);
  }
  return fDefaultIntervalFormat;
}",0.9765765765765766
92105,"/** 
 * @param pattern the new default interval pattern
 */
public static void setDefaultIntervalFormat(final String pattern){
  fDefaultIntervalPattern=pattern;
  fDefaultIntervalFormat=new TmfTimestampFormat(fDefaultIntervalPattern);
  TmfSignalManager.dispatchSignal(new TmfTimestampFormatUpdateSignal(null));
}","/** 
 * @param pattern the new default interval pattern
 */
public static synchronized void setDefaultIntervalFormat(final String pattern){
  fDefaultIntervalPattern=pattern;
  fDefaultIntervalFormat=new TmfTimestampFormat(fDefaultIntervalPattern);
  TmfSignalManager.dispatchSignal(new TmfTimestampFormatUpdateSignal(null));
}",0.9797191887675508
92106,"/** 
 * Handler for the range sync signal
 * @param signal The signal that's received
 */
@TmfSignalHandler public void synchToRange(final TmfRangeSynchSignal signal){
  if (signal.getSource() == this || fTrace == null) {
    return;
  }
  final long startTime=signal.getCurrentRange().getStartTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
  final long endTime=signal.getCurrentRange().getEndTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
  final long time=signal.getCurrentTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphCombo.isDisposed()) {
        return;
      }
      fTimeGraphCombo.getTimeGraphViewer().setStartFinishTime(startTime,endTime);
      fTimeGraphCombo.getTimeGraphViewer().setSelectedTime(time,false);
      startZoomThread(startTime,endTime);
    }
  }
);
}","/** 
 * Handler for the range sync signal
 * @param signal The signal that's received
 */
@TmfSignalHandler public void synchToRange(final TmfRangeSynchSignal signal){
  if (signal.getSource() == this || fTrace == null) {
    return;
  }
  if (signal.getCurrentRange().getIntersection(fTrace.getTimeRange()) == null) {
    return;
  }
  final long startTime=signal.getCurrentRange().getStartTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
  final long endTime=signal.getCurrentRange().getEndTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
  final long time=signal.getCurrentTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphCombo.isDisposed()) {
        return;
      }
      fTimeGraphCombo.getTimeGraphViewer().setStartFinishTime(startTime,endTime);
      fTimeGraphCombo.getTimeGraphViewer().setSelectedTime(time,false);
      startZoomThread(startTime,endTime);
    }
  }
);
}",0.9503328213005632
92107,"/** 
 * Handler for the RangeSynch signal
 * @param signal The incoming signal
 */
@TmfSignalHandler public void synchToRange(final TmfRangeSynchSignal signal){
  if (signal.getSource() == this || fTrace == null) {
    return;
  }
  final long startTime=signal.getCurrentRange().getStartTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
  final long endTime=signal.getCurrentRange().getEndTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
  final long time=signal.getCurrentTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphViewer.getControl().isDisposed()) {
        return;
      }
      fTimeGraphViewer.setStartFinishTime(startTime,endTime);
      fTimeGraphViewer.setSelectedTime(time,false);
      startZoomThread(startTime,endTime);
    }
  }
);
}","/** 
 * Handler for the RangeSynch signal
 * @param signal The incoming signal
 */
@TmfSignalHandler public void synchToRange(final TmfRangeSynchSignal signal){
  if (signal.getSource() == this || fTrace == null) {
    return;
  }
  if (signal.getCurrentRange().getIntersection(fTrace.getTimeRange()) == null) {
    return;
  }
  final long startTime=signal.getCurrentRange().getStartTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
  final long endTime=signal.getCurrentRange().getEndTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
  final long time=signal.getCurrentTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphViewer.getControl().isDisposed()) {
        return;
      }
      fTimeGraphViewer.setStartFinishTime(startTime,endTime);
      fTimeGraphViewer.setSelectedTime(time,false);
      startZoomThread(startTime,endTime);
    }
  }
);
}",0.9485956544780074
92108,"/** 
 * Broadcast TmfSignal about new selected time range.
 * @param newDuration new duration (relative to current start time)
 */
public synchronized void updateTimeRange(long newDuration){
  if (fTrace != null) {
    long delta=newDuration - fWindowSpan;
    long newStartTime=fWindowStartTime + (delta / 2);
    setNewRange(newStartTime,newDuration);
  }
}","/** 
 * Broadcast TmfSignal about new selected time range.
 * @param newDuration new duration (relative to current start time)
 */
public synchronized void updateTimeRange(long newDuration){
  if (fTrace != null) {
    long delta=newDuration - fWindowSpan;
    long newStartTime=fWindowStartTime - (delta / 2);
    setNewRange(newStartTime,newDuration);
  }
}",0.9972144846796658
92109,"private void setNewRange(long startTime,long duration){
  if (startTime < fTraceStartTime) {
    startTime=fTraceStartTime;
  }
  long endTime=startTime + duration;
  if (endTime > fTraceEndTime) {
    endTime=fTraceEndTime;
    if ((endTime - duration) > fTraceEndTime) {
      startTime=endTime - duration;
    }
 else {
      startTime=fTraceStartTime;
    }
  }
  updateTimeRange(startTime,endTime);
}","private void setNewRange(long startTime,long duration){
  if (startTime < fTraceStartTime) {
    startTime=fTraceStartTime;
  }
  long endTime=startTime + duration;
  if (endTime > fTraceEndTime) {
    endTime=fTraceEndTime;
    if ((endTime - duration) > fTraceStartTime) {
      startTime=endTime - duration;
    }
 else {
      startTime=fTraceStartTime;
    }
  }
  updateTimeRange(startTime,endTime);
}",0.9901477832512317
92110,"/** 
 * Updates the current time range in the time range histogram and full range histogram.
 * @param signal the signal to process
 */
@TmfSignalHandler public void timeRangeUpdated(TmfRangeSynchSignal signal){
  assert(signal != null);
  if (fTrace != null) {
    fWindowStartTime=signal.getCurrentRange().getStartTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
    fWindowEndTime=signal.getCurrentRange().getEndTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
    fWindowSpan=fWindowEndTime - fWindowStartTime;
    sendTimeRangeRequest(fWindowStartTime,fWindowEndTime);
    fFullTraceHistogram.setTimeRange(fWindowStartTime,fWindowSpan);
    fTimeSpanControl.setValue(fWindowSpan);
  }
}","/** 
 * Updates the current time range in the time range histogram and full range histogram.
 * @param signal the signal to process
 */
@TmfSignalHandler public void timeRangeUpdated(TmfRangeSynchSignal signal){
  assert(signal != null);
  if (fTrace != null) {
    TmfTimeRange range=signal.getCurrentRange().getIntersection(fTrace.getTimeRange());
    if (range == null) {
      return;
    }
    fWindowStartTime=range.getStartTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
    fWindowEndTime=range.getEndTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
    fWindowSpan=fWindowEndTime - fWindowStartTime;
    sendTimeRangeRequest(fWindowStartTime,fWindowEndTime);
    fFullTraceHistogram.setTimeRange(fWindowStartTime,fWindowSpan);
    fTimeSpanControl.setValue(fWindowSpan);
  }
}",0.8871493803000652
92111,"protected void packColumns(){
  if (fPackDone) {
    return;
  }
  for (  final TableColumn column : fTable.getColumns()) {
    final int headerWidth=column.getWidth();
    column.pack();
    if (column.getWidth() < headerWidth) {
      column.setWidth(headerWidth);
    }
  }
  fPackDone=true;
}","protected void packColumns(){
  if (fPackDone) {
    return;
  }
  boolean isLinux=System.getProperty(""String_Node_Str"").contains(""String_Node_Str"") ? true : false;
  TableColumn tableColumns[]=fTable.getColumns();
  for (int i=0; i < tableColumns.length; i++) {
    final TableColumn column=tableColumns[i];
    final int headerWidth=column.getWidth();
    column.pack();
    if (isLinux && (i == 0)) {
      column.setWidth(column.getWidth() + SEARCH_IMAGE.getBounds().width);
    }
    if (column.getWidth() < headerWidth) {
      column.setWidth(headerWidth);
    }
  }
  fPackDone=true;
}",0.6186726659167604
92112,"@Override public void run(){
  if (!fCanvas.isDisposed()) {
    final int canvasWidth=fCanvas.getBounds().width;
    final int canvasHeight=fCanvas.getBounds().height;
    if (canvasWidth <= 0 || canvasHeight <= 0) {
      return;
    }
    fDataModel.setCurrentEvent(fCurrentEventTime);
    fScaledData=fDataModel.scaleTo(canvasWidth,canvasHeight,1);
synchronized (fScaledData) {
      if (fScaledData != null) {
        fCanvas.redraw();
        fTimeRangeStartText.setText(TmfTimestampFormat.getDefaulTimeFormat().format(fDataModel.getFirstBucketTime()));
        fTimeRangeEndText.setText(TmfTimestampFormat.getDefaulTimeFormat().format(fDataModel.getEndTime()));
        fMaxNbEventsText.setText(Long.toString(fScaledData.fMaxValue));
        fMaxNbEventsText.getParent().layout();
      }
    }
  }
}","@Override public void run(){
  if (!fCanvas.isDisposed()) {
    final int canvasWidth=fCanvas.getBounds().width;
    final int canvasHeight=fCanvas.getBounds().height;
    if (canvasWidth <= 0 || canvasHeight <= 0) {
      return;
    }
    fDataModel.setCurrentEvent(fCurrentEventTime);
    fScaledData=fDataModel.scaleTo(canvasWidth,canvasHeight,1);
synchronized (fDataModel) {
      if (fScaledData != null) {
        fCanvas.redraw();
        fTimeRangeStartText.setText(TmfTimestampFormat.getDefaulTimeFormat().format(fDataModel.getFirstBucketTime()));
        fTimeRangeEndText.setText(TmfTimestampFormat.getDefaulTimeFormat().format(fDataModel.getEndTime()));
        fMaxNbEventsText.setText(Long.toString(fScaledData.fMaxValue));
        fMaxNbEventsText.getParent().layout();
      }
    }
  }
}",0.9882060831781502
92113,"/** 
 * Clear the histogram and reset the data
 */
public void clear(){
  fDataModel.clear();
  fScaledData=null;
}","/** 
 * Clear the histogram and reset the data
 */
public void clear(){
  fDataModel.clear();
synchronized (fDataModel) {
    fScaledData=null;
  }
}",0.8712121212121212
92114,"/** 
 * Refresh the histogram display
 */
@Override public void modelUpdated(){
  if (!fCanvas.isDisposed() && fCanvas.getDisplay() != null) {
    fCanvas.getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        if (!fCanvas.isDisposed()) {
          final int canvasWidth=fCanvas.getBounds().width;
          final int canvasHeight=fCanvas.getBounds().height;
          if (canvasWidth <= 0 || canvasHeight <= 0) {
            return;
          }
          fDataModel.setCurrentEvent(fCurrentEventTime);
          fScaledData=fDataModel.scaleTo(canvasWidth,canvasHeight,1);
synchronized (fScaledData) {
            if (fScaledData != null) {
              fCanvas.redraw();
              fTimeRangeStartText.setText(TmfTimestampFormat.getDefaulTimeFormat().format(fDataModel.getFirstBucketTime()));
              fTimeRangeEndText.setText(TmfTimestampFormat.getDefaulTimeFormat().format(fDataModel.getEndTime()));
              fMaxNbEventsText.setText(Long.toString(fScaledData.fMaxValue));
              fMaxNbEventsText.getParent().layout();
            }
          }
        }
      }
    }
);
  }
}","/** 
 * Refresh the histogram display
 */
@Override public void modelUpdated(){
  if (!fCanvas.isDisposed() && fCanvas.getDisplay() != null) {
    fCanvas.getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        if (!fCanvas.isDisposed()) {
          final int canvasWidth=fCanvas.getBounds().width;
          final int canvasHeight=fCanvas.getBounds().height;
          if (canvasWidth <= 0 || canvasHeight <= 0) {
            return;
          }
          fDataModel.setCurrentEvent(fCurrentEventTime);
          fScaledData=fDataModel.scaleTo(canvasWidth,canvasHeight,1);
synchronized (fDataModel) {
            if (fScaledData != null) {
              fCanvas.redraw();
              fTimeRangeStartText.setText(TmfTimestampFormat.getDefaulTimeFormat().format(fDataModel.getFirstBucketTime()));
              fTimeRangeEndText.setText(TmfTimestampFormat.getDefaulTimeFormat().format(fDataModel.getEndTime()));
              fMaxNbEventsText.setText(Long.toString(fScaledData.fMaxValue));
              fMaxNbEventsText.getParent().layout();
            }
          }
        }
      }
    }
);
  }
}",0.9915817456801064
92115,"@Override protected void updateValue(){
  String string=fTextValue.getText();
  long value=0;
  try {
    value=TmfTimestampFormat.getDefaulTimeFormat().parseValue(string,fTraceStartTime);
  }
 catch (  ParseException e) {
  }
  if (getValue() != value) {
    ITmfTrace trace=fParentView.getTrace();
    if (trace != null) {
      TmfTimeRange range=trace.getTimeRange();
      long startTime=range.getStartTime().getValue();
      long endTime=range.getEndTime().getValue();
      if (value < startTime) {
        value=startTime;
      }
 else       if (value > endTime) {
        value=endTime;
      }
    }
    setValue(value);
    fParentView.updateCurrentEventTime(value);
  }
}","@Override protected void updateValue(){
  String string=fTextValue.getText();
  long value=0;
  try {
    value=TmfTimestampFormat.getDefaulTimeFormat().parseValue(string,fTraceStartTime);
  }
 catch (  ParseException e) {
  }
  if (getValue() != value) {
    ITmfTrace trace=fParentView.getTrace();
    if (trace != null) {
      TmfTimeRange range=trace.getTimeRange();
      long startTime=range.getStartTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
      long endTime=range.getEndTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
      if (value < startTime) {
        value=startTime;
      }
 else       if (value > endTime) {
        value=endTime;
      }
    }
    setValue(value);
    fParentView.updateCurrentEventTime(value);
  }
}",0.8751714677640604
92116,"@Override public void setFocus(){
  refresh(INITIAL_WINDOW_OFFSET);
  fTimeGraphViewer.setFocus();
}","@Override public void setFocus(){
  fTimeGraphViewer.setFocus();
}",0.7951807228915663
92117,"@Override public void mouseUp(MouseEvent event){
  if (fMouseDown) {
    fMouseDown=false;
    if (event.x == fStartPosition) {
      super.mouseDown(event);
      return;
    }
    ((HistogramView)fParentView).updateTimeRange(fRangeStartTime,fRangeStartTime + fZoom.getDuration());
  }
}","@Override public void mouseUp(MouseEvent event){
  if (fMouseDown) {
    fMouseDown=false;
    if (event.x == fStartPosition) {
      super.mouseDown(event);
      return;
    }
    ((HistogramView)fParentView).updateTimeRange(fRangeStartTime,fRangeStartTime + fRangeDuration);
  }
}",0.9457092819614712
92118,"/** 
 * Handles the trace updated signal. Used to update time limits (start and end time)
 * @param signal the trace updated signal
 * @since 2.0
 */
@TmfSignalHandler public void traceUpdated(TmfTraceUpdatedSignal signal){
  if (signal.getTrace() != fTrace) {
    return;
  }
  TmfTimeRange fullRange=signal.getTrace().getTimeRange();
  fTraceStartTime=fullRange.getStartTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
  fTraceEndTime=fullRange.getEndTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
  fFullTraceHistogram.setFullRange(fTraceStartTime,fTraceEndTime);
  fTimeRangeHistogram.setFullRange(fTraceStartTime,fTraceEndTime);
  if ((fFullTraceRequest != null) && fFullTraceRequest.getRange().getEndTime().compareTo(signal.getRange().getEndTime()) < 0) {
    sendFullRangeRequest(fullRange);
  }
}","/** 
 * Handles the trace updated signal. Used to update time limits (start and end time)
 * @param signal the trace updated signal
 * @since 2.0
 */
@TmfSignalHandler public void traceUpdated(TmfTraceUpdatedSignal signal){
  if (signal.getTrace() != fTrace) {
    return;
  }
  TmfTimeRange fullRange=signal.getTrace().getTimeRange();
  fTraceStartTime=fullRange.getStartTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
  fTraceEndTime=fullRange.getEndTime().normalize(0,ITmfTimestamp.NANOSECOND_SCALE).getValue();
  fFullTraceHistogram.setFullRange(fTraceStartTime,fTraceEndTime);
  fTimeRangeHistogram.setFullRange(fTraceStartTime,fTraceEndTime);
  fFullTraceHistogram.setTimeRange(fTimeRangeHistogram.getStartTime(),fWindowSpan);
  if ((fFullTraceRequest != null) && fFullTraceRequest.getRange().getEndTime().compareTo(signal.getRange().getEndTime()) < 0) {
    sendFullRangeRequest(fullRange);
  }
}",0.952054794520548
92119,"@Override public void resetStartFinishTime(){
  setStartFinishTimeNotify(_time0_,_time1_);
  _timeRangeFixed=false;
}","@Override public void resetStartFinishTime(){
  setStartFinishTime(_time0_,_time1_);
  _timeRangeFixed=false;
}",0.9736842105263158
92120,"@Override public void mouseDoubleClick(MouseEvent e){
  if (e.button == 1 && null != _timeProvider && _timeProvider.getTime0() != _timeProvider.getTime1() && (e.stateMask & SWT.BUTTON_MASK) == 0) {
    _timeProvider.resetStartFinishTime();
    _time0bak=_timeProvider.getTime0();
    _time1bak=_timeProvider.getTime1();
  }
}","@Override public void mouseDoubleClick(MouseEvent e){
  if (e.button == 1 && null != _timeProvider && _timeProvider.getTime0() != _timeProvider.getTime1() && (e.stateMask & SWT.BUTTON_MASK) == 0) {
    _timeProvider.resetStartFinishTime();
    _timeProvider.notifyStartFinishTime();
    _time0bak=_timeProvider.getTime0();
    _time1bak=_timeProvider.getTime1();
  }
}",0.937950937950938
92121,"/** 
 * Extract the field information from the structDefinition haze-inducing mess, and put them into something ITmfEventField can cope with.
 * @param eventDef CTF EventDefinition to read
 * @return CtfTmfEventField[] The array of fields that were read
 */
private CtfTmfEventField[] parseFields(EventDefinition eventDef){
  List<CtfTmfEventField> fields=new ArrayList<CtfTmfEventField>();
  StructDefinition structFields=eventDef.getFields();
  HashMap<String,Definition> definitions=structFields.getDefinitions();
  String curFieldName=null;
  Definition curFieldDef;
  CtfTmfEventField curField;
  Iterator<Entry<String,Definition>> it=definitions.entrySet().iterator();
  while (it.hasNext()) {
    Entry<String,Definition> entry=it.next();
    curFieldName=entry.getKey();
    curFieldDef=entry.getValue();
    curField=CtfTmfEventField.parseField(curFieldDef,curFieldName);
    fields.add(curField);
  }
  long ip=-1;
  StructDefinition structContext=eventDef.getContext();
  if (structContext != null) {
    definitions=structContext.getDefinitions();
    String curContextName;
    Definition curContextDef;
    CtfTmfEventField curContext;
    it=definitions.entrySet().iterator();
    while (it.hasNext()) {
      Entry<String,Definition> entry=it.next();
      if (entry.getKey().equals(""String_Node_Str"") && (entry.getValue() instanceof IntegerDefinition)) {
        ip=((IntegerDefinition)entry.getValue()).getValue();
      }
      curContextName=CONTEXT_FIELD_PREFIX + entry.getKey();
      curContextDef=entry.getValue();
      curContext=CtfTmfEventField.parseField(curContextDef,curContextName);
      fields.add(curContext);
    }
  }
  final String name=eventDef.getDeclaration().getName();
  List<CTFCallsite> eventList=fTrace.getCTFTrace().getCallsiteCandidates(name);
  if (eventList != null) {
    final String callsite=""String_Node_Str"";
    if (eventList.size() == 1 || ip == -1) {
      CTFCallsite cs=eventList.get(0);
      fields.add(new CTFStringField(cs.toString(),callsite));
    }
 else {
      fields.add(new CTFStringField(fTrace.getCTFTrace().getCallsite(name,ip).toString(),callsite));
    }
  }
  return fields.toArray(new CtfTmfEventField[fields.size()]);
}","/** 
 * Extract the field information from the structDefinition haze-inducing mess, and put them into something ITmfEventField can cope with.
 * @param eventDef CTF EventDefinition to read
 * @return CtfTmfEventField[] The array of fields that were read
 */
private CtfTmfEventField[] parseFields(EventDefinition eventDef){
  List<CtfTmfEventField> fields=new ArrayList<CtfTmfEventField>();
  StructDefinition structFields=eventDef.getFields();
  HashMap<String,Definition> definitions=structFields.getDefinitions();
  String curFieldName=null;
  Definition curFieldDef;
  CtfTmfEventField curField;
  Iterator<Entry<String,Definition>> it=definitions.entrySet().iterator();
  while (it.hasNext()) {
    Entry<String,Definition> entry=it.next();
    curFieldName=entry.getKey();
    curFieldDef=entry.getValue();
    curField=CtfTmfEventField.parseField(curFieldDef,curFieldName);
    fields.add(curField);
  }
  long ip=-1;
  StructDefinition structContext=eventDef.getContext();
  if (structContext != null) {
    definitions=structContext.getDefinitions();
    String curContextName;
    Definition curContextDef;
    CtfTmfEventField curContext;
    it=definitions.entrySet().iterator();
    while (it.hasNext()) {
      Entry<String,Definition> entry=it.next();
      if (entry.getKey().equals(""String_Node_Str"") && (entry.getValue() instanceof IntegerDefinition)) {
        ip=((IntegerDefinition)entry.getValue()).getValue();
      }
      curContextName=CONTEXT_FIELD_PREFIX + entry.getKey();
      curContextDef=entry.getValue();
      curContext=CtfTmfEventField.parseField(curContextDef,curContextName);
      fields.add(curContext);
    }
  }
  final String name=eventDef.getDeclaration().getName();
  List<CTFCallsite> eventList=fTrace.getCTFTrace().getCallsiteCandidates(name);
  if (!eventList.isEmpty()) {
    final String callsite=""String_Node_Str"";
    if (eventList.size() == 1 || ip == -1) {
      CTFCallsite cs=eventList.get(0);
      fields.add(new CTFStringField(cs.toString(),callsite));
    }
 else {
      fields.add(new CTFStringField(fTrace.getCTFTrace().getCallsite(name,ip).toString(),callsite));
    }
  }
  return fields.toArray(new CtfTmfEventField[fields.size()]);
}",0.9956808365537624
92122,"/** 
 * Get id of default profiling launch shortcut that provides the type  of profiling. This looks through extensions of the <code>org.eclipse.linuxtools.profiling.launch.launchProvider</code> extension point that have a specific type attribute.
 * @param type A profiling type (eg. memory, snapshot, timing, etc.)
 * @return an id of the profiling launch shortcut that implements<code>ProfileLaunchShortcut</code> and provides the necessary profiling type, or <code>null</code> if none could be found.
 * @since 1.2
 */
public static String getDefaultLaunchShortcutProviderId(String type){
  IExtensionPoint extPoint=Platform.getExtensionRegistry().getExtensionPoint(ProfileLaunchPlugin.PLUGIN_ID,""String_Node_Str"");
  IConfigurationElement[] configs=extPoint.getConfigurationElements();
  for (  IConfigurationElement config : configs) {
    if (config.getName().equals(""String_Node_Str"")) {
      String currentType=config.getAttribute(""String_Node_Str"");
      String shortcut=config.getAttribute(""String_Node_Str"");
      if (currentType != null && shortcut != null && currentType.equals(type)) {
        String isDefault=config.getAttribute(""String_Node_Str"");
        if (isDefault != null && isDefault.equals(""String_Node_Str"")) {
          try {
            Object obj=config.createExecutableExtension(""String_Node_Str"");
            if (obj instanceof ProfileLaunchShortcut) {
              return config.getAttribute(""String_Node_Str"");
            }
          }
 catch (          CoreException e) {
          }
        }
      }
    }
  }
  return null;
}","/** 
 * Get id of default profiling launch shortcut that provides the type  of profiling. This looks through extensions of the <code>org.eclipse.linuxtools.profiling.launch.launchProvider</code> extension point that have a specific type attribute.
 * @param type A profiling type (eg. memory, snapshot, timing, etc.)
 * @return an id of the profiling launch shortcut that implements<code>ProfileLaunchShortcut</code> and provides the necessary profiling type, or <code>null</code> if none could be found.
 * @since 1.2
 */
public static String getDefaultLaunchShortcutProviderId(String type){
  ArrayList<IConfigurationElement> list=getOrderedConfigElements(type);
  for (  IConfigurationElement config : list) {
    try {
      Object obj=config.createExecutableExtension(""String_Node_Str"");
      if (obj instanceof ProfileLaunchShortcut) {
        return config.getAttribute(""String_Node_Str"");
      }
    }
 catch (    CoreException e) {
    }
  }
  return null;
}",0.524822695035461
92123,"/** 
 * Get a profiling launch shortcut that provides the specified type of profiling. This looks through extensions of the extension point <code>org.eclipse.linuxtools.profiling.launch.launchProvider</code> that have a specific type attribute.
 * @param type A profiling type (eg. memory, snapshot, timing, etc.)
 * @return a profiling launch shortcut that implements <code>ProfileLaunchShortcut</code>and provides the necessary profiling type, or <code>null</code> if none could be found.
 * @since 1.1
 */
public ProfileLaunchShortcut getProfilingProvider(String type){
  IExtensionPoint extPoint=Platform.getExtensionRegistry().getExtensionPoint(ProfileLaunchPlugin.PLUGIN_ID,""String_Node_Str"");
  IConfigurationElement[] configs=extPoint.getConfigurationElements();
  ArrayList<IConfigurationElement> configList=new ArrayList<IConfigurationElement>();
  for (  IConfigurationElement config : configs) {
    if (config.getName().equals(""String_Node_Str"")) {
      String currentType=config.getAttribute(""String_Node_Str"");
      String shortcut=config.getAttribute(""String_Node_Str"");
      if (currentType != null && shortcut != null && currentType.equals(type)) {
        String priority=config.getAttribute(""String_Node_Str"");
        if (priority != null) {
          try {
            Integer.parseInt(priority);
            configList.add(config);
          }
 catch (          NumberFormatException e) {
          }
        }
      }
    }
  }
  Collections.sort(configList,new Comparator<IConfigurationElement>(){
    public int compare(    IConfigurationElement c1,    IConfigurationElement c2){
      int p1, p2;
      try {
        p1=Integer.parseInt(c1.getAttribute(""String_Node_Str""));
        if (p1 <= 0) {
          return 1;
        }
      }
 catch (      NumberFormatException e) {
        return 1;
      }
      try {
        p2=Integer.parseInt(c2.getAttribute(""String_Node_Str""));
        if (p2 <= 0) {
          return -1;
        }
      }
 catch (      NumberFormatException e) {
        return -1;
      }
      return p1 < p2 ? -1 : 1;
    }
  }
);
  for (  IConfigurationElement config : configList) {
    try {
      Object obj=config.createExecutableExtension(""String_Node_Str"");
      if (obj instanceof ProfileLaunchShortcut) {
        return (ProfileLaunchShortcut)obj;
      }
    }
 catch (    CoreException e) {
    }
  }
  return null;
}","/** 
 * Get a profiling launch shortcut that provides the specified type of profiling. This looks through extensions of the extension point <code>org.eclipse.linuxtools.profiling.launch.launchProvider</code> that have a specific type attribute.
 * @param type A profiling type (eg. memory, snapshot, timing, etc.)
 * @return a profiling launch shortcut that implements <code>ProfileLaunchShortcut</code>and provides the necessary profiling type, or <code>null</code> if none could be found.
 * @since 1.2
 */
public ProfileLaunchShortcut getProfilingProvider(String type){
  ArrayList<IConfigurationElement> configList=getOrderedConfigElements(type);
  for (  IConfigurationElement config : configList) {
    try {
      Object obj=config.createExecutableExtension(""String_Node_Str"");
      if (obj instanceof ProfileLaunchShortcut) {
        return (ProfileLaunchShortcut)obj;
      }
    }
 catch (    CoreException e) {
    }
  }
  return null;
}",0.463063063063063
92124,"@Override protected void createFieldEditors(){
  HashMap<String,String> map=ProfileLaunchConfigurationTabGroup.getProviderNamesForType(type);
  String[][] providerList=new String[map.size()][2];
  int i=0;
  for (  Entry<String,String> entry : map.entrySet()) {
    providerList[i][0]=entry.getKey();
    providerList[i][1]=entry.getValue();
    i++;
  }
  RadioGroupFieldEditor editor=new RadioGroupFieldEditor(ProviderProfileConstants.PREFS_KEY,Messages.ProviderPreferencesPage_1,1,providerList,getFieldEditorParent());
  addField(editor);
}","@Override protected void createFieldEditors(){
  String providerId=ProfileLaunchShortcut.getDefaultLaunchShortcutProviderId(type);
  getPreferenceStore().setDefault(ProviderProfileConstants.PREFS_KEY,providerId);
  HashMap<String,String> map=ProfileLaunchConfigurationTabGroup.getProviderNamesForType(type);
  String[][] providerList=new String[map.size()][2];
  int i=0;
  for (  Entry<String,String> entry : map.entrySet()) {
    providerList[i][0]=entry.getKey();
    providerList[i][1]=entry.getValue();
    i++;
  }
  RadioGroupFieldEditor editor=new RadioGroupFieldEditor(ProviderProfileConstants.PREFS_KEY,Messages.ProviderPreferencesPage_1,1,providerList,getFieldEditorParent());
  editor.setPreferenceStore(getPreferenceStore());
  addField(editor);
}",0.8334612432847276
92125,"@SuppressWarnings(""String_Node_Str"") @Override public boolean filter(List<?> filters){
  fLock.lock();
  try {
    cancelOngoingRequests();
    List<FilterCriteria> list=(List<FilterCriteria>)filters;
    fFilterCriteria=new ArrayList<FilterCriteria>(list);
    fillCurrentPage(fEvents);
  }
  finally {
    fLock.unlock();
  }
  return true;
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean filter(List<?> filters){
  fLock.lock();
  try {
    cancelOngoingRequests();
    if (filters == null) {
      fFilterCriteria=new ArrayList<FilterCriteria>();
    }
 else {
      List<FilterCriteria> list=(List<FilterCriteria>)filters;
      fFilterCriteria=new ArrayList<FilterCriteria>(list);
    }
    fillCurrentPage(fEvents);
  }
  finally {
    fLock.unlock();
  }
  return true;
}",0.8664987405541562
92126,"/** 
 * Handle key-based navigation in table.
 * @param event
 */
private void handleTableKeyEvent(KeyEvent event){
  int lastEventRank=fTableItemCount - 1;
  int lastPageTopEntryRank=Math.max(0,fTableItemCount - fFullyVisibleRows);
  int previousSelectedEventRank=fSelectedEventRank;
  int selectedRow=fSelectedEventRank - fTableTopEventRank;
  boolean needsRefresh=false;
switch (event.keyCode) {
case SWT.ARROW_DOWN:
{
      event.doit=false;
      if (fSelectedEventRank < lastEventRank) {
        fSelectedEventRank++;
        selectedRow=fSelectedEventRank - fTableTopEventRank;
        if (selectedRow >= fFullyVisibleRows) {
          fTableTopEventRank++;
          needsRefresh=true;
        }
      }
      break;
    }
case SWT.ARROW_UP:
{
    event.doit=false;
    if (fSelectedEventRank > 0) {
      fSelectedEventRank--;
      selectedRow=fSelectedEventRank - fTableTopEventRank;
      if (selectedRow < fFrozenRowCount && fTableTopEventRank > 0) {
        fTableTopEventRank--;
        needsRefresh=true;
      }
    }
    break;
  }
case SWT.END:
{
  event.doit=false;
  fTableTopEventRank=lastPageTopEntryRank;
  fSelectedEventRank=lastEventRank;
  needsRefresh=true;
  break;
}
case SWT.HOME:
{
event.doit=false;
fSelectedEventRank=fFrozenRowCount;
fTableTopEventRank=0;
needsRefresh=true;
break;
}
case SWT.PAGE_DOWN:
{
event.doit=false;
if (fSelectedEventRank < lastEventRank) {
fSelectedEventRank+=fFullyVisibleRows;
if (fSelectedEventRank > lastEventRank) {
  fSelectedEventRank=lastEventRank;
}
selectedRow=fSelectedEventRank - fTableTopEventRank;
if (selectedRow > fFullyVisibleRows - 1) {
  fTableTopEventRank+=fFullyVisibleRows;
  if (fTableTopEventRank > lastPageTopEntryRank) {
    fTableTopEventRank=lastPageTopEntryRank;
  }
  needsRefresh=true;
}
}
break;
}
case SWT.PAGE_UP:
{
event.doit=false;
if (fSelectedEventRank > 0) {
fSelectedEventRank-=fFullyVisibleRows;
if (fSelectedEventRank < fFrozenRowCount) {
fSelectedEventRank=fFrozenRowCount;
}
selectedRow=fSelectedEventRank - fTableTopEventRank;
if (selectedRow < 0) {
fTableTopEventRank-=fFullyVisibleRows;
if (fTableTopEventRank < 0) {
  fTableTopEventRank=0;
}
needsRefresh=true;
}
}
break;
}
default :
{
return;
}
}
boolean done=true;
if (needsRefresh) {
done=refreshTable();
}
 else {
fTable.select(selectedRow);
}
if (fFullyVisibleRows < fTableItemCount) {
fSlider.setSelection(fTableTopEventRank);
}
if (fSelectedEventRank != previousSelectedEventRank && fSelectedEventRank < fTableItemCount) {
if (done) {
Event e=new Event();
e.item=fTable.getSelection()[0];
fTable.notifyListeners(SWT.Selection,e);
}
 else {
fPendingSelection=true;
}
}
}","/** 
 * Handle key-based navigation in table.
 * @param event
 */
private void handleTableKeyEvent(KeyEvent event){
  int lastEventRank=fTableItemCount - 1;
  int lastPageTopEntryRank=Math.max(0,fTableItemCount - fFullyVisibleRows);
  int previousSelectedEventRank=fSelectedEventRank;
  int selectedRow=fSelectedEventRank - fTableTopEventRank;
  boolean needsRefresh=false;
switch (event.keyCode) {
case SWT.ARROW_DOWN:
{
      event.doit=false;
      if (fSelectedEventRank < lastEventRank) {
        fSelectedEventRank++;
        selectedRow=fSelectedEventRank - fTableTopEventRank;
        if (selectedRow == fFullyVisibleRows) {
          fTableTopEventRank++;
          needsRefresh=true;
        }
 else         if (selectedRow < fFrozenRowCount || selectedRow > fFullyVisibleRows) {
          fTableTopEventRank=Math.max(0,Math.min(fSelectedEventRank - fFrozenRowCount,lastPageTopEntryRank));
          needsRefresh=true;
        }
      }
      break;
    }
case SWT.ARROW_UP:
{
    event.doit=false;
    if (fSelectedEventRank > 0) {
      fSelectedEventRank--;
      selectedRow=fSelectedEventRank - fTableTopEventRank;
      if (selectedRow == fFrozenRowCount - 1 && fTableTopEventRank > 0) {
        fTableTopEventRank--;
        needsRefresh=true;
      }
 else       if (selectedRow < fFrozenRowCount || selectedRow > fFullyVisibleRows) {
        fTableTopEventRank=Math.max(0,Math.min(fSelectedEventRank - fFrozenRowCount,lastPageTopEntryRank));
        needsRefresh=true;
      }
    }
    break;
  }
case SWT.END:
{
  event.doit=false;
  fTableTopEventRank=lastPageTopEntryRank;
  fSelectedEventRank=lastEventRank;
  needsRefresh=true;
  break;
}
case SWT.HOME:
{
event.doit=false;
fSelectedEventRank=fFrozenRowCount;
fTableTopEventRank=0;
needsRefresh=true;
break;
}
case SWT.PAGE_DOWN:
{
event.doit=false;
if (fSelectedEventRank < lastEventRank) {
fSelectedEventRank+=fFullyVisibleRows;
if (fSelectedEventRank > lastEventRank) {
  fSelectedEventRank=lastEventRank;
}
selectedRow=fSelectedEventRank - fTableTopEventRank;
if (selectedRow > fFullyVisibleRows + fFrozenRowCount - 1 && selectedRow < 2 * fFullyVisibleRows) {
  fTableTopEventRank+=fFullyVisibleRows;
  if (fTableTopEventRank > lastPageTopEntryRank) {
    fTableTopEventRank=lastPageTopEntryRank;
  }
  needsRefresh=true;
}
 else if (selectedRow < fFrozenRowCount || selectedRow >= 2 * fFullyVisibleRows) {
  fTableTopEventRank=Math.max(0,Math.min(fSelectedEventRank - fFrozenRowCount,lastPageTopEntryRank));
  needsRefresh=true;
}
}
break;
}
case SWT.PAGE_UP:
{
event.doit=false;
if (fSelectedEventRank > 0) {
fSelectedEventRank-=fFullyVisibleRows;
if (fSelectedEventRank < fFrozenRowCount) {
fSelectedEventRank=fFrozenRowCount;
}
selectedRow=fSelectedEventRank - fTableTopEventRank;
if (selectedRow < fFrozenRowCount && selectedRow > -fFullyVisibleRows) {
fTableTopEventRank-=fFullyVisibleRows;
if (fTableTopEventRank < 0) {
  fTableTopEventRank=0;
}
needsRefresh=true;
}
 else if (selectedRow <= -fFullyVisibleRows || selectedRow >= fFullyVisibleRows) {
fTableTopEventRank=Math.max(0,Math.min(fSelectedEventRank - fFrozenRowCount,lastPageTopEntryRank));
needsRefresh=true;
}
}
break;
}
default :
{
return;
}
}
boolean done=true;
if (needsRefresh) {
done=refreshTable();
}
 else {
fTable.select(selectedRow);
}
if (fFullyVisibleRows < fTableItemCount) {
fSlider.setSelection(fTableTopEventRank);
}
if (fSelectedEventRank != previousSelectedEventRank && fSelectedEventRank < fTableItemCount) {
if (done) {
Event e=new Event();
e.item=fTable.getSelection()[0];
fTable.notifyListeners(SWT.Selection,e);
}
 else {
fPendingSelection=true;
}
}
}",0.8170770706747682
92127,"@Override public TmfContext seekEvent(final double ratio){
  fLock.lock();
  try {
    if (fTrace != null) {
      final ITmfLocation<?> location=new TmfLocation<Long>(Long.valueOf((long)(ratio * fTrace.length())));
      final TmfContext context=seekEvent(location);
      context.setRank(ITmfContext.UNKNOWN_RANK);
      return context;
    }
  }
 catch (  final IOException e) {
    e.printStackTrace();
  }
 finally {
    fLock.unlock();
  }
  return null;
}","@Override public TmfContext seekEvent(final double ratio){
  fLock.lock();
  try {
    if (fTrace != null) {
      final ITmfLocation<?> location=new TmfLocation<Long>(Math.round(ratio * fTrace.length()));
      final TmfContext context=seekEvent(location);
      context.setRank(ITmfContext.UNKNOWN_RANK);
      return context;
    }
  }
 catch (  final IOException e) {
    e.printStackTrace();
  }
 finally {
    fLock.unlock();
  }
  return null;
}",0.9277899343544858
92128,"@Override public ITmfContext seekEvent(double ratio){
  CtfTmfLightweightContext context=new CtfTmfLightweightContext(this);
  context.seek((long)(this.getNbEvents() * ratio));
  context.setRank(ITmfContext.UNKNOWN_RANK);
  return context;
}","@Override public ITmfContext seekEvent(double ratio){
  CtfTmfLightweightContext context=new CtfTmfLightweightContext(this);
  context.seek(Math.round(this.getNbEvents() * ratio));
  context.setRank(ITmfContext.UNKNOWN_RANK);
  return context;
}",0.9670781893004116
92129,"@Override public ITmfContext seekEvent(final double ratio){
  final ITmfContext context=seekEvent((long)(ratio * getNbEvents()));
  return context;
}","@Override public ITmfContext seekEvent(final double ratio){
  final ITmfContext context=seekEvent(Math.round(ratio * getNbEvents()));
  return context;
}",0.9602649006622516
92130,"@Override public synchronized TmfContext seekEvent(final double ratio){
  if (fFile == null) {
    return new CustomTxtTraceContext(NULL_LOCATION,ITmfContext.UNKNOWN_RANK);
  }
  try {
    long pos=(long)(ratio * fFile.length());
    while (pos > 0) {
      fFile.seek(pos - 1);
      if (fFile.read() == '\n') {
        break;
      }
      pos--;
    }
    final ITmfLocation<?> location=new TmfLocation<Long>(pos);
    final TmfContext context=seekEvent(location);
    context.setRank(ITmfContext.UNKNOWN_RANK);
    return context;
  }
 catch (  final IOException e) {
    Activator.getDefault().logError(""String_Node_Str"" + getPath(),e);
    return new CustomTxtTraceContext(NULL_LOCATION,ITmfContext.UNKNOWN_RANK);
  }
}","@Override public synchronized TmfContext seekEvent(final double ratio){
  if (fFile == null) {
    return new CustomTxtTraceContext(NULL_LOCATION,ITmfContext.UNKNOWN_RANK);
  }
  try {
    long pos=Math.round(ratio * fFile.length());
    while (pos > 0) {
      fFile.seek(pos - 1);
      if (fFile.read() == '\n') {
        break;
      }
      pos--;
    }
    final ITmfLocation<?> location=new TmfLocation<Long>(pos);
    final TmfContext context=seekEvent(location);
    context.setRank(ITmfContext.UNKNOWN_RANK);
    return context;
  }
 catch (  final IOException e) {
    Activator.getDefault().logError(""String_Node_Str"" + getPath(),e);
    return new CustomTxtTraceContext(NULL_LOCATION,ITmfContext.UNKNOWN_RANK);
  }
}",0.9889958734525448
92131,"@Override public synchronized TmfContext seekEvent(final double ratio){
  if (fFile == null) {
    return new CustomTxtTraceContext(NULL_LOCATION,ITmfContext.UNKNOWN_RANK);
  }
  try {
    long pos=(long)(ratio * fFile.length());
    while (pos > 0) {
      fFile.seek(pos - 1);
      if (fFile.read() == '\n') {
        break;
      }
      pos--;
    }
    final ITmfLocation<?> location=new TmfLocation<Long>(pos);
    final TmfContext context=seekEvent(location);
    context.setRank(ITmfContext.UNKNOWN_RANK);
    return context;
  }
 catch (  final IOException e) {
    Activator.getDefault().logError(""String_Node_Str"" + getPath(),e);
    return new CustomXmlTraceContext(NULL_LOCATION,ITmfContext.UNKNOWN_RANK);
  }
}","@Override public synchronized TmfContext seekEvent(final double ratio){
  if (fFile == null) {
    return new CustomTxtTraceContext(NULL_LOCATION,ITmfContext.UNKNOWN_RANK);
  }
  try {
    long pos=Math.round(ratio * fFile.length());
    while (pos > 0) {
      fFile.seek(pos - 1);
      if (fFile.read() == '\n') {
        break;
      }
      pos--;
    }
    final ITmfLocation<?> location=new TmfLocation<Long>(pos);
    final TmfContext context=seekEvent(location);
    context.setRank(ITmfContext.UNKNOWN_RANK);
    return context;
  }
 catch (  final IOException e) {
    Activator.getDefault().logError(""String_Node_Str"" + getPath(),e);
    return new CustomXmlTraceContext(NULL_LOCATION,ITmfContext.UNKNOWN_RANK);
  }
}",0.9889958734525448
92132,"/** 
 * Moves to the page that contains the time provided by the signal. The messages will be selected if the provided time is the time of a message.
 * @param signal The Time synch signal.
 */
@TmfSignalHandler public void synchToTime(TmfTimeSynchSignal signal){
  fLock.lock();
  try {
    if ((signal.getSource() != this) && (fFrame != null)) {
      fCurrentTime=signal.getCurrentTime();
      fIsSelect=true;
      moveToMessage();
    }
  }
  finally {
    fLock.unlock();
  }
}","/** 
 * Moves to the page that contains the time provided by the signal. The messages will be selected if the provided time is the time of a message.
 * @param signal The Time synch signal.
 */
@TmfSignalHandler public void synchToTime(TmfTimeSynchSignal signal){
  fLock.lock();
  try {
    if ((signal.getSource() != this) && (fFrame != null) && (fCheckPoints.size() > 0)) {
      fCurrentTime=signal.getCurrentTime();
      fIsSelect=true;
      moveToMessage();
    }
  }
  finally {
    fLock.unlock();
  }
}",0.970912738214644
92133,"/** 
 * Moves to the page that contains the current time provided by signal. No message will be selected however the focus will be set to the message if the provided time is the time of a message.
 * @param signal The time range sync signal
 */
@TmfSignalHandler public void synchToTimeRange(TmfRangeSynchSignal signal){
  fLock.lock();
  try {
    if ((signal.getSource() != this) && (fFrame != null) && !fIsSignalSent) {
      TmfTimeRange newTimeRange=signal.getCurrentRange();
      ITmfTimestamp delta=newTimeRange.getEndTime().getDelta(newTimeRange.getStartTime());
      fInitialWindow=delta.getValue();
      fIsSelect=false;
      fCurrentTime=newTimeRange.getStartTime();
      moveToMessage();
    }
  }
  finally {
    fLock.unlock();
  }
}","/** 
 * Moves to the page that contains the current time provided by signal. No message will be selected however the focus will be set to the message if the provided time is the time of a message.
 * @param signal The time range sync signal
 */
@TmfSignalHandler public void synchToTimeRange(TmfRangeSynchSignal signal){
  fLock.lock();
  try {
    if ((signal.getSource() != this) && (fFrame != null) && !fIsSignalSent&& (fCheckPoints.size() > 0)) {
      TmfTimeRange newTimeRange=signal.getCurrentRange();
      ITmfTimestamp delta=newTimeRange.getEndTime().getDelta(newTimeRange.getStartTime());
      fInitialWindow=delta.getValue();
      fIsSelect=false;
      fCurrentTime=newTimeRange.getStartTime();
      moveToMessage();
    }
  }
  finally {
    fLock.unlock();
  }
}",0.9817232375979112
92134,"private synchronized void initializeStreamingMonitor(){
  if (fInitialized) {
    return;
  }
  fInitialized=true;
  if (getStreamingInterval() == 0) {
    final ITmfContext context=seekEvent(0);
    final ITmfEvent event=getNext(context);
    if (event == null) {
      return;
    }
    final TmfTimeRange timeRange=new TmfTimeRange(event.getTimestamp().clone(),TmfTimestamp.BIG_CRUNCH);
    final TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(this,this,timeRange);
    new Thread(){
      @Override public void run(){
        broadcast(signal);
      }
    }
.start();
    return;
  }
  final Thread thread=new Thread(""String_Node_Str"" + getName()){
    private ITmfTimestamp safeTimestamp=null;
    private ITmfTimestamp lastSafeTimestamp=null;
    private TmfTimeRange timeRange=null;
    @Override public void run(){
      while (!fExecutor.isShutdown()) {
        if (!getIndexer().isIndexing()) {
          ITmfTimestamp startTimestamp=TmfTimestamp.BIG_CRUNCH;
          ITmfTimestamp endTimestamp=TmfTimestamp.BIG_BANG;
          for (          final ITmfTrace<T> trace : fTraces) {
            if (trace.getStartTime().compareTo(startTimestamp) < 0) {
              startTimestamp=trace.getStartTime();
            }
            if (trace.getStreamingInterval() != 0 && trace.getEndTime().compareTo(endTimestamp) > 0) {
              endTimestamp=trace.getEndTime();
            }
          }
          if (safeTimestamp != null && (lastSafeTimestamp == null || safeTimestamp.compareTo(lastSafeTimestamp,false) > 0)) {
            timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
            lastSafeTimestamp=safeTimestamp;
          }
 else {
            timeRange=null;
          }
          safeTimestamp=endTimestamp;
          if (timeRange != null) {
            final TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(TmfExperiment.this,TmfExperiment.this,timeRange);
            broadcast(signal);
          }
        }
        try {
          Thread.sleep(getStreamingInterval());
        }
 catch (        final InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  thread.start();
}","private synchronized void initializeStreamingMonitor(){
  if (fInitialized) {
    return;
  }
  fInitialized=true;
  if (getStreamingInterval() == 0) {
    final ITmfContext context=seekEvent(0);
    final ITmfEvent event=getNext(context);
    context.dispose();
    if (event == null) {
      return;
    }
    final TmfTimeRange timeRange=new TmfTimeRange(event.getTimestamp().clone(),TmfTimestamp.BIG_CRUNCH);
    final TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(this,this,timeRange);
    new Thread(){
      @Override public void run(){
        broadcast(signal);
      }
    }
.start();
    return;
  }
  final Thread thread=new Thread(""String_Node_Str"" + getName()){
    private ITmfTimestamp safeTimestamp=null;
    private ITmfTimestamp lastSafeTimestamp=null;
    private TmfTimeRange timeRange=null;
    @Override public void run(){
      while (!fExecutor.isShutdown()) {
        if (!getIndexer().isIndexing()) {
          ITmfTimestamp startTimestamp=TmfTimestamp.BIG_CRUNCH;
          ITmfTimestamp endTimestamp=TmfTimestamp.BIG_BANG;
          for (          final ITmfTrace<T> trace : fTraces) {
            if (trace.getStartTime().compareTo(startTimestamp) < 0) {
              startTimestamp=trace.getStartTime();
            }
            if (trace.getStreamingInterval() != 0 && trace.getEndTime().compareTo(endTimestamp) > 0) {
              endTimestamp=trace.getEndTime();
            }
          }
          if (safeTimestamp != null && (lastSafeTimestamp == null || safeTimestamp.compareTo(lastSafeTimestamp,false) > 0)) {
            timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
            lastSafeTimestamp=safeTimestamp;
          }
 else {
            timeRange=null;
          }
          safeTimestamp=endTimestamp;
          if (timeRange != null) {
            final TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(TmfExperiment.this,TmfExperiment.this,timeRange);
            broadcast(signal);
          }
        }
        try {
          Thread.sleep(getStreamingInterval());
        }
 catch (        final InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  thread.start();
}",0.9948046080867404
92135,"@Override protected synchronized ITmfContext armRequest(final ITmfDataRequest<T> request){
  if (fTraces == null) {
    return null;
  }
  if (request instanceof ITmfEventRequest<?> && !TmfTimestamp.BIG_BANG.equals(((ITmfEventRequest<T>)request).getRange().getStartTime()) && request.getIndex() == 0) {
    final ITmfContext context=seekEvent(((ITmfEventRequest<T>)request).getRange().getStartTime());
    ((ITmfEventRequest<T>)request).setStartIndex((int)context.getRank());
    return context;
  }
  if ((fExperimentContext != null) && fExperimentContext.getRank() == request.getIndex()) {
    return fExperimentContext;
  }
  return seekEvent(request.getIndex());
}","@Override protected synchronized ITmfContext armRequest(final ITmfDataRequest<T> request){
  if (fTraces == null) {
    return null;
  }
  if (request instanceof ITmfEventRequest<?> && !TmfTimestamp.BIG_BANG.equals(((ITmfEventRequest<T>)request).getRange().getStartTime()) && request.getIndex() == 0) {
    final ITmfContext context=seekEvent(((ITmfEventRequest<T>)request).getRange().getStartTime());
    ((ITmfEventRequest<T>)request).setStartIndex((int)context.getRank());
    return context;
  }
  return seekEvent(request.getIndex());
}",0.8949545078577337
92136,"@Override @SuppressWarnings(""String_Node_Str"") public synchronized T getNext(ITmfContext context){
  if (!(context instanceof TmfExperimentContext)) {
    return null;
  }
  if (fTraces == null) {
    return null;
  }
  TmfExperimentContext expContext=(TmfExperimentContext)context;
  final int lastTrace=expContext.getLastTrace();
  if (lastTrace != TmfExperimentContext.NO_TRACE) {
    final ITmfContext traceContext=expContext.getContexts()[lastTrace];
    expContext.getEvents()[lastTrace]=fTraces[lastTrace].getNext(traceContext);
    expContext.setLastTrace(TmfExperimentContext.NO_TRACE);
  }
  int trace=TmfExperimentContext.NO_TRACE;
  ITmfTimestamp timestamp=TmfTimestamp.BIG_CRUNCH;
  for (int i=0; i < fTraces.length; i++) {
    final ITmfEvent event=expContext.getEvents()[i];
    if (event != null && event.getTimestamp() != null) {
      final ITmfTimestamp otherTS=event.getTimestamp();
      if (otherTS.compareTo(timestamp,true) < 0) {
        trace=i;
        timestamp=otherTS;
      }
    }
  }
  T event=null;
  if (trace != TmfExperimentContext.NO_TRACE) {
    event=(T)expContext.getEvents()[trace];
    if (event != null) {
      updateAttributes(expContext,event.getTimestamp());
      expContext.increaseRank();
      expContext.setLastTrace(trace);
      final ITmfContext traceContext=expContext.getContexts()[trace];
      TmfExperimentLocation location=(TmfExperimentLocation)expContext.getLocation();
      if (location != null) {
        location.getLocation().getLocations()[trace]=traceContext.getLocation().clone();
      }
      fExperimentContext=expContext.clone();
      processEvent(event);
    }
  }
  return event;
}","@Override @SuppressWarnings(""String_Node_Str"") public synchronized T getNext(ITmfContext context){
  if (!(context instanceof TmfExperimentContext)) {
    return null;
  }
  if (fTraces == null) {
    return null;
  }
  TmfExperimentContext expContext=(TmfExperimentContext)context;
  final int lastTrace=expContext.getLastTrace();
  if (lastTrace != TmfExperimentContext.NO_TRACE) {
    final ITmfContext traceContext=expContext.getContexts()[lastTrace];
    expContext.getEvents()[lastTrace]=fTraces[lastTrace].getNext(traceContext);
    expContext.setLastTrace(TmfExperimentContext.NO_TRACE);
  }
  int trace=TmfExperimentContext.NO_TRACE;
  ITmfTimestamp timestamp=TmfTimestamp.BIG_CRUNCH;
  for (int i=0; i < fTraces.length; i++) {
    final ITmfEvent event=expContext.getEvents()[i];
    if (event != null && event.getTimestamp() != null) {
      final ITmfTimestamp otherTS=event.getTimestamp();
      if (otherTS.compareTo(timestamp,true) < 0) {
        trace=i;
        timestamp=otherTS;
      }
    }
  }
  T event=null;
  if (trace != TmfExperimentContext.NO_TRACE) {
    event=(T)expContext.getEvents()[trace];
    if (event != null) {
      updateAttributes(expContext,event.getTimestamp());
      expContext.increaseRank();
      expContext.setLastTrace(trace);
      final ITmfContext traceContext=expContext.getContexts()[trace];
      TmfExperimentLocation location=(TmfExperimentLocation)expContext.getLocation();
      if (location != null) {
        location.getLocation().getLocations()[trace]=traceContext.getLocation().clone();
      }
      processEvent(event);
    }
  }
  return event;
}",0.9862511457378552
92137,"/** 
 * Returns the timestamp of the event at the requested index. If none, returns null.
 * @param index the event index (rank)
 * @return the corresponding event timestamp
 */
public ITmfTimestamp getTimestamp(final int index){
  final ITmfContext context=seekEvent(index);
  final ITmfEvent event=getNext(context);
  return (event != null) ? event.getTimestamp() : null;
}","/** 
 * Returns the timestamp of the event at the requested index. If none, returns null.
 * @param index the event index (rank)
 * @return the corresponding event timestamp
 */
public ITmfTimestamp getTimestamp(final int index){
  final ITmfContext context=seekEvent(index);
  final ITmfEvent event=getNext(context);
  context.dispose();
  return (event != null) ? event.getTimestamp() : null;
}",0.9727626459143968
92138,"@Override public synchronized ITmfContext seekEvent(final ITmfTimestamp timestamp){
  if (timestamp == null) {
    ITmfContext context=seekEvent((ITmfLocation<?>)null);
    context.setRank(0);
    return context;
  }
  ITmfContext context=fIndexer.seekIndex(timestamp);
  final ITmfContext nextEventContext=context.clone();
  ITmfEvent event=getNext(nextEventContext);
  while (event != null && event.getTimestamp().compareTo(timestamp,false) < 0) {
    context=nextEventContext.clone();
    event=getNext(nextEventContext);
  }
  if (event == null) {
    context.setLocation(null);
    context.setRank(ITmfContext.UNKNOWN_RANK);
  }
  return context;
}","@Override public synchronized ITmfContext seekEvent(final ITmfTimestamp timestamp){
  if (timestamp == null) {
    ITmfContext context=seekEvent((ITmfLocation<?>)null);
    context.setRank(0);
    return context;
  }
  ITmfContext context=fIndexer.seekIndex(timestamp);
  final ITmfContext nextEventContext=context.clone();
  ITmfEvent event=getNext(nextEventContext);
  while (event != null && event.getTimestamp().compareTo(timestamp,false) < 0) {
    context.dispose();
    context=nextEventContext.clone();
    event=getNext(nextEventContext);
  }
  nextEventContext.dispose();
  if (event == null) {
    context.setLocation(null);
    context.setRank(ITmfContext.UNKNOWN_RANK);
  }
  return context;
}",0.9610007358351728
92139,"@Override public synchronized CustomTxtEvent getNext(final ITmfContext context){
  final ITmfContext savedContext=context.clone();
  final CustomTxtEvent event=parse(context);
  if (event != null) {
    updateAttributes(savedContext,event.getTimestamp());
    context.increaseRank();
  }
  return event;
}","@Override public synchronized CustomTxtEvent getNext(final ITmfContext context){
  final ITmfContext savedContext=new TmfContext(context.getLocation(),context.getRank());
  final CustomTxtEvent event=parse(context);
  if (event != null) {
    updateAttributes(savedContext,event.getTimestamp());
    context.increaseRank();
  }
  return event;
}",0.92
92140,"@Override public synchronized CustomXmlEvent getNext(final ITmfContext context){
  final ITmfContext savedContext=context.clone();
  final CustomXmlEvent event=parse(context);
  if (event != null) {
    updateAttributes(savedContext,event.getTimestamp());
    context.increaseRank();
  }
  return event;
}","@Override public synchronized CustomXmlEvent getNext(final ITmfContext context){
  final ITmfContext savedContext=new TmfContext(context.getLocation(),context.getRank());
  final CustomXmlEvent event=parse(context);
  if (event != null) {
    updateAttributes(savedContext,event.getTimestamp());
    context.increaseRank();
  }
  return event;
}",0.92
92141,"/** 
 * Handler for the time synch signal.
 * @param signal The incoming signal
 */
@SuppressWarnings(""String_Node_Str"") @TmfSignalHandler public void currentTimeUpdated(final TmfTimeSynchSignal signal){
  if ((signal.getSource() != this) && (fTrace != null) && (!fTable.isDisposed())) {
    final TmfDataRequest<ITmfEvent> subRequest=new TmfDataRequest<ITmfEvent>(ITmfEvent.class,0,1,ExecutionType.FOREGROUND){
      TmfTimestamp ts=new TmfTimestamp(signal.getCurrentTime());
      @Override public void handleData(      final ITmfEvent event){
        super.handleData(event);
      }
      @Override public void handleCompleted(){
        super.handleCompleted();
        if (fTrace == null) {
          return;
        }
        ITmfTimestamp timestamp=ts;
        if (timestamp.compareTo(fTrace.getStartTime(),true) == -1) {
          timestamp=fTrace.getStartTime();
        }
        if (timestamp.compareTo(fTrace.getEndTime(),true) == 1) {
          timestamp=fTrace.getEndTime();
        }
        final ITmfContext context=fTrace.seekEvent(timestamp);
        final long rank=context.getRank();
        fSelectedRank=rank;
        fTable.getDisplay().asyncExec(new Runnable(){
          @Override public void run(){
            if (fTable.isDisposed()) {
              return;
            }
            int index=(int)rank;
            if (fTable.isDisposed()) {
              return;
            }
            if (fTable.getData(Key.FILTER_OBJ) != null) {
              index=fCache.getFilteredEventIndex(rank) + 1;
            }
            fTable.setSelection(index + 1);
            fRawViewer.selectAndReveal(rank);
          }
        }
);
      }
    }
;
    ((ITmfDataProvider<ITmfEvent>)fTrace).sendRequest(subRequest);
  }
}","/** 
 * Handler for the time synch signal.
 * @param signal The incoming signal
 */
@SuppressWarnings(""String_Node_Str"") @TmfSignalHandler public void currentTimeUpdated(final TmfTimeSynchSignal signal){
  if ((signal.getSource() != this) && (fTrace != null) && (!fTable.isDisposed())) {
    final TmfDataRequest<ITmfEvent> subRequest=new TmfDataRequest<ITmfEvent>(ITmfEvent.class,0,1,ExecutionType.FOREGROUND){
      TmfTimestamp ts=new TmfTimestamp(signal.getCurrentTime());
      @Override public void handleData(      final ITmfEvent event){
        super.handleData(event);
      }
      @Override public void handleCompleted(){
        super.handleCompleted();
        if (fTrace == null) {
          return;
        }
        ITmfTimestamp timestamp=ts;
        if (timestamp.compareTo(fTrace.getStartTime(),true) == -1) {
          timestamp=fTrace.getStartTime();
        }
        if (timestamp.compareTo(fTrace.getEndTime(),true) == 1) {
          timestamp=fTrace.getEndTime();
        }
        final ITmfContext context=fTrace.seekEvent(timestamp);
        final long rank=context.getRank();
        context.dispose();
        fSelectedRank=rank;
        fTable.getDisplay().asyncExec(new Runnable(){
          @Override public void run(){
            if (fTable.isDisposed()) {
              return;
            }
            int index=(int)rank;
            if (fTable.isDisposed()) {
              return;
            }
            if (fTable.getData(Key.FILTER_OBJ) != null) {
              index=fCache.getFilteredEventIndex(rank) + 1;
            }
            fTable.setSelection(index + 1);
            fRawViewer.selectAndReveal(rank);
          }
        }
);
      }
    }
;
    ((ITmfDataProvider<ITmfEvent>)fTrace).sendRequest(subRequest);
  }
}",0.9923230025589992
92142,"@Override public void handleCompleted(){
  super.handleCompleted();
  if (fTrace == null) {
    return;
  }
  ITmfTimestamp timestamp=ts;
  if (timestamp.compareTo(fTrace.getStartTime(),true) == -1) {
    timestamp=fTrace.getStartTime();
  }
  if (timestamp.compareTo(fTrace.getEndTime(),true) == 1) {
    timestamp=fTrace.getEndTime();
  }
  final ITmfContext context=fTrace.seekEvent(timestamp);
  final long rank=context.getRank();
  fSelectedRank=rank;
  fTable.getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTable.isDisposed()) {
        return;
      }
      int index=(int)rank;
      if (fTable.isDisposed()) {
        return;
      }
      if (fTable.getData(Key.FILTER_OBJ) != null) {
        index=fCache.getFilteredEventIndex(rank) + 1;
      }
      fTable.setSelection(index + 1);
      fRawViewer.selectAndReveal(rank);
    }
  }
);
}","@Override public void handleCompleted(){
  super.handleCompleted();
  if (fTrace == null) {
    return;
  }
  ITmfTimestamp timestamp=ts;
  if (timestamp.compareTo(fTrace.getStartTime(),true) == -1) {
    timestamp=fTrace.getStartTime();
  }
  if (timestamp.compareTo(fTrace.getEndTime(),true) == 1) {
    timestamp=fTrace.getEndTime();
  }
  final ITmfContext context=fTrace.seekEvent(timestamp);
  final long rank=context.getRank();
  context.dispose();
  fSelectedRank=rank;
  fTable.getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTable.isDisposed()) {
        return;
      }
      int index=(int)rank;
      if (fTable.isDisposed()) {
        return;
      }
      if (fTable.getData(Key.FILTER_OBJ) != null) {
        index=fCache.getFilteredEventIndex(rank) + 1;
      }
      fTable.setSelection(index + 1);
      fRawViewer.selectAndReveal(rank);
    }
  }
);
}",0.9882747068676716
92143,"/** 
 * Adds a view list of managed view list. 
 * @param viewId Id of SD view to add and to manage
 */
public void add(String viewId){
  if (fViews.isEmpty()) {
    initialize();
  }
  if (!fViews.contains(viewId)) {
    fViews.add(viewId);
  }
}","/** 
 * Adds a view list of managed view list.
 * @param viewId Id of SD view to add and to manage
 */
public void add(String viewId){
  if (fViews.isEmpty()) {
    initialize();
  }
  if (!fViews.contains(viewId)) {
    fViews.add(viewId);
  }
}",0.9979716024340772
92144,"/** 
 * Enable / disable find action
 * @param enabled <code>true</code> for enabling else <code>false</code>  
 */
public void setFindEnabled(boolean enabled){
  if (fFindForKeyBinding != null) {
    fFindForKeyBinding.setEnabled(enabled);
  }
}","/** 
 * Enable / disable find action
 * @param enabled <code>true</code> for enabling else <code>false</code>
 */
public void setFindEnabled(boolean enabled){
  if (fFindForKeyBinding != null) {
    fFindForKeyBinding.setEnabled(enabled);
  }
}",0.9959183673469388
92145,"private void dispose(){
  IHandlerService service=(IHandlerService)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getService(IHandlerService.class);
  for (  IHandlerActivation activation : fHandlerActivations) {
    service.deactivateHandler(activation);
  }
  fGoToMessageForKeyBinding=null;
  fFindForKeyBinding=null;
  fMoveUpForKeyBinding=null;
  fMoveDownForKeyBinding=null;
  fMoveLeftForKeyBinding=null;
  fMoveRightForKeyBinding=null;
  fShowNodeStartForKeyBinding=null;
  fShowNodeEndForKeyBinding=null;
}","private void dispose(){
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null) {
    return;
  }
  IHandlerService service=(IHandlerService)window.getService(IHandlerService.class);
  for (  IHandlerActivation activation : fHandlerActivations) {
    service.deactivateHandler(activation);
  }
  fGoToMessageForKeyBinding=null;
  fFindForKeyBinding=null;
  fMoveUpForKeyBinding=null;
  fMoveDownForKeyBinding=null;
  fMoveLeftForKeyBinding=null;
  fMoveRightForKeyBinding=null;
  fShowNodeStartForKeyBinding=null;
  fShowNodeEndForKeyBinding=null;
}",0.8082437275985663
92146,"/** 
 * Constructor 
 */
protected KeyBindingsManager(){
}","/** 
 * Constructor
 */
protected KeyBindingsManager(){
}",0.991304347826087
92147,"/** 
 * Set the view in all supported actions 
 * @param view to set in global actions
 */
public void setSdView(SDView view){
  if (!fViews.isEmpty()) {
    fGoToMessageForKeyBinding.setView(view);
    fFindForKeyBinding.setView(view);
    fMoveUpForKeyBinding.setView(view);
    fMoveDownForKeyBinding.setView(view);
    fMoveLeftForKeyBinding.setView(view);
    fMoveRightForKeyBinding.setView(view);
    fShowNodeStartForKeyBinding.setView(view);
    fShowNodeEndForKeyBinding.setView(view);
  }
}","/** 
 * Set the view in all supported actions
 * @param view to set in global actions
 */
public void setSdView(SDView view){
  if (!fViews.isEmpty()) {
    fGoToMessageForKeyBinding.setView(view);
    fFindForKeyBinding.setView(view);
    fMoveUpForKeyBinding.setView(view);
    fMoveDownForKeyBinding.setView(view);
    fMoveLeftForKeyBinding.setView(view);
    fMoveRightForKeyBinding.setView(view);
    fShowNodeStartForKeyBinding.setView(view);
    fShowNodeEndForKeyBinding.setView(view);
  }
}",0.999000999000999
92148,"@Override public void dispose(){
  super.dispose();
  fLock.lock();
  try {
    PlatformUI.getWorkbench().getActiveWorkbenchWindow().getSelectionService().removePostSelectionListener(this);
    fView.setSDFindProvider(null);
    fView.setSDPagingProvider(null);
    fView.setSDFilterProvider(null);
    fView=null;
  }
  finally {
    fLock.unlock();
  }
}","@Override public void dispose(){
  super.dispose();
  fLock.lock();
  try {
    IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    if (window != null) {
      window.getSelectionService().removePostSelectionListener(this);
    }
    fView.setSDFindProvider(null);
    fView.setSDPagingProvider(null);
    fView.setSDFilterProvider(null);
    fView=null;
  }
  finally {
    fLock.unlock();
  }
}",0.9104859335038364
92149,"public TmfStringLocation(TmfStringLocation other){
  super(other.getLocationInfo());
}","/** 
 * @param other the other location
 */
public TmfStringLocation(TmfStringLocation other){
  super(other.getLocationInfo());
}",0.7962962962962963
92150,"@Override public TmfStringLocation clone(){
  return new TmfStringLocation((String)getLocationInfo());
}","@Override public TmfStringLocation clone(){
  TmfStringLocation clone=null;
  clone=(TmfStringLocation)super.clone();
  return clone;
}",0.702928870292887
92151,@Override public abstract TmfLocation clone();,"@Override public TmfLocation clone(){
  TmfLocation clone=null;
  try {
    clone=(TmfLocation)super.clone();
    clone.fLocationInfo=cloneLocationInfo();
  }
 catch (  CloneNotSupportedException e) {
  }
  return clone;
}",0.2686567164179104
92152,"@Override public TmfLongLocation clone(){
  return new TmfLongLocation((Long)getLocationInfo());
}","@Override public TmfLongLocation clone(){
  TmfLongLocation clone=null;
  clone=(TmfLongLocation)super.clone();
  return clone;
}",0.6872246696035242
92153,"@Override public TmfTimestampLocation clone(){
  return new TmfTimestampLocation((ITmfTimestamp)getLocationInfo());
}","@Override public TmfTimestampLocation clone(){
  TmfTimestampLocation clone=null;
  clone=(TmfTimestampLocation)super.clone();
  return clone;
}",0.735632183908046
92154,"@Override public TmfStringLocation clone(){
  TmfStringLocation clone=null;
  clone=(TmfStringLocation)super.clone();
  return clone;
}","@Override public TmfStringLocation clone(){
  return (TmfStringLocation)super.clone();
}",0.7623318385650224
92155,"@Override public TmfLongLocation clone(){
  TmfLongLocation clone=null;
  clone=(TmfLongLocation)super.clone();
  return clone;
}","@Override public TmfLongLocation clone(){
  return (TmfLongLocation)super.clone();
}",0.7511737089201878
92156,"@Override public TmfTimestampLocation clone(){
  TmfTimestampLocation clone=null;
  clone=(TmfTimestampLocation)super.clone();
  return clone;
}","@Override public TmfTimestampLocation clone(){
  return (TmfTimestampLocation)super.clone();
}",0.7647058823529411
92157,"public static HashMap<String,ArrayList<String>> loadEventList(ILaunchConfiguration config){
  HashMap<String,ArrayList<String>> events=new HashMap<String,ArrayList<String>>();
  IProject project=null;
  if (config == null) {
    if (!PerfCore.checkPerfInPath()) {
      return events;
    }
  }
 else {
    ConfigUtils configUtils=new ConfigUtils(config);
    try {
      project=ConfigUtils.getProject(configUtils.getProjectName());
    }
 catch (    CoreException e1) {
      e1.printStackTrace();
    }
    if (!PerfCore.checkRemotePerfInPath(project)) {
      return events;
    }
  }
  Process p=null;
  BufferedReader input=null;
  try {
    p=RuntimeProcessFactory.getFactory().exec(new String[]{PerfPlugin.PERF_COMMAND,""String_Node_Str""},project);
    input=new BufferedReader(new InputStreamReader(p.getInputStream()));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  String line;
  try {
    while ((line=input.readLine()) != null) {
      if (line.contains(""String_Node_Str"")) {
        String event;
        String cat;
        if (line.contains(PerfPlugin.STRINGS_HWBREAKPOINTS)) {
          cat=PerfPlugin.STRINGS_HWBREAKPOINTS;
          event=line.substring(1,line.indexOf(""String_Node_Str"",0)).trim();
        }
 else         if (line.contains(PerfPlugin.STRINGS_RAWHWEvents)) {
          cat=PerfPlugin.STRINGS_RAWHWEvents;
          event=line.substring(1,line.indexOf(""String_Node_Str"",0)).trim();
        }
 else {
          event=line.substring(1,line.indexOf(""String_Node_Str"",0)).trim();
          if (event.contains(""String_Node_Str"")) {
            event=event.split(""String_Node_Str"")[0];
          }
          cat=line.replaceFirst(""String_Node_Str"",""String_Node_Str"").trim();
        }
        ArrayList<String> catevs=events.get(cat);
        if (catevs == null) {
          catevs=new ArrayList<String>();
          events.put(cat,catevs);
        }
        catevs.add(event.trim());
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (null != input) {
      try {
        input.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return events;
}","public static HashMap<String,ArrayList<String>> loadEventList(ILaunchConfiguration config){
  HashMap<String,ArrayList<String>> events=new HashMap<String,ArrayList<String>>();
  IProject project=null;
  if (config == null) {
    if (!PerfCore.checkPerfInPath()) {
      return events;
    }
  }
 else {
    ConfigUtils configUtils=new ConfigUtils(config);
    try {
      String projectName=configUtils.getProjectName();
      if (projectName != null && !projectName.equals(""String_Node_Str"")) {
        project=ConfigUtils.getProject(projectName);
      }
    }
 catch (    CoreException e1) {
      e1.printStackTrace();
    }
    if (!PerfCore.checkRemotePerfInPath(project)) {
      return events;
    }
  }
  Process p=null;
  BufferedReader input=null;
  try {
    p=RuntimeProcessFactory.getFactory().exec(new String[]{PerfPlugin.PERF_COMMAND,""String_Node_Str""},project);
    input=new BufferedReader(new InputStreamReader(p.getInputStream()));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  String line;
  try {
    while ((line=input.readLine()) != null) {
      if (line.contains(""String_Node_Str"")) {
        String event;
        String cat;
        if (line.contains(PerfPlugin.STRINGS_HWBREAKPOINTS)) {
          cat=PerfPlugin.STRINGS_HWBREAKPOINTS;
          event=line.substring(1,line.indexOf(""String_Node_Str"",0)).trim();
        }
 else         if (line.contains(PerfPlugin.STRINGS_RAWHWEvents)) {
          cat=PerfPlugin.STRINGS_RAWHWEvents;
          event=line.substring(1,line.indexOf(""String_Node_Str"",0)).trim();
        }
 else {
          event=line.substring(1,line.indexOf(""String_Node_Str"",0)).trim();
          if (event.contains(""String_Node_Str"")) {
            event=event.split(""String_Node_Str"")[0];
          }
          cat=line.replaceFirst(""String_Node_Str"",""String_Node_Str"").trim();
        }
        ArrayList<String> catevs=events.get(cat);
        if (catevs == null) {
          catevs=new ArrayList<String>();
          events.put(cat,catevs);
        }
        catevs.add(event.trim());
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (null != input) {
      try {
        input.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return events;
}",0.9631305134584937
92158,"/** 
 * @param config
 * @return the name of the host in which the config's project is stored
 */
private static String getHostName(ILaunchConfiguration config){
  String projectName=null;
  try {
    projectName=config.getAttribute(ICDTLaunchConfigurationConstants.ATTR_PROJECT_NAME,""String_Node_Str"");
  }
 catch (  CoreException e) {
    return null;
  }
  if (projectName == null) {
    return null;
  }
  IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
  if (project == null) {
    return null;
  }
  return project.getLocationURI().getHost();
}","/** 
 * @param config
 * @return the name of the host in which the config's project is stored
 */
private static String getHostName(ILaunchConfiguration config){
  String projectName=null;
  try {
    projectName=config.getAttribute(ICDTLaunchConfigurationConstants.ATTR_PROJECT_NAME,""String_Node_Str"");
  }
 catch (  CoreException e) {
    return null;
  }
  if (projectName.equals(""String_Node_Str"")) {
    return null;
  }
  IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
  if (project == null) {
    return null;
  }
  return project.getLocationURI().getHost();
}",0.9713804713804712
92159,"protected IProject getProject(ILaunchConfiguration config){
  String name=null;
  try {
    name=config.getAttribute(ICDTLaunchConfigurationConstants.ATTR_PROJECT_NAME,EMPTY_STRING);
  }
 catch (  CoreException e) {
    return null;
  }
  if (name == null) {
    return null;
  }
  return ResourcesPlugin.getWorkspace().getRoot().getProject(name);
}","protected IProject getProject(ILaunchConfiguration config){
  String name=null;
  try {
    name=config.getAttribute(ICDTLaunchConfigurationConstants.ATTR_PROJECT_NAME,EMPTY_STRING);
  }
 catch (  CoreException e) {
    return null;
  }
  if (name.equals(EMPTY_STRING)) {
    return null;
  }
  return ResourcesPlugin.getWorkspace().getRoot().getProject(name);
}",0.959212376933896
92160,"/** 
 * Returns a map of name and value providing additional information to display in the tool tip for this event.
 * @param event the time event
 * @return a map of tool tip information
 */
public Map<String,String> getEventHoverToolTipInfo(ITimeEvent event);","/** 
 * Returns a map of name and value providing additional information to display in the tool tip for this event.
 * @param event the time event
 * @param hoverTime the time corresponding to the mouse hover position
 * @return a map of tool tip information
 * @since 2.0
 */
public Map<String,String> getEventHoverToolTipInfo(ITimeEvent event,long hoverTime);",0.7234726688102894
92161,"@Override public void buildIndex(final long offset,final TmfTimeRange range,final boolean waitForCompletion){
synchronized (fTraceIndex) {
    if (fIsIndexing) {
      return;
    }
    fIsIndexing=true;
  }
  final Job job=new Job(""String_Node_Str"" + fTrace.getName() + ""String_Node_Str""){
    @Override protected IStatus run(    final IProgressMonitor monitor){
      while (!monitor.isCanceled()) {
        try {
          Thread.sleep(100);
        }
 catch (        final InterruptedException e) {
          return Status.OK_STATUS;
        }
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
  fIndexingRequest=new TmfEventRequest<ITmfEvent>(ITmfEvent.class,range,offset,TmfDataRequest.ALL_DATA,fCheckpointInterval,ITmfDataRequest.ExecutionType.BACKGROUND){
    private ITmfTimestamp startTime=null;
    private ITmfTimestamp lastTime=null;
    @Override public void handleData(    final ITmfEvent event){
      super.handleData(event);
      if (event != null) {
        final ITmfTimestamp timestamp=event.getTimestamp();
        if (startTime == null) {
          startTime=timestamp.clone();
        }
        lastTime=timestamp.clone();
        if ((getNbRead() % fCheckpointInterval) == 0) {
          updateTraceStatus();
        }
      }
    }
    @Override public void handleSuccess(){
      updateTraceStatus();
    }
    @Override public void handleCompleted(){
      job.cancel();
      super.handleCompleted();
      fIsIndexing=false;
    }
    private void updateTraceStatus(){
      if (getNbRead() != 0) {
        signalNewTimeRange(startTime,lastTime);
      }
    }
  }
;
  fTrace.sendRequest(fIndexingRequest);
  if (waitForCompletion) {
    try {
      fIndexingRequest.waitForCompletion();
    }
 catch (    final InterruptedException e) {
    }
  }
}","@Override public void buildIndex(final long offset,final TmfTimeRange range,final boolean waitForCompletion){
synchronized (fTraceIndex) {
    if (fIsIndexing) {
      return;
    }
    fIsIndexing=true;
  }
  final Job job=new Job(""String_Node_Str"" + fTrace.getName() + ""String_Node_Str""){
    @Override protected IStatus run(    final IProgressMonitor monitor){
      while (!monitor.isCanceled()) {
        try {
          Thread.sleep(100);
        }
 catch (        final InterruptedException e) {
          return Status.OK_STATUS;
        }
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
  fIndexingRequest=new TmfEventRequest<ITmfEvent>(ITmfEvent.class,range,offset,TmfDataRequest.ALL_DATA,fCheckpointInterval,ITmfDataRequest.ExecutionType.BACKGROUND){
    @Override public void handleData(    final ITmfEvent event){
      super.handleData(event);
      if (event != null) {
        if ((getNbRead() % fCheckpointInterval) == 0) {
          updateTraceStatus();
        }
      }
    }
    @Override public void handleSuccess(){
      updateTraceStatus();
    }
    @Override public void handleCompleted(){
      job.cancel();
      super.handleCompleted();
      fIsIndexing=false;
    }
    private void updateTraceStatus(){
      if (fTrace.getNbEvents() > 0) {
        signalNewTimeRange(fTrace.getStartTime(),fTrace.getEndTime());
      }
    }
  }
;
  fTrace.sendRequest(fIndexingRequest);
  if (waitForCompletion) {
    try {
      fIndexingRequest.waitForCompletion();
    }
 catch (    final InterruptedException e) {
    }
  }
}",0.88042203985932
92162,"@Override public void handleData(final ITmfEvent event){
  super.handleData(event);
  if (event != null) {
    final ITmfTimestamp timestamp=event.getTimestamp();
    if (startTime == null) {
      startTime=timestamp.clone();
    }
    lastTime=timestamp.clone();
    if ((getNbRead() % fCheckpointInterval) == 0) {
      updateTraceStatus();
    }
  }
}","@Override public void handleData(final ITmfEvent event){
  super.handleData(event);
  if (event != null) {
    if ((getNbRead() % fCheckpointInterval) == 0) {
      updateTraceStatus();
    }
  }
}",0.7137681159420289
92163,"private void updateTraceStatus(){
  if (getNbRead() != 0) {
    signalNewTimeRange(startTime,lastTime);
  }
}","private void updateTraceStatus(){
  if (fTrace.getNbEvents() > 0) {
    signalNewTimeRange(fTrace.getStartTime(),fTrace.getEndTime());
  }
}",0.8112449799196787
92164,"public void testTmfCoalescedDataRequestIndexNbRequested(){
  TmfCoalescedDataRequest<TmfEvent> request=new TmfCoalescedDataRequest<TmfEvent>(TmfEvent.class,10,100);
  assertEquals(""String_Node_Str"",fRequestCount++,request.getRequestId());
  assertEquals(""String_Node_Str"",TmfEvent.class,request.getDataType());
  assertEquals(""String_Node_Str"",10,request.getIndex());
  assertEquals(""String_Node_Str"",100,request.getNbRequested());
  assertFalse(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isFailed());
  assertFalse(""String_Node_Str"",request.isCancelled());
  assertEquals(""String_Node_Str"",0,request.getNbRead());
}","public void testTmfCoalescedDataRequestIndexNbRequested(){
  TmfCoalescedDataRequest<TmfEvent> request=new TmfCoalescedDataRequest<TmfEvent>(TmfEvent.class,10,100);
  assertEquals(""String_Node_Str"",fRequestCount++,request.getRequestId());
  assertEquals(""String_Node_Str"",ITmfEvent.class,request.getDataType());
  assertEquals(""String_Node_Str"",10,request.getIndex());
  assertEquals(""String_Node_Str"",100,request.getNbRequested());
  assertFalse(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isFailed());
  assertFalse(""String_Node_Str"",request.isCancelled());
  assertEquals(""String_Node_Str"",0,request.getNbRead());
}",0.9992372234935164
92165,"public void testTmfCoalescedDataRequestIndexNbEventsBlocksize(){
  TmfCoalescedDataRequest<TmfEvent> request=new TmfCoalescedDataRequest<TmfEvent>(TmfEvent.class,10,100,200);
  assertEquals(""String_Node_Str"",fRequestCount++,request.getRequestId());
  assertEquals(""String_Node_Str"",TmfEvent.class,request.getDataType());
  assertEquals(""String_Node_Str"",10,request.getIndex());
  assertEquals(""String_Node_Str"",100,request.getNbRequested());
  assertFalse(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isFailed());
  assertFalse(""String_Node_Str"",request.isCancelled());
  assertEquals(""String_Node_Str"",0,request.getNbRead());
}","public void testTmfCoalescedDataRequestIndexNbEventsBlocksize(){
  TmfCoalescedDataRequest<TmfEvent> request=new TmfCoalescedDataRequest<TmfEvent>(TmfEvent.class,10,100,200);
  assertEquals(""String_Node_Str"",fRequestCount++,request.getRequestId());
  assertEquals(""String_Node_Str"",ITmfEvent.class,request.getDataType());
  assertEquals(""String_Node_Str"",10,request.getIndex());
  assertEquals(""String_Node_Str"",100,request.getNbRequested());
  assertFalse(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isFailed());
  assertFalse(""String_Node_Str"",request.isCancelled());
  assertEquals(""String_Node_Str"",0,request.getNbRead());
}",0.9992486851990984
92166,"public void testTmfCoalescedDataRequestIndex(){
  TmfCoalescedDataRequest<TmfEvent> request=new TmfCoalescedDataRequest<TmfEvent>(TmfEvent.class,10);
  assertEquals(""String_Node_Str"",fRequestCount++,request.getRequestId());
  assertEquals(""String_Node_Str"",TmfEvent.class,request.getDataType());
  assertEquals(""String_Node_Str"",10,request.getIndex());
  assertEquals(""String_Node_Str"",TmfDataRequest.ALL_DATA,request.getNbRequested());
  assertFalse(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isFailed());
  assertFalse(""String_Node_Str"",request.isCancelled());
  assertEquals(""String_Node_Str"",0,request.getNbRead());
}","public void testTmfCoalescedDataRequestIndex(){
  TmfCoalescedDataRequest<TmfEvent> request=new TmfCoalescedDataRequest<TmfEvent>(TmfEvent.class,10);
  assertEquals(""String_Node_Str"",fRequestCount++,request.getRequestId());
  assertEquals(""String_Node_Str"",ITmfEvent.class,request.getDataType());
  assertEquals(""String_Node_Str"",10,request.getIndex());
  assertEquals(""String_Node_Str"",TmfDataRequest.ALL_DATA,request.getNbRequested());
  assertFalse(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isFailed());
  assertFalse(""String_Node_Str"",request.isCancelled());
  assertEquals(""String_Node_Str"",0,request.getNbRead());
}",0.9992429977289932
92167,"public void testTmfCoalescedDataRequest(){
  TmfCoalescedDataRequest<TmfEvent> request=new TmfCoalescedDataRequest<TmfEvent>(TmfEvent.class);
  assertEquals(""String_Node_Str"",fRequestCount++,request.getRequestId());
  assertEquals(""String_Node_Str"",TmfEvent.class,request.getDataType());
  assertEquals(""String_Node_Str"",0,request.getIndex());
  assertEquals(""String_Node_Str"",TmfDataRequest.ALL_DATA,request.getNbRequested());
  assertFalse(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isFailed());
  assertFalse(""String_Node_Str"",request.isCancelled());
  assertEquals(""String_Node_Str"",0,request.getNbRead());
}","public void testTmfCoalescedDataRequest(){
  TmfCoalescedDataRequest<TmfEvent> request=new TmfCoalescedDataRequest<TmfEvent>(TmfEvent.class);
  assertEquals(""String_Node_Str"",fRequestCount++,request.getRequestId());
  assertEquals(""String_Node_Str"",ITmfEvent.class,request.getDataType());
  assertEquals(""String_Node_Str"",0,request.getIndex());
  assertEquals(""String_Node_Str"",TmfDataRequest.ALL_DATA,request.getNbRequested());
  assertFalse(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isFailed());
  assertFalse(""String_Node_Str"",request.isCancelled());
  assertEquals(""String_Node_Str"",0,request.getNbRead());
}",0.9992325402916348
92168,"public void testTmfCoalescedEventRequestIndexNbRequested(){
  TmfCoalescedEventRequest<TmfEvent> request=new TmfCoalescedEventRequest<TmfEvent>(TmfEvent.class,range1,100);
  assertEquals(""String_Node_Str"",fRequestCount++,request.getRequestId());
  assertEquals(""String_Node_Str"",TmfEvent.class,request.getDataType());
  assertEquals(""String_Node_Str"",range1,request.getRange());
  assertEquals(""String_Node_Str"",100,request.getNbRequested());
  assertFalse(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isFailed());
  assertFalse(""String_Node_Str"",request.isCancelled());
  assertEquals(""String_Node_Str"",0,request.getNbRead());
}","public void testTmfCoalescedEventRequestIndexNbRequested(){
  TmfCoalescedEventRequest<TmfEvent> request=new TmfCoalescedEventRequest<TmfEvent>(TmfEvent.class,range1,100);
  assertEquals(""String_Node_Str"",fRequestCount++,request.getRequestId());
  assertEquals(""String_Node_Str"",ITmfEvent.class,request.getDataType());
  assertEquals(""String_Node_Str"",range1,request.getRange());
  assertEquals(""String_Node_Str"",100,request.getNbRequested());
  assertFalse(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isFailed());
  assertFalse(""String_Node_Str"",request.isCancelled());
  assertEquals(""String_Node_Str"",0,request.getNbRead());
}",0.9992498124531132
92169,"public void testTmfCoalescedEventRequest(){
  TmfCoalescedEventRequest<TmfEvent> request=new TmfCoalescedEventRequest<TmfEvent>(TmfEvent.class);
  assertEquals(""String_Node_Str"",fRequestCount++,request.getRequestId());
  assertEquals(""String_Node_Str"",TmfEvent.class,request.getDataType());
  assertEquals(""String_Node_Str"",range1,request.getRange());
  assertEquals(""String_Node_Str"",TmfDataRequest.ALL_DATA,request.getNbRequested());
  assertFalse(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isFailed());
  assertFalse(""String_Node_Str"",request.isCancelled());
  assertEquals(""String_Node_Str"",0,request.getNbRead());
}","public void testTmfCoalescedEventRequest(){
  TmfCoalescedEventRequest<TmfEvent> request=new TmfCoalescedEventRequest<TmfEvent>(TmfEvent.class);
  assertEquals(""String_Node_Str"",fRequestCount++,request.getRequestId());
  assertEquals(""String_Node_Str"",ITmfEvent.class,request.getDataType());
  assertEquals(""String_Node_Str"",range1,request.getRange());
  assertEquals(""String_Node_Str"",TmfDataRequest.ALL_DATA,request.getNbRequested());
  assertFalse(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isFailed());
  assertFalse(""String_Node_Str"",request.isCancelled());
  assertEquals(""String_Node_Str"",0,request.getNbRead());
}",0.9992418498862776
92170,"public void testTmfCoalescedEventRequestIndex(){
  TmfCoalescedEventRequest<TmfEvent> request=new TmfCoalescedEventRequest<TmfEvent>(TmfEvent.class,range1);
  assertEquals(""String_Node_Str"",fRequestCount++,request.getRequestId());
  assertEquals(""String_Node_Str"",TmfEvent.class,request.getDataType());
  assertEquals(""String_Node_Str"",range1,request.getRange());
  assertEquals(""String_Node_Str"",TmfDataRequest.ALL_DATA,request.getNbRequested());
  assertFalse(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isFailed());
  assertFalse(""String_Node_Str"",request.isCancelled());
  assertEquals(""String_Node_Str"",0,request.getNbRead());
}","public void testTmfCoalescedEventRequestIndex(){
  TmfCoalescedEventRequest<TmfEvent> request=new TmfCoalescedEventRequest<TmfEvent>(TmfEvent.class,range1);
  assertEquals(""String_Node_Str"",fRequestCount++,request.getRequestId());
  assertEquals(""String_Node_Str"",ITmfEvent.class,request.getDataType());
  assertEquals(""String_Node_Str"",range1,request.getRange());
  assertEquals(""String_Node_Str"",TmfDataRequest.ALL_DATA,request.getNbRequested());
  assertFalse(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isFailed());
  assertFalse(""String_Node_Str"",request.isCancelled());
  assertEquals(""String_Node_Str"",0,request.getNbRead());
}",0.9992553983618764
92171,"public void testTmfCoalescedEventRequestIndexNbEventsBlocksize(){
  TmfCoalescedEventRequest<TmfEvent> request=new TmfCoalescedEventRequest<TmfEvent>(TmfEvent.class,range1,100,200);
  assertEquals(""String_Node_Str"",fRequestCount++,request.getRequestId());
  assertEquals(""String_Node_Str"",TmfEvent.class,request.getDataType());
  assertEquals(""String_Node_Str"",range1,request.getRange());
  assertEquals(""String_Node_Str"",100,request.getNbRequested());
  assertFalse(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isFailed());
  assertFalse(""String_Node_Str"",request.isCancelled());
  assertEquals(""String_Node_Str"",0,request.getNbRead());
}","public void testTmfCoalescedEventRequestIndexNbEventsBlocksize(){
  TmfCoalescedEventRequest<TmfEvent> request=new TmfCoalescedEventRequest<TmfEvent>(TmfEvent.class,range1,100,200);
  assertEquals(""String_Node_Str"",fRequestCount++,request.getRequestId());
  assertEquals(""String_Node_Str"",ITmfEvent.class,request.getDataType());
  assertEquals(""String_Node_Str"",range1,request.getRange());
  assertEquals(""String_Node_Str"",100,request.getNbRequested());
  assertFalse(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isFailed());
  assertFalse(""String_Node_Str"",request.isCancelled());
  assertEquals(""String_Node_Str"",0,request.getNbRead());
}",0.999260901699926
92172,"/** 
 * Request 'n' events of a given type from the given index (given priority). Events are returned in blocks of the given size.
 * @param dataType the requested data type
 * @param index the index of the first event to retrieve
 * @param nbRequested the number of events requested
 * @param blockSize the number of events per block
 * @param priority the requested execution priority
 */
public TmfCoalescedDataRequest(Class<T> dataType,long index,int nbRequested,int blockSize,ExecutionType priority){
  super(dataType,index,nbRequested,blockSize,priority);
}","/** 
 * Request 'n' events of a given type from the given index (given priority). Events are returned in blocks of the given size.
 * @param dataType the requested data type
 * @param index the index of the first event to retrieve
 * @param nbRequested the number of events requested
 * @param blockSize the number of events per block
 * @param priority the requested execution priority
 */
@SuppressWarnings(""String_Node_Str"") public TmfCoalescedDataRequest(Class<T> dataType,long index,int nbRequested,int blockSize,ExecutionType priority){
  super((Class<T>)ITmfEvent.class,index,nbRequested,blockSize,priority);
}",0.9423728813559322
92173,"/** 
 * Request 'n' events of a given type for the given time range (given priority). Events are returned in blocks of the given size.
 * @param dataType the requested data type
 * @param range the time range of the requested events
 * @param index the index of the first event to retrieve
 * @param nbRequested the number of events requested
 * @param blockSize the number of events per block
 * @param priority the requested execution priority
 */
public TmfCoalescedEventRequest(Class<T> dataType,TmfTimeRange range,long index,int nbRequested,int blockSize,ExecutionType priority){
  super(dataType,index,nbRequested,blockSize,priority);
  fRange=range;
  if (Tracer.isRequestTraced()) {
    String type=getClass().getName();
    type=type.substring(type.lastIndexOf('.') + 1);
    @SuppressWarnings(""String_Node_Str"") String message=""String_Node_Str"" + (getExecType() == ITmfDataRequest.ExecutionType.BACKGROUND ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ type+ ""String_Node_Str""+ getIndex()+ ""String_Node_Str""+ getNbRequested()+ ""String_Node_Str""+ getRange()+ ""String_Node_Str""+ getDataType().getSimpleName();
    Tracer.traceRequest(this,message);
  }
}","/** 
 * Request 'n' events of a given type for the given time range (given priority). Events are returned in blocks of the given size.
 * @param dataType the requested data type
 * @param range the time range of the requested events
 * @param index the index of the first event to retrieve
 * @param nbRequested the number of events requested
 * @param blockSize the number of events per block
 * @param priority the requested execution priority
 */
@SuppressWarnings(""String_Node_Str"") public TmfCoalescedEventRequest(Class<T> dataType,TmfTimeRange range,long index,int nbRequested,int blockSize,ExecutionType priority){
  super((Class<T>)ITmfEvent.class,index,nbRequested,blockSize,priority);
  fRange=range;
  if (Tracer.isRequestTraced()) {
    String type=getClass().getName();
    type=type.substring(type.lastIndexOf('.') + 1);
    @SuppressWarnings(""String_Node_Str"") String message=""String_Node_Str"" + (getExecType() == ITmfDataRequest.ExecutionType.BACKGROUND ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ type+ ""String_Node_Str""+ getIndex()+ ""String_Node_Str""+ getNbRequested()+ ""String_Node_Str""+ getRange()+ ""String_Node_Str""+ getDataType().getSimpleName();
    Tracer.traceRequest(this,message);
  }
}",0.9709302325581396
92174,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  while (!fExecutor.isShutdown()) {
    final TmfExperiment experiment=TmfExperiment.getCurrentExperiment();
    if (experiment != null) {
      @SuppressWarnings(""String_Node_Str"") final TmfEventRequest request=new TmfEventRequest(TmfEvent.class,TmfTimeRange.ETERNITY,0,ExecutionType.FOREGROUND){
        @Override public void handleCompleted(){
          updateJniTrace();
        }
      }
;
      experiment.sendRequest(request);
      try {
        request.waitForCompletion();
      }
 catch (      final InterruptedException e) {
      }
    }
 else     updateJniTrace();
    try {
      Thread.sleep(LTTNG_STREAMING_INTERVAL);
    }
 catch (    final InterruptedException e) {
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  while (!executorIsShutdown()) {
    final TmfExperiment experiment=TmfExperiment.getCurrentExperiment();
    if (experiment != null) {
      @SuppressWarnings(""String_Node_Str"") final TmfEventRequest request=new TmfEventRequest(TmfEvent.class,TmfTimeRange.ETERNITY,0,ExecutionType.FOREGROUND){
        @Override public void handleCompleted(){
          updateJniTrace();
        }
      }
;
      experiment.sendRequest(request);
      try {
        request.waitForCompletion();
      }
 catch (      final InterruptedException e) {
      }
    }
 else     updateJniTrace();
    try {
      Thread.sleep(LTTNG_STREAMING_INTERVAL);
    }
 catch (    final InterruptedException e) {
    }
  }
}",0.9871959026888604
92175,"private void initializeStreamingMonitor(){
  final JniTrace jniTrace=getCurrentJniTrace();
  if (jniTrace == null || (!jniTrace.isLiveTraceSupported() || !LiveTraceManager.isLiveTrace(jniTrace.getTracepath()))) {
    final ITmfContext context=seekEvent(0);
    final LttngEvent event=getNext(context);
    final LttngTimestamp startTime=new LttngTimestamp(event.getTimestamp());
    final LttngTimestamp endTime=new LttngTimestamp(currentJniTrace.getEndTime().getTime());
    setTimeRange(new TmfTimeRange(startTime,endTime));
    final TmfTraceUpdatedSignal signal=new TmfTraceUpdatedSignal(this,this,getTimeRange());
    broadcast(signal);
    return;
  }
  final ITmfContext context=seekEvent(0);
  final LttngEvent event=getNext(context);
  setEndTime(TmfTimestamp.BIG_BANG);
  final long startTime=event != null ? event.getTimestamp().getValue() : TmfTimestamp.BIG_BANG.getValue();
  setStreamingInterval(LTTNG_STREAMING_INTERVAL);
  final Thread thread=new Thread(""String_Node_Str"" + getName()){
    LttngTimestamp safeTimestamp=null;
    TmfTimeRange timeRange=null;
    @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
      while (!fExecutor.isShutdown()) {
        final TmfExperiment experiment=TmfExperiment.getCurrentExperiment();
        if (experiment != null) {
          @SuppressWarnings(""String_Node_Str"") final TmfEventRequest request=new TmfEventRequest(TmfEvent.class,TmfTimeRange.ETERNITY,0,ExecutionType.FOREGROUND){
            @Override public void handleCompleted(){
              updateJniTrace();
            }
          }
;
          experiment.sendRequest(request);
          try {
            request.waitForCompletion();
          }
 catch (          final InterruptedException e) {
          }
        }
 else         updateJniTrace();
        try {
          Thread.sleep(LTTNG_STREAMING_INTERVAL);
        }
 catch (        final InterruptedException e) {
        }
      }
    }
    private void updateJniTrace(){
      final JniTrace jniTrace=getCurrentJniTrace();
      currentJniTrace.updateTrace();
      final long endTime=jniTrace.getEndTime().getTime();
      final LttngTimestamp startTimestamp=new LttngTimestamp(startTime);
      final LttngTimestamp endTimestamp=new LttngTimestamp(endTime);
      if (safeTimestamp != null && safeTimestamp.compareTo(getTimeRange().getEndTime(),false) > 0)       timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
 else       timeRange=null;
      safeTimestamp=endTimestamp;
      if (timeRange != null)       setTimeRange(timeRange);
    }
  }
;
  thread.start();
}","private void initializeStreamingMonitor(){
  final JniTrace jniTrace=getCurrentJniTrace();
  if (jniTrace == null || (!jniTrace.isLiveTraceSupported() || !LiveTraceManager.isLiveTrace(jniTrace.getTracepath()))) {
    final ITmfContext context=seekEvent(0);
    final LttngEvent event=getNext(context);
    final LttngTimestamp startTime=new LttngTimestamp(event.getTimestamp());
    final LttngTimestamp endTime=new LttngTimestamp(currentJniTrace.getEndTime().getTime());
    setTimeRange(new TmfTimeRange(startTime,endTime));
    final TmfTraceUpdatedSignal signal=new TmfTraceUpdatedSignal(this,this,getTimeRange());
    broadcast(signal);
    return;
  }
  final ITmfContext context=seekEvent(0);
  final LttngEvent event=getNext(context);
  setEndTime(TmfTimestamp.BIG_BANG);
  final long startTime=event != null ? event.getTimestamp().getValue() : TmfTimestamp.BIG_BANG.getValue();
  setStreamingInterval(LTTNG_STREAMING_INTERVAL);
  final Thread thread=new Thread(""String_Node_Str"" + getName()){
    LttngTimestamp safeTimestamp=null;
    TmfTimeRange timeRange=null;
    @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
      while (!executorIsShutdown()) {
        final TmfExperiment experiment=TmfExperiment.getCurrentExperiment();
        if (experiment != null) {
          @SuppressWarnings(""String_Node_Str"") final TmfEventRequest request=new TmfEventRequest(TmfEvent.class,TmfTimeRange.ETERNITY,0,ExecutionType.FOREGROUND){
            @Override public void handleCompleted(){
              updateJniTrace();
            }
          }
;
          experiment.sendRequest(request);
          try {
            request.waitForCompletion();
          }
 catch (          final InterruptedException e) {
          }
        }
 else         updateJniTrace();
        try {
          Thread.sleep(LTTNG_STREAMING_INTERVAL);
        }
 catch (        final InterruptedException e) {
        }
      }
    }
    private void updateJniTrace(){
      final JniTrace jniTrace=getCurrentJniTrace();
      currentJniTrace.updateTrace();
      final long endTime=jniTrace.getEndTime().getTime();
      final LttngTimestamp startTimestamp=new LttngTimestamp(startTime);
      final LttngTimestamp endTimestamp=new LttngTimestamp(endTime);
      if (safeTimestamp != null && safeTimestamp.compareTo(getTimeRange().getEndTime(),false) > 0)       timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
 else       timeRange=null;
      safeTimestamp=endTimestamp;
      if (timeRange != null)       setTimeRange(timeRange);
    }
  }
;
  thread.start();
}",0.9988425925925926
92176,"/** 
 * @see ILaunchConfigurationTab#initializeFrom(ILaunchConfiguration)
 */
public void initializeFrom(ILaunchConfiguration config){
  this.hasPermissions=null;
  IProject previousProject=Oprofile.OprofileProject.getProject();
  IProject project=getProject(config);
  Oprofile.OprofileProject.setProject(project);
  try {
    if (!hasPermissions(project)) {
      OpcontrolException e=new OpcontrolException(OprofileCorePlugin.createErrorStatus(""String_Node_Str"",null));
      OprofileCorePlugin.showErrorDialog(""String_Node_Str"",e);
      createTimerModeTab(top);
      return;
    }
  }
 catch (  OpcontrolException e) {
    OprofileCorePlugin.showErrorDialog(""String_Node_Str"",e);
    createTimerModeTab(top);
    return;
  }
  Oprofile.updateInfo();
  String previousHost=null;
  if (previousProject != null) {
    if (previousProject.getLocationURI() != null) {
      previousHost=previousProject.getLocationURI().getHost();
    }
  }
  String host=project.getLocationURI().getHost();
  if (previousProject == null || previousHost != host || counters == null) {
    Control[] children=top.getChildren();
    for (    Control control : children) {
      control.dispose();
    }
    if (getTimerMode()) {
      Label timerModeLabel=new Label(top,SWT.LEFT);
      timerModeLabel.setText(OprofileLaunchMessages.getString(""String_Node_Str""));
    }
 else {
      createVerticalSpacer(top,1);
      defaultEventCheck=new Button(top,SWT.CHECK);
      defaultEventCheck.setText(OprofileLaunchMessages.getString(""String_Node_Str""));
      defaultEventCheck.setLayoutData(new GridData());
      defaultEventCheck.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent se){
          handleEnabledToggle();
        }
      }
);
      createVerticalSpacer(top,1);
      createCounterTabs(top);
    }
  }
  if (!getTimerMode()) {
    for (int i=0; i < counters.length; i++) {
      counters[i].loadConfiguration(config);
    }
    for (    CounterSubTab tab : counterSubTabs) {
      tab.initializeTab(config);
    }
    try {
      boolean enabledState=config.getAttribute(OprofileLaunchPlugin.ATTR_USE_DEFAULT_EVENT,true);
      defaultEventCheck.setSelection(enabledState);
      setEnabledState(!enabledState);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * @see ILaunchConfigurationTab#initializeFrom(ILaunchConfiguration)
 */
public void initializeFrom(ILaunchConfiguration config){
  this.hasPermissions=null;
  IProject previousProject=Oprofile.OprofileProject.getProject();
  IProject project=getProject(config);
  Oprofile.OprofileProject.setProject(project);
  try {
    if (!hasPermissions(project)) {
      OpcontrolException e=new OpcontrolException(OprofileCorePlugin.createErrorStatus(""String_Node_Str"",null));
      OprofileCorePlugin.showErrorDialog(""String_Node_Str"",e);
      createTimerModeTab(top);
      return;
    }
  }
 catch (  OpcontrolException e) {
    OprofileCorePlugin.showErrorDialog(""String_Node_Str"",e);
    createTimerModeTab(top);
    return;
  }
  Oprofile.updateInfo();
  String previousHost=null;
  if (previousProject != null) {
    if (previousProject.getLocationURI() != null) {
      previousHost=previousProject.getLocationURI().getHost();
    }
  }
  String host=project.getLocationURI().getHost();
  if (previousProject == null || previousHost != host || host == null || counters == null) {
    Control[] children=top.getChildren();
    for (    Control control : children) {
      control.dispose();
    }
    if (getTimerMode()) {
      Label timerModeLabel=new Label(top,SWT.LEFT);
      timerModeLabel.setText(OprofileLaunchMessages.getString(""String_Node_Str""));
    }
 else {
      createVerticalSpacer(top,1);
      defaultEventCheck=new Button(top,SWT.CHECK);
      defaultEventCheck.setText(OprofileLaunchMessages.getString(""String_Node_Str""));
      defaultEventCheck.setLayoutData(new GridData());
      defaultEventCheck.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent se){
          handleEnabledToggle();
        }
      }
);
      createVerticalSpacer(top,1);
      createCounterTabs(top);
    }
  }
  if (!getTimerMode()) {
    for (int i=0; i < counters.length; i++) {
      counters[i].loadConfiguration(config);
    }
    for (    CounterSubTab tab : counterSubTabs) {
      tab.initializeTab(config);
    }
    try {
      boolean enabledState=config.getAttribute(OprofileLaunchPlugin.ATTR_USE_DEFAULT_EVENT,true);
      defaultEventCheck.setSelection(enabledState);
      setEnabledState(!enabledState);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
}",0.9965971926839644
92177,"/** 
 * @since 1.1
 */
private Composite getTabFolderComposite(){
  if (counterSubTabs[0] == null) {
    return null;
  }
 else {
    Composite c=counterSubTabs[0].getTabTopContainer();
    while (c != null && !(c instanceof TabFolder)) {
      c=c.getParent();
    }
    return c.getParent();
  }
}","/** 
 * @since 1.1
 */
private Composite getTabFolderComposite(){
  if (counterSubTabs.length == 0 || counterSubTabs[0] == null) {
    return null;
  }
 else {
    Composite c=counterSubTabs[0].getTabTopContainer();
    while (c != null && !(c instanceof TabFolder)) {
      c=c.getParent();
    }
    return c.getParent();
  }
}",0.9522292993630572
92178,"@Override public void setFocus(){
}","@Override public void setFocus(){
  if (masterComposite != null) {
    masterComposite.setFocus();
  }
}",0.5035971223021583
92179,"/** 
 * gets the clock if there is only one. (this is 100% of the use cases as of June 2012)
 * @return the clock
 */
public final CTFClock getClock(){
  if (clocks.size() == 1) {
    if (singleClock == null) {
      singleClock=clocks.get(clocks.keySet().toArray()[0]);
      singleOffset=(Long)getClock().getProperty(""String_Node_Str"");
    }
    return singleClock;
  }
  return null;
}","/** 
 * gets the clock if there is only one. (this is 100% of the use cases as of June 2012)
 * @return the clock
 */
public final CTFClock getClock(){
  if (clocks.size() == 1) {
    if (singleClock == null) {
      singleClock=clocks.get(clocks.keySet().toArray()[0]);
      if (singleClock.getProperty(OFFSET) != null) {
        singleOffset=(Long)getClock().getProperty(OFFSET);
      }
 else {
        singleClock.addAttribute(OFFSET,0);
      }
    }
    return singleClock;
  }
  return null;
}",0.8292134831460675
92180,"private IDeclaration parseFloat(CommonTree floatingPoint) throws ParseException {
  assert(floatingPoint.getType() == CTFParser.INTEGER);
  List<CommonTree> children=floatingPoint.getChildren();
  if (children == null) {
    throw new ParseException(""String_Node_Str"");
  }
  FloatDeclaration floatDeclaration=null;
  ByteOrder byteOrder=trace.getByteOrder();
  long alignment=0;
  int exponent=8;
  int mantissa=24;
  for (  CommonTree child : children) {
switch (child.getType()) {
case CTFParser.CTF_EXPRESSION_VAL:
      assert(child.getChildCount() == 2);
    CommonTree leftNode=(CommonTree)child.getChild(0);
  assert(leftNode.getType() == CTFParser.CTF_LEFT);
CommonTree rightNode=(CommonTree)child.getChild(1);
assert(rightNode.getType() == CTFParser.CTF_RIGHT);
List<CommonTree> leftStrings=leftNode.getChildren();
assert(leftStrings != null);
if (!isUnaryString(leftStrings.get(0))) {
throw new ParseException(""String_Node_Str"");
}
String left=concatenateUnaryStrings(leftStrings);
if (left.equals(CTFStrings.EXP_DIG)) {
exponent=(int)parseUnaryInteger((CommonTree)rightNode.getChild(0));
}
 else if (left.equals(CTFStrings.BYTE_ORDER)) {
byteOrder=getByteOrder(rightNode);
}
 else if (left.equals(CTFStrings.MANT_DIG)) {
mantissa=(int)parseUnaryInteger((CommonTree)rightNode.getChild(0));
}
 else if (left.equals(CTFStrings.ALIGN)) {
alignment=getAlignment(rightNode);
}
 else {
throw new ParseException(""String_Node_Str"" + left);
}
break;
default :
childTypeError(child);
break;
}
}
int size=mantissa + exponent;
if (size == 0) {
throw new ParseException(""String_Node_Str"");
}
if (alignment == 0) {
if ((size % 8) == 0) {
alignment=1;
}
 else {
alignment=8;
}
}
floatDeclaration=new FloatDeclaration(exponent,mantissa,byteOrder,alignment);
assert(floatDeclaration != null);
return floatDeclaration;
}","private IDeclaration parseFloat(CommonTree floatingPoint) throws ParseException {
  List<CommonTree> children=floatingPoint.getChildren();
  if (children == null) {
    throw new ParseException(""String_Node_Str"");
  }
  FloatDeclaration floatDeclaration=null;
  ByteOrder byteOrder=trace.getByteOrder();
  long alignment=0;
  int exponent=8;
  int mantissa=24;
  for (  CommonTree child : children) {
switch (child.getType()) {
case CTFParser.CTF_EXPRESSION_VAL:
      CommonTree leftNode=(CommonTree)child.getChild(0);
    CommonTree rightNode=(CommonTree)child.getChild(1);
  List<CommonTree> leftStrings=leftNode.getChildren();
if (!isUnaryString(leftStrings.get(0))) {
  throw new ParseException(""String_Node_Str"");
}
String left=concatenateUnaryStrings(leftStrings);
if (left.equals(CTFStrings.EXP_DIG)) {
exponent=(int)parseUnaryInteger((CommonTree)rightNode.getChild(0));
}
 else if (left.equals(CTFStrings.BYTE_ORDER)) {
byteOrder=getByteOrder(rightNode);
}
 else if (left.equals(CTFStrings.MANT_DIG)) {
mantissa=(int)parseUnaryInteger((CommonTree)rightNode.getChild(0));
}
 else if (left.equals(CTFStrings.ALIGN)) {
alignment=getAlignment(rightNode);
}
 else {
throw new ParseException(""String_Node_Str"" + left);
}
break;
default :
childTypeError(child);
break;
}
}
int size=mantissa + exponent;
if (size == 0) {
throw new ParseException(""String_Node_Str"");
}
if (alignment == 0) {
if ((size % 8) == 0) {
alignment=1;
}
 else {
alignment=8;
}
}
floatDeclaration=new FloatDeclaration(exponent,mantissa,byteOrder,alignment);
assert(floatDeclaration != null);
return floatDeclaration;
}",0.8663729809104258
92181,"/** 
 * Parses an enum declaration and returns the corresponding declaration.
 * @param _enum An ENUM node.
 * @return The corresponding enum declaration.
 * @throws ParseException
 */
private EnumDeclaration parseEnum(CommonTree _enum) throws ParseException {
  assert(_enum.getType() == CTFParser.ENUM);
  List<CommonTree> children=_enum.getChildren();
  assert(children != null);
  EnumDeclaration enumDeclaration=null;
  String enumName=null;
  CommonTree enumBody=null;
  IntegerDeclaration containerTypeDeclaration=null;
  for (  CommonTree child : children) {
switch (child.getType()) {
case CTFParser.ENUM_NAME:
{
        assert(enumName == null);
        assert(child.getChildCount() == 1);
        CommonTree enumNameIdentifier=(CommonTree)child.getChild(0);
        assert(enumNameIdentifier.getType() == CTFParser.IDENTIFIER);
        enumName=enumNameIdentifier.getText();
        break;
      }
case CTFParser.ENUM_BODY:
{
      assert(enumBody == null);
      enumBody=child;
      break;
    }
case CTFParser.ENUM_CONTAINER_TYPE:
{
    assert(containerTypeDeclaration == null);
    containerTypeDeclaration=parseEnumContainerType(child);
    break;
  }
default :
childTypeError(child);
break;
}
}
if (containerTypeDeclaration == null) {
IDeclaration decl=getCurrentScope().rlookupType(""String_Node_Str"");
if (decl == null) {
throw new ParseException(""String_Node_Str"");
}
 else if (!(decl instanceof IntegerDeclaration)) {
throw new ParseException(""String_Node_Str"");
}
containerTypeDeclaration=(IntegerDeclaration)decl;
}
if (enumBody != null) {
if ((enumName != null) && (getCurrentScope().lookupEnum(enumName) != null)) {
throw new ParseException(""String_Node_Str"" + enumName + ""String_Node_Str"");
}
enumDeclaration=new EnumDeclaration(containerTypeDeclaration);
parseEnumBody(enumBody,enumDeclaration);
if (enumName != null) {
getCurrentScope().registerEnum(enumName,enumDeclaration);
}
}
 else {
if (enumName != null) {
enumDeclaration=getCurrentScope().rlookupEnum(enumName);
if (enumDeclaration == null) {
throw new ParseException(""String_Node_Str"" + enumName + ""String_Node_Str"");
}
}
 else {
throw new ParseException(""String_Node_Str"");
}
}
return enumDeclaration;
}","/** 
 * Parses an enum declaration and returns the corresponding declaration.
 * @param _enum An ENUM node.
 * @return The corresponding enum declaration.
 * @throws ParseException
 */
private EnumDeclaration parseEnum(CommonTree _enum) throws ParseException {
  assert(_enum.getType() == CTFParser.ENUM);
  List<CommonTree> children=_enum.getChildren();
  assert(children != null);
  EnumDeclaration enumDeclaration=null;
  String enumName=null;
  CommonTree enumBody=null;
  IntegerDeclaration containerTypeDeclaration=null;
  for (  CommonTree child : children) {
switch (child.getType()) {
case CTFParser.ENUM_NAME:
{
        assert(enumName == null);
        assert(child.getChildCount() == 1);
        CommonTree enumNameIdentifier=(CommonTree)child.getChild(0);
        assert(enumNameIdentifier.getType() == CTFParser.IDENTIFIER);
        enumName=enumNameIdentifier.getText();
        break;
      }
case CTFParser.ENUM_BODY:
{
      assert(enumBody == null);
      enumBody=child;
      break;
    }
case CTFParser.ENUM_CONTAINER_TYPE:
{
    assert(containerTypeDeclaration == null);
    containerTypeDeclaration=parseEnumContainerType(child);
    break;
  }
default :
childTypeError(child);
break;
}
}
if (containerTypeDeclaration == null) {
IDeclaration enumDecl;
if (enumName != null) {
enumDecl=getCurrentScope().rlookupEnum(enumName);
if (enumDecl != null) {
return (EnumDeclaration)enumDecl;
}
}
IDeclaration decl=getCurrentScope().rlookupType(""String_Node_Str"");
if (decl == null) {
throw new ParseException(""String_Node_Str"");
}
 else if (!(decl instanceof IntegerDeclaration)) {
throw new ParseException(""String_Node_Str"");
}
containerTypeDeclaration=(IntegerDeclaration)decl;
}
if (enumBody != null) {
if ((enumName != null) && (getCurrentScope().lookupEnum(enumName) != null)) {
throw new ParseException(""String_Node_Str"" + enumName + ""String_Node_Str"");
}
enumDeclaration=new EnumDeclaration(containerTypeDeclaration);
parseEnumBody(enumBody,enumDeclaration);
if (enumName != null) {
getCurrentScope().registerEnum(enumName,enumDeclaration);
}
}
 else {
if (enumName != null) {
enumDeclaration=getCurrentScope().rlookupEnum(enumName);
if (enumDeclaration == null) {
throw new ParseException(""String_Node_Str"" + enumName + ""String_Node_Str"");
}
}
 else {
throw new ParseException(""String_Node_Str"");
}
}
return enumDeclaration;
}",0.9649856859722528
92182,"/** 
 * Parses a type specifier list and returns the corresponding declaration.
 * @param typeSpecifierList A TYPE_SPECIFIER_LIST node.
 * @param pointerList A list of POINTER nodes that apply to the specified type.
 * @return The corresponding declaration.
 * @throws ParseException If the type has not been defined or if there is an error creating the declaration.
 */
private IDeclaration parseTypeSpecifierList(CommonTree typeSpecifierList,List<CommonTree> pointerList) throws ParseException {
  assert(typeSpecifierList.getType() == CTFParser.TYPE_SPECIFIER_LIST);
  IDeclaration declaration=null;
  CommonTree firstChild=(CommonTree)typeSpecifierList.getChild(0);
  assert(firstChild != null);
switch (firstChild.getType()) {
case CTFParser.FLOATING_POINT:
    declaration=parseFloat(firstChild);
  break;
case CTFParser.INTEGER:
declaration=parseInteger(firstChild);
break;
case CTFParser.STRING:
declaration=parseString(firstChild);
break;
case CTFParser.STRUCT:
declaration=parseStruct(firstChild);
break;
case CTFParser.VARIANT:
declaration=parseVariant(firstChild);
break;
case CTFParser.ENUM:
declaration=parseEnum(firstChild);
break;
case CTFParser.IDENTIFIER:
case CTFParser.FLOATTOK:
case CTFParser.INTTOK:
case CTFParser.LONGTOK:
case CTFParser.SHORTTOK:
case CTFParser.SIGNEDTOK:
case CTFParser.UNSIGNEDTOK:
case CTFParser.CHARTOK:
case CTFParser.DOUBLETOK:
case CTFParser.VOIDTOK:
case CTFParser.BOOLTOK:
case CTFParser.COMPLEXTOK:
case CTFParser.IMAGINARYTOK:
declaration=parseTypeDeclaration(typeSpecifierList,pointerList);
break;
default :
childTypeError(firstChild);
}
assert(declaration != null);
return declaration;
}","/** 
 * Parses a type specifier list and returns the corresponding declaration.
 * @param typeSpecifierList A TYPE_SPECIFIER_LIST node.
 * @param pointerList A list of POINTER nodes that apply to the specified type.
 * @return The corresponding declaration.
 * @throws ParseException If the type has not been defined or if there is an error creating the declaration.
 */
private IDeclaration parseTypeSpecifierList(CommonTree typeSpecifierList,List<CommonTree> pointerList) throws ParseException {
  assert(typeSpecifierList.getType() == CTFParser.TYPE_SPECIFIER_LIST);
  IDeclaration declaration=null;
  CommonTree firstChild=(CommonTree)typeSpecifierList.getChild(0);
  assert(firstChild != null);
switch (firstChild.getType()) {
case CTFParser.FLOATING_POINT:
    declaration=parseFloat(firstChild);
  break;
case CTFParser.INTEGER:
declaration=parseInteger(firstChild);
break;
case CTFParser.STRING:
declaration=parseString(firstChild);
break;
case CTFParser.STRUCT:
declaration=parseStruct(firstChild);
break;
case CTFParser.VARIANT:
declaration=parseVariant(firstChild);
break;
case CTFParser.ENUM:
declaration=parseEnum(firstChild);
break;
case CTFParser.IDENTIFIER:
case CTFParser.FLOATTOK:
case CTFParser.INTTOK:
case CTFParser.LONGTOK:
case CTFParser.SHORTTOK:
case CTFParser.SIGNEDTOK:
case CTFParser.UNSIGNEDTOK:
case CTFParser.CHARTOK:
case CTFParser.DOUBLETOK:
case CTFParser.VOIDTOK:
case CTFParser.BOOLTOK:
case CTFParser.COMPLEXTOK:
case CTFParser.IMAGINARYTOK:
declaration=parseTypeDeclaration(typeSpecifierList,pointerList);
break;
default :
childTypeError(firstChild);
}
return declaration;
}",0.9892407008914847
92183,"/** 
 * Select an event
 * @param n 1 to enable, -1 to disable
 */
public void selectEvent(int n){
  if (null == _timeProvider) {
    return;
  }
  ITimeGraphEntry trace=getSelectedTrace();
  if (trace == null) {
    return;
  }
  long selectedTime=_timeProvider.getSelectedTime();
  long endTime=_timeProvider.getEndTime();
  ITimeEvent nextEvent;
  if (-1 == n && selectedTime > endTime) {
    nextEvent=Utils.findEvent(trace,selectedTime,0);
  }
 else {
    nextEvent=Utils.findEvent(trace,selectedTime,n);
  }
  if (null == nextEvent && -1 == n) {
    nextEvent=Utils.getFirstEvent(trace);
  }
  if (null != nextEvent) {
    long nextTime=nextEvent.getTime();
    if (nextTime <= selectedTime && n == 1) {
      nextTime=nextEvent.getTime() + nextEvent.getDuration();
      if (nextTime > endTime) {
        nextTime=endTime;
      }
    }
    _timeProvider.setSelectedTimeNotify(nextTime,true);
    fireSelectionChanged();
  }
 else   if (1 == n) {
    _timeProvider.setSelectedTimeNotify(endTime,true);
    fireSelectionChanged();
  }
}","/** 
 * Select an event
 * @param n 1 for next event, -1 for previous event
 */
public void selectEvent(int n){
  if (null == _timeProvider) {
    return;
  }
  ITimeGraphEntry trace=getSelectedTrace();
  if (trace == null) {
    return;
  }
  long selectedTime=_timeProvider.getSelectedTime();
  long endTime=_timeProvider.getEndTime();
  ITimeEvent nextEvent;
  if (-1 == n && selectedTime > endTime) {
    nextEvent=Utils.findEvent(trace,selectedTime,0);
  }
 else {
    nextEvent=Utils.findEvent(trace,selectedTime,n);
  }
  if (null == nextEvent && -1 == n) {
    nextEvent=Utils.getFirstEvent(trace);
  }
  if (null != nextEvent) {
    long nextTime=nextEvent.getTime();
    if (nextTime <= selectedTime && n == 1) {
      nextTime=nextEvent.getTime() + nextEvent.getDuration();
      if (nextTime > endTime) {
        nextTime=endTime;
      }
    }
 else     if (n == -1) {
      if (nextEvent.getTime() + nextEvent.getDuration() < selectedTime) {
        nextTime=nextEvent.getTime() + nextEvent.getDuration();
      }
    }
    _timeProvider.setSelectedTimeNotify(nextTime,true);
    fireSelectionChanged();
  }
 else   if (1 == n) {
    _timeProvider.setSelectedTimeNotify(endTime,true);
    fireSelectionChanged();
  }
}",0.899736147757256
92184,"@Override public void handleData(T data){
  super.handleData(data);
  if (getClass() == TmfCoalescedDataRequest.class) {
    long index=getNbRead();
    for (    ITmfDataRequest<T> request : fRequests) {
      if (!request.isCompleted()) {
        if (request.getDataType().isInstance(data)) {
          long start=request.getIndex();
          long end=start + request.getNbRequested() - 1;
          if (index >= start && index < end) {
            request.handleData(data);
          }
        }
      }
    }
  }
}","@Override public void handleData(T data){
  super.handleData(data);
  if (getClass() == TmfCoalescedDataRequest.class) {
    long index=getIndex() + getNbRead();
    for (    ITmfDataRequest<T> request : fRequests) {
      if (!request.isCompleted()) {
        if (request.getDataType().isInstance(data)) {
          long start=request.getIndex();
          long end=start + request.getNbRequested() - 1;
          if (index >= start && index < end) {
            request.handleData(data);
          }
        }
      }
    }
  }
}",0.9876072449952336
92185,"@Override public void handleData(T data){
  super.handleData(data);
  for (  ITmfDataRequest<T> request : fRequests) {
    if (data == null) {
      request.handleData(null);
    }
 else {
      if (request instanceof TmfEventRequest<?>) {
        TmfEventRequest<T> req=(TmfEventRequest<T>)request;
        if (!req.isCompleted() && (getNbRead() > request.getIndex())) {
          ITmfTimestamp ts=data.getTimestamp();
          if (req.getRange().contains(ts)) {
            if (req.getDataType().isInstance(data)) {
              req.handleData(data);
            }
          }
        }
      }
 else {
        TmfDataRequest<T> req=(TmfDataRequest<T>)request;
        if (!req.isCompleted()) {
          if (req.getDataType().isInstance(data)) {
            req.handleData(data);
          }
        }
      }
    }
  }
}","@Override public void handleData(T data){
  super.handleData(data);
  for (  ITmfDataRequest<T> request : fRequests) {
    if (data == null) {
      request.handleData(null);
    }
 else {
      if (request instanceof TmfEventRequest<?>) {
        TmfEventRequest<T> req=(TmfEventRequest<T>)request;
        if (!req.isCompleted() && (getIndex() + getNbRead() > request.getIndex())) {
          ITmfTimestamp ts=data.getTimestamp();
          if (req.getRange().contains(ts)) {
            if (req.getDataType().isInstance(data)) {
              req.handleData(data);
            }
          }
        }
      }
 else {
        TmfDataRequest<T> req=(TmfDataRequest<T>)request;
        if (!req.isCompleted()) {
          if (req.getDataType().isInstance(data)) {
            req.handleData(data);
          }
        }
      }
    }
  }
}",0.9921921921921922
92186,"/** 
 * Method seek. Seeks to a given timestamp
 * @param timestamp long the timestamp in ns (utc)
 * @return boolean
 */
@Override public boolean seek(final long timestamp){
  boolean ret=false;
  final long offsetTimestamp=timestamp - this.getTrace().getOffset();
  if (offsetTimestamp < 0) {
    ret=super.seek(timestamp);
  }
 else {
    ret=super.seek(offsetTimestamp);
  }
  if (ret) {
    curLocation.setLocation(getCurrentEvent().getTimestampValue());
  }
 else {
    curLocation=NULL_LOCATION;
  }
  return ret;
}","/** 
 * Method seek. Seeks to a given timestamp
 * @param timestamp long the timestamp in ns (utc)
 * @return boolean
 */
@Override public boolean seek(final long timestamp){
  boolean ret=false;
  final long offsetTimestamp=timestamp - this.getTrace().getOffset();
  if (offsetTimestamp < 0) {
    ret=super.seek(0L);
  }
 else {
    ret=super.seek(offsetTimestamp);
  }
  if (ret) {
    curLocation.setLocation(getCurrentEvent().getTimestampValue());
  }
 else {
    curLocation=NULL_LOCATION;
  }
  return ret;
}",0.9893924783027964
92187,"@Override public void widgetSelected(SelectionEvent e){
  for (  CTabItem item : tabgroup.getItems()) {
    item.dispose();
  }
  providerId=providerCombo.getText();
  tabs=ProfileLaunchConfigurationTabGroup.getTabGroupProviderFromId(providerId).getProfileTabs();
  for (  ILaunchConfigurationTab tab : tabs) {
    CTabItem item=new CTabItem(tabgroup,SWT.NONE);
    item.setText(tab.getName());
    item.setImage(tab.getImage());
    tab.createControl(tabgroup);
    item.setControl(tab.getControl());
  }
  initializeFrom(initial);
  top.layout();
}","@Override public void widgetSelected(SelectionEvent e){
  for (  CTabItem item : tabgroup.getItems()) {
    item.dispose();
  }
  providerId=providerCombo.getText();
  tabs=ProfileLaunchConfigurationTabGroup.getTabGroupProviderFromId(providerId).getProfileTabs();
  for (  ILaunchConfigurationTab tab : tabs) {
    tab.setLaunchConfigurationDialog(getLaunchConfigurationDialog());
    CTabItem item=new CTabItem(tabgroup,SWT.NONE);
    item.setText(tab.getName());
    item.setImage(tab.getImage());
    tab.createControl(tabgroup);
    item.setControl(tab.getControl());
  }
  initializeFrom(initial);
  top.layout();
}",0.9401709401709402
92188,"public void createControl(Composite parent){
  top=new Composite(parent,SWT.NONE);
  setControl(top);
  top.setLayout(new GridLayout(1,true));
  providerCombo=new Combo(top,SWT.READ_ONLY);
  providerCombo.setItems(ProfileLaunchConfigurationTabGroup.getTabGroupIdsForType(""String_Node_Str""));
  final CTabFolder tabgroup=new CTabFolder(top,SWT.NONE);
  providerCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      for (      CTabItem item : tabgroup.getItems()) {
        item.dispose();
      }
      providerId=providerCombo.getText();
      tabs=ProfileLaunchConfigurationTabGroup.getTabGroupProviderFromId(providerId).getProfileTabs();
      for (      ILaunchConfigurationTab tab : tabs) {
        CTabItem item=new CTabItem(tabgroup,SWT.NONE);
        item.setText(tab.getName());
        item.setImage(tab.getImage());
        tab.createControl(tabgroup);
        item.setControl(tab.getControl());
      }
      initializeFrom(initial);
      top.layout();
    }
  }
);
}","public void createControl(Composite parent){
  top=new Composite(parent,SWT.NONE);
  setControl(top);
  top.setLayout(new GridLayout(1,true));
  providerCombo=new Combo(top,SWT.READ_ONLY);
  providerCombo.setItems(ProfileLaunchConfigurationTabGroup.getTabGroupIdsForType(""String_Node_Str""));
  final CTabFolder tabgroup=new CTabFolder(top,SWT.NONE);
  providerCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      for (      CTabItem item : tabgroup.getItems()) {
        item.dispose();
      }
      providerId=providerCombo.getText();
      tabs=ProfileLaunchConfigurationTabGroup.getTabGroupProviderFromId(providerId).getProfileTabs();
      for (      ILaunchConfigurationTab tab : tabs) {
        tab.setLaunchConfigurationDialog(getLaunchConfigurationDialog());
        CTabItem item=new CTabItem(tabgroup,SWT.NONE);
        item.setText(tab.getName());
        item.setImage(tab.getImage());
        tab.createControl(tabgroup);
        item.setControl(tab.getControl());
      }
      initializeFrom(initial);
      top.layout();
    }
  }
);
}",0.9658356417359188
92189,"public void runCoalescedRequest(long startIndex) throws Exception {
  fTrace=setupTrace(DIRECTORY + File.separator + TEST_STREAM);
  TmfSignalManager.register(this);
  TmfTestTriggerSignal signal=new TmfTestTriggerSignal(this,startIndex,false);
  TmfSignalManager.dispatchSignal(signal);
  request1.waitForCompletion();
  request2.waitForCompletion();
  request3.waitForCompletion();
  try {
    assertEquals(""String_Node_Str"",NB_EVENTS - startIndex,requestedEvents1.size());
    assertTrue(""String_Node_Str"",request1.isCompleted());
    assertFalse(""String_Node_Str"",request1.isCancelled());
    assertEquals(""String_Node_Str"",NB_EVENTS - startIndex,requestedEvents2.size());
    assertTrue(""String_Node_Str"",request2.isCompleted());
    assertFalse(""String_Node_Str"",request2.isCancelled());
    assertEquals(""String_Node_Str"",NB_EVENTS - startIndex,requestedEvents3.size());
    assertTrue(""String_Node_Str"",request3.isCompleted());
    assertFalse(""String_Node_Str"",request3.isCancelled());
    for (int i=0; i < NB_EVENTS - startIndex; i++) {
      assertEquals(""String_Node_Str"",i + 1 + startIndex,requestedEvents1.get(i).getTimestamp().getValue());
      assertEquals(""String_Node_Str"",i + 1 + startIndex,requestedEvents2.get(i).getTimestamp().getValue());
      assertEquals(""String_Node_Str"",i + 1 + startIndex,requestedEvents3.get(i).getTimestamp().getValue());
    }
  }
  finally {
    TmfSignalManager.deregister(this);
    fTrace.dispose();
    fTrace=null;
  }
}","public void runCoalescedRequest(long startIndex) throws Exception {
  fTrace=setupTrace(DIRECTORY + File.separator + TEST_STREAM);
  TmfSignalManager.register(this);
  TmfTestTriggerSignal signal=new TmfTestTriggerSignal(this,startIndex,false);
  TmfSignalManager.dispatchSignal(signal);
  request1.waitForCompletion();
  request2.waitForCompletion();
  request3.waitForCompletion();
  try {
    assertEquals(""String_Node_Str"",NB_EVENTS,requestedEvents1.size());
    assertTrue(""String_Node_Str"",request1.isCompleted());
    assertFalse(""String_Node_Str"",request1.isCancelled());
    assertEquals(""String_Node_Str"",NB_EVENTS,requestedEvents2.size());
    assertTrue(""String_Node_Str"",request2.isCompleted());
    assertFalse(""String_Node_Str"",request2.isCancelled());
    assertEquals(""String_Node_Str"",NB_EVENTS,requestedEvents3.size());
    assertTrue(""String_Node_Str"",request3.isCompleted());
    assertFalse(""String_Node_Str"",request3.isCancelled());
    for (int i=0; i < NB_EVENTS; i++) {
      assertEquals(""String_Node_Str"",i + 1 + request1.getIndex(),requestedEvents1.get(i).getTimestamp().getValue());
      assertEquals(""String_Node_Str"",i + 1 + request2.getIndex(),requestedEvents2.get(i).getTimestamp().getValue());
      assertEquals(""String_Node_Str"",i + 1 + request3.getIndex(),requestedEvents3.get(i).getTimestamp().getValue());
    }
  }
  finally {
    TmfSignalManager.deregister(this);
    fTrace.dispose();
    fTrace=null;
  }
}",0.9648344144759304
92190,"public void testCancelCoalescedRequest() throws Exception {
  fTrace=setupTrace(DIRECTORY + File.separator + TEST_STREAM);
  TmfSignalManager.register(this);
  TmfTestTriggerSignal signal=new TmfTestTriggerSignal(this,0,true);
  TmfSignalManager.dispatchSignal(signal);
  request1.waitForCompletion();
  request2.waitForCompletion();
  request3.waitForCompletion();
  assertEquals(""String_Node_Str"",BLOCK_SIZE,requestedEvents1.size());
  assertTrue(""String_Node_Str"",request1.isCompleted());
  assertTrue(""String_Node_Str"",request1.isCancelled());
  assertEquals(""String_Node_Str"",NB_EVENTS,requestedEvents2.size());
  assertTrue(""String_Node_Str"",request2.isCompleted());
  assertFalse(""String_Node_Str"",request2.isCancelled());
  assertEquals(""String_Node_Str"",NB_EVENTS,requestedEvents3.size());
  assertTrue(""String_Node_Str"",request3.isCompleted());
  assertFalse(""String_Node_Str"",request3.isCancelled());
  for (int i=0; i < NB_EVENTS; i++) {
    assertEquals(""String_Node_Str"",i + 1,requestedEvents2.get(i).getTimestamp().getValue());
    assertEquals(""String_Node_Str"",i + 1,requestedEvents3.get(i).getTimestamp().getValue());
  }
  TmfSignalManager.deregister(this);
  fTrace.dispose();
  fTrace=null;
}","public void testCancelCoalescedRequest() throws Exception {
  fTrace=setupTrace(DIRECTORY + File.separator + TEST_STREAM);
  TmfSignalManager.register(this);
  TmfTestTriggerSignal signal=new TmfTestTriggerSignal(this,0,true);
  TmfSignalManager.dispatchSignal(signal);
  request1.waitForCompletion();
  request2.waitForCompletion();
  request3.waitForCompletion();
  assertEquals(""String_Node_Str"",BLOCK_SIZE,requestedEvents1.size());
  assertTrue(""String_Node_Str"",request1.isCompleted());
  assertTrue(""String_Node_Str"",request1.isCancelled());
  assertEquals(""String_Node_Str"",NB_EVENTS,requestedEvents2.size());
  assertTrue(""String_Node_Str"",request2.isCompleted());
  assertFalse(""String_Node_Str"",request2.isCancelled());
  assertEquals(""String_Node_Str"",NB_EVENTS,requestedEvents3.size());
  assertTrue(""String_Node_Str"",request3.isCompleted());
  assertFalse(""String_Node_Str"",request3.isCancelled());
  for (int i=0; i < BLOCK_SIZE; i++) {
    assertEquals(""String_Node_Str"",i + 1 + request1.getIndex(),requestedEvents1.get(i).getTimestamp().getValue());
  }
  for (int i=0; i < NB_EVENTS; i++) {
    assertEquals(""String_Node_Str"",i + 1 + request2.getIndex(),requestedEvents2.get(i).getTimestamp().getValue());
    assertEquals(""String_Node_Str"",i + 1 + request3.getIndex(),requestedEvents3.get(i).getTimestamp().getValue());
  }
  TmfSignalManager.deregister(this);
  fTrace.dispose();
  fTrace=null;
}",0.9170471841704718
92191,"@TmfSignalHandler @SuppressWarnings(""String_Node_Str"") public void trigger(final TmfTestTriggerSignal signal){
  TmfTimeRange range=new TmfTimeRange(TmfTimestamp.BIG_BANG,TmfTimestamp.BIG_CRUNCH);
  requestedEvents1=new Vector<TmfEvent>();
  request1=new TmfEventRequest<TmfEvent>(TmfEvent.class,range,signal.fIndex,NB_EVENTS,BLOCK_SIZE){
    int nbRead=0;
    @Override public void handleData(    TmfEvent event){
      super.handleData(event);
      if (!isCompleted()) {
        requestedEvents1.add(event);
        if (++nbRead >= BLOCK_SIZE && signal.forceCancel) {
          cancel();
        }
      }
    }
  }
;
  requestedEvents2=new Vector<TmfEvent>();
  request2=new TmfEventRequest<TmfEvent>(TmfEvent.class,range,signal.fIndex,NB_EVENTS,BLOCK_SIZE){
    @Override public void handleData(    TmfEvent event){
      super.handleData(event);
      if (!isCompleted()) {
        requestedEvents2.add(event);
      }
    }
  }
;
  requestedEvents3=new Vector<TmfEvent>();
  request3=new TmfEventRequest<TmfEvent>(TmfEvent.class,range,signal.fIndex,NB_EVENTS,BLOCK_SIZE){
    @Override public void handleData(    TmfEvent event){
      super.handleData(event);
      if (!isCompleted()) {
        requestedEvents3.add(event);
      }
    }
  }
;
  providers=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TmfTraceStub.class);
  providers[0].sendRequest(request1);
  providers[0].sendRequest(request2);
  providers[0].sendRequest(request3);
}","@TmfSignalHandler @SuppressWarnings(""String_Node_Str"") public void trigger(final TmfTestTriggerSignal signal){
  TmfTimeRange range=new TmfTimeRange(TmfTimestamp.BIG_BANG,TmfTimestamp.BIG_CRUNCH);
  final long REQUEST_OFFSET=1000;
  requestedEvents1=new Vector<TmfEvent>();
  request1=new TmfEventRequest<TmfEvent>(TmfEvent.class,range,signal.fIndex,NB_EVENTS,BLOCK_SIZE){
    int nbRead=0;
    @Override public void handleData(    TmfEvent event){
      super.handleData(event);
      if (!isCompleted()) {
        requestedEvents1.add(event);
        if (++nbRead >= BLOCK_SIZE && signal.forceCancel) {
          cancel();
        }
      }
    }
  }
;
  requestedEvents2=new Vector<TmfEvent>();
  request2=new TmfEventRequest<TmfEvent>(TmfEvent.class,range,signal.fIndex + REQUEST_OFFSET,NB_EVENTS,BLOCK_SIZE){
    @Override public void handleData(    TmfEvent event){
      super.handleData(event);
      if (!isCompleted()) {
        requestedEvents2.add(event);
      }
    }
  }
;
  requestedEvents3=new Vector<TmfEvent>();
  request3=new TmfEventRequest<TmfEvent>(TmfEvent.class,range,signal.fIndex + 2 * REQUEST_OFFSET,NB_EVENTS,BLOCK_SIZE){
    @Override public void handleData(    TmfEvent event){
      super.handleData(event);
      if (!isCompleted()) {
        requestedEvents3.add(event);
      }
    }
  }
;
  providers=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TmfTraceStub.class);
  providers[0].sendRequest(request1);
  providers[0].sendRequest(request2);
  providers[0].sendRequest(request3);
}",0.976221928665786
92192,"@Override public void handleData(T data){
  super.handleData(data);
  if (getClass() == TmfCoalescedDataRequest.class) {
    long index=getIndex() + getNbRead();
    for (    ITmfDataRequest<T> request : fRequests) {
      if (!request.isCompleted()) {
        if (request.getDataType().isInstance(data)) {
          long start=request.getIndex();
          long end=start + request.getNbRequested() - 1;
          if (index >= start && index < end) {
            request.handleData(data);
          }
        }
      }
    }
  }
}","@Override public void handleData(T data){
  super.handleData(data);
  if (getClass() == TmfCoalescedDataRequest.class) {
    long index=getIndex() + getNbRead() - 1;
    for (    ITmfDataRequest<T> request : fRequests) {
      if (!request.isCompleted()) {
        if (request.getDataType().isInstance(data)) {
          long start=request.getIndex();
          long end=start + request.getNbRequested();
          if (index >= start && index < end) {
            request.handleData(data);
          }
        }
      }
    }
  }
}",0.992467043314501
92193,"@Override public void handleData(T data){
  super.handleData(data);
  for (  ITmfDataRequest<T> request : fRequests) {
    if (data == null) {
      request.handleData(null);
    }
 else {
      if (request instanceof TmfEventRequest<?>) {
        TmfEventRequest<T> req=(TmfEventRequest<T>)request;
        if (!req.isCompleted() && (getIndex() + getNbRead() > request.getIndex())) {
          ITmfTimestamp ts=data.getTimestamp();
          if (req.getRange().contains(ts)) {
            if (req.getDataType().isInstance(data)) {
              req.handleData(data);
            }
          }
        }
      }
 else {
        TmfDataRequest<T> req=(TmfDataRequest<T>)request;
        if (!req.isCompleted()) {
          if (req.getDataType().isInstance(data)) {
            req.handleData(data);
          }
        }
      }
    }
  }
}","@Override public void handleData(T data){
  super.handleData(data);
  long index=getIndex() + getNbRead() - 1;
  for (  ITmfDataRequest<T> request : fRequests) {
    if (data == null) {
      request.handleData(null);
    }
 else {
      long start=request.getIndex();
      long end=start + request.getNbRequested();
      if (request instanceof TmfEventRequest<?>) {
        TmfEventRequest<T> req=(TmfEventRequest<T>)request;
        if (!req.isCompleted() && index >= start && index < end) {
          ITmfTimestamp ts=data.getTimestamp();
          if (req.getRange().contains(ts)) {
            if (req.getDataType().isInstance(data)) {
              req.handleData(data);
            }
          }
        }
      }
 else {
        TmfDataRequest<T> req=(TmfDataRequest<T>)request;
        if (!req.isCompleted() && index >= start && index < end) {
          if (req.getDataType().isInstance(data)) {
            req.handleData(data);
          }
        }
      }
    }
  }
}",0.8803512623490669
92194,"/** 
 * Sends pending request (if any)
 */
protected void sendPendingUpdate(){
synchronized (fStatisticsUpdateSyncObj) {
    fStatisticsUpdateBusy=false;
    if (fStatisticsUpdatePending) {
      fStatisticsUpdatePending=false;
      requestData(TmfExperiment.getCurrentExperiment(),fStatisticsUpdateRange);
    }
  }
}","/** 
 * Sends pending request (if any)
 */
protected void sendPendingUpdate(){
synchronized (fStatisticsUpdateSyncObj) {
    fStatisticsUpdateBusy=false;
    if (fStatisticsUpdatePending) {
      fStatisticsUpdatePending=false;
      requestData(TmfExperiment.getCurrentExperiment(),fStatisticsUpdateRange);
      fStatisticsUpdateRange=null;
    }
  }
}",0.9479940564635958
92195,"/** 
 * Reset update synchronization information
 */
protected void resetUpdateSynchronization(){
synchronized (fStatisticsUpdateSyncObj) {
    fStatisticsUpdateBusy=false;
    fStatisticsUpdatePending=false;
  }
}","/** 
 * Reset update synchronization information
 */
protected void resetUpdateSynchronization(){
synchronized (fStatisticsUpdateSyncObj) {
    fStatisticsUpdateBusy=false;
    fStatisticsUpdatePending=false;
    fStatisticsUpdateRange=null;
  }
}",0.928416485900217
92196,"/** 
 * Checks if statistic update is ongoing. If it is ongoing the new time range is stored as pending
 * @param timeRange - new time range
 * @return true if statistic update is ongoing else false
 */
protected boolean checkUpdateBusy(TmfTimeRange timeRange){
synchronized (fStatisticsUpdateSyncObj) {
    if (fStatisticsUpdateBusy) {
      fStatisticsUpdatePending=true;
      fStatisticsUpdateRange=timeRange;
      return true;
    }
    fStatisticsUpdateBusy=true;
    return false;
  }
}","/** 
 * Checks if statistic update is ongoing. If it is ongoing the new time range is stored as pending
 * @param timeRange - new time range
 * @return true if statistic update is ongoing else false
 */
protected boolean checkUpdateBusy(TmfTimeRange timeRange){
synchronized (fStatisticsUpdateSyncObj) {
    if (fStatisticsUpdateBusy) {
      fStatisticsUpdatePending=true;
      if (fStatisticsUpdateRange == null || timeRange.getEndTime().compareTo(fStatisticsUpdateRange.getEndTime()) > 0) {
        fStatisticsUpdateRange=timeRange;
      }
      return true;
    }
    fStatisticsUpdateBusy=true;
    return false;
  }
}",0.8436103663985701
92197,"/** 
 * Finish the import.
 * @return <code>true</code> if successful else false
 */
public boolean finish(){
  File sourceDir=new File(getSourceDirectoryName());
  if (!sourceDir.isDirectory()) {
    setErrorMessage(Messages.ImportTraceWizard_InvalidTraceDirectory);
    return false;
  }
  String sourceDirPath;
  try {
    sourceDirPath=sourceDir.getCanonicalPath();
  }
 catch (  IOException e) {
    MessageDialog.openInformation(getContainer().getShell(),Messages.ImportTraceWizard_Information,Messages.ImportTraceWizard_InvalidTraceDirectory);
    return false;
  }
  fRootDirectory=getSourceDirectoryName();
  List<FileSystemElement> selectedResources=getSelectedResources();
  Iterator<FileSystemElement> resources=selectedResources.iterator();
  Map<String,File> fileSystemObjects=new HashMap<String,File>();
  while (resources.hasNext()) {
    File file=(File)resources.next().getFileSystemObject();
    String key=file.getAbsolutePath();
    fileSystemObjects.put(key,file);
  }
  if (fileSystemObjects.size() > 0) {
    boolean ok=importResources(sourceDirPath,fileSystemObjects);
    String traceBundle=null;
    String traceTypeId=null;
    String traceIcon=null;
    String traceType=fTraceTypes.getText();
    boolean traceTypeOK=false;
    if (traceType.startsWith(CUSTOM_TXT_CATEGORY)) {
      for (      CustomTxtTraceDefinition def : CustomTxtTraceDefinition.loadAll()) {
        if (traceType.equals(CUSTOM_TXT_CATEGORY + ""String_Node_Str"" + def.definitionName)) {
          traceTypeOK=true;
          traceBundle=Activator.getDefault().getBundle().getSymbolicName();
          traceTypeId=CustomTxtTrace.class.getCanonicalName() + ""String_Node_Str"" + def.definitionName;
          traceIcon=DEFAULT_TRACE_ICON_PATH;
          break;
        }
      }
    }
 else     if (traceType.startsWith(CUSTOM_XML_CATEGORY)) {
      for (      CustomXmlTraceDefinition def : CustomXmlTraceDefinition.loadAll()) {
        if (traceType.equals(CUSTOM_XML_CATEGORY + ""String_Node_Str"" + def.definitionName)) {
          traceTypeOK=true;
          traceBundle=Activator.getDefault().getBundle().getSymbolicName();
          traceTypeId=CustomXmlTrace.class.getCanonicalName() + ""String_Node_Str"" + def.definitionName;
          traceIcon=DEFAULT_TRACE_ICON_PATH;
          break;
        }
      }
    }
 else {
      IConfigurationElement ce=fTraceAttributes.get(traceType);
      if (ce != null) {
        traceTypeOK=true;
        traceBundle=ce.getContributor().getName();
        traceTypeId=ce.getAttribute(TmfTraceType.ID_ATTR);
        traceIcon=ce.getAttribute(TmfTraceType.ICON_ATTR);
      }
    }
    if (ok && traceTypeOK && !traceType.equals(""String_Node_Str"")) {
      List<String> files=new ArrayList<String>(fileSystemObjects.keySet());
      Collections.sort(files,new Comparator<String>(){
        @Override public int compare(        String o1,        String o2){
          String v1=o1 + File.separatorChar;
          String v2=o2 + File.separatorChar;
          return v1.compareTo(v2);
        }
      }
);
      String prefix=null;
      for (int i=0; i < files.size(); i++) {
        File file=fileSystemObjects.get(files.get(i));
        String name=file.getAbsolutePath() + File.separatorChar;
        if (fTargetFolder != null && (prefix == null || !name.startsWith(prefix))) {
          prefix=name;
          IResource resource=fTargetFolder.findMember(file.getName());
          if (resource != null) {
            try {
              resource.setPersistentProperty(TmfCommonConstants.TRACEBUNDLE,traceBundle);
              resource.setPersistentProperty(TmfCommonConstants.TRACETYPE,traceTypeId);
              resource.setPersistentProperty(TmfCommonConstants.TRACEICON,traceIcon);
              for (              TmfTraceElement traceElement : TmfProjectRegistry.getProject(resource.getProject()).getTracesFolder().getTraces()) {
                if (traceElement.getName().equals(resource.getName())) {
                  traceElement.refreshTraceType();
                  break;
                }
              }
            }
 catch (            CoreException e) {
              Activator.getDefault().logError(""String_Node_Str"" + resource.getName(),e);
            }
          }
        }
      }
    }
    return ok;
  }
  MessageDialog.openInformation(getContainer().getShell(),Messages.ImportTraceWizard_Information,Messages.ImportTraceWizard_SelectTraceNoneSelected);
  return false;
}","/** 
 * Finish the import.
 * @return <code>true</code> if successful else false
 */
public boolean finish(){
  File sourceDir=new File(getSourceDirectoryName());
  if (!sourceDir.isDirectory()) {
    setErrorMessage(Messages.ImportTraceWizard_InvalidTraceDirectory);
    return false;
  }
  String sourceDirPath;
  try {
    sourceDirPath=sourceDir.getCanonicalPath();
  }
 catch (  IOException e) {
    MessageDialog.openInformation(getContainer().getShell(),Messages.ImportTraceWizard_Information,Messages.ImportTraceWizard_InvalidTraceDirectory);
    return false;
  }
  fRootDirectory=getSourceDirectoryName();
  List<FileSystemElement> selectedResources=getSelectedResources();
  Iterator<FileSystemElement> resources=selectedResources.iterator();
  Map<String,File> fileSystemObjects=new HashMap<String,File>();
  while (resources.hasNext()) {
    File file=(File)resources.next().getFileSystemObject();
    String key=file.getAbsolutePath();
    fileSystemObjects.put(key,file);
  }
  if (fileSystemObjects.size() > 0) {
    boolean ok=importResources(sourceDirPath,fileSystemObjects);
    String traceBundle=null;
    String traceTypeId=null;
    String traceIcon=null;
    String traceType=fTraceTypes.getText();
    boolean traceTypeOK=false;
    if (traceType.startsWith(CUSTOM_TXT_CATEGORY)) {
      for (      CustomTxtTraceDefinition def : CustomTxtTraceDefinition.loadAll()) {
        if (traceType.equals(CUSTOM_TXT_CATEGORY + ""String_Node_Str"" + def.definitionName)) {
          traceTypeOK=true;
          traceBundle=Activator.getDefault().getBundle().getSymbolicName();
          traceTypeId=CustomTxtTrace.class.getCanonicalName() + ""String_Node_Str"" + def.definitionName;
          traceIcon=DEFAULT_TRACE_ICON_PATH;
          break;
        }
      }
    }
 else     if (traceType.startsWith(CUSTOM_XML_CATEGORY)) {
      for (      CustomXmlTraceDefinition def : CustomXmlTraceDefinition.loadAll()) {
        if (traceType.equals(CUSTOM_XML_CATEGORY + ""String_Node_Str"" + def.definitionName)) {
          traceTypeOK=true;
          traceBundle=Activator.getDefault().getBundle().getSymbolicName();
          traceTypeId=CustomXmlTrace.class.getCanonicalName() + ""String_Node_Str"" + def.definitionName;
          traceIcon=DEFAULT_TRACE_ICON_PATH;
          break;
        }
      }
    }
 else {
      IConfigurationElement ce=fTraceAttributes.get(traceType);
      if (ce != null) {
        traceTypeOK=true;
        traceBundle=ce.getContributor().getName();
        traceTypeId=ce.getAttribute(TmfTraceType.ID_ATTR);
        traceIcon=ce.getAttribute(TmfTraceType.ICON_ATTR);
      }
    }
    if (ok && traceTypeOK && !traceType.equals(""String_Node_Str"")) {
      List<String> files=new ArrayList<String>(fileSystemObjects.keySet());
      Collections.sort(files,new Comparator<String>(){
        @Override public int compare(        String o1,        String o2){
          String v1=o1 + File.separatorChar;
          String v2=o2 + File.separatorChar;
          return v1.compareTo(v2);
        }
      }
);
      String prefix=null;
      for (int i=0; i < files.size(); i++) {
        File file=fileSystemObjects.get(files.get(i));
        String name=file.getAbsolutePath() + File.separatorChar;
        if (fTargetFolder != null && (prefix == null || !name.startsWith(prefix))) {
          prefix=name;
          IResource resource=fTargetFolder.findMember(file.getName());
          if (resource != null) {
            try {
              resource.setPersistentProperty(TmfCommonConstants.TRACEBUNDLE,traceBundle);
              resource.setPersistentProperty(TmfCommonConstants.TRACETYPE,traceTypeId);
              resource.setPersistentProperty(TmfCommonConstants.TRACEICON,traceIcon);
              TmfProjectElement tmfProject=TmfProjectRegistry.getProject(resource.getProject());
              if (tmfProject != null) {
                for (                TmfTraceElement traceElement : tmfProject.getTracesFolder().getTraces()) {
                  if (traceElement.getName().equals(resource.getName())) {
                    traceElement.refreshTraceType();
                    break;
                  }
                }
              }
            }
 catch (            CoreException e) {
              Activator.getDefault().logError(""String_Node_Str"" + resource.getName(),e);
            }
          }
        }
      }
    }
    return ok;
  }
  MessageDialog.openInformation(getContainer().getShell(),Messages.ImportTraceWizard_Information,Messages.ImportTraceWizard_SelectTraceNoneSelected);
  return false;
}",0.9705522835870652
92198,"@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null)   return null;
  Shell shell=window.getShell();
  MessageBox confirmOperation=new MessageBox(shell,SWT.ICON_QUESTION | SWT.CANCEL | SWT.OK);
  confirmOperation.setText(Messages.DeleteDialog_Title);
  confirmOperation.setMessage(Messages.DeleteTraceHandler_Message);
  if (confirmOperation.open() != SWT.OK)   return null;
  @SuppressWarnings(""String_Node_Str"") Iterator<Object> iterator=fSelection.iterator();
  while (iterator.hasNext()) {
    Object element=iterator.next();
    if (element instanceof TmfTraceElement) {
      TmfTraceElement trace=(TmfTraceElement)element;
      IResource resource=trace.getResource();
      try {
        IPath path=resource.getLocation();
        if (path != null && (trace.getParent() instanceof TmfTraceFolder)) {
          String location=path.toFile().getCanonicalPath();
          TmfExperimentFolder experimentFolder=trace.getProject().getExperimentsFolder();
          for (          ITmfProjectModelElement experiment : experimentFolder.getChildren()) {
            List<ITmfProjectModelElement> toRemove=new LinkedList<ITmfProjectModelElement>();
            for (            ITmfProjectModelElement child : experiment.getChildren()) {
              if (child.getResource().getLocation().toString().equals(location)) {
                toRemove.add(child);
              }
            }
            for (            ITmfProjectModelElement child : toRemove) {
              experiment.removeChild(child);
              child.getResource().delete(true,null);
            }
          }
        }
        resource.delete(true,new NullProgressMonitor());
        trace.deleteSupplementaryFolder();
        trace.getProject().refresh();
      }
 catch (      IOException e) {
        Activator.getDefault().logError(""String_Node_Str"" + trace.getName(),e);
      }
catch (      CoreException e) {
        Activator.getDefault().logError(""String_Node_Str"" + trace.getName(),e);
      }
    }
  }
  return null;
}","@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null)   return null;
  Shell shell=window.getShell();
  MessageBox confirmOperation=new MessageBox(shell,SWT.ICON_QUESTION | SWT.CANCEL | SWT.OK);
  confirmOperation.setText(Messages.DeleteDialog_Title);
  confirmOperation.setMessage(Messages.DeleteTraceHandler_Message);
  if (confirmOperation.open() != SWT.OK)   return null;
  @SuppressWarnings(""String_Node_Str"") Iterator<Object> iterator=fSelection.iterator();
  while (iterator.hasNext()) {
    Object element=iterator.next();
    if (element instanceof TmfTraceElement) {
      TmfTraceElement trace=(TmfTraceElement)element;
      IResource resource=trace.getResource();
      try {
        IPath path=resource.getLocation();
        if (path != null && (trace.getParent() instanceof TmfTraceFolder)) {
          String location=path.toString();
          TmfExperimentFolder experimentFolder=trace.getProject().getExperimentsFolder();
          for (          ITmfProjectModelElement experiment : experimentFolder.getChildren()) {
            List<ITmfProjectModelElement> toRemove=new LinkedList<ITmfProjectModelElement>();
            for (            ITmfProjectModelElement child : experiment.getChildren()) {
              if (child.getResource().getLocation().toString().equals(location)) {
                toRemove.add(child);
              }
            }
            for (            ITmfProjectModelElement child : toRemove) {
              experiment.removeChild(child);
              child.getResource().delete(true,null);
            }
          }
        }
        resource.delete(true,new NullProgressMonitor());
        trace.deleteSupplementaryFolder();
        trace.getProject().refresh();
      }
 catch (      CoreException e) {
        Activator.getDefault().logError(""String_Node_Str"" + trace.getName(),e);
      }
    }
  }
  return null;
}",0.9562484892434132
92199,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  while (!fExecutor.isShutdown()) {
    final TmfExperiment<?> experiment=TmfExperiment.getCurrentExperiment();
    if (experiment != null) {
      @SuppressWarnings(""String_Node_Str"") final TmfEventRequest request=new TmfEventRequest<TmfEvent>(TmfEvent.class,TmfTimeRange.ETERNITY,0,ExecutionType.FOREGROUND){
        @Override public void handleCompleted(){
          updateJniTrace();
        }
      }
;
synchronized (experiment) {
        experiment.sendRequest(request);
      }
      try {
        request.waitForCompletion();
      }
 catch (      final InterruptedException e) {
      }
    }
 else     updateJniTrace();
    try {
      Thread.sleep(LTTNG_STREAMING_INTERVAL);
    }
 catch (    final InterruptedException e) {
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
  while (!fExecutor.isShutdown()) {
    final TmfExperiment<?> experiment=TmfExperiment.getCurrentExperiment();
    if (experiment != null) {
      @SuppressWarnings(""String_Node_Str"") final TmfEventRequest request=new TmfEventRequest<TmfEvent>(TmfEvent.class,TmfTimeRange.ETERNITY,0,ExecutionType.FOREGROUND){
        @Override public void handleCompleted(){
          updateJniTrace();
        }
      }
;
      experiment.sendRequest(request);
      try {
        request.waitForCompletion();
      }
 catch (      final InterruptedException e) {
      }
    }
 else     updateJniTrace();
    try {
      Thread.sleep(LTTNG_STREAMING_INTERVAL);
    }
 catch (    final InterruptedException e) {
    }
  }
}",0.9766584766584766
92200,"private void initializeStreamingMonitor(){
  final JniTrace jniTrace=getCurrentJniTrace();
  if (jniTrace == null || (!jniTrace.isLiveTraceSupported() || !LiveTraceManager.isLiveTrace(jniTrace.getTracepath()))) {
    final ITmfContext context=seekEvent(0);
    final LttngEvent event=getNext(context);
    final LttngTimestamp startTime=new LttngTimestamp(event.getTimestamp());
    final LttngTimestamp endTime=new LttngTimestamp(currentJniTrace.getEndTime().getTime());
    setTimeRange(new TmfTimeRange(startTime,endTime));
    final TmfTraceUpdatedSignal signal=new TmfTraceUpdatedSignal(this,this,getTimeRange());
    broadcast(signal);
    return;
  }
  final ITmfContext context=seekEvent(0);
  final LttngEvent event=getNext(context);
  setEndTime(TmfTimestamp.BIG_BANG);
  final long startTime=event != null ? event.getTimestamp().getValue() : TmfTimestamp.BIG_BANG.getValue();
  setStreamingInterval(LTTNG_STREAMING_INTERVAL);
  final Thread thread=new Thread(""String_Node_Str"" + getName()){
    LttngTimestamp safeTimestamp=null;
    TmfTimeRange timeRange=null;
    @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
      while (!fExecutor.isShutdown()) {
        final TmfExperiment<?> experiment=TmfExperiment.getCurrentExperiment();
        if (experiment != null) {
          @SuppressWarnings(""String_Node_Str"") final TmfEventRequest request=new TmfEventRequest<TmfEvent>(TmfEvent.class,TmfTimeRange.ETERNITY,0,ExecutionType.FOREGROUND){
            @Override public void handleCompleted(){
              updateJniTrace();
            }
          }
;
synchronized (experiment) {
            experiment.sendRequest(request);
          }
          try {
            request.waitForCompletion();
          }
 catch (          final InterruptedException e) {
          }
        }
 else         updateJniTrace();
        try {
          Thread.sleep(LTTNG_STREAMING_INTERVAL);
        }
 catch (        final InterruptedException e) {
        }
      }
    }
    private void updateJniTrace(){
      final JniTrace jniTrace=getCurrentJniTrace();
      currentJniTrace.updateTrace();
      final long endTime=jniTrace.getEndTime().getTime();
      final LttngTimestamp startTimestamp=new LttngTimestamp(startTime);
      final LttngTimestamp endTimestamp=new LttngTimestamp(endTime);
      if (safeTimestamp != null && safeTimestamp.compareTo(getTimeRange().getEndTime(),false) > 0)       timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
 else       timeRange=null;
      safeTimestamp=endTimestamp;
      if (timeRange != null)       setTimeRange(timeRange);
    }
  }
;
  thread.start();
}","private void initializeStreamingMonitor(){
  final JniTrace jniTrace=getCurrentJniTrace();
  if (jniTrace == null || (!jniTrace.isLiveTraceSupported() || !LiveTraceManager.isLiveTrace(jniTrace.getTracepath()))) {
    final ITmfContext context=seekEvent(0);
    final LttngEvent event=getNext(context);
    final LttngTimestamp startTime=new LttngTimestamp(event.getTimestamp());
    final LttngTimestamp endTime=new LttngTimestamp(currentJniTrace.getEndTime().getTime());
    setTimeRange(new TmfTimeRange(startTime,endTime));
    final TmfTraceUpdatedSignal signal=new TmfTraceUpdatedSignal(this,this,getTimeRange());
    broadcast(signal);
    return;
  }
  final ITmfContext context=seekEvent(0);
  final LttngEvent event=getNext(context);
  setEndTime(TmfTimestamp.BIG_BANG);
  final long startTime=event != null ? event.getTimestamp().getValue() : TmfTimestamp.BIG_BANG.getValue();
  setStreamingInterval(LTTNG_STREAMING_INTERVAL);
  final Thread thread=new Thread(""String_Node_Str"" + getName()){
    LttngTimestamp safeTimestamp=null;
    TmfTimeRange timeRange=null;
    @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void run(){
      while (!fExecutor.isShutdown()) {
        final TmfExperiment<?> experiment=TmfExperiment.getCurrentExperiment();
        if (experiment != null) {
          @SuppressWarnings(""String_Node_Str"") final TmfEventRequest request=new TmfEventRequest<TmfEvent>(TmfEvent.class,TmfTimeRange.ETERNITY,0,ExecutionType.FOREGROUND){
            @Override public void handleCompleted(){
              updateJniTrace();
            }
          }
;
          experiment.sendRequest(request);
          try {
            request.waitForCompletion();
          }
 catch (          final InterruptedException e) {
          }
        }
 else         updateJniTrace();
        try {
          Thread.sleep(LTTNG_STREAMING_INTERVAL);
        }
 catch (        final InterruptedException e) {
        }
      }
    }
    private void updateJniTrace(){
      final JniTrace jniTrace=getCurrentJniTrace();
      currentJniTrace.updateTrace();
      final long endTime=jniTrace.getEndTime().getTime();
      final LttngTimestamp startTimestamp=new LttngTimestamp(startTime);
      final LttngTimestamp endTimestamp=new LttngTimestamp(endTime);
      if (safeTimestamp != null && safeTimestamp.compareTo(getTimeRange().getEndTime(),false) > 0)       timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
 else       timeRange=null;
      safeTimestamp=endTimestamp;
      if (timeRange != null)       setTimeRange(timeRange);
    }
  }
;
  thread.start();
}",0.9881994670727066
92201,"private synchronized void initializeStreamingMonitor(){
  if (fInitialized) {
    return;
  }
  fInitialized=true;
  if (getStreamingInterval() == 0) {
    final ITmfContext context=seekEvent(0);
    final ITmfEvent event=getNext(context);
    if (event == null) {
      return;
    }
    final TmfTimeRange timeRange=new TmfTimeRange(event.getTimestamp().clone(),TmfTimestamp.BIG_CRUNCH);
    final TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(this,this,timeRange);
    new Thread(){
      @Override public void run(){
        broadcast(signal);
      }
    }
.start();
    return;
  }
  final Thread thread=new Thread(""String_Node_Str"" + getName()){
    private ITmfTimestamp safeTimestamp=null;
    private TmfTimeRange timeRange=null;
    @Override public void run(){
      while (!fExecutor.isShutdown()) {
        if (!getIndexer().isIndexing()) {
          ITmfTimestamp startTimestamp=TmfTimestamp.BIG_CRUNCH;
          ITmfTimestamp endTimestamp=TmfTimestamp.BIG_BANG;
          for (          final ITmfTrace<T> trace : fTraces) {
            if (trace.getStartTime().compareTo(startTimestamp) < 0) {
              startTimestamp=trace.getStartTime();
            }
            if (trace.getStreamingInterval() != 0 && trace.getEndTime().compareTo(endTimestamp) > 0) {
              endTimestamp=trace.getEndTime();
            }
          }
          if (safeTimestamp != null && safeTimestamp.compareTo(getTimeRange().getEndTime(),false) > 0) {
            timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
          }
 else {
            timeRange=null;
          }
          safeTimestamp=endTimestamp;
          if (timeRange != null) {
            final TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(TmfExperiment.this,TmfExperiment.this,timeRange);
            broadcast(signal);
          }
        }
        try {
          Thread.sleep(getStreamingInterval());
        }
 catch (        final InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  thread.start();
}","private synchronized void initializeStreamingMonitor(){
  if (fInitialized) {
    return;
  }
  fInitialized=true;
  if (getStreamingInterval() == 0) {
    final ITmfContext context=seekEvent(0);
    final ITmfEvent event=getNext(context);
    if (event == null) {
      return;
    }
    final TmfTimeRange timeRange=new TmfTimeRange(event.getTimestamp().clone(),TmfTimestamp.BIG_CRUNCH);
    final TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(this,this,timeRange);
    new Thread(){
      @Override public void run(){
        broadcast(signal);
      }
    }
.start();
    return;
  }
  final Thread thread=new Thread(""String_Node_Str"" + getName()){
    private ITmfTimestamp safeTimestamp=null;
    private ITmfTimestamp lastSafeTimestamp=null;
    private TmfTimeRange timeRange=null;
    @Override public void run(){
      while (!fExecutor.isShutdown()) {
        if (!getIndexer().isIndexing()) {
          ITmfTimestamp startTimestamp=TmfTimestamp.BIG_CRUNCH;
          ITmfTimestamp endTimestamp=TmfTimestamp.BIG_BANG;
          for (          final ITmfTrace<T> trace : fTraces) {
            if (trace.getStartTime().compareTo(startTimestamp) < 0) {
              startTimestamp=trace.getStartTime();
            }
            if (trace.getStreamingInterval() != 0 && trace.getEndTime().compareTo(endTimestamp) > 0) {
              endTimestamp=trace.getEndTime();
            }
          }
          if (safeTimestamp != null && (lastSafeTimestamp == null || safeTimestamp.compareTo(lastSafeTimestamp,false) > 0)) {
            timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
            lastSafeTimestamp=safeTimestamp;
          }
 else {
            timeRange=null;
          }
          safeTimestamp=endTimestamp;
          if (timeRange != null) {
            final TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(TmfExperiment.this,TmfExperiment.this,timeRange);
            broadcast(signal);
          }
        }
        try {
          Thread.sleep(getStreamingInterval());
        }
 catch (        final InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  thread.start();
}",0.925839552238806
92202,"@Override public void run(){
  while (!fExecutor.isShutdown()) {
    if (!getIndexer().isIndexing()) {
      ITmfTimestamp startTimestamp=TmfTimestamp.BIG_CRUNCH;
      ITmfTimestamp endTimestamp=TmfTimestamp.BIG_BANG;
      for (      final ITmfTrace<T> trace : fTraces) {
        if (trace.getStartTime().compareTo(startTimestamp) < 0) {
          startTimestamp=trace.getStartTime();
        }
        if (trace.getStreamingInterval() != 0 && trace.getEndTime().compareTo(endTimestamp) > 0) {
          endTimestamp=trace.getEndTime();
        }
      }
      if (safeTimestamp != null && safeTimestamp.compareTo(getTimeRange().getEndTime(),false) > 0) {
        timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
      }
 else {
        timeRange=null;
      }
      safeTimestamp=endTimestamp;
      if (timeRange != null) {
        final TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(TmfExperiment.this,TmfExperiment.this,timeRange);
        broadcast(signal);
      }
    }
    try {
      Thread.sleep(getStreamingInterval());
    }
 catch (    final InterruptedException e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  while (!fExecutor.isShutdown()) {
    if (!getIndexer().isIndexing()) {
      ITmfTimestamp startTimestamp=TmfTimestamp.BIG_CRUNCH;
      ITmfTimestamp endTimestamp=TmfTimestamp.BIG_BANG;
      for (      final ITmfTrace<T> trace : fTraces) {
        if (trace.getStartTime().compareTo(startTimestamp) < 0) {
          startTimestamp=trace.getStartTime();
        }
        if (trace.getStreamingInterval() != 0 && trace.getEndTime().compareTo(endTimestamp) > 0) {
          endTimestamp=trace.getEndTime();
        }
      }
      if (safeTimestamp != null && (lastSafeTimestamp == null || safeTimestamp.compareTo(lastSafeTimestamp,false) > 0)) {
        timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
        lastSafeTimestamp=safeTimestamp;
      }
 else {
        timeRange=null;
      }
      safeTimestamp=endTimestamp;
      if (timeRange != null) {
        final TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(TmfExperiment.this,TmfExperiment.this,timeRange);
        broadcast(signal);
      }
    }
    try {
      Thread.sleep(getStreamingInterval());
    }
 catch (    final InterruptedException e) {
      e.printStackTrace();
    }
  }
}",0.892436974789916
92203,"private String formatToolTipLabel(final int index){
  long startTime=fScaledData.getBucketStartTime(fScaledData.fCurrentBucket);
  if (startTime < 0) {
    startTime=0;
  }
  final long endTime=fScaledData.getBucketEndTime(fScaledData.fCurrentBucket);
  final int nbEvents=(index >= 0) ? fScaledData.fData[index] : 0;
  final StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  buffer.append(HistogramUtils.nanosecondsToString(startTime));
  buffer.append(""String_Node_Str"");
  buffer.append(HistogramUtils.nanosecondsToString(endTime));
  buffer.append(""String_Node_Str"");
  buffer.append(""String_Node_Str"");
  buffer.append(nbEvents);
  return buffer.toString();
}","private String formatToolTipLabel(final int index){
  long startTime=fScaledData.getBucketStartTime(index);
  if (startTime < 0) {
    startTime=0;
  }
  final long endTime=fScaledData.getBucketEndTime(index);
  final int nbEvents=(index >= 0) ? fScaledData.fData[index] : 0;
  final StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  buffer.append(HistogramUtils.nanosecondsToString(startTime));
  buffer.append(""String_Node_Str"");
  buffer.append(HistogramUtils.nanosecondsToString(endTime));
  buffer.append(""String_Node_Str"");
  buffer.append(""String_Node_Str"");
  buffer.append(nbEvents);
  return buffer.toString();
}",0.849478390461997
92204,"@Override protected void updateValue(){
  String stringValue=fTextValue.getText();
  long value=HistogramUtils.stringToNanoseconds(stringValue);
  if (getValue() != value) {
    TmfExperiment<?> exp=TmfExperiment.getCurrentExperiment();
    if (exp != null) {
      TmfTimeRange range=exp.getTimeRange();
      long startTime=range.getStartTime().getValue();
      long endTime=range.getEndTime().getValue();
      if (value < startTime) {
        value=startTime;
      }
 else       if (value > endTime) {
        value=endTime;
      }
    }
    setValue(value);
    fParentView.updateCurrentEventTime(value);
  }
}","@Override protected void updateValue(){
  String stringValue=fTextValue.getText();
  long value=HistogramUtils.stringToNanoseconds(stringValue);
  if (getValue() != value) {
    TmfExperiment<?> exp=TmfExperiment.getCurrentExperiment();
    if (exp != null) {
      TmfTimeRange range=exp.getTimeRange();
      long startTime=range.getStartTime().normalize(0,-9).getValue();
      long endTime=range.getEndTime().normalize(0,-9).getValue();
      if (value < startTime) {
        value=startTime;
      }
 else       if (value > endTime) {
        value=endTime;
      }
    }
    setValue(value);
    fParentView.updateCurrentEventTime(value);
  }
}",0.9747634069400632
92205,"/** 
 * Handle the event from the trace by updating the histogram data model.
 * @param event a event from the trace
 * @see org.eclipse.linuxtools.tmf.core.request.TmfDataRequest#handleData(org.eclipse.linuxtools.tmf.core.event.ITmfEvent)
 */
@Override public void handleData(ITmfEvent event){
  super.handleData(event);
  if (event != null) {
    long timestamp=event.getTimestamp().getValue();
    fHistogram.countEvent(getNbRead(),timestamp);
  }
}","/** 
 * Handle the event from the trace by updating the histogram data model.
 * @param event a event from the trace
 * @see org.eclipse.linuxtools.tmf.core.request.TmfDataRequest#handleData(org.eclipse.linuxtools.tmf.core.event.ITmfEvent)
 */
@Override public void handleData(ITmfEvent event){
  super.handleData(event);
  if (event != null) {
    long timestamp=event.getTimestamp().normalize(0,-9).getValue();
    fHistogram.countEvent(getNbRead(),timestamp);
  }
}",0.982608695652174
92206,"private final void createTraceTypeGroup(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  composite.setLayout(layout);
  composite.setFont(parent.getFont());
  GridData buttonData=new GridData(SWT.FILL,SWT.FILL,true,false);
  composite.setLayoutData(buttonData);
  Label typeLabel=new Label(composite,SWT.NONE);
  typeLabel.setText(Messages.ImportTraceWizard_TraceType);
  typeLabel.setFont(parent.getFont());
  fTraceTypes=new Combo(composite,SWT.BORDER);
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,false,2,1);
  fTraceTypes.setLayoutData(data);
  fTraceTypes.setFont(parent.getFont());
  String[] availableTraceTypes=getAvailableTraceTypes();
  fTraceTypes.setItems(availableTraceTypes);
  fTraceTypes.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      validateSourceGroup();
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
}","private final void createTraceTypeGroup(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.makeColumnsEqualWidth=false;
  composite.setLayout(layout);
  composite.setFont(parent.getFont());
  GridData buttonData=new GridData(SWT.FILL,SWT.FILL,true,false);
  composite.setLayoutData(buttonData);
  Label typeLabel=new Label(composite,SWT.NONE);
  typeLabel.setText(Messages.ImportTraceWizard_TraceType);
  typeLabel.setFont(parent.getFont());
  fTraceTypes=new Combo(composite,SWT.BORDER);
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,false,2,1);
  fTraceTypes.setLayoutData(data);
  fTraceTypes.setFont(parent.getFont());
  String[] availableTraceTypes=getAvailableTraceTypes();
  fTraceTypes.setItems(availableTraceTypes);
  fTraceTypes.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      updateWidgetEnablements();
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
}",0.980355472404116
92207,"private String formatToolTipLabel(final int index){
  long startTime=fScaledData.getBucketStartTime(fScaledData.fCurrentBucket);
  if (startTime < 0) {
    startTime=0;
  }
  final long endTime=fScaledData.getBucketEndTime(fScaledData.fCurrentBucket);
  final int nbEvents=(index >= 0) ? fScaledData.fData[index] : 0;
  final StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  buffer.append(HistogramUtils.nanosecondsToString(startTime));
  buffer.append(""String_Node_Str"");
  buffer.append(HistogramUtils.nanosecondsToString(endTime));
  buffer.append(""String_Node_Str"");
  buffer.append(""String_Node_Str"");
  buffer.append(nbEvents);
  return buffer.toString();
}","private String formatToolTipLabel(final int index){
  long startTime=fScaledData.getBucketStartTime(index);
  if (startTime < 0) {
    startTime=0;
  }
  final long endTime=fScaledData.getBucketEndTime(index);
  final int nbEvents=(index >= 0) ? fScaledData.fData[index] : 0;
  final StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  buffer.append(HistogramUtils.nanosecondsToString(startTime));
  buffer.append(""String_Node_Str"");
  buffer.append(HistogramUtils.nanosecondsToString(endTime));
  buffer.append(""String_Node_Str"");
  buffer.append(""String_Node_Str"");
  buffer.append(nbEvents);
  return buffer.toString();
}",0.849478390461997
92208,"@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null)   return null;
  Shell shell=window.getShell();
  MessageBox confirmOperation=new MessageBox(shell,SWT.ICON_QUESTION | SWT.CANCEL | SWT.OK);
  confirmOperation.setText(Messages.DeleteDialog_Title);
  confirmOperation.setMessage(Messages.DeleteTraceHandler_Message);
  if (confirmOperation.open() != SWT.OK)   return null;
  @SuppressWarnings(""String_Node_Str"") Iterator<Object> iterator=fSelection.iterator();
  while (iterator.hasNext()) {
    Object element=iterator.next();
    if (element instanceof TmfTraceElement) {
      TmfTraceElement trace=(TmfTraceElement)element;
      IResource resource=trace.getResource();
      try {
        IPath path=resource.getLocation();
        if (path != null && (trace.getParent() instanceof TmfTraceFolder)) {
          String location=path.toFile().getCanonicalPath();
          TmfExperimentFolder experimentFolder=trace.getProject().getExperimentsFolder();
          for (          ITmfProjectModelElement experiment : experimentFolder.getChildren()) {
            List<ITmfProjectModelElement> toRemove=new LinkedList<ITmfProjectModelElement>();
            for (            ITmfProjectModelElement child : experiment.getChildren()) {
              if (child.getResource().getLocation().toString().equals(location)) {
                toRemove.add(child);
              }
            }
            for (            ITmfProjectModelElement child : toRemove) {
              experiment.removeChild(child);
              child.getResource().delete(true,null);
            }
          }
        }
        resource.delete(true,new NullProgressMonitor());
        trace.deleteSupplementaryFolder();
        trace.getProject().refresh();
      }
 catch (      IOException e) {
        Activator.getDefault().logError(""String_Node_Str"" + trace.getName(),e);
      }
catch (      CoreException e) {
        Activator.getDefault().logError(""String_Node_Str"" + trace.getName(),e);
      }
    }
  }
  return null;
}","@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null)   return null;
  Shell shell=window.getShell();
  MessageBox confirmOperation=new MessageBox(shell,SWT.ICON_QUESTION | SWT.CANCEL | SWT.OK);
  confirmOperation.setText(Messages.DeleteDialog_Title);
  confirmOperation.setMessage(Messages.DeleteTraceHandler_Message);
  if (confirmOperation.open() != SWT.OK)   return null;
  @SuppressWarnings(""String_Node_Str"") Iterator<Object> iterator=fSelection.iterator();
  while (iterator.hasNext()) {
    Object element=iterator.next();
    if (element instanceof TmfTraceElement) {
      TmfTraceElement trace=(TmfTraceElement)element;
      IResource resource=trace.getResource();
      try {
        IPath path=resource.getLocation();
        if (path != null && (trace.getParent() instanceof TmfTraceFolder)) {
          String location=path.toString();
          TmfExperimentFolder experimentFolder=trace.getProject().getExperimentsFolder();
          for (          ITmfProjectModelElement experiment : experimentFolder.getChildren()) {
            List<ITmfProjectModelElement> toRemove=new LinkedList<ITmfProjectModelElement>();
            for (            ITmfProjectModelElement child : experiment.getChildren()) {
              if (child.getResource().getLocation().toString().equals(location)) {
                toRemove.add(child);
              }
            }
            for (            ITmfProjectModelElement child : toRemove) {
              experiment.removeChild(child);
              child.getResource().delete(true,null);
            }
          }
        }
        resource.delete(true,new NullProgressMonitor());
        trace.deleteSupplementaryFolder();
        trace.getProject().refresh();
      }
 catch (      CoreException e) {
        Activator.getDefault().logError(""String_Node_Str"" + trace.getName(),e);
      }
    }
  }
  return null;
}",0.9562484892434132
92209,"/** 
 * Sets or clears the input for this time graph combo. The input array should only contain top-level elements.
 * @param input the input of this time graph combo, or <code>null</code> if none
 */
public void setInput(ITimeGraphEntry[] input){
  fInhibitTreeSelection=true;
  fTreeViewer.setInput(input);
  fInhibitTreeSelection=false;
  fTreeViewer.expandAll();
  fTreeViewer.getTree().getVerticalBar().setEnabled(false);
  fTreeViewer.getTree().getVerticalBar().setVisible(false);
  fTimeGraphViewer.setItemHeight(getItemHeight(fTreeViewer.getTree()));
  fTimeGraphViewer.setInput(input);
}","/** 
 * Sets or clears the input for this time graph combo. The input array should only contain top-level elements.
 * @param input the input of this time graph combo, or <code>null</code> if none
 */
public void setInput(ITimeGraphEntry[] input){
  fInhibitTreeSelection=true;
  fTreeViewer.setInput(input);
  for (  SelectionListenerWrapper listenerWrapper : fSelectionListenerMap.values()) {
    listenerWrapper.selection=null;
  }
  fInhibitTreeSelection=false;
  fTreeViewer.expandAll();
  fTreeViewer.getTree().getVerticalBar().setEnabled(false);
  fTreeViewer.getTree().getVerticalBar().setVisible(false);
  fTimeGraphViewer.setItemHeight(getItemHeight(fTreeViewer.getTree()));
  fTimeGraphViewer.setInput(input);
}",0.9044006069802732
92210,"/** 
 * Sets or clears the input for this time graph viewer. The input array should only contain top-level elements.
 * @param input the input of this time graph viewer, or <code>null</code> if none
 */
public void setInput(ITimeGraphEntry[] input){
  if (null != _stateCtrl) {
    if (null == input) {
      input=new ITimeGraphEntry[0];
    }
    setTimeRange(input);
    _verticalScrollBar.setEnabled(true);
    setTopIndex(0);
    _selectedTime=0;
    refreshAllData(input);
  }
}","/** 
 * Sets or clears the input for this time graph viewer. The input array should only contain top-level elements.
 * @param input the input of this time graph viewer, or <code>null</code> if none
 */
public void setInput(ITimeGraphEntry[] input){
  if (null != _stateCtrl) {
    if (null == input) {
      input=new ITimeGraphEntry[0];
    }
    setTimeRange(input);
    _verticalScrollBar.setEnabled(true);
    setTopIndex(0);
    _selectedTime=0;
    _selectedEntry=null;
    refreshAllData(input);
  }
}",0.9748237663645518
92211,"private void drawTimeRangeWindow(GC imageGC,Image image){
  long bucketSpan=Math.max(fScaledData.fBucketDuration,1);
  int rangeWidth=(int)(fRangeDuration / bucketSpan);
  int left=(int)((fRangeStartTime - fDataModel.getFirstBucketTime()) / bucketSpan);
  int right=left + rangeWidth;
  int center=(left + right) / 2;
  int height=fCanvas.getSize().y - 2;
  imageGC.setForeground(fTimeRangeColor);
  imageGC.setLineWidth(1);
  imageGC.setLineStyle(SWT.LINE_SOLID);
  imageGC.drawRoundRectangle(left,0,rangeWidth,height - 1,15,15);
  imageGC.setBackground(fTimeRangeColor);
  imageGC.setAlpha(35);
  imageGC.fillRoundRectangle(left + 1,1,rangeWidth - 1,height - 2,15,15);
  imageGC.setAlpha(255);
  imageGC.setForeground(fTimeRangeColor);
  imageGC.setLineWidth(1);
  imageGC.setLineStyle(SWT.LINE_SOLID);
  int chHalfWidth=((rangeWidth < 60) ? (rangeWidth * 2) / 3 : 40) / 2;
  imageGC.drawLine(center - chHalfWidth,height / 2,center + chHalfWidth,height / 2);
  imageGC.drawLine(center,(height / 2) - chHalfWidth,center,(height / 2) + chHalfWidth);
}","private void drawTimeRangeWindow(GC imageGC,Image image){
  long bucketSpan=Math.max(fScaledData.fBucketDuration,1);
  int rangeWidth=(int)(fRangeDuration / bucketSpan);
  int left=(int)((fRangeStartTime - fDataModel.getFirstBucketTime()) / bucketSpan);
  int right=left + rangeWidth;
  int center=(left + right) / 2;
  int height=fCanvas.getSize().y;
  imageGC.setForeground(fTimeRangeColor);
  imageGC.setLineWidth(1);
  imageGC.setLineStyle(SWT.LINE_SOLID);
  imageGC.drawRoundRectangle(left,0,rangeWidth,height - 1,15,15);
  imageGC.setBackground(fTimeRangeColor);
  imageGC.setAlpha(35);
  imageGC.fillRoundRectangle(left + 1,1,rangeWidth - 1,height - 2,15,15);
  imageGC.setAlpha(255);
  imageGC.setForeground(fTimeRangeColor);
  imageGC.setLineWidth(1);
  imageGC.setLineStyle(SWT.LINE_SOLID);
  int chHalfWidth=((rangeWidth < 60) ? (rangeWidth * 2) / 3 : 40) / 2;
  imageGC.drawLine(center - chHalfWidth,height / 2,center + chHalfWidth,height / 2);
  imageGC.drawLine(center,(height / 2) - chHalfWidth,center,(height / 2) + chHalfWidth);
}",0.998093422306959
92212,"private void formatImage(final GC imageGC,final Image image){
  if (fScaledData == null) {
    return;
  }
  final HistogramScaledData scaledData=new HistogramScaledData(fScaledData);
  try {
    final int width=image.getBounds().width;
    final int height=image.getBounds().height;
    imageGC.setBackground(fBackgroundColor);
    imageGC.fillRectangle(0,0,image.getBounds().width + 1,image.getBounds().height + 1);
    imageGC.setBackground(fHistoBarColor);
    final int limit=width < scaledData.fWidth ? width : scaledData.fWidth;
    for (int i=1; i < limit; i++) {
      final int value=(int)(scaledData.fData[i] * scaledData.fScalingFactor);
      imageGC.fillRectangle(i,height - value,1,value);
    }
    final int currentBucket=scaledData.fCurrentBucket;
    if (currentBucket >= 0 && currentBucket < limit) {
      drawDelimiter(imageGC,fCurrentEventColor,height,currentBucket);
    }
    int lastEventIndex=limit - 1;
    while (lastEventIndex >= 0 && scaledData.fData[lastEventIndex] == 0) {
      lastEventIndex--;
    }
    lastEventIndex+=(lastEventIndex < limit - 1) ? 1 : 0;
    drawDelimiter(imageGC,fLastEventColor,height,lastEventIndex);
  }
 catch (  final Exception e) {
  }
}","private void formatImage(final GC imageGC,final Image image){
  if (fScaledData == null) {
    return;
  }
  final HistogramScaledData scaledData=new HistogramScaledData(fScaledData);
  try {
    final int width=image.getBounds().width;
    final int height=image.getBounds().height;
    imageGC.setBackground(fBackgroundColor);
    imageGC.fillRectangle(0,0,image.getBounds().width + 1,image.getBounds().height + 1);
    imageGC.setBackground(fHistoBarColor);
    final int limit=width < scaledData.fWidth ? width : scaledData.fWidth;
    for (int i=1; i < limit; i++) {
      final int value=(int)Math.ceil(scaledData.fData[i] * scaledData.fScalingFactor);
      imageGC.fillRectangle(i,height - value,1,value);
    }
    final int currentBucket=scaledData.fCurrentBucket;
    if (currentBucket >= 0 && currentBucket < limit) {
      drawDelimiter(imageGC,fCurrentEventColor,height,currentBucket);
    }
    int lastEventIndex=limit - 1;
    while (lastEventIndex >= 0 && scaledData.fData[lastEventIndex] == 0) {
      lastEventIndex--;
    }
    lastEventIndex+=(lastEventIndex < limit - 1) ? 1 : 0;
    drawDelimiter(imageGC,fLastEventColor,height,lastEventIndex);
  }
 catch (  final Exception e) {
  }
}",0.99626400996264
92213,"private void createWidget(final Composite parent){
  final Color labelColor=parent.getBackground();
  final Font fFont=adjustFont(parent);
  final int initalWidth=10;
  final GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=3;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  gridLayout.marginTop=0;
  gridLayout.horizontalSpacing=0;
  gridLayout.verticalSpacing=0;
  gridLayout.marginLeft=0;
  gridLayout.marginRight=0;
  final Composite composite=new Composite(parent,SWT.FILL);
  composite.setLayout(gridLayout);
  GridData gridData=new GridData();
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  composite.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.RIGHT;
  gridData.verticalAlignment=SWT.TOP;
  fMaxNbEventsText=new Text(composite,SWT.READ_ONLY | SWT.RIGHT);
  fMaxNbEventsText.setFont(fFont);
  fMaxNbEventsText.setBackground(labelColor);
  fMaxNbEventsText.setEditable(false);
  fMaxNbEventsText.setText(""String_Node_Str"");
  fMaxNbEventsText.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.verticalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  fCanvas=new Canvas(composite,SWT.BORDER | SWT.DOUBLE_BUFFERED);
  fCanvas.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.RIGHT;
  gridData.verticalAlignment=SWT.BOTTOM;
  fMinNbEventsText=new Text(composite,SWT.READ_ONLY | SWT.RIGHT);
  fMinNbEventsText.setFont(fFont);
  fMinNbEventsText.setBackground(labelColor);
  fMinNbEventsText.setEditable(false);
  fMinNbEventsText.setText(""String_Node_Str"");
  fMinNbEventsText.setLayoutData(gridData);
  gridData=new GridData(initalWidth,SWT.DEFAULT);
  gridData.horizontalAlignment=SWT.RIGHT;
  gridData.verticalAlignment=SWT.BOTTOM;
  final Text dummyText=new Text(composite,SWT.READ_ONLY);
  dummyText.setFont(fFont);
  dummyText.setBackground(labelColor);
  dummyText.setEditable(false);
  dummyText.setText(""String_Node_Str"");
  dummyText.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.LEFT;
  gridData.verticalAlignment=SWT.BOTTOM;
  fTimeRangeStartText=new Text(composite,SWT.READ_ONLY);
  fTimeRangeStartText.setFont(fFont);
  fTimeRangeStartText.setBackground(labelColor);
  fTimeRangeStartText.setText(HistogramUtils.nanosecondsToString(0));
  fTimeRangeStartText.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.RIGHT;
  gridData.verticalAlignment=SWT.BOTTOM;
  fTimeRangeEndText=new Text(composite,SWT.READ_ONLY);
  fTimeRangeEndText.setFont(fFont);
  fTimeRangeEndText.setBackground(labelColor);
  fTimeRangeEndText.setText(HistogramUtils.nanosecondsToString(0));
  fTimeRangeEndText.setLayoutData(gridData);
}","private void createWidget(final Composite parent){
  final Color labelColor=parent.getBackground();
  final Font fFont=adjustFont(parent);
  final int initalWidth=10;
  final GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=3;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  gridLayout.marginTop=0;
  gridLayout.horizontalSpacing=0;
  gridLayout.verticalSpacing=0;
  gridLayout.marginLeft=0;
  gridLayout.marginRight=0;
  final Composite composite=new Composite(parent,SWT.FILL);
  composite.setLayout(gridLayout);
  GridData gridData=new GridData();
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  composite.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.RIGHT;
  gridData.verticalAlignment=SWT.TOP;
  fMaxNbEventsText=new Text(composite,SWT.READ_ONLY | SWT.RIGHT);
  fMaxNbEventsText.setFont(fFont);
  fMaxNbEventsText.setBackground(labelColor);
  fMaxNbEventsText.setEditable(false);
  fMaxNbEventsText.setText(""String_Node_Str"");
  fMaxNbEventsText.setLayoutData(gridData);
  Composite canvasComposite=new Composite(composite,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.verticalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  canvasComposite.setLayoutData(gridData);
  canvasComposite.setLayout(new FillLayout());
  fCanvas=new Canvas(canvasComposite,SWT.DOUBLE_BUFFERED);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.RIGHT;
  gridData.verticalAlignment=SWT.BOTTOM;
  fMinNbEventsText=new Text(composite,SWT.READ_ONLY | SWT.RIGHT);
  fMinNbEventsText.setFont(fFont);
  fMinNbEventsText.setBackground(labelColor);
  fMinNbEventsText.setEditable(false);
  fMinNbEventsText.setText(""String_Node_Str"");
  fMinNbEventsText.setLayoutData(gridData);
  gridData=new GridData(initalWidth,SWT.DEFAULT);
  gridData.horizontalAlignment=SWT.RIGHT;
  gridData.verticalAlignment=SWT.BOTTOM;
  final Text dummyText=new Text(composite,SWT.READ_ONLY);
  dummyText.setFont(fFont);
  dummyText.setBackground(labelColor);
  dummyText.setEditable(false);
  dummyText.setText(""String_Node_Str"");
  dummyText.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.LEFT;
  gridData.verticalAlignment=SWT.BOTTOM;
  fTimeRangeStartText=new Text(composite,SWT.READ_ONLY);
  fTimeRangeStartText.setFont(fFont);
  fTimeRangeStartText.setBackground(labelColor);
  fTimeRangeStartText.setText(HistogramUtils.nanosecondsToString(0));
  fTimeRangeStartText.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.RIGHT;
  gridData.verticalAlignment=SWT.BOTTOM;
  fTimeRangeEndText=new Text(composite,SWT.READ_ONLY);
  fTimeRangeEndText.setFont(fFont);
  fTimeRangeEndText.setBackground(labelColor);
  fTimeRangeEndText.setText(HistogramUtils.nanosecondsToString(0));
  fTimeRangeEndText.setLayoutData(gridData);
}",0.8947988554115469
92214,"/** 
 * Handle the event from the trace by updating the histogram data model.
 * @param event a event from the trace
 * @see org.eclipse.linuxtools.tmf.core.request.TmfDataRequest#handleData(org.eclipse.linuxtools.tmf.core.event.ITmfEvent)
 */
@Override public void handleData(ITmfEvent event){
  super.handleData(event);
  if (event != null) {
    long timestamp=event.getTimestamp().getValue();
    fHistogram.countEvent(getNbRead(),timestamp);
  }
}","/** 
 * Handle the event from the trace by updating the histogram data model.
 * @param event a event from the trace
 * @see org.eclipse.linuxtools.tmf.core.request.TmfDataRequest#handleData(org.eclipse.linuxtools.tmf.core.event.ITmfEvent)
 */
@Override public void handleData(ITmfEvent event){
  super.handleData(event);
  if (event != null) {
    long timestamp=event.getTimestamp().normalize(0,-9).getValue();
    fHistogram.countEvent(getNbRead(),timestamp);
  }
}",0.982608695652174
92215,"/** 
 * Handler for the synch signal
 * @param signal The signal that's received
 */
@TmfSignalHandler public void synchToTime(final TmfTimeSynchSignal signal){
  if (signal.getSource() == this || fSelectedExperiment == null) {
    return;
  }
  final long time=signal.getCurrentTime().normalize(0,-9).getValue();
  int thread=-1;
  for (  ITmfTrace<?> trace : fSelectedExperiment.getTraces()) {
    if (thread > 0) {
      break;
    }
    if (trace instanceof CtfKernelTrace) {
      CtfKernelTrace ctfKernelTrace=(CtfKernelTrace)trace;
      IStateSystemQuerier ssq=ctfKernelTrace.getStateSystem();
      if (time >= ssq.getStartTime() && time <= ssq.getCurrentEndTime()) {
        List<Integer> currentThreadQuarks=ssq.getQuarks(Attributes.CPUS,""String_Node_Str"",Attributes.CURRENT_THREAD);
        for (        int currentThreadQuark : currentThreadQuarks) {
          try {
            ITmfStateInterval currentThreadInterval=ssq.querySingleState(time,currentThreadQuark);
            int currentThread=currentThreadInterval.getStateValue().unboxInt();
            if (currentThread > 0) {
              int statusQuark=ssq.getQuarkAbsolute(Attributes.THREADS,Integer.toString(currentThread),Attributes.STATUS);
              ITmfStateInterval statusInterval=ssq.querySingleState(time,statusQuark);
              if (statusInterval.getStartTime() == time) {
                thread=currentThread;
                break;
              }
            }
          }
 catch (          AttributeNotFoundException e) {
            e.printStackTrace();
          }
catch (          TimeRangeException e) {
            e.printStackTrace();
          }
catch (          StateValueTypeException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
  final int selectedThread=thread;
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphCombo.isDisposed()) {
        return;
      }
      fTimeGraphCombo.getTimeGraphViewer().setSelectedTime(time,true);
      startZoomThread(fTimeGraphCombo.getTimeGraphViewer().getTime0(),fTimeGraphCombo.getTimeGraphViewer().getTime1());
      if (selectedThread > 0) {
        for (        Object element : fTimeGraphCombo.getTimeGraphViewer().getExpandedElements()) {
          if (element instanceof ControlFlowEntry) {
            ControlFlowEntry entry=(ControlFlowEntry)element;
            if (entry.getThreadId() == selectedThread) {
              fTimeGraphCombo.setSelection(entry);
              break;
            }
          }
        }
      }
    }
  }
);
}","/** 
 * Handler for the synch signal
 * @param signal The signal that's received
 */
@TmfSignalHandler public void synchToTime(final TmfTimeSynchSignal signal){
  if (signal.getSource() == this || fSelectedExperiment == null || fSelectedExperiment.getTraces() == null) {
    return;
  }
  final long time=signal.getCurrentTime().normalize(0,-9).getValue();
  int thread=-1;
  for (  ITmfTrace<?> trace : fSelectedExperiment.getTraces()) {
    if (thread > 0) {
      break;
    }
    if (trace instanceof CtfKernelTrace) {
      CtfKernelTrace ctfKernelTrace=(CtfKernelTrace)trace;
      IStateSystemQuerier ssq=ctfKernelTrace.getStateSystem();
      if (time >= ssq.getStartTime() && time <= ssq.getCurrentEndTime()) {
        List<Integer> currentThreadQuarks=ssq.getQuarks(Attributes.CPUS,""String_Node_Str"",Attributes.CURRENT_THREAD);
        for (        int currentThreadQuark : currentThreadQuarks) {
          try {
            ITmfStateInterval currentThreadInterval=ssq.querySingleState(time,currentThreadQuark);
            int currentThread=currentThreadInterval.getStateValue().unboxInt();
            if (currentThread > 0) {
              int statusQuark=ssq.getQuarkAbsolute(Attributes.THREADS,Integer.toString(currentThread),Attributes.STATUS);
              ITmfStateInterval statusInterval=ssq.querySingleState(time,statusQuark);
              if (statusInterval.getStartTime() == time) {
                thread=currentThread;
                break;
              }
            }
          }
 catch (          AttributeNotFoundException e) {
            e.printStackTrace();
          }
catch (          TimeRangeException e) {
            e.printStackTrace();
          }
catch (          StateValueTypeException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
  final int selectedThread=thread;
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphCombo.isDisposed()) {
        return;
      }
      fTimeGraphCombo.getTimeGraphViewer().setSelectedTime(time,true);
      startZoomThread(fTimeGraphCombo.getTimeGraphViewer().getTime0(),fTimeGraphCombo.getTimeGraphViewer().getTime1());
      if (selectedThread > 0) {
        for (        Object element : fTimeGraphCombo.getTimeGraphViewer().getExpandedElements()) {
          if (element instanceof ControlFlowEntry) {
            ControlFlowEntry entry=(ControlFlowEntry)element;
            if (entry.getThreadId() == selectedThread) {
              fTimeGraphCombo.setSelection(entry);
              break;
            }
          }
        }
      }
    }
  }
);
}",0.9917196225688428
92216,"/** 
 * Handler for the state system build completed signal
 * @param signal The signal that's received
 */
@TmfSignalHandler public void stateSystemBuildCompleted(final TmfStateSystemBuildCompleted signal){
  final TmfExperiment<?> selectedExperiment=fSelectedExperiment;
  if (selectedExperiment == null) {
    return;
  }
  for (  ITmfTrace<?> trace : selectedExperiment.getTraces()) {
    if (trace == signal.getTrace() && trace instanceof CtfKernelTrace) {
      final Thread thread=new Thread(""String_Node_Str""){
        @Override public void run(){
          selectExperiment(selectedExperiment);
        }
      }
;
      thread.start();
    }
  }
}","/** 
 * Handler for the state system build completed signal
 * @param signal The signal that's received
 */
@TmfSignalHandler public void stateSystemBuildCompleted(final TmfStateSystemBuildCompleted signal){
  final TmfExperiment<?> selectedExperiment=fSelectedExperiment;
  if (selectedExperiment == null || selectedExperiment.getTraces() == null) {
    return;
  }
  for (  ITmfTrace<?> trace : selectedExperiment.getTraces()) {
    if (trace == signal.getTrace() && trace instanceof CtfKernelTrace) {
      final Thread thread=new Thread(""String_Node_Str""){
        @Override public void run(){
          selectExperiment(selectedExperiment);
        }
      }
;
      thread.start();
    }
  }
}",0.9690265486725664
92217,"/** 
 * Handler for the StatesystemBuildCompleted signal
 * @param signal The incoming signal
 */
@TmfSignalHandler public void stateSystemBuildCompleted(final TmfStateSystemBuildCompleted signal){
  final TmfExperiment<?> selectedExperiment=fSelectedExperiment;
  if (selectedExperiment == null) {
    return;
  }
  for (  ITmfTrace<?> trace : selectedExperiment.getTraces()) {
    if (trace == signal.getTrace() && trace instanceof CtfKernelTrace) {
      final Thread thread=new Thread(""String_Node_Str""){
        @Override public void run(){
          selectExperiment(selectedExperiment);
        }
      }
;
      thread.start();
    }
  }
}","/** 
 * Handler for the StatesystemBuildCompleted signal
 * @param signal The incoming signal
 */
@TmfSignalHandler public void stateSystemBuildCompleted(final TmfStateSystemBuildCompleted signal){
  final TmfExperiment<?> selectedExperiment=fSelectedExperiment;
  if (selectedExperiment == null || selectedExperiment.getTraces() == null) {
    return;
  }
  for (  ITmfTrace<?> trace : selectedExperiment.getTraces()) {
    if (trace == signal.getTrace() && trace instanceof CtfKernelTrace) {
      final Thread thread=new Thread(""String_Node_Str""){
        @Override public void run(){
          selectExperiment(selectedExperiment);
        }
      }
;
      thread.start();
    }
  }
}",0.968562874251497
92218,"/** 
 * Sets or clears the input for this time graph combo. The input array should only contain top-level elements.
 * @param input the input of this time graph combo, or <code>null</code> if none
 */
public void setInput(ITimeGraphEntry[] input){
  fInhibitTreeSelection=true;
  fTreeViewer.setInput(input);
  fInhibitTreeSelection=false;
  fTreeViewer.expandAll();
  fTreeViewer.getTree().getVerticalBar().setEnabled(false);
  fTreeViewer.getTree().getVerticalBar().setVisible(false);
  fTimeGraphViewer.setItemHeight(getItemHeight(fTreeViewer.getTree()));
  fTimeGraphViewer.setInput(input);
}","/** 
 * Sets or clears the input for this time graph combo. The input array should only contain top-level elements.
 * @param input the input of this time graph combo, or <code>null</code> if none
 */
public void setInput(ITimeGraphEntry[] input){
  fInhibitTreeSelection=true;
  fTreeViewer.setInput(input);
  for (  SelectionListenerWrapper listenerWrapper : fSelectionListenerMap.values()) {
    listenerWrapper.selection=null;
  }
  fInhibitTreeSelection=false;
  fTreeViewer.expandAll();
  fTreeViewer.getTree().getVerticalBar().setEnabled(false);
  fTreeViewer.getTree().getVerticalBar().setVisible(false);
  fTimeGraphViewer.setItemHeight(getItemHeight(fTreeViewer.getTree()));
  fTimeGraphViewer.setInput(input);
}",0.9044006069802732
92219,"/** 
 * Sets or clears the input for this time graph viewer. The input array should only contain top-level elements.
 * @param input the input of this time graph viewer, or <code>null</code> if none
 */
public void setInput(ITimeGraphEntry[] input){
  if (null != _stateCtrl) {
    if (null == input) {
      input=new ITimeGraphEntry[0];
    }
    setTimeRange(input);
    _verticalScrollBar.setEnabled(true);
    setTopIndex(0);
    _selectedTime=0;
    refreshAllData(input);
  }
}","/** 
 * Sets or clears the input for this time graph viewer. The input array should only contain top-level elements.
 * @param input the input of this time graph viewer, or <code>null</code> if none
 */
public void setInput(ITimeGraphEntry[] input){
  if (null != _stateCtrl) {
    if (null == input) {
      input=new ITimeGraphEntry[0];
    }
    setTimeRange(input);
    _verticalScrollBar.setEnabled(true);
    setTopIndex(0);
    _selectedTime=0;
    _selectedEntry=null;
    refreshAllData(input);
  }
}",0.9748237663645518
92220,"/** 
 * Finish the import.
 * @return <code>true</code> if successful else false
 */
public boolean finish(){
  File sourceDir=new File(getSourceDirectoryName());
  if (!sourceDir.isDirectory()) {
    setErrorMessage(Messages.ImportTraceWizard_InvalidTraceDirectory);
    return false;
  }
  String sourceDirPath;
  try {
    sourceDirPath=sourceDir.getCanonicalPath();
  }
 catch (  IOException e) {
    MessageDialog.openInformation(getContainer().getShell(),Messages.ImportTraceWizard_Information,Messages.ImportTraceWizard_InvalidTraceDirectory);
    return false;
  }
  fRootDirectory=getSourceDirectoryName();
  List<FileSystemElement> selectedResources=getSelectedResources();
  Iterator<FileSystemElement> resources=selectedResources.iterator();
  Map<String,File> fileSystemObjects=new HashMap<String,File>();
  while (resources.hasNext()) {
    File file=(File)resources.next().getFileSystemObject();
    String key=file.getAbsolutePath();
    fileSystemObjects.put(key,file);
  }
  if (fileSystemObjects.size() > 0) {
    boolean ok=importResources(sourceDirPath,fileSystemObjects);
    String traceBundle=null;
    String traceTypeId=null;
    String traceIcon=null;
    String traceType=fTraceTypes.getText();
    boolean traceTypeOK=false;
    if (traceType.startsWith(CUSTOM_TXT_CATEGORY)) {
      for (      CustomTxtTraceDefinition def : CustomTxtTraceDefinition.loadAll()) {
        if (traceType.equals(CUSTOM_TXT_CATEGORY + ""String_Node_Str"" + def.definitionName)) {
          traceTypeOK=true;
          traceBundle=Activator.getDefault().getBundle().getSymbolicName();
          traceTypeId=CustomTxtTrace.class.getCanonicalName() + ""String_Node_Str"" + def.definitionName;
          traceIcon=DEFAULT_TRACE_ICON_PATH;
          break;
        }
      }
    }
 else     if (traceType.startsWith(CUSTOM_XML_CATEGORY)) {
      for (      CustomXmlTraceDefinition def : CustomXmlTraceDefinition.loadAll()) {
        if (traceType.equals(CUSTOM_XML_CATEGORY + ""String_Node_Str"" + def.definitionName)) {
          traceTypeOK=true;
          traceBundle=Activator.getDefault().getBundle().getSymbolicName();
          traceTypeId=CustomXmlTrace.class.getCanonicalName() + ""String_Node_Str"" + def.definitionName;
          traceIcon=DEFAULT_TRACE_ICON_PATH;
          break;
        }
      }
    }
 else {
      IConfigurationElement ce=fTraceAttributes.get(traceType);
      if (ce != null) {
        traceTypeOK=true;
        traceBundle=ce.getContributor().getName();
        traceTypeId=ce.getAttribute(TmfTraceType.ID_ATTR);
        traceIcon=ce.getAttribute(TmfTraceType.ICON_ATTR);
      }
    }
    if (ok && traceTypeOK && !traceType.equals(""String_Node_Str"")) {
      List<String> files=new ArrayList<String>(fileSystemObjects.keySet());
      Collections.sort(files,new Comparator<String>(){
        @Override public int compare(        String o1,        String o2){
          String v1=o1 + File.separatorChar;
          String v2=o2 + File.separatorChar;
          return v1.compareTo(v2);
        }
      }
);
      String prefix=null;
      for (int i=0; i < files.size(); i++) {
        File file=fileSystemObjects.get(files.get(i));
        String name=file.getAbsolutePath();
        if (fTargetFolder != null && (prefix == null || !name.startsWith(prefix))) {
          prefix=name;
          IResource resource=fTargetFolder.findMember(file.getName());
          if (resource != null) {
            try {
              resource.setPersistentProperty(TmfCommonConstants.TRACEBUNDLE,traceBundle);
              resource.setPersistentProperty(TmfCommonConstants.TRACETYPE,traceTypeId);
              resource.setPersistentProperty(TmfCommonConstants.TRACEICON,traceIcon);
              for (              TmfTraceElement traceElement : TmfProjectRegistry.getProject(resource.getProject()).getTracesFolder().getTraces()) {
                if (traceElement.getName().equals(resource.getName())) {
                  traceElement.refreshTraceType();
                  break;
                }
              }
            }
 catch (            CoreException e) {
              Activator.getDefault().logError(""String_Node_Str"" + resource.getName(),e);
            }
          }
        }
      }
    }
    return ok;
  }
  MessageDialog.openInformation(getContainer().getShell(),Messages.ImportTraceWizard_Information,Messages.ImportTraceWizard_SelectTraceNoneSelected);
  return false;
}","/** 
 * Finish the import.
 * @return <code>true</code> if successful else false
 */
public boolean finish(){
  File sourceDir=new File(getSourceDirectoryName());
  if (!sourceDir.isDirectory()) {
    setErrorMessage(Messages.ImportTraceWizard_InvalidTraceDirectory);
    return false;
  }
  String sourceDirPath;
  try {
    sourceDirPath=sourceDir.getCanonicalPath();
  }
 catch (  IOException e) {
    MessageDialog.openInformation(getContainer().getShell(),Messages.ImportTraceWizard_Information,Messages.ImportTraceWizard_InvalidTraceDirectory);
    return false;
  }
  fRootDirectory=getSourceDirectoryName();
  List<FileSystemElement> selectedResources=getSelectedResources();
  Iterator<FileSystemElement> resources=selectedResources.iterator();
  Map<String,File> fileSystemObjects=new HashMap<String,File>();
  while (resources.hasNext()) {
    File file=(File)resources.next().getFileSystemObject();
    String key=file.getAbsolutePath();
    fileSystemObjects.put(key,file);
  }
  if (fileSystemObjects.size() > 0) {
    boolean ok=importResources(sourceDirPath,fileSystemObjects);
    String traceBundle=null;
    String traceTypeId=null;
    String traceIcon=null;
    String traceType=fTraceTypes.getText();
    boolean traceTypeOK=false;
    if (traceType.startsWith(CUSTOM_TXT_CATEGORY)) {
      for (      CustomTxtTraceDefinition def : CustomTxtTraceDefinition.loadAll()) {
        if (traceType.equals(CUSTOM_TXT_CATEGORY + ""String_Node_Str"" + def.definitionName)) {
          traceTypeOK=true;
          traceBundle=Activator.getDefault().getBundle().getSymbolicName();
          traceTypeId=CustomTxtTrace.class.getCanonicalName() + ""String_Node_Str"" + def.definitionName;
          traceIcon=DEFAULT_TRACE_ICON_PATH;
          break;
        }
      }
    }
 else     if (traceType.startsWith(CUSTOM_XML_CATEGORY)) {
      for (      CustomXmlTraceDefinition def : CustomXmlTraceDefinition.loadAll()) {
        if (traceType.equals(CUSTOM_XML_CATEGORY + ""String_Node_Str"" + def.definitionName)) {
          traceTypeOK=true;
          traceBundle=Activator.getDefault().getBundle().getSymbolicName();
          traceTypeId=CustomXmlTrace.class.getCanonicalName() + ""String_Node_Str"" + def.definitionName;
          traceIcon=DEFAULT_TRACE_ICON_PATH;
          break;
        }
      }
    }
 else {
      IConfigurationElement ce=fTraceAttributes.get(traceType);
      if (ce != null) {
        traceTypeOK=true;
        traceBundle=ce.getContributor().getName();
        traceTypeId=ce.getAttribute(TmfTraceType.ID_ATTR);
        traceIcon=ce.getAttribute(TmfTraceType.ICON_ATTR);
      }
    }
    if (ok && traceTypeOK && !traceType.equals(""String_Node_Str"")) {
      List<String> files=new ArrayList<String>(fileSystemObjects.keySet());
      Collections.sort(files,new Comparator<String>(){
        @Override public int compare(        String o1,        String o2){
          String v1=o1 + File.separatorChar;
          String v2=o2 + File.separatorChar;
          return v1.compareTo(v2);
        }
      }
);
      String prefix=null;
      for (int i=0; i < files.size(); i++) {
        File file=fileSystemObjects.get(files.get(i));
        String name=file.getAbsolutePath() + File.separatorChar;
        if (fTargetFolder != null && (prefix == null || !name.startsWith(prefix))) {
          prefix=name;
          IResource resource=fTargetFolder.findMember(file.getName());
          if (resource != null) {
            try {
              resource.setPersistentProperty(TmfCommonConstants.TRACEBUNDLE,traceBundle);
              resource.setPersistentProperty(TmfCommonConstants.TRACETYPE,traceTypeId);
              resource.setPersistentProperty(TmfCommonConstants.TRACEICON,traceIcon);
              for (              TmfTraceElement traceElement : TmfProjectRegistry.getProject(resource.getProject()).getTracesFolder().getTraces()) {
                if (traceElement.getName().equals(resource.getName())) {
                  traceElement.refreshTraceType();
                  break;
                }
              }
            }
 catch (            CoreException e) {
              Activator.getDefault().logError(""String_Node_Str"" + resource.getName(),e);
            }
          }
        }
      }
    }
    return ok;
  }
  MessageDialog.openInformation(getContainer().getShell(),Messages.ImportTraceWizard_Information,Messages.ImportTraceWizard_SelectTraceNoneSelected);
  return false;
}",0.9976279227380548
92221,"private boolean importResources(String rootDirectory,Map<String,File> fileSystemObjects){
  List<File> fileList=new ArrayList<File>();
  for (  Entry<String,File> entry : fileSystemObjects.entrySet()) {
    fileList.add(entry.getValue());
  }
  Collections.sort(fileList,new Comparator<File>(){
    @Override public int compare(    File o1,    File o2){
      String v1=o1.getAbsolutePath() + File.separatorChar;
      String v2=o2.getAbsolutePath() + File.separatorChar;
      return v1.compareTo(v2);
    }
  }
);
  boolean ok=true;
  boolean isLinked=createLinksInWorkspaceButton.getSelection();
  for (int i=0; i < fileList.size(); i++) {
    File resource=fileList.get(i);
    File parentFolder=new File(resource.getParent());
    List<File> subList=new ArrayList<File>();
    subList.add(resource);
    if (resource.isDirectory()) {
      String prefix=resource.getAbsolutePath();
      boolean hasSamePrefix=true;
      for (int j=i; j < fileList.size() && hasSamePrefix; j++) {
        File res=fileList.get(j);
        hasSamePrefix=res.getAbsolutePath().startsWith(prefix);
        if (hasSamePrefix) {
          if (!isLinked) {
            subList.add(res);
          }
          i=j;
        }
      }
    }
    FileSystemStructureProvider fileSystemStructureProvider=FileSystemStructureProvider.INSTANCE;
    ImportOperation operation=new ImportOperation(getContainerFullPath(),parentFolder,fileSystemStructureProvider,this,subList);
    operation.setContext(getShell());
    ok=executeImportOperation(operation);
  }
  return ok;
}","private boolean importResources(String rootDirectory,Map<String,File> fileSystemObjects){
  List<File> fileList=new ArrayList<File>();
  for (  Entry<String,File> entry : fileSystemObjects.entrySet()) {
    fileList.add(entry.getValue());
  }
  Collections.sort(fileList,new Comparator<File>(){
    @Override public int compare(    File o1,    File o2){
      String v1=o1.getAbsolutePath() + File.separatorChar;
      String v2=o2.getAbsolutePath() + File.separatorChar;
      return v1.compareTo(v2);
    }
  }
);
  boolean ok=true;
  boolean isLinked=createLinksInWorkspaceButton.getSelection();
  for (int i=0; i < fileList.size(); i++) {
    File resource=fileList.get(i);
    File parentFolder=new File(resource.getParent());
    List<File> subList=new ArrayList<File>();
    subList.add(resource);
    if (resource.isDirectory()) {
      String prefix=resource.getAbsolutePath() + File.separatorChar;
      boolean hasSamePrefix=true;
      for (int j=i + 1; j < fileList.size() && hasSamePrefix; j++) {
        File res=fileList.get(j);
        hasSamePrefix=res.getAbsolutePath().startsWith(prefix);
        if (hasSamePrefix) {
          if (!isLinked) {
            subList.add(res);
          }
          i=j;
        }
      }
    }
    FileSystemStructureProvider fileSystemStructureProvider=FileSystemStructureProvider.INSTANCE;
    ImportOperation operation=new ImportOperation(getContainerFullPath(),parentFolder,fileSystemStructureProvider,this,subList);
    operation.setContext(getShell());
    ok=executeImportOperation(operation);
  }
  return ok;
}",0.9919794674366378
92222,"@Override void paint(Rectangle bounds,PaintEvent e){
  GC gc=e.gc;
  gc.setBackground(_colors.getColor(TimeGraphColorScheme.BACKGROUND));
  drawBackground(gc,bounds.x,bounds.y,bounds.width,bounds.height);
  if (bounds.width < 2 || bounds.height < 2 || null == _timeProvider) {
    return;
  }
  _idealNameSpace=0;
  int nameSpace=_timeProvider.getNameSpace();
  gc.setBackground(_colors.getBkColor(false,false,true));
  drawBackground(gc,bounds.x,bounds.y,nameSpace,bounds.height);
  drawItems(bounds,_timeProvider,_data._expandedItems,_topIndex,nameSpace,gc);
  long time0=_timeProvider.getTime0();
  long time1=_timeProvider.getTime1();
  long selectedTime=_timeProvider.getSelectedTime();
  double pixelsPerNanoSec=(bounds.width - nameSpace <= RIGHT_MARGIN) ? 0 : (double)(bounds.width - nameSpace - RIGHT_MARGIN) / (time1 - time0);
  int x=bounds.x + nameSpace + (int)Math.round((selectedTime - time0) * pixelsPerNanoSec);
  if (x >= nameSpace && x < bounds.x + bounds.width) {
    gc.setForeground(_colors.getColor(TimeGraphColorScheme.SELECTED_TIME));
    gc.drawLine(x,bounds.y,x,bounds.y + bounds.height);
  }
  if (DRAG_SPLIT_LINE == _dragState) {
    gc.setForeground(_colors.getColor(TimeGraphColorScheme.BLACK));
    gc.drawLine(bounds.x + nameSpace,bounds.y,bounds.x + nameSpace,bounds.y + bounds.height - 1);
  }
 else   if (DRAG_NONE == _dragState && _mouseOverSplitLine && _timeProvider.getNameSpace() > 0) {
    gc.setForeground(_colors.getColor(TimeGraphColorScheme.RED));
    gc.drawLine(bounds.x + nameSpace,bounds.y,bounds.x + nameSpace,bounds.y + bounds.height - 1);
  }
}","@Override void paint(Rectangle bounds,PaintEvent e){
  GC gc=e.gc;
  gc.setBackground(_colors.getColor(TimeGraphColorScheme.BACKGROUND));
  drawBackground(gc,bounds.x,bounds.y,bounds.width,bounds.height);
  if (bounds.width < 2 || bounds.height < 2 || null == _timeProvider) {
    return;
  }
  _idealNameSpace=0;
  int nameSpace=_timeProvider.getNameSpace();
  gc.setBackground(_colors.getBkColor(false,false,true));
  drawBackground(gc,bounds.x,bounds.y,nameSpace,bounds.height);
  drawItems(bounds,_timeProvider,_data._expandedItems,_topIndex,nameSpace,gc);
  long time0=_timeProvider.getTime0();
  long time1=_timeProvider.getTime1();
  long selectedTime=_timeProvider.getSelectedTime();
  double pixelsPerNanoSec=(bounds.width - nameSpace <= RIGHT_MARGIN) ? 0 : (double)(bounds.width - nameSpace - RIGHT_MARGIN) / (time1 - time0);
  int x=bounds.x + nameSpace + (int)((selectedTime - time0) * pixelsPerNanoSec);
  if (x >= nameSpace && x < bounds.x + bounds.width) {
    gc.setForeground(_colors.getColor(TimeGraphColorScheme.SELECTED_TIME));
    gc.drawLine(x,bounds.y,x,bounds.y + bounds.height);
  }
  if (DRAG_SPLIT_LINE == _dragState) {
    gc.setForeground(_colors.getColor(TimeGraphColorScheme.BLACK));
    gc.drawLine(bounds.x + nameSpace,bounds.y,bounds.x + nameSpace,bounds.y + bounds.height - 1);
  }
 else   if (DRAG_NONE == _dragState && _mouseOverSplitLine && _timeProvider.getNameSpace() > 0) {
    gc.setForeground(_colors.getColor(TimeGraphColorScheme.RED));
    gc.drawLine(bounds.x + nameSpace,bounds.y,bounds.x + nameSpace,bounds.y + bounds.height - 1);
  }
}",0.9968533668974198
92223,"long getTimeAtX(int x){
  if (null == _timeProvider) {
    return -1;
  }
  long hitTime=-1;
  Point size=getCtrlSize();
  long time0=_timeProvider.getTime0();
  long time1=_timeProvider.getTime1();
  int nameWidth=_timeProvider.getNameSpace();
  x-=nameWidth;
  int timeWidth=size.x - nameWidth - RIGHT_MARGIN;
  if (x >= 0 && size.x >= nameWidth) {
    hitTime=time0 + Math.round((time1 - time0) * ((double)x / timeWidth));
  }
  return hitTime;
}","long getTimeAtX(int x){
  if (null == _timeProvider) {
    return -1;
  }
  long hitTime=-1;
  Point size=getCtrlSize();
  long time0=_timeProvider.getTime0();
  long time1=_timeProvider.getTime1();
  int nameWidth=_timeProvider.getNameSpace();
  x-=nameWidth;
  int timeWidth=size.x - nameWidth - RIGHT_MARGIN;
  if (x >= 0 && size.x >= nameWidth) {
    if (time1 - time0 > timeWidth) {
      hitTime=time0 + (long)Math.ceil((time1 - time0) * ((double)x / timeWidth));
    }
 else {
      hitTime=time0 + (long)Math.floor((time1 - time0) * ((double)x / timeWidth));
    }
  }
  return hitTime;
}",0.8191387559808613
92224,"public void testGetTimestamp() throws Exception {
  assertTrue(""String_Node_Str"",fExperiment.getTimestamp(0).equals(new TmfTimestamp(1,(byte)-3)));
  assertTrue(""String_Node_Str"",fExperiment.getTimestamp(10).equals(new TmfTimestamp(11,(byte)-3)));
  assertTrue(""String_Node_Str"",fExperiment.getTimestamp(100).equals(new TmfTimestamp(101,(byte)-3)));
  assertTrue(""String_Node_Str"",fExperiment.getTimestamp(1000).equals(new TmfTimestamp(1001,(byte)-3)));
  assertTrue(""String_Node_Str"",fExperiment.getTimestamp(2000).equals(new TmfTimestamp(2001,(byte)-3)));
  assertTrue(""String_Node_Str"",fExperiment.getTimestamp(2500).equals(new TmfTimestamp(2501,(byte)-3)));
  assertNull(""String_Node_Str"",fExperiment.getTimestamp(10000));
}","public void testGetTimestamp() throws Exception {
  assertEquals(""String_Node_Str"",new TmfTimestamp(1,(byte)-3),fExperiment.getTimestamp(0));
  assertEquals(""String_Node_Str"",new TmfTimestamp(2,(byte)-3),fExperiment.getTimestamp(1));
  assertEquals(""String_Node_Str"",new TmfTimestamp(11,(byte)-3),fExperiment.getTimestamp(10));
  assertEquals(""String_Node_Str"",new TmfTimestamp(101,(byte)-3),fExperiment.getTimestamp(100));
  assertEquals(""String_Node_Str"",new TmfTimestamp(1001,(byte)-3),fExperiment.getTimestamp(1000));
  assertEquals(""String_Node_Str"",new TmfTimestamp(2001,(byte)-3),fExperiment.getTimestamp(2000));
  assertEquals(""String_Node_Str"",new TmfTimestamp(2501,(byte)-3),fExperiment.getTimestamp(2500));
  assertEquals(""String_Node_Str"",new TmfTimestamp(10000,(byte)-3),fExperiment.getTimestamp(9999));
  assertNull(""String_Node_Str"",fExperiment.getTimestamp(10000));
}",0.5152079453755432
92225,"/** 
 * Finish the import.
 * @return <code>true</code> if successful else false
 */
public boolean finish(){
  File sourceDir=new File(getSourceDirectoryName());
  if (!sourceDir.isDirectory()) {
    setErrorMessage(Messages.ImportTraceWizard_InvalidTraceDirectory);
    return false;
  }
  String sourceDirPath;
  try {
    sourceDirPath=sourceDir.getCanonicalPath();
  }
 catch (  IOException e) {
    MessageDialog.openInformation(getContainer().getShell(),Messages.ImportTraceWizard_Information,Messages.ImportTraceWizard_InvalidTraceDirectory);
    return false;
  }
  fRootDirectory=getSourceDirectoryName();
  List<FileSystemElement> selectedResources=getSelectedResources();
  Iterator<FileSystemElement> resources=selectedResources.iterator();
  Map<String,File> fileSystemObjects=new HashMap<String,File>();
  while (resources.hasNext()) {
    File file=(File)resources.next().getFileSystemObject();
    String key=file.getAbsolutePath();
    fileSystemObjects.put(key,file);
  }
  if (fileSystemObjects.size() > 0) {
    boolean ok=importResources(sourceDirPath,fileSystemObjects);
    String traceBundle=null;
    String traceTypeId=null;
    String traceIcon=null;
    String traceType=fTraceTypes.getText();
    boolean traceTypeOK=false;
    if (traceType.startsWith(CUSTOM_TXT_CATEGORY)) {
      for (      CustomTxtTraceDefinition def : CustomTxtTraceDefinition.loadAll()) {
        if (traceType.equals(CUSTOM_TXT_CATEGORY + ""String_Node_Str"" + def.definitionName)) {
          traceTypeOK=true;
          traceBundle=Activator.getDefault().getBundle().getSymbolicName();
          traceTypeId=CustomTxtTrace.class.getCanonicalName() + ""String_Node_Str"" + def.definitionName;
          traceIcon=DEFAULT_TRACE_ICON_PATH;
          break;
        }
      }
    }
 else     if (traceType.startsWith(CUSTOM_XML_CATEGORY)) {
      for (      CustomXmlTraceDefinition def : CustomXmlTraceDefinition.loadAll()) {
        if (traceType.equals(CUSTOM_XML_CATEGORY + ""String_Node_Str"" + def.definitionName)) {
          traceTypeOK=true;
          traceBundle=Activator.getDefault().getBundle().getSymbolicName();
          traceTypeId=CustomXmlTrace.class.getCanonicalName() + ""String_Node_Str"" + def.definitionName;
          traceIcon=DEFAULT_TRACE_ICON_PATH;
          break;
        }
      }
    }
 else {
      IConfigurationElement ce=fTraceAttributes.get(traceType);
      if (ce != null) {
        traceTypeOK=true;
        traceBundle=ce.getContributor().getName();
        traceTypeId=ce.getAttribute(TmfTraceType.ID_ATTR);
        traceIcon=ce.getAttribute(TmfTraceType.ICON_ATTR);
      }
    }
    if (ok && traceTypeOK && !traceType.equals(""String_Node_Str"")) {
      List<String> files=new ArrayList<String>(fileSystemObjects.keySet());
      Collections.sort(files);
      String prefix=null;
      for (int i=0; i < files.size(); i++) {
        File file=fileSystemObjects.get(files.get(i));
        String name=file.getAbsolutePath();
        if (fTargetFolder != null && (prefix == null || !name.startsWith(prefix))) {
          prefix=name;
          IResource resource=fTargetFolder.findMember(file.getName());
          if (resource != null) {
            try {
              resource.setPersistentProperty(TmfCommonConstants.TRACEBUNDLE,traceBundle);
              resource.setPersistentProperty(TmfCommonConstants.TRACETYPE,traceTypeId);
              resource.setPersistentProperty(TmfCommonConstants.TRACEICON,traceIcon);
              for (              TmfTraceElement traceElement : TmfProjectRegistry.getProject(resource.getProject()).getTracesFolder().getTraces()) {
                if (traceElement.getName().equals(resource.getName())) {
                  traceElement.refreshTraceType();
                  break;
                }
              }
            }
 catch (            CoreException e) {
              Activator.getDefault().logError(""String_Node_Str"" + resource.getName(),e);
            }
          }
        }
      }
    }
    return ok;
  }
  MessageDialog.openInformation(getContainer().getShell(),Messages.ImportTraceWizard_Information,Messages.ImportTraceWizard_SelectTraceNoneSelected);
  return false;
}","/** 
 * Finish the import.
 * @return <code>true</code> if successful else false
 */
public boolean finish(){
  File sourceDir=new File(getSourceDirectoryName());
  if (!sourceDir.isDirectory()) {
    setErrorMessage(Messages.ImportTraceWizard_InvalidTraceDirectory);
    return false;
  }
  String sourceDirPath;
  try {
    sourceDirPath=sourceDir.getCanonicalPath();
  }
 catch (  IOException e) {
    MessageDialog.openInformation(getContainer().getShell(),Messages.ImportTraceWizard_Information,Messages.ImportTraceWizard_InvalidTraceDirectory);
    return false;
  }
  fRootDirectory=getSourceDirectoryName();
  List<FileSystemElement> selectedResources=getSelectedResources();
  Iterator<FileSystemElement> resources=selectedResources.iterator();
  Map<String,File> fileSystemObjects=new HashMap<String,File>();
  while (resources.hasNext()) {
    File file=(File)resources.next().getFileSystemObject();
    String key=file.getAbsolutePath();
    fileSystemObjects.put(key,file);
  }
  if (fileSystemObjects.size() > 0) {
    boolean ok=importResources(sourceDirPath,fileSystemObjects);
    String traceBundle=null;
    String traceTypeId=null;
    String traceIcon=null;
    String traceType=fTraceTypes.getText();
    boolean traceTypeOK=false;
    if (traceType.startsWith(CUSTOM_TXT_CATEGORY)) {
      for (      CustomTxtTraceDefinition def : CustomTxtTraceDefinition.loadAll()) {
        if (traceType.equals(CUSTOM_TXT_CATEGORY + ""String_Node_Str"" + def.definitionName)) {
          traceTypeOK=true;
          traceBundle=Activator.getDefault().getBundle().getSymbolicName();
          traceTypeId=CustomTxtTrace.class.getCanonicalName() + ""String_Node_Str"" + def.definitionName;
          traceIcon=DEFAULT_TRACE_ICON_PATH;
          break;
        }
      }
    }
 else     if (traceType.startsWith(CUSTOM_XML_CATEGORY)) {
      for (      CustomXmlTraceDefinition def : CustomXmlTraceDefinition.loadAll()) {
        if (traceType.equals(CUSTOM_XML_CATEGORY + ""String_Node_Str"" + def.definitionName)) {
          traceTypeOK=true;
          traceBundle=Activator.getDefault().getBundle().getSymbolicName();
          traceTypeId=CustomXmlTrace.class.getCanonicalName() + ""String_Node_Str"" + def.definitionName;
          traceIcon=DEFAULT_TRACE_ICON_PATH;
          break;
        }
      }
    }
 else {
      IConfigurationElement ce=fTraceAttributes.get(traceType);
      if (ce != null) {
        traceTypeOK=true;
        traceBundle=ce.getContributor().getName();
        traceTypeId=ce.getAttribute(TmfTraceType.ID_ATTR);
        traceIcon=ce.getAttribute(TmfTraceType.ICON_ATTR);
      }
    }
    if (ok && traceTypeOK && !traceType.equals(""String_Node_Str"")) {
      List<String> files=new ArrayList<String>(fileSystemObjects.keySet());
      Collections.sort(files,new Comparator<String>(){
        @Override public int compare(        String o1,        String o2){
          String v1=o1 + File.separatorChar;
          String v2=o2 + File.separatorChar;
          return v1.compareTo(v2);
        }
      }
);
      String prefix=null;
      for (int i=0; i < files.size(); i++) {
        File file=fileSystemObjects.get(files.get(i));
        String name=file.getAbsolutePath();
        if (fTargetFolder != null && (prefix == null || !name.startsWith(prefix))) {
          prefix=name;
          IResource resource=fTargetFolder.findMember(file.getName());
          if (resource != null) {
            try {
              resource.setPersistentProperty(TmfCommonConstants.TRACEBUNDLE,traceBundle);
              resource.setPersistentProperty(TmfCommonConstants.TRACETYPE,traceTypeId);
              resource.setPersistentProperty(TmfCommonConstants.TRACEICON,traceIcon);
              for (              TmfTraceElement traceElement : TmfProjectRegistry.getProject(resource.getProject()).getTracesFolder().getTraces()) {
                if (traceElement.getName().equals(resource.getName())) {
                  traceElement.refreshTraceType();
                  break;
                }
              }
            }
 catch (            CoreException e) {
              Activator.getDefault().logError(""String_Node_Str"" + resource.getName(),e);
            }
          }
        }
      }
    }
    return ok;
  }
  MessageDialog.openInformation(getContainer().getShell(),Messages.ImportTraceWizard_Information,Messages.ImportTraceWizard_SelectTraceNoneSelected);
  return false;
}",0.9714684988936764
92226,"private boolean importResources(String rootDirectory,Map<String,File> fileSystemObjects){
  List<File> fileList=new ArrayList<File>();
  for (  Entry<String,File> entry : fileSystemObjects.entrySet()) {
    fileList.add(entry.getValue());
  }
  Collections.sort(fileList);
  boolean ok=true;
  boolean isLinked=createLinksInWorkspaceButton.getSelection();
  for (int i=0; i < fileList.size(); i++) {
    File resource=fileList.get(i);
    File parentFolder=new File(resource.getParent());
    List<File> subList=new ArrayList<File>();
    subList.add(resource);
    if (resource.isDirectory()) {
      String prefix=resource.getAbsolutePath();
      boolean hasSamePrefix=true;
      for (int j=i; j < fileList.size() && hasSamePrefix; j++) {
        File res=fileList.get(j);
        hasSamePrefix=res.getAbsolutePath().startsWith(prefix);
        if (hasSamePrefix) {
          if (!isLinked) {
            subList.add(res);
          }
          i=j;
        }
      }
    }
    FileSystemStructureProvider fileSystemStructureProvider=FileSystemStructureProvider.INSTANCE;
    ImportOperation operation=new ImportOperation(getContainerFullPath(),parentFolder,fileSystemStructureProvider,this,subList);
    operation.setContext(getShell());
    ok=executeImportOperation(operation);
  }
  return ok;
}","private boolean importResources(String rootDirectory,Map<String,File> fileSystemObjects){
  List<File> fileList=new ArrayList<File>();
  for (  Entry<String,File> entry : fileSystemObjects.entrySet()) {
    fileList.add(entry.getValue());
  }
  Collections.sort(fileList,new Comparator<File>(){
    @Override public int compare(    File o1,    File o2){
      String v1=o1.getAbsolutePath() + File.separatorChar;
      String v2=o2.getAbsolutePath() + File.separatorChar;
      return v1.compareTo(v2);
    }
  }
);
  boolean ok=true;
  boolean isLinked=createLinksInWorkspaceButton.getSelection();
  for (int i=0; i < fileList.size(); i++) {
    File resource=fileList.get(i);
    File parentFolder=new File(resource.getParent());
    List<File> subList=new ArrayList<File>();
    subList.add(resource);
    if (resource.isDirectory()) {
      String prefix=resource.getAbsolutePath();
      boolean hasSamePrefix=true;
      for (int j=i; j < fileList.size() && hasSamePrefix; j++) {
        File res=fileList.get(j);
        hasSamePrefix=res.getAbsolutePath().startsWith(prefix);
        if (hasSamePrefix) {
          if (!isLinked) {
            subList.add(res);
          }
          i=j;
        }
      }
    }
    FileSystemStructureProvider fileSystemStructureProvider=FileSystemStructureProvider.INSTANCE;
    ImportOperation operation=new ImportOperation(getContainerFullPath(),parentFolder,fileSystemStructureProvider,this,subList);
    operation.setContext(getShell());
    ok=executeImportOperation(operation);
  }
  return ok;
}",0.9147069147069148
92227,"/** 
 * Convert a string representing a time to the corresponding long. <p>
 * @param time the string to convert
 * @return the corresponding nanoseconds value
 */
public static long stringToNanoseconds(String time){
  long result=0L;
  StringBuffer buffer=new StringBuffer(time);
  try {
    int dot=buffer.indexOf(""String_Node_Str"");
    if (dot == -1) {
      buffer.insert(0,""String_Node_Str"");
      dot=0;
    }
    for (int i=buffer.length() - dot - 1; i < 9; i++)     buffer.append(""String_Node_Str"");
    int nbDecimals=buffer.substring(dot + 1).length();
    if (nbDecimals > 9)     buffer.delete(buffer.substring(0,dot + 1 + 9).length(),buffer.length());
    long seconds=(dot > 0) ? Long.parseLong(buffer.substring(0,dot)) : 0;
    seconds=Math.abs(seconds);
    long nanosecs=Long.parseLong(buffer.substring(dot + 1));
    result=seconds * 1000000000 + nanosecs;
  }
 catch (  NumberFormatException e) {
  }
  return result;
}","/** 
 * Convert a string representing a time to the corresponding long. <p>
 * @param time the string to convert
 * @return the corresponding nanoseconds value
 */
public static long stringToNanoseconds(String time){
  long result=0L;
  StringBuffer buffer=new StringBuffer(time);
  try {
    int dot=buffer.indexOf(""String_Node_Str"");
    if (dot == -1) {
      if (time.length() > 9) {
        long nanos=Long.parseLong(time.substring(time.length() - 9));
        long secs=Long.parseLong(time.substring(0,time.length() - 9));
        result=(secs * 1000000000) + nanos;
      }
 else {
        result=Long.parseLong(time);
      }
    }
 else {
      for (int i=buffer.length() - dot - 1; i < 9; i++) {
        buffer.append(""String_Node_Str"");
      }
      int nbDecimals=buffer.substring(dot + 1).length();
      if (nbDecimals > 9) {
        buffer.delete(buffer.substring(0,dot + 1 + 9).length(),buffer.length());
      }
      long seconds=(dot > 0) ? Long.parseLong(buffer.substring(0,dot)) : 0;
      seconds=Math.abs(seconds);
      long nanosecs=Long.parseLong(buffer.substring(dot + 1));
      result=(seconds * 1000000000) + nanosecs;
    }
  }
 catch (  NumberFormatException e) {
  }
  return result;
}",0.4420759962928637
92228,"/** 
 * Broadcast TmfSignal about new selected time range.
 * @param newDuration new duration (relative to current start time)
 */
public synchronized void updateTimeRange(long newDuration){
  if (fCurrentExperiment != null) {
    long delta=newDuration - fWindowSpan;
    long newStartTime=fWindowStartTime + delta / 2;
    setNewRange(newStartTime,newDuration);
  }
}","/** 
 * Broadcast TmfSignal about new selected time range.
 * @param newDuration new duration (relative to current start time)
 */
public synchronized void updateTimeRange(long newDuration){
  if (fCurrentExperiment != null) {
    long delta=newDuration - fWindowSpan;
    long newStartTime=fWindowStartTime + (delta / 2);
    setNewRange(newStartTime,newDuration);
  }
}",0.9972972972972972
92229,"private void sendTimeRangeRequest(long startTime,long endTime){
  if (fTimeRangeRequest != null && !fTimeRangeRequest.isCompleted()) {
    fTimeRangeRequest.cancel();
  }
  TmfTimestamp startTS=new TmfTimestamp(startTime,TIME_SCALE);
  TmfTimestamp endTS=new TmfTimestamp(endTime,TIME_SCALE);
  TmfTimeRange timeRange=new TmfTimeRange(startTS,endTS);
  fTimeRangeHistogram.clear();
  fTimeRangeHistogram.setTimeRange(startTime,endTime - startTime);
  int cacheSize=fCurrentExperiment.getCacheSize();
  fTimeRangeRequest=new HistogramRequest(fTimeRangeHistogram.getDataModel(),timeRange,0,TmfDataRequest.ALL_DATA,cacheSize,ExecutionType.FOREGROUND);
  fCurrentExperiment.sendRequest(fTimeRangeRequest);
}","private void sendTimeRangeRequest(long startTime,long endTime){
  if ((fTimeRangeRequest != null) && !fTimeRangeRequest.isCompleted()) {
    fTimeRangeRequest.cancel();
  }
  TmfTimestamp startTS=new TmfTimestamp(startTime,TIME_SCALE);
  TmfTimestamp endTS=new TmfTimestamp(endTime,TIME_SCALE);
  TmfTimeRange timeRange=new TmfTimeRange(startTS,endTS);
  fTimeRangeHistogram.clear();
  fTimeRangeHistogram.setTimeRange(startTime,endTime - startTime);
  int cacheSize=fCurrentExperiment.getCacheSize();
  fTimeRangeRequest=new HistogramRequest(fTimeRangeHistogram.getDataModel(),timeRange,0,TmfDataRequest.ALL_DATA,cacheSize,ExecutionType.FOREGROUND);
  fCurrentExperiment.sendRequest(fTimeRangeRequest);
}",0.9985795454545454
92230,"private void sendFullRangeRequest(TmfTimeRange fullRange){
  if (fFullTraceRequest != null && !fFullTraceRequest.isCompleted()) {
    fFullTraceRequest.cancel();
  }
  int cacheSize=fCurrentExperiment.getCacheSize();
  fFullTraceRequest=new HistogramRequest(fFullTraceHistogram.getDataModel(),fullRange,(int)fFullTraceHistogram.fDataModel.getNbEvents(),TmfDataRequest.ALL_DATA,cacheSize,ExecutionType.BACKGROUND);
  fCurrentExperiment.sendRequest(fFullTraceRequest);
}","private void sendFullRangeRequest(TmfTimeRange fullRange){
  if ((fFullTraceRequest != null) && !fFullTraceRequest.isCompleted()) {
    fFullTraceRequest.cancel();
  }
  int cacheSize=fCurrentExperiment.getCacheSize();
  fFullTraceRequest=new HistogramRequest(fFullTraceHistogram.getDataModel(),fullRange,(int)fFullTraceHistogram.fDataModel.getNbEvents(),TmfDataRequest.ALL_DATA,cacheSize,ExecutionType.BACKGROUND);
  fCurrentExperiment.sendRequest(fFullTraceRequest);
}",0.997867803837953
92231,"private void setNewRange(long startTime,long duration){
  if (startTime < fExperimentStartTime)   startTime=fExperimentStartTime;
  long endTime=startTime + duration;
  if (endTime > fExperimentEndTime) {
    endTime=fExperimentEndTime;
    if (endTime - duration > fExperimentStartTime)     startTime=endTime - duration;
 else {
      startTime=fExperimentStartTime;
    }
  }
  updateTimeRange(startTime,endTime);
}","private void setNewRange(long startTime,long duration){
  if (startTime < fExperimentStartTime) {
    startTime=fExperimentStartTime;
  }
  long endTime=startTime + duration;
  if (endTime < startTime) {
    endTime=fExperimentEndTime;
    startTime=fExperimentStartTime;
  }
  if (endTime > fExperimentEndTime) {
    endTime=fExperimentEndTime;
    if ((endTime - duration) > fExperimentStartTime) {
      startTime=endTime - duration;
    }
 else {
      startTime=fExperimentStartTime;
    }
  }
  updateTimeRange(startTime,endTime);
}",0.8732984293193717
92232,"@Override public void dispose(){
  if (fTimeRangeRequest != null && !fTimeRangeRequest.isCompleted()) {
    fTimeRangeRequest.cancel();
  }
  if (fFullTraceRequest != null && !fFullTraceRequest.isCompleted()) {
    fFullTraceRequest.cancel();
  }
  fFullTraceHistogram.dispose();
  fTimeRangeHistogram.dispose();
  super.dispose();
}","@Override public void dispose(){
  if ((fTimeRangeRequest != null) && !fTimeRangeRequest.isCompleted()) {
    fTimeRangeRequest.cancel();
  }
  if ((fFullTraceRequest != null) && !fFullTraceRequest.isCompleted()) {
    fFullTraceRequest.cancel();
  }
  fFullTraceHistogram.dispose();
  fTimeRangeHistogram.dispose();
  super.dispose();
}",0.9940298507462688
92233,"@Override @SuppressWarnings(""String_Node_Str"") public void createPartControl(Composite parent){
  fParent=parent;
  final String currentEventLabel=Messages.HistogramView_currentEventLabel;
  final String windowSpanLabel=Messages.HistogramView_windowSpanLabel;
  Composite viewComposite=new Composite(fParent,SWT.FILL);
  GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.horizontalSpacing=5;
  gridLayout.verticalSpacing=0;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  viewComposite.setLayout(gridLayout);
  GridData gridData=new GridData();
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  viewComposite.setLayoutData(gridData);
  Composite controlsComposite=new Composite(viewComposite,SWT.FILL);
  gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  gridLayout.horizontalSpacing=5;
  gridLayout.verticalSpacing=0;
  gridLayout.makeColumnsEqualWidth=true;
  gridLayout.marginLeft=5;
  gridLayout.marginRight=5;
  controlsComposite.setLayout(gridLayout);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.CENTER;
  gridData.verticalAlignment=SWT.CENTER;
  fCurrentEventTimeControl=new HistogramCurrentTimeControl(this,controlsComposite,SWT.BORDER,SWT.NONE,currentEventLabel,HistogramUtils.nanosecondsToString(0L));
  fCurrentEventTimeControl.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.CENTER;
  gridData.verticalAlignment=SWT.CENTER;
  fTimeSpanControl=new HistogramTimeRangeControl(this,controlsComposite,SWT.BORDER,SWT.NONE,windowSpanLabel,HistogramUtils.nanosecondsToString(0L));
  fTimeSpanControl.setLayoutData(gridData);
  Composite timeRangeComposite=new Composite(viewComposite,SWT.FILL);
  gridLayout=new GridLayout();
  gridLayout.numColumns=1;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  gridLayout.marginTop=5;
  gridLayout.horizontalSpacing=0;
  gridLayout.verticalSpacing=0;
  gridLayout.marginLeft=5;
  gridLayout.marginRight=5;
  timeRangeComposite.setLayout(gridLayout);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  timeRangeComposite.setLayoutData(gridData);
  fTimeRangeHistogram=new TimeRangeHistogram(this,timeRangeComposite);
  Composite fullRangeComposite=new Composite(viewComposite,SWT.FILL);
  gridLayout=new GridLayout();
  gridLayout.numColumns=1;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  gridLayout.marginTop=5;
  gridLayout.horizontalSpacing=0;
  gridLayout.verticalSpacing=0;
  gridLayout.marginLeft=5;
  gridLayout.marginRight=5;
  fullRangeComposite.setLayout(gridLayout);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.horizontalSpan=2;
  gridData.grabExcessHorizontalSpace=true;
  fullRangeComposite.setLayoutData(gridData);
  fFullTraceHistogram=new FullTraceHistogram(this,fullRangeComposite);
  fCurrentExperiment=(TmfExperiment<ITmfEvent>)TmfExperiment.getCurrentExperiment();
  if (fCurrentExperiment != null)   loadExperiment();
}","@Override @SuppressWarnings(""String_Node_Str"") public void createPartControl(Composite parent){
  fParent=parent;
  final String currentEventLabel=Messages.HistogramView_currentEventLabel;
  final String windowSpanLabel=Messages.HistogramView_windowSpanLabel;
  Composite viewComposite=new Composite(fParent,SWT.FILL);
  GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.horizontalSpacing=5;
  gridLayout.verticalSpacing=0;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  viewComposite.setLayout(gridLayout);
  GridData gridData=new GridData();
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  viewComposite.setLayoutData(gridData);
  Composite controlsComposite=new Composite(viewComposite,SWT.FILL);
  gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  gridLayout.horizontalSpacing=5;
  gridLayout.verticalSpacing=0;
  gridLayout.makeColumnsEqualWidth=true;
  gridLayout.marginLeft=5;
  gridLayout.marginRight=5;
  controlsComposite.setLayout(gridLayout);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.CENTER;
  gridData.verticalAlignment=SWT.CENTER;
  fCurrentEventTimeControl=new HistogramCurrentTimeControl(this,controlsComposite,SWT.BORDER,SWT.NONE,currentEventLabel,HistogramUtils.nanosecondsToString(0L));
  fCurrentEventTimeControl.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.CENTER;
  gridData.verticalAlignment=SWT.CENTER;
  fTimeSpanControl=new HistogramTimeRangeControl(this,controlsComposite,SWT.BORDER,SWT.NONE,windowSpanLabel,HistogramUtils.nanosecondsToString(0L));
  fTimeSpanControl.setLayoutData(gridData);
  Composite timeRangeComposite=new Composite(viewComposite,SWT.FILL);
  gridLayout=new GridLayout();
  gridLayout.numColumns=1;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  gridLayout.marginTop=5;
  gridLayout.horizontalSpacing=0;
  gridLayout.verticalSpacing=0;
  gridLayout.marginLeft=5;
  gridLayout.marginRight=5;
  timeRangeComposite.setLayout(gridLayout);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  timeRangeComposite.setLayoutData(gridData);
  fTimeRangeHistogram=new TimeRangeHistogram(this,timeRangeComposite);
  Composite fullRangeComposite=new Composite(viewComposite,SWT.FILL);
  gridLayout=new GridLayout();
  gridLayout.numColumns=1;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  gridLayout.marginTop=5;
  gridLayout.horizontalSpacing=0;
  gridLayout.verticalSpacing=0;
  gridLayout.marginLeft=5;
  gridLayout.marginRight=5;
  fullRangeComposite.setLayout(gridLayout);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.horizontalSpan=2;
  gridData.grabExcessHorizontalSpace=true;
  fullRangeComposite.setLayoutData(gridData);
  fFullTraceHistogram=new FullTraceHistogram(this,fullRangeComposite);
  fCurrentExperiment=(TmfExperiment<ITmfEvent>)TmfExperiment.getCurrentExperiment();
  if (fCurrentExperiment != null) {
    loadExperiment();
  }
}",0.9987600743955364
92234,"@Override public synchronized void mouseScrolled(MouseEvent event){
  if (fScrollCounter == null) {
    fScrollCounter=new MouseScrollCounter(this);
    fScrollCounter.start();
    fMouseTimestamp=fHistogram.getTimestamp(event.x);
  }
  fScrollCounter.incrementMouseScroll(event.count);
}","@Override public synchronized void mouseScrolled(MouseEvent event){
  if (fScrollCounter == null) {
    fScrollCounter=new MouseScrollCounter(this);
    fScrollCounter.start();
  }
  fScrollCounter.incrementMouseScroll(event.count);
}",0.7241379310344828
92235,"private synchronized void zoom(int nbClicks){
  fScrollCounter=null;
  long requestedRange=(nbClicks > 0) ? Math.round(ZOOM_FACTOR * fRangeDuration) : (long)Math.ceil(fRangeDuration * (1.0 / ZOOM_FACTOR));
  double ratio=((double)(fMouseTimestamp - fRangeStartTime)) / fRangeDuration;
  long requestedStart=validateStart(fRangeStartTime + (long)((fRangeDuration - requestedRange) * ratio));
  long requestedEnd=validateEnd(requestedStart,requestedStart + requestedRange);
  requestedStart=validateStart(requestedEnd - requestedRange);
  fHistogram.updateTimeRange(requestedStart,requestedEnd);
}","private synchronized void zoom(int nbClicks){
  fScrollCounter=null;
  long requestedRange=(nbClicks > 0) ? Math.round(ZOOM_FACTOR * fRangeDuration) : (long)Math.ceil(fRangeDuration * (1.0 / ZOOM_FACTOR));
  long requestedStart=validateStart(fRangeStartTime + (long)((fRangeDuration - requestedRange) / 2));
  long requestedEnd=validateEnd(requestedStart,requestedStart + requestedRange);
  requestedStart=validateStart(requestedEnd - requestedRange);
  fHistogram.updateTimeRange(requestedStart,requestedEnd);
}",0.919602529358627
92236,"/** 
 * Perform the request for an experiment and populates the statistics tree with event.
 * @param experiment experiment for which we need the statistics data.
 * @param timeRange to request
 */
@SuppressWarnings(""String_Node_Str"") protected void requestData(final TmfExperiment<?> experiment,TmfTimeRange timeRange){
  if (experiment != null) {
    if (checkUpdateBusy(timeRange)) {
      return;
    }
    int index=0;
    for (    TmfStatisticsTreeNode node : ((TmfStatisticsTreeNode)fTreeViewer.getInput()).getChildren()) {
      index+=(int)node.getValue().nbEvents;
    }
    fRequest=new TmfEventRequest<ITmfEvent>(ITmfEvent.class,timeRange,index,TmfDataRequest.ALL_DATA,getIndexPageSize(),ExecutionType.BACKGROUND){
      @Override public void handleData(      ITmfEvent data){
        super.handleData(data);
        if (data != null) {
          AbsTmfStatisticsTree statisticsData=TmfStatisticsTreeRootFactory.getStatTree(getTreeID(experiment.getName()));
          final String traceName=data.getTrace().getName();
          ITmfExtraEventInfo extraInfo=new ITmfExtraEventInfo(){
            @Override public String getTraceName(){
              if (traceName == null) {
                return Messages.TmfStatisticsView_UnknownTraceName;
              }
              return traceName;
            }
          }
;
          statisticsData.registerEvent(data,extraInfo);
          statisticsData.increase(data,extraInfo,1);
          if ((getNbRead() % getInputChangedRefresh()) == 0) {
            modelInputChanged(false);
          }
        }
      }
      @Override public void handleSuccess(){
        super.handleSuccess();
        modelInputChanged(true);
        waitCursor(false);
      }
      @Override public void handleFailure(){
        super.handleFailure();
        modelIncomplete(experiment.getName());
      }
      @Override public void handleCancel(){
        super.handleCancel();
        modelIncomplete(experiment.getName());
      }
    }
;
    ((TmfExperiment<ITmfEvent>)experiment).sendRequest(fRequest);
    waitCursor(true);
  }
}","/** 
 * Perform the request for an experiment and populates the statistics tree with event.
 * @param experiment experiment for which we need the statistics data.
 * @param timeRange to request
 */
@SuppressWarnings(""String_Node_Str"") protected void requestData(final TmfExperiment<?> experiment,TmfTimeRange timeRange){
  if (experiment != null) {
    if (checkUpdateBusy(timeRange)) {
      return;
    }
    int index=0;
    for (    TmfStatisticsTreeNode node : ((TmfStatisticsTreeNode)fTreeViewer.getInput()).getChildren()) {
      index+=(int)node.getValue().nbEvents;
    }
    fRequest=new TmfEventRequest<ITmfEvent>(ITmfEvent.class,timeRange,index,TmfDataRequest.ALL_DATA,getIndexPageSize(),ExecutionType.BACKGROUND){
      private final AbsTmfStatisticsTree statisticsData=TmfStatisticsTreeRootFactory.getStatTree(getTreeID(experiment.getName()));
      @Override public void handleData(      ITmfEvent data){
        super.handleData(data);
        if (data != null) {
          final String traceName=data.getTrace().getName();
          ITmfExtraEventInfo extraInfo=new ITmfExtraEventInfo(){
            @Override public String getTraceName(){
              if (traceName == null) {
                return Messages.TmfStatisticsView_UnknownTraceName;
              }
              return traceName;
            }
          }
;
          statisticsData.registerEvent(data,extraInfo);
          statisticsData.increase(data,extraInfo,1);
          if ((getNbRead() % getInputChangedRefresh()) == 0) {
            modelInputChanged(false);
          }
        }
      }
      @Override public void handleSuccess(){
        super.handleSuccess();
        modelInputChanged(true);
        waitCursor(false);
      }
      @Override public void handleFailure(){
        super.handleFailure();
        modelIncomplete(experiment.getName());
      }
      @Override public void handleCancel(){
        super.handleCancel();
        modelIncomplete(experiment.getName());
      }
    }
;
    ((TmfExperiment<ITmfEvent>)experiment).sendRequest(fRequest);
    waitCursor(true);
  }
}",0.9394230769230768
92237,"@Override public void handleData(ITmfEvent data){
  super.handleData(data);
  if (data != null) {
    AbsTmfStatisticsTree statisticsData=TmfStatisticsTreeRootFactory.getStatTree(getTreeID(experiment.getName()));
    final String traceName=data.getTrace().getName();
    ITmfExtraEventInfo extraInfo=new ITmfExtraEventInfo(){
      @Override public String getTraceName(){
        if (traceName == null) {
          return Messages.TmfStatisticsView_UnknownTraceName;
        }
        return traceName;
      }
    }
;
    statisticsData.registerEvent(data,extraInfo);
    statisticsData.increase(data,extraInfo,1);
    if ((getNbRead() % getInputChangedRefresh()) == 0) {
      modelInputChanged(false);
    }
  }
}","@Override public void handleData(ITmfEvent data){
  super.handleData(data);
  if (data != null) {
    final String traceName=data.getTrace().getName();
    ITmfExtraEventInfo extraInfo=new ITmfExtraEventInfo(){
      @Override public String getTraceName(){
        if (traceName == null) {
          return Messages.TmfStatisticsView_UnknownTraceName;
        }
        return traceName;
      }
    }
;
    statisticsData.registerEvent(data,extraInfo);
    statisticsData.increase(data,extraInfo,1);
    if ((getNbRead() % getInputChangedRefresh()) == 0) {
      modelInputChanged(false);
    }
  }
}",0.9126803340926348
92238,"@Override public void dispose(){
  super.dispose();
  if (fWaitCursor != null) {
    fWaitCursor.dispose();
  }
  TmfStatisticsTreeRootFactory.removeAll();
}","@Override public void dispose(){
  super.dispose();
  if (fWaitCursor != null) {
    fWaitCursor.dispose();
  }
  cancelOngoingRequest();
  TmfStatisticsTreeRootFactory.removeAll();
}",0.923529411764706
92239,"private void setSelectedTimeInt(long time,boolean ensureVisible,boolean doNotify){
  long time0=_time0;
  long time1=_time1;
  if (ensureVisible) {
    long timeSpace=(long)((_time1 - _time0) * .02);
    long timeMid=(long)((_time1 - _time0) * .5);
    if (time < _time0 + timeSpace) {
      long dt=_time0 - time + timeMid;
      _time0-=dt;
      _time1-=dt;
    }
 else     if (time > _time1 - timeSpace) {
      long dt=time - _time1 + timeMid;
      _time0+=dt;
      _time1+=dt;
    }
    if (_time0 < _time0_) {
      _time1=Math.min(_time1_,_time1 + (_time0_ - _time0));
      _time0=_time0_;
    }
 else     if (_time1 > _time1_) {
      _time0=Math.max(_time0_,_time0 - (_time1 - _time1_));
      _time1=_time1_;
    }
  }
  if (_time1 - _time0 < _minTimeInterval) {
    _time1=_time0 + _minTimeInterval;
  }
  _stateCtrl.adjustScrolls();
  _stateCtrl.redraw();
  _timeScaleCtrl.redraw();
  boolean notifySelectedTime=(time != _selectedTime);
  _selectedTime=time;
  if (doNotify && ((time0 != _time0) || (time1 != _time1))) {
    notifyRangeListeners(_time0,_time1);
  }
  if (doNotify && notifySelectedTime) {
    notifyTimeListeners(_selectedTime);
  }
}","private void setSelectedTimeInt(long time,boolean ensureVisible,boolean doNotify){
  long time0=_time0;
  long time1=_time1;
  if (ensureVisible) {
    long timeSpace=(long)((_time1 - _time0) * .02);
    long timeMid=(long)((_time1 - _time0) * .5);
    if (time < _time0 + timeSpace) {
      long dt=_time0 - time + timeMid;
      _time0-=dt;
      _time1-=dt;
    }
 else     if (time > _time1 - timeSpace) {
      long dt=time - _time1 + timeMid;
      _time0+=dt;
      _time1+=dt;
    }
    if (_time0 < _time0_) {
      _time1=Math.min(_time1_,_time1 + (_time0_ - _time0));
      _time0=_time0_;
    }
 else     if (_time1 > _time1_) {
      _time0=Math.max(_time0_,_time0 - (_time1 - _time1_));
      _time1=_time1_;
    }
  }
  if (_time1 - _time0 < _minTimeInterval) {
    _time1=Math.min(_time1_,_time0 + _minTimeInterval);
  }
  _stateCtrl.adjustScrolls();
  _stateCtrl.redraw();
  _timeScaleCtrl.redraw();
  boolean notifySelectedTime=(time != _selectedTime);
  _selectedTime=time;
  if (doNotify && ((time0 != _time0) || (time1 != _time1))) {
    notifyRangeListeners(_time0,_time1);
  }
  if (doNotify && notifySelectedTime) {
    notifyTimeListeners(_selectedTime);
  }
}",0.9923469387755102
92240,"@Override void paint(Rectangle bounds,PaintEvent e){
  GC gc=e.gc;
  gc.setBackground(_colors.getColor(TimeGraphColorScheme.BACKGROUND));
  drawBackground(gc,bounds.x,bounds.y,bounds.width,bounds.height);
  if (bounds.width < 2 || bounds.height < 2 || null == _timeProvider) {
    return;
  }
  _idealNameSpace=0;
  int nameSpace=_timeProvider.getNameSpace();
  gc.setBackground(_colors.getBkColor(false,false,true));
  drawBackground(gc,bounds.x,bounds.y,nameSpace,bounds.height);
  drawItems(bounds,_timeProvider,_data._expandedItems,_topIndex,nameSpace,gc);
  long time0=_timeProvider.getTime0();
  long time1=_timeProvider.getTime1();
  long selectedTime=_timeProvider.getSelectedTime();
  double pixelsPerNanoSec=(bounds.width - nameSpace <= RIGHT_MARGIN) ? 0 : (double)(bounds.width - nameSpace - RIGHT_MARGIN) / (time1 - time0);
  int x=bounds.x + nameSpace + (int)((selectedTime - time0) * pixelsPerNanoSec);
  if (x >= nameSpace && x < bounds.x + bounds.width) {
    gc.setForeground(_colors.getColor(TimeGraphColorScheme.SELECTED_TIME));
    gc.drawLine(x,bounds.y,x,bounds.y + bounds.height);
  }
  if (DRAG_SPLIT_LINE == _dragState) {
    gc.setForeground(_colors.getColor(TimeGraphColorScheme.BLACK));
    gc.drawLine(bounds.x + nameSpace,bounds.y,bounds.x + nameSpace,bounds.y + bounds.height - 1);
  }
 else   if (DRAG_NONE == _dragState && _mouseOverSplitLine && _timeProvider.getNameSpace() > 0) {
    gc.setForeground(_colors.getColor(TimeGraphColorScheme.RED));
    gc.drawLine(bounds.x + nameSpace,bounds.y,bounds.x + nameSpace,bounds.y + bounds.height - 1);
  }
}","@Override void paint(Rectangle bounds,PaintEvent e){
  GC gc=e.gc;
  gc.setBackground(_colors.getColor(TimeGraphColorScheme.BACKGROUND));
  drawBackground(gc,bounds.x,bounds.y,bounds.width,bounds.height);
  if (bounds.width < 2 || bounds.height < 2 || null == _timeProvider) {
    return;
  }
  _idealNameSpace=0;
  int nameSpace=_timeProvider.getNameSpace();
  gc.setBackground(_colors.getBkColor(false,false,true));
  drawBackground(gc,bounds.x,bounds.y,nameSpace,bounds.height);
  drawItems(bounds,_timeProvider,_data._expandedItems,_topIndex,nameSpace,gc);
  long time0=_timeProvider.getTime0();
  long time1=_timeProvider.getTime1();
  long selectedTime=_timeProvider.getSelectedTime();
  double pixelsPerNanoSec=(bounds.width - nameSpace <= RIGHT_MARGIN) ? 0 : (double)(bounds.width - nameSpace - RIGHT_MARGIN) / (time1 - time0);
  int x=bounds.x + nameSpace + (int)Math.round((selectedTime - time0) * pixelsPerNanoSec);
  if (x >= nameSpace && x < bounds.x + bounds.width) {
    gc.setForeground(_colors.getColor(TimeGraphColorScheme.SELECTED_TIME));
    gc.drawLine(x,bounds.y,x,bounds.y + bounds.height);
  }
  if (DRAG_SPLIT_LINE == _dragState) {
    gc.setForeground(_colors.getColor(TimeGraphColorScheme.BLACK));
    gc.drawLine(bounds.x + nameSpace,bounds.y,bounds.x + nameSpace,bounds.y + bounds.height - 1);
  }
 else   if (DRAG_NONE == _dragState && _mouseOverSplitLine && _timeProvider.getNameSpace() > 0) {
    gc.setForeground(_colors.getColor(TimeGraphColorScheme.RED));
    gc.drawLine(bounds.x + nameSpace,bounds.y,bounds.x + nameSpace,bounds.y + bounds.height - 1);
  }
}",0.9968533668974198
92241,"long getTimeAtX(int x){
  if (null == _timeProvider) {
    return -1;
  }
  long hitTime=-1;
  Point size=getCtrlSize();
  long time0=_timeProvider.getTime0();
  long time1=_timeProvider.getTime1();
  int nameWidth=_timeProvider.getNameSpace();
  x-=nameWidth;
  int timeWidth=size.x - nameWidth - RIGHT_MARGIN;
  if (x >= 0 && size.x >= nameWidth) {
    if (time1 - time0 > timeWidth) {
      hitTime=time0 + (long)((time1 - time0) * ((double)(x + 1) / timeWidth)) - 1;
    }
 else {
      hitTime=time0 + Math.round((time1 - time0) * ((double)x / timeWidth));
    }
  }
  return hitTime;
}","long getTimeAtX(int x){
  if (null == _timeProvider) {
    return -1;
  }
  long hitTime=-1;
  Point size=getCtrlSize();
  long time0=_timeProvider.getTime0();
  long time1=_timeProvider.getTime1();
  int nameWidth=_timeProvider.getNameSpace();
  x-=nameWidth;
  int timeWidth=size.x - nameWidth - RIGHT_MARGIN;
  if (x >= 0 && size.x >= nameWidth) {
    hitTime=time0 + Math.round((time1 - time0) * ((double)x / timeWidth));
  }
  return hitTime;
}",0.7923076923076923
92242,"private static void setHoverLocation(Shell shell,Point position){
  Rectangle displayBounds=shell.getDisplay().getBounds();
  Rectangle shellBounds=shell.getBounds();
  shellBounds.x=Math.max(Math.min(position.x,displayBounds.width - shellBounds.width),0);
  shellBounds.y=Math.max(Math.min(position.y + 16,displayBounds.height - shellBounds.height),0);
  shell.setBounds(shellBounds);
}","private static void setHoverLocation(Shell shell,Point position){
  Rectangle displayBounds=shell.getDisplay().getBounds();
  Rectangle shellBounds=shell.getBounds();
  if (position.x + shellBounds.width + 16 > displayBounds.width && position.x - shellBounds.width - 16 >= 0) {
    shellBounds.x=position.x - shellBounds.width - 16;
  }
 else {
    shellBounds.x=Math.max(Math.min(position.x + 16,displayBounds.width - shellBounds.width),0);
  }
  if (position.y + shellBounds.height + 16 > displayBounds.height && position.y - shellBounds.height - 16 >= 0) {
    shellBounds.y=position.y - shellBounds.height - 16;
  }
 else {
    shellBounds.y=Math.max(Math.min(position.y + 16,displayBounds.height - shellBounds.height),0);
  }
  shell.setBounds(shellBounds);
}",0.420503909643788
92243,"/** 
 * Standard constructor
 * @param parent The parent composite object
 * @param rUtilImpl The presentation provider
 * @param timeProv The time provider
 */
public TimeGraphTooltipHandler(Shell parent,ITimeGraphPresentationProvider rUtilImpl,ITimeDataProvider timeProv){
  final Display display=parent.getDisplay();
  this._utilImp=rUtilImpl;
  this._timeDataProvider=timeProv;
  _tipShell=new Shell(parent,SWT.ON_TOP | SWT.TOOL);
  GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.marginWidth=2;
  gridLayout.marginHeight=2;
  _tipShell.setLayout(gridLayout);
  GridData data=new GridData(GridData.BEGINNING,GridData.BEGINNING,true,true);
  _tipShell.setLayoutData(data);
  _tipShell.setBackground(display.getSystemColor(SWT.COLOR_INFO_BACKGROUND));
  _tipTable=new Table(_tipShell,SWT.NONE);
  new TableColumn(_tipTable,SWT.NONE);
  new TableColumn(_tipTable,SWT.NONE);
  _tipTable.setForeground(display.getSystemColor(SWT.COLOR_INFO_FOREGROUND));
  _tipTable.setBackground(display.getSystemColor(SWT.COLOR_INFO_BACKGROUND));
  _tipTable.setHeaderVisible(false);
  _tipTable.setLinesVisible(false);
}","/** 
 * Standard constructor
 * @param parent The parent shell (unused, can be null)
 * @param rUtilImpl The presentation provider
 * @param timeProv The time provider
 */
public TimeGraphTooltipHandler(Shell parent,ITimeGraphPresentationProvider rUtilImpl,ITimeDataProvider timeProv){
  this._utilImp=rUtilImpl;
  this._timeDataProvider=timeProv;
}",0.4360699865410498
92244,"/** 
 * Callback for the mouse-over tooltip
 * @param control The control object to use
 */
public void activateHoverHelp(final Control control){
  control.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (_tipShell.isVisible()) {
        _tipShell.setVisible(false);
      }
    }
  }
);
  control.addMouseMoveListener(new MouseMoveListener(){
    @Override public void mouseMove(    MouseEvent e){
      if (_tipShell.isVisible()) {
        _tipShell.setVisible(false);
      }
    }
  }
);
  control.addMouseTrackListener(new MouseTrackAdapter(){
    @Override public void mouseExit(    MouseEvent e){
      if (_tipShell.isVisible()) {
        _tipShell.setVisible(false);
      }
    }
    private void addItem(    String name,    String value){
      TableItem line=new TableItem(_tipTable,SWT.NONE);
      line.setText(0,name);
      line.setText(1,value);
    }
    private void fillValues(    Point pt,    TimeGraphControl threadStates,    ITimeGraphEntry entry){
      if (entry == null) {
        return;
      }
      if (entry.hasTimeEvents()) {
        ITimeEvent threadEvent=Utils.findEvent(entry,threadStates.getTimeAtX(pt.x),2);
        ITimeEvent nextEvent=Utils.findEvent(entry,threadStates.getTimeAtX(pt.x),1);
        addItem(_utilImp.getStateTypeName(),entry.getName());
        if (threadEvent == null) {
          return;
        }
        String state=_utilImp.getEventName(threadEvent);
        if (state != null) {
          addItem(Messages.TmfTimeTipHandler_TRACE_STATE,state);
        }
        Map<String,String> eventAddOns=_utilImp.getEventHoverToolTipInfo(threadEvent);
        if (eventAddOns != null) {
          for (Iterator<String> iter=eventAddOns.keySet().iterator(); iter.hasNext(); ) {
            String message=iter.next();
            addItem(message,eventAddOns.get(message));
          }
        }
        long eventStartTime=-1;
        long eventDuration=-1;
        long eventEndTime=-1;
        eventStartTime=threadEvent.getTime();
        eventDuration=threadEvent.getDuration();
        if (eventDuration < 0 && nextEvent != null) {
          eventEndTime=nextEvent.getTime();
          eventDuration=eventEndTime - eventStartTime;
        }
 else {
          eventEndTime=eventStartTime + eventDuration;
        }
        Resolution res=Resolution.NANOSEC;
        if (_timeDataProvider.isCalendarFormat()) {
          addItem(Messages.TmfTimeTipHandler_TRACE_DATE,eventStartTime > -1 ? Utils.formatDate(eventStartTime) : ""String_Node_Str"");
          if (eventDuration > 0) {
            addItem(Messages.TmfTimeTipHandler_TRACE_START_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,TimeFormat.ABSOLUTE,res) : ""String_Node_Str"");
            addItem(Messages.TmfTimeTipHandler_TRACE_STOP_TIME,eventEndTime > -1 ? Utils.formatTime(eventEndTime,TimeFormat.ABSOLUTE,res) : ""String_Node_Str"");
          }
 else {
            addItem(Messages.TmfTimeTipHandler_TRACE_EVENT_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,TimeFormat.ABSOLUTE,res) : ""String_Node_Str"");
          }
        }
 else {
          if (eventDuration > 0) {
            addItem(Messages.TmfTimeTipHandler_TRACE_START_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,TimeFormat.RELATIVE,res) : ""String_Node_Str"");
            addItem(Messages.TmfTimeTipHandler_TRACE_STOP_TIME,eventEndTime > -1 ? Utils.formatTime(eventEndTime,TimeFormat.RELATIVE,res) : ""String_Node_Str"");
          }
 else {
            addItem(Messages.TmfTimeTipHandler_TRACE_EVENT_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,TimeFormat.RELATIVE,res) : ""String_Node_Str"");
          }
        }
        if (eventDuration > 0) {
          addItem(Messages.TmfTimeTipHandler_DURATION,eventDuration > -1 ? Utils.formatTime(eventDuration,TimeFormat.RELATIVE,res) : ""String_Node_Str"");
        }
      }
    }
    @Override public void mouseHover(    MouseEvent event){
      Point pt=new Point(event.x,event.y);
      TimeGraphControl threadStates=(TimeGraphControl)event.widget;
      ITimeGraphEntry entry=threadStates.getEntry(pt);
      _tipTable.remove(0,_tipTable.getItemCount() - 1);
      fillValues(pt,threadStates,entry);
      if (_tipTable.getItemCount() == 0) {
        return;
      }
      _tipTable.getColumn(0).pack();
      _tipTable.getColumn(1).pack();
      _tipShell.pack();
      _tipPosition=control.toDisplay(pt);
      _tipShell.pack();
      setHoverLocation(_tipShell,_tipPosition);
      _tipShell.setVisible(true);
    }
  }
);
}","/** 
 * Callback for the mouse-over tooltip
 * @param control The control object to use
 */
public void activateHoverHelp(final Control control){
  control.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (_tipShell != null && !_tipShell.isDisposed()) {
        _tipShell.dispose();
      }
    }
  }
);
  control.addMouseMoveListener(new MouseMoveListener(){
    @Override public void mouseMove(    MouseEvent e){
      if (_tipShell != null && !_tipShell.isDisposed()) {
        _tipShell.dispose();
      }
    }
  }
);
  control.addMouseTrackListener(new MouseTrackAdapter(){
    @Override public void mouseExit(    MouseEvent e){
      if (_tipShell != null && !_tipShell.isDisposed()) {
        Point pt=control.toDisplay(e.x,e.y);
        if (!_tipShell.getBounds().contains(pt)) {
          _tipShell.dispose();
        }
      }
    }
    private void addItem(    String name,    String value){
      TableItem line=new TableItem(_tipTable,SWT.NONE);
      line.setText(0,name);
      line.setText(1,value);
    }
    private void fillValues(    Point pt,    TimeGraphControl timeGraphControl,    ITimeGraphEntry entry){
      if (entry == null) {
        return;
      }
      if (entry.hasTimeEvents()) {
        long currPixelTime=timeGraphControl.getTimeAtX(pt.x);
        long nextPixelTime=timeGraphControl.getTimeAtX(pt.x + 1);
        if (nextPixelTime == currPixelTime) {
          nextPixelTime++;
        }
        ITimeEvent currEvent=Utils.findEvent(entry,currPixelTime,0);
        ITimeEvent nextEvent=Utils.findEvent(entry,currPixelTime,1);
        if (currEvent == null || currEvent.getTime() < currPixelTime) {
          if (nextEvent != null && nextEvent.getTime() < nextPixelTime) {
            currEvent=nextEvent;
          }
        }
        addItem(_utilImp.getStateTypeName(),entry.getName());
        if (currEvent == null) {
          return;
        }
        String state=_utilImp.getEventName(currEvent);
        if (state != null) {
          addItem(Messages.TmfTimeTipHandler_TRACE_STATE,state);
        }
        Map<String,String> eventAddOns=_utilImp.getEventHoverToolTipInfo(currEvent);
        if (eventAddOns != null) {
          for (Iterator<String> iter=eventAddOns.keySet().iterator(); iter.hasNext(); ) {
            String message=iter.next();
            addItem(message,eventAddOns.get(message));
          }
        }
        long eventStartTime=-1;
        long eventDuration=-1;
        long eventEndTime=-1;
        eventStartTime=currEvent.getTime();
        eventDuration=currEvent.getDuration();
        if (eventDuration < 0 && nextEvent != null) {
          eventEndTime=nextEvent.getTime();
          eventDuration=eventEndTime - eventStartTime;
        }
 else {
          eventEndTime=eventStartTime + eventDuration;
        }
        Resolution res=Resolution.NANOSEC;
        if (_timeDataProvider.isCalendarFormat()) {
          addItem(Messages.TmfTimeTipHandler_TRACE_DATE,eventStartTime > -1 ? Utils.formatDate(eventStartTime) : ""String_Node_Str"");
          if (eventDuration > 0) {
            addItem(Messages.TmfTimeTipHandler_TRACE_START_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,TimeFormat.ABSOLUTE,res) : ""String_Node_Str"");
            addItem(Messages.TmfTimeTipHandler_TRACE_STOP_TIME,eventEndTime > -1 ? Utils.formatTime(eventEndTime,TimeFormat.ABSOLUTE,res) : ""String_Node_Str"");
          }
 else {
            addItem(Messages.TmfTimeTipHandler_TRACE_EVENT_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,TimeFormat.ABSOLUTE,res) : ""String_Node_Str"");
          }
        }
 else {
          if (eventDuration > 0) {
            addItem(Messages.TmfTimeTipHandler_TRACE_START_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,TimeFormat.RELATIVE,res) : ""String_Node_Str"");
            addItem(Messages.TmfTimeTipHandler_TRACE_STOP_TIME,eventEndTime > -1 ? Utils.formatTime(eventEndTime,TimeFormat.RELATIVE,res) : ""String_Node_Str"");
          }
 else {
            addItem(Messages.TmfTimeTipHandler_TRACE_EVENT_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,TimeFormat.RELATIVE,res) : ""String_Node_Str"");
          }
        }
        if (eventDuration > 0) {
          addItem(Messages.TmfTimeTipHandler_DURATION,eventDuration > -1 ? Utils.formatTime(eventDuration,TimeFormat.RELATIVE,res) : ""String_Node_Str"");
        }
      }
    }
    @Override public void mouseHover(    MouseEvent event){
      Point pt=new Point(event.x,event.y);
      TimeGraphControl timeGraphControl=(TimeGraphControl)event.widget;
      createTooltipShell(timeGraphControl.getShell());
      ITimeGraphEntry entry=timeGraphControl.getEntry(pt);
      _tipTable.remove(0,_tipTable.getItemCount() - 1);
      fillValues(pt,timeGraphControl,entry);
      if (_tipTable.getItemCount() == 0) {
        return;
      }
      _tipTable.getColumn(0).pack();
      _tipTable.getColumn(1).pack();
      _tipShell.pack();
      _tipPosition=control.toDisplay(pt);
      _tipShell.pack();
      setHoverLocation(_tipShell,_tipPosition);
      _tipShell.setVisible(true);
    }
  }
);
}",0.8774752475247525
92245,"@Override public void mouseMove(MouseEvent e){
  if (_tipShell.isVisible()) {
    _tipShell.setVisible(false);
  }
}","@Override public void mouseMove(MouseEvent e){
  if (_tipShell != null && !_tipShell.isDisposed()) {
    _tipShell.dispose();
  }
}",0.8016194331983806
92246,"private void fillValues(Point pt,TimeGraphControl threadStates,ITimeGraphEntry entry){
  if (entry == null) {
    return;
  }
  if (entry.hasTimeEvents()) {
    ITimeEvent threadEvent=Utils.findEvent(entry,threadStates.getTimeAtX(pt.x),2);
    ITimeEvent nextEvent=Utils.findEvent(entry,threadStates.getTimeAtX(pt.x),1);
    addItem(_utilImp.getStateTypeName(),entry.getName());
    if (threadEvent == null) {
      return;
    }
    String state=_utilImp.getEventName(threadEvent);
    if (state != null) {
      addItem(Messages.TmfTimeTipHandler_TRACE_STATE,state);
    }
    Map<String,String> eventAddOns=_utilImp.getEventHoverToolTipInfo(threadEvent);
    if (eventAddOns != null) {
      for (Iterator<String> iter=eventAddOns.keySet().iterator(); iter.hasNext(); ) {
        String message=iter.next();
        addItem(message,eventAddOns.get(message));
      }
    }
    long eventStartTime=-1;
    long eventDuration=-1;
    long eventEndTime=-1;
    eventStartTime=threadEvent.getTime();
    eventDuration=threadEvent.getDuration();
    if (eventDuration < 0 && nextEvent != null) {
      eventEndTime=nextEvent.getTime();
      eventDuration=eventEndTime - eventStartTime;
    }
 else {
      eventEndTime=eventStartTime + eventDuration;
    }
    Resolution res=Resolution.NANOSEC;
    if (_timeDataProvider.isCalendarFormat()) {
      addItem(Messages.TmfTimeTipHandler_TRACE_DATE,eventStartTime > -1 ? Utils.formatDate(eventStartTime) : ""String_Node_Str"");
      if (eventDuration > 0) {
        addItem(Messages.TmfTimeTipHandler_TRACE_START_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,TimeFormat.ABSOLUTE,res) : ""String_Node_Str"");
        addItem(Messages.TmfTimeTipHandler_TRACE_STOP_TIME,eventEndTime > -1 ? Utils.formatTime(eventEndTime,TimeFormat.ABSOLUTE,res) : ""String_Node_Str"");
      }
 else {
        addItem(Messages.TmfTimeTipHandler_TRACE_EVENT_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,TimeFormat.ABSOLUTE,res) : ""String_Node_Str"");
      }
    }
 else {
      if (eventDuration > 0) {
        addItem(Messages.TmfTimeTipHandler_TRACE_START_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,TimeFormat.RELATIVE,res) : ""String_Node_Str"");
        addItem(Messages.TmfTimeTipHandler_TRACE_STOP_TIME,eventEndTime > -1 ? Utils.formatTime(eventEndTime,TimeFormat.RELATIVE,res) : ""String_Node_Str"");
      }
 else {
        addItem(Messages.TmfTimeTipHandler_TRACE_EVENT_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,TimeFormat.RELATIVE,res) : ""String_Node_Str"");
      }
    }
    if (eventDuration > 0) {
      addItem(Messages.TmfTimeTipHandler_DURATION,eventDuration > -1 ? Utils.formatTime(eventDuration,TimeFormat.RELATIVE,res) : ""String_Node_Str"");
    }
  }
}","private void fillValues(Point pt,TimeGraphControl timeGraphControl,ITimeGraphEntry entry){
  if (entry == null) {
    return;
  }
  if (entry.hasTimeEvents()) {
    long currPixelTime=timeGraphControl.getTimeAtX(pt.x);
    long nextPixelTime=timeGraphControl.getTimeAtX(pt.x + 1);
    if (nextPixelTime == currPixelTime) {
      nextPixelTime++;
    }
    ITimeEvent currEvent=Utils.findEvent(entry,currPixelTime,0);
    ITimeEvent nextEvent=Utils.findEvent(entry,currPixelTime,1);
    if (currEvent == null || currEvent.getTime() < currPixelTime) {
      if (nextEvent != null && nextEvent.getTime() < nextPixelTime) {
        currEvent=nextEvent;
      }
    }
    addItem(_utilImp.getStateTypeName(),entry.getName());
    if (currEvent == null) {
      return;
    }
    String state=_utilImp.getEventName(currEvent);
    if (state != null) {
      addItem(Messages.TmfTimeTipHandler_TRACE_STATE,state);
    }
    Map<String,String> eventAddOns=_utilImp.getEventHoverToolTipInfo(currEvent);
    if (eventAddOns != null) {
      for (Iterator<String> iter=eventAddOns.keySet().iterator(); iter.hasNext(); ) {
        String message=iter.next();
        addItem(message,eventAddOns.get(message));
      }
    }
    long eventStartTime=-1;
    long eventDuration=-1;
    long eventEndTime=-1;
    eventStartTime=currEvent.getTime();
    eventDuration=currEvent.getDuration();
    if (eventDuration < 0 && nextEvent != null) {
      eventEndTime=nextEvent.getTime();
      eventDuration=eventEndTime - eventStartTime;
    }
 else {
      eventEndTime=eventStartTime + eventDuration;
    }
    Resolution res=Resolution.NANOSEC;
    if (_timeDataProvider.isCalendarFormat()) {
      addItem(Messages.TmfTimeTipHandler_TRACE_DATE,eventStartTime > -1 ? Utils.formatDate(eventStartTime) : ""String_Node_Str"");
      if (eventDuration > 0) {
        addItem(Messages.TmfTimeTipHandler_TRACE_START_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,TimeFormat.ABSOLUTE,res) : ""String_Node_Str"");
        addItem(Messages.TmfTimeTipHandler_TRACE_STOP_TIME,eventEndTime > -1 ? Utils.formatTime(eventEndTime,TimeFormat.ABSOLUTE,res) : ""String_Node_Str"");
      }
 else {
        addItem(Messages.TmfTimeTipHandler_TRACE_EVENT_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,TimeFormat.ABSOLUTE,res) : ""String_Node_Str"");
      }
    }
 else {
      if (eventDuration > 0) {
        addItem(Messages.TmfTimeTipHandler_TRACE_START_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,TimeFormat.RELATIVE,res) : ""String_Node_Str"");
        addItem(Messages.TmfTimeTipHandler_TRACE_STOP_TIME,eventEndTime > -1 ? Utils.formatTime(eventEndTime,TimeFormat.RELATIVE,res) : ""String_Node_Str"");
      }
 else {
        addItem(Messages.TmfTimeTipHandler_TRACE_EVENT_TIME,eventStartTime > -1 ? Utils.formatTime(eventStartTime,TimeFormat.RELATIVE,res) : ""String_Node_Str"");
      }
    }
    if (eventDuration > 0) {
      addItem(Messages.TmfTimeTipHandler_DURATION,eventDuration > -1 ? Utils.formatTime(eventDuration,TimeFormat.RELATIVE,res) : ""String_Node_Str"");
    }
  }
}",0.9059388946103674
92247,"@Override public void mouseDown(MouseEvent e){
  if (_tipShell.isVisible()) {
    _tipShell.setVisible(false);
  }
}","@Override public void mouseDown(MouseEvent e){
  if (_tipShell != null && !_tipShell.isDisposed()) {
    _tipShell.dispose();
  }
}",0.8016194331983806
92248,"@Override public void mouseHover(MouseEvent event){
  Point pt=new Point(event.x,event.y);
  TimeGraphControl threadStates=(TimeGraphControl)event.widget;
  ITimeGraphEntry entry=threadStates.getEntry(pt);
  _tipTable.remove(0,_tipTable.getItemCount() - 1);
  fillValues(pt,threadStates,entry);
  if (_tipTable.getItemCount() == 0) {
    return;
  }
  _tipTable.getColumn(0).pack();
  _tipTable.getColumn(1).pack();
  _tipShell.pack();
  _tipPosition=control.toDisplay(pt);
  _tipShell.pack();
  setHoverLocation(_tipShell,_tipPosition);
  _tipShell.setVisible(true);
}","@Override public void mouseHover(MouseEvent event){
  Point pt=new Point(event.x,event.y);
  TimeGraphControl timeGraphControl=(TimeGraphControl)event.widget;
  createTooltipShell(timeGraphControl.getShell());
  ITimeGraphEntry entry=timeGraphControl.getEntry(pt);
  _tipTable.remove(0,_tipTable.getItemCount() - 1);
  fillValues(pt,timeGraphControl,entry);
  if (_tipTable.getItemCount() == 0) {
    return;
  }
  _tipTable.getColumn(0).pack();
  _tipTable.getColumn(1).pack();
  _tipShell.pack();
  _tipPosition=control.toDisplay(pt);
  _tipShell.pack();
  setHoverLocation(_tipShell,_tipPosition);
  _tipShell.setVisible(true);
}",0.8925895087427144
92249,"@Override public void mouseExit(MouseEvent e){
  if (_tipShell.isVisible()) {
    _tipShell.setVisible(false);
  }
}","@Override public void mouseExit(MouseEvent e){
  if (_tipShell != null && !_tipShell.isDisposed()) {
    Point pt=control.toDisplay(e.x,e.y);
    if (!_tipShell.getBounds().contains(pt)) {
      _tipShell.dispose();
    }
  }
}",0.478134110787172
92250,"/** 
 * N means: <list> <li>-1: Previous Event</li> <li>0: Current Event</li> <li> 1: Next Event</li> <li>2: Previous Event when located in a non Event Area </list>
 * @param entry
 * @param time
 * @param n
 * @return
 */
static ITimeEvent findEvent(ITimeGraphEntry entry,long time,int n){
  if (null == entry || !entry.hasTimeEvents()) {
    return null;
  }
  Iterator<ITimeEvent> iterator=entry.getTimeEventsIterator();
  if (iterator == null) {
    return null;
  }
  ITimeEvent nextEvent=null;
  ITimeEvent currEvent=null;
  ITimeEvent prevEvent=null;
  while (iterator.hasNext()) {
    nextEvent=iterator.next();
    long nextStartTime=nextEvent.getTime();
    if (nextStartTime > time) {
      break;
    }
    if (currEvent == null || currEvent.getTime() != nextStartTime) {
      prevEvent=currEvent;
      currEvent=nextEvent;
    }
  }
  if (n == -1) {
    if (currEvent != null && currEvent.getTime() + currEvent.getDuration() >= time) {
      return prevEvent;
    }
    return currEvent;
  }
 else   if (n == 0) {
    if (currEvent != null && currEvent.getTime() + currEvent.getDuration() >= time) {
      return currEvent;
    }
    return null;
  }
 else   if (n == 1) {
    return nextEvent;
  }
 else   if (n == 2) {
    return currEvent;
  }
  return null;
}","/** 
 * N means: <list> <li>-1: Previous Event</li> <li>0: Current Event</li> <li> 1: Next Event</li> <li>2: Previous Event when located in a non Event Area </list>
 * @param entry
 * @param time
 * @param n
 * @return
 */
static ITimeEvent findEvent(ITimeGraphEntry entry,long time,int n){
  if (null == entry || !entry.hasTimeEvents()) {
    return null;
  }
  Iterator<ITimeEvent> iterator=entry.getTimeEventsIterator();
  if (iterator == null) {
    return null;
  }
  ITimeEvent nextEvent=null;
  ITimeEvent currEvent=null;
  ITimeEvent prevEvent=null;
  while (iterator.hasNext()) {
    nextEvent=iterator.next();
    long nextStartTime=nextEvent.getTime();
    if (nextStartTime > time) {
      break;
    }
    if (currEvent == null || currEvent.getTime() != nextStartTime) {
      prevEvent=currEvent;
      currEvent=nextEvent;
    }
  }
  if (n == -1) {
    if (currEvent != null && currEvent.getTime() + currEvent.getDuration() >= time) {
      return prevEvent;
    }
    return currEvent;
  }
 else   if (n == 0) {
    if (currEvent != null && currEvent.getTime() + currEvent.getDuration() >= time) {
      return currEvent;
    }
    return null;
  }
 else   if (n == 1) {
    if (nextEvent != null && nextEvent.getTime() > time) {
      return nextEvent;
    }
    return null;
  }
 else   if (n == 2) {
    return currEvent;
  }
  return null;
}",0.9613636363636364
92251,"protected String createLaunchStr(IPath valgrindPath) throws CoreException {
  String projectName=configUtils.getProjectName();
  IProject project=ConfigUtils.getProject(projectName);
  URI projectURI=project.getLocationURI();
  String Location=projectURI.getScheme() + ""String_Node_Str"" + projectURI.getHost();
  return config.getName() + ""String_Node_Str"" + valgrindPath.toString()+ ""String_Node_Str""+ getPlugin().getToolName(toolID)+ ""String_Node_Str""+ Location+ ""String_Node_Str"";
}","protected String createLaunchStr(IPath valgrindPath) throws CoreException {
  String projectName=configUtils.getProjectName();
  IProject project=ConfigUtils.getProject(projectName);
  URI projectURI=project.getLocationURI();
  String host=projectURI.getHost();
  if (host == null) {
    host=projectURI.getAuthority();
  }
  String location;
  if (host == null) {
    location=""String_Node_Str"";
  }
 else {
    location=projectURI.getScheme() + ""String_Node_Str"" + host;
  }
  return config.getName() + ""String_Node_Str"" + valgrindPath.toString()+ ""String_Node_Str""+ getPlugin().getToolName(toolID)+ ""String_Node_Str""+ location+ ""String_Node_Str"";
}",0.801056338028169
92252,"@Override public void run(){
  if (fTimeGraphCombo.isDisposed()) {
    return;
  }
  fTimeGraphCombo.redraw();
  fTimeGraphCombo.update();
}","@Override public void run(){
  if (fTimeGraphCombo.isDisposed()) {
    return;
  }
  fTimeGraphCombo.redraw();
  fTimeGraphCombo.update();
synchronized (fSyncObj) {
    if (fRedrawState == State.PENDING) {
      fRedrawState=State.IDLE;
      redraw();
    }
 else {
      fRedrawState=State.IDLE;
    }
  }
}",0.6191536748329621
92253,"private void zoom(ControlFlowEntry entry,IProgressMonitor monitor){
  if (fZoomStartTime <= fStartTime && fZoomEndTime >= fEndTime) {
    entry.setZoomedEventList(null);
  }
 else {
    List<ITimeEvent> zoomedEventList=getEventList(entry,fZoomStartTime,fZoomEndTime,fResolution,monitor);
    if (zoomedEventList != null) {
      entry.setZoomedEventList(zoomedEventList);
    }
  }
  for (  ControlFlowEntry child : entry.getChildren()) {
    if (fMonitor.isCanceled()) {
      return;
    }
    zoom(child,monitor);
  }
}","private void zoom(ControlFlowEntry entry,IProgressMonitor monitor){
  if (fZoomStartTime <= fStartTime && fZoomEndTime >= fEndTime) {
    entry.setZoomedEventList(null);
  }
 else {
    List<ITimeEvent> zoomedEventList=getEventList(entry,fZoomStartTime,fZoomEndTime,fResolution,monitor);
    if (zoomedEventList != null) {
      entry.setZoomedEventList(zoomedEventList);
    }
  }
  redraw();
  for (  ControlFlowEntry child : entry.getChildren()) {
    if (fMonitor.isCanceled()) {
      return;
    }
    zoom(child,monitor);
  }
}",0.9886363636363636
92254,"private static List<ITimeEvent> getEventList(ControlFlowEntry entry,long startTime,long endTime,long resolution,IProgressMonitor monitor){
  startTime=Math.max(startTime,entry.getStartTime());
  endTime=Math.min(endTime,entry.getEndTime());
  if (endTime <= startTime) {
    return null;
  }
  IStateSystemQuerier ssq=entry.getTrace().getStateSystem();
  List<ITimeEvent> eventList=null;
  try {
    int statusQuark=ssq.getQuarkRelative(entry.getThreadQuark(),Attributes.STATUS);
    List<ITmfStateInterval> statusIntervals=ssq.queryHistoryRange(statusQuark,startTime,endTime - 1,resolution);
    eventList=new ArrayList<ITimeEvent>(statusIntervals.size());
    long lastEndTime=-1;
    for (    ITmfStateInterval statusInterval : statusIntervals) {
      if (monitor.isCanceled()) {
        return null;
      }
      long time=statusInterval.getStartTime();
      long duration=statusInterval.getEndTime() - time + 1;
      int status=-1;
      try {
        status=statusInterval.getStateValue().unboxInt();
      }
 catch (      StateValueTypeException e) {
        e.printStackTrace();
      }
      if (lastEndTime != time && lastEndTime != -1) {
        eventList.add(new ControlFlowEvent(entry,lastEndTime,time - lastEndTime,0));
      }
      eventList.add(new ControlFlowEvent(entry,time,duration,status));
      lastEndTime=time + duration;
    }
  }
 catch (  AttributeNotFoundException e) {
    e.printStackTrace();
  }
catch (  TimeRangeException e) {
    e.printStackTrace();
  }
  return eventList;
}","private static List<ITimeEvent> getEventList(ControlFlowEntry entry,long startTime,long endTime,long resolution,IProgressMonitor monitor){
  startTime=Math.max(startTime,entry.getStartTime());
  endTime=Math.min(endTime,entry.getEndTime());
  if (endTime <= startTime) {
    return null;
  }
  IStateSystemQuerier ssq=entry.getTrace().getStateSystem();
  List<ITimeEvent> eventList=null;
  try {
    int statusQuark=ssq.getQuarkRelative(entry.getThreadQuark(),Attributes.STATUS);
    List<ITmfStateInterval> statusIntervals=ssq.queryHistoryRange(statusQuark,startTime,endTime - 1,resolution,monitor);
    eventList=new ArrayList<ITimeEvent>(statusIntervals.size());
    long lastEndTime=-1;
    for (    ITmfStateInterval statusInterval : statusIntervals) {
      if (monitor.isCanceled()) {
        return null;
      }
      long time=statusInterval.getStartTime();
      long duration=statusInterval.getEndTime() - time + 1;
      int status=-1;
      try {
        status=statusInterval.getStateValue().unboxInt();
      }
 catch (      StateValueTypeException e) {
        e.printStackTrace();
      }
      if (lastEndTime != time && lastEndTime != -1) {
        eventList.add(new ControlFlowEvent(entry,lastEndTime,time - lastEndTime,0));
      }
      eventList.add(new ControlFlowEvent(entry,time,duration,status));
      lastEndTime=time + duration;
    }
  }
 catch (  AttributeNotFoundException e) {
    e.printStackTrace();
  }
catch (  TimeRangeException e) {
    e.printStackTrace();
  }
  return eventList;
}",0.9973684210526316
92255,"private void redraw(){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphCombo.isDisposed()) {
        return;
      }
      fTimeGraphCombo.redraw();
      fTimeGraphCombo.update();
    }
  }
);
}","private void redraw(){
synchronized (fSyncObj) {
    if (fRedrawState == State.IDLE) {
      fRedrawState=State.BUSY;
    }
 else {
      fRedrawState=State.PENDING;
      return;
    }
  }
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphCombo.isDisposed()) {
        return;
      }
      fTimeGraphCombo.redraw();
      fTimeGraphCombo.update();
synchronized (fSyncObj) {
        if (fRedrawState == State.PENDING) {
          fRedrawState=State.IDLE;
          redraw();
        }
 else {
          fRedrawState=State.IDLE;
        }
      }
    }
  }
);
}",0.5452436194895591
92256,"@Override public void run(){
  if (fTimeGraphViewer.getControl().isDisposed()) {
    return;
  }
  fTimeGraphViewer.getControl().redraw();
  fTimeGraphViewer.getControl().update();
}","@Override public void run(){
  if (fTimeGraphViewer.getControl().isDisposed()) {
    return;
  }
  fTimeGraphViewer.getControl().redraw();
  fTimeGraphViewer.getControl().update();
synchronized (fSyncObj) {
    if (fRedrawState == State.PENDING) {
      fRedrawState=State.IDLE;
      redraw();
    }
 else {
      fRedrawState=State.IDLE;
    }
  }
}",0.6791744840525328
92257,"private static List<ITimeEvent> getEventList(ResourcesEntry entry,long startTime,long endTime,long resolution,boolean includeNull,IProgressMonitor monitor){
  IStateSystemQuerier ssq=entry.getTrace().getStateSystem();
  startTime=Math.max(startTime,ssq.getStartTime());
  endTime=Math.min(endTime,ssq.getCurrentEndTime() + 1);
  if (endTime <= startTime) {
    return null;
  }
  List<ITimeEvent> eventList=null;
  int quark=entry.getQuark();
  try {
    if (entry.getType().equals(Type.CPU)) {
      int statusQuark=ssq.getQuarkRelative(quark,Attributes.STATUS);
      List<ITmfStateInterval> statusIntervals=ssq.queryHistoryRange(statusQuark,startTime,endTime - 1,resolution);
      eventList=new ArrayList<ITimeEvent>(statusIntervals.size());
      long lastEndTime=-1;
      for (      ITmfStateInterval statusInterval : statusIntervals) {
        if (monitor.isCanceled()) {
          return null;
        }
        int status=statusInterval.getStateValue().unboxInt();
        long time=statusInterval.getStartTime();
        long duration=statusInterval.getEndTime() - time + 1;
        if (!statusInterval.getStateValue().isNull()) {
          if (lastEndTime != time && lastEndTime != -1) {
            eventList.add(new TimeEvent(entry,lastEndTime,time - lastEndTime));
          }
          eventList.add(new ResourcesEvent(entry,time,duration,status));
          lastEndTime=time + duration;
        }
 else {
          if (includeNull) {
            eventList.add(new ResourcesEvent(entry,time,duration));
          }
        }
      }
    }
 else     if (entry.getType().equals(Type.IRQ)) {
      List<ITmfStateInterval> irqIntervals=ssq.queryHistoryRange(quark,startTime,endTime - 1,resolution);
      eventList=new ArrayList<ITimeEvent>(irqIntervals.size());
      long lastEndTime=-1;
      boolean lastIsNull=true;
      for (      ITmfStateInterval irqInterval : irqIntervals) {
        if (monitor.isCanceled()) {
          return null;
        }
        long time=irqInterval.getStartTime();
        long duration=irqInterval.getEndTime() - time + 1;
        if (!irqInterval.getStateValue().isNull()) {
          int cpu=irqInterval.getStateValue().unboxInt();
          eventList.add(new ResourcesEvent(entry,time,duration,cpu));
          lastIsNull=false;
        }
 else {
          if (lastEndTime != time && lastEndTime != -1 && lastIsNull) {
            eventList.add(new ResourcesEvent(entry,lastEndTime,time - lastEndTime,-1));
          }
          if (includeNull) {
            eventList.add(new ResourcesEvent(entry,time,duration));
          }
          lastIsNull=true;
        }
        lastEndTime=time + duration;
      }
    }
 else     if (entry.getType().equals(Type.SOFT_IRQ)) {
      List<ITmfStateInterval> softIrqIntervals=ssq.queryHistoryRange(quark,startTime,endTime - 1,resolution);
      eventList=new ArrayList<ITimeEvent>(softIrqIntervals.size());
      long lastEndTime=-1;
      boolean lastIsNull=true;
      for (      ITmfStateInterval softIrqInterval : softIrqIntervals) {
        if (monitor.isCanceled()) {
          return null;
        }
        long time=softIrqInterval.getStartTime();
        long duration=softIrqInterval.getEndTime() - time + 1;
        if (!softIrqInterval.getStateValue().isNull()) {
          int cpu=softIrqInterval.getStateValue().unboxInt();
          eventList.add(new ResourcesEvent(entry,time,duration,cpu));
        }
 else {
          if (lastEndTime != time && lastEndTime != -1 && lastIsNull) {
            eventList.add(new ResourcesEvent(entry,lastEndTime,time - lastEndTime,-1));
          }
          if (includeNull) {
            eventList.add(new ResourcesEvent(entry,time,duration));
          }
          lastIsNull=true;
        }
        lastEndTime=time + duration;
      }
    }
  }
 catch (  AttributeNotFoundException e) {
    e.printStackTrace();
  }
catch (  TimeRangeException e) {
    e.printStackTrace();
  }
catch (  StateValueTypeException e) {
    e.printStackTrace();
  }
  return eventList;
}","private static List<ITimeEvent> getEventList(ResourcesEntry entry,long startTime,long endTime,long resolution,boolean includeNull,IProgressMonitor monitor){
  IStateSystemQuerier ssq=entry.getTrace().getStateSystem();
  startTime=Math.max(startTime,ssq.getStartTime());
  endTime=Math.min(endTime,ssq.getCurrentEndTime() + 1);
  if (endTime <= startTime) {
    return null;
  }
  List<ITimeEvent> eventList=null;
  int quark=entry.getQuark();
  try {
    if (entry.getType().equals(Type.CPU)) {
      int statusQuark=ssq.getQuarkRelative(quark,Attributes.STATUS);
      List<ITmfStateInterval> statusIntervals=ssq.queryHistoryRange(statusQuark,startTime,endTime - 1,resolution,monitor);
      eventList=new ArrayList<ITimeEvent>(statusIntervals.size());
      long lastEndTime=-1;
      for (      ITmfStateInterval statusInterval : statusIntervals) {
        if (monitor.isCanceled()) {
          return null;
        }
        int status=statusInterval.getStateValue().unboxInt();
        long time=statusInterval.getStartTime();
        long duration=statusInterval.getEndTime() - time + 1;
        if (!statusInterval.getStateValue().isNull()) {
          if (lastEndTime != time && lastEndTime != -1) {
            eventList.add(new TimeEvent(entry,lastEndTime,time - lastEndTime));
          }
          eventList.add(new ResourcesEvent(entry,time,duration,status));
          lastEndTime=time + duration;
        }
 else {
          if (includeNull) {
            eventList.add(new ResourcesEvent(entry,time,duration));
          }
        }
      }
    }
 else     if (entry.getType().equals(Type.IRQ)) {
      List<ITmfStateInterval> irqIntervals=ssq.queryHistoryRange(quark,startTime,endTime - 1,resolution,monitor);
      eventList=new ArrayList<ITimeEvent>(irqIntervals.size());
      long lastEndTime=-1;
      boolean lastIsNull=true;
      for (      ITmfStateInterval irqInterval : irqIntervals) {
        if (monitor.isCanceled()) {
          return null;
        }
        long time=irqInterval.getStartTime();
        long duration=irqInterval.getEndTime() - time + 1;
        if (!irqInterval.getStateValue().isNull()) {
          int cpu=irqInterval.getStateValue().unboxInt();
          eventList.add(new ResourcesEvent(entry,time,duration,cpu));
          lastIsNull=false;
        }
 else {
          if (lastEndTime != time && lastEndTime != -1 && lastIsNull) {
            eventList.add(new ResourcesEvent(entry,lastEndTime,time - lastEndTime,-1));
          }
          if (includeNull) {
            eventList.add(new ResourcesEvent(entry,time,duration));
          }
          lastIsNull=true;
        }
        lastEndTime=time + duration;
      }
    }
 else     if (entry.getType().equals(Type.SOFT_IRQ)) {
      List<ITmfStateInterval> softIrqIntervals=ssq.queryHistoryRange(quark,startTime,endTime - 1,resolution,monitor);
      eventList=new ArrayList<ITimeEvent>(softIrqIntervals.size());
      long lastEndTime=-1;
      boolean lastIsNull=true;
      for (      ITmfStateInterval softIrqInterval : softIrqIntervals) {
        if (monitor.isCanceled()) {
          return null;
        }
        long time=softIrqInterval.getStartTime();
        long duration=softIrqInterval.getEndTime() - time + 1;
        if (!softIrqInterval.getStateValue().isNull()) {
          int cpu=softIrqInterval.getStateValue().unboxInt();
          eventList.add(new ResourcesEvent(entry,time,duration,cpu));
        }
 else {
          if (lastEndTime != time && lastEndTime != -1 && lastIsNull) {
            eventList.add(new ResourcesEvent(entry,lastEndTime,time - lastEndTime,-1));
          }
          if (includeNull) {
            eventList.add(new ResourcesEvent(entry,time,duration));
          }
          lastIsNull=true;
        }
        lastEndTime=time + duration;
      }
    }
  }
 catch (  AttributeNotFoundException e) {
    e.printStackTrace();
  }
catch (  TimeRangeException e) {
    e.printStackTrace();
  }
catch (  StateValueTypeException e) {
    e.printStackTrace();
  }
  return eventList;
}",0.9970201142289544
92258,"private void redraw(){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphViewer.getControl().isDisposed()) {
        return;
      }
      fTimeGraphViewer.getControl().redraw();
      fTimeGraphViewer.getControl().update();
    }
  }
);
}","private void redraw(){
synchronized (fSyncObj) {
    if (fRedrawState == State.IDLE) {
      fRedrawState=State.BUSY;
    }
 else {
      fRedrawState=State.PENDING;
      return;
    }
  }
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphViewer.getControl().isDisposed()) {
        return;
      }
      fTimeGraphViewer.getControl().redraw();
      fTimeGraphViewer.getControl().update();
synchronized (fSyncObj) {
        if (fRedrawState == State.PENDING) {
          fRedrawState=State.IDLE;
          redraw();
        }
 else {
          fRedrawState=State.IDLE;
        }
      }
    }
  }
);
}",0.5856236786469344
92259,"@Override public List<ITmfStateInterval> queryHistoryRange(int attributeQuark,long t1,long t2,long resolution) throws TimeRangeException, AttributeNotFoundException {
  List<ITmfStateInterval> intervals;
  ITmfStateInterval currentInterval;
  long ts, tEnd;
  if (t2 < t1 || resolution <= 0) {
    throw new TimeRangeException();
  }
  if (t2 > this.getCurrentEndTime()) {
    tEnd=this.getCurrentEndTime();
  }
 else {
    tEnd=t2;
  }
  intervals=new ArrayList<ITmfStateInterval>();
  currentInterval=querySingleState(t1,attributeQuark);
  intervals.add(currentInterval);
  for (ts=t1; (currentInterval.getEndTime() != -1) && (ts < tEnd); ts+=resolution) {
    if (ts <= currentInterval.getEndTime()) {
      continue;
    }
    currentInterval=querySingleState(ts,attributeQuark);
    intervals.add(currentInterval);
  }
  if (currentInterval.getEndTime() < tEnd) {
    currentInterval=querySingleState(tEnd,attributeQuark);
    intervals.add(currentInterval);
  }
  return intervals;
}","@Override public List<ITmfStateInterval> queryHistoryRange(int attributeQuark,long t1,long t2,long resolution,IProgressMonitor monitor) throws TimeRangeException, AttributeNotFoundException {
  List<ITmfStateInterval> intervals;
  ITmfStateInterval currentInterval;
  long ts, tEnd;
  if (t2 < t1 || resolution <= 0) {
    throw new TimeRangeException();
  }
  if (t2 > this.getCurrentEndTime()) {
    tEnd=this.getCurrentEndTime();
  }
 else {
    tEnd=t2;
  }
  intervals=new ArrayList<ITmfStateInterval>();
  currentInterval=querySingleState(t1,attributeQuark);
  intervals.add(currentInterval);
  for (ts=t1; (currentInterval.getEndTime() != -1) && (ts < tEnd); ts+=resolution) {
    if (monitor.isCanceled()) {
      return intervals;
    }
    if (ts <= currentInterval.getEndTime()) {
      continue;
    }
    currentInterval=querySingleState(ts,attributeQuark);
    intervals.add(currentInterval);
  }
  if (currentInterval.getEndTime() < tEnd) {
    currentInterval=querySingleState(tEnd,attributeQuark);
    intervals.add(currentInterval);
  }
  return intervals;
}",0.9578692493946732
92260,"/** 
 * Return the state history of a given attribute, but with at most one update per ""resolution"". This can be useful for populating views (where it's useless to have more than one query per pixel, for example).
 * @param attributeQuark Which attribute this query is interested in
 * @param t1 Start time of the range query
 * @param t2 Target end time of the query. If t2 is greater than the end of the trace, we will return what we have up to the end of the history.
 * @param resolution The ""step"" of this query
 * @return The List of states that happened between t1 and t2
 * @throws TimeRangeException If t1 is invalid, if t2 <= t1, or if the resolution isn't greater than zero.
 * @throws AttributeNotFoundException If the attribute doesn't exist
 */
public List<ITmfStateInterval> queryHistoryRange(int attributeQuark,long t1,long t2,long resolution) throws TimeRangeException, AttributeNotFoundException ;","/** 
 * Return the state history of a given attribute, but with at most one update per ""resolution"". This can be useful for populating views (where it's useless to have more than one query per pixel, for example). A progress monitor can be used to cancel the query before completion.
 * @param attributeQuark Which attribute this query is interested in
 * @param t1 Start time of the range query
 * @param t2 Target end time of the query. If t2 is greater than the end of the trace, we will return what we have up to the end of the history.
 * @param resolution The ""step"" of this query
 * @param monitor A progress monitor. If the monitor is canceled during a query, we will return what has been found up to that point.
 * @return The List of states that happened between t1 and t2
 * @throws TimeRangeException If t1 is invalid, if t2 <= t1, or if the resolution isn't greater than zero.
 * @throws AttributeNotFoundException If the attribute doesn't exist
 * @since 1.1
 */
public List<ITmfStateInterval> queryHistoryRange(int attributeQuark,long t1,long t2,long resolution,IProgressMonitor monitor) throws TimeRangeException, AttributeNotFoundException ;",0.8827785817655571
92261,"@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  assert(fRoot != null);
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null) {
    return false;
  }
  ISystemRegistry registry=RSECorePlugin.getTheSystemRegistry();
  IRSESystemType sysType=RSECorePlugin.getTheCoreRegistry().getSystemTypeById(TRACE_CONTROL_SYSTEM_TYPE);
  IHost[] hosts=registry.getHostsBySystemType(sysType);
  final INewConnectionDialog dialog=TraceControlDialogFactory.getInstance().getNewConnectionDialog();
  dialog.setTraceControlParent(fRoot);
  dialog.setHosts(hosts);
  if (dialog.open() != Window.OK) {
    return null;
  }
  String hostName=dialog.getConnectionName();
  String hostAddress=dialog.getHostName();
  IHost host=null;
  for (int i=0; i < hosts.length; i++) {
    if (hosts[i].getAliasName().equals(hostName)) {
      host=hosts[i];
      break;
    }
  }
  if (host == null) {
    try {
      host=registry.createHost(sysType,hostName,hostAddress,""String_Node_Str"");
    }
 catch (    Exception e) {
      MessageDialog.openError(window.getShell(),Messages.TraceControl_EclipseCommandFailure,Messages.TraceControl_NewNodeCreationFailure + ""String_Node_Str"" + hostName+ ""String_Node_Str""+ hostAddress+ ""String_Node_Str""+ ""String_Node_Str""+ e.toString());
      return null;
    }
  }
  if (host != null) {
    fLock.lock();
    try {
      TargetNodeComponent node=null;
      if (!fRoot.containsChild(hostName)) {
        node=new TargetNodeComponent(hostName,fRoot,host);
        fRoot.addChild(node);
      }
 else {
        node=(TargetNodeComponent)fRoot.getChild(hostName);
      }
      node.connect();
    }
  finally {
      fLock.unlock();
    }
  }
  return null;
}","@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  assert(fRoot != null);
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null) {
    return false;
  }
  ISystemRegistry registry=RSECorePlugin.getTheSystemRegistry();
  IRSESystemType sysType=RSECorePlugin.getTheCoreRegistry().getSystemTypeById(TRACE_CONTROL_SYSTEM_TYPE);
  IHost[] hosts=getSuitableHosts();
  final INewConnectionDialog dialog=TraceControlDialogFactory.getInstance().getNewConnectionDialog();
  dialog.setTraceControlParent(fRoot);
  dialog.setHosts(hosts);
  if (dialog.open() != Window.OK) {
    return null;
  }
  String hostName=dialog.getConnectionName();
  String hostAddress=dialog.getHostName();
  IHost host=null;
  for (int i=0; i < hosts.length; i++) {
    if (hosts[i].getAliasName().equals(hostName)) {
      host=hosts[i];
      break;
    }
  }
  if (host == null) {
    try {
      host=registry.createHost(sysType,hostName,hostAddress,""String_Node_Str"");
    }
 catch (    Exception e) {
      MessageDialog.openError(window.getShell(),Messages.TraceControl_EclipseCommandFailure,Messages.TraceControl_NewNodeCreationFailure + ""String_Node_Str"" + hostName+ ""String_Node_Str""+ hostAddress+ ""String_Node_Str""+ ""String_Node_Str""+ e.toString());
      return null;
    }
  }
  if (host != null) {
    fLock.lock();
    try {
      TargetNodeComponent node=null;
      if (!fRoot.containsChild(hostName)) {
        node=new TargetNodeComponent(hostName,fRoot,host);
        fRoot.addChild(node);
      }
 else {
        node=(TargetNodeComponent)fRoot.getChild(hostName);
      }
      node.connect();
    }
  finally {
      fLock.unlock();
    }
  }
  return null;
}",0.9873490511788384
92262,"/** 
 * Method readNextEvent.
 * @param context ITmfContext
 * @return CtfTmfEvent
 * @see org.eclipse.linuxtools.tmf.core.trace.ITmfTrace#getNext(ITmfContext)
 */
@Override public synchronized CtfTmfEvent getNext(final ITmfContext context){
  CtfTmfEvent event=null;
  if (context instanceof CtfTmfLightweightContext) {
    if (CtfLocation.INVALID_LOCATION.equals(context.getLocation())) {
      return null;
    }
    CtfTmfLightweightContext ctfContext=(CtfTmfLightweightContext)context;
    if (ctfContext.getLocation().equals(CtfLocation.INVALID_LOCATION)) {
      return null;
    }
    event=ctfContext.getCurrentEvent();
    if (event != null) {
      updateAttributes(context,event.getTimestamp());
      ctfContext.advance();
      ctfContext.increaseRank();
    }
  }
  return event;
}","/** 
 * Method readNextEvent.
 * @param context ITmfContext
 * @return CtfTmfEvent
 * @see org.eclipse.linuxtools.tmf.core.trace.ITmfTrace#getNext(ITmfContext)
 */
@Override public synchronized CtfTmfEvent getNext(final ITmfContext context){
  CtfTmfEvent event=null;
  if (context instanceof CtfTmfLightweightContext) {
    if (CtfLocation.INVALID_LOCATION.equals(context.getLocation().getLocation())) {
      return null;
    }
    CtfTmfLightweightContext ctfContext=(CtfTmfLightweightContext)context;
    event=ctfContext.getCurrentEvent();
    if (event != null) {
      updateAttributes(context,event.getTimestamp());
      ctfContext.advance();
      ctfContext.increaseRank();
    }
  }
  return event;
}",0.9257294429708224
92263,"public LttngLocation(final LttngLocation oldLocation){
  this.isLastOperationParse=oldLocation.isLastOperationParse;
  this.isLastOperationReadNext=oldLocation.isLastOperationReadNext;
  this.isLastOperationSeek=oldLocation.isLastOperationSeek;
  this.operationTime=oldLocation.operationTime;
}","public LttngLocation(final LttngLocation oldLocation){
  this.isLastOperationParse=oldLocation.isLastOperationParse;
  this.isLastOperationReadNext=oldLocation.isLastOperationReadNext;
  this.isLastOperationSeek=oldLocation.isLastOperationSeek;
  this.operationTime=oldLocation.operationTime.clone();
}",0.9865771812080536
92264,"@Override public synchronized LttngEvent getNext(final ITmfContext context){
  if (PRINT_DEBUG)   System.out.println(""String_Node_Str"" + context.getLocation());
  LttngEvent returnedEvent=null;
  LttngLocation curLocation=null;
  curLocation=(LttngLocation)context.getLocation();
  if (curLocation == null)   curLocation=getCurrentLocation(context);
  if ((!(curLocation.isLastOperationParse())) || (previousLocation.getOperationTimeValue() != curLocation.getOperationTimeValue())) {
    if (previousLocation.getOperationTimeValue() != curLocation.getOperationTimeValue()) {
      if (PRINT_DEBUG)       System.out.println(""String_Node_Str"" + previousLocation.getOperationTimeValue() + ""String_Node_Str""+ curLocation.getOperationTimeValue()+ ""String_Node_Str"");
      seekEvent(curLocation.getOperationTime());
    }
    returnedEvent=readNextEvent(curLocation);
  }
 else {
    returnedEvent=currentLttngEvent;
    previousLocation.setLastOperationReadNext();
    curLocation.setLastOperationReadNext();
  }
  if (returnedEvent != null)   setPreviousAndCurrentTimes(context,returnedEvent,curLocation);
  return returnedEvent;
}","@Override public synchronized LttngEvent getNext(final ITmfContext context){
  if (PRINT_DEBUG)   System.out.println(""String_Node_Str"" + context.getLocation());
  LttngEvent returnedEvent=null;
  LttngLocation curLocation=null;
  curLocation=(LttngLocation)context.getLocation();
  if (curLocation == null)   curLocation=getCurrentLocation(context);
  if ((!(curLocation.isLastOperationParse())) || (previousLocation.getOperationTimeValue() != curLocation.getOperationTimeValue())) {
    if (previousLocation.getOperationTimeValue() != curLocation.getOperationTimeValue()) {
      if (PRINT_DEBUG)       System.out.println(""String_Node_Str"" + previousLocation.getOperationTimeValue() + ""String_Node_Str""+ curLocation.getOperationTimeValue()+ ""String_Node_Str"");
      seekEvent(curLocation.getOperationTime());
      if (curLocation.isLastOperationReadNext()) {
        readNextEvent(curLocation);
      }
    }
    returnedEvent=readNextEvent(curLocation);
  }
 else {
    returnedEvent=currentLttngEvent;
    previousLocation.setLastOperationReadNext();
    curLocation.setLastOperationReadNext();
  }
  if (returnedEvent != null)   setPreviousAndCurrentTimes(context,returnedEvent,curLocation);
  return returnedEvent;
}",0.9595916631220756
92265,"private void refresh(final long windowRange){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphCombo.isDisposed()) {
        return;
      }
      ITimeGraphEntry[] entries=fEntryList.toArray(new ITimeGraphEntry[0]);
      Arrays.sort(entries,fControlFlowEntryComparator);
      fTimeGraphCombo.setInput(entries);
      fTimeGraphCombo.getTimeGraphViewer().setTimeBounds(fStartTime,fEndTime);
      long endTime=fStartTime + windowRange;
      if (fEndTime < endTime) {
        endTime=fEndTime;
      }
      fTimeGraphCombo.getTimeGraphViewer().setStartFinishTime(fStartTime,endTime);
      for (      TreeColumn column : fTimeGraphCombo.getTreeViewer().getTree().getColumns()) {
        column.pack();
      }
      startZoomThread(fStartTime,endTime);
    }
  }
);
}","private void refresh(final long windowRange){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphCombo.isDisposed()) {
        return;
      }
      ITimeGraphEntry[] entries=null;
synchronized (fEntryListSyncObj) {
        entries=fEntryList.toArray(new ITimeGraphEntry[0]);
      }
      Arrays.sort(entries,fControlFlowEntryComparator);
      fTimeGraphCombo.setInput(entries);
      fTimeGraphCombo.getTimeGraphViewer().setTimeBounds(fStartTime,fEndTime);
      long endTime=fStartTime + windowRange;
      if (fEndTime < endTime) {
        endTime=fEndTime;
      }
      fTimeGraphCombo.getTimeGraphViewer().setStartFinishTime(fStartTime,endTime);
      for (      TreeColumn column : fTimeGraphCombo.getTreeViewer().getTree().getColumns()) {
        column.pack();
      }
      startZoomThread(fStartTime,endTime);
    }
  }
);
}",0.962010520163647
92266,"@SuppressWarnings(""String_Node_Str"") private void selectExperiment(TmfExperiment<?> experiment){
  fStartTime=Long.MAX_VALUE;
  fEndTime=Long.MIN_VALUE;
  fSelectedExperiment=(TmfExperiment<ITmfEvent>)experiment;
  ArrayList<ControlFlowEntry> rootList=new ArrayList<ControlFlowEntry>();
  for (  ITmfTrace<?> trace : experiment.getTraces()) {
    if (trace instanceof CtfKernelTrace) {
      ArrayList<ControlFlowEntry> entryList=new ArrayList<ControlFlowEntry>();
      CtfKernelTrace ctfKernelTrace=(CtfKernelTrace)trace;
      IStateSystemQuerier ssq=ctfKernelTrace.getStateSystem();
      long start=ssq.getStartTime();
      long end=ssq.getCurrentEndTime() + 1;
      fStartTime=Math.min(fStartTime,start);
      fEndTime=Math.max(fEndTime,end);
      List<Integer> threadQuarks=ssq.getQuarks(Attributes.THREADS,""String_Node_Str"");
      for (      int threadQuark : threadQuarks) {
        String threadName=ssq.getAttributeName(threadQuark);
        int threadId=-1;
        try {
          threadId=Integer.parseInt(threadName);
        }
 catch (        NumberFormatException e1) {
          continue;
        }
        if (threadId == 0) {
          continue;
        }
        int execNameQuark=-1;
        try {
          try {
            execNameQuark=ssq.getQuarkRelative(threadQuark,Attributes.EXEC_NAME);
          }
 catch (          AttributeNotFoundException e) {
            continue;
          }
          int ppidQuark=ssq.getQuarkRelative(threadQuark,Attributes.PPID);
          List<ITmfStateInterval> execNameIntervals=ssq.queryHistoryRange(execNameQuark,start,end - 1);
          long birthTime=-1;
          for (          ITmfStateInterval execNameInterval : execNameIntervals) {
            if (!execNameInterval.getStateValue().isNull() && execNameInterval.getStateValue().getType() == 1) {
              String execName=execNameInterval.getStateValue().unboxStr();
              long startTime=execNameInterval.getStartTime();
              long endTime=execNameInterval.getEndTime() + 1;
              if (birthTime == -1) {
                birthTime=startTime;
              }
              int ppid=-1;
              if (ppidQuark != -1) {
                ITmfStateInterval ppidInterval=ssq.querySingleState(startTime,ppidQuark);
                ppid=ppidInterval.getStateValue().unboxInt();
              }
              ControlFlowEntry entry=new ControlFlowEntry(threadQuark,ctfKernelTrace,execName,threadId,ppid,birthTime,startTime,endTime);
              entryList.add(entry);
              entry.addEvent(new TimeEvent(entry,startTime,endTime - startTime));
            }
 else {
              birthTime=-1;
            }
          }
        }
 catch (        AttributeNotFoundException e) {
          e.printStackTrace();
        }
catch (        TimeRangeException e) {
          e.printStackTrace();
        }
catch (        StateValueTypeException e) {
          e.printStackTrace();
        }
      }
      buildTree(entryList,rootList);
    }
    Collections.sort(rootList,fControlFlowEntryComparator);
    fEntryList=rootList;
    refresh(INITIAL_WINDOW_OFFSET);
  }
  for (  ControlFlowEntry entry : rootList) {
    buildStatusEvents(entry);
  }
}","@SuppressWarnings(""String_Node_Str"") private void selectExperiment(TmfExperiment<?> experiment){
  fStartTime=Long.MAX_VALUE;
  fEndTime=Long.MIN_VALUE;
  fSelectedExperiment=(TmfExperiment<ITmfEvent>)experiment;
  ArrayList<ControlFlowEntry> rootList=new ArrayList<ControlFlowEntry>();
  for (  ITmfTrace<?> trace : experiment.getTraces()) {
    if (trace instanceof CtfKernelTrace) {
      ArrayList<ControlFlowEntry> entryList=new ArrayList<ControlFlowEntry>();
      CtfKernelTrace ctfKernelTrace=(CtfKernelTrace)trace;
      IStateSystemQuerier ssq=ctfKernelTrace.getStateSystem();
      long start=ssq.getStartTime();
      long end=ssq.getCurrentEndTime() + 1;
      fStartTime=Math.min(fStartTime,start);
      fEndTime=Math.max(fEndTime,end);
      List<Integer> threadQuarks=ssq.getQuarks(Attributes.THREADS,""String_Node_Str"");
      for (      int threadQuark : threadQuarks) {
        String threadName=ssq.getAttributeName(threadQuark);
        int threadId=-1;
        try {
          threadId=Integer.parseInt(threadName);
        }
 catch (        NumberFormatException e1) {
          continue;
        }
        if (threadId == 0) {
          continue;
        }
        int execNameQuark=-1;
        try {
          try {
            execNameQuark=ssq.getQuarkRelative(threadQuark,Attributes.EXEC_NAME);
          }
 catch (          AttributeNotFoundException e) {
            continue;
          }
          int ppidQuark=ssq.getQuarkRelative(threadQuark,Attributes.PPID);
          List<ITmfStateInterval> execNameIntervals=ssq.queryHistoryRange(execNameQuark,start,end - 1);
          long birthTime=-1;
          for (          ITmfStateInterval execNameInterval : execNameIntervals) {
            if (!execNameInterval.getStateValue().isNull() && execNameInterval.getStateValue().getType() == 1) {
              String execName=execNameInterval.getStateValue().unboxStr();
              long startTime=execNameInterval.getStartTime();
              long endTime=execNameInterval.getEndTime() + 1;
              if (birthTime == -1) {
                birthTime=startTime;
              }
              int ppid=-1;
              if (ppidQuark != -1) {
                ITmfStateInterval ppidInterval=ssq.querySingleState(startTime,ppidQuark);
                ppid=ppidInterval.getStateValue().unboxInt();
              }
              ControlFlowEntry entry=new ControlFlowEntry(threadQuark,ctfKernelTrace,execName,threadId,ppid,birthTime,startTime,endTime);
              entryList.add(entry);
              entry.addEvent(new TimeEvent(entry,startTime,endTime - startTime));
            }
 else {
              birthTime=-1;
            }
          }
        }
 catch (        AttributeNotFoundException e) {
          e.printStackTrace();
        }
catch (        TimeRangeException e) {
          e.printStackTrace();
        }
catch (        StateValueTypeException e) {
          e.printStackTrace();
        }
      }
      buildTree(entryList,rootList);
    }
    Collections.sort(rootList,fControlFlowEntryComparator);
synchronized (fEntryListSyncObj) {
      fEntryList=(ArrayList<ControlFlowEntry>)rootList.clone();
    }
    refresh(INITIAL_WINDOW_OFFSET);
  }
  for (  ControlFlowEntry entry : rootList) {
    buildStatusEvents(entry);
  }
}",0.9845535990114304
92267,"private void refresh(final long windowRange){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphViewer.getControl().isDisposed()) {
        return;
      }
      ITimeGraphEntry[] entries=fEntryList.toArray(new ITimeGraphEntry[0]);
      Arrays.sort(entries,new TraceEntryComparator());
      fTimeGraphViewer.setInput(entries);
      fTimeGraphViewer.setTimeBounds(fStartTime,fEndTime);
      long endTime=fStartTime + windowRange;
      if (fEndTime < endTime) {
        endTime=fEndTime;
      }
      fTimeGraphViewer.setStartFinishTime(fStartTime,endTime);
      startZoomThread(fStartTime,endTime);
    }
  }
);
}","private void refresh(final long windowRange){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphViewer.getControl().isDisposed()) {
        return;
      }
      ITimeGraphEntry[] entries=null;
synchronized (fEntryListSyncObj) {
        entries=fEntryList.toArray(new ITimeGraphEntry[0]);
      }
      Arrays.sort(entries,new TraceEntryComparator());
      fTimeGraphViewer.setInput(entries);
      fTimeGraphViewer.setTimeBounds(fStartTime,fEndTime);
      long endTime=fStartTime + windowRange;
      if (fEndTime < endTime) {
        endTime=fEndTime;
      }
      fTimeGraphViewer.setStartFinishTime(fStartTime,endTime);
      startZoomThread(fStartTime,endTime);
    }
  }
);
}",0.9538024164889836
92268,"@SuppressWarnings(""String_Node_Str"") private void selectExperiment(TmfExperiment<?> experiment){
  fStartTime=Long.MAX_VALUE;
  fEndTime=Long.MIN_VALUE;
  fSelectedExperiment=(TmfExperiment<ITmfEvent>)experiment;
  ArrayList<TraceEntry> entryList=new ArrayList<TraceEntry>();
  for (  ITmfTrace<?> trace : experiment.getTraces()) {
    if (trace instanceof CtfKernelTrace) {
      CtfKernelTrace ctfKernelTrace=(CtfKernelTrace)trace;
      IStateSystemQuerier ssq=ctfKernelTrace.getStateSystem();
      long startTime=ssq.getStartTime();
      long endTime=ssq.getCurrentEndTime() + 1;
      TraceEntry groupEntry=new TraceEntry(ctfKernelTrace,trace.getName(),startTime,endTime);
      entryList.add(groupEntry);
      fStartTime=Math.min(fStartTime,startTime);
      fEndTime=Math.max(fEndTime,endTime);
      List<Integer> cpuQuarks=ssq.getQuarks(Attributes.CPUS,""String_Node_Str"");
      ResourcesEntry[] cpuEntries=new ResourcesEntry[cpuQuarks.size()];
      for (int i=0; i < cpuQuarks.size(); i++) {
        int cpuQuark=cpuQuarks.get(i);
        int cpu=Integer.parseInt(ssq.getAttributeName(cpuQuark));
        ResourcesEntry entry=new ResourcesEntry(cpuQuark,ctfKernelTrace,Type.CPU,cpu);
        groupEntry.addChild(entry);
        cpuEntries[i]=entry;
      }
      List<Integer> irqQuarks=ssq.getQuarks(Attributes.RESOURCES,Attributes.IRQS,""String_Node_Str"");
      ResourcesEntry[] irqEntries=new ResourcesEntry[irqQuarks.size()];
      for (int i=0; i < irqQuarks.size(); i++) {
        int irqQuark=irqQuarks.get(i);
        int irq=Integer.parseInt(ssq.getAttributeName(irqQuark));
        ResourcesEntry entry=new ResourcesEntry(irqQuark,ctfKernelTrace,Type.IRQ,irq);
        groupEntry.addChild(entry);
        irqEntries[i]=entry;
      }
      List<Integer> softIrqQuarks=ssq.getQuarks(Attributes.RESOURCES,Attributes.SOFT_IRQS,""String_Node_Str"");
      ResourcesEntry[] softIrqEntries=new ResourcesEntry[softIrqQuarks.size()];
      for (int i=0; i < softIrqQuarks.size(); i++) {
        int softIrqQuark=softIrqQuarks.get(i);
        int softIrq=Integer.parseInt(ssq.getAttributeName(softIrqQuark));
        ResourcesEntry entry=new ResourcesEntry(softIrqQuark,ctfKernelTrace,Type.SOFT_IRQ,softIrq);
        groupEntry.addChild(entry);
        softIrqEntries[i]=entry;
      }
    }
  }
  fEntryList=entryList;
  refresh(INITIAL_WINDOW_OFFSET);
  for (  TraceEntry traceEntry : fEntryList) {
    CtfKernelTrace ctfKernelTrace=((TraceEntry)traceEntry).getTrace();
    IStateSystemQuerier ssq=ctfKernelTrace.getStateSystem();
    long startTime=ssq.getStartTime();
    long endTime=ssq.getCurrentEndTime() + 1;
    long resolution=(endTime - startTime) / fDisplayWidth;
    for (    ResourcesEntry entry : traceEntry.getChildren()) {
      List<ITimeEvent> eventList=getEventList(entry,startTime,endTime,resolution,false,new NullProgressMonitor());
      entry.setEventList(eventList);
      redraw();
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void selectExperiment(TmfExperiment<?> experiment){
  fStartTime=Long.MAX_VALUE;
  fEndTime=Long.MIN_VALUE;
  fSelectedExperiment=(TmfExperiment<ITmfEvent>)experiment;
  ArrayList<TraceEntry> entryList=new ArrayList<TraceEntry>();
  for (  ITmfTrace<?> trace : experiment.getTraces()) {
    if (trace instanceof CtfKernelTrace) {
      CtfKernelTrace ctfKernelTrace=(CtfKernelTrace)trace;
      IStateSystemQuerier ssq=ctfKernelTrace.getStateSystem();
      long startTime=ssq.getStartTime();
      long endTime=ssq.getCurrentEndTime() + 1;
      TraceEntry groupEntry=new TraceEntry(ctfKernelTrace,trace.getName(),startTime,endTime);
      entryList.add(groupEntry);
      fStartTime=Math.min(fStartTime,startTime);
      fEndTime=Math.max(fEndTime,endTime);
      List<Integer> cpuQuarks=ssq.getQuarks(Attributes.CPUS,""String_Node_Str"");
      ResourcesEntry[] cpuEntries=new ResourcesEntry[cpuQuarks.size()];
      for (int i=0; i < cpuQuarks.size(); i++) {
        int cpuQuark=cpuQuarks.get(i);
        int cpu=Integer.parseInt(ssq.getAttributeName(cpuQuark));
        ResourcesEntry entry=new ResourcesEntry(cpuQuark,ctfKernelTrace,Type.CPU,cpu);
        groupEntry.addChild(entry);
        cpuEntries[i]=entry;
      }
      List<Integer> irqQuarks=ssq.getQuarks(Attributes.RESOURCES,Attributes.IRQS,""String_Node_Str"");
      ResourcesEntry[] irqEntries=new ResourcesEntry[irqQuarks.size()];
      for (int i=0; i < irqQuarks.size(); i++) {
        int irqQuark=irqQuarks.get(i);
        int irq=Integer.parseInt(ssq.getAttributeName(irqQuark));
        ResourcesEntry entry=new ResourcesEntry(irqQuark,ctfKernelTrace,Type.IRQ,irq);
        groupEntry.addChild(entry);
        irqEntries[i]=entry;
      }
      List<Integer> softIrqQuarks=ssq.getQuarks(Attributes.RESOURCES,Attributes.SOFT_IRQS,""String_Node_Str"");
      ResourcesEntry[] softIrqEntries=new ResourcesEntry[softIrqQuarks.size()];
      for (int i=0; i < softIrqQuarks.size(); i++) {
        int softIrqQuark=softIrqQuarks.get(i);
        int softIrq=Integer.parseInt(ssq.getAttributeName(softIrqQuark));
        ResourcesEntry entry=new ResourcesEntry(softIrqQuark,ctfKernelTrace,Type.SOFT_IRQ,softIrq);
        groupEntry.addChild(entry);
        softIrqEntries[i]=entry;
      }
    }
  }
synchronized (fEntryListSyncObj) {
    fEntryList=(ArrayList<TraceEntry>)entryList.clone();
  }
  refresh(INITIAL_WINDOW_OFFSET);
  for (  TraceEntry traceEntry : entryList) {
    CtfKernelTrace ctfKernelTrace=((TraceEntry)traceEntry).getTrace();
    IStateSystemQuerier ssq=ctfKernelTrace.getStateSystem();
    long startTime=ssq.getStartTime();
    long endTime=ssq.getCurrentEndTime() + 1;
    long resolution=(endTime - startTime) / fDisplayWidth;
    for (    ResourcesEntry entry : traceEntry.getChildren()) {
      List<ITimeEvent> eventList=getEventList(entry,startTime,endTime,resolution,false,new NullProgressMonitor());
      entry.setEventList(eventList);
      redraw();
    }
  }
}",0.985683004884622
92269,"@Override @SuppressWarnings(""String_Node_Str"") public synchronized T getNext(ITmfContext context){
  if (!(context instanceof TmfExperimentContext)) {
    return null;
  }
  if (fTraces == null) {
    return null;
  }
  TmfExperimentContext expContext=(TmfExperimentContext)context;
  final int lastTrace=expContext.getLastTrace();
  if (lastTrace != TmfExperimentContext.NO_TRACE) {
    final ITmfContext traceContext=expContext.getContexts()[lastTrace];
    TmfExperimentLocation location=(TmfExperimentLocation)expContext.getLocation();
    if (location != null) {
      location.getLocation().getLocations()[lastTrace]=traceContext.getLocation().clone();
    }
    expContext.getEvents()[lastTrace]=fTraces[lastTrace].getNext(traceContext);
    expContext.setLastTrace(TmfExperimentContext.NO_TRACE);
  }
  int trace=TmfExperimentContext.NO_TRACE;
  ITmfTimestamp timestamp=TmfTimestamp.BIG_CRUNCH;
  for (int i=0; i < fTraces.length; i++) {
    final ITmfEvent event=expContext.getEvents()[i];
    if (event != null && event.getTimestamp() != null) {
      final ITmfTimestamp otherTS=event.getTimestamp();
      if (otherTS.compareTo(timestamp,true) < 0) {
        trace=i;
        timestamp=otherTS;
      }
    }
  }
  T event=null;
  if (trace != TmfExperimentContext.NO_TRACE) {
    event=(T)expContext.getEvents()[trace];
    if (event != null) {
      updateAttributes(expContext,event.getTimestamp());
      expContext.increaseRank();
      expContext.setLastTrace(trace);
      fExperimentContext=expContext;
      processEvent(event);
    }
  }
  return event;
}","@Override @SuppressWarnings(""String_Node_Str"") public synchronized T getNext(ITmfContext context){
  if (!(context instanceof TmfExperimentContext)) {
    return null;
  }
  if (fTraces == null) {
    return null;
  }
  TmfExperimentContext expContext=(TmfExperimentContext)context;
  final int lastTrace=expContext.getLastTrace();
  if (lastTrace != TmfExperimentContext.NO_TRACE) {
    final ITmfContext traceContext=expContext.getContexts()[lastTrace];
    expContext.getEvents()[lastTrace]=fTraces[lastTrace].getNext(traceContext);
    expContext.setLastTrace(TmfExperimentContext.NO_TRACE);
  }
  int trace=TmfExperimentContext.NO_TRACE;
  ITmfTimestamp timestamp=TmfTimestamp.BIG_CRUNCH;
  for (int i=0; i < fTraces.length; i++) {
    final ITmfEvent event=expContext.getEvents()[i];
    if (event != null && event.getTimestamp() != null) {
      final ITmfTimestamp otherTS=event.getTimestamp();
      if (otherTS.compareTo(timestamp,true) < 0) {
        trace=i;
        timestamp=otherTS;
      }
    }
  }
  T event=null;
  if (trace != TmfExperimentContext.NO_TRACE) {
    event=(T)expContext.getEvents()[trace];
    if (event != null) {
      updateAttributes(expContext,event.getTimestamp());
      expContext.increaseRank();
      expContext.setLastTrace(trace);
      final TmfExperimentLocation location=(TmfExperimentLocation)expContext.getLocation();
      final ITmfContext traceContext=expContext.getContexts()[trace];
      location.getLocation().getLocations()[trace]=traceContext.getLocation().clone();
      fExperimentContext=expContext;
      processEvent(event);
    }
  }
  return event;
}",0.8566061365059486
92270,"/** 
 * Method readNextEvent.
 * @param context ITmfContext
 * @return CtfTmfEvent
 * @see org.eclipse.linuxtools.tmf.core.trace.ITmfTrace#getNext(ITmfContext)
 */
@Override public synchronized CtfTmfEvent getNext(final ITmfContext context){
  CtfTmfEvent event=null;
  if (context instanceof CtfTmfLightweightContext) {
    if (CtfLocation.INVALID_LOCATION.equals(context.getLocation())) {
      return null;
    }
    CtfTmfLightweightContext ctfContext=(CtfTmfLightweightContext)context;
    event=ctfContext.getCurrentEvent();
    if (event != null) {
      updateAttributes(context,event.getTimestamp());
      ctfContext.advance();
      ctfContext.increaseRank();
    }
  }
  return event;
}","/** 
 * Method readNextEvent.
 * @param context ITmfContext
 * @return CtfTmfEvent
 * @see org.eclipse.linuxtools.tmf.core.trace.ITmfTrace#getNext(ITmfContext)
 */
@Override public synchronized CtfTmfEvent getNext(final ITmfContext context){
  CtfTmfEvent event=null;
  if (context instanceof CtfTmfLightweightContext) {
    if (CtfLocation.INVALID_LOCATION.equals(context.getLocation())) {
      return null;
    }
    CtfTmfLightweightContext ctfContext=(CtfTmfLightweightContext)context;
    if (ctfContext.getLocation().equals(CtfLocation.INVALID_LOCATION)) {
      return null;
    }
    event=ctfContext.getCurrentEvent();
    if (event != null) {
      updateAttributes(context,event.getTimestamp());
      ctfContext.advance();
      ctfContext.increaseRank();
    }
  }
  return event;
}",0.934404283801874
92271,"@Override public TmfLocationArray clone(){
  ITmfLocation<? extends Comparable<?>>[] clones=(ITmfLocation<? extends Comparable<?>>[])new ITmfLocation<?>[fLocations.length];
  for (int i=0; i < fLocations.length; i++) {
    ITmfLocation<?> location=fLocations[i];
    clones[i]=(location != null) ? location : null;
  }
  return new TmfLocationArray(clones);
}","@Override public TmfLocationArray clone(){
  ITmfLocation<? extends Comparable<?>>[] clones=(ITmfLocation<? extends Comparable<?>>[])new ITmfLocation<?>[fLocations.length];
  for (int i=0; i < fLocations.length; i++) {
    ITmfLocation<?> location=fLocations[i];
    clones[i]=(location != null) ? location.clone() : null;
  }
  return new TmfLocationArray(clones);
}",0.9889807162534436
92272,"public void testTmfTraceIndexing() throws Exception {
  assertEquals(""String_Node_Str"",BLOCK_SIZE,fExperiment.getCacheSize());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getNbEvents());
  assertEquals(""String_Node_Str"",1,fExperiment.getTimeRange().getStartTime().getValue());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getTimeRange().getEndTime().getValue());
  assertEquals(""String_Node_Str"",1,fExperiment.getStartTime().getValue());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getEndTime().getValue());
  List<ITmfCheckpoint> checkpoints=fExperiment.getIndexer().getCheckpoints();
  int pageSize=fExperiment.getCacheSize();
  assertTrue(""String_Node_Str"",checkpoints != null);
  assertEquals(""String_Node_Str"",NB_EVENTS / BLOCK_SIZE,checkpoints.size());
  for (int i=0; i < checkpoints.size(); i++) {
    ITmfCheckpoint checkpoint=checkpoints.get(i);
    TmfExperimentLocation expLocation=(TmfExperimentLocation)checkpoint.getLocation();
    TmfLocationArray locations=expLocation.getLocation();
    ITmfContext[] trcContexts=new ITmfContext[2];
    trcContexts[0]=new TmfContext(locations.getLocations()[0],(i * pageSize) / 2);
    trcContexts[1]=new TmfContext(locations.getLocations()[1],(i * pageSize) / 2);
    TmfExperimentContext expContext=new TmfExperimentContext(trcContexts);
    expContext.getEvents()[0]=fTestTraces[0].getNext(fTestTraces[0].seekEvent((i * pageSize) / 2));
    expContext.getEvents()[1]=fTestTraces[1].getNext(fTestTraces[1].seekEvent((i * pageSize) / 2));
    ITmfEvent event=fExperiment.parseEvent(expContext);
    assertTrue(expContext.getRank() == i * pageSize);
    assertTrue((checkpoint.getTimestamp().compareTo(event.getTimestamp(),false) == 0));
  }
}","public void testTmfTraceIndexing() throws Exception {
  assertEquals(""String_Node_Str"",BLOCK_SIZE,fExperiment.getCacheSize());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getNbEvents());
  assertEquals(""String_Node_Str"",1,fExperiment.getTimeRange().getStartTime().getValue());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getTimeRange().getEndTime().getValue());
  assertEquals(""String_Node_Str"",1,fExperiment.getStartTime().getValue());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getEndTime().getValue());
  List<ITmfCheckpoint> checkpoints=fExperiment.getIndexer().getCheckpoints();
  int pageSize=fExperiment.getCacheSize();
  assertTrue(""String_Node_Str"",checkpoints != null);
  assertEquals(""String_Node_Str"",NB_EVENTS / BLOCK_SIZE,checkpoints.size());
  for (int i=0; i < checkpoints.size(); i++) {
    ITmfCheckpoint checkpoint=checkpoints.get(i);
    TmfExperimentLocation expLocation=(TmfExperimentLocation)checkpoint.getLocation();
    TmfLocationArray locations=expLocation.getLocation();
    ITmfContext[] trcContexts=new ITmfContext[2];
    trcContexts[0]=new TmfContext(locations.getLocations()[0].getLocation(),(i * pageSize) / 2);
    trcContexts[1]=new TmfContext(locations.getLocations()[1].getLocation(),(i * pageSize) / 2);
    TmfExperimentContext expContext=new TmfExperimentContext(trcContexts);
    expContext.getEvents()[0]=fTestTraces[0].getNext(fTestTraces[0].seekEvent((i * pageSize) / 2));
    expContext.getEvents()[1]=fTestTraces[1].getNext(fTestTraces[1].seekEvent((i * pageSize) / 2));
    ITmfEvent event=fExperiment.parseEvent(expContext);
    assertTrue(expContext.getRank() == i * pageSize);
    assertTrue((checkpoint.getTimestamp().compareTo(event.getTimestamp(),false) == 0));
  }
}",0.9919586444572084
92273,"public void testGrowingIndex() throws Exception {
  ITmfTrace<TmfEvent>[] testTraces=new TmfTraceStub[2];
  try {
    URL location=FileLocator.find(TmfCoreTestPlugin.getDefault().getBundle(),new Path(DIRECTORY + File.separator + TEST_STREAM1),null);
    File test=new File(FileLocator.toFileURL(location).toURI());
    final TmfTraceStub trace1=new TmfTraceStub(test.getPath(),0,false);
    testTraces[0]=trace1;
    location=FileLocator.find(TmfCoreTestPlugin.getDefault().getBundle(),new Path(DIRECTORY + File.separator + TEST_STREAM2),null);
    test=new File(FileLocator.toFileURL(location).toURI());
    final TmfTraceStub trace2=new TmfTraceStub(test.getPath(),0,false);
    testTraces[1]=trace2;
  }
 catch (  final TmfTraceException e) {
    e.printStackTrace();
  }
catch (  final URISyntaxException e) {
    e.printStackTrace();
  }
catch (  final IOException e) {
    e.printStackTrace();
  }
  TmfExperimentStub<TmfEvent> experiment=new TmfExperimentStub<TmfEvent>(EXPERIMENT,testTraces,BLOCK_SIZE);
  int pageSize=experiment.getCacheSize();
  TmfTimeRange range=new TmfTimeRange(new TmfTimestamp(1,-3),new TmfTimestamp(NB_EVENTS / 2 - 1,-3));
  experiment.getIndexer().buildIndex(0,range,true);
  List<ITmfCheckpoint> checkpoints=experiment.getIndexer().getCheckpoints();
  assertTrue(""String_Node_Str"",checkpoints != null);
  assertEquals(""String_Node_Str"",NB_EVENTS / BLOCK_SIZE / 2,checkpoints.size());
  experiment.getIndexer().buildIndex(NB_EVENTS / 2,TmfTimeRange.ETERNITY,true);
  assertEquals(""String_Node_Str"",NB_EVENTS / BLOCK_SIZE,checkpoints.size());
  for (int i=0; i < checkpoints.size(); i++) {
    ITmfCheckpoint checkpoint=checkpoints.get(i);
    TmfExperimentLocation expLocation=(TmfExperimentLocation)checkpoint.getLocation();
    TmfLocationArray locations=expLocation.getLocation();
    ITmfContext[] trcContexts=new ITmfContext[2];
    trcContexts[0]=new TmfContext(locations.getLocations()[0],(i * pageSize) / 2);
    trcContexts[1]=new TmfContext(locations.getLocations()[1],(i * pageSize) / 2);
    TmfExperimentContext expContext=new TmfExperimentContext(trcContexts);
    expContext.getEvents()[0]=testTraces[0].getNext(testTraces[0].seekEvent((i * pageSize) / 2));
    expContext.getEvents()[1]=testTraces[1].getNext(testTraces[1].seekEvent((i * pageSize) / 2));
    ITmfEvent event=experiment.parseEvent(expContext);
    assertTrue(expContext.getRank() == i * pageSize);
    assertTrue((checkpoint.getTimestamp().compareTo(event.getTimestamp(),false) == 0));
    assertEquals(""String_Node_Str"",i * pageSize + 1,checkpoint.getTimestamp().getValue());
  }
}","public void testGrowingIndex() throws Exception {
  ITmfTrace<TmfEvent>[] testTraces=new TmfTraceStub[2];
  try {
    URL location=FileLocator.find(TmfCoreTestPlugin.getDefault().getBundle(),new Path(DIRECTORY + File.separator + TEST_STREAM1),null);
    File test=new File(FileLocator.toFileURL(location).toURI());
    final TmfTraceStub trace1=new TmfTraceStub(test.getPath(),0,false);
    testTraces[0]=trace1;
    location=FileLocator.find(TmfCoreTestPlugin.getDefault().getBundle(),new Path(DIRECTORY + File.separator + TEST_STREAM2),null);
    test=new File(FileLocator.toFileURL(location).toURI());
    final TmfTraceStub trace2=new TmfTraceStub(test.getPath(),0,false);
    testTraces[1]=trace2;
  }
 catch (  final TmfTraceException e) {
    e.printStackTrace();
  }
catch (  final URISyntaxException e) {
    e.printStackTrace();
  }
catch (  final IOException e) {
    e.printStackTrace();
  }
  TmfExperimentStub<TmfEvent> experiment=new TmfExperimentStub<TmfEvent>(EXPERIMENT,testTraces,BLOCK_SIZE);
  int pageSize=experiment.getCacheSize();
  TmfTimeRange range=new TmfTimeRange(new TmfTimestamp(1,-3),new TmfTimestamp(NB_EVENTS / 2 - 1,-3));
  experiment.getIndexer().buildIndex(0,range,true);
  List<ITmfCheckpoint> checkpoints=experiment.getIndexer().getCheckpoints();
  assertTrue(""String_Node_Str"",checkpoints != null);
  assertEquals(""String_Node_Str"",NB_EVENTS / BLOCK_SIZE / 2,checkpoints.size());
  experiment.getIndexer().buildIndex(NB_EVENTS / 2,TmfTimeRange.ETERNITY,true);
  assertEquals(""String_Node_Str"",NB_EVENTS / BLOCK_SIZE,checkpoints.size());
  for (int i=0; i < checkpoints.size(); i++) {
    ITmfCheckpoint checkpoint=checkpoints.get(i);
    TmfExperimentLocation expLocation=(TmfExperimentLocation)checkpoint.getLocation();
    TmfLocationArray locations=expLocation.getLocation();
    ITmfContext[] trcContexts=new ITmfContext[2];
    trcContexts[0]=new TmfContext(locations.getLocations()[0].getLocation(),(i * pageSize) / 2);
    trcContexts[1]=new TmfContext(locations.getLocations()[1].getLocation(),(i * pageSize) / 2);
    TmfExperimentContext expContext=new TmfExperimentContext(trcContexts);
    expContext.getEvents()[0]=testTraces[0].getNext(testTraces[0].seekEvent((i * pageSize) / 2));
    expContext.getEvents()[1]=testTraces[1].getNext(testTraces[1].seekEvent((i * pageSize) / 2));
    ITmfEvent event=experiment.parseEvent(expContext);
    assertTrue(expContext.getRank() == i * pageSize);
    assertTrue((checkpoint.getTimestamp().compareTo(event.getTimestamp(),false) == 0));
    assertEquals(""String_Node_Str"",i * pageSize + 1,checkpoint.getTimestamp().getValue());
  }
}",0.9946401225114856
92274,"@SuppressWarnings(""String_Node_Str"") public void testGetLocationRatio() throws Exception {
  ITmfContext context=fExperiment.seekEvent((ITmfLocation)null);
  double ratio=fExperiment.getLocationRatio(context.getLocation());
  context=fExperiment.seekEvent(ratio);
  double ratio2=fExperiment.getLocationRatio(context.getLocation());
  assertEquals(""String_Node_Str"",ratio,ratio2);
  context=fExperiment.seekEvent(NB_EVENTS / 2);
  ratio=fExperiment.getLocationRatio(context.getLocation());
  context=fExperiment.seekEvent(ratio);
  ratio2=fExperiment.getLocationRatio(context.getLocation());
  assertEquals(""String_Node_Str"",ratio,ratio2);
  context=fExperiment.seekEvent(NB_EVENTS - 1);
  ratio=fExperiment.getLocationRatio(context.getLocation());
  context=fExperiment.seekEvent(ratio);
  ratio2=fExperiment.getLocationRatio(context.getLocation());
  assertEquals(""String_Node_Str"",ratio,ratio2);
}","@SuppressWarnings(""String_Node_Str"") public void testGetLocationRatio() throws Exception {
  ITmfContext context=fExperiment.seekEvent((ITmfLocation)null);
  double ratio=fExperiment.getLocationRatio(context.getLocation());
  assertEquals(""String_Node_Str"",0.0,ratio);
  context=fExperiment.seekEvent(NB_EVENTS / 2);
  ratio=fExperiment.getLocationRatio(context.getLocation());
  assertEquals(""String_Node_Str"",(double)(NB_EVENTS / 2) / NB_EVENTS,ratio);
  context=fExperiment.seekEvent(NB_EVENTS - 1);
  ratio=fExperiment.getLocationRatio(context.getLocation());
  assertEquals(""String_Node_Str"",(double)(NB_EVENTS - 1) / NB_EVENTS,ratio);
}",0.4669260700389105
92275,"@Override @SuppressWarnings(""String_Node_Str"") public String toString(){
  StringBuilder result=new StringBuilder(""String_Node_Str"");
  ITmfLocation<? extends Comparable<?>>[] locations=((TmfLocationArray)getLocation()).getLocations();
  for (  ITmfLocation<?> location : locations) {
    result.append(""String_Node_Str"" + location + ""String_Node_Str"");
  }
  result.append(""String_Node_Str"");
  return result.toString();
}","@Override @SuppressWarnings(""String_Node_Str"") public String toString(){
  StringBuilder result=new StringBuilder(""String_Node_Str"");
  TmfRankedLocation[] locations=((TmfLocationArray)getLocation()).getLocations();
  for (  TmfRankedLocation location : locations) {
    result.append(""String_Node_Str"" + location + ""String_Node_Str"");
  }
  result.append(""String_Node_Str"");
  return result.toString();
}",0.4903381642512077
92276,"@Override public TmfLocationArray clone(){
  ITmfLocation<? extends Comparable<?>>[] clones=(ITmfLocation<? extends Comparable<?>>[])new ITmfLocation<?>[fLocations.length];
  for (int i=0; i < fLocations.length; i++) {
    ITmfLocation<?> location=fLocations[i];
    clones[i]=(location != null) ? location.clone() : null;
  }
  return new TmfLocationArray(clones);
}","@Override public TmfLocationArray clone(){
  TmfRankedLocation[] clones=new TmfRankedLocation[fLocations.length];
  for (int i=0; i < fLocations.length; i++) {
    TmfRankedLocation location=fLocations[i];
    clones[i]=(location != null) ? location.clone() : null;
  }
  return new TmfLocationArray(clones);
}",0.4017725258493353
92277,"/** 
 * The standard constructor
 * @param locations the locations
 */
public ITmfLocation<? extends Comparable<?>>[] getLocations(){
  return fLocations;
}","/** 
 * The standard constructor
 * @param locations the locations
 */
public TmfRankedLocation[] getLocations(){
  return fLocations;
}",0.8904109589041096
92278,"@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public int compareTo(TmfLocationArray o){
  for (int i=0; i < fLocations.length; i++) {
    ITmfLocation<? extends Comparable> l1=(ITmfLocation<? extends Comparable>)fLocations[i].getLocation();
    ITmfLocation<? extends Comparable> l2=(ITmfLocation<? extends Comparable>)o.fLocations[i].getLocation();
    int result=l1.getLocation().compareTo(l2.getLocation());
    if (result != 0) {
      return result;
    }
  }
  return 0;
}","@Override public int compareTo(TmfLocationArray o){
  for (int i=0; i < fLocations.length; i++) {
    TmfRankedLocation l1=fLocations[i];
    TmfRankedLocation l2=o.fLocations[i];
    int result=l1.compareTo(l2);
    if (result != 0) {
      return result;
    }
  }
  return 0;
}",0.5725288831835686
92279,"/** 
 * The standard constructor
 * @param locations the locations
 */
public TmfLocationArray(ITmfLocation<? extends Comparable<?>>[] locations){
  fLocations=locations;
}","/** 
 * The standard constructor
 * @param locations the locations
 */
public TmfLocationArray(TmfRankedLocation[] locations){
  fLocations=locations;
}",0.9012345679012346
92280,"public CustomTxtTrace(final IResource resource,final CustomTxtTraceDefinition definition,final String path,final int pageSize) throws TmfTraceException {
  super(resource,CustomTxtEvent.class,path,(pageSize > 0) ? pageSize : DEFAULT_CACHE_SIZE);
  fDefinition=definition;
  fEventType=new CustomTxtEventType(fDefinition);
  indexTrace(false);
}","public CustomTxtTrace(final IResource resource,final CustomTxtTraceDefinition definition,final String path,final int cacheSize) throws TmfTraceException {
  this(definition);
  setCacheSize((cacheSize > 0) ? cacheSize : DEFAULT_CACHE_SIZE);
  initTrace(resource,path,CustomTxtEvent.class);
}",0.6299212598425197
92281,"public CustomXmlTrace(final IResource resource,final CustomXmlTraceDefinition definition,final String path,final int pageSize) throws TmfTraceException {
  super(null,CustomXmlEvent.class,path,(pageSize > 0) ? pageSize : DEFAULT_CACHE_SIZE);
  fDefinition=definition;
  fEventType=new CustomXmlEventType(fDefinition);
  fRecordInputElement=getRecordInputElement(fDefinition.rootInputElement);
  indexTrace(false);
}","public CustomXmlTrace(final IResource resource,final CustomXmlTraceDefinition definition,final String path,final int pageSize) throws TmfTraceException {
  this(definition);
  setCacheSize((pageSize > 0) ? pageSize : DEFAULT_CACHE_SIZE);
  initTrace(resource,path,CustomXmlEvent.class);
}",0.5974395448079659
92282,"@Override public void run(){
  if (Tracer.isRequestTraced()) {
    Tracer.traceRequest(request,""String_Node_Str"" + provider.getName());
  }
  request.start();
  final Integer[] CHUNK_SIZE=new Integer[1];
  CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
  final Integer[] nbRead=new Integer[1];
  nbRead[0]=0;
  final Boolean[] isFinished=new Boolean[1];
  isFinished[0]=Boolean.FALSE;
  while (!isFinished[0]) {
    TmfDataRequest<T> subRequest=new TmfDataRequest<T>(request.getDataType(),request.getIndex() + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
      @Override public void handleData(      T data){
        super.handleData(data);
        if (request.getDataType().isInstance(data)) {
          request.handleData(data);
        }
        if (getNbRead() > CHUNK_SIZE[0]) {
          System.out.println(""String_Node_Str"");
        }
      }
      @Override public void handleCompleted(){
        nbRead[0]+=getNbRead();
        if (nbRead[0] >= request.getNbRequested() || (getNbRead() < CHUNK_SIZE[0])) {
          if (this.isCancelled()) {
            request.cancel();
          }
 else           if (this.isFailed()) {
            request.fail();
          }
 else {
            request.done();
          }
          isFinished[0]=Boolean.TRUE;
        }
        super.handleCompleted();
      }
    }
;
    if (!isFinished[0]) {
      queueRequest(subRequest);
      try {
        subRequest.waitForCompletion();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
    }
  }
}","@Override public void run(){
  if (Tracer.isRequestTraced()) {
    Tracer.traceRequest(request,""String_Node_Str"" + provider.getName());
  }
  request.start();
  final Integer[] CHUNK_SIZE=new Integer[1];
  CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
  final Integer[] nbRead=new Integer[1];
  nbRead[0]=0;
  final Boolean[] isFinished=new Boolean[1];
  isFinished[0]=Boolean.FALSE;
  while (!isFinished[0]) {
    TmfDataRequest<T> subRequest=new TmfDataRequest<T>(request.getDataType(),request.getIndex() + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
      @Override public synchronized boolean isCompleted(){
        return super.isCompleted() || request.isCompleted();
      }
      @Override public void handleData(      T data){
        super.handleData(data);
        if (request.getDataType().isInstance(data)) {
          request.handleData(data);
        }
        if (getNbRead() > CHUNK_SIZE[0]) {
          System.out.println(""String_Node_Str"");
        }
      }
      @Override public void handleCompleted(){
        nbRead[0]+=getNbRead();
        if (nbRead[0] >= request.getNbRequested() || (getNbRead() < CHUNK_SIZE[0])) {
          if (this.isCancelled()) {
            request.cancel();
          }
 else           if (this.isFailed()) {
            request.fail();
          }
 else {
            request.done();
          }
          isFinished[0]=Boolean.TRUE;
        }
        super.handleCompleted();
      }
    }
;
    if (!isFinished[0]) {
      queueRequest(subRequest);
      try {
        subRequest.waitForCompletion();
        if (request.isCompleted()) {
          isFinished[0]=Boolean.TRUE;
        }
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
    }
  }
}",0.9395058222095996
92283,"protected void queueBackgroundRequest(final ITmfDataRequest<T> request,final int blockSize,final boolean indexing){
  final TmfDataProvider<T> provider=this;
  Thread thread=new Thread(){
    @Override public void run(){
      if (Tracer.isRequestTraced()) {
        Tracer.traceRequest(request,""String_Node_Str"" + provider.getName());
      }
      request.start();
      final Integer[] CHUNK_SIZE=new Integer[1];
      CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
      final Integer[] nbRead=new Integer[1];
      nbRead[0]=0;
      final Boolean[] isFinished=new Boolean[1];
      isFinished[0]=Boolean.FALSE;
      while (!isFinished[0]) {
        TmfDataRequest<T> subRequest=new TmfDataRequest<T>(request.getDataType(),request.getIndex() + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
          @Override public void handleData(          T data){
            super.handleData(data);
            if (request.getDataType().isInstance(data)) {
              request.handleData(data);
            }
            if (getNbRead() > CHUNK_SIZE[0]) {
              System.out.println(""String_Node_Str"");
            }
          }
          @Override public void handleCompleted(){
            nbRead[0]+=getNbRead();
            if (nbRead[0] >= request.getNbRequested() || (getNbRead() < CHUNK_SIZE[0])) {
              if (this.isCancelled()) {
                request.cancel();
              }
 else               if (this.isFailed()) {
                request.fail();
              }
 else {
                request.done();
              }
              isFinished[0]=Boolean.TRUE;
            }
            super.handleCompleted();
          }
        }
;
        if (!isFinished[0]) {
          queueRequest(subRequest);
          try {
            subRequest.waitForCompletion();
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
        }
      }
    }
  }
;
  thread.start();
}","protected void queueBackgroundRequest(final ITmfDataRequest<T> request,final int blockSize,final boolean indexing){
  final TmfDataProvider<T> provider=this;
  Thread thread=new Thread(){
    @Override public void run(){
      if (Tracer.isRequestTraced()) {
        Tracer.traceRequest(request,""String_Node_Str"" + provider.getName());
      }
      request.start();
      final Integer[] CHUNK_SIZE=new Integer[1];
      CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
      final Integer[] nbRead=new Integer[1];
      nbRead[0]=0;
      final Boolean[] isFinished=new Boolean[1];
      isFinished[0]=Boolean.FALSE;
      while (!isFinished[0]) {
        TmfDataRequest<T> subRequest=new TmfDataRequest<T>(request.getDataType(),request.getIndex() + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
          @Override public synchronized boolean isCompleted(){
            return super.isCompleted() || request.isCompleted();
          }
          @Override public void handleData(          T data){
            super.handleData(data);
            if (request.getDataType().isInstance(data)) {
              request.handleData(data);
            }
            if (getNbRead() > CHUNK_SIZE[0]) {
              System.out.println(""String_Node_Str"");
            }
          }
          @Override public void handleCompleted(){
            nbRead[0]+=getNbRead();
            if (nbRead[0] >= request.getNbRequested() || (getNbRead() < CHUNK_SIZE[0])) {
              if (this.isCancelled()) {
                request.cancel();
              }
 else               if (this.isFailed()) {
                request.fail();
              }
 else {
                request.done();
              }
              isFinished[0]=Boolean.TRUE;
            }
            super.handleCompleted();
          }
        }
;
        if (!isFinished[0]) {
          queueRequest(subRequest);
          try {
            subRequest.waitForCompletion();
            if (request.isCompleted()) {
              isFinished[0]=Boolean.TRUE;
            }
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
        }
      }
    }
  }
;
  thread.start();
}",0.9459027619265008
92284,"@Override protected void queueBackgroundRequest(final ITmfDataRequest<T> request,final int blockSize,final boolean indexing){
  if (!(request instanceof ITmfEventRequest)) {
    super.queueBackgroundRequest(request,blockSize,indexing);
    return;
  }
  final TmfDataProvider<T> provider=this;
  Thread thread=new Thread(){
    @Override public void run(){
      if (Tracer.isRequestTraced()) {
        Tracer.traceRequest(request,""String_Node_Str"" + provider.getName());
      }
      request.start();
      final Integer[] CHUNK_SIZE=new Integer[1];
      CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
      final Integer[] nbRead=new Integer[1];
      nbRead[0]=0;
      final Boolean[] isFinished=new Boolean[1];
      isFinished[0]=Boolean.FALSE;
      long startIndex=request.getIndex();
      while (!isFinished[0]) {
        TmfEventRequest<T> subRequest=new TmfEventRequest<T>(request.getDataType(),((ITmfEventRequest<?>)request).getRange(),startIndex + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
          @Override public void handleData(          T data){
            super.handleData(data);
            if (request.getDataType().isInstance(data)) {
              request.handleData(data);
            }
            if (this.getNbRead() > CHUNK_SIZE[0]) {
              System.out.println(""String_Node_Str"");
            }
          }
          @Override public void handleCompleted(){
            nbRead[0]+=this.getNbRead();
            if (nbRead[0] >= request.getNbRequested() || (this.getNbRead() < CHUNK_SIZE[0])) {
              if (this.isCancelled()) {
                request.cancel();
              }
 else               if (this.isFailed()) {
                request.fail();
              }
 else {
                request.done();
              }
              isFinished[0]=Boolean.TRUE;
            }
            super.handleCompleted();
          }
        }
;
        if (!isFinished[0]) {
          queueRequest(subRequest);
          try {
            subRequest.waitForCompletion();
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          if (startIndex == 0 && nbRead[0].equals(CHUNK_SIZE[0])) {
            startIndex=subRequest.getIndex();
          }
          CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
        }
      }
    }
  }
;
  thread.start();
}","@Override protected void queueBackgroundRequest(final ITmfDataRequest<T> request,final int blockSize,final boolean indexing){
  if (!(request instanceof ITmfEventRequest)) {
    super.queueBackgroundRequest(request,blockSize,indexing);
    return;
  }
  final TmfDataProvider<T> provider=this;
  Thread thread=new Thread(){
    @Override public void run(){
      if (Tracer.isRequestTraced()) {
        Tracer.traceRequest(request,""String_Node_Str"" + provider.getName());
      }
      request.start();
      final Integer[] CHUNK_SIZE=new Integer[1];
      CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
      final Integer[] nbRead=new Integer[1];
      nbRead[0]=0;
      final Boolean[] isFinished=new Boolean[1];
      isFinished[0]=Boolean.FALSE;
      long startIndex=request.getIndex();
      while (!isFinished[0]) {
        TmfEventRequest<T> subRequest=new TmfEventRequest<T>(request.getDataType(),((ITmfEventRequest<?>)request).getRange(),startIndex + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
          @Override public synchronized boolean isCompleted(){
            return super.isCompleted() || request.isCompleted();
          }
          @Override public void handleData(          T data){
            super.handleData(data);
            if (request.getDataType().isInstance(data)) {
              request.handleData(data);
            }
            if (this.getNbRead() > CHUNK_SIZE[0]) {
              System.out.println(""String_Node_Str"");
            }
          }
          @Override public void handleCompleted(){
            nbRead[0]+=this.getNbRead();
            if (nbRead[0] >= request.getNbRequested() || (this.getNbRead() < CHUNK_SIZE[0])) {
              if (this.isCancelled()) {
                request.cancel();
              }
 else               if (this.isFailed()) {
                request.fail();
              }
 else {
                request.done();
              }
              isFinished[0]=Boolean.TRUE;
            }
            super.handleCompleted();
          }
        }
;
        if (!isFinished[0]) {
          queueRequest(subRequest);
          try {
            subRequest.waitForCompletion();
            if (request.isCompleted()) {
              isFinished[0]=Boolean.TRUE;
            }
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          if (startIndex == 0 && nbRead[0].equals(CHUNK_SIZE[0])) {
            startIndex=subRequest.getIndex();
          }
          CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
        }
      }
    }
  }
;
  thread.start();
}",0.9534472598703596
92285,"@Override public void run(){
  if (Tracer.isRequestTraced()) {
    Tracer.traceRequest(request,""String_Node_Str"" + provider.getName());
  }
  request.start();
  final Integer[] CHUNK_SIZE=new Integer[1];
  CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
  final Integer[] nbRead=new Integer[1];
  nbRead[0]=0;
  final Boolean[] isFinished=new Boolean[1];
  isFinished[0]=Boolean.FALSE;
  long startIndex=request.getIndex();
  while (!isFinished[0]) {
    TmfEventRequest<T> subRequest=new TmfEventRequest<T>(request.getDataType(),((ITmfEventRequest<?>)request).getRange(),startIndex + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
      @Override public void handleData(      T data){
        super.handleData(data);
        if (request.getDataType().isInstance(data)) {
          request.handleData(data);
        }
        if (this.getNbRead() > CHUNK_SIZE[0]) {
          System.out.println(""String_Node_Str"");
        }
      }
      @Override public void handleCompleted(){
        nbRead[0]+=this.getNbRead();
        if (nbRead[0] >= request.getNbRequested() || (this.getNbRead() < CHUNK_SIZE[0])) {
          if (this.isCancelled()) {
            request.cancel();
          }
 else           if (this.isFailed()) {
            request.fail();
          }
 else {
            request.done();
          }
          isFinished[0]=Boolean.TRUE;
        }
        super.handleCompleted();
      }
    }
;
    if (!isFinished[0]) {
      queueRequest(subRequest);
      try {
        subRequest.waitForCompletion();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      if (startIndex == 0 && nbRead[0].equals(CHUNK_SIZE[0])) {
        startIndex=subRequest.getIndex();
      }
      CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
    }
  }
}","@Override public void run(){
  if (Tracer.isRequestTraced()) {
    Tracer.traceRequest(request,""String_Node_Str"" + provider.getName());
  }
  request.start();
  final Integer[] CHUNK_SIZE=new Integer[1];
  CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
  final Integer[] nbRead=new Integer[1];
  nbRead[0]=0;
  final Boolean[] isFinished=new Boolean[1];
  isFinished[0]=Boolean.FALSE;
  long startIndex=request.getIndex();
  while (!isFinished[0]) {
    TmfEventRequest<T> subRequest=new TmfEventRequest<T>(request.getDataType(),((ITmfEventRequest<?>)request).getRange(),startIndex + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
      @Override public synchronized boolean isCompleted(){
        return super.isCompleted() || request.isCompleted();
      }
      @Override public void handleData(      T data){
        super.handleData(data);
        if (request.getDataType().isInstance(data)) {
          request.handleData(data);
        }
        if (this.getNbRead() > CHUNK_SIZE[0]) {
          System.out.println(""String_Node_Str"");
        }
      }
      @Override public void handleCompleted(){
        nbRead[0]+=this.getNbRead();
        if (nbRead[0] >= request.getNbRequested() || (this.getNbRead() < CHUNK_SIZE[0])) {
          if (this.isCancelled()) {
            request.cancel();
          }
 else           if (this.isFailed()) {
            request.fail();
          }
 else {
            request.done();
          }
          isFinished[0]=Boolean.TRUE;
        }
        super.handleCompleted();
      }
    }
;
    if (!isFinished[0]) {
      queueRequest(subRequest);
      try {
        subRequest.waitForCompletion();
        if (request.isCompleted()) {
          isFinished[0]=Boolean.TRUE;
        }
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      if (startIndex == 0 && nbRead[0].equals(CHUNK_SIZE[0])) {
        startIndex=subRequest.getIndex();
      }
      CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
    }
  }
}",0.9457601222307104
92286,"@Override public boolean isCompleted(ITmfDataRequest<T> request,T data,int nbRead){
  boolean requestCompleted=super.isCompleted(request,data,nbRead);
  if (!requestCompleted && request instanceof ITmfEventRequest<?>) {
    ITmfTimestamp endTime=((ITmfEventRequest<?>)request).getRange().getEndTime();
    return data.getTimestamp().compareTo(endTime,false) > 0;
  }
  return requestCompleted;
}","@Override public synchronized boolean isCompleted(){
  return super.isCompleted() || request.isCompleted();
}",0.3412698412698413
92287,"@TmfSignalHandler public void experimentRangeUpdated(TmfExperimentRangeUpdatedSignal signal){
  if (signal.getExperiment() != fCurrentExperiment) {
    return;
  }
  boolean drawTimeRangeHistogram=fExperimentStartTime == 0;
  TmfTimeRange fullRange=signal.getRange();
  fExperimentStartTime=fullRange.getStartTime().getValue();
  fExperimentEndTime=fullRange.getEndTime().getValue();
  fFullTraceHistogram.setFullRange(fExperimentStartTime,fExperimentEndTime);
  fTimeRangeHistogram.setFullRange(fExperimentStartTime,fExperimentEndTime);
  if (drawTimeRangeHistogram) {
    fCurrentTimestamp=fExperimentStartTime;
    fCurrentEventTimeControl.setValue(fCurrentTimestamp);
    fFullTraceHistogram.setTimeRange(fExperimentStartTime,INITIAL_WINDOW_SPAN);
    fTimeRangeHistogram.setTimeRange(fExperimentStartTime,INITIAL_WINDOW_SPAN);
    sendTimeRangeRequest(fExperimentStartTime,fExperimentStartTime + INITIAL_WINDOW_SPAN);
  }
  sendFullRangeRequest(fullRange);
}","@TmfSignalHandler public void experimentRangeUpdated(TmfExperimentRangeUpdatedSignal signal){
  if (signal.getExperiment() != fCurrentExperiment) {
    return;
  }
  boolean drawTimeRangeHistogram=fExperimentStartTime == 0;
  TmfTimeRange fullRange=signal.getRange();
  fExperimentStartTime=fullRange.getStartTime().normalize(0,-9).getValue();
  fExperimentEndTime=fullRange.getEndTime().normalize(0,-9).getValue();
  fFullTraceHistogram.setFullRange(fExperimentStartTime,fExperimentEndTime);
  fTimeRangeHistogram.setFullRange(fExperimentStartTime,fExperimentEndTime);
  if (drawTimeRangeHistogram) {
    fCurrentTimestamp=fExperimentStartTime;
    fCurrentEventTimeControl.setValue(fCurrentTimestamp);
    fFullTraceHistogram.setTimeRange(fExperimentStartTime,INITIAL_WINDOW_SPAN);
    fTimeRangeHistogram.setTimeRange(fExperimentStartTime,INITIAL_WINDOW_SPAN);
    sendTimeRangeRequest(fExperimentStartTime,fExperimentStartTime + INITIAL_WINDOW_SPAN);
  }
  sendFullRangeRequest(fullRange);
}",0.9836567926455568
92288,"@TmfSignalHandler public void currentTimeUpdated(TmfTimeSynchSignal signal){
  assert(signal != null);
  ITmfTimestamp currentTime=signal.getCurrentTime();
  fCurrentTimestamp=currentTime.getValue();
  fFullTraceHistogram.setCurrentEvent(fCurrentTimestamp);
  fTimeRangeHistogram.setCurrentEvent(fCurrentTimestamp);
  fCurrentEventTimeControl.setValue(fCurrentTimestamp);
}","@TmfSignalHandler public void currentTimeUpdated(TmfTimeSynchSignal signal){
  assert(signal != null);
  ITmfTimestamp currentTime=signal.getCurrentTime();
  fCurrentTimestamp=currentTime.normalize(0,-9).getValue();
  fFullTraceHistogram.setCurrentEvent(fCurrentTimestamp);
  fTimeRangeHistogram.setCurrentEvent(fCurrentTimestamp);
  fCurrentEventTimeControl.setValue(fCurrentTimestamp);
}",0.979002624671916
92289,"private TmfTimeRange updateExperimentTimeRange(TmfExperiment<ITmfEvent> experiment){
  fExperimentStartTime=0;
  fExperimentEndTime=0;
  fCurrentTimestamp=0;
  TmfTimeRange timeRange=fCurrentExperiment.getTimeRange();
  if (!timeRange.equals(TmfTimeRange.NULL_RANGE)) {
    fExperimentStartTime=timeRange.getStartTime().getValue();
    fExperimentEndTime=timeRange.getEndTime().getValue();
    fCurrentTimestamp=fExperimentStartTime;
  }
  return timeRange;
}","private TmfTimeRange updateExperimentTimeRange(TmfExperiment<ITmfEvent> experiment){
  fExperimentStartTime=0;
  fExperimentEndTime=0;
  fCurrentTimestamp=0;
  TmfTimeRange timeRange=fCurrentExperiment.getTimeRange();
  if (!timeRange.equals(TmfTimeRange.NULL_RANGE)) {
    fExperimentStartTime=timeRange.getStartTime().normalize(0,-9).getValue();
    fExperimentEndTime=timeRange.getEndTime().normalize(0,-9).getValue();
    fCurrentTimestamp=fExperimentStartTime;
  }
  return timeRange;
}",0.9663157894736842
92290,"@TmfSignalHandler public void timeRangeUpdated(TmfRangeSynchSignal signal){
  assert(signal != null);
  if (fCurrentExperiment != null) {
    fWindowStartTime=signal.getCurrentRange().getStartTime().getValue();
    fWindowEndTime=signal.getCurrentRange().getEndTime().getValue();
    fWindowSpan=fWindowEndTime - fWindowStartTime;
    sendTimeRangeRequest(fWindowStartTime,fWindowEndTime);
    fFullTraceHistogram.setTimeRange(fWindowStartTime,fWindowSpan);
    fTimeSpanControl.setValue(fWindowSpan);
  }
}","@TmfSignalHandler public void timeRangeUpdated(TmfRangeSynchSignal signal){
  assert(signal != null);
  if (fCurrentExperiment != null) {
    fWindowStartTime=signal.getCurrentRange().getStartTime().normalize(0,-9).getValue();
    fWindowEndTime=signal.getCurrentRange().getEndTime().normalize(0,-9).getValue();
    fWindowSpan=fWindowEndTime - fWindowStartTime;
    sendTimeRangeRequest(fWindowStartTime,fWindowEndTime);
    fFullTraceHistogram.setTimeRange(fWindowStartTime,fWindowSpan);
    fTimeSpanControl.setValue(fWindowSpan);
  }
}",0.9694072657743786
92291,"@TmfSignalHandler public void experimentUpdated(TmfExperimentUpdatedSignal signal){
  if (signal.getExperiment() != fCurrentExperiment) {
    return;
  }
  TmfTimeRange fullRange=signal.getExperiment().getTimeRange();
  fExperimentStartTime=fullRange.getStartTime().getValue();
  fExperimentEndTime=fullRange.getEndTime().getValue();
  fFullTraceHistogram.setFullRange(fExperimentStartTime,fExperimentEndTime);
  fTimeRangeHistogram.setFullRange(fExperimentStartTime,fExperimentEndTime);
}","@TmfSignalHandler public void experimentUpdated(TmfExperimentUpdatedSignal signal){
  if (signal.getExperiment() != fCurrentExperiment) {
    return;
  }
  TmfTimeRange fullRange=signal.getExperiment().getTimeRange();
  fExperimentStartTime=fullRange.getStartTime().normalize(0,-9).getValue();
  fExperimentEndTime=fullRange.getEndTime().normalize(0,-9).getValue();
  fFullTraceHistogram.setFullRange(fExperimentStartTime,fExperimentEndTime);
  fTimeRangeHistogram.setFullRange(fExperimentStartTime,fExperimentEndTime);
}",0.9683168316831684
92292,"@Override public ITmfTimestamp normalize(final long offset,final int scale){
  long value=fValue;
  int precision=fPrecision;
  if (fScale == scale && offset == 0) {
    return new TmfTimestamp(this);
  }
  if (fScale != scale) {
    final int scaleDiff=Math.abs(fScale - scale);
    if (scaleDiff >= scalingFactors.length) {
      throw new ArithmeticException(""String_Node_Str"");
    }
    final long scalingFactor=scalingFactors[scaleDiff];
    if (scale < fScale) {
      value*=scalingFactor;
      precision*=scalingFactor;
    }
 else {
      value/=scalingFactor;
      precision/=scalingFactor;
    }
  }
  if (offset < 0) {
    value=(value < Long.MIN_VALUE - offset) ? Long.MIN_VALUE : value + offset;
  }
 else {
    value=(value > Long.MAX_VALUE - offset) ? Long.MAX_VALUE : value + offset;
  }
  return new TmfTimestamp(value,scale,precision);
}","@Override public ITmfTimestamp normalize(final long offset,final int scale){
  long value=fValue;
  int precision=fPrecision;
  if (fScale == scale && offset == 0) {
    return new TmfTimestamp(this);
  }
  if (this.equals(BIG_BANG) || this.equals(BIG_CRUNCH)) {
    return this;
  }
  if (fScale != scale) {
    final int scaleDiff=Math.abs(fScale - scale);
    if (scaleDiff >= scalingFactors.length) {
      throw new ArithmeticException(""String_Node_Str"");
    }
    final long scalingFactor=scalingFactors[scaleDiff];
    if (scale < fScale) {
      value*=scalingFactor;
      precision*=scalingFactor;
    }
 else {
      value/=scalingFactor;
      precision/=scalingFactor;
    }
  }
  if (offset < 0) {
    value=(value < Long.MIN_VALUE - offset) ? Long.MIN_VALUE : value + offset;
  }
 else {
    value=(value > Long.MAX_VALUE - offset) ? Long.MAX_VALUE : value + offset;
  }
  return new TmfTimestamp(value,scale,precision);
}",0.9560378408458542
92293,"public void testTmfTraceIndexing() throws Exception {
  assertEquals(""String_Node_Str"",BLOCK_SIZE,fExperiment.getCacheSize());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getNbEvents());
  assertEquals(""String_Node_Str"",1,fExperiment.getTimeRange().getStartTime().getValue());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getTimeRange().getEndTime().getValue());
  assertEquals(""String_Node_Str"",1,fExperiment.getStartTime().getValue());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getEndTime().getValue());
  List<ITmfCheckpoint> checkpoints=fExperiment.getIndexer().getCheckpoints();
  int pageSize=fExperiment.getCacheSize();
  assertTrue(""String_Node_Str"",checkpoints != null);
  assertEquals(""String_Node_Str"",NB_EVENTS / BLOCK_SIZE,checkpoints.size());
  for (int i=0; i < checkpoints.size(); i++) {
    ITmfCheckpoint checkpoint=checkpoints.get(i);
    TmfExperimentLocation expLocation=(TmfExperimentLocation)checkpoint.getLocation();
    TmfLocationArray locations=expLocation.getLocation();
    ITmfContext[] trcContexts=new ITmfContext[2];
    trcContexts[0]=new TmfContext(locations.getLocations()[0].getLocation(),(i * pageSize) / 2);
    trcContexts[1]=new TmfContext(locations.getLocations()[1].getLocation(),(i * pageSize) / 2);
    TmfExperimentContext expContext=new TmfExperimentContext(trcContexts);
    expContext.getEvents()[0]=fTestTraces[0].getNext(fTestTraces[0].seekEvent((i * pageSize) / 2));
    expContext.getEvents()[1]=fTestTraces[1].getNext(fTestTraces[1].seekEvent((i * pageSize) / 2));
    ITmfEvent event=fExperiment.parseEvent(expContext);
    assertTrue(expContext.getRank() == i * pageSize);
    assertTrue((checkpoint.getTimestamp().compareTo(event.getTimestamp(),false) == 0));
  }
}","public void testTmfTraceIndexing() throws Exception {
  assertEquals(""String_Node_Str"",BLOCK_SIZE,fExperiment.getCacheSize());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getNbEvents());
  assertEquals(""String_Node_Str"",1,fExperiment.getTimeRange().getStartTime().getValue());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getTimeRange().getEndTime().getValue());
  assertEquals(""String_Node_Str"",1,fExperiment.getStartTime().getValue());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getEndTime().getValue());
  List<ITmfCheckpoint> checkpoints=fExperiment.getIndexer().getCheckpoints();
  int pageSize=fExperiment.getCacheSize();
  assertTrue(""String_Node_Str"",checkpoints != null);
  assertEquals(""String_Node_Str"",NB_EVENTS / BLOCK_SIZE,checkpoints.size());
  for (int i=0; i < checkpoints.size(); i++) {
    ITmfCheckpoint checkpoint=checkpoints.get(i);
    TmfExperimentLocation expLocation=(TmfExperimentLocation)checkpoint.getLocation();
    TmfLocationArray locations=expLocation.getLocation();
    ITmfContext[] trcContexts=new ITmfContext[2];
    trcContexts[0]=new TmfContext(locations.getLocations()[0],(i * pageSize) / 2);
    trcContexts[1]=new TmfContext(locations.getLocations()[1],(i * pageSize) / 2);
    TmfExperimentContext expContext=new TmfExperimentContext(trcContexts);
    expContext.getEvents()[0]=fTestTraces[0].getNext(fTestTraces[0].seekEvent((i * pageSize) / 2));
    expContext.getEvents()[1]=fTestTraces[1].getNext(fTestTraces[1].seekEvent((i * pageSize) / 2));
    ITmfEvent event=fExperiment.parseEvent(expContext);
    assertTrue(expContext.getRank() == i * pageSize);
    assertTrue((checkpoint.getTimestamp().compareTo(event.getTimestamp(),false) == 0));
  }
}",0.9919586444572084
92294,"public void testGrowingIndex() throws Exception {
  ITmfTrace<TmfEvent>[] testTraces=new TmfTraceStub[2];
  try {
    URL location=FileLocator.find(TmfCoreTestPlugin.getDefault().getBundle(),new Path(DIRECTORY + File.separator + TEST_STREAM1),null);
    File test=new File(FileLocator.toFileURL(location).toURI());
    final TmfTraceStub trace1=new TmfTraceStub(test.getPath(),0,false);
    testTraces[0]=trace1;
    location=FileLocator.find(TmfCoreTestPlugin.getDefault().getBundle(),new Path(DIRECTORY + File.separator + TEST_STREAM2),null);
    test=new File(FileLocator.toFileURL(location).toURI());
    final TmfTraceStub trace2=new TmfTraceStub(test.getPath(),0,false);
    testTraces[1]=trace2;
  }
 catch (  final TmfTraceException e) {
    e.printStackTrace();
  }
catch (  final URISyntaxException e) {
    e.printStackTrace();
  }
catch (  final IOException e) {
    e.printStackTrace();
  }
  TmfExperimentStub<TmfEvent> experiment=new TmfExperimentStub<TmfEvent>(EXPERIMENT,testTraces,BLOCK_SIZE);
  int pageSize=experiment.getCacheSize();
  TmfTimeRange range=new TmfTimeRange(new TmfTimestamp(1,-3),new TmfTimestamp(NB_EVENTS / 2 - 1,-3));
  experiment.getIndexer().buildIndex(0,range,true);
  List<ITmfCheckpoint> checkpoints=experiment.getIndexer().getCheckpoints();
  assertTrue(""String_Node_Str"",checkpoints != null);
  assertEquals(""String_Node_Str"",NB_EVENTS / BLOCK_SIZE / 2,checkpoints.size());
  experiment.getIndexer().buildIndex(NB_EVENTS / 2,TmfTimeRange.ETERNITY,true);
  assertEquals(""String_Node_Str"",NB_EVENTS / BLOCK_SIZE,checkpoints.size());
  for (int i=0; i < checkpoints.size(); i++) {
    ITmfCheckpoint checkpoint=checkpoints.get(i);
    TmfExperimentLocation expLocation=(TmfExperimentLocation)checkpoint.getLocation();
    TmfLocationArray locations=expLocation.getLocation();
    ITmfContext[] trcContexts=new ITmfContext[2];
    trcContexts[0]=new TmfContext(locations.getLocations()[0].getLocation(),(i * pageSize) / 2);
    trcContexts[1]=new TmfContext(locations.getLocations()[1].getLocation(),(i * pageSize) / 2);
    TmfExperimentContext expContext=new TmfExperimentContext(trcContexts);
    expContext.getEvents()[0]=testTraces[0].getNext(testTraces[0].seekEvent((i * pageSize) / 2));
    expContext.getEvents()[1]=testTraces[1].getNext(testTraces[1].seekEvent((i * pageSize) / 2));
    ITmfEvent event=experiment.parseEvent(expContext);
    assertTrue(expContext.getRank() == i * pageSize);
    assertTrue((checkpoint.getTimestamp().compareTo(event.getTimestamp(),false) == 0));
    assertEquals(""String_Node_Str"",i * pageSize + 1,checkpoint.getTimestamp().getValue());
  }
}","public void testGrowingIndex() throws Exception {
  ITmfTrace<TmfEvent>[] testTraces=new TmfTraceStub[2];
  try {
    URL location=FileLocator.find(TmfCoreTestPlugin.getDefault().getBundle(),new Path(DIRECTORY + File.separator + TEST_STREAM1),null);
    File test=new File(FileLocator.toFileURL(location).toURI());
    final TmfTraceStub trace1=new TmfTraceStub(test.getPath(),0,false);
    testTraces[0]=trace1;
    location=FileLocator.find(TmfCoreTestPlugin.getDefault().getBundle(),new Path(DIRECTORY + File.separator + TEST_STREAM2),null);
    test=new File(FileLocator.toFileURL(location).toURI());
    final TmfTraceStub trace2=new TmfTraceStub(test.getPath(),0,false);
    testTraces[1]=trace2;
  }
 catch (  final TmfTraceException e) {
    e.printStackTrace();
  }
catch (  final URISyntaxException e) {
    e.printStackTrace();
  }
catch (  final IOException e) {
    e.printStackTrace();
  }
  TmfExperimentStub<TmfEvent> experiment=new TmfExperimentStub<TmfEvent>(EXPERIMENT,testTraces,BLOCK_SIZE);
  int pageSize=experiment.getCacheSize();
  TmfTimeRange range=new TmfTimeRange(new TmfTimestamp(1,-3),new TmfTimestamp(NB_EVENTS / 2 - 1,-3));
  experiment.getIndexer().buildIndex(0,range,true);
  List<ITmfCheckpoint> checkpoints=experiment.getIndexer().getCheckpoints();
  assertTrue(""String_Node_Str"",checkpoints != null);
  assertEquals(""String_Node_Str"",NB_EVENTS / BLOCK_SIZE / 2,checkpoints.size());
  experiment.getIndexer().buildIndex(NB_EVENTS / 2,TmfTimeRange.ETERNITY,true);
  assertEquals(""String_Node_Str"",NB_EVENTS / BLOCK_SIZE,checkpoints.size());
  for (int i=0; i < checkpoints.size(); i++) {
    ITmfCheckpoint checkpoint=checkpoints.get(i);
    TmfExperimentLocation expLocation=(TmfExperimentLocation)checkpoint.getLocation();
    TmfLocationArray locations=expLocation.getLocation();
    ITmfContext[] trcContexts=new ITmfContext[2];
    trcContexts[0]=new TmfContext(locations.getLocations()[0],(i * pageSize) / 2);
    trcContexts[1]=new TmfContext(locations.getLocations()[1],(i * pageSize) / 2);
    TmfExperimentContext expContext=new TmfExperimentContext(trcContexts);
    expContext.getEvents()[0]=testTraces[0].getNext(testTraces[0].seekEvent((i * pageSize) / 2));
    expContext.getEvents()[1]=testTraces[1].getNext(testTraces[1].seekEvent((i * pageSize) / 2));
    ITmfEvent event=experiment.parseEvent(expContext);
    assertTrue(expContext.getRank() == i * pageSize);
    assertTrue((checkpoint.getTimestamp().compareTo(event.getTimestamp(),false) == 0));
    assertEquals(""String_Node_Str"",i * pageSize + 1,checkpoint.getTimestamp().getValue());
  }
}",0.9946401225114856
92295,"@SuppressWarnings(""String_Node_Str"") public void testGetLocationRatio() throws Exception {
  ITmfContext context=fExperiment.seekEvent((ITmfLocation)null);
  double ratio=fExperiment.getLocationRatio(context.getLocation());
  assertEquals(""String_Node_Str"",0.0,ratio);
  context=fExperiment.seekEvent(NB_EVENTS / 2);
  ratio=fExperiment.getLocationRatio(context.getLocation());
  assertEquals(""String_Node_Str"",(double)(NB_EVENTS / 2) / NB_EVENTS,ratio);
  context=fExperiment.seekEvent(NB_EVENTS - 1);
  ratio=fExperiment.getLocationRatio(context.getLocation());
  assertEquals(""String_Node_Str"",(double)(NB_EVENTS - 1) / NB_EVENTS,ratio);
}","@SuppressWarnings(""String_Node_Str"") public void testGetLocationRatio() throws Exception {
  ITmfContext context=fExperiment.seekEvent((ITmfLocation)null);
  double ratio=fExperiment.getLocationRatio(context.getLocation());
  context=fExperiment.seekEvent(ratio);
  double ratio2=fExperiment.getLocationRatio(context.getLocation());
  assertEquals(""String_Node_Str"",ratio,ratio2);
  context=fExperiment.seekEvent(NB_EVENTS / 2);
  ratio=fExperiment.getLocationRatio(context.getLocation());
  context=fExperiment.seekEvent(ratio);
  ratio2=fExperiment.getLocationRatio(context.getLocation());
  assertEquals(""String_Node_Str"",ratio,ratio2);
  context=fExperiment.seekEvent(NB_EVENTS - 1);
  ratio=fExperiment.getLocationRatio(context.getLocation());
  context=fExperiment.seekEvent(ratio);
  ratio2=fExperiment.getLocationRatio(context.getLocation());
  assertEquals(""String_Node_Str"",ratio,ratio2);
}",0.6705577172503242
92296,"@Override @SuppressWarnings(""String_Node_Str"") public String toString(){
  StringBuilder result=new StringBuilder(""String_Node_Str"");
  TmfRankedLocation[] locations=((TmfLocationArray)getLocation()).getLocations();
  for (  TmfRankedLocation location : locations) {
    result.append(""String_Node_Str"" + location + ""String_Node_Str"");
  }
  result.append(""String_Node_Str"");
  return result.toString();
}","@Override @SuppressWarnings(""String_Node_Str"") public String toString(){
  StringBuilder result=new StringBuilder(""String_Node_Str"");
  ITmfLocation<? extends Comparable<?>>[] locations=((TmfLocationArray)getLocation()).getLocations();
  for (  ITmfLocation<?> location : locations) {
    result.append(""String_Node_Str"" + location + ""String_Node_Str"");
  }
  result.append(""String_Node_Str"");
  return result.toString();
}",0.7753623188405797
92297,"@Override public TmfLocationArray clone(){
  TmfRankedLocation[] clones=new TmfRankedLocation[fLocations.length];
  for (int i=0; i < fLocations.length; i++) {
    TmfRankedLocation location=fLocations[i];
    clones[i]=(location != null) ? location.clone() : null;
  }
  return new TmfLocationArray(clones);
}","@Override public TmfLocationArray clone(){
  ITmfLocation<? extends Comparable<?>>[] clones=(ITmfLocation<? extends Comparable<?>>[])new ITmfLocation<?>[fLocations.length];
  for (int i=0; i < fLocations.length; i++) {
    ITmfLocation<?> location=fLocations[i];
    clones[i]=(location != null) ? location.clone() : null;
  }
  return new TmfLocationArray(clones);
}",0.7385524372230429
92298,"/** 
 * The standard constructor
 * @param locations the locations
 */
public TmfRankedLocation[] getLocations(){
  return fLocations;
}","/** 
 * The standard constructor
 * @param locations the locations
 */
public ITmfLocation<? extends Comparable<?>>[] getLocations(){
  return fLocations;
}",0.8904109589041096
92299,"@Override public int compareTo(TmfLocationArray o){
  for (int i=0; i < fLocations.length; i++) {
    TmfRankedLocation l1=fLocations[i];
    TmfRankedLocation l2=o.fLocations[i];
    int result=l1.compareTo(l2);
    if (result != 0) {
      return result;
    }
  }
  return 0;
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public int compareTo(TmfLocationArray o){
  for (int i=0; i < fLocations.length; i++) {
    ITmfLocation<? extends Comparable> l1=(ITmfLocation<? extends Comparable>)fLocations[i].getLocation();
    ITmfLocation<? extends Comparable> l2=(ITmfLocation<? extends Comparable>)o.fLocations[i].getLocation();
    int result=l1.getLocation().compareTo(l2.getLocation());
    if (result != 0) {
      return result;
    }
  }
  return 0;
}",0.6161745827984596
92300,"/** 
 * The standard constructor
 * @param locations the locations
 */
public TmfLocationArray(TmfRankedLocation[] locations){
  fLocations=locations;
}","/** 
 * The standard constructor
 * @param locations the locations
 */
public TmfLocationArray(ITmfLocation<? extends Comparable<?>>[] locations){
  fLocations=locations;
}",0.9012345679012346
92301,"protected void startFilterThread(){
synchronized (fFilterSyncObj) {
    if (fFilterThread != null) {
      fFilterThread.cancel();
    }
    final ITmfFilterTreeNode filter=(ITmfFilterTreeNode)fTable.getData(Key.FILTER_OBJ);
    fFilterThread=new FilterThread(filter);
    fFilterThread.start();
  }
}","protected void startFilterThread(){
synchronized (fFilterSyncObj) {
    final ITmfFilterTreeNode filter=(ITmfFilterTreeNode)fTable.getData(Key.FILTER_OBJ);
    if (fFilterThread == null || fFilterThread.filter != filter) {
      if (fFilterThread != null) {
        fFilterThread.cancel();
        fFilterThreadResume=false;
      }
      fFilterThread=new FilterThread(filter);
      fFilterThread.start();
    }
 else {
      fFilterThreadResume=true;
    }
  }
}",0.6057441253263708
92302,"protected void stopFilterThread(){
synchronized (fFilterSyncObj) {
    if (fFilterThread != null) {
      fFilterThread.cancel();
    }
  }
}","protected void stopFilterThread(){
synchronized (fFilterSyncObj) {
    if (fFilterThread != null) {
      fFilterThread.cancel();
      fFilterThread=null;
      fFilterThreadResume=false;
    }
  }
}",0.8269794721407625
92303,"@Override protected synchronized ITmfContext armRequest(final ITmfDataRequest<T> request){
  if (request instanceof ITmfEventRequest<?> && !TmfTimestamp.BIG_BANG.equals(((ITmfEventRequest<T>)request).getRange().getStartTime()) && request.getIndex() == 0) {
    final ITmfContext context=seekEvent(((ITmfEventRequest<T>)request).getRange().getStartTime());
    ((ITmfEventRequest<T>)request).setStartIndex((int)context.getRank());
    return context;
  }
  if ((fExperimentContext != null) && fExperimentContext.getRank() == request.getIndex()) {
    return fExperimentContext;
  }
  return seekEvent(request.getIndex());
}","@Override protected synchronized ITmfContext armRequest(final ITmfDataRequest<T> request){
  if (fTraces == null) {
    return null;
  }
  if (request instanceof ITmfEventRequest<?> && !TmfTimestamp.BIG_BANG.equals(((ITmfEventRequest<T>)request).getRange().getStartTime()) && request.getIndex() == 0) {
    final ITmfContext context=seekEvent(((ITmfEventRequest<T>)request).getRange().getStartTime());
    ((ITmfEventRequest<T>)request).setStartIndex((int)context.getRank());
    return context;
  }
  if ((fExperimentContext != null) && fExperimentContext.getRank() == request.getIndex()) {
    return fExperimentContext;
  }
  return seekEvent(request.getIndex());
}",0.9643410852713178
92304,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void init(final IEditorSite site,IEditorInput input) throws PartInitException {
  if (input instanceof TmfEditorInput) {
    fFile=((TmfEditorInput)input).getFile();
    fTrace=((TmfEditorInput)input).getTrace();
    input=new FileEditorInput(fFile);
  }
 else   if (input instanceof IFileEditorInput) {
    fFile=((IFileEditorInput)input).getFile();
    if (fFile == null)     throw new PartInitException(""String_Node_Str"" + input);
    try {
      final String traceTypeId=fFile.getPersistentProperty(TmfCommonConstants.TRACETYPE);
      if (traceTypeId == null)       throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
      if (traceTypeId.equals(TmfExperiment.class.getCanonicalName())) {
        final TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        final TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        if (project == null)         throw new PartInitException(Messages.OpenExperimentHandler_NoTraceType);
        for (        final ITmfProjectModelElement projectElement : project.getExperimentsFolder().getChildren()) {
          final String traceName=fFile.getParent().getName();
          if (projectElement.getName().equals(traceName)) {
            final TmfExperimentElement experimentElement=(TmfExperimentElement)projectElement;
            final List<TmfTraceElement> traceEntries=experimentElement.getTraces();
            final int nbTraces=traceEntries.size();
            int cacheSize=Integer.MAX_VALUE;
            final ITmfTrace<?>[] traces=new ITmfTrace[nbTraces];
            for (int i=0; i < nbTraces; i++) {
              final TmfTraceElement traceElement=traceEntries.get(i);
              final ITmfTrace trace=traceElement.instantiateTrace();
              final ITmfEvent traceEvent=traceElement.instantiateEvent();
              if ((trace == null) || (traceEvent == null)) {
                for (int j=0; j < i; j++)                 traces[j].dispose();
                throw new PartInitException(Messages.OpenExperimentHandler_NoTraceType);
              }
              try {
                trace.initTrace(traceElement.getResource(),traceElement.getLocation().getPath(),traceEvent.getClass());
              }
 catch (              final TmfTraceException e) {
              }
              cacheSize=Math.min(cacheSize,trace.getCacheSize());
              traces[i]=trace;
            }
            final TmfExperiment experiment=new TmfExperiment(ITmfEvent.class,experimentElement.getName(),traces,cacheSize);
            experiment.setBookmarksFile(fFile);
            fTrace=experiment;
            experiment.initTrace(null,null,null);
            break;
          }
        }
      }
 else       if (traceTypeId.equals(TmfTrace.class.getCanonicalName())) {
        final TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        final TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        for (        final ITmfProjectModelElement projectElement : project.getTracesFolder().getChildren()) {
          final String traceName=fFile.getParent().getName();
          if (projectElement.getName().equals(traceName)) {
            final TmfTraceElement traceElement=(TmfTraceElement)projectElement;
            final ITmfTrace trace=traceElement.instantiateTrace();
            final ITmfEvent traceEvent=traceElement.instantiateEvent();
            if ((trace == null) || (traceEvent == null))             throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
            try {
              trace.initTrace(traceElement.getResource(),traceElement.getLocation().getPath(),traceEvent.getClass());
            }
 catch (            final TmfTraceException e) {
            }
            fTrace=trace;
            break;
          }
        }
      }
 else {
        final TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        final TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        for (        final ITmfProjectModelElement projectElement : project.getTracesFolder().getChildren())         if (projectElement.getResource().equals(fFile)) {
          final TmfTraceElement traceElement=(TmfTraceElement)projectElement;
          final ITmfTrace trace=traceElement.instantiateTrace();
          final ITmfEvent traceEvent=traceElement.instantiateEvent();
          if ((trace == null) || (traceEvent == null))           throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
          try {
            trace.initTrace(traceElement.getResource(),traceElement.getLocation().getPath(),traceEvent.getClass());
          }
 catch (          final TmfTraceException e) {
          }
          fTrace=trace;
          break;
        }
      }
    }
 catch (    final InvalidRegistryObjectException e) {
      Activator.getDefault().logError(""String_Node_Str"",e);
    }
catch (    final CoreException e) {
      Activator.getDefault().logError(""String_Node_Str"",e);
    }
  }
 else   throw new PartInitException(""String_Node_Str"" + input.getClass());
  if (fTrace == null)   throw new PartInitException(""String_Node_Str"" + fFile.getName());
  super.setSite(site);
  super.setInput(input);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void init(final IEditorSite site,IEditorInput input) throws PartInitException {
  if (input instanceof TmfEditorInput) {
    fFile=((TmfEditorInput)input).getFile();
    fTrace=((TmfEditorInput)input).getTrace();
    input=new FileEditorInput(fFile);
  }
 else   if (input instanceof IFileEditorInput) {
    fFile=((IFileEditorInput)input).getFile();
    if (fFile == null)     throw new PartInitException(""String_Node_Str"" + input);
    try {
      final String traceTypeId=fFile.getPersistentProperty(TmfCommonConstants.TRACETYPE);
      if (traceTypeId == null)       throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
      if (traceTypeId.equals(TmfExperiment.class.getCanonicalName())) {
        final TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        final TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        if (project == null)         throw new PartInitException(Messages.OpenExperimentHandler_NoTraceType);
        for (        final ITmfProjectModelElement projectElement : project.getExperimentsFolder().getChildren()) {
          final String traceName=fFile.getParent().getName();
          if (projectElement.getName().equals(traceName)) {
            final TmfExperimentElement experimentElement=(TmfExperimentElement)projectElement;
            final List<TmfTraceElement> traceEntries=experimentElement.getTraces();
            final int nbTraces=traceEntries.size();
            int cacheSize=Integer.MAX_VALUE;
            final ITmfTrace<?>[] traces=new ITmfTrace[nbTraces];
            for (int i=0; i < nbTraces; i++) {
              final TmfTraceElement traceElement=traceEntries.get(i);
              final ITmfTrace trace=traceElement.instantiateTrace();
              final ITmfEvent traceEvent=traceElement.instantiateEvent();
              if ((trace == null) || (traceEvent == null)) {
                for (int j=0; j < i; j++)                 traces[j].dispose();
                throw new PartInitException(Messages.OpenExperimentHandler_NoTraceType);
              }
              try {
                trace.initTrace(traceElement.getResource(),traceElement.getLocation().getPath(),traceEvent.getClass());
              }
 catch (              final TmfTraceException e) {
              }
              cacheSize=Math.min(cacheSize,trace.getCacheSize());
              traces[i]=trace;
            }
            final TmfExperiment experiment=new TmfExperiment(ITmfEvent.class,experimentElement.getName(),traces,cacheSize){
              @Override public void initTrace(              IResource resource,              String path,              Class type){
                super.initTrace(resource,path,type);
                getIndexer().buildIndex(getNbEvents(),TmfTimeRange.ETERNITY,false);
              }
            }
;
            experiment.setBookmarksFile(fFile);
            fTrace=experiment;
            experiment.initTrace(null,null,null);
            break;
          }
        }
      }
 else       if (traceTypeId.equals(TmfTrace.class.getCanonicalName())) {
        final TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        final TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        for (        final ITmfProjectModelElement projectElement : project.getTracesFolder().getChildren()) {
          final String traceName=fFile.getParent().getName();
          if (projectElement.getName().equals(traceName)) {
            final TmfTraceElement traceElement=(TmfTraceElement)projectElement;
            final ITmfTrace trace=traceElement.instantiateTrace();
            final ITmfEvent traceEvent=traceElement.instantiateEvent();
            if ((trace == null) || (traceEvent == null))             throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
            try {
              trace.initTrace(traceElement.getResource(),traceElement.getLocation().getPath(),traceEvent.getClass());
            }
 catch (            final TmfTraceException e) {
            }
            fTrace=trace;
            break;
          }
        }
      }
 else {
        final TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        final TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        for (        final ITmfProjectModelElement projectElement : project.getTracesFolder().getChildren())         if (projectElement.getResource().equals(fFile)) {
          final TmfTraceElement traceElement=(TmfTraceElement)projectElement;
          final ITmfTrace trace=traceElement.instantiateTrace();
          final ITmfEvent traceEvent=traceElement.instantiateEvent();
          if ((trace == null) || (traceEvent == null))           throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
          try {
            trace.initTrace(traceElement.getResource(),traceElement.getLocation().getPath(),traceEvent.getClass());
          }
 catch (          final TmfTraceException e) {
          }
          fTrace=trace;
          break;
        }
      }
    }
 catch (    final InvalidRegistryObjectException e) {
      Activator.getDefault().logError(""String_Node_Str"",e);
    }
catch (    final CoreException e) {
      Activator.getDefault().logError(""String_Node_Str"",e);
    }
  }
 else   throw new PartInitException(""String_Node_Str"" + input.getClass());
  if (fTrace == null)   throw new PartInitException(""String_Node_Str"" + fFile.getName());
  super.setSite(site);
  super.setInput(input);
}",0.9731033866499866
92305,"@Override public synchronized ITmfContext seekEvent(final ITmfTimestamp timestamp){
  if (timestamp == null) {
    ITmfContext context=seekEvent((ITmfLocation<?>)null);
    context.setRank(0);
    return context;
  }
  ITmfContext context=fIndexer.seekIndex(timestamp);
  final ITmfContext nextEventContext=context.clone();
  ITmfEvent event=getNext(nextEventContext);
  while (event != null && event.getTimestamp().compareTo(timestamp,false) < 0) {
    getNext(context);
    event=getNext(nextEventContext);
  }
  if (event == null) {
    context.setLocation(null);
    context.setRank(ITmfContext.UNKNOWN_RANK);
  }
  return context;
}","@Override public synchronized ITmfContext seekEvent(final ITmfTimestamp timestamp){
  if (timestamp == null) {
    ITmfContext context=seekEvent((ITmfLocation<?>)null);
    context.setRank(0);
    return context;
  }
  ITmfContext context=fIndexer.seekIndex(timestamp);
  final ITmfContext nextEventContext=context.clone();
  ITmfEvent event=getNext(nextEventContext);
  while (event != null && event.getTimestamp().compareTo(timestamp,false) < 0) {
    context=nextEventContext.clone();
    event=getNext(nextEventContext);
  }
  if (event == null) {
    context.setLocation(null);
    context.setRank(ITmfContext.UNKNOWN_RANK);
  }
  return context;
}",0.9643410852713178
92306,"@Override @SuppressWarnings(""String_Node_Str"") public synchronized T getNext(ITmfContext context){
  if (!(context instanceof TmfExperimentContext)) {
    return null;
  }
  if (fTraces == null) {
    return null;
  }
  TmfExperimentContext expContext=(TmfExperimentContext)context;
  final int lastTrace=expContext.getLastTrace();
  if (lastTrace != TmfExperimentContext.NO_TRACE) {
    final ITmfContext traceContext=expContext.getContexts()[lastTrace];
    expContext.getEvents()[lastTrace]=fTraces[lastTrace].getNext(traceContext);
    expContext.setLastTrace(TmfExperimentContext.NO_TRACE);
  }
  int trace=TmfExperimentContext.NO_TRACE;
  ITmfTimestamp timestamp=TmfTimestamp.BIG_CRUNCH;
  for (int i=0; i < fTraces.length; i++) {
    final ITmfEvent event=expContext.getEvents()[i];
    if (event != null && event.getTimestamp() != null) {
      final ITmfTimestamp otherTS=event.getTimestamp();
      if (otherTS.compareTo(timestamp,true) < 0) {
        trace=i;
        timestamp=otherTS;
      }
    }
  }
  T event=null;
  if (trace != TmfExperimentContext.NO_TRACE) {
    event=(T)expContext.getEvents()[trace];
    if (event != null) {
      updateAttributes(expContext,event.getTimestamp());
      expContext.increaseRank();
      expContext.setLastTrace(trace);
      final TmfExperimentLocation location=(TmfExperimentLocation)expContext.getLocation();
      final ITmfContext traceContext=expContext.getContexts()[trace];
      location.getLocation().getLocations()[trace]=traceContext.getLocation().clone();
      fExperimentContext=expContext;
      processEvent(event);
    }
  }
  return event;
}","@Override @SuppressWarnings(""String_Node_Str"") public synchronized T getNext(ITmfContext context){
  if (!(context instanceof TmfExperimentContext)) {
    return null;
  }
  if (fTraces == null) {
    return null;
  }
  TmfExperimentContext expContext=(TmfExperimentContext)context;
  final int lastTrace=expContext.getLastTrace();
  if (lastTrace != TmfExperimentContext.NO_TRACE) {
    final ITmfContext traceContext=expContext.getContexts()[lastTrace];
    TmfExperimentLocation location=(TmfExperimentLocation)expContext.getLocation();
    if (location != null) {
      location.getLocation().getLocations()[lastTrace]=traceContext.getLocation().clone();
    }
    expContext.getEvents()[lastTrace]=fTraces[lastTrace].getNext(traceContext);
    expContext.setLastTrace(TmfExperimentContext.NO_TRACE);
  }
  int trace=TmfExperimentContext.NO_TRACE;
  ITmfTimestamp timestamp=TmfTimestamp.BIG_CRUNCH;
  for (int i=0; i < fTraces.length; i++) {
    final ITmfEvent event=expContext.getEvents()[i];
    if (event != null && event.getTimestamp() != null) {
      final ITmfTimestamp otherTS=event.getTimestamp();
      if (otherTS.compareTo(timestamp,true) < 0) {
        trace=i;
        timestamp=otherTS;
      }
    }
  }
  T event=null;
  if (trace != TmfExperimentContext.NO_TRACE) {
    event=(T)expContext.getEvents()[trace];
    if (event != null) {
      updateAttributes(expContext,event.getTimestamp());
      expContext.increaseRank();
      expContext.setLastTrace(trace);
      fExperimentContext=expContext;
      processEvent(event);
    }
  }
  return event;
}",0.8566061365059486
92307,"/** 
 * Method readNextEvent.
 * @param context ITmfContext
 * @return CtfTmfEvent
 * @see org.eclipse.linuxtools.tmf.core.trace.ITmfTrace#getNext(ITmfContext)
 */
@Override public synchronized CtfTmfEvent getNext(final ITmfContext context){
  CtfTmfEvent event=null;
  if (context instanceof CtfTmfLightweightContext) {
    CtfTmfLightweightContext ctfContext=(CtfTmfLightweightContext)context;
    event=ctfContext.getCurrentEvent();
    if (event != null) {
      updateAttributes(context,event.getTimestamp());
      ctfContext.advance();
      ctfContext.increaseRank();
    }
  }
  return event;
}","/** 
 * Method readNextEvent.
 * @param context ITmfContext
 * @return CtfTmfEvent
 * @see org.eclipse.linuxtools.tmf.core.trace.ITmfTrace#getNext(ITmfContext)
 */
@Override public synchronized CtfTmfEvent getNext(final ITmfContext context){
  CtfTmfEvent event=null;
  if (context instanceof CtfTmfLightweightContext) {
    if (CtfLocation.INVALID_LOCATION.equals(context.getLocation())) {
      return null;
    }
    CtfTmfLightweightContext ctfContext=(CtfTmfLightweightContext)context;
    event=ctfContext.getCurrentEvent();
    if (event != null) {
      updateAttributes(context,event.getTimestamp());
      ctfContext.advance();
      ctfContext.increaseRank();
    }
  }
  return event;
}",0.926979246733282
92308,"@Override protected synchronized void initialize(final IResource resource,final String path,final Class<LttngEvent> eventType) throws TmfTraceException {
  try {
    currentJniTrace=JniTraceFactory.getJniTrace(path,traceLibPath,SHOW_LTT_DEBUG_DEFAULT);
  }
 catch (  final Exception e) {
    throw new TmfTraceException(e.getMessage());
  }
  traceTypes=new HashMap<Integer,LttngEventType>();
  traceTypeNames=new Vector<Integer>();
  initialiseEventTypes(currentJniTrace);
  eventTimestamp=new LttngTimestamp();
  eventSource=""String_Node_Str"";
  this.eventType=new LttngEventType();
  eventContent=new LttngEventContent(currentLttngEvent);
  eventReference=getName();
  currentLttngEvent=new LttngEvent(this,eventTimestamp,eventSource,this.eventType,eventContent,eventReference,null);
  previousLocation=new LttngLocation();
  eventContent.setEvent(currentLttngEvent);
  setParser((ITmfEventParser<LttngEvent>)this);
  setCacheSize(CHECKPOINT_PAGE_SIZE);
  initializeStreamingMonitor();
}","@Override protected synchronized void initialize(final IResource resource,final String path,final Class<LttngEvent> eventType) throws TmfTraceException {
  try {
    IProject project=resource.getProject();
    traceLibPath=(project != null) ? TraceHelper.getTraceLibDirFromProject(project) : null;
    currentJniTrace=JniTraceFactory.getJniTrace(path,traceLibPath,SHOW_LTT_DEBUG_DEFAULT);
  }
 catch (  final Exception e) {
    throw new TmfTraceException(e.getMessage());
  }
  traceTypes=new HashMap<Integer,LttngEventType>();
  traceTypeNames=new Vector<Integer>();
  initialiseEventTypes(currentJniTrace);
  eventTimestamp=new LttngTimestamp();
  eventSource=""String_Node_Str"";
  this.eventType=new LttngEventType();
  eventContent=new LttngEventContent(currentLttngEvent);
  eventReference=getName();
  currentLttngEvent=new LttngEvent(this,eventTimestamp,eventSource,this.eventType,eventContent,eventReference,null);
  previousLocation=new LttngLocation();
  eventContent.setEvent(currentLttngEvent);
  setParser((ITmfEventParser<LttngEvent>)this);
  setCacheSize(CHECKPOINT_PAGE_SIZE);
  initializeStreamingMonitor();
}",0.9357277882797732
92309,"@Override @SuppressWarnings(""String_Node_Str"") public synchronized T getNext(ITmfContext context){
  if (!(context instanceof TmfExperimentContext)) {
    return null;
  }
  TmfExperimentContext expContext=(TmfExperimentContext)context;
  final int lastTrace=expContext.getLastTrace();
  if (lastTrace != TmfExperimentContext.NO_TRACE) {
    final ITmfContext traceContext=expContext.getContexts()[lastTrace];
    TmfExperimentLocation location=(TmfExperimentLocation)expContext.getLocation();
    if (location != null) {
      location.getLocation().getLocations()[lastTrace]=traceContext.getLocation().clone();
    }
    expContext.getEvents()[lastTrace]=fTraces[lastTrace].getNext(traceContext);
    expContext.setLastTrace(TmfExperimentContext.NO_TRACE);
  }
  int trace=TmfExperimentContext.NO_TRACE;
  ITmfTimestamp timestamp=TmfTimestamp.BIG_CRUNCH;
  for (int i=0; i < fTraces.length; i++) {
    final ITmfEvent event=expContext.getEvents()[i];
    if (event != null && event.getTimestamp() != null) {
      final ITmfTimestamp otherTS=event.getTimestamp();
      if (otherTS.compareTo(timestamp,true) < 0) {
        trace=i;
        timestamp=otherTS;
      }
    }
  }
  T event=null;
  if (trace != TmfExperimentContext.NO_TRACE) {
    event=(T)expContext.getEvents()[trace];
    if (event != null) {
      updateAttributes(expContext,event.getTimestamp());
      expContext.increaseRank();
      expContext.setLastTrace(trace);
      fExperimentContext=expContext;
      processEvent(event);
    }
  }
  return event;
}","@Override @SuppressWarnings(""String_Node_Str"") public synchronized T getNext(ITmfContext context){
  if (!(context instanceof TmfExperimentContext)) {
    return null;
  }
  if (fTraces == null) {
    return null;
  }
  TmfExperimentContext expContext=(TmfExperimentContext)context;
  final int lastTrace=expContext.getLastTrace();
  if (lastTrace != TmfExperimentContext.NO_TRACE) {
    final ITmfContext traceContext=expContext.getContexts()[lastTrace];
    TmfExperimentLocation location=(TmfExperimentLocation)expContext.getLocation();
    if (location != null) {
      location.getLocation().getLocations()[lastTrace]=traceContext.getLocation().clone();
    }
    expContext.getEvents()[lastTrace]=fTraces[lastTrace].getNext(traceContext);
    expContext.setLastTrace(TmfExperimentContext.NO_TRACE);
  }
  int trace=TmfExperimentContext.NO_TRACE;
  ITmfTimestamp timestamp=TmfTimestamp.BIG_CRUNCH;
  for (int i=0; i < fTraces.length; i++) {
    final ITmfEvent event=expContext.getEvents()[i];
    if (event != null && event.getTimestamp() != null) {
      final ITmfTimestamp otherTS=event.getTimestamp();
      if (otherTS.compareTo(timestamp,true) < 0) {
        trace=i;
        timestamp=otherTS;
      }
    }
  }
  T event=null;
  if (trace != TmfExperimentContext.NO_TRACE) {
    event=(T)expContext.getEvents()[trace];
    if (event != null) {
      updateAttributes(expContext,event.getTimestamp());
      expContext.increaseRank();
      expContext.setLastTrace(trace);
      fExperimentContext=expContext;
      processEvent(event);
    }
  }
  return event;
}",0.9851994851994852
92310,"@Override public void mouseUp(MouseEvent event){
  if (fMouseDown) {
    fMouseDown=false;
    ((HistogramView)fParentView).updateTimeRange(fRangeStartTime,fRangeStartTime + fZoom.getDuration());
  }
}","@Override public void mouseUp(MouseEvent event){
  if (fMouseDown) {
    fMouseDown=false;
    if (event.x == fStartPosition) {
      super.mouseDown(event);
      return;
    }
    ((HistogramView)fParentView).updateTimeRange(fRangeStartTime,fRangeStartTime + fZoom.getDuration());
  }
}",0.8220858895705522
92311,"@Override public void mouseDown(MouseEvent event){
  long timestamp=getTimestamp(event.x);
  if ((timestamp < fZoom.getStartTime()) || (timestamp > fZoom.getEndTime())) {
    super.mouseDown(event);
    return;
  }
  fMouseDown=true;
  fStartPosition=event.x;
}","@Override public void mouseDown(MouseEvent event){
  fMouseDown=true;
  fStartPosition=event.x;
}",0.5418994413407822
92312,"@SuppressWarnings(""String_Node_Str"") private synchronized static ITmfTrace<LttngEvent>[] setupTrace(final String path){
  if (fTestTraces == null) {
    fTestTraces=new ITmfTrace[1];
    try {
      final URL location=FileLocator.find(FrameworkUtil.getBundle(LTTngExperimentTest.class),new Path(path),null);
      final File testfile=new File(FileLocator.toFileURL(location).toURI());
      final LTTngTrace trace=new LTTngTrace(null,testfile.getPath(),true);
      fTestTraces[0]=trace;
    }
 catch (    final URISyntaxException e) {
      e.printStackTrace();
    }
catch (    final IOException e) {
      e.printStackTrace();
    }
catch (    final Exception e) {
      e.printStackTrace();
    }
  }
  return fTestTraces;
}","@SuppressWarnings(""String_Node_Str"") private synchronized static ITmfTrace<LttngEvent>[] setupTrace(final String path){
  if (fTestTraces == null) {
    fTestTraces=new ITmfTrace[1];
    try {
      final URL location=FileLocator.find(FrameworkUtil.getBundle(LTTngExperimentTest.class),new Path(path),null);
      final File testfile=new File(FileLocator.toFileURL(location).toURI());
      final LTTngTrace trace=new LTTngTrace(null,testfile.getPath(),false);
      fTestTraces[0]=trace;
    }
 catch (    final URISyntaxException e) {
      e.printStackTrace();
    }
catch (    final IOException e) {
      e.printStackTrace();
    }
catch (    final Exception e) {
      e.printStackTrace();
    }
  }
  return fTestTraces;
}",0.9951956074124916
92313,"public void testEmptyTmfTraceIndexing() throws Exception {
  assertEquals(""String_Node_Str"",ITmfTrace.DEFAULT_TRACE_CACHE_SIZE,fEmptyTrace.getCacheSize());
  assertEquals(""String_Node_Str"",0,fEmptyTrace.getNbEvents());
  assertEquals(""String_Node_Str"",TmfTimestamp.BIG_CRUNCH,fEmptyTrace.getTimeRange().getStartTime());
  assertEquals(""String_Node_Str"",TmfTimestamp.BIG_BANG,fEmptyTrace.getTimeRange().getEndTime());
  assertEquals(""String_Node_Str"",TmfTimestamp.BIG_CRUNCH,fEmptyTrace.getStartTime());
  assertEquals(""String_Node_Str"",TmfTimestamp.BIG_BANG,fEmptyTrace.getEndTime());
  List<TmfCheckpoint> checkpoints=fEmptyTrace.getIndexer().getCheckpoints();
  int pageSize=fEmptyTrace.getCacheSize();
  assertTrue(""String_Node_Str"",checkpoints != null);
  assertEquals(""String_Node_Str"",0,checkpoints.size());
  for (int i=0; i < checkpoints.size(); i++) {
    TmfCheckpoint checkpoint=checkpoints.get(i);
    TmfContext context=new TmfContext(checkpoint.getLocation(),i * pageSize);
    ITmfEvent event=fEmptyTrace.parseEvent(context);
    assertTrue(context.getRank() == i * pageSize);
    assertTrue((checkpoint.getTimestamp().compareTo(event.getTimestamp(),false) == 0));
  }
}","public void testEmptyTmfTraceIndexing() throws Exception {
  assertEquals(""String_Node_Str"",ITmfTrace.DEFAULT_TRACE_CACHE_SIZE,fEmptyTrace.getCacheSize());
  assertEquals(""String_Node_Str"",0,fEmptyTrace.getNbEvents());
  assertEquals(""String_Node_Str"",TmfTimestamp.BIG_CRUNCH,fEmptyTrace.getTimeRange().getStartTime());
  assertEquals(""String_Node_Str"",TmfTimestamp.BIG_BANG,fEmptyTrace.getTimeRange().getEndTime());
  assertEquals(""String_Node_Str"",TmfTimestamp.BIG_CRUNCH,fEmptyTrace.getStartTime());
  assertEquals(""String_Node_Str"",TmfTimestamp.BIG_BANG,fEmptyTrace.getEndTime());
  List<ITmfCheckpoint> checkpoints=fEmptyTrace.getIndexer().getCheckpoints();
  int pageSize=fEmptyTrace.getCacheSize();
  assertTrue(""String_Node_Str"",checkpoints != null);
  assertEquals(""String_Node_Str"",0,checkpoints.size());
  for (int i=0; i < checkpoints.size(); i++) {
    ITmfCheckpoint checkpoint=checkpoints.get(i);
    TmfContext context=new TmfContext(checkpoint.getLocation(),i * pageSize);
    ITmfEvent event=fEmptyTrace.parseEvent(context);
    assertTrue(context.getRank() == i * pageSize);
    assertTrue((checkpoint.getTimestamp().compareTo(event.getTimestamp(),false) == 0));
  }
}",0.9991568296795952
92314,"public void testTmfTraceIndexing() throws Exception {
  assertEquals(""String_Node_Str"",BLOCK_SIZE,fTrace.getCacheSize());
  assertEquals(""String_Node_Str"",NB_EVENTS,fTrace.getNbEvents());
  assertEquals(""String_Node_Str"",1,fTrace.getTimeRange().getStartTime().getValue());
  assertEquals(""String_Node_Str"",NB_EVENTS,fTrace.getTimeRange().getEndTime().getValue());
  assertEquals(""String_Node_Str"",1,fTrace.getStartTime().getValue());
  assertEquals(""String_Node_Str"",NB_EVENTS,fTrace.getEndTime().getValue());
  List<TmfCheckpoint> checkpoints=fTrace.getIndexer().getCheckpoints();
  int pageSize=fTrace.getCacheSize();
  assertTrue(""String_Node_Str"",checkpoints != null);
  assertEquals(""String_Node_Str"",NB_EVENTS / BLOCK_SIZE,checkpoints.size());
  for (int i=0; i < checkpoints.size(); i++) {
    TmfCheckpoint checkpoint=checkpoints.get(i);
    TmfContext context=new TmfContext(checkpoint.getLocation(),i * pageSize);
    ITmfEvent event=fTrace.parseEvent(context);
    assertTrue(context.getRank() == i * pageSize);
    assertTrue((checkpoint.getTimestamp().compareTo(event.getTimestamp(),false) == 0));
  }
}","public void testTmfTraceIndexing() throws Exception {
  assertEquals(""String_Node_Str"",BLOCK_SIZE,fTrace.getCacheSize());
  assertEquals(""String_Node_Str"",NB_EVENTS,fTrace.getNbEvents());
  assertEquals(""String_Node_Str"",1,fTrace.getTimeRange().getStartTime().getValue());
  assertEquals(""String_Node_Str"",NB_EVENTS,fTrace.getTimeRange().getEndTime().getValue());
  assertEquals(""String_Node_Str"",1,fTrace.getStartTime().getValue());
  assertEquals(""String_Node_Str"",NB_EVENTS,fTrace.getEndTime().getValue());
  List<ITmfCheckpoint> checkpoints=fTrace.getIndexer().getCheckpoints();
  int pageSize=fTrace.getCacheSize();
  assertTrue(""String_Node_Str"",checkpoints != null);
  assertEquals(""String_Node_Str"",NB_EVENTS / BLOCK_SIZE,checkpoints.size());
  for (int i=0; i < checkpoints.size(); i++) {
    ITmfCheckpoint checkpoint=checkpoints.get(i);
    TmfContext context=new TmfContext(checkpoint.getLocation(),i * pageSize);
    ITmfEvent event=fTrace.parseEvent(context);
    assertTrue(context.getRank() == i * pageSize);
    assertTrue((checkpoint.getTimestamp().compareTo(event.getTimestamp(),false) == 0));
  }
}",0.999104744852283
92315,"public List<TmfCheckpoint> getCheckpoints(){
  return getTraceIndex();
}","public List<ITmfCheckpoint> getCheckpoints(){
  return getTraceIndex();
}",0.993103448275862
92316,"public void testTmfTraceIndexing() throws Exception {
  assertEquals(""String_Node_Str"",BLOCK_SIZE,fExperiment.getCacheSize());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getNbEvents());
  assertEquals(""String_Node_Str"",1,fExperiment.getTimeRange().getStartTime().getValue());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getTimeRange().getEndTime().getValue());
  assertEquals(""String_Node_Str"",1,fExperiment.getStartTime().getValue());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getEndTime().getValue());
  List<TmfCheckpoint> checkpoints=fExperiment.getIndexer().getCheckpoints();
  int pageSize=fExperiment.getCacheSize();
  assertTrue(""String_Node_Str"",checkpoints != null);
  assertEquals(""String_Node_Str"",NB_EVENTS / BLOCK_SIZE,checkpoints.size());
  for (int i=0; i < checkpoints.size(); i++) {
    TmfCheckpoint checkpoint=checkpoints.get(i);
    TmfExperimentLocation expLocation=(TmfExperimentLocation)checkpoint.getLocation();
    TmfLocationArray locations=expLocation.getLocation();
    ITmfContext[] trcContexts=new ITmfContext[2];
    trcContexts[0]=new TmfContext(locations.getLocations()[0],(i * pageSize) / 2);
    trcContexts[1]=new TmfContext(locations.getLocations()[1],(i * pageSize) / 2);
    TmfExperimentContext expContext=new TmfExperimentContext(trcContexts);
    expContext.getEvents()[0]=fTestTraces[0].getNext(fTestTraces[0].seekEvent((i * pageSize) / 2));
    expContext.getEvents()[1]=fTestTraces[1].getNext(fTestTraces[1].seekEvent((i * pageSize) / 2));
    ITmfEvent event=fExperiment.parseEvent(expContext);
    assertTrue(expContext.getRank() == i * pageSize);
    assertTrue((checkpoint.getTimestamp().compareTo(event.getTimestamp(),false) == 0));
  }
}","public void testTmfTraceIndexing() throws Exception {
  assertEquals(""String_Node_Str"",BLOCK_SIZE,fExperiment.getCacheSize());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getNbEvents());
  assertEquals(""String_Node_Str"",1,fExperiment.getTimeRange().getStartTime().getValue());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getTimeRange().getEndTime().getValue());
  assertEquals(""String_Node_Str"",1,fExperiment.getStartTime().getValue());
  assertEquals(""String_Node_Str"",NB_EVENTS,fExperiment.getEndTime().getValue());
  List<ITmfCheckpoint> checkpoints=fExperiment.getIndexer().getCheckpoints();
  int pageSize=fExperiment.getCacheSize();
  assertTrue(""String_Node_Str"",checkpoints != null);
  assertEquals(""String_Node_Str"",NB_EVENTS / BLOCK_SIZE,checkpoints.size());
  for (int i=0; i < checkpoints.size(); i++) {
    ITmfCheckpoint checkpoint=checkpoints.get(i);
    TmfExperimentLocation expLocation=(TmfExperimentLocation)checkpoint.getLocation();
    TmfLocationArray locations=expLocation.getLocation();
    ITmfContext[] trcContexts=new ITmfContext[2];
    trcContexts[0]=new TmfContext(locations.getLocations()[0],(i * pageSize) / 2);
    trcContexts[1]=new TmfContext(locations.getLocations()[1],(i * pageSize) / 2);
    TmfExperimentContext expContext=new TmfExperimentContext(trcContexts);
    expContext.getEvents()[0]=fTestTraces[0].getNext(fTestTraces[0].seekEvent((i * pageSize) / 2));
    expContext.getEvents()[1]=fTestTraces[1].getNext(fTestTraces[1].seekEvent((i * pageSize) / 2));
    ITmfEvent event=fExperiment.parseEvent(expContext);
    assertTrue(expContext.getRank() == i * pageSize);
    assertTrue((checkpoint.getTimestamp().compareTo(event.getTimestamp(),false) == 0));
  }
}",0.999420625724218
92317,"@Override protected synchronized void setUp() throws Exception {
  super.setUp();
  setupTrace(DIRECTORY + File.separator + TEST_STREAM1,DIRECTORY + File.separator + TEST_STREAM2);
  if (fExperiment == null) {
    fExperiment=new TmfExperimentStub<TmfEvent>(EXPERIMENT,fTestTraces,BLOCK_SIZE);
    fExperiment.getIndexer().buildIndex(0,TmfTimeRange.ETERNITY,true);
  }
}","@Override protected synchronized void setUp() throws Exception {
  super.setUp();
  if (fExperiment == null) {
    setupTrace(DIRECTORY + File.separator + TEST_STREAM1,DIRECTORY + File.separator + TEST_STREAM2);
    fExperiment=new TmfExperimentStub<TmfEvent>(EXPERIMENT,fTestTraces,BLOCK_SIZE);
    fExperiment.getIndexer().buildIndex(0,TmfTimeRange.ETERNITY,true);
  }
}",0.9191374663072776
92318,"@Override protected void tearDown() throws Exception {
  super.tearDown();
  fExperiment.dispose();
  fExperiment=null;
}","@Override protected void tearDown() throws Exception {
  super.tearDown();
  fExperiment.dispose();
  fExperiment=null;
  fTestTraces=null;
}",0.9236641221374046
92319,"public List<TmfCheckpoint> getCheckpoints(){
  return getTraceIndex();
}","public List<ITmfCheckpoint> getCheckpoints(){
  return getTraceIndex();
}",0.993103448275862
92320,"/** 
 * @return the trace index
 */
protected List<TmfCheckpoint> getTraceIndex(){
  return fTraceIndex;
}","/** 
 * @return the trace index
 */
protected List<ITmfCheckpoint> getTraceIndex(){
  return fTraceIndex;
}",0.9953051643192488
92321,"@Override public void buildIndex(final long offset,final TmfTimeRange range,final boolean waitForCompletion){
synchronized (fTraceIndex) {
    if (fIsIndexing) {
      return;
    }
    fIsIndexing=true;
  }
  final Job job=new Job(""String_Node_Str"" + fTrace.getName() + ""String_Node_Str""){
    @Override protected IStatus run(    final IProgressMonitor monitor){
      while (!monitor.isCanceled()) {
        try {
          Thread.sleep(100);
        }
 catch (        final InterruptedException e) {
          return Status.OK_STATUS;
        }
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
  fTraceIndex.clear();
  fIndexingRequest=new TmfEventRequest<ITmfEvent>(ITmfEvent.class,range,offset,TmfDataRequest.ALL_DATA,fCheckpointInterval,ITmfDataRequest.ExecutionType.BACKGROUND){
    private ITmfTimestamp startTime=null;
    private ITmfTimestamp lastTime=null;
    @Override public void handleData(    final ITmfEvent event){
      super.handleData(event);
      if (event != null) {
        final ITmfTimestamp timestamp=event.getTimestamp();
        if (startTime == null) {
          startTime=timestamp.clone();
        }
        lastTime=timestamp.clone();
        if ((getNbRead() % fCheckpointInterval) == 0) {
          updateTraceStatus();
        }
      }
    }
    @Override public void handleSuccess(){
      updateTraceStatus();
    }
    @Override public void handleCompleted(){
      job.cancel();
      super.handleCompleted();
      fIsIndexing=false;
    }
    private void updateTraceStatus(){
      if (getNbRead() != 0) {
        signalNewTimeRange(startTime,lastTime);
      }
    }
  }
;
  fTrace.sendRequest(fIndexingRequest);
  if (waitForCompletion) {
    try {
      fIndexingRequest.waitForCompletion();
    }
 catch (    final InterruptedException e) {
    }
  }
}","@Override public void buildIndex(final long offset,final TmfTimeRange range,final boolean waitForCompletion){
synchronized (fTraceIndex) {
    if (fIsIndexing) {
      return;
    }
    fIsIndexing=true;
  }
  final Job job=new Job(""String_Node_Str"" + fTrace.getName() + ""String_Node_Str""){
    @Override protected IStatus run(    final IProgressMonitor monitor){
      while (!monitor.isCanceled()) {
        try {
          Thread.sleep(100);
        }
 catch (        final InterruptedException e) {
          return Status.OK_STATUS;
        }
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
  fIndexingRequest=new TmfEventRequest<ITmfEvent>(ITmfEvent.class,range,offset,TmfDataRequest.ALL_DATA,fCheckpointInterval,ITmfDataRequest.ExecutionType.BACKGROUND){
    private ITmfTimestamp startTime=null;
    private ITmfTimestamp lastTime=null;
    @Override public void handleData(    final ITmfEvent event){
      super.handleData(event);
      if (event != null) {
        final ITmfTimestamp timestamp=event.getTimestamp();
        if (startTime == null) {
          startTime=timestamp.clone();
        }
        lastTime=timestamp.clone();
        if ((getNbRead() % fCheckpointInterval) == 0) {
          updateTraceStatus();
        }
      }
    }
    @Override public void handleSuccess(){
      updateTraceStatus();
    }
    @Override public void handleCompleted(){
      job.cancel();
      super.handleCompleted();
      fIsIndexing=false;
    }
    private void updateTraceStatus(){
      if (getNbRead() != 0) {
        signalNewTimeRange(startTime,lastTime);
      }
    }
  }
;
  fTrace.sendRequest(fIndexingRequest);
  if (waitForCompletion) {
    try {
      fIndexingRequest.waitForCompletion();
    }
 catch (    final InterruptedException e) {
    }
  }
}",0.993724420190996
92322,"/** 
 * Position the trace at the given checkpoint
 * @param checkpoint the checkpoint index
 * @return the corresponding context
 */
private ITmfContext seekCheckpoint(final int checkpoint){
  ITmfLocation<?> location=null;
  int index=checkpoint;
synchronized (fTraceIndex) {
    if (!fTraceIndex.isEmpty()) {
      if (index >= fTraceIndex.size()) {
        index=fTraceIndex.size() - 1;
      }
      location=fTraceIndex.get(index).getLocation();
    }
  }
  final ITmfContext context=fTrace.seekEvent(location);
  context.setRank((long)index * fCheckpointInterval);
  return context;
}","/** 
 * Position the trace at the given checkpoint
 * @param checkpoint the checkpoint index
 * @return the corresponding context
 */
private ITmfContext seekCheckpoint(final int checkpoint){
  ITmfLocation<?> location=null;
  int index=0;
synchronized (fTraceIndex) {
    if (!fTraceIndex.isEmpty()) {
      index=checkpoint;
      if (index >= fTraceIndex.size()) {
        index=fTraceIndex.size() - 1;
      }
      location=fTraceIndex.get(index).getLocation();
    }
  }
  final ITmfContext context=fTrace.seekEvent(location);
  context.setRank((long)index * fCheckpointInterval);
  return context;
}",0.9707602339181286
92323,"/** 
 * Full trace indexer
 * @param trace the trace to index
 * @param interval the checkpoints interval
 */
public TmfCheckpointIndexer(final ITmfTrace<ITmfEvent> trace,final int interval){
  fTrace=trace;
  fCheckpointInterval=interval;
  fTraceIndex=new ArrayList<TmfCheckpoint>();
  fIsIndexing=false;
}","/** 
 * Full trace indexer
 * @param trace the trace to index
 * @param interval the checkpoints interval
 */
public TmfCheckpointIndexer(final ITmfTrace<ITmfEvent> trace,final int interval){
  fTrace=trace;
  fCheckpointInterval=interval;
  fTraceIndex=new ArrayList<ITmfCheckpoint>();
  fIsIndexing=false;
}",0.9983792544570502
92324,"public CustomEventContent(CustomEvent parent,String content){
  super(ITmfEventField.ROOT_FIELD_ID,content);
}","public CustomEventContent(CustomEvent parent,StringBuffer content){
  super(ITmfEventField.ROOT_FIELD_ID,content);
}",0.9734513274336284
92325,"DataRequest(Class<T> dataType,int start,int nbRequested){
  super(dataType,start,nbRequested);
  fRank=start;
  fIndex=index;
}","DataRequest(Class<T> dataType,ITmfFilter filter,int start,int nbRequested){
  super(dataType,start,nbRequested);
  fFilter=filter;
  fRank=start;
  fIndex=index;
}",0.8758620689655172
92326,"@SuppressWarnings(""String_Node_Str"") public synchronized int getFilteredEventIndex(final long rank){
  int current;
  int startRank;
  TmfDataRequest<ITmfEvent> request;
synchronized (this) {
    int start=0;
    int end=fFilterIndex.size();
    if ((fCacheEndIndex - fCacheStartIndex) > 1) {
      if (rank < fCache[0].rank) {
        end=(fCacheStartIndex / fCache.length) + 1;
      }
 else       if (rank > fCache[fCacheEndIndex - fCacheStartIndex - 1].rank) {
        start=fCacheEndIndex / fCache.length;
      }
 else {
        for (int i=0; i < (fCacheEndIndex - fCacheStartIndex); i++) {
          if (fCache[i].rank >= rank) {
            return fCacheStartIndex + i;
          }
        }
        return fCacheEndIndex;
      }
    }
    current=(start + end) / 2;
    while (current != start) {
      if (rank < fFilterIndex.get(current)) {
        end=current;
        current=(start + end) / 2;
      }
 else {
        start=current;
        current=(start + end) / 2;
      }
    }
    startRank=fFilterIndex.get(current);
  }
  final int index=current * fCache.length;
class DataRequest<T extends ITmfEvent> extends TmfDataRequest<T> {
    int fRank;
    int fIndex;
    DataRequest(    Class<T> dataType,    int start,    int nbRequested){
      super(dataType,start,nbRequested);
      fRank=start;
      fIndex=index;
    }
    @Override public void handleData(    T event){
      super.handleData(event);
      if (isCancelled()) {
        return;
      }
      if (fRank >= rank) {
        cancel();
        return;
      }
      fRank++;
      if (fFilter.matches(event)) {
        fIndex++;
      }
    }
    public int getFilteredIndex(){
      return fIndex;
    }
  }
  request=new DataRequest<ITmfEvent>(ITmfEvent.class,startRank,TmfDataRequest.ALL_DATA);
  ((ITmfDataProvider<ITmfEvent>)fTrace).sendRequest(request);
  try {
    request.waitForCompletion();
    return ((DataRequest<ITmfEvent>)request).getFilteredIndex();
  }
 catch (  InterruptedException e) {
    Activator.getDefault().logError(""String_Node_Str"",e);
  }
  return 0;
}","@SuppressWarnings(""String_Node_Str"") public int getFilteredEventIndex(final long rank){
  int current;
  int startRank;
  TmfDataRequest<ITmfEvent> request;
  final ITmfFilter filter=fFilter;
synchronized (this) {
    int start=0;
    int end=fFilterIndex.size();
    if ((fCacheEndIndex - fCacheStartIndex) > 1) {
      if (rank < fCache[0].rank) {
        end=(fCacheStartIndex / fCache.length) + 1;
      }
 else       if (rank > fCache[fCacheEndIndex - fCacheStartIndex - 1].rank) {
        start=fCacheEndIndex / fCache.length;
      }
 else {
        for (int i=0; i < (fCacheEndIndex - fCacheStartIndex); i++) {
          if (fCache[i].rank >= rank) {
            return fCacheStartIndex + i;
          }
        }
        return fCacheEndIndex;
      }
    }
    current=(start + end) / 2;
    while (current != start) {
      if (rank < fFilterIndex.get(current)) {
        end=current;
        current=(start + end) / 2;
      }
 else {
        start=current;
        current=(start + end) / 2;
      }
    }
    startRank=fFilterIndex.size() > 0 ? fFilterIndex.get(current) : 0;
  }
  final int index=current * fCache.length;
class DataRequest<T extends ITmfEvent> extends TmfDataRequest<T> {
    ITmfFilter fFilter;
    int fRank;
    int fIndex;
    DataRequest(    Class<T> dataType,    ITmfFilter filter,    int start,    int nbRequested){
      super(dataType,start,nbRequested);
      fFilter=filter;
      fRank=start;
      fIndex=index;
    }
    @Override public void handleData(    T event){
      super.handleData(event);
      if (isCancelled()) {
        return;
      }
      if (fRank >= rank) {
        cancel();
        return;
      }
      fRank++;
      if (fFilter.matches(event)) {
        fIndex++;
      }
    }
    public int getFilteredIndex(){
      return fIndex;
    }
  }
  request=new DataRequest<ITmfEvent>(ITmfEvent.class,filter,startRank,TmfDataRequest.ALL_DATA);
  ((ITmfDataProvider<ITmfEvent>)fTrace).sendRequest(request);
  try {
    request.waitForCompletion();
    return ((DataRequest<ITmfEvent>)request).getFilteredIndex();
  }
 catch (  InterruptedException e) {
    Activator.getDefault().logError(""String_Node_Str"",e);
  }
  return 0;
}",0.9640760741958206
92327,"public synchronized void storeEvent(ITmfEvent event,long rank,int index){
  if (fCacheStartIndex == fCacheEndIndex) {
    fCacheStartIndex=index;
    fCacheEndIndex=index;
  }
  if (index == fCacheEndIndex) {
    int i=index - fCacheStartIndex;
    if (i < fCache.length) {
      fCache[i]=new CachedEvent(event.clone(),rank);
      fCacheEndIndex++;
    }
  }
  if ((fFilter != null) && ((index % fCache.length) == 0)) {
    int i=index / fCache.length;
    fFilterIndex.add(i,Integer.valueOf((int)rank));
  }
}","public synchronized void storeEvent(ITmfEvent event,long rank,int index){
  if (index == fCacheEndIndex) {
    int i=index - fCacheStartIndex;
    if (i < fCache.length) {
      fCache[i]=new CachedEvent(event.clone(),rank);
      fCacheEndIndex++;
    }
  }
  if ((fFilter != null) && ((index % fCache.length) == 0)) {
    int i=index / fCache.length;
    fFilterIndex.add(i,Integer.valueOf((int)rank));
  }
}",0.8893709327548807
92328,"/** 
 * @param parent
 * @param style
 */
public TmfVirtualTable(Composite parent,int style){
  super(parent,style & (~SWT.H_SCROLL) & (~SWT.V_SCROLL)& (~SWT.SINGLE)& (~SWT.FULL_SELECTION)& (~SWT.HIDE_SELECTION)& (~SWT.CHECK));
  createTable(style & (SWT.H_SCROLL | SWT.SINGLE | SWT.FULL_SELECTION| SWT.HIDE_SELECTION| SWT.CHECK));
  createSlider(style & SWT.V_SCROLL);
  setTabList(new Control[]{fTable});
  GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.horizontalSpacing=0;
  gridLayout.verticalSpacing=0;
  gridLayout.marginWidth=0;
  gridLayout.marginHeight=0;
  setLayout(gridLayout);
  GridData tableGridData=new GridData(SWT.FILL,SWT.FILL,true,true);
  fTable.setLayoutData(tableGridData);
  GridData sliderGridData=new GridData(SWT.FILL,SWT.FILL,false,true);
  fSlider.setLayoutData(sliderGridData);
  fTable.addMouseWheelListener(new MouseWheelListener(){
    @Override public void mouseScrolled(    MouseEvent event){
      if (fTableItemCount <= fFullyVisibleRows) {
        return;
      }
      fTableTopEventRank-=event.count;
      if (fTableTopEventRank < 0) {
        fTableTopEventRank=0;
      }
      int latestFirstRowOffset=fTableItemCount - fFullyVisibleRows;
      if (fTableTopEventRank > latestFirstRowOffset) {
        fTableTopEventRank=latestFirstRowOffset;
      }
      fSlider.setSelection(fTableTopEventRank);
      refreshTable();
    }
  }
);
  fTable.addListener(SWT.MouseWheel,new Listener(){
    @Override public void handleEvent(    Event event){
      event.doit=false;
    }
  }
);
  fTable.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent event){
      int tableHeight=Math.max(0,fTable.getClientArea().height - fTable.getHeaderHeight());
      fFullyVisibleRows=tableHeight / getItemHeight();
      if (fTableItemCount > 0) {
        fSlider.setThumb(Math.max(1,Math.min(fTableRows,fFullyVisibleRows)));
      }
    }
  }
);
  final String TOOLTIP_DATA_KEY=""String_Node_Str"";
  final Listener labelListener=new Listener(){
    @Override public void handleEvent(    Event event){
      Label label=(Label)event.widget;
      Shell shell=label.getShell();
switch (event.type) {
case SWT.MouseDown:
        Event e=new Event();
      e.item=(TableItem)label.getData(TOOLTIP_DATA_KEY);
    fTable.setSelection(new TableItem[]{(TableItem)e.item});
  fTable.notifyListeners(SWT.Selection,e);
shell.dispose();
fTable.setFocus();
break;
case SWT.MouseExit:
case SWT.MouseWheel:
shell.dispose();
break;
}
}
}
;
Listener tableListener=new Listener(){
Shell tip=null;
Label label=null;
@Override public void handleEvent(Event event){
switch (event.type) {
case SWT.Dispose:
case SWT.KeyDown:
case SWT.MouseMove:
{
if (tip == null) break;
tip.dispose();
tip=null;
label=null;
break;
}
case SWT.MouseHover:
{
TableItem item=fTable.getItem(new Point(event.x,event.y));
if (item != null) {
for (int i=0; i < fTable.getColumnCount(); i++) {
Rectangle bounds=item.getBounds(i);
if (bounds.contains(event.x,event.y)) {
if (tip != null && !tip.isDisposed()) tip.dispose();
if (tooltipProvider == null) {
return;
}
 else {
String tooltipText=tooltipProvider.getTooltip(i,item.getData());
if (tooltipText == null) return;
tip=new Shell(fTable.getShell(),SWT.ON_TOP | SWT.NO_FOCUS | SWT.TOOL);
tip.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
FillLayout layout=new FillLayout();
layout.marginWidth=2;
tip.setLayout(layout);
label=new Label(tip,SWT.WRAP);
label.setForeground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
label.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
label.setData(TOOLTIP_DATA_KEY,item);
label.setText(tooltipText);
label.addListener(SWT.MouseExit,labelListener);
label.addListener(SWT.MouseDown,labelListener);
label.addListener(SWT.MouseWheel,labelListener);
Point size=tip.computeSize(SWT.DEFAULT,SWT.DEFAULT);
Point pt=fTable.toDisplay(bounds.x,bounds.y);
tip.setBounds(pt.x,pt.y,size.x,size.y);
tip.setVisible(true);
}
break;
}
}
}
}
}
}
}
;
fTable.addListener(SWT.Dispose,tableListener);
fTable.addListener(SWT.KeyDown,tableListener);
fTable.addListener(SWT.MouseMove,tableListener);
fTable.addListener(SWT.MouseHover,tableListener);
addControlListener(new ControlAdapter(){
@Override public void controlResized(ControlEvent event){
resize();
}
}
);
refresh();
}","/** 
 * @param parent
 * @param style
 */
public TmfVirtualTable(Composite parent,int style){
  super(parent,style & (~SWT.H_SCROLL) & (~SWT.V_SCROLL)& (~SWT.SINGLE)& (~SWT.FULL_SELECTION)& (~SWT.HIDE_SELECTION)& (~SWT.CHECK));
  createTable(style & (SWT.H_SCROLL | SWT.SINGLE | SWT.FULL_SELECTION| SWT.HIDE_SELECTION| SWT.CHECK));
  createSlider(style & SWT.V_SCROLL);
  setTabList(new Control[]{fTable});
  GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.horizontalSpacing=0;
  gridLayout.verticalSpacing=0;
  gridLayout.marginWidth=0;
  gridLayout.marginHeight=0;
  setLayout(gridLayout);
  GridData tableGridData=new GridData(SWT.FILL,SWT.FILL,true,true);
  fTable.setLayoutData(tableGridData);
  GridData sliderGridData=new GridData(SWT.FILL,SWT.FILL,false,true);
  fSlider.setLayoutData(sliderGridData);
  fTable.addMouseWheelListener(new MouseWheelListener(){
    @Override public void mouseScrolled(    MouseEvent event){
      if (fTableItemCount <= fFullyVisibleRows) {
        return;
      }
      fTableTopEventRank-=event.count;
      if (fTableTopEventRank < 0) {
        fTableTopEventRank=0;
      }
      int latestFirstRowOffset=fTableItemCount - fFullyVisibleRows;
      if (fTableTopEventRank > latestFirstRowOffset) {
        fTableTopEventRank=latestFirstRowOffset;
      }
      fSlider.setSelection(fTableTopEventRank);
      refreshTable();
    }
  }
);
  fTable.addListener(SWT.MouseWheel,new Listener(){
    @Override public void handleEvent(    Event event){
      event.doit=false;
    }
  }
);
  fTable.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent event){
      int tableHeight=Math.max(0,fTable.getClientArea().height - fTable.getHeaderHeight());
      fFullyVisibleRows=tableHeight / getItemHeight();
      if (fTableItemCount > 0) {
        fSlider.setThumb(Math.max(1,Math.min(fTableRows,fFullyVisibleRows)));
      }
    }
  }
);
  final String TOOLTIP_DATA_KEY=""String_Node_Str"";
  final Listener labelListener=new Listener(){
    @Override public void handleEvent(    Event event){
      Label label=(Label)event.widget;
      Shell shell=label.getShell();
switch (event.type) {
case SWT.MouseDown:
        Event e=new Event();
      e.item=(TableItem)label.getData(TOOLTIP_DATA_KEY);
    fTable.setSelection(new TableItem[]{(TableItem)e.item});
  fTable.notifyListeners(SWT.Selection,e);
shell.dispose();
fTable.setFocus();
break;
case SWT.MouseExit:
case SWT.MouseWheel:
shell.dispose();
break;
}
}
}
;
Listener tableListener=new Listener(){
Shell tip=null;
Label label=null;
@Override public void handleEvent(Event event){
switch (event.type) {
case SWT.Dispose:
case SWT.KeyDown:
case SWT.MouseMove:
{
if (tip == null) {
break;
}
tip.dispose();
tip=null;
label=null;
break;
}
case SWT.MouseHover:
{
TableItem item=fTable.getItem(new Point(event.x,event.y));
if (item != null) {
for (int i=0; i < fTable.getColumnCount(); i++) {
Rectangle bounds=item.getBounds(i);
if (bounds.contains(event.x,event.y)) {
if (tip != null && !tip.isDisposed()) {
tip.dispose();
}
if (tooltipProvider == null) {
return;
}
 else {
String tooltipText=tooltipProvider.getTooltip(i,item.getData());
if (tooltipText == null) {
return;
}
tip=new Shell(fTable.getShell(),SWT.ON_TOP | SWT.NO_FOCUS | SWT.TOOL);
tip.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
FillLayout layout=new FillLayout();
layout.marginWidth=2;
tip.setLayout(layout);
label=new Label(tip,SWT.WRAP);
label.setForeground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
label.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
label.setData(TOOLTIP_DATA_KEY,item);
label.setText(tooltipText);
label.addListener(SWT.MouseExit,labelListener);
label.addListener(SWT.MouseDown,labelListener);
label.addListener(SWT.MouseWheel,labelListener);
Point size=tip.computeSize(SWT.DEFAULT,SWT.DEFAULT);
Point pt=fTable.toDisplay(bounds.x,bounds.y);
tip.setBounds(pt.x,pt.y,size.x,size.y);
tip.setVisible(true);
}
break;
}
}
}
}
}
}
}
;
fTable.addListener(SWT.Dispose,tableListener);
fTable.addListener(SWT.KeyDown,tableListener);
fTable.addListener(SWT.MouseMove,tableListener);
fTable.addListener(SWT.MouseHover,tableListener);
addControlListener(new ControlAdapter(){
@Override public void controlResized(ControlEvent event){
resize();
if (fTableItemCount > 0) {
fSlider.setThumb(Math.max(1,Math.min(fTableRows,fFullyVisibleRows)));
}
}
}
);
refresh();
}",0.9829678281197818
92329,"/** 
 * Handle key-based navigation in table.
 * @param event
 */
private void handleTableKeyEvent(KeyEvent event){
  int lastEventRank=fTableItemCount - 1;
  int lastPageTopEntryRank=Math.max(0,fTableItemCount - fFullyVisibleRows);
  int previousSelectedEventRank=fSelectedEventRank;
  int selectedRow=fSelectedEventRank - fTableTopEventRank;
  boolean needsRefresh=false;
switch (event.keyCode) {
case SWT.ARROW_DOWN:
{
      event.doit=false;
      if (fSelectedEventRank < lastEventRank) {
        fSelectedEventRank++;
        selectedRow=fSelectedEventRank - fTableTopEventRank;
        if (selectedRow >= fFullyVisibleRows) {
          fTableTopEventRank++;
          needsRefresh=true;
        }
      }
      break;
    }
case SWT.ARROW_UP:
{
    event.doit=false;
    if (fSelectedEventRank > 0) {
      fSelectedEventRank--;
      selectedRow=fSelectedEventRank - fTableTopEventRank;
      if (selectedRow < fFrozenRowCount && fTableTopEventRank > 0) {
        fTableTopEventRank--;
        needsRefresh=true;
      }
    }
    break;
  }
case SWT.END:
{
  event.doit=false;
  fTableTopEventRank=lastPageTopEntryRank;
  fSelectedEventRank=lastEventRank;
  needsRefresh=true;
  break;
}
case SWT.HOME:
{
event.doit=false;
fSelectedEventRank=fFrozenRowCount;
fTableTopEventRank=0;
needsRefresh=true;
break;
}
case SWT.PAGE_DOWN:
{
event.doit=false;
if (fSelectedEventRank < lastEventRank) {
fSelectedEventRank+=fFullyVisibleRows;
if (fSelectedEventRank > lastEventRank) {
  fSelectedEventRank=lastEventRank;
}
selectedRow=fSelectedEventRank - fTableTopEventRank;
if (selectedRow > fFullyVisibleRows - 1) {
  fTableTopEventRank+=fFullyVisibleRows;
  if (fTableTopEventRank > lastPageTopEntryRank) {
    fTableTopEventRank=lastPageTopEntryRank;
  }
  needsRefresh=true;
}
}
break;
}
case SWT.PAGE_UP:
{
event.doit=false;
if (fSelectedEventRank > 0) {
fSelectedEventRank-=fFullyVisibleRows;
if (fSelectedEventRank < fFrozenRowCount) {
fSelectedEventRank=fFrozenRowCount;
}
selectedRow=fSelectedEventRank - fTableTopEventRank;
if (selectedRow < 0) {
fTableTopEventRank-=fFullyVisibleRows;
if (fTableTopEventRank < 0) {
  fTableTopEventRank=0;
}
needsRefresh=true;
}
}
break;
}
default :
{
return;
}
}
boolean done=true;
if (needsRefresh) {
done=refreshTable();
}
 else {
fTable.select(selectedRow);
}
if (fFullyVisibleRows < fTableItemCount) {
fSlider.setSelection(fTableTopEventRank);
}
if (fSelectedEventRank != previousSelectedEventRank && fTable.getSelection().length > 0) {
if (done) {
Event e=new Event();
e.item=fTable.getSelection()[0];
fTable.notifyListeners(SWT.Selection,e);
}
 else {
fPendingSelection=true;
}
}
}","/** 
 * Handle key-based navigation in table.
 * @param event
 */
private void handleTableKeyEvent(KeyEvent event){
  int lastEventRank=fTableItemCount - 1;
  int lastPageTopEntryRank=Math.max(0,fTableItemCount - fFullyVisibleRows);
  int previousSelectedEventRank=fSelectedEventRank;
  int selectedRow=fSelectedEventRank - fTableTopEventRank;
  boolean needsRefresh=false;
switch (event.keyCode) {
case SWT.ARROW_DOWN:
{
      event.doit=false;
      if (fSelectedEventRank < lastEventRank) {
        fSelectedEventRank++;
        selectedRow=fSelectedEventRank - fTableTopEventRank;
        if (selectedRow >= fFullyVisibleRows) {
          fTableTopEventRank++;
          needsRefresh=true;
        }
      }
      break;
    }
case SWT.ARROW_UP:
{
    event.doit=false;
    if (fSelectedEventRank > 0) {
      fSelectedEventRank--;
      selectedRow=fSelectedEventRank - fTableTopEventRank;
      if (selectedRow < fFrozenRowCount && fTableTopEventRank > 0) {
        fTableTopEventRank--;
        needsRefresh=true;
      }
    }
    break;
  }
case SWT.END:
{
  event.doit=false;
  fTableTopEventRank=lastPageTopEntryRank;
  fSelectedEventRank=lastEventRank;
  needsRefresh=true;
  break;
}
case SWT.HOME:
{
event.doit=false;
fSelectedEventRank=fFrozenRowCount;
fTableTopEventRank=0;
needsRefresh=true;
break;
}
case SWT.PAGE_DOWN:
{
event.doit=false;
if (fSelectedEventRank < lastEventRank) {
fSelectedEventRank+=fFullyVisibleRows;
if (fSelectedEventRank > lastEventRank) {
  fSelectedEventRank=lastEventRank;
}
selectedRow=fSelectedEventRank - fTableTopEventRank;
if (selectedRow > fFullyVisibleRows - 1) {
  fTableTopEventRank+=fFullyVisibleRows;
  if (fTableTopEventRank > lastPageTopEntryRank) {
    fTableTopEventRank=lastPageTopEntryRank;
  }
  needsRefresh=true;
}
}
break;
}
case SWT.PAGE_UP:
{
event.doit=false;
if (fSelectedEventRank > 0) {
fSelectedEventRank-=fFullyVisibleRows;
if (fSelectedEventRank < fFrozenRowCount) {
fSelectedEventRank=fFrozenRowCount;
}
selectedRow=fSelectedEventRank - fTableTopEventRank;
if (selectedRow < 0) {
fTableTopEventRank-=fFullyVisibleRows;
if (fTableTopEventRank < 0) {
  fTableTopEventRank=0;
}
needsRefresh=true;
}
}
break;
}
default :
{
return;
}
}
boolean done=true;
if (needsRefresh) {
done=refreshTable();
}
 else {
fTable.select(selectedRow);
}
if (fFullyVisibleRows < fTableItemCount) {
fSlider.setSelection(fTableTopEventRank);
}
if (fSelectedEventRank != previousSelectedEventRank && fSelectedEventRank < fTableItemCount) {
if (done) {
Event e=new Event();
e.item=fTable.getSelection()[0];
fTable.notifyListeners(SWT.Selection,e);
}
 else {
fPendingSelection=true;
}
}
}",0.9874620060790272
92330,"@Override public void run(){
  if (fTable.isDisposed())   return;
  int topIndex=fTable.getTopIndex();
  if (topIndex != 0) {
    fTableTopEventRank+=topIndex;
    refreshTable();
    fSlider.setSelection(fTableTopEventRank);
    fTable.setTopIndex(0);
  }
}","@Override public void run(){
  if (fTable.isDisposed()) {
    return;
  }
  int topIndex=fTable.getTopIndex();
  if (topIndex != 0) {
    fTableTopEventRank+=topIndex;
    refreshTable();
    fSlider.setSelection(fTableTopEventRank);
    fTable.setTopIndex(0);
  }
}",0.9847328244274808
92331,"/** 
 * Update the rows and selected item
 */
private void handleTableSelection(){
  int selectedRow=fTable.getSelectionIndices()[0];
  if (selectedRow < fFrozenRowCount) {
    fSelectedEventRank=selectedRow;
  }
 else {
    fSelectedEventRank=fTableTopEventRank + selectedRow;
  }
  if (selectedRow >= fFullyVisibleRows) {
    final Display display=fTable.getDisplay();
    Thread thread=new Thread(""String_Node_Str""){
      @Override public void run(){
        try {
          Thread.sleep(600);
        }
 catch (        InterruptedException e) {
        }
        display.asyncExec(new Runnable(){
          @Override public void run(){
            if (fTable.isDisposed())             return;
            int topIndex=fTable.getTopIndex();
            if (topIndex != 0) {
              fTableTopEventRank+=topIndex;
              refreshTable();
              fSlider.setSelection(fTableTopEventRank);
              fTable.setTopIndex(0);
            }
          }
        }
);
      }
    }
;
    thread.start();
  }
}","/** 
 * Update the rows and selected item
 */
private void handleTableSelection(){
  int selectedRow=fTable.getSelectionIndices()[0];
  if (selectedRow < fFrozenRowCount) {
    fSelectedEventRank=selectedRow;
  }
 else {
    fSelectedEventRank=fTableTopEventRank + selectedRow;
  }
  if (selectedRow >= fFullyVisibleRows) {
    final Display display=fTable.getDisplay();
    Thread thread=new Thread(""String_Node_Str""){
      @Override public void run(){
        try {
          Thread.sleep(600);
        }
 catch (        InterruptedException e) {
        }
        display.asyncExec(new Runnable(){
          @Override public void run(){
            if (fTable.isDisposed()) {
              return;
            }
            int topIndex=fTable.getTopIndex();
            if (topIndex != 0) {
              fTableTopEventRank+=topIndex;
              refreshTable();
              fSlider.setSelection(fTableTopEventRank);
              fTable.setTopIndex(0);
            }
          }
        }
);
      }
    }
;
    thread.start();
  }
}",0.9912959381044488
92332,"@Override public void controlResized(ControlEvent event){
  resize();
}","@Override public void controlResized(ControlEvent event){
  resize();
  if (fTableItemCount > 0) {
    fSlider.setThumb(Math.max(1,Math.min(fTableRows,fFullyVisibleRows)));
  }
}",0.570281124497992
92333,"public Control createTableEditorControl(Class<? extends Control> control){
  try {
    return (Control)control.getConstructor(Composite.class,int.class).newInstance(new Object[]{fTable,SWT.NONE});
  }
 catch (  Exception e) {
    Activator.getDefault().logError(""String_Node_Str"",e);
  }
  return null;
}","public Control createTableEditorControl(Class<? extends Control> control){
  try {
    return control.getConstructor(Composite.class,int.class).newInstance(new Object[]{fTable,SWT.NONE});
  }
 catch (  Exception e) {
    Activator.getDefault().logError(""String_Node_Str"",e);
  }
  return null;
}",0.9849749582637728
92334,"public CustomTxtTrace(final IResource resource,final CustomTxtTraceDefinition definition,final String path,final int pageSize) throws TmfTraceException {
  super(resource,CustomTxtEvent.class,path,(pageSize > 0) ? pageSize : DEFAULT_CACHE_SIZE);
  fDefinition=definition;
  fEventType=new CustomTxtEventType(fDefinition);
}","public CustomTxtTrace(final IResource resource,final CustomTxtTraceDefinition definition,final String path,final int pageSize) throws TmfTraceException {
  super(resource,CustomTxtEvent.class,path,(pageSize > 0) ? pageSize : DEFAULT_CACHE_SIZE);
  fDefinition=definition;
  fEventType=new CustomTxtEventType(fDefinition);
  indexTrace(false);
}",0.9685157421289357
92335,"public CustomXmlTrace(final IResource resource,final CustomXmlTraceDefinition definition,final String path,final int pageSize) throws TmfTraceException {
  super(null,CustomXmlEvent.class,path,(pageSize > 0) ? pageSize : DEFAULT_CACHE_SIZE);
  fDefinition=definition;
  fEventType=new CustomXmlEventType(fDefinition);
  fRecordInputElement=getRecordInputElement(fDefinition.rootInputElement);
}","public CustomXmlTrace(final IResource resource,final CustomXmlTraceDefinition definition,final String path,final int pageSize) throws TmfTraceException {
  super(null,CustomXmlEvent.class,path,(pageSize > 0) ? pageSize : DEFAULT_CACHE_SIZE);
  fDefinition=definition;
  fEventType=new CustomXmlEventType(fDefinition);
  fRecordInputElement=getRecordInputElement(fDefinition.rootInputElement);
  indexTrace(false);
}",0.9740420271940669
92336,"public TmfEventsTable(final Composite parent,int cacheSize,final ColumnData[] columnData){
  super(""String_Node_Str"");
  fComposite=new Composite(parent,SWT.NONE);
  final GridLayout gl=new GridLayout(1,false);
  gl.marginHeight=0;
  gl.marginWidth=0;
  gl.verticalSpacing=0;
  fComposite.setLayout(gl);
  fSashForm=new SashForm(fComposite,SWT.HORIZONTAL);
  fSashForm.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  final int style=SWT.H_SCROLL | SWT.V_SCROLL | SWT.SINGLE| SWT.FULL_SELECTION;
  fTable=new TmfVirtualTable(fSashForm,style);
  final GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
  fTable.setLayoutData(layoutData);
  fTable.setHeaderVisible(true);
  fTable.setLinesVisible(true);
  setColumnHeaders(columnData);
  if (Arrays.equals(columnData,COLUMN_DATA)) {
    fTable.getColumns()[0].setData(Key.FIELD_ID,ITmfEvent.EVENT_FIELD_TIMESTAMP);
    fTable.getColumns()[1].setData(Key.FIELD_ID,ITmfEvent.EVENT_FIELD_SOURCE);
    fTable.getColumns()[2].setData(Key.FIELD_ID,ITmfEvent.EVENT_FIELD_TYPE);
    fTable.getColumns()[3].setData(Key.FIELD_ID,ITmfEvent.EVENT_FIELD_REFERENCE);
    fTable.getColumns()[4].setData(Key.FIELD_ID,ITmfEvent.EVENT_FIELD_CONTENT);
  }
  fTable.setFrozenRowCount(1);
  createHeaderEditor();
  fTable.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      final TableItem[] selection=fTable.getSelection();
      if (selection.length > 0) {
        final TableItem selectedTableItem=selection[0];
        if (selectedTableItem != null) {
          if (selectedTableItem.getData(Key.RANK) instanceof Long) {
            fSelectedRank=(Long)selectedTableItem.getData(Key.RANK);
            fRawViewer.selectAndReveal((Long)selectedTableItem.getData(Key.RANK));
          }
          if (selectedTableItem.getData(Key.TIMESTAMP) instanceof TmfTimestamp) {
            final TmfTimestamp ts=(TmfTimestamp)selectedTableItem.getData(Key.TIMESTAMP);
            broadcast(new TmfTimeSynchSignal(TmfEventsTable.this,ts));
          }
        }
      }
    }
  }
);
  cacheSize=Math.max(cacheSize,Display.getDefault().getBounds().height / fTable.getItemHeight());
  cacheSize=Math.min(cacheSize,MAX_CACHE_SIZE);
  fCache=new TmfEventsCache(cacheSize,this);
  fTable.addListener(SWT.SetData,new Listener(){
    @Override public void handleEvent(    final Event event){
      final TableItem item=(TableItem)event.item;
      int index=event.index - 1;
      if (event.index == 0) {
        setHeaderRowItemData(item);
        return;
      }
      if (fTable.getData(Key.FILTER_OBJ) != null) {
        if ((event.index == 1) || (event.index == (fTable.getItemCount() - 1))) {
          setFilterStatusRowItemData(item);
          return;
        }
        index=index - 1;
      }
      final CachedEvent cachedEvent=fCache.getEvent(index);
      if (cachedEvent != null) {
        setItemData(item,cachedEvent.event,cachedEvent.rank);
        return;
      }
      event.doit=false;
    }
  }
);
  fTable.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    final MouseEvent event){
      if (event.button != 1) {
        return;
      }
      final Point point=new Point(event.x,event.y);
      final TableItem item=fTable.getItem(point);
      if (item != null) {
        final Rectangle imageBounds=item.getImageBounds(0);
        imageBounds.width=BOOKMARK_IMAGE.getBounds().width;
        if (imageBounds.contains(point)) {
          final Long rank=(Long)item.getData(Key.RANK);
          if (rank != null) {
            toggleBookmark(rank);
          }
        }
      }
    }
  }
);
  final Listener tooltipListener=new Listener(){
    Shell tooltipShell=null;
    @Override public void handleEvent(    final Event event){
switch (event.type) {
case SWT.MouseHover:
        final TableItem item=fTable.getItem(new Point(event.x,event.y));
      if (item == null) {
        return;
      }
    final Long rank=(Long)item.getData(Key.RANK);
  if (rank == null) {
    return;
  }
final String tooltipText=(String)item.getData(Key.BOOKMARK);
final Rectangle bounds=item.getImageBounds(0);
bounds.width=BOOKMARK_IMAGE.getBounds().width;
if (!bounds.contains(event.x,event.y)) {
return;
}
if ((tooltipShell != null) && !tooltipShell.isDisposed()) {
tooltipShell.dispose();
}
tooltipShell=new Shell(fTable.getShell(),SWT.ON_TOP | SWT.NO_FOCUS | SWT.TOOL);
tooltipShell.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
final FillLayout layout=new FillLayout();
layout.marginWidth=2;
tooltipShell.setLayout(layout);
final Label label=new Label(tooltipShell,SWT.WRAP);
String text=rank.toString() + (tooltipText != null ? ""String_Node_Str"" + tooltipText : ""String_Node_Str"");
label.setForeground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
label.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
label.setText(text);
label.addListener(SWT.MouseExit,this);
label.addListener(SWT.MouseDown,this);
label.addListener(SWT.MouseWheel,this);
final Point size=tooltipShell.computeSize(SWT.DEFAULT,SWT.DEFAULT);
Point pt=fTable.toDisplay(event.x,event.y);
pt.x+=BOOKMARK_IMAGE.getBounds().width;
pt.y+=size.y;
tooltipShell.setBounds(pt.x,pt.y,size.x,size.y);
tooltipShell.setVisible(true);
break;
case SWT.Dispose:
case SWT.KeyDown:
case SWT.MouseMove:
case SWT.MouseExit:
case SWT.MouseDown:
case SWT.MouseWheel:
if (tooltipShell != null) {
tooltipShell.dispose();
tooltipShell=null;
}
break;
}
}
}
;
fTable.addListener(SWT.MouseHover,tooltipListener);
fTable.addListener(SWT.Dispose,tooltipListener);
fTable.addListener(SWT.KeyDown,tooltipListener);
fTable.addListener(SWT.MouseMove,tooltipListener);
fTable.addListener(SWT.MouseExit,tooltipListener);
fTable.addListener(SWT.MouseDown,tooltipListener);
fTable.addListener(SWT.MouseWheel,tooltipListener);
createResources();
ColorSettingsManager.addColorSettingsListener(this);
fTable.setItemCount(1);
fRawViewer=new TmfRawEventViewer(fSashForm,SWT.H_SCROLL | SWT.V_SCROLL);
fRawViewer.addSelectionListener(new Listener(){
@Override public void handleEvent(final Event e){
if (e.data instanceof Long) {
final long rank=(Long)e.data;
int index=(int)rank;
if (fTable.getData(Key.FILTER_OBJ) != null) {
index=fCache.getFilteredEventIndex(rank) + 1;
}
fTable.setSelection(index + 1);
fSelectedRank=rank;
}
 else if (e.data instanceof ITmfLocation<?>) {
return;
}
 else {
return;
}
final TableItem[] selection=fTable.getSelection();
if ((selection != null) && (selection.length > 0)) {
final TmfTimestamp ts=(TmfTimestamp)fTable.getSelection()[0].getData(Key.TIMESTAMP);
if (ts != null) {
broadcast(new TmfTimeSynchSignal(TmfEventsTable.this,ts));
}
}
}
}
);
fSashForm.setWeights(new int[]{1,1});
fRawViewer.setVisible(false);
createPopupMenu();
}","public TmfEventsTable(final Composite parent,int cacheSize,final ColumnData[] columnData){
  super(""String_Node_Str"");
  fComposite=new Composite(parent,SWT.NONE);
  final GridLayout gl=new GridLayout(1,false);
  gl.marginHeight=0;
  gl.marginWidth=0;
  gl.verticalSpacing=0;
  fComposite.setLayout(gl);
  fSashForm=new SashForm(fComposite,SWT.HORIZONTAL);
  fSashForm.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  final int style=SWT.H_SCROLL | SWT.V_SCROLL | SWT.SINGLE| SWT.FULL_SELECTION;
  fTable=new TmfVirtualTable(fSashForm,style);
  final GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
  fTable.setLayoutData(layoutData);
  fTable.setHeaderVisible(true);
  fTable.setLinesVisible(true);
  setColumnHeaders(columnData);
  if (Arrays.equals(columnData,COLUMN_DATA)) {
    fTable.getColumns()[0].setData(Key.FIELD_ID,ITmfEvent.EVENT_FIELD_TIMESTAMP);
    fTable.getColumns()[1].setData(Key.FIELD_ID,ITmfEvent.EVENT_FIELD_SOURCE);
    fTable.getColumns()[2].setData(Key.FIELD_ID,ITmfEvent.EVENT_FIELD_TYPE);
    fTable.getColumns()[3].setData(Key.FIELD_ID,ITmfEvent.EVENT_FIELD_REFERENCE);
    fTable.getColumns()[4].setData(Key.FIELD_ID,ITmfEvent.EVENT_FIELD_CONTENT);
  }
  fTable.setFrozenRowCount(1);
  createHeaderEditor();
  fTable.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      final TableItem[] selection=fTable.getSelection();
      if (selection.length > 0) {
        final TableItem selectedTableItem=selection[0];
        if (selectedTableItem != null) {
          if (selectedTableItem.getData(Key.RANK) instanceof Long) {
            fSelectedRank=(Long)selectedTableItem.getData(Key.RANK);
            fRawViewer.selectAndReveal((Long)selectedTableItem.getData(Key.RANK));
          }
          if (selectedTableItem.getData(Key.TIMESTAMP) instanceof TmfTimestamp) {
            final TmfTimestamp ts=(TmfTimestamp)selectedTableItem.getData(Key.TIMESTAMP);
            broadcast(new TmfTimeSynchSignal(TmfEventsTable.this,ts));
          }
        }
      }
    }
  }
);
  cacheSize=Math.max(cacheSize,Display.getDefault().getBounds().height / fTable.getItemHeight());
  cacheSize=Math.min(cacheSize,MAX_CACHE_SIZE);
  fCache=new TmfEventsCache(cacheSize,this);
  fTable.addListener(SWT.SetData,new Listener(){
    @Override public void handleEvent(    final Event event){
      final TableItem item=(TableItem)event.item;
      int index=event.index - 1;
      if (event.index == 0) {
        setHeaderRowItemData(item);
        return;
      }
      if (fTable.getData(Key.FILTER_OBJ) != null) {
        if ((event.index == 1) || (event.index == (fTable.getItemCount() - 1))) {
          setFilterStatusRowItemData(item);
          return;
        }
        index=index - 1;
      }
      final CachedEvent cachedEvent=fCache.getEvent(index);
      if (cachedEvent != null) {
        setItemData(item,cachedEvent.event,cachedEvent.rank);
        return;
      }
      event.doit=false;
    }
  }
);
  fTable.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    final MouseEvent event){
      if (event.button != 1) {
        return;
      }
      final Point point=new Point(event.x,event.y);
      final TableItem item=fTable.getItem(point);
      if (item != null) {
        final Rectangle imageBounds=item.getImageBounds(0);
        imageBounds.width=BOOKMARK_IMAGE.getBounds().width;
        if (imageBounds.contains(point)) {
          final Long rank=(Long)item.getData(Key.RANK);
          if (rank != null) {
            toggleBookmark(rank);
          }
        }
      }
    }
  }
);
  final Listener tooltipListener=new Listener(){
    Shell tooltipShell=null;
    @Override public void handleEvent(    final Event event){
switch (event.type) {
case SWT.MouseHover:
        final TableItem item=fTable.getItem(new Point(event.x,event.y));
      if (item == null) {
        return;
      }
    final Long rank=(Long)item.getData(Key.RANK);
  if (rank == null) {
    return;
  }
final String tooltipText=(String)item.getData(Key.BOOKMARK);
final Rectangle bounds=item.getImageBounds(0);
bounds.width=BOOKMARK_IMAGE.getBounds().width;
if (!bounds.contains(event.x,event.y)) {
return;
}
if ((tooltipShell != null) && !tooltipShell.isDisposed()) {
tooltipShell.dispose();
}
tooltipShell=new Shell(fTable.getShell(),SWT.ON_TOP | SWT.NO_FOCUS | SWT.TOOL);
tooltipShell.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
final FillLayout layout=new FillLayout();
layout.marginWidth=2;
tooltipShell.setLayout(layout);
final Label label=new Label(tooltipShell,SWT.WRAP);
String text=rank.toString() + (tooltipText != null ? ""String_Node_Str"" + tooltipText : ""String_Node_Str"");
label.setForeground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_INFO_FOREGROUND));
label.setBackground(PlatformUI.getWorkbench().getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND));
label.setText(text);
label.addListener(SWT.MouseExit,this);
label.addListener(SWT.MouseDown,this);
label.addListener(SWT.MouseWheel,this);
final Point size=tooltipShell.computeSize(SWT.DEFAULT,SWT.DEFAULT);
int y=event.y;
if (System.getProperty(""String_Node_Str"").contains(""String_Node_Str"")) {
y+=fTable.getHeaderHeight();
}
Point pt=fTable.toDisplay(event.x,y);
pt.x+=BOOKMARK_IMAGE.getBounds().width;
pt.y+=size.y;
tooltipShell.setBounds(pt.x,pt.y,size.x,size.y);
tooltipShell.setVisible(true);
break;
case SWT.Dispose:
case SWT.KeyDown:
case SWT.MouseMove:
case SWT.MouseExit:
case SWT.MouseDown:
case SWT.MouseWheel:
if (tooltipShell != null) {
tooltipShell.dispose();
tooltipShell=null;
}
break;
}
}
}
;
fTable.addListener(SWT.MouseHover,tooltipListener);
fTable.addListener(SWT.Dispose,tooltipListener);
fTable.addListener(SWT.KeyDown,tooltipListener);
fTable.addListener(SWT.MouseMove,tooltipListener);
fTable.addListener(SWT.MouseExit,tooltipListener);
fTable.addListener(SWT.MouseDown,tooltipListener);
fTable.addListener(SWT.MouseWheel,tooltipListener);
createResources();
ColorSettingsManager.addColorSettingsListener(this);
fTable.setItemCount(1);
fRawViewer=new TmfRawEventViewer(fSashForm,SWT.H_SCROLL | SWT.V_SCROLL);
fRawViewer.addSelectionListener(new Listener(){
@Override public void handleEvent(final Event e){
if (e.data instanceof Long) {
final long rank=(Long)e.data;
int index=(int)rank;
if (fTable.getData(Key.FILTER_OBJ) != null) {
index=fCache.getFilteredEventIndex(rank) + 1;
}
fTable.setSelection(index + 1);
fSelectedRank=rank;
}
 else if (e.data instanceof ITmfLocation<?>) {
return;
}
 else {
return;
}
final TableItem[] selection=fTable.getSelection();
if ((selection != null) && (selection.length > 0)) {
final TmfTimestamp ts=(TmfTimestamp)fTable.getSelection()[0].getData(Key.TIMESTAMP);
if (ts != null) {
broadcast(new TmfTimeSynchSignal(TmfEventsTable.this,ts));
}
}
}
}
);
fSashForm.setWeights(new int[]{1,1});
fRawViewer.setVisible(false);
createPopupMenu();
}",0.9909857936107304
92337,"/** 
 * You must dispose the color setting when it is no longer required.
 */
public ColorSetting(RGB foreground,RGB background,int tickColorIndex,ITmfFilterTreeNode filter){
  fForegroundRGB=foreground;
  fBackgroundRGB=background;
  fTickColorIndex=tickColorIndex;
  fFilter=filter;
  Display display=Display.getDefault();
  fForegroundColor=new Color(display,fForegroundRGB);
  fBackgroundColor=new Color(display,fBackgroundRGB);
  fDimmedForegroundColor=new Color(display,ColorUtil.blend(fForegroundRGB,fBackgroundRGB));
  fDimmedBackgroundColor=new Color(display,ColorUtil.blend(fBackgroundRGB,display.getSystemColor(SWT.COLOR_LIST_BACKGROUND).getRGB()));
}","/** 
 * Constructor You must dispose the color setting when it is no longer required.
 */
public ColorSetting(RGB foreground,RGB background,RGB tickColorRGB,ITmfFilterTreeNode filter){
  fForegroundRGB=foreground;
  fBackgroundRGB=background;
  fTickColorRGB=tickColorRGB;
  fFilter=filter;
  Display display=Display.getDefault();
  fForegroundColor=new Color(display,fForegroundRGB);
  fBackgroundColor=new Color(display,fBackgroundRGB);
  fDimmedForegroundColor=new Color(display,ColorUtil.blend(fForegroundRGB,fBackgroundRGB));
  fDimmedBackgroundColor=new Color(display,ColorUtil.blend(fBackgroundRGB,display.getSystemColor(SWT.COLOR_LIST_BACKGROUND).getRGB()));
  fTickColor=new Color(display,fTickColorRGB);
}",0.906318082788671
92338,"/** 
 * @param foreground the foreground to set
 */
public void setForegroundRGB(RGB foreground){
  fForegroundRGB=foreground;
  fForegroundColor.dispose();
  fDimmedForegroundColor.dispose();
  Display display=Display.getDefault();
  fForegroundColor=new Color(display,fForegroundRGB);
  fDimmedForegroundColor=new Color(display,ColorUtil.blend(fForegroundRGB,fBackgroundRGB));
}","/** 
 * Sets the foreground RGB value
 * @param foreground the foreground to set
 */
public void setForegroundRGB(RGB foreground){
  fForegroundRGB=foreground;
  fForegroundColor.dispose();
  fDimmedForegroundColor.dispose();
  Display display=Display.getDefault();
  fForegroundColor=new Color(display,fForegroundRGB);
  fDimmedForegroundColor=new Color(display,ColorUtil.blend(fForegroundRGB,fBackgroundRGB));
}",0.9583858764186634
92339,"/** 
 * @return the foreground color
 */
public Color getForegroundColor(){
  return fForegroundColor;
}","/** 
 * Returns the foreground color.
 * @return the foreground color
 */
public Color getForegroundColor(){
  return fForegroundColor;
}",0.8630705394190872
92340,"/** 
 * @return the dimmed background color
 */
public Color getDimmedBackgroundColor(){
  return fDimmedBackgroundColor;
}","/** 
 * Returns the dimmed background color.
 * @return the dimmed background color
 */
public Color getDimmedBackgroundColor(){
  return fDimmedBackgroundColor;
}",0.8601398601398601
92341,"/** 
 * @return the foreground
 */
public RGB getForegroundRGB(){
  return fForegroundRGB;
}","/** 
 * Returns foreground RGB value.
 * @return the foreground RGB
 */
public RGB getForegroundRGB(){
  return fForegroundRGB;
}",0.832579185520362
92342,"/** 
 * @return the background color
 */
public Color getBackgroundColor(){
  return fBackgroundColor;
}","/** 
 * Returns the background color.
 * @return the background color
 */
public Color getBackgroundColor(){
  return fBackgroundColor;
}",0.8630705394190872
92343,"/** 
 * @return the background
 */
public RGB getBackgroundRGB(){
  return fBackgroundRGB;
}","/** 
 * Returns the background RGB value.
 * @return the background RGB
 */
public RGB getBackgroundRGB(){
  return fBackgroundRGB;
}",0.8177777777777778
92344,"/** 
 * @param background the background to set
 */
public void setBackgroundRGB(RGB background){
  fBackgroundRGB=background;
  fBackgroundColor.dispose();
  fDimmedBackgroundColor.dispose();
  Display display=Display.getDefault();
  fBackgroundColor=new Color(display,fBackgroundRGB);
  fDimmedBackgroundColor=new Color(display,ColorUtil.blend(fBackgroundRGB,display.getSystemColor(SWT.COLOR_LIST_BACKGROUND).getRGB()));
}","/** 
 * Sets the background RGB value.
 * @param background the background to set
 */
public void setBackgroundRGB(RGB background){
  fBackgroundRGB=background;
  fBackgroundColor.dispose();
  fDimmedBackgroundColor.dispose();
  Display display=Display.getDefault();
  fBackgroundColor=new Color(display,fBackgroundRGB);
  fDimmedBackgroundColor=new Color(display,ColorUtil.blend(fBackgroundRGB,display.getSystemColor(SWT.COLOR_LIST_BACKGROUND).getRGB()));
}",0.9614512471655328
92345,"/** 
 * @param filter the filter to set
 */
public void setFilter(ITmfFilterTreeNode filter){
  fFilter=filter;
}","/** 
 * Sets the filter implementation.
 * @param filter the filter to set
 */
public void setFilter(ITmfFilterTreeNode filter){
  fFilter=filter;
}",0.8659003831417624
92346,"/** 
 * @return the filter
 */
public ITmfFilterTreeNode getFilter(){
  return fFilter;
}","/** 
 * Returns the filter implementation.
 * @return the filter
 */
public ITmfFilterTreeNode getFilter(){
  return fFilter;
}",0.8240740740740741
92347,"/** 
 * @return the dimmed foreground color
 */
public Color getDimmedForegroundColor(){
  return fDimmedForegroundColor;
}","/** 
 * Returns the dimmed foreground color.
 * @return the dimmed foreground color
 */
public Color getDimmedForegroundColor(){
  return fDimmedForegroundColor;
}",0.8601398601398601
92348,"/** 
 * Dispose the color setting resources
 */
public void dispose(){
  fForegroundColor.dispose();
  fBackgroundColor.dispose();
  fDimmedForegroundColor.dispose();
  fDimmedBackgroundColor.dispose();
}","/** 
 * Dispose the color setting resources
 */
public void dispose(){
  fForegroundColor.dispose();
  fBackgroundColor.dispose();
  fDimmedForegroundColor.dispose();
  fDimmedBackgroundColor.dispose();
  fTickColor.dispose();
}",0.9444444444444444
92349,"public static int getColorSettingPriority(ITmfEvent event){
  for (int i=0; i < fColorSettings.length; i++) {
    ColorSetting colorSetting=fColorSettings[i];
    if (colorSetting.getFilter() != null && colorSetting.getFilter().matches(event)) {
      return i;
    }
  }
  return PRIORITY_NONE;
}","/** 
 * Gets the color settings priority for the given event.
 * @param event A event the event to check
 * @return the priority defined for the filter else PRIORITY_NONE
 */
public static int getColorSettingPriority(ITmfEvent event){
  for (int i=0; i < fColorSettings.length; i++) {
    ColorSetting colorSetting=fColorSettings[i];
    if (colorSetting.getFilter() != null && colorSetting.getFilter().matches(event)) {
      return i;
    }
  }
  return PRIORITY_NONE;
}",0.7724317295188556
92350,"public static void addColorSettingsListener(IColorSettingsListener listener){
  if (!fListeners.contains(listener)) {
    fListeners.add(listener);
  }
}","/** 
 * Adds a color settings listener.
 * @param listener A listener to add.
 */
public static void addColorSettingsListener(IColorSettingsListener listener){
  if (!fListeners.contains(listener)) {
    fListeners.add(listener);
  }
}",0.788659793814433
92351,"public static void setColorSettings(ColorSetting[] colorSettings){
  fColorSettings=(colorSettings != null) ? Arrays.copyOf(colorSettings,colorSettings.length) : null;
  ColorSettingsXML.save(COLOR_SETTINGS_PATH_NAME,fColorSettings);
  fireColorSettingsChanged();
}","/** 
 * Sets the array of color settings.
 * @param colorSettings A array of color settings to set
 */
public static void setColorSettings(ColorSetting[] colorSettings){
  fColorSettings=(colorSettings != null) ? Arrays.copyOf(colorSettings,colorSettings.length) : null;
  ColorSettingsXML.save(COLOR_SETTINGS_PATH_NAME,fColorSettings);
  fireColorSettingsChanged();
}",0.8372827804107424
92352,"public static ColorSetting getColorSetting(int priority){
  if (priority < fColorSettings.length) {
    return fColorSettings[priority];
  }
  return DEFAULT_COLOR_SETTING;
}","/** 
 * Returns the color settings based the priority. 
 * @param priority A priority (index) of color settings
 * @return the color settings defined for the priority else default color settings
 */
public static ColorSetting getColorSetting(int priority){
  if (priority < fColorSettings.length) {
    return fColorSettings[priority];
  }
  return DEFAULT_COLOR_SETTING;
}",0.6361974405850092
92353,"public static void removeColorSettingsListener(IColorSettingsListener listener){
  fListeners.remove(listener);
}","/** 
 * Removes a color settings listener.
 * @param listener A listener to remove.
 */
public static void removeColorSettingsListener(IColorSettingsListener listener){
  fListeners.remove(listener);
}",0.7197452229299363
92354,"public static ColorSetting[] getColorSettings(){
  return (fColorSettings != null) ? Arrays.copyOf(fColorSettings,fColorSettings.length) : null;
}","/** 
 * Returns an array of color settings.
 * @return an array of color settings.
 */
public static ColorSetting[] getColorSettings(){
  return (fColorSettings != null) ? Arrays.copyOf(fColorSettings,fColorSettings.length) : null;
}",0.7704485488126649
92355,"/** 
 * Parse a single field from its given name.<p>
 * @return  The parsed field or null.
 * @see @see org.eclipse.linuxtools.lttng.event.LttngEventField
 */
@Override public synchronized LttngEventField getField(String name){
  if (name.equals(LttngEventType.CONTENT_LABEL) || name.equals(ITmfEvent.EVENT_FIELD_CONTENT)) {
    return new LttngEventField(toString());
  }
 else   if (name.equals(LttngEventType.MARKER_LABEL) || name.equals(ITmfEvent.EVENT_FIELD_TYPE)) {
    return new LttngEventField(fParentEvent.getType().getName());
  }
 else   if (name.equals(LttngEventType.TRACE_LABEL) || name.equals(ITmfEvent.EVENT_FIELD_REFERENCE)) {
    return new LttngEventField(fParentEvent.getReference());
  }
 else   if (name.equals(LttngEventType.TIMESTAMP_LABEL) || name.equals(ITmfEvent.EVENT_FIELD_TIMESTAMP)) {
    return new LttngEventField(fParentEvent.getTimestamp().toString());
  }
 else   if (name.equals(ITmfEvent.EVENT_FIELD_SOURCE)) {
    return new LttngEventField(fParentEvent.getSource());
  }
  LttngEventField returnedField=fFieldsMap.get(name);
  if (returnedField == null) {
    JniEvent tmpEvent=((LttngEvent)getEvent()).convertEventTmfToJni();
    if (tmpEvent != null) {
      Object newValue=tmpEvent.parseFieldByName(name);
      if (newValue != null) {
        returnedField=new LttngEventField(name,newValue);
        fFieldsMap.put(name,returnedField);
      }
    }
  }
  return returnedField;
}","/** 
 * Parse a single field from its given name.<p>
 * @return  The parsed field or null.
 * @see @see org.eclipse.linuxtools.lttng.event.LttngEventField
 */
@Override public synchronized LttngEventField getField(String name){
  if (name.equals(LttngEventType.CONTENT_LABEL) || name.equals(ITmfEvent.EVENT_FIELD_CONTENT)) {
    return new LttngEventField(LttngEventType.CONTENT_LABEL,toString());
  }
 else   if (name.equals(LttngEventType.MARKER_LABEL) || name.equals(ITmfEvent.EVENT_FIELD_TYPE)) {
    return new LttngEventField(LttngEventType.MARKER_LABEL,fParentEvent.getType().getName());
  }
 else   if (name.equals(LttngEventType.TRACE_LABEL) || name.equals(ITmfEvent.EVENT_FIELD_REFERENCE)) {
    return new LttngEventField(LttngEventType.TRACE_LABEL,fParentEvent.getReference());
  }
 else   if (name.equals(LttngEventType.TIMESTAMP_LABEL) || name.equals(ITmfEvent.EVENT_FIELD_TIMESTAMP)) {
    return new LttngEventField(LttngEventType.TIMESTAMP_LABEL,fParentEvent.getTimestamp().toString());
  }
 else   if (name.equals(ITmfEvent.EVENT_FIELD_SOURCE)) {
    return new LttngEventField(ITmfEvent.EVENT_FIELD_SOURCE,fParentEvent.getSource());
  }
  LttngEventField returnedField=fFieldsMap.get(name);
  if (returnedField == null) {
    JniEvent tmpEvent=((LttngEvent)getEvent()).convertEventTmfToJni();
    if (tmpEvent != null) {
      Object newValue=tmpEvent.parseFieldByName(name);
      if (newValue != null) {
        returnedField=new LttngEventField(name,newValue);
        fFieldsMap.put(name,returnedField);
      }
    }
  }
  return returnedField;
}",0.951935914552737
92356,"@Override public void initTrace(final IResource resource,final String path,final Class<CustomTxtEvent> eventType) throws TmfTraceException {
  super.initTrace(resource,path,eventType);
}","@Override public void initTrace(final IResource resource,final String path,final Class<CustomTxtEvent> eventType) throws TmfTraceException {
  super.initTrace(resource,path,eventType);
  indexTrace(false);
}",0.9465648854961832
92357,"@Override public void initTrace(final IResource resource,final String path,final Class<CustomXmlEvent> eventType) throws TmfTraceException {
  super.initTrace(resource,path,eventType);
}","@Override public void initTrace(final IResource resource,final String path,final Class<CustomXmlEvent> eventType) throws TmfTraceException {
  super.initTrace(resource,path,eventType);
  indexTrace(false);
}",0.9465648854961832
92358,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Object execute(final ExecutionEvent event) throws ExecutionException {
  final IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null)   return false;
  try {
    final IFile bookmarksFile=fExperiment.getProject().getExperimentsFolder().getResource().getFile(BOOKMARKS_HIDDEN_FILE);
    if (!bookmarksFile.exists()) {
      final InputStream source=new ByteArrayInputStream(new byte[0]);
      bookmarksFile.create(source,true,null);
    }
    bookmarksFile.setHidden(true);
    final IFile file=fExperiment.getResource().getFile(fExperiment.getName() + '_');
    if (!file.exists())     file.createLink(bookmarksFile.getLocation(),IResource.REPLACE,null);
    file.setHidden(true);
    file.setPersistentProperty(TmfCommonConstants.TRACETYPE,TmfExperiment.class.getCanonicalName());
    final List<TmfTraceElement> traceEntries=fExperiment.getTraces();
    final int nbTraces=traceEntries.size();
    int cacheSize=Integer.MAX_VALUE;
    boolean useEditor=true;
    String experimentEditorId=null;
    final ITmfTrace<?>[] traces=new ITmfTrace[nbTraces];
    for (int i=0; i < nbTraces; i++) {
      TmfTraceElement element=traceEntries.get(i);
      element=element.getElementUnderTraceFolder();
      final ITmfTrace trace=element.instantiateTrace();
      final ITmfEvent traceEvent=element.instantiateEvent();
      if ((trace == null) || (traceEvent == null)) {
        displayErrorMsg(Messages.OpenExperimentHandler_NoTraceType);
        for (int j=0; j < i; j++)         traces[j].dispose();
        return null;
      }
      try {
        trace.initTrace(element.getResource(),element.getLocation().getPath(),traceEvent.getClass());
      }
 catch (      final TmfTraceException e) {
        displayErrorMsg(""String_Node_Str"");
      }
      cacheSize=Math.min(cacheSize,trace.getCacheSize());
      final String editorId=element.getEditorId();
      if (editorId == null) {
        useEditor=false;
        experimentEditorId=null;
      }
 else       if (useEditor)       if (experimentEditorId == null)       experimentEditorId=editorId;
 else       if (!editorId.equals(experimentEditorId))       useEditor=false;
      traces[i]=trace;
    }
    final TmfExperiment experiment=new TmfExperiment(ITmfEvent.class,fExperiment.getName(),traces,cacheSize);
    experiment.setBookmarksFile(file);
    if (useEditor) {
      final IEditorInput editorInput=new TmfEditorInput(file,experiment);
      final IWorkbench wb=PlatformUI.getWorkbench();
      final IWorkbenchPage activePage=wb.getActiveWorkbenchWindow().getActivePage();
      final String editorId=TmfEventsEditor.ID;
      final IEditorPart editor=activePage.findEditor(new FileEditorInput(file));
      if ((editor != null) && (editor instanceof IReusableEditor)) {
        activePage.reuseEditor((IReusableEditor)editor,editorInput);
        activePage.activate(editor);
      }
 else       activePage.openEditor(editorInput,editorId);
      experiment.initTrace(null,null,null);
      IDE.setDefaultEditor(file,editorId);
    }
 else {
      TmfExperiment.setCurrentExperiment(experiment);
      TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
      IDE.setDefaultEditor(file,EventsViewEditor.ID);
    }
  }
 catch (  final CoreException e) {
    displayErrorMsg(e.getMessage());
  }
  return null;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Object execute(final ExecutionEvent event) throws ExecutionException {
  final IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null)   return false;
  try {
    final IFile bookmarksFile=fExperiment.getProject().getExperimentsFolder().getResource().getFile(BOOKMARKS_HIDDEN_FILE);
    if (!bookmarksFile.exists()) {
      final InputStream source=new ByteArrayInputStream(new byte[0]);
      bookmarksFile.create(source,true,null);
    }
    bookmarksFile.setHidden(true);
    final IFile file=fExperiment.getResource().getFile(fExperiment.getName() + '_');
    if (!file.exists()) {
      file.createLink(bookmarksFile.getLocation(),IResource.REPLACE,null);
    }
    file.setHidden(true);
    file.setPersistentProperty(TmfCommonConstants.TRACETYPE,TmfExperiment.class.getCanonicalName());
    final List<TmfTraceElement> traceEntries=fExperiment.getTraces();
    final int nbTraces=traceEntries.size();
    int cacheSize=Integer.MAX_VALUE;
    boolean useEditor=true;
    String experimentEditorId=null;
    final ITmfTrace<?>[] traces=new ITmfTrace[nbTraces];
    for (int i=0; i < nbTraces; i++) {
      TmfTraceElement element=traceEntries.get(i);
      element=element.getElementUnderTraceFolder();
      final ITmfTrace trace=element.instantiateTrace();
      final ITmfEvent traceEvent=element.instantiateEvent();
      if ((trace == null) || (traceEvent == null)) {
        displayErrorMsg(Messages.OpenExperimentHandler_NoTraceType);
        for (int j=0; j < i; j++) {
          traces[j].dispose();
        }
        return null;
      }
      try {
        trace.initTrace(element.getResource(),element.getLocation().getPath(),traceEvent.getClass());
      }
 catch (      final TmfTraceException e) {
        displayErrorMsg(""String_Node_Str"");
      }
      cacheSize=Math.min(cacheSize,trace.getCacheSize());
      final String editorId=element.getEditorId();
      if (editorId == null) {
        useEditor=false;
        experimentEditorId=null;
      }
 else       if (useEditor) {
        if (experimentEditorId == null) {
          experimentEditorId=editorId;
        }
 else         if (!editorId.equals(experimentEditorId)) {
          useEditor=false;
        }
      }
      traces[i]=trace;
    }
    TmfExperiment experiment;
    if (useEditor) {
      experiment=new TmfExperiment(ITmfEvent.class,fExperiment.getName(),traces,cacheSize){
        @Override public void initTrace(        IResource resource,        String path,        Class type){
          super.initTrace(resource,path,type);
          getIndexer().buildIndex(getNbEvents(),TmfTimeRange.ETERNITY,false);
        }
      }
;
    }
 else {
      experiment=new TmfExperiment(ITmfEvent.class,fExperiment.getName(),traces,cacheSize);
    }
    experiment.setBookmarksFile(file);
    if (useEditor) {
      final IEditorInput editorInput=new TmfEditorInput(file,experiment);
      final IWorkbench wb=PlatformUI.getWorkbench();
      final IWorkbenchPage activePage=wb.getActiveWorkbenchWindow().getActivePage();
      final String editorId=TmfEventsEditor.ID;
      final IEditorPart editor=activePage.findEditor(new FileEditorInput(file));
      if ((editor != null) && (editor instanceof IReusableEditor)) {
        activePage.reuseEditor((IReusableEditor)editor,editorInput);
        activePage.activate(editor);
      }
 else {
        activePage.openEditor(editorInput,editorId);
      }
      experiment.initTrace(null,null,null);
      IDE.setDefaultEditor(file,editorId);
    }
 else {
      TmfExperiment.setCurrentExperiment(experiment);
      TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
      IDE.setDefaultEditor(file,EventsViewEditor.ID);
    }
  }
 catch (  final CoreException e) {
    displayErrorMsg(e.getMessage());
  }
  return null;
}",0.925531914893617
92359,"/** 
 * Method readNextEvent.
 * @param context ITmfContext
 * @return CtfTmfEvent
 * @see org.eclipse.linuxtools.tmf.core.trace.ITmfTrace#getNext(ITmfContext)
 */
@Override public synchronized CtfTmfEvent getNext(final ITmfContext context){
  CtfTmfEvent event=null;
  if (context instanceof CtfIterator) {
    CtfIterator ctfIterator=(CtfIterator)context;
    event=ctfIterator.getCurrentEvent();
    ctfIterator.advance();
  }
  return event;
}","/** 
 * Method readNextEvent.
 * @param context ITmfContext
 * @return CtfTmfEvent
 * @see org.eclipse.linuxtools.tmf.core.trace.ITmfTrace#getNext(ITmfContext)
 */
@Override public synchronized CtfTmfEvent getNext(final ITmfContext context){
  CtfTmfEvent event=null;
  if (context instanceof CtfIterator) {
    CtfIterator ctfIterator=(CtfIterator)context;
    event=ctfIterator.getCurrentEvent();
    ctfIterator.advance();
    if (event != null) {
      updateAttributes(context,event.getTimestamp());
    }
  }
  return event;
}",0.91317671092952
92360,"/** 
 * Method initTrace.
 * @param resource IResource
 * @param path String
 * @param eventType Class<CtfTmfEvent>
 * @throws TmfTraceException
 * @see org.eclipse.linuxtools.tmf.core.trace.ITmfTrace#initTrace(IResource, String, Class<CtfTmfEvent>)
 */
@Override public void initTrace(final IResource resource,final String path,final Class<CtfTmfEvent> eventType) throws TmfTraceException {
  super.initTrace(resource,path,eventType);
  EventDeclaration ed;
  ITmfEventField eventField;
  @SuppressWarnings(""String_Node_Str"") CtfTmfEventType type;
  try {
    this.fTrace=new CTFTrace(path);
    for (int i=0; i < this.fTrace.getNbEventTypes(); i++) {
      ed=this.fTrace.getEventType(i);
      eventField=parseDeclaration(ed);
      type=new CtfTmfEventType(ed.getName(),eventField);
    }
    final CtfIterator iterator=new CtfIterator(this,0,0);
    if (iterator.getLocation().equals(CtfIterator.NULL_LOCATION)) {
      this.setStartTime(TmfTimestamp.BIG_BANG);
    }
 else {
      this.setStartTime(iterator.getCurrentEvent().getTimestamp());
      if (iterator.hasMoreEvents()) {
        iterator.goToLastEvent();
      }
      this.setEndTime(iterator.getCurrentEvent().getTimestamp());
    }
  }
 catch (  final CTFReaderException e) {
    throw new TmfTraceException(e.getMessage(),e);
  }
  TmfSignalManager.register(this);
  buildStateSystem();
  if (resource != null) {
    try {
      resource.getProject().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      throw new TmfTraceException(e.getMessage(),e);
    }
  }
}","/** 
 * Method initTrace.
 * @param resource IResource
 * @param path String
 * @param eventType Class<CtfTmfEvent>
 * @throws TmfTraceException
 * @see org.eclipse.linuxtools.tmf.core.trace.ITmfTrace#initTrace(IResource, String, Class<CtfTmfEvent>)
 */
@Override public void initTrace(final IResource resource,final String path,final Class<CtfTmfEvent> eventType) throws TmfTraceException {
  super.initTrace(resource,path,eventType);
  EventDeclaration ed;
  ITmfEventField eventField;
  setCacheSize();
  @SuppressWarnings(""String_Node_Str"") CtfTmfEventType type;
  try {
    this.fTrace=new CTFTrace(path);
    for (int i=0; i < this.fTrace.getNbEventTypes(); i++) {
      ed=this.fTrace.getEventType(i);
      eventField=parseDeclaration(ed);
      type=new CtfTmfEventType(ed.getName(),eventField);
    }
    final CtfIterator iterator=new CtfIterator(this,0,0);
    if (iterator.getLocation().equals(CtfIterator.NULL_LOCATION)) {
      this.setStartTime(TmfTimestamp.BIG_BANG);
    }
 else {
      this.setStartTime(iterator.getCurrentEvent().getTimestamp());
      if (iterator.hasMoreEvents()) {
        iterator.goToLastEvent();
      }
      this.setEndTime(iterator.getCurrentEvent().getTimestamp());
    }
  }
 catch (  final CTFReaderException e) {
    throw new TmfTraceException(e.getMessage(),e);
  }
  buildStateSystem();
  if (resource != null) {
    try {
      resource.getProject().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      throw new TmfTraceException(e.getMessage(),e);
    }
  }
}",0.982996470965672
92361,"private void refresh(final long windowRange){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphCombo.isDisposed()) {
        return;
      }
      ITimeGraphEntry[] entries=fEntryList.toArray(new ITimeGraphEntry[0]);
      Arrays.sort(entries);
      fTimeGraphCombo.setInput(entries);
      fTimeGraphCombo.getTimeGraphViewer().setTimeBounds(fStartTime,fEndTime);
      long endTime=fStartTime + windowRange;
      if (fEndTime < endTime) {
        endTime=fEndTime;
      }
      fTimeGraphCombo.getTimeGraphViewer().setStartFinishTime(fStartTime,endTime);
      for (      TreeColumn column : fTimeGraphCombo.getTreeViewer().getTree().getColumns()) {
        column.pack();
      }
      startZoomThread(fStartTime,endTime);
    }
  }
);
}","private void refresh(final long windowRange){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphCombo.isDisposed()) {
        return;
      }
      ITimeGraphEntry[] entries=fEntryList.toArray(new ITimeGraphEntry[0]);
      Arrays.sort(entries,fControlFlowEntryComparator);
      fTimeGraphCombo.setInput(entries);
      fTimeGraphCombo.getTimeGraphViewer().setTimeBounds(fStartTime,fEndTime);
      long endTime=fStartTime + windowRange;
      if (fEndTime < endTime) {
        endTime=fEndTime;
      }
      fTimeGraphCombo.getTimeGraphViewer().setStartFinishTime(fStartTime,endTime);
      for (      TreeColumn column : fTimeGraphCombo.getTreeViewer().getTree().getColumns()) {
        column.pack();
      }
      startZoomThread(fStartTime,endTime);
    }
  }
);
}",0.9826946847960444
92362,"@SuppressWarnings(""String_Node_Str"") private void selectExperiment(TmfExperiment<?> experiment){
  fStartTime=Long.MAX_VALUE;
  fEndTime=Long.MIN_VALUE;
  fSelectedExperiment=(TmfExperiment<ITmfEvent>)experiment;
  ArrayList<ControlFlowEntry> entryList=new ArrayList<ControlFlowEntry>();
  for (  ITmfTrace<?> trace : experiment.getTraces()) {
    if (trace instanceof CtfKernelTrace) {
      CtfKernelTrace ctfKernelTrace=(CtfKernelTrace)trace;
      IStateSystemQuerier ssq=ctfKernelTrace.getStateSystem();
      long start=ssq.getStartTime();
      long end=ssq.getCurrentEndTime();
      fStartTime=Math.min(fStartTime,start);
      fEndTime=Math.max(fEndTime,end);
      List<Integer> threadQuarks=ssq.getQuarks(Attributes.THREADS,""String_Node_Str"");
      for (      int threadQuark : threadQuarks) {
        String threadName=ssq.getAttributeName(threadQuark);
        int threadId=-1;
        try {
          threadId=Integer.parseInt(threadName);
        }
 catch (        NumberFormatException e1) {
          continue;
        }
        if (threadId == 0) {
          continue;
        }
        int execNameQuark=-1;
        try {
          try {
            execNameQuark=ssq.getQuarkRelative(threadQuark,Attributes.EXEC_NAME);
          }
 catch (          AttributeNotFoundException e) {
            continue;
          }
          int ppidQuark=ssq.getQuarkRelative(threadQuark,Attributes.PPID);
          List<ITmfStateInterval> execNameIntervals=ssq.queryHistoryRange(execNameQuark,start,end);
          long birthTime=-1;
          for (          ITmfStateInterval execNameInterval : execNameIntervals) {
            if (!execNameInterval.getStateValue().isNull() && execNameInterval.getStateValue().getType() == 1) {
              String execName=execNameInterval.getStateValue().unboxStr();
              long startTime=execNameInterval.getStartTime();
              long endTime=execNameInterval.getEndTime() + 1;
              if (birthTime == -1) {
                birthTime=startTime;
              }
              int ppid=-1;
              if (ppidQuark != -1) {
                ITmfStateInterval ppidInterval=ssq.querySingleState(startTime,ppidQuark);
                ppid=ppidInterval.getStateValue().unboxInt();
              }
              ControlFlowEntry entry=new ControlFlowEntry(threadQuark,ctfKernelTrace,execName,threadId,ppid,birthTime,startTime,endTime);
              entryList.add(entry);
              entry.addEvent(new TimeEvent(entry,startTime,endTime - startTime));
            }
 else {
              birthTime=-1;
            }
          }
        }
 catch (        AttributeNotFoundException e) {
          e.printStackTrace();
        }
catch (        TimeRangeException e) {
          e.printStackTrace();
        }
catch (        StateValueTypeException e) {
          e.printStackTrace();
        }
      }
    }
    buildTree(entryList);
    refresh(INITIAL_WINDOW_OFFSET);
    ControlFlowEntry[] entries=fEntryList.toArray(new ControlFlowEntry[0]);
    Arrays.sort(entries);
    for (    ControlFlowEntry entry : entries) {
      buildStatusEvents(entry);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void selectExperiment(TmfExperiment<?> experiment){
  fStartTime=Long.MAX_VALUE;
  fEndTime=Long.MIN_VALUE;
  fSelectedExperiment=(TmfExperiment<ITmfEvent>)experiment;
  ArrayList<ControlFlowEntry> entryList=new ArrayList<ControlFlowEntry>();
  for (  ITmfTrace<?> trace : experiment.getTraces()) {
    if (trace instanceof CtfKernelTrace) {
      CtfKernelTrace ctfKernelTrace=(CtfKernelTrace)trace;
      IStateSystemQuerier ssq=ctfKernelTrace.getStateSystem();
      long start=ssq.getStartTime();
      long end=ssq.getCurrentEndTime();
      fStartTime=Math.min(fStartTime,start);
      fEndTime=Math.max(fEndTime,end);
      List<Integer> threadQuarks=ssq.getQuarks(Attributes.THREADS,""String_Node_Str"");
      for (      int threadQuark : threadQuarks) {
        String threadName=ssq.getAttributeName(threadQuark);
        int threadId=-1;
        try {
          threadId=Integer.parseInt(threadName);
        }
 catch (        NumberFormatException e1) {
          continue;
        }
        if (threadId == 0) {
          continue;
        }
        int execNameQuark=-1;
        try {
          try {
            execNameQuark=ssq.getQuarkRelative(threadQuark,Attributes.EXEC_NAME);
          }
 catch (          AttributeNotFoundException e) {
            continue;
          }
          int ppidQuark=ssq.getQuarkRelative(threadQuark,Attributes.PPID);
          List<ITmfStateInterval> execNameIntervals=ssq.queryHistoryRange(execNameQuark,start,end);
          long birthTime=-1;
          for (          ITmfStateInterval execNameInterval : execNameIntervals) {
            if (!execNameInterval.getStateValue().isNull() && execNameInterval.getStateValue().getType() == 1) {
              String execName=execNameInterval.getStateValue().unboxStr();
              long startTime=execNameInterval.getStartTime();
              long endTime=execNameInterval.getEndTime() + 1;
              if (birthTime == -1) {
                birthTime=startTime;
              }
              int ppid=-1;
              if (ppidQuark != -1) {
                ITmfStateInterval ppidInterval=ssq.querySingleState(startTime,ppidQuark);
                ppid=ppidInterval.getStateValue().unboxInt();
              }
              ControlFlowEntry entry=new ControlFlowEntry(threadQuark,ctfKernelTrace,execName,threadId,ppid,birthTime,startTime,endTime);
              entryList.add(entry);
              entry.addEvent(new TimeEvent(entry,startTime,endTime - startTime));
            }
 else {
              birthTime=-1;
            }
          }
        }
 catch (        AttributeNotFoundException e) {
          e.printStackTrace();
        }
catch (        TimeRangeException e) {
          e.printStackTrace();
        }
catch (        StateValueTypeException e) {
          e.printStackTrace();
        }
      }
    }
    buildTree(entryList);
    refresh(INITIAL_WINDOW_OFFSET);
    ControlFlowEntry[] entries=fEntryList.toArray(new ControlFlowEntry[0]);
    Arrays.sort(entries,fControlFlowEntryComparator);
    for (    ControlFlowEntry entry : entries) {
      buildStatusEvents(entry);
    }
  }
}",0.9898024219247928
92363,"public TraceEntry(CtfKernelTrace trace,String name){
  fTrace=trace;
  fChildren=new ArrayList<ResourcesEntry>();
  fName=name;
}","public TraceEntry(CtfKernelTrace trace,String name,long startTime,long endTime){
  fTrace=trace;
  fChildren=new ArrayList<ResourcesEntry>();
  fName=name;
  fTraceStartTime=startTime;
  fTraceEndTime=endTime;
}",0.7588235294117647
92364,"@Override public long getEndTime(){
  return -1;
}","@Override public long getEndTime(){
  return fTraceEndTime;
}",0.8648648648648649
92365,"@Override public long getStartTime(){
  return -1;
}","@Override public long getStartTime(){
  return fTraceStartTime;
}",0.8547008547008547
92366,"private void refresh(final long windowRange){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphViewer.getControl().isDisposed()) {
        return;
      }
      ITimeGraphEntry[] entries=fEntryList.toArray(new ITimeGraphEntry[0]);
      Arrays.sort(entries);
      fTimeGraphViewer.setInput(entries);
      fTimeGraphViewer.setTimeBounds(fStartTime,fEndTime);
      long endTime=fStartTime + windowRange;
      if (fEndTime < endTime) {
        endTime=fEndTime;
      }
      fTimeGraphViewer.setStartFinishTime(fStartTime,endTime);
      startZoomThread(fStartTime,endTime);
    }
  }
);
}","private void refresh(final long windowRange){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTimeGraphViewer.getControl().isDisposed()) {
        return;
      }
      ITimeGraphEntry[] entries=fEntryList.toArray(new ITimeGraphEntry[0]);
      Arrays.sort(entries,new TraceEntryComparator());
      fTimeGraphViewer.setInput(entries);
      fTimeGraphViewer.setTimeBounds(fStartTime,fEndTime);
      long endTime=fStartTime + windowRange;
      if (fEndTime < endTime) {
        endTime=fEndTime;
      }
      fTimeGraphViewer.setStartFinishTime(fStartTime,endTime);
      startZoomThread(fStartTime,endTime);
    }
  }
);
}",0.979467680608365
92367,"@SuppressWarnings(""String_Node_Str"") private void selectExperiment(TmfExperiment<?> experiment){
  fStartTime=Long.MAX_VALUE;
  fEndTime=Long.MIN_VALUE;
  fSelectedExperiment=(TmfExperiment<ITmfEvent>)experiment;
  ArrayList<TraceEntry> entryList=new ArrayList<TraceEntry>();
  for (  ITmfTrace<?> trace : experiment.getTraces()) {
    if (trace instanceof CtfKernelTrace) {
      CtfKernelTrace ctfKernelTrace=(CtfKernelTrace)trace;
      TraceEntry groupEntry=new TraceEntry(ctfKernelTrace,trace.getName());
      entryList.add(groupEntry);
      IStateSystemQuerier ssq=ctfKernelTrace.getStateSystem();
      long startTime=ssq.getStartTime();
      long endTime=ssq.getCurrentEndTime() + 1;
      fStartTime=Math.min(fStartTime,startTime);
      fEndTime=Math.max(fEndTime,endTime);
      List<Integer> cpuQuarks=ssq.getQuarks(Attributes.CPUS,""String_Node_Str"");
      ResourcesEntry[] cpuEntries=new ResourcesEntry[cpuQuarks.size()];
      for (int i=0; i < cpuQuarks.size(); i++) {
        int cpuQuark=cpuQuarks.get(i);
        int cpu=Integer.parseInt(ssq.getAttributeName(cpuQuark));
        ResourcesEntry entry=new ResourcesEntry(cpuQuark,ctfKernelTrace,Type.CPU,cpu);
        groupEntry.addChild(entry);
        cpuEntries[i]=entry;
      }
      List<Integer> irqQuarks=ssq.getQuarks(Attributes.RESOURCES,Attributes.IRQS,""String_Node_Str"");
      ResourcesEntry[] irqEntries=new ResourcesEntry[irqQuarks.size()];
      for (int i=0; i < irqQuarks.size(); i++) {
        int irqQuark=irqQuarks.get(i);
        int irq=Integer.parseInt(ssq.getAttributeName(irqQuark));
        ResourcesEntry entry=new ResourcesEntry(irqQuark,ctfKernelTrace,Type.IRQ,irq);
        groupEntry.addChild(entry);
        irqEntries[i]=entry;
      }
      List<Integer> softIrqQuarks=ssq.getQuarks(Attributes.RESOURCES,Attributes.SOFT_IRQS,""String_Node_Str"");
      ResourcesEntry[] softIrqEntries=new ResourcesEntry[softIrqQuarks.size()];
      for (int i=0; i < softIrqQuarks.size(); i++) {
        int softIrqQuark=softIrqQuarks.get(i);
        int softIrq=Integer.parseInt(ssq.getAttributeName(softIrqQuark));
        ResourcesEntry entry=new ResourcesEntry(softIrqQuark,ctfKernelTrace,Type.SOFT_IRQ,softIrq);
        groupEntry.addChild(entry);
        softIrqEntries[i]=entry;
      }
    }
  }
  fEntryList=entryList;
  refresh(INITIAL_WINDOW_OFFSET);
  for (  TraceEntry traceEntry : fEntryList) {
    CtfKernelTrace ctfKernelTrace=((TraceEntry)traceEntry).getTrace();
    IStateSystemQuerier ssq=ctfKernelTrace.getStateSystem();
    long startTime=ssq.getStartTime();
    long endTime=ssq.getCurrentEndTime() + 1;
    long resolution=(endTime - startTime) / fDisplayWidth;
    for (    ResourcesEntry entry : traceEntry.getChildren()) {
      List<ITimeEvent> eventList=getEventList(entry,startTime,endTime,resolution,false,new NullProgressMonitor());
      entry.setEventList(eventList);
      redraw();
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void selectExperiment(TmfExperiment<?> experiment){
  fStartTime=Long.MAX_VALUE;
  fEndTime=Long.MIN_VALUE;
  fSelectedExperiment=(TmfExperiment<ITmfEvent>)experiment;
  ArrayList<TraceEntry> entryList=new ArrayList<TraceEntry>();
  for (  ITmfTrace<?> trace : experiment.getTraces()) {
    if (trace instanceof CtfKernelTrace) {
      CtfKernelTrace ctfKernelTrace=(CtfKernelTrace)trace;
      IStateSystemQuerier ssq=ctfKernelTrace.getStateSystem();
      long startTime=ssq.getStartTime();
      long endTime=ssq.getCurrentEndTime() + 1;
      TraceEntry groupEntry=new TraceEntry(ctfKernelTrace,trace.getName(),startTime,endTime);
      entryList.add(groupEntry);
      fStartTime=Math.min(fStartTime,startTime);
      fEndTime=Math.max(fEndTime,endTime);
      List<Integer> cpuQuarks=ssq.getQuarks(Attributes.CPUS,""String_Node_Str"");
      ResourcesEntry[] cpuEntries=new ResourcesEntry[cpuQuarks.size()];
      for (int i=0; i < cpuQuarks.size(); i++) {
        int cpuQuark=cpuQuarks.get(i);
        int cpu=Integer.parseInt(ssq.getAttributeName(cpuQuark));
        ResourcesEntry entry=new ResourcesEntry(cpuQuark,ctfKernelTrace,Type.CPU,cpu);
        groupEntry.addChild(entry);
        cpuEntries[i]=entry;
      }
      List<Integer> irqQuarks=ssq.getQuarks(Attributes.RESOURCES,Attributes.IRQS,""String_Node_Str"");
      ResourcesEntry[] irqEntries=new ResourcesEntry[irqQuarks.size()];
      for (int i=0; i < irqQuarks.size(); i++) {
        int irqQuark=irqQuarks.get(i);
        int irq=Integer.parseInt(ssq.getAttributeName(irqQuark));
        ResourcesEntry entry=new ResourcesEntry(irqQuark,ctfKernelTrace,Type.IRQ,irq);
        groupEntry.addChild(entry);
        irqEntries[i]=entry;
      }
      List<Integer> softIrqQuarks=ssq.getQuarks(Attributes.RESOURCES,Attributes.SOFT_IRQS,""String_Node_Str"");
      ResourcesEntry[] softIrqEntries=new ResourcesEntry[softIrqQuarks.size()];
      for (int i=0; i < softIrqQuarks.size(); i++) {
        int softIrqQuark=softIrqQuarks.get(i);
        int softIrq=Integer.parseInt(ssq.getAttributeName(softIrqQuark));
        ResourcesEntry entry=new ResourcesEntry(softIrqQuark,ctfKernelTrace,Type.SOFT_IRQ,softIrq);
        groupEntry.addChild(entry);
        softIrqEntries[i]=entry;
      }
    }
  }
  fEntryList=entryList;
  refresh(INITIAL_WINDOW_OFFSET);
  for (  TraceEntry traceEntry : fEntryList) {
    CtfKernelTrace ctfKernelTrace=((TraceEntry)traceEntry).getTrace();
    IStateSystemQuerier ssq=ctfKernelTrace.getStateSystem();
    long startTime=ssq.getStartTime();
    long endTime=ssq.getCurrentEndTime() + 1;
    long resolution=(endTime - startTime) / fDisplayWidth;
    for (    ResourcesEntry entry : traceEntry.getChildren()) {
      List<ITimeEvent> eventList=getEventList(entry,startTime,endTime,resolution,false,new NullProgressMonitor());
      entry.setEventList(eventList);
      redraw();
    }
  }
}",0.944938440492476
92368,"private void loadLineData(){
  if (fTopLineIndex < 0) {
    if (fLines.size() > 0 && fTrace.getLocationRatio(fLines.get(0).location) > 0) {
      double lastRatio=fTrace.getLocationRatio(fLines.get(fLines.size() - 1).location);
      double firstRatio=fTrace.getLocationRatio(fLines.get(0).location);
      double delta;
      boolean singleEvent=false;
      if (firstRatio != lastRatio) {
        delta=Math.max(20,fNumVisibleLines) * (lastRatio - firstRatio) / (fLines.size() - 1);
      }
 else {
        delta=Math.pow(10,-15);
        singleEvent=true;
      }
      while (fTopLineIndex < 0) {
        ITmfLocation<?> endLocation=fLines.get(0).location;
        firstRatio=Math.max(0,firstRatio - delta);
        ITmfContext context=fTrace.seekEvent(firstRatio);
        ITmfLocation<?> location;
        int index=0;
        long rank=0;
        while (!context.getLocation().equals(endLocation)) {
          location=context.getLocation().clone();
          ITmfEvent event=fTrace.getNext(context);
          if (event == null) {
            break;
          }
          if (event.getContent() != null && event.getContent().getValue() != null) {
            String[] lines=event.getContent().getValue().toString().split(""String_Node_Str"");
            for (int i=0; i < lines.length; i++) {
              String line=lines[i];
              LineData lineData=new LineData(rank,location,line);
              fLines.add(index++,lineData);
              fTopLineIndex++;
              fLastTopLineIndex++;
            }
          }
          rank++;
        }
        long rankOffset=fLines.get(index).rank - rank;
        for (int i=0; i < index; i++) {
          fLines.get(i).rank+=rankOffset;
        }
        if (firstRatio == 0) {
          break;
        }
        if (singleEvent) {
          delta=Math.min(delta * 10,0.1);
        }
      }
    }
    if (fTopLineIndex < 0) {
      fTopLineIndex=0;
    }
  }
  while (fLines.size() - fTopLineIndex < fNumVisibleLines) {
    if (fBottomContext == null) {
      if (fLines.size() == 0) {
        fBottomContext=fTrace.seekEvent(0);
      }
 else {
        fBottomContext=fTrace.seekEvent(fLines.get(fLines.size() - 1).location);
        fTrace.getNext(fBottomContext);
      }
      if (fBottomContext == null) {
        break;
      }
    }
    long rank=fBottomContext.getRank();
    ITmfLocation<?> location=fBottomContext.getLocation() != null ? fBottomContext.getLocation().clone() : null;
    ITmfEvent event=fTrace.getNext(fBottomContext);
    if (event == null) {
      break;
    }
    if (event.getContent() != null && event.getContent().getValue() != null) {
      for (      String line : event.getContent().getValue().toString().split(""String_Node_Str"")) {
        int crPos;
        if ((crPos=line.indexOf('\r')) != -1) {
          line=line.substring(0,crPos);
        }
        LineData lineData=new LineData(rank,location,line);
        fLines.add(lineData);
      }
    }
  }
  fTopLineIndex=Math.max(0,Math.min(fTopLineIndex,fLines.size() - 1));
  if (fLines.size() > MAX_LINE_DATA_SIZE) {
    if (fTopLineIndex < MAX_LINE_DATA_SIZE / 2) {
      long rank=fLines.get(MAX_LINE_DATA_SIZE - 1).rank;
      for (int i=MAX_LINE_DATA_SIZE; i < fLines.size(); i++) {
        if (fLines.get(i).rank > rank) {
          fLines.subList(i,fLines.size()).clear();
          fBottomContext=null;
          break;
        }
      }
    }
 else {
      long rank=fLines.get(fLines.size() - MAX_LINE_DATA_SIZE).rank;
      for (int i=fLines.size() - MAX_LINE_DATA_SIZE - 1; i >= 0; i--) {
        if (fLines.get(i).rank < rank) {
          fLines.subList(0,i + 1).clear();
          fTopLineIndex-=(i + 1);
          fLastTopLineIndex-=(i + 1);
          break;
        }
      }
    }
  }
}","private void loadLineData(){
  if (fTopLineIndex < 0) {
    if (fLines.size() > 0 && fTrace.getLocationRatio(fLines.get(0).location) > 0) {
      double lastRatio=fTrace.getLocationRatio(fLines.get(fLines.size() - 1).location);
      double firstRatio=fTrace.getLocationRatio(fLines.get(0).location);
      double delta;
      boolean singleEvent=false;
      if (firstRatio != lastRatio) {
        delta=Math.max(20,fNumVisibleLines) * (lastRatio - firstRatio) / (fLines.size() - 1);
      }
 else {
        delta=Math.pow(10,-15);
        singleEvent=true;
      }
      while (fTopLineIndex < 0) {
        ITmfLocation<?> endLocation=fLines.get(0).location;
        firstRatio=Math.max(0,firstRatio - delta);
        ITmfContext context=fTrace.seekEvent(firstRatio);
        ITmfLocation<?> location;
        int index=0;
        long rank=0;
        while (!context.getLocation().equals(endLocation)) {
          location=context.getLocation().clone();
          ITmfEvent event=fTrace.getNext(context);
          if (event == null) {
            break;
          }
          if (event.getContent() != null && event.getContent().getValue() != null) {
            String[] lines=event.getContent().getValue().toString().split(""String_Node_Str"");
            for (int i=0; i < lines.length; i++) {
              String line=lines[i];
              LineData lineData=new LineData(rank,location,line);
              fLines.add(index++,lineData);
              fTopLineIndex++;
              fLastTopLineIndex++;
            }
          }
 else {
            LineData lineData=new LineData(rank,location,""String_Node_Str"");
            fLines.add(index++,lineData);
            fTopLineIndex++;
            fLastTopLineIndex++;
          }
          rank++;
        }
        long rankOffset=fLines.get(index).rank - rank;
        for (int i=0; i < index; i++) {
          fLines.get(i).rank+=rankOffset;
        }
        if (firstRatio == 0) {
          break;
        }
        if (singleEvent) {
          delta=Math.min(delta * 10,0.1);
        }
      }
    }
    if (fTopLineIndex < 0) {
      fTopLineIndex=0;
    }
  }
  while (fLines.size() - fTopLineIndex < fNumVisibleLines) {
    if (fBottomContext == null) {
      if (fLines.size() == 0) {
        fBottomContext=fTrace.seekEvent(0);
      }
 else {
        fBottomContext=fTrace.seekEvent(fLines.get(fLines.size() - 1).location);
        fTrace.getNext(fBottomContext);
      }
      if (fBottomContext == null) {
        break;
      }
    }
    long rank=fBottomContext.getRank();
    ITmfLocation<?> location=fBottomContext.getLocation() != null ? fBottomContext.getLocation().clone() : null;
    ITmfEvent event=fTrace.getNext(fBottomContext);
    if (event == null) {
      break;
    }
    if (event.getContent() != null && event.getContent().getValue() != null) {
      for (      String line : event.getContent().getValue().toString().split(""String_Node_Str"")) {
        int crPos;
        if ((crPos=line.indexOf('\r')) != -1) {
          line=line.substring(0,crPos);
        }
        LineData lineData=new LineData(rank,location,line);
        fLines.add(lineData);
      }
    }
 else {
      LineData lineData=new LineData(rank,location,""String_Node_Str"");
      fLines.add(lineData);
    }
  }
  fTopLineIndex=Math.max(0,Math.min(fTopLineIndex,fLines.size() - 1));
  if (fLines.size() > MAX_LINE_DATA_SIZE) {
    if (fTopLineIndex < MAX_LINE_DATA_SIZE / 2) {
      long rank=fLines.get(MAX_LINE_DATA_SIZE - 1).rank;
      for (int i=MAX_LINE_DATA_SIZE; i < fLines.size(); i++) {
        if (fLines.get(i).rank > rank) {
          fLines.subList(i,fLines.size()).clear();
          fBottomContext=null;
          break;
        }
      }
    }
 else {
      long rank=fLines.get(fLines.size() - MAX_LINE_DATA_SIZE).rank;
      for (int i=fLines.size() - MAX_LINE_DATA_SIZE - 1; i >= 0; i--) {
        if (fLines.get(i).rank < rank) {
          fLines.subList(0,i + 1).clear();
          fTopLineIndex-=(i + 1);
          fLastTopLineIndex-=(i + 1);
          break;
        }
      }
    }
  }
}",0.9599183048251212
92369,"private void processData(){
  String timeStampString=fData.get(CustomTraceDefinition.TAG_TIMESTAMP);
  String timeStampInputFormat=fData.get(TIMESTAMP_INPUT_FORMAT_KEY);
  Date date=null;
  if (timeStampInputFormat != null && timeStampString != null) {
    SimpleDateFormat dateFormat=new SimpleDateFormat(timeStampInputFormat);
    try {
      date=dateFormat.parse(timeStampString);
      setTimestamp(new TmfTimestamp(date.getTime(),TIMESTAMP_SCALE));
    }
 catch (    ParseException e) {
      setTimestamp(TmfTimestamp.ZERO);
    }
  }
 else {
    setTimestamp(TmfTimestamp.ZERO);
  }
  int i=0;
  fColumnData=new TmfEventField[fDefinition.outputs.size()];
  for (  OutputColumn outputColumn : fDefinition.outputs) {
    String value=fData.get(outputColumn.name);
    if (outputColumn.name.equals(CustomTraceDefinition.TAG_TIMESTAMP) && date != null) {
      SimpleDateFormat dateFormat=new SimpleDateFormat(fDefinition.timeStampOutputFormat);
      fColumnData[i++]=new TmfEventField(outputColumn.name,dateFormat.format(date));
    }
 else {
      fColumnData[i++]=new TmfEventField(outputColumn.name,(value != null ? value : ""String_Node_Str""));
    }
  }
  fData=null;
}","private void processData(){
  String timeStampString=fData.get(CustomTraceDefinition.TAG_TIMESTAMP);
  String timeStampInputFormat=fData.get(TIMESTAMP_INPUT_FORMAT_KEY);
  Date date=null;
  if (timeStampInputFormat != null && timeStampString != null) {
    SimpleDateFormat dateFormat=new SimpleDateFormat(timeStampInputFormat);
    try {
      date=dateFormat.parse(timeStampString);
      setTimestamp(new TmfTimestamp(date.getTime(),TIMESTAMP_SCALE));
    }
 catch (    ParseException e) {
      setTimestamp(TmfTimestamp.ZERO);
    }
  }
 else {
    setTimestamp(TmfTimestamp.ZERO);
  }
  int i=0;
  fColumnData=new TmfEventField[fDefinition.outputs.size()];
  for (  OutputColumn outputColumn : fDefinition.outputs) {
    String value=fData.get(outputColumn.name);
    if (outputColumn.name.equals(CustomTraceDefinition.TAG_TIMESTAMP) && date != null) {
      SimpleDateFormat dateFormat=new SimpleDateFormat(fDefinition.timeStampOutputFormat);
      fColumnData[i++]=new TmfEventField(outputColumn.name,dateFormat.format(date));
    }
 else {
      fColumnData[i++]=new TmfEventField(outputColumn.name,(value != null ? value : ""String_Node_Str""));
    }
  }
  CustomEventContent content=(CustomEventContent)getContent();
  content.setFields(fColumnData);
  fData=null;
}",0.960488798370672
92370,"/** 
 * Given a timestamp, this methods returns the first PacketIndexEntry that could include the timestamp, that is the last packet with a begin timestamp smaller than the given timestamp.
 * @param timestamp The timestamp to look for.
 * @return The StreamInputPacketEntry that corresponds to the packet thatincludes the given timestamp.
 */
public ListIterator<StreamInputPacketIndexEntry> search(final long timestamp){
  int max=this.entries.size() - 1;
  int min=0;
  int guessI;
  StreamInputPacketIndexEntry guessEntry=null;
  if (timestamp < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (; ; ) {
    guessI=(max + min + 1) / 2;
    guessEntry=this.entries.get(guessI);
    if (min == max) {
      break;
    }
    if (timestamp < guessEntry.getTimestampBegin()) {
      max=guessI - 1;
    }
 else     if (timestamp >= guessEntry.getTimestampBegin()) {
      min=guessI;
    }
  }
  return this.entries.listIterator(guessI);
}","/** 
 * Given a timestamp, this methods returns the first PacketIndexEntry that could include the timestamp, that is the last packet with a begin timestamp smaller than the given timestamp.
 * @param timestamp The timestamp to look for.
 * @return The StreamInputPacketEntry that corresponds to the packet thatincludes the given timestamp.
 */
public ListIterator<StreamInputPacketIndexEntry> search(final long timestamp){
  int max=this.entries.size() - 1;
  int min=0;
  int guessI;
  StreamInputPacketIndexEntry guessEntry=null;
  if (this.getEntries().isEmpty()) {
    return this.getEntries().listIterator();
  }
  if (timestamp < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (; ; ) {
    guessI=(max + min + 1) / 2;
    guessEntry=this.entries.get(guessI);
    if (min == max) {
      break;
    }
    if (timestamp < guessEntry.getTimestampBegin()) {
      max=guessI - 1;
    }
 else     if (timestamp >= guessEntry.getTimestampBegin()) {
      min=guessI;
    }
  }
  return this.entries.listIterator(guessI);
}",0.9572564612326044
92371,"/** 
 * Method increaseRank.
 * @see org.eclipse.linuxtools.tmf.core.trace.ITmfContext#increaseRank()
 */
@Override public void increaseRank(){
  curRank++;
}","/** 
 * Method increaseRank.
 * @see org.eclipse.linuxtools.tmf.core.trace.ITmfContext#increaseRank()
 */
@Override public void increaseRank(){
  if (hasValidRank()) {
    curRank++;
  }
}",0.9132947976878611
92372,"/** 
 * Method readNextEvent.
 * @param context ITmfContext
 * @return CtfTmfEvent
 * @see org.eclipse.linuxtools.tmf.core.trace.ITmfTrace#getNext(ITmfContext)
 */
@Override public synchronized CtfTmfEvent getNext(final ITmfContext context){
  CtfTmfEvent event=null;
  if (context instanceof CtfIterator) {
    CtfIterator ctfIterator=(CtfIterator)context;
    event=ctfIterator.getCurrentEvent();
    ctfIterator.advance();
    if (event != null) {
      updateAttributes(context,event.getTimestamp());
    }
  }
  return event;
}","/** 
 * Method readNextEvent.
 * @param context ITmfContext
 * @return CtfTmfEvent
 * @see org.eclipse.linuxtools.tmf.core.trace.ITmfTrace#getNext(ITmfContext)
 */
@Override public synchronized CtfTmfEvent getNext(final ITmfContext context){
  CtfTmfEvent event=null;
  if (context instanceof CtfIterator) {
    CtfIterator ctfIterator=(CtfIterator)context;
    event=ctfIterator.getCurrentEvent();
    if (event != null) {
      updateAttributes(context,event.getTimestamp());
      ctfIterator.advance();
      ctfIterator.increaseRank();
    }
  }
  return event;
}",0.9181818181818182
92373,"/** 
 * Method initTrace.
 * @param resource IResource
 * @param path String
 * @param eventType Class<CtfTmfEvent>
 * @throws TmfTraceException
 * @see org.eclipse.linuxtools.tmf.core.trace.ITmfTrace#initTrace(IResource, String, Class<CtfTmfEvent>)
 */
@Override public void initTrace(final IResource resource,final String path,final Class<CtfTmfEvent> eventType) throws TmfTraceException {
  super.initTrace(resource,path,eventType);
  EventDeclaration ed;
  ITmfEventField eventField;
  setCacheSize();
  @SuppressWarnings(""String_Node_Str"") CtfTmfEventType type;
  try {
    this.fTrace=new CTFTrace(path);
    for (int i=0; i < this.fTrace.getNbEventTypes(); i++) {
      ed=this.fTrace.getEventType(i);
      eventField=parseDeclaration(ed);
      type=new CtfTmfEventType(ed.getName(),eventField);
    }
    final CtfIterator iterator=new CtfIterator(this,0,0);
    if (iterator.getLocation().equals(CtfIterator.NULL_LOCATION)) {
      this.setStartTime(TmfTimestamp.BIG_BANG);
    }
 else {
      this.setStartTime(iterator.getCurrentEvent().getTimestamp());
      if (iterator.hasMoreEvents()) {
        iterator.goToLastEvent();
      }
      this.setEndTime(iterator.getCurrentEvent().getTimestamp());
    }
  }
 catch (  final CTFReaderException e) {
    throw new TmfTraceException(e.getMessage(),e);
  }
  buildStateSystem();
  if (resource != null) {
    try {
      resource.getProject().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      throw new TmfTraceException(e.getMessage(),e);
    }
  }
}","/** 
 * Method initTrace.
 * @param resource IResource
 * @param path String
 * @param eventType Class<CtfTmfEvent>
 * @throws TmfTraceException
 * @see org.eclipse.linuxtools.tmf.core.trace.ITmfTrace#initTrace(IResource, String, Class<CtfTmfEvent>)
 */
@Override public void initTrace(final IResource resource,final String path,final Class<CtfTmfEvent> eventType) throws TmfTraceException {
  setCacheSize();
  super.initTrace(resource,path,eventType);
  EventDeclaration ed;
  ITmfEventField eventField;
  @SuppressWarnings(""String_Node_Str"") CtfTmfEventType type;
  try {
    this.fTrace=new CTFTrace(path);
    for (int i=0; i < this.fTrace.getNbEventTypes(); i++) {
      ed=this.fTrace.getEventType(i);
      eventField=parseDeclaration(ed);
      type=new CtfTmfEventType(ed.getName(),eventField);
    }
    final CtfIterator iterator=new CtfIterator(this,0,0);
    if (iterator.getLocation().equals(CtfIterator.NULL_LOCATION)) {
      this.setStartTime(TmfTimestamp.BIG_BANG);
    }
 else {
      this.setStartTime(iterator.getCurrentEvent().getTimestamp());
      this.setEndTime(iterator.getCurrentEvent().getTimestamp());
    }
  }
 catch (  final CTFReaderException e) {
    throw new TmfTraceException(e.getMessage(),e);
  }
  buildStateSystem();
  if (resource != null) {
    try {
      resource.getProject().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      throw new TmfTraceException(e.getMessage(),e);
    }
  }
}",0.96158940397351
92374,"@Override public void setTimeBounds(long beginTime,long endTime){
  _beginTime=beginTime;
  _endTime=endTime;
  _time0_=beginTime;
  _time1_=endTime;
  _stateCtrl.adjustScrolls();
  _stateCtrl.redraw();
  _timeScaleCtrl.redraw();
}","@Override public void setTimeBounds(long beginTime,long endTime){
  _beginTime=beginTime;
  _endTime=endTime;
  _time0_=beginTime;
  _time1_=endTime;
  _stateCtrl.adjustScrolls();
}",0.8786407766990292
92375,"@Override public void initTrace(final IResource resource,final String path,final Class<T> type) throws TmfTraceException {
  initialize(resource,path,type);
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void initTrace(final IResource resource,final String path,final Class<T> type) throws TmfTraceException {
  fIndexer=new TmfCheckpointIndexer(this,fCacheSize);
  initialize(resource,path,type);
}",0.7400468384074942
92376,"/** 
 * Tries to open the given file, reads the first packet header of the file and check its validity.
 * @param streamFile A trace file in the trace directory.
 * @param index Which index in the class' streamFileChannel array this file must use
 * @throws CTFReaderException
 */
private void openStreamInput(File streamFile) throws CTFReaderException {
  MappedByteBuffer byteBuffer;
  BitBuffer streamBitBuffer;
  Stream stream;
  FileChannel fc;
  if (!streamFile.canRead()) {
    throw new CTFReaderException(""String_Node_Str"" + streamFile.getPath());
  }
  try {
    fc=new FileInputStream(streamFile).getChannel();
    streamFileChannels.add(fc);
    byteBuffer=fc.map(MapMode.READ_ONLY,0,4096);
  }
 catch (  IOException e) {
    throw new CTFReaderException();
  }
  streamBitBuffer=new BitBuffer(byteBuffer,this.getByteOrder());
  if (packetHeaderDef != null) {
    packetHeaderDef.read(streamBitBuffer);
    IntegerDefinition magicDef=(IntegerDefinition)packetHeaderDef.lookupDefinition(""String_Node_Str"");
    int magic=(int)magicDef.getValue();
    if (magic != Utils.CTF_MAGIC) {
      throw new CTFReaderException(""String_Node_Str"");
    }
    ArrayDefinition uuidDef=(ArrayDefinition)packetHeaderDef.lookupDefinition(""String_Node_Str"");
    assert((uuidDef != null) && (uuidDef.getDeclaration().getLength() == Utils.UUID_LEN));
    if (uuidDef != null) {
      byte[] uuidArray=new byte[Utils.UUID_LEN];
      for (int i=0; i < Utils.UUID_LEN; i++) {
        IntegerDefinition uuidByteDef=(IntegerDefinition)uuidDef.getElem(i);
        uuidArray[i]=(byte)uuidByteDef.getValue();
      }
      UUID otheruuid=Utils.makeUUID(uuidArray);
      if (!this.uuid.equals(otheruuid)) {
        throw new CTFReaderException(""String_Node_Str"");
      }
    }
    IntegerDefinition streamIDDef=(IntegerDefinition)packetHeaderDef.lookupDefinition(""String_Node_Str"");
    assert(streamIDDef != null);
    long streamID=streamIDDef.getValue();
    stream=streams.get(streamID);
  }
 else {
    stream=streams.get(null);
  }
  StreamInput streamInput=new StreamInput(stream,fc,streamFile);
  stream.addInput(streamInput);
}","/** 
 * Tries to open the given file, reads the first packet header of the file and check its validity.
 * @param streamFile A trace file in the trace directory.
 * @param index Which index in the class' streamFileChannel array this file must use
 * @throws CTFReaderException
 */
private void openStreamInput(File streamFile) throws CTFReaderException {
  MappedByteBuffer byteBuffer;
  BitBuffer streamBitBuffer;
  Stream stream;
  FileChannel fc;
  if (!streamFile.canRead()) {
    throw new CTFReaderException(""String_Node_Str"" + streamFile.getPath());
  }
  try {
    fc=new FileInputStream(streamFile).getChannel();
    streamFileChannels.add(fc);
    byteBuffer=fc.map(MapMode.READ_ONLY,0,4096);
  }
 catch (  IOException e) {
    throw new CTFReaderException();
  }
  streamBitBuffer=new BitBuffer(byteBuffer,this.getByteOrder());
  if (packetHeaderDef != null) {
    packetHeaderDef.read(streamBitBuffer);
    IntegerDefinition magicDef=(IntegerDefinition)packetHeaderDef.lookupDefinition(""String_Node_Str"");
    int magic=(int)magicDef.getValue();
    if (magic != Utils.CTF_MAGIC) {
      throw new CTFReaderException(""String_Node_Str"");
    }
    ArrayDefinition uuidDef=(ArrayDefinition)packetHeaderDef.lookupDefinition(""String_Node_Str"");
    if (uuidDef != null) {
      byte[] uuidArray=new byte[Utils.UUID_LEN];
      for (int i=0; i < Utils.UUID_LEN; i++) {
        IntegerDefinition uuidByteDef=(IntegerDefinition)uuidDef.getElem(i);
        uuidArray[i]=(byte)uuidByteDef.getValue();
      }
      UUID otheruuid=Utils.makeUUID(uuidArray);
      if (!this.uuid.equals(otheruuid)) {
        throw new CTFReaderException(""String_Node_Str"");
      }
    }
    IntegerDefinition streamIDDef=(IntegerDefinition)packetHeaderDef.lookupDefinition(""String_Node_Str"");
    assert(streamIDDef != null);
    long streamID=streamIDDef.getValue();
    stream=streams.get(streamID);
  }
 else {
    stream=streams.get(null);
  }
  StreamInput streamInput=new StreamInput(stream,fc,streamFile);
  stream.addInput(streamInput);
}",0.978098676293622
92377,"@Override protected void finalize(){
  for (  FileChannel fc : streamFileChannels) {
    if (fc != null) {
      try {
        fc.close();
      }
 catch (      IOException e) {
      }
    }
  }
  try {
    super.finalize();
  }
 catch (  Throwable e) {
  }
}","@Override protected void finalize() throws Throwable {
  for (  FileChannel fc : streamFileChannels) {
    if (fc != null) {
      try {
        fc.close();
      }
 catch (      IOException e) {
      }
    }
  }
  super.finalize();
}",0.8727272727272727
92378,"@Override @SuppressWarnings(""String_Node_Str"") public String toString(){
  if (equals(BIG_BANG)) {
    return ""String_Node_Str"";
  }
  if (equals(BIG_CRUNCH)) {
    return ""String_Node_Str"";
  }
  if (equals(ZERO)) {
    return ""String_Node_Str"";
  }
  return ""String_Node_Str"" + fValue + ""String_Node_Str""+ fScale+ ""String_Node_Str""+ fPrecision+ ""String_Node_Str"";
}","@Override @SuppressWarnings(""String_Node_Str"") public String toString(){
  return ""String_Node_Str"" + fValue + ""String_Node_Str""+ fScale+ ""String_Node_Str""+ fPrecision+ ""String_Node_Str"";
}",0.6798561151079137
92379,"@Override public ITmfContext armRequest(final ITmfDataRequest<T> request){
  ITmfTimestamp timestamp=(request instanceof ITmfEventRequest<?>) ? ((ITmfEventRequest<T>)request).getRange().getStartTime() : null;
  if (TmfTimestamp.BIG_BANG.equals(timestamp) || request.getIndex() > 0) {
    timestamp=null;
  }
  if (request.getIndex() == 600001) {
    System.out.println(""String_Node_Str"");
  }
  ITmfContext context=null;
  if (timestamp != null) {
    context=seekEvent(timestamp);
    ((ITmfEventRequest<T>)request).setStartIndex((int)context.getRank());
  }
 else {
    context=seekEvent(request.getIndex());
  }
  return context;
}","@Override public ITmfContext armRequest(final ITmfDataRequest<T> request){
  ITmfTimestamp timestamp=(request instanceof ITmfEventRequest<?>) ? ((ITmfEventRequest<T>)request).getRange().getStartTime() : null;
  if (TmfTimestamp.BIG_BANG.equals(timestamp) || request.getIndex() > 0) {
    timestamp=null;
  }
  ITmfContext context=null;
  if (timestamp != null) {
    context=seekEvent(timestamp);
    ((ITmfEventRequest<T>)request).setStartIndex((int)context.getRank());
  }
 else {
    context=seekEvent(request.getIndex());
  }
  return context;
}",0.9281487743026204
92380,"@Override public synchronized void updateIndex(final ITmfContext context,final ITmfTimestamp timestamp){
  final long rank=context.getRank();
  if ((rank % fCheckpointInterval) == 0) {
    final long position=rank / fCheckpointInterval;
    if (fTraceIndex.size() == position) {
      final ITmfLocation<?> location=context.getLocation().clone();
      fTraceIndex.add(new TmfCheckpoint(timestamp.clone(),location));
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + (fTraceIndex.size() - 1) + ""String_Node_Str""+ timestamp+ ""String_Node_Str""+ location.toString());
    }
  }
}","@Override public synchronized void updateIndex(final ITmfContext context,final ITmfTimestamp timestamp){
  final long rank=context.getRank();
  if ((rank % fCheckpointInterval) == 0) {
    final long position=rank / fCheckpointInterval;
    if (fTraceIndex.size() == position) {
      final ITmfLocation<?> location=context.getLocation().clone();
      fTraceIndex.add(new TmfCheckpoint(timestamp.clone(),location));
    }
  }
}",0.8400392541707556
92381,"@Override public void buildIndex(final boolean waitForCompletion){
  final Job job=new Job(""String_Node_Str"" + fTrace.getName() + ""String_Node_Str""){
    @Override protected IStatus run(    final IProgressMonitor monitor){
      while (!monitor.isCanceled()) {
        try {
          Thread.sleep(100);
        }
 catch (        final InterruptedException e) {
          return Status.OK_STATUS;
        }
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
  System.out.println(""String_Node_Str"");
  ;
  fTraceIndex.clear();
  final ITmfEventRequest<ITmfEvent> request=new TmfEventRequest<ITmfEvent>(ITmfEvent.class,TmfTimeRange.ETERNITY,TmfDataRequest.ALL_DATA,fCheckpointInterval,ITmfDataRequest.ExecutionType.BACKGROUND){
    private ITmfTimestamp startTime=null;
    private ITmfTimestamp lastTime=null;
    @Override public void handleData(    final ITmfEvent event){
      super.handleData(event);
      if (event != null) {
        final ITmfTimestamp timestamp=event.getTimestamp();
        if (startTime == null) {
          startTime=timestamp.clone();
        }
        lastTime=timestamp.clone();
        if (Tracer.isEventTraced()) {
          Tracer.traceEvent(fTrace,this,event);
        }
        if ((getNbRead() % fCheckpointInterval) == 0) {
          updateTraceStatus();
        }
      }
    }
    @Override public void handleSuccess(){
      updateTraceStatus();
    }
    @Override public void handleCompleted(){
      job.cancel();
      super.handleCompleted();
    }
    private void updateTraceStatus(){
      if (getNbRead() != 0) {
        signalNewTimeRange(startTime,lastTime);
      }
    }
  }
;
  fTrace.sendRequest(request);
  if (waitForCompletion) {
    try {
      request.waitForCompletion();
    }
 catch (    final InterruptedException e) {
    }
  }
}","@Override public void buildIndex(final boolean waitForCompletion){
  final Job job=new Job(""String_Node_Str"" + fTrace.getName() + ""String_Node_Str""){
    @Override protected IStatus run(    final IProgressMonitor monitor){
      while (!monitor.isCanceled()) {
        try {
          Thread.sleep(100);
        }
 catch (        final InterruptedException e) {
          return Status.OK_STATUS;
        }
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
  fTraceIndex.clear();
  final ITmfEventRequest<ITmfEvent> request=new TmfEventRequest<ITmfEvent>(ITmfEvent.class,TmfTimeRange.ETERNITY,TmfDataRequest.ALL_DATA,fCheckpointInterval,ITmfDataRequest.ExecutionType.BACKGROUND){
    private ITmfTimestamp startTime=null;
    private ITmfTimestamp lastTime=null;
    @Override public void handleData(    final ITmfEvent event){
      super.handleData(event);
      if (event != null) {
        final ITmfTimestamp timestamp=event.getTimestamp();
        if (startTime == null) {
          startTime=timestamp.clone();
        }
        lastTime=timestamp.clone();
        if ((getNbRead() % fCheckpointInterval) == 0) {
          updateTraceStatus();
        }
      }
    }
    @Override public void handleSuccess(){
      updateTraceStatus();
    }
    @Override public void handleCompleted(){
      job.cancel();
      super.handleCompleted();
    }
    private void updateTraceStatus(){
      if (getNbRead() != 0) {
        signalNewTimeRange(startTime,lastTime);
      }
    }
  }
;
  fTrace.sendRequest(request);
  if (waitForCompletion) {
    try {
      request.waitForCompletion();
    }
 catch (    final InterruptedException e) {
    }
  }
}",0.9600453386228394
92382,"@Override public void handleData(final ITmfEvent event){
  super.handleData(event);
  if (event != null) {
    final ITmfTimestamp timestamp=event.getTimestamp();
    if (startTime == null) {
      startTime=timestamp.clone();
    }
    lastTime=timestamp.clone();
    if (Tracer.isEventTraced()) {
      Tracer.traceEvent(fTrace,this,event);
    }
    if ((getNbRead() % fCheckpointInterval) == 0) {
      updateTraceStatus();
    }
  }
}","@Override public void handleData(final ITmfEvent event){
  super.handleData(event);
  if (event != null) {
    final ITmfTimestamp timestamp=event.getTimestamp();
    if (startTime == null) {
      startTime=timestamp.clone();
    }
    lastTime=timestamp.clone();
    if ((getNbRead() % fCheckpointInterval) == 0) {
      updateTraceStatus();
    }
  }
}",0.8942065491183879
92383,"private void sendFullRangeRequest(TmfTimeRange fullRange){
  if (fFullTraceRequest != null && !fFullTraceRequest.isCompleted()) {
    fFullTraceRequest.cancel();
  }
  int cacheSize=fCurrentExperiment.getCacheSize();
  fFullTraceRequest=new HistogramRequest(fFullTraceHistogram.getDataModel(),fullRange,(int)fFullTraceHistogram.fDataModel.getNbEvents(),TmfDataRequest.ALL_DATA,cacheSize,ExecutionType.BACKGROUND);
  fCurrentExperiment.sendRequest(fFullTraceRequest);
}","private void sendFullRangeRequest(TmfTimeRange fullRange){
  if (fFullTraceRequest != null && !fFullTraceRequest.isCompleted()) {
    fFullTraceRequest.cancel();
  }
  if (fullRange.equals(TmfTimeRange.NULL_RANGE)) {
    return;
  }
  int cacheSize=fCurrentExperiment.getCacheSize();
  fFullTraceRequest=new HistogramRequest(fFullTraceHistogram.getDataModel(),fullRange,(int)fFullTraceHistogram.fDataModel.getNbEvents(),TmfDataRequest.ALL_DATA,cacheSize,ExecutionType.BACKGROUND);
  fCurrentExperiment.sendRequest(fFullTraceRequest);
}",0.9332003988035892
92384,"public PieChart(Composite parent,int style){
  super(parent,style);
  for (  Control child : getChildren()) {
    if (child.getClass().getName().equals(""String_Node_Str"") || child.getClass().getName().equals(""String_Node_Str"")) {
      child.setVisible(false);
    }
  }
  this.addPaintListener(new PieChartPaintListener(this));
}","public PieChart(Composite parent,int style){
  super(parent,style);
  Control plotArea=null;
  for (  Control child : getChildren()) {
    if (child.getClass().getName().equals(""String_Node_Str""))     child.setVisible(false);
 else     if (child.getClass().getName().equals(""String_Node_Str"")) {
      child.setVisible(false);
      plotArea=child;
    }
  }
  this.addPaintListener(new PieChartPaintListener(this,plotArea));
}",0.8612945838837517
92385,"public void paintControl(PaintEvent e){
  GC gc=e.gc;
  Rectangle bounds=gc.getClipping();
  double[][] series=this.getPieSeriesArray();
  int width=(bounds.width - bounds.x) / series.length;
  int x=bounds.x;
  for (  double s[] : series) {
    drawPieChart(e,s,new Rectangle(x,bounds.y,width,bounds.height));
    x+=width;
  }
}","public void paintControl(PaintEvent e){
  GC gc=e.gc;
  Rectangle bounds;
  if (plotArea == null)   bounds=gc.getClipping();
 else   bounds=plotArea.getBounds();
  double[][] series=this.getPieSeriesArray();
  int width=(bounds.width - bounds.x) / series.length;
  int x=bounds.x;
  for (  double s[] : series) {
    drawPieChart(e,s,new Rectangle(x,bounds.y,width,bounds.height));
    x+=width;
  }
}",0.902872777017784
92386,"private void drawPieChart(PaintEvent e,double series[],Rectangle bounds){
  int nelemSeries=series.length;
  double sumTotal=0;
  for (int i=0; i < nelemSeries; i++) {
    sumTotal+=series[i];
  }
  GC gc=e.gc;
  gc.setLineWidth(1);
  int pieWidth=Math.min(bounds.width,bounds.height) / 2;
  int pieX=bounds.x + (bounds.width - pieWidth) / 2;
  int pieY=bounds.y + (bounds.height - pieWidth) / 2;
  if (sumTotal == 0)   gc.drawOval(pieX,pieY,pieWidth,pieWidth);
 else {
    double factor=100 / sumTotal;
    int sweepAngle=0;
    int incrementAngle=0;
    int initialAngle=90;
    for (int i=0; i < nelemSeries; i++) {
      gc.setBackground(new Color(e.display,IColorsConstants.COLORS[i]));
      if (i == (nelemSeries - 1))       sweepAngle=360 - incrementAngle;
 else {
        double angle=series[i] * factor * 3.6;
        sweepAngle=(int)Math.round(angle);
      }
      gc.fillArc(pieX,pieY,pieWidth,pieWidth,initialAngle,(-sweepAngle));
      gc.drawArc(pieX,pieY,pieWidth,pieWidth,initialAngle,(-sweepAngle));
      incrementAngle+=sweepAngle;
      initialAngle+=(-sweepAngle);
    }
  }
}","private void drawPieChart(PaintEvent e,double series[],Rectangle bounds){
  int nelemSeries=series.length;
  double sumTotal=0;
  for (int i=0; i < nelemSeries; i++) {
    sumTotal+=series[i];
  }
  GC gc=e.gc;
  gc.setLineWidth(1);
  int pieWidth=Math.min(bounds.width - X_GAP,bounds.height);
  int pieX=bounds.x + (bounds.width - pieWidth) / 2;
  int pieY=bounds.y + (bounds.height - pieWidth) / 2;
  if (sumTotal == 0)   gc.drawOval(pieX,pieY,pieWidth,pieWidth);
 else {
    double factor=100 / sumTotal;
    int sweepAngle=0;
    int incrementAngle=0;
    int initialAngle=90;
    for (int i=0; i < nelemSeries; i++) {
      gc.setBackground(new Color(e.display,IColorsConstants.COLORS[i]));
      if (i == (nelemSeries - 1))       sweepAngle=360 - incrementAngle;
 else {
        double angle=series[i] * factor * 3.6;
        sweepAngle=(int)Math.round(angle);
      }
      gc.fillArc(pieX,pieY,pieWidth,pieWidth,initialAngle,(-sweepAngle));
      gc.drawArc(pieX,pieY,pieWidth,pieWidth,initialAngle,(-sweepAngle));
      incrementAngle+=sweepAngle;
      initialAngle+=(-sweepAngle);
    }
  }
}",0.994550408719346
92387,"public PieChartPaintListener(PieChart chart){
  this.chart=chart;
}","public PieChartPaintListener(PieChart chart,Control plotArea){
  this.chart=chart;
  this.plotArea=plotArea;
}",0.7570621468926554
92388,"/** 
 * Method getType.
 * @return ITmfEventType
 * @see org.eclipse.linuxtools.tmf.core.event.ITmfEvent#getType()
 */
@Override public ITmfEventType getType(){
  return CtfTmfEventType.get(eventName);
}","/** 
 * Method getType.
 * @return ITmfEventType
 * @see org.eclipse.linuxtools.tmf.core.event.ITmfEvent#getType()
 */
@Override public ITmfEventType getType(){
  CtfTmfEventType ctfTmfEventType=CtfTmfEventType.get(eventName);
  if (ctfTmfEventType == null) {
    ctfTmfEventType=new CtfTmfEventType(this.getEventName(),this.getContent());
  }
  return ctfTmfEventType;
}",0.6829268292682927
92389,"@Override public synchronized ITmfEvent readNextEvent(final ITmfContext context){
  final ITmfEvent event=parseEvent(context);
  if (event != null) {
    updateAttributes(context,event.getTimestamp());
    TmfExperimentContext expContext=(TmfExperimentContext)context;
    int trace=expContext.getLastTrace();
    if (trace != TmfExperimentContext.NO_TRACE) {
      TmfExperimentLocation location=(TmfExperimentLocation)expContext.getLocation();
      location.getLocation().getLocations()[trace]=expContext.getContexts()[trace].getLocation();
    }
    context.increaseRank();
    processEvent(event);
  }
  return event;
}","@Override public synchronized ITmfEvent readNextEvent(final ITmfContext context){
  final ITmfContext previousContext=(TmfExperimentContext)context.clone();
  final ITmfEvent event=parseEvent(context);
  if (event != null) {
    updateAttributes(previousContext,event.getTimestamp());
    TmfExperimentContext expContext=(TmfExperimentContext)context;
    int trace=expContext.getLastTrace();
    if (trace != TmfExperimentContext.NO_TRACE) {
      TmfExperimentLocation location=(TmfExperimentLocation)expContext.getLocation();
      location.getLocation().getLocations()[trace]=expContext.getContexts()[trace].getLocation();
    }
    context.increaseRank();
    processEvent(event);
  }
  return event;
}",0.936138241923366
92390,"/** 
 * @return the location of the event referred to by the context
 */
public ITmfLocation<? extends Comparable<?>> getLocation();","/** 
 * @return the location of the event at the context rank
 */
public ITmfLocation<? extends Comparable<?>> getLocation();",0.926070038910506
92391,"/** 
 * @return the rank of the event referred to by the context
 */
public long getRank();","/** 
 * @return the rank of the event at the context location
 */
public long getRank();",0.8715083798882681
92392,"@Override public ITmfEventField getField(int index){
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override public ITmfEventField getField(int index){
  return null;
}",0.7885714285714286
92393,"@Override public String getFieldName(int index){
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override public String getFieldName(int index){
  return null;
}",0.7784431137724551
92394,"@Override public String getName(){
  final String temp[]=this.fTrace.getPath().split(System.getProperty(""String_Node_Str""));
  if (temp.length > 2) {
    return temp[temp.length - 1];
  }
  return temp[0];
}","@Override public String getName(){
  String traceName=(fResource != null) ? fResource.getName() : null;
  if (traceName == null) {
    final String path=this.fTrace.getPath();
    final int sep=path.lastIndexOf(IPath.SEPARATOR);
    traceName=(sep >= 0) ? path.substring(sep + 1) : path;
  }
  return traceName;
}",0.3538461538461538
92395,"@Override public void initTrace(final IResource resource,final String path,final Class<CtfTmfEvent> eventType) throws TmfTraceException {
  this.fResource=resource;
  try {
    this.fTrace=new CTFTrace(path);
  }
 catch (  final CTFReaderException e) {
    throw new TmfTraceException(e.getMessage());
  }
  this.iterator=new CtfIterator(this,0,0);
  setStartTime(TmfTimestamp.BIG_BANG);
  if (!this.iterator.getLocation().equals(CtfIterator.nullLocation)) {
    setStartTime(iterator.getCurrentEvent().getTimestamp());
  }
  TmfSignalManager.register(this);
  buildStateSystem();
  if (resource != null) {
    try {
      resource.getProject().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      throw new TmfTraceException(e.getMessage());
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void initTrace(final IResource resource,final String path,final Class<CtfTmfEvent> eventType) throws TmfTraceException {
  this.fResource=resource;
  try {
    this.fTrace=new CTFTrace(path);
  }
 catch (  final CTFReaderException e) {
    throw new TmfTraceException(e.getMessage());
  }
  this.iterator=new CtfIterator(this,0,0);
  setStartTime(TmfTimestamp.BIG_BANG);
  if (!this.iterator.getLocation().equals(CtfIterator.nullLocation)) {
    setStartTime(iterator.getCurrentEvent().getTimestamp());
  }
  TmfSignalManager.register(this);
  buildStateSystem();
  if (resource != null) {
    try {
      resource.getProject().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      throw new TmfTraceException(e.getMessage());
    }
  }
}",0.9770897832817338
92396,"@Override public boolean validate(final IProject project,final String path){
  try {
    final CTFTrace temp=new CTFTrace(path);
    return temp.majortIsSet();
  }
 catch (  final CTFReaderException e) {
    return false;
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean validate(final IProject project,final String path){
  try {
    final CTFTrace temp=new CTFTrace(path);
    return temp.majortIsSet();
  }
 catch (  final CTFReaderException e) {
    return false;
  }
}",0.924643584521385
92397,"@Override public CtfTmfEvent readNextEvent(final ITmfContext context){
  iterator.advance();
  return iterator.getCurrentEvent();
}","@SuppressWarnings(""String_Node_Str"") @Override public CtfTmfEvent readNextEvent(final ITmfContext context){
  iterator.advance();
  return iterator.getCurrentEvent();
}",0.8762541806020067
92398,"/** 
 * Suppressing the warning, because the 'throws' will usually happen in sub-classes.
 */
@SuppressWarnings(""String_Node_Str"") protected void buildStateSystem() throws TmfTraceException {
  return;
}","/** 
 * Suppressing the warning, because the 'throws' will usually happen in sub-classes.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void buildStateSystem() throws TmfTraceException {
  return;
}",0.9530516431924884
92399,"/** 
 * The trace reader keeps its own iterator: the ""context"" parameter here will be ignored. If you wish to specify a new context, instantiate a new CtfIterator and seek() it to where you want, and use that to read events. FIXME merge with getNextEvent below once they both use the same parameter type.
 */
@Override public CtfTmfEvent getNext(final ITmfContext context){
  iterator.advance();
  return iterator.getCurrentEvent();
}","/** 
 * The trace reader keeps its own iterator: the ""context"" parameter here will be ignored. If you wish to specify a new context, instantiate a new CtfIterator and seek() it to where you want, and use that to read events. FIXME merge with getNextEvent below once they both use the same parameter type.
 */
@SuppressWarnings(""String_Node_Str"") @Override public CtfTmfEvent getNext(final ITmfContext context){
  iterator.advance();
  return iterator.getCurrentEvent();
}",0.9591160220994476
92400,"public TimeGraphCombo(Composite parent,int style){
  super(parent,style);
  setLayout(new FillLayout());
  final SashForm sash=new SashForm(this,SWT.NONE);
  fTreeViewer=new TreeViewer(sash,SWT.FULL_SELECTION | SWT.H_SCROLL);
  final Tree tree=fTreeViewer.getTree();
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  fTimeGraphViewer=new TimeGraphViewer(sash,SWT.NONE);
  fTimeGraphViewer.setItemHeight(tree.getItemHeight() + getTreeItemHeightAdjustement());
  fTimeGraphViewer.setHeaderHeight(tree.getHeaderHeight());
  fTimeGraphViewer.setBorderWidth(tree.getBorderWidth());
  fTimeGraphViewer.setNameWidthPref(0);
  fTreeViewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      fTimeGraphViewer.setExpandedState((ITimeGraphEntry)event.getElement(),false);
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      fTimeGraphViewer.setExpandedState((ITimeGraphEntry)event.getElement(),true);
    }
  }
);
  fTimeGraphViewer.addTreeListener(new ITimeGraphTreeListener(){
    @Override public void treeCollapsed(    TimeGraphTreeExpansionEvent event){
      fTreeViewer.setExpandedState(event.getEntry(),false);
    }
    @Override public void treeExpanded(    TimeGraphTreeExpansionEvent event){
      fTreeViewer.setExpandedState(event.getEntry(),true);
    }
  }
);
  tree.addListener(SWT.MouseDown,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem treeItem=tree.getItem(new Point(event.x,event.y));
      if (treeItem == null || treeItem.getData() == FILLER) {
        event.doit=false;
        ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
        if (treeItems.size() == 0) {
          return;
        }
        tree.select(treeItems.get(treeItems.size() - 1));
        fTreeViewer.setSelection(new StructuredSelection());
        fTimeGraphViewer.setSelection(null);
      }
    }
  }
);
  tree.addListener(SWT.MouseWheel,new Listener(){
    @Override public void handleEvent(    Event event){
      event.doit=false;
      Slider scrollBar=fTimeGraphViewer.getVerticalBar();
      fTimeGraphViewer.setTopIndex(scrollBar.getSelection() - event.count);
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  tree.addListener(SWT.KeyDown,new Listener(){
    @Override public void handleEvent(    Event event){
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      if (event.keyCode == SWT.ARROW_DOWN) {
        int index=Math.min(fTimeGraphViewer.getSelectionIndex() + 1,treeItems.size() - 1);
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
        event.doit=false;
      }
 else       if (event.keyCode == SWT.PAGE_DOWN) {
        int height=tree.getSize().y - tree.getHeaderHeight() - tree.getHorizontalBar().getSize().y;
        int countPerPage=height / (tree.getItemHeight() + getTreeItemHeightAdjustement());
        int index=Math.min(fTimeGraphViewer.getSelectionIndex() + countPerPage - 1,treeItems.size() - 1);
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
        event.doit=false;
      }
 else       if (event.keyCode == SWT.END) {
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(treeItems.size() - 1).getData());
        event.doit=false;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
      if (fTimeGraphViewer.getSelectionIndex() >= 0) {
        fTreeViewer.setSelection(new StructuredSelection(fTimeGraphViewer.getSelection()));
      }
 else {
        fTreeViewer.setSelection(new StructuredSelection());
      }
    }
  }
);
  fTimeGraphViewer.getTimeGraphControl().addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTreeViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      if (fInhibitTreeSelection) {
        return;
      }
      if (event.getSelection() instanceof IStructuredSelection) {
        Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
        ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
        if (selection instanceof ITimeGraphEntry) {
          fTimeGraphViewer.setSelection((ITimeGraphEntry)selection);
        }
        TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
        tree.setTopItem(treeItem);
      }
    }
  }
);
  fTimeGraphViewer.addSelectionListener(new ITimeGraphSelectionListener(){
    @Override public void selectionChanged(    TimeGraphSelectionEvent event){
      ITimeGraphEntry entry=fTimeGraphViewer.getSelection();
      fInhibitTreeSelection=true;
      if (entry != null) {
        StructuredSelection selection=new StructuredSelection(entry);
        fTreeViewer.setSelection(selection);
      }
 else {
        fTreeViewer.setSelection(new StructuredSelection());
      }
      fInhibitTreeSelection=false;
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTimeGraphViewer.getVerticalBar().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fNumFillerRows=Display.getDefault().getBounds().height / (tree.getItemHeight() + getTreeItemHeightAdjustement());
  sash.setWeights(new int[]{1,1});
}","public TimeGraphCombo(Composite parent,int style){
  super(parent,style);
  setLayout(new FillLayout());
  final SashForm sash=new SashForm(this,SWT.NONE);
  fTreeViewer=new TreeViewer(sash,SWT.FULL_SELECTION | SWT.H_SCROLL);
  final Tree tree=fTreeViewer.getTree();
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  fTimeGraphViewer=new TimeGraphViewer(sash,SWT.NONE);
  fTimeGraphViewer.setItemHeight(tree.getItemHeight() + getTreeItemHeightAdjustement());
  fTimeGraphViewer.setHeaderHeight(tree.getHeaderHeight());
  fTimeGraphViewer.setBorderWidth(tree.getBorderWidth());
  fTimeGraphViewer.setNameWidthPref(0);
  tree.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      fTimeGraphViewer.setHeaderHeight(tree.getHeaderHeight());
    }
  }
);
  fTreeViewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      fTimeGraphViewer.setExpandedState((ITimeGraphEntry)event.getElement(),false);
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      fTimeGraphViewer.setExpandedState((ITimeGraphEntry)event.getElement(),true);
    }
  }
);
  fTimeGraphViewer.addTreeListener(new ITimeGraphTreeListener(){
    @Override public void treeCollapsed(    TimeGraphTreeExpansionEvent event){
      fTreeViewer.setExpandedState(event.getEntry(),false);
    }
    @Override public void treeExpanded(    TimeGraphTreeExpansionEvent event){
      fTreeViewer.setExpandedState(event.getEntry(),true);
    }
  }
);
  tree.addListener(SWT.MouseDown,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem treeItem=tree.getItem(new Point(event.x,event.y));
      if (treeItem == null || treeItem.getData() == FILLER) {
        event.doit=false;
        ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
        if (treeItems.size() == 0) {
          return;
        }
        tree.select(treeItems.get(treeItems.size() - 1));
        fTreeViewer.setSelection(new StructuredSelection());
        fTimeGraphViewer.setSelection(null);
      }
    }
  }
);
  tree.addListener(SWT.MouseWheel,new Listener(){
    @Override public void handleEvent(    Event event){
      event.doit=false;
      Slider scrollBar=fTimeGraphViewer.getVerticalBar();
      fTimeGraphViewer.setTopIndex(scrollBar.getSelection() - event.count);
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  tree.addListener(SWT.KeyDown,new Listener(){
    @Override public void handleEvent(    Event event){
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      if (event.keyCode == SWT.ARROW_DOWN) {
        int index=Math.min(fTimeGraphViewer.getSelectionIndex() + 1,treeItems.size() - 1);
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
        event.doit=false;
      }
 else       if (event.keyCode == SWT.PAGE_DOWN) {
        int height=tree.getSize().y - tree.getHeaderHeight() - tree.getHorizontalBar().getSize().y;
        int countPerPage=height / (tree.getItemHeight() + getTreeItemHeightAdjustement());
        int index=Math.min(fTimeGraphViewer.getSelectionIndex() + countPerPage - 1,treeItems.size() - 1);
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
        event.doit=false;
      }
 else       if (event.keyCode == SWT.END) {
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(treeItems.size() - 1).getData());
        event.doit=false;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
      if (fTimeGraphViewer.getSelectionIndex() >= 0) {
        fTreeViewer.setSelection(new StructuredSelection(fTimeGraphViewer.getSelection()));
      }
 else {
        fTreeViewer.setSelection(new StructuredSelection());
      }
    }
  }
);
  fTimeGraphViewer.getTimeGraphControl().addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTreeViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      if (fInhibitTreeSelection) {
        return;
      }
      if (event.getSelection() instanceof IStructuredSelection) {
        Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
        ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
        if (selection instanceof ITimeGraphEntry) {
          fTimeGraphViewer.setSelection((ITimeGraphEntry)selection);
        }
        TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
        tree.setTopItem(treeItem);
      }
    }
  }
);
  fTimeGraphViewer.addSelectionListener(new ITimeGraphSelectionListener(){
    @Override public void selectionChanged(    TimeGraphSelectionEvent event){
      ITimeGraphEntry entry=fTimeGraphViewer.getSelection();
      fInhibitTreeSelection=true;
      if (entry != null) {
        StructuredSelection selection=new StructuredSelection(entry);
        fTreeViewer.setSelection(selection);
      }
 else {
        fTreeViewer.setSelection(new StructuredSelection());
      }
      fInhibitTreeSelection=false;
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTimeGraphViewer.getVerticalBar().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fNumFillerRows=Display.getDefault().getBounds().height / (tree.getItemHeight() + getTreeItemHeightAdjustement());
  sash.setWeights(new int[]{1,1});
}",0.9854281929400764
92401,"/** 
 * Sets or clears the input for this time graph combo.
 * @param input the input of this time graph combo, or <code>null</code> if none
 */
public void setInput(ITimeGraphEntry[] input){
  fTreeViewer.setInput(input);
  fTreeViewer.expandAll();
  fTreeViewer.getTree().getVerticalBar().setEnabled(false);
  fTimeGraphViewer.setInput(input);
}","/** 
 * Sets or clears the input for this time graph combo.
 * @param input the input of this time graph combo, or <code>null</code> if none
 */
public void setInput(ITimeGraphEntry[] input){
  fTreeViewer.setInput(input);
  fTreeViewer.expandAll();
  fTreeViewer.getTree().getVerticalBar().setEnabled(false);
  fTreeViewer.getTree().getVerticalBar().setVisible(false);
  fTimeGraphViewer.setInput(input);
}",0.920424403183024
92402,"@Override public void handleEvent(Event event){
  ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
  if (treeItems.size() == 0) {
    return;
  }
  if (event.keyCode == SWT.ARROW_DOWN) {
    int index=Math.min(fTimeGraphViewer.getSelectionIndex() + 1,treeItems.size() - 1);
    fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
    event.doit=false;
  }
 else   if (event.keyCode == SWT.PAGE_DOWN) {
    int height=tree.getSize().y - tree.getHeaderHeight() - tree.getHorizontalBar().getSize().y;
    int countPerPage=height / (tree.getItemHeight() + getTreeItemHeightAdjustement());
    int index=Math.min(fTimeGraphViewer.getSelectionIndex() + countPerPage - 1,treeItems.size() - 1);
    fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
    event.doit=false;
  }
 else   if (event.keyCode == SWT.END) {
    fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(treeItems.size() - 1).getData());
    event.doit=false;
  }
  TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
  tree.setTopItem(treeItem);
  if (fTimeGraphViewer.getSelectionIndex() >= 0) {
    fTreeViewer.setSelection(new StructuredSelection(fTimeGraphViewer.getSelection()));
  }
 else {
    fTreeViewer.setSelection(new StructuredSelection());
  }
}","@Override public void handleEvent(Event event){
  ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
  if (treeItems.size() == 0) {
    return;
  }
  if (event.keyCode == SWT.ARROW_DOWN) {
    int index=Math.min(fTimeGraphViewer.getSelectionIndex() + 1,treeItems.size() - 1);
    fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
    event.doit=false;
  }
 else   if (event.keyCode == SWT.PAGE_DOWN) {
    int height=tree.getSize().y - tree.getHeaderHeight() - tree.getHorizontalBar().getSize().y;
    int countPerPage=height / getItemHeight(tree);
    int index=Math.min(fTimeGraphViewer.getSelectionIndex() + countPerPage - 1,treeItems.size() - 1);
    fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
    event.doit=false;
  }
 else   if (event.keyCode == SWT.END) {
    fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(treeItems.size() - 1).getData());
    event.doit=false;
  }
  TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
  tree.setTopItem(treeItem);
  if (fTimeGraphViewer.getSelectionIndex() >= 0) {
    fTreeViewer.setSelection(new StructuredSelection(fTimeGraphViewer.getSelection()));
  }
 else {
    fTreeViewer.setSelection(new StructuredSelection());
  }
}",0.982985305491106
92403,"public TimeGraphCombo(Composite parent,int style){
  super(parent,style);
  setLayout(new FillLayout());
  final SashForm sash=new SashForm(this,SWT.NONE);
  fTreeViewer=new TreeViewer(sash,SWT.FULL_SELECTION | SWT.H_SCROLL);
  final Tree tree=fTreeViewer.getTree();
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  fTimeGraphViewer=new TimeGraphViewer(sash,SWT.NONE);
  fTimeGraphViewer.setItemHeight(tree.getItemHeight() + getTreeItemHeightAdjustement());
  fTimeGraphViewer.setHeaderHeight(tree.getHeaderHeight());
  fTimeGraphViewer.setBorderWidth(tree.getBorderWidth());
  fTimeGraphViewer.setNameWidthPref(0);
  tree.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      fTimeGraphViewer.setHeaderHeight(tree.getHeaderHeight());
    }
  }
);
  fTreeViewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      fTimeGraphViewer.setExpandedState((ITimeGraphEntry)event.getElement(),false);
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      fTimeGraphViewer.setExpandedState((ITimeGraphEntry)event.getElement(),true);
    }
  }
);
  fTimeGraphViewer.addTreeListener(new ITimeGraphTreeListener(){
    @Override public void treeCollapsed(    TimeGraphTreeExpansionEvent event){
      fTreeViewer.setExpandedState(event.getEntry(),false);
    }
    @Override public void treeExpanded(    TimeGraphTreeExpansionEvent event){
      fTreeViewer.setExpandedState(event.getEntry(),true);
    }
  }
);
  tree.addListener(SWT.MouseDown,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem treeItem=tree.getItem(new Point(event.x,event.y));
      if (treeItem == null || treeItem.getData() == FILLER) {
        event.doit=false;
        ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
        if (treeItems.size() == 0) {
          return;
        }
        tree.select(treeItems.get(treeItems.size() - 1));
        fTreeViewer.setSelection(new StructuredSelection());
        fTimeGraphViewer.setSelection(null);
      }
    }
  }
);
  tree.addListener(SWT.MouseWheel,new Listener(){
    @Override public void handleEvent(    Event event){
      event.doit=false;
      Slider scrollBar=fTimeGraphViewer.getVerticalBar();
      fTimeGraphViewer.setTopIndex(scrollBar.getSelection() - event.count);
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  tree.addListener(SWT.KeyDown,new Listener(){
    @Override public void handleEvent(    Event event){
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      if (event.keyCode == SWT.ARROW_DOWN) {
        int index=Math.min(fTimeGraphViewer.getSelectionIndex() + 1,treeItems.size() - 1);
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
        event.doit=false;
      }
 else       if (event.keyCode == SWT.PAGE_DOWN) {
        int height=tree.getSize().y - tree.getHeaderHeight() - tree.getHorizontalBar().getSize().y;
        int countPerPage=height / (tree.getItemHeight() + getTreeItemHeightAdjustement());
        int index=Math.min(fTimeGraphViewer.getSelectionIndex() + countPerPage - 1,treeItems.size() - 1);
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
        event.doit=false;
      }
 else       if (event.keyCode == SWT.END) {
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(treeItems.size() - 1).getData());
        event.doit=false;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
      if (fTimeGraphViewer.getSelectionIndex() >= 0) {
        fTreeViewer.setSelection(new StructuredSelection(fTimeGraphViewer.getSelection()));
      }
 else {
        fTreeViewer.setSelection(new StructuredSelection());
      }
    }
  }
);
  fTimeGraphViewer.getTimeGraphControl().addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTreeViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      if (fInhibitTreeSelection) {
        return;
      }
      if (event.getSelection() instanceof IStructuredSelection) {
        Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
        ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
        if (selection instanceof ITimeGraphEntry) {
          fTimeGraphViewer.setSelection((ITimeGraphEntry)selection);
        }
        TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
        tree.setTopItem(treeItem);
      }
    }
  }
);
  fTimeGraphViewer.addSelectionListener(new ITimeGraphSelectionListener(){
    @Override public void selectionChanged(    TimeGraphSelectionEvent event){
      ITimeGraphEntry entry=fTimeGraphViewer.getSelection();
      fInhibitTreeSelection=true;
      if (entry != null) {
        StructuredSelection selection=new StructuredSelection(entry);
        fTreeViewer.setSelection(selection);
      }
 else {
        fTreeViewer.setSelection(new StructuredSelection());
      }
      fInhibitTreeSelection=false;
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTimeGraphViewer.getVerticalBar().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fNumFillerRows=Display.getDefault().getBounds().height / (tree.getItemHeight() + getTreeItemHeightAdjustement());
  sash.setWeights(new int[]{1,1});
}","public TimeGraphCombo(Composite parent,int style){
  super(parent,style);
  setLayout(new FillLayout());
  final SashForm sash=new SashForm(this,SWT.NONE);
  fTreeViewer=new TreeViewer(sash,SWT.FULL_SELECTION | SWT.H_SCROLL);
  final Tree tree=fTreeViewer.getTree();
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  fTimeGraphViewer=new TimeGraphViewer(sash,SWT.NONE);
  fTimeGraphViewer.setItemHeight(getItemHeight(tree));
  fTimeGraphViewer.setHeaderHeight(tree.getHeaderHeight());
  fTimeGraphViewer.setBorderWidth(tree.getBorderWidth());
  fTimeGraphViewer.setNameWidthPref(0);
  tree.addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      fTimeGraphViewer.setHeaderHeight(tree.getHeaderHeight());
    }
  }
);
  fTreeViewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      fTimeGraphViewer.setExpandedState((ITimeGraphEntry)event.getElement(),false);
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      fTimeGraphViewer.setExpandedState((ITimeGraphEntry)event.getElement(),true);
    }
  }
);
  fTimeGraphViewer.addTreeListener(new ITimeGraphTreeListener(){
    @Override public void treeCollapsed(    TimeGraphTreeExpansionEvent event){
      fTreeViewer.setExpandedState(event.getEntry(),false);
    }
    @Override public void treeExpanded(    TimeGraphTreeExpansionEvent event){
      fTreeViewer.setExpandedState(event.getEntry(),true);
    }
  }
);
  tree.addListener(SWT.MouseDown,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem treeItem=tree.getItem(new Point(event.x,event.y));
      if (treeItem == null || treeItem.getData() == FILLER) {
        event.doit=false;
        ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
        if (treeItems.size() == 0) {
          return;
        }
        tree.select(treeItems.get(treeItems.size() - 1));
        fTreeViewer.setSelection(new StructuredSelection());
        fTimeGraphViewer.setSelection(null);
      }
    }
  }
);
  tree.addListener(SWT.MouseWheel,new Listener(){
    @Override public void handleEvent(    Event event){
      event.doit=false;
      Slider scrollBar=fTimeGraphViewer.getVerticalBar();
      fTimeGraphViewer.setTopIndex(scrollBar.getSelection() - event.count);
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  tree.addListener(SWT.KeyDown,new Listener(){
    @Override public void handleEvent(    Event event){
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      if (event.keyCode == SWT.ARROW_DOWN) {
        int index=Math.min(fTimeGraphViewer.getSelectionIndex() + 1,treeItems.size() - 1);
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
        event.doit=false;
      }
 else       if (event.keyCode == SWT.PAGE_DOWN) {
        int height=tree.getSize().y - tree.getHeaderHeight() - tree.getHorizontalBar().getSize().y;
        int countPerPage=height / getItemHeight(tree);
        int index=Math.min(fTimeGraphViewer.getSelectionIndex() + countPerPage - 1,treeItems.size() - 1);
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(index).getData());
        event.doit=false;
      }
 else       if (event.keyCode == SWT.END) {
        fTimeGraphViewer.setSelection((ITimeGraphEntry)treeItems.get(treeItems.size() - 1).getData());
        event.doit=false;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
      if (fTimeGraphViewer.getSelectionIndex() >= 0) {
        fTreeViewer.setSelection(new StructuredSelection(fTimeGraphViewer.getSelection()));
      }
 else {
        fTreeViewer.setSelection(new StructuredSelection());
      }
    }
  }
);
  fTimeGraphViewer.getTimeGraphControl().addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTreeViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      if (fInhibitTreeSelection) {
        return;
      }
      if (event.getSelection() instanceof IStructuredSelection) {
        Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
        ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
        if (selection instanceof ITimeGraphEntry) {
          fTimeGraphViewer.setSelection((ITimeGraphEntry)selection);
        }
        TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
        tree.setTopItem(treeItem);
      }
    }
  }
);
  fTimeGraphViewer.addSelectionListener(new ITimeGraphSelectionListener(){
    @Override public void selectionChanged(    TimeGraphSelectionEvent event){
      ITimeGraphEntry entry=fTimeGraphViewer.getSelection();
      fInhibitTreeSelection=true;
      if (entry != null) {
        StructuredSelection selection=new StructuredSelection(entry);
        fTreeViewer.setSelection(selection);
      }
 else {
        fTreeViewer.setSelection(new StructuredSelection());
      }
      fInhibitTreeSelection=false;
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fTimeGraphViewer.getVerticalBar().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ArrayList<TreeItem> treeItems=getVisibleExpandedItems(tree);
      if (treeItems.size() == 0) {
        return;
      }
      TreeItem treeItem=treeItems.get(fTimeGraphViewer.getTopIndex());
      tree.setTopItem(treeItem);
    }
  }
);
  fNumFillerRows=Display.getDefault().getBounds().height / getItemHeight(tree);
  sash.setWeights(new int[]{1,1});
}",0.9899334056063188
92404,"/** 
 * Sets or clears the input for this time graph combo.
 * @param input the input of this time graph combo, or <code>null</code> if none
 */
public void setInput(ITimeGraphEntry[] input){
  fTreeViewer.setInput(input);
  fTreeViewer.expandAll();
  fTreeViewer.getTree().getVerticalBar().setEnabled(false);
  fTreeViewer.getTree().getVerticalBar().setVisible(false);
  fTimeGraphViewer.setInput(input);
}","/** 
 * Sets or clears the input for this time graph combo.
 * @param input the input of this time graph combo, or <code>null</code> if none
 */
public void setInput(ITimeGraphEntry[] input){
  fTreeViewer.setInput(input);
  fTreeViewer.expandAll();
  fTreeViewer.getTree().getVerticalBar().setEnabled(false);
  fTreeViewer.getTree().getVerticalBar().setVisible(false);
  fTimeGraphViewer.setItemHeight(getItemHeight(fTreeViewer.getTree()));
  fTimeGraphViewer.setInput(input);
}",0.9187358916478556
92405,"@Override public void setRank(final long rank){
  seekRank(rank);
}","@Override public void setRank(final long rank){
  if (!this.curLocation.equals(nullLocation)) {
    seekRank(rank);
  }
}",0.7127659574468085
92406,"public boolean seekRank(final long rank){
  boolean ret=false;
  ret=super.seekIndex(rank);
  if (ret)   curLocation.setLocation(getCurrentEvent().getTimestampValue());
  return ret;
}","public boolean seekRank(final long rank){
  boolean ret=false;
  ret=super.seekIndex(rank);
  if (ret) {
    curLocation.setLocation(getCurrentEvent().getTimestampValue());
  }
  return ret;
}",0.9787234042553192
92407,"public CtfTmfEvent getCurrentEvent(){
  final StreamInputReader top=super.prio.peek();
  if (top != null)   return new CtfTmfEvent(top.getCurrentEvent(),top.getFilename(),ctfTmfTrace);
  return null;
}","public CtfTmfEvent getCurrentEvent(){
  final StreamInputReader top=super.prio.peek();
  if (top != null) {
    return new CtfTmfEvent(top.getCurrentEvent(),top.getFilename(),ctfTmfTrace);
  }
  return null;
}",0.9804878048780488
92408,"@Override public int compareTo(final CtfIterator o){
  if (this.getRank() < o.getRank())   return -1;
 else   if (this.getRank() > o.getRank())   return 1;
  return 0;
}","@Override public int compareTo(final CtfIterator o){
  if (this.getRank() < o.getRank()) {
    return -1;
  }
 else   if (this.getRank() > o.getRank()) {
    return 1;
  }
  return 0;
}",0.9548022598870056
92409,"@Override public boolean seek(final long timestamp){
  boolean ret=false;
  final long offsetTimestamp=timestamp - this.getCtfTmfTrace().getCTFTrace().getOffset();
  if (offsetTimestamp < 0)   ret=super.seek(timestamp);
 else   ret=super.seek(offsetTimestamp);
  if (ret)   curLocation.setLocation(getCurrentEvent().getTimestampValue());
  return ret;
}","@Override public boolean seek(final long timestamp){
  boolean ret=false;
  final long offsetTimestamp=timestamp - this.getCtfTmfTrace().getCTFTrace().getOffset();
  if (offsetTimestamp < 0) {
    ret=super.seek(timestamp);
  }
 else {
    ret=super.seek(offsetTimestamp);
  }
  if (ret) {
    curLocation.setLocation(getCurrentEvent().getTimestampValue());
  }
  return ret;
}",0.9013698630136986
92410,"public CtfIterator(final CtfTmfTrace trace,final long timestampValue,final long rank){
  super(trace.getCTFTrace());
  this.ctfTmfTrace=trace;
  this.curLocation=(new CtfLocation(this.getCurrentEvent().getTimestampValue()));
  if (this.getCurrentEvent().getTimestampValue() != timestampValue)   this.seek(timestampValue);
  this.curRank=rank;
}","public CtfIterator(final CtfTmfTrace trace,final long timestampValue,final long rank){
  super(trace.getCTFTrace());
  this.ctfTmfTrace=trace;
  if (this.hasMoreEvents()) {
    this.curLocation=(new CtfLocation(this.getCurrentEvent().getTimestampValue()));
    if (this.getCurrentEvent().getTimestampValue() != timestampValue) {
      this.seek(timestampValue);
      this.curRank=rank;
    }
  }
 else {
    setUnknownLocation();
  }
}",0.676923076923077
92411,"@Override public void initTrace(final IResource resource,final String path,final Class<CtfTmfEvent> eventType) throws TmfTraceException {
  this.fResource=resource;
  try {
    this.fTrace=new CTFTrace(path);
  }
 catch (  final CTFReaderException e) {
    throw new TmfTraceException(e.getMessage());
  }
  this.iterator=new CtfIterator(this,0,0);
  setStartTime(iterator.getCurrentEvent().getTimestamp());
  TmfSignalManager.register(this);
  buildStateSystem();
  if (resource != null) {
    try {
      resource.getProject().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      throw new TmfTraceException(e.getMessage());
    }
  }
}","@Override public void initTrace(final IResource resource,final String path,final Class<CtfTmfEvent> eventType) throws TmfTraceException {
  this.fResource=resource;
  try {
    this.fTrace=new CTFTrace(path);
  }
 catch (  final CTFReaderException e) {
    throw new TmfTraceException(e.getMessage());
  }
  this.iterator=new CtfIterator(this,0,0);
  setStartTime(TmfTimestamp.BIG_BANG);
  if (!this.iterator.getLocation().equals(CtfIterator.nullLocation)) {
    setStartTime(iterator.getCurrentEvent().getTimestamp());
  }
  TmfSignalManager.register(this);
  buildStateSystem();
  if (resource != null) {
    try {
      resource.getProject().refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    CoreException e) {
      throw new TmfTraceException(e.getMessage());
    }
  }
}",0.9042407660738714
92412,"@Override public void read(BitBuffer input){
  integerValue.read(input);
  long val=integerValue.getValue();
  value=declaration.query(val);
}","@Override public void read(BitBuffer input){
  int align=(int)declaration.getAlignment();
  int pos=input.position() + ((align - (input.position() % align)) % align);
  input.position(pos);
  integerValue.read(input);
  long val=integerValue.getValue();
  value=declaration.query(val);
}",0.662004662004662
92413,"@Override public void read(BitBuffer input){
  boolean signed=declaration.isSigned();
  int length=declaration.getLength();
  long bits=0;
  if (length == 64) {
    long low=input.getInt(32,false);
    low=low & 0x00000000FFFFFFFFL;
    long high=input.getInt(32,false);
    high=high & 0x00000000FFFFFFFFL;
    bits=(high << 32) | low;
  }
 else {
    bits=input.getInt(length,signed);
    bits=bits & 0x00000000FFFFFFFFL;
  }
  value=bits;
}","@Override public void read(BitBuffer input){
  int align=(int)declaration.getAlignment();
  int pos=input.position() + ((align - (input.position() % align)) % align);
  input.position(pos);
  boolean signed=declaration.isSigned();
  int length=declaration.getLength();
  long bits=0;
  if (length == 64) {
    long low=input.getInt(32,false);
    low=low & 0x00000000FFFFFFFFL;
    long high=input.getInt(32,false);
    high=high & 0x00000000FFFFFFFFL;
    bits=(high << 32) | low;
  }
 else {
    bits=input.getInt(length,signed);
    bits=bits & 0x00000000FFFFFFFFL;
  }
  value=bits;
}",0.8593598448108632
92414,"@Override public long getAlignment(){
  return getMinAlign();
}","@Override public long getAlignment(){
  return this.maxAlign;
}",0.9047619047619048
92415,"public void addField(String name,IDeclaration declaration){
  this.fields.put(name,declaration);
  this.fieldsList.add(name);
}","public void addField(String name,IDeclaration declaration){
  this.fields.put(name,declaration);
  this.fieldsList.add(name);
  maxAlign=Math.max(maxAlign,declaration.getAlignment());
  if (maxAlign == 1) {
    maxAlign=1;
  }
}",0.7154929577464789
92416,"public StructDeclaration(long minAlign){
  this.minAlign=minAlign;
}","public StructDeclaration(long align){
  this.maxAlign=Math.max(align,1);
}",0.8309859154929577
92417,"@Override public void read(BitBuffer input){
  for (  String fName : declaration.getFieldsList()) {
    Definition def=definitions.get(fName);
    assert(def != null);
    def.read(input);
  }
}","@Override public void read(BitBuffer input){
  final int align=(int)declaration.getAlignment();
  int pos=input.position() + ((align - (input.position() % align)) % align);
  input.position(pos);
  final List<String> fieldList=declaration.getFieldsList();
  for (  String fName : fieldList) {
    Definition def=definitions.get(fName);
    assert(def != null);
    def.read(input);
  }
}",0.5679862306368331
92418,"public void addField(String fieldTag,IDeclaration declaration){
  fields.put(fieldTag,declaration);
  alignment=Math.max(alignment,declaration.getAlignment());
}","public void addField(String fieldTag,IDeclaration declaration){
  fields.put(fieldTag,declaration);
}",0.7709923664122137
92419,"public boolean seekIndex(long index){
  this.prio.clear();
  long tempIndex=Long.MIN_VALUE;
  long tempTimestamp=Long.MIN_VALUE;
  try {
    for (    StreamInputReader streamInputReader : this.streamInputReaders) {
      final long streamIndex=streamInputReader.seekIndex(index);
      tempIndex=Math.max(tempIndex,streamIndex);
      tempTimestamp=Math.max(tempTimestamp,streamInputReader.getCurrentEvent().timestamp);
    }
  }
 catch (  CTFReaderException e) {
    for (    StreamInputReader streamInputReader : this.streamInputReaders) {
      streamInputReader.seek(0);
    }
    tempIndex=0;
  }
  for (  StreamInputReader streamInputReader : this.streamInputReaders) {
    if (streamInputReader.getCurrentEvent() != null) {
      this.prio.add(streamInputReader);
    }
  }
  if (tempIndex == Long.MAX_VALUE) {
    tempIndex=0;
  }
  long pos=tempIndex;
  if (index > tempIndex) {
    while ((prio.peek().getCurrentEvent().timestamp < tempTimestamp) && hasMoreEvents()) {
      this.advance();
    }
    for (pos=tempIndex; (pos < index) && hasMoreEvents(); pos++) {
      this.advance();
    }
  }
  this.fIndex=pos;
  return hasMoreEvents();
}","public boolean seekIndex(long index){
  this.prio.clear();
  long tempIndex=Long.MIN_VALUE;
  long tempTimestamp=Long.MIN_VALUE;
  try {
    for (    StreamInputReader streamInputReader : this.streamInputReaders) {
      final long streamIndex=streamInputReader.seekIndex(index);
      tempIndex=Math.max(tempIndex,streamIndex);
      EventDefinition currentEvent=streamInputReader.getCurrentEvent();
      if (currentEvent == null) {
        streamInputReader.readNextEvent();
        currentEvent=streamInputReader.getCurrentEvent();
      }
      if (currentEvent != null) {
        tempTimestamp=Math.max(tempTimestamp,currentEvent.timestamp);
      }
 else {
        tempIndex=goToZero();
      }
    }
  }
 catch (  CTFReaderException e) {
    tempIndex=goToZero();
  }
  for (  StreamInputReader streamInputReader : this.streamInputReaders) {
    if (streamInputReader.getCurrentEvent() != null) {
      this.prio.add(streamInputReader);
    }
  }
  if (tempIndex == Long.MAX_VALUE) {
    tempIndex=0;
  }
  long pos=tempIndex;
  if (index > tempIndex) {
    while ((prio.peek().getCurrentEvent().timestamp < tempTimestamp) && hasMoreEvents()) {
      this.advance();
    }
    for (pos=tempIndex; (pos < index) && hasMoreEvents(); pos++) {
      this.advance();
    }
  }
  this.fIndex=pos;
  return hasMoreEvents();
}",0.7893462469733656
92420,"/** 
 * Reads the next event of the packet into the right event definition.
 * @return The event definition containing the event data that was justread.
 * @throws CTFReaderException
 */
public EventDefinition readNextEvent() throws CTFReaderException {
  Long eventID=null;
  long timestamp=0;
  if (getStreamEventHeaderDef() != null) {
    getStreamEventHeaderDef().read(getBitBuffer());
    EnumDefinition idEnumDef=(EnumDefinition)getStreamEventHeaderDef().lookupDefinition(""String_Node_Str"");
    assert(idEnumDef != null);
    eventID=idEnumDef.getIntegerValue();
    VariantDefinition variantDef=(VariantDefinition)getStreamEventHeaderDef().lookupDefinition(""String_Node_Str"");
    assert(variantDef != null);
    StructDefinition variantCurrentField=(StructDefinition)variantDef.getCurrentField();
    assert(variantCurrentField != null);
    IntegerDefinition idIntegerDef=(IntegerDefinition)variantCurrentField.lookupDefinition(""String_Node_Str"");
    if (idIntegerDef != null) {
      eventID=idIntegerDef.getValue();
    }
    IntegerDefinition timestampDef=(IntegerDefinition)variantCurrentField.lookupDefinition(""String_Node_Str"");
    assert(timestampDef != null);
    timestamp=calculateTimestamp(timestampDef);
  }
  if (getStreamEventContextDef() != null) {
    getStreamEventContextDef().read(getBitBuffer());
  }
  EventDefinition eventDef=events.get(eventID);
  if (eventDef == null) {
    throw new CTFReaderException(""String_Node_Str"" + eventID);
  }
  if (eventDef.context != null) {
    eventDef.context.read(getBitBuffer());
  }
  if (eventDef.fields != null) {
    int pos=getBitBuffer().position();
    int minAlign=(int)eventDef.fields.getDeclaration().getMinAlign();
    int offset=pos % minAlign;
    pos+=(minAlign - offset) % minAlign;
    getBitBuffer().position(pos);
    eventDef.fields.read(getBitBuffer());
  }
  eventDef.timestamp=timestamp;
  return eventDef;
}","/** 
 * Reads the next event of the packet into the right event definition.
 * @return The event definition containing the event data that was justread.
 * @throws CTFReaderException
 */
public EventDefinition readNextEvent() throws CTFReaderException {
  Long eventID=null;
  long timestamp=0;
  StructDefinition sehd=getStreamEventHeaderDef();
  BitBuffer currentBitBuffer=getBitBuffer();
  if (sehd != null) {
    sehd.read(currentBitBuffer);
    EnumDefinition idEnumDef=(EnumDefinition)sehd.lookupDefinition(""String_Node_Str"");
    assert(idEnumDef != null);
    eventID=idEnumDef.getIntegerValue();
    VariantDefinition variantDef=(VariantDefinition)sehd.lookupDefinition(""String_Node_Str"");
    assert(variantDef != null);
    StructDefinition variantCurrentField=(StructDefinition)variantDef.getCurrentField();
    assert(variantCurrentField != null);
    IntegerDefinition idIntegerDef=(IntegerDefinition)variantCurrentField.lookupDefinition(""String_Node_Str"");
    if (idIntegerDef != null) {
      eventID=idIntegerDef.getValue();
    }
    IntegerDefinition timestampDef=(IntegerDefinition)variantCurrentField.lookupDefinition(""String_Node_Str"");
    assert(timestampDef != null);
    timestamp=calculateTimestamp(timestampDef);
  }
  if (getStreamEventContextDef() != null) {
    getStreamEventContextDef().read(currentBitBuffer);
  }
  EventDefinition eventDef=events.get(eventID);
  if (eventDef == null) {
    throw new CTFReaderException(""String_Node_Str"" + eventID);
  }
  if (eventDef.context != null) {
    eventDef.context.read(currentBitBuffer);
  }
  if (eventDef.fields != null) {
    eventDef.fields.read(currentBitBuffer);
  }
  eventDef.timestamp=timestamp;
  return eventDef;
}",0.8051011921264208
92421,"/** 
 * Parses a struct declaration and returns the corresponding declaration.
 * @param struct An STRUCT node.
 * @return The corresponding struct declaration.
 * @throws ParseException
 */
private StructDeclaration parseStruct(CommonTree struct) throws ParseException {
  assert(struct.getType() == CTFParser.STRUCT);
  List<CommonTree> children=struct.getChildren();
  assert(children != null);
  StructDeclaration structDeclaration=null;
  String structName=null;
  boolean hasName=false;
  CommonTree structBody=null;
  boolean hasBody=false;
  long structAlign=0;
  for (  CommonTree child : children) {
switch (child.getType()) {
case CTFParser.STRUCT_NAME:
{
        hasName=true;
        assert(child.getChildCount() == 1);
        CommonTree structNameIdentifier=(CommonTree)child.getChild(0);
        assert(structNameIdentifier.getType() == CTFParser.IDENTIFIER);
        structName=structNameIdentifier.getText();
        break;
      }
case CTFParser.STRUCT_BODY:
{
      hasBody=true;
      structBody=child;
      break;
    }
case CTFParser.ALIGN:
{
    assert(child.getChildCount() == 1);
    CommonTree structAlignExpression=(CommonTree)child.getChild(0);
    structAlign=getAlignment(structAlignExpression);
    break;
  }
default :
childTypeError(child);
break;
}
}
if (hasBody) {
if (hasName && (getCurrentScope().lookupStruct(structName) != null)) {
throw new ParseException(""String_Node_Str"" + structName + ""String_Node_Str"");
}
structDeclaration=new StructDeclaration(structAlign);
parseStructBody(structBody,structDeclaration);
long maxFieldAlign=-1;
for (IDeclaration field : structDeclaration.getFields().values()) {
maxFieldAlign=Math.max(maxFieldAlign,field.getAlignment());
}
structDeclaration.setMinAlign(maxFieldAlign);
if (hasName) {
getCurrentScope().registerStruct(structName,structDeclaration);
}
}
 else {
if (hasName) {
structDeclaration=getCurrentScope().rlookupStruct(structName);
if (structDeclaration == null) {
throw new ParseException(""String_Node_Str"" + structName + ""String_Node_Str"");
}
}
 else {
throw new ParseException(""String_Node_Str"");
}
}
assert(structDeclaration != null);
return structDeclaration;
}","/** 
 * Parses a struct declaration and returns the corresponding declaration.
 * @param struct An STRUCT node.
 * @return The corresponding struct declaration.
 * @throws ParseException
 */
private StructDeclaration parseStruct(CommonTree struct) throws ParseException {
  assert(struct.getType() == CTFParser.STRUCT);
  List<CommonTree> children=struct.getChildren();
  assert(children != null);
  StructDeclaration structDeclaration=null;
  String structName=null;
  boolean hasName=false;
  CommonTree structBody=null;
  boolean hasBody=false;
  long structAlign=0;
  for (  CommonTree child : children) {
switch (child.getType()) {
case CTFParser.STRUCT_NAME:
{
        hasName=true;
        assert(child.getChildCount() == 1);
        CommonTree structNameIdentifier=(CommonTree)child.getChild(0);
        assert(structNameIdentifier.getType() == CTFParser.IDENTIFIER);
        structName=structNameIdentifier.getText();
        break;
      }
case CTFParser.STRUCT_BODY:
{
      hasBody=true;
      structBody=child;
      break;
    }
case CTFParser.ALIGN:
{
    assert(child.getChildCount() == 1);
    CommonTree structAlignExpression=(CommonTree)child.getChild(0);
    structAlign=getAlignment(structAlignExpression);
    break;
  }
default :
childTypeError(child);
break;
}
}
if (hasBody) {
if (hasName && (getCurrentScope().lookupStruct(structName) != null)) {
throw new ParseException(""String_Node_Str"" + structName + ""String_Node_Str"");
}
structDeclaration=new StructDeclaration(structAlign);
parseStructBody(structBody,structDeclaration);
if (hasName) {
getCurrentScope().registerStruct(structName,structDeclaration);
}
}
 else {
if (hasName) {
structDeclaration=getCurrentScope().rlookupStruct(structName);
if (structDeclaration == null) {
throw new ParseException(""String_Node_Str"" + structName + ""String_Node_Str"");
}
}
 else {
throw new ParseException(""String_Node_Str"");
}
}
assert(structDeclaration != null);
return structDeclaration;
}",0.951616824702164
92422,"/** 
 * Creates a ""lost"" event. This is a synthetic event that is there to show that there should be something there.
 * @return
 */
public static EventDeclaration getLostEventDeclaration(){
  if (lostEvent == null) {
    lostEvent=new EventDeclaration();
    lostEvent.fields=new StructDeclaration(1);
    lostEvent.id=(long)-1;
    lostEvent.name=""String_Node_Str"";
  }
  return lostEvent;
}","/** 
 * Creates a ""lost"" event. This is a synthetic event that is there to show that there should be something there.
 * @return
 */
public synchronized static EventDeclaration getLostEventDeclaration(){
  EventDeclaration lostEvent=new EventDeclaration();
  lostEvent.fields=new StructDeclaration(1);
  lostEvent.id=(long)-1;
  lostEvent.name=""String_Node_Str"";
  return lostEvent;
}",0.8674388674388674
92423,"/** 
 * Run the long getMinAlign() method test.
 */
@Test public void testGetMinAlign(){
  long result=fixture.getMinAlign();
  assertEquals(1L,result);
}","/** 
 * Run the long getMinAlign() method test.
 */
@Test public void testGetMinAlign(){
  long result=fixture.getMaxAlign();
  assertEquals(1L,result);
}",0.987012987012987
92424,"/** 
 * Run the StructDeclaration(long) constructor test.
 */
@Test public void testStructDeclaration(){
  assertNotNull(fixture);
  assertEquals(1L,fixture.getMinAlign());
  String regex=""String_Node_Str"";
  assertTrue(fixture.toString().matches(regex));
}","/** 
 * Run the StructDeclaration(long) constructor test.
 */
@Test public void testStructDeclaration(){
  assertNotNull(fixture);
  assertEquals(1L,fixture.getMaxAlign());
  String regex=""String_Node_Str"";
  assertTrue(fixture.toString().matches(regex));
}",0.9922178988326849
92425,"public boolean seekIndex(long index){
  this.prio.clear();
  long tempIndex=Long.MIN_VALUE;
  long tempTimestamp=Long.MIN_VALUE;
  try {
    for (    StreamInputReader streamInputReader : this.streamInputReaders) {
      final long streamIndex=streamInputReader.seekIndex(index);
      tempIndex=Math.max(tempIndex,streamIndex);
      EventDefinition currentEvent=streamInputReader.getCurrentEvent();
      if (currentEvent == null) {
        streamInputReader.readNextEvent();
        currentEvent=streamInputReader.getCurrentEvent();
      }
      if (currentEvent != null) {
        tempTimestamp=Math.max(tempTimestamp,currentEvent.timestamp);
      }
 else {
        tempIndex=goToZero();
      }
    }
  }
 catch (  CTFReaderException e) {
    tempIndex=goToZero();
  }
  for (  StreamInputReader streamInputReader : this.streamInputReaders) {
    if (streamInputReader.getCurrentEvent() != null) {
      this.prio.add(streamInputReader);
    }
  }
  if (tempIndex == Long.MAX_VALUE) {
    tempIndex=0;
  }
  long pos=tempIndex;
  if (index > tempIndex) {
    while ((prio.peek().getCurrentEvent().timestamp < tempTimestamp) && hasMoreEvents()) {
      this.advance();
    }
    for (pos=tempIndex; (pos < index) && hasMoreEvents(); pos++) {
      this.advance();
    }
  }
  this.fIndex=pos;
  return hasMoreEvents();
}","public boolean seekIndex(long index){
  this.prio.clear();
  long tempIndex=Long.MIN_VALUE;
  long tempTimestamp=Long.MIN_VALUE;
  try {
    for (    StreamInputReader streamInputReader : this.streamInputReaders) {
      final long streamIndex=streamInputReader.seekIndex(index);
      if (streamIndex != -1) {
        tempIndex=Math.max(tempIndex,streamIndex);
        EventDefinition currentEvent=streamInputReader.getCurrentEvent();
        if (currentEvent == null) {
          streamInputReader.readNextEvent();
          currentEvent=streamInputReader.getCurrentEvent();
        }
        if (currentEvent != null) {
          tempTimestamp=Math.max(tempTimestamp,currentEvent.timestamp);
        }
 else {
          tempIndex=goToZero();
        }
      }
    }
  }
 catch (  CTFReaderException e) {
    tempIndex=goToZero();
  }
  for (  StreamInputReader streamInputReader : this.streamInputReaders) {
    if (streamInputReader.getCurrentEvent() != null) {
      this.prio.add(streamInputReader);
    }
  }
  if (tempIndex == Long.MAX_VALUE) {
    tempIndex=0;
  }
  long pos=tempIndex;
  if (index > tempIndex) {
    while ((prio.peek().getCurrentEvent().timestamp < tempTimestamp) && hasMoreEvents()) {
      this.advance();
    }
    for (pos=tempIndex; (pos < index) && hasMoreEvents(); pos++) {
      this.advance();
    }
  }
  this.fIndex=pos;
  return hasMoreEvents();
}",0.9775156653151492
92426,"public long seekIndex(long index) throws CTFReaderException {
  this.packetIndexIt=this.streamInput.getIndex().searchIndex(index);
  goToNextPacket();
  readNextEvent();
  if (this.packetReader.getCurrentPacket() == null) {
    throw new CTFReaderException(""String_Node_Str"");
  }
  return this.packetReader.getCurrentPacket().getIndexBegin();
}","public long seekIndex(long index) throws CTFReaderException {
  StreamInputPacketIndexEntry sipie=null;
  this.packetIndexIt=this.streamInput.getIndex().searchIndex(index);
  goToNextPacket();
  sipie=this.packetReader.getCurrentPacket();
  readNextEvent();
  if (this.packetReader.getCurrentPacket() == null) {
    if (!((sipie.getIndexBegin() == 0) && (sipie.getIndexEnd() == Long.MAX_VALUE))) {
      throw new CTFReaderException(""String_Node_Str"");
    }
    return -1;
  }
  return this.packetReader.getCurrentPacket().getIndexBegin();
}",0.7215332581736189
92427,"public boolean seekIndex(long index){
  this.prio.clear();
  long tempIndex=Long.MIN_VALUE;
  long tempTimestamp=Long.MIN_VALUE;
  try {
    for (    StreamInputReader streamInputReader : this.streamInputReaders) {
      final long streamIndex=streamInputReader.seekIndex(index);
      if (streamIndex != -1) {
        tempIndex=Math.max(tempIndex,streamIndex);
        EventDefinition currentEvent=streamInputReader.getCurrentEvent();
        if (currentEvent == null) {
          streamInputReader.readNextEvent();
          currentEvent=streamInputReader.getCurrentEvent();
        }
        if (currentEvent != null) {
          tempTimestamp=Math.max(tempTimestamp,currentEvent.timestamp);
        }
 else {
          tempIndex=goToZero();
        }
      }
    }
  }
 catch (  CTFReaderException e) {
    tempIndex=goToZero();
  }
  for (  StreamInputReader streamInputReader : this.streamInputReaders) {
    if (streamInputReader.getCurrentEvent() != null) {
      this.prio.add(streamInputReader);
    }
  }
  if (tempIndex == Long.MAX_VALUE) {
    tempIndex=0;
  }
  long pos=tempIndex;
  if (index > tempIndex) {
    while ((prio.peek().getCurrentEvent().timestamp < tempTimestamp) && hasMoreEvents()) {
      this.advance();
    }
    for (pos=tempIndex; (pos < index) && hasMoreEvents(); pos++) {
      this.advance();
    }
  }
  this.fIndex=pos;
  return hasMoreEvents();
}","public boolean seekIndex(long index){
  this.prio.clear();
  long tempIndex=Long.MIN_VALUE;
  long tempTimestamp=Long.MIN_VALUE;
  try {
    for (    StreamInputReader streamInputReader : this.streamInputReaders) {
      final long streamIndex=streamInputReader.seekIndex(index);
      if (streamInputReader.getCurrentEvent() != null) {
        tempIndex=Math.max(tempIndex,streamIndex);
        EventDefinition currentEvent=streamInputReader.getCurrentEvent();
        if (currentEvent == null) {
          streamInputReader.readNextEvent();
          currentEvent=streamInputReader.getCurrentEvent();
        }
        if (currentEvent != null) {
          tempTimestamp=Math.max(tempTimestamp,currentEvent.timestamp);
        }
 else {
          tempIndex=goToZero();
        }
      }
    }
  }
 catch (  CTFReaderException e) {
    tempIndex=goToZero();
  }
  for (  StreamInputReader streamInputReader : this.streamInputReaders) {
    if (streamInputReader.getCurrentEvent() != null) {
      this.prio.add(streamInputReader);
    }
  }
  if (tempIndex == Long.MAX_VALUE) {
    tempIndex=0;
  }
  long pos=tempIndex;
  if (index > tempIndex) {
    while ((prio.peek().getCurrentEvent().timestamp < tempTimestamp) && hasMoreEvents()) {
      this.advance();
    }
    for (pos=tempIndex; (pos < index) && hasMoreEvents(); pos++) {
      this.advance();
    }
  }
  this.fIndex=pos;
  return hasMoreEvents();
}",0.9871428571428572
92428,"/** 
 * Constructs a TraceReader to read a trace.
 * @param trace The trace to read from.
 * @throws CTFReaderException
 */
public CTFTraceReader(CTFTrace trace){
  this.trace=trace;
  createStreamInputReaders();
  populateStreamInputReaderHeap();
  this.startTime=prio.peek().getCurrentEvent().timestamp;
  this.endTime=this.startTime;
  this.fIndex=0;
  startIndex=new long[prio.size()];
  for (int i=0; i < prio.size(); i++) {
    startIndex[i]=0;
  }
}","/** 
 * Constructs a TraceReader to read a trace.
 * @param trace The trace to read from.
 * @throws CTFReaderException
 */
public CTFTraceReader(CTFTrace trace){
  this.trace=trace;
  createStreamInputReaders();
  populateStreamInputReaderHeap();
  this.startTime=prio.peek().getCurrentEvent().timestamp;
  this.endTime=this.startTime;
  this.index=0;
  startIndex=new HashMap<Integer,Long>();
}",0.8309859154929577
92429,"/** 
 * Go to the next event.
 * @return True if an event was read.
 */
public boolean advance(){
  StreamInputReader top=this.prio.poll();
  if (top == null) {
    return false;
  }
  if (hasMoreEvents()) {
    StreamInputPacketReader packetReader=top.getPacketReader();
    boolean packetHasMoreEvents=packetReader.hasMoreEvents();
    StreamInputPacketIndexEntry currentPacket=packetReader.getCurrentPacket();
    if (!packetHasMoreEvents) {
      int n=this.streamInputReaders.indexOf(top);
      currentPacket.setIndexBegin(startIndex[n]);
      currentPacket.setIndexEnd(fIndex);
      startIndex[n]=fIndex + 1;
    }
  }
  if (top.readNextEvent()) {
    this.prio.add(top);
    final long topEnd=top.getCurrentEvent().timestamp;
    this.endTime=Math.max(topEnd,this.endTime);
    this.eventCountPerTraceFile[top.getName()]++;
    fIndex++;
  }
  boolean hasMoreEvents=hasMoreEvents();
  return hasMoreEvents;
}","/** 
 * Go to the next event.
 * @return True if an event was read.
 */
public boolean advance(){
  StreamInputReader top=this.prio.poll();
  if (top == null) {
    return false;
  }
  if (hasMoreEvents()) {
    StreamInputPacketReader packetReader=top.getPacketReader();
    boolean packetHasMoreEvents=packetReader.hasMoreEvents();
    StreamInputPacketIndexEntry currentPacket=packetReader.getCurrentPacket();
    if (!packetHasMoreEvents) {
      int n=this.streamInputReaders.indexOf(top);
      if (!startIndex.containsKey(n)) {
        startIndex.put(n,0L);
      }
      currentPacket.setIndexBegin(startIndex.get(n));
      currentPacket.setIndexEnd(index);
      startIndex.put(n,index + 1);
    }
  }
  if (top.readNextEvent()) {
    this.prio.add(top);
    final long topEnd=top.getCurrentEvent().timestamp;
    this.endTime=Math.max(topEnd,this.endTime);
    this.eventCountPerTraceFile[top.getName()]++;
    fIndex++;
  }
  boolean hasMoreEvents=hasMoreEvents();
  return hasMoreEvents;
}",0.9208333333333332
92430,"public long seekIndex(long index) throws CTFReaderException {
  StreamInputPacketIndexEntry sipie=null;
  this.packetIndexIt=this.streamInput.getIndex().searchIndex(index);
  goToNextPacket();
  sipie=this.packetReader.getCurrentPacket();
  readNextEvent();
  if (this.packetReader.getCurrentPacket() == null) {
    if (!((sipie.getIndexBegin() == 0) && (sipie.getIndexEnd() == Long.MAX_VALUE))) {
      throw new CTFReaderException(""String_Node_Str"");
    }
    return -1;
  }
  return this.packetReader.getCurrentPacket().getIndexBegin();
}","public long seekIndex(long index) throws CTFReaderException {
  StreamInputPacketIndexEntry sipie=null;
  this.packetIndexIt=this.streamInput.getIndex().searchIndex(index);
  goToNextPacket();
  sipie=this.packetReader.getCurrentPacket();
  readNextEvent();
  if (this.packetReader.getCurrentPacket() == null) {
    if (!((sipie.getIndexBegin() == 0) && (sipie.getIndexEnd() == Long.MAX_VALUE))) {
      throw new CTFReaderException(""String_Node_Str"");
    }
    return 0;
  }
  return this.packetReader.getCurrentPacket().getIndexBegin();
}",0.997229916897507
92431,"/** 
 * Run the CTFEventField parseField(Definition,String) method test.
 */
@Test public void testParseField_manual2(){
  Definition fieldDef=new ArrayDefinition(new ArrayDeclaration(12,new IntegerDeclaration(32,false,32,null,null,null)),null,fieldName);
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[0]).setValue('H');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[1]).setValue('e');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[2]).setValue('l');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[3]).setValue('l');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[4]).setValue('o');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[5]).setValue(' ');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[6]).setValue('W');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[7]).setValue('o');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[8]).setValue('r');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[9]).setValue('l');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[10]).setValue('d');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[11]).setValue(0);
  assertNotNull(fieldDef);
  String other=fieldName + ""String_Node_Str"";
  assertEquals(other,fieldDef.toString());
}","/** 
 * Run the CTFEventField parseField(Definition,String) method test.
 */
@Test public void testParseField_manual2(){
  Definition fieldDef=new ArrayDefinition(new ArrayDeclaration(12,new IntegerDeclaration(32,false,32,null,null,null,8)),null,fieldName);
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[0]).setValue('H');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[1]).setValue('e');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[2]).setValue('l');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[3]).setValue('l');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[4]).setValue('o');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[5]).setValue(' ');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[6]).setValue('W');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[7]).setValue('o');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[8]).setValue('r');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[9]).setValue('l');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[10]).setValue('d');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[11]).setValue(0);
  assertNotNull(fieldDef);
  String other=fieldName + ""String_Node_Str"";
  assertEquals(other,fieldDef.toString());
}",0.9992887624466572
92432,"/** 
 * Run the CTFEventField parseField(Definition,String) method test.
 */
@Test public void testParseField_manual(){
  Definition fieldDef=new ArrayDefinition(new ArrayDeclaration(20,new IntegerDeclaration(8,false,8,null,Encoding.UTF8,null)),null,fieldName);
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[0]).setValue('H');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[1]).setValue('e');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[2]).setValue('l');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[3]).setValue('l');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[4]).setValue('o');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[5]).setValue(' ');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[6]).setValue('W');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[7]).setValue('o');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[8]).setValue('r');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[9]).setValue('l');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[10]).setValue('d');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[11]).setValue(0);
  assertNotNull(fieldDef);
}","/** 
 * Run the CTFEventField parseField(Definition,String) method test.
 */
@Test public void testParseField_manual(){
  Definition fieldDef=new ArrayDefinition(new ArrayDeclaration(20,new IntegerDeclaration(8,false,8,null,Encoding.UTF8,null,8)),null,fieldName);
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[0]).setValue('H');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[1]).setValue('e');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[2]).setValue('l');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[3]).setValue('l');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[4]).setValue('o');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[5]).setValue(' ');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[6]).setValue('W');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[7]).setValue('o');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[8]).setValue('r');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[9]).setValue('l');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[10]).setValue('d');
  ((IntegerDefinition)((ArrayDefinition)fieldDef).getDefinitions()[11]).setValue(0);
  assertNotNull(fieldDef);
}",0.999244142101285
92433,"/** 
 * Run the CTFEventField parseField(Definition,String) method test.
 * @throws CTFReaderException 
 */
@Test public void testParseField_complex() throws CTFReaderException {
  int len=32;
  IntegerDeclaration id=new IntegerDeclaration(len,false,len,ByteOrder.LITTLE_ENDIAN,Encoding.ASCII,null);
  String lengthName=""String_Node_Str"";
  StructDeclaration structDec=new StructDeclaration(0);
  structDec.addField(lengthName,id);
  StructDefinition structDef=new StructDefinition(structDec,null,lengthName);
  structDef.lookupInteger(lengthName).setValue(32);
  SequenceDeclaration sd=new SequenceDeclaration(lengthName,id);
  Definition fieldDef=new SequenceDefinition(sd,structDef,""String_Node_Str"");
  ByteBuffer byb=ByteBuffer.allocate(1024);
  for (int i=0; i < 1024; i++) {
    byb.put((byte)i);
  }
  BitBuffer bb=new BitBuffer(byb);
  fieldDef.read(bb);
  assertNotNull(fieldDef);
}","/** 
 * Run the CTFEventField parseField(Definition,String) method test.
 * @throws CTFReaderException
 */
@Test public void testParseField_complex() throws CTFReaderException {
  int len=32;
  IntegerDeclaration id=new IntegerDeclaration(len,false,len,ByteOrder.LITTLE_ENDIAN,Encoding.ASCII,null,32);
  String lengthName=""String_Node_Str"";
  StructDeclaration structDec=new StructDeclaration(0);
  structDec.addField(lengthName,id);
  StructDefinition structDef=new StructDefinition(structDec,null,lengthName);
  structDef.lookupInteger(lengthName).setValue(32);
  SequenceDeclaration sd=new SequenceDeclaration(lengthName,id);
  Definition fieldDef=new SequenceDefinition(sd,structDef,""String_Node_Str"");
  ByteBuffer byb=ByteBuffer.allocate(1024);
  for (int i=0; i < 1024; i++) {
    byb.put((byte)i);
  }
  BitBuffer bb=new BitBuffer(byb);
  fieldDef.read(bb);
  assertNotNull(fieldDef);
}",0.9977603583426652
92434,"/** 
 * Run the CTFEventField parseField(Definition,String) method test.
 */
@Test public void testParseField_simple2(){
  IntegerDefinition fieldDef=new IntegerDefinition(new IntegerDeclaration(1,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,null),null,fieldName);
  fieldDef.setValue(1L);
  assertNotNull(fieldDef);
}","/** 
 * Run the CTFEventField parseField(Definition,String) method test.
 */
@Test public void testParseField_simple2(){
  IntegerDefinition fieldDef=new IntegerDefinition(new IntegerDeclaration(1,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,null,8),null,fieldName);
  fieldDef.setValue(1L);
  assertNotNull(fieldDef);
}",0.996845425867508
92435,"/** 
 * Run the CTFEventField parseField(Definition,String) method test.
 * @throws CTFReaderException 
 */
@Test public void testParseField_simple() throws CTFReaderException {
  Definition fieldDef=new SequenceDefinition(new SequenceDeclaration(""String_Node_Str"",new StringDeclaration()),null,fieldName);
  assertNotNull(fieldDef);
}","/** 
 * Run the CTFEventField parseField(Definition,String) method test.
 * @throws CTFReaderException
 */
@Test public void testParseField_simple() throws CTFReaderException {
  Definition fieldDef=new SequenceDefinition(new SequenceDeclaration(""String_Node_Str"",new StringDeclaration()),null,fieldName);
  assertNotNull(fieldDef);
}",0.9985052316890882
92436,"/** 
 * @param args
 */
@SuppressWarnings(""String_Node_Str"") public static void main(String[] args){
  final String TRACE_PATH=""String_Node_Str"";
  final boolean USE_TEXT=false;
  final int LOOP_COUNT=1;
  Long nbEvent=0L;
  Vector<Double> benchs=new Vector<Double>();
  CTFTrace trace=null;
  long start, stop;
  for (int loops=0; loops < LOOP_COUNT; loops++) {
    try {
      nbEvent=0L;
      trace=new CTFTrace(TRACE_PATH);
    }
 catch (    CTFReaderException e) {
    }
    long prev=-1;
    start=System.nanoTime();
    if (USE_TEXT) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (trace != null) {
      CTFTraceReader traceReader=new CTFTraceReader(trace);
      start=System.nanoTime();
      while (traceReader.hasMoreEvents()) {
        EventDefinition ed=traceReader.getCurrentEventDef();
        nbEvent++;
        if (prev == traceReader.getIndex()) {
          System.out.println(""String_Node_Str"" + prev);
        }
        prev=traceReader.getIndex();
        if (USE_TEXT) {
          String output=formatDate(ed.timestamp + trace.getOffset());
          System.out.println(traceReader.getIndex() + ""String_Node_Str"" + output+ ""String_Node_Str""+ ed.getDeclaration().getName()+ ""String_Node_Str""+ ed.getCPU());
        }
        traceReader.advance();
      }
    }
    stop=System.nanoTime();
    System.out.print('.');
    double time=(stop - start) / (double)nbEvent;
    benchs.add(time);
  }
  System.out.println(""String_Node_Str"");
  double avg=0;
  for (  Double val : benchs) {
    avg+=val;
  }
  avg/=benchs.size();
  System.out.println(""String_Node_Str"" + nbEvent + ""String_Node_Str""+ avg+ ""String_Node_Str"");
  for (  Double val : benchs) {
    System.out.print(val);
    System.out.print(""String_Node_Str"");
  }
  testSeekIndex(trace);
  testSeekIndex(trace);
}","/** 
 * @param args
 */
@SuppressWarnings(""String_Node_Str"") public static void main(String[] args){
  final String TRACE_PATH=""String_Node_Str"";
  final boolean USE_TEXT=true;
  final int LOOP_COUNT=1;
  Long nbEvent=0L;
  Vector<Double> benchs=new Vector<Double>();
  CTFTrace trace=null;
  long start, stop;
  for (int loops=0; loops < LOOP_COUNT; loops++) {
    try {
      nbEvent=0L;
      trace=new CTFTrace(TRACE_PATH);
    }
 catch (    CTFReaderException e) {
    }
    long prev=-1;
    start=System.nanoTime();
    if (USE_TEXT) {
      System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (trace != null) {
      CTFTraceReader traceReader=new CTFTraceReader(trace);
      start=System.nanoTime();
      while (traceReader.hasMoreEvents()) {
        EventDefinition ed=traceReader.getCurrentEventDef();
        nbEvent++;
        if (prev == traceReader.getIndex()) {
          System.out.println(""String_Node_Str"" + prev);
        }
        prev=traceReader.getIndex();
        if (USE_TEXT) {
          String output=formatDate(ed.timestamp + trace.getOffset());
          System.out.println(traceReader.getIndex() + ""String_Node_Str"" + output+ ""String_Node_Str""+ ed.getDeclaration().getName()+ ""String_Node_Str""+ ed.getCPU()+ ed.getFields().toString());
        }
        traceReader.advance();
      }
    }
    stop=System.nanoTime();
    System.out.print('.');
    double time=(stop - start) / (double)nbEvent;
    benchs.add(time);
  }
  System.out.println(""String_Node_Str"");
  double avg=0;
  for (  Double val : benchs) {
    avg+=val;
  }
  avg/=benchs.size();
  System.out.println(""String_Node_Str"" + nbEvent + ""String_Node_Str""+ avg+ ""String_Node_Str"");
  for (  Double val : benchs) {
    System.out.print(val);
    System.out.print(""String_Node_Str"");
  }
  testSeekIndex(trace);
  testSeekIndex(trace);
}",0.9909478168264112
92437,"private ArrayDefinition createLongArray(){
  IntegerDeclaration decl=new IntegerDeclaration(32,false,10,ByteOrder.BIG_ENDIAN,Encoding.NONE,""String_Node_Str"");
  IntegerDefinition[] defs=createIntDefs(10,32);
  ArrayDefinition temp=setUpDeclaration(decl,defs);
  return temp;
}","private ArrayDefinition createLongArray(){
  IntegerDeclaration decl=new IntegerDeclaration(32,false,10,ByteOrder.BIG_ENDIAN,Encoding.NONE,""String_Node_Str"",8);
  IntegerDefinition[] defs=createIntDefs(10,32);
  ArrayDefinition temp=setUpDeclaration(decl,defs);
  return temp;
}",0.9963898916967509
92438,"/** 
 * Run the boolean isString() method test.
 */
@Test public void testIsString_complex(){
  final IntegerDeclaration id=new IntegerDeclaration(8,false,16,ByteOrder.LITTLE_ENDIAN,Encoding.UTF8,null);
  ArrayDeclaration ad=new ArrayDeclaration(0,id);
  ArrayDefinition ownFixture=new ArrayDefinition(ad,this.trace,""String_Node_Str"");
  int size=4;
  int bits=8;
  IntegerDefinition[] defs=createIntDefs(size,bits);
  ownFixture.setDefinitions(defs);
  boolean result=ownFixture.isString();
  assertTrue(result);
}","/** 
 * Run the boolean isString() method test.
 */
@Test public void testIsString_complex(){
  final IntegerDeclaration id=new IntegerDeclaration(8,false,16,ByteOrder.LITTLE_ENDIAN,Encoding.UTF8,null,8);
  ArrayDeclaration ad=new ArrayDeclaration(0,id);
  ArrayDefinition ownFixture=new ArrayDefinition(ad,this.trace,""String_Node_Str"");
  int size=4;
  int bits=8;
  IntegerDefinition[] defs=createIntDefs(size,bits);
  ownFixture.setDefinitions(defs);
  boolean result=ownFixture.isString();
  assertTrue(result);
}",0.998062015503876
92439,"/** 
 * @param size
 * @param bits
 * @return
 */
private static IntegerDefinition[] createIntDefs(int size,int bits){
  IntegerDefinition[] defs=new IntegerDefinition[size];
  for (int i=0; i < size; i++) {
    String content=""String_Node_Str"" + i;
    defs[i]=new IntegerDefinition(new IntegerDeclaration(bits,false,16,ByteOrder.LITTLE_ENDIAN,Encoding.UTF8,content),null,content);
    defs[i].setValue(i);
  }
  return defs;
}","/** 
 * @param size
 * @param bits
 * @return
 */
private static IntegerDefinition[] createIntDefs(int size,int bits){
  IntegerDefinition[] defs=new IntegerDefinition[size];
  for (int i=0; i < size; i++) {
    String content=""String_Node_Str"" + i;
    defs[i]=new IntegerDefinition(new IntegerDeclaration(bits,false,16,ByteOrder.LITTLE_ENDIAN,Encoding.UTF8,content,24),null,content);
    defs[i].setValue(i);
  }
  return defs;
}",0.9965075669383004
92440,"private ArrayDefinition createCharArray(){
  IntegerDeclaration decl=new IntegerDeclaration(8,false,10,ByteOrder.BIG_ENDIAN,Encoding.UTF8,""String_Node_Str"");
  IntegerDefinition[] defs=createIntDefs(4,8);
  ArrayDefinition temp=setUpDeclaration(decl,defs);
  return temp;
}","private ArrayDefinition createCharArray(){
  IntegerDeclaration decl=new IntegerDeclaration(8,false,10,ByteOrder.BIG_ENDIAN,Encoding.UTF8,""String_Node_Str"",8);
  IntegerDefinition[] defs=createIntDefs(4,8);
  ArrayDefinition temp=setUpDeclaration(decl,defs);
  return temp;
}",0.9963503649635036
92441,"/** 
 * Run the EnumDeclaration(IntegerDeclaration) constructor test.
 */
@Test public void testEnumDeclaration(){
  IntegerDeclaration containerType=new IntegerDeclaration(1,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,null);
  EnumDeclaration result=new EnumDeclaration(containerType);
  assertNotNull(result);
  String left=""String_Node_Str"";
  assertEquals(left,result.toString().substring(0,left.length()));
}","/** 
 * Run the EnumDeclaration(IntegerDeclaration) constructor test.
 */
@Test public void testEnumDeclaration(){
  IntegerDeclaration containerType=new IntegerDeclaration(1,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,null,8);
  EnumDeclaration result=new EnumDeclaration(containerType);
  assertNotNull(result);
  String left=""String_Node_Str"";
  assertEquals(left,result.toString().substring(0,left.length()));
}",0.9975786924939468
92442,"/** 
 * Perform pre-test initialization.
 */
@Before public void setUp(){
  fixture=new EnumDeclaration(new IntegerDeclaration(1,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,null));
}","/** 
 * Perform pre-test initialization.
 */
@Before public void setUp(){
  fixture=new EnumDeclaration(new IntegerDeclaration(1,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,null,8));
}",0.9945054945054944
92443,"/** 
 * Perform pre-test initialization.
 */
@Before public void setUp(){
  EnumDeclaration declaration=new EnumDeclaration(new IntegerDeclaration(1,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,null));
  String fieldName=""String_Node_Str"";
  fixture=new EnumDefinition(declaration,null,fieldName);
}","/** 
 * Perform pre-test initialization.
 */
@Before public void setUp(){
  EnumDeclaration declaration=new EnumDeclaration(new IntegerDeclaration(1,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,null,8));
  String fieldName=""String_Node_Str"";
  fixture=new EnumDefinition(declaration,null,fieldName);
}",0.9966442953020134
92444,"/** 
 * Run the IntegerDeclaration(int,boolean,int,ByteOrder,Encoding) constructor test.
 */
@Test public void testIntegerDeclaration(){
  int len=1;
  boolean signed=true;
  int base=1;
  ByteOrder byteOrder=ByteOrder.BIG_ENDIAN;
  Encoding encoding=Encoding.ASCII;
  IntegerDeclaration result=new IntegerDeclaration(len,signed,base,byteOrder,encoding,null);
  assertNotNull(result);
  assertEquals(1,result.getBase());
  assertEquals(false,result.isCharacter());
  String outputValue=""String_Node_Str"";
  assertEquals(outputValue,result.toString().substring(0,outputValue.length()));
  assertEquals(1,result.getLength());
  assertEquals(true,result.isSigned());
}","/** 
 * Run the IntegerDeclaration(int,boolean,int,ByteOrder,Encoding) constructor test.
 */
@Test public void testIntegerDeclaration(){
  int len=1;
  boolean signed=true;
  int base=1;
  ByteOrder byteOrder=ByteOrder.BIG_ENDIAN;
  Encoding encoding=Encoding.ASCII;
  IntegerDeclaration result=new IntegerDeclaration(len,signed,base,byteOrder,encoding,null,16);
  assertNotNull(result);
  assertEquals(1,result.getBase());
  assertEquals(false,result.isCharacter());
  String outputValue=""String_Node_Str"";
  assertEquals(outputValue,result.toString().substring(0,outputValue.length()));
  assertEquals(1,result.getLength());
  assertEquals(true,result.isSigned());
}",0.99774943735934
92445,"/** 
 * Run the boolean isSigned() method test.
 */
@Test public void testIsSigned_unsigned(){
  IntegerDeclaration fixture_unsigned=new IntegerDeclaration(1,false,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,null);
  boolean result=fixture_unsigned.isSigned();
  assertEquals(false,result);
}","/** 
 * Run the boolean isSigned() method test.
 */
@Test public void testIsSigned_unsigned(){
  IntegerDeclaration fixture_unsigned=new IntegerDeclaration(1,false,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,null,8);
  boolean result=fixture_unsigned.isSigned();
  assertEquals(false,result);
}",0.9965156794425089
92446,"/** 
 * Perform pre-test initialization.
 */
@Before public void setUp(){
  fixture=new IntegerDeclaration(1,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,null);
}","/** 
 * Perform pre-test initialization.
 */
@Before public void setUp(){
  fixture=new IntegerDeclaration(1,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,null,32);
}",0.9907120743034056
92447,"/** 
 * Run the boolean isCharacter() method test.
 */
@Test public void testIsCharacter_8bytes(){
  IntegerDeclaration fixture8=new IntegerDeclaration(8,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,null);
  boolean result=fixture8.isCharacter();
  assertEquals(true,result);
}","/** 
 * Run the boolean isCharacter() method test.
 */
@Test public void testIsCharacter_8bytes(){
  IntegerDeclaration fixture8=new IntegerDeclaration(8,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,null,8);
  boolean result=fixture8.isCharacter();
  assertEquals(true,result);
}",0.9963768115942028
92448,"/** 
 * Run the IntegerDefinition(IntegerDeclaration,DefinitionScope,String) constructor test.
 */
@Test public void testIntegerDefinition(){
  IntegerDeclaration declaration=new IntegerDeclaration(1,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,null);
  IDefinitionScope definitionScope=null;
  String fieldName=""String_Node_Str"";
  IntegerDefinition result=new IntegerDefinition(declaration,definitionScope,fieldName);
  assertNotNull(result);
}","/** 
 * Run the IntegerDefinition(IntegerDeclaration,DefinitionScope,String) constructor test.
 */
@Test public void testIntegerDefinition(){
  IntegerDeclaration declaration=new IntegerDeclaration(1,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,null,8);
  IDefinitionScope definitionScope=null;
  String fieldName=""String_Node_Str"";
  IntegerDefinition result=new IntegerDefinition(declaration,definitionScope,fieldName);
  assertNotNull(result);
}",0.997752808988764
92449,"/** 
 * Perform pre-test initialization. We know the structDef won't be null (or else the tests will fail), so we can safely suppress the warning.
 * @throws CTFReaderException 
 */
@Before public void setUp() throws CTFReaderException {
  CTFTrace trace=TestParams.createTrace();
  CTFTraceReader tr=new CTFTraceReader(trace);
  String name=""String_Node_Str"";
  StructDefinition structDef=null;
  boolean found=false;
  while (tr.hasMoreEvents() && !found) {
    tr.advance();
    EventDefinition ed=tr.getCurrentEventDef();
    for (    String key : ed.fields.getDefinitions().keySet()) {
      structDef=ed.fields;
      Definition d=structDef.lookupDefinition(key);
      if (d instanceof IntegerDefinition) {
        found=true;
        name=key;
        break;
      }
    }
  }
  assert(structDef != null);
  fixture=structDef.lookupInteger(name);
}","/** 
 * Perform pre-test initialization. We know the structDef won't be null (or else the tests will fail), so we can safely suppress the warning.
 * @throws CTFReaderException
 */
@Before public void setUp() throws CTFReaderException {
  CTFTrace trace=TestParams.createTrace();
  CTFTraceReader tr=new CTFTraceReader(trace);
  String name=""String_Node_Str"";
  StructDefinition structDef=null;
  boolean found=false;
  while (tr.hasMoreEvents() && !found) {
    tr.advance();
    EventDefinition ed=tr.getCurrentEventDef();
    for (    String key : ed.fields.getDefinitions().keySet()) {
      structDef=ed.fields;
      Definition d=structDef.lookupDefinition(key);
      if (d instanceof IntegerDefinition) {
        found=true;
        name=key;
        break;
      }
    }
  }
  assert(structDef != null);
  fixture=structDef.lookupInteger(name);
}",0.999415546464056
92450,"/** 
 * Run the SequenceDefinition createDefinition(DefinitionScope,String) method test.
 */
@Test public void testCreateDefinition(){
  IntegerDeclaration id=new IntegerDeclaration(8,false,8,ByteOrder.LITTLE_ENDIAN,Encoding.UTF8,null);
  StructDeclaration structDec=new StructDeclaration(0);
  structDec.addField(fieldName,id);
  StructDefinition structDef=new StructDefinition(structDec,null,""String_Node_Str"");
  long seqLen=10;
  structDef.lookupInteger(fieldName).setValue(seqLen);
  SequenceDefinition result=this.fixture.createDefinition(structDef,fieldName);
  assertNotNull(result);
}","/** 
 * Run the SequenceDefinition createDefinition(DefinitionScope,String) method test.
 */
@Test public void testCreateDefinition(){
  IntegerDeclaration id=new IntegerDeclaration(8,false,8,ByteOrder.LITTLE_ENDIAN,Encoding.UTF8,null,32);
  StructDeclaration structDec=new StructDeclaration(0);
  structDec.addField(fieldName,id);
  StructDefinition structDef=new StructDefinition(structDec,null,""String_Node_Str"");
  long seqLen=10;
  structDef.lookupInteger(fieldName).setValue(seqLen);
  SequenceDefinition result=this.fixture.createDefinition(structDef,fieldName);
  assertNotNull(result);
}",0.9974768713204374
92451,"private static SequenceDefinition initNonString() throws CTFReaderException {
  StructDeclaration structDec;
  StructDefinition structDef;
  int len=32;
  IntegerDeclaration id=new IntegerDeclaration(len,false,len,ByteOrder.LITTLE_ENDIAN,Encoding.UTF8,null);
  String lengthName=""String_Node_Str"";
  structDec=new StructDeclaration(0);
  structDec.addField(lengthName,id);
  structDef=new StructDefinition(structDec,null,""String_Node_Str"");
  structDef.lookupInteger(lengthName).setValue(seqLen);
  SequenceDeclaration sd=new SequenceDeclaration(lengthName,id);
  SequenceDefinition ret=new SequenceDefinition(sd,structDef,""String_Node_Str"");
  BitBuffer input=new BitBuffer(java.nio.ByteBuffer.allocateDirect(seqLen * len));
  for (int i=0; i < seqLen; i++) {
    input.putInt(i);
  }
  ret.read(input);
  assertNotNull(ret);
  return ret;
}","private static SequenceDefinition initNonString() throws CTFReaderException {
  StructDeclaration structDec;
  StructDefinition structDef;
  int len=32;
  IntegerDeclaration id=new IntegerDeclaration(len,false,len,ByteOrder.LITTLE_ENDIAN,Encoding.UTF8,null,8);
  String lengthName=""String_Node_Str"";
  structDec=new StructDeclaration(0);
  structDec.addField(lengthName,id);
  structDef=new StructDefinition(structDec,null,""String_Node_Str"");
  structDef.lookupInteger(lengthName).setValue(seqLen);
  SequenceDeclaration sd=new SequenceDeclaration(lengthName,id);
  SequenceDefinition ret=new SequenceDefinition(sd,structDef,""String_Node_Str"");
  BitBuffer input=new BitBuffer(java.nio.ByteBuffer.allocateDirect(seqLen * len));
  for (int i=0; i < seqLen; i++) {
    input.putInt(i);
  }
  ret.read(input);
  assertNotNull(ret);
  return ret;
}",0.9988137603795968
92452,"/** 
 * Perform pre-test initialization.
 * @throws CTFReaderException 
 */
@Before public void setUp() throws CTFReaderException {
  StructDeclaration structDec;
  StructDefinition structDef;
  IntegerDeclaration id=new IntegerDeclaration(8,false,8,ByteOrder.LITTLE_ENDIAN,Encoding.UTF8,null);
  String lengthName=""String_Node_Str"";
  structDec=new StructDeclaration(0);
  structDec.addField(lengthName,id);
  structDef=new StructDefinition(structDec,null,""String_Node_Str"");
  structDef.lookupInteger(lengthName).setValue(seqLen);
  SequenceDeclaration sd=new SequenceDeclaration(lengthName,id);
  fixture=new SequenceDefinition(sd,structDef,""String_Node_Str"");
  BitBuffer input=new BitBuffer(java.nio.ByteBuffer.allocateDirect(seqLen * 8));
  for (int i=0; i < seqLen; i++) {
    input.putInt(i);
  }
  fixture.read(input);
  assert(fixture != null);
}","/** 
 * Perform pre-test initialization.
 * @throws CTFReaderException
 */
@Before public void setUp() throws CTFReaderException {
  StructDeclaration structDec;
  StructDefinition structDef;
  IntegerDeclaration id=new IntegerDeclaration(8,false,8,ByteOrder.LITTLE_ENDIAN,Encoding.UTF8,null,8);
  String lengthName=""String_Node_Str"";
  structDec=new StructDeclaration(0);
  structDec.addField(lengthName,id);
  structDef=new StructDefinition(structDec,null,""String_Node_Str"");
  structDef.lookupInteger(lengthName).setValue(seqLen);
  SequenceDeclaration sd=new SequenceDeclaration(lengthName,id);
  fixture=new SequenceDefinition(sd,structDef,""String_Node_Str"");
  BitBuffer input=new BitBuffer(java.nio.ByteBuffer.allocateDirect(seqLen * 8));
  for (int i=0; i < seqLen; i++) {
    input.putInt(i);
  }
  fixture.read(input);
  assert(fixture != null);
}",0.9982486865148862
92453,"/** 
 * Run the VariantDefinition(VariantDeclaration,DefinitionScope,String)
 * @throws CTFReaderException 
 */
@Test public void testVariantDefinition() throws CTFReaderException {
  VariantDeclaration declaration=new VariantDeclaration();
  declaration.setTag(""String_Node_Str"");
  VariantDeclaration variantDeclaration=new VariantDeclaration();
  variantDeclaration.setTag(""String_Node_Str"");
  VariantDefinition variantDefinition=new VariantDefinition(variantDeclaration,TestParams.createTrace(),""String_Node_Str"");
  IDefinitionScope definitionScope=new StructDefinition(new StructDeclaration(1L),variantDefinition,""String_Node_Str"");
  String fieldName=""String_Node_Str"";
  VariantDefinition result=new VariantDefinition(declaration,definitionScope,fieldName);
  assertNotNull(result);
}","/** 
 * Run the VariantDefinition(VariantDeclaration,DefinitionScope,String)
 * @throws CTFReaderException
 */
@Test public void testVariantDefinition() throws CTFReaderException {
  VariantDeclaration declaration=new VariantDeclaration();
  declaration.setTag(""String_Node_Str"");
  VariantDeclaration variantDeclaration=new VariantDeclaration();
  variantDeclaration.setTag(""String_Node_Str"");
  VariantDefinition variantDefinition=new VariantDefinition(variantDeclaration,TestParams.createTrace(),""String_Node_Str"");
  IDefinitionScope definitionScope=new StructDefinition(new StructDeclaration(1L),variantDefinition,""String_Node_Str"");
  String fieldName=""String_Node_Str"";
  VariantDefinition result=new VariantDefinition(declaration,definitionScope,fieldName);
  assertNotNull(result);
}",0.9993690851735016
92454,"/** 
 * Run the void setTagDefinition(EnumDefinition) method test.
 * @throws CTFReaderException 
 */
@Test public void testSetTagDefinition() throws CTFReaderException {
  VariantDeclaration vDecl;
  VariantDefinition vDef;
  StructDefinition structDef;
  EnumDefinition tagDefinition;
  String fName=""String_Node_Str"";
  vDecl=new VariantDeclaration();
  vDecl.setTag(fName);
  vDef=new VariantDefinition(vDecl,TestParams.createTrace(),fName);
  structDef=new StructDefinition(new StructDeclaration(1L),vDef,fName);
  tagDefinition=new EnumDefinition(new EnumDeclaration(new IntegerDeclaration(1,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,fName)),structDef,fName);
  fixture.setTagDefinition(tagDefinition);
}","/** 
 * Run the void setTagDefinition(EnumDefinition) method test.
 * @throws CTFReaderException
 */
@Test public void testSetTagDefinition() throws CTFReaderException {
  VariantDeclaration vDecl;
  VariantDefinition vDef;
  StructDefinition structDef;
  EnumDefinition tagDefinition;
  String fName=""String_Node_Str"";
  vDecl=new VariantDeclaration();
  vDecl.setTag(fName);
  vDef=new VariantDefinition(vDecl,TestParams.createTrace(),fName);
  structDef=new StructDefinition(new StructDeclaration(1L),vDef,fName);
  tagDefinition=new EnumDefinition(new EnumDeclaration(new IntegerDeclaration(1,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,fName,8)),structDef,fName);
  fixture.setTagDefinition(tagDefinition);
}",0.9978917779339423
92455,"/** 
 * Perform pre-test initialization. Not sure it needs to be that complicated, oh well...
 * @throws CTFReaderException 
 */
@Before public void setUp() throws CTFReaderException {
  VariantDeclaration vDecl1, vDecl2, vDecl3;
  VariantDefinition vDef1, vDef2;
  StructDefinition sDef1, sDef2;
  EnumDefinition eDef;
  String fName=""String_Node_Str"";
  vDecl1=new VariantDeclaration();
  vDecl2=new VariantDeclaration();
  vDecl3=new VariantDeclaration();
  vDecl1.setTag(fName);
  vDecl2.setTag(fName);
  vDecl3.setTag(fName);
  vDef1=new VariantDefinition(vDecl2,TestParams.createTrace(),fName);
  vDef2=new VariantDefinition(vDecl3,TestParams.createTrace(),fName);
  sDef1=new StructDefinition(new StructDeclaration(1L),vDef1,fName);
  sDef2=new StructDefinition(new StructDeclaration(1L),vDef2,fName);
  eDef=new EnumDefinition(new EnumDeclaration(new IntegerDeclaration(1,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,fName)),sDef2,fName);
  fixture=new VariantDefinition(vDecl1,sDef1,fName);
  fixture.setTagDefinition(eDef);
  fixture.setCurrentField(fName);
}","/** 
 * Perform pre-test initialization. Not sure it needs to be that complicated, oh well...
 * @throws CTFReaderException
 */
@Before public void setUp() throws CTFReaderException {
  VariantDeclaration vDecl1, vDecl2, vDecl3;
  VariantDefinition vDef1, vDef2;
  StructDefinition sDef1, sDef2;
  EnumDefinition eDef;
  String fName=""String_Node_Str"";
  vDecl1=new VariantDeclaration();
  vDecl2=new VariantDeclaration();
  vDecl3=new VariantDeclaration();
  vDecl1.setTag(fName);
  vDecl2.setTag(fName);
  vDecl3.setTag(fName);
  vDef1=new VariantDefinition(vDecl2,TestParams.createTrace(),fName);
  vDef2=new VariantDefinition(vDecl3,TestParams.createTrace(),fName);
  sDef1=new StructDefinition(new StructDeclaration(1L),vDef1,fName);
  sDef2=new StructDefinition(new StructDeclaration(1L),vDef2,fName);
  eDef=new EnumDefinition(new EnumDeclaration(new IntegerDeclaration(1,true,1,ByteOrder.BIG_ENDIAN,Encoding.ASCII,fName,8)),sDef2,fName);
  fixture=new VariantDefinition(vDecl1,sDef1,fName);
  fixture.setTagDefinition(eDef);
  fixture.setCurrentField(fName);
}",0.9985948477751756
92456,"public static CtfTmfTrace getTestTrace() throws TmfTraceException {
  if (trace == null) {
    trace=new CtfTmfTrace();
    trace.initTrace(null,traceFile,CtfTmfEvent.class);
  }
  return trace;
}","public synchronized static CtfTmfTrace getTestTrace() throws TmfTraceException {
  if (trace == null) {
    trace=new CtfTmfTrace();
    trace.initTrace(null,traceFile,CtfTmfEvent.class);
  }
  return trace;
}",0.9679012345679012
92457,"@AfterClass public static void cleanup(){
  stateFile.delete();
  stateFileBenchmark.delete();
}","@AfterClass public static void cleanup(){
  boolean ret1, ret2;
  ret1=stateFile.delete();
  ret2=stateFileBenchmark.delete();
  if (!(ret1 && ret2)) {
    System.err.println(""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.6075949367088608
92458,"/** 
 * Return the absolute path of this attribute, as a single slash-separated String.
 * @return
 */
String getFullAttributeName(){
  String[] array;
  String ret=""String_Node_Str"";
  array=this.getFullAttribute();
  for (int i=0; i < array.length - 1; i++) {
    ret+=array[i] + '/';
  }
  ret+=array[array.length - 1];
  return ret;
}","/** 
 * Return the absolute path of this attribute, as a single slash-separated String.
 * @return
 */
String getFullAttributeName(){
  String[] array=this.getFullAttribute();
  StringBuffer buf=new StringBuffer();
  for (int i=0; i < array.length - 1; i++) {
    buf.append(array[i]);
    buf.append('/');
  }
  buf.append(array[array.length - 1]);
  return buf.toString();
}",0.7002801120448179
92459,"/** 
 * ""Existing file"" constructor Builds a attribute tree from a ""mapping file"" or mapping section previously saved somewhere.
 * @param ss StateSystem to which this AT is attached
 * @param fis File stream where to read the AT information. Make sure it's seeked at the right place!
 * @throws IOException
 */
AttributeTree(StateSystem ss,FileInputStream fis) throws IOException {
  this(ss);
  DataInputStream in=new DataInputStream(new BufferedInputStream(fis));
  final String errorMessage=""String_Node_Str"";
  ArrayList<String[]> list=new ArrayList<String[]>();
  byte[] curByteArray;
  String curFullString;
  String[] curStringArray;
  int res, remain, size;
  int expectedSize=0;
  int total=0;
  res=in.readInt();
  if (res != ATTRIB_TREE_MAGIC_NUMBER) {
    throw new IOException(errorMessage);
  }
  expectedSize=in.readInt();
  if (expectedSize <= 12) {
    throw new IOException(errorMessage);
  }
  remain=in.readInt();
  total+=12;
  for (; remain > 0; remain--) {
    size=in.readByte();
    curByteArray=new byte[size];
    in.read(curByteArray);
    curFullString=new String(curByteArray);
    curStringArray=curFullString.split(""String_Node_Str"");
    list.add(curStringArray);
    res=in.readByte();
    if (res != 0) {
      throw new IOException(errorMessage);
    }
    total+=curByteArray.length + 2;
  }
  if (total != expectedSize) {
    throw new IOException(errorMessage);
  }
  for (  String[] attrib : list) {
    this.getQuarkAndAdd(-1,attrib);
  }
}","/** 
 * ""Existing file"" constructor Builds a attribute tree from a ""mapping file"" or mapping section previously saved somewhere.
 * @param ss StateSystem to which this AT is attached
 * @param fis File stream where to read the AT information. Make sure it's seeked at the right place!
 * @throws IOException
 */
AttributeTree(StateSystem ss,FileInputStream fis) throws IOException {
  this(ss);
  DataInputStream in=new DataInputStream(new BufferedInputStream(fis));
  final String errorMessage=""String_Node_Str"";
  ArrayList<String[]> list=new ArrayList<String[]>();
  byte[] curByteArray;
  String curFullString;
  String[] curStringArray;
  int res, remain, size;
  int expectedSize=0;
  int total=0;
  res=in.readInt();
  if (res != ATTRIB_TREE_MAGIC_NUMBER) {
    throw new IOException(errorMessage);
  }
  expectedSize=in.readInt();
  if (expectedSize <= 12) {
    throw new IOException(errorMessage);
  }
  remain=in.readInt();
  total+=12;
  for (; remain > 0; remain--) {
    size=in.readByte();
    curByteArray=new byte[size];
    res=in.read(curByteArray);
    if (res != size) {
      throw new IOException(errorMessage);
    }
    curFullString=new String(curByteArray);
    curStringArray=curFullString.split(""String_Node_Str"");
    list.add(curStringArray);
    res=in.readByte();
    if (res != 0) {
      throw new IOException(errorMessage);
    }
    total+=curByteArray.length + 2;
  }
  if (total != expectedSize) {
    throw new IOException(errorMessage);
  }
  for (  String[] attrib : list) {
    this.getQuarkAndAdd(-1,attrib);
  }
}",0.8414473684210526
92460,"/** 
 * Print out the contents of the inner structures to the selected PrintWriter.
 */
@Override public void debugPrint(PrintWriter writer){
  writer.println(""String_Node_Str"");
  writer.println(""String_Node_Str"");
  for (int i=0; i < currentStateInfo.size(); i++) {
    writer.print(i + ""String_Node_Str"");
    if (currentStateInfo.get(i) == null) {
      writer.println(""String_Node_Str"");
    }
 else {
      writer.println(currentStateInfo.get(i).toString());
    }
  }
  writer.println('\n');
  super.debugPrint(writer);
  backend.debugPrint(writer);
}","/** 
 * Print out the contents of the inner structures to the selected PrintWriter.
 */
@Override public synchronized void debugPrint(PrintWriter writer){
  writer.println(""String_Node_Str"");
  writer.println(""String_Node_Str"");
  for (int i=0; i < currentStateInfo.size(); i++) {
    writer.print(i + ""String_Node_Str"");
    if (currentStateInfo.get(i) == null) {
      writer.println(""String_Node_Str"");
    }
 else {
      writer.println(currentStateInfo.get(i).toString());
    }
  }
  writer.println('\n');
  super.debugPrint(writer);
  backend.debugPrint(writer);
}",0.9884853852967228
92461,"/** 
 * Standard constructor
 * @param tree
 * @param newFile Are we creating a new file from scratch?
 * @throws IOException
 */
HT_IO(HistoryTree tree,boolean newFile) throws IOException {
  this.tree=tree;
  File historyTreeFile=tree.config.stateFile;
  if (newFile) {
    if (historyTreeFile.exists()) {
      historyTreeFile.delete();
    }
    historyTreeFile.createNewFile();
    fis=new FileInputStream(historyTreeFile);
    fos=new FileOutputStream(historyTreeFile,false);
  }
 else {
    this.fis=new FileInputStream(historyTreeFile);
    this.fos=new FileOutputStream(historyTreeFile,true);
  }
  this.fcIn=fis.getChannel();
  this.fcOut=fos.getChannel();
}","/** 
 * Standard constructor
 * @param tree
 * @param newFile Are we creating a new file from scratch?
 * @throws IOException
 */
HT_IO(HistoryTree tree,boolean newFile) throws IOException {
  this.tree=tree;
  File historyTreeFile=tree.config.stateFile;
  boolean success1=true, success2;
  if (newFile) {
    if (historyTreeFile.exists()) {
      success1=historyTreeFile.delete();
    }
    success2=historyTreeFile.createNewFile();
    if (!(success1 && success2)) {
      throw new IOException(""String_Node_Str"" + historyTreeFile.getName());
    }
    fis=new FileInputStream(historyTreeFile);
    fos=new FileOutputStream(historyTreeFile,false);
  }
 else {
    this.fis=new FileInputStream(historyTreeFile);
    this.fos=new FileOutputStream(historyTreeFile,true);
  }
  this.fcIn=fis.getChannel();
  this.fcOut=fos.getChannel();
}",0.8658698539176627
92462,"/** 
 * ""Reader"" constructor : instantiate a SHTree from an existing tree file on disk
 * @param existingFileName Path/filename of the history-file we are to open
 * @throws IOException
 */
HistoryTree(File existingStateFile) throws IOException {
  int rootNodeSeqNb, res;
  int bs, maxc;
  long ts;
  if ((!existingStateFile.exists()) || existingStateFile.length() <= 0) {
    throw new IOException(""String_Node_Str"");
  }
  FileInputStream fis=new FileInputStream(existingStateFile);
  ByteBuffer buffer=ByteBuffer.allocate(getTreeHeaderSize());
  FileChannel fc=fis.getChannel();
  buffer.order(ByteOrder.LITTLE_ENDIAN);
  buffer.clear();
  fc.read(buffer);
  buffer.flip();
  res=buffer.getInt();
  if (res != HISTORY_FILE_MAGIC_NUMBER) {
    throw new IOException(""String_Node_Str"");
  }
  res=buffer.getInt();
  if (res != MAJOR_VERSION) {
    throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  res=buffer.getInt();
  bs=buffer.getInt();
  maxc=buffer.getInt();
  this.nodeCount=buffer.getInt();
  rootNodeSeqNb=buffer.getInt();
  fc.position(getTreeHeaderSize() + (long)rootNodeSeqNb * bs);
  buffer=ByteBuffer.allocate(8);
  buffer.order(ByteOrder.LITTLE_ENDIAN);
  buffer.clear();
  res=fc.read(buffer);
  assert(res == 8);
  buffer.flip();
  ts=buffer.getLong();
  this.config=new HTConfig(existingStateFile,bs,maxc,ts);
  fis.close();
  this.treeIO=new HT_IO(this,false);
  rebuildLatestBranch(rootNodeSeqNb);
  ts=latestBranch.firstElement().getNodeStart();
  this.treeEnd=latestBranch.firstElement().getNodeEnd();
}","/** 
 * ""Reader"" constructor : instantiate a SHTree from an existing tree file on disk
 * @param existingFileName Path/filename of the history-file we are to open
 * @throws IOException
 */
HistoryTree(File existingStateFile) throws IOException {
  int rootNodeSeqNb, res;
  int bs, maxc;
  long ts;
  if ((!existingStateFile.exists()) || existingStateFile.length() <= 0) {
    throw new IOException(""String_Node_Str"");
  }
  FileInputStream fis=new FileInputStream(existingStateFile);
  ByteBuffer buffer=ByteBuffer.allocate(getTreeHeaderSize());
  FileChannel fc=fis.getChannel();
  buffer.order(ByteOrder.LITTLE_ENDIAN);
  buffer.clear();
  fc.read(buffer);
  buffer.flip();
  res=buffer.getInt();
  if (res != HISTORY_FILE_MAGIC_NUMBER) {
    throw new IOException(""String_Node_Str"");
  }
  res=buffer.getInt();
  if (res != MAJOR_VERSION) {
    throw new IOException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  res=buffer.getInt();
  bs=buffer.getInt();
  maxc=buffer.getInt();
  this.nodeCount=buffer.getInt();
  rootNodeSeqNb=buffer.getInt();
  fc.position(getTreeHeaderSize() + (long)rootNodeSeqNb * bs);
  buffer=ByteBuffer.allocate(8);
  buffer.order(ByteOrder.LITTLE_ENDIAN);
  buffer.clear();
  res=fc.read(buffer);
  assert(res == 8);
  buffer.flip();
  ts=buffer.getLong();
  this.config=new HTConfig(existingStateFile,bs,maxc,ts);
  fis.close();
  this.treeIO=new HT_IO(this,false);
  rebuildLatestBranch(rootNodeSeqNb);
  this.treeEnd=latestBranch.firstElement().getNodeEnd();
}",0.9769555339175592
92463,"/** 
 * @name Test/debugging functions
 */
@SuppressWarnings(""String_Node_Str"") boolean checkNodeIntegrity(HTNode zenode){
  HTNode otherNode;
  CoreNode node;
  String message=""String_Node_Str"";
  boolean ret=true;
  if (!(zenode instanceof CoreNode)) {
    return true;
  }
  node=(CoreNode)zenode;
  if (node.getNbChildren() > 0) {
    otherNode=treeIO.readNode(node.getChild(0));
    if (node.getNodeStart() != otherNode.getNodeStart()) {
      message+=""String_Node_Str"" + node.getNodeStart() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ otherNode.getNodeStart()+ ""String_Node_Str""+ ""String_Node_Str""+ otherNode.getSequenceNumber()+ ""String_Node_Str"";
      ret=false;
    }
    if (node.isDone()) {
      otherNode=treeIO.readNode(node.getLatestChild());
      if (node.getNodeEnd() != otherNode.getNodeEnd()) {
        message+=""String_Node_Str"" + node.getNodeEnd() + ""String_Node_Str""+ otherNode.getNodeEnd()+ ""String_Node_Str""+ otherNode.getSequenceNumber()+ ""String_Node_Str"";
        ret=false;
      }
    }
  }
  for (int i=0; i < node.getNbChildren(); i++) {
    otherNode=treeIO.readNode(node.getChild(i));
    if (otherNode.getNodeStart() != node.getChildStart(i)) {
      message+=""String_Node_Str"" + node.getChild(i) + ""String_Node_Str""+ node.getChildStart(i)+ ""String_Node_Str""+ ""String_Node_Str""+ otherNode.getSequenceNumber()+ ""String_Node_Str""+ otherNode.getNodeStart()+ ""String_Node_Str"";
      ret=false;
    }
  }
  if (!ret) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + node.getSequenceNumber() + ""String_Node_Str"");
    System.out.println(message);
  }
  return ret;
}","/** 
 * @name Test/debugging functions
 */
@SuppressWarnings(""String_Node_Str"") boolean checkNodeIntegrity(HTNode zenode){
  HTNode otherNode;
  CoreNode node;
  StringBuffer buf=new StringBuffer();
  boolean ret=true;
  if (!(zenode instanceof CoreNode)) {
    return true;
  }
  node=(CoreNode)zenode;
  if (node.getNbChildren() > 0) {
    otherNode=treeIO.readNode(node.getChild(0));
    if (node.getNodeStart() != otherNode.getNodeStart()) {
      buf.append(""String_Node_Str"" + node.getNodeStart() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ otherNode.getNodeStart()+ ""String_Node_Str""+ ""String_Node_Str""+ otherNode.getSequenceNumber()+ ""String_Node_Str"");
      ret=false;
    }
    if (node.isDone()) {
      otherNode=treeIO.readNode(node.getLatestChild());
      if (node.getNodeEnd() != otherNode.getNodeEnd()) {
        buf.append(""String_Node_Str"" + node.getNodeEnd() + ""String_Node_Str""+ otherNode.getNodeEnd()+ ""String_Node_Str""+ otherNode.getSequenceNumber()+ ""String_Node_Str"");
        ret=false;
      }
    }
  }
  for (int i=0; i < node.getNbChildren(); i++) {
    otherNode=treeIO.readNode(node.getChild(i));
    if (otherNode.getNodeStart() != node.getChildStart(i)) {
      buf.append(""String_Node_Str"" + node.getChild(i) + ""String_Node_Str""+ node.getChildStart(i)+ ""String_Node_Str""+ ""String_Node_Str""+ otherNode.getSequenceNumber()+ ""String_Node_Str""+ otherNode.getNodeStart()+ ""String_Node_Str"");
      ret=false;
    }
  }
  if (!ret) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + node.getSequenceNumber() + ""String_Node_Str"");
    System.out.println(buf.toString());
  }
  return ret;
}",0.9587721938007824
92464,"public TmfAsyncSequenceDiagramEvent(TmfEvent startEvent,TmfEvent endEvent,String sender,String receiver,String name){
  super(startEvent,sender,receiver,name);
  if (endEvent == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  fEndTime=endEvent.getTimestamp().clone();
}","public TmfAsyncSequenceDiagramEvent(ITmfEvent startEvent,ITmfEvent endEvent,String sender,String receiver,String name){
  super(startEvent,sender,receiver,name);
  if (endEvent == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  fEndTime=endEvent.getTimestamp().clone();
}",0.928813559322034
92465,"public TmfSyncSequenceDiagramEvent(TmfEvent startEvent,String sender,String receiver,String name){
  if (startEvent == null || sender == null || receiver == null || name == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + (startEvent == null ? ""String_Node_Str"" : ""String_Node_Str"") + (sender == null ? ""String_Node_Str"" : ""String_Node_Str"")+ (receiver == null ? ""String_Node_Str"" : ""String_Node_Str"")+ (name == null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  fStartTime=startEvent.getTimestamp().clone();
  fSender=sender;
  fReceiver=receiver;
  fName=name;
}","public TmfSyncSequenceDiagramEvent(ITmfEvent startEvent,String sender,String receiver,String name){
  if (startEvent == null || sender == null || receiver == null || name == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + (startEvent == null ? ""String_Node_Str"" : ""String_Node_Str"") + (sender == null ? ""String_Node_Str"" : ""String_Node_Str"")+ (receiver == null ? ""String_Node_Str"" : ""String_Node_Str"")+ (name == null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  fStartTime=startEvent.getTimestamp().clone();
  fSender=sender;
  fReceiver=receiver;
  fName=name;
}",0.9991460290350128
92466,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Object execute(ExecutionEvent event) throws ExecutionException {
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null) {
    return false;
  }
  try {
    IFile bookmarksFile=fExperiment.getProject().getExperimentsFolder().getResource().getFile(BOOKMARKS_HIDDEN_FILE);
    if (!bookmarksFile.exists()) {
      InputStream source=new ByteArrayInputStream(new byte[0]);
      bookmarksFile.create(source,true,null);
    }
    bookmarksFile.setHidden(true);
    IFile file=fExperiment.getResource().getFile(fExperiment.getName() + '_');
    if (!file.exists()) {
      file.createLink(bookmarksFile.getLocation(),IResource.REPLACE,null);
    }
    file.setHidden(true);
    file.setPersistentProperty(TmfTraceElement.TRACETYPE,TmfExperiment.class.getCanonicalName());
    List<TmfTraceElement> traceEntries=fExperiment.getTraces();
    int nbTraces=traceEntries.size();
    int cacheSize=Integer.MAX_VALUE;
    boolean useEditor=true;
    String experimentEditorId=null;
    ITmfTrace<?>[] traces=new ITmfTrace[nbTraces];
    for (int i=0; i < nbTraces; i++) {
      TmfTraceElement element=traceEntries.get(i);
      ITmfTrace trace=element.instantiateTrace();
      ITmfEvent traceEvent=element.instantiateEvent();
      if ((trace == null) || (traceEvent == null)) {
        displayErrorMsg(Messages.OpenExperimentHandler_NoTraceType);
        for (int j=0; j < i; j++) {
          traces[j].dispose();
        }
        return null;
      }
      try {
        trace.initTrace(element.getName(),element.getLocation().getPath(),traceEvent.getClass());
      }
 catch (      FileNotFoundException e) {
        displayErrorMsg(""String_Node_Str"");
      }
      trace.setResource(element.getResource());
      cacheSize=Math.min(cacheSize,trace.getIndexPageSize());
      String editorId=element.getEditorId();
      if (editorId == null) {
        useEditor=false;
        experimentEditorId=null;
      }
 else       if (useEditor) {
        if (experimentEditorId == null) {
          experimentEditorId=editorId;
        }
 else         if (!editorId.equals(experimentEditorId)) {
          useEditor=false;
        }
      }
      traces[i]=trace;
    }
    TmfExperiment experiment=new TmfExperiment(TmfEvent.class,fExperiment.getName(),traces,cacheSize);
    experiment.setBookmarksFile(file);
    if (useEditor) {
      IEditorInput editorInput=new TmfEditorInput(file,experiment);
      IWorkbench wb=PlatformUI.getWorkbench();
      IWorkbenchPage activePage=wb.getActiveWorkbenchWindow().getActivePage();
      String editorId=TmfEventsEditor.ID;
      IEditorPart editor=activePage.findEditor(new FileEditorInput(file));
      if ((editor != null) && (editor instanceof IReusableEditor)) {
        activePage.reuseEditor((IReusableEditor)editor,editorInput);
        activePage.activate(editor);
      }
 else {
        activePage.openEditor(editorInput,editorId);
      }
      experiment.initTrace(null,null,null);
      experiment.indexTrace(true);
      IDE.setDefaultEditor(file,editorId);
    }
 else {
      TmfExperiment.setCurrentExperiment(experiment);
      TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
      IDE.setDefaultEditor(file,EventsViewEditor.ID);
    }
  }
 catch (  CoreException e) {
    displayErrorMsg(e.getMessage());
  }
  return null;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Object execute(ExecutionEvent event) throws ExecutionException {
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null) {
    return false;
  }
  try {
    IFile bookmarksFile=fExperiment.getProject().getExperimentsFolder().getResource().getFile(BOOKMARKS_HIDDEN_FILE);
    if (!bookmarksFile.exists()) {
      InputStream source=new ByteArrayInputStream(new byte[0]);
      bookmarksFile.create(source,true,null);
    }
    bookmarksFile.setHidden(true);
    IFile file=fExperiment.getResource().getFile(fExperiment.getName() + '_');
    if (!file.exists()) {
      file.createLink(bookmarksFile.getLocation(),IResource.REPLACE,null);
    }
    file.setHidden(true);
    file.setPersistentProperty(TmfTraceElement.TRACETYPE,TmfExperiment.class.getCanonicalName());
    List<TmfTraceElement> traceEntries=fExperiment.getTraces();
    int nbTraces=traceEntries.size();
    int cacheSize=Integer.MAX_VALUE;
    boolean useEditor=true;
    String experimentEditorId=null;
    ITmfTrace<?>[] traces=new ITmfTrace[nbTraces];
    for (int i=0; i < nbTraces; i++) {
      TmfTraceElement element=traceEntries.get(i);
      ITmfTrace trace=element.instantiateTrace();
      ITmfEvent traceEvent=element.instantiateEvent();
      if ((trace == null) || (traceEvent == null)) {
        displayErrorMsg(Messages.OpenExperimentHandler_NoTraceType);
        for (int j=0; j < i; j++) {
          traces[j].dispose();
        }
        return null;
      }
      try {
        trace.initTrace(element.getName(),element.getLocation().getPath(),traceEvent.getClass());
      }
 catch (      FileNotFoundException e) {
        displayErrorMsg(""String_Node_Str"");
      }
      trace.setResource(element.getResource());
      cacheSize=Math.min(cacheSize,trace.getIndexPageSize());
      String editorId=element.getEditorId();
      if (editorId == null) {
        useEditor=false;
        experimentEditorId=null;
      }
 else       if (useEditor) {
        if (experimentEditorId == null) {
          experimentEditorId=editorId;
        }
 else         if (!editorId.equals(experimentEditorId)) {
          useEditor=false;
        }
      }
      traces[i]=trace;
    }
    TmfExperiment experiment=new TmfExperiment(ITmfEvent.class,fExperiment.getName(),traces,cacheSize);
    experiment.setBookmarksFile(file);
    if (useEditor) {
      IEditorInput editorInput=new TmfEditorInput(file,experiment);
      IWorkbench wb=PlatformUI.getWorkbench();
      IWorkbenchPage activePage=wb.getActiveWorkbenchWindow().getActivePage();
      String editorId=TmfEventsEditor.ID;
      IEditorPart editor=activePage.findEditor(new FileEditorInput(file));
      if ((editor != null) && (editor instanceof IReusableEditor)) {
        activePage.reuseEditor((IReusableEditor)editor,editorInput);
        activePage.activate(editor);
      }
 else {
        activePage.openEditor(editorInput,editorId);
      }
      experiment.initTrace(null,null,null);
      experiment.indexTrace(true);
      IDE.setDefaultEditor(file,editorId);
    }
 else {
      TmfExperiment.setCurrentExperiment(experiment);
      TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
      IDE.setDefaultEditor(file,EventsViewEditor.ID);
    }
  }
 catch (  CoreException e) {
    displayErrorMsg(e.getMessage());
  }
  return null;
}",0.999854376001165
92467,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void init(IEditorSite site,IEditorInput input) throws PartInitException {
  fEditorAreaVisible=site.getPage().isEditorAreaVisible();
  if (input instanceof TmfEditorInput) {
    fFile=((TmfEditorInput)input).getFile();
    fTrace=((TmfEditorInput)input).getTrace();
  }
 else   if (input instanceof IFileEditorInput) {
    fFile=((IFileEditorInput)input).getFile();
    if (fFile == null) {
      throw new PartInitException(""String_Node_Str"" + input);
    }
    TmfExperiment currentExperiment=TmfExperiment.getCurrentExperiment();
    if ((currentExperiment != null) && fFile.equals(currentExperiment.getBookmarksFile())) {
      fTrace=currentExperiment;
      super.setSite(site);
      super.setInput(input);
      return;
    }
    try {
      String traceTypeId=fFile.getPersistentProperty(TmfTraceElement.TRACETYPE);
      if (traceTypeId == null) {
        throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
      }
      if (traceTypeId.equals(TmfExperiment.class.getCanonicalName())) {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        if (project == null) {
          throw new PartInitException(Messages.OpenExperimentHandler_NoTraceType);
        }
        for (        ITmfProjectModelElement projectElement : project.getExperimentsFolder().getChildren()) {
          String traceName=fFile.getParent().getName();
          if (projectElement.getName().equals(traceName)) {
            TmfExperimentElement experimentElement=(TmfExperimentElement)projectElement;
            List<TmfTraceElement> traceEntries=experimentElement.getTraces();
            int nbTraces=traceEntries.size();
            int cacheSize=Integer.MAX_VALUE;
            ITmfTrace<?>[] traces=new ITmfTrace[nbTraces];
            for (int i=0; i < nbTraces; i++) {
              TmfTraceElement traceElement=traceEntries.get(i);
              ITmfTrace trace=traceElement.instantiateTrace();
              ITmfEvent traceEvent=traceElement.instantiateEvent();
              if ((trace == null) || (traceEvent == null)) {
                for (int j=0; j < i; j++) {
                  traces[j].dispose();
                }
                throw new PartInitException(Messages.OpenExperimentHandler_NoTraceType);
              }
              try {
                trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass());
              }
 catch (              FileNotFoundException e) {
              }
              trace.setResource(traceElement.getResource());
              cacheSize=Math.min(cacheSize,trace.getIndexPageSize());
              traces[i]=trace;
            }
            TmfExperiment experiment=new TmfExperiment(TmfEvent.class,experimentElement.getName(),traces,cacheSize);
            experiment.setBookmarksFile(fFile);
            fTrace=experiment;
            TmfExperiment.setCurrentExperiment(experiment);
            TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
            break;
          }
        }
      }
 else       if (traceTypeId.equals(TmfTrace.class.getCanonicalName())) {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        for (        ITmfProjectModelElement projectElement : project.getTracesFolder().getChildren()) {
          String traceName=fFile.getParent().getName();
          if (projectElement.getName().equals(traceName)) {
            TmfTraceElement traceElement=(TmfTraceElement)projectElement;
            ITmfTrace trace=traceElement.instantiateTrace();
            ITmfEvent traceEvent=traceElement.instantiateEvent();
            if ((trace == null) || (traceEvent == null)) {
              throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
            }
            try {
              trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass());
            }
 catch (            FileNotFoundException e) {
            }
            trace.setResource(traceElement.getResource());
            ITmfTrace[] traces=new ITmfTrace[]{trace};
            TmfExperiment experiment=new TmfExperiment(traceEvent.getClass(),traceElement.getName(),traces,trace.getIndexPageSize());
            experiment.setBookmarksFile(fFile);
            fTrace=experiment;
            TmfExperiment.setCurrentExperiment(experiment);
            TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
            break;
          }
        }
      }
 else {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        for (        ITmfProjectModelElement projectElement : project.getTracesFolder().getChildren()) {
          if (projectElement.getResource().equals(fFile)) {
            TmfTraceElement traceElement=(TmfTraceElement)projectElement;
            ITmfTrace trace=traceElement.instantiateTrace();
            ITmfEvent traceEvent=traceElement.instantiateEvent();
            if ((trace == null) || (traceEvent == null)) {
              throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
            }
            try {
              trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass());
              trace.indexTrace(false);
            }
 catch (            FileNotFoundException e) {
            }
            if (trace instanceof TmfTrace) {
              ((TmfTrace)trace).setResource(traceElement.getResource());
            }
            ITmfTrace[] traces=new ITmfTrace[]{trace};
            TmfExperiment experiment=new TmfExperiment(traceEvent.getClass(),traceElement.getName(),traces,trace.getIndexPageSize());
            experiment.setBookmarksFile(fFile);
            fTrace=experiment;
            TmfExperiment.setCurrentExperiment(experiment);
            TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
            break;
          }
        }
      }
    }
 catch (    InvalidRegistryObjectException e) {
      e.printStackTrace();
    }
catch (    PartInitException e) {
      throw e;
    }
catch (    CoreException e) {
      e.printStackTrace();
    }
    input=new TmfEditorInput(fFile,fTrace);
  }
 else {
    throw new PartInitException(""String_Node_Str"" + input.getClass());
  }
  if (fTrace == null) {
    throw new PartInitException(""String_Node_Str"" + fFile.getName());
  }
  super.setSite(site);
  super.setInput(input);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void init(IEditorSite site,IEditorInput input) throws PartInitException {
  fEditorAreaVisible=site.getPage().isEditorAreaVisible();
  if (input instanceof TmfEditorInput) {
    fFile=((TmfEditorInput)input).getFile();
    fTrace=((TmfEditorInput)input).getTrace();
  }
 else   if (input instanceof IFileEditorInput) {
    fFile=((IFileEditorInput)input).getFile();
    if (fFile == null) {
      throw new PartInitException(""String_Node_Str"" + input);
    }
    TmfExperiment currentExperiment=TmfExperiment.getCurrentExperiment();
    if ((currentExperiment != null) && fFile.equals(currentExperiment.getBookmarksFile())) {
      fTrace=currentExperiment;
      super.setSite(site);
      super.setInput(input);
      return;
    }
    try {
      String traceTypeId=fFile.getPersistentProperty(TmfTraceElement.TRACETYPE);
      if (traceTypeId == null) {
        throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
      }
      if (traceTypeId.equals(TmfExperiment.class.getCanonicalName())) {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        if (project == null) {
          throw new PartInitException(Messages.OpenExperimentHandler_NoTraceType);
        }
        for (        ITmfProjectModelElement projectElement : project.getExperimentsFolder().getChildren()) {
          String traceName=fFile.getParent().getName();
          if (projectElement.getName().equals(traceName)) {
            TmfExperimentElement experimentElement=(TmfExperimentElement)projectElement;
            List<TmfTraceElement> traceEntries=experimentElement.getTraces();
            int nbTraces=traceEntries.size();
            int cacheSize=Integer.MAX_VALUE;
            ITmfTrace<?>[] traces=new ITmfTrace[nbTraces];
            for (int i=0; i < nbTraces; i++) {
              TmfTraceElement traceElement=traceEntries.get(i);
              ITmfTrace trace=traceElement.instantiateTrace();
              ITmfEvent traceEvent=traceElement.instantiateEvent();
              if ((trace == null) || (traceEvent == null)) {
                for (int j=0; j < i; j++) {
                  traces[j].dispose();
                }
                throw new PartInitException(Messages.OpenExperimentHandler_NoTraceType);
              }
              try {
                trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass());
              }
 catch (              FileNotFoundException e) {
              }
              trace.setResource(traceElement.getResource());
              cacheSize=Math.min(cacheSize,trace.getIndexPageSize());
              traces[i]=trace;
            }
            TmfExperiment experiment=new TmfExperiment(ITmfEvent.class,experimentElement.getName(),traces,cacheSize);
            experiment.setBookmarksFile(fFile);
            fTrace=experiment;
            TmfExperiment.setCurrentExperiment(experiment);
            TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
            break;
          }
        }
      }
 else       if (traceTypeId.equals(TmfTrace.class.getCanonicalName())) {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        for (        ITmfProjectModelElement projectElement : project.getTracesFolder().getChildren()) {
          String traceName=fFile.getParent().getName();
          if (projectElement.getName().equals(traceName)) {
            TmfTraceElement traceElement=(TmfTraceElement)projectElement;
            ITmfTrace trace=traceElement.instantiateTrace();
            ITmfEvent traceEvent=traceElement.instantiateEvent();
            if ((trace == null) || (traceEvent == null)) {
              throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
            }
            try {
              trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass());
            }
 catch (            FileNotFoundException e) {
            }
            trace.setResource(traceElement.getResource());
            ITmfTrace[] traces=new ITmfTrace[]{trace};
            TmfExperiment experiment=new TmfExperiment(traceEvent.getClass(),traceElement.getName(),traces,trace.getIndexPageSize());
            experiment.setBookmarksFile(fFile);
            fTrace=experiment;
            TmfExperiment.setCurrentExperiment(experiment);
            TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
            break;
          }
        }
      }
 else {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        for (        ITmfProjectModelElement projectElement : project.getTracesFolder().getChildren()) {
          if (projectElement.getResource().equals(fFile)) {
            TmfTraceElement traceElement=(TmfTraceElement)projectElement;
            ITmfTrace trace=traceElement.instantiateTrace();
            ITmfEvent traceEvent=traceElement.instantiateEvent();
            if ((trace == null) || (traceEvent == null)) {
              throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
            }
            try {
              trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass());
              trace.indexTrace(false);
            }
 catch (            FileNotFoundException e) {
            }
            if (trace instanceof TmfTrace) {
              ((TmfTrace)trace).setResource(traceElement.getResource());
            }
            ITmfTrace[] traces=new ITmfTrace[]{trace};
            TmfExperiment experiment=new TmfExperiment(traceEvent.getClass(),traceElement.getName(),traces,trace.getIndexPageSize());
            experiment.setBookmarksFile(fFile);
            fTrace=experiment;
            TmfExperiment.setCurrentExperiment(experiment);
            TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
            break;
          }
        }
      }
    }
 catch (    InvalidRegistryObjectException e) {
      e.printStackTrace();
    }
catch (    PartInitException e) {
      throw e;
    }
catch (    CoreException e) {
      e.printStackTrace();
    }
    input=new TmfEditorInput(fFile,fTrace);
  }
 else {
    throw new PartInitException(""String_Node_Str"" + input.getClass());
  }
  if (fTrace == null) {
    throw new PartInitException(""String_Node_Str"" + fFile.getName());
  }
  super.setSite(site);
  super.setInput(input);
}",0.9999277717587576
92468,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void init(IEditorSite site,IEditorInput input) throws PartInitException {
  if (input instanceof TmfEditorInput) {
    fFile=((TmfEditorInput)input).getFile();
    fTrace=((TmfEditorInput)input).getTrace();
    input=new FileEditorInput(fFile);
  }
 else   if (input instanceof IFileEditorInput) {
    fFile=((IFileEditorInput)input).getFile();
    if (fFile == null) {
      throw new PartInitException(""String_Node_Str"" + input);
    }
    try {
      String traceTypeId=fFile.getPersistentProperty(TmfTraceElement.TRACETYPE);
      if (traceTypeId == null) {
        throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
      }
      if (traceTypeId.equals(TmfExperiment.class.getCanonicalName())) {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        if (project == null) {
          throw new PartInitException(Messages.OpenExperimentHandler_NoTraceType);
        }
        for (        ITmfProjectModelElement projectElement : project.getExperimentsFolder().getChildren()) {
          String traceName=fFile.getParent().getName();
          if (projectElement.getName().equals(traceName)) {
            TmfExperimentElement experimentElement=(TmfExperimentElement)projectElement;
            List<TmfTraceElement> traceEntries=experimentElement.getTraces();
            int nbTraces=traceEntries.size();
            int cacheSize=Integer.MAX_VALUE;
            ITmfTrace<?>[] traces=new ITmfTrace[nbTraces];
            for (int i=0; i < nbTraces; i++) {
              TmfTraceElement traceElement=traceEntries.get(i);
              ITmfTrace trace=traceElement.instantiateTrace();
              ITmfEvent traceEvent=traceElement.instantiateEvent();
              if ((trace == null) || (traceEvent == null)) {
                for (int j=0; j < i; j++) {
                  traces[j].dispose();
                }
                throw new PartInitException(Messages.OpenExperimentHandler_NoTraceType);
              }
              try {
                trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass());
              }
 catch (              FileNotFoundException e) {
              }
              trace.setResource(traceElement.getResource());
              cacheSize=Math.min(cacheSize,trace.getIndexPageSize());
              traces[i]=trace;
            }
            TmfExperiment experiment=new TmfExperiment(TmfEvent.class,experimentElement.getName(),traces,cacheSize);
            experiment.setBookmarksFile(fFile);
            fTrace=experiment;
            experiment.initTrace(null,null,null);
            experiment.indexTrace(true);
            break;
          }
        }
      }
 else       if (traceTypeId.equals(TmfTrace.class.getCanonicalName())) {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        for (        ITmfProjectModelElement projectElement : project.getTracesFolder().getChildren()) {
          String traceName=fFile.getParent().getName();
          if (projectElement.getName().equals(traceName)) {
            TmfTraceElement traceElement=(TmfTraceElement)projectElement;
            ITmfTrace trace=traceElement.instantiateTrace();
            ITmfEvent traceEvent=traceElement.instantiateEvent();
            if ((trace == null) || (traceEvent == null)) {
              throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
            }
            try {
              trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass());
              trace.indexTrace(false);
            }
 catch (            FileNotFoundException e) {
            }
            trace.setResource(traceElement.getResource());
            fTrace=trace;
            break;
          }
        }
      }
 else {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        for (        ITmfProjectModelElement projectElement : project.getTracesFolder().getChildren()) {
          if (projectElement.getResource().equals(fFile)) {
            TmfTraceElement traceElement=(TmfTraceElement)projectElement;
            ITmfTrace trace=traceElement.instantiateTrace();
            ITmfEvent traceEvent=traceElement.instantiateEvent();
            if ((trace == null) || (traceEvent == null)) {
              throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
            }
            try {
              trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass());
              trace.indexTrace(false);
            }
 catch (            FileNotFoundException e) {
            }
            if (trace instanceof TmfTrace) {
              ((TmfTrace)trace).setResource(traceElement.getResource());
            }
            fTrace=trace;
            break;
          }
        }
      }
    }
 catch (    InvalidRegistryObjectException e) {
      e.printStackTrace();
    }
catch (    PartInitException e) {
      throw e;
    }
catch (    CoreException e) {
      e.printStackTrace();
    }
  }
 else {
    throw new PartInitException(""String_Node_Str"" + input.getClass());
  }
  if (fTrace == null) {
    throw new PartInitException(""String_Node_Str"" + fFile.getName());
  }
  super.setSite(site);
  super.setInput(input);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void init(IEditorSite site,IEditorInput input) throws PartInitException {
  if (input instanceof TmfEditorInput) {
    fFile=((TmfEditorInput)input).getFile();
    fTrace=((TmfEditorInput)input).getTrace();
    input=new FileEditorInput(fFile);
  }
 else   if (input instanceof IFileEditorInput) {
    fFile=((IFileEditorInput)input).getFile();
    if (fFile == null) {
      throw new PartInitException(""String_Node_Str"" + input);
    }
    try {
      String traceTypeId=fFile.getPersistentProperty(TmfTraceElement.TRACETYPE);
      if (traceTypeId == null) {
        throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
      }
      if (traceTypeId.equals(TmfExperiment.class.getCanonicalName())) {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        if (project == null) {
          throw new PartInitException(Messages.OpenExperimentHandler_NoTraceType);
        }
        for (        ITmfProjectModelElement projectElement : project.getExperimentsFolder().getChildren()) {
          String traceName=fFile.getParent().getName();
          if (projectElement.getName().equals(traceName)) {
            TmfExperimentElement experimentElement=(TmfExperimentElement)projectElement;
            List<TmfTraceElement> traceEntries=experimentElement.getTraces();
            int nbTraces=traceEntries.size();
            int cacheSize=Integer.MAX_VALUE;
            ITmfTrace<?>[] traces=new ITmfTrace[nbTraces];
            for (int i=0; i < nbTraces; i++) {
              TmfTraceElement traceElement=traceEntries.get(i);
              ITmfTrace trace=traceElement.instantiateTrace();
              ITmfEvent traceEvent=traceElement.instantiateEvent();
              if ((trace == null) || (traceEvent == null)) {
                for (int j=0; j < i; j++) {
                  traces[j].dispose();
                }
                throw new PartInitException(Messages.OpenExperimentHandler_NoTraceType);
              }
              try {
                trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass());
              }
 catch (              FileNotFoundException e) {
              }
              trace.setResource(traceElement.getResource());
              cacheSize=Math.min(cacheSize,trace.getIndexPageSize());
              traces[i]=trace;
            }
            TmfExperiment experiment=new TmfExperiment(ITmfEvent.class,experimentElement.getName(),traces,cacheSize);
            experiment.setBookmarksFile(fFile);
            fTrace=experiment;
            experiment.initTrace(null,null,null);
            experiment.indexTrace(true);
            break;
          }
        }
      }
 else       if (traceTypeId.equals(TmfTrace.class.getCanonicalName())) {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        for (        ITmfProjectModelElement projectElement : project.getTracesFolder().getChildren()) {
          String traceName=fFile.getParent().getName();
          if (projectElement.getName().equals(traceName)) {
            TmfTraceElement traceElement=(TmfTraceElement)projectElement;
            ITmfTrace trace=traceElement.instantiateTrace();
            ITmfEvent traceEvent=traceElement.instantiateEvent();
            if ((trace == null) || (traceEvent == null)) {
              throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
            }
            try {
              trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass());
              trace.indexTrace(false);
            }
 catch (            FileNotFoundException e) {
            }
            trace.setResource(traceElement.getResource());
            fTrace=trace;
            break;
          }
        }
      }
 else {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        for (        ITmfProjectModelElement projectElement : project.getTracesFolder().getChildren()) {
          if (projectElement.getResource().equals(fFile)) {
            TmfTraceElement traceElement=(TmfTraceElement)projectElement;
            ITmfTrace trace=traceElement.instantiateTrace();
            ITmfEvent traceEvent=traceElement.instantiateEvent();
            if ((trace == null) || (traceEvent == null)) {
              throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
            }
            try {
              trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass());
              trace.indexTrace(false);
            }
 catch (            FileNotFoundException e) {
            }
            if (trace instanceof TmfTrace) {
              ((TmfTrace)trace).setResource(traceElement.getResource());
            }
            fTrace=trace;
            break;
          }
        }
      }
    }
 catch (    InvalidRegistryObjectException e) {
      e.printStackTrace();
    }
catch (    PartInitException e) {
      throw e;
    }
catch (    CoreException e) {
      e.printStackTrace();
    }
  }
 else {
    throw new PartInitException(""String_Node_Str"" + input.getClass());
  }
  if (fTrace == null) {
    throw new PartInitException(""String_Node_Str"" + fFile.getName());
  }
  super.setSite(site);
  super.setInput(input);
}",0.9999132471588444
92469,"@SuppressWarnings(""String_Node_Str"") @TmfSignalHandler public void traceParserUpdated(TmfTraceParserUpdatedSignal signal){
  if (signal.getTraceResource().equals(fFile)) {
    broadcast(new TmfTraceClosedSignal(this,fTrace));
    try {
      String name=fTrace.getName();
      fTrace=null;
      String traceTypeId=fFile.getPersistentProperty(TmfTraceElement.TRACETYPE);
      if (traceTypeId != null) {
        for (        IConfigurationElement ce : TmfTraceType.getTypeElements()) {
          if (traceTypeId.equals(ce.getAttribute(TmfTraceType.ID_ATTR))) {
            fTrace=(ITmfTrace<?>)ce.createExecutableExtension(TmfTraceType.TRACE_TYPE_ATTR);
            TmfEvent event=(TmfEvent)ce.createExecutableExtension(TmfTraceType.EVENT_TYPE_ATTR);
            String path=fFile.getLocationURI().getPath();
            fTrace.initTrace(name,path,event.getClass());
            fTrace.indexTrace(false);
            break;
          }
        }
      }
    }
 catch (    InvalidRegistryObjectException e) {
      e.printStackTrace();
    }
catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    CoreException e) {
      e.printStackTrace();
    }
    fEventsTable.dispose();
    if (fTrace != null) {
      fEventsTable=createEventsTable(fParent,fTrace.getIndexPageSize());
      fEventsTable.setTrace(fTrace,true);
      broadcast(new TmfTraceOpenedSignal(this,fTrace,fFile,fEventsTable));
    }
 else {
      fEventsTable=new TmfEventsTable(fParent,0);
    }
    fParent.layout();
  }
}","@SuppressWarnings(""String_Node_Str"") @TmfSignalHandler public void traceParserUpdated(TmfTraceParserUpdatedSignal signal){
  if (signal.getTraceResource().equals(fFile)) {
    broadcast(new TmfTraceClosedSignal(this,fTrace));
    try {
      String name=fTrace.getName();
      fTrace=null;
      String traceTypeId=fFile.getPersistentProperty(TmfTraceElement.TRACETYPE);
      if (traceTypeId != null) {
        for (        IConfigurationElement ce : TmfTraceType.getTypeElements()) {
          if (traceTypeId.equals(ce.getAttribute(TmfTraceType.ID_ATTR))) {
            fTrace=(ITmfTrace<?>)ce.createExecutableExtension(TmfTraceType.TRACE_TYPE_ATTR);
            ITmfEvent event=(TmfEvent)ce.createExecutableExtension(TmfTraceType.EVENT_TYPE_ATTR);
            String path=fFile.getLocationURI().getPath();
            fTrace.initTrace(name,path,event.getClass());
            fTrace.indexTrace(false);
            break;
          }
        }
      }
    }
 catch (    InvalidRegistryObjectException e) {
      e.printStackTrace();
    }
catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    CoreException e) {
      e.printStackTrace();
    }
    fEventsTable.dispose();
    if (fTrace != null) {
      fEventsTable=createEventsTable(fParent,fTrace.getIndexPageSize());
      fEventsTable.setTrace(fTrace,true);
      broadcast(new TmfTraceOpenedSignal(this,fTrace,fFile,fEventsTable));
    }
 else {
      fEventsTable=new TmfEventsTable(fParent,0);
    }
    fParent.layout();
  }
}",0.999670510708402
92470,"@SuppressWarnings(""String_Node_Str"") @TmfSignalHandler public void currentTimeUpdated(final TmfTimeSynchSignal signal){
  if ((signal.getSource() != fTable) && (fTrace != null) && (!fTable.isDisposed())) {
    final TmfDataRequest<TmfEvent> subRequest=new TmfDataRequest<TmfEvent>(TmfEvent.class,0,1,ExecutionType.FOREGROUND){
      TmfTimestamp ts=new TmfTimestamp(signal.getCurrentTime());
      @Override public void handleData(      TmfEvent event){
        super.handleData(event);
      }
      @Override public void handleCompleted(){
        super.handleCompleted();
        if (fTrace == null) {
          return;
        }
        ITmfTimestamp timestamp=ts;
        if (timestamp.compareTo(fTrace.getStartTime(),true) == -1) {
          timestamp=fTrace.getStartTime();
        }
        if (timestamp.compareTo(fTrace.getEndTime(),true) == 1) {
          timestamp=fTrace.getEndTime();
        }
        final long rank=fTrace.getRank(timestamp);
        fSelectedRank=rank;
        fTable.getDisplay().asyncExec(new Runnable(){
          @Override public void run(){
            if (fTable.isDisposed()) {
              return;
            }
            int index=(int)rank;
            if (fTable.isDisposed()) {
              return;
            }
            if (fTable.getData(Key.FILTER_OBJ) != null) {
              index=fCache.getFilteredEventIndex(rank) + 1;
            }
            fTable.setSelection(index + 1);
            fRawViewer.selectAndReveal(rank);
          }
        }
);
      }
    }
;
    ((ITmfDataProvider<TmfEvent>)fTrace).sendRequest(subRequest);
  }
}","@SuppressWarnings(""String_Node_Str"") @TmfSignalHandler public void currentTimeUpdated(final TmfTimeSynchSignal signal){
  if ((signal.getSource() != fTable) && (fTrace != null) && (!fTable.isDisposed())) {
    final TmfDataRequest<ITmfEvent> subRequest=new TmfDataRequest<ITmfEvent>(ITmfEvent.class,0,1,ExecutionType.FOREGROUND){
      TmfTimestamp ts=new TmfTimestamp(signal.getCurrentTime());
      @Override public void handleData(      ITmfEvent event){
        super.handleData(event);
      }
      @Override public void handleCompleted(){
        super.handleCompleted();
        if (fTrace == null) {
          return;
        }
        ITmfTimestamp timestamp=ts;
        if (timestamp.compareTo(fTrace.getStartTime(),true) == -1) {
          timestamp=fTrace.getStartTime();
        }
        if (timestamp.compareTo(fTrace.getEndTime(),true) == 1) {
          timestamp=fTrace.getEndTime();
        }
        final long rank=fTrace.getRank(timestamp);
        fSelectedRank=rank;
        fTable.getDisplay().asyncExec(new Runnable(){
          @Override public void run(){
            if (fTable.isDisposed()) {
              return;
            }
            int index=(int)rank;
            if (fTable.isDisposed()) {
              return;
            }
            if (fTable.getData(Key.FILTER_OBJ) != null) {
              index=fCache.getFilteredEventIndex(rank) + 1;
            }
            fTable.setSelection(index + 1);
            fRawViewer.selectAndReveal(rank);
          }
        }
);
      }
    }
;
    ((ITmfDataProvider<ITmfEvent>)fTrace).sendRequest(subRequest);
  }
}",0.9984370115661144
92471,"@Override public void handleData(TmfEvent event){
  super.handleData(event);
}","@Override public void handleData(ITmfEvent event){
  super.handleData(event);
}",0.9936305732484076
92472,"@SuppressWarnings(""String_Node_Str"") @TmfSignalHandler public void experimentSelected(TmfExperimentSelectedSignal<TmfEvent> signal){
  TmfExperiment<TmfEvent> exp=(TmfExperiment<TmfEvent>)signal.getExperiment();
  if (!exp.equals(fExperiment)) {
    fExperiment=exp;
    setPartName(fTitlePrefix + ""String_Node_Str"" + fExperiment.getName());
    if (fEventsTable != null) {
      fEventsTable.dispose();
    }
    fEventsTable=createEventsTable(fParent);
    fEventsTable.setTrace(fExperiment,false);
    fEventsTable.refreshBookmarks(fExperiment.getBookmarksFile());
    fParent.layout();
  }
}","@SuppressWarnings(""String_Node_Str"") @TmfSignalHandler public void experimentSelected(TmfExperimentSelectedSignal<ITmfEvent> signal){
  TmfExperiment<ITmfEvent> exp=(TmfExperiment<ITmfEvent>)signal.getExperiment();
  if (!exp.equals(fExperiment)) {
    fExperiment=exp;
    setPartName(fTitlePrefix + ""String_Node_Str"" + fExperiment.getName());
    if (fEventsTable != null) {
      fEventsTable.dispose();
    }
    fEventsTable=createEventsTable(fParent);
    fEventsTable.setTrace(fExperiment,false);
    fEventsTable.refreshBookmarks(fExperiment.getBookmarksFile());
    fParent.layout();
  }
}",0.997485331098072
92473,"@SuppressWarnings(""String_Node_Str"") @TmfSignalHandler public void experimentDisposed(TmfExperimentDisposedSignal<TmfEvent> signal){
  TmfExperiment<TmfEvent> experiment=(TmfExperiment<TmfEvent>)signal.getExperiment();
  if (experiment.equals(fExperiment)) {
    fEventsTable.setTrace(null,false);
    TmfUiPlugin.getDefault().getWorkbench().getWorkbenchWindows()[0].getShell().getDisplay().syncExec(new Runnable(){
      @Override public void run(){
        setPartName(fTitlePrefix);
      }
    }
);
  }
}","@SuppressWarnings(""String_Node_Str"") @TmfSignalHandler public void experimentDisposed(TmfExperimentDisposedSignal<ITmfEvent> signal){
  TmfExperiment<ITmfEvent> experiment=(TmfExperiment<ITmfEvent>)signal.getExperiment();
  if (experiment.equals(fExperiment)) {
    fEventsTable.setTrace(null,false);
    TmfUiPlugin.getDefault().getWorkbench().getWorkbenchWindows()[0].getShell().getDisplay().syncExec(new Runnable(){
      @Override public void run(){
        setPartName(fTitlePrefix);
      }
    }
);
  }
}",0.9970559371933267
92474,"@Override @SuppressWarnings(""String_Node_Str"") public void createPartControl(Composite parent){
  fParent=parent;
  fTitlePrefix=getTitle();
  TmfExperiment<TmfEvent> experiment=(TmfExperiment<TmfEvent>)TmfExperiment.getCurrentExperiment();
  if (experiment != null) {
    experimentSelected(new TmfExperimentSelectedSignal<TmfEvent>(this,experiment));
  }
 else {
    fEventsTable=createEventsTable(parent);
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public void createPartControl(Composite parent){
  fParent=parent;
  fTitlePrefix=getTitle();
  TmfExperiment<ITmfEvent> experiment=(TmfExperiment<ITmfEvent>)TmfExperiment.getCurrentExperiment();
  if (experiment != null) {
    experimentSelected(new TmfExperimentSelectedSignal<ITmfEvent>(this,experiment));
  }
 else {
    fEventsTable=createEventsTable(parent);
  }
}",0.9963898916967509
92475,"@Override public void run(){
  tsfviewer.setTimeBounds(range.getStartTime().getValue(),range.getEndTime().getValue());
}","@Override public void run(){
  if ((tsfviewer != null) && (!tsfviewer.getControl().isDisposed())) {
    tsfviewer.setTimeBounds(range.getStartTime().getValue(),range.getEndTime().getValue());
  }
}",0.7570977917981072
92476,"@TmfSignalHandler public void experimentUpdated(TmfExperimentUpdatedSignal signal){
  if (signal.getExperiment().equals(TmfExperiment.getCurrentExperiment())) {
    final TmfTimeRange range=signal.getExperiment().getTimeRange();
    if (range != TmfTimeRange.NULL_RANGE) {
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          tsfviewer.setTimeBounds(range.getStartTime().getValue(),range.getEndTime().getValue());
        }
      }
);
    }
  }
}","@TmfSignalHandler public void experimentUpdated(TmfExperimentUpdatedSignal signal){
  if (signal.getExperiment().equals(TmfExperiment.getCurrentExperiment())) {
    final TmfTimeRange range=signal.getExperiment().getTimeRange();
    if (range != TmfTimeRange.NULL_RANGE) {
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          if ((tsfviewer != null) && (!tsfviewer.getControl().isDisposed())) {
            tsfviewer.setTimeBounds(range.getStartTime().getValue(),range.getEndTime().getValue());
          }
        }
      }
);
    }
  }
}",0.9138090824837812
92477,"@Override public void run(){
  tsfviewer.setTimeBounds(range.getStartTime().getValue(),range.getEndTime().getValue());
}","@Override public void run(){
  if ((tsfviewer != null) && (!tsfviewer.getControl().isDisposed())) {
    tsfviewer.setTimeBounds(range.getStartTime().getValue(),range.getEndTime().getValue());
  }
}",0.7570977917981072
92478,"@TmfSignalHandler public void experimentUpdated(TmfExperimentUpdatedSignal signal){
  if (signal.getExperiment().equals(TmfExperiment.getCurrentExperiment())) {
    final TmfTimeRange range=signal.getExperiment().getTimeRange();
    if (range != TmfTimeRange.NULL_RANGE) {
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          tsfviewer.setTimeBounds(range.getStartTime().getValue(),range.getEndTime().getValue());
        }
      }
);
    }
  }
}","@TmfSignalHandler public void experimentUpdated(TmfExperimentUpdatedSignal signal){
  if (signal.getExperiment().equals(TmfExperiment.getCurrentExperiment())) {
    final TmfTimeRange range=signal.getExperiment().getTimeRange();
    if (range != TmfTimeRange.NULL_RANGE) {
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          if ((tsfviewer != null) && (!tsfviewer.getControl().isDisposed())) {
            tsfviewer.setTimeBounds(range.getStartTime().getValue(),range.getEndTime().getValue());
          }
        }
      }
);
    }
  }
}",0.9138090824837812
92479,"@Override public void setTimeBounds(long beginTime,long endTime){
  _beginTime=beginTime;
  _endTime=endTime;
  _time0_=beginTime;
  _time1_=endTime;
  _stateCtrl.adjustScrolls();
  _stateCtrl.redraw();
  _timeScaleCtrl.redraw();
}","@Override public void setTimeBounds(long beginTime,long endTime){
  _beginTime=beginTime;
  _endTime=endTime;
  _time0_=beginTime;
  _time1_=endTime;
  _stateCtrl.adjustScrolls();
}",0.8786407766990292
92480,"/** 
 * Run the void goToLastEvent() method test.
 * @throws CTFReaderException
 */
@Test public void testGoToLastEvent() throws CTFReaderException {
  fixture.goToLastEvent();
  long ts1=getTimestamp();
  long ts2=fixture.getEndTime();
  assertTrue(ts1 == ts2);
}","/** 
 * Run the void goToLastEvent() method test.
 * @throws CTFReaderException
 */
@Test public void testGoToLastEvent() throws CTFReaderException {
  fixture.goToLastEvent();
  long ts1=getTimestamp();
  long ts2=fixture.getEndTime();
  assertTrue(ts1 <= ts2);
}",0.9962121212121212
92481,"/** 
 * Run the CTFClock getClock() method test.
 */
@Test public void testGetClock_1(){
  CTFClock result=fixture.getClock();
  assertNull(result);
}","/** 
 * Run the CTFClock getClock() method test.
 */
@Test public void testGetClock_1(){
  CTFClock result=fixture.getClock();
  assertNotNull(result);
}",0.99009900990099
92482,"/** 
 * Run the void addStream(Stream) method test.
 * @throws ParseException
 * @throws CTFReaderException 
 */
@Test public void testAddStream() throws ParseException, CTFReaderException {
  Stream stream=new Stream(TestParams.createTrace());
  stream.setId(1L);
  fixture.addStream(stream);
}","/** 
 * Run the void addStream(Stream) method test.
 * @throws ParseException
 * @throws CTFReaderException
 */
@Test public void testAddStream() throws ParseException, CTFReaderException {
  Stream stream=new Stream(TestParams.createTrace());
  stream.setId(1L);
  fixture.addStream(stream);
}",0.99830220713073
92483,"/** 
 * Run the boolean isString() method test.
 */
@Test public void testIsString_ownDefs(){
  StringDefinition[] defs=createDefs();
  fixture.setDefinitions(defs);
  boolean result=fixture.isString();
  assertFalse(result);
}","/** 
 * Run the boolean isString() method test.
 */
@Test public void testIsString_ownDefs(){
  boolean result=stringArrayFixture.isString();
  assertFalse(result);
}",0.7837150127226463
92484,"/** 
 * Run the boolean isString() method test.
 */
@Test public void testIsString_emptyDef(){
  fixture.setDefinitions(new Definition[]{});
  boolean result=fixture.isString();
  assertFalse(result);
}","/** 
 * Run the boolean isString() method test.
 */
@Test public void testIsString_emptyDef(){
  charArrayFixture.setDefinitions(new Definition[]{});
  boolean result=charArrayFixture.isString();
  assertTrue(result);
}",0.9311163895486936
92485,"/** 
 * Run the Definition getElem(int) method test.
 */
@Test public void testGetElem_withDefs(){
  Definition defs[]=createDefs();
  fixture.setDefinitions(defs);
  int j=1;
  Definition result=fixture.getElem(j);
  assertNotNull(result);
}","/** 
 * Run the Definition getElem(int) method test.
 */
@Test public void testGetElem_withDefs(){
  Definition defs[]=createDefs();
  charArrayFixture.setDefinitions(defs);
  int j=1;
  Definition result=charArrayFixture.getElem(j);
  assertNotNull(result);
}",0.9561752988047808
92486,"/** 
 * Run the void read(BitBuffer) method test.
 */
@Test public void testRead_noDefs(){
  BitBuffer input=new BitBuffer(ByteBuffer.allocateDirect(128));
  fixture.read(input);
}","/** 
 * Run the void read(BitBuffer) method test.
 */
@Test public void testRead_noDefs(){
  BitBuffer input=new BitBuffer(ByteBuffer.allocateDirect(128));
  charArrayFixture.read(input);
}",0.9701897018970188
92487,"/** 
 * Run the ArrayDefinition(ArrayDeclaration,DefinitionScope,String) constructor test.
 */
@Test public void testArrayDefinition_baseDeclaration(){
  ArrayDeclaration declaration=fixture.getDeclaration();
  String fieldName=""String_Node_Str"";
  ArrayDefinition result=new ArrayDefinition(declaration,this.trace,fieldName);
  assertNotNull(result);
}","/** 
 * Run the ArrayDefinition(ArrayDeclaration,DefinitionScope,String) constructor test.
 */
@Test public void testArrayDefinition_baseDeclaration(){
  ArrayDeclaration declaration=charArrayFixture.getDeclaration();
  String fieldName=""String_Node_Str"";
  ArrayDefinition result=new ArrayDefinition(declaration,this.trace,fieldName);
  assertNotNull(result);
}",0.9846153846153848
92488,"/** 
 * Run the boolean isString() method test.
 */
@Test public void testIsString_complex(){
  final IntegerDeclaration id=new IntegerDeclaration(8,false,16,ByteOrder.LITTLE_ENDIAN,Encoding.UTF8,null);
  ArrayDeclaration ad=new ArrayDeclaration(0,id);
  ArrayDefinition ownFixture=new ArrayDefinition(ad,this.trace,""String_Node_Str"");
  int size=4;
  IntegerDefinition[] defs=new IntegerDefinition[size];
  for (int i=0; i < size; i++) {
    String content=""String_Node_Str"" + i;
    defs[i]=new IntegerDefinition(new IntegerDeclaration(8,false,16,ByteOrder.LITTLE_ENDIAN,Encoding.UTF8,content),null,content);
    defs[i].setValue(i);
  }
  ownFixture.setDefinitions(defs);
  boolean result=ownFixture.isString();
  assertTrue(result);
}","/** 
 * Run the boolean isString() method test.
 */
@Test public void testIsString_complex(){
  final IntegerDeclaration id=new IntegerDeclaration(8,false,16,ByteOrder.LITTLE_ENDIAN,Encoding.UTF8,null);
  ArrayDeclaration ad=new ArrayDeclaration(0,id);
  ArrayDefinition ownFixture=new ArrayDefinition(ad,this.trace,""String_Node_Str"");
  int size=4;
  int bits=8;
  IntegerDefinition[] defs=createIntDefs(size,bits);
  ownFixture.setDefinitions(defs);
  boolean result=ownFixture.isString();
  assertTrue(result);
}",0.6161213088587391
92489,"/** 
 * Run the String toString() method test.
 */
@Test public void testToString_withDefs(){
  int size=2;
  StringDefinition[] defs=new StringDefinition[size];
  for (int i=0; i < size; i++) {
    defs[i]=new StringDefinition(null,null,(""String_Node_Str"" + i));
  }
  fixture.setDefinitions(defs);
  String result=fixture.toString();
  assertNotNull(result);
}","/** 
 * Run the String toString() method test.
 */
@Test public void testToString_withDefs(){
  String result=charArrayFixture.toString();
  assertNotNull(result);
}",0.5882352941176471
92490,"/** 
 * Run the void read(BitBuffer) method test.
 */
@Test public void testRead_withDefs(){
  fixture.setDefinitions(new Definition[]{});
  BitBuffer input=new BitBuffer(java.nio.ByteBuffer.allocateDirect(128));
  fixture.read(input);
}","/** 
 * Run the void read(BitBuffer) method test.
 */
@Test public void testRead_withDefs(){
  charArrayFixture.setDefinitions(new Definition[]{});
  BitBuffer input=new BitBuffer(java.nio.ByteBuffer.allocateDirect(128));
  charArrayFixture.read(input);
}",0.9552845528455284
92491,"/** 
 * Run the ArrayDeclaration getDeclaration() method test.
 */
@Test public void testGetDeclaration(){
  fixture.setDefinitions(new Definition[]{});
  ArrayDeclaration result=fixture.getDeclaration();
  assertNotNull(result);
}","/** 
 * Run the ArrayDeclaration getDeclaration() method test.
 */
@Test public void testGetDeclaration(){
  charArrayFixture.setDefinitions(new Definition[]{});
  ArrayDeclaration result=charArrayFixture.getDeclaration();
  assertNotNull(result);
}",0.9541666666666668
92492,"/** 
 * Perform pre-test initialization. structDef shouldn't be null after parsing the CTFTraceReader object, so we can ignore the warning.
 * @throws CTFReaderException 
 */
@Before public void setUp() throws CTFReaderException {
  this.trace=TestParams.createTrace();
  CTFTraceReader tr=new CTFTraceReader(this.trace);
  String name=""String_Node_Str"";
  StructDefinition structDef=null;
  boolean foundArray=false;
  while (tr.hasMoreEvents() && !foundArray) {
    tr.advance();
    EventDefinition ed=tr.getCurrentEventDef();
    for (    String key : ed.fields.getDefinitions().keySet()) {
      structDef=ed.fields;
      Definition d=structDef.lookupDefinition(key);
      if (d instanceof ArrayDefinition) {
        foundArray=true;
        name=key;
        break;
      }
    }
  }
  fixture=structDef.lookupArray(name);
}","/** 
 * Perform pre-test initialization. structDef shouldn't be null after parsing the CTFTraceReader object, so we can ignore the warning.
 * @throws CTFReaderException
 */
@Before public void setUp() throws CTFReaderException {
  this.trace=TestParams.createTrace();
  charArrayFixture=createCharArray();
  stringArrayFixture=createStringArray();
  longArrayFixture=createLongArray();
}",0.4639344262295082
92493,"/** 
 * Run the Definition getElem(int) method test.
 */
@Test public void testGetElem_noDefs(){
  int i=0;
  Definition result=fixture.getElem(i);
  assertNotNull(result);
}","/** 
 * Run the Definition getElem(int) method test.
 */
@Test public void testGetElem_noDefs(){
  int i=0;
  Definition result=charArrayFixture.getElem(i);
  assertNotNull(result);
}",0.969187675070028
92494,"@Before public void setUp(){
  fixture=new SequenceDeclaration(""String_Node_Str"",new StringDeclaration());
}","@Before public void setUp(){
  fixture=new SequenceDeclaration(fieldName,new StringDeclaration());
}",0.903846153846154
92495,"/** 
 * Run the SequenceDefinition createDefinition(DefinitionScope,String) method test.
 */
@Test public void testCreateDefinition(){
  IntegerDeclaration id=new IntegerDeclaration(8,false,8,ByteOrder.LITTLE_ENDIAN,Encoding.UTF8,null);
  String fieldName=""String_Node_Str"";
  StructDeclaration structDec=new StructDeclaration(0);
  structDec.addField(fieldName,id);
  StructDefinition structDef=new StructDefinition(structDec,null,""String_Node_Str"");
  long seqLen=10;
  structDef.lookupInteger(fieldName).setValue(seqLen);
  SequenceDefinition result=this.fixture.createDefinition(structDef,fieldName);
  assertNotNull(result);
}","/** 
 * Run the SequenceDefinition createDefinition(DefinitionScope,String) method test.
 */
@Test public void testCreateDefinition(){
  IntegerDeclaration id=new IntegerDeclaration(8,false,8,ByteOrder.LITTLE_ENDIAN,Encoding.UTF8,null);
  StructDeclaration structDec=new StructDeclaration(0);
  structDec.addField(fieldName,id);
  StructDefinition structDef=new StructDefinition(structDec,null,""String_Node_Str"");
  long seqLen=10;
  structDef.lookupInteger(fieldName).setValue(seqLen);
  SequenceDefinition result=this.fixture.createDefinition(structDef,fieldName);
  assertNotNull(result);
}",0.9689542483660132
92496,"/** 
 * Constructs a TraceReader to read a trace.
 * @param trace The trace to read from.
 * @throws CTFReaderException
 */
public CTFTraceReader(CTFTrace trace){
  this.trace=trace;
  createStreamInputReaders();
  populateStreamInputReaderHeap();
  this.startTime=prio.peek().getCurrentEvent().timestamp;
  this.endTime=this.startTime;
  this.index=0;
}","/** 
 * Constructs a TraceReader to read a trace.
 * @param trace The trace to read from.
 * @throws CTFReaderException
 */
public CTFTraceReader(CTFTrace trace){
  this.trace=trace;
  createStreamInputReaders();
  populateStreamInputReaderHeap();
  this.startTime=prio.peek().getCurrentEvent().timestamp;
  this.endTime=this.startTime;
  this.index=0;
  startIndex=new long[prio.size()];
  for (int i=0; i < prio.size(); i++) {
    startIndex[i]=0;
  }
}",0.8751545117428925
92497,"/** 
 * Seeks to a given timestamp It will go to the event just after the timestamp or the timestamp itself. if a if a trace is 10 20 30 40 and you're looking for 19, it'll give you 20, it you want 20, you'll get 20, if you want 21, you'll get 30. You want -inf, you'll get the first element, you want +inf, you'll get the end of the file with no events.
 * @param timestamp the timestamp to seek to
 * @return true if the trace has more events following the timestamp
 */
public boolean seek(long timestamp){
  this.prio.clear();
  index=0;
  for (  StreamInputReader streamInputReader : this.streamInputReaders) {
    long offset=streamInputReader.seek(timestamp);
    if (streamInputReader.getCurrentEvent() != null) {
      this.prio.add(streamInputReader);
      index=Math.max(index,streamInputReader.getPacketReader().getCurrentPacket().indexBegin + offset);
    }
  }
  return hasMoreEvents();
}","/** 
 * Seeks to a given timestamp It will go to the event just after the timestamp or the timestamp itself. if a if a trace is 10 20 30 40 and you're looking for 19, it'll give you 20, it you want 20, you'll get 20, if you want 21, you'll get 30. You want -inf, you'll get the first element, you want +inf, you'll get the end of the file with no events.
 * @param timestamp the timestamp to seek to
 * @return true if the trace has more events following the timestamp
 */
public boolean seek(long timestamp){
  this.prio.clear();
  index=0;
  long offset=0;
  for (  StreamInputReader streamInputReader : this.streamInputReaders) {
    offset+=streamInputReader.seek(timestamp);
  }
  for (  StreamInputReader streamInputReader : this.streamInputReaders) {
    if (streamInputReader.getCurrentEvent() != null) {
      this.prio.add(streamInputReader);
      index=Math.max(index,streamInputReader.getPacketReader().getCurrentPacket().indexBegin + offset);
    }
  }
  return hasMoreEvents();
}",0.9404322614654718
92498,"/** 
 * Go to the next event.
 * @return True if an event was read.
 */
public boolean advance(){
  StreamInputReader top=this.prio.poll();
  if (top == null) {
    return false;
  }
  if (top.readNextEvent()) {
    this.prio.add(top);
    final long topEnd=top.getCurrentEvent().timestamp;
    this.endTime=Math.max(topEnd,this.endTime);
    this.eventCountPerTraceFile[top.getName()]++;
  }
  if (hasMoreEvents()) {
    index++;
    StreamInputPacketReader packetReader=top.getPacketReader();
    if (packetReader.hasMoreEvents() == false) {
      StreamInputPacketIndexEntry currentPacket=packetReader.getCurrentPacket();
      currentPacket.indexBegin=startIndex;
      currentPacket.rankEnd=index;
      startIndex=index + 1;
    }
  }
  return hasMoreEvents();
}","/** 
 * Go to the next event.
 * @return True if an event was read.
 */
public boolean advance(){
  StreamInputReader top=this.prio.poll();
  if (top == null) {
    return false;
  }
  if (top.readNextEvent()) {
    this.prio.add(top);
    final long topEnd=top.getCurrentEvent().timestamp;
    this.endTime=Math.max(topEnd,this.endTime);
    this.eventCountPerTraceFile[top.getName()]++;
  }
  if (hasMoreEvents()) {
    index++;
    StreamInputPacketReader packetReader=top.getPacketReader();
    if (packetReader.hasMoreEvents() == false) {
      int n=this.streamInputReaders.indexOf(packetReader);
      StreamInputPacketIndexEntry currentPacket=packetReader.getCurrentPacket();
      currentPacket.indexBegin=startIndex[n];
      currentPacket.indexEnd=index;
      startIndex[n]=index + 1;
    }
  }
  return hasMoreEvents();
}",0.9538077403245944
92499,"@Override public void setRank(long rank){
}","@Override public void setRank(long rank){
  seekRank(rank);
}",0.8269230769230769
92500,"@Override public long getRank(){
  final CtfTmfEvent current=getCurrentEvent();
  if (current != null) {
    return getCurrentEvent().getRank();
  }
  return 0;
}","@Override public long getRank(){
  return super.getIndex();
}",0.484304932735426
92501,"@Override public void updateRank(int rank){
  curRank=rank;
}","@Override public void updateRank(int rank){
}",0.8490566037735849
92502,"@Override public boolean isValidRank(){
  return true;
}","@Override public boolean isValidRank(){
  return (getRank() > -1);
}",0.8548387096774194
92503,"@Override public double getLocationRatio(ITmfLocation<?> location){
  return 0;
}","@Override public double getLocationRatio(ITmfLocation<?> location){
  CtfIterator curLocation=(CtfIterator)location;
  return ((double)curLocation.getCurrentEvent().getTimestampValue() - curLocation.getStartTime()) / (curLocation.getEndTime() - curLocation.getStartTime());
}",0.4101123595505618
92504,"@Override public CtfTmfTrace clone() throws CloneNotSupportedException {
  CtfTmfTrace clone=null;
  clone=(CtfTmfTrace)super.clone();
  clone.setfCheckpoints(this.fCheckpoints);
  clone.fStartTime=this.fStartTime.clone();
  clone.fEndTime=this.fEndTime.clone();
  clone.fTrace=this.fTrace;
  return clone;
}","@Override public CtfTmfTrace clone() throws CloneNotSupportedException {
  CtfTmfTrace clone=null;
  clone=(CtfTmfTrace)super.clone();
  clone.fStartTime=this.fStartTime.clone();
  clone.fEndTime=this.fEndTime.clone();
  clone.fTrace=this.fTrace;
  return clone;
}",0.9230769230769232
92505,"/** 
 * Getter/Setter tests 
 */
public void testGetAndSetter(){
  ProbeEventInfo fixture=new ProbeEventInfo(""String_Node_Str"");
  assertTrue(fixture instanceof EventInfo);
  fixture.setAddress(""String_Node_Str"");
  String result=fixture.getAddress();
  assertNotNull(result);
  assertEquals(""String_Node_Str"",result);
  fixture.setOffset(""String_Node_Str"");
  result=fixture.getOffset();
  assertNotNull(result);
  assertEquals(""String_Node_Str"",result);
  fixture.setSymbol(""String_Node_Str"");
  result=fixture.getSymbol();
  assertNotNull(result);
  assertEquals(""String_Node_Str"",result);
}","/** 
 * Getter/Setter tests 
 */
public void testGetAndSetter(){
  ProbeEventInfo fixture=new ProbeEventInfo(""String_Node_Str"");
  fixture.setAddress(""String_Node_Str"");
  String result=fixture.getAddress();
  assertNotNull(result);
  assertEquals(""String_Node_Str"",result);
  fixture.setOffset(""String_Node_Str"");
  result=fixture.getOffset();
  assertNotNull(result);
  assertEquals(""String_Node_Str"",result);
  fixture.setSymbol(""String_Node_Str"");
  result=fixture.getSymbol();
  assertNotNull(result);
  assertEquals(""String_Node_Str"",result);
}",0.9615384615384616
92506,"/** 
 * Perform pre-test initialization.
 * @throws Exception if the initialization fails for some reason
 */
@Override public void setUp(){
  ModelImplFactory factory=new ModelImplFactory();
  fUstProviderInfo1=factory.getUstProviderInfo1();
  fUstProviderInfo2=factory.getUstProviderInfo2();
  fEventInfo1=factory.getBaseEventInfo1();
  fEventInfo1=factory.getBaseEventInfo2();
}","/** 
 * Perform pre-test initialization.
 * @throws Exception if the initialization fails for some reason
 */
@Override public void setUp(){
  ModelImplFactory factory=new ModelImplFactory();
  fUstProviderInfo1=factory.getUstProviderInfo1();
  fUstProviderInfo2=factory.getUstProviderInfo2();
  fEventInfo1=factory.getBaseEventInfo1();
  fEventInfo2=factory.getBaseEventInfo2();
}",0.9973753280839897
92507,"@Override public void setSessions(TraceSessionComponent[] sessions){
  fSessions=sessions;
}","@Override public void setSessions(TraceSessionComponent[] sessions){
  if (sessions != null) {
    fSessions=Arrays.copyOf(sessions,sessions.length);
    return;
  }
  fSessions=null;
}",0.6642599277978339
92508,"/** 
 * Parse a scenario file with the format: <SCENARIO> ScenarioName <COMMAND_INPUT> Command </COMAND_INPUT> <COMMAND_RESULT> CommandResult </COMMAND_RESULT> <COMMAND_OUTPUT> CommandOutput </COMMAND_OUTPUT> </SCENARIO> Where: ScenarioName - is the scenario name Command - the command line string CommandResult - the result integer of the command (0 for success, 1 for failure) ComandOutput - the command output string (multi-line possible) Note: 1) There can be many scenarios per file 2) There can be many (Command-CommandResult-CommandOutput) triples per scenario 3) Lines starting with # will be ignored (comments)
 * @param scenariofile - path to scenario file
 * @throws Exception
 */
public void loadScenarioFile(String scenariofile) throws Exception {
  fScenariofile=scenariofile;
  Collection<Map<String,ICommandResult>> values=fScenarioMap.values();
  for (Iterator<Map<String,ICommandResult>> iterator=values.iterator(); iterator.hasNext(); ) {
    Map<String,ICommandResult> map=(Map<String,ICommandResult>)iterator.next();
    map.clear();
  }
  fScenarioMap.clear();
  FileInputStream fstream=new FileInputStream(fScenariofile);
  DataInputStream in=new DataInputStream(fstream);
  BufferedReader br=new BufferedReader(new InputStreamReader(in));
  String strLine;
  Map<String,Integer> tmpSessionNameMap=new HashMap<String,Integer>();
  while ((strLine=br.readLine()) != null) {
    if (isComment(strLine)) {
      continue;
    }
    if (SCENARIO_KEY.equals(strLine)) {
      strLine=br.readLine();
      while (isComment(strLine)) {
        strLine=br.readLine();
      }
      String scenario=strLine;
      Map<String,ICommandResult> commandMap=new HashMap<String,ICommandResult>();
      fScenarioMap.put(scenario,commandMap);
      List<String> output=null;
      String input=null;
      boolean inOutput=false;
      int result=0;
      tmpSessionNameMap.clear();
      while ((strLine=br.readLine()) != null) {
        if (isComment(strLine)) {
          continue;
        }
        if (SCENARIO_END_KEY.equals(strLine)) {
          break;
        }
        if (INPUT_KEY.equals(strLine)) {
          strLine=br.readLine();
          while (isComment(strLine)) {
            strLine=br.readLine();
          }
          input=strLine;
          Matcher matcher=LTTNG_LIST_SESSION_PATTERN.matcher(strLine);
          if (matcher.matches() && !input.matches(LTTNG_LIST_PROVIDER_PATTERN)) {
            String sessionName=matcher.group(1).trim();
            Integer i=tmpSessionNameMap.get(sessionName);
            if (i != null) {
              i++;
            }
 else {
              i=0;
            }
            tmpSessionNameMap.put(sessionName,i);
            input+=String.valueOf(i);
          }
        }
 else         if (INPUT_END_KEY.equals(strLine)) {
          output=new ArrayList<String>();
        }
 else         if (RESULT_KEY.equals(strLine)) {
          strLine=br.readLine();
          while (isComment(strLine)) {
            strLine=br.readLine();
          }
          result=Integer.parseInt(strLine);
        }
 else         if (OUTPUT_END_KEY.equals(strLine)) {
          commandMap.put(input,new CommandResult(result,output.toArray(new String[output.size()])));
          inOutput=false;
        }
 else         if (OUTPUT_KEY.equals(strLine)) {
          inOutput=true;
          strLine=br.readLine();
          while (isComment(strLine)) {
            strLine=br.readLine();
          }
          output.add(strLine);
        }
 else         if (inOutput) {
          output.add(strLine);
        }
      }
    }
  }
  in.close();
}","/** 
 * Parse a scenario file with the format: <SCENARIO> ScenarioName <COMMAND_INPUT> Command </COMAND_INPUT> <COMMAND_RESULT> CommandResult </COMMAND_RESULT> <COMMAND_OUTPUT> CommandOutput </COMMAND_OUTPUT> </SCENARIO> Where: ScenarioName - is the scenario name Command - the command line string CommandResult - the result integer of the command (0 for success, 1 for failure) ComandOutput - the command output string (multi-line possible) Note: 1) There can be many scenarios per file 2) There can be many (Command-CommandResult-CommandOutput) triples per scenario 3) Lines starting with # will be ignored (comments)
 * @param scenariofile - path to scenario file
 * @throws Exception
 */
public synchronized void loadScenarioFile(String scenariofile) throws Exception {
  fScenariofile=scenariofile;
  Collection<Map<String,ICommandResult>> values=fScenarioMap.values();
  for (Iterator<Map<String,ICommandResult>> iterator=values.iterator(); iterator.hasNext(); ) {
    Map<String,ICommandResult> map=(Map<String,ICommandResult>)iterator.next();
    map.clear();
  }
  fScenarioMap.clear();
  FileInputStream fstream=new FileInputStream(fScenariofile);
  DataInputStream in=new DataInputStream(fstream);
  BufferedReader br=new BufferedReader(new InputStreamReader(in));
  String strLine;
  Map<String,Integer> tmpSessionNameMap=new HashMap<String,Integer>();
  while ((strLine=br.readLine()) != null) {
    if (isComment(strLine)) {
      continue;
    }
    if (SCENARIO_KEY.equals(strLine)) {
      strLine=br.readLine();
      while (isComment(strLine)) {
        strLine=br.readLine();
      }
      String scenario=strLine;
      Map<String,ICommandResult> commandMap=new HashMap<String,ICommandResult>();
      fScenarioMap.put(scenario,commandMap);
      List<String> output=null;
      String input=null;
      boolean inOutput=false;
      int result=0;
      tmpSessionNameMap.clear();
      while ((strLine=br.readLine()) != null) {
        if (isComment(strLine)) {
          continue;
        }
        if (SCENARIO_END_KEY.equals(strLine)) {
          break;
        }
        if (INPUT_KEY.equals(strLine)) {
          strLine=br.readLine();
          while (isComment(strLine)) {
            strLine=br.readLine();
          }
          input=strLine;
          Matcher matcher=LTTNG_LIST_SESSION_PATTERN.matcher(strLine);
          if (matcher.matches() && !input.matches(LTTNG_LIST_PROVIDER_PATTERN)) {
            String sessionName=matcher.group(1).trim();
            Integer i=tmpSessionNameMap.get(sessionName);
            if (i != null) {
              i++;
            }
 else {
              i=0;
            }
            tmpSessionNameMap.put(sessionName,i);
            input+=String.valueOf(i);
          }
        }
 else         if (INPUT_END_KEY.equals(strLine)) {
          output=new ArrayList<String>();
        }
 else         if (RESULT_KEY.equals(strLine)) {
          strLine=br.readLine();
          while (isComment(strLine)) {
            strLine=br.readLine();
          }
          result=Integer.parseInt(strLine);
        }
 else         if (OUTPUT_END_KEY.equals(strLine)) {
          commandMap.put(input,new CommandResult(result,output.toArray(new String[output.size()])));
          inOutput=false;
        }
 else         if (OUTPUT_KEY.equals(strLine)) {
          inOutput=true;
          strLine=br.readLine();
          while (isComment(strLine)) {
            strLine=br.readLine();
          }
          output.add(strLine);
        }
 else         if (inOutput) {
          output.add(strLine);
        }
      }
    }
  }
  in.close();
}",0.99819318971508
92509,"private boolean isComment(String line){
  return line.matches(COMMENT_KEY);
}","private boolean isComment(String line){
  if (line == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return line.matches(COMMENT_KEY);
}",0.6666666666666666
92510,"@SuppressWarnings(""String_Node_Str"") @Override public ICommandResult executeCommand(String command,IProgressMonitor monitor,boolean checkReturnValue) throws ExecutionException {
  Map<String,ICommandResult> commands=fScenarioMap.get(fScenario);
  Matcher matcher=LTTNG_LIST_SESSION_PATTERN.matcher(command);
  if (matcher.matches() && !command.matches(LTTNG_LIST_PROVIDER_PATTERN)) {
    String sessionName=matcher.group(1).trim();
    Integer i=fSessionNameMap.get(sessionName);
    if (i != null) {
      i++;
    }
 else {
      i=0;
    }
    fSessionNameMap.put(sessionName,i);
    command+=String.valueOf(i);
  }
  if (commands.containsKey(command)) {
    return commands.get(command);
  }
  String[] output=new String[1];
  output[0]=String.valueOf(""String_Node_Str"");
  return new CommandResult(1,output);
}","@SuppressWarnings(""String_Node_Str"") @Override public synchronized ICommandResult executeCommand(String command,IProgressMonitor monitor,boolean checkReturnValue) throws ExecutionException {
  Map<String,ICommandResult> commands=fScenarioMap.get(fScenario);
  Matcher matcher=LTTNG_LIST_SESSION_PATTERN.matcher(command);
  if (matcher.matches() && !command.matches(LTTNG_LIST_PROVIDER_PATTERN)) {
    String sessionName=matcher.group(1).trim();
    Integer i=fSessionNameMap.get(sessionName);
    if (i != null) {
      i++;
    }
 else {
      i=0;
    }
    fSessionNameMap.put(sessionName,i);
    command+=String.valueOf(i);
  }
  if (commands.containsKey(command)) {
    return commands.get(command);
  }
  String[] output=new String[1];
  output[0]=String.valueOf(""String_Node_Str"");
  return new CommandResult(1,output);
}",0.9920876445526476
92511,"public static Uml2SDTestFacility getInstance(){
  if (fInstance == null) {
    fInstance=new Uml2SDTestFacility();
    fInstance.init();
  }
  return fInstance;
}","public synchronized static Uml2SDTestFacility getInstance(){
  if (fInstance == null) {
    fInstance=new Uml2SDTestFacility();
    fInstance.init();
  }
  return fInstance;
}",0.9614243323442137
92512,"@SuppressWarnings(""String_Node_Str"") public Image getResourceImage(String _name){
  ImageDescriptor img;
  try {
    URL url=new URL(BASIC_URL,(new StringBuilder(""String_Node_Str"")).append(_name).toString());
    img=ImageDescriptor.createFromURL(url);
    return img.createImage();
  }
 catch (  Exception e) {
    System.err.println(e);
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public Image getResourceImage(String _name){
  ImageDescriptor img;
  try {
    URL BASIC_URL=new URL(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    URL url=new URL(BASIC_URL,(new StringBuilder(""String_Node_Str"")).append(_name).toString());
    img=ImageDescriptor.createFromURL(url);
    return img.createImage();
  }
 catch (  Exception e) {
    System.err.println(e);
  }
  return null;
}",0.8675
92513,"@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public TmfEvent parseNextEvent(ITmfTrace<TmfEvent> eventStream,ITmfContext context) throws IOException {
  if (!(eventStream instanceof TmfTraceStub)) {
    return null;
  }
  RandomAccessFile stream=((TmfTraceStub)eventStream).getStream();
  String name=eventStream.getName();
  name=name.substring(name.lastIndexOf('/') + 1);
  long location=0;
  if (context != null)   location=((TmfLocation<Long>)(context.getLocation())).getLocation();
  stream.seek(location);
  try {
    long ts=stream.readLong();
    String source=stream.readUTF();
    String type=stream.readUTF();
    String reference=stream.readUTF();
    String sender=stream.readUTF();
    String receiver=stream.readUTF();
    String signal=stream.readUTF();
    String[] labels={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    TmfEventType tmfEventType=new TmfEventType(""String_Node_Str"",type,TmfEventField.makeRoot(labels));
    String content=""String_Node_Str"";
    content+=sender;
    content+=""String_Node_Str"" + receiver;
    content+=""String_Node_Str"" + signal;
    content+=""String_Node_Str"";
    TmfEventField[] fields=new TmfEventField[3];
    fields[0]=new TmfEventField(""String_Node_Str"",sender);
    fields[1]=new TmfEventField(""String_Node_Str"",receiver);
    fields[2]=new TmfEventField(""String_Node_Str"",signal);
    ITmfEventField tmfContent=new TmfEventField(ITmfEventField.ROOT_FIELD_ID,content,fields);
    TmfEvent tmfEvent=new TmfEvent(eventStream,new TmfTimestamp(ts,-9),source,tmfEventType,tmfContent,reference);
    return tmfEvent;
  }
 catch (  EOFException e) {
  }
  return null;
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public TmfEvent parseNextEvent(ITmfTrace<TmfEvent> eventStream,ITmfContext context) throws IOException {
  if (!(eventStream instanceof TmfTraceStub)) {
    return null;
  }
  RandomAccessFile stream=((TmfTraceStub)eventStream).getStream();
  long location=0;
  if (context != null)   location=((TmfLocation<Long>)(context.getLocation())).getLocation();
  stream.seek(location);
  try {
    long ts=stream.readLong();
    String source=stream.readUTF();
    String type=stream.readUTF();
    String reference=stream.readUTF();
    String sender=stream.readUTF();
    String receiver=stream.readUTF();
    String signal=stream.readUTF();
    String[] labels={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    TmfEventType tmfEventType=new TmfEventType(""String_Node_Str"",type,TmfEventField.makeRoot(labels));
    String content=""String_Node_Str"";
    content+=sender;
    content+=""String_Node_Str"" + receiver;
    content+=""String_Node_Str"" + signal;
    content+=""String_Node_Str"";
    TmfEventField[] fields=new TmfEventField[3];
    fields[0]=new TmfEventField(""String_Node_Str"",sender);
    fields[1]=new TmfEventField(""String_Node_Str"",receiver);
    fields[2]=new TmfEventField(""String_Node_Str"",signal);
    ITmfEventField tmfContent=new TmfEventField(ITmfEventField.ROOT_FIELD_ID,content,fields);
    TmfEvent tmfEvent=new TmfEvent(eventStream,new TmfTimestamp(ts,-9),source,tmfEventType,tmfContent,reference);
    return tmfEvent;
  }
 catch (  EOFException e) {
  }
  return null;
}",0.9730065156686316
92514,"@Override public String getEventName(ITimeEvent event,boolean upper,boolean extInfo){
  String name=""String_Node_Str"";
  name=upper ? name : name;
  if (event instanceof EventImpl) {
    EventImpl devent=(EventImpl)event;
    name=devent.getType().toString();
  }
  return name;
}","@Override public String getEventName(ITimeEvent event,boolean upper,boolean extInfo){
  String name=""String_Node_Str"";
  if (event instanceof EventImpl) {
    EventImpl devent=(EventImpl)event;
    name=devent.getType().toString();
  }
  return name;
}",0.9473684210526316
92515,"/** 
 * 5000 Events per Trace.
 * @param number
 * @return
 */
public TraceImpl[] createLargeTraces(int number){
  TraceImpl trace;
  TraceImpl[] traceArr=new TraceImpl[number];
  for (int i=0; i < traceArr.length; i++) {
    int count=i % 17;
    long sTime=i * (long)1E6;
    trace=new TraceImpl(i,traceNames[count].name,sTime,sTime + 20000,traceNames[count].groupName,traceNames[count].classNmme);
    count=i;
    create5000Events(trace);
    traceArr[i]=trace;
  }
  return traceArr;
}","/** 
 * 5000 Events per Trace.
 * @param number
 * @return
 */
public TraceImpl[] createLargeTraces(int number){
  TraceImpl trace;
  TraceImpl[] traceArr=new TraceImpl[number];
  for (int i=0; i < traceArr.length; i++) {
    int count=i % 17;
    long sTime=i * (long)1E6;
    trace=new TraceImpl(i,traceNames[count].name,sTime,sTime + 20000,traceNames[count].groupName,traceNames[count].classNmme);
    create5000Events(trace);
    traceArr[i]=trace;
  }
  return traceArr;
}",0.9865563598759048
92516,"@Override public void componentChanged(final ITraceControlComponent component){
  if (fTreeViewer.getTree().isDisposed()) {
    return;
  }
  UIJob myJob=new UIJob(""String_Node_Str""){
    @Override public IStatus runInUIThread(    IProgressMonitor monitor){
      if (fTreeViewer.getTree().isDisposed()) {
        return Status.OK_STATUS;
      }
      fTreeViewer.refresh(component);
      final ISelection sel=fTreeViewer.getSelection();
      fTreeViewer.setSelection(null);
      fTreeViewer.setSelection(sel);
      return Status.OK_STATUS;
    }
  }
;
  myJob.setUser(false);
  myJob.schedule();
}","@Override public void componentChanged(final ITraceControlComponent component){
  if (fTreeViewer.getTree().isDisposed()) {
    return;
  }
  UIJob myJob=new UIJob(""String_Node_Str""){
    @Override public IStatus runInUIThread(    IProgressMonitor monitor){
      if (fTreeViewer.getTree().isDisposed()) {
        return Status.OK_STATUS;
      }
      fTreeViewer.refresh(component);
      final ISelection sel=fTreeViewer.getSelection();
      fTreeViewer.setSelection(null);
      fTreeViewer.setSelection(sel);
      fTreeViewer.reveal(component);
      return Status.OK_STATUS;
    }
  }
;
  myJob.setUser(false);
  myJob.schedule();
}",0.9702333065164924
92517,"/** 
 * Handle the completion of the request. It is called when there is no more data available either because: - the request completed normally  - the request failed  - the request was canceled As a convenience, handleXXXX methods are provided. They are meant to be overridden by the application if it needs to handle these conditions.
 */
@Override public synchronized void handleCompleted(){
  if (fRequestFailed) {
    handleFailure();
  }
 else   if (fRequestCanceled) {
    handleCancel();
  }
 else {
    handleSuccess();
  }
  if (Tracer.isRequestTraced())   Tracer.traceRequest(this,""String_Node_Str"" + fNbRead + ""String_Node_Str"");
}","/** 
 * Handle the completion of the request. It is called when there is no more data available either because: - the request completed normally  - the request failed  - the request was canceled As a convenience, handleXXXX methods are provided. They are meant to be overridden by the application if it needs to handle these conditions.
 */
@Override public void handleCompleted(){
  boolean requestFailed=false;
  boolean requestCanceled=false;
synchronized (this) {
    requestFailed=fRequestFailed;
    requestCanceled=fRequestCanceled;
  }
  if (requestFailed) {
    handleFailure();
  }
 else   if (requestCanceled) {
    handleCancel();
  }
 else {
    handleSuccess();
  }
  if (Tracer.isRequestTraced())   Tracer.traceRequest(this,""String_Node_Str"" + fNbRead + ""String_Node_Str"");
}",0.8709002093510119
92518,"public void run(){
  ISelection selection=viewer.getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  if (obj instanceof PMLineRef) {
    PMFile file=(PMFile)((PMLineRef)obj).getParent();
    try {
      ProfileUIUtils.openEditorAndSelect(file.getPath(),Integer.parseInt(file.getName()));
    }
 catch (    PartInitException e) {
      e.printStackTrace();
    }
catch (    BadLocationException e) {
      e.printStackTrace();
    }
  }
 else   if (obj instanceof PMFile) {
    PMFile file=(PMFile)obj;
    try {
      ProfileUIUtils.openEditorAndSelect(file.getName(),1);
    }
 catch (    PartInitException e) {
      e.printStackTrace();
    }
catch (    BadLocationException e) {
      e.printStackTrace();
    }
  }
 else   if (obj instanceof PMSymbol) {
    PMSymbol sym=(PMSymbol)obj;
    PMFile file=(PMFile)sym.getParent();
    PMDso dso=(PMDso)file.getParent();
    if (file.getName().equals(PerfPlugin.STRINGS_UnfiledSymbols))     return;
    String binaryPath=dso.getPath();
    ICProject project;
    try {
      project=ProfileUIUtils.findCProjectWithAbsolutePath(binaryPath);
      HashMap<String,int[]> map=ProfileUIUtils.findFunctionsInProject(project,sym.getFunctionName(),-1,file.getPath(),true);
      boolean bFound=false;
      for (      String loc : map.keySet()) {
        ProfileUIUtils.openEditorAndSelect(loc,map.get(loc)[0],map.get(loc)[1]);
        bFound=true;
      }
      if (!bFound) {
        ProfileUIUtils.openEditorAndSelect(file.getPath(),1);
      }
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
catch (    BadLocationException e) {
      e.printStackTrace();
    }
  }
}","public void run(){
  ISelection selection=viewer.getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  if (obj instanceof PMLineRef) {
    PMLineRef line=(PMLineRef)obj;
    PMFile file=(PMFile)((PMSymbol)line.getParent()).getParent();
    try {
      ProfileUIUtils.openEditorAndSelect(file.getPath(),Integer.parseInt(line.getName()));
    }
 catch (    PartInitException e) {
      e.printStackTrace();
    }
catch (    BadLocationException e) {
      e.printStackTrace();
    }
  }
 else   if (obj instanceof PMFile) {
    PMFile file=(PMFile)obj;
    try {
      ProfileUIUtils.openEditorAndSelect(file.getName(),1);
    }
 catch (    PartInitException e) {
      e.printStackTrace();
    }
catch (    BadLocationException e) {
      e.printStackTrace();
    }
  }
 else   if (obj instanceof PMSymbol) {
    PMSymbol sym=(PMSymbol)obj;
    PMFile file=(PMFile)sym.getParent();
    PMDso dso=(PMDso)file.getParent();
    if (file.getName().equals(PerfPlugin.STRINGS_UnfiledSymbols))     return;
    String binaryPath=dso.getPath();
    ICProject project;
    try {
      project=ProfileUIUtils.findCProjectWithAbsolutePath(binaryPath);
      HashMap<String,int[]> map=ProfileUIUtils.findFunctionsInProject(project,sym.getFunctionName(),-1,file.getPath(),true);
      boolean bFound=false;
      for (      String loc : map.keySet()) {
        ProfileUIUtils.openEditorAndSelect(loc,map.get(loc)[0],map.get(loc)[1]);
        bFound=true;
      }
      if (!bFound) {
        ProfileUIUtils.openEditorAndSelect(file.getPath(),1);
      }
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
catch (    BadLocationException e) {
      e.printStackTrace();
    }
  }
}",0.9719018041999408
92519,"private IFolder copyExperiment(String newName){
  IPath oldPath=fExperiment.getResource().getFullPath();
  final IPath newPath=oldPath.append(""String_Node_Str"" + newName);
  WorkspaceModifyOperation operation=new WorkspaceModifyOperation(){
    @Override public void execute(    IProgressMonitor monitor) throws CoreException {
      try {
        monitor.beginTask(""String_Node_Str"",1000);
        if (monitor.isCanceled()) {
          throw new OperationCanceledException();
        }
        fExperiment.getResource().copy(newPath,IResource.FORCE | IResource.SHALLOW,null);
        if (monitor.isCanceled()) {
          throw new OperationCanceledException();
        }
      }
  finally {
        monitor.done();
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().busyCursorWhile(operation);
  }
 catch (  InterruptedException exception) {
    return null;
  }
catch (  InvocationTargetException exception) {
    MessageDialog.openError(getShell(),""String_Node_Str"",NLS.bind(""String_Node_Str"",exception.getTargetException().getMessage()));
    return null;
  }
catch (  RuntimeException exception) {
    return null;
  }
  return fExperiment.getResource();
}","private IFolder copyExperiment(final String newName){
  IPath oldPath=fExperiment.getResource().getFullPath();
  final IPath newPath=oldPath.append(""String_Node_Str"" + newName);
  WorkspaceModifyOperation operation=new WorkspaceModifyOperation(){
    @Override public void execute(    IProgressMonitor monitor) throws CoreException {
      try {
        monitor.beginTask(""String_Node_Str"",1000);
        if (monitor.isCanceled()) {
          throw new OperationCanceledException();
        }
        fExperiment.getResource().copy(newPath,IResource.FORCE | IResource.SHALLOW,null);
        IFolder folder=fExperimentFolder.getFolder(newName);
        if (folder.exists()) {
          for (          IResource member : folder.members()) {
            if (TmfExperiment.class.getCanonicalName().equals(member.getPersistentProperty(TmfTraceElement.TRACETYPE))) {
              member.delete(true,null);
            }
          }
        }
        if (monitor.isCanceled()) {
          throw new OperationCanceledException();
        }
      }
  finally {
        monitor.done();
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().busyCursorWhile(operation);
  }
 catch (  InterruptedException exception) {
    return null;
  }
catch (  InvocationTargetException exception) {
    MessageDialog.openError(getShell(),""String_Node_Str"",NLS.bind(""String_Node_Str"",exception.getTargetException().getMessage()));
    return null;
  }
catch (  RuntimeException exception) {
    return null;
  }
  return fExperiment.getResource();
}",0.8686131386861314
92520,"@Override public void execute(IProgressMonitor monitor) throws CoreException {
  try {
    monitor.beginTask(""String_Node_Str"",1000);
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    fExperiment.getResource().copy(newPath,IResource.FORCE | IResource.SHALLOW,null);
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
  }
  finally {
    monitor.done();
  }
}","@Override public void execute(IProgressMonitor monitor) throws CoreException {
  try {
    monitor.beginTask(""String_Node_Str"",1000);
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    fExperiment.getResource().copy(newPath,IResource.FORCE | IResource.SHALLOW,null);
    IFolder folder=fExperimentFolder.getFolder(newName);
    if (folder.exists()) {
      for (      IResource member : folder.members()) {
        if (TmfExperiment.class.getCanonicalName().equals(member.getPersistentProperty(TmfTraceElement.TRACETYPE))) {
          member.delete(true,null);
        }
      }
    }
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
  }
  finally {
    monitor.done();
  }
}",0.6955782312925171
92521,"private IResource copyTrace(String newName){
  IPath oldPath=fTrace.getResource().getFullPath();
  final IPath newPath=oldPath.append(""String_Node_Str"" + newName);
  WorkspaceModifyOperation operation=new WorkspaceModifyOperation(){
    @Override public void execute(    IProgressMonitor monitor) throws CoreException {
      try {
        monitor.beginTask(""String_Node_Str"",1000);
        if (monitor.isCanceled()) {
          throw new OperationCanceledException();
        }
        fTrace.getResource().copy(newPath,IResource.FORCE | IResource.SHALLOW,null);
        if (monitor.isCanceled()) {
          throw new OperationCanceledException();
        }
      }
  finally {
        monitor.done();
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().busyCursorWhile(operation);
  }
 catch (  InterruptedException exception) {
    return null;
  }
catch (  InvocationTargetException exception) {
    MessageDialog.openError(getShell(),""String_Node_Str"",NLS.bind(""String_Node_Str"",exception.getTargetException().getMessage()));
    return null;
  }
catch (  RuntimeException exception) {
    return null;
  }
  return fTrace.getResource();
}","private IResource copyTrace(final String newName){
  IPath oldPath=fTrace.getResource().getFullPath();
  final IPath newPath=oldPath.append(""String_Node_Str"" + newName);
  WorkspaceModifyOperation operation=new WorkspaceModifyOperation(){
    @Override public void execute(    IProgressMonitor monitor) throws CoreException {
      try {
        monitor.beginTask(""String_Node_Str"",1000);
        if (monitor.isCanceled()) {
          throw new OperationCanceledException();
        }
        fTrace.getResource().copy(newPath,IResource.FORCE | IResource.SHALLOW,null);
        IFolder folder=fTraceFolder.getFolder(newName);
        if (folder.exists()) {
          for (          IResource member : folder.members()) {
            if (TmfTrace.class.getCanonicalName().equals(member.getPersistentProperty(TmfTraceElement.TRACETYPE))) {
              member.delete(true,null);
            }
          }
        }
        if (monitor.isCanceled()) {
          throw new OperationCanceledException();
        }
      }
  finally {
        monitor.done();
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().busyCursorWhile(operation);
  }
 catch (  InterruptedException exception) {
    return null;
  }
catch (  InvocationTargetException exception) {
    MessageDialog.openError(getShell(),""String_Node_Str"",NLS.bind(""String_Node_Str"",exception.getTargetException().getMessage()));
    return null;
  }
catch (  RuntimeException exception) {
    return null;
  }
  return fTrace.getResource();
}",0.8700816629547142
92522,"@Override public void execute(IProgressMonitor monitor) throws CoreException {
  try {
    monitor.beginTask(""String_Node_Str"",1000);
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    fTrace.getResource().copy(newPath,IResource.FORCE | IResource.SHALLOW,null);
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
  }
  finally {
    monitor.done();
  }
}","@Override public void execute(IProgressMonitor monitor) throws CoreException {
  try {
    monitor.beginTask(""String_Node_Str"",1000);
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    fTrace.getResource().copy(newPath,IResource.FORCE | IResource.SHALLOW,null);
    IFolder folder=fTraceFolder.getFolder(newName);
    if (folder.exists()) {
      for (      IResource member : folder.members()) {
        if (TmfTrace.class.getCanonicalName().equals(member.getPersistentProperty(TmfTraceElement.TRACETYPE))) {
          member.delete(true,null);
        }
      }
    }
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
  }
  finally {
    monitor.done();
  }
}",0.7335640138408305
92523,"public CopyTraceDialog(Shell shell,TmfTraceElement trace){
  super(shell);
  fTrace=trace;
  ITmfProjectModelElement parent=trace.getParent();
  fTraceFolder=(IContainer)parent.getResource();
  fProject=trace.getProject();
  setTitle(Messages.CopyTraceDialog_DialogTitle);
  setStatusLineAboveButtons(true);
}","public CopyTraceDialog(Shell shell,TmfTraceElement trace){
  super(shell);
  fTrace=trace;
  TmfTraceFolder folder=(TmfTraceFolder)trace.getParent();
  fTraceFolder=folder.getResource();
  fProject=trace.getProject();
  setTitle(Messages.CopyTraceDialog_DialogTitle);
  setStatusLineAboveButtons(true);
}",0.763458401305057
92524,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Object execute(ExecutionEvent event) throws ExecutionException {
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null)   return false;
  try {
    IFile bookmarksFile=fExperiment.getProject().getExperimentsFolder().getResource().getFile(BOOKMARKS_HIDDEN_FILE);
    if (!bookmarksFile.exists()) {
      InputStream source=new ByteArrayInputStream(new byte[0]);
      bookmarksFile.create(source,true,null);
    }
    bookmarksFile.setHidden(true);
    IFile file=fExperiment.getResource().getFile(fExperiment.getName() + '_');
    if (!file.exists()) {
      file.createLink(bookmarksFile.getLocation(),IResource.REPLACE,null);
    }
    file.setHidden(true);
    file.setPersistentProperty(TmfTraceElement.TRACETYPE,TmfExperiment.class.getCanonicalName());
    List<TmfTraceElement> traceEntries=fExperiment.getTraces();
    int nbTraces=traceEntries.size();
    int cacheSize=Integer.MAX_VALUE;
    boolean useEditor=true;
    String experimentEditorId=null;
    ITmfTrace<?>[] traces=new ITmfTrace[nbTraces];
    for (int i=0; i < nbTraces; i++) {
      TmfTraceElement element=traceEntries.get(i);
      ITmfTrace trace=element.instantiateTrace();
      TmfEvent traceEvent=element.instantiateEvent();
      if (trace == null || traceEvent == null) {
        displayErrorMsg(Messages.OpenExperimentHandler_NoTraceType);
        for (int j=0; j < i; j++) {
          traces[j].dispose();
        }
        return null;
      }
      try {
        trace.initTrace(fExperiment.getName(),element.getLocation().getPath(),traceEvent.getClass(),false);
      }
 catch (      FileNotFoundException e) {
        displayErrorMsg(""String_Node_Str"");
      }
      trace.setResource(element.getResource());
      cacheSize=Math.min(cacheSize,trace.getCacheSize());
      String editorId=element.getEditorId();
      if (editorId == null) {
        useEditor=false;
        experimentEditorId=null;
      }
 else       if (useEditor) {
        if (experimentEditorId == null) {
          experimentEditorId=editorId;
        }
 else         if (!editorId.equals(experimentEditorId)) {
          useEditor=false;
        }
      }
      traces[i]=trace;
    }
    TmfExperiment experiment=new TmfExperiment(TmfEvent.class,fExperiment.getName(),traces,cacheSize);
    experiment.setBookmarksFile(file);
    if (useEditor) {
      IEditorInput editorInput=new TmfEditorInput(file,experiment);
      IWorkbench wb=PlatformUI.getWorkbench();
      IWorkbenchPage activePage=wb.getActiveWorkbenchWindow().getActivePage();
      String editorId=TmfEventsEditor.ID;
      IEditorPart editor=activePage.findEditor(new FileEditorInput(file));
      if (editor != null && editor instanceof IReusableEditor) {
        activePage.reuseEditor((IReusableEditor)editor,editorInput);
        activePage.activate(editor);
      }
 else {
        activePage.openEditor(editorInput,editorId);
      }
      experiment.initTrace(null,null,null,true);
      IDE.setDefaultEditor(file,editorId);
    }
 else {
      TmfExperiment.setCurrentExperiment(experiment);
      TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
      IDE.setDefaultEditor(file,EventsViewEditor.ID);
    }
  }
 catch (  CoreException e) {
    displayErrorMsg(e.getMessage());
  }
  return null;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Object execute(ExecutionEvent event) throws ExecutionException {
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null)   return false;
  try {
    IFile bookmarksFile=fExperiment.getProject().getExperimentsFolder().getResource().getFile(BOOKMARKS_HIDDEN_FILE);
    if (!bookmarksFile.exists()) {
      InputStream source=new ByteArrayInputStream(new byte[0]);
      bookmarksFile.create(source,true,null);
    }
    bookmarksFile.setHidden(true);
    IFile file=fExperiment.getResource().getFile(fExperiment.getName() + '_');
    if (!file.exists()) {
      file.createLink(bookmarksFile.getLocation(),IResource.REPLACE,null);
    }
    file.setHidden(true);
    file.setPersistentProperty(TmfTraceElement.TRACETYPE,TmfExperiment.class.getCanonicalName());
    List<TmfTraceElement> traceEntries=fExperiment.getTraces();
    int nbTraces=traceEntries.size();
    int cacheSize=Integer.MAX_VALUE;
    boolean useEditor=true;
    String experimentEditorId=null;
    ITmfTrace<?>[] traces=new ITmfTrace[nbTraces];
    for (int i=0; i < nbTraces; i++) {
      TmfTraceElement element=traceEntries.get(i);
      ITmfTrace trace=element.instantiateTrace();
      TmfEvent traceEvent=element.instantiateEvent();
      if (trace == null || traceEvent == null) {
        displayErrorMsg(Messages.OpenExperimentHandler_NoTraceType);
        for (int j=0; j < i; j++) {
          traces[j].dispose();
        }
        return null;
      }
      try {
        trace.initTrace(element.getName(),element.getLocation().getPath(),traceEvent.getClass(),false);
      }
 catch (      FileNotFoundException e) {
        displayErrorMsg(""String_Node_Str"");
      }
      trace.setResource(element.getResource());
      cacheSize=Math.min(cacheSize,trace.getCacheSize());
      String editorId=element.getEditorId();
      if (editorId == null) {
        useEditor=false;
        experimentEditorId=null;
      }
 else       if (useEditor) {
        if (experimentEditorId == null) {
          experimentEditorId=editorId;
        }
 else         if (!editorId.equals(experimentEditorId)) {
          useEditor=false;
        }
      }
      traces[i]=trace;
    }
    TmfExperiment experiment=new TmfExperiment(TmfEvent.class,fExperiment.getName(),traces,cacheSize);
    experiment.setBookmarksFile(file);
    if (useEditor) {
      IEditorInput editorInput=new TmfEditorInput(file,experiment);
      IWorkbench wb=PlatformUI.getWorkbench();
      IWorkbenchPage activePage=wb.getActiveWorkbenchWindow().getActivePage();
      String editorId=TmfEventsEditor.ID;
      IEditorPart editor=activePage.findEditor(new FileEditorInput(file));
      if (editor != null && editor instanceof IReusableEditor) {
        activePage.reuseEditor((IReusableEditor)editor,editorInput);
        activePage.activate(editor);
      }
 else {
        activePage.openEditor(editorInput,editorId);
      }
      experiment.initTrace(null,null,null,true);
      IDE.setDefaultEditor(file,editorId);
    }
 else {
      TmfExperiment.setCurrentExperiment(experiment);
      TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
      IDE.setDefaultEditor(file,EventsViewEditor.ID);
    }
  }
 catch (  CoreException e) {
    displayErrorMsg(e.getMessage());
  }
  return null;
}",0.9985250737463128
92525,"public String getLinuxtoolsPath(IProject project){
  if (project == null)   return null;
  ScopedPreferenceStore store=new ScopedPreferenceStore(new ProjectScope(project),Activator.PLUGIN_ID);
  boolean systemPathSelected;
  if (store.contains(LINUXTOOLS_PATH_SYSTEM_NAME))   systemPathSelected=store.getBoolean(LINUXTOOLS_PATH_SYSTEM_NAME);
 else   systemPathSelected=getLinuxtoolsPathSystemDefault();
  if (systemPathSelected)   return getLinuxtoolsPathDefault();
  String path=store.getString(LINUXTOOLS_PATH_NAME);
  if (path == null || path.equals(""String_Node_Str""))   return getLinuxtoolsPathDefault();
  return path;
}","public String getLinuxtoolsPath(IProject project){
  if (project == null)   return null;
  ScopedPreferenceStore store=new ScopedPreferenceStore(new ProjectScope(project),Activator.PLUGIN_ID);
  boolean systemPathSelected;
  if (store.contains(LINUXTOOLS_PATH_SYSTEM_NAME))   systemPathSelected=store.getBoolean(LINUXTOOLS_PATH_SYSTEM_NAME);
 else   systemPathSelected=getLinuxtoolsPathSystemDefault();
  if (systemPathSelected)   return ""String_Node_Str"";
  String path=null;
  if (store.contains(LINUXTOOLS_PATH_NAME))   path=store.getString(LINUXTOOLS_PATH_NAME);
  if (path == null)   return getLinuxtoolsPathDefault();
  return path;
}",0.8246445497630331
92526,"@Override public void setFullRange(long startTime,long endTime){
  fZoom.setFullRange(startTime,endTime);
}","public void setFullRange(long startTime,long endTime){
  fZoom.setFullRange(startTime,endTime);
}",0.9509803921568628
92527,"@Override public void run(){
  if (!fCanvas.isDisposed()) {
    int canvasWidth=fCanvas.getBounds().width;
    int canvasHeight=fCanvas.getBounds().height;
    if (canvasWidth <= 0 || canvasHeight <= 0)     return;
    fDataModel.setCurrentEvent(fCurrentEventTime);
    fScaledData=fDataModel.scaleTo(canvasWidth,canvasHeight,HISTOGRAM_BAR_WIDTH);
    fCanvas.redraw();
    fTimeRangeStartText.setText(HistogramUtils.nanosecondsToString(fDataModel.getFirstBucketTime()));
    fTimeRangeEndText.setText(HistogramUtils.nanosecondsToString(fDataModel.getEndTime()));
    fMaxNbEventsText.setText(Long.toString(fScaledData.fMaxValue));
    setFullRange(fDataModel.getFirstBucketTime(),fDataModel.getEndTime());
    fMaxNbEventsText.getParent().layout();
  }
}","@Override public void run(){
  if (!fCanvas.isDisposed()) {
    int canvasWidth=fCanvas.getBounds().width;
    int canvasHeight=fCanvas.getBounds().height;
    if (canvasWidth <= 0 || canvasHeight <= 0)     return;
    fDataModel.setCurrentEvent(fCurrentEventTime);
    fScaledData=fDataModel.scaleTo(canvasWidth,canvasHeight,HISTOGRAM_BAR_WIDTH);
    fCanvas.redraw();
    fTimeRangeStartText.setText(HistogramUtils.nanosecondsToString(fDataModel.getFirstBucketTime()));
    fTimeRangeEndText.setText(HistogramUtils.nanosecondsToString(fDataModel.getEndTime()));
    fMaxNbEventsText.setText(Long.toString(fScaledData.fMaxValue));
    fMaxNbEventsText.getParent().layout();
  }
}",0.9477351916376306
92528,"/** 
 * Refresh the histogram display
 */
@Override public void modelUpdated(){
  if (!fCanvas.isDisposed() && fCanvas.getDisplay() != null) {
    fCanvas.getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        if (!fCanvas.isDisposed()) {
          int canvasWidth=fCanvas.getBounds().width;
          int canvasHeight=fCanvas.getBounds().height;
          if (canvasWidth <= 0 || canvasHeight <= 0)           return;
          fDataModel.setCurrentEvent(fCurrentEventTime);
          fScaledData=fDataModel.scaleTo(canvasWidth,canvasHeight,HISTOGRAM_BAR_WIDTH);
          fCanvas.redraw();
          fTimeRangeStartText.setText(HistogramUtils.nanosecondsToString(fDataModel.getFirstBucketTime()));
          fTimeRangeEndText.setText(HistogramUtils.nanosecondsToString(fDataModel.getEndTime()));
          fMaxNbEventsText.setText(Long.toString(fScaledData.fMaxValue));
          setFullRange(fDataModel.getFirstBucketTime(),fDataModel.getEndTime());
          fMaxNbEventsText.getParent().layout();
        }
      }
    }
);
  }
}","/** 
 * Refresh the histogram display
 */
@Override public void modelUpdated(){
  if (!fCanvas.isDisposed() && fCanvas.getDisplay() != null) {
    fCanvas.getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        if (!fCanvas.isDisposed()) {
          int canvasWidth=fCanvas.getBounds().width;
          int canvasHeight=fCanvas.getBounds().height;
          if (canvasWidth <= 0 || canvasHeight <= 0)           return;
          fDataModel.setCurrentEvent(fCurrentEventTime);
          fScaledData=fDataModel.scaleTo(canvasWidth,canvasHeight,HISTOGRAM_BAR_WIDTH);
          fCanvas.redraw();
          fTimeRangeStartText.setText(HistogramUtils.nanosecondsToString(fDataModel.getFirstBucketTime()));
          fTimeRangeEndText.setText(HistogramUtils.nanosecondsToString(fDataModel.getEndTime()));
          fMaxNbEventsText.setText(Long.toString(fScaledData.fMaxValue));
          fMaxNbEventsText.getParent().layout();
        }
      }
    }
);
  }
}",0.9602746444335458
92529,"@Override public void setFullRange(long startTime,long endTime){
  long currentFirstEvent=getStartTime();
  fZoom.setFullRange((currentFirstEvent == 0) ? startTime : currentFirstEvent,endTime);
}","public void setFullRange(long startTime,long endTime){
  long currentFirstEvent=getStartTime();
  fZoom.setFullRange((currentFirstEvent == 0) ? startTime : currentFirstEvent,endTime);
}",0.9736842105263158
92530,"/** 
 * Run the TraceControlComponent.
 */
public void testTraceControlComponents() throws Exception {
  fProxy.setTestFile(fTestFile);
  fProxy.setScenario(SCEN_INIT_TEST);
  ITraceControlComponent root=TraceControlTestFacility.getInstance().getControlView().getTraceControlRoot();
  @SuppressWarnings(""String_Node_Str"") IHost host=new Host(new SystemProfile(""String_Node_Str"",true));
  host.setHostName(""String_Node_Str"");
  TargetNodeComponent node=new TargetNodeComponent(""String_Node_Str"",root,host,fProxy);
  root.addChild(node);
  node.connect();
  fFacility.waitForJobs();
  assertEquals(TargetNodeState.CONNECTED,node.getTargetNodeState());
  ITraceControlComponent[] groups=node.getChildren();
  assertNotNull(groups);
  assertEquals(2,groups.length);
  ITraceControlComponent[] providers=groups[0].getChildren();
  KernelProviderComponent kernelProvider=(KernelProviderComponent)providers[0];
  ITraceControlComponent[] events=kernelProvider.getChildren();
  assertNotNull(events);
  assertEquals(3,events.length);
  BaseEventComponent baseEventInfo0=(BaseEventComponent)events[0];
  BaseEventComponent baseEventInfo1=(BaseEventComponent)events[1];
  TraceControlDialogFactory.getInstance().setCreateSessionDialog(new CreateSessionDialogStub());
  TraceControlDialogFactory.getInstance().setGetEventInfoDialog(new GetEventInfoDialogStub());
  TraceControlDialogFactory.getInstance().setConfirmDialog(new DestroyConfirmDialogStub());
  fProxy.setScenario(SCEN_SCENARIO1_TEST);
  TraceSessionComponent session=createSession(groups[1]);
  assertNotNull(session);
  assertEquals(""String_Node_Str"",session.getName());
  assertEquals(""String_Node_Str"",session.getSessionPath());
  assertEquals(TraceSessionState.INACTIVE,session.getSessionState());
  ITraceControlComponent[] components={baseEventInfo0,baseEventInfo1};
  fFacility.getControlView().setSelection(components);
  fFacility.delay(TraceControlTestFacility.GUI_REFESH_DELAY);
  fFacility.executeCommand(""String_Node_Str"");
  fFacility.waitForJobs();
  ITraceControlComponent[] domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  assertEquals(""String_Node_Str"",domains[0].getName());
  ITraceControlComponent[] channels=domains[0].getChildren();
  assertNotNull(channels);
  assertEquals(1,channels.length);
  assertTrue(channels[0] instanceof TraceChannelComponent);
  TraceChannelComponent channel=(TraceChannelComponent)channels[0];
  assertEquals(""String_Node_Str"",channel.getName());
  assertEquals(4,channel.getNumberOfSubBuffers());
  assertEquals(""String_Node_Str"",channel.getOutputType());
  assertEquals(false,channel.isOverwriteMode());
  assertEquals(200,channel.getReadTimer());
  assertEquals(TraceEnablement.ENABLED,channel.getState());
  assertEquals(262144,channel.getSubBufferSize());
  assertEquals(0,channel.getSwitchTimer());
  ITraceControlComponent[] channel0Events=channel.getChildren();
  assertNotNull(channel0Events);
  assertEquals(2,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceEventComponent);
  assertTrue(channel0Events[1] instanceof TraceEventComponent);
  TraceEventComponent event=(TraceEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.TRACE_EMERG,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  TraceEventComponent event1=(TraceEventComponent)channel0Events[1];
  assertEquals(""String_Node_Str"",event1.getName());
  assertEquals(TraceLogLevel.TRACE_EMERG,event1.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event1.getEventType());
  assertEquals(TraceEnablement.ENABLED,event1.getState());
  ITraceControlComponent[] selection={event,event1};
  fFacility.getControlView().setSelection(selection);
  fFacility.delay(TraceControlTestFacility.GUI_REFESH_DELAY);
  fFacility.executeCommand(""String_Node_Str"");
  fFacility.waitForJobs();
  assertEquals(TraceEnablement.DISABLED,event.getState());
  assertEquals(TraceEnablement.DISABLED,event1.getState());
  fFacility.getControlView().setSelection(event1);
  fFacility.executeCommand(""String_Node_Str"");
  fFacility.waitForJobs();
  assertEquals(TraceEnablement.ENABLED,event1.getState());
  destroySession(session);
  assertEquals(0,groups[1].getChildren().length);
  fProxy.setScenario(SCEN_SCENARIO2_TEST);
  CreateSessionDialogStub sessionDialogStub=new CreateSessionDialogStub();
  sessionDialogStub.setSessionPath(""String_Node_Str"");
  TraceControlDialogFactory.getInstance().setCreateSessionDialog(sessionDialogStub);
  session=createSession(groups[1]);
  assertNotNull(session);
  assertEquals(""String_Node_Str"",session.getName());
  assertEquals(""String_Node_Str"",session.getSessionPath());
  assertEquals(TraceSessionState.INACTIVE,session.getSessionState());
  TraceControlDialogFactory.getInstance().setCreateChannelOnSessionDialog(new CreateChannelOnSessionDialogStub());
  fFacility.getControlView().setSelection(session);
  fFacility.delay(TraceControlTestFacility.GUI_REFESH_DELAY);
  fFacility.executeCommand(""String_Node_Str"");
  fFacility.waitForJobs();
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  assertEquals(""String_Node_Str"",domains[0].getName());
  channels=domains[0].getChildren();
  assertNotNull(channels);
  assertEquals(1,channels.length);
  assertTrue(channels[0] instanceof TraceChannelComponent);
  channel=(TraceChannelComponent)channels[0];
  assertEquals(""String_Node_Str"",channel.getName());
  assertEquals(2,channel.getNumberOfSubBuffers());
  assertEquals(""String_Node_Str"",channel.getOutputType());
  assertEquals(false,channel.isOverwriteMode());
  assertEquals(100,channel.getReadTimer());
  assertEquals(TraceEnablement.ENABLED,channel.getState());
  assertEquals(16384,channel.getSubBufferSize());
  assertEquals(200,channel.getSwitchTimer());
  UstProviderComponent ustProvider=(UstProviderComponent)providers[1];
  assertEquals(""String_Node_Str"",ustProvider.getName());
  assertEquals(9379,ustProvider.getPid());
  events=ustProvider.getChildren();
  assertNotNull(events);
  assertEquals(2,events.length);
  baseEventInfo0=(BaseEventComponent)events[0];
  baseEventInfo1=(BaseEventComponent)events[1];
  ITraceControlComponent[] ustSelection={baseEventInfo0,baseEventInfo1};
  fFacility.getControlView().setSelection(ustSelection);
  fFacility.delay(TraceControlTestFacility.GUI_REFESH_DELAY);
  fFacility.executeCommand(""String_Node_Str"");
  fFacility.waitForJobs();
  domains=session.getChildren();
  channels=domains[0].getChildren();
  ITraceControlComponent[] ustEvents=channels[0].getChildren();
  assertEquals(2,ustEvents.length);
  event=(TraceEventComponent)ustEvents[0];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.TRACE_DEBUG_LINE,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  event=(TraceEventComponent)ustEvents[1];
  assertEquals(""String_Node_Str"",ustEvents[1].getName());
  assertEquals(TraceLogLevel.TRACE_DEBUG_LINE,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  fFacility.getControlView().setSelection(event);
  fFacility.delay(TraceControlTestFacility.GUI_REFESH_DELAY);
  fFacility.executeCommand(""String_Node_Str"");
  fFacility.waitForJobs();
  assertEquals(TraceEnablement.DISABLED,event.getState());
  fFacility.getControlView().setSelection(event);
  fFacility.executeCommand(""String_Node_Str"");
  fFacility.waitForJobs();
  assertEquals(TraceEnablement.ENABLED,event.getState());
  destroySession(session);
  assertEquals(0,groups[1].getChildren().length);
}","/** 
 * Run the TraceControlComponent.
 */
public void testTraceControlComponents() throws Exception {
  fProxy.setTestFile(fTestFile);
  fProxy.setScenario(SCEN_INIT_TEST);
  ITraceControlComponent root=TraceControlTestFacility.getInstance().getControlView().getTraceControlRoot();
  @SuppressWarnings(""String_Node_Str"") IHost host=new Host(new SystemProfile(""String_Node_Str"",true));
  host.setHostName(""String_Node_Str"");
  TargetNodeComponent node=new TargetNodeComponent(""String_Node_Str"",root,host,fProxy);
  root.addChild(node);
  node.connect();
  fFacility.waitForJobs();
  assertEquals(TargetNodeState.CONNECTED,node.getTargetNodeState());
  ITraceControlComponent[] groups=node.getChildren();
  assertNotNull(groups);
  assertEquals(2,groups.length);
  ITraceControlComponent[] providers=groups[0].getChildren();
  KernelProviderComponent kernelProvider=(KernelProviderComponent)providers[0];
  ITraceControlComponent[] events=kernelProvider.getChildren();
  assertNotNull(events);
  assertEquals(3,events.length);
  BaseEventComponent baseEventInfo0=(BaseEventComponent)events[0];
  BaseEventComponent baseEventInfo1=(BaseEventComponent)events[1];
  TraceControlDialogFactory.getInstance().setCreateSessionDialog(new CreateSessionDialogStub());
  TraceControlDialogFactory.getInstance().setGetEventInfoDialog(new GetEventInfoDialogStub());
  TraceControlDialogFactory.getInstance().setConfirmDialog(new DestroyConfirmDialogStub());
  fProxy.setScenario(SCEN_SCENARIO1_TEST);
  TraceSessionComponent session=createSession(groups[1]);
  assertNotNull(session);
  assertEquals(""String_Node_Str"",session.getName());
  assertEquals(""String_Node_Str"",session.getSessionPath());
  assertEquals(TraceSessionState.INACTIVE,session.getSessionState());
  ITraceControlComponent[] components={baseEventInfo0,baseEventInfo1};
  fFacility.getControlView().setSelection(components);
  fFacility.delay(TraceControlTestFacility.GUI_REFESH_DELAY);
  fFacility.executeCommand(""String_Node_Str"");
  fFacility.waitForJobs();
  ITraceControlComponent[] domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  assertEquals(""String_Node_Str"",domains[0].getName());
  ITraceControlComponent[] channels=domains[0].getChildren();
  assertNotNull(channels);
  assertEquals(1,channels.length);
  assertTrue(channels[0] instanceof TraceChannelComponent);
  TraceChannelComponent channel=(TraceChannelComponent)channels[0];
  assertEquals(""String_Node_Str"",channel.getName());
  assertEquals(4,channel.getNumberOfSubBuffers());
  assertEquals(""String_Node_Str"",channel.getOutputType());
  assertEquals(false,channel.isOverwriteMode());
  assertEquals(200,channel.getReadTimer());
  assertEquals(TraceEnablement.ENABLED,channel.getState());
  assertEquals(262144,channel.getSubBufferSize());
  assertEquals(0,channel.getSwitchTimer());
  ITraceControlComponent[] channel0Events=channel.getChildren();
  assertNotNull(channel0Events);
  assertEquals(2,channel0Events.length);
  assertTrue(channel0Events[0] instanceof TraceEventComponent);
  assertTrue(channel0Events[1] instanceof TraceEventComponent);
  TraceEventComponent event=(TraceEventComponent)channel0Events[0];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.TRACE_EMERG,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  TraceEventComponent event1=(TraceEventComponent)channel0Events[1];
  assertEquals(""String_Node_Str"",event1.getName());
  assertEquals(TraceLogLevel.TRACE_EMERG,event1.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event1.getEventType());
  assertEquals(TraceEnablement.ENABLED,event1.getState());
  ITraceControlComponent[] selection={event,event1};
  fFacility.getControlView().setSelection(selection);
  fFacility.delay(TraceControlTestFacility.GUI_REFESH_DELAY);
  fFacility.executeCommand(""String_Node_Str"");
  fFacility.waitForJobs();
  assertEquals(TraceEnablement.DISABLED,event.getState());
  assertEquals(TraceEnablement.DISABLED,event1.getState());
  fFacility.getControlView().setSelection(event1);
  fFacility.executeCommand(""String_Node_Str"");
  fFacility.waitForJobs();
  assertEquals(TraceEnablement.ENABLED,event1.getState());
  destroySession(session);
  assertEquals(0,groups[1].getChildren().length);
  fProxy.setScenario(SCEN_SCENARIO2_TEST);
  CreateSessionDialogStub sessionDialogStub=new CreateSessionDialogStub();
  sessionDialogStub.setSessionPath(""String_Node_Str"");
  TraceControlDialogFactory.getInstance().setCreateSessionDialog(sessionDialogStub);
  session=createSession(groups[1]);
  assertNotNull(session);
  assertEquals(""String_Node_Str"",session.getName());
  assertEquals(""String_Node_Str"",session.getSessionPath());
  assertEquals(TraceSessionState.INACTIVE,session.getSessionState());
  TraceControlDialogFactory.getInstance().setCreateChannelDialog(new CreateChannelDialogStub());
  fFacility.getControlView().setSelection(session);
  fFacility.delay(TraceControlTestFacility.GUI_REFESH_DELAY);
  fFacility.executeCommand(""String_Node_Str"");
  fFacility.waitForJobs();
  domains=session.getChildren();
  assertNotNull(domains);
  assertEquals(1,domains.length);
  assertEquals(""String_Node_Str"",domains[0].getName());
  channels=domains[0].getChildren();
  assertNotNull(channels);
  assertEquals(1,channels.length);
  assertTrue(channels[0] instanceof TraceChannelComponent);
  channel=(TraceChannelComponent)channels[0];
  assertEquals(""String_Node_Str"",channel.getName());
  assertEquals(2,channel.getNumberOfSubBuffers());
  assertEquals(""String_Node_Str"",channel.getOutputType());
  assertEquals(false,channel.isOverwriteMode());
  assertEquals(100,channel.getReadTimer());
  assertEquals(TraceEnablement.ENABLED,channel.getState());
  assertEquals(16384,channel.getSubBufferSize());
  assertEquals(200,channel.getSwitchTimer());
  UstProviderComponent ustProvider=(UstProviderComponent)providers[1];
  assertEquals(""String_Node_Str"",ustProvider.getName());
  assertEquals(9379,ustProvider.getPid());
  events=ustProvider.getChildren();
  assertNotNull(events);
  assertEquals(2,events.length);
  baseEventInfo0=(BaseEventComponent)events[0];
  baseEventInfo1=(BaseEventComponent)events[1];
  ITraceControlComponent[] ustSelection={baseEventInfo0,baseEventInfo1};
  fFacility.getControlView().setSelection(ustSelection);
  fFacility.delay(TraceControlTestFacility.GUI_REFESH_DELAY);
  fFacility.executeCommand(""String_Node_Str"");
  fFacility.waitForJobs();
  domains=session.getChildren();
  channels=domains[0].getChildren();
  ITraceControlComponent[] ustEvents=channels[0].getChildren();
  assertEquals(2,ustEvents.length);
  event=(TraceEventComponent)ustEvents[0];
  assertEquals(""String_Node_Str"",event.getName());
  assertEquals(TraceLogLevel.TRACE_DEBUG_LINE,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  event=(TraceEventComponent)ustEvents[1];
  assertEquals(""String_Node_Str"",ustEvents[1].getName());
  assertEquals(TraceLogLevel.TRACE_DEBUG_LINE,event.getLogLevel());
  assertEquals(TraceEventType.TRACEPOINT,event.getEventType());
  assertEquals(TraceEnablement.ENABLED,event.getState());
  fFacility.getControlView().setSelection(event);
  fFacility.delay(TraceControlTestFacility.GUI_REFESH_DELAY);
  fFacility.executeCommand(""String_Node_Str"");
  fFacility.waitForJobs();
  assertEquals(TraceEnablement.DISABLED,event.getState());
  fFacility.getControlView().setSelection(event);
  fFacility.executeCommand(""String_Node_Str"");
  fFacility.waitForJobs();
  assertEquals(TraceEnablement.ENABLED,event.getState());
  destroySession(session);
  assertEquals(0,groups[1].getChildren().length);
}",0.9988455618265776
92531,"@Override protected void okPressed(){
  fChannelInfo=new ChannelInfo(fChannelNameText.getText());
  fChannelInfo.setSubBufferSize(Long.parseLong(fSubBufferSizeText.getText()));
  fChannelInfo.setNumberOfSubBuffers(Integer.parseInt(fNumberOfSubBuffersText.getText()));
  fChannelInfo.setSwitchTimer(Long.parseLong(fSwitchTimerText.getText()));
  fChannelInfo.setReadTimer(Long.parseLong(fReadTimerText.getText()));
  fChannelInfo.setOverwriteMode(fOverwriteModeButton.getSelection());
  if (fKernelButton.getSelection() == true) {
    fIsKernel=true;
  }
 else {
    fIsKernel=false;
  }
  if (!fChannelInfo.getName().matches(""String_Node_Str"")) {
    MessageDialog.openError(getShell(),Messages.TraceControl_EnableChannelDialogTitle,Messages.TraceControl_InvalidChannelNameError + ""String_Node_Str"" + fChannelInfo.getName()+ ""String_Node_Str"");
    return;
  }
  if (fDomain != null && fDomain.containsChild(fChannelInfo.getName())) {
    MessageDialog.openError(getShell(),Messages.TraceControl_EnableChannelDialogTitle,Messages.TraceControl_ChannelAlreadyExistsError + ""String_Node_Str"" + fChannelInfo.getName()+ ""String_Node_Str"");
    return;
  }
  super.okPressed();
}","@Override protected void okPressed(){
  fChannelInfo=new ChannelInfo(fChannelNameText.getText());
  fChannelInfo.setSubBufferSize(Long.parseLong(fSubBufferSizeText.getText()));
  fChannelInfo.setNumberOfSubBuffers(Integer.parseInt(fNumberOfSubBuffersText.getText()));
  fChannelInfo.setSwitchTimer(Long.parseLong(fSwitchTimerText.getText()));
  fChannelInfo.setReadTimer(Long.parseLong(fReadTimerText.getText()));
  fChannelInfo.setOverwriteMode(fOverwriteModeButton.getSelection());
  fIsKernel=fKernelButton.getSelection();
  if (!fChannelInfo.getName().matches(""String_Node_Str"")) {
    MessageDialog.openError(getShell(),Messages.TraceControl_EnableChannelDialogTitle,Messages.TraceControl_InvalidChannelNameError + ""String_Node_Str"" + fChannelInfo.getName()+ ""String_Node_Str"");
    return;
  }
  if (fDomain != null && fDomain.containsChild(fChannelInfo.getName())) {
    MessageDialog.openError(getShell(),Messages.TraceControl_EnableChannelDialogTitle,Messages.TraceControl_ChannelAlreadyExistsError + ""String_Node_Str"" + fChannelInfo.getName()+ ""String_Node_Str"");
    return;
  }
  super.okPressed();
}",0.9636761487964988
92532,"@Override protected void okPressed(){
  if (fKernelButton.getSelection() == true) {
    fIsKernel=true;
  }
 else {
    fIsKernel=false;
  }
  if (fKernelComposite != null && !fKernelComposite.isValid()) {
    return;
  }
  if (fUstComposite != null && !fUstComposite.isValid()) {
    return;
  }
  super.okPressed();
}","@Override protected void okPressed(){
  fIsKernel=fKernelButton.getSelection();
  if (fKernelComposite != null && !fKernelComposite.isValid()) {
    return;
  }
  if (fUstComposite != null && !fUstComposite.isValid()) {
    return;
  }
  super.okPressed();
}",0.8561525129982669
92533,"/** 
 * Validates the kernel composite input data.
 * @return true if configured data is valid and can be retrieved.
 */
public boolean isValid(){
  fIsTracepoints=fTracepointsActivateButton.getSelection();
  fIsWildcard=fWildcardActivateButton.getSelection();
  fIsLogLevel=fLogLevelActivateButton.getSelection();
  fIsAllTracepoints=fTracepointsViewer.getChecked(fProviderGroup);
  Set<String> set=new HashSet<String>();
  Object[] checkedElements=fTracepointsViewer.getCheckedElements();
  fSelectedEvents=new ArrayList<String>();
  for (int i=0; i < checkedElements.length; i++) {
    ITraceControlComponent component=(ITraceControlComponent)checkedElements[i];
    if (!set.contains(component.getName()) && (component instanceof BaseEventComponent)) {
      set.add(component.getName());
      fSelectedEvents.add(component.getName());
    }
  }
  if (fLogLevelButton.getSelection()) {
    fLogLevelType=LogLevelType.LOGLEVEL;
  }
 else   if (fLogLevelOnlyButton.getSelection()) {
    fLogLevelType=LogLevelType.LOGLEVEL_ONLY;
  }
 else {
    fLogLevelType=LogLevelType.LOGLEVEL_NONE;
  }
  fLogLevelEventName=null;
  String temp=fLogLevelEventNameText.getText();
  if (!temp.matches(""String_Node_Str"") && !temp.matches(""String_Node_Str"")) {
    MessageDialog.openError(getShell(),Messages.TraceControl_EnableEventsDialogTitle,Messages.TraceControl_InvalidLogLevelEventNameError + ""String_Node_Str"" + temp+ ""String_Node_Str"");
    return false;
  }
  if (!temp.matches(""String_Node_Str"")) {
    fLogLevelEventName=temp;
  }
  fWildcard=null;
  temp=fWildcardText.getText();
  if (!temp.matches(""String_Node_Str"") && !temp.matches(""String_Node_Str"")) {
    MessageDialog.openError(getShell(),Messages.TraceControl_EnableEventsDialogTitle,Messages.TraceControl_InvalidWildcardError + ""String_Node_Str"" + temp+ ""String_Node_Str"");
    return false;
  }
  if (!temp.matches(""String_Node_Str"")) {
    fWildcard=temp;
  }
  return true;
}","/** 
 * Validates the UST composite input data.
 * @return true if configured data is valid and can be retrieved.
 */
public boolean isValid(){
  fIsTracepoints=fTracepointsActivateButton.getSelection();
  fIsWildcard=fWildcardActivateButton.getSelection();
  fIsLogLevel=fLogLevelActivateButton.getSelection();
  fIsAllTracepoints=fTracepointsViewer.getChecked(fProviderGroup);
  Set<String> set=new HashSet<String>();
  Object[] checkedElements=fTracepointsViewer.getCheckedElements();
  fSelectedEvents=new ArrayList<String>();
  for (int i=0; i < checkedElements.length; i++) {
    ITraceControlComponent component=(ITraceControlComponent)checkedElements[i];
    if (!set.contains(component.getName()) && (component instanceof BaseEventComponent)) {
      set.add(component.getName());
      fSelectedEvents.add(component.getName());
    }
  }
  if (fLogLevelButton.getSelection()) {
    fLogLevelType=LogLevelType.LOGLEVEL;
  }
 else   if (fLogLevelOnlyButton.getSelection()) {
    fLogLevelType=LogLevelType.LOGLEVEL_ONLY;
  }
 else {
    fLogLevelType=LogLevelType.LOGLEVEL_NONE;
  }
  fLogLevelEventName=null;
  String temp=fLogLevelEventNameText.getText();
  if (!temp.matches(""String_Node_Str"") && !temp.matches(""String_Node_Str"")) {
    MessageDialog.openError(getShell(),Messages.TraceControl_EnableEventsDialogTitle,Messages.TraceControl_InvalidLogLevelEventNameError + ""String_Node_Str"" + temp+ ""String_Node_Str"");
    return false;
  }
  if (!temp.matches(""String_Node_Str"")) {
    fLogLevelEventName=temp;
  }
  TraceLogLevel[] levels=TraceLogLevel.values();
  int id=fLogLevelCombo.getSelectionIndex();
  if ((id < 0) && fIsLogLevel) {
    MessageDialog.openError(getShell(),Messages.TraceControl_EnableEventsDialogTitle,Messages.TraceControl_InvalidLogLevel + ""String_Node_Str"" + temp+ ""String_Node_Str"");
    return false;
  }
 else {
    fLogLevel=levels[id];
  }
  fWildcard=null;
  temp=fWildcardText.getText();
  if (!temp.matches(""String_Node_Str"") && !temp.matches(""String_Node_Str"")) {
    MessageDialog.openError(getShell(),Messages.TraceControl_EnableEventsDialogTitle,Messages.TraceControl_InvalidWildcardError + ""String_Node_Str"" + temp+ ""String_Node_Str"");
    return false;
  }
  if (!temp.matches(""String_Node_Str"")) {
    fWildcard=temp;
  }
  return true;
}",0.8607235753133129
92534,"@Override protected Control createDialogArea(Composite parent){
  fDialogComposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,true);
  fDialogComposite.setLayout(layout);
  fDialogComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  fSessionsGroup=new Group(fDialogComposite,SWT.SHADOW_NONE);
  fSessionsGroup.setText(Messages.TraceControl_EnableEventsSessionGroupName);
  layout=new GridLayout(1,true);
  fSessionsGroup.setLayout(layout);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  fSessionsGroup.setLayoutData(data);
  fSessionsCombo=new CCombo(fSessionsGroup,SWT.READ_ONLY);
  fSessionsCombo.setToolTipText(Messages.TraceControl_EnableEventsSessionsTooltip);
  fSessionsCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  String items[]=new String[fSessions.length];
  for (int i=0; i < items.length; i++) {
    items[i]=String.valueOf(fSessions[i].getName());
  }
  fSessionsCombo.setItems(items);
  fSessionsCombo.setEnabled(fSessions.length > 0);
  fChannelsGroup=new Group(fDialogComposite,SWT.SHADOW_NONE);
  fChannelsGroup.setText(Messages.TraceControl_EnableEventsChannelGroupName);
  layout=new GridLayout(1,true);
  fChannelsGroup.setLayout(layout);
  data=new GridData(GridData.FILL_HORIZONTAL);
  fChannelsGroup.setLayoutData(data);
  fChannelsCombo=new CCombo(fChannelsGroup,SWT.READ_ONLY);
  fChannelsCombo.setToolTipText(Messages.TraceControl_EnableEventsChannelsTooltip);
  fChannelsCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  fChannelsCombo.setEnabled(false);
  fSessionsCombo.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      fSessionIndex=fSessionsCombo.getSelectionIndex();
      if (fSessionIndex >= 0) {
        TraceDomainComponent domain=null;
        TraceDomainComponent[] domains=fSessions[fSessionIndex].getDomains();
        for (int i=0; i < domains.length; i++) {
          if (domains[i].isKernel() == fIsKernel) {
            domain=domains[i];
            break;
          }
        }
        if (domain != null) {
          fChannels=domain.getChannels();
          String items[]=new String[fChannels.length];
          for (int i=0; i < items.length; i++) {
            items[i]=String.valueOf(fChannels[i].getName());
          }
          fChannelsCombo.setItems(items);
          fChannelsCombo.setEnabled(fChannels.length > 0);
        }
 else {
          fChannelsCombo.setItems(new String[0]);
          fChannelsCombo.setEnabled(false);
          fChannels=null;
        }
        fChannelsCombo.getParent().getParent().layout();
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  return fDialogComposite;
}","@Override protected Control createDialogArea(Composite parent){
  fDialogComposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,true);
  fDialogComposite.setLayout(layout);
  fDialogComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  fSessionsGroup=new Group(fDialogComposite,SWT.SHADOW_NONE);
  fSessionsGroup.setText(Messages.TraceControl_EnableEventsSessionGroupName);
  layout=new GridLayout(1,true);
  fSessionsGroup.setLayout(layout);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  fSessionsGroup.setLayoutData(data);
  fSessionsCombo=new CCombo(fSessionsGroup,SWT.READ_ONLY);
  fSessionsCombo.setToolTipText(Messages.TraceControl_EnableEventsSessionsTooltip);
  fSessionsCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  String items[]=new String[fSessions.length];
  for (int i=0; i < items.length; i++) {
    items[i]=String.valueOf(fSessions[i].getName());
  }
  fSessionsCombo.setItems(items);
  fSessionsCombo.setEnabled(fSessions.length > 0);
  fChannelsGroup=new Group(fDialogComposite,SWT.SHADOW_NONE);
  fChannelsGroup.setText(Messages.TraceControl_EnableEventsChannelGroupName);
  layout=new GridLayout(1,true);
  fChannelsGroup.setLayout(layout);
  data=new GridData(GridData.FILL_HORIZONTAL);
  fChannelsGroup.setLayoutData(data);
  fChannelsCombo=new CCombo(fChannelsGroup,SWT.READ_ONLY);
  fChannelsCombo.setToolTipText(Messages.TraceControl_EnableEventsChannelsTooltip);
  fChannelsCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  fChannelsCombo.setEnabled(false);
  fSessionsCombo.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      fSessionIndex=fSessionsCombo.getSelectionIndex();
      if (fSessionIndex >= 0) {
        TraceDomainComponent domain=null;
        TraceDomainComponent[] domains=fSessions[fSessionIndex].getDomains();
        for (int i=0; i < domains.length; i++) {
          if (domains[i].isKernel() == fIsKernel) {
            domain=domains[i];
            break;
          }
        }
        if (domain != null) {
          fChannels=domain.getChannels();
          String items[]=new String[fChannels.length];
          for (int i=0; i < items.length; i++) {
            items[i]=String.valueOf(fChannels[i].getName());
          }
          fChannelsCombo.setItems(items);
          fChannelsCombo.setEnabled(fChannels.length > 0);
        }
 else {
          fChannelsCombo.setItems(new String[0]);
          fChannelsCombo.setEnabled(false);
          fChannels=null;
        }
        fChannelsCombo.getParent().getParent().layout();
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  getShell().setMinimumSize(new Point(300,200));
  return fDialogComposite;
}",0.9911600216489266
92535,"/** 
 * @return create session dialog implementation
 */
public ICreateSessionDialog getCreateSessionDialog(){
  if (null == fCreateSessionDialog) {
    fCreateSessionDialog=new CreateSessionDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  }
  return fCreateSessionDialog;
}","/** 
 * @return create session dialog implementation
 */
public ICreateSessionDialog getCreateSessionDialog(){
  if (fCreateSessionDialog == null) {
    fCreateSessionDialog=new CreateSessionDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  }
  return fCreateSessionDialog;
}",0.92
92536,"/** 
 * @return get events info dialog implementation.
 */
public IGetEventInfoDialog getGetEventInfoDialog(){
  if (null == fGetEventInfoDialog) {
    fGetEventInfoDialog=new GetEventInfoDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  }
  return fGetEventInfoDialog;
}","/** 
 * @return get events info dialog implementation.
 */
public IGetEventInfoDialog getGetEventInfoDialog(){
  if (fGetEventInfoDialog == null) {
    fGetEventInfoDialog=new GetEventInfoDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  }
  return fGetEventInfoDialog;
}",0.9222972972972971
92537,"/** 
 * @return the confirmation dialog implementation
 */
public IConfirmDialog getConfirmDialog(){
  if (null == fConfirmDialog) {
    fConfirmDialog=new ConfirmDialog();
  }
  return fConfirmDialog;
}","/** 
 * @return the confirmation dialog implementation
 */
public IConfirmDialog getConfirmDialog(){
  if (fConfirmDialog == null) {
    fConfirmDialog=new ConfirmDialog();
  }
  return fConfirmDialog;
}",0.9113300492610836
92538,"/** 
 * @return new connection dialog
 */
public INewConnectionDialog getNewConnectionDialog(){
  if (null == fNewConnectionDialog) {
    fNewConnectionDialog=new NewConnectionDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  }
  return fNewConnectionDialog;
}","/** 
 * @return new connection dialog
 */
public INewConnectionDialog getNewConnectionDialog(){
  if (fNewConnectionDialog == null) {
    fNewConnectionDialog=new NewConnectionDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  }
  return fNewConnectionDialog;
}",0.9157894736842104
92539,"/** 
 * @return create channel dialog (on domain level)
 */
public ICreateChannelDialog getCreateChannelDialog(){
  if (null == fCreateChannelDialog) {
    fCreateChannelDialog=new CreateChannelDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  }
  return fCreateChannelDialog;
}","/** 
 * @return create channel dialog (on domain level)
 */
public ICreateChannelDialog getCreateChannelDialog(){
  if (fCreateChannelDialog == null) {
    fCreateChannelDialog=new CreateChannelDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  }
  return fCreateChannelDialog;
}",0.9207920792079208
92540,"/** 
 * @return enable events dialog implementation.
 */
public IEnableEventsDialog getEnableEventsDialog(){
  if (null == fEnableEventsDialog) {
    fEnableEventsDialog=new EnableEventsDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  }
  return fEnableEventsDialog;
}","/** 
 * @return enable events dialog implementation.
 */
public IEnableEventsDialog getEnableEventsDialog(){
  if (fEnableEventsDialog == null) {
    fEnableEventsDialog=new EnableEventsDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  }
  return fEnableEventsDialog;
}",0.9217687074829932
92541,"/** 
 * @return TraceControlDialogFactory instance
 */
public static TraceControlDialogFactory getInstance(){
  if (null == fInstance) {
    fInstance=new TraceControlDialogFactory();
  }
  return fInstance;
}","/** 
 * @return TraceControlDialogFactory instance
 */
public synchronized static TraceControlDialogFactory getInstance(){
  if (fInstance == null) {
    fInstance=new TraceControlDialogFactory();
  }
  return fInstance;
}",0.9095127610208816
92542,"/** 
 * Initialize the model and view before reloading items
 * @param boundaryRange
 * @param visibleRange
 * @param source
 */
protected void modelUpdateInit(TmfTimeRange boundaryRange,TmfTimeRange visibleRange,Object source){
  if (boundaryRange != null) {
    ItemContainer<?> itemContainer=getItemContainer();
    if (itemContainer != null) {
      itemContainer.clearItems();
      ITmfTimeAnalysisEntry[] itemArr=itemContainer.readItems();
      long startTime=boundaryRange.getStartTime().getValue();
      long endTime=boundaryRange.getEndTime().getValue();
      displayModel(itemArr,startTime,endTime,true,visibleRange.getStartTime().getValue(),visibleRange.getEndTime().getValue(),source);
    }
  }
  if (visibleRange != null) {
    ParamsUpdater updater=getParamsUpdater();
    if (updater != null) {
      updater.setEventsDiscarded(0);
      updater.update(visibleRange.getStartTime().getValue(),visibleRange.getEndTime().getValue());
    }
  }
}","/** 
 * Initialize the model and view before reloading items
 * @param boundaryRange
 * @param visibleRange
 * @param source
 */
protected void modelUpdateInit(TmfTimeRange boundaryRange,TmfTimeRange visibleRange,Object source){
  if (boundaryRange != null) {
    ItemContainer<?> itemContainer=getItemContainer();
    if (itemContainer != null) {
      itemContainer.clearItems();
      ITmfTimeAnalysisEntry[] itemArr=itemContainer.readItems();
      Arrays.sort(itemArr);
      long startTime=boundaryRange.getStartTime().getValue();
      long endTime=boundaryRange.getEndTime().getValue();
      displayModel(itemArr,startTime,endTime,true,visibleRange.getStartTime().getValue(),visibleRange.getEndTime().getValue(),source);
    }
  }
  if (visibleRange != null) {
    ParamsUpdater updater=getParamsUpdater();
    if (updater != null) {
      updater.setEventsDiscarded(0);
      updater.update(visibleRange.getStartTime().getValue(),visibleRange.getEndTime().getValue());
    }
  }
}",0.985655737704918
92543,"/** 
 * View preparation to override the current local information
 * @param timeRange - new total time range e.g. Experiment level
 * @param clearAllData
 */
protected void modelUpdatePrep(TmfTimeRange timeRange,boolean clearAllData){
  ItemContainer<?> itemContainer=getItemContainer();
  if (clearAllData) {
    itemContainer.clearItems();
  }
 else {
    itemContainer.clearChildren();
  }
  ITmfTimeAnalysisEntry[] itemArr=itemContainer.readItems();
  displayModel(itemArr,-1,-1,false,-1,-1,null);
  ParamsUpdater updater=getParamsUpdater();
  if (updater != null) {
    updater.setEventsDiscarded(0);
    if (timeRange != null) {
      updater.update(timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue());
    }
  }
}","/** 
 * View preparation to override the current local information
 * @param timeRange - new total time range e.g. Experiment level
 * @param clearAllData
 */
protected void modelUpdatePrep(TmfTimeRange timeRange,boolean clearAllData){
  ItemContainer<?> itemContainer=getItemContainer();
  if (clearAllData) {
    itemContainer.clearItems();
  }
 else {
    itemContainer.clearChildren();
  }
  ITmfTimeAnalysisEntry[] itemArr=itemContainer.readItems();
  Arrays.sort(itemArr);
  displayModel(itemArr,-1,-1,false,-1,-1,null);
  ParamsUpdater updater=getParamsUpdater();
  if (updater != null) {
    updater.setEventsDiscarded(0);
    if (timeRange != null) {
      updater.update(timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue());
    }
  }
}",0.9840425531914894
92544,"private void parseEventDeclaration(CommonTree eventDecl,EventDeclaration event) throws ParseException {
  assert((eventDecl.getType() == CTFParser.CTF_EXPRESSION_TYPE) || (eventDecl.getType() == CTFParser.CTF_EXPRESSION_VAL));
  assert(eventDecl.getChildCount() == 2);
  CommonTree leftNode=(CommonTree)eventDecl.getChild(0);
  assert(leftNode.getType() == CTFParser.CTF_LEFT);
  CommonTree rightNode=(CommonTree)eventDecl.getChild(1);
  assert(rightNode.getType() == CTFParser.CTF_RIGHT);
  List<CommonTree> leftStrings=leftNode.getChildren();
  assert(leftStrings != null);
  if (!isUnaryString(leftStrings.get(0))) {
    throw new ParseException(""String_Node_Str"");
  }
  String left=concatenateUnaryStrings(leftStrings);
  if (left.equals(""String_Node_Str"")) {
    if (event.nameIsSet()) {
      throw new ParseException(""String_Node_Str"");
    }
    String name=getEventName(rightNode);
    event.setName(name);
  }
 else   if (left.equals(""String_Node_Str"")) {
    if (event.idIsSet()) {
      throw new ParseException(""String_Node_Str"");
    }
    long id=getEventID(rightNode);
    event.setId(id);
  }
 else   if (left.equals(""String_Node_Str"")) {
    if (event.streamIsSet()) {
      throw new ParseException(""String_Node_Str"");
    }
    long streamId=getStreamID(rightNode);
    Stream stream=trace.getStream(streamId);
    if (stream == null) {
      throw new ParseException(""String_Node_Str"" + streamId + ""String_Node_Str"");
    }
    event.setStream(stream);
  }
 else   if (left.equals(""String_Node_Str"")) {
    if (event.contextIsSet()) {
      throw new ParseException(""String_Node_Str"");
    }
    CommonTree typeSpecifier=(CommonTree)rightNode.getChild(0);
    if (typeSpecifier.getType() != CTFParser.TYPE_SPECIFIER_LIST) {
      throw new ParseException(""String_Node_Str"");
    }
    IDeclaration contextDecl=parseTypeSpecifierList(typeSpecifier,null);
    if (!(contextDecl instanceof StructDeclaration)) {
      throw new ParseException(""String_Node_Str"");
    }
    event.setContext((StructDeclaration)contextDecl);
  }
 else   if (left.equals(""String_Node_Str"")) {
    if (event.fieldsIsSet()) {
      throw new ParseException(""String_Node_Str"");
    }
    CommonTree typeSpecifier=(CommonTree)rightNode.getChild(0);
    if (typeSpecifier.getType() != CTFParser.TYPE_SPECIFIER_LIST) {
      throw new ParseException(""String_Node_Str"");
    }
    IDeclaration fieldsDecl=parseTypeSpecifierList(typeSpecifier,null);
    if (!(fieldsDecl instanceof StructDeclaration)) {
      throw new ParseException(""String_Node_Str"");
    }
    StructDeclaration fields=(StructDeclaration)fieldsDecl;
    HashMap<String,IDeclaration> fieldMap=fields.getFields();
    List<String> fieldsList=fields.getFieldsList();
    HashMap<String,String> translationMap=new HashMap<String,String>();
    Set<String> keys=fieldMap.keySet();
    for (    String key : keys) {
      if (key.startsWith(""String_Node_Str"",0)) {
        final String newKey=key.substring(1);
        translationMap.put(key,newKey);
        fieldsList.set(fieldsList.indexOf(key),newKey);
      }
    }
    Iterator<Entry<String,String>> it=translationMap.entrySet().iterator();
    while (it.hasNext()) {
      final Entry<String,String> pairs=it.next();
      final String oldKey=pairs.getKey();
      final String newKey=pairs.getValue();
      final IDeclaration value=fieldMap.get(oldKey);
      fieldMap.put(newKey,value);
      fieldMap.remove(oldKey);
    }
    event.setFields(fields);
  }
 else {
    throw new ParseException(""String_Node_Str"" + left);
  }
}","private void parseEventDeclaration(CommonTree eventDecl,EventDeclaration event) throws ParseException {
  assert((eventDecl.getType() == CTFParser.CTF_EXPRESSION_TYPE) || (eventDecl.getType() == CTFParser.CTF_EXPRESSION_VAL));
  assert(eventDecl.getChildCount() == 2);
  CommonTree leftNode=(CommonTree)eventDecl.getChild(0);
  assert(leftNode.getType() == CTFParser.CTF_LEFT);
  CommonTree rightNode=(CommonTree)eventDecl.getChild(1);
  assert(rightNode.getType() == CTFParser.CTF_RIGHT);
  List<CommonTree> leftStrings=leftNode.getChildren();
  assert(leftStrings != null);
  if (!isUnaryString(leftStrings.get(0))) {
    throw new ParseException(""String_Node_Str"");
  }
  String left=concatenateUnaryStrings(leftStrings);
  if (left.equals(""String_Node_Str"")) {
    if (event.nameIsSet()) {
      throw new ParseException(""String_Node_Str"");
    }
    String name=getEventName(rightNode);
    event.setName(name);
  }
 else   if (left.equals(""String_Node_Str"")) {
    if (event.idIsSet()) {
      throw new ParseException(""String_Node_Str"");
    }
    long id=getEventID(rightNode);
    event.setId(id);
  }
 else   if (left.equals(""String_Node_Str"")) {
    if (event.streamIsSet()) {
      throw new ParseException(""String_Node_Str"");
    }
    long streamId=getStreamID(rightNode);
    Stream stream=trace.getStream(streamId);
    if (stream == null) {
      throw new ParseException(""String_Node_Str"" + streamId + ""String_Node_Str"");
    }
    event.setStream(stream);
  }
 else   if (left.equals(""String_Node_Str"")) {
    if (event.contextIsSet()) {
      throw new ParseException(""String_Node_Str"");
    }
    CommonTree typeSpecifier=(CommonTree)rightNode.getChild(0);
    if (typeSpecifier.getType() != CTFParser.TYPE_SPECIFIER_LIST) {
      throw new ParseException(""String_Node_Str"");
    }
    IDeclaration contextDecl=parseTypeSpecifierList(typeSpecifier,null);
    if (!(contextDecl instanceof StructDeclaration)) {
      throw new ParseException(""String_Node_Str"");
    }
    event.setContext((StructDeclaration)contextDecl);
  }
 else   if (left.equals(""String_Node_Str"")) {
    if (event.fieldsIsSet()) {
      throw new ParseException(""String_Node_Str"");
    }
    CommonTree typeSpecifier=(CommonTree)rightNode.getChild(0);
    if (typeSpecifier.getType() != CTFParser.TYPE_SPECIFIER_LIST) {
      throw new ParseException(""String_Node_Str"");
    }
    IDeclaration fieldsDecl=parseTypeSpecifierList(typeSpecifier,null);
    if (!(fieldsDecl instanceof StructDeclaration)) {
      throw new ParseException(""String_Node_Str"");
    }
    final StructDeclaration fields=(StructDeclaration)fieldsDecl;
    event.setFields(fields);
  }
 else {
    throw new ParseException(""String_Node_Str"" + left);
  }
}",0.8393484509741297
92545,"/** 
 * Parses a declaration found in a struct.
 * @param declaration A SV_DECLARATION node.
 * @param struct A struct declaration. (I know, little name clash here...)
 * @throws ParseException
 */
private void parseStructDeclaration(CommonTree declaration,StructDeclaration struct) throws ParseException {
  assert(declaration.getType() == CTFParser.SV_DECLARATION);
  List<CommonTree> children=declaration.getChildren();
  assert(children != null);
  CommonTree typeSpecifierListNode=(CommonTree)declaration.getFirstChildWithType(CTFParser.TYPE_SPECIFIER_LIST);
  assert(typeSpecifierListNode != null);
  CommonTree typeDeclaratorListNode=(CommonTree)declaration.getFirstChildWithType(CTFParser.TYPE_DECLARATOR_LIST);
  assert(typeDeclaratorListNode != null);
  List<CommonTree> typeDeclaratorList=typeDeclaratorListNode.getChildren();
  assert(typeDeclaratorList != null);
  for (  CommonTree typeDeclaratorNode : typeDeclaratorList) {
    assert(typeDeclaratorNode.getType() == CTFParser.TYPE_DECLARATOR);
    StringBuilder identifierSB=new StringBuilder();
    IDeclaration decl=parseTypeDeclarator(typeDeclaratorNode,typeSpecifierListNode,identifierSB);
    String fieldName=identifierSB.toString();
    if (identifierSB.charAt(0) == '_') {
      fieldName=identifierSB.substring(1);
    }
    if (struct.hasField(fieldName)) {
      throw new ParseException(""String_Node_Str"" + fieldName);
    }
    struct.addField(fieldName,decl);
  }
}","/** 
 * Parses a declaration found in a struct.
 * @param declaration A SV_DECLARATION node.
 * @param struct A struct declaration. (I know, little name clash here...)
 * @throws ParseException
 */
private void parseStructDeclaration(CommonTree declaration,StructDeclaration struct) throws ParseException {
  assert(declaration.getType() == CTFParser.SV_DECLARATION);
  List<CommonTree> children=declaration.getChildren();
  assert(children != null);
  CommonTree typeSpecifierListNode=(CommonTree)declaration.getFirstChildWithType(CTFParser.TYPE_SPECIFIER_LIST);
  assert(typeSpecifierListNode != null);
  CommonTree typeDeclaratorListNode=(CommonTree)declaration.getFirstChildWithType(CTFParser.TYPE_DECLARATOR_LIST);
  assert(typeDeclaratorListNode != null);
  List<CommonTree> typeDeclaratorList=typeDeclaratorListNode.getChildren();
  assert(typeDeclaratorList != null);
  for (  CommonTree typeDeclaratorNode : typeDeclaratorList) {
    assert(typeDeclaratorNode.getType() == CTFParser.TYPE_DECLARATOR);
    StringBuilder identifierSB=new StringBuilder();
    IDeclaration decl=parseTypeDeclarator(typeDeclaratorNode,typeSpecifierListNode,identifierSB);
    String fieldName=identifierSB.toString();
    if (struct.hasField(fieldName)) {
      throw new ParseException(""String_Node_Str"" + fieldName);
    }
    struct.addField(fieldName,decl);
  }
}",0.9678571428571427
92546,"public StringDefinition lookupString(String name){
  Definition def=definitions.get(name);
  return (StringDefinition)((def instanceof StringDefinition) ? def : null);
}","public StringDefinition lookupString(String name){
  Definition def=lookupDefinition(name);
  return (StringDefinition)((def instanceof StringDefinition) ? def : null);
}",0.9616519174041298
92547,"public ArrayDefinition lookupArray(String name){
  Definition def=definitions.get(name);
  return (ArrayDefinition)((def instanceof ArrayDefinition) ? def : null);
}","public ArrayDefinition lookupArray(String name){
  Definition def=lookupDefinition(name);
  return (ArrayDefinition)((def instanceof ArrayDefinition) ? def : null);
}",0.9607250755287008
92548,"public VariantDefinition lookupVariant(String name){
  Definition def=definitions.get(name);
  return (VariantDefinition)((def instanceof VariantDefinition) ? def : null);
}","public VariantDefinition lookupVariant(String name){
  Definition def=lookupDefinition(name);
  return (VariantDefinition)((def instanceof VariantDefinition) ? def : null);
}",0.962536023054755
92549,"public StructDefinition lookupStruct(String name){
  Definition def=definitions.get(name);
  return (StructDefinition)((def instanceof StructDefinition) ? def : null);
}","public StructDefinition lookupStruct(String name){
  Definition def=lookupDefinition(name);
  return (StructDefinition)((def instanceof StructDefinition) ? def : null);
}",0.9616519174041298
92550,"public IntegerDefinition lookupInteger(String name){
  Definition def=definitions.get(name);
  return (IntegerDefinition)((def instanceof IntegerDefinition) ? def : null);
}","public IntegerDefinition lookupInteger(String name){
  Definition def=lookupDefinition(name);
  return (IntegerDefinition)((def instanceof IntegerDefinition) ? def : null);
}",0.962536023054755
92551,"public EnumDefinition lookupEnum(String name){
  Definition def=definitions.get(name);
  return (EnumDefinition)((def instanceof EnumDefinition) ? def : null);
}","public EnumDefinition lookupEnum(String name){
  Definition def=lookupDefinition(name);
  return (EnumDefinition)((def instanceof EnumDefinition) ? def : null);
}",0.959752321981424
92552,"public SequenceDefinition lookupSequence(String name){
  Definition def=definitions.get(name);
  return (SequenceDefinition)((def instanceof SequenceDefinition) ? def : null);
}","public SequenceDefinition lookupSequence(String name){
  Definition def=lookupDefinition(name);
  return (SequenceDefinition)((def instanceof SequenceDefinition) ? def : null);
}",0.9633802816901408
92553,"@Override public Definition lookupDefinition(String lookupPath){
  return definitions.get(lookupPath);
}","@Override public Definition lookupDefinition(String lookupPath){
  Definition retVal=definitions.get(lookupPath);
  if (retVal == null) {
    retVal=definitions.get(""String_Node_Str"" + lookupPath);
  }
  return retVal;
}",0.5987654320987654
92554,"@Override public String toString(){
  StringBuilder builder=new StringBuilder();
  int size=this.declaration.getFieldsList().size();
  int n=0;
  if (size > 1) {
    builder.append(""String_Node_Str"");
  }
  ListIterator<String> listIterator=this.declaration.getFieldsList().listIterator();
  while (listIterator.hasNext()) {
    String field=listIterator.next();
    builder.append(definitions.get(field).toString());
    n++;
    if (n != size) {
      builder.append(""String_Node_Str"");
    }
  }
  if (size > 1) {
    builder.append(""String_Node_Str"");
  }
  return builder.toString();
}","@Override public String toString(){
  StringBuilder builder=new StringBuilder();
  int size=this.declaration.getFieldsList().size();
  int n=0;
  if (size > 1) {
    builder.append(""String_Node_Str"");
  }
  ListIterator<String> listIterator=this.declaration.getFieldsList().listIterator();
  while (listIterator.hasNext()) {
    String field=listIterator.next();
    builder.append(lookupDefinition(field).toString());
    n++;
    if (n != size) {
      builder.append(""String_Node_Str"");
    }
  }
  if (size > 1) {
    builder.append(""String_Node_Str"");
  }
  return builder.toString();
}",0.9889923793395428
92555,"/** 
 * Return the event in the trace according to the given context. Read it if necessary. <p> Similar (same?) as GetNextEvent except that calling ParseEvent twice will return the same event
 * @param context Current TmfContext where to get the event
 * @return The LttngEvent we read of null if no event are available
 * @see org.eclipse.linuxtools.lttng.core.event.LttngLocation
 * @see org.eclipse.linuxtools.tmf.core.trace.TmfContext
 */
@Override public synchronized LttngEvent parseEvent(ITmfContext context){
  if (PRINT_DEBUG) {
    System.out.println(""String_Node_Str"" + context.getLocation());
  }
  LttngEvent returnedEvent=null;
  LttngLocation curLocation=null;
  if (context.getLocation() == null) {
    curLocation=new LttngLocation();
    context.setLocation(curLocation);
  }
 else {
    curLocation=(LttngLocation)context.getLocation();
  }
  if (((!(curLocation.isLastOperationParse())) && ((!(curLocation.isLastOperationReadNext())))) || (previousLocation.getOperationTimeValue() != curLocation.getOperationTimeValue())) {
    if (previousLocation.getOperationTimeValue() != curLocation.getOperationTimeValue()) {
      if (PRINT_DEBUG) {
        System.out.println(""String_Node_Str"" + previousLocation.getOperationTimeValue() + ""String_Node_Str""+ curLocation.getOperationTimeValue()+ ""String_Node_Str"");
      }
      seekEvent(curLocation.getOperationTime());
    }
    returnedEvent=readEvent(curLocation);
  }
 else {
    returnedEvent=currentLttngEvent;
  }
  if (returnedEvent != null) {
    previousLocation.setOperationTime((LttngTimestamp)returnedEvent.getTimestamp());
    curLocation.setOperationTime((LttngTimestamp)returnedEvent.getTimestamp());
  }
  previousLocation.setLastOperationParse();
  curLocation.setLastOperationParse();
  return returnedEvent;
}","/** 
 * Return the event in the trace according to the given context. Read it if necessary. <p> Similar (same?) as GetNextEvent except that calling ParseEvent twice will return the same event
 * @param context Current TmfContext where to get the event
 * @return The LttngEvent we read of null if no event are available
 * @see org.eclipse.linuxtools.lttng.core.event.LttngLocation
 * @see org.eclipse.linuxtools.tmf.core.trace.TmfContext
 */
@Override public synchronized LttngEvent parseEvent(ITmfContext context){
  if (PRINT_DEBUG) {
    System.out.println(""String_Node_Str"" + context.getLocation());
  }
  LttngEvent returnedEvent=null;
  LttngLocation curLocation=null;
  if (context.getLocation() == null) {
    curLocation=new LttngLocation();
    context.setLocation(curLocation);
  }
 else {
    curLocation=(LttngLocation)context.getLocation();
  }
  if (!curLocation.isLastOperationParse() || (previousLocation.getOperationTimeValue() != curLocation.getOperationTimeValue())) {
    if (previousLocation.getOperationTimeValue() != curLocation.getOperationTimeValue()) {
      if (PRINT_DEBUG) {
        System.out.println(""String_Node_Str"" + previousLocation.getOperationTimeValue() + ""String_Node_Str""+ curLocation.getOperationTimeValue()+ ""String_Node_Str"");
      }
      seekEvent(curLocation.getOperationTime());
    }
    returnedEvent=readEvent(curLocation);
  }
 else {
    returnedEvent=currentLttngEvent;
  }
  if (returnedEvent != null) {
    previousLocation.setOperationTime((LttngTimestamp)returnedEvent.getTimestamp());
    curLocation.setOperationTime((LttngTimestamp)returnedEvent.getTimestamp());
  }
  previousLocation.setLastOperationParse();
  curLocation.setLastOperationParse();
  return returnedEvent;
}",0.9847025495750708
92556,"@Override public synchronized LttngEvent getNextEvent(ITmfContext context){
  if (PRINT_DEBUG) {
    System.out.println(""String_Node_Str"" + context.getLocation());
  }
  LttngEvent returnedEvent=null;
  LttngLocation curLocation=null;
  curLocation=(LttngLocation)context.getLocation();
  if (curLocation == null) {
    curLocation=getCurrentLocation(context);
  }
  if ((!(curLocation.isLastOperationParse())) || (previousLocation.getOperationTimeValue() != curLocation.getOperationTimeValue())) {
    if (previousLocation.getOperationTimeValue() != curLocation.getOperationTimeValue()) {
      if (PRINT_DEBUG) {
        System.out.println(""String_Node_Str"" + previousLocation.getOperationTimeValue() + ""String_Node_Str""+ curLocation.getOperationTimeValue()+ ""String_Node_Str"");
      }
      seekEvent(curLocation.getOperationTime());
    }
    returnedEvent=readNextEvent(curLocation);
  }
 else {
    returnedEvent=currentLttngEvent;
    previousLocation.resetLocationState();
    curLocation.resetLocationState();
  }
  if (returnedEvent != null) {
    setPreviousAndCurrentTimes(context,returnedEvent,curLocation);
  }
  return returnedEvent;
}","@Override public synchronized LttngEvent getNextEvent(ITmfContext context){
  if (PRINT_DEBUG) {
    System.out.println(""String_Node_Str"" + context.getLocation());
  }
  LttngEvent returnedEvent=null;
  LttngLocation curLocation=null;
  curLocation=(LttngLocation)context.getLocation();
  if (curLocation == null) {
    curLocation=getCurrentLocation(context);
  }
  if ((!(curLocation.isLastOperationParse())) || (previousLocation.getOperationTimeValue() != curLocation.getOperationTimeValue())) {
    if (previousLocation.getOperationTimeValue() != curLocation.getOperationTimeValue()) {
      if (PRINT_DEBUG) {
        System.out.println(""String_Node_Str"" + previousLocation.getOperationTimeValue() + ""String_Node_Str""+ curLocation.getOperationTimeValue()+ ""String_Node_Str"");
      }
      seekEvent(curLocation.getOperationTime());
    }
    returnedEvent=readNextEvent(curLocation);
  }
 else {
    returnedEvent=currentLttngEvent;
    previousLocation.setLastOperationReadNext();
    curLocation.setLastOperationReadNext();
  }
  if (returnedEvent != null) {
    setPreviousAndCurrentTimes(context,returnedEvent,curLocation);
  }
  return returnedEvent;
}",0.9464131374243734
92557,"/** 
 * Get the resource used for bookmarks on this experiment
 * @return the bookmarks resource or null if none is set
 */
public IResource getResource(){
  return fResource;
}","@Override public IResource getResource(){
  return fResource;
}",0.4666666666666667
92558,"/** 
 * Set the resource to be used for bookmarks on this experiment
 * @param resource the bookmarks resource
 */
public void setResource(IResource resource){
  fResource=resource;
}","@Override public void setResource(IResource resource){
  fResource=resource;
}",0.5440613026819924
92559,"/** 
 * Get the resource used for bookmarks on this trace
 * @return the bookmarks resource or null if none is set
 */
public IResource getResource(){
  return fResource;
}","@Override public IResource getResource(){
  return fResource;
}",0.4765957446808511
92560,"/** 
 * Set the resource to be used for bookmarks on this trace
 * @param resource the bookmarks resource
 */
public void setResource(IResource resource){
  fResource=resource;
}","@Override public void setResource(IResource resource){
  fResource=resource;
}",0.5546875
92561,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void init(IEditorSite site,IEditorInput input) throws PartInitException {
  fEditorAreaVisible=site.getPage().isEditorAreaVisible();
  if (input instanceof TmfEditorInput) {
    fResource=((TmfEditorInput)input).getResource();
    fTrace=((TmfEditorInput)input).getTrace();
  }
 else   if (input instanceof IFileEditorInput) {
    fResource=((IFileEditorInput)input).getFile();
    if (fResource == null) {
      throw new PartInitException(""String_Node_Str"" + input);
    }
    TmfExperiment currentExperiment=TmfExperiment.getCurrentExperiment();
    if (currentExperiment != null && fResource.equals(currentExperiment.getResource())) {
      fTrace=currentExperiment;
      super.setSite(site);
      super.setInput(input);
      return;
    }
    try {
      String traceTypeId=fResource.getPersistentProperty(TmfTraceElement.TRACETYPE);
      if (traceTypeId == null) {
        throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
      }
      if (traceTypeId.equals(TmfExperiment.class.getCanonicalName())) {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fResource.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fResource.getProject());
        if (project == null) {
          throw new PartInitException(Messages.OpenExperimentHandler_NoTraceType);
        }
        for (        ITmfProjectModelElement projectElement : project.getExperimentsFolder().getChildren()) {
          String traceName=fResource.getParent().getName();
          if (projectElement.getName().equals(traceName)) {
            TmfExperimentElement experimentElement=(TmfExperimentElement)projectElement;
            List<TmfTraceElement> traceEntries=experimentElement.getTraces();
            int nbTraces=traceEntries.size();
            int cacheSize=Integer.MAX_VALUE;
            ITmfTrace<?>[] traces=new ITmfTrace[nbTraces];
            for (int i=0; i < nbTraces; i++) {
              TmfTraceElement traceElement=traceEntries.get(i);
              ITmfTrace trace=traceElement.instantiateTrace();
              TmfEvent traceEvent=traceElement.instantiateEvent();
              if (trace == null || traceEvent == null) {
                for (int j=0; j < i; j++) {
                  traces[j].dispose();
                }
                throw new PartInitException(Messages.OpenExperimentHandler_NoTraceType);
              }
              try {
                trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass(),false);
              }
 catch (              FileNotFoundException e) {
              }
              if (trace instanceof TmfTrace) {
                ((TmfTrace)trace).setResource(traceElement.getResource());
              }
              cacheSize=Math.min(cacheSize,trace.getCacheSize());
              traces[i]=trace;
            }
            TmfExperiment experiment=new TmfExperiment(TmfEvent.class,experimentElement.getName(),traces,cacheSize);
            experiment.setResource(fResource);
            fTrace=experiment;
            TmfExperiment.setCurrentExperiment(experiment);
            TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
            break;
          }
        }
      }
 else       if (traceTypeId.equals(TmfTrace.class.getCanonicalName())) {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fResource.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fResource.getProject());
        for (        ITmfProjectModelElement projectElement : project.getTracesFolder().getChildren()) {
          String traceName=fResource.getParent().getName();
          if (projectElement.getName().equals(traceName)) {
            TmfTraceElement traceElement=(TmfTraceElement)projectElement;
            ITmfTrace trace=traceElement.instantiateTrace();
            TmfEvent traceEvent=traceElement.instantiateEvent();
            if (trace == null || traceEvent == null) {
              throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
            }
            try {
              trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass(),false);
            }
 catch (            FileNotFoundException e) {
            }
            if (trace instanceof TmfTrace) {
              ((TmfTrace)trace).setResource(traceElement.getResource());
            }
            ITmfTrace[] traces=new ITmfTrace[]{trace};
            TmfExperiment experiment=new TmfExperiment(traceEvent.getClass(),traceElement.getName(),traces,trace.getCacheSize());
            experiment.setResource(fResource);
            fTrace=experiment;
            TmfExperiment.setCurrentExperiment(experiment);
            TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
            break;
          }
        }
      }
 else {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fResource.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fResource.getProject());
        for (        ITmfProjectModelElement projectElement : project.getTracesFolder().getChildren()) {
          if (projectElement.getResource().equals(fResource)) {
            TmfTraceElement traceElement=(TmfTraceElement)projectElement;
            ITmfTrace trace=traceElement.instantiateTrace();
            TmfEvent traceEvent=traceElement.instantiateEvent();
            if (trace == null || traceEvent == null) {
              throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
            }
            try {
              trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass(),true);
            }
 catch (            FileNotFoundException e) {
            }
            if (trace instanceof TmfTrace) {
              ((TmfTrace)trace).setResource(traceElement.getResource());
            }
            ITmfTrace[] traces=new ITmfTrace[]{trace};
            TmfExperiment experiment=new TmfExperiment(traceEvent.getClass(),traceElement.getName(),traces,trace.getCacheSize());
            experiment.setResource(fResource);
            fTrace=experiment;
            TmfExperiment.setCurrentExperiment(experiment);
            TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
            break;
          }
        }
      }
    }
 catch (    InvalidRegistryObjectException e) {
      e.printStackTrace();
    }
catch (    PartInitException e) {
      throw e;
    }
catch (    CoreException e) {
      e.printStackTrace();
    }
    input=new TmfEditorInput(fResource,fTrace);
  }
 else {
    throw new PartInitException(""String_Node_Str"" + input.getClass());
  }
  if (fTrace == null) {
    throw new PartInitException(""String_Node_Str"" + fResource.getName());
  }
  super.setSite(site);
  super.setInput(input);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void init(IEditorSite site,IEditorInput input) throws PartInitException {
  fEditorAreaVisible=site.getPage().isEditorAreaVisible();
  if (input instanceof TmfEditorInput) {
    fFile=((TmfEditorInput)input).getFile();
    fTrace=((TmfEditorInput)input).getTrace();
  }
 else   if (input instanceof IFileEditorInput) {
    fFile=((IFileEditorInput)input).getFile();
    if (fFile == null) {
      throw new PartInitException(""String_Node_Str"" + input);
    }
    TmfExperiment currentExperiment=TmfExperiment.getCurrentExperiment();
    if (currentExperiment != null && fFile.equals(currentExperiment.getBookmarksFile())) {
      fTrace=currentExperiment;
      super.setSite(site);
      super.setInput(input);
      return;
    }
    try {
      String traceTypeId=fFile.getPersistentProperty(TmfTraceElement.TRACETYPE);
      if (traceTypeId == null) {
        throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
      }
      if (traceTypeId.equals(TmfExperiment.class.getCanonicalName())) {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        if (project == null) {
          throw new PartInitException(Messages.OpenExperimentHandler_NoTraceType);
        }
        for (        ITmfProjectModelElement projectElement : project.getExperimentsFolder().getChildren()) {
          String traceName=fFile.getParent().getName();
          if (projectElement.getName().equals(traceName)) {
            TmfExperimentElement experimentElement=(TmfExperimentElement)projectElement;
            List<TmfTraceElement> traceEntries=experimentElement.getTraces();
            int nbTraces=traceEntries.size();
            int cacheSize=Integer.MAX_VALUE;
            ITmfTrace<?>[] traces=new ITmfTrace[nbTraces];
            for (int i=0; i < nbTraces; i++) {
              TmfTraceElement traceElement=traceEntries.get(i);
              ITmfTrace trace=traceElement.instantiateTrace();
              TmfEvent traceEvent=traceElement.instantiateEvent();
              if (trace == null || traceEvent == null) {
                for (int j=0; j < i; j++) {
                  traces[j].dispose();
                }
                throw new PartInitException(Messages.OpenExperimentHandler_NoTraceType);
              }
              try {
                trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass(),false);
              }
 catch (              FileNotFoundException e) {
              }
              trace.setResource(traceElement.getResource());
              cacheSize=Math.min(cacheSize,trace.getCacheSize());
              traces[i]=trace;
            }
            TmfExperiment experiment=new TmfExperiment(TmfEvent.class,experimentElement.getName(),traces,cacheSize);
            experiment.setBookmarksFile(fFile);
            fTrace=experiment;
            TmfExperiment.setCurrentExperiment(experiment);
            TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
            break;
          }
        }
      }
 else       if (traceTypeId.equals(TmfTrace.class.getCanonicalName())) {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        for (        ITmfProjectModelElement projectElement : project.getTracesFolder().getChildren()) {
          String traceName=fFile.getParent().getName();
          if (projectElement.getName().equals(traceName)) {
            TmfTraceElement traceElement=(TmfTraceElement)projectElement;
            ITmfTrace trace=traceElement.instantiateTrace();
            TmfEvent traceEvent=traceElement.instantiateEvent();
            if (trace == null || traceEvent == null) {
              throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
            }
            try {
              trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass(),false);
            }
 catch (            FileNotFoundException e) {
            }
            trace.setResource(traceElement.getResource());
            ITmfTrace[] traces=new ITmfTrace[]{trace};
            TmfExperiment experiment=new TmfExperiment(traceEvent.getClass(),traceElement.getName(),traces,trace.getCacheSize());
            experiment.setBookmarksFile(fFile);
            fTrace=experiment;
            TmfExperiment.setCurrentExperiment(experiment);
            TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
            break;
          }
        }
      }
 else {
        TmfNavigatorContentProvider ncp=new TmfNavigatorContentProvider();
        ncp.getChildren(fFile.getProject());
        TmfProjectElement project=TmfProjectRegistry.getProject(fFile.getProject());
        for (        ITmfProjectModelElement projectElement : project.getTracesFolder().getChildren()) {
          if (projectElement.getResource().equals(fFile)) {
            TmfTraceElement traceElement=(TmfTraceElement)projectElement;
            ITmfTrace trace=traceElement.instantiateTrace();
            TmfEvent traceEvent=traceElement.instantiateEvent();
            if (trace == null || traceEvent == null) {
              throw new PartInitException(Messages.OpenTraceHandler_NoTraceType);
            }
            try {
              trace.initTrace(traceElement.getName(),traceElement.getLocation().getPath(),traceEvent.getClass(),true);
            }
 catch (            FileNotFoundException e) {
            }
            if (trace instanceof TmfTrace) {
              ((TmfTrace)trace).setResource(traceElement.getResource());
            }
            ITmfTrace[] traces=new ITmfTrace[]{trace};
            TmfExperiment experiment=new TmfExperiment(traceEvent.getClass(),traceElement.getName(),traces,trace.getCacheSize());
            experiment.setBookmarksFile(fFile);
            fTrace=experiment;
            TmfExperiment.setCurrentExperiment(experiment);
            TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
            break;
          }
        }
      }
    }
 catch (    InvalidRegistryObjectException e) {
      e.printStackTrace();
    }
catch (    PartInitException e) {
      throw e;
    }
catch (    CoreException e) {
      e.printStackTrace();
    }
    input=new TmfEditorInput(fFile,fTrace);
  }
 else {
    throw new PartInitException(""String_Node_Str"" + input.getClass());
  }
  if (fTrace == null) {
    throw new PartInitException(""String_Node_Str"" + fFile.getName());
  }
  super.setSite(site);
  super.setInput(input);
}",0.9248853211009176
92562,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((fResource == null) ? 0 : fResource.hashCode());
  result=prime * result + ((fTrace == null) ? 0 : fTrace.hashCode());
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((fFile == null) ? 0 : fFile.getLocation().hashCode());
  result=prime * result + ((fTrace == null) ? 0 : fTrace.getName().hashCode());
  return result;
}",0.9053497942386832
92563,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (obj instanceof TmfEditorInput) {
    return fResource.equals(((TmfEditorInput)obj).fResource);
  }
 else   if (obj instanceof IFileEditorInput) {
    return ((IFileEditorInput)obj).getFile().equals(fResource);
  }
 else   if (obj instanceof FileStoreEditorInput) {
    return ((FileStoreEditorInput)obj).getURI().equals(fResource.getRawLocationURI());
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  TmfEditorInput other=(TmfEditorInput)obj;
  if (fFile == null) {
    if (other.fFile != null)     return false;
  }
 else   if (!fFile.getLocation().equals(other.fFile.getLocation()))   return false;
  if (fTrace == null) {
    if (other.fTrace != null)     return false;
  }
 else   if (!fTrace.getName().equals(other.fTrace.getName()))   return false;
  return true;
}",0.3190066857688634
92564,"@Override public boolean exists(){
  return fResource.exists();
}","@Override public boolean exists(){
  return fFile.exists();
}",0.9206349206349206
92565,"public TmfEditorInput(IResource resource,ITmfTrace<?> trace){
  fResource=resource;
  fTrace=trace;
}","public TmfEditorInput(IFile file,ITmfTrace<?> trace){
  fFile=file;
  fTrace=trace;
}",0.7849462365591398
92566,"@Override public ImageDescriptor getImageDescriptor(){
  if (fResource instanceof IFile) {
    IFile file=(IFile)fResource;
    IContentType contentType=IDE.getContentType(file);
    return PlatformUI.getWorkbench().getEditorRegistry().getImageDescriptor(file.getName(),contentType);
  }
  return null;
}","@Override public ImageDescriptor getImageDescriptor(){
  IContentType contentType=IDE.getContentType(fFile);
  return PlatformUI.getWorkbench().getEditorRegistry().getImageDescriptor(fFile.getName(),contentType);
}",0.6525096525096525
92567,"@Override public String getToolTipText(){
  return fResource.getFullPath().makeRelative().toString();
}","@Override public String getToolTipText(){
  return fFile.getFullPath().makeRelative().toString();
}",0.9504950495049505
92568,"/** 
 * Position on the first event in the tracefile.<p> The function return the read status after the first event.<p> A status different of EOK probably means there is no event associated to this tracefile.
 * @return LTT read status, as defined in Jni_C_Constant
 * @see org.eclipse.linuxtools.lttng.jni.common.Jni_C_Constant
 */
public int positionToFirstEvent(){
  eventState=ltt_positionToFirstEvent(tracefilePtr.getLibraryId(),tracefilePtr.getPointer());
  return eventState;
}","/** 
 * Position on the first event in the tracefile.<p> The function return the read status after the first event.<p> A status different of EOK probably means there is no event associated to this tracefile.
 * @return LTT read status, as defined in Jni_C_Constant
 * @see org.eclipse.linuxtools.lttng.jni.common.Jni_C_Constant
 */
protected int positionToFirstEvent(){
  eventState=ltt_positionToFirstEvent(tracefilePtr.getLibraryId(),tracefilePtr.getPointer());
  return eventState;
}",0.9865841073271414
92569,"@Override public boolean equals(Object other){
  if (this == other)   return true;
  if (other == null)   return false;
  if (!(other instanceof JniEvent))   return false;
  JniEvent event=(JniEvent)other;
  return (getEventTime().equals(event.getEventTime()) && parentTracefile.equals(event.parentTracefile));
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!(obj instanceof JniEvent)) {
    return false;
  }
  JniEvent other=(JniEvent)obj;
  if (eventTime == null) {
    if (other.eventTime != null) {
      return false;
    }
  }
 else   if (!eventTime.equals(other.eventTime)) {
    return false;
  }
  if (parentTracefile == null) {
    if (other.parentTracefile != null) {
      return false;
    }
  }
 else   if (!parentTracefile.equals(other.parentTracefile)) {
    return false;
  }
  return true;
}",0.1711111111111111
92570,"public TmfEventField[] extractItemFields(){
  if (fData != null)   processData();
  return fColumnData;
}","public TmfEventField[] extractItemFields(){
  if (fData != null)   processData();
  return Arrays.copyOf(fColumnData,fColumnData.length);
}",0.860655737704918
92571,"public CustomEventContent(CustomEvent parent,String content){
  super(ITmfEventField.ROOT_FIELD_ID,content);
  fParent=parent;
}","public CustomEventContent(CustomEvent parent,String content){
  super(ITmfEventField.ROOT_FIELD_ID,content);
}",0.9243697478991596
92572,"@Override public TmfContext seekLocation(double ratio){
  try {
    BufferedRandomAccessFile raFile=new BufferedRandomAccessFile(getPath(),""String_Node_Str"");
    long pos=(long)(ratio * raFile.length());
    while (pos > 0) {
      raFile.seek(pos - 1);
      if (raFile.read() == '\n')       break;
      pos--;
    }
    ITmfLocation<?> location=new TmfLocation<Long>(new Long(pos));
    TmfContext context=seekLocation(location);
    context.setRank(ITmfContext.UNKNOWN_RANK);
    return context;
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return new CustomTxtTraceContext(NULL_LOCATION,ITmfContext.INITIAL_RANK);
  }
catch (  IOException e) {
    e.printStackTrace();
    return new CustomTxtTraceContext(NULL_LOCATION,ITmfContext.INITIAL_RANK);
  }
}","@Override public TmfContext seekLocation(double ratio){
  try {
    BufferedRandomAccessFile raFile=new BufferedRandomAccessFile(getPath(),""String_Node_Str"");
    long pos=(long)(ratio * raFile.length());
    while (pos > 0) {
      raFile.seek(pos - 1);
      if (raFile.read() == '\n')       break;
      pos--;
    }
    ITmfLocation<?> location=new TmfLocation<Long>(pos);
    TmfContext context=seekLocation(location);
    context.setRank(ITmfContext.UNKNOWN_RANK);
    return context;
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return new CustomTxtTraceContext(NULL_LOCATION,ITmfContext.INITIAL_RANK);
  }
catch (  IOException e) {
    e.printStackTrace();
    return new CustomTxtTraceContext(NULL_LOCATION,ITmfContext.INITIAL_RANK);
  }
}",0.9897172236503856
92573,"public CustomXmlEvent extractEvent(Element element,InputElement inputElement){
  CustomXmlEvent event=new CustomXmlEvent(fDefinition,this,TmfTimestamp.ZERO,""String_Node_Str"",fEventType,""String_Node_Str"");
  event.setContent(new CustomEventContent(event,new String()));
  parseElement(element,event,inputElement);
  return event;
}","public CustomXmlEvent extractEvent(Element element,InputElement inputElement){
  CustomXmlEvent event=new CustomXmlEvent(fDefinition,this,TmfTimestamp.ZERO,""String_Node_Str"",fEventType,""String_Node_Str"");
  event.setContent(new CustomEventContent(event,""String_Node_Str""));
  parseElement(element,event,inputElement);
  return event;
}",0.974436090225564
92574,"@Override public TmfContext seekLocation(double ratio){
  try {
    BufferedRandomAccessFile raFile=new BufferedRandomAccessFile(getPath(),""String_Node_Str"");
    long pos=(long)(ratio * raFile.length());
    while (pos > 0) {
      raFile.seek(pos - 1);
      if (raFile.read() == '\n')       break;
      pos--;
    }
    ITmfLocation<?> location=new TmfLocation<Long>(new Long(pos));
    TmfContext context=seekLocation(location);
    context.setRank(ITmfContext.UNKNOWN_RANK);
    return context;
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return new CustomXmlTraceContext(NULL_LOCATION,ITmfContext.INITIAL_RANK);
  }
catch (  IOException e) {
    e.printStackTrace();
    return new CustomXmlTraceContext(NULL_LOCATION,ITmfContext.INITIAL_RANK);
  }
}","@Override public TmfContext seekLocation(double ratio){
  try {
    BufferedRandomAccessFile raFile=new BufferedRandomAccessFile(getPath(),""String_Node_Str"");
    long pos=(long)(ratio * raFile.length());
    while (pos > 0) {
      raFile.seek(pos - 1);
      if (raFile.read() == '\n')       break;
      pos--;
    }
    ITmfLocation<?> location=new TmfLocation<Long>(pos);
    TmfContext context=seekLocation(location);
    context.setRank(ITmfContext.UNKNOWN_RANK);
    return context;
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return new CustomXmlTraceContext(NULL_LOCATION,ITmfContext.INITIAL_RANK);
  }
catch (  IOException e) {
    e.printStackTrace();
    return new CustomXmlTraceContext(NULL_LOCATION,ITmfContext.INITIAL_RANK);
  }
}",0.9897172236503856
92575,"private void updatePreviews(boolean updateAll){
  if (inputText == null) {
    return;
  }
  inputText.setStyleRanges(new StyleRange[]{});
  if (selectedElement == null) {
    return;
  }
  timeStampValue=null;
  timeStampFormat=null;
  logEntriesCount=0;
  logEntryFound=false;
  selectedElement.updatePreview();
  if (timeStampValue != null && timeStampFormat != null) {
    try {
      SimpleDateFormat dateFormat=new SimpleDateFormat(timeStampFormat);
      Date date=dateFormat.parse(timeStampValue);
      dateFormat=new SimpleDateFormat(timeStampOutputFormatText.getText().trim());
      timeStampPreviewText.setText(dateFormat.format(date));
    }
 catch (    ParseException e) {
      timeStampPreviewText.setText(""String_Node_Str"" + timeStampValue + ""String_Node_Str""+ timeStampFormat+ ""String_Node_Str"");
    }
catch (    IllegalArgumentException e) {
      timeStampPreviewText.setText(""String_Node_Str"");
    }
  }
 else {
    timeStampPreviewText.setText(""String_Node_Str"");
  }
}","private void updatePreviews(boolean updateAll){
  if (inputText == null) {
    return;
  }
  inputText.setStyleRanges(new StyleRange[]{});
  if (selectedElement == null) {
    return;
  }
  initValues();
  selectedElement.updatePreview();
  if (timeStampValue != null && timeStampFormat != null) {
    try {
      SimpleDateFormat dateFormat=new SimpleDateFormat(timeStampFormat);
      Date date=dateFormat.parse(timeStampValue);
      dateFormat=new SimpleDateFormat(timeStampOutputFormatText.getText().trim());
      timeStampPreviewText.setText(dateFormat.format(date));
    }
 catch (    ParseException e) {
      timeStampPreviewText.setText(""String_Node_Str"" + timeStampValue + ""String_Node_Str""+ timeStampFormat+ ""String_Node_Str"");
    }
catch (    IllegalArgumentException e) {
      timeStampPreviewText.setText(""String_Node_Str"");
    }
  }
 else {
    timeStampPreviewText.setText(""String_Node_Str"");
  }
}",0.9534762153685312
92576,"private String getSelectionText(){
  InputStream inputStream=null;
  if (this.selection instanceof IStructuredSelection) {
    Object selection=((IStructuredSelection)this.selection).getFirstElement();
    if (selection instanceof IFile) {
      IFile file=(IFile)selection;
      try {
        inputStream=file.getContents();
      }
 catch (      CoreException e) {
        return ""String_Node_Str"";
      }
    }
  }
  if (inputStream != null) {
    try {
      BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream));
      StringBuilder sb=new StringBuilder();
      String line=null;
      while ((line=reader.readLine()) != null) {
        sb.append(line + ""String_Node_Str"");
      }
      parseXmlInput(sb.toString());
      return sb.toString();
    }
 catch (    IOException e) {
      return ""String_Node_Str"";
    }
  }
  return ""String_Node_Str"";
}","private String getSelectionText(){
  InputStream inputStream=null;
  if (this.selection instanceof IStructuredSelection) {
    Object selection=((IStructuredSelection)this.selection).getFirstElement();
    if (selection instanceof IFile) {
      IFile file=(IFile)selection;
      try {
        inputStream=file.getContents();
      }
 catch (      CoreException e) {
        return ""String_Node_Str"";
      }
    }
  }
  if (inputStream != null) {
    BufferedReader reader=null;
    try {
      reader=new BufferedReader(new InputStreamReader(inputStream));
      StringBuilder sb=new StringBuilder();
      String line=null;
      while ((line=reader.readLine()) != null) {
        sb.append(line + ""String_Node_Str"");
      }
      parseXmlInput(sb.toString());
      reader.close();
      return sb.toString();
    }
 catch (    IOException e) {
      return ""String_Node_Str"";
    }
  }
  return ""String_Node_Str"";
}",0.9617728531855956
92577,"@Override public void run(){
  if ((scrollFrame != null) && (!scrollFrame.isDisposed())) {
    updateScrolls(scrollFrame);
  }
}","@Override public void run(){
  tsfviewer.setTimeBounds(range.getStartTime().getValue(),range.getEndTime().getValue());
}",0.4112903225806452
92578,"@Override public void run(){
  if ((tsfviewer != null) && (!tsfviewer.getControl().isDisposed())) {
    tsfviewer.display(items,startBoundTime,endBoundTime,updateTimeBounds);
    if (startVisibleWindow > -1 && endVisibleWindow > -1) {
      tsfviewer.setSelectVisTimeWindow(startVisibleWindow,endVisibleWindow,source);
    }
    tsfviewer.resizeControls();
  }
}","@Override public void run(){
  tsfviewer.setTimeBounds(range.getStartTime().getValue(),range.getEndTime().getValue());
}",0.2821576763485477
92579,"@SuppressWarnings(""String_Node_Str"") protected void indexExperiment(boolean waitForCompletion,final int index,final TmfTimeRange timeRange){
synchronized (fCheckpoints) {
    if (fIndexing) {
      return;
    }
    fIndexing=true;
  }
  final Job job=new Job(""String_Node_Str"" + getName() + ""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      while (!monitor.isCanceled()) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          return Status.OK_STATUS;
        }
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
  ITmfEventRequest<ITmfEvent> request=new TmfEventRequest<ITmfEvent>(ITmfEvent.class,timeRange,index,TmfDataRequest.ALL_DATA,fIndexPageSize,ITmfDataRequest.ExecutionType.BACKGROUND){
    ITmfTimestamp startTime=(fTimeRange == TmfTimeRange.Null) ? null : fTimeRange.getStartTime();
    ITmfTimestamp lastTime=(fTimeRange == TmfTimeRange.Null) ? null : fTimeRange.getEndTime();
    long initialNbEvents=fNbEvents;
    @Override public void handleStarted(){
      super.handleStarted();
    }
    @Override public void handleData(    ITmfEvent event){
      super.handleData(event);
      if (event != null) {
        ITmfTimestamp ts=event.getTimestamp();
        if (startTime == null)         startTime=ts.clone();
        lastTime=ts.clone();
        if ((getNbRead() % fIndexPageSize) == 1 && getNbRead() != 1) {
          updateExperiment();
        }
      }
    }
    @Override public void handleSuccess(){
      if (getRange() != TmfTimeRange.Eternity) {
        lastTime=getRange().getEndTime();
      }
      updateExperiment();
      super.handleSuccess();
    }
    @Override public void handleCompleted(){
      job.cancel();
      super.handleCompleted();
synchronized (fCheckpoints) {
        fIndexing=false;
        if (fIndexingPendingRange != TmfTimeRange.Null) {
          indexExperiment(false,(int)fNbEvents,fIndexingPendingRange);
          fIndexingPendingRange=TmfTimeRange.Null;
        }
      }
    }
    private void updateExperiment(){
      int nbRead=getNbRead();
      if (startTime != null) {
        fTimeRange=new TmfTimeRange(startTime,lastTime.clone());
      }
      if (nbRead != 0) {
        fNbEvents=initialNbEvents + nbRead;
        notifyListeners();
      }
    }
  }
;
  sendRequest((ITmfDataRequest<T>)request);
  if (waitForCompletion)   try {
    request.waitForCompletion();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","@SuppressWarnings(""String_Node_Str"") protected void indexExperiment(boolean waitForCompletion,final int index,final TmfTimeRange timeRange){
synchronized (fCheckpoints) {
    if (fIndexing) {
      return;
    }
    fIndexing=true;
  }
  final Job job=new Job(""String_Node_Str"" + getName() + ""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      while (!monitor.isCanceled()) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          return Status.OK_STATUS;
        }
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
  ITmfEventRequest<ITmfEvent> request=new TmfEventRequest<ITmfEvent>(ITmfEvent.class,timeRange,index,TmfDataRequest.ALL_DATA,fIndexPageSize,ITmfDataRequest.ExecutionType.BACKGROUND){
    ITmfTimestamp startTime=(fTimeRange == TmfTimeRange.Null) ? null : fTimeRange.getStartTime();
    ITmfTimestamp lastTime=(fTimeRange == TmfTimeRange.Null) ? null : fTimeRange.getEndTime();
    long initialNbEvents=fNbEvents;
    @Override public void handleStarted(){
      super.handleStarted();
    }
    @Override public void handleData(    ITmfEvent event){
      super.handleData(event);
      if (event != null) {
        ITmfTimestamp ts=event.getTimestamp();
        if (startTime == null)         startTime=ts.clone();
        lastTime=ts.clone();
        if ((getNbRead() % fIndexPageSize) == 1 && getNbRead() != 1) {
          updateExperiment();
        }
      }
    }
    @Override public void handleSuccess(){
      if (getRange().getEndTime() != TmfTimestamp.BigCrunch) {
        lastTime=getRange().getEndTime();
      }
      updateExperiment();
      super.handleSuccess();
    }
    @Override public void handleCompleted(){
      job.cancel();
      super.handleCompleted();
synchronized (fCheckpoints) {
        fIndexing=false;
        if (fIndexingPendingRange != TmfTimeRange.Null) {
          indexExperiment(false,(int)fNbEvents,fIndexingPendingRange);
          fIndexingPendingRange=TmfTimeRange.Null;
        }
      }
    }
    private void updateExperiment(){
      int nbRead=getNbRead();
      if (startTime != null) {
        fTimeRange=new TmfTimeRange(startTime,lastTime.clone());
      }
      if (nbRead != 0) {
        fNbEvents=initialNbEvents + nbRead;
        notifyListeners();
      }
    }
  }
;
  sendRequest((ITmfDataRequest<T>)request);
  if (waitForCompletion)   try {
    request.waitForCompletion();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}",0.99176147508827
92580,"@Override public void handleSuccess(){
  if (getRange() != TmfTimeRange.Eternity) {
    lastTime=getRange().getEndTime();
  }
  updateExperiment();
  super.handleSuccess();
}","@Override public void handleSuccess(){
  if (getRange().getEndTime() != TmfTimestamp.BigCrunch) {
    lastTime=getRange().getEndTime();
  }
  updateExperiment();
  super.handleSuccess();
}",0.8950276243093923
92581,"void setTimeBounds(){
  _time0_=_beginTime;
  if (_time0_ < 0)   _time0_=0;
  _time1_=_endTime;
  if (!_timeRangeFixed) {
    _time0=_time0_;
    _time1=_time1_;
  }
  if (_time1 - _time0 < _minTimeInterval) {
    _time1=_time0 + _minTimeInterval;
  }
}","@Override public void setTimeBounds(long beginTime,long endTime){
  _beginTime=beginTime;
  _endTime=endTime;
  _time0_=beginTime;
  _time1_=endTime;
  _stateCtrl.adjustScrolls();
  _stateCtrl.redraw();
  _timeScaleCtrl.redraw();
}",0.1859504132231405
92582,"@SuppressWarnings(""String_Node_Str"") @Override public ITmfContext armRequest(final ITmfDataRequest<LttngSyntheticEvent> request){
  if (!(request instanceof ITmfEventRequest<?>)) {
    request.cancel();
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  if (fExperiment == null) {
    TraceDebug.debug(""String_Node_Str"");
    request.cancel();
    return null;
  }
  reset(fExperiment);
  if (fEventProviderRequests.size() < 1) {
    request.cancel();
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  fmainRequest=request;
  ITmfEventRequest<LttngSyntheticEvent> eventRequest=(ITmfEventRequest<LttngSyntheticEvent>)fmainRequest;
  TmfTimeRange reqWindow=eventRequest.getRange();
  TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
  TmfExperiment<LttngEvent> experiment=(TmfExperiment<LttngEvent>)fExperiment.getValue();
  experiment.startSynch(new TmfStartSynchSignal(0));
  TmfTimeRange adjustedRange=reqWindow;
  long adjustedIndex=eventRequest.getIndex();
  int nbRequested=eventRequest.getNbRequested();
  IStateTraceManager traceManager;
  Iterator<IStateTraceManager> iter=fEventProviderRequests.iterator();
  while (iter.hasNext()) {
    traceManager=iter.next();
    TmfCheckpoint checkPoint=null;
    if (eventRequest.getIndex() > 0) {
      checkPoint=traceManager.restoreCheckPointByIndex(eventRequest.getIndex());
    }
 else {
      checkPoint=traceManager.restoreCheckPointByTimestamp(reqWindow.getStartTime());
    }
    TmfTimeRange traceRange=traceManager.getStateTrace().getTimeRange();
    if ((checkPoint == null) || checkPoint.getTimestamp().getValue() < traceRange.getStartTime().getValue() || checkPoint.getTimestamp().getValue() > traceRange.getEndTime().getValue() || checkPoint.getTimestamp().getValue() >= reqWindow.getEndTime().getValue()) {
    }
 else {
      if (adjustedRange.getStartTime().getValue() > checkPoint.getTimestamp().getValue() || adjustedIndex > (Long)checkPoint.getLocation().getLocation()) {
        adjustedRange=new TmfTimeRange(checkPoint.getTimestamp(),reqWindow.getEndTime());
        adjustedIndex=(Long)checkPoint.getLocation().getLocation();
        if (nbRequested < TmfDataRequest.ALL_DATA) {
          nbRequested+=(eventRequest.getIndex() - adjustedIndex);
        }
      }
    }
    traceToTraceStateModel.put(traceManager.getStateTrace(),traceManager.getStateModel());
  }
  dispatchTime=reqWindow.getStartTime().getValue();
  dispatchIndex=eventRequest.getIndex();
  eventIndex=adjustedIndex;
  fSubRequest=new LttngBaseEventRequest(adjustedRange,reqWindow.getStartTime(),adjustedIndex,nbRequested,BLOCK_SIZE,eventRequest.getExecType()){
    private LttngSyntheticEvent syntheticEvent=null;
    @Override public void handleData(    LttngEvent event){
      super.handleData(event);
      if (event != null) {
synchronized (LttngSyntheticEventProvider.this) {
          if ((fmainRequest == null) || (fmainRequest.isCompleted())) {
            TraceDebug.debug(""String_Node_Str"" + event);
            return;
          }
          handleIncomingData(event);
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
    }
    @Override public void handleCompleted(){
      handleProviderDone(!isCancelled() && !isFailed());
      super.handleCompleted();
    }
    /** 
 * Trigger the Analysis and sequential control of the events.
 * @param e
 */
    private void handleIncomingData(    LttngEvent e){
      long eventTime=e.getTimestamp().getValue();
      ITmfTrace<?> inTrace=e.getTrace();
      LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
      updateSynEvent(e);
      if (eventTime >= dispatchTime && eventIndex >= dispatchIndex) {
        syntheticEvent.setSequenceInd(SequenceInd.BEFORE);
        fmainRequest.handleData(syntheticEvent);
        syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
        fstateUpdateProcessor.process(syntheticEvent,traceModel);
        syntheticEvent.setSequenceInd(SequenceInd.AFTER);
        fmainRequest.handleData(syntheticEvent);
      }
 else {
        syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
        fstateUpdateProcessor.process(syntheticEvent,traceModel);
      }
      eventIndex++;
    }
    /** 
 * Create a synthetic event from the received new reference, if the reference is the same there is no need for a new instance if this is the first event for this request, call start handler
 * @param e
 * @return
 */
    private LttngSyntheticEvent updateSynEvent(    LttngEvent e){
      if ((syntheticEvent == null) || (syntheticEvent.getBaseEvent() != e)) {
        syntheticEvent=new LttngSyntheticEvent(e);
      }
      ITmfTrace<?> inTrace=e.getTrace();
      LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
      syntheticEvent.setTraceModel(traceModel);
      if (!startIndSent) {
        TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
        handleProviderStarted(traceModel);
        startIndSent=true;
      }
      return syntheticEvent;
    }
  }
;
  TmfExperiment<LttngEvent> provider=(TmfExperiment<LttngEvent>)fExperiment.getValue();
  provider.sendRequest(fSubRequest);
synchronized (this) {
    TmfExperiment.getCurrentExperiment().notifyPendingRequest(false);
    fIsExperimentNotified=false;
  }
  experiment.endSynch(new TmfEndSynchSignal(0));
  return new TmfContext();
}","@SuppressWarnings(""String_Node_Str"") @Override public synchronized ITmfContext armRequest(final ITmfDataRequest<LttngSyntheticEvent> request){
  if (!(request instanceof ITmfEventRequest<?>)) {
    request.cancel();
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  if (fExperiment == null) {
    TraceDebug.debug(""String_Node_Str"");
    request.cancel();
    return null;
  }
  reset(fExperiment);
  if (fEventProviderRequests.size() < 1) {
    request.cancel();
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  fmainRequest=request;
  ITmfEventRequest<LttngSyntheticEvent> eventRequest=(ITmfEventRequest<LttngSyntheticEvent>)fmainRequest;
  TmfTimeRange reqWindow=eventRequest.getRange();
  TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
  TmfExperiment<LttngEvent> experiment=(TmfExperiment<LttngEvent>)fExperiment.getValue();
  experiment.startSynch(new TmfStartSynchSignal(0));
  TmfTimeRange adjustedRange=reqWindow;
  long adjustedIndex=eventRequest.getIndex();
  int nbRequested=eventRequest.getNbRequested();
  IStateTraceManager traceManager;
  Iterator<IStateTraceManager> iter=fEventProviderRequests.iterator();
  while (iter.hasNext()) {
    traceManager=iter.next();
    TmfCheckpoint checkPoint=null;
    if (eventRequest.getIndex() > 0) {
      checkPoint=traceManager.restoreCheckPointByIndex(eventRequest.getIndex());
    }
 else {
      checkPoint=traceManager.restoreCheckPointByTimestamp(reqWindow.getStartTime());
    }
    TmfTimeRange traceRange=traceManager.getStateTrace().getTimeRange();
    if ((checkPoint == null) || checkPoint.getTimestamp().getValue() < traceRange.getStartTime().getValue() || checkPoint.getTimestamp().getValue() > traceRange.getEndTime().getValue() || checkPoint.getTimestamp().getValue() >= reqWindow.getEndTime().getValue()) {
    }
 else {
      if (adjustedRange.getStartTime().getValue() > checkPoint.getTimestamp().getValue() || adjustedIndex > (Long)checkPoint.getLocation().getLocation()) {
        adjustedRange=new TmfTimeRange(checkPoint.getTimestamp(),reqWindow.getEndTime());
        adjustedIndex=(Long)checkPoint.getLocation().getLocation();
        if (nbRequested < TmfDataRequest.ALL_DATA) {
          nbRequested+=(eventRequest.getIndex() - adjustedIndex);
        }
      }
    }
    traceToTraceStateModel.put(traceManager.getStateTrace(),traceManager.getStateModel());
  }
  dispatchTime=reqWindow.getStartTime().getValue();
  dispatchIndex=eventRequest.getIndex();
  eventIndex=adjustedIndex;
  fSubRequest=new LttngBaseEventRequest(adjustedRange,reqWindow.getStartTime(),adjustedIndex,nbRequested,BLOCK_SIZE,eventRequest.getExecType()){
    private LttngSyntheticEvent syntheticEvent=null;
    @Override public void handleData(    LttngEvent event){
      super.handleData(event);
      if (event != null) {
synchronized (LttngSyntheticEventProvider.this) {
          if ((fmainRequest == null) || (fmainRequest.isCompleted())) {
            TraceDebug.debug(""String_Node_Str"" + event);
            return;
          }
          handleIncomingData(event);
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
    }
    @Override public void handleCompleted(){
      handleProviderDone(!isCancelled() && !isFailed());
      super.handleCompleted();
    }
    /** 
 * Trigger the Analysis and sequential control of the events.
 * @param e
 */
    private void handleIncomingData(    LttngEvent e){
      long eventTime=e.getTimestamp().getValue();
      ITmfTrace<?> inTrace=e.getTrace();
      LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
      updateSynEvent(e);
      if (eventTime >= dispatchTime && eventIndex >= dispatchIndex) {
        syntheticEvent.setSequenceInd(SequenceInd.BEFORE);
        fmainRequest.handleData(syntheticEvent);
        syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
        fstateUpdateProcessor.process(syntheticEvent,traceModel);
        syntheticEvent.setSequenceInd(SequenceInd.AFTER);
        fmainRequest.handleData(syntheticEvent);
      }
 else {
        syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
        fstateUpdateProcessor.process(syntheticEvent,traceModel);
      }
      eventIndex++;
    }
    /** 
 * Create a synthetic event from the received new reference, if the reference is the same there is no need for a new instance if this is the first event for this request, call start handler
 * @param e
 * @return
 */
    private LttngSyntheticEvent updateSynEvent(    LttngEvent e){
      if ((syntheticEvent == null) || (syntheticEvent.getBaseEvent() != e)) {
        syntheticEvent=new LttngSyntheticEvent(e);
      }
      ITmfTrace<?> inTrace=e.getTrace();
      LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
      syntheticEvent.setTraceModel(traceModel);
      if (!startIndSent) {
        TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
        handleProviderStarted(traceModel);
        startIndSent=true;
      }
      return syntheticEvent;
    }
  }
;
  TmfExperiment<LttngEvent> provider=(TmfExperiment<LttngEvent>)fExperiment.getValue();
  provider.sendRequest(fSubRequest);
synchronized (this) {
    TmfExperiment.getCurrentExperiment().notifyPendingRequest(false);
    fIsExperimentNotified=false;
  }
  experiment.endSynch(new TmfEndSynchSignal(0));
  return new TmfContext();
}",0.9987874265460313
92583,"public LttngEvent getEvent(){
  return fParentEvent;
}","public synchronized LttngEvent getEvent(){
  return fParentEvent;
}",0.8925619834710744
92584,"/** 
 * Parse a single field from its given name.<p>
 * @return  The parsed field or null.
 * @see @see org.eclipse.linuxtools.lttng.event.LttngEventField
 */
@Override public synchronized LttngEventField getField(String name){
  if (name.equals(LttngEventType.CONTENT_LABEL) || name.equals(ITmfEvent.EVENT_FIELD_CONTENT)) {
    return new LttngEventField(toString());
  }
 else   if (name.equals(LttngEventType.MARKER_LABEL) || name.equals(ITmfEvent.EVENT_FIELD_TYPE)) {
    return new LttngEventField(fParentEvent.getType().getName());
  }
 else   if (name.equals(LttngEventType.TRACE_LABEL) || name.equals(ITmfEvent.EVENT_FIELD_REFERENCE)) {
    return new LttngEventField(fParentEvent.getReference());
  }
 else   if (name.equals(LttngEventType.TIMESTAMP_LABEL) || name.equals(ITmfEvent.EVENT_FIELD_TIMESTAMP)) {
    return new LttngEventField(fParentEvent.getTimestamp().toString());
  }
 else   if (name.equals(ITmfEvent.EVENT_FIELD_SOURCE)) {
    return new LttngEventField(fParentEvent.getSource());
  }
  LttngEventField returnedField=fFieldsMap.get(name);
  if (returnedField == null) {
    JniEvent tmpEvent=((LttngEvent)getEvent()).convertEventTmfToJni();
    if (tmpEvent != null) {
      Object newValue=tmpEvent.parseFieldByName(name);
      if (newValue != null) {
        returnedField=new LttngEventField(name,newValue);
        returnedField=new LttngEventField(name,newValue);
        fFieldsMap.put(name,returnedField);
      }
    }
  }
  return returnedField;
}","/** 
 * Parse a single field from its given name.<p>
 * @return  The parsed field or null.
 * @see @see org.eclipse.linuxtools.lttng.event.LttngEventField
 */
@Override public synchronized LttngEventField getField(String name){
  if (name.equals(LttngEventType.CONTENT_LABEL) || name.equals(ITmfEvent.EVENT_FIELD_CONTENT)) {
    return new LttngEventField(toString());
  }
 else   if (name.equals(LttngEventType.MARKER_LABEL) || name.equals(ITmfEvent.EVENT_FIELD_TYPE)) {
    return new LttngEventField(fParentEvent.getType().getName());
  }
 else   if (name.equals(LttngEventType.TRACE_LABEL) || name.equals(ITmfEvent.EVENT_FIELD_REFERENCE)) {
    return new LttngEventField(fParentEvent.getReference());
  }
 else   if (name.equals(LttngEventType.TIMESTAMP_LABEL) || name.equals(ITmfEvent.EVENT_FIELD_TIMESTAMP)) {
    return new LttngEventField(fParentEvent.getTimestamp().toString());
  }
 else   if (name.equals(ITmfEvent.EVENT_FIELD_SOURCE)) {
    return new LttngEventField(fParentEvent.getSource());
  }
  LttngEventField returnedField=fFieldsMap.get(name);
  if (returnedField == null) {
    JniEvent tmpEvent=((LttngEvent)getEvent()).convertEventTmfToJni();
    if (tmpEvent != null) {
      Object newValue=tmpEvent.parseFieldByName(name);
      if (newValue != null) {
        returnedField=new LttngEventField(name,newValue);
        fFieldsMap.put(name,returnedField);
      }
    }
  }
  return returnedField;
}",0.9381443298969072
92585,"@Override public LttngEventContent clone(){
  LttngEventContent clone=(LttngEventContent)super.clone();
  LttngEventField[] fields=getFields();
  LttngEventField[] subfields=new LttngEventField[fields.length];
  for (int i=0; i < fields.length; i++) {
    subfields[i]=(LttngEventField)fields[i].clone();
  }
  clone.setValue(getValue(),subfields);
  clone.fFieldsMap=new HashMap<String,LttngEventField>();
  for (  String key : fFieldsMap.keySet()) {
    clone.fFieldsMap.put(new String(key),((LttngEventField)fFieldsMap.get(key)).clone());
  }
  return clone;
}","@Override public LttngEventContent clone(){
  LttngEventContent clone=(LttngEventContent)super.clone();
  LttngEventField[] fields=getFields();
  LttngEventField[] subfields=new LttngEventField[fields.length];
  for (int i=0; i < fields.length; i++) {
    subfields[i]=(LttngEventField)fields[i].clone();
  }
  clone.setValue(getValue(),subfields);
  clone.fFieldsMap=new HashMap<String,LttngEventField>();
  for (  String key : fFieldsMap.keySet()) {
    clone.fFieldsMap.put(key,((LttngEventField)fFieldsMap.get(key)).clone());
  }
  return clone;
}",0.9892280071813284
92586,"public void setEvent(LttngEvent newParent){
  fParentEvent=newParent;
}","public synchronized void setEvent(LttngEvent newParent){
  fParentEvent=newParent;
}",0.9161290322580644
92587,"@Override public LttngEventType clone(){
  LttngEventType clone=(LttngEventType)super.clone();
  clone.tracefileName=new String(tracefileName);
  clone.cpuId=new Long(cpuId);
  clone.markerName=new String(markerName);
  clone.markerId=markerId;
  return clone;
}","@Override public LttngEventType clone(){
  LttngEventType clone=(LttngEventType)super.clone();
  clone.tracefileName=tracefileName;
  clone.cpuId=Long.valueOf(cpuId);
  clone.markerName=markerName;
  clone.markerId=markerId;
  return clone;
}",0.6984126984126984
92588,"/** 
 * @param range
 * @param offset
 * @param nbEvents
 * @param maxBlockSize
 * @param listener
 * @param experimentTimeRange
 * @param processor
 * @param experimentName
 * @param execType 
 */
public LttngSyntEventRequest(TmfTimeRange range,long offset,int nbEvents,int maxBlockSize,IRequestStatusListener listener,TmfTimeRange experimentTimeRange,ITransEventProcessor processor,String experimentName,ExecutionType execType){
  super(LttngSyntheticEvent.class,range,(int)offset,nbEvents,maxBlockSize,execType);
  fExperimentTimeRange=experimentTimeRange;
  fExperimentName=new String(experimentName);
  addListener(listener);
  fprocessor=processor;
}","/** 
 * @param range
 * @param offset
 * @param nbEvents
 * @param maxBlockSize
 * @param listener
 * @param experimentTimeRange
 * @param processor
 * @param experimentName
 * @param execType 
 */
public LttngSyntEventRequest(TmfTimeRange range,long offset,int nbEvents,int maxBlockSize,IRequestStatusListener listener,TmfTimeRange experimentTimeRange,ITransEventProcessor processor,String experimentName,ExecutionType execType){
  super(LttngSyntheticEvent.class,range,(int)offset,nbEvents,maxBlockSize,execType);
  fExperimentTimeRange=experimentTimeRange;
  fExperimentName=experimentName;
  addListener(listener);
  fprocessor=processor;
}",0.9907692307692308
92589,"/** 
 * @return the mapping from int (0..255) to system call names
 */
public String[] getSyscallNames(){
  return syscall_names;
}","/** 
 * @return the mapping from int (0..255) to system call names
 */
public String[] getSyscallNames(){
  return Arrays.copyOf(syscall_names,syscall_names.length);
}",0.8791946308724832
92590,"/** 
 * @return the mapping from int (0..255) to trap names
 */
public String[] getTrapNames(){
  return trap_names;
}","/** 
 * @return the mapping from int (0..255) to trap names
 */
public String[] getTrapNames(){
  return Arrays.copyOf(trap_names,trap_names.length);
}",0.8773234200743495
92591,"/** 
 * @return the mapping from int (0..31) to soft IRQ names
 */
public String[] getSoftIrqNames(){
  return soft_irq_names;
}","/** 
 * @return the mapping from int (0..31) to soft IRQ names
 */
public String[] getSoftIrqNames(){
  return Arrays.copyOf(soft_irq_names,soft_irq_names.length);
}",0.8737201365187713
92592,"/** 
 * @return the mapping from int (0..255) to IRQ names
 */
public String[] getIrqNames(){
  return irq_names;
}","/** 
 * @return the mapping from int (0..255) to IRQ names
 */
public String[] getIrqNames(){
  return Arrays.copyOf(irq_names,irq_names.length);
}",0.8778625954198473
92593,"public static void init(){
  String debugTrace=Platform.getDebugOption(pluginID + ""String_Node_Str"");
  String infoTrace=Platform.getDebugOption(pluginID + ""String_Node_Str"");
  String warnTrace=Platform.getDebugOption(pluginID + ""String_Node_Str"");
  if (debugTrace != null) {
    DEBUG=(new Boolean(debugTrace)).booleanValue();
  }
  if (infoTrace != null) {
    INFO=(new Boolean(infoTrace)).booleanValue();
  }
  if (warnTrace != null) {
    WARN=(new Boolean(warnTrace)).booleanValue();
  }
  String cfvTrace=Platform.getDebugOption(pluginID + ""String_Node_Str"");
  if (cfvTrace != null) {
    CFV=(new Boolean(cfvTrace)).booleanValue();
    if (CFV) {
      try {
        fCFVfile=new PrintWriter(new FileWriter(""String_Node_Str""));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  String rvTrace=Platform.getDebugOption(pluginID + ""String_Node_Str"");
  if (rvTrace != null) {
    RV=(new Boolean(rvTrace)).booleanValue();
    if (RV) {
      try {
        fRVfile=new PrintWriter(new FileWriter(""String_Node_Str""));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  String svTrace=Platform.getDebugOption(pluginID + ""String_Node_Str"");
  if (svTrace != null) {
    SV=(new Boolean(svTrace)).booleanValue();
    if (SV) {
      try {
        fSVfile=new PrintWriter(new FileWriter(""String_Node_Str""));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}","public static void init(){
  String debugTrace=Platform.getDebugOption(pluginID + ""String_Node_Str"");
  String infoTrace=Platform.getDebugOption(pluginID + ""String_Node_Str"");
  String warnTrace=Platform.getDebugOption(pluginID + ""String_Node_Str"");
  if (debugTrace != null) {
    DEBUG=Boolean.valueOf(debugTrace);
  }
  if (infoTrace != null) {
    INFO=Boolean.valueOf(infoTrace);
  }
  if (warnTrace != null) {
    WARN=Boolean.valueOf(warnTrace);
  }
  String cfvTrace=Platform.getDebugOption(pluginID + ""String_Node_Str"");
  if (cfvTrace != null) {
    CFV=Boolean.valueOf(cfvTrace);
    if (CFV) {
      try {
        fCFVfile=new PrintWriter(new FileWriter(""String_Node_Str""));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  String rvTrace=Platform.getDebugOption(pluginID + ""String_Node_Str"");
  if (rvTrace != null) {
    RV=Boolean.valueOf(rvTrace);
    if (RV) {
      try {
        fRVfile=new PrintWriter(new FileWriter(""String_Node_Str""));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  String svTrace=Platform.getDebugOption(pluginID + ""String_Node_Str"");
  if (svTrace != null) {
    SV=Boolean.valueOf(svTrace);
    if (SV) {
      try {
        fSVfile=new PrintWriter(new FileWriter(""String_Node_Str""));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}",0.9092812281926028
92594,"protected String findObject(StateColor Value,Map<String,StateColor> map){
  Set<String> keys=map.keySet();
  for (  String key : keys) {
    if (map.get(key).equals(Value)) {
      return key;
    }
  }
  return ""String_Node_Str"";
}","protected String findObject(StateColor Value,Map<String,StateColor> map){
  for (  Entry<String,StateColor> entry : map.entrySet()) {
    if (entry.getValue().equals(Value)) {
      return entry.getKey();
    }
  }
  return ""String_Node_Str"";
}",0.5672268907563025
92595,"/** 
 * Retrieves all provider resources from the remote system and updates local references.  
 * @return provider resources
 * @throws SystemMessageException
 * @throws InterruptedException
 */
public ProviderResource[] getAllProviders() throws SystemMessageException, InterruptedException {
  ProviderResource[] providers=createProviders();
  if (fProviders == null) {
    fProviders=providers;
  }
 else {
    for (int i=0; i < fProviders.length; i++) {
      for (int j=0; j < providers.length; j++) {
        if (fProviders[i].getName().equals(providers[j].getName())) {
          fProviders[i].refreshTargets(providers[j].getTargets());
        }
      }
    }
  }
  return fProviders;
}","/** 
 * Retrieves all provider resources from the remote system and updates local references.  
 * @return provider resources
 * @throws SystemMessageException
 * @throws InterruptedException
 */
public ProviderResource[] getAllProviders() throws SystemMessageException, InterruptedException {
  ProviderResource[] providers=createProviders();
  if (fProviders == null) {
    fProviders=providers;
  }
 else {
    for (int i=0; i < fProviders.length; i++) {
      for (int j=0; j < providers.length; j++) {
        if (fProviders[i].getName().equals(providers[j].getName())) {
          fProviders[i].refreshTargets(providers[j].getTargets());
        }
      }
    }
  }
  return (fProviders != null) ? Arrays.copyOf(fProviders,fProviders.length) : null;
}",0.9427980702963472
92596,"@Override @TmfSignalHandler public synchronized void processingStarted(RequestStartedSignal signal){
  LttngSyntEventRequest request=signal.getRequest();
  if (request != null) {
    waitCursor(true);
    TmfTimeRange trange=null;
    trange=request.getRange();
    boolean clearData=request.isclearDataInd();
    ModelUpdatePrep(trange,clearData);
  }
}","@Override @TmfSignalHandler public synchronized void processingStarted(RequestStartedSignal signal){
  LttngSyntEventRequest request=signal.getRequest();
  if (request != null) {
    waitCursor(true);
    TmfTimeRange trange=null;
    trange=request.getRange();
    boolean clearData=request.isclearDataInd();
    modelUpdatePrep(trange,clearData);
  }
}",0.9971751412429378
92597,"private void createWidget(Composite parent){
  final Color labelColor=parent.getDisplay().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND);
  final Font fFont=adjustFont(parent);
  final int initalWidth=10;
  GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=3;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  gridLayout.marginTop=0;
  gridLayout.horizontalSpacing=0;
  gridLayout.verticalSpacing=0;
  gridLayout.marginLeft=0;
  gridLayout.marginRight=0;
  Composite composite=new Composite(parent,SWT.FILL);
  composite.setLayout(gridLayout);
  GridData gridData=new GridData();
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  composite.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.RIGHT;
  gridData.verticalAlignment=SWT.TOP;
  fMaxNbEventsText=new Text(composite,SWT.READ_ONLY | SWT.RIGHT);
  fMaxNbEventsText.setFont(fFont);
  fMaxNbEventsText.setBackground(labelColor);
  fMaxNbEventsText.setEditable(false);
  fMaxNbEventsText.setText(""String_Node_Str"");
  fMaxNbEventsText.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.verticalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  fCanvas=new Canvas(composite,SWT.BORDER | SWT.DOUBLE_BUFFERED);
  fCanvas.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.RIGHT;
  gridData.verticalAlignment=SWT.BOTTOM;
  fMinNbEventsText=new Text(composite,SWT.READ_ONLY | SWT.RIGHT);
  fMinNbEventsText.setFont(fFont);
  fMinNbEventsText.setBackground(labelColor);
  fMinNbEventsText.setEditable(false);
  fMinNbEventsText.setText(""String_Node_Str"");
  fMinNbEventsText.setLayoutData(gridData);
  gridData=new GridData(initalWidth,SWT.DEFAULT);
  gridData.horizontalAlignment=SWT.RIGHT;
  gridData.verticalAlignment=SWT.BOTTOM;
  Text dummyText=new Text(composite,SWT.READ_ONLY);
  dummyText.setFont(fFont);
  dummyText.setBackground(labelColor);
  dummyText.setEditable(false);
  dummyText.setText(""String_Node_Str"");
  dummyText.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.LEFT;
  gridData.verticalAlignment=SWT.BOTTOM;
  fTimeRangeStartText=new Text(composite,SWT.READ_ONLY);
  fTimeRangeStartText.setFont(fFont);
  fTimeRangeStartText.setBackground(labelColor);
  fTimeRangeStartText.setText(HistogramUtils.nanosecondsToString(0));
  fTimeRangeStartText.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.RIGHT;
  gridData.verticalAlignment=SWT.BOTTOM;
  fTimeRangeEndText=new Text(composite,SWT.READ_ONLY);
  fTimeRangeEndText.setFont(fFont);
  fTimeRangeEndText.setBackground(labelColor);
  fTimeRangeEndText.setText(HistogramUtils.nanosecondsToString(0));
  fTimeRangeEndText.setLayoutData(gridData);
}","private void createWidget(Composite parent){
  final Color labelColor=parent.getBackground();
  final Font fFont=adjustFont(parent);
  final int initalWidth=10;
  GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=3;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  gridLayout.marginTop=0;
  gridLayout.horizontalSpacing=0;
  gridLayout.verticalSpacing=0;
  gridLayout.marginLeft=0;
  gridLayout.marginRight=0;
  Composite composite=new Composite(parent,SWT.FILL);
  composite.setLayout(gridLayout);
  GridData gridData=new GridData();
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  composite.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.RIGHT;
  gridData.verticalAlignment=SWT.TOP;
  fMaxNbEventsText=new Text(composite,SWT.READ_ONLY | SWT.RIGHT);
  fMaxNbEventsText.setFont(fFont);
  fMaxNbEventsText.setBackground(labelColor);
  fMaxNbEventsText.setEditable(false);
  fMaxNbEventsText.setText(""String_Node_Str"");
  fMaxNbEventsText.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalSpan=2;
  gridData.verticalSpan=2;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  fCanvas=new Canvas(composite,SWT.BORDER | SWT.DOUBLE_BUFFERED);
  fCanvas.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.RIGHT;
  gridData.verticalAlignment=SWT.BOTTOM;
  fMinNbEventsText=new Text(composite,SWT.READ_ONLY | SWT.RIGHT);
  fMinNbEventsText.setFont(fFont);
  fMinNbEventsText.setBackground(labelColor);
  fMinNbEventsText.setEditable(false);
  fMinNbEventsText.setText(""String_Node_Str"");
  fMinNbEventsText.setLayoutData(gridData);
  gridData=new GridData(initalWidth,SWT.DEFAULT);
  gridData.horizontalAlignment=SWT.RIGHT;
  gridData.verticalAlignment=SWT.BOTTOM;
  Text dummyText=new Text(composite,SWT.READ_ONLY);
  dummyText.setFont(fFont);
  dummyText.setBackground(labelColor);
  dummyText.setEditable(false);
  dummyText.setText(""String_Node_Str"");
  dummyText.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.LEFT;
  gridData.verticalAlignment=SWT.BOTTOM;
  fTimeRangeStartText=new Text(composite,SWT.READ_ONLY);
  fTimeRangeStartText.setFont(fFont);
  fTimeRangeStartText.setBackground(labelColor);
  fTimeRangeStartText.setText(HistogramUtils.nanosecondsToString(0));
  fTimeRangeStartText.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.RIGHT;
  gridData.verticalAlignment=SWT.BOTTOM;
  fTimeRangeEndText=new Text(composite,SWT.READ_ONLY);
  fTimeRangeEndText.setFont(fFont);
  fTimeRangeEndText.setBackground(labelColor);
  fTimeRangeEndText.setText(HistogramUtils.nanosecondsToString(0));
  fTimeRangeEndText.setLayoutData(gridData);
}",0.9881626351003604
92598,"@Override @SuppressWarnings(""String_Node_Str"") public void createPartControl(Composite parent){
  fParent=parent;
  final String currentEventLabel=Messages.HistogramView_currentEventLabel;
  final String windowSpanLabel=Messages.HistogramView_windowSpanLabel;
  Composite viewComposite=new Composite(fParent,SWT.FILL);
  GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.horizontalSpacing=5;
  gridLayout.verticalSpacing=0;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  viewComposite.setLayout(gridLayout);
  GridData gridData=new GridData();
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  viewComposite.setLayoutData(gridData);
  Composite controlsComposite=new Composite(viewComposite,SWT.FILL);
  gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  gridLayout.horizontalSpacing=5;
  gridLayout.verticalSpacing=0;
  gridLayout.makeColumnsEqualWidth=true;
  gridLayout.marginLeft=5;
  gridLayout.marginRight=5;
  controlsComposite.setLayout(gridLayout);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.CENTER;
  gridData.verticalAlignment=SWT.CENTER;
  fCurrentEventTimeControl=new HistogramCurrentTimeControl(this,controlsComposite,SWT.BORDER,SWT.BORDER,currentEventLabel,HistogramUtils.nanosecondsToString(0L));
  fCurrentEventTimeControl.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.CENTER;
  gridData.verticalAlignment=SWT.CENTER;
  fTimeSpanControl=new HistogramTimeRangeControl(this,controlsComposite,SWT.BORDER,SWT.BORDER,windowSpanLabel,HistogramUtils.nanosecondsToString(0L));
  fTimeSpanControl.setLayoutData(gridData);
  Composite timeRangeComposite=new Composite(viewComposite,SWT.FILL);
  gridLayout=new GridLayout();
  gridLayout.numColumns=1;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  gridLayout.marginTop=5;
  gridLayout.horizontalSpacing=0;
  gridLayout.verticalSpacing=0;
  gridLayout.marginLeft=5;
  gridLayout.marginRight=5;
  timeRangeComposite.setLayout(gridLayout);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  timeRangeComposite.setLayoutData(gridData);
  fTimeRangeHistogram=new TimeRangeHistogram(this,timeRangeComposite);
  Composite fullRangeComposite=new Composite(viewComposite,SWT.FILL);
  gridLayout=new GridLayout();
  gridLayout.numColumns=1;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  gridLayout.marginTop=5;
  gridLayout.horizontalSpacing=0;
  gridLayout.verticalSpacing=0;
  gridLayout.marginLeft=5;
  gridLayout.marginRight=5;
  fullRangeComposite.setLayout(gridLayout);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.horizontalSpan=2;
  gridData.grabExcessHorizontalSpace=true;
  fullRangeComposite.setLayoutData(gridData);
  fFullTraceHistogram=new FullTraceHistogram(this,fullRangeComposite);
  fCurrentExperiment=(TmfExperiment<LttngEvent>)TmfExperiment.getCurrentExperiment();
  if (fCurrentExperiment != null)   loadExperiment();
}","@Override @SuppressWarnings(""String_Node_Str"") public void createPartControl(Composite parent){
  fParent=parent;
  final String currentEventLabel=Messages.HistogramView_currentEventLabel;
  final String windowSpanLabel=Messages.HistogramView_windowSpanLabel;
  Composite viewComposite=new Composite(fParent,SWT.FILL);
  GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.horizontalSpacing=5;
  gridLayout.verticalSpacing=0;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  viewComposite.setLayout(gridLayout);
  GridData gridData=new GridData();
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  viewComposite.setLayoutData(gridData);
  Composite controlsComposite=new Composite(viewComposite,SWT.FILL);
  gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  gridLayout.horizontalSpacing=5;
  gridLayout.verticalSpacing=0;
  gridLayout.makeColumnsEqualWidth=true;
  gridLayout.marginLeft=5;
  gridLayout.marginRight=5;
  controlsComposite.setLayout(gridLayout);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.CENTER;
  gridData.verticalAlignment=SWT.CENTER;
  fCurrentEventTimeControl=new HistogramCurrentTimeControl(this,controlsComposite,SWT.BORDER,SWT.NONE,currentEventLabel,HistogramUtils.nanosecondsToString(0L));
  fCurrentEventTimeControl.setLayoutData(gridData);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.CENTER;
  gridData.verticalAlignment=SWT.CENTER;
  fTimeSpanControl=new HistogramTimeRangeControl(this,controlsComposite,SWT.BORDER,SWT.NONE,windowSpanLabel,HistogramUtils.nanosecondsToString(0L));
  fTimeSpanControl.setLayoutData(gridData);
  Composite timeRangeComposite=new Composite(viewComposite,SWT.FILL);
  gridLayout=new GridLayout();
  gridLayout.numColumns=1;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  gridLayout.marginTop=5;
  gridLayout.horizontalSpacing=0;
  gridLayout.verticalSpacing=0;
  gridLayout.marginLeft=5;
  gridLayout.marginRight=5;
  timeRangeComposite.setLayout(gridLayout);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  timeRangeComposite.setLayoutData(gridData);
  fTimeRangeHistogram=new TimeRangeHistogram(this,timeRangeComposite);
  Composite fullRangeComposite=new Composite(viewComposite,SWT.FILL);
  gridLayout=new GridLayout();
  gridLayout.numColumns=1;
  gridLayout.marginHeight=0;
  gridLayout.marginWidth=0;
  gridLayout.marginTop=5;
  gridLayout.horizontalSpacing=0;
  gridLayout.verticalSpacing=0;
  gridLayout.marginLeft=5;
  gridLayout.marginRight=5;
  fullRangeComposite.setLayout(gridLayout);
  gridData=new GridData();
  gridData.horizontalAlignment=SWT.FILL;
  gridData.verticalAlignment=SWT.FILL;
  gridData.horizontalSpan=2;
  gridData.grabExcessHorizontalSpace=true;
  fullRangeComposite.setLayoutData(gridData);
  fFullTraceHistogram=new FullTraceHistogram(this,fullRangeComposite);
  fCurrentExperiment=(TmfExperiment<LttngEvent>)TmfExperiment.getCurrentExperiment();
  if (fCurrentExperiment != null)   loadExperiment();
}",0.9032558139534884
92599,"/** 
 * @param value new field raw value
 * @param fields the corresponding fields
 */
protected void setValue(Object value,ITmfEventField[] fields){
  fValue=value;
  fFields=fields;
  populateStructs();
}","/** 
 * @param value new field raw value
 * @param fields the corresponding fields
 */
protected void setValue(Object value,ITmfEventField[] fields){
  fValue=value;
  fFields=(fields != null) ? Arrays.copyOf(fields,fields.length) : null;
  populateStructs();
}",0.8565310492505354
92600,"/** 
 * Handle the completion of the request. It is called when there is no more data available either because: - the request completed normally - the request failed - the request was canceled As a convenience, handleXXXX methods are provided. They are meant to be overridden by the application if it needs to handle these conditions.
 */
@Override public void handleCompleted(){
  if (fRequestFailed) {
    handleFailure();
  }
 else   if (fRequestCanceled) {
    handleCancel();
  }
 else {
    handleSuccess();
  }
  if (Tracer.isRequestTraced())   Tracer.traceRequest(this,""String_Node_Str"" + fNbRead + ""String_Node_Str"");
}","/** 
 * Handle the completion of the request. It is called when there is no more data available either because: - the request completed normally - the request failed - the request was canceled As a convenience, handleXXXX methods are provided. They are meant to be overridden by the application if it needs to handle these conditions.
 */
@Override public synchronized void handleCompleted(){
  if (fRequestFailed) {
    handleFailure();
  }
 else   if (fRequestCanceled) {
    handleCancel();
  }
 else {
    handleSuccess();
  }
  if (Tracer.isRequestTraced())   Tracer.traceRequest(this,""String_Node_Str"" + fNbRead + ""String_Node_Str"");
}",0.9897557131599684
92601,"@Override public TmfContext seekEvent(long rank){
  int index=(int)rank / fIndexPageSize;
  ITmfLocation<?> location;
synchronized (fCheckpoints) {
    if (fCheckpoints.size() == 0) {
      location=null;
    }
 else {
      if (index >= fCheckpoints.size()) {
        index=fCheckpoints.size() - 1;
      }
      location=fCheckpoints.elementAt(index).getLocation();
    }
  }
  TmfContext context=seekLocation(location);
  long pos=index * fIndexPageSize;
  context.setRank(pos);
  if (pos < rank) {
    ITmfEvent event=getNextEvent(context);
    while (event != null && ++pos < rank) {
      event=getNextEvent(context);
    }
  }
  return context;
}","@Override public TmfContext seekEvent(long rank){
  int index=(int)rank / fIndexPageSize;
  ITmfLocation<?> location;
synchronized (fCheckpoints) {
    if (fCheckpoints.isEmpty()) {
      location=null;
    }
 else {
      if (index >= fCheckpoints.size()) {
        index=fCheckpoints.size() - 1;
      }
      location=fCheckpoints.elementAt(index).getLocation();
    }
  }
  TmfContext context=seekLocation(location);
  long pos=index * fIndexPageSize;
  context.setRank(pos);
  if (pos < rank) {
    ITmfEvent event=getNextEvent(context);
    while (event != null && ++pos < rank) {
      event=getNextEvent(context);
    }
  }
  return context;
}",0.9846625766871164
92602,"@Override public long getNbEvents(){
  return fNbEvents;
}","@Override public synchronized long getNbEvents(){
  return fNbEvents;
}",0.8992248062015504
92603,"private void updateTrace(){
  int nbRead=getNbRead();
  if (nbRead != 0) {
    fStartTime=startTime;
    fEndTime=lastTime;
    fNbEvents=nbRead;
    notifyListeners();
  }
}","private synchronized void updateTrace(){
  int nbRead=getNbRead();
  if (nbRead != 0) {
    fStartTime=startTime;
    fEndTime=lastTime;
    fNbEvents=nbRead;
    notifyListeners();
  }
}",0.96398891966759
92604,"@SuppressWarnings({""String_Node_Str""}) protected void indexTrace(boolean waitForCompletion){
  final Job job=new Job(""String_Node_Str"" + getName() + ""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      while (!monitor.isCanceled()) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          return Status.OK_STATUS;
        }
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
  fCheckpoints.clear();
  ITmfEventRequest<ITmfEvent> request=new TmfEventRequest<ITmfEvent>(ITmfEvent.class,TmfTimeRange.Eternity,TmfDataRequest.ALL_DATA,fIndexPageSize,ITmfDataRequest.ExecutionType.BACKGROUND){
    ITmfTimestamp startTime=null;
    ITmfTimestamp lastTime=null;
    @Override public void handleData(    ITmfEvent event){
      super.handleData(event);
      if (event != null) {
        ITmfTimestamp ts=event.getTimestamp();
        if (startTime == null)         startTime=ts.clone();
        lastTime=ts.clone();
        if ((getNbRead() % fIndexPageSize) == 0) {
          updateTrace();
        }
      }
    }
    @Override public void handleSuccess(){
      updateTrace();
    }
    @Override public void handleCompleted(){
      job.cancel();
      super.handleCompleted();
    }
    private void updateTrace(){
      int nbRead=getNbRead();
      if (nbRead != 0) {
        fStartTime=startTime;
        fEndTime=lastTime;
        fNbEvents=nbRead;
        notifyListeners();
      }
    }
  }
;
  sendRequest((ITmfDataRequest<T>)request);
  if (waitForCompletion)   try {
    request.waitForCompletion();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","@SuppressWarnings({""String_Node_Str""}) protected void indexTrace(boolean waitForCompletion){
  final Job job=new Job(""String_Node_Str"" + getName() + ""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      while (!monitor.isCanceled()) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          return Status.OK_STATUS;
        }
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
  fCheckpoints.clear();
  ITmfEventRequest<ITmfEvent> request=new TmfEventRequest<ITmfEvent>(ITmfEvent.class,TmfTimeRange.Eternity,TmfDataRequest.ALL_DATA,fIndexPageSize,ITmfDataRequest.ExecutionType.BACKGROUND){
    ITmfTimestamp startTime=null;
    ITmfTimestamp lastTime=null;
    @Override public void handleData(    ITmfEvent event){
      super.handleData(event);
      if (event != null) {
        ITmfTimestamp ts=event.getTimestamp();
        if (startTime == null)         startTime=ts.clone();
        lastTime=ts.clone();
        if ((getNbRead() % fIndexPageSize) == 0) {
          updateTrace();
        }
      }
    }
    @Override public void handleSuccess(){
      updateTrace();
    }
    @Override public void handleCompleted(){
      job.cancel();
      super.handleCompleted();
    }
    private synchronized void updateTrace(){
      int nbRead=getNbRead();
      if (nbRead != 0) {
        fStartTime=startTime;
        fEndTime=lastTime;
        fNbEvents=nbRead;
        notifyListeners();
      }
    }
  }
;
  sendRequest((ITmfDataRequest<T>)request);
  if (waitForCompletion)   try {
    request.waitForCompletion();
  }
 catch (  InterruptedException e) {
  }
}",0.9888366627497064
92605,"public static IConfigurationElement[] getTypeElements(){
  IConfigurationElement[] elements=Platform.getExtensionRegistry().getConfigurationElementsFor(TMF_TRACE_TYPE_ID);
  List<IConfigurationElement> typeElements=new LinkedList<IConfigurationElement>();
  for (  IConfigurationElement element : elements) {
    if (element.getName().equals(TYPE_ELEM)) {
      typeElements.add(element);
    }
  }
  return typeElements.toArray(new IConfigurationElement[0]);
}","public static IConfigurationElement[] getTypeElements(){
  IConfigurationElement[] elements=Platform.getExtensionRegistry().getConfigurationElementsFor(TMF_TRACE_TYPE_ID);
  List<IConfigurationElement> typeElements=new LinkedList<IConfigurationElement>();
  for (  IConfigurationElement element : elements) {
    if (element.getName().equals(TYPE_ELEM)) {
      typeElements.add(element);
    }
  }
  return typeElements.toArray(new IConfigurationElement[typeElements.size()]);
}",0.9787234042553192
92606,"private String[] getAvailableTraceTypes(){
  IConfigurationElement[] config=Platform.getExtensionRegistry().getConfigurationElementsFor(TmfTraceType.TMF_TRACE_TYPE_ID);
  for (  IConfigurationElement ce : config) {
    String elementName=ce.getName();
    if (elementName.equals(TmfTraceType.TYPE_ELEM)) {
      String traceTypeId=ce.getAttribute(TmfTraceType.ID_ATTR);
      fTraceTypeAttributes.put(traceTypeId,ce);
    }
 else     if (elementName.equals(TmfTraceType.CATEGORY_ELEM)) {
      String categoryId=ce.getAttribute(TmfTraceType.ID_ATTR);
      fTraceCategories.put(categoryId,ce);
    }
  }
  List<String> traceTypes=new ArrayList<String>();
  for (  String typeId : fTraceTypeAttributes.keySet()) {
    IConfigurationElement ce=fTraceTypeAttributes.get(typeId);
    String traceTypeName=getCategory(ce) + ""String_Node_Str"" + ce.getAttribute(TmfTraceType.NAME_ATTR);
    fTraceAttributes.put(traceTypeName,ce);
    traceTypes.add(traceTypeName);
  }
  Collections.sort(traceTypes);
  for (  CustomTxtTraceDefinition def : CustomTxtTraceDefinition.loadAll()) {
    String traceTypeName=CUSTOM_TXT_CATEGORY + ""String_Node_Str"" + def.definitionName;
    traceTypes.add(traceTypeName);
  }
  for (  CustomXmlTraceDefinition def : CustomXmlTraceDefinition.loadAll()) {
    String traceTypeName=CUSTOM_XML_CATEGORY + ""String_Node_Str"" + def.definitionName;
    traceTypes.add(traceTypeName);
  }
  return traceTypes.toArray(new String[0]);
}","private String[] getAvailableTraceTypes(){
  IConfigurationElement[] config=Platform.getExtensionRegistry().getConfigurationElementsFor(TmfTraceType.TMF_TRACE_TYPE_ID);
  for (  IConfigurationElement ce : config) {
    String elementName=ce.getName();
    if (elementName.equals(TmfTraceType.TYPE_ELEM)) {
      String traceTypeId=ce.getAttribute(TmfTraceType.ID_ATTR);
      fTraceTypeAttributes.put(traceTypeId,ce);
    }
 else     if (elementName.equals(TmfTraceType.CATEGORY_ELEM)) {
      String categoryId=ce.getAttribute(TmfTraceType.ID_ATTR);
      fTraceCategories.put(categoryId,ce);
    }
  }
  List<String> traceTypes=new ArrayList<String>();
  for (  String typeId : fTraceTypeAttributes.keySet()) {
    IConfigurationElement ce=fTraceTypeAttributes.get(typeId);
    String traceTypeName=getCategory(ce) + ""String_Node_Str"" + ce.getAttribute(TmfTraceType.NAME_ATTR);
    fTraceAttributes.put(traceTypeName,ce);
    traceTypes.add(traceTypeName);
  }
  Collections.sort(traceTypes);
  for (  CustomTxtTraceDefinition def : CustomTxtTraceDefinition.loadAll()) {
    String traceTypeName=CUSTOM_TXT_CATEGORY + ""String_Node_Str"" + def.definitionName;
    traceTypes.add(traceTypeName);
  }
  for (  CustomXmlTraceDefinition def : CustomXmlTraceDefinition.loadAll()) {
    String traceTypeName=CUSTOM_XML_CATEGORY + ""String_Node_Str"" + def.definitionName;
    traceTypes.add(traceTypeName);
  }
  return traceTypes.toArray(new String[traceTypes.size()]);
}",0.9938186813186812
92607,"public void mouseMove(MouseEvent event){
  int newLine=fParentRuler.toDocumentLineNumber(event.y) + 1;
  if (annotationColumn instanceof ISTAnnotationHyperlink) {
    if (((ISTAnnotationHyperlink)annotationColumn).isAnnotationHyperlink(newLine) && annotationColumn.getAnnotation(newLine).trim() != ""String_Node_Str"") {
      Cursor cursor=new Cursor(event.display,SWT.CURSOR_HAND);
      fCanvas.setCursor(cursor);
    }
 else {
      Cursor cursor=new Cursor(event.display,SWT.CURSOR_ARROW);
      fCanvas.setCursor(cursor);
    }
  }
  if (fIsListeningForMove && !autoScroll(event)) {
    expandSelection(newLine);
  }
  fParentRuler.setLocationOfLastMouseButtonActivity(event.x,event.y);
}","public void mouseMove(MouseEvent event){
  int newLine=fParentRuler.toDocumentLineNumber(event.y) + 1;
  if (annotationColumn instanceof ISTAnnotationHyperlink) {
    if (((ISTAnnotationHyperlink)annotationColumn).isAnnotationHyperlink(newLine) && !annotationColumn.getAnnotation(newLine).trim().isEmpty()) {
      Cursor cursor=new Cursor(event.display,SWT.CURSOR_HAND);
      fCanvas.setCursor(cursor);
    }
 else {
      Cursor cursor=new Cursor(event.display,SWT.CURSOR_ARROW);
      fCanvas.setCursor(cursor);
    }
  }
  if (fIsListeningForMove && !autoScroll(event)) {
    expandSelection(newLine);
  }
  fParentRuler.setLocationOfLastMouseButtonActivity(event.x,event.y);
}",0.9767103347889374
92608,"private synchronized void initializeStreamingMonitor(){
  if (fInitialized) {
    return;
  }
  fInitialized=true;
  if (getStreamingInterval() == 0) {
    TmfContext context=seekLocation(null);
    ITmfEvent event=getNext(context);
    if (event == null) {
      return;
    }
    TmfTimeRange timeRange=new TmfTimeRange(event.getTimestamp(),TmfTimestamp.BigCrunch);
    final TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(this,this,timeRange);
    new Thread(){
      @Override public void run(){
        broadcast(signal);
      }
    }
.start();
    return;
  }
  final Thread thread=new Thread(""String_Node_Str"" + getName()){
    ITmfTimestamp safeTimestamp=null;
    TmfTimeRange timeRange=null;
    @Override public void run(){
      while (!fExecutor.isShutdown()) {
        if (!isIndexingBusy()) {
          ITmfTimestamp startTimestamp=TmfTimestamp.BigCrunch;
          ITmfTimestamp endTimestamp=TmfTimestamp.BigBang;
          for (          ITmfTrace<T> trace : fTraces) {
            if (trace.getStartTime().compareTo(startTimestamp) < 0) {
              startTimestamp=trace.getStartTime();
            }
            if (trace.getStreamingInterval() != 0 && trace.getEndTime().compareTo(endTimestamp) > 0) {
              endTimestamp=trace.getEndTime();
            }
          }
          if (safeTimestamp != null && safeTimestamp.compareTo(getTimeRange().getEndTime(),false) > 0) {
            timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
          }
 else {
            timeRange=null;
          }
          safeTimestamp=endTimestamp;
          if (timeRange != null) {
            TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(TmfExperiment.this,TmfExperiment.this,timeRange);
            broadcast(signal);
          }
        }
        try {
          Thread.sleep(getStreamingInterval());
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  thread.start();
}","private synchronized void initializeStreamingMonitor(){
  if (fInitialized) {
    return;
  }
  fInitialized=true;
  if (getStreamingInterval() == 0) {
    TmfContext context=seekLocation(null);
    ITmfEvent event=getNext(context);
    if (event == null) {
      return;
    }
    TmfTimeRange timeRange=new TmfTimeRange(event.getTimestamp().clone(),TmfTimestamp.BigCrunch);
    final TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(this,this,timeRange);
    new Thread(){
      @Override public void run(){
        broadcast(signal);
      }
    }
.start();
    return;
  }
  final Thread thread=new Thread(""String_Node_Str"" + getName()){
    ITmfTimestamp safeTimestamp=null;
    TmfTimeRange timeRange=null;
    @Override public void run(){
      while (!fExecutor.isShutdown()) {
        if (!isIndexingBusy()) {
          ITmfTimestamp startTimestamp=TmfTimestamp.BigCrunch;
          ITmfTimestamp endTimestamp=TmfTimestamp.BigBang;
          for (          ITmfTrace<T> trace : fTraces) {
            if (trace.getStartTime().compareTo(startTimestamp) < 0) {
              startTimestamp=trace.getStartTime();
            }
            if (trace.getStreamingInterval() != 0 && trace.getEndTime().compareTo(endTimestamp) > 0) {
              endTimestamp=trace.getEndTime();
            }
          }
          if (safeTimestamp != null && safeTimestamp.compareTo(getTimeRange().getEndTime(),false) > 0) {
            timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
          }
 else {
            timeRange=null;
          }
          safeTimestamp=endTimestamp;
          if (timeRange != null) {
            TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(TmfExperiment.this,TmfExperiment.this,timeRange);
            broadcast(signal);
          }
        }
        try {
          Thread.sleep(getStreamingInterval());
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  thread.start();
}",0.9980227385071676
92609,"public void setFullRange(long startTime,long endTime){
  fZoom.setFullRange(startTime,endTime);
}","@Override public void setFullRange(long startTime,long endTime){
  fZoom.setFullRange(startTime,endTime);
}",0.9509803921568628
92610,"@Override public void run(){
  if (!fCanvas.isDisposed()) {
    int canvasWidth=fCanvas.getBounds().width;
    int canvasHeight=fCanvas.getBounds().height;
    if (canvasWidth <= 0 || canvasHeight <= 0)     return;
    fDataModel.setCurrentEvent(fCurrentEventTime);
    fScaledData=fDataModel.scaleTo(canvasWidth,canvasHeight,HISTOGRAM_BAR_WIDTH);
    fCanvas.redraw();
    fTimeRangeStartText.setText(HistogramUtils.nanosecondsToString(fDataModel.getFirstBucketTime()));
    fTimeRangeEndText.setText(HistogramUtils.nanosecondsToString(fDataModel.getEndTime()));
    fMaxNbEventsText.setText(Long.toString(fScaledData.fMaxValue));
    fMaxNbEventsText.getParent().layout();
  }
}","@Override public void run(){
  if (!fCanvas.isDisposed()) {
    int canvasWidth=fCanvas.getBounds().width;
    int canvasHeight=fCanvas.getBounds().height;
    if (canvasWidth <= 0 || canvasHeight <= 0)     return;
    fDataModel.setCurrentEvent(fCurrentEventTime);
    fScaledData=fDataModel.scaleTo(canvasWidth,canvasHeight,HISTOGRAM_BAR_WIDTH);
    fCanvas.redraw();
    fTimeRangeStartText.setText(HistogramUtils.nanosecondsToString(fDataModel.getFirstBucketTime()));
    fTimeRangeEndText.setText(HistogramUtils.nanosecondsToString(fDataModel.getEndTime()));
    fMaxNbEventsText.setText(Long.toString(fScaledData.fMaxValue));
    setFullRange(fDataModel.getFirstBucketTime(),fDataModel.getEndTime());
    fMaxNbEventsText.getParent().layout();
  }
}",0.9477351916376306
92611,"/** 
 * Refresh the histogram display
 */
@Override public void modelUpdated(){
  if (!fCanvas.isDisposed() && fCanvas.getDisplay() != null) {
    fCanvas.getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        if (!fCanvas.isDisposed()) {
          int canvasWidth=fCanvas.getBounds().width;
          int canvasHeight=fCanvas.getBounds().height;
          if (canvasWidth <= 0 || canvasHeight <= 0)           return;
          fDataModel.setCurrentEvent(fCurrentEventTime);
          fScaledData=fDataModel.scaleTo(canvasWidth,canvasHeight,HISTOGRAM_BAR_WIDTH);
          fCanvas.redraw();
          fTimeRangeStartText.setText(HistogramUtils.nanosecondsToString(fDataModel.getFirstBucketTime()));
          fTimeRangeEndText.setText(HistogramUtils.nanosecondsToString(fDataModel.getEndTime()));
          fMaxNbEventsText.setText(Long.toString(fScaledData.fMaxValue));
          fMaxNbEventsText.getParent().layout();
        }
      }
    }
);
  }
}","/** 
 * Refresh the histogram display
 */
@Override public void modelUpdated(){
  if (!fCanvas.isDisposed() && fCanvas.getDisplay() != null) {
    fCanvas.getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        if (!fCanvas.isDisposed()) {
          int canvasWidth=fCanvas.getBounds().width;
          int canvasHeight=fCanvas.getBounds().height;
          if (canvasWidth <= 0 || canvasHeight <= 0)           return;
          fDataModel.setCurrentEvent(fCurrentEventTime);
          fScaledData=fDataModel.scaleTo(canvasWidth,canvasHeight,HISTOGRAM_BAR_WIDTH);
          fCanvas.redraw();
          fTimeRangeStartText.setText(HistogramUtils.nanosecondsToString(fDataModel.getFirstBucketTime()));
          fTimeRangeEndText.setText(HistogramUtils.nanosecondsToString(fDataModel.getEndTime()));
          fMaxNbEventsText.setText(Long.toString(fScaledData.fMaxValue));
          setFullRange(fDataModel.getFirstBucketTime(),fDataModel.getEndTime());
          fMaxNbEventsText.getParent().layout();
        }
      }
    }
);
  }
}",0.9602746444335458
92612,"public void setFullRange(long startTime,long endTime){
  long currentFirstEvent=getStartTime();
  fZoom.setFullRange((currentFirstEvent == 0) ? startTime : currentFirstEvent,endTime);
}","@Override public void setFullRange(long startTime,long endTime){
  long currentFirstEvent=getStartTime();
  fZoom.setFullRange((currentFirstEvent == 0) ? startTime : currentFirstEvent,endTime);
}",0.9736842105263158
92613,"public void start(BundleContext context) throws Exception {
  super.start(context);
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
}",0.918918918918919
92614,"/** 
 * The constructor.
 */
public OprofileLaunchPlugin(){
  plugin=this;
}","/** 
 * The constructor.
 */
public OprofileLaunchPlugin(){
}",0.8905109489051095
92615,"/** 
 * The constructor.
 */
public OprofileUiPlugin(){
  plugin=this;
}","/** 
 * The constructor.
 */
public OprofileUiPlugin(){
}",0.8837209302325582
92616,"/** 
 * This method is called upon plug-in activation
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
}","/** 
 * This method is called upon plug-in activation
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
}",0.9501661129568106
92617,"public static void scrollDown(StapGraph graph){
  if (graph.getDrawMode() == StapGraph.CONSTANT_DRAWMODE_LEVEL) {
    if (graph.getTopLevel() + StapGraph.levelBuffer < graph.getLowestLevelOfNodesAdded()) {
      int newLevel=graph.getTopLevel() + 1;
      if (graph.levels.get(newLevel).get(0) == null)       return;
      graph.setTopLevelTo(newLevel);
      int animMode=graph.getAnimationMode();
      graph.setAnimationMode(StapGraph.CONSTANT_ANIMATION_FASTEST);
      graph.draw(graph.getDrawMode(),StapGraph.CONSTANT_ANIMATION_FASTEST,graph.levels.get(newLevel).get(0));
      graph.setAnimationMode(animMode);
    }
  }
 else   if (graph.getDrawMode() == StapGraph.CONSTANT_DRAWMODE_TREE) {
    graph.extendTree();
  }
}","public static void scrollDown(StapGraph graph){
  if (graph.getDrawMode() == StapGraph.CONSTANT_DRAWMODE_LEVEL) {
    if (graph.getTopLevel() + graph.levelBuffer < graph.getLowestLevelOfNodesAdded()) {
      int newLevel=graph.getTopLevel() + 1;
      if (graph.levels.get(newLevel).get(0) == null)       return;
      graph.setTopLevelTo(newLevel);
      int animMode=graph.getAnimationMode();
      graph.setAnimationMode(StapGraph.CONSTANT_ANIMATION_FASTEST);
      graph.draw(graph.getDrawMode(),StapGraph.CONSTANT_ANIMATION_FASTEST,graph.levels.get(newLevel).get(0));
      graph.setAnimationMode(animMode);
    }
  }
 else   if (graph.getDrawMode() == StapGraph.CONSTANT_DRAWMODE_TREE) {
    graph.extendTree();
  }
}",0.9958620689655172
92618,"private String getDefaultBinary(IPath file){
  File gmonFile=file.toFile();
  File parent=gmonFile.getParentFile();
  File info=new File(parent,""String_Node_Str"");
  IProject project=null;
  IFile ifile=null;
  try {
    String line;
    String tab[];
    if (info.exists()) {
      BufferedReader br=new BufferedReader(new FileReader(info.toString()));
      while ((line=br.readLine()) != null) {
        tab=line.split(""String_Node_Str"");
        String name=""String_Node_Str"", value=""String_Node_Str"";
        if (tab.length > 1) {
          name=tab[0];
          value=tab[1].trim();
          if (name.equals(""String_Node_Str"")) {
            project=ResourcesPlugin.getWorkspace().getRoot().getProject(value);
          }
 else           if (name.equals(""String_Node_Str"")) {
            if (project != null) {
              ifile=project.getFile(value);
              br.close();
              if (ifile.exists()) {
                return ifile.getLocation().toString();
              }
            }
          }
        }
      }
    }
 else {
      IFile c=ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(file);
      if (c != null) {
        project=c.getProject();
        if (project != null && project.exists()) {
          ICProject cproject=CoreModel.getDefault().create(project);
          if (cproject != null) {
            try {
              IBinary[] b=cproject.getBinaryContainer().getBinaries();
              if (b != null && b.length > 0 && b[0] != null) {
                IResource r=b[0].getResource();
                return r.getLocation().toOSString();
              }
            }
 catch (            CModelException _) {
            }
          }
        }
      }
    }
  }
 catch (  FileNotFoundException e) {
    Status status=new Status(Status.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,e.getMessage(),e);
    Activator.getDefault().getLog().log(status);
  }
catch (  IOException e) {
    Status status=new Status(Status.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
    Activator.getDefault().getLog().log(status);
  }
  return ""String_Node_Str"";
}","private String getDefaultBinary(IPath file){
  File gmonFile=file.toFile();
  File parent=gmonFile.getParentFile();
  File info=new File(parent,""String_Node_Str"");
  IProject project=null;
  IFile ifile=null;
  try {
    String line;
    String tab[];
    if (info.exists()) {
      BufferedReader br=null;
      try {
        br=new BufferedReader(new FileReader(info.toString()));
        while ((line=br.readLine()) != null) {
          tab=line.split(""String_Node_Str"");
          String name=""String_Node_Str"", value=""String_Node_Str"";
          if (tab.length > 1) {
            name=tab[0];
            value=tab[1].trim();
            if (name.equals(""String_Node_Str"")) {
              project=ResourcesPlugin.getWorkspace().getRoot().getProject(value);
            }
 else             if (name.equals(""String_Node_Str"")) {
              if (project != null) {
                ifile=project.getFile(value);
                br.close();
                if (ifile.exists()) {
                  return ifile.getLocation().toString();
                }
              }
            }
          }
        }
      }
  finally {
        if (br != null)         br.close();
      }
    }
 else {
      IFile c=ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(file);
      if (c != null) {
        project=c.getProject();
        if (project != null && project.exists()) {
          ICProject cproject=CoreModel.getDefault().create(project);
          if (cproject != null) {
            try {
              IBinary[] b=cproject.getBinaryContainer().getBinaries();
              if (b != null && b.length > 0 && b[0] != null) {
                IResource r=b[0].getResource();
                return r.getLocation().toOSString();
              }
            }
 catch (            CModelException _) {
            }
          }
        }
      }
    }
  }
 catch (  FileNotFoundException e) {
    Status status=new Status(Status.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,e.getMessage(),e);
    Activator.getDefault().getLog().log(status);
  }
catch (  IOException e) {
    Status status=new Status(Status.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
    Activator.getDefault().getLog().log(status);
  }
  return ""String_Node_Str"";
}",0.9677271686884872
92619,"private String getDefaultBinary(IPath file){
  File gmonFile=file.toFile();
  File parent=gmonFile.getParentFile();
  File info=new File(parent,""String_Node_Str"");
  IProject project=null;
  IFile ifile=null;
  try {
    String line;
    String tab[];
    if (info.exists()) {
      BufferedReader br=new BufferedReader(new FileReader(info.toString()));
      while ((line=br.readLine()) != null) {
        tab=line.split(""String_Node_Str"");
        String name=""String_Node_Str"", value=""String_Node_Str"";
        if (tab.length > 1) {
          name=tab[0];
          value=tab[1].trim();
          if (name.equals(""String_Node_Str"")) {
            project=ResourcesPlugin.getWorkspace().getRoot().getProject(value);
          }
 else           if (name.equals(""String_Node_Str"")) {
            if (project != null) {
              ifile=project.getFile(value);
              br.close();
              if (ifile.exists()) {
                return ifile.getLocation().toString();
              }
            }
          }
        }
      }
    }
 else {
      IFile c=ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(file);
      if (c != null) {
        project=c.getProject();
        if (project != null && project.exists()) {
          ICProject cproject=CoreModel.getDefault().create(project);
          if (cproject != null) {
            try {
              IBinary[] b=cproject.getBinaryContainer().getBinaries();
              if (b != null && b.length > 0 && b[0] != null) {
                IResource r=b[0].getResource();
                return r.getLocation().toOSString();
              }
            }
 catch (            CModelException _) {
            }
          }
        }
      }
    }
  }
 catch (  FileNotFoundException e) {
    Status status=new Status(Status.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,e.getMessage(),e);
    Activator.getDefault().getLog().log(status);
  }
catch (  IOException e) {
    Status status=new Status(Status.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
    Activator.getDefault().getLog().log(status);
  }
  return ""String_Node_Str"";
}","private String getDefaultBinary(IPath file){
  File gmonFile=file.toFile();
  File parent=gmonFile.getParentFile();
  File info=new File(parent,""String_Node_Str"");
  IProject project=null;
  IFile ifile=null;
  try {
    String line;
    String tab[];
    if (info.exists()) {
      BufferedReader br=null;
      try {
        br=new BufferedReader(new FileReader(info.toString()));
        while ((line=br.readLine()) != null) {
          tab=line.split(""String_Node_Str"");
          String name=""String_Node_Str"", value=""String_Node_Str"";
          if (tab.length > 1) {
            name=tab[0];
            value=tab[1].trim();
            if (name.equals(""String_Node_Str"")) {
              project=ResourcesPlugin.getWorkspace().getRoot().getProject(value);
            }
 else             if (name.equals(""String_Node_Str"")) {
              if (project != null) {
                ifile=project.getFile(value);
                if (ifile.exists()) {
                  return ifile.getLocation().toString();
                }
              }
            }
          }
        }
      }
  finally {
        if (br != null)         br.close();
      }
    }
 else {
      IFile c=ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(file);
      if (c != null) {
        project=c.getProject();
        if (project != null && project.exists()) {
          ICProject cproject=CoreModel.getDefault().create(project);
          if (cproject != null) {
            try {
              IBinary[] b=cproject.getBinaryContainer().getBinaries();
              if (b != null && b.length > 0 && b[0] != null) {
                IResource r=b[0].getResource();
                return r.getLocation().toOSString();
              }
            }
 catch (            CModelException _) {
            }
          }
        }
      }
    }
  }
 catch (  FileNotFoundException e) {
    Status status=new Status(Status.WARNING,Activator.PLUGIN_ID,IStatus.WARNING,e.getMessage(),e);
    Activator.getDefault().getLog().log(status);
  }
catch (  IOException e) {
    Status status=new Status(Status.ERROR,Activator.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
    Activator.getDefault().getLog().log(status);
  }
  return ""String_Node_Str"";
}",0.903939184519696
92620,"/** 
 * Validate the binary file. In particular, verify that this binary file can be decoded.
 * @param o
 * @return the binary object, or null.
 */
private IBinaryObject validateBinary(IBinaryFile o){
  if (o instanceof IBinaryObject) {
    IBinaryObject object=(IBinaryObject)o;
    String s=null;
    try {
      s=object.getCPU();
    }
 catch (    Exception _) {
    }
    if (s.length() > 0) {
      return object;
    }
  }
  return null;
}","/** 
 * Validate the binary file. In particular, verify that this binary file can be decoded.
 * @param o
 * @return the binary object, or null.
 */
private IBinaryObject validateBinary(IBinaryFile o){
  if (o instanceof IBinaryObject) {
    IBinaryObject object=(IBinaryObject)o;
    String s=null;
    try {
      s=object.getCPU();
    }
 catch (    Exception _) {
    }
    if (s != null && s.length() > 0) {
      return object;
    }
  }
  return null;
}",0.9856670341786108
92621,"/** 
 * Updates the tool tip text of the header of this ruler.
 * @since 3.0
 */
private void updateHeaderToolTipText(){
  if (fHeader == null || fHeader.isDisposed())   return;
  fHeader.setToolTipText(null);
  if (!(fAnnotationAccess instanceof IAnnotationAccessExtension))   return;
  String overview=""String_Node_Str"";
  for (int i=fAnnotationsSortedByLayer.size() - 1; i >= 0; i--) {
    Object annotationType=fAnnotationsSortedByLayer.get(i);
    if (skipInHeader(annotationType) || skip(annotationType))     continue;
    int count=0;
    String annotationTypeLabel=null;
    for (FilterIterator e=new FilterIterator(annotationType,FilterIterator.PERSISTENT | FilterIterator.TEMPORARY | FilterIterator.IGNORE_BAGS); e.hasNext(); ) {
      Annotation annotation=e.next();
      if (annotation != null) {
        if (annotationTypeLabel == null)         annotationTypeLabel=((IAnnotationAccessExtension)fAnnotationAccess).getTypeLabel(annotation);
        count++;
      }
    }
    if (annotationTypeLabel != null) {
      if (overview.length() > 0)       overview+=""String_Node_Str"";
      overview+=STJFaceTextMessages.getFormattedString(""String_Node_Str"",new Object[]{annotationTypeLabel,new Integer(count)});
    }
  }
  if (overview.length() > 0)   fHeader.setToolTipText(overview);
}","/** 
 * Updates the tool tip text of the header of this ruler.
 * @since 3.0
 */
private void updateHeaderToolTipText(){
  if (fHeader == null || fHeader.isDisposed())   return;
  fHeader.setToolTipText(null);
  if (!(fAnnotationAccess instanceof IAnnotationAccessExtension))   return;
  String overview=""String_Node_Str"";
  for (int i=fAnnotationsSortedByLayer.size() - 1; i >= 0; i--) {
    Object annotationType=fAnnotationsSortedByLayer.get(i);
    if (skipInHeader(annotationType) || skip(annotationType))     continue;
    int count=0;
    String annotationTypeLabel=null;
    for (FilterIterator e=new FilterIterator(annotationType,FilterIterator.PERSISTENT | FilterIterator.TEMPORARY | FilterIterator.IGNORE_BAGS); e.hasNext(); ) {
      Annotation annotation=e.next();
      if (annotation != null) {
        if (annotationTypeLabel == null)         annotationTypeLabel=((IAnnotationAccessExtension)fAnnotationAccess).getTypeLabel(annotation);
        count++;
      }
    }
    if (annotationTypeLabel != null) {
      if (overview.length() > 0)       overview+=""String_Node_Str"";
      overview+=STJFaceTextMessages.getFormattedString(""String_Node_Str"",new Object[]{annotationTypeLabel,count});
    }
  }
  if (overview.length() > 0)   fHeader.setToolTipText(overview);
}",0.93209157935584
92622,"public void mouseDown(MouseEvent event){
  fParentRuler.setLocationOfLastMouseButtonActivity(event.x,event.y);
  int newLine=fParentRuler.toDocumentLineNumber(event.y) + 1;
  if (annotationColumn instanceof ISTAnnotationHyperlink) {
    ISTAnnotationHyperlink ahp=(ISTAnnotationHyperlink)annotationColumn;
    if (ahp.isAnnotationHyperlink(newLine) && annotationColumn.getAnnotation(newLine).trim() != ""String_Node_Str"") {
      ahp.handleHyperlink(newLine);
    }
  }
 else {
    if (event.button == 1) {
      startSelecting();
    }
  }
}","public void mouseDown(MouseEvent event){
  fParentRuler.setLocationOfLastMouseButtonActivity(event.x,event.y);
  int newLine=fParentRuler.toDocumentLineNumber(event.y) + 1;
  if (annotationColumn instanceof ISTAnnotationHyperlink) {
    ISTAnnotationHyperlink ahp=(ISTAnnotationHyperlink)annotationColumn;
    if (ahp.isAnnotationHyperlink(newLine) && !annotationColumn.getAnnotation(newLine).trim().isEmpty()) {
      ahp.handleHyperlink(newLine);
    }
  }
 else {
    if (event.button == 1) {
      startSelecting();
    }
  }
}",0.9701492537313432
92623,"/** 
 * Paints the line. After this method is called the line numbers are painted on top of the result of this method.
 * @param line the line of the document which the ruler is painted for
 * @param y the y-coordinate of the box being painted for <code>line</code>, relative to <code>gc</code>
 * @param lineheight the height of one line (and therefore of the box being painted)
 * @param gc the drawing context the client may choose to draw on.
 * @param display the display the drawing occurs on
 * @since 3.0
 */
protected void paintLine(int line,int y,int lineheight,GC gc,Display display){
  int widgetLine=JFaceTextUtil.modelLineToWidgetLine(fParentRuler.getTextViewer(),line);
  String s=""String_Node_Str"";
  int indentation=fCachedNumberOfDigits;
  if (annotationColumn instanceof ISTAnnotationHyperlink) {
    ISTAnnotationHyperlink ah=(ISTAnnotationHyperlink)annotationColumn;
    if (ah.isAnnotationHyperlink(widgetLine)) {
      paintHyperLink(line,y,indentation,lineheight,gc,display);
    }
  }
 else {
    s=annotationColumn.getAnnotation(widgetLine);
    if (widgetLine + 1 == 1) {
      for (int i=0; i < annotationColumn.getTitle().length(); i++)       s=s + ""String_Node_Str"";
    }
    int baselineBias=getBaselineBias(gc,widgetLine);
    gc.drawString(s,indentation,y + baselineBias,true);
  }
}","/** 
 * Paints the line. After this method is called the line numbers are painted on top of the result of this method.
 * @param line the line of the document which the ruler is painted for
 * @param y the y-coordinate of the box being painted for <code>line</code>, relative to <code>gc</code>
 * @param lineheight the height of one line (and therefore of the box being painted)
 * @param gc the drawing context the client may choose to draw on.
 * @param display the display the drawing occurs on
 * @since 3.0
 */
protected void paintLine(int line,int y,int lineheight,GC gc,Display display){
  int widgetLine=JFaceTextUtil.modelLineToWidgetLine(fParentRuler.getTextViewer(),line);
  String s=""String_Node_Str"";
  int indentation=fCachedNumberOfDigits;
  if (annotationColumn instanceof ISTAnnotationHyperlink) {
    ISTAnnotationHyperlink ah=(ISTAnnotationHyperlink)annotationColumn;
    if (ah.isAnnotationHyperlink(widgetLine)) {
      paintHyperLink(line,y,indentation,lineheight,gc,display);
    }
  }
 else {
    s=annotationColumn.getAnnotation(widgetLine);
    if (widgetLine == 0) {
      for (int i=0; i < annotationColumn.getTitle().length(); i++)       s=s + ""String_Node_Str"";
    }
    int baselineBias=getBaselineBias(gc,widgetLine);
    gc.drawString(s,indentation,y + baselineBias,true);
  }
}",0.9977186311787072
92624,"@Override public void run(){
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  IFileStore fileStore=getFileStore();
  if (fileStore != null && !fileStore.fetchInfo().isDirectory() && fileStore.fetchInfo().exists()) {
    long timeStamp=fileStore.fetchInfo().getLastModified();
    if (timeStamp > ts) {
      MessageBox msg=new MessageBox(window.getShell(),SWT.ICON_WARNING | SWT.APPLICATION_MODAL | SWT.YES| SWT.NO);
      msg.setText(fileStore.toString());
      msg.setMessage(""String_Node_Str"" + fileStore + ""String_Node_Str""+ ""String_Node_Str"");
    }
    try {
      IWorkbenchPage page=window.getActivePage();
      if (page != null) {
        IFileStore fs=EFS.getStore(fileStore.toURI());
        IEditorInput input=getInput(fs);
        page.openEditor(input,EDITOR_ID,false);
      }
    }
 catch (    Exception e) {
      Status s=new Status(IStatus.ERROR,STAnnotatedSourceEditorActivator.getUniqueIdentifier(),IStatus.ERROR,""String_Node_Str"",e);
      STAnnotatedSourceEditorActivator.getDefault().getLog().log(s);
    }
  }
 else {
    if (!fileStore.fetchInfo().exists()) {
      showMessage(""String_Node_Str"" + fileStore,window.getShell());
    }
  }
}","@Override public void run(){
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  IFileStore fileStore=getFileStore();
  if (fileStore != null && !fileStore.fetchInfo().isDirectory()) {
    if (fileStore.fetchInfo().exists()) {
      long timeStamp=fileStore.fetchInfo().getLastModified();
      if (timeStamp > ts) {
        MessageBox msg=new MessageBox(window.getShell(),SWT.ICON_WARNING | SWT.APPLICATION_MODAL | SWT.YES| SWT.NO);
        msg.setText(fileStore.toString());
        msg.setMessage(""String_Node_Str"" + fileStore + ""String_Node_Str""+ ""String_Node_Str"");
      }
      try {
        IWorkbenchPage page=window.getActivePage();
        if (page != null) {
          IFileStore fs=EFS.getStore(fileStore.toURI());
          IEditorInput input=getInput(fs);
          page.openEditor(input,EDITOR_ID,false);
        }
      }
 catch (      Exception e) {
        Status s=new Status(IStatus.ERROR,STAnnotatedSourceEditorActivator.getUniqueIdentifier(),IStatus.ERROR,""String_Node_Str"",e);
        STAnnotatedSourceEditorActivator.getDefault().getLog().log(s);
      }
    }
 else {
      showMessage(""String_Node_Str"" + fileStore,window.getShell());
    }
  }
}",0.9596337910944652
92625,"public void run(){
  String path=dialog.open();
  if (path == null) {
    return;
  }
  Serializer serializer=null;
  final File chartFile=new File(path);
  try {
    serializer=SerializerImpl.instance();
    if (chartFile.exists()) {
      chart=serializer.read(new FileInputStream(chartFile));
      chartView.getChartViewer().setBuffer(null);
      chartView.setChart(chart);
    }
  }
 catch (  Exception e) {
    WizardBase.displayException(e);
  }
}","public void run(){
  String path=dialog.open();
  if (path == null) {
    return;
  }
  File chartFile=new File(path);
  try {
    Serializer serializer=SerializerImpl.instance();
    if (chartFile.exists()) {
      chart=serializer.read(new FileInputStream(chartFile));
      chartView.getChartViewer().setBuffer(null);
      chartView.setChart(chart);
    }
  }
 catch (  Exception e) {
    WizardBase.displayException(e);
  }
}",0.8745762711864407
92626,"/** 
 * Create and open a new chart view <br/> <br/><u><b>Note</b></u>: this method uses the UI thread to open the view and then it sets the input chart. The UI thread execution is synchronized on internal Integer SEC_ID which is the secondary id of the chart view. Each new chart view has a secondary id equal to SEC_ID++. 
 * @param chart
 */
public static void createChartView(final Chart chart){
  PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
    public void run(){
      try {
synchronized (SEC_ID) {
          ChartView view=(ChartView)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(VIEW_ID,""String_Node_Str"" + (SEC_ID++),IWorkbenchPage.VIEW_ACTIVATE);
          view.setChart(chart);
        }
      }
 catch (      PartInitException e) {
        Status s=new Status(Status.ERROR,Activator.PLUGIN_ID,Status.ERROR,e.getMessage(),e);
        Activator.getDefault().getLog().log(s);
      }
    }
  }
);
}","/** 
 * Create and open a new chart view <br/> <br/><u><b>Note</b></u>: this method uses the UI thread to open the view and then it sets the input chart. The UI thread execution is synchronized on internal Integer SEC_ID which is the secondary id of the chart view. Each new chart view has a secondary id equal to SEC_ID++. 
 * @param chart
 */
public static void createChartView(final Chart chart){
  PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
    public void run(){
      try {
synchronized (lock) {
          ChartView view=(ChartView)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(VIEW_ID,""String_Node_Str"" + (SEC_ID++),IWorkbenchPage.VIEW_ACTIVATE);
          view.setChart(chart);
        }
      }
 catch (      PartInitException e) {
        Status s=new Status(Status.ERROR,Activator.PLUGIN_ID,Status.ERROR,e.getMessage(),e);
        Activator.getDefault().getLog().log(s);
      }
    }
  }
);
}",0.9947807933194156
92627,"public void setContent(LttngEventContent newContent){
  fContent=newContent;
}","public void setContent(LttngEventContent newContent){
  super.setContent(newContent);
}",0.9212121212121211
92628,"@Override public LttngEventContent getContent(){
  return (LttngEventContent)fContent;
}","@Override public LttngEventContent getContent(){
  return (LttngEventContent)super.getContent();
}",0.935483870967742
92629,"public void setType(LttngEventType newType){
  fType=newType;
}","public void setType(LttngEventType newType){
  super.setType(newType);
}",0.9037037037037036
92630,"@Override public void setReference(String reference){
  fReference=reference;
}","@Override public void setReference(String reference){
  super.setReference(reference);
}",0.9221556886227544
92631,"@Override public LttngEventType getType(){
  return (LttngEventType)fType;
}","@Override public LttngEventType getType(){
  return (LttngEventType)super.getType();
}",0.925925925925926
92632,"/** 
 * Set a new parent trace for this event
 * @param parentTrace The new parent
 */
public void setParentTrace(TmfTrace<LttngEvent> parentTrace){
  fTrace=parentTrace;
}","/** 
 * Set a new parent trace for this event
 * @param parentTrace The new parent
 */
public void setParentTrace(TmfTrace<LttngEvent> parentTrace){
  super.setTrace(parentTrace);
}",0.963172804532578
92633,"public void testSetContent(){
  TmfEvent event=new TmfEvent(fEvent1);
  assertEquals(""String_Node_Str"",fContent1,event.getContent());
  event.setContent(fContent2);
  assertEquals(""String_Node_Str"",fContent2,event.getContent());
  event.setContent(null);
  assertNull(""String_Node_Str"",event.getContent());
  event.setContent(fContent1);
  assertEquals(""String_Node_Str"",fContent1,event.getContent());
}","public void testSetContent(){
  TestEvent event=new TestEvent(fEvent1);
  assertEquals(""String_Node_Str"",fContent1,event.getContent());
  event.setContent(fContent2);
  assertEquals(""String_Node_Str"",fContent2,event.getContent());
  event.setContent(null);
  assertNull(""String_Node_Str"",event.getContent());
  event.setContent(fContent1);
  assertEquals(""String_Node_Str"",fContent1,event.getContent());
}",0.9876237623762376
92634,"public void testSetType(){
  TmfEvent event=new TmfEvent(fEvent1);
  assertEquals(""String_Node_Str"",fType,event.getType());
  String typeId=""String_Node_Str"";
  String[] labels=new String[]{fLabel2,fLabel1};
  TmfEventType newType=new TmfEventType(fContext,typeId,TmfEventField.makeRoot(labels));
  event.setType(newType);
  assertEquals(""String_Node_Str"",newType,event.getType());
  event.setType(null);
  assertNull(""String_Node_Str"",event.getType());
  event.setType(fType);
  assertEquals(""String_Node_Str"",fType,event.getType());
}","public void testSetType(){
  TestEvent event=new TestEvent(fEvent1);
  assertEquals(""String_Node_Str"",fType,event.getType());
  String typeId=""String_Node_Str"";
  String[] labels=new String[]{fLabel2,fLabel1};
  TmfEventType newType=new TmfEventType(fContext,typeId,TmfEventField.makeRoot(labels));
  event.setType(newType);
  assertEquals(""String_Node_Str"",newType,event.getType());
  event.setType(null);
  assertNull(""String_Node_Str"",event.getType());
  event.setType(fType);
  assertEquals(""String_Node_Str"",fType,event.getType());
}",0.9906890130353816
92635,"public void testSetReference(){
  TmfEvent event=new TmfEvent(fEvent1);
  assertEquals(""String_Node_Str"",fReference1,event.getReference());
  event.setReference(fReference2);
  assertEquals(""String_Node_Str"",fReference2,event.getReference());
  event.setReference(null);
  assertNull(""String_Node_Str"",event.getReference());
  event.setReference(fReference1);
  assertEquals(""String_Node_Str"",fReference1,event.getReference());
}","public void testSetReference(){
  TestEvent event=new TestEvent(fEvent1);
  assertEquals(""String_Node_Str"",fReference1,event.getReference());
  event.setReference(fReference2);
  assertEquals(""String_Node_Str"",fReference2,event.getReference());
  event.setReference(null);
  assertNull(""String_Node_Str"",event.getReference());
  event.setReference(fReference1);
  assertEquals(""String_Node_Str"",fReference1,event.getReference());
}",0.9883720930232558
92636,"public void testSetSource(){
  TmfEvent event=new TmfEvent(fEvent1);
  assertEquals(""String_Node_Str"",fSource,event.getSource());
  String source2=""String_Node_Str"";
  event.setSource(source2);
  assertEquals(""String_Node_Str"",source2,event.getSource());
  event.setSource(null);
  assertNull(""String_Node_Str"",event.getSource());
  event.setSource(fSource);
  assertEquals(""String_Node_Str"",fSource,event.getSource());
}","public void testSetSource(){
  TestEvent event=new TestEvent(fEvent1);
  assertEquals(""String_Node_Str"",fSource,event.getSource());
  String source2=""String_Node_Str"";
  event.setSource(source2);
  assertEquals(""String_Node_Str"",source2,event.getSource());
  event.setSource(null);
  assertNull(""String_Node_Str"",event.getSource());
  event.setSource(fSource);
  assertEquals(""String_Node_Str"",fSource,event.getSource());
}",0.9881516587677726
92637,"public void testSetTimestamp(){
  TmfEvent event=new TmfEvent(fEvent1);
  assertEquals(""String_Node_Str"",fTimestamp1,event.getTimestamp());
  event.setTimestamp(fTimestamp2);
  assertEquals(""String_Node_Str"",fTimestamp2,event.getTimestamp());
  event.setTimestamp(null);
  assertNull(""String_Node_Str"",event.getTimestamp());
  event.setTimestamp(fTimestamp1);
  assertEquals(""String_Node_Str"",fTimestamp1,event.getTimestamp());
}","public void testSetTimestamp(){
  TestEvent event=new TestEvent(fEvent1);
  assertEquals(""String_Node_Str"",fTimestamp1,event.getTimestamp());
  event.setTimestamp(fTimestamp2);
  assertEquals(""String_Node_Str"",fTimestamp2,event.getTimestamp());
  event.setTimestamp(null);
  assertNull(""String_Node_Str"",event.getTimestamp());
  event.setTimestamp(fTimestamp1);
  assertEquals(""String_Node_Str"",fTimestamp1,event.getTimestamp());
}",0.9883720930232558
92638,"/** 
 * @param source the new event source
 */
public void setSource(String source){
  fSource=source;
}","/** 
 * @param source the new event source
 */
protected void setSource(String source){
  fSource=source;
}",0.9478672985781992
92639,"/** 
 * @param content the event new content
 */
public void setContent(ITmfEventField content){
  fContent=content;
}","/** 
 * @param content the event new content
 */
protected void setContent(ITmfEventField content){
  fContent=content;
}",0.9539748953974896
92640,"/** 
 * @param type the new event type
 */
public void setType(ITmfEventType type){
  fType=type;
}","/** 
 * @param type the new event type
 */
protected void setType(ITmfEventType type){
  fType=type;
}",0.945273631840796
92641,"/** 
 * @param reference the new event reference
 */
public void setReference(String reference){
  fReference=reference;
}","/** 
 * @param reference the new event reference
 */
protected void setReference(String reference){
  fReference=reference;
}",0.9554655870445344
92642,"/** 
 * @param timestamp the new event timestamp
 */
public void setTimestamp(ITmfTimestamp timestamp){
  fTimestamp=timestamp;
}","/** 
 * @param timestamp the new event timestamp
 */
protected void setTimestamp(ITmfTimestamp timestamp){
  fTimestamp=timestamp;
}",0.9578544061302682
92643,"public TmfBaseColumnDataProviderTest(final String name){
  super(name);
  fTestName=name;
  fEvent1=new TmfEvent(fTimestamp1,fSource,fType1,fReference);
  fContent1=new TmfEventField(ITmfEventField.ROOT_ID,""String_Node_Str"");
  fEvent1.setContent(fContent1);
  fEvent2=new TmfEvent(fTimestamp2,fSource,fType2,fReference);
  fContent2=new TmfEventField(ITmfEventField.ROOT_ID,""String_Node_Str"");
  fEvent2.setContent(fContent2);
  fEvent3=new TmfEvent(fTimestamp3,fSource,fType3,fReference);
  fContent3=new TmfEventField(ITmfEventField.ROOT_ID,""String_Node_Str"");
  fEvent3.setContent(fContent3);
  fStatsData=new TmfBaseStatisticsTree();
  fExtraInfo=new ITmfExtraEventInfo(){
    @Override public String getTraceName(){
      return name;
    }
  }
;
  fStatsData.getOrCreate(new TmfFixedArray<String>(fTestName,Messages.TmfStatisticsData_EventTypes));
  fStatsData.registerEvent(fEvent1,fExtraInfo);
  fStatsData.registerEvent(fEvent2,fExtraInfo);
  fStatsData.registerEvent(fEvent3,fExtraInfo);
  provider=new TmfBaseColumnDataProvider();
}","public TmfBaseColumnDataProviderTest(final String name){
  super(name);
  fTestName=name;
  fContent1=new TmfEventField(ITmfEventField.ROOT_ID,""String_Node_Str"");
  fEvent1=new TmfEvent(null,fTimestamp1,fSource,fType1,fContent1,fReference);
  fContent2=new TmfEventField(ITmfEventField.ROOT_ID,""String_Node_Str"");
  fEvent2=new TmfEvent(null,fTimestamp2,fSource,fType2,fContent2,fReference);
  fContent3=new TmfEventField(ITmfEventField.ROOT_ID,""String_Node_Str"");
  fEvent3=new TmfEvent(null,fTimestamp3,fSource,fType3,fContent3,fReference);
  fStatsData=new TmfBaseStatisticsTree();
  fExtraInfo=new ITmfExtraEventInfo(){
    @Override public String getTraceName(){
      return name;
    }
  }
;
  fStatsData.getOrCreate(new TmfFixedArray<String>(fTestName,Messages.TmfStatisticsData_EventTypes));
  fStatsData.registerEvent(fEvent1,fExtraInfo);
  fStatsData.registerEvent(fEvent2,fExtraInfo);
  fStatsData.registerEvent(fEvent3,fExtraInfo);
  provider=new TmfBaseColumnDataProvider();
}",0.823992133726647
92644,"/** 
 * @param name of the test
 */
public TmfBaseStatisticsDataTest(final String name){
  super(name);
  fTestName=name;
  fEvent1=new TmfEvent(fTimestamp1,fSource,fType1,fReference);
  fContent1=new TmfEventField(ITmfEventField.ROOT_ID,""String_Node_Str"");
  fEvent1.setContent(fContent1);
  fEvent2=new TmfEvent(fTimestamp2,fSource,fType2,fReference);
  fContent2=new TmfEventField(ITmfEventField.ROOT_ID,""String_Node_Str"");
  fEvent2.setContent(fContent2);
  fEvent3=new TmfEvent(fTimestamp3,fSource,fType3,fReference);
  fContent3=new TmfEventField(ITmfEventField.ROOT_ID,""String_Node_Str"");
  fEvent3.setContent(fContent3);
  fStatsData=new TmfBaseStatisticsTree();
  fExtraInfo=new ITmfExtraEventInfo(){
    @Override public String getTraceName(){
      return name;
    }
  }
;
  fStatsData.registerEvent(fEvent1,fExtraInfo);
  fStatsData.registerEvent(fEvent2,fExtraInfo);
  fStatsData.registerEvent(fEvent3,fExtraInfo);
}","/** 
 * @param name of the test
 */
public TmfBaseStatisticsDataTest(final String name){
  super(name);
  fTestName=name;
  fContent1=new TmfEventField(ITmfEventField.ROOT_ID,""String_Node_Str"");
  fEvent1=new TmfEvent(null,fTimestamp1,fSource,fType1,fContent1,fReference);
  fContent2=new TmfEventField(ITmfEventField.ROOT_ID,""String_Node_Str"");
  fEvent2=new TmfEvent(null,fTimestamp2,fSource,fType2,fContent2,fReference);
  fContent3=new TmfEventField(ITmfEventField.ROOT_ID,""String_Node_Str"");
  fEvent3=new TmfEvent(null,fTimestamp3,fSource,fType3,fContent3,fReference);
  fStatsData=new TmfBaseStatisticsTree();
  fExtraInfo=new ITmfExtraEventInfo(){
    @Override public String getTraceName(){
      return name;
    }
  }
;
  fStatsData.registerEvent(fEvent1,fExtraInfo);
  fStatsData.registerEvent(fEvent2,fExtraInfo);
  fStatsData.registerEvent(fEvent3,fExtraInfo);
}",0.8017718715393134
92645,"public void initializeFrom(ILaunchConfiguration config){
  try {
    cacheButton.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_CACHE_SIM,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_CACHE_SIM));
    branchButton.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_BRANCH_SIM,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_BRANCH_SIM));
    i1Button.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_I1,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_I1));
    i1SizeSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_I1_SIZE,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_I1_SIZE));
    i1AssocSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_I1_ASSOC,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_I1_ASSOC));
    i1LineSizeSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_I1_LSIZE,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_I1_LSIZE));
    checkI1Enablement();
    d1Button.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_D1,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_D1));
    d1SizeSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_D1_SIZE,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_D1_SIZE));
    d1AssocSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_D1_ASSOC,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_D1_ASSOC));
    d1LineSizeSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_D1_LSIZE,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_D1_LSIZE));
    checkD1Enablement();
    l2Button.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_L2,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_L2));
    l2SizeSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_L2_SIZE,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_L2_SIZE));
    l2AssocSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_L2_ASSOC,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_L2_ASSOC));
    l2LineSizeSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_L2_LSIZE,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_L2_LSIZE));
    checkL2Enablement();
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
}","public void initializeFrom(ILaunchConfiguration config){
  isInitializing=true;
  try {
    cacheButton.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_CACHE_SIM,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_CACHE_SIM));
    branchButton.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_BRANCH_SIM,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_BRANCH_SIM));
    i1Button.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_I1,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_I1));
    i1SizeSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_I1_SIZE,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_I1_SIZE));
    i1AssocSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_I1_ASSOC,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_I1_ASSOC));
    i1LineSizeSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_I1_LSIZE,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_I1_LSIZE));
    checkI1Enablement();
    d1Button.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_D1,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_D1));
    d1SizeSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_D1_SIZE,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_D1_SIZE));
    d1AssocSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_D1_ASSOC,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_D1_ASSOC));
    d1LineSizeSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_D1_LSIZE,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_D1_LSIZE));
    checkD1Enablement();
    l2Button.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_L2,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_L2));
    l2SizeSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_L2_SIZE,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_L2_SIZE));
    l2AssocSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_L2_ASSOC,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_L2_ASSOC));
    l2LineSizeSpinner.setSelection(config.getAttribute(CachegrindLaunchConstants.ATTR_CACHEGRIND_L2_LSIZE,CachegrindLaunchConstants.DEFAULT_CACHEGRIND_L2_LSIZE));
    checkL2Enablement();
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
  isInitializing=false;
}",0.9902631033768386
92646,"@Override public void handleCompleted(){
  System.out.println(""String_Node_Str"" + startIdx + ""String_Node_Str""+ feventCount);
}","@Override public void handleCompleted(){
}",0.4970414201183432
92647,"/** 
 * @param < T >
 * @param k
 * @param startIdx , > 0 and between 0 - 31
 * @param endIdx , > startIdx and between 0 - 31
 * @param printFirst20 , print the first expected events vs actual events
 * @return
 */
protected <T extends LttngEvent>TmfEventRequest<T> prepareEventRequest(Class<T> k,final int startIdx,int endIdx,final boolean printFirst20){
  if (!(endIdx > startIdx && startIdx >= 0 && endIdx <= 31)) {
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  int DEFAULT_CHUNK=1;
  TmfTimeRange trange=new TmfTimeRange(new LttngTimestamp(requestIntervals_T1[startIdx]),new LttngTimestamp(requestIntervals_T1[endIdx]));
  validSequence=true;
  TmfEventRequest<T> request=new TmfEventRequest<T>(k,trange,TmfDataRequest.ALL_DATA,DEFAULT_CHUNK){
    @Override public void handleData(    T event){
      if (event == null) {
        System.out.println(""String_Node_Str"" + feventCount);
        return;
      }
      if (event instanceof LttngSyntheticEvent) {
        if (((LttngSyntheticEvent)event).getSynType() != SequenceInd.BEFORE) {
          return;
        }
      }
      if (printFirst20 && feventCount < 20) {
        long timevalue=event.getTimestamp().getValue();
        if (timevalue != expectedEvents_T1[feventCount]) {
          validSequence=false;
          System.out.println(""String_Node_Str"" + expectedEvents_T1[feventCount] + ""String_Node_Str""+ event.getTimestamp().getValue());
        }
 else {
          System.out.println(""String_Node_Str"" + feventCount + ""String_Node_Str"");
        }
      }
      incrementCount();
    }
    /** 
 * possibly increased by multiple request threads
 */
    private synchronized void incrementCount(){
      feventCount++;
    }
    @Override public void handleCompleted(){
      System.out.println(""String_Node_Str"" + startIdx + ""String_Node_Str""+ feventCount);
    }
  }
;
  return request;
}","/** 
 * @param < T >
 * @param k
 * @param startIdx , > 0 and between 0 - 31
 * @param endIdx , > startIdx and between 0 - 31
 * @param printFirst20 , print the first expected events vs actual events
 * @return
 */
protected <T extends LttngEvent>TmfEventRequest<T> prepareEventRequest(Class<T> k,final int startIdx,int endIdx,final boolean printFirst20){
  if (!(endIdx > startIdx && startIdx >= 0 && endIdx <= 31)) {
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  int DEFAULT_CHUNK=1;
  TmfTimeRange trange=new TmfTimeRange(new LttngTimestamp(requestIntervals_T1[startIdx]),new LttngTimestamp(requestIntervals_T1[endIdx]));
  validSequence=true;
  TmfEventRequest<T> request=new TmfEventRequest<T>(k,trange,TmfDataRequest.ALL_DATA,DEFAULT_CHUNK){
    @Override public void handleData(    T event){
      if (event == null) {
        System.out.println(""String_Node_Str"" + feventCount);
        return;
      }
      if (event instanceof LttngSyntheticEvent) {
        if (((LttngSyntheticEvent)event).getSynType() != SequenceInd.BEFORE) {
          return;
        }
      }
      if (printFirst20 && feventCount < 20) {
        long timevalue=event.getTimestamp().getValue();
        if (timevalue != expectedEvents_T1[feventCount]) {
          validSequence=false;
          System.out.println(""String_Node_Str"" + expectedEvents_T1[feventCount] + ""String_Node_Str""+ event.getTimestamp().getValue());
        }
      }
      incrementCount();
    }
    /** 
 * possibly increased by multiple request threads
 */
    private synchronized void incrementCount(){
      feventCount++;
    }
    @Override public void handleCompleted(){
    }
  }
;
  return request;
}",0.9341957255343082
92648,"/** 
 * @param < T >
 * @param k
 * @param startIdx , > 0 and between 0 - 31
 * @param endIdx , > startIdx and between 0 - 31
 * @param printFirst20 , print the first expected events vs actual events
 * @return
 */
protected <T extends LttngEvent>TmfEventRequest<T> prepareEventRequest2(Class<T> k,final int startIdx,int endIdx,final boolean printFirst20){
  if (!(endIdx > startIdx && startIdx >= 0 && endIdx <= 31)) {
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  int DEFAULT_CHUNK=1;
  TmfTimeRange trange=new TmfTimeRange(new LttngTimestamp(requestIntervals_T1[startIdx]),new LttngTimestamp(requestIntervals_T1[endIdx]));
  validSequence=true;
  TmfEventRequest<T> request=new TmfEventRequest<T>(k,trange,TmfDataRequest.ALL_DATA,DEFAULT_CHUNK){
    @Override public void handleData(    T event){
      if (event == null) {
        System.out.println(""String_Node_Str"" + feventCount);
        return;
      }
      if (event instanceof LttngSyntheticEvent) {
        if (((LttngSyntheticEvent)event).getSynType() != SequenceInd.BEFORE) {
          return;
        }
      }
      if (printFirst20 && feventCount < 20) {
        long timevalue=event.getTimestamp().getValue();
        if (timevalue != expectedEvents_T1[feventCount]) {
          validSequence=false;
          System.out.println(""String_Node_Str"" + expectedEvents_T1[feventCount] + ""String_Node_Str""+ event.getTimestamp().getValue());
        }
 else {
          System.out.println(""String_Node_Str"" + feventCount + ""String_Node_Str"");
        }
      }
      incrementCount();
    }
    /** 
 * possibly increased by multiple request threads
 */
    private synchronized void incrementCount(){
      feventCount++;
    }
    @Override public void handleCompleted(){
      System.out.println(""String_Node_Str"" + startIdx + ""String_Node_Str""+ feventCount);
    }
  }
;
  return request;
}","/** 
 * @param < T >
 * @param k
 * @param startIdx , > 0 and between 0 - 31
 * @param endIdx , > startIdx and between 0 - 31
 * @param printFirst20 , print the first expected events vs actual events
 * @return
 */
protected <T extends LttngEvent>TmfEventRequest<T> prepareEventRequest2(Class<T> k,final int startIdx,int endIdx,final boolean printFirst20){
  if (!(endIdx > startIdx && startIdx >= 0 && endIdx <= 31)) {
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  int DEFAULT_CHUNK=1;
  TmfTimeRange trange=new TmfTimeRange(new LttngTimestamp(requestIntervals_T1[startIdx]),new LttngTimestamp(requestIntervals_T1[endIdx]));
  validSequence=true;
  TmfEventRequest<T> request=new TmfEventRequest<T>(k,trange,TmfDataRequest.ALL_DATA,DEFAULT_CHUNK){
    @Override public void handleData(    T event){
      if (event == null) {
        System.out.println(""String_Node_Str"" + feventCount);
        return;
      }
      if (event instanceof LttngSyntheticEvent) {
        if (((LttngSyntheticEvent)event).getSynType() != SequenceInd.BEFORE) {
          return;
        }
      }
      if (printFirst20 && feventCount < 20) {
        long timevalue=event.getTimestamp().getValue();
        if (timevalue != expectedEvents_T1[feventCount]) {
          validSequence=false;
          System.out.println(""String_Node_Str"" + expectedEvents_T1[feventCount] + ""String_Node_Str""+ event.getTimestamp().getValue());
        }
 else {
          System.out.println(""String_Node_Str"" + feventCount + ""String_Node_Str"");
        }
      }
      incrementCount();
    }
    /** 
 * possibly increased by multiple request threads
 */
    private synchronized void incrementCount(){
      feventCount++;
    }
    @Override public void handleCompleted(){
    }
  }
;
  return request;
}",0.963651270839027
92649,"public void testSyntheticEventRequest(){
  System.out.println(""String_Node_Str"");
}","public void testSyntheticEventRequest(){
}",0.672
92650,"public void testConstructors(){
  LttngEvent testEvent=null;
  LttngEventContent testContent=null;
  @SuppressWarnings(""String_Node_Str"") LttngEventContent testContent2=null;
  LttngEventField[] testFields=new LttngEventField[1];
  testFields[0]=new LttngEventField(""String_Node_Str"");
  try {
    testContent=new LttngEventContent();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testContent=new LttngEventContent(testEvent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    HashMap<String,LttngEventField> parsedContent=new HashMap<String,LttngEventField>();
    testContent=new LttngEventContent(testEvent,parsedContent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testContent=new LttngEventContent(testEvent);
    testContent2=new LttngEventContent(testContent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","public void testConstructors(){
  LttngEvent testEvent=null;
  LttngEventContent testContent=null;
  LttngEventField[] testFields=new LttngEventField[1];
  testFields[0]=new LttngEventField(""String_Node_Str"");
  try {
    testContent=new LttngEventContent();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testContent=new LttngEventContent(testEvent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    HashMap<String,LttngEventField> parsedContent=new HashMap<String,LttngEventField>();
    testContent=new LttngEventContent(testEvent,parsedContent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testContent=new LttngEventContent(testEvent);
    new LttngEventContent(testContent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.948821161587119
92651,"public void testConstructors(){
  LttngEventField testField=null;
  @SuppressWarnings(""String_Node_Str"") LttngEventField testField2=null;
  try {
    testField=new LttngEventField(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testField=new LttngEventField(""String_Node_Str"",""String_Node_Str"");
    testField2=new LttngEventField(testField);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","public void testConstructors(){
  LttngEventField testField=null;
  try {
    testField=new LttngEventField(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testField=new LttngEventField(""String_Node_Str"",""String_Node_Str"");
    new LttngEventField(testField);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9031505250875146
92652,"public void testConstructors(){
  LttngEvent testEvent=null;
  LTTngTrace testTrace=null;
  @SuppressWarnings(""String_Node_Str"") LttngEvent testAnotherEvent=null;
  LttngTimestamp testTime=null;
  String testSource=null;
  LttngEventType testType=null;
  LttngEventContent testContent=null;
  String testReference=null;
  JniEvent testJniEvent=null;
  String[] testMarkerFields=null;
  try {
    testMarkerFields=new String[]{""String_Node_Str""};
    testEvent=null;
    testTime=new LttngTimestamp(0L);
    testSource=""String_Node_Str"";
    testType=new LttngEventType(""String_Node_Str"",0L,""String_Node_Str"",0,testMarkerFields);
    testContent=new LttngEventContent(testEvent);
    testReference=""String_Node_Str"";
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testEvent=new LttngEvent(testTrace,testTime,testSource,testType,testContent,testReference,testJniEvent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testAnotherEvent=new LttngEvent(null);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
  testEvent=prepareToTest();
  try {
    testAnotherEvent=new LttngEvent(testEvent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","public void testConstructors(){
  LttngEvent testEvent=null;
  LTTngTrace testTrace=null;
  LttngTimestamp testTime=null;
  String testSource=null;
  LttngEventType testType=null;
  LttngEventContent testContent=null;
  String testReference=null;
  JniEvent testJniEvent=null;
  String[] testMarkerFields=null;
  try {
    testMarkerFields=new String[]{""String_Node_Str""};
    testEvent=null;
    testTime=new LttngTimestamp(0L);
    testSource=""String_Node_Str"";
    testType=new LttngEventType(""String_Node_Str"",0L,""String_Node_Str"",0,testMarkerFields);
    testContent=new LttngEventContent(testEvent);
    testReference=""String_Node_Str"";
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testEvent=new LttngEvent(testTrace,testTime,testSource,testType,testContent,testReference,testJniEvent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    new LttngEvent(null);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
  testEvent=prepareToTest();
  try {
    new LttngEvent(testEvent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.8132245598969515
92653,"public void testConstructors(){
  LttngEventType tmpEventType=null;
  @SuppressWarnings(""String_Node_Str"") LttngEventType tmpEventType2=null;
  try {
    tmpEventType=new LttngEventType();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    tmpEventType=new LttngEventType(""String_Node_Str"",0L,""String_Node_Str"",0,new String[]{""String_Node_Str""});
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    tmpEventType=new LttngEventType(""String_Node_Str"",0L,""String_Node_Str"",0,new String[]{""String_Node_Str""});
    tmpEventType2=new LttngEventType(tmpEventType);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","public void testConstructors(){
  LttngEventType tmpEventType=null;
  try {
    tmpEventType=new LttngEventType();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    tmpEventType=new LttngEventType(""String_Node_Str"",0L,""String_Node_Str"",0,new String[]{""String_Node_Str""});
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    tmpEventType=new LttngEventType(""String_Node_Str"",0L,""String_Node_Str"",0,new String[]{""String_Node_Str""});
    new LttngEventType(tmpEventType);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9292604501607716
92654,"public void testConstructors(){
  LttngTimestamp tmpTime=null;
  @SuppressWarnings(""String_Node_Str"") LttngTimestamp tmpTime2=null;
  try {
    tmpTime=new LttngTimestamp();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    tmpTime=new LttngTimestamp(1);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    tmpTime=new LttngTimestamp(1);
    tmpTime2=new LttngTimestamp(tmpTime);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","public void testConstructors(){
  LttngTimestamp tmpTime=null;
  try {
    tmpTime=new LttngTimestamp();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    tmpTime=new LttngTimestamp(1);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    tmpTime=new LttngTimestamp(1);
    new LttngTimestamp(tmpTime);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9133333333333332
92655,"public void testEventsLoop(){
  JniTrace trace=null;
  JniEvent event=null;
  try {
    trace=JniTraceFactory.getJniTrace(tracepath,null,printLttDebug);
  }
 catch (  JniException e) {
    e.printStackTrace();
  }
  HashMap<String,Integer> eventCount=new HashMap<String,Integer>();
  while (true) {
    event=trace.readNextEvent();
    if (event == null) {
      break;
    }
    JniMarker dmarker=event.requestEventMarker();
    assertNotNull(dmarker);
    String name=dmarker.getName();
    if (eventCount.containsKey(name)) {
      Integer cnt=eventCount.get(name);
      eventCount.put(name,cnt + 1);
    }
 else {
      eventCount.put(name,1);
      if (stateSet.contains(name)) {
        System.out.println(""String_Node_Str"" + name + ""String_Node_Str"");
        Object[] tmpMarkerFields=dmarker.getMarkerFieldsArrayList().toArray();
        String[] fields=new String[tmpMarkerFields.length];
        for (int pos=0; pos < tmpMarkerFields.length; pos++) {
          fields[pos]=((JniMarkerField)tmpMarkerFields[pos]).getField() + ""String_Node_Str"" + ((JniMarkerField)tmpMarkerFields[pos]).getFormat();
        }
        for (        String field : fields) {
          System.out.println(field + ""String_Node_Str"");
        }
      }
    }
  }
  for (  String state : eventCount.keySet()) {
    System.out.println(state + ""String_Node_Str"" + eventCount.get(state));
  }
  assertEquals(""String_Node_Str"",expect_syscall_entry,eventCount.get(EvStateTrans.syscall_entry.name()));
  assertEquals(""String_Node_Str"",expect_syscall_exit,eventCount.get(EvStateTrans.syscall_exit.name()));
  assertEquals(""String_Node_Str"",expect_core_marker_format,eventCount.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",expect_core_marker_id,eventCount.get(""String_Node_Str""));
}","public void testEventsLoop(){
  JniTrace trace=null;
  JniEvent event=null;
  try {
    trace=JniTraceFactory.getJniTrace(tracepath,null,printLttDebug);
  }
 catch (  JniException e) {
    fail(""String_Node_Str"");
  }
  HashMap<String,Integer> eventCount=new HashMap<String,Integer>();
  while (true) {
    event=trace.readNextEvent();
    if (event == null) {
      break;
    }
    JniMarker dmarker=event.requestEventMarker();
    assertNotNull(dmarker);
    String name=dmarker.getName();
    if (eventCount.containsKey(name)) {
      Integer cnt=eventCount.get(name);
      eventCount.put(name,cnt + 1);
    }
 else {
      eventCount.put(name,1);
      if (stateSet.contains(name)) {
        System.out.println(""String_Node_Str"" + name + ""String_Node_Str"");
        Object[] tmpMarkerFields=dmarker.getMarkerFieldsArrayList().toArray();
        String[] fields=new String[tmpMarkerFields.length];
        for (int pos=0; pos < tmpMarkerFields.length; pos++) {
          fields[pos]=((JniMarkerField)tmpMarkerFields[pos]).getField() + ""String_Node_Str"" + ((JniMarkerField)tmpMarkerFields[pos]).getFormat();
        }
        for (        String field : fields) {
          System.out.println(field + ""String_Node_Str"");
        }
      }
    }
  }
  for (  String state : eventCount.keySet()) {
    System.out.println(state + ""String_Node_Str"" + eventCount.get(state));
  }
  assertEquals(""String_Node_Str"",expect_syscall_entry,eventCount.get(EvStateTrans.syscall_entry.name()));
  assertEquals(""String_Node_Str"",expect_syscall_exit,eventCount.get(EvStateTrans.syscall_exit.name()));
  assertEquals(""String_Node_Str"",expect_core_marker_format,eventCount.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",expect_core_marker_id,eventCount.get(""String_Node_Str""));
}",0.9887260428410372
92656,"public void testEventConstructors(){
  JniTracefile testTracefile=null;
  @SuppressWarnings(""String_Node_Str"") JniEvent testEvent1=null;
  @SuppressWarnings(""String_Node_Str"") JniEvent testEvent2=null;
  try {
    testTracefile=JniTraceFactory.getJniTrace(tracepath,null,printLttDebug).requestTracefileByName(eventName);
  }
 catch (  JniException e) {
  }
  try {
    testEvent1=testTracefile.allocateNewJniEvent(testTracefile.getCurrentEvent().getEventPtr(),null,testTracefile);
    fail(""String_Node_Str"");
  }
 catch (  JniException e) {
  }
  try {
    testEvent1=testTracefile.allocateNewJniEvent(testTracefile.getCurrentEvent().getEventPtr(),testTracefile.getTracefileMarkersMap(),null);
    fail(""String_Node_Str"");
  }
 catch (  JniException e) {
  }
  try {
    testEvent1=testTracefile.allocateNewJniEvent(testTracefile.getCurrentEvent().getEventPtr(),testTracefile.getTracefileMarkersMap(),testTracefile);
  }
 catch (  JniException e) {
    fail(""String_Node_Str"");
  }
}","public void testEventConstructors(){
  JniTracefile testTracefile=null;
  try {
    testTracefile=JniTraceFactory.getJniTrace(tracepath,null,printLttDebug).requestTracefileByName(eventName);
  }
 catch (  JniException e) {
    fail(""String_Node_Str"");
  }
  try {
    testTracefile.allocateNewJniEvent(testTracefile.getCurrentEvent().getEventPtr(),null,testTracefile);
    fail(""String_Node_Str"");
  }
 catch (  JniException e) {
  }
  try {
    testTracefile.allocateNewJniEvent(testTracefile.getCurrentEvent().getEventPtr(),testTracefile.getTracefileMarkersMap(),null);
    fail(""String_Node_Str"");
  }
 catch (  JniException e) {
  }
  try {
    testTracefile.allocateNewJniEvent(testTracefile.getCurrentEvent().getEventPtr(),testTracefile.getTracefileMarkersMap(),testTracefile);
  }
 catch (  JniException e) {
    fail(""String_Node_Str"");
  }
}",0.6314067611777535
92657,"public void testEventConstructors(){
  JniMarker tmpMarker=null;
  @SuppressWarnings(""String_Node_Str"") JniMarkerField tmpMarkerField1=null;
  @SuppressWarnings(""String_Node_Str"") JniMarkerField tmpMarkerField2=null;
  try {
    tmpMarker=JniTraceFactory.getJniTrace(tracepath,null,printLttDebug).requestEventByName(eventName).requestEventMarker();
  }
 catch (  JniException e) {
  }
  try {
    tmpMarkerField1=tmpMarker.allocateNewJniMarkerField(tmpMarker.getMarkerFieldsArrayList().get(0).getMarkerFieldPtr());
  }
 catch (  JniException e) {
    fail(""String_Node_Str"");
  }
}","public void testEventConstructors(){
  JniMarker tmpMarker=null;
  try {
    tmpMarker=JniTraceFactory.getJniTrace(tracepath,null,printLttDebug).requestEventByName(eventName).requestEventMarker();
  }
 catch (  JniException e) {
    fail(""String_Node_Str"");
  }
  try {
    tmpMarker.allocateNewJniMarkerField(tmpMarker.getMarkerFieldsArrayList().get(0).getMarkerFieldPtr());
  }
 catch (  JniException e) {
    fail(""String_Node_Str"");
  }
}",0.8074291300097751
92658,"public void testEventConstructors(){
  JniEvent tmpEvent=null;
  @SuppressWarnings(""String_Node_Str"") JniMarker testMarker1=null;
  @SuppressWarnings(""String_Node_Str"") JniMarker testMarker2=null;
  try {
    tmpEvent=JniTraceFactory.getJniTrace(tracepath,null,printLttDebug).requestEventByName(eventName);
  }
 catch (  JniException e) {
  }
  try {
    testMarker1=tmpEvent.getParentTracefile().allocateNewJniMarker(tmpEvent.requestEventMarker().getMarkerPtr());
  }
 catch (  JniException e) {
    fail(""String_Node_Str"");
  }
}","public void testEventConstructors(){
  JniEvent tmpEvent=null;
  try {
    tmpEvent=JniTraceFactory.getJniTrace(tracepath,null,printLttDebug).requestEventByName(eventName);
  }
 catch (  JniException e) {
    fail(""String_Node_Str"");
  }
  try {
    tmpEvent.getParentTracefile().allocateNewJniMarker(tmpEvent.requestEventMarker().getMarkerPtr());
  }
 catch (  JniException e) {
    fail(""String_Node_Str"");
  }
}",0.5058201058201058
92659,"public void init(String name,Class<T> eventType){
  super.init(name,eventType);
}","@Override public void init(String name,Class<T> eventType){
  super.init(name,eventType);
}",0.9418604651162792
92660,"@Override protected void queueBackgroundRequest(final ITmfDataRequest<T> request,final int blockSize,final boolean indexing){
  if (!(request instanceof ITmfEventRequest)) {
    super.queueBackgroundRequest(request,blockSize,indexing);
    return;
  }
  Thread thread=new Thread(){
    @Override public void run(){
      request.start();
      final Integer[] CHUNK_SIZE=new Integer[1];
      CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
      final Integer[] nbRead=new Integer[1];
      nbRead[0]=0;
      final Boolean[] isFinished=new Boolean[1];
      isFinished[0]=Boolean.FALSE;
      int startIndex=request.getIndex();
      while (!isFinished[0]) {
        TmfEventRequest<T> subRequest=new TmfEventRequest<T>(request.getDataType(),((ITmfEventRequest<?>)request).getRange(),startIndex + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
          @Override public void handleData(          T data){
            super.handleData(data);
            if (request.getDataType().isInstance(data)) {
              request.handleData(data);
            }
            if (this.getNbRead() > CHUNK_SIZE[0]) {
              System.out.println(""String_Node_Str"");
            }
          }
          @Override public void handleCompleted(){
            nbRead[0]+=this.getNbRead();
            if (nbRead[0] >= request.getNbRequested() || (this.getNbRead() < CHUNK_SIZE[0])) {
              if (this.isCancelled()) {
                request.cancel();
              }
 else               if (this.isFailed()) {
                request.fail();
              }
 else {
                request.done();
              }
              isFinished[0]=Boolean.TRUE;
            }
            super.handleCompleted();
          }
        }
;
        if (!isFinished[0]) {
          queueRequest(subRequest);
          try {
            subRequest.waitForCompletion();
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          if (startIndex == 0 && nbRead[0] == CHUNK_SIZE[0]) {
            startIndex=subRequest.getIndex();
          }
          CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
        }
      }
    }
  }
;
  thread.start();
}","@Override protected void queueBackgroundRequest(final ITmfDataRequest<T> request,final int blockSize,final boolean indexing){
  if (!(request instanceof ITmfEventRequest)) {
    super.queueBackgroundRequest(request,blockSize,indexing);
    return;
  }
  Thread thread=new Thread(){
    @Override public void run(){
      request.start();
      final Integer[] CHUNK_SIZE=new Integer[1];
      CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
      final Integer[] nbRead=new Integer[1];
      nbRead[0]=0;
      final Boolean[] isFinished=new Boolean[1];
      isFinished[0]=Boolean.FALSE;
      int startIndex=request.getIndex();
      while (!isFinished[0]) {
        TmfEventRequest<T> subRequest=new TmfEventRequest<T>(request.getDataType(),((ITmfEventRequest<?>)request).getRange(),startIndex + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
          @Override public void handleData(          T data){
            super.handleData(data);
            if (request.getDataType().isInstance(data)) {
              request.handleData(data);
            }
            if (this.getNbRead() > CHUNK_SIZE[0]) {
              System.out.println(""String_Node_Str"");
            }
          }
          @Override public void handleCompleted(){
            nbRead[0]+=this.getNbRead();
            if (nbRead[0] >= request.getNbRequested() || (this.getNbRead() < CHUNK_SIZE[0])) {
              if (this.isCancelled()) {
                request.cancel();
              }
 else               if (this.isFailed()) {
                request.fail();
              }
 else {
                request.done();
              }
              isFinished[0]=Boolean.TRUE;
            }
            super.handleCompleted();
          }
        }
;
        if (!isFinished[0]) {
          queueRequest(subRequest);
          try {
            subRequest.waitForCompletion();
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          if (startIndex == 0 && nbRead[0].equals(CHUNK_SIZE[0])) {
            startIndex=subRequest.getIndex();
          }
          CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
        }
      }
    }
  }
;
  thread.start();
}",0.9971219836174452
92661,"@Override public void run(){
  request.start();
  final Integer[] CHUNK_SIZE=new Integer[1];
  CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
  final Integer[] nbRead=new Integer[1];
  nbRead[0]=0;
  final Boolean[] isFinished=new Boolean[1];
  isFinished[0]=Boolean.FALSE;
  int startIndex=request.getIndex();
  while (!isFinished[0]) {
    TmfEventRequest<T> subRequest=new TmfEventRequest<T>(request.getDataType(),((ITmfEventRequest<?>)request).getRange(),startIndex + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
      @Override public void handleData(      T data){
        super.handleData(data);
        if (request.getDataType().isInstance(data)) {
          request.handleData(data);
        }
        if (this.getNbRead() > CHUNK_SIZE[0]) {
          System.out.println(""String_Node_Str"");
        }
      }
      @Override public void handleCompleted(){
        nbRead[0]+=this.getNbRead();
        if (nbRead[0] >= request.getNbRequested() || (this.getNbRead() < CHUNK_SIZE[0])) {
          if (this.isCancelled()) {
            request.cancel();
          }
 else           if (this.isFailed()) {
            request.fail();
          }
 else {
            request.done();
          }
          isFinished[0]=Boolean.TRUE;
        }
        super.handleCompleted();
      }
    }
;
    if (!isFinished[0]) {
      queueRequest(subRequest);
      try {
        subRequest.waitForCompletion();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      if (startIndex == 0 && nbRead[0] == CHUNK_SIZE[0]) {
        startIndex=subRequest.getIndex();
      }
      CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
    }
  }
}","@Override public void run(){
  request.start();
  final Integer[] CHUNK_SIZE=new Integer[1];
  CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
  final Integer[] nbRead=new Integer[1];
  nbRead[0]=0;
  final Boolean[] isFinished=new Boolean[1];
  isFinished[0]=Boolean.FALSE;
  int startIndex=request.getIndex();
  while (!isFinished[0]) {
    TmfEventRequest<T> subRequest=new TmfEventRequest<T>(request.getDataType(),((ITmfEventRequest<?>)request).getRange(),startIndex + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
      @Override public void handleData(      T data){
        super.handleData(data);
        if (request.getDataType().isInstance(data)) {
          request.handleData(data);
        }
        if (this.getNbRead() > CHUNK_SIZE[0]) {
          System.out.println(""String_Node_Str"");
        }
      }
      @Override public void handleCompleted(){
        nbRead[0]+=this.getNbRead();
        if (nbRead[0] >= request.getNbRequested() || (this.getNbRead() < CHUNK_SIZE[0])) {
          if (this.isCancelled()) {
            request.cancel();
          }
 else           if (this.isFailed()) {
            request.fail();
          }
 else {
            request.done();
          }
          isFinished[0]=Boolean.TRUE;
        }
        super.handleCompleted();
      }
    }
;
    if (!isFinished[0]) {
      queueRequest(subRequest);
      try {
        subRequest.waitForCompletion();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      if (startIndex == 0 && nbRead[0].equals(CHUNK_SIZE[0])) {
        startIndex=subRequest.getIndex();
      }
      CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
    }
  }
}",0.9962697274031564
92662,"protected LTTngTrace prepareStreamToTest(){
  if (frealStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(ftracepath_T1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTrace tmpStream=new LTTngTrace(testfile.getPath(),false);
      frealStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + ftracepath_T1);
      frealStream=null;
    }
  }
 else {
    frealStream.seekEvent(0L);
  }
  return frealStream;
}","protected LTTngTrace prepareStreamToTest(){
  if (frealStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(ftracepath_T1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTrace tmpStream=new LTTngTrace(testfile.getName(),testfile.getPath(),false);
      frealStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + ftracepath_T1);
      frealStream=null;
    }
  }
 else {
    frealStream.seekEvent(0L);
  }
  return frealStream;
}",0.9832303618711384
92663,"protected LTTngTextTrace prepareTextStreamToTest(){
  if (ftextStream_T1 == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(fTextTracepath_T1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTextTrace tmpStream=new LTTngTextTrace(testfile.getPath());
      ftextStream_T1=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + fTextTracepath_T1);
      ftextStream_T1=null;
    }
  }
 else {
    ftextStream_T1.seekEvent(0);
  }
  return ftextStream_T1;
}","protected LTTngTextTrace prepareTextStreamToTest(){
  if (ftextStream_T1 == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(fTextTracepath_T1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTextTrace tmpStream=new LTTngTextTrace(testfile.getName(),testfile.getPath());
      ftextStream_T1=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + fTextTracepath_T1);
      ftextStream_T1=null;
    }
  }
 else {
    ftextStream_T1.seekEvent(0);
  }
  return ftextStream_T1;
}",0.984126984126984
92664,"private LTTngTextTrace initializeEventStream(){
  if (testStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTextTrace tmpStream=new LTTngTextTrace(testfile.getPath());
      testStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + tracepath1);
      testStream=null;
    }
  }
 else {
    testStream.seekEvent(0);
  }
  return testStream;
}","private LTTngTextTrace initializeEventStream(){
  if (testStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTextTrace tmpStream=new LTTngTextTrace(testfile.getName(),testfile.getPath());
      testStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + tracepath1);
      testStream=null;
    }
  }
 else {
    testStream.seekEvent(0);
  }
  return testStream;
}",0.9830508474576272
92665,"private LTTngTextTrace initializeEventStream(){
  if (testStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTextTrace tmpStream=new LTTngTextTrace(testfile.getPath(),skipIndexing);
      testStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + tracepath1);
      testStream=null;
    }
  }
 else {
    testStream.seekEvent(0);
  }
  return testStream;
}","private LTTngTextTrace initializeEventStream(){
  if (testStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTextTrace tmpStream=new LTTngTextTrace(testfile.getName(),testfile.getPath(),skipIndexing);
      testStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + tracepath1);
      testStream=null;
    }
  }
 else {
    testStream.seekEvent(0);
  }
  return testStream;
}",0.983435047951177
92666,"private LTTngTextTrace initializeEventStream(){
  if (testStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTextTrace tmpStream=new LTTngTextTrace(testfile.getPath(),skipIndexing);
      testStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + tracepath1);
      testStream=null;
    }
  }
 else {
    testStream.seekEvent(0);
  }
  return testStream;
}","private LTTngTextTrace initializeEventStream(){
  if (testStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTextTrace tmpStream=new LTTngTextTrace(testfile.getName(),testfile.getPath(),skipIndexing);
      testStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + tracepath1);
      testStream=null;
    }
  }
 else {
    testStream.seekEvent(0);
  }
  return testStream;
}",0.983435047951177
92667,"private LTTngTextTrace initializeEventStream(){
  if (testStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTextTrace tmpStream=new LTTngTextTrace(testfile.getPath(),skipIndexing);
      testStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + tracepath1);
      testStream=null;
    }
  }
 else {
    testStream.seekEvent(0);
  }
  return testStream;
}","private LTTngTextTrace initializeEventStream(){
  if (testStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTextTrace tmpStream=new LTTngTextTrace(testfile.getName(),testfile.getPath(),skipIndexing);
      testStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + tracepath1);
      testStream=null;
    }
  }
 else {
    testStream.seekEvent(0);
  }
  return testStream;
}",0.983435047951177
92668,"private LTTngTextTrace initializeEventStream(){
  if (testStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTextTrace tmpStream=new LTTngTextTrace(testfile.getPath(),skipIndexing);
      testStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + tracepath1);
      testStream=null;
    }
  }
  return testStream;
}","private LTTngTextTrace initializeEventStream(){
  if (testStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTextTrace tmpStream=new LTTngTextTrace(testfile.getName(),testfile.getPath(),skipIndexing);
      testStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + tracepath1);
      testStream=null;
    }
  }
  return testStream;
}",0.9821596244131456
92669,"/** 
 * @param args
 */
public static void main(String[] args){
  final String TRACE_PATH=""String_Node_Str"";
  final boolean USE_TEXT_TRACE=false;
  final int NB_OF_PASS=1;
  final boolean PARSE_EVENTS=true;
  TmfTrace<LttngEvent> tmptrace=null;
  LttngEvent tmpevent=null;
  TmfContext tmpContext=null;
  Long nbEvent=0L;
  try {
    if (USE_TEXT_TRACE) {
      tmptrace=new LTTngTextTrace(TRACE_PATH,true);
    }
 else {
      tmptrace=new LTTngTrace(TRACE_PATH,null,true,true);
    }
    LttngTimestamp tmpTime=new LttngTimestamp(0L);
    tmpContext=new TmfContext(new LttngLocation(0L),0);
    long startTime=System.nanoTime();
    System.out.println(""String_Node_Str"" + startTime);
    for (int nb=0; nb < NB_OF_PASS; nb++) {
      tmpContext=tmptrace.seekEvent(tmpTime);
      tmpevent=(LttngEvent)tmptrace.getNextEvent(tmpContext);
      while (tmpevent != null) {
        tmpevent=(LttngEvent)tmptrace.getNextEvent(tmpContext);
        if ((tmpevent != null) && (PARSE_EVENTS)) {
          tmpevent.getContent().getFields();
        }
        nbEvent++;
      }
    }
    System.out.println(""String_Node_Str"" + nbEvent);
    long endTime=System.nanoTime();
    long elapsed=endTime - startTime;
    System.out.println(""String_Node_Str"" + endTime);
    System.out.println(""String_Node_Str"" + elapsed + ""String_Node_Str""+ (elapsed / nbEvent)+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * @param args
 */
public static void main(String[] args){
  final String TRACE_PATH=""String_Node_Str"";
  final String TRACE_NAME=""String_Node_Str"";
  final boolean USE_TEXT_TRACE=false;
  final int NB_OF_PASS=1;
  final boolean PARSE_EVENTS=true;
  TmfTrace<LttngEvent> tmptrace=null;
  LttngEvent tmpevent=null;
  TmfContext tmpContext=null;
  Long nbEvent=0L;
  try {
    if (USE_TEXT_TRACE) {
      tmptrace=new LTTngTextTrace(TRACE_NAME,TRACE_PATH,true);
    }
 else {
      tmptrace=new LTTngTrace(TRACE_NAME,TRACE_PATH,null,true,true);
    }
    LttngTimestamp tmpTime=new LttngTimestamp(0L);
    tmpContext=new TmfContext(new LttngLocation(0L),0);
    long startTime=System.nanoTime();
    System.out.println(""String_Node_Str"" + startTime);
    for (int nb=0; nb < NB_OF_PASS; nb++) {
      tmpContext=tmptrace.seekEvent(tmpTime);
      tmpevent=(LttngEvent)tmptrace.getNextEvent(tmpContext);
      while (tmpevent != null) {
        tmpevent=(LttngEvent)tmptrace.getNextEvent(tmpContext);
        if ((tmpevent != null) && (PARSE_EVENTS)) {
          tmpevent.getContent().getFields();
        }
        nbEvent++;
      }
    }
    System.out.println(""String_Node_Str"" + nbEvent);
    long endTime=System.nanoTime();
    long elapsed=endTime - startTime;
    System.out.println(""String_Node_Str"" + endTime);
    System.out.println(""String_Node_Str"" + elapsed + ""String_Node_Str""+ (elapsed / nbEvent)+ ""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9770783441669516
92670,"public static void main(String[] args){
  try {
    @SuppressWarnings(""String_Node_Str"") ITmfTrace<LttngEvent>[] traces=new ITmfTrace[1];
    traces[0]=new LTTngTrace(TRACE_PATH);
    fExperiment=new TmfExperiment<LttngEvent>(LttngEvent.class,""String_Node_Str"",traces);
    LttngTimestamp ts1=new LttngTimestamp(Long.MIN_VALUE);
    LttngTimestamp ts2=new LttngTimestamp(Long.MAX_VALUE);
    TmfTimeRange tmpRange=new TmfTimeRange(ts1,ts2);
    TmfTraceTest request=null;
    for (int x=0; x < NB_OF_PASS; x++) {
      request=new TmfTraceTest(LttngEvent.class,tmpRange,Integer.MAX_VALUE);
      fExperiment.sendRequest(request);
      nbPassDone++;
    }
  }
 catch (  NullPointerException e) {
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    @SuppressWarnings(""String_Node_Str"") ITmfTrace<LttngEvent>[] traces=new ITmfTrace[1];
    traces[0]=new LTTngTrace(""String_Node_Str"",TRACE_PATH);
    fExperiment=new TmfExperiment<LttngEvent>(LttngEvent.class,""String_Node_Str"",traces);
    LttngTimestamp ts1=new LttngTimestamp(Long.MIN_VALUE);
    LttngTimestamp ts2=new LttngTimestamp(Long.MAX_VALUE);
    TmfTimeRange tmpRange=new TmfTimeRange(ts1,ts2);
    TmfTraceTest request=null;
    for (int x=0; x < NB_OF_PASS; x++) {
      request=new TmfTraceTest(LttngEvent.class,tmpRange,Integer.MAX_VALUE);
      fExperiment.sendRequest(request);
      nbPassDone++;
    }
  }
 catch (  NullPointerException e) {
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9882044560943644
92671,"@SuppressWarnings(""String_Node_Str"") private synchronized static ITmfTrace<LttngEvent>[] setupTrace(String path){
  if (fTraces == null) {
    fTraces=new ITmfTrace[1];
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(path),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTrace trace=new LTTngTrace(testfile.getPath(),false);
      fTraces[0]=trace;
    }
 catch (    URISyntaxException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return fTraces;
}","@SuppressWarnings(""String_Node_Str"") private synchronized static ITmfTrace<LttngEvent>[] setupTrace(String path){
  if (fTraces == null) {
    fTraces=new ITmfTrace[1];
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(path),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTrace trace=new LTTngTrace(testfile.getName(),testfile.getPath(),false);
      fTraces[0]=trace;
    }
 catch (    URISyntaxException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return fTraces;
}",0.9857890800299176
92672,"public void testTraceConstructorFailure(){
  try {
    LTTngTextTrace testStream=new LTTngTextTrace(wrongTracePath,skipIndexing);
    fail(""String_Node_Str"");
    testStream.dispose();
  }
 catch (  Exception e) {
  }
}","public void testTraceConstructorFailure(){
  try {
    LTTngTextTrace testStream=new LTTngTextTrace(""String_Node_Str"",wrongTracePath,skipIndexing);
    fail(""String_Node_Str"");
    testStream.dispose();
  }
 catch (  Exception e) {
  }
}",0.9605263157894736
92673,"private synchronized LTTngTextTrace prepareStreamToTest(){
  if (testStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTextTrace tmpStream=new LTTngTextTrace(testfile.getPath());
      testStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + tracepath1);
      testStream=null;
    }
  }
 else {
    testStream.seekEvent(0);
  }
  return testStream;
}","private synchronized LTTngTextTrace prepareStreamToTest(){
  if (testStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTextTrace tmpStream=new LTTngTextTrace(testfile.getName(),testfile.getPath());
      testStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + tracepath1);
      testStream=null;
    }
  }
 else {
    testStream.seekEvent(0);
  }
  return testStream;
}",0.9833770778652668
92674,"public void testTraceConstructors(){
  @SuppressWarnings(""String_Node_Str"") LTTngTrace testStream1=null;
  try {
    testStream1=new LTTngTrace(wrongTracePath,skipIndexing);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
  try {
    URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
    File testfile=new File(FileLocator.toFileURL(location).toURI());
    testStream1=new LTTngTrace(testfile.getPath(),skipIndexing);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"");
}","public void testTraceConstructors(){
  @SuppressWarnings(""String_Node_Str"") LTTngTrace testStream1=null;
  try {
    testStream1=new LTTngTrace(""String_Node_Str"",wrongTracePath,skipIndexing);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
  try {
    URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
    File testfile=new File(FileLocator.toFileURL(location).toURI());
    testStream1=new LTTngTrace(testfile.getName(),testfile.getPath(),skipIndexing);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"");
}",0.9694971145919208
92675,"private LTTngTrace prepareStreamToTest(){
  if (testStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTrace tmpStream=new LTTngTrace(testfile.getPath(),false);
      testStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + tracepath1);
      testStream=null;
    }
  }
 else {
    testStream.seekEvent(0L);
  }
  return testStream;
}","private LTTngTrace prepareStreamToTest(){
  if (testStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTrace tmpStream=new LTTngTrace(testfile.getName(),testfile.getPath(),false);
      testStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + tracepath1);
      testStream=null;
    }
  }
 else {
    testStream.seekEvent(0L);
  }
  return testStream;
}",0.982836495031617
92676,"public LTTngTextTrace(LTTngTextTrace oldTrace) throws Exception {
  this(oldTrace.getPath(),true);
  fCheckpoints=oldTrace.fCheckpoints;
}","public LTTngTextTrace(LTTngTextTrace oldTrace) throws Exception {
  this(oldTrace.getName(),oldTrace.getPath(),true);
  fCheckpoints=oldTrace.fCheckpoints;
}",0.9355932203389832
92677,"public void initTrace(String path,Class<LttngEvent> eventType,int cacheSize,boolean indexTrace) throws FileNotFoundException {
  initLTTngTrace(path,eventType,cacheSize,indexTrace);
}","public void initTrace(String name,String path,Class<LttngEvent> eventType,int cacheSize,boolean indexTrace) throws FileNotFoundException {
  initLTTngTrace(name,path,eventType,cacheSize,indexTrace);
}",0.9556135770234988
92678,"public LTTngTrace(LTTngTrace other) throws Exception {
  this(other.getPath(),other.getTraceLibPath(),false,true);
  this.fCheckpoints=other.fCheckpoints;
  setTimeRange(new TmfTimeRange(new LttngTimestamp(other.getStartTime()),new LttngTimestamp(other.getEndTime())));
}","public LTTngTrace(LTTngTrace other) throws Exception {
  this(other.getName(),other.getPath(),other.getTraceLibPath(),false,true);
  this.fCheckpoints=other.fCheckpoints;
  setTimeRange(new TmfTimeRange(new LttngTimestamp(other.getStartTime()),new LttngTimestamp(other.getEndTime())));
}",0.971326164874552
92679,"private void initLTTngTrace(String path,Class<LttngEvent> eventType,int cacheSize,boolean indexTrace) throws FileNotFoundException {
  super.initTrace(path,eventType,indexTrace);
  try {
    currentJniTrace=JniTraceFactory.getJniTrace(path,traceLibPath,SHOW_LTT_DEBUG_DEFAULT);
  }
 catch (  Exception e) {
    throw new FileNotFoundException(e.getMessage());
  }
  traceTypes=new HashMap<Integer,LttngEventType>();
  traceTypeNames=new Vector<Integer>();
  initialiseEventTypes(currentJniTrace);
  eventTimestamp=new LttngTimestamp();
  eventSource=""String_Node_Str"";
  this.eventType=new LttngEventType();
  eventContent=new LttngEventContent(currentLttngEvent);
  eventReference=getName();
  currentLttngEvent=new LttngEvent(this,eventTimestamp,eventSource,this.eventType,eventContent,eventReference,null);
  previousLocation=new LttngLocation();
  eventContent.setEvent(currentLttngEvent);
  initializeStreamingMonitor();
}","private void initLTTngTrace(String name,String path,Class<LttngEvent> eventType,int cacheSize,boolean indexTrace) throws FileNotFoundException {
  super.initTrace(name,path,eventType,indexTrace);
  try {
    currentJniTrace=JniTraceFactory.getJniTrace(path,traceLibPath,SHOW_LTT_DEBUG_DEFAULT);
  }
 catch (  Exception e) {
    throw new FileNotFoundException(e.getMessage());
  }
  traceTypes=new HashMap<Integer,LttngEventType>();
  traceTypeNames=new Vector<Integer>();
  initialiseEventTypes(currentJniTrace);
  eventTimestamp=new LttngTimestamp();
  eventSource=""String_Node_Str"";
  this.eventType=new LttngEventType();
  eventContent=new LttngEventContent(currentLttngEvent);
  eventReference=getName();
  currentLttngEvent=new LttngEvent(this,eventTimestamp,eventSource,this.eventType,eventContent,eventReference,null);
  previousLocation=new LttngLocation();
  eventContent.setEvent(currentLttngEvent);
  initializeStreamingMonitor();
}",0.9909139497594868
92680,"@Override public void initTrace(String path,Class<T> eventType,int cacheSize,boolean indexTrace,String name){
  if (indexTrace) {
    initializeStreamingMonitor();
  }
}","@Override public void initTrace(String name,String path,Class<T> eventType,int cacheSize,boolean indexTrace){
  if (indexTrace) {
    initializeStreamingMonitor();
  }
}",0.9289940828402368
92681,"public void initTrace(String path,Class<T> eventType,int cacheSize,boolean indexTrace,String name) throws FileNotFoundException ;","public void initTrace(String name,String path,Class<T> eventType,int cacheSize,boolean indexTrace) throws FileNotFoundException ;",0.9069767441860463
92682,"/** 
 * @param path
 * @param cacheSize
 * @param indexTrace
 * @throws FileNotFoundException
 */
protected TmfTrace(String name,Class<T> type,String path,int cacheSize,boolean indexTrace) throws FileNotFoundException {
  super();
  fTraceName=name;
  initTrace(path,type,cacheSize,indexTrace);
}","/** 
 * @param path
 * @param cacheSize
 * @param indexTrace
 * @throws FileNotFoundException
 */
protected TmfTrace(String name,Class<T> type,String path,int cacheSize,boolean indexTrace) throws FileNotFoundException {
  super();
  fTraceName=name;
  initTrace(name,path,type,cacheSize,indexTrace);
}",0.9916247906197656
92683,"@Override public void initTrace(String path,Class<T> eventType,int cacheSize,boolean indexTrace,String name) throws FileNotFoundException {
  initTmfTrace(path,eventType,cacheSize,indexTrace,name);
}","@Override public void initTrace(String name,String path,Class<T> eventType,int cacheSize,boolean indexTrace) throws FileNotFoundException {
  initTmfTrace(name,path,eventType,cacheSize,indexTrace);
}",0.914572864321608
92684,"private void initTmfTrace(String path,Class<T> eventType,int cacheSize,boolean indexTrace,String name) throws FileNotFoundException {
  fPath=path;
  if (name != null) {
    fTraceName=name;
  }
  if (fTraceName == null) {
    fTraceName=""String_Node_Str"";
    if (path != null) {
      int sep=path.lastIndexOf(Path.SEPARATOR);
      fTraceName=(sep >= 0) ? path.substring(sep + 1) : path;
    }
  }
  super.init(fTraceName,eventType);
  fIndexPageSize=(cacheSize > 0) ? cacheSize : DEFAULT_INDEX_PAGE_SIZE;
  if (indexTrace)   indexTrace(false);
}","private void initTmfTrace(String name,String path,Class<T> eventType,int cacheSize,boolean indexTrace) throws FileNotFoundException {
  fPath=path;
  if (name != null) {
    fTraceName=name;
  }
  if (fTraceName == null) {
    fTraceName=""String_Node_Str"";
    if (path != null) {
      int sep=path.lastIndexOf(Path.SEPARATOR);
      fTraceName=(sep >= 0) ? path.substring(sep + 1) : path;
    }
  }
  super.init(fTraceName,eventType);
  fIndexPageSize=(cacheSize > 0) ? cacheSize : DEFAULT_INDEX_PAGE_SIZE;
  if (indexTrace)   indexTrace(false);
}",0.9781420765027322
92685,"@Override public String[] getFieldNames(){
  return fFieldNames;
}","@Override public String[] getFieldNames(){
  return Arrays.copyOf(fFieldNames,fFieldNames.length);
}",0.7951807228915663
92686,"@Override public ITmfEventField[] getFields(){
  return fFields;
}","@Override public ITmfEventField[] getFields(){
  return (fFields != null) ? Arrays.copyOf(fFields,fFields.length) : null;
}",0.6984126984126984
92687,"@Override public boolean equals(Object other){
  if (!(other instanceof LttngLocation)) {
    return false;
  }
  LttngLocation o=(LttngLocation)other;
  return (operationTime.equals(o.operationTime)) && (isLastOperationParse == o.isLastOperationParse) && (isLastOperationReadNext == o.isLastOperationReadNext)&& (isLastOperationSeek == o.isLastOperationSeek);
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!(obj instanceof LttngLocation)) {
    return false;
  }
  LttngLocation o=(LttngLocation)obj;
  return (operationTime.equals(o.operationTime)) && (isLastOperationParse == o.isLastOperationParse) && (isLastOperationReadNext == o.isLastOperationReadNext)&& (isLastOperationSeek == o.isLastOperationSeek);
}",0.8742216687422167
92688,"/** 
 * @param stime Event Start Time (may be unknown)
 * @param etime Event EndTime (may be unknown)
 * @param eventParent
 * @param type
 * @param duration
 */
public TimeRangeEvent(Long stime,Long etime,TimeRangeComposite eventParent,Type type,String stateMode){
  super(stime,etime,eventParent);
  this.eventType=type;
  this.stateMode=stateMode;
}","/** 
 * @param stime Event Start Time (may be unknown)
 * @param etime Event EndTime (may be unknown)
 * @param eventParent
 * @param type
 * @param duration
 */
public TimeRangeEvent(Long stime,Long etime,TimeRangeComposite eventParent,Type type,String stateMode){
  super(stime,etime,eventParent);
  parent=eventParent;
  this.eventType=type;
  this.stateMode=stateMode;
}",0.9696969696969696
92689,"/** 
 * @param cpu
 */
public void setCpu(Long cpu){
  if (cpu != null) {
    this.cpu=cpu;
  }
 else {
    cpu=0L;
  }
}","/** 
 * @param cpu
 */
public void setCpu(Long cpu){
  if (cpu != null) {
    this.cpu=cpu;
  }
 else {
    this.cpu=0L;
  }
}",0.979757085020243
92690,"public Map<String,Boolean> open(TargetResource aTarget){
  fTarget=aTarget;
  Shell parent=getParent();
  final Display display=parent.getDisplay();
  final Shell shell=new Shell(parent,SWT.TITLE | SWT.BORDER | SWT.APPLICATION_MODAL| SWT.RESIZE);
  shell.setText(Messages.ConfigureMarkersDialog_Title);
  shell.setImage(LTTngUiPlugin.getDefault().getImage(LTTngUiPlugin.ICON_ID_CONFIG_MARKERS));
  shell.setLayout(new FillLayout());
  Composite composite=new Composite(shell,SWT.NONE);
  composite.setLayout(new GridLayout());
  try {
    final ILttControllerService service=fSubSystem.getControllerService();
    fMarkersList=new TCFTask<String[]>(){
      @Override public void run(){
        service.getMarkers(fTarget.getParent().getName(),fTarget.getName(),new ILttControllerService.DoneGetMarkers(){
          @Override public void doneGetMarkers(          IToken token,          Exception error,          String[] str){
            if (error != null) {
              error(error);
              return;
            }
            done(str);
          }
        }
);
      }
    }
.get(TraceControlConstants.DEFAULT_TCF_TASK_TIMEOUT,TimeUnit.SECONDS);
  }
 catch (  Exception e) {
    SystemMessageException sysExp;
    if (e instanceof SystemMessageException) {
      sysExp=(SystemMessageException)e;
    }
 else {
      sysExp=new SystemMessageException(LTTngUiPlugin.getDefault().getMessage(e));
    }
    SystemBasePlugin.logError(Messages.Lttng_Control_ErrorGetMarkers + ""String_Node_Str"" + Messages.Lttng_Resource_Target+ ""String_Node_Str""+ fTarget.getName()+ ""String_Node_Str"",sysExp);
    return null;
  }
  for (int i=0; i < fMarkersList.length; i++) {
    fMarkersList[i]=fMarkersList[i].trim();
  }
  final Table table=new Table(composite,SWT.BORDER | SWT.CHECK);
  TableColumn tc0=new TableColumn(table,SWT.LEFT | SWT.CENTER);
  TableColumn tc1=new TableColumn(table,SWT.LEFT);
  TableColumn tc2=new TableColumn(table,SWT.LEFT);
  TableColumn tc3=new TableColumn(table,SWT.LEFT);
  TableColumn tc4=new TableColumn(table,SWT.LEFT);
  TableColumn tc5=new TableColumn(table,SWT.LEFT);
  TableColumn tc6=new TableColumn(table,SWT.LEFT);
  tc1.setText(Messages.ConfigureMarkersDialog_NameColumn);
  tc2.setText(Messages.ConfigureMarkersDialog_Location);
  tc3.setText(Messages.ConfigureMarkersDialog_Format);
  tc4.setText(Messages.ConfigureMarkersDialog_EventId);
  tc5.setText(Messages.ConfigureMarkersDialog_Call);
  tc6.setText(Messages.ConfigureMarkersDialog_Probe_Single);
  tc0.setWidth(25);
  tc1.setWidth(100);
  tc2.setWidth(100);
  tc3.setWidth(170);
  tc4.pack();
  tc5.setWidth(100);
  tc6.setWidth(100);
  table.setHeaderVisible(true);
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  fTableLines=new TableItem[fMarkersList.length];
  fInitialMarkersStates=new Boolean[fMarkersList.length];
  for (int i=0; i < fMarkersList.length; i++) {
    fTableLines[i]=new TableItem(table,SWT.NONE);
    String markerInfoResult=null;
    final String currentMarker=fMarkersList[i];
    try {
      final ILttControllerService service=fSubSystem.getControllerService();
      markerInfoResult=new TCFTask<String>(){
        @Override public void run(){
          service.getMarkerInfo(fTarget.getParent().getName(),fTarget.getName(),currentMarker,new ILttControllerService.DoneGetMarkerInfo(){
            @Override public void doneGetMarkerInfo(            IToken token,            Exception error,            String str){
              if (error != null) {
                error(error);
                return;
              }
              done(str);
            }
          }
);
        }
      }
.get(TraceControlConstants.DEFAULT_TCF_TASK_TIMEOUT,TimeUnit.SECONDS);
    }
 catch (    Exception e) {
      SystemMessageException sysExp;
      if (e instanceof SystemMessageException) {
        sysExp=(SystemMessageException)e;
      }
 else {
        sysExp=new SystemMessageException(LTTngUiPlugin.getDefault().getMessage(e));
      }
      SystemBasePlugin.logError(Messages.Lttng_Control_ErrorGetMarkerInfo + ""String_Node_Str"" + Messages.Lttng_Resource_Target+ ""String_Node_Str""+ fTarget.getName()+ ""String_Node_Str""+ Messages.Lttng_Resource_Marker+ ""String_Node_Str""+ currentMarker+ ""String_Node_Str"",sysExp);
      return null;
    }
    String markerInfos=markerInfoResult.substring(1,markerInfoResult.length() - 1);
    int nbOfEqualsHack=0;
    for (int x=0; x < markerInfos.length(); x++) {
      if (markerInfos.charAt(x) == '=') {
        nbOfEqualsHack++;
      }
    }
    if (nbOfEqualsHack > 0) {
      String[] infosList=new String[nbOfEqualsHack];
      @SuppressWarnings(""String_Node_Str"") String name=""String_Node_Str"";
      String value=""String_Node_Str"";
      int prevPos=0;
      int curPos=0;
      int eqPos=0;
      int nbDone=0;
      while ((curPos < markerInfos.length()) && (eqPos >= 0)) {
        eqPos=markerInfos.indexOf(""String_Node_Str"",curPos);
        if (eqPos >= 0) {
          name=markerInfos.substring(curPos,eqPos - 1);
          prevPos=markerInfos.lastIndexOf(""String_Node_Str"",eqPos);
        }
 else {
          prevPos=markerInfos.length() - 1;
        }
        if (prevPos >= 0) {
          value=markerInfos.substring(curPos,prevPos);
          infosList[nbDone]=value;
          nbDone++;
        }
        curPos=eqPos + 1;
      }
      fTableLines[i].setText(new String[]{null,fMarkersList[i],infosList[3],infosList[4],infosList[2],infosList[0],infosList[5]});
      if (infosList[1].compareTo(""String_Node_Str"") == 0) {
        fTableLines[i].setChecked(true);
        fInitialMarkersStates[i]=true;
      }
 else {
        fTableLines[i].setForeground(display.getSystemColor(SWT.COLOR_DARK_GRAY));
        fInitialMarkersStates[i]=false;
      }
    }
  }
  table.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      if (event.detail == SWT.CHECK) {
        TableItem ti=(TableItem)event.item;
        if (!ti.getChecked()) {
          ti.setForeground(display.getSystemColor(SWT.COLOR_DARK_GRAY));
        }
 else {
          ti.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
        }
      }
    }
  }
);
  final Composite buttonComposite=new Composite(composite,SWT.NONE);
  buttonComposite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
  GridLayout gl=new GridLayout(4,false);
  gl.verticalSpacing=10;
  buttonComposite.setLayout(gl);
  Label shadow_sep_h=new Label(buttonComposite,SWT.SEPARATOR | SWT.SHADOW_OUT | SWT.HORIZONTAL);
  GridData gd=new GridData(SWT.FILL,SWT.CENTER,true,false,4,1);
  shadow_sep_h.setLayoutData(gd);
  Button selectAllButton=new Button(buttonComposite,SWT.PUSH);
  selectAllButton.setText(Messages.ConfigureMarkersDialog_Select_All);
  gd=new GridData(SWT.CENTER,SWT.CENTER,false,false);
  gd.widthHint=100;
  selectAllButton.setLayoutData(gd);
  selectAllButton.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event e){
      for (int i=0; i < fTableLines.length; i++) {
        fTableLines[i].setChecked(true);
        fTableLines[i].setForeground(display.getSystemColor(SWT.COLOR_BLACK));
      }
    }
  }
);
  Button deselectAllButton=new Button(buttonComposite,SWT.PUSH);
  deselectAllButton.setText(Messages.ConfigureMarkersDialog_Deselect_All);
  gd=new GridData(SWT.CENTER,SWT.CENTER,false,false);
  gd.widthHint=100;
  deselectAllButton.setLayoutData(gd);
  deselectAllButton.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event e){
      for (int i=0; i < fTableLines.length; i++) {
        fTableLines[i].setChecked(false);
        fTableLines[i].setForeground(display.getSystemColor(SWT.COLOR_DARK_GRAY));
      }
    }
  }
);
  Button cancelButton=new Button(buttonComposite,SWT.PUSH);
  cancelButton.setText(Messages.ConfigureMarkersDialog_Cancel);
  gd=new GridData();
  gd=new GridData(SWT.RIGHT,SWT.CENTER,true,false);
  gd.widthHint=100;
  cancelButton.setLayoutData(gd);
  cancelButton.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event e){
      fOkClicked=Boolean.valueOf(false);
      shell.dispose();
    }
  }
);
  Button okButton=new Button(buttonComposite,SWT.PUSH);
  okButton.setText(Messages.ConfigureMarkersDialog_Ok);
  gd=new GridData(SWT.CENTER,SWT.CENTER,false,false);
  gd.widthHint=100;
  okButton.setLayoutData(gd);
  okButton.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event e){
      fOkClicked=Boolean.valueOf(true);
      fMap=new HashMap<String,Boolean>();
      for (int k=0; k < fTableLines.length; k++) {
        Boolean isChecked=fTableLines[k].getChecked();
        if (isChecked.booleanValue() != fInitialMarkersStates[k].booleanValue()) {
          if (isChecked) {
            fMap.put(fMarkersList[k],Boolean.valueOf(true));
          }
 else {
            fMap.put(fMarkersList[k],Boolean.valueOf(false));
          }
        }
      }
      shell.dispose();
    }
  }
);
  shell.addListener(SWT.Traverse,new Listener(){
    @Override public void handleEvent(    Event event){
      if (event.detail == SWT.TRAVERSE_ESCAPE) {
        event.doit=false;
      }
    }
  }
);
  TableItem[] items=table.getItems();
  for (int i=0; i < items.length; i++) {
    if ((i % 2) != 0) {
      items[i].setBackground(Display.getDefault().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));
    }
  }
  Point minSize=composite.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  shell.setMinimumSize(shell.computeSize(minSize.x,minSize.y).x,200);
  shell.setSize(shell.computeSize(composite.computeSize(SWT.DEFAULT,SWT.DEFAULT).x,300));
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  if (!fOkClicked) {
    return null;
  }
  return fMap;
}","public Map<String,Boolean> open(TargetResource aTarget){
  fTarget=aTarget;
  Shell parent=getParent();
  final Display display=parent.getDisplay();
  final Shell shell=new Shell(parent,SWT.TITLE | SWT.BORDER | SWT.APPLICATION_MODAL| SWT.RESIZE);
  shell.setText(Messages.ConfigureMarkersDialog_Title);
  shell.setImage(LTTngUiPlugin.getDefault().getImage(LTTngUiPlugin.ICON_ID_CONFIG_MARKERS));
  shell.setLayout(new FillLayout());
  Composite composite=new Composite(shell,SWT.NONE);
  composite.setLayout(new GridLayout());
  try {
    final ILttControllerService service=fSubSystem.getControllerService();
    fMarkersList=new TCFTask<String[]>(){
      @Override public void run(){
        service.getMarkers(fTarget.getParent().getName(),fTarget.getName(),new ILttControllerService.DoneGetMarkers(){
          @Override public void doneGetMarkers(          IToken token,          Exception error,          String[] str){
            if (error != null) {
              error(error);
              return;
            }
            done(str);
          }
        }
);
      }
    }
.get(TraceControlConstants.DEFAULT_TCF_TASK_TIMEOUT,TimeUnit.SECONDS);
  }
 catch (  Exception e) {
    SystemMessageException sysExp;
    if (e instanceof SystemMessageException) {
      sysExp=(SystemMessageException)e;
    }
 else {
      sysExp=new SystemMessageException(LTTngUiPlugin.getDefault().getMessage(e));
    }
    SystemBasePlugin.logError(Messages.Lttng_Control_ErrorGetMarkers + ""String_Node_Str"" + Messages.Lttng_Resource_Target+ ""String_Node_Str""+ fTarget.getName()+ ""String_Node_Str"",sysExp);
    return null;
  }
  for (int i=0; i < fMarkersList.length; i++) {
    fMarkersList[i]=fMarkersList[i].trim();
  }
  final Table table=new Table(composite,SWT.BORDER | SWT.CHECK);
  TableColumn tc0=new TableColumn(table,SWT.LEFT | SWT.CENTER);
  TableColumn tc1=new TableColumn(table,SWT.LEFT);
  TableColumn tc2=new TableColumn(table,SWT.LEFT);
  TableColumn tc3=new TableColumn(table,SWT.LEFT);
  TableColumn tc4=new TableColumn(table,SWT.LEFT);
  TableColumn tc5=new TableColumn(table,SWT.LEFT);
  TableColumn tc6=new TableColumn(table,SWT.LEFT);
  tc1.setText(Messages.ConfigureMarkersDialog_NameColumn);
  tc2.setText(Messages.ConfigureMarkersDialog_Location);
  tc3.setText(Messages.ConfigureMarkersDialog_Format);
  tc4.setText(Messages.ConfigureMarkersDialog_EventId);
  tc5.setText(Messages.ConfigureMarkersDialog_Call);
  tc6.setText(Messages.ConfigureMarkersDialog_Probe_Single);
  tc0.setWidth(25);
  tc1.setWidth(100);
  tc2.setWidth(100);
  tc3.setWidth(170);
  tc4.pack();
  tc5.setWidth(100);
  tc6.setWidth(100);
  table.setHeaderVisible(true);
  table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  fTableLines=new TableItem[fMarkersList.length];
  fInitialMarkersStates=new Boolean[fMarkersList.length];
  for (int i=0; i < fMarkersList.length; i++) {
    fTableLines[i]=new TableItem(table,SWT.NONE);
    String markerInfoResult=null;
    final String currentMarker=fMarkersList[i];
    try {
      final ILttControllerService service=fSubSystem.getControllerService();
      markerInfoResult=new TCFTask<String>(){
        @Override public void run(){
          service.getMarkerInfo(fTarget.getParent().getName(),fTarget.getName(),currentMarker,new ILttControllerService.DoneGetMarkerInfo(){
            @Override public void doneGetMarkerInfo(            IToken token,            Exception error,            String str){
              if (error != null) {
                error(error);
                return;
              }
              done(str);
            }
          }
);
        }
      }
.get(TraceControlConstants.DEFAULT_TCF_TASK_TIMEOUT,TimeUnit.SECONDS);
    }
 catch (    Exception e) {
      SystemMessageException sysExp;
      if (e instanceof SystemMessageException) {
        sysExp=(SystemMessageException)e;
      }
 else {
        sysExp=new SystemMessageException(LTTngUiPlugin.getDefault().getMessage(e));
      }
      SystemBasePlugin.logError(Messages.Lttng_Control_ErrorGetMarkerInfo + ""String_Node_Str"" + Messages.Lttng_Resource_Target+ ""String_Node_Str""+ fTarget.getName()+ ""String_Node_Str""+ Messages.Lttng_Resource_Marker+ ""String_Node_Str""+ currentMarker+ ""String_Node_Str"",sysExp);
      return null;
    }
    String markerInfos=markerInfoResult.substring(1,markerInfoResult.length() - 1);
    int nbOfEqualsHack=0;
    for (int x=0; x < markerInfos.length(); x++) {
      if (markerInfos.charAt(x) == '=') {
        nbOfEqualsHack++;
      }
    }
    if (nbOfEqualsHack > 0) {
      String[] infosList=new String[nbOfEqualsHack];
      String value=""String_Node_Str"";
      int prevPos=0;
      int curPos=0;
      int eqPos=0;
      int nbDone=0;
      while ((curPos < markerInfos.length()) && (eqPos >= 0)) {
        eqPos=markerInfos.indexOf(""String_Node_Str"",curPos);
        if (eqPos >= 0) {
          prevPos=markerInfos.lastIndexOf(""String_Node_Str"",eqPos);
        }
 else {
          prevPos=markerInfos.length() - 1;
        }
        if (prevPos >= 0) {
          value=markerInfos.substring(curPos,prevPos);
          infosList[nbDone]=value;
          nbDone++;
        }
        curPos=eqPos + 1;
      }
      fTableLines[i].setText(new String[]{null,fMarkersList[i],infosList[3],infosList[4],infosList[2],infosList[0],infosList[5]});
      if (infosList[1].compareTo(""String_Node_Str"") == 0) {
        fTableLines[i].setChecked(true);
        fInitialMarkersStates[i]=true;
      }
 else {
        fTableLines[i].setForeground(display.getSystemColor(SWT.COLOR_DARK_GRAY));
        fInitialMarkersStates[i]=false;
      }
    }
  }
  table.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      if (event.detail == SWT.CHECK) {
        TableItem ti=(TableItem)event.item;
        if (!ti.getChecked()) {
          ti.setForeground(display.getSystemColor(SWT.COLOR_DARK_GRAY));
        }
 else {
          ti.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
        }
      }
    }
  }
);
  final Composite buttonComposite=new Composite(composite,SWT.NONE);
  buttonComposite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
  GridLayout gl=new GridLayout(4,false);
  gl.verticalSpacing=10;
  buttonComposite.setLayout(gl);
  Label shadow_sep_h=new Label(buttonComposite,SWT.SEPARATOR | SWT.SHADOW_OUT | SWT.HORIZONTAL);
  GridData gd=new GridData(SWT.FILL,SWT.CENTER,true,false,4,1);
  shadow_sep_h.setLayoutData(gd);
  Button selectAllButton=new Button(buttonComposite,SWT.PUSH);
  selectAllButton.setText(Messages.ConfigureMarkersDialog_Select_All);
  gd=new GridData(SWT.CENTER,SWT.CENTER,false,false);
  gd.widthHint=100;
  selectAllButton.setLayoutData(gd);
  selectAllButton.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event e){
      for (int i=0; i < fTableLines.length; i++) {
        fTableLines[i].setChecked(true);
        fTableLines[i].setForeground(display.getSystemColor(SWT.COLOR_BLACK));
      }
    }
  }
);
  Button deselectAllButton=new Button(buttonComposite,SWT.PUSH);
  deselectAllButton.setText(Messages.ConfigureMarkersDialog_Deselect_All);
  gd=new GridData(SWT.CENTER,SWT.CENTER,false,false);
  gd.widthHint=100;
  deselectAllButton.setLayoutData(gd);
  deselectAllButton.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event e){
      for (int i=0; i < fTableLines.length; i++) {
        fTableLines[i].setChecked(false);
        fTableLines[i].setForeground(display.getSystemColor(SWT.COLOR_DARK_GRAY));
      }
    }
  }
);
  Button cancelButton=new Button(buttonComposite,SWT.PUSH);
  cancelButton.setText(Messages.ConfigureMarkersDialog_Cancel);
  gd=new GridData();
  gd=new GridData(SWT.RIGHT,SWT.CENTER,true,false);
  gd.widthHint=100;
  cancelButton.setLayoutData(gd);
  cancelButton.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event e){
      fOkClicked=Boolean.valueOf(false);
      shell.dispose();
    }
  }
);
  Button okButton=new Button(buttonComposite,SWT.PUSH);
  okButton.setText(Messages.ConfigureMarkersDialog_Ok);
  gd=new GridData(SWT.CENTER,SWT.CENTER,false,false);
  gd.widthHint=100;
  okButton.setLayoutData(gd);
  okButton.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event e){
      fOkClicked=Boolean.valueOf(true);
      fMap=new HashMap<String,Boolean>();
      for (int k=0; k < fTableLines.length; k++) {
        Boolean isChecked=fTableLines[k].getChecked();
        if (isChecked.booleanValue() != fInitialMarkersStates[k].booleanValue()) {
          if (isChecked) {
            fMap.put(fMarkersList[k],Boolean.valueOf(true));
          }
 else {
            fMap.put(fMarkersList[k],Boolean.valueOf(false));
          }
        }
      }
      shell.dispose();
    }
  }
);
  shell.addListener(SWT.Traverse,new Listener(){
    @Override public void handleEvent(    Event event){
      if (event.detail == SWT.TRAVERSE_ESCAPE) {
        event.doit=false;
      }
    }
  }
);
  TableItem[] items=table.getItems();
  for (int i=0; i < items.length; i++) {
    if ((i % 2) != 0) {
      items[i].setBackground(Display.getDefault().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));
    }
  }
  Point minSize=composite.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  shell.setMinimumSize(shell.computeSize(minSize.x,minSize.y).x,200);
  shell.setSize(shell.computeSize(composite.computeSize(SWT.DEFAULT,SWT.DEFAULT).x,300));
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch()) {
      display.sleep();
    }
  }
  if (!fOkClicked) {
    return null;
  }
  return fMap;
}",0.9717659137577002
92691,"/** 
 * <p> Handles: LTT_EVENT_EXEC </p> Replace C function ""after_fs_exec_hook"" in eventhooks.c
 * @return
 */
final ILttngEventProcessor getProcessExecHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      LttngProcessState process=traceSt.getRunning_process().get(trcEvent.getCpuId());
      if (process != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process.getPid(),process.getCpu(),traceSt.getTraceId(),process.getCreation_time());
        if (localProcess == null) {
          if ((process.getPid() == 0) || (process.getPid() != process.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
 else {
          localProcess.setName(process.getName());
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}","/** 
 * <p> Handles: LTT_EVENT_EXEC </p> Replace C function ""after_fs_exec_hook"" in eventhooks.c
 * @return
 */
final ILttngEventProcessor getProcessExecHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      LttngProcessState process=traceSt.getRunning_process().get(trcEvent.getCpuId());
      if (process != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process.getPid(),process.getCpu(),traceSt.getTraceId(),process.getCreation_time());
        if (localProcess == null) {
          if (process.getPid().equals(0) || !process.getPid().equals(process.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
 else {
          localProcess.setName(process.getName());
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}",0.963055209630552
92692,"@Override public boolean process(LttngEvent trcEvent,LttngTraceState traceSt){
  int first_cpu;
  int nb_cpus;
  Long pid_in=getAFieldLong(trcEvent,traceSt,Fields.LTT_FIELD_PID);
  if (pid_in != null) {
    if (pid_in == 0L) {
      first_cpu=0;
      nb_cpus=traceSt.getNumberOfCPUs();
    }
 else {
      first_cpu=ANY_CPU.intValue();
      nb_cpus=ANY_CPU.intValue() + 1;
    }
    for (int cpu=first_cpu; cpu < nb_cpus; cpu++) {
      LttngProcessState process_in=lttv_state_find_process(traceSt,Long.valueOf(cpu),pid_in);
      if (process_in != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process_in.getPid(),process_in.getCpu(),traceSt.getTraceId(),process_in.getCreation_time());
        if (localProcess == null) {
          if ((process_in.getPid() == 0) || (process_in.getPid() != process_in.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process_in,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
        localProcess.setName(process_in.getName());
        localProcess.setPpid(process_in.getPpid());
        localProcess.setTgid(process_in.getTgid());
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
    }
  }
 else {
    TraceDebug.debug(""String_Node_Str"");
  }
  return false;
}","@Override public boolean process(LttngEvent trcEvent,LttngTraceState traceSt){
  int first_cpu;
  int nb_cpus;
  Long pid_in=getAFieldLong(trcEvent,traceSt,Fields.LTT_FIELD_PID);
  if (pid_in != null) {
    if (pid_in == 0L) {
      first_cpu=0;
      nb_cpus=traceSt.getNumberOfCPUs();
    }
 else {
      first_cpu=ANY_CPU.intValue();
      nb_cpus=ANY_CPU.intValue() + 1;
    }
    for (int cpu=first_cpu; cpu < nb_cpus; cpu++) {
      LttngProcessState process_in=lttv_state_find_process(traceSt,Long.valueOf(cpu),pid_in);
      if (process_in != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process_in.getPid(),process_in.getCpu(),traceSt.getTraceId(),process_in.getCreation_time());
        if (localProcess == null) {
          if (process_in.getPid().equals(0) || !process_in.getPid().equals(process_in.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process_in,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
            return false;
          }
        }
        localProcess.setName(process_in.getName());
        localProcess.setPpid(process_in.getPpid());
        localProcess.setTgid(process_in.getTgid());
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
    }
  }
 else {
    TraceDebug.debug(""String_Node_Str"");
  }
  return false;
}",0.9572534500168294
92693,"/** 
 * <p> LTT_EVENT_THREAD_BRAND </p> Replace C function ""after_user_generic_thread_brand_hook"" in eventhooks.c
 * @return
 */
final ILttngEventProcessor GetThreadBrandHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      LttngProcessState process=traceSt.getRunning_process().get(trcEvent.getCpuId());
      if (process != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process.getPid(),process.getCpu(),traceSt.getTraceId(),process.getCreation_time());
        if (localProcess == null) {
          if ((process.getPid() == 0) || (process.getPid() != process.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
 else {
          localProcess.setBrand(process.getBrand());
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}","/** 
 * <p> LTT_EVENT_THREAD_BRAND </p> Replace C function ""after_user_generic_thread_brand_hook"" in eventhooks.c
 * @return
 */
final ILttngEventProcessor GetThreadBrandHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      LttngProcessState process=traceSt.getRunning_process().get(trcEvent.getCpuId());
      if (process != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process.getPid(),process.getCpu(),traceSt.getTraceId(),process.getCreation_time());
        if (localProcess == null) {
          if (process.getPid().equals(0) || !process.getPid().equals(process.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
 else {
          localProcess.setBrand(process.getBrand());
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}",0.9889660809154066
92694,"/** 
 * <p> Handles: LTT_EVENT_PROCESS_EXIT </p> Replace C function ""after_process_exit_hook"" in eventhooks.c
 * @return
 */
final ILttngEventProcessor getProcessExitHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      LttngProcessState process=traceSt.getRunning_process().get(trcEvent.getCpuId());
      if (process != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process.getPid(),process.getCpu(),traceSt.getTraceId(),process.getCreation_time());
        if (localProcess == null) {
          if ((process.getPid() == 0) || (process.getPid() != process.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}","/** 
 * <p> Handles: LTT_EVENT_PROCESS_EXIT </p> Replace C function ""after_process_exit_hook"" in eventhooks.c
 * @return
 */
final ILttngEventProcessor getProcessExitHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      LttngProcessState process=traceSt.getRunning_process().get(trcEvent.getCpuId());
      if (process != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process.getPid(),process.getCpu(),traceSt.getTraceId(),process.getCreation_time());
        if (localProcess == null) {
          if (process.getPid().equals(0) || !process.getPid().equals(process.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}",0.9612538093164996
92695,"/** 
 * <p> LTT_EVENT_PROCESS_STATE </p> Replace C function ""after_event_enum_process_hook"" in eventhooks.c <p> <p> Creates the processlist entry for the child process. Put the last position in x at the current time value. </p> <p> Fields: LTT_FIELD_PID </p>
 * @return
 */
final ILttngEventProcessor getEnumProcessStateHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      int first_cpu;
      int nb_cpus;
      Long pid_in=getAFieldLong(trcEvent,traceSt,Fields.LTT_FIELD_PID);
      if (pid_in != null) {
        if (pid_in == 0L) {
          first_cpu=0;
          nb_cpus=traceSt.getNumberOfCPUs();
        }
 else {
          first_cpu=ANY_CPU.intValue();
          nb_cpus=ANY_CPU.intValue() + 1;
        }
        for (int cpu=first_cpu; cpu < nb_cpus; cpu++) {
          LttngProcessState process_in=lttv_state_find_process(traceSt,Long.valueOf(cpu),pid_in);
          if (process_in != null) {
            TimeRangeEventProcess localProcess=procContainer.findProcess(process_in.getPid(),process_in.getCpu(),traceSt.getTraceId(),process_in.getCreation_time());
            if (localProcess == null) {
              if ((process_in.getPid() == 0) || (process_in.getPid() != process_in.getPpid())) {
                TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
                localProcess=addLocalProcess(process_in,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
              }
 else {
                TraceDebug.debug(""String_Node_Str"");
              }
            }
            localProcess.setName(process_in.getName());
            localProcess.setPpid(process_in.getPpid());
            localProcess.setTgid(process_in.getTgid());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}","/** 
 * <p> LTT_EVENT_PROCESS_STATE </p> Replace C function ""after_event_enum_process_hook"" in eventhooks.c <p> <p> Creates the processlist entry for the child process. Put the last position in x at the current time value. </p> <p> Fields: LTT_FIELD_PID </p>
 * @return
 */
final ILttngEventProcessor getEnumProcessStateHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      int first_cpu;
      int nb_cpus;
      Long pid_in=getAFieldLong(trcEvent,traceSt,Fields.LTT_FIELD_PID);
      if (pid_in != null) {
        if (pid_in == 0L) {
          first_cpu=0;
          nb_cpus=traceSt.getNumberOfCPUs();
        }
 else {
          first_cpu=ANY_CPU.intValue();
          nb_cpus=ANY_CPU.intValue() + 1;
        }
        for (int cpu=first_cpu; cpu < nb_cpus; cpu++) {
          LttngProcessState process_in=lttv_state_find_process(traceSt,Long.valueOf(cpu),pid_in);
          if (process_in != null) {
            TimeRangeEventProcess localProcess=procContainer.findProcess(process_in.getPid(),process_in.getCpu(),traceSt.getTraceId(),process_in.getCreation_time());
            if (localProcess == null) {
              if (process_in.getPid().equals(0) || !process_in.getPid().equals(process_in.getPpid())) {
                TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
                localProcess=addLocalProcess(process_in,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
              }
 else {
                TraceDebug.debug(""String_Node_Str"");
                return false;
              }
            }
            localProcess.setName(process_in.getName());
            localProcess.setPpid(process_in.getPpid());
            localProcess.setTgid(process_in.getTgid());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}",0.9681032383735086
92696,"/** 
 * <p> Handles: LTT_EVENT_PROCESS_FORK </p> Replace C function ""after_process_fork_hook"" in eventhooks.c <p> Fields: LTT_FIELD_CHILD_PID </p>
 * @return
 */
final ILttngEventProcessor getProcessForkHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      Long child_pid=getAFieldLong(trcEvent,traceSt,Fields.LTT_FIELD_CHILD_PID);
      LttngProcessState process_child=lttv_state_find_process(traceSt,trcEvent.getCpuId(),child_pid);
      if (process_child != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process_child.getPid(),process_child.getCpu(),traceSt.getTraceId(),process_child.getCreation_time());
        if (localProcess == null) {
          if ((child_pid == 0) || (child_pid != process_child.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process_child,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
 else {
          localProcess.setPpid(process_child.getPpid());
          localProcess.setTgid(process_child.getTgid());
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}","/** 
 * <p> Handles: LTT_EVENT_PROCESS_FORK </p> Replace C function ""after_process_fork_hook"" in eventhooks.c <p> Fields: LTT_FIELD_CHILD_PID </p>
 * @return
 */
final ILttngEventProcessor getProcessForkHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      Long child_pid=getAFieldLong(trcEvent,traceSt,Fields.LTT_FIELD_CHILD_PID);
      LttngProcessState process_child=lttv_state_find_process(traceSt,trcEvent.getCpuId(),child_pid);
      if (process_child != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process_child.getPid(),process_child.getCpu(),traceSt.getTraceId(),process_child.getCreation_time());
        if (localProcess == null) {
          if (child_pid.equals(0) || !child_pid.equals(process_child.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process_child,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
 else {
          localProcess.setPpid(process_child.getPpid());
          localProcess.setTgid(process_child.getTgid());
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}",0.978753047718565
92697,"@Override public boolean equals(Object obj){
  boolean isSame=false;
  if (obj instanceof ProcessKey) {
    ProcessKey procKey=(ProcessKey)obj;
    if (valueRef != null) {
      if ((procKey.getPid().equals(valueRef.getPid())) && (procKey.getTraceId().equals(valueRef.getTraceID())) && (procKey.getCreationtime().equals(valueRef.getCreationTime()))) {
        if (valueRef.getPid().longValue() == 0L && !procKey.getCpuId().equals(valueRef.getCpu())) {
          isSame=false;
        }
 else {
          isSame=true;
        }
      }
    }
 else {
      if ((procKey.getPid().equals(this.pid)) && (procKey.getTraceId().equals(this.traceId)) && (procKey.getCreationtime().equals(this.creationtime))) {
        if (this.pid.longValue() == 0L && !procKey.getCpuId().equals(this.cpuId)) {
          isSame=false;
        }
 else {
          isSame=true;
        }
      }
    }
  }
 else {
    TraceDebug.debug(""String_Node_Str"" + obj.getClass().toString());
  }
  return isSame;
}","@Override public boolean equals(Object obj){
  if (obj == this)   return true;
  if (obj == null)   return false;
  boolean isSame=false;
  if (obj instanceof ProcessKey) {
    ProcessKey procKey=(ProcessKey)obj;
    if (valueRef != null) {
      if ((procKey.getPid().equals(valueRef.getPid())) && (procKey.getTraceId().equals(valueRef.getTraceID())) && (procKey.getCreationtime().equals(valueRef.getCreationTime()))) {
        if (valueRef.getPid().longValue() == 0L && !procKey.getCpuId().equals(valueRef.getCpu())) {
          isSame=false;
        }
 else {
          isSame=true;
        }
      }
    }
 else {
      if ((procKey.getPid().equals(this.pid)) && (procKey.getTraceId().equals(this.traceId)) && (procKey.getCreationtime().equals(this.creationtime))) {
        if (this.pid.longValue() == 0L && !procKey.getCpuId().equals(this.cpuId)) {
          isSame=false;
        }
 else {
          isSame=true;
        }
      }
    }
  }
 else {
    TraceDebug.debug(""String_Node_Str"" + obj.getClass().toString());
  }
  return isSame;
}",0.965925925925926
92698,"/** 
 * Paints the horizontal ticks.
 * @param y The y coordinate where to draw the axis.
 */
public void paintHorizontalTicks(int y){
  if (fXMin >= 0L && fXMin >= 0L) {
    int nbTicks=(int)(getWidth()) / MAX_WIDTH_BETWEEN_TICKS + 1;
    for (int i=0; i < nbTicks; i++) {
      if (i % fDrawLabelEachNTicks == 0) {
        int x=i * MAX_WIDTH_BETWEEN_TICKS + fPadding + fVerticalAxisOffset;
        fAxisImage.drawLine(x,y,x,y + 3);
      }
    }
  }
}","/** 
 * Paints the horizontal ticks.
 * @param y The y coordinate where to draw the axis.
 */
public void paintHorizontalTicks(int y){
  if (fXMin >= 0L && fXMax >= 0L) {
    int nbTicks=(int)(getWidth()) / MAX_WIDTH_BETWEEN_TICKS + 1;
    for (int i=0; i < nbTicks; i++) {
      if (i % fDrawLabelEachNTicks == 0) {
        int x=i * MAX_WIDTH_BETWEEN_TICKS + fPadding + fVerticalAxisOffset;
        fAxisImage.drawLine(x,y,x,y + 3);
      }
    }
  }
}",0.9955947136563876
92699,"/** 
 * Paints the vertical axis ticks.
 * @param x The x-coordinate where to draw the ticks.
 */
public void paintVerticalTicks(int x){
  if (fYMin != 0L && fYMin != 0L) {
    int nbTicks=(int)(getHeight() / MAX_HEIGHT_BETWEEN_TICKS + 1);
    for (int i=0; i < nbTicks; i++) {
      int y=fClientArea.height - fPadding - fHorizontalAxisYOffset- i * MAX_HEIGHT_BETWEEN_TICKS;
      fAxisImage.drawLine(x - 3,y,x,y);
    }
  }
}","/** 
 * Paints the vertical axis ticks.
 * @param x The x-coordinate where to draw the ticks.
 */
public void paintVerticalTicks(int x){
  if (fYMin != 0L && fYMax != 0L) {
    int nbTicks=(int)(getHeight() / MAX_HEIGHT_BETWEEN_TICKS + 1);
    for (int i=0; i < nbTicks; i++) {
      int y=fClientArea.height - fPadding - fHorizontalAxisYOffset- i * MAX_HEIGHT_BETWEEN_TICKS;
      fAxisImage.drawLine(x - 3,y,x,y);
    }
  }
}",0.9953161592505856
92700,"@Override public boolean equals(Object obj){
  boolean isSame=false;
  if (obj instanceof ResourceKey) {
    if (valueRef != null) {
      if ((((ResourceKey)obj).getResourceId().equals(valueRef.getResourceId())) && (((ResourceKey)obj).getTraceId().equals(valueRef.getTraceId())) && (((ResourceKey)obj).getType().equals(valueRef.getType()))) {
        isSame=true;
      }
    }
 else {
      if ((((ResourceKey)obj).getResourceId().equals(this.resourceId)) && (((ResourceKey)obj).getTraceId().equals(this.traceId)) && (((ResourceKey)obj).getType().equals(this.type))) {
        isSame=true;
      }
    }
  }
 else {
    TraceDebug.debug(""String_Node_Str"" + obj.getClass().toString());
  }
  return isSame;
}","@Override public boolean equals(Object obj){
  if (obj == this)   return true;
  if (obj == null)   return false;
  boolean isSame=false;
  if (obj instanceof ResourceKey) {
    if (valueRef != null) {
      if ((((ResourceKey)obj).getResourceId().equals(valueRef.getResourceId())) && (((ResourceKey)obj).getTraceId().equals(valueRef.getTraceId())) && (((ResourceKey)obj).getType().equals(valueRef.getType()))) {
        isSame=true;
      }
    }
 else {
      if ((((ResourceKey)obj).getResourceId().equals(this.resourceId)) && (((ResourceKey)obj).getTraceId().equals(this.traceId)) && (((ResourceKey)obj).getType().equals(this.type))) {
        isSame=true;
      }
    }
  }
 else {
    TraceDebug.debug(""String_Node_Str"" + obj.getClass().toString());
  }
  return isSame;
}",0.95359784801614
92701,"@Override public boolean equals(Object o){
  return Arrays.equals(fArray,((FixedArray)o).fArray);
}","@Override public boolean equals(Object o){
  if (o == this)   return true;
  if (o == null)   return false;
  return Arrays.equals(fArray,((FixedArray)o).fArray);
}",0.752851711026616
92702,"@Override public boolean equals(Object obj){
  ProcessKey procKey=(ProcessKey)obj;
  if (procKey.fPid != this.fPid) {
    return false;
  }
  if (procKey.fCreationTime != this.fCreationTime) {
    return false;
  }
  if (((procKey.fPid == 0L) && (procKey.fCpuId != this.fCpuId))) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (obj == this)   return true;
  if (obj == null)   return false;
  ProcessKey procKey=(ProcessKey)obj;
  if (procKey.fPid != this.fPid) {
    return false;
  }
  if (procKey.fCreationTime != this.fCreationTime) {
    return false;
  }
  if (((procKey.fPid == 0L) && (procKey.fCpuId != this.fCpuId))) {
    return false;
  }
  return true;
}",0.9026798307475318
92703,"@SuppressWarnings(""String_Node_Str"") @Override public void tsfTmProcessSelEvent(TmfTimeSelectionEvent event){
  Object source=event.getSource();
  if (source == null || !(source instanceof ITimeAnalysisViewer)) {
    return;
  }
  ITimeAnalysisViewer rViewer=(ITimeAnalysisViewer)event.getSource();
  ITimeAnalysisViewer synchViewer=null;
  if (tsfviewer == rViewer) {
    synchViewer=tsfviewer2;
  }
 else {
    synchViewer=tsfviewer;
  }
  Object selection=event.getSelection();
  long selTimens=event.getSelectedTime();
  long tms=(long)(selTimens * 1E-6);
  Date date=new Date(tms);
  String fDate=stimeformat.format(date);
  String ns=formatNs(selTimens);
  if (selection instanceof EventImpl) {
    EventImpl selEvent=(EventImpl)selection;
    date=new Date((long)(selTimens / 1E-6));
    System.out.println(""String_Node_Str"" + selEvent.getType().toString() + ""String_Node_Str""+ selEvent.getTime()+ ""String_Node_Str""+ selEvent.getEntry().getName()+ ""String_Node_Str""+ event.getDType().toString()+ ""String_Node_Str""+ selTimens+ ""String_Node_Str""+ fDate+ ""String_Node_Str""+ ns);
    synchViewer.setSelectedEvent(selEvent,source);
  }
 else   if (selection instanceof TraceImpl) {
    TraceImpl selTrace=(TraceImpl)selection;
    System.out.println(""String_Node_Str"" + selTrace.getName().toString() + ""String_Node_Str""+ selTrace.getClassName()+ ""String_Node_Str""+ selTrace.getTraceEvents().size()+ ""String_Node_Str""+ event.getDType().toString()+ ""String_Node_Str""+ selTimens+ ""String_Node_Str""+ fDate+ ""String_Node_Str""+ ns);
    synchViewer.setSelectedTraceTime(selTrace,event.getSelectedTime(),source);
  }
 else {
    System.out.println(""String_Node_Str"" + selection.getClass().getName());
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void tsfTmProcessSelEvent(TmfTimeSelectionEvent event){
  Object source=event.getSource();
  if (source == null || !(source instanceof ITimeAnalysisViewer)) {
    return;
  }
  ITimeAnalysisViewer rViewer=(ITimeAnalysisViewer)event.getSource();
  ITimeAnalysisViewer synchViewer=null;
  if (tsfviewer == rViewer) {
    synchViewer=tsfviewer2;
  }
 else {
    synchViewer=tsfviewer;
  }
  Object selection=event.getSelection();
  long selTimens=event.getSelectedTime();
  long tms=(long)(selTimens * 1E-6);
  Date date=new Date(tms);
  String fDate=stimeformat.format(date);
  String ns=formatNs(selTimens);
  if (selection instanceof EventImpl) {
    EventImpl selEvent=(EventImpl)selection;
    System.out.println(""String_Node_Str"" + selEvent.getType().toString() + ""String_Node_Str""+ selEvent.getTime()+ ""String_Node_Str""+ selEvent.getEntry().getName()+ ""String_Node_Str""+ event.getDType().toString()+ ""String_Node_Str""+ selTimens+ ""String_Node_Str""+ fDate+ ""String_Node_Str""+ ns);
    synchViewer.setSelectedEvent(selEvent,source);
  }
 else   if (selection instanceof TraceImpl) {
    TraceImpl selTrace=(TraceImpl)selection;
    System.out.println(""String_Node_Str"" + selTrace.getName().toString() + ""String_Node_Str""+ selTrace.getClassName()+ ""String_Node_Str""+ selTrace.getTraceEvents().size()+ ""String_Node_Str""+ event.getDType().toString()+ ""String_Node_Str""+ selTimens+ ""String_Node_Str""+ fDate+ ""String_Node_Str""+ ns);
    synchViewer.setSelectedTraceTime(selTrace,event.getSelectedTime(),source);
  }
 else {
    System.out.println(""String_Node_Str"" + selection.getClass().getName());
  }
}",0.9865951742627346
92704,"@SuppressWarnings(""String_Node_Str"") @Override public void experimentRangeUpdated(TmfExperimentRangeUpdatedSignal signal){
  TmfExperiment<LttngEvent> experiment=(TmfExperiment<LttngEvent>)signal.getExperiment();
  if (experiment != fSelectedExperiment.getValue()) {
    return;
  }
synchronized (fCheckPointUpdateSyncObj) {
    if (fCheckPointUpdateBusy) {
      fCheckPointUpdatePending=true;
      fCheckPointUpdateRange=signal.getRange();
      return;
    }
 else {
      fCheckPointUpdateBusy=true;
    }
  }
  if (fStateCheckPointRequest != null && !fStateCheckPointRequest.isCompleted()) {
    fStateCheckPointRequest.cancel();
  }
  fStateCheckPointRequest=buildCheckPoints(experiment,signal.getRange(),fInitial);
  fInitial=false;
  if (fStateCheckPointRequest == null) {
synchronized (fCheckPointUpdateSyncObj) {
      fCheckPointUpdateBusy=false;
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void experimentRangeUpdated(TmfExperimentRangeUpdatedSignal signal){
  TmfExperiment<LttngEvent> experiment=(TmfExperiment<LttngEvent>)signal.getExperiment();
  if (fSelectedExperiment == null || experiment != fSelectedExperiment.getValue()) {
    return;
  }
synchronized (fCheckPointUpdateSyncObj) {
    if (fCheckPointUpdateBusy) {
      fCheckPointUpdatePending=true;
      fCheckPointUpdateRange=signal.getRange();
      return;
    }
 else {
      fCheckPointUpdateBusy=true;
    }
  }
  if (fStateCheckPointRequest != null && !fStateCheckPointRequest.isCompleted()) {
    fStateCheckPointRequest.cancel();
  }
  fStateCheckPointRequest=buildCheckPoints(experiment,signal.getRange(),fInitial);
  fInitial=false;
  if (fStateCheckPointRequest == null) {
synchronized (fCheckPointUpdateSyncObj) {
      fCheckPointUpdateBusy=false;
    }
  }
}",0.9824957651044608
92705,"@TmfSignalHandler public void experimentRangeUpdated(TmfExperimentRangeUpdatedSignal signal){
  indexExperiment(false,(int)fNbEvents,signal.getRange());
}","@TmfSignalHandler public void experimentRangeUpdated(TmfExperimentRangeUpdatedSignal signal){
  if (signal.getExperiment() == this) {
    indexExperiment(false,(int)fNbEvents,signal.getRange());
  }
}",0.8700564971751412
92706,"public void testConstructors(){
  LttngEvent testEvent=null;
  LttngEventContent testContent=null;
  LttngEventContent testContent2=null;
  LttngEventField[] testFields=new LttngEventField[1];
  testFields[0]=new LttngEventField(""String_Node_Str"");
  try {
    testContent=new LttngEventContent();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testContent=new LttngEventContent(testEvent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    HashMap<String,LttngEventField> parsedContent=new HashMap<String,LttngEventField>();
    testContent=new LttngEventContent(testEvent,parsedContent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testContent=new LttngEventContent(testEvent);
    testContent2=new LttngEventContent(testContent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","public void testConstructors(){
  LttngEvent testEvent=null;
  LttngEventContent testContent=null;
  @SuppressWarnings(""String_Node_Str"") LttngEventContent testContent2=null;
  LttngEventField[] testFields=new LttngEventField[1];
  testFields[0]=new LttngEventField(""String_Node_Str"");
  try {
    testContent=new LttngEventContent();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testContent=new LttngEventContent(testEvent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    HashMap<String,LttngEventField> parsedContent=new HashMap<String,LttngEventField>();
    testContent=new LttngEventContent(testEvent,parsedContent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testContent=new LttngEventContent(testEvent);
    testContent2=new LttngEventContent(testContent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9793411501954216
92707,"public void testConstructors(){
  LttngEventContent testContent=null;
  LttngEventField testField=null;
  @SuppressWarnings(""String_Node_Str"") LttngEventField testField2=null;
  try {
    testField=new LttngEventField(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testField=new LttngEventField(""String_Node_Str"",""String_Node_Str"");
    testField2=new LttngEventField(testField);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","public void testConstructors(){
  LttngEventField testField=null;
  @SuppressWarnings(""String_Node_Str"") LttngEventField testField2=null;
  try {
    testField=new LttngEventField(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testField=new LttngEventField(""String_Node_Str"",""String_Node_Str"");
    testField2=new LttngEventField(testField);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9611451942740288
92708,"/** 
 * Provide a stateManager instance per trace
 * @return
 */
public static IStateTraceManager getManager(ITmfTrace trace){
  String traceUniqueId=trace.getName();
  if (traceUniqueId == null) {
    return null;
  }
  if (instanceBook.containsKey(traceUniqueId)) {
    return instanceBook.get(traceUniqueId);
  }
  IStateTraceManager manager=null;
  Long id=0L;
  LTTngTreeNode parent=null;
  try {
    manager=new StateTraceManager(id,parent,traceUniqueId,trace);
  }
 catch (  LttngStateException e) {
    e.printStackTrace();
  }
  instanceBook.put(traceUniqueId,manager);
  return manager;
}","/** 
 * Provide a stateManager instance per trace
 * @return
 */
public static IStateTraceManager getManager(ITmfTrace<?> trace){
  String traceUniqueId=trace.getName();
  if (traceUniqueId == null) {
    return null;
  }
  if (instanceBook.containsKey(traceUniqueId)) {
    return instanceBook.get(traceUniqueId);
  }
  IStateTraceManager manager=null;
  Long id=0L;
  LTTngTreeNode parent=null;
  try {
    manager=new StateTraceManager(id,parent,traceUniqueId,trace);
  }
 catch (  LttngStateException e) {
    e.printStackTrace();
  }
  instanceBook.put(traceUniqueId,manager);
  return manager;
}",0.9974979149291076
92709,"/** 
 * TODO: Not used for the time being, for experiment selection test cases for package state.experiment
 */
public void testSetTraceSelection(){
  String logName=""String_Node_Str"";
}","/** 
 * TODO: Not used for the time being, for experiment selection test cases for package state.experiment
 */
public void testSetTraceSelection(){
}",0.8928571428571429
92710,"@SuppressWarnings(""String_Node_Str"") @Override public ITmfContext armRequest(final ITmfDataRequest<LttngSyntheticEvent> request){
  if (!(request instanceof ITmfEventRequest<?>)) {
    request.cancel();
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  if (fExperiment == null) {
    TraceDebug.debug(""String_Node_Str"");
    request.cancel();
    return null;
  }
  reset(fExperiment);
  if (fEventProviderRequests.size() < 1) {
    request.cancel();
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  fmainRequest=request;
  ITmfEventRequest<LttngSyntheticEvent> eventRequest=(ITmfEventRequest<LttngSyntheticEvent>)fmainRequest;
  TmfTimeRange reqWindow=eventRequest.getRange();
  TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
  TmfExperiment<LttngEvent> experiment=(TmfExperiment<LttngEvent>)fExperiment.getValue();
  experiment.startSynch(new TmfStartSynchSignal(0));
  TmfTimeRange adjustedRange=reqWindow;
  long adjustedIndex=eventRequest.getIndex();
  int nbRequested=eventRequest.getNbRequested();
  IStateTraceManager traceManager;
  Iterator<IStateTraceManager> iter=fEventProviderRequests.iterator();
  while (iter.hasNext()) {
    traceManager=iter.next();
    TmfCheckpoint checkPoint=null;
    if (eventRequest.getIndex() > 0) {
      checkPoint=traceManager.restoreCheckPointByIndex(eventRequest.getIndex());
    }
 else {
      checkPoint=traceManager.restoreCheckPointByTimestamp(reqWindow.getStartTime());
    }
    TmfTimeRange traceRange=traceManager.getStateTrace().getTimeRange();
    if ((checkPoint == null) || checkPoint.getTimestamp().getValue() < traceRange.getStartTime().getValue() || checkPoint.getTimestamp().getValue() > traceRange.getEndTime().getValue() || checkPoint.getTimestamp().getValue() >= reqWindow.getEndTime().getValue()) {
    }
 else {
      if (adjustedRange.getStartTime().getValue() > checkPoint.getTimestamp().getValue() || adjustedIndex > (Long)checkPoint.getLocation().getLocation()) {
        adjustedRange=new TmfTimeRange(checkPoint.getTimestamp(),reqWindow.getEndTime());
        adjustedIndex=(Long)checkPoint.getLocation().getLocation();
        if (nbRequested < TmfDataRequest.ALL_DATA) {
          nbRequested+=(eventRequest.getIndex() - adjustedIndex);
        }
      }
    }
    traceToTraceStateModel.put(traceManager.getStateTrace(),traceManager.getStateModel());
  }
  dispatchTime=reqWindow.getStartTime().getValue();
  dispatchIndex=eventRequest.getIndex();
  eventIndex=adjustedIndex;
  fSubRequest=new LttngBaseEventRequest(adjustedRange,reqWindow.getStartTime(),adjustedIndex,nbRequested,BLOCK_SIZE,eventRequest.getExecType()){
    private LttngSyntheticEvent syntheticEvent=null;
    @Override public void handleData(    LttngEvent event){
      super.handleData(event);
      if (event != null) {
synchronized (LttngSyntheticEventProvider.this) {
          if ((fmainRequest == null) || (fmainRequest.isCompleted())) {
            TraceDebug.debug(""String_Node_Str"" + event);
            return;
          }
          handleIncomingData(event);
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
    }
    @Override public void handleCompleted(){
      handleProviderDone(!isCancelled() && !isFailed());
      super.handleCompleted();
    }
    /** 
 * Trigger the Analysis and sequential control of the events.
 * @param e
 */
    private void handleIncomingData(    LttngEvent e){
      long eventTime=e.getTimestamp().getValue();
      ITmfTrace inTrace=e.getTrace();
      LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
      updateSynEvent(e);
      if (eventTime >= dispatchTime && eventIndex >= dispatchIndex) {
        syntheticEvent.setSequenceInd(SequenceInd.BEFORE);
        fmainRequest.handleData(syntheticEvent);
        syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
        fstateUpdateProcessor.process(syntheticEvent,traceModel);
        syntheticEvent.setSequenceInd(SequenceInd.AFTER);
        fmainRequest.handleData(syntheticEvent);
      }
 else {
        syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
        fstateUpdateProcessor.process(syntheticEvent,traceModel);
      }
      eventIndex++;
    }
    /** 
 * Create a synthetic event from the received new reference, if the reference is the same there is no need for a new instance if this is the first event for this request, call start handler
 * @param e
 * @return
 */
    private LttngSyntheticEvent updateSynEvent(    LttngEvent e){
      if ((syntheticEvent == null) || (syntheticEvent.getBaseEvent() != e)) {
        syntheticEvent=new LttngSyntheticEvent(e);
      }
      ITmfTrace inTrace=e.getTrace();
      LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
      syntheticEvent.setTraceModel(traceModel);
      if (!startIndSent) {
        TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
        handleProviderStarted(traceModel);
        startIndSent=true;
      }
      return syntheticEvent;
    }
  }
;
  TmfExperiment<LttngEvent> provider=(TmfExperiment<LttngEvent>)fExperiment.getValue();
  provider.sendRequest(fSubRequest);
synchronized (this) {
    TmfExperiment.getCurrentExperiment().notifyPendingRequest(false);
    fIsExperimentNotified=false;
  }
  experiment.endSynch(new TmfEndSynchSignal(0));
  return new TmfContext();
}","@SuppressWarnings(""String_Node_Str"") @Override public ITmfContext armRequest(final ITmfDataRequest<LttngSyntheticEvent> request){
  if (!(request instanceof ITmfEventRequest<?>)) {
    request.cancel();
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  if (fExperiment == null) {
    TraceDebug.debug(""String_Node_Str"");
    request.cancel();
    return null;
  }
  reset(fExperiment);
  if (fEventProviderRequests.size() < 1) {
    request.cancel();
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  fmainRequest=request;
  ITmfEventRequest<LttngSyntheticEvent> eventRequest=(ITmfEventRequest<LttngSyntheticEvent>)fmainRequest;
  TmfTimeRange reqWindow=eventRequest.getRange();
  TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
  TmfExperiment<LttngEvent> experiment=(TmfExperiment<LttngEvent>)fExperiment.getValue();
  experiment.startSynch(new TmfStartSynchSignal(0));
  TmfTimeRange adjustedRange=reqWindow;
  long adjustedIndex=eventRequest.getIndex();
  int nbRequested=eventRequest.getNbRequested();
  IStateTraceManager traceManager;
  Iterator<IStateTraceManager> iter=fEventProviderRequests.iterator();
  while (iter.hasNext()) {
    traceManager=iter.next();
    TmfCheckpoint checkPoint=null;
    if (eventRequest.getIndex() > 0) {
      checkPoint=traceManager.restoreCheckPointByIndex(eventRequest.getIndex());
    }
 else {
      checkPoint=traceManager.restoreCheckPointByTimestamp(reqWindow.getStartTime());
    }
    TmfTimeRange traceRange=traceManager.getStateTrace().getTimeRange();
    if ((checkPoint == null) || checkPoint.getTimestamp().getValue() < traceRange.getStartTime().getValue() || checkPoint.getTimestamp().getValue() > traceRange.getEndTime().getValue() || checkPoint.getTimestamp().getValue() >= reqWindow.getEndTime().getValue()) {
    }
 else {
      if (adjustedRange.getStartTime().getValue() > checkPoint.getTimestamp().getValue() || adjustedIndex > (Long)checkPoint.getLocation().getLocation()) {
        adjustedRange=new TmfTimeRange(checkPoint.getTimestamp(),reqWindow.getEndTime());
        adjustedIndex=(Long)checkPoint.getLocation().getLocation();
        if (nbRequested < TmfDataRequest.ALL_DATA) {
          nbRequested+=(eventRequest.getIndex() - adjustedIndex);
        }
      }
    }
    traceToTraceStateModel.put(traceManager.getStateTrace(),traceManager.getStateModel());
  }
  dispatchTime=reqWindow.getStartTime().getValue();
  dispatchIndex=eventRequest.getIndex();
  eventIndex=adjustedIndex;
  fSubRequest=new LttngBaseEventRequest(adjustedRange,reqWindow.getStartTime(),adjustedIndex,nbRequested,BLOCK_SIZE,eventRequest.getExecType()){
    private LttngSyntheticEvent syntheticEvent=null;
    @Override public void handleData(    LttngEvent event){
      super.handleData(event);
      if (event != null) {
synchronized (LttngSyntheticEventProvider.this) {
          if ((fmainRequest == null) || (fmainRequest.isCompleted())) {
            TraceDebug.debug(""String_Node_Str"" + event);
            return;
          }
          handleIncomingData(event);
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
    }
    @Override public void handleCompleted(){
      handleProviderDone(!isCancelled() && !isFailed());
      super.handleCompleted();
    }
    /** 
 * Trigger the Analysis and sequential control of the events.
 * @param e
 */
    private void handleIncomingData(    LttngEvent e){
      long eventTime=e.getTimestamp().getValue();
      ITmfTrace<?> inTrace=e.getTrace();
      LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
      updateSynEvent(e);
      if (eventTime >= dispatchTime && eventIndex >= dispatchIndex) {
        syntheticEvent.setSequenceInd(SequenceInd.BEFORE);
        fmainRequest.handleData(syntheticEvent);
        syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
        fstateUpdateProcessor.process(syntheticEvent,traceModel);
        syntheticEvent.setSequenceInd(SequenceInd.AFTER);
        fmainRequest.handleData(syntheticEvent);
      }
 else {
        syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
        fstateUpdateProcessor.process(syntheticEvent,traceModel);
      }
      eventIndex++;
    }
    /** 
 * Create a synthetic event from the received new reference, if the reference is the same there is no need for a new instance if this is the first event for this request, call start handler
 * @param e
 * @return
 */
    private LttngSyntheticEvent updateSynEvent(    LttngEvent e){
      if ((syntheticEvent == null) || (syntheticEvent.getBaseEvent() != e)) {
        syntheticEvent=new LttngSyntheticEvent(e);
      }
      ITmfTrace<?> inTrace=e.getTrace();
      LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
      syntheticEvent.setTraceModel(traceModel);
      if (!startIndSent) {
        TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
        handleProviderStarted(traceModel);
        startIndSent=true;
      }
      return syntheticEvent;
    }
  }
;
  TmfExperiment<LttngEvent> provider=(TmfExperiment<LttngEvent>)fExperiment.getValue();
  provider.sendRequest(fSubRequest);
synchronized (this) {
    TmfExperiment.getCurrentExperiment().notifyPendingRequest(false);
    fIsExperimentNotified=false;
  }
  experiment.endSynch(new TmfEndSynchSignal(0));
  return new TmfContext();
}",0.9994393571295084
92711,"/** 
 * Trigger the Analysis and sequential control of the events.
 * @param e
 */
private void handleIncomingData(LttngEvent e){
  long eventTime=e.getTimestamp().getValue();
  ITmfTrace inTrace=e.getTrace();
  LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
  updateSynEvent(e);
  if (eventTime >= dispatchTime && eventIndex >= dispatchIndex) {
    syntheticEvent.setSequenceInd(SequenceInd.BEFORE);
    fmainRequest.handleData(syntheticEvent);
    syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
    fstateUpdateProcessor.process(syntheticEvent,traceModel);
    syntheticEvent.setSequenceInd(SequenceInd.AFTER);
    fmainRequest.handleData(syntheticEvent);
  }
 else {
    syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
    fstateUpdateProcessor.process(syntheticEvent,traceModel);
  }
  eventIndex++;
}","/** 
 * Trigger the Analysis and sequential control of the events.
 * @param e
 */
private void handleIncomingData(LttngEvent e){
  long eventTime=e.getTimestamp().getValue();
  ITmfTrace<?> inTrace=e.getTrace();
  LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
  updateSynEvent(e);
  if (eventTime >= dispatchTime && eventIndex >= dispatchIndex) {
    syntheticEvent.setSequenceInd(SequenceInd.BEFORE);
    fmainRequest.handleData(syntheticEvent);
    syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
    fstateUpdateProcessor.process(syntheticEvent,traceModel);
    syntheticEvent.setSequenceInd(SequenceInd.AFTER);
    fmainRequest.handleData(syntheticEvent);
  }
 else {
    syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
    fstateUpdateProcessor.process(syntheticEvent,traceModel);
  }
  eventIndex++;
}",0.9981938591210114
92712,"/** 
 * Create a synthetic event from the received new reference, if the reference is the same there is no need for a new instance if this is the first event for this request, call start handler
 * @param e
 * @return
 */
private LttngSyntheticEvent updateSynEvent(LttngEvent e){
  if ((syntheticEvent == null) || (syntheticEvent.getBaseEvent() != e)) {
    syntheticEvent=new LttngSyntheticEvent(e);
  }
  ITmfTrace inTrace=e.getTrace();
  LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
  syntheticEvent.setTraceModel(traceModel);
  if (!startIndSent) {
    TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
    handleProviderStarted(traceModel);
    startIndSent=true;
  }
  return syntheticEvent;
}","/** 
 * Create a synthetic event from the received new reference, if the reference is the same there is no need for a new instance if this is the first event for this request, call start handler
 * @param e
 * @return
 */
private LttngSyntheticEvent updateSynEvent(LttngEvent e){
  if ((syntheticEvent == null) || (syntheticEvent.getBaseEvent() != e)) {
    syntheticEvent=new LttngSyntheticEvent(e);
  }
  ITmfTrace<?> inTrace=e.getTrace();
  LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
  syntheticEvent.setTraceModel(traceModel);
  if (!startIndSent) {
    TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
    handleProviderStarted(traceModel);
    startIndSent=true;
  }
  return syntheticEvent;
}",0.9979770734996628
92713,"public void setReference(String reference){
  fReference=reference;
}","@Override public void setReference(String reference){
  fReference=reference;
}",0.9324324324324323
92714,"public Object getNodeType(){
  return ftype;
}","@Override public Object getNodeType(){
  return ftype;
}",0.9019607843137256
92715,"@Override public void experimentSelected_prep(TmfExperiment<LttngEvent> experiment){
  if (fSelectedExperiment != null) {
    clearExperimentNode(fSelectedExperiment);
    fSelectedExperiment=null;
  }
  LTTngTreeNode experimentNode=null;
  if (experiment != null) {
    experimentNode=getChildByName(experiment.getName());
    if (experimentNode != null && experimentNode.getValue() != experiment) {
      clearExperimentNode(experimentNode);
      experimentNode=null;
    }
    if (experimentNode == null) {
      experimentNode=new LTTngTreeNode(getNextUniqueId(),this,experiment.getName(),experiment);
      addChild(experimentNode);
    }
    ITmfTrace[] rtraces=experiment.getTraces();
    String traceName;
    LTTngTreeNode traceStateManagerNode;
    for (    ITmfTrace rtrace : rtraces) {
      traceName=rtrace.getName();
      traceStateManagerNode=experimentNode.getChildByName(traceName);
      if (traceStateManagerNode == null) {
        traceStateManagerNode=StateManagerFactory.getManager(rtrace,experimentNode);
        experimentNode.addChild(traceStateManagerNode);
      }
    }
    LttngCoreProviderFactory.reset(experimentNode);
    fSelectedExperiment=experimentNode;
  }
}","@Override public void experimentSelected_prep(TmfExperiment<LttngEvent> experiment){
  if (fSelectedExperiment != null) {
    clearExperimentNode(fSelectedExperiment);
    fSelectedExperiment=null;
  }
  LTTngTreeNode experimentNode=null;
  if (experiment != null) {
    experimentNode=getChildByName(experiment.getName());
    if (experimentNode != null && experimentNode.getValue() != experiment) {
      clearExperimentNode(experimentNode);
      experimentNode=null;
    }
    if (experimentNode == null) {
      experimentNode=new LTTngTreeNode(getNextUniqueId(),this,experiment.getName(),experiment);
      addChild(experimentNode);
    }
    ITmfTrace<?>[] rtraces=experiment.getTraces();
    String traceName;
    LTTngTreeNode traceStateManagerNode;
    for (    ITmfTrace<?> rtrace : rtraces) {
      traceName=rtrace.getName();
      traceStateManagerNode=experimentNode.getChildByName(traceName);
      if (traceStateManagerNode == null) {
        traceStateManagerNode=StateManagerFactory.getManager(rtrace,experimentNode);
        experimentNode.addChild(traceStateManagerNode);
      }
    }
    LttngCoreProviderFactory.reset(experimentNode);
    fSelectedExperiment=experimentNode;
  }
}",0.9975020815986678
92716,"private ITmfDataRequest<LttngEvent> buildCheckPoints(final TmfExperiment<LttngEvent> experiment,final TmfTimeRange range,boolean initial){
  if (experiment == null) {
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  LTTngTreeNode experimentNode=getChildByName(experiment.getName());
  if (experimentNode == null) {
    TraceDebug.debug(""String_Node_Str"" + experiment.getName() + ""String_Node_Str"");
    return null;
  }
  final boolean waitForCompletion=fwaitForCompletion;
  LTTngTreeNode[] traceNodes=experimentNode.getChildren();
  if (initial) {
synchronized (this) {
      ftraceToManagerMap.clear();
    }
    ITmfTrace trace;
    for (    LTTngTreeNode traceStateManagerNode : traceNodes) {
      IStateTraceManager traceManager;
      try {
        traceManager=(IStateTraceManager)traceStateManagerNode;
      }
 catch (      ClassCastException e) {
        System.out.println(e.getStackTrace().toString());
        return null;
      }
      traceManager.clearCheckPoints();
      trace=traceManager.getStateTrace();
synchronized (this) {
        ftraceToManagerMap.put(trace,new StateTraceHelper(traceManager));
      }
    }
  }
  if (ftraceToManagerMap.size() < 1) {
    TraceDebug.debug(""String_Node_Str"" + experiment.getName());
    return null;
  }
  fCheckPointNbEventsHandled=0;
  ITmfEventRequest<LttngEvent> request=new TmfEventRequest<LttngEvent>(LttngEvent.class,range,fCheckPointUpdateIndex,TmfEventRequest.ALL_DATA,LttngConstants.DEFAULT_BLOCK_SIZE,ITmfDataRequest.ExecutionType.BACKGROUND){
    @Override public void handleData(    LttngEvent event){
      super.handleData(event);
      if (event != null) {
        fCheckPointNbEventsHandled++;
        ITmfTrace trace=event.getTrace();
        StateTraceHelper helper=ftraceToManagerMap.get(trace);
        if (helper != null) {
          helper.incrementNumberRead();
          LttngSyntheticEvent synEvent=updateSynEvent(event,helper.getTraceModel());
          helper.getStateManager().handleEvent(synEvent,helper.getNumberRead());
        }
 else {
          TraceDebug.debug(""String_Node_Str"" + trace.getName());
        }
      }
    }
    @Override public void handleCompleted(){
      super.handleCompleted();
      printCompletedMessage();
      if (!waitForCompletion) {
synchronized (fCheckPointUpdateSyncObj) {
          fCheckPointUpdateBusy=false;
          fCheckPointUpdateIndex+=fCheckPointNbEventsHandled;
          if (fCheckPointUpdatePending) {
            fCheckPointUpdatePending=false;
            fCheckPointUpdateBusy=true;
            buildCheckPoints(experiment,fCheckPointUpdateRange,false);
          }
        }
      }
    }
    private void printCompletedMessage(){
      if (TraceDebug.isDEBUG()) {
        TraceDebug.debug(""String_Node_Str"" + fCheckPointNbEventsHandled + ""String_Node_Str"");
        for (        StateTraceHelper helper : ftraceToManagerMap.values()) {
          TraceDebug.debug(helper.getStateManager().toString() + ""String_Node_Str"");
        }
      }
    }
  }
;
  experiment.sendRequest(request);
  if (waitForCompletion) {
    try {
      request.waitForCompletion();
synchronized (fCheckPointUpdateSyncObj) {
        fCheckPointUpdateBusy=false;
        fCheckPointUpdateIndex+=fCheckPointNbEventsHandled;
        if (fCheckPointUpdatePending) {
          fCheckPointUpdatePending=false;
          fCheckPointUpdateBusy=true;
          buildCheckPoints(experiment,fCheckPointUpdateRange,false);
        }
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  return request;
}","private ITmfDataRequest<LttngEvent> buildCheckPoints(final TmfExperiment<LttngEvent> experiment,final TmfTimeRange range,boolean initial){
  if (experiment == null) {
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  LTTngTreeNode experimentNode=getChildByName(experiment.getName());
  if (experimentNode == null) {
    TraceDebug.debug(""String_Node_Str"" + experiment.getName() + ""String_Node_Str"");
    return null;
  }
  final boolean waitForCompletion=fwaitForCompletion;
  LTTngTreeNode[] traceNodes=experimentNode.getChildren();
  if (initial) {
synchronized (this) {
      ftraceToManagerMap.clear();
    }
    ITmfTrace<?> trace;
    for (    LTTngTreeNode traceStateManagerNode : traceNodes) {
      IStateTraceManager traceManager;
      try {
        traceManager=(IStateTraceManager)traceStateManagerNode;
      }
 catch (      ClassCastException e) {
        System.out.println(e.getStackTrace().toString());
        return null;
      }
      traceManager.clearCheckPoints();
      trace=traceManager.getStateTrace();
synchronized (this) {
        ftraceToManagerMap.put(trace,new StateTraceHelper(traceManager));
      }
    }
  }
  if (ftraceToManagerMap.size() < 1) {
    TraceDebug.debug(""String_Node_Str"" + experiment.getName());
    return null;
  }
  fCheckPointNbEventsHandled=0;
  ITmfEventRequest<LttngEvent> request=new TmfEventRequest<LttngEvent>(LttngEvent.class,range,fCheckPointUpdateIndex,TmfEventRequest.ALL_DATA,LttngConstants.DEFAULT_BLOCK_SIZE,ITmfDataRequest.ExecutionType.BACKGROUND){
    @Override public void handleData(    LttngEvent event){
      super.handleData(event);
      if (event != null) {
        fCheckPointNbEventsHandled++;
        ITmfTrace<?> trace=event.getTrace();
        StateTraceHelper helper=ftraceToManagerMap.get(trace);
        if (helper != null) {
          helper.incrementNumberRead();
          LttngSyntheticEvent synEvent=updateSynEvent(event,helper.getTraceModel());
          helper.getStateManager().handleEvent(synEvent,helper.getNumberRead());
        }
 else {
          TraceDebug.debug(""String_Node_Str"" + trace.getName());
        }
      }
    }
    @Override public void handleCompleted(){
      super.handleCompleted();
      printCompletedMessage();
      if (!waitForCompletion) {
synchronized (fCheckPointUpdateSyncObj) {
          fCheckPointUpdateBusy=false;
          fCheckPointUpdateIndex+=fCheckPointNbEventsHandled;
          if (fCheckPointUpdatePending) {
            fCheckPointUpdatePending=false;
            fCheckPointUpdateBusy=true;
            buildCheckPoints(experiment,fCheckPointUpdateRange,false);
          }
        }
      }
    }
    private void printCompletedMessage(){
      if (TraceDebug.isDEBUG()) {
        TraceDebug.debug(""String_Node_Str"" + fCheckPointNbEventsHandled + ""String_Node_Str"");
        for (        StateTraceHelper helper : ftraceToManagerMap.values()) {
          TraceDebug.debug(helper.getStateManager().toString() + ""String_Node_Str"");
        }
      }
    }
  }
;
  experiment.sendRequest(request);
  if (waitForCompletion) {
    try {
      request.waitForCompletion();
synchronized (fCheckPointUpdateSyncObj) {
        fCheckPointUpdateBusy=false;
        fCheckPointUpdateIndex+=fCheckPointNbEventsHandled;
        if (fCheckPointUpdatePending) {
          fCheckPointUpdatePending=false;
          fCheckPointUpdateBusy=true;
          buildCheckPoints(experiment,fCheckPointUpdateRange,false);
        }
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  return request;
}",0.9991594284113196
92717,"@Override public void handleData(LttngEvent event){
  super.handleData(event);
  if (event != null) {
    fCheckPointNbEventsHandled++;
    ITmfTrace trace=event.getTrace();
    StateTraceHelper helper=ftraceToManagerMap.get(trace);
    if (helper != null) {
      helper.incrementNumberRead();
      LttngSyntheticEvent synEvent=updateSynEvent(event,helper.getTraceModel());
      helper.getStateManager().handleEvent(synEvent,helper.getNumberRead());
    }
 else {
      TraceDebug.debug(""String_Node_Str"" + trace.getName());
    }
  }
}","@Override public void handleData(LttngEvent event){
  super.handleData(event);
  if (event != null) {
    fCheckPointNbEventsHandled++;
    ITmfTrace<?> trace=event.getTrace();
    StateTraceHelper helper=ftraceToManagerMap.get(trace);
    if (helper != null) {
      helper.incrementNumberRead();
      LttngSyntheticEvent synEvent=updateSynEvent(event,helper.getTraceModel());
      helper.getStateManager().handleEvent(synEvent,helper.getNumberRead());
    }
 else {
      TraceDebug.debug(""String_Node_Str"" + trace.getName());
    }
  }
}",0.9972247918593896
92718,"/** 
 * @param traceUniqueId
 * @param experiment
 * @return
 */
public static LTTngTreeNode getManager(ITmfTrace rtrace,LTTngTreeNode experiment){
  if (rtrace == null) {
    return null;
  }
  String traceUniqueId=rtrace.getName();
  if (traceUniqueId == null) {
    return null;
  }
  LTTngTreeNode managerNode=null;
  managerNode=experiment.getChildByName(traceUniqueId);
  if (managerNode != null && managerNode instanceof IStateTraceManager) {
    return managerNode;
  }
  StateTraceManager manager=null;
  try {
    manager=new StateTraceManager(experiment.getNextUniqueId(),experiment,traceUniqueId,rtrace);
    if (ftraceCheckPointInterval != null) {
      manager.setCheckPointInterval(ftraceCheckPointInterval);
    }
  }
 catch (  LttngStateException e) {
    e.printStackTrace();
  }
  experiment.addChild(manager);
  return manager;
}","/** 
 * @param traceUniqueId
 * @param experiment
 * @return
 */
public static LTTngTreeNode getManager(ITmfTrace<?> rtrace,LTTngTreeNode experiment){
  if (rtrace == null) {
    return null;
  }
  String traceUniqueId=rtrace.getName();
  if (traceUniqueId == null) {
    return null;
  }
  LTTngTreeNode managerNode=null;
  managerNode=experiment.getChildByName(traceUniqueId);
  if (managerNode != null && managerNode instanceof IStateTraceManager) {
    return managerNode;
  }
  StateTraceManager manager=null;
  try {
    manager=new StateTraceManager(experiment.getNextUniqueId(),experiment,traceUniqueId,rtrace);
    if (ftraceCheckPointInterval != null) {
      manager.setCheckPointInterval(ftraceCheckPointInterval);
    }
  }
 catch (  LttngStateException e) {
    e.printStackTrace();
  }
  experiment.addChild(manager);
  return manager;
}",0.9982363315696648
92719,"/** 
 * Remove previously registered managers
 * @param traceUniqueId
 */
public static void removeManager(ITmfTrace rtrace,LTTngTreeNode rexperiment){
  if (rtrace != null && rexperiment != null && rexperiment.getValue() instanceof TmfExperiment<?>) {
    LTTngTreeNode childToremove=rexperiment.getChildByName(rtrace.getName());
    if (childToremove != null) {
      rexperiment.removeChild(childToremove);
    }
  }
 else {
    TraceDebug.debug(""String_Node_Str"" + rtrace.getName());
  }
}","/** 
 * Remove previously registered managers
 * @param traceUniqueId
 */
public static void removeManager(ITmfTrace<?> rtrace,LTTngTreeNode rexperiment){
  if (rtrace != null && rexperiment != null && rexperiment.getValue() instanceof TmfExperiment<?>) {
    LTTngTreeNode childToremove=rexperiment.getChildByName(rtrace.getName());
    if (childToremove != null) {
      rexperiment.removeChild(childToremove);
    }
  }
 else {
    TraceDebug.debug(""String_Node_Str"" + rtrace.getName());
  }
}",0.7340748230535895
92720,"@TmfSignalHandler public void experimentRangeUpdated(TmfExperimentRangeUpdatedSignal signal){
  if (signal.getExperiment() == this) {
    indexExperiment(false,(int)fNbEvents,signal.getRange());
  }
}","@Override @TmfSignalHandler public void experimentRangeUpdated(TmfExperimentRangeUpdatedSignal signal){
  if (signal.getExperiment() == this) {
    indexExperiment(false,(int)fNbEvents,signal.getRange());
  }
}",0.975609756097561
92721,"@Override public void run(){
  while (!fExecutor.isShutdown()) {
    TmfExperiment<?> experiment=TmfExperiment.getCurrentExperiment();
    if (experiment != null) {
      final TmfEventRequest request=new TmfEventRequest<TmfEvent>(TmfEvent.class,TmfTimeRange.Eternity,0,ExecutionType.FOREGROUND){
        @Override public void handleCompleted(){
          updateJniTrace();
        }
      }
;
synchronized (experiment) {
        experiment.sendRequest(request);
      }
      try {
        request.waitForCompletion();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
 else {
      updateJniTrace();
    }
    try {
      Thread.sleep(LTTNG_STREAMING_INTERVAL);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  while (!fExecutor.isShutdown()) {
    TmfExperiment<?> experiment=TmfExperiment.getCurrentExperiment();
    if (experiment != null) {
      @SuppressWarnings(""String_Node_Str"") final TmfEventRequest request=new TmfEventRequest<TmfEvent>(TmfEvent.class,TmfTimeRange.Eternity,0,ExecutionType.FOREGROUND){
        @Override public void handleCompleted(){
          updateJniTrace();
        }
      }
;
synchronized (experiment) {
        experiment.sendRequest(request);
      }
      try {
        request.waitForCompletion();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
 else {
      updateJniTrace();
    }
    try {
      Thread.sleep(LTTNG_STREAMING_INTERVAL);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}",0.9550970873786409
92722,"public void initTrace(String name,String path,Class<LttngEvent> eventType,int cacheSize,boolean indexTrace) throws FileNotFoundException {
  initLTTngTrace(name,path,eventType,cacheSize,indexTrace);
}","@Override public void initTrace(String name,String path,Class<LttngEvent> eventType,int cacheSize,boolean indexTrace) throws FileNotFoundException {
  initLTTngTrace(name,path,eventType,cacheSize,indexTrace);
}",0.975609756097561
92723,"public boolean validate(IProject project,String path){
  if (super.validate(project,path)) {
    String traceLibPath=TraceHelper.getTraceLibDirFromProject(project);
    try {
      LTTngTraceVersion version=new LTTngTraceVersion(path,traceLibPath);
      return version.isValidLttngTrace();
    }
 catch (    LttngException e) {
    }
  }
  return false;
}","@Override public boolean validate(IProject project,String path){
  if (super.validate(project,path)) {
    String traceLibPath=TraceHelper.getTraceLibDirFromProject(project);
    try {
      LTTngTraceVersion version=new LTTngTraceVersion(path,traceLibPath);
      return version.isValidLttngTrace();
    }
 catch (    LttngException e) {
    }
  }
  return false;
}",0.9861495844875346
92724,"private void initializeStreamingMonitor(){
  JniTrace jniTrace=getCurrentJniTrace();
  if (jniTrace == null || (!jniTrace.isLiveTraceSupported() || !LiveTraceManager.isLiveTrace(jniTrace.getTracepath()))) {
    TmfContext context=seekLocation(null);
    LttngEvent event=getNextEvent(context);
    LttngTimestamp startTime=new LttngTimestamp(event.getTimestamp());
    LttngTimestamp endTime=new LttngTimestamp(currentJniTrace.getEndTime().getTime());
    setTimeRange(new TmfTimeRange(startTime,endTime));
    TmfTraceUpdatedSignal signal=new TmfTraceUpdatedSignal(this,this,getTimeRange());
    broadcast(signal);
    return;
  }
  TmfContext context=seekLocation(null);
  LttngEvent event=getNextEvent(context);
  setEndTime(TmfTimestamp.BigBang);
  final long startTime=event != null ? event.getTimestamp().getValue() : TmfTimestamp.BigBang.getValue();
  fStreamingInterval=LTTNG_STREAMING_INTERVAL;
  final Thread thread=new Thread(""String_Node_Str"" + getName()){
    LttngTimestamp safeTimestamp=null;
    TmfTimeRange timeRange=null;
    @Override public void run(){
      while (!fExecutor.isShutdown()) {
        TmfExperiment<?> experiment=TmfExperiment.getCurrentExperiment();
        if (experiment != null) {
          final TmfEventRequest request=new TmfEventRequest<TmfEvent>(TmfEvent.class,TmfTimeRange.Eternity,0,ExecutionType.FOREGROUND){
            @Override public void handleCompleted(){
              updateJniTrace();
            }
          }
;
synchronized (experiment) {
            experiment.sendRequest(request);
          }
          try {
            request.waitForCompletion();
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
 else {
          updateJniTrace();
        }
        try {
          Thread.sleep(LTTNG_STREAMING_INTERVAL);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
    private void updateJniTrace(){
      JniTrace jniTrace=getCurrentJniTrace();
      currentJniTrace.updateTrace();
      long endTime=jniTrace.getEndTime().getTime();
      LttngTimestamp startTimestamp=new LttngTimestamp(startTime);
      LttngTimestamp endTimestamp=new LttngTimestamp(endTime);
      if (safeTimestamp != null && safeTimestamp.compareTo(getTimeRange().getEndTime(),false) > 0) {
        timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
      }
 else {
        timeRange=null;
      }
      safeTimestamp=endTimestamp;
      if (timeRange != null) {
        setTimeRange(timeRange);
      }
    }
  }
;
  thread.start();
}","private void initializeStreamingMonitor(){
  JniTrace jniTrace=getCurrentJniTrace();
  if (jniTrace == null || (!jniTrace.isLiveTraceSupported() || !LiveTraceManager.isLiveTrace(jniTrace.getTracepath()))) {
    TmfContext context=seekLocation(null);
    LttngEvent event=getNextEvent(context);
    LttngTimestamp startTime=new LttngTimestamp(event.getTimestamp());
    LttngTimestamp endTime=new LttngTimestamp(currentJniTrace.getEndTime().getTime());
    setTimeRange(new TmfTimeRange(startTime,endTime));
    TmfTraceUpdatedSignal signal=new TmfTraceUpdatedSignal(this,this,getTimeRange());
    broadcast(signal);
    return;
  }
  TmfContext context=seekLocation(null);
  LttngEvent event=getNextEvent(context);
  setEndTime(TmfTimestamp.BigBang);
  final long startTime=event != null ? event.getTimestamp().getValue() : TmfTimestamp.BigBang.getValue();
  fStreamingInterval=LTTNG_STREAMING_INTERVAL;
  final Thread thread=new Thread(""String_Node_Str"" + getName()){
    LttngTimestamp safeTimestamp=null;
    TmfTimeRange timeRange=null;
    @SuppressWarnings(""String_Node_Str"") @Override public void run(){
      while (!fExecutor.isShutdown()) {
        TmfExperiment<?> experiment=TmfExperiment.getCurrentExperiment();
        if (experiment != null) {
          @SuppressWarnings(""String_Node_Str"") final TmfEventRequest request=new TmfEventRequest<TmfEvent>(TmfEvent.class,TmfTimeRange.Eternity,0,ExecutionType.FOREGROUND){
            @Override public void handleCompleted(){
              updateJniTrace();
            }
          }
;
synchronized (experiment) {
            experiment.sendRequest(request);
          }
          try {
            request.waitForCompletion();
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
 else {
          updateJniTrace();
        }
        try {
          Thread.sleep(LTTNG_STREAMING_INTERVAL);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
    private void updateJniTrace(){
      JniTrace jniTrace=getCurrentJniTrace();
      currentJniTrace.updateTrace();
      long endTime=jniTrace.getEndTime().getTime();
      LttngTimestamp startTimestamp=new LttngTimestamp(startTime);
      LttngTimestamp endTimestamp=new LttngTimestamp(endTime);
      if (safeTimestamp != null && safeTimestamp.compareTo(getTimeRange().getEndTime(),false) > 0) {
        timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
      }
 else {
        timeRange=null;
      }
      safeTimestamp=endTimestamp;
      if (timeRange != null) {
        setTimeRange(timeRange);
      }
    }
  }
;
  thread.start();
}",0.9859315589353612
92725,"/** 
 * <p> Handles: LTT_EVENT_EXEC </p> Replace C function ""after_fs_exec_hook"" in eventhooks.c
 * @return
 */
final ILttngEventProcessor getProcessExecHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      LttngProcessState process=traceSt.getRunning_process().get(trcEvent.getCpuId());
      if (process != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process.getPid(),process.getCpu(),traceSt.getTraceId(),process.getCreation_time());
        if (localProcess == null) {
          if (process.getPid().equals(0) || !process.getPid().equals(process.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
 else {
          localProcess.setName(process.getName());
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}","/** 
 * <p> Handles: LTT_EVENT_EXEC </p> Replace C function ""after_fs_exec_hook"" in eventhooks.c
 * @return
 */
final ILttngEventProcessor getProcessExecHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      LttngProcessState process=traceSt.getRunning_process().get(trcEvent.getCpuId());
      if (process != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process.getPid(),process.getCpu(),traceSt.getTraceId(),process.getCreation_time());
        if (localProcess == null) {
          if (process.getPid() == 0 || !process.getPid().equals(process.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
 else {
          localProcess.setName(process.getName());
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}",0.9946080464537536
92726,"@Override public boolean process(LttngEvent trcEvent,LttngTraceState traceSt){
  int first_cpu;
  int nb_cpus;
  Long pid_in=getAFieldLong(trcEvent,traceSt,Fields.LTT_FIELD_PID);
  if (pid_in != null) {
    if (pid_in == 0L) {
      first_cpu=0;
      nb_cpus=traceSt.getNumberOfCPUs();
    }
 else {
      first_cpu=ANY_CPU.intValue();
      nb_cpus=ANY_CPU.intValue() + 1;
    }
    for (int cpu=first_cpu; cpu < nb_cpus; cpu++) {
      LttngProcessState process_in=lttv_state_find_process(traceSt,Long.valueOf(cpu),pid_in);
      if (process_in != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process_in.getPid(),process_in.getCpu(),traceSt.getTraceId(),process_in.getCreation_time());
        if (localProcess == null) {
          if (process_in.getPid().equals(0) || !process_in.getPid().equals(process_in.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process_in,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
            return false;
          }
        }
        localProcess.setName(process_in.getName());
        localProcess.setPpid(process_in.getPpid());
        localProcess.setTgid(process_in.getTgid());
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
    }
  }
 else {
    TraceDebug.debug(""String_Node_Str"");
  }
  return false;
}","@Override public boolean process(LttngEvent trcEvent,LttngTraceState traceSt){
  int first_cpu;
  int nb_cpus;
  Long pid_in=getAFieldLong(trcEvent,traceSt,Fields.LTT_FIELD_PID);
  if (pid_in != null) {
    if (pid_in == 0L) {
      first_cpu=0;
      nb_cpus=traceSt.getNumberOfCPUs();
    }
 else {
      first_cpu=ANY_CPU.intValue();
      nb_cpus=ANY_CPU.intValue() + 1;
    }
    for (int cpu=first_cpu; cpu < nb_cpus; cpu++) {
      LttngProcessState process_in=lttv_state_find_process(traceSt,Long.valueOf(cpu),pid_in);
      if (process_in != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process_in.getPid(),process_in.getCpu(),traceSt.getTraceId(),process_in.getCreation_time());
        if (localProcess == null) {
          if (process_in.getPid() == 0 || !process_in.getPid().equals(process_in.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process_in,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
            return false;
          }
        }
        localProcess.setName(process_in.getName());
        localProcess.setPpid(process_in.getPpid());
        localProcess.setTgid(process_in.getTgid());
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
    }
  }
 else {
    TraceDebug.debug(""String_Node_Str"");
  }
  return false;
}",0.99566522174058
92727,"/** 
 * <p> LTT_EVENT_THREAD_BRAND </p> Replace C function ""after_user_generic_thread_brand_hook"" in eventhooks.c
 * @return
 */
final ILttngEventProcessor GetThreadBrandHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      LttngProcessState process=traceSt.getRunning_process().get(trcEvent.getCpuId());
      if (process != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process.getPid(),process.getCpu(),traceSt.getTraceId(),process.getCreation_time());
        if (localProcess == null) {
          if (process.getPid().equals(0) || !process.getPid().equals(process.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
 else {
          localProcess.setBrand(process.getBrand());
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}","/** 
 * <p> LTT_EVENT_THREAD_BRAND </p> Replace C function ""after_user_generic_thread_brand_hook"" in eventhooks.c
 * @return
 */
final ILttngEventProcessor GetThreadBrandHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      LttngProcessState process=traceSt.getRunning_process().get(trcEvent.getCpuId());
      if (process != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process.getPid(),process.getCpu(),traceSt.getTraceId(),process.getCreation_time());
        if (localProcess == null) {
          if (process.getPid() == 0 || !process.getPid().equals(process.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
 else {
          localProcess.setBrand(process.getBrand());
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}",0.9946917109024092
92728,"/** 
 * <p> Handles: LTT_EVENT_PROCESS_EXIT </p> Replace C function ""after_process_exit_hook"" in eventhooks.c
 * @return
 */
final ILttngEventProcessor getProcessExitHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      LttngProcessState process=traceSt.getRunning_process().get(trcEvent.getCpuId());
      if (process != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process.getPid(),process.getCpu(),traceSt.getTraceId(),process.getCreation_time());
        if (localProcess == null) {
          if (process.getPid().equals(0) || !process.getPid().equals(process.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}","/** 
 * <p> Handles: LTT_EVENT_PROCESS_EXIT </p> Replace C function ""after_process_exit_hook"" in eventhooks.c
 * @return
 */
final ILttngEventProcessor getProcessExitHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      LttngProcessState process=traceSt.getRunning_process().get(trcEvent.getCpuId());
      if (process != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process.getPid(),process.getCpu(),traceSt.getTraceId(),process.getCreation_time());
        if (localProcess == null) {
          if (process.getPid() == 0 || !process.getPid().equals(process.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}",0.9943453675511092
92729,"/** 
 * <p> LTT_EVENT_PROCESS_STATE </p> Replace C function ""after_event_enum_process_hook"" in eventhooks.c <p> <p> Creates the processlist entry for the child process. Put the last position in x at the current time value. </p> <p> Fields: LTT_FIELD_PID </p>
 * @return
 */
final ILttngEventProcessor getEnumProcessStateHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      int first_cpu;
      int nb_cpus;
      Long pid_in=getAFieldLong(trcEvent,traceSt,Fields.LTT_FIELD_PID);
      if (pid_in != null) {
        if (pid_in == 0L) {
          first_cpu=0;
          nb_cpus=traceSt.getNumberOfCPUs();
        }
 else {
          first_cpu=ANY_CPU.intValue();
          nb_cpus=ANY_CPU.intValue() + 1;
        }
        for (int cpu=first_cpu; cpu < nb_cpus; cpu++) {
          LttngProcessState process_in=lttv_state_find_process(traceSt,Long.valueOf(cpu),pid_in);
          if (process_in != null) {
            TimeRangeEventProcess localProcess=procContainer.findProcess(process_in.getPid(),process_in.getCpu(),traceSt.getTraceId(),process_in.getCreation_time());
            if (localProcess == null) {
              if (process_in.getPid().equals(0) || !process_in.getPid().equals(process_in.getPpid())) {
                TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
                localProcess=addLocalProcess(process_in,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
              }
 else {
                TraceDebug.debug(""String_Node_Str"");
                return false;
              }
            }
            localProcess.setName(process_in.getName());
            localProcess.setPpid(process_in.getPpid());
            localProcess.setTgid(process_in.getTgid());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}","/** 
 * <p> LTT_EVENT_PROCESS_STATE </p> Replace C function ""after_event_enum_process_hook"" in eventhooks.c <p> <p> Creates the processlist entry for the child process. Put the last position in x at the current time value. </p> <p> Fields: LTT_FIELD_PID </p>
 * @return
 */
final ILttngEventProcessor getEnumProcessStateHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      int first_cpu;
      int nb_cpus;
      Long pid_in=getAFieldLong(trcEvent,traceSt,Fields.LTT_FIELD_PID);
      if (pid_in != null) {
        if (pid_in == 0L) {
          first_cpu=0;
          nb_cpus=traceSt.getNumberOfCPUs();
        }
 else {
          first_cpu=ANY_CPU.intValue();
          nb_cpus=ANY_CPU.intValue() + 1;
        }
        for (int cpu=first_cpu; cpu < nb_cpus; cpu++) {
          LttngProcessState process_in=lttv_state_find_process(traceSt,Long.valueOf(cpu),pid_in);
          if (process_in != null) {
            TimeRangeEventProcess localProcess=procContainer.findProcess(process_in.getPid(),process_in.getCpu(),traceSt.getTraceId(),process_in.getCreation_time());
            if (localProcess == null) {
              if (process_in.getPid() == 0 || !process_in.getPid().equals(process_in.getPpid())) {
                TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
                localProcess=addLocalProcess(process_in,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
              }
 else {
                TraceDebug.debug(""String_Node_Str"");
                return false;
              }
            }
            localProcess.setName(process_in.getName());
            localProcess.setPpid(process_in.getPpid());
            localProcess.setTgid(process_in.getTgid());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}",0.996859144720947
92730,"/** 
 * <p> Handles: LTT_EVENT_PROCESS_FORK </p> Replace C function ""after_process_fork_hook"" in eventhooks.c <p> Fields: LTT_FIELD_CHILD_PID </p>
 * @return
 */
final ILttngEventProcessor getProcessForkHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      Long child_pid=getAFieldLong(trcEvent,traceSt,Fields.LTT_FIELD_CHILD_PID);
      LttngProcessState process_child=lttv_state_find_process(traceSt,trcEvent.getCpuId(),child_pid);
      if (process_child != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process_child.getPid(),process_child.getCpu(),traceSt.getTraceId(),process_child.getCreation_time());
        if (localProcess == null) {
          if (child_pid.equals(0) || !child_pid.equals(process_child.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process_child,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
 else {
          localProcess.setPpid(process_child.getPpid());
          localProcess.setTgid(process_child.getTgid());
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}","/** 
 * <p> Handles: LTT_EVENT_PROCESS_FORK </p> Replace C function ""after_process_fork_hook"" in eventhooks.c <p> Fields: LTT_FIELD_CHILD_PID </p>
 * @return
 */
final ILttngEventProcessor getProcessForkHandler(){
  AbsFlowTRangeUpdate handler=new AbsFlowTRangeUpdate(){
    @Override public boolean process(    LttngEvent trcEvent,    LttngTraceState traceSt){
      Long child_pid=getAFieldLong(trcEvent,traceSt,Fields.LTT_FIELD_CHILD_PID);
      LttngProcessState process_child=lttv_state_find_process(traceSt,trcEvent.getCpuId(),child_pid);
      if (process_child != null) {
        TimeRangeEventProcess localProcess=procContainer.findProcess(process_child.getPid(),process_child.getCpu(),traceSt.getTraceId(),process_child.getCreation_time());
        if (localProcess == null) {
          if (child_pid == 0 || !child_pid.equals(process_child.getPpid())) {
            TmfTimeRange timeRange=traceSt.getContext().getTraceTimeWindow();
            localProcess=addLocalProcess(process_child,timeRange.getStartTime().getValue(),timeRange.getEndTime().getValue(),traceSt.getTraceId());
          }
 else {
            TraceDebug.debug(""String_Node_Str"");
          }
        }
 else {
          localProcess.setPpid(process_child.getPpid());
          localProcess.setTgid(process_child.getTgid());
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
      return false;
    }
  }
;
  return handler;
}",0.995475113122172
92731,"/** 
 * @param range
 * @param timestamp
 */
private void updateSlider(TmfTimeRange range,ITmfTimestamp timestamp){
  if (fSlider.isDisposed())   return;
  int scale=range.getEndTime().getScale();
  long total=range.getStartTime().getDelta(range.getEndTime()).getValue();
  long relative=range.getStartTime().getDelta(timestamp).getValue();
  final long position=(total > 0) ? (relative * SLIDER_RANGE / total) : 0;
  long current=fSlider.getSelection();
  if (position != current) {
    fSlider.getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        fSlider.setSelection((int)position);
      }
    }
);
  }
}","/** 
 * @param range
 * @param timestamp
 */
private void updateSlider(TmfTimeRange range,ITmfTimestamp timestamp){
  if (fSlider.isDisposed())   return;
  long total=range.getStartTime().getDelta(range.getEndTime()).getValue();
  long relative=range.getStartTime().getDelta(timestamp).getValue();
  final long position=(total > 0) ? (relative * SLIDER_RANGE / total) : 0;
  long current=fSlider.getSelection();
  if (position != current) {
    fSlider.getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        fSlider.setSelection((int)position);
      }
    }
);
  }
}",0.9650690495532088
92732,"/** 
 * One of the spinners has been updated. Synchronize the other widgets.
 */
public void synchTimeFrameWidgets(SpinnerGroup trigger){
  boolean trangeUpdated=false;
  ITmfTimestamp startTime=fStartGroup.getCurrentTime();
  ITmfTimestamp endTime=fEndGroup.getCurrentTime();
  ITmfTimestamp timeRange=fRangeGroup.getCurrentTime();
  ITmfTimestamp currentTime=fCurrentGroup.getCurrentTime();
  if (trigger == fStartGroup) {
    if (startTime.compareTo(endTime,false) > 0) {
      endTime=startTime;
      trangeUpdated=true;
    }
  }
  if (trigger == fEndGroup) {
    if (endTime.compareTo(startTime,false) < 0) {
      startTime=endTime;
      trangeUpdated=true;
    }
  }
  if (trigger == fRangeGroup) {
    long start=startTime.getValue();
    long span=timeRange.getValue();
    ITmfTimestamp ts=new TmfTimestamp(start + span,startTime.getScale(),0);
    if (ts.compareTo(fTraceEndTime,false) > 0) {
      ts=fTraceEndTime.clone();
    }
    endTime=ts;
    trangeUpdated=true;
  }
  TmfTimeRange subrange=new TmfTimeRange(startTime,endTime);
  int scale=startTime.getScale();
  ITmfTimestamp interval=(TmfTimestamp)startTime.getDelta(endTime);
  fStartGroup.setContent(fTraceTimeRange,startTime);
  fEndGroup.setContent(fTraceTimeRange,endTime);
  fRangeGroup.setContent(fTraceSpan,interval);
  fCurrentGroup.setContent(subrange,currentTime);
  updateSlider(subrange,currentTime);
  if (fupdateExternalListeners) {
    if (!fCurrentTime.equals(currentTime)) {
      fCurrentTime=currentTime;
      broadcast(new TmfTimeSynchSignal(this,currentTime));
    }
    if (trangeUpdated) {
      TmfTimeRange trange=new TmfTimeRange(startTime,endTime);
      broadcast(new TmfRangeSynchSignal(this,trange,currentTime));
    }
  }
}","/** 
 * One of the spinners has been updated. Synchronize the other widgets.
 */
public void synchTimeFrameWidgets(SpinnerGroup trigger){
  boolean trangeUpdated=false;
  ITmfTimestamp startTime=fStartGroup.getCurrentTime();
  ITmfTimestamp endTime=fEndGroup.getCurrentTime();
  ITmfTimestamp timeRange=fRangeGroup.getCurrentTime();
  ITmfTimestamp currentTime=fCurrentGroup.getCurrentTime();
  if (trigger == fStartGroup) {
    if (startTime.compareTo(endTime,false) > 0) {
      endTime=startTime;
      trangeUpdated=true;
    }
  }
  if (trigger == fEndGroup) {
    if (endTime.compareTo(startTime,false) < 0) {
      startTime=endTime;
      trangeUpdated=true;
    }
  }
  if (trigger == fRangeGroup) {
    long start=startTime.getValue();
    long span=timeRange.getValue();
    ITmfTimestamp ts=new TmfTimestamp(start + span,startTime.getScale(),0);
    if (ts.compareTo(fTraceEndTime,false) > 0) {
      ts=fTraceEndTime.clone();
    }
    endTime=ts;
    trangeUpdated=true;
  }
  TmfTimeRange subrange=new TmfTimeRange(startTime,endTime);
  ITmfTimestamp interval=(TmfTimestamp)startTime.getDelta(endTime);
  fStartGroup.setContent(fTraceTimeRange,startTime);
  fEndGroup.setContent(fTraceTimeRange,endTime);
  fRangeGroup.setContent(fTraceSpan,interval);
  fCurrentGroup.setContent(subrange,currentTime);
  updateSlider(subrange,currentTime);
  if (fupdateExternalListeners) {
    if (!fCurrentTime.equals(currentTime)) {
      fCurrentTime=currentTime;
      broadcast(new TmfTimeSynchSignal(this,currentTime));
    }
    if (trangeUpdated) {
      TmfTimeRange trange=new TmfTimeRange(startTime,endTime);
      broadcast(new TmfRangeSynchSignal(this,trange,currentTime));
    }
  }
}",0.9900816802800468
92733,"/** 
 * Selects the experiment. 
 * @param wait true to wait for indexing to finish else false
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void selectExperiment(boolean wait){
  fTrace=setupTrace(fParser);
  ITmfTrace traces[]=new ITmfTrace[1];
  traces[0]=fTrace;
  fExperiment=new TmfExperiment<TmfEvent>(TmfEvent.class,""String_Node_Str"",traces);
  fTrace.broadcast(new TmfExperimentSelectedSignal<TmfEvent>(this,fExperiment));
  if (wait) {
    waitForJobs();
    delay(IUml2SDTestConstants.GUI_REFESH_DELAY);
  }
}","/** 
 * Selects the experiment. 
 * @param wait true to wait for indexing to finish else false
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void selectExperiment(boolean wait){
  fTrace=setupTrace(fParser);
  ITmfTrace traces[]=new ITmfTrace[1];
  traces[0]=fTrace;
  fExperiment=new TmfExperiment<TmfEvent>(TmfEvent.class,""String_Node_Str"",traces);
  fTrace.broadcast(new TmfExperimentSelectedSignal<TmfEvent>(this,fExperiment));
  if (wait) {
    while (fExperiment.getNbEvents() == 0) {
      delay(IUml2SDTestConstants.GUI_REFESH_DELAY);
    }
    waitForJobs();
    delay(IUml2SDTestConstants.GUI_REFESH_DELAY);
  }
}",0.8913226621735467
92734,"@Override public void refresh(){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      IWorkbench wb=PlatformUI.getWorkbench();
      IWorkbenchPage activePage=wb.getActiveWorkbenchWindow().getActivePage();
      for (      IViewReference viewReference : activePage.getViewReferences()) {
        IViewPart viewPart=viewReference.getView(false);
        if (viewPart instanceof CommonNavigator) {
          CommonViewer commonViewer=((CommonNavigator)viewPart).getCommonViewer();
          commonViewer.refresh();
        }
      }
    }
  }
);
}","@Override public void refresh(){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      IWorkbench wb=PlatformUI.getWorkbench();
      IWorkbenchWindow wbWindow=wb.getActiveWorkbenchWindow();
      if (wbWindow == null) {
        return;
      }
      IWorkbenchPage activePage=wbWindow.getActivePage();
      for (      IViewReference viewReference : activePage.getViewReferences()) {
        IViewPart viewPart=viewReference.getView(false);
        if (viewPart instanceof CommonNavigator) {
          CommonViewer commonViewer=((CommonNavigator)viewPart).getCommonViewer();
          commonViewer.refresh();
        }
      }
    }
  }
);
}",0.8996815286624203
92735,"@Override public void run(){
  IWorkbench wb=PlatformUI.getWorkbench();
  IWorkbenchPage activePage=wb.getActiveWorkbenchWindow().getActivePage();
  for (  IViewReference viewReference : activePage.getViewReferences()) {
    IViewPart viewPart=viewReference.getView(false);
    if (viewPart instanceof CommonNavigator) {
      CommonViewer commonViewer=((CommonNavigator)viewPart).getCommonViewer();
      commonViewer.refresh();
    }
  }
}","@Override public void run(){
  IWorkbench wb=PlatformUI.getWorkbench();
  IWorkbenchWindow wbWindow=wb.getActiveWorkbenchWindow();
  if (wbWindow == null) {
    return;
  }
  IWorkbenchPage activePage=wbWindow.getActivePage();
  for (  IViewReference viewReference : activePage.getViewReferences()) {
    IViewPart viewPart=viewReference.getView(false);
    if (viewPart instanceof CommonNavigator) {
      CommonViewer commonViewer=((CommonNavigator)viewPart).getCommonViewer();
      commonViewer.refresh();
    }
  }
}",0.8856548856548857
92736,"protected void createPopupMenu(){
  final IAction showTableAction=new Action(Messages.TmfEventsTable_ShowTableActionText){
    @Override public void run(){
      fTable.setVisible(true);
      fSashForm.layout();
    }
  }
;
  final IAction hideTableAction=new Action(Messages.TmfEventsTable_HideTableActionText){
    @Override public void run(){
      fTable.setVisible(false);
      fSashForm.layout();
    }
  }
;
  final IAction showRawAction=new Action(Messages.TmfEventsTable_ShowRawActionText){
    @Override public void run(){
      fRawViewer.setVisible(true);
      fSashForm.layout();
      int index=fTable.getSelectionIndex();
      if (index >= +1) {
        fRawViewer.selectAndReveal(index - 1);
      }
    }
  }
;
  final IAction hideRawAction=new Action(Messages.TmfEventsTable_HideRawActionText){
    @Override public void run(){
      fRawViewer.setVisible(false);
      fSashForm.layout();
    }
  }
;
  final IAction showSearchBarAction=new Action(Messages.TmfEventsTable_ShowSearchBarActionText){
    @Override public void run(){
      fHeaderState=HeaderState.SEARCH;
      fTable.refresh();
    }
  }
;
  final IAction showFilterBarAction=new Action(Messages.TmfEventsTable_ShowFilterBarActionText){
    @Override public void run(){
      fHeaderState=HeaderState.FILTER;
      fTable.refresh();
    }
  }
;
  final IAction clearFiltersAction=new Action(Messages.TmfEventsTable_ClearFiltersActionText){
    @Override public void run(){
      stopFilterThread();
      stopSearchThread();
      clearFilters();
    }
  }
;
class ToggleBookmarkAction extends Action {
    long fRank;
    public ToggleBookmarkAction(    String text,    long rank){
      super(text);
      fRank=rank;
    }
    @Override public void run(){
      toggleBookmark(fRank);
    }
  }
  final MenuManager tablePopupMenu=new MenuManager();
  tablePopupMenu.setRemoveAllWhenShown(true);
  tablePopupMenu.addMenuListener(new IMenuListener(){
    @Override public void menuAboutToShow(    IMenuManager manager){
      if (fTable.getSelectionIndex() == 0) {
        if (fHeaderState == HeaderState.FILTER) {
          tablePopupMenu.add(showSearchBarAction);
        }
 else {
          tablePopupMenu.add(showFilterBarAction);
        }
        return;
      }
      Point point=fTable.toControl(Display.getDefault().getCursorLocation());
      TableItem item=fTable.getItem(point);
      if (item != null) {
        Rectangle imageBounds=item.getImageBounds(0);
        imageBounds.width=BOOKMARK_IMAGE.getBounds().width;
        if (imageBounds.contains(point)) {
          Long rank=(Long)item.getData(Key.RANK);
          if (rank != null && fBookmarksResource != null) {
            if (fBookmarksMap.containsKey(rank)) {
              tablePopupMenu.add(new ToggleBookmarkAction(Messages.TmfEventsTable_RemoveBookmarkActionText,rank));
            }
 else {
              tablePopupMenu.add(new ToggleBookmarkAction(Messages.TmfEventsTable_AddBookmarkActionText,rank));
            }
          }
          return;
        }
      }
      if (fTable.isVisible() && fRawViewer.isVisible()) {
        tablePopupMenu.add(hideTableAction);
        tablePopupMenu.add(hideRawAction);
      }
 else       if (!fTable.isVisible()) {
        tablePopupMenu.add(showTableAction);
      }
 else       if (!fRawViewer.isVisible()) {
        tablePopupMenu.add(showRawAction);
      }
      tablePopupMenu.add(new Separator());
      tablePopupMenu.add(clearFiltersAction);
      ITmfFilterTreeNode[] savedFilters=FilterManager.getSavedFilters();
      if (savedFilters.length > 0) {
        MenuManager subMenu=new MenuManager(Messages.TmfEventsTable_ApplyPresetFilterMenuName);
        for (        ITmfFilterTreeNode node : savedFilters) {
          if (node instanceof TmfFilterNode) {
            final TmfFilterNode filter=(TmfFilterNode)node;
            subMenu.add(new Action(filter.getFilterName()){
              @Override public void run(){
                stopFilterThread();
                fFilterMatchCount=0;
                fFilterCheckCount=0;
                fCache.applyFilter(filter);
                fTable.clearAll();
                fTable.setData(Key.FILTER_OBJ,filter);
                fTable.setItemCount(3);
                startFilterThread();
                fireFilterApplied(filter);
              }
            }
);
          }
        }
        tablePopupMenu.add(subMenu);
      }
      appendToTablePopupMenu(tablePopupMenu,item);
    }
  }
);
  final MenuManager rawViewerPopupMenu=new MenuManager();
  rawViewerPopupMenu.setRemoveAllWhenShown(true);
  rawViewerPopupMenu.addMenuListener(new IMenuListener(){
    @Override public void menuAboutToShow(    IMenuManager manager){
      if (fTable.isVisible() && fRawViewer.isVisible()) {
        rawViewerPopupMenu.add(hideTableAction);
        rawViewerPopupMenu.add(hideRawAction);
      }
 else       if (!fTable.isVisible()) {
        rawViewerPopupMenu.add(showTableAction);
      }
 else       if (!fRawViewer.isVisible()) {
        rawViewerPopupMenu.add(showRawAction);
      }
      appendToRawPopupMenu(tablePopupMenu);
    }
  }
);
  Menu menu=tablePopupMenu.createContextMenu(fTable);
  fTable.setMenu(menu);
  menu=rawViewerPopupMenu.createContextMenu(fRawViewer);
  fRawViewer.setMenu(menu);
}","protected void createPopupMenu(){
  final IAction showTableAction=new Action(Messages.TmfEventsTable_ShowTableActionText){
    @Override public void run(){
      fTable.setVisible(true);
      fSashForm.layout();
    }
  }
;
  final IAction hideTableAction=new Action(Messages.TmfEventsTable_HideTableActionText){
    @Override public void run(){
      fTable.setVisible(false);
      fSashForm.layout();
    }
  }
;
  final IAction showRawAction=new Action(Messages.TmfEventsTable_ShowRawActionText){
    @Override public void run(){
      fRawViewer.setVisible(true);
      fSashForm.layout();
      int index=fTable.getSelectionIndex();
      if (index >= +1) {
        fRawViewer.selectAndReveal(index - 1);
      }
    }
  }
;
  final IAction hideRawAction=new Action(Messages.TmfEventsTable_HideRawActionText){
    @Override public void run(){
      fRawViewer.setVisible(false);
      fSashForm.layout();
    }
  }
;
  final IAction showSearchBarAction=new Action(Messages.TmfEventsTable_ShowSearchBarActionText){
    @Override public void run(){
      fHeaderState=HeaderState.SEARCH;
      fTable.refresh();
    }
  }
;
  final IAction showFilterBarAction=new Action(Messages.TmfEventsTable_ShowFilterBarActionText){
    @Override public void run(){
      fHeaderState=HeaderState.FILTER;
      fTable.refresh();
    }
  }
;
  final IAction clearFiltersAction=new Action(Messages.TmfEventsTable_ClearFiltersActionText){
    @Override public void run(){
      stopFilterThread();
      stopSearchThread();
      clearFilters();
    }
  }
;
class ToggleBookmarkAction extends Action {
    long fRank;
    public ToggleBookmarkAction(    String text,    long rank){
      super(text);
      fRank=rank;
    }
    @Override public void run(){
      toggleBookmark(fRank);
    }
  }
  final MenuManager tablePopupMenu=new MenuManager();
  tablePopupMenu.setRemoveAllWhenShown(true);
  tablePopupMenu.addMenuListener(new IMenuListener(){
    @Override public void menuAboutToShow(    IMenuManager manager){
      if (fTable.getSelectionIndex() == 0) {
        if (fHeaderState == HeaderState.FILTER) {
          tablePopupMenu.add(showSearchBarAction);
        }
 else {
          tablePopupMenu.add(showFilterBarAction);
        }
        return;
      }
      Point point=fTable.toControl(Display.getDefault().getCursorLocation());
      TableItem item=fTable.getSelection().length > 0 ? fTable.getSelection()[0] : null;
      if (item != null) {
        Rectangle imageBounds=item.getImageBounds(0);
        imageBounds.width=BOOKMARK_IMAGE.getBounds().width;
        if (point.x <= imageBounds.x + imageBounds.width) {
          Long rank=(Long)item.getData(Key.RANK);
          if (rank != null && fBookmarksResource != null) {
            if (fBookmarksMap.containsKey(rank)) {
              tablePopupMenu.add(new ToggleBookmarkAction(Messages.TmfEventsTable_RemoveBookmarkActionText,rank));
            }
 else {
              tablePopupMenu.add(new ToggleBookmarkAction(Messages.TmfEventsTable_AddBookmarkActionText,rank));
            }
          }
          return;
        }
      }
      if (fTable.isVisible() && fRawViewer.isVisible()) {
        tablePopupMenu.add(hideTableAction);
        tablePopupMenu.add(hideRawAction);
      }
 else       if (!fTable.isVisible()) {
        tablePopupMenu.add(showTableAction);
      }
 else       if (!fRawViewer.isVisible()) {
        tablePopupMenu.add(showRawAction);
      }
      tablePopupMenu.add(new Separator());
      tablePopupMenu.add(clearFiltersAction);
      ITmfFilterTreeNode[] savedFilters=FilterManager.getSavedFilters();
      if (savedFilters.length > 0) {
        MenuManager subMenu=new MenuManager(Messages.TmfEventsTable_ApplyPresetFilterMenuName);
        for (        ITmfFilterTreeNode node : savedFilters) {
          if (node instanceof TmfFilterNode) {
            final TmfFilterNode filter=(TmfFilterNode)node;
            subMenu.add(new Action(filter.getFilterName()){
              @Override public void run(){
                stopFilterThread();
                fFilterMatchCount=0;
                fFilterCheckCount=0;
                fCache.applyFilter(filter);
                fTable.clearAll();
                fTable.setData(Key.FILTER_OBJ,filter);
                fTable.setItemCount(3);
                startFilterThread();
                fireFilterApplied(filter);
              }
            }
);
          }
        }
        tablePopupMenu.add(subMenu);
      }
      appendToTablePopupMenu(tablePopupMenu,item);
    }
  }
);
  final MenuManager rawViewerPopupMenu=new MenuManager();
  rawViewerPopupMenu.setRemoveAllWhenShown(true);
  rawViewerPopupMenu.addMenuListener(new IMenuListener(){
    @Override public void menuAboutToShow(    IMenuManager manager){
      if (fTable.isVisible() && fRawViewer.isVisible()) {
        rawViewerPopupMenu.add(hideTableAction);
        rawViewerPopupMenu.add(hideRawAction);
      }
 else       if (!fTable.isVisible()) {
        rawViewerPopupMenu.add(showTableAction);
      }
 else       if (!fRawViewer.isVisible()) {
        rawViewerPopupMenu.add(showRawAction);
      }
      appendToRawPopupMenu(tablePopupMenu);
    }
  }
);
  Menu menu=tablePopupMenu.createContextMenu(fTable);
  fTable.setMenu(menu);
  menu=rawViewerPopupMenu.createContextMenu(fRawViewer);
  fRawViewer.setMenu(menu);
}",0.9892756349952964
92737,"@Override public void refresh(){
  try {
    new WorkspaceModifyOperation(){
      @Override protected void execute(      IProgressMonitor monitor) throws CoreException, InvocationTargetException, InterruptedException {
        IProject project=getResource();
        project.touch(null);
      }
    }
.run(null);
  }
 catch (  InvocationTargetException e) {
  }
catch (  InterruptedException e) {
  }
catch (  RuntimeException e) {
  }
}","@Override public void refresh(){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      IWorkbench wb=PlatformUI.getWorkbench();
      IWorkbenchPage activePage=wb.getActiveWorkbenchWindow().getActivePage();
      for (      IViewReference viewReference : activePage.getViewReferences()) {
        IViewPart viewPart=viewReference.getView(false);
        if (viewPart instanceof CommonNavigator) {
          CommonViewer commonViewer=((CommonNavigator)viewPart).getCommonViewer();
          commonViewer.refresh();
        }
      }
    }
  }
);
}",0.1589793915603533
92738,"public static HashMap<String,ArrayList<String>> loadEventList(){
  HashMap<String,ArrayList<String>> events=new HashMap<String,ArrayList<String>>();
  Process p=null;
  BufferedReader input=null;
  try {
    p=Runtime.getRuntime().exec(""String_Node_Str"");
    BufferedReader stdoutIn=new BufferedReader(new InputStreamReader(p.getInputStream()));
    BufferedReader stderrIn=new BufferedReader(new InputStreamReader(p.getErrorStream()));
    while (!stdoutIn.ready() && !stderrIn.ready())     continue;
    input=stdoutIn.ready() ? stdoutIn : stderrIn;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  String line;
  try {
    while ((line=input.readLine()) != null) {
      if (line.contains(""String_Node_Str"")) {
        String event;
        String cat;
        if (line.contains(PerfPlugin.STRINGS_HWBREAKPOINTS)) {
          cat=PerfPlugin.STRINGS_HWBREAKPOINTS;
          event=line.substring(1,line.indexOf(""String_Node_Str"",PerfPlugin.MagicPerfListNumber)).trim();
        }
 else         if (line.contains(PerfPlugin.STRINGS_RAWHWEvents)) {
          cat=PerfPlugin.STRINGS_RAWHWEvents;
          event=line.substring(1,line.indexOf(""String_Node_Str"",PerfPlugin.MagicPerfListNumber)).trim();
        }
 else {
          event=line.substring(1,PerfPlugin.MagicPerfListNumber).trim();
          if (event.contains(""String_Node_Str"")) {
            event=event.split(""String_Node_Str"")[0];
          }
          cat=line.substring(PerfPlugin.MagicPerfListNumber + 1).split(""String_Node_Str"")[0].trim();
        }
        ArrayList<String> catevs=events.get(cat);
        if (catevs == null) {
          catevs=new ArrayList<String>();
          events.put(cat,catevs);
        }
        catevs.add(event.trim());
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return events;
}","public static HashMap<String,ArrayList<String>> loadEventList(){
  HashMap<String,ArrayList<String>> events=new HashMap<String,ArrayList<String>>();
  Process p=null;
  BufferedReader input=null;
  try {
    p=Runtime.getRuntime().exec(""String_Node_Str"");
    BufferedReader stdoutIn=new BufferedReader(new InputStreamReader(p.getInputStream()));
    BufferedReader stderrIn=new BufferedReader(new InputStreamReader(p.getErrorStream()));
    while (!stdoutIn.ready() && !stderrIn.ready())     continue;
    input=stdoutIn.ready() ? stdoutIn : stderrIn;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  String line;
  try {
    while ((line=input.readLine()) != null) {
      if (line.contains(""String_Node_Str"")) {
        String event;
        String cat;
        if (line.contains(PerfPlugin.STRINGS_HWBREAKPOINTS)) {
          cat=PerfPlugin.STRINGS_HWBREAKPOINTS;
          event=line.substring(1,line.indexOf(""String_Node_Str"",0)).trim();
        }
 else         if (line.contains(PerfPlugin.STRINGS_RAWHWEvents)) {
          cat=PerfPlugin.STRINGS_RAWHWEvents;
          event=line.substring(1,line.indexOf(""String_Node_Str"",0)).trim();
        }
 else {
          event=line.substring(1,line.indexOf(""String_Node_Str"",0)).trim();
          if (event.contains(""String_Node_Str"")) {
            event=event.split(""String_Node_Str"")[0];
          }
          cat=line.replaceFirst(""String_Node_Str"",""String_Node_Str"").trim();
        }
        ArrayList<String> catevs=events.get(cat);
        if (catevs == null) {
          catevs=new ArrayList<String>();
          events.put(cat,catevs);
        }
        catevs.add(event.trim());
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return events;
}",0.9420005603810592
92739,"/** 
 * Scan the next events from all traces and return the next one in chronological order.
 * @param context
 * @return
 */
@Override public synchronized TmfEvent getNextEvent(TmfContext context){
  if (!(context instanceof TmfExperimentContext)) {
    return null;
  }
  if (!context.equals(fExperimentContext)) {
    fExperimentContext=seekLocation(context.getLocation());
  }
  TmfExperimentContext expContext=(TmfExperimentContext)context;
  int lastTrace=expContext.getLastTrace();
  if (lastTrace != TmfExperimentContext.NO_TRACE) {
    TmfContext traceContext=expContext.getContexts()[lastTrace];
    expContext.getEvents()[lastTrace]=expContext.getTraces()[lastTrace].getNextEvent(traceContext);
    expContext.setLastTrace(TmfExperimentContext.NO_TRACE);
  }
  TmfEvent eventArray[]=expContext.getEvents();
  if (eventArray == null) {
    return null;
  }
  int trace=TmfExperimentContext.NO_TRACE;
  TmfTimestamp timestamp=TmfTimestamp.BigCrunch;
  if (eventArray.length == 1) {
    if (eventArray[0] != null) {
      timestamp=eventArray[0].getTimestamp();
      trace=0;
    }
  }
 else {
    for (int i=0; i < eventArray.length; i++) {
      TmfEvent event=eventArray[i];
      if (event != null && event.getTimestamp() != null) {
        TmfTimestamp otherTS=event.getTimestamp();
        if (otherTS.compareTo(timestamp,true) < 0) {
          trace=i;
          timestamp=otherTS;
        }
      }
    }
  }
  TmfEvent event=null;
  if (trace != TmfExperimentContext.NO_TRACE) {
    updateIndex(expContext,timestamp);
    TmfContext traceContext=expContext.getContexts()[trace];
    TmfExperimentLocation expLocation=(TmfExperimentLocation)expContext.getLocation();
    expLocation.getLocation().locations[trace]=traceContext.getLocation();
    expLocation.getRanks()[trace]=traceContext.getRank();
    expContext.setLastTrace(trace);
    expContext.updateRank(1);
    event=expContext.getEvents()[trace];
    fExperimentContext=expContext;
  }
  return event;
}","/** 
 * Scan the next events from all traces and return the next one in chronological order.
 * @param context
 * @return
 */
@Override public synchronized TmfEvent getNextEvent(TmfContext context){
  if (!(context instanceof TmfExperimentContext)) {
    return null;
  }
  if (!context.equals(fExperimentContext)) {
    fExperimentContext=seekLocation(context.getLocation());
  }
  TmfExperimentContext expContext=(TmfExperimentContext)context;
  int lastTrace=expContext.getLastTrace();
  if (lastTrace != TmfExperimentContext.NO_TRACE) {
    TmfContext traceContext=expContext.getContexts()[lastTrace];
    expContext.getEvents()[lastTrace]=expContext.getTraces()[lastTrace].getNextEvent(traceContext);
    expContext.setLastTrace(TmfExperimentContext.NO_TRACE);
  }
  TmfEvent eventArray[]=expContext.getEvents();
  if (eventArray == null) {
    return null;
  }
  int trace=TmfExperimentContext.NO_TRACE;
  TmfTimestamp timestamp=TmfTimestamp.BigCrunch;
  if (eventArray.length == 1) {
    if (eventArray[0] != null) {
      timestamp=eventArray[0].getTimestamp();
      trace=0;
    }
  }
 else {
    for (int i=0; i < eventArray.length; i++) {
      TmfEvent event=eventArray[i];
      if (event != null && event.getTimestamp() != null) {
        TmfTimestamp otherTS=event.getTimestamp();
        if (otherTS.compareTo(timestamp,true) < 0) {
          trace=i;
          timestamp=otherTS;
        }
      }
    }
  }
  TmfEvent event=null;
  if (trace != TmfExperimentContext.NO_TRACE) {
    updateIndex(expContext,timestamp);
    TmfContext traceContext=expContext.getContexts()[trace];
    TmfExperimentLocation expLocation=(TmfExperimentLocation)expContext.getLocation();
    expLocation.getLocation().locations[trace]=traceContext.getLocation().clone();
    expLocation.getRanks()[trace]=traceContext.getRank();
    expContext.setLastTrace(trace);
    expContext.updateRank(1);
    event=expContext.getEvents()[trace];
    fExperimentContext=expContext;
  }
  return event;
}",0.997983870967742
92740,"private void loadLineData(){
  if (fTopLineIndex < 0) {
    if (fLines.size() > 0 && fTrace.getLocationRatio(fLines.get(0).location) > 0) {
      double lastRatio=fTrace.getLocationRatio(fLines.get(fLines.size() - 1).location);
      double firstRatio=fTrace.getLocationRatio(fLines.get(0).location);
      double delta;
      boolean singleEvent=false;
      if (firstRatio != lastRatio) {
        delta=Math.max(20,fNumVisibleLines) * (lastRatio - firstRatio) / (fLines.size() - 1);
      }
 else {
        delta=Math.pow(10,-15);
        singleEvent=true;
      }
      while (fTopLineIndex < 0) {
        ITmfLocation<?> endLocation=fLines.get(0).location;
        firstRatio=Math.max(0,firstRatio - delta);
        TmfContext context=fTrace.seekLocation(firstRatio);
        ITmfLocation<?> location=context.getLocation();
        int index=0;
        long rank=0;
        while (!context.getLocation().equals(endLocation)) {
          location=context.getLocation();
          TmfEvent event=fTrace.getNextEvent(context);
          if (event == null) {
            break;
          }
          String[] lines=event.getRawText().split(""String_Node_Str"");
          for (int i=0; i < lines.length; i++) {
            String line=lines[i];
            LineData lineData=new LineData(rank,location,line);
            fLines.add(index++,lineData);
            fTopLineIndex++;
            fLastTopLineIndex++;
          }
          rank++;
        }
        long rankOffset=fLines.get(index).rank - rank;
        for (int i=0; i < index; i++) {
          fLines.get(i).rank+=rankOffset;
        }
        if (firstRatio == 0) {
          break;
        }
        if (singleEvent) {
          delta=Math.min(delta * 10,0.1);
        }
      }
    }
    if (fTopLineIndex < 0) {
      fTopLineIndex=0;
    }
  }
  while (fLines.size() - fTopLineIndex < fNumVisibleLines) {
    if (fBottomContext == null) {
      if (fLines.size() == 0) {
        fBottomContext=fTrace.seekEvent(0);
      }
 else {
        fBottomContext=fTrace.seekLocation(fLines.get(fLines.size() - 1).location);
        fTrace.getNextEvent(fBottomContext);
      }
      if (fBottomContext == null) {
        break;
      }
    }
    long rank=fBottomContext.getRank();
    ITmfLocation<?> location=fBottomContext.getLocation();
    TmfEvent event=fTrace.getNextEvent(fBottomContext);
    if (event == null) {
      break;
    }
    for (    String line : event.getRawText().split(""String_Node_Str"")) {
      int crPos;
      if ((crPos=line.indexOf('\r')) != -1) {
        line=line.substring(0,crPos);
      }
      LineData lineData=new LineData(rank,location,line);
      fLines.add(lineData);
    }
  }
  fTopLineIndex=Math.max(0,Math.min(fTopLineIndex,fLines.size() - 1));
  if (fLines.size() > MAX_LINE_DATA_SIZE) {
    if (fTopLineIndex < MAX_LINE_DATA_SIZE / 2) {
      long rank=fLines.get(MAX_LINE_DATA_SIZE - 1).rank;
      for (int i=MAX_LINE_DATA_SIZE; i < fLines.size(); i++) {
        if (fLines.get(i).rank > rank) {
          fLines.subList(i,fLines.size()).clear();
          fBottomContext=null;
          break;
        }
      }
    }
 else {
      long rank=fLines.get(fLines.size() - MAX_LINE_DATA_SIZE).rank;
      for (int i=fLines.size() - MAX_LINE_DATA_SIZE - 1; i >= 0; i--) {
        if (fLines.get(i).rank < rank) {
          fLines.subList(0,i + 1).clear();
          fTopLineIndex-=(i + 1);
          fLastTopLineIndex-=(i + 1);
          break;
        }
      }
    }
  }
}","private void loadLineData(){
  if (fTopLineIndex < 0) {
    if (fLines.size() > 0 && fTrace.getLocationRatio(fLines.get(0).location) > 0) {
      double lastRatio=fTrace.getLocationRatio(fLines.get(fLines.size() - 1).location);
      double firstRatio=fTrace.getLocationRatio(fLines.get(0).location);
      double delta;
      boolean singleEvent=false;
      if (firstRatio != lastRatio) {
        delta=Math.max(20,fNumVisibleLines) * (lastRatio - firstRatio) / (fLines.size() - 1);
      }
 else {
        delta=Math.pow(10,-15);
        singleEvent=true;
      }
      while (fTopLineIndex < 0) {
        ITmfLocation<?> endLocation=fLines.get(0).location;
        firstRatio=Math.max(0,firstRatio - delta);
        TmfContext context=fTrace.seekLocation(firstRatio);
        ITmfLocation<?> location;
        int index=0;
        long rank=0;
        while (!context.getLocation().equals(endLocation)) {
          location=context.getLocation().clone();
          TmfEvent event=fTrace.getNextEvent(context);
          if (event == null) {
            break;
          }
          String[] lines=event.getRawText().split(""String_Node_Str"");
          for (int i=0; i < lines.length; i++) {
            String line=lines[i];
            LineData lineData=new LineData(rank,location,line);
            fLines.add(index++,lineData);
            fTopLineIndex++;
            fLastTopLineIndex++;
          }
          rank++;
        }
        long rankOffset=fLines.get(index).rank - rank;
        for (int i=0; i < index; i++) {
          fLines.get(i).rank+=rankOffset;
        }
        if (firstRatio == 0) {
          break;
        }
        if (singleEvent) {
          delta=Math.min(delta * 10,0.1);
        }
      }
    }
    if (fTopLineIndex < 0) {
      fTopLineIndex=0;
    }
  }
  while (fLines.size() - fTopLineIndex < fNumVisibleLines) {
    if (fBottomContext == null) {
      if (fLines.size() == 0) {
        fBottomContext=fTrace.seekEvent(0);
      }
 else {
        fBottomContext=fTrace.seekLocation(fLines.get(fLines.size() - 1).location);
        fTrace.getNextEvent(fBottomContext);
      }
      if (fBottomContext == null) {
        break;
      }
    }
    long rank=fBottomContext.getRank();
    ITmfLocation<?> location=fBottomContext.getLocation() != null ? fBottomContext.getLocation().clone() : null;
    TmfEvent event=fTrace.getNextEvent(fBottomContext);
    if (event == null) {
      break;
    }
    for (    String line : event.getRawText().split(""String_Node_Str"")) {
      int crPos;
      if ((crPos=line.indexOf('\r')) != -1) {
        line=line.substring(0,crPos);
      }
      LineData lineData=new LineData(rank,location,line);
      fLines.add(lineData);
    }
  }
  fTopLineIndex=Math.max(0,Math.min(fTopLineIndex,fLines.size() - 1));
  if (fLines.size() > MAX_LINE_DATA_SIZE) {
    if (fTopLineIndex < MAX_LINE_DATA_SIZE / 2) {
      long rank=fLines.get(MAX_LINE_DATA_SIZE - 1).rank;
      for (int i=MAX_LINE_DATA_SIZE; i < fLines.size(); i++) {
        if (fLines.get(i).rank > rank) {
          fLines.subList(i,fLines.size()).clear();
          fBottomContext=null;
          break;
        }
      }
    }
 else {
      long rank=fLines.get(fLines.size() - MAX_LINE_DATA_SIZE).rank;
      for (int i=fLines.size() - MAX_LINE_DATA_SIZE - 1; i >= 0; i--) {
        if (fLines.get(i).rank < rank) {
          fLines.subList(0,i + 1).clear();
          fTopLineIndex-=(i + 1);
          fLastTopLineIndex-=(i + 1);
          break;
        }
      }
    }
  }
}",0.9879931389365352
92741,"@Override public int hashCode(){
  int result=17;
  result=37 * result + fSource.hashCode();
  result=37 * result + fType.hashCode();
  result=37 * result + fEffectiveTimestamp.hashCode();
  return result;
}","@Override public int hashCode(){
  int result=17;
  result=37 * result + (fSource != null ? fSource.hashCode() : 0);
  result=37 * result + (fType != null ? fType.hashCode() : 0);
  result=37 * result + (fEffectiveTimestamp != null ? fEffectiveTimestamp.hashCode() : 0);
  return result;
}",0.8346774193548387
92742,"@Override public boolean equals(Object other){
  if (!(other instanceof TmfEvent))   return false;
  TmfEvent o=(TmfEvent)other;
  return fEffectiveTimestamp.equals(o.fEffectiveTimestamp) && fSource.equals(o.fSource) && fType.equals(o.fType)&& fContent.equals(o.fContent);
}","@Override public boolean equals(Object other){
  if (!(other instanceof TmfEvent))   return false;
  TmfEvent o=(TmfEvent)other;
  if (fEffectiveTimestamp == null) {
    if (o.fEffectiveTimestamp != null) {
      return false;
    }
  }
 else {
    if (!fEffectiveTimestamp.equals(o.fEffectiveTimestamp)) {
      return false;
    }
  }
  if (fSource == null) {
    if (o.fSource != null) {
      return false;
    }
  }
 else {
    if (!fSource.equals(o.fSource)) {
      return false;
    }
  }
  if (fType == null) {
    if (o.fType != null) {
      return false;
    }
  }
 else {
    if (!fType.equals(o.fType)) {
      return false;
    }
  }
  if (fContent == null) {
    if (o.fContent != null) {
      return false;
    }
  }
 else {
    if (!fContent.equals(o.fContent)) {
      return false;
    }
  }
  return true;
}",0.4442429737080689
92743,"@Override public TmfEvent clone(){
  TmfEvent clone=null;
  try {
    clone=(TmfEvent)super.clone();
    clone.fParentTrace=fParentTrace;
    clone.fEventRank=fEventRank;
    clone.fOriginalTimestamp=fOriginalTimestamp.clone();
    clone.fEffectiveTimestamp=fEffectiveTimestamp.clone();
    clone.fSource=fSource.clone();
    clone.fType=fType.clone();
    clone.fReference=fReference.clone();
    clone.fContent=fContent.clone();
  }
 catch (  CloneNotSupportedException e) {
    e.printStackTrace();
  }
  return clone;
}","@Override public TmfEvent clone(){
  TmfEvent clone=null;
  try {
    clone=(TmfEvent)super.clone();
    clone.fParentTrace=fParentTrace;
    clone.fEventRank=fEventRank;
    clone.fOriginalTimestamp=fOriginalTimestamp != null ? fOriginalTimestamp.clone() : null;
    clone.fEffectiveTimestamp=fEffectiveTimestamp != null ? fEffectiveTimestamp.clone() : null;
    clone.fSource=fSource != null ? fSource.clone() : null;
    clone.fType=fType != null ? fType.clone() : null;
    clone.fReference=fReference != null ? fReference.clone() : null;
    clone.fContent=fContent != null ? fContent.clone() : null;
  }
 catch (  CloneNotSupportedException e) {
    e.printStackTrace();
  }
  return clone;
}",0.7403767403767404
92744,"@Override public boolean equals(Object other){
  if (!(other instanceof TmfEventContent))   return false;
  TmfEventContent o=(TmfEventContent)other;
  return fRawContent.equals(o.fRawContent);
}","@Override public boolean equals(Object other){
  if (!(other instanceof TmfEventContent))   return false;
  TmfEventContent o=(TmfEventContent)other;
  if (fRawContent == null) {
    return o.fRawContent == null;
  }
  return fRawContent.equals(o.fRawContent);
}",0.774617067833698
92745,"@Override public boolean equals(Object other){
  if (!(other instanceof TmfEventReference))   return false;
  TmfEventReference o=(TmfEventReference)other;
  return fReference.equals(o.fReference);
}","@Override public boolean equals(Object other){
  if (!(other instanceof TmfEventReference))   return false;
  TmfEventReference o=(TmfEventReference)other;
  if (fReference == null) {
    return o.fReference == null;
  }
  return fReference.equals(o.fReference);
}",0.7861771058315334
92746,"@Override public boolean equals(Object other){
  if (!(other instanceof TmfEventSource))   return false;
  TmfEventSource o=(TmfEventSource)other;
  return fSourceId.equals(o.fSourceId);
}","@Override public boolean equals(Object other){
  if (!(other instanceof TmfEventSource))   return false;
  TmfEventSource o=(TmfEventSource)other;
  if (fSourceId == null) {
    return o.fSourceId == null;
  }
  return fSourceId.equals(o.fSourceId);
}",0.7835990888382688
92747,"public static HashMap<String,ArrayList<String>> loadEventList(){
  HashMap<String,ArrayList<String>> events=new HashMap<String,ArrayList<String>>();
  Process p=null;
  BufferedReader input=null;
  try {
    p=Runtime.getRuntime().exec(""String_Node_Str"");
    p.waitFor();
    input=new BufferedReader(new InputStreamReader(p.getInputStream()));
    if (!input.ready())     input=new BufferedReader(new InputStreamReader(p.getErrorStream()));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  String line;
  try {
    while ((line=input.readLine()) != null) {
      if (line.contains(""String_Node_Str"")) {
        String event;
        String cat;
        if (line.contains(PerfPlugin.STRINGS_HWBREAKPOINTS)) {
          cat=PerfPlugin.STRINGS_HWBREAKPOINTS;
          event=line.substring(1,line.indexOf(""String_Node_Str"",PerfPlugin.MagicPerfListNumber)).trim();
        }
 else         if (line.contains(PerfPlugin.STRINGS_RAWHWEvents)) {
          cat=PerfPlugin.STRINGS_RAWHWEvents;
          event=line.substring(1,line.indexOf(""String_Node_Str"",PerfPlugin.MagicPerfListNumber)).trim();
        }
 else {
          event=line.substring(1,PerfPlugin.MagicPerfListNumber).trim();
          if (event.contains(""String_Node_Str"")) {
            event=event.split(""String_Node_Str"")[0];
          }
          cat=line.substring(PerfPlugin.MagicPerfListNumber + 1).split(""String_Node_Str"")[0].trim();
        }
        ArrayList<String> catevs=events.get(cat);
        if (catevs == null) {
          catevs=new ArrayList<String>();
          events.put(cat,catevs);
        }
        catevs.add(event.trim());
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return events;
}","public static HashMap<String,ArrayList<String>> loadEventList(){
  HashMap<String,ArrayList<String>> events=new HashMap<String,ArrayList<String>>();
  Process p=null;
  BufferedReader input=null;
  try {
    p=Runtime.getRuntime().exec(""String_Node_Str"");
    BufferedReader stdoutIn=new BufferedReader(new InputStreamReader(p.getInputStream()));
    BufferedReader stderrIn=new BufferedReader(new InputStreamReader(p.getErrorStream()));
    while (!stdoutIn.ready() && !stderrIn.ready())     continue;
    input=stdoutIn.ready() ? stdoutIn : stderrIn;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  String line;
  try {
    while ((line=input.readLine()) != null) {
      if (line.contains(""String_Node_Str"")) {
        String event;
        String cat;
        if (line.contains(PerfPlugin.STRINGS_HWBREAKPOINTS)) {
          cat=PerfPlugin.STRINGS_HWBREAKPOINTS;
          event=line.substring(1,line.indexOf(""String_Node_Str"",PerfPlugin.MagicPerfListNumber)).trim();
        }
 else         if (line.contains(PerfPlugin.STRINGS_RAWHWEvents)) {
          cat=PerfPlugin.STRINGS_RAWHWEvents;
          event=line.substring(1,line.indexOf(""String_Node_Str"",PerfPlugin.MagicPerfListNumber)).trim();
        }
 else {
          event=line.substring(1,PerfPlugin.MagicPerfListNumber).trim();
          if (event.contains(""String_Node_Str"")) {
            event=event.split(""String_Node_Str"")[0];
          }
          cat=line.substring(PerfPlugin.MagicPerfListNumber + 1).split(""String_Node_Str"")[0].trim();
        }
        ArrayList<String> catevs=events.get(cat);
        if (catevs == null) {
          catevs=new ArrayList<String>();
          events.put(cat,catevs);
        }
        catevs.add(event.trim());
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return events;
}",0.923375902276513
92748,"public void testTmfTraceDefault() throws Exception {
  TmfTraceStub trace=null;
  File testfile=null;
  try {
    URL location=FileLocator.find(TmfCoreTestPlugin.getDefault().getBundle(),new Path(DIRECTORY + File.separator + TEST_STREAM),null);
    testfile=new File(FileLocator.toFileURL(location).toURI());
    trace=new TmfTraceStub(testfile.getPath());
  }
 catch (  URISyntaxException e) {
    fail(""String_Node_Str"");
  }
catch (  IOException e) {
    fail(""String_Node_Str"");
  }
  assertTrue(""String_Node_Str"",trace != null);
  assertEquals(""String_Node_Str"",TmfEvent.class,trace.getType());
  assertEquals(""String_Node_Str"",testfile.getPath(),trace.getPath());
  assertEquals(""String_Node_Str"",TEST_STREAM,trace.getName());
  assertEquals(""String_Node_Str"",TmfTrace.DEFAULT_INDEX_PAGE_SIZE,trace.getCacheSize());
}","public void testTmfTraceDefault() throws Exception {
  TmfTraceStub trace=null;
  File testfile=null;
  try {
    URL location=FileLocator.find(TmfCoreTestPlugin.getDefault().getBundle(),new Path(DIRECTORY + File.separator + TEST_STREAM),null);
    testfile=new File(FileLocator.toFileURL(location).toURI());
    trace=new TmfTraceStub(testfile.toURI().getPath());
  }
 catch (  URISyntaxException e) {
    fail(""String_Node_Str"");
  }
catch (  IOException e) {
    fail(""String_Node_Str"");
  }
  assertTrue(""String_Node_Str"",trace != null);
  assertEquals(""String_Node_Str"",TmfEvent.class,trace.getType());
  assertEquals(""String_Node_Str"",testfile.toURI().getPath(),trace.getPath());
  assertEquals(""String_Node_Str"",TEST_STREAM,trace.getName());
  assertEquals(""String_Node_Str"",TmfTrace.DEFAULT_INDEX_PAGE_SIZE,trace.getCacheSize());
}",0.9903730445246692
92749,"public void testTmfTraceDefaultCacheSize() throws Exception {
  TmfTraceStub trace=null;
  File testfile=null;
  try {
    URL location=FileLocator.find(TmfCoreTestPlugin.getDefault().getBundle(),new Path(DIRECTORY + File.separator + TEST_STREAM),null);
    testfile=new File(FileLocator.toFileURL(location).toURI());
    trace=new TmfTraceStub(testfile.getPath(),0);
  }
 catch (  URISyntaxException e) {
    fail(""String_Node_Str"");
  }
catch (  IOException e) {
    fail(""String_Node_Str"");
  }
  assertTrue(""String_Node_Str"",trace != null);
  assertEquals(""String_Node_Str"",TmfEvent.class,trace.getType());
  assertEquals(""String_Node_Str"",testfile.getPath(),trace.getPath());
  assertEquals(""String_Node_Str"",TEST_STREAM,trace.getName());
  assertEquals(""String_Node_Str"",TmfTrace.DEFAULT_INDEX_PAGE_SIZE,trace.getCacheSize());
}","public void testTmfTraceDefaultCacheSize() throws Exception {
  TmfTraceStub trace=null;
  File testfile=null;
  try {
    URL location=FileLocator.find(TmfCoreTestPlugin.getDefault().getBundle(),new Path(DIRECTORY + File.separator + TEST_STREAM),null);
    testfile=new File(FileLocator.toFileURL(location).toURI());
    trace=new TmfTraceStub(testfile.toURI().getPath(),0);
  }
 catch (  URISyntaxException e) {
    fail(""String_Node_Str"");
  }
catch (  IOException e) {
    fail(""String_Node_Str"");
  }
  assertTrue(""String_Node_Str"",trace != null);
  assertEquals(""String_Node_Str"",TmfEvent.class,trace.getType());
  assertEquals(""String_Node_Str"",testfile.toURI().getPath(),trace.getPath());
  assertEquals(""String_Node_Str"",TEST_STREAM,trace.getName());
  assertEquals(""String_Node_Str"",TmfTrace.DEFAULT_INDEX_PAGE_SIZE,trace.getCacheSize());
}",0.990498812351544
92750,"private TmfTraceStub setupTrace(String path){
  if (fTrace == null) {
    try {
      URL location=FileLocator.find(TmfCoreTestPlugin.getDefault().getBundle(),new Path(path),null);
      File test=new File(FileLocator.toFileURL(location).toURI());
      fTrace=new TmfTraceStub(test.getPath(),BLOCK_SIZE,false);
    }
 catch (    URISyntaxException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return fTrace;
}","private TmfTraceStub setupTrace(String path){
  if (fTrace == null) {
    try {
      URL location=FileLocator.find(TmfCoreTestPlugin.getDefault().getBundle(),new Path(path),null);
      File test=new File(FileLocator.toFileURL(location).toURI());
      fTrace=new TmfTraceStub(test.toURI().getPath(),BLOCK_SIZE,false);
    }
 catch (    URISyntaxException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return fTrace;
}",0.9915611814345991
92751,"public void createView(final String contentDescription,final String toolID){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      try {
        activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        activePage.showView(ValgrindUIConstants.VIEW_ID,null,IWorkbenchPage.VIEW_CREATE);
        view.createDynamicContent(contentDescription,toolID);
        view.refreshView();
      }
 catch (      PartInitException e) {
        e.printStackTrace();
      }
catch (      CoreException e) {
        e.printStackTrace();
      }
    }
  }
);
}","public void createView(final String contentDescription,final String toolID){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      try {
        activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        activePage.showView(ValgrindUIConstants.VIEW_ID,null,IWorkbenchPage.VIEW_CREATE);
        activePage.showView(ValgrindUIConstants.VIEW_ID);
        view.createDynamicContent(contentDescription,toolID);
        view.refreshView();
      }
 catch (      PartInitException e) {
        e.printStackTrace();
      }
catch (      CoreException e) {
        e.printStackTrace();
      }
    }
  }
);
}",0.9534510433386838
92752,"@Override public void dispose(){
  if (dynamicView != null) {
    dynamicView.dispose();
  }
  super.dispose();
}","@Override public void dispose(){
  if (dynamicView != null) {
    dynamicView.dispose();
  }
  ValgrindUIPlugin.getDefault().setView(null);
  super.dispose();
}",0.8278388278388278
92753,"public IValgrindToolView createDynamicContent(String description,String toolID) throws CoreException {
  setContentDescription(description);
  IToolBarManager toolbar=getViewSite().getActionBars().getToolBarManager();
  if (dynamicActions != null) {
    for (    ActionContributionItem item : dynamicActions) {
      toolbar.remove(item);
    }
  }
  if (dynamicView != null) {
    dynamicView.dispose();
  }
  if (messages != null) {
    messagesViewer.getTreeViewer().setInput(null);
    messages=null;
  }
  for (  Control child : dynamicViewHolder.getChildren()) {
    if (!child.isDisposed()) {
      child.dispose();
    }
  }
  if (toolID != null) {
    dynamicView=ValgrindUIPlugin.getDefault().getToolView(toolID);
    dynamicView.createPartControl(dynamicViewHolder);
    IAction[] actions=dynamicView.getToolbarActions();
    if (actions != null) {
      dynamicActions=new ActionContributionItem[actions.length];
      for (int i=0; i < actions.length; i++) {
        dynamicActions[i]=new ActionContributionItem(actions[i]);
        toolbar.appendToGroup(ValgrindUIPlugin.TOOLBAR_LOC_GROUP_ID,dynamicActions[i]);
      }
    }
  }
 else {
    dynamicView=null;
  }
  IMenuManager menu=getViewSite().getActionBars().getMenuManager();
  menu.removeAll();
  hasDynamicContent=dynamicViewHolder.getChildren().length > 0;
  if (hasDynamicContent) {
    menu.add(showCoreAction);
    menu.add(showToolAction);
  }
  menu.update(true);
  toolbar.update(true);
  dynamicViewHolder.layout(true);
  return dynamicView;
}","public IValgrindToolView createDynamicContent(String description,String toolID) throws CoreException {
  setContentDescription(description);
  IToolBarManager toolbar=getViewSite().getActionBars().getToolBarManager();
  ToolBar tb=((ToolBarManager)toolbar).getControl();
  if (tb == null || tb.isDisposed()) {
    throw new CoreException(new Status(IStatus.ERROR,ValgrindUIPlugin.PLUGIN_ID,""String_Node_Str""));
  }
  if (dynamicActions != null) {
    for (    ActionContributionItem item : dynamicActions) {
      toolbar.remove(item);
    }
  }
  if (dynamicView != null) {
    dynamicView.dispose();
  }
  if (messages != null) {
    messagesViewer.getTreeViewer().setInput(null);
    messages=null;
  }
  for (  Control child : dynamicViewHolder.getChildren()) {
    if (!child.isDisposed()) {
      child.dispose();
    }
  }
  if (toolID != null) {
    dynamicView=ValgrindUIPlugin.getDefault().getToolView(toolID);
    dynamicView.createPartControl(dynamicViewHolder);
    IAction[] actions=dynamicView.getToolbarActions();
    if (actions != null) {
      dynamicActions=new ActionContributionItem[actions.length];
      for (int i=0; i < actions.length; i++) {
        dynamicActions[i]=new ActionContributionItem(actions[i]);
        toolbar.appendToGroup(ValgrindUIPlugin.TOOLBAR_LOC_GROUP_ID,dynamicActions[i]);
      }
    }
  }
 else {
    dynamicView=null;
  }
  IMenuManager menu=getViewSite().getActionBars().getMenuManager();
  menu.removeAll();
  hasDynamicContent=dynamicViewHolder.getChildren().length > 0;
  if (hasDynamicContent) {
    menu.add(showCoreAction);
    menu.add(showToolAction);
  }
  menu.update(true);
  toolbar.update(true);
  getViewSite().getActionBars().updateActionBars();
  dynamicViewHolder.layout(true);
  return dynamicView;
}",0.9244309559939302
92754,"@SuppressWarnings(""String_Node_Str"") @Override public void init(IEditorSite site,IEditorInput input) throws PartInitException {
  if (input instanceof TmfEditorInput) {
    fResource=((TmfEditorInput)input).getResource();
    fTrace=((TmfEditorInput)input).getTrace();
  }
 else   if (input instanceof IFileEditorInput) {
    fResource=((IFileEditorInput)input).getFile();
    try {
      String traceTypeId=fResource.getPersistentProperty(TmfTraceElement.TRACETYPE);
      if (traceTypeId != null) {
        for (        IConfigurationElement ce : TmfTraceType.getTypeElements()) {
          if (traceTypeId.equals(ce.getAttribute(TmfTraceType.ID_ATTR))) {
            fTrace=(ITmfTrace<?>)ce.createExecutableExtension(TmfTraceType.TRACE_TYPE_ATTR);
            TmfEvent event=(TmfEvent)ce.createExecutableExtension(TmfTraceType.EVENT_TYPE_ATTR);
            String path=fResource.getLocation().toOSString();
            fTrace.initTrace(path,event.getClass(),true);
            break;
          }
        }
      }
    }
 catch (    InvalidRegistryObjectException e) {
      e.printStackTrace();
    }
catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    CoreException e) {
      e.printStackTrace();
    }
    input=new TmfEditorInput(fResource,fTrace);
  }
 else {
    throw new PartInitException(""String_Node_Str"" + input.getClass());
  }
  if (fTrace == null) {
    throw new PartInitException(""String_Node_Str"" + fResource.getName());
  }
  super.setSite(site);
  super.setInput(input);
}","@SuppressWarnings(""String_Node_Str"") @Override public void init(IEditorSite site,IEditorInput input) throws PartInitException {
  if (input instanceof TmfEditorInput) {
    fResource=((TmfEditorInput)input).getResource();
    fTrace=((TmfEditorInput)input).getTrace();
  }
 else   if (input instanceof IFileEditorInput) {
    fResource=((IFileEditorInput)input).getFile();
    try {
      String traceTypeId=fResource.getPersistentProperty(TmfTraceElement.TRACETYPE);
      if (traceTypeId != null) {
        for (        IConfigurationElement ce : TmfTraceType.getTypeElements()) {
          if (traceTypeId.equals(ce.getAttribute(TmfTraceType.ID_ATTR))) {
            fTrace=(ITmfTrace<?>)ce.createExecutableExtension(TmfTraceType.TRACE_TYPE_ATTR);
            TmfEvent event=(TmfEvent)ce.createExecutableExtension(TmfTraceType.EVENT_TYPE_ATTR);
            String path=fResource.getLocationURI().getPath();
            fTrace.initTrace(path,event.getClass(),true);
            break;
          }
        }
      }
    }
 catch (    InvalidRegistryObjectException e) {
      e.printStackTrace();
    }
catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    CoreException e) {
      e.printStackTrace();
    }
    input=new TmfEditorInput(fResource,fTrace);
  }
 else {
    throw new PartInitException(""String_Node_Str"" + input.getClass());
  }
  if (fTrace == null) {
    throw new PartInitException(""String_Node_Str"" + fResource.getName());
  }
  super.setSite(site);
  super.setInput(input);
}",0.991469816272966
92755,"@SuppressWarnings(""String_Node_Str"") @TmfSignalHandler public void traceParserUpdated(TmfTraceParserUpdatedSignal signal){
  if (signal.getTraceResource().equals(fResource)) {
    broadcast(new TmfTraceClosedSignal(this,fTrace));
    try {
      fTrace=null;
      String traceTypeId=fResource.getPersistentProperty(TmfTraceElement.TRACETYPE);
      if (traceTypeId != null) {
        for (        IConfigurationElement ce : TmfTraceType.getTypeElements()) {
          if (traceTypeId.equals(ce.getAttribute(TmfTraceType.ID_ATTR))) {
            fTrace=(ITmfTrace<?>)ce.createExecutableExtension(TmfTraceType.TRACE_TYPE_ATTR);
            TmfEvent event=(TmfEvent)ce.createExecutableExtension(TmfTraceType.EVENT_TYPE_ATTR);
            String path=fResource.getLocation().toOSString();
            fTrace.initTrace(path,event.getClass(),true);
            break;
          }
        }
      }
    }
 catch (    InvalidRegistryObjectException e) {
      e.printStackTrace();
    }
catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    CoreException e) {
      e.printStackTrace();
    }
    fEventsTable.dispose();
    if (fTrace != null) {
      fEventsTable=createEventsTable(fParent,fTrace.getCacheSize());
      fEventsTable.setTrace(fTrace,true);
      broadcast(new TmfTraceOpenedSignal(this,fTrace,fResource,fEventsTable));
    }
 else {
      fEventsTable=new TmfEventsTable(fParent,0);
    }
    fParent.layout();
  }
}","@SuppressWarnings(""String_Node_Str"") @TmfSignalHandler public void traceParserUpdated(TmfTraceParserUpdatedSignal signal){
  if (signal.getTraceResource().equals(fResource)) {
    broadcast(new TmfTraceClosedSignal(this,fTrace));
    try {
      fTrace=null;
      String traceTypeId=fResource.getPersistentProperty(TmfTraceElement.TRACETYPE);
      if (traceTypeId != null) {
        for (        IConfigurationElement ce : TmfTraceType.getTypeElements()) {
          if (traceTypeId.equals(ce.getAttribute(TmfTraceType.ID_ATTR))) {
            fTrace=(ITmfTrace<?>)ce.createExecutableExtension(TmfTraceType.TRACE_TYPE_ATTR);
            TmfEvent event=(TmfEvent)ce.createExecutableExtension(TmfTraceType.EVENT_TYPE_ATTR);
            String path=fResource.getLocationURI().getPath();
            fTrace.initTrace(path,event.getClass(),true);
            break;
          }
        }
      }
    }
 catch (    InvalidRegistryObjectException e) {
      e.printStackTrace();
    }
catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    CoreException e) {
      e.printStackTrace();
    }
    fEventsTable.dispose();
    if (fTrace != null) {
      fEventsTable=createEventsTable(fParent,fTrace.getCacheSize());
      fEventsTable.setTrace(fTrace,true);
      broadcast(new TmfTraceOpenedSignal(this,fTrace,fResource,fEventsTable));
    }
 else {
      fEventsTable=new TmfEventsTable(fParent,0);
    }
    fParent.layout();
  }
}",0.99106529209622
92756,"@Override public void initTrace(String path,Class<T> eventType,int cacheSize,boolean indexTrace) throws FileNotFoundException {
}","@Override public void initTrace(String path,Class<T> eventType,int cacheSize,boolean indexTrace,String name) throws FileNotFoundException {
}",0.9555555555555556
92757,"public void initTrace(String path,Class<T> eventType,int cacheSize,boolean indexTrace) throws FileNotFoundException ;","public void initTrace(String path,Class<T> eventType,int cacheSize,boolean indexTrace,String name) throws FileNotFoundException ;",0.951219512195122
92758,"@Override public void initTrace(String path,Class<T> eventType,int cacheSize,boolean indexTrace) throws FileNotFoundException {
  initTmfTrace(path,eventType,cacheSize,indexTrace);
}","@Override public void initTrace(String path,Class<T> eventType,int cacheSize,boolean indexTrace,String name) throws FileNotFoundException {
  initTmfTrace(path,eventType,cacheSize,indexTrace,name);
}",0.9553805774278216
92759,"private void initTmfTrace(String path,Class<T> eventType,int cacheSize,boolean indexTrace) throws FileNotFoundException {
  fPath=path;
  if (fTraceName == null) {
    fTraceName=""String_Node_Str"";
    if (path != null) {
      int sep=path.lastIndexOf(Path.SEPARATOR);
      fTraceName=(sep >= 0) ? path.substring(sep + 1) : path;
    }
  }
  super.init(fTraceName,eventType);
  fIndexPageSize=(cacheSize > 0) ? cacheSize : DEFAULT_INDEX_PAGE_SIZE;
  if (indexTrace)   indexTrace(false);
}","private void initTmfTrace(String path,Class<T> eventType,int cacheSize,boolean indexTrace,String name) throws FileNotFoundException {
  fPath=path;
  if (name != null) {
    fTraceName=name;
  }
  if (fTraceName == null) {
    fTraceName=""String_Node_Str"";
    if (path != null) {
      int sep=path.lastIndexOf(Path.SEPARATOR);
      fTraceName=(sep >= 0) ? path.substring(sep + 1) : path;
    }
  }
  super.init(fTraceName,eventType);
  fIndexPageSize=(cacheSize > 0) ? cacheSize : DEFAULT_INDEX_PAGE_SIZE;
  if (indexTrace)   indexTrace(false);
}",0.9432146294513956
92760,"@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public Object execute(ExecutionEvent event) throws ExecutionException {
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null)   return null;
  if (fTrace == null) {
    return null;
  }
  TmfEvent traceEvent=fTrace.instantiateEvent();
  ITmfTrace trace=fTrace.instantiateTrace();
  if (trace == null) {
    displayErrorMsg(Messages.OpenTraceHandler_NoTraceType);
    return null;
  }
  String editorId=fTrace.getEditorId();
  boolean usesEditor=editorId != null && editorId.length() > 0;
  try {
    trace.initTrace(fTrace.getLocation().getPath(),traceEvent.getClass(),usesEditor);
  }
 catch (  FileNotFoundException e) {
    displayErrorMsg(Messages.OpenTraceHandler_NoTrace);
    return null;
  }
  if (usesEditor) {
    try {
      IResource resource=fTrace.getResource();
      IEditorInput editorInput=new TmfEditorInput(resource,trace);
      IWorkbench wb=PlatformUI.getWorkbench();
      IWorkbenchPage activePage=wb.getActiveWorkbenchWindow().getActivePage();
      IEditorPart editor=activePage.findEditor(editorInput);
      if (editor != null && editor instanceof IReusableEditor) {
        activePage.reuseEditor((IReusableEditor)editor,editorInput);
        activePage.activate(editor);
      }
 else {
        editor=activePage.openEditor(editorInput,editorId);
      }
    }
 catch (    PartInitException e) {
      e.printStackTrace();
    }
  }
 else {
    TmfExperiment<?> currentExperiment=TmfExperiment.getCurrentExperiment();
    if (currentExperiment != null) {
      currentExperiment.dispose();
    }
    ITmfTrace[] traces=new ITmfTrace[]{trace};
    TmfExperiment experiment=new TmfExperiment(traceEvent.getClass(),fTrace.getName(),traces,trace.getCacheSize());
    TmfExperiment.setCurrentExperiment(experiment);
    TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
  }
  return null;
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public Object execute(ExecutionEvent event) throws ExecutionException {
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null)   return null;
  if (fTrace == null) {
    return null;
  }
  TmfEvent traceEvent=fTrace.instantiateEvent();
  ITmfTrace trace=fTrace.instantiateTrace();
  if (trace == null) {
    displayErrorMsg(Messages.OpenTraceHandler_NoTraceType);
    return null;
  }
  String editorId=fTrace.getEditorId();
  boolean usesEditor=editorId != null && editorId.length() > 0;
  try {
    trace.initTrace(fTrace.getLocation().getPath(),traceEvent.getClass(),usesEditor);
  }
 catch (  FileNotFoundException e) {
    displayErrorMsg(Messages.OpenTraceHandler_NoTrace);
    return null;
  }
  if (usesEditor) {
    try {
      IResource resource=fTrace.getResource();
      IEditorInput editorInput=new TmfEditorInput(resource,trace);
      IWorkbench wb=PlatformUI.getWorkbench();
      IWorkbenchPage activePage=wb.getActiveWorkbenchWindow().getActivePage();
      IEditorPart editor=activePage.findEditor(editorInput);
      if (editor != null && editor instanceof IReusableEditor) {
        activePage.reuseEditor((IReusableEditor)editor,editorInput);
        activePage.activate(editor);
      }
 else {
        editor=activePage.openEditor(editorInput,editorId);
        if (resource instanceof IFile) {
          IDE.setDefaultEditor((IFile)resource,editorId);
        }
      }
    }
 catch (    PartInitException e) {
      e.printStackTrace();
    }
  }
 else {
    TmfExperiment<?> currentExperiment=TmfExperiment.getCurrentExperiment();
    if (currentExperiment != null) {
      currentExperiment.dispose();
    }
    ITmfTrace[] traces=new ITmfTrace[]{trace};
    TmfExperiment experiment=new TmfExperiment(traceEvent.getClass(),fTrace.getName(),traces,trace.getCacheSize());
    TmfExperiment.setCurrentExperiment(experiment);
    TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this,experiment));
  }
  return null;
}",0.9729997522913054
92761,"public void decorateEvent(TimeChartEvent timeChartEvent){
  TimeChartAnalysisEntry timeAnalysisEntry=(TimeChartAnalysisEntry)timeChartEvent.getEntry();
  ITmfTrace trace=timeAnalysisEntry.getTrace();
  int priority=ColorSettingsManager.PRIORITY_NONE;
  boolean isBookmarked=false;
  boolean isVisible=false;
  boolean isSearchMatch=false;
synchronized (timeChartEvent.getRankRangeList()) {
    for (    RankRange range : timeChartEvent.getRankRangeList()) {
      if (interrupted)       return;
      if (fContext == null || fContext.getRank() != range.getFirstRank()) {
        fContext=trace.seekEvent(range.getFirstRank());
        fContext.setRank(range.getFirstRank());
      }
      while (true) {
        if (interrupted)         return;
        long rank=fContext.getRank();
        TmfEvent event=trace.getNextEvent(fContext);
        if (event == null) {
          break;
        }
        long eventTime=event.getTimestamp().synchronize(0,(byte)-9).getValue();
        if (eventTime >= timeChartEvent.getTime() && eventTime <= timeChartEvent.getTime() + timeChartEvent.getDuration()) {
          priority=Math.min(priority,ColorSettingsManager.getColorSettingPriority(event));
        }
        isBookmarked|=fDecorationProvider.isBookmark(rank);
        isVisible|=fDecorationProvider.isVisible(event);
        isSearchMatch|=fDecorationProvider.isSearchMatch(event);
        if (fContext.getRank() > range.getLastRank()) {
          break;
        }
      }
    }
  }
  timeChartEvent.setColorSettingPriority(priority);
  timeChartEvent.setIsBookmarked(isBookmarked);
  timeChartEvent.setIsVisible(isVisible);
  timeChartEvent.setIsSearchMatch(isSearchMatch);
}","public void decorateEvent(TimeChartEvent timeChartEvent){
  TimeChartAnalysisEntry timeAnalysisEntry=(TimeChartAnalysisEntry)timeChartEvent.getEntry();
  ITmfTrace trace=timeAnalysisEntry.getTrace();
  int priority=ColorSettingsManager.PRIORITY_NONE;
  boolean isBookmarked=false;
  boolean isVisible=false;
  boolean isSearchMatch=false;
synchronized (timeChartEvent.getRankRangeList()) {
    for (    RankRange range : timeChartEvent.getRankRangeList()) {
      if (interrupted)       return;
      if (fContext == null || fContext.getRank() != range.getFirstRank()) {
        if (fContext != null) {
          fContext.dispose();
        }
        fContext=trace.seekEvent(range.getFirstRank());
        fContext.setRank(range.getFirstRank());
      }
      while (true) {
        if (interrupted)         return;
        long rank=fContext.getRank();
        TmfEvent event=trace.getNextEvent(fContext);
        if (event == null) {
          break;
        }
        long eventTime=event.getTimestamp().synchronize(0,(byte)-9).getValue();
        if (eventTime >= timeChartEvent.getTime() && eventTime <= timeChartEvent.getTime() + timeChartEvent.getDuration()) {
          priority=Math.min(priority,ColorSettingsManager.getColorSettingPriority(event));
        }
        isBookmarked|=fDecorationProvider.isBookmark(rank);
        isVisible|=fDecorationProvider.isVisible(event);
        isSearchMatch|=fDecorationProvider.isSearchMatch(event);
        if (fContext.getRank() > range.getLastRank()) {
          break;
        }
      }
    }
  }
  timeChartEvent.setColorSettingPriority(priority);
  timeChartEvent.setIsBookmarked(isBookmarked);
  timeChartEvent.setIsVisible(isVisible);
  timeChartEvent.setIsSearchMatch(isSearchMatch);
}",0.9789473684210528
92762,"@Override public void run(){
  resetTraceEntry(fTimeAnalysisEntry);
  refreshViewer(false);
  decorateTraceEntry(fTimeAnalysisEntry,null);
  refreshViewer(false);
synchronized (fDecorateThreads) {
    fDecorateThreads.remove(this);
  }
}","@Override public void run(){
  resetTraceEntry(fTimeAnalysisEntry);
  refreshViewer(false);
  decorateTraceEntry(fTimeAnalysisEntry,null);
  refreshViewer(false);
synchronized (fDecorateThreads) {
    fDecorateThreads.remove(this);
  }
  if (fContext != null) {
    fContext.dispose();
  }
}",0.8977272727272727
92763,"private void initTmfTrace(String path,Class<T> eventType,int cacheSize,boolean indexTrace) throws FileNotFoundException {
  fPath=path;
  if (fTraceName == null) {
    fTraceName=""String_Node_Str"";
    if (path != null) {
      int sep=path.lastIndexOf(File.separator);
      fTraceName=(sep >= 0) ? path.substring(sep + 1) : path;
    }
  }
  super.init(fTraceName,eventType);
  fIndexPageSize=(cacheSize > 0) ? cacheSize : DEFAULT_INDEX_PAGE_SIZE;
  if (indexTrace)   indexTrace(false);
}","private void initTmfTrace(String path,Class<T> eventType,int cacheSize,boolean indexTrace) throws FileNotFoundException {
  fPath=path;
  if (fTraceName == null) {
    fTraceName=""String_Node_Str"";
    if (path != null) {
      int sep=path.lastIndexOf(Path.SEPARATOR);
      fTraceName=(sep >= 0) ? path.substring(sep + 1) : path;
    }
  }
  super.init(fTraceName,eventType);
  fIndexPageSize=(cacheSize > 0) ? cacheSize : DEFAULT_INDEX_PAGE_SIZE;
  if (indexTrace)   indexTrace(false);
}",0.973469387755102
92764,"@BeforeClass public static void beforeClass() throws Exception {
  bot=new SWTWorkbenchBot();
  bot.perspectiveByLabel(""String_Node_Str"").activate();
  bot.activeShell().activate();
  SWTBotMenu menu=bot.menu(""String_Node_Str"");
  menu.click();
}","@BeforeClass public static void beforeClass() throws Exception {
  bot=new SWTWorkbenchBot();
  bot.perspectiveByLabel(""String_Node_Str"").activate();
  bot.shells()[0].activate();
  SWTBotMenu menu=bot.menu(""String_Node_Str"");
  menu.click();
}",0.9673469387755104
92765,"@BeforeClass public static void beforeClass() throws Exception {
  bot=new SWTWorkbenchBot();
  bot.perspectiveByLabel(""String_Node_Str"").activate();
  bot.activeShell().activate();
  SWTBotMenu menu=bot.menu(""String_Node_Str"");
  menu.click();
}","@BeforeClass public static void beforeClass() throws Exception {
  bot=new SWTWorkbenchBot();
  bot.perspectiveByLabel(""String_Node_Str"").activate();
  bot.shells()[0].activate();
  SWTBotMenu menu=bot.menu(""String_Node_Str"");
  menu.click();
}",0.9673469387755104
92766,"@BeforeClass public static void beforeClass() throws Exception {
  bot=new SWTWorkbenchBot();
  bot.perspectiveByLabel(""String_Node_Str"").activate();
  bot.activeShell().activate();
  SWTBotMenu menu=bot.menu(""String_Node_Str"");
  menu.click();
}","@BeforeClass public static void beforeClass() throws Exception {
  bot=new SWTWorkbenchBot();
  bot.perspectiveByLabel(""String_Node_Str"").activate();
  bot.shells()[0].activate();
  SWTBotMenu menu=bot.menu(""String_Node_Str"");
  menu.click();
}",0.9673469387755104
92767,"private static void testGcovSummary(SWTWorkbenchBot bot,String projectName,String filename,String binName) throws Exception {
  IPath filePath=new Path(filename);
  IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(filePath);
  String binPath=file.getProject().getFile(binName).getLocation().toOSString();
  SWTBot viewBot=bot.viewByTitle(""String_Node_Str"").bot();
  SWTBotShell wbShell=viewBot.shells()[0];
  wbShell.activate();
  SWTBotTree treeBot=viewBot.tree();
  treeBot.setFocus();
  treeBot.expandNode(projectName).select(file.getName());
  treeBot.contextMenu(""String_Node_Str"").click();
  Matcher<Shell> withText=withText(""String_Node_Str"");
  waitForShell(withText);
  SWTBotShell shell=bot.shell(""String_Node_Str"");
  shell.activate();
  bot.textInGroup(""String_Node_Str"",0).setText(binPath);
  bot.button(""String_Node_Str"").click();
  wbShell.activate();
  SWTBotView botView=bot.viewByTitle(""String_Node_Str"");
  botView.toolbarButton(""String_Node_Str"").click();
  dumpCSV(bot,botView,projectName,""String_Node_Str"");
  botView.toolbarButton(""String_Node_Str"").click();
  dumpCSV(bot,botView,projectName,""String_Node_Str"");
  botView.toolbarButton(""String_Node_Str"").click();
  dumpCSV(bot,botView,projectName,""String_Node_Str"");
  botView.close();
}","private static void testGcovSummary(SWTWorkbenchBot bot,String projectName,String filename,String binName,boolean testProducedReference) throws Exception {
  IPath filePath=new Path(filename);
  IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(filePath);
  String binPath=file.getProject().getFile(binName).getLocation().toOSString();
  SWTBot viewBot=bot.viewByTitle(""String_Node_Str"").bot();
  SWTBotShell wbShell=viewBot.shells()[0];
  wbShell.activate();
  SWTBotTree treeBot=viewBot.tree();
  treeBot.setFocus();
  treeBot.expandNode(projectName).select(file.getName());
  treeBot.contextMenu(""String_Node_Str"").click();
  Matcher<Shell> withText=withText(""String_Node_Str"");
  waitForShell(withText);
  SWTBotShell shell=bot.shell(""String_Node_Str"");
  shell.activate();
  bot.textInGroup(""String_Node_Str"",0).setText(binPath);
  bot.button(""String_Node_Str"").click();
  wbShell.activate();
  SWTBotView botView=bot.viewByTitle(""String_Node_Str"");
  botView.toolbarButton(""String_Node_Str"").click();
  dumpCSV(bot,botView,projectName,""String_Node_Str"",testProducedReference);
  botView.toolbarButton(""String_Node_Str"").click();
  dumpCSV(bot,botView,projectName,""String_Node_Str"",testProducedReference);
  botView.toolbarButton(""String_Node_Str"").click();
  dumpCSV(bot,botView,projectName,""String_Node_Str"",testProducedReference);
  botView.close();
}",0.9636638909916728
92768,"public static void openGcovSummary(SWTWorkbenchBot bot,String projectName,String binName) throws Exception {
  TreeSet<String> ts=getGcovFiles(bot,projectName);
  for (  String string : ts) {
    testGcovSummary(bot,projectName,string,binName);
  }
}","public static void openGcovSummary(SWTWorkbenchBot bot,String projectName,String binName,boolean testProducedReference) throws Exception {
  TreeSet<String> ts=getGcovFiles(bot,projectName);
  for (  String string : ts) {
    testGcovSummary(bot,projectName,string,binName,testProducedReference);
  }
}",0.9057971014492754
92769,"private static void dumpCSV(SWTWorkbenchBot bot,SWTBotView botView,String projectName,String type){
  IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
  botView.toolbarButton(""String_Node_Str"").click();
  SWTBotShell shell=bot.shell(""String_Node_Str"");
  shell.activate();
  String s=project.getLocation() + ""String_Node_Str"" + type+ ""String_Node_Str"";
  new File(s).delete();
  bot.text().setText(s);
  bot.button(""String_Node_Str"").click();
  bot.waitUntil(new JobsRunning(STExportToCSVAction.EXPORT_TO_CSV_JOB_FAMILY),3000);
  String ref=STJunitUtils.getAbsolutePath(Activator.PLUGIN_ID,""String_Node_Str"" + projectName + ""String_Node_Str""+ type+ ""String_Node_Str"");
  STJunitUtils.compareIgnoreEOL(project.getLocation() + ""String_Node_Str"" + type+ ""String_Node_Str"",ref,false);
}","private static void dumpCSV(SWTWorkbenchBot bot,SWTBotView botView,String projectName,String type,boolean testProducedReference){
  IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
  botView.toolbarButton(""String_Node_Str"").click();
  SWTBotShell shell=bot.shell(""String_Node_Str"");
  shell.activate();
  String s=project.getLocation() + ""String_Node_Str"" + type+ ""String_Node_Str"";
  new File(s).delete();
  bot.text().setText(s);
  bot.button(""String_Node_Str"").click();
  bot.waitUntil(new JobsRunning(STExportToCSVAction.EXPORT_TO_CSV_JOB_FAMILY),3000);
  if (testProducedReference) {
    String ref=STJunitUtils.getAbsolutePath(Activator.PLUGIN_ID,""String_Node_Str"" + projectName + ""String_Node_Str""+ type+ ""String_Node_Str"");
    STJunitUtils.compareIgnoreEOL(project.getLocation() + ""String_Node_Str"" + type+ ""String_Node_Str"",ref,false);
  }
}",0.9594356261022928
92770,"@Test public void test() throws Exception {
  GcovTest.openGcovSummary(bot,PROJECT_NAME);
}","@Test public void test() throws Exception {
  GcovTest.openGcovSummary(bot,PROJECT_NAME,true);
}",0.9732620320855616
92771,"@Test public void test() throws Exception {
  GcovTest.openGcovSummary(bot,PROJECT_NAME,BIN_NAME);
}","@Test public void test() throws Exception {
  GcovTest.openGcovSummary(bot,PROJECT_NAME,BIN_NAME,true);
}",0.975609756097561
92772,"@Test public void test() throws Exception {
  GcovTest.openGcovSummary(bot,PROJECT_NAME);
}","@Test public void test() throws Exception {
  GcovTest.openGcovSummary(bot,PROJECT_NAME,false);
}",0.9680851063829788
92773,"/** 
 * Stops the executor
 */
public void stop(){
  if (fCurrentRequest != null) {
    fCurrentRequest.cancel();
  }
  fExecutor.shutdown();
  if (Tracer.isComponentTraced())   Tracer.trace(fExecutor + ""String_Node_Str"");
}","/** 
 * Stops the executor
 */
public synchronized void stop(){
  if (fCurrentRequest != null) {
    fCurrentRequest.cancel();
  }
  while ((fCurrentRequest=fRequestQueue.poll()) != null) {
    fCurrentRequest.cancel();
  }
  fExecutor.shutdown();
  if (Tracer.isComponentTraced())   Tracer.trace(fExecutor + ""String_Node_Str"");
}",0.8086642599277978
92774,"/** 
 * @return the termination state
 */
public boolean isTerminated(){
  return fExecutor.isTerminated();
}","/** 
 * @return the termination state
 */
public synchronized boolean isTerminated(){
  return fExecutor.isTerminated();
}",0.9437229437229436
92775,"/** 
 * @return the number of pending requests
 */
public int getNbPendingRequests(){
  return fRequestQueue.size();
}","/** 
 * @return the number of pending requests
 */
public synchronized int getNbPendingRequests(){
  return fRequestQueue.size();
}",0.9477911646586346
92776,"/** 
 * TODO: Not used for the time being, for experiment selection test cases for package state.experiment
 */
public void testSetTraceSelection(){
  String logName=""String_Node_Str"";
  LTTngTrace testStream=null;
  try {
    testStream=new LTTngTrace(logName,false);
  }
 catch (  Exception e) {
  }
  if (testStream != null) {
    LTTngTrace[] streamList=new LTTngTrace[1];
    streamList[0]=testStream;
  }
}","/** 
 * TODO: Not used for the time being, for experiment selection test cases for package state.experiment
 */
public void testSetTraceSelection(){
  String logName=""String_Node_Str"";
}",0.6220735785953178
92777,"/** 
 * Handler called when an experiment is selected. Checks if the experiment has changed and requests the selected experiment if it has not yet been cached.
 * @param signal contains the information about the selection.
 */
@TmfSignalHandler public void experimentSelected(TmfExperimentSelectedSignal<? extends TmfEvent> signal){
  if (signal != null) {
    TmfExperiment<?> experiment=signal.getExperiment();
    String experimentName=experiment.getName();
    if (TmfStatisticsTreeRootFactory.containsTreeRoot(getTreeID(experimentName))) {
      TmfStatisticsTreeNode experimentTreeNode=TmfStatisticsTreeRootFactory.getStatTreeRoot(getTreeID(experimentName));
      ITmfTrace[] traces=experiment.getTraces();
      int numTraces=experiment.getTraces().length;
      int numNodeTraces=experimentTreeNode.getNbChildren();
      if (numTraces == numNodeTraces) {
        boolean same=true;
        for (int i=0; i < numTraces; i++) {
          String traceName=traces[i].getName();
          if (!experimentTreeNode.containsChild(traceName)) {
            same=false;
            break;
          }
        }
        if (same) {
          fTreeViewer.setInput(experimentTreeNode);
          resetUpdateSynchronization();
          return;
        }
        experimentTreeNode.reset();
      }
    }
 else {
      TmfStatisticsTreeRootFactory.addStatsTreeRoot(getTreeID(experimentName),getStatisticData());
    }
    resetUpdateSynchronization();
    TmfStatisticsTreeNode treeModelRoot=TmfStatisticsTreeRootFactory.getStatTreeRoot(getTreeID(experiment.getName()));
    if (treeModelRoot.hasChildren()) {
      treeModelRoot.reset();
    }
    fTreeViewer.setInput(treeModelRoot);
    requestData(experiment,experiment.getTimeRange());
  }
}","/** 
 * Handler called when an experiment is selected. Checks if the experiment has changed and requests the selected experiment if it has not yet been cached.
 * @param signal contains the information about the selection.
 */
@TmfSignalHandler public void experimentSelected(TmfExperimentSelectedSignal<? extends TmfEvent> signal){
  if (signal != null) {
    TmfExperiment<?> experiment=signal.getExperiment();
    String experimentName=experiment.getName();
    if (TmfStatisticsTreeRootFactory.containsTreeRoot(getTreeID(experimentName))) {
      TmfStatisticsTreeNode experimentTreeNode=TmfStatisticsTreeRootFactory.getStatTreeRoot(getTreeID(experimentName));
      @SuppressWarnings(""String_Node_Str"") ITmfTrace[] traces=experiment.getTraces();
      int numTraces=experiment.getTraces().length;
      int numNodeTraces=experimentTreeNode.getNbChildren();
      if (numTraces == numNodeTraces) {
        boolean same=true;
        for (int i=0; i < numTraces; i++) {
          String traceName=traces[i].getName();
          if (!experimentTreeNode.containsChild(traceName)) {
            same=false;
            break;
          }
        }
        if (same) {
          fTreeViewer.setInput(experimentTreeNode);
          resetUpdateSynchronization();
          return;
        }
        experimentTreeNode.reset();
      }
    }
 else {
      TmfStatisticsTreeRootFactory.addStatsTreeRoot(getTreeID(experimentName),getStatisticData());
    }
    resetUpdateSynchronization();
    TmfStatisticsTreeNode treeModelRoot=TmfStatisticsTreeRootFactory.getStatTreeRoot(getTreeID(experiment.getName()));
    if (treeModelRoot.hasChildren()) {
      treeModelRoot.reset();
    }
    fTreeViewer.setInput(treeModelRoot);
    requestData(experiment,experiment.getTimeRange());
  }
}",0.9894916216983812
92778,"/** 
 * <h4>Function to merge many string with more efficacy.</h4>
 * @param strings Strings to merge.
 * @return A new string containing all the strings.
 */
protected synchronized static String mergeString(String... strings){
  fBuilder.setLength(0);
  for (  String s : strings)   fBuilder.append(s);
  return fBuilder.toString();
}","/** 
 * <h4>Function to merge many string with more efficacy.</h4>
 * @param strings Strings to merge.
 * @return A new string containing all the strings.
 */
public synchronized static String mergeString(String... strings){
  fBuilder.setLength(0);
  for (  String s : strings)   fBuilder.append(s);
  return fBuilder.toString();
}",0.9805097451274364
92779,"/** 
 * <h4>Get the map of existing elements of path classified by parent.</h4>
 * @return The map.
 */
protected Map<String,Set<String>> getKeys(){
  return fKeys;
}","/** 
 * <h4>Get the map of existing elements of path classified by parent.</h4>
 * @return The map.
 */
public Map<String,Set<String>> getKeys(){
  return fKeys;
}",0.9665653495440728
92780,"/** 
 * <h4>Get the event types paths.</h4>
 * @param event Event to get the path for.
 * @param extraInfo Extra information to pass along with the event
 * @return Array of FixedArray representing the paths.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private TmfFixedArray<String>[] getTypePaths(TmfEvent event,ITmfExtraEventInfo extraInfo){
  String trace=extraInfo.getTraceName();
  String type=event.getType().toString();
  TmfFixedArray[] paths={new TmfFixedArray<String>(trace,HEADER_EVENT_TYPES,type)};
  return paths;
}","/** 
 * <h4>Get the event types paths.</h4>
 * @param event Event to get the path for.
 * @param extraInfo Extra information to pass along with the event
 * @return Array of FixedArray representing the paths.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected TmfFixedArray<String>[] getTypePaths(TmfEvent event,ITmfExtraEventInfo extraInfo){
  String trace=extraInfo.getTraceName();
  String type=event.getType().toString();
  TmfFixedArray[] paths={new TmfFixedArray<String>(trace,HEADER_EVENT_TYPES,type)};
  return paths;
}",0.989010989010989
92781,"/** 
 * <h4>Get the standard paths for an event.</h4>
 * @param event Event to get the path for.
 * @param extraInfo Extra information to pass along with the event
 * @return Array of FixedArray representing the paths.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private TmfFixedArray<String>[] getNormalPaths(TmfEvent event,ITmfExtraEventInfo extraInfo){
  String trace=extraInfo.getTraceName();
  TmfFixedArray[] paths={new TmfFixedArray<String>(trace)};
  return paths;
}","/** 
 * <h4>Get the standard paths for an event.</h4>
 * @param event Event to get the path for.
 * @param extraInfo Extra information to pass along with the event
 * @return Array of FixedArray representing the paths.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected TmfFixedArray<String>[] getNormalPaths(TmfEvent event,ITmfExtraEventInfo extraInfo){
  String trace=extraInfo.getTraceName();
  TmfFixedArray[] paths={new TmfFixedArray<String>(trace)};
  return paths;
}",0.9878048780487804
92782,"@SuppressWarnings(""String_Node_Str"") @Override public ITmfContext armRequest(final ITmfDataRequest<LttngSyntheticEvent> request){
  if (!(request instanceof ITmfEventRequest<?>)) {
    request.cancel();
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  if (fExperiment == null) {
    TraceDebug.debug(""String_Node_Str"");
    request.cancel();
    return null;
  }
  reset(fExperiment);
  if (fEventProviderRequests.size() < 1) {
    request.cancel();
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  fmainRequest=request;
  ITmfEventRequest<LttngSyntheticEvent> eventRequest=(ITmfEventRequest<LttngSyntheticEvent>)fmainRequest;
  TmfTimeRange reqWindow=eventRequest.getRange();
  TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
  TmfExperiment<LttngEvent> experiment=(TmfExperiment<LttngEvent>)fExperiment.getValue();
  experiment.startSynch(new TmfStartSynchSignal(0));
  TmfTimeRange adjustedRange=reqWindow;
  long adjustedIndex=eventRequest.getIndex();
  int nbRequested=eventRequest.getNbRequested();
  IStateTraceManager traceManager;
  Iterator<IStateTraceManager> iter=fEventProviderRequests.iterator();
  while (iter.hasNext()) {
    traceManager=iter.next();
    TmfCheckpoint checkPoint=null;
    if (eventRequest.getIndex() > 0) {
      checkPoint=traceManager.restoreCheckPointByIndex(eventRequest.getIndex());
    }
 else {
      checkPoint=traceManager.restoreCheckPointByTimestamp(reqWindow.getStartTime());
    }
    TmfTimeRange traceRange=traceManager.getTrace().getTimeRange();
    if ((checkPoint == null) || checkPoint.getTimestamp().getValue() < traceRange.getStartTime().getValue() || checkPoint.getTimestamp().getValue() > traceRange.getEndTime().getValue() || checkPoint.getTimestamp().getValue() >= reqWindow.getEndTime().getValue()) {
    }
 else {
      if (adjustedRange.getStartTime().getValue() > checkPoint.getTimestamp().getValue() || adjustedIndex > (Long)checkPoint.getLocation().getLocation()) {
        adjustedRange=new TmfTimeRange(checkPoint.getTimestamp(),reqWindow.getEndTime());
        adjustedIndex=(Long)checkPoint.getLocation().getLocation();
        if (nbRequested < TmfDataRequest.ALL_DATA) {
          nbRequested+=(eventRequest.getIndex() - adjustedIndex);
        }
      }
    }
    traceToTraceStateModel.put(traceManager.getTrace(),traceManager.getStateModel());
  }
  dispatchTime=reqWindow.getStartTime().getValue();
  dispatchIndex=eventRequest.getIndex();
  eventIndex=adjustedIndex;
  fSubRequest=new LttngBaseEventRequest(adjustedRange,reqWindow.getStartTime(),adjustedIndex,nbRequested,BLOCK_SIZE,eventRequest.getExecType()){
    private LttngSyntheticEvent syntheticEvent=null;
    @Override public void handleData(    LttngEvent event){
      super.handleData(event);
      if (event != null) {
synchronized (LttngSyntheticEventProvider.this) {
          if ((fmainRequest == null) || (fmainRequest.isCompleted())) {
            TraceDebug.debug(""String_Node_Str"" + event);
            return;
          }
          handleIncomingData(event);
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
    }
    @Override public void handleCompleted(){
      handleProviderDone(!isCancelled() && !isFailed());
      super.handleCompleted();
    }
    /** 
 * Trigger the Analysis and sequential control of the events.
 * @param e
 */
    private void handleIncomingData(    LttngEvent e){
      long eventTime=e.getTimestamp().getValue();
      TmfTrace<LttngEvent> inTrace=e.getParentTrace();
      LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
      updateSynEvent(e);
      if (eventTime >= dispatchTime && eventIndex >= dispatchIndex) {
        syntheticEvent.setSequenceInd(SequenceInd.BEFORE);
        fmainRequest.handleData(syntheticEvent);
        syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
        fstateUpdateProcessor.process(syntheticEvent,traceModel);
        syntheticEvent.setSequenceInd(SequenceInd.AFTER);
        fmainRequest.handleData(syntheticEvent);
      }
 else {
        syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
        fstateUpdateProcessor.process(syntheticEvent,traceModel);
      }
      eventIndex++;
    }
    /** 
 * Create a synthetic event from the received new reference, if the reference is the same there is no need for a new instance if this is the first event for this request, call start handler
 * @param e
 * @return
 */
    private LttngSyntheticEvent updateSynEvent(    LttngEvent e){
      if ((syntheticEvent == null) || (syntheticEvent.getBaseEvent() != e)) {
        syntheticEvent=new LttngSyntheticEvent(e);
      }
      TmfTrace<LttngEvent> inTrace=e.getParentTrace();
      LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
      syntheticEvent.setTraceModel(traceModel);
      if (!startIndSent) {
        TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
        handleProviderStarted(traceModel);
        startIndSent=true;
      }
      return syntheticEvent;
    }
  }
;
  TmfExperiment<LttngEvent> provider=(TmfExperiment<LttngEvent>)fExperiment.getValue();
  provider.sendRequest(fSubRequest);
synchronized (this) {
    TmfExperiment.getCurrentExperiment().notifyPendingRequest(false);
    fIsExperimentNotified=false;
  }
  experiment.endSynch(new TmfEndSynchSignal(0));
  return new TmfContext();
}","@SuppressWarnings(""String_Node_Str"") @Override public ITmfContext armRequest(final ITmfDataRequest<LttngSyntheticEvent> request){
  if (!(request instanceof ITmfEventRequest<?>)) {
    request.cancel();
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  if (fExperiment == null) {
    TraceDebug.debug(""String_Node_Str"");
    request.cancel();
    return null;
  }
  reset(fExperiment);
  if (fEventProviderRequests.size() < 1) {
    request.cancel();
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  fmainRequest=request;
  ITmfEventRequest<LttngSyntheticEvent> eventRequest=(ITmfEventRequest<LttngSyntheticEvent>)fmainRequest;
  TmfTimeRange reqWindow=eventRequest.getRange();
  TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
  TmfExperiment<LttngEvent> experiment=(TmfExperiment<LttngEvent>)fExperiment.getValue();
  experiment.startSynch(new TmfStartSynchSignal(0));
  TmfTimeRange adjustedRange=reqWindow;
  long adjustedIndex=eventRequest.getIndex();
  int nbRequested=eventRequest.getNbRequested();
  IStateTraceManager traceManager;
  Iterator<IStateTraceManager> iter=fEventProviderRequests.iterator();
  while (iter.hasNext()) {
    traceManager=iter.next();
    TmfCheckpoint checkPoint=null;
    if (eventRequest.getIndex() > 0) {
      checkPoint=traceManager.restoreCheckPointByIndex(eventRequest.getIndex());
    }
 else {
      checkPoint=traceManager.restoreCheckPointByTimestamp(reqWindow.getStartTime());
    }
    TmfTimeRange traceRange=traceManager.getTrace().getTimeRange();
    if ((checkPoint == null) || checkPoint.getTimestamp().getValue() < traceRange.getStartTime().getValue() || checkPoint.getTimestamp().getValue() > traceRange.getEndTime().getValue() || checkPoint.getTimestamp().getValue() >= reqWindow.getEndTime().getValue()) {
    }
 else {
      if (adjustedRange.getStartTime().getValue() > checkPoint.getTimestamp().getValue() || adjustedIndex > (Long)checkPoint.getLocation().getLocation()) {
        adjustedRange=new TmfTimeRange(checkPoint.getTimestamp(),reqWindow.getEndTime());
        adjustedIndex=(Long)checkPoint.getLocation().getLocation();
        if (nbRequested < TmfDataRequest.ALL_DATA) {
          nbRequested+=(eventRequest.getIndex() - adjustedIndex);
        }
      }
    }
    traceToTraceStateModel.put(traceManager.getTrace(),traceManager.getStateModel());
  }
  dispatchTime=reqWindow.getStartTime().getValue();
  dispatchIndex=eventRequest.getIndex();
  eventIndex=adjustedIndex;
  fSubRequest=new LttngBaseEventRequest(adjustedRange,reqWindow.getStartTime(),adjustedIndex,nbRequested,BLOCK_SIZE,eventRequest.getExecType()){
    private LttngSyntheticEvent syntheticEvent=null;
    @Override public void handleData(    LttngEvent event){
      super.handleData(event);
      if (event != null) {
synchronized (LttngSyntheticEventProvider.this) {
          if ((fmainRequest == null) || (fmainRequest.isCompleted())) {
            TraceDebug.debug(""String_Node_Str"" + event);
            return;
          }
          handleIncomingData(event);
        }
      }
 else {
        TraceDebug.debug(""String_Node_Str"");
      }
    }
    @Override public void handleCompleted(){
      handleProviderDone(!isCancelled() && !isFailed());
      super.handleCompleted();
    }
    /** 
 * Trigger the Analysis and sequential control of the events.
 * @param e
 */
    private void handleIncomingData(    LttngEvent e){
      long eventTime=e.getTimestamp().getValue();
      ITmfTrace inTrace=e.getParentTrace();
      LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
      updateSynEvent(e);
      if (eventTime >= dispatchTime && eventIndex >= dispatchIndex) {
        syntheticEvent.setSequenceInd(SequenceInd.BEFORE);
        fmainRequest.handleData(syntheticEvent);
        syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
        fstateUpdateProcessor.process(syntheticEvent,traceModel);
        syntheticEvent.setSequenceInd(SequenceInd.AFTER);
        fmainRequest.handleData(syntheticEvent);
      }
 else {
        syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
        fstateUpdateProcessor.process(syntheticEvent,traceModel);
      }
      eventIndex++;
    }
    /** 
 * Create a synthetic event from the received new reference, if the reference is the same there is no need for a new instance if this is the first event for this request, call start handler
 * @param e
 * @return
 */
    private LttngSyntheticEvent updateSynEvent(    LttngEvent e){
      if ((syntheticEvent == null) || (syntheticEvent.getBaseEvent() != e)) {
        syntheticEvent=new LttngSyntheticEvent(e);
      }
      ITmfTrace inTrace=e.getParentTrace();
      LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
      syntheticEvent.setTraceModel(traceModel);
      if (!startIndSent) {
        TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
        handleProviderStarted(traceModel);
        startIndSent=true;
      }
      return syntheticEvent;
    }
  }
;
  TmfExperiment<LttngEvent> provider=(TmfExperiment<LttngEvent>)fExperiment.getValue();
  provider.sendRequest(fSubRequest);
synchronized (this) {
    TmfExperiment.getCurrentExperiment().notifyPendingRequest(false);
    fIsExperimentNotified=false;
  }
  experiment.endSynch(new TmfEndSynchSignal(0));
  return new TmfContext();
}",0.880992352173102
92783,"/** 
 * Trigger the Analysis and sequential control of the events.
 * @param e
 */
private void handleIncomingData(LttngEvent e){
  long eventTime=e.getTimestamp().getValue();
  TmfTrace<LttngEvent> inTrace=e.getParentTrace();
  LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
  updateSynEvent(e);
  if (eventTime >= dispatchTime && eventIndex >= dispatchIndex) {
    syntheticEvent.setSequenceInd(SequenceInd.BEFORE);
    fmainRequest.handleData(syntheticEvent);
    syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
    fstateUpdateProcessor.process(syntheticEvent,traceModel);
    syntheticEvent.setSequenceInd(SequenceInd.AFTER);
    fmainRequest.handleData(syntheticEvent);
  }
 else {
    syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
    fstateUpdateProcessor.process(syntheticEvent,traceModel);
  }
  eventIndex++;
}","/** 
 * Trigger the Analysis and sequential control of the events.
 * @param e
 */
private void handleIncomingData(LttngEvent e){
  long eventTime=e.getTimestamp().getValue();
  ITmfTrace inTrace=e.getParentTrace();
  LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
  updateSynEvent(e);
  if (eventTime >= dispatchTime && eventIndex >= dispatchIndex) {
    syntheticEvent.setSequenceInd(SequenceInd.BEFORE);
    fmainRequest.handleData(syntheticEvent);
    syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
    fstateUpdateProcessor.process(syntheticEvent,traceModel);
    syntheticEvent.setSequenceInd(SequenceInd.AFTER);
    fmainRequest.handleData(syntheticEvent);
  }
 else {
    syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
    fstateUpdateProcessor.process(syntheticEvent,traceModel);
  }
  eventIndex++;
}",0.992266508030934
92784,"/** 
 * Create a synthetic event from the received new reference, if the reference is the same there is no need for a new instance if this is the first event for this request, call start handler
 * @param e
 * @return
 */
private LttngSyntheticEvent updateSynEvent(LttngEvent e){
  if ((syntheticEvent == null) || (syntheticEvent.getBaseEvent() != e)) {
    syntheticEvent=new LttngSyntheticEvent(e);
  }
  TmfTrace<LttngEvent> inTrace=e.getParentTrace();
  LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
  syntheticEvent.setTraceModel(traceModel);
  if (!startIndSent) {
    TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
    handleProviderStarted(traceModel);
    startIndSent=true;
  }
  return syntheticEvent;
}","/** 
 * Create a synthetic event from the received new reference, if the reference is the same there is no need for a new instance if this is the first event for this request, call start handler
 * @param e
 * @return
 */
private LttngSyntheticEvent updateSynEvent(LttngEvent e){
  if ((syntheticEvent == null) || (syntheticEvent.getBaseEvent() != e)) {
    syntheticEvent=new LttngSyntheticEvent(e);
  }
  ITmfTrace inTrace=e.getParentTrace();
  LttngTraceState traceModel=traceToTraceStateModel.get(inTrace);
  syntheticEvent.setTraceModel(traceModel);
  if (!startIndSent) {
    TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
    handleProviderStarted(traceModel);
    startIndSent=true;
  }
  return syntheticEvent;
}",0.9913506320691948
92785,"@Override public LttngEvent clone(){
  LttngEvent clone=(LttngEvent)super.clone();
  clone.getContent().setEvent(clone);
  clone.parentTrace=parentTrace;
  clone.jniEventReference=jniEventReference;
  return clone;
}","@Override public LttngEvent clone(){
  LttngEvent clone=(LttngEvent)super.clone();
  clone.getContent().setEvent(clone);
  clone.jniEventReference=jniEventReference;
  return clone;
}",0.9172932330827068
92786,"/** 
 * Copy constructor.<p>
 * @param oldEvent		Event we want to copy from.
 */
public LttngEvent(LttngEvent oldEvent){
  this(oldEvent.getParentTrace(),(LttngTimestamp)oldEvent.getTimestamp(),(TmfEventSource)oldEvent.getSource(),(LttngEventType)oldEvent.getType(),(LttngEventContent)oldEvent.getContent(),(LttngEventReference)oldEvent.getReference(),oldEvent.jniEventReference);
}","/** 
 * Copy constructor.<p>
 * @param oldEvent		Event we want to copy from.
 */
@SuppressWarnings(""String_Node_Str"") public LttngEvent(LttngEvent oldEvent){
  this((TmfTrace<LttngEvent>)oldEvent.getParentTrace(),(LttngTimestamp)oldEvent.getTimestamp(),(TmfEventSource)oldEvent.getSource(),(LttngEventType)oldEvent.getType(),(LttngEventContent)oldEvent.getContent(),(LttngEventReference)oldEvent.getReference(),oldEvent.jniEventReference);
}",0.928311057108141
92787,"/** 
 * Set a new parent trace for this event
 * @param parentTrace	The new parent
 */
public void setParentTrace(TmfTrace<LttngEvent> parentTrace){
  this.parentTrace=parentTrace;
}","/** 
 * Set a new parent trace for this event
 * @param parentTrace	The new parent
 */
public void setParentTrace(TmfTrace<LttngEvent> parentTrace){
  fParentTrace=parentTrace;
}",0.9777777777777776
92788,"/** 
 * /* (non-Javadoc)
 * @see org.eclipse.linuxtools.lttng.event.LttngEvent#getParentTrace()
 */
@Override public TmfTrace<LttngEvent> getParentTrace(){
  if (baseEvent != null) {
    return baseEvent.getParentTrace();
  }
 else {
    return super.getParentTrace();
  }
}","/** 
 * /* (non-Javadoc)
 * @see org.eclipse.linuxtools.lttng.event.LttngEvent#getParentTrace()
 */
@SuppressWarnings(""String_Node_Str"") @Override public TmfTrace<LttngEvent> getParentTrace(){
  if (baseEvent != null) {
    return (TmfTrace<LttngEvent>)baseEvent.getParentTrace();
  }
 else {
    return (TmfTrace<LttngEvent>)super.getParentTrace();
  }
}",0.8712241653418124
92789,"public TextLttngEvent(TextLttngEvent oldEvent){
  this(oldEvent.getParentTrace(),(LttngTimestamp)oldEvent.getTimestamp(),(LttngEventSource)oldEvent.getSource(),(LttngEventType)oldEvent.getType(),(LttngEventContent)oldEvent.getContent(),(LttngEventReference)oldEvent.getReference());
}","@SuppressWarnings(""String_Node_Str"") public TextLttngEvent(TextLttngEvent oldEvent){
  this((TmfTrace<LttngEvent>)oldEvent.getParentTrace(),(LttngTimestamp)oldEvent.getTimestamp(),(LttngEventSource)oldEvent.getSource(),(LttngEventType)oldEvent.getType(),(LttngEventContent)oldEvent.getContent(),(LttngEventReference)oldEvent.getReference());
}",0.9059011164274322
92790,"@Override public TmfEvent clone(){
  TmfEvent clone=null;
  try {
    clone=(TmfEvent)super.clone();
    clone.fOriginalTimestamp=fOriginalTimestamp.clone();
    clone.fEffectiveTimestamp=fEffectiveTimestamp.clone();
    clone.fSource=fSource.clone();
    clone.fType=fType.clone();
    clone.fReference=fReference.clone();
    clone.fContent=fContent.clone();
  }
 catch (  CloneNotSupportedException e) {
    e.printStackTrace();
  }
  return clone;
}","@Override public TmfEvent clone(){
  TmfEvent clone=null;
  try {
    clone=(TmfEvent)super.clone();
    clone.fParentTrace=fParentTrace;
    clone.fEventRank=fEventRank;
    clone.fOriginalTimestamp=fOriginalTimestamp.clone();
    clone.fEffectiveTimestamp=fEffectiveTimestamp.clone();
    clone.fSource=fSource.clone();
    clone.fType=fType.clone();
    clone.fReference=fReference.clone();
    clone.fContent=fContent.clone();
  }
 catch (  CloneNotSupportedException e) {
    e.printStackTrace();
  }
  return clone;
}",0.9282786885245902
92791,"void drawItemData(Item item,Rectangle rect,long time0,long time1,long endTime,long selectedTime,GC gc){
  if (rect.isEmpty())   return;
  if (time1 <= time0) {
    gc.setBackground(_colors.getBkColor(false,false,false));
    gc.fillRectangle(rect);
    return;
  }
  Utils.init(_rect1,rect);
  boolean selected=item._selected;
  double pixelsPerNanoSec=(rect.width <= RIGHT_MARGIN) ? 0 : (double)(rect.width - RIGHT_MARGIN) / (time1 - time0);
  boolean group=item instanceof GroupItem;
  if (group) {
  }
 else   if (item instanceof TraceItem) {
    ITmfTimeAnalysisEntry trace=((TraceItem)item)._trace;
    int x0=rect.x;
    Iterator<ITimeEvent> iterator=trace.getTraceEventsIterator();
    ITimeEvent lastEvent=null;
    if (iterator.hasNext()) {
      ITimeEvent currEvent=iterator.next();
      ITimeEvent nextEvent=null;
      long currEventTime=currEvent.getTime();
      long nextEventTime=currEventTime;
      x0=rect.x + (int)((currEventTime - time0) * pixelsPerNanoSec);
      int xEnd=rect.x + (int)((time1 - time0) * pixelsPerNanoSec);
      int x1=-1;
      int idx=1;
      _rect1.y+=3;
      _rect1.height-=6;
      fillSpace(rect,gc,selected);
      while (x0 <= xEnd && null != currEvent) {
        boolean stopped=false;
        if (iterator.hasNext()) {
          nextEvent=iterator.next();
          nextEventTime=nextEvent.getTime();
          idx++;
        }
 else         if (stopped) {
          nextEvent=null;
          nextEventTime=time1;
        }
 else {
          nextEvent=null;
          nextEventTime=endTime;
        }
        x1=rect.x + (int)((nextEventTime - time0) * pixelsPerNanoSec);
        if (x1 >= rect.x) {
          _rect1.x=x0 >= rect.x ? x0 : rect.x;
          _rect1.width=(x1 <= xEnd ? x1 : xEnd) - _rect1.x;
          boolean timeSelected=currEventTime <= selectedTime && selectedTime < nextEventTime;
          utilImpl.drawState(_colors,currEvent,_rect1,gc,selected,false,timeSelected);
        }
        lastEvent=currEvent;
        currEvent=nextEvent;
        currEventTime=nextEventTime;
        x0=x1;
      }
    }
    int xEnd=rect.x + rect.width;
    if (x0 < xEnd) {
      _rect1.x=x0 >= rect.x ? x0 : rect.x;
      _rect1.width=xEnd - _rect1.x;
      gc.setBackground(_colors.getBkColor(selected,_isInFocus,false));
      gc.fillRectangle(_rect1);
      gc.setForeground(_colors.getColor(utilImpl.getEventColorVal(lastEvent)));
      int midy=_rect1.y + _rect1.height / 2;
      int lw=gc.getLineWidth();
      gc.setLineWidth(2);
      gc.drawLine(_rect1.x,midy,_rect1.x + _rect1.width,midy);
      gc.setLineWidth(lw);
    }
  }
  int x=rect.x + (int)((selectedTime - time0) * pixelsPerNanoSec);
  if (x >= rect.x && x < rect.x + rect.width) {
    gc.setForeground(_colors.getColor(TraceColorScheme.SELECTED_TIME));
    if (group)     gc.drawLine(x,rect.y + rect.height - 1,x,rect.y + rect.height);
 else     gc.drawLine(x,rect.y,x,rect.y + rect.height);
  }
}","void drawItemData(Item item,Rectangle rect,long time0,long time1,long endTime,long selectedTime,GC gc){
  if (rect.isEmpty())   return;
  if (time1 <= time0) {
    gc.setBackground(_colors.getBkColor(false,false,false));
    gc.fillRectangle(rect);
    return;
  }
  Utils.init(_rect1,rect);
  boolean selected=item._selected;
  double pixelsPerNanoSec=(rect.width <= RIGHT_MARGIN) ? 0 : (double)(rect.width - RIGHT_MARGIN) / (time1 - time0);
  boolean group=item instanceof GroupItem;
  if (group) {
  }
 else   if (item instanceof TraceItem) {
    ITmfTimeAnalysisEntry trace=((TraceItem)item)._trace;
    int x0=rect.x;
    Iterator<ITimeEvent> iterator=trace.getTraceEventsIterator();
    ITimeEvent lastEvent=null;
    if (iterator.hasNext()) {
      ITimeEvent currEvent=iterator.next();
      ITimeEvent nextEvent=null;
      long currEventTime=currEvent.getTime();
      long nextEventTime=currEventTime;
      x0=rect.x + (int)((currEventTime - time0) * pixelsPerNanoSec);
      int xEnd=rect.x + (int)((time1 - time0) * pixelsPerNanoSec);
      int x1=-1;
      _rect1.y+=3;
      _rect1.height-=6;
      fillSpace(rect,gc,selected);
      while (x0 <= xEnd && null != currEvent) {
        boolean stopped=false;
        if (iterator.hasNext()) {
          nextEvent=iterator.next();
          nextEventTime=nextEvent.getTime();
        }
 else         if (stopped) {
          nextEvent=null;
          nextEventTime=time1;
        }
 else {
          nextEvent=null;
          nextEventTime=endTime;
        }
        x1=rect.x + (int)((nextEventTime - time0) * pixelsPerNanoSec);
        if (x1 >= rect.x) {
          _rect1.x=x0 >= rect.x ? x0 : rect.x;
          _rect1.width=(x1 <= xEnd ? x1 : xEnd) - _rect1.x;
          boolean timeSelected=currEventTime <= selectedTime && selectedTime < nextEventTime;
          utilImpl.drawState(_colors,currEvent,_rect1,gc,selected,false,timeSelected);
        }
        lastEvent=currEvent;
        currEvent=nextEvent;
        currEventTime=nextEventTime;
        x0=x1;
      }
    }
    int xEnd=rect.x + rect.width;
    if (x0 < xEnd) {
      _rect1.x=x0 >= rect.x ? x0 : rect.x;
      _rect1.width=xEnd - _rect1.x;
      gc.setBackground(_colors.getBkColor(selected,_isInFocus,false));
      gc.fillRectangle(_rect1);
      gc.setForeground(_colors.getColor(utilImpl.getEventColorVal(lastEvent)));
      int midy=_rect1.y + _rect1.height / 2;
      int lw=gc.getLineWidth();
      gc.setLineWidth(2);
      gc.drawLine(_rect1.x,midy,_rect1.x + _rect1.width,midy);
      gc.setLineWidth(lw);
    }
  }
  int x=rect.x + (int)((selectedTime - time0) * pixelsPerNanoSec);
  if (x >= rect.x && x < rect.x + rect.width) {
    gc.setForeground(_colors.getColor(TraceColorScheme.SELECTED_TIME));
    if (group)     gc.drawLine(x,rect.y + rect.height - 1,x,rect.y + rect.height);
 else     gc.drawLine(x,rect.y,x,rect.y + rect.height);
  }
}",0.9941600824458948
92792,"/** 
 * Represent the series of events with specified durations
 * @param item
 * @param rect - The container rectangle to be colored to different states
 * @param time0 - Base time of all events - start of visible window
 * @param time1 - End time of visible events - end time of visible window
 * @param endTime - End time of all events - may not be visible in selected visible window
 * @param selectedTime
 * @param gc
 */
void drawItemDataDurations(Item item,Rectangle rect,long time0,long time1,long endTime,long selectedTime,GC gc){
  if (rect.isEmpty())   return;
  if (time1 <= time0) {
    gc.setBackground(_colors.getBkColor(false,false,false));
    gc.fillRectangle(rect);
    return;
  }
  Utils.init(_rect1,rect);
  boolean selected=item._selected;
  double pixelsPerNanoSec=(rect.width <= RIGHT_MARGIN) ? 0 : (double)(rect.width - RIGHT_MARGIN) / (time1 - time0);
  boolean group=item instanceof GroupItem;
  if (group) {
  }
 else   if (item instanceof TraceItem) {
    ITmfTimeAnalysisEntry trace=((TraceItem)item)._trace;
    double x0=rect.x;
    long maxDuration=(_timeProvider.getTimeSpace() == 0) ? Long.MAX_VALUE : 1 * (_timeProvider.getTime1() - _timeProvider.getTime0()) / _timeProvider.getTimeSpace();
    Iterator<ITimeEvent> iterator=trace.getTraceEventsIterator(_timeProvider.getTime0(),_timeProvider.getTime1(),maxDuration);
    _rect1.y+=3;
    _rect1.height-=6;
    int xEnd=rect.x + rect.width;
    fillSpace(rect,gc,selected);
    if (iterator.hasNext()) {
      ITimeEvent currEvent=iterator.next();
      ITimeEvent nextEvent=null;
      long currEventTime=currEvent.getTime();
      long currEventDuration=currEvent.getDuration();
      long nextEventTime=currEventTime;
      double step=(double)((currEventTime - time0) * pixelsPerNanoSec);
      x0=rect.x + step;
      double x1=-1;
      int idx=1;
      double xNext=0;
      while (null != currEvent) {
        boolean stopped=false;
        currEventDuration=currEvent.getDuration();
        if (iterator.hasNext()) {
          nextEvent=iterator.next();
          nextEventTime=nextEvent.getTime();
          idx++;
        }
 else         if (stopped) {
          nextEvent=null;
          nextEventTime=time1;
        }
 else {
          nextEvent=null;
          nextEventTime=endTime;
        }
        xNext=rect.x + (double)((nextEventTime - time0) * pixelsPerNanoSec);
        if (currEventDuration < 0) {
          x1=rect.x + (double)((nextEventTime - time0) * pixelsPerNanoSec);
        }
 else         if (currEventDuration == 0) {
          x1=x0;
        }
 else {
          x1=x0 + (double)((currEventDuration) * pixelsPerNanoSec);
        }
        if (currEventDuration != 0) {
          x1=x1 > xNext ? xNext : x1;
        }
        if (x1 >= rect.x && x0 <= xEnd) {
          if (currEventDuration != 0) {
            x0=(double)(x0 >= rect.x ? x0 : rect.x);
            _rect1.width=(int)Math.ceil(x1 <= xEnd ? x1 : xEnd) - (int)x0;
          }
 else {
            _rect1.width=1;
          }
          _rect1.width=Math.max(_minimumItemWidth,_rect1.width);
          _rect1.x=(int)x0;
          boolean timeSelected=currEventTime <= selectedTime && selectedTime < nextEventTime;
          utilImpl.drawState(_colors,currEvent,_rect1,gc,selected,false,timeSelected);
          _rect1.x+=_rect1.width;
          x0=_rect1.x;
        }
        currEvent=nextEvent;
        currEventTime=nextEventTime;
        x0=rect.x + (double)((nextEventTime - time0) * pixelsPerNanoSec);
      }
    }
  }
  int x=rect.x + (int)((double)(selectedTime - time0) * pixelsPerNanoSec);
  if (x >= rect.x && x < rect.x + rect.width) {
    gc.setForeground(_colors.getColor(TraceColorScheme.SELECTED_TIME));
    if (group)     gc.drawLine(x,rect.y + rect.height - 1,x,rect.y + rect.height);
 else     gc.drawLine(x,rect.y,x,rect.y + rect.height);
  }
}","/** 
 * Represent the series of events with specified durations
 * @param item
 * @param rect - The container rectangle to be colored to different states
 * @param time0 - Base time of all events - start of visible window
 * @param time1 - End time of visible events - end time of visible window
 * @param endTime - End time of all events - may not be visible in selected visible window
 * @param selectedTime
 * @param gc
 */
void drawItemDataDurations(Item item,Rectangle rect,long time0,long time1,long endTime,long selectedTime,GC gc){
  if (rect.isEmpty())   return;
  if (time1 <= time0) {
    gc.setBackground(_colors.getBkColor(false,false,false));
    gc.fillRectangle(rect);
    return;
  }
  Utils.init(_rect1,rect);
  boolean selected=item._selected;
  double pixelsPerNanoSec=(rect.width <= RIGHT_MARGIN) ? 0 : (double)(rect.width - RIGHT_MARGIN) / (time1 - time0);
  boolean group=item instanceof GroupItem;
  if (group) {
  }
 else   if (item instanceof TraceItem) {
    ITmfTimeAnalysisEntry trace=((TraceItem)item)._trace;
    double x0=rect.x;
    long maxDuration=(_timeProvider.getTimeSpace() == 0) ? Long.MAX_VALUE : 1 * (_timeProvider.getTime1() - _timeProvider.getTime0()) / _timeProvider.getTimeSpace();
    Iterator<ITimeEvent> iterator=trace.getTraceEventsIterator(_timeProvider.getTime0(),_timeProvider.getTime1(),maxDuration);
    _rect1.y+=3;
    _rect1.height-=6;
    int xEnd=rect.x + rect.width;
    fillSpace(rect,gc,selected);
    if (iterator.hasNext()) {
      ITimeEvent currEvent=iterator.next();
      ITimeEvent nextEvent=null;
      long currEventTime=currEvent.getTime();
      long currEventDuration=currEvent.getDuration();
      long nextEventTime=currEventTime;
      double step=(double)((currEventTime - time0) * pixelsPerNanoSec);
      x0=rect.x + step;
      double x1=-1;
      double xNext=0;
      while (null != currEvent) {
        boolean stopped=false;
        currEventDuration=currEvent.getDuration();
        if (iterator.hasNext()) {
          nextEvent=iterator.next();
          nextEventTime=nextEvent.getTime();
        }
 else         if (stopped) {
          nextEvent=null;
          nextEventTime=time1;
        }
 else {
          nextEvent=null;
          nextEventTime=endTime;
        }
        xNext=rect.x + (double)((nextEventTime - time0) * pixelsPerNanoSec);
        if (currEventDuration < 0) {
          x1=rect.x + (double)((nextEventTime - time0) * pixelsPerNanoSec);
        }
 else         if (currEventDuration == 0) {
          x1=x0;
        }
 else {
          x1=x0 + (double)((currEventDuration) * pixelsPerNanoSec);
        }
        if (currEventDuration != 0) {
          x1=x1 > xNext ? xNext : x1;
        }
        if (x1 >= rect.x && x0 <= xEnd) {
          if (currEventDuration != 0) {
            x0=(double)(x0 >= rect.x ? x0 : rect.x);
            _rect1.width=(int)((x1 <= xEnd ? x1 : xEnd) - x0);
          }
 else {
            _rect1.width=1;
          }
          _rect1.width=Math.max(_minimumItemWidth,_rect1.width);
          _rect1.x=(int)x0;
          boolean timeSelected=currEventTime <= selectedTime && selectedTime < nextEventTime;
          utilImpl.drawState(_colors,currEvent,_rect1,gc,selected,false,timeSelected);
          _rect1.x+=_rect1.width;
          x0=_rect1.x;
        }
        currEvent=nextEvent;
        currEventTime=nextEventTime;
        x0=rect.x + (double)((nextEventTime - time0) * pixelsPerNanoSec);
      }
    }
  }
  int x=rect.x + (int)((double)(selectedTime - time0) * pixelsPerNanoSec);
  if (x >= rect.x && x < rect.x + rect.width) {
    gc.setForeground(_colors.getColor(TraceColorScheme.SELECTED_TIME));
    if (group)     gc.drawLine(x,rect.y + rect.height - 1,x,rect.y + rect.height);
 else     gc.drawLine(x,rect.y,x,rect.y + rect.height);
  }
}",0.9934606330107244
92793,"/** 
 * Represent the event in series of bursts rather than sequence of states
 * @param item
 * @param rect - The container rectangle to be colored to different states
 * @param time0 - Base time of all events
 * @param time1 - End time of all events
 * @param endTime
 * @param selectedTime
 * @param gc
 */
void drawItemDataBurst(Item item,Rectangle rect,long time0,long time1,long endTime,long selectedTime,GC gc){
  if (rect.isEmpty())   return;
  if (time1 <= time0) {
    gc.setBackground(_colors.getBkColor(false,false,false));
    gc.fillRectangle(rect);
    return;
  }
  Utils.init(_rect1,rect);
  boolean selected=item._selected;
  double pixelsPerNanoSec=(rect.width <= RIGHT_MARGIN) ? 0 : (double)(rect.width - RIGHT_MARGIN) / (time1 - time0);
  boolean group=item instanceof GroupItem;
  if (group) {
  }
 else   if (item instanceof TraceItem) {
    ITmfTimeAnalysisEntry trace=((TraceItem)item)._trace;
    double x0=rect.x;
    Iterator<ITimeEvent> iterator=trace.getTraceEventsIterator();
    ITimeEvent lastEvent=null;
    if (iterator.hasNext()) {
      ITimeEvent currEvent=iterator.next();
      ITimeEvent nextEvent=null;
      long currEventTime=currEvent.getTime();
      long nextEventTime=currEventTime;
      double step=(double)((currEventTime - time0) * pixelsPerNanoSec);
      x0=rect.x + step;
      double xEnd=rect.x + (double)((time1 - time0) * pixelsPerNanoSec);
      double x1=-1;
      int idx=1;
      _rect1.y+=3;
      _rect1.height-=6;
      fillSpace(rect,gc,selected);
      while (x0 <= xEnd && null != currEvent) {
        boolean stopped=false;
        if (iterator.hasNext()) {
          nextEvent=iterator.next();
          nextEventTime=nextEvent.getTime();
          idx++;
        }
 else         if (stopped) {
          nextEvent=null;
          nextEventTime=time1;
        }
 else {
          nextEvent=null;
          nextEventTime=endTime;
        }
        x1=x0 + (int)2;
        if (x1 >= rect.x && x0 <= xEnd) {
          _rect1.x=(int)(x0 >= rect.x ? x0 : rect.x);
          _rect1.width=(int)((x1 <= xEnd ? x1 : xEnd) - _rect1.x);
          boolean timeSelected=currEventTime <= selectedTime && selectedTime < nextEventTime;
          utilImpl.drawState(_colors,currEvent,_rect1,gc,selected,false,timeSelected);
          _rect1.x+=_rect1.width;
          x0=x1;
        }
        fillSpace(rect,gc,selected);
        lastEvent=currEvent;
        currEvent=nextEvent;
        currEventTime=nextEventTime;
        x0=rect.x + (double)((nextEventTime - time0) * pixelsPerNanoSec);
      }
    }
    int xEnd=rect.x + rect.width;
    if (x0 < xEnd) {
      _rect1.x=(int)(x0 >= rect.x ? x0 : rect.x);
      _rect1.width=xEnd - _rect1.x;
      gc.setBackground(_colors.getBkColor(selected,_isInFocus,false));
      gc.fillRectangle(_rect1);
      gc.setForeground(_colors.getColor(utilImpl.getEventColorVal(lastEvent)));
      int midy=_rect1.y + _rect1.height / 2;
      int lw=gc.getLineWidth();
      gc.setLineWidth(2);
      gc.drawLine(_rect1.x,midy,_rect1.x + _rect1.width,midy);
      gc.setLineWidth(lw);
    }
  }
  int x=rect.x + (int)((selectedTime - time0) * pixelsPerNanoSec);
  if (x >= rect.x && x < rect.x + rect.width) {
    gc.setForeground(_colors.getColor(TraceColorScheme.SELECTED_TIME));
    if (group)     gc.drawLine(x,rect.y + rect.height - 1,x,rect.y + rect.height);
 else     gc.drawLine(x,rect.y,x,rect.y + rect.height);
  }
}","/** 
 * Represent the event in series of bursts rather than sequence of states
 * @param item
 * @param rect - The container rectangle to be colored to different states
 * @param time0 - Base time of all events
 * @param time1 - End time of all events
 * @param endTime
 * @param selectedTime
 * @param gc
 */
void drawItemDataBurst(Item item,Rectangle rect,long time0,long time1,long endTime,long selectedTime,GC gc){
  if (rect.isEmpty())   return;
  if (time1 <= time0) {
    gc.setBackground(_colors.getBkColor(false,false,false));
    gc.fillRectangle(rect);
    return;
  }
  Utils.init(_rect1,rect);
  boolean selected=item._selected;
  double pixelsPerNanoSec=(rect.width <= RIGHT_MARGIN) ? 0 : (double)(rect.width - RIGHT_MARGIN) / (time1 - time0);
  boolean group=item instanceof GroupItem;
  if (group) {
  }
 else   if (item instanceof TraceItem) {
    ITmfTimeAnalysisEntry trace=((TraceItem)item)._trace;
    double x0=rect.x;
    Iterator<ITimeEvent> iterator=trace.getTraceEventsIterator();
    ITimeEvent lastEvent=null;
    if (iterator.hasNext()) {
      ITimeEvent currEvent=iterator.next();
      ITimeEvent nextEvent=null;
      long currEventTime=currEvent.getTime();
      long nextEventTime=currEventTime;
      double step=(double)((currEventTime - time0) * pixelsPerNanoSec);
      x0=rect.x + step;
      double xEnd=rect.x + (double)((time1 - time0) * pixelsPerNanoSec);
      double x1=-1;
      _rect1.y+=3;
      _rect1.height-=6;
      fillSpace(rect,gc,selected);
      while (x0 <= xEnd && null != currEvent) {
        boolean stopped=false;
        if (iterator.hasNext()) {
          nextEvent=iterator.next();
          nextEventTime=nextEvent.getTime();
        }
 else         if (stopped) {
          nextEvent=null;
          nextEventTime=time1;
        }
 else {
          nextEvent=null;
          nextEventTime=endTime;
        }
        x1=x0 + (int)2;
        if (x1 >= rect.x && x0 <= xEnd) {
          _rect1.x=(int)(x0 >= rect.x ? x0 : rect.x);
          _rect1.width=(int)((x1 <= xEnd ? x1 : xEnd) - _rect1.x);
          boolean timeSelected=currEventTime <= selectedTime && selectedTime < nextEventTime;
          utilImpl.drawState(_colors,currEvent,_rect1,gc,selected,false,timeSelected);
          _rect1.x+=_rect1.width;
          x0=x1;
        }
        fillSpace(rect,gc,selected);
        lastEvent=currEvent;
        currEvent=nextEvent;
        currEventTime=nextEventTime;
        x0=rect.x + (double)((nextEventTime - time0) * pixelsPerNanoSec);
      }
    }
    int xEnd=rect.x + rect.width;
    if (x0 < xEnd) {
      _rect1.x=(int)(x0 >= rect.x ? x0 : rect.x);
      _rect1.width=xEnd - _rect1.x;
      gc.setBackground(_colors.getBkColor(selected,_isInFocus,false));
      gc.fillRectangle(_rect1);
      gc.setForeground(_colors.getColor(utilImpl.getEventColorVal(lastEvent)));
      int midy=_rect1.y + _rect1.height / 2;
      int lw=gc.getLineWidth();
      gc.setLineWidth(2);
      gc.drawLine(_rect1.x,midy,_rect1.x + _rect1.width,midy);
      gc.setLineWidth(lw);
    }
  }
  int x=rect.x + (int)((selectedTime - time0) * pixelsPerNanoSec);
  if (x >= rect.x && x < rect.x + rect.width) {
    gc.setForeground(_colors.getColor(TraceColorScheme.SELECTED_TIME));
    if (group)     gc.drawLine(x,rect.y + rect.height - 1,x,rect.y + rect.height);
 else     gc.drawLine(x,rect.y,x,rect.y + rect.height);
  }
}",0.995
92794,"/** 
 * Test method for  {@link org.eclipse.linuxtools.tmf.HistogramDataModel.views.histogram.TmfHistogramDataModel#scaleTo(int,int)}.
 */
@Test public void testScaleTo_1(){
  final int nbBuckets=10;
  final int maxHeight=10;
  final int nbEvents=nbBuckets / 2;
  final int[] expectedResult=new int[]{1,1,1,1,1,0,0,0,0,0};
  HistogramDataModel model=new HistogramDataModel(nbBuckets);
  for (int i=0; i < nbEvents; i++) {
    model.countEvent(i);
  }
  HistogramScaledData result=model.scaleTo(nbBuckets,maxHeight);
  for (int i=0; i < result.fData.length; i++) {
    assertTrue(result.fData[i] == expectedResult[i]);
  }
  assertTrue(model.getNbEvents() == nbEvents);
  assertTrue(model.getNbBuckets() == nbBuckets);
  assertTrue(model.getBucketDuration() == 1);
  assertTrue(model.getStartTime() == 0);
  assertTrue(model.getEndTime() == nbEvents - 1);
  assertTrue(model.getTimeLimit() == nbBuckets);
}","@Test public void testScaleTo_1(){
  final int nbBuckets=10;
  final int maxHeight=10;
  final int nbEvents=nbBuckets / 2;
  final int[] expectedResult=new int[]{1,1,1,1,1,0,0,0,0,0};
  HistogramDataModel model=new HistogramDataModel(nbBuckets);
  for (int i=0; i < nbEvents; i++) {
    model.countEvent(i);
  }
  HistogramScaledData result=model.scaleTo(nbBuckets,maxHeight);
  for (int i=0; i < result.fData.length; i++) {
    assertTrue(result.fData[i] == expectedResult[i]);
  }
  assertTrue(model.getNbEvents() == nbEvents);
  assertTrue(model.getNbBuckets() == nbBuckets);
  assertTrue(model.getBucketDuration() == 1);
  assertTrue(model.getStartTime() == 0);
  assertTrue(model.getEndTime() == nbEvents - 1);
  assertTrue(model.getTimeLimit() == nbBuckets);
}",0.9168162776780372
92795,"@Override public void run(){
  if (!fCanvas.isDisposed()) {
    int canvasWidth=fCanvas.getBounds().width;
    int canvasHeight=fCanvas.getBounds().height;
    fDataModel.setCurrentEvent(fCurrentEventTime);
    fScaledData=fDataModel.scaleTo(canvasWidth,canvasHeight);
    fCanvas.redraw();
    fTimeRangeStartText.setText(HistogramUtils.nanosecondsToString(fDataModel.getStartTime()));
    fTimeRangeEndText.setText(HistogramUtils.nanosecondsToString(fDataModel.getEndTime()));
    fMaxNbEventsText.setText(Long.toString(fScaledData.fMaxValue));
    fMaxNbEventsText.getParent().layout();
  }
}","@Override public void run(){
  if (!fCanvas.isDisposed()) {
    int canvasWidth=fCanvas.getBounds().width;
    int canvasHeight=fCanvas.getBounds().height;
    if (canvasWidth <= 0 || canvasHeight <= 0)     return;
    fDataModel.setCurrentEvent(fCurrentEventTime);
    fScaledData=fDataModel.scaleTo(canvasWidth,canvasHeight);
    fCanvas.redraw();
    fTimeRangeStartText.setText(HistogramUtils.nanosecondsToString(fDataModel.getStartTime()));
    fTimeRangeEndText.setText(HistogramUtils.nanosecondsToString(fDataModel.getEndTime()));
    fMaxNbEventsText.setText(Long.toString(fScaledData.fMaxValue));
    fMaxNbEventsText.getParent().layout();
  }
}",0.9527622097678142
92796,"/** 
 * Refresh the histogram display
 */
protected void refresh(){
  if (!fCanvas.isDisposed() && fCanvas.getDisplay() != null) {
    fCanvas.getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        if (!fCanvas.isDisposed()) {
          int canvasWidth=fCanvas.getBounds().width;
          int canvasHeight=fCanvas.getBounds().height;
          fDataModel.setCurrentEvent(fCurrentEventTime);
          fScaledData=fDataModel.scaleTo(canvasWidth,canvasHeight);
          fCanvas.redraw();
          fTimeRangeStartText.setText(HistogramUtils.nanosecondsToString(fDataModel.getStartTime()));
          fTimeRangeEndText.setText(HistogramUtils.nanosecondsToString(fDataModel.getEndTime()));
          fMaxNbEventsText.setText(Long.toString(fScaledData.fMaxValue));
          fMaxNbEventsText.getParent().layout();
        }
      }
    }
);
  }
}","/** 
 * Refresh the histogram display
 */
protected void refresh(){
  if (!fCanvas.isDisposed() && fCanvas.getDisplay() != null) {
    fCanvas.getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        if (!fCanvas.isDisposed()) {
          int canvasWidth=fCanvas.getBounds().width;
          int canvasHeight=fCanvas.getBounds().height;
          if (canvasWidth <= 0 || canvasHeight <= 0)           return;
          fDataModel.setCurrentEvent(fCurrentEventTime);
          fScaledData=fDataModel.scaleTo(canvasWidth,canvasHeight);
          fCanvas.redraw();
          fTimeRangeStartText.setText(HistogramUtils.nanosecondsToString(fDataModel.getStartTime()));
          fTimeRangeEndText.setText(HistogramUtils.nanosecondsToString(fDataModel.getEndTime()));
          fMaxNbEventsText.setText(Long.toString(fScaledData.fMaxValue));
          fMaxNbEventsText.getParent().layout();
        }
      }
    }
);
  }
}",0.9607951408061844
92797,"/** 
 * Scale the model data to the width and height requested.
 * @param width
 * @param height
 * @return the result array of size [width] and where the highest valuedoesn't exceed [height]
 */
public HistogramScaledData scaleTo(int width,int height){
}","/** 
 * Scale the model data to the width and height requested.
 * @param width
 * @param height
 * @return the result array of size [width] and where the highest valuedoesn't exceed [height]
 */
public HistogramScaledData scaleTo(int width,int height){
  if (width <= 0 || height <= 0)   throw new AssertionError(""String_Node_Str"" + width + ""String_Node_Str""+ height+ ""String_Node_Str"");
  HistogramScaledData result=new HistogramScaledData(width,height);
  result.fMaxValue=0;
  int bucketsPerBar=fLastBucket / width + 1;
  result.fBucketDuration=bucketsPerBar * fBucketDuration;
  for (int i=0; i < width; i++) {
    int count=0;
    for (int j=i * bucketsPerBar; j < (i + 1) * bucketsPerBar; j++) {
      if (fNbBuckets <= j)       break;
      count+=fBuckets[j];
    }
    result.fData[i]=count;
    result.fLastBucket=i;
    if (result.fMaxValue < count)     result.fMaxValue=count;
  }
  if (result.fMaxValue > 0) {
    result.fScalingFactor=(double)height / result.fMaxValue;
  }
  if (fCurrentEventTime >= fFirstEventTime && fCurrentEventTime <= fLastEventTime)   result.fCurrentBucket=(int)((fCurrentEventTime - fFirstEventTime) / fBucketDuration) / bucketsPerBar;
 else   result.fCurrentBucket=HistogramScaledData.OUT_OF_RANGE_BUCKET;
  return result;
}",0.3355263157894737
92798,"private void selectTrace(LTTngTraceNode traceNode){
  if (fSelectedExperiment != null) {
    fSelectedExperiment.dispose();
  }
  try {
    ITmfTrace[] traces=new ITmfTrace[1];
    IResource res=traceNode.getFolder();
    String location=res.getLocation().toOSString();
    IProject project=traceNode.getProject().getProject();
    String traceLibPath=TraceHelper.getTraceLibDirFromProject(project);
    ITmfTrace trace=new LTTngTrace(location,traceLibPath,waitForCompletion,false);
    traces[0]=trace;
    fSelectedExperiment=new LTTngExperiment<LttngEvent>(LttngEvent.class,traceNode.getName(),traces);
    TmfExperiment.setCurrentExperiment(fSelectedExperiment);
    StateManagerFactory.getExperimentManager().experimentSelected_prep((TmfExperiment<LttngEvent>)fSelectedExperiment);
    broadcast(new TmfExperimentSelectedSignal<LttngEvent>(this,fSelectedExperiment));
  }
 catch (  FileNotFoundException e) {
    return;
  }
catch (  Exception e) {
    MessageDialog.openError(getViewSite().getShell(),Messages.SelectTrace_ErrorTitle,e.getMessage());
  }
}","private void selectTrace(LTTngTraceNode traceNode){
  if (fSelectedExperiment != null) {
    fSelectedExperiment.dispose();
  }
  try {
    ITmfTrace[] traces=new ITmfTrace[1];
    IResource res=traceNode.getFolder();
    String location=res.getLocation().toOSString();
    LTTngProjectNode projectNode=traceNode.getProject();
    IProject project=projectNode.getProject();
    String traceLibPath=TraceHelper.getTraceLibDirFromProject(project);
    ITmfTrace trace=new LTTngTrace(location,traceLibPath,waitForCompletion,false);
    traces[0]=trace;
    fSelectedExperiment=new LTTngExperiment<LttngEvent>(LttngEvent.class,traceNode.getName(),traces);
    TmfExperiment.setCurrentExperiment(fSelectedExperiment);
    StateManagerFactory.getExperimentManager().experimentSelected_prep((TmfExperiment<LttngEvent>)fSelectedExperiment);
    broadcast(new TmfExperimentSelectedSignal<LttngEvent>(this,fSelectedExperiment));
  }
 catch (  FileNotFoundException e) {
    return;
  }
catch (  Exception e) {
    MessageDialog.openError(getViewSite().getShell(),Messages.SelectTrace_ErrorTitle,e.getMessage());
  }
}",0.9621771217712176
92799,"/** 
 * @return
 */
public LTTngProjectNode getProject(){
  return (LTTngProjectNode)getParent().getParent();
}","/** 
 * @return
 */
public LTTngProjectNode getProject(){
  ILTTngProjectTreeNode projectNode=null;
  ILTTngProjectTreeNode parent=getParent();
  if (parent instanceof LTTngTraceFolderNode) {
    projectNode=parent.getParent();
  }
 else   if (parent instanceof LTTngExperimentNode) {
    projectNode=parent.getParent().getParent();
  }
  return (LTTngProjectNode)projectNode;
}",0.310838445807771
92800,"public void transfer(String fromFile,String toFile){
  FileInputStream fis=null;
  String rfile=toFile;
  String lfile=fromFile;
  String command=""String_Node_Str"" + rfile;
  try {
    Channel channel=session.openChannel(""String_Node_Str"");
    ((ChannelExec)channel).setCommand(command);
    OutputStream out=channel.getOutputStream();
    InputStream in=channel.getInputStream();
    channel.connect();
    if (checkAck(in) != 0) {
      System.out.println(""String_Node_Str"");
    }
    long filesize=(new File(lfile)).length();
    command=""String_Node_Str"" + filesize + ""String_Node_Str"";
    if (lfile.lastIndexOf('/') > 0) {
      command+=lfile.substring(lfile.lastIndexOf('/') + 1);
    }
 else {
      command+=lfile;
    }
    command+=""String_Node_Str"";
    out.write(command.getBytes());
    out.flush();
    if (checkAck(in) != 0) {
      System.out.println(""String_Node_Str"");
    }
    fis=new FileInputStream(lfile);
    byte[] buf=new byte[1024];
    while (true) {
      int len=fis.read(buf,0,buf.length);
      if (len <= 0)       break;
      out.write(buf,0,len);
    }
    fis.close();
    fis=null;
    buf[0]=0;
    out.write(buf,0,1);
    out.flush();
    if (checkAck(in) != 0) {
      System.out.println(""String_Node_Str"");
    }
    out.close();
    channel.disconnect();
    session.disconnect();
  }
 catch (  Exception e) {
    try {
      if (fis != null)       fis.close();
    }
 catch (    Exception ee) {
    }
  }
}","public void transfer(String fromFile,String toFile) throws Exception {
  FileInputStream fis=null;
  String rfile=toFile;
  String lfile=fromFile;
  String command=""String_Node_Str"" + rfile;
  try {
    Channel channel=session.openChannel(""String_Node_Str"");
    ((ChannelExec)channel).setCommand(command);
    OutputStream out=channel.getOutputStream();
    InputStream in=channel.getInputStream();
    channel.connect();
    if (checkAck(in) != 0) {
      System.out.println(""String_Node_Str"");
    }
    long filesize=(new File(lfile)).length();
    command=""String_Node_Str"" + filesize + ""String_Node_Str"";
    if (lfile.lastIndexOf('/') > 0) {
      command+=lfile.substring(lfile.lastIndexOf('/') + 1);
    }
 else {
      command+=lfile;
    }
    command+=""String_Node_Str"";
    out.write(command.getBytes());
    out.flush();
    if (checkAck(in) != 0) {
      System.out.println(""String_Node_Str"");
    }
    fis=new FileInputStream(lfile);
    byte[] buf=new byte[1024];
    while (true) {
      int len=fis.read(buf,0,buf.length);
      if (len <= 0)       break;
      out.write(buf,0,len);
    }
    fis.close();
    fis=null;
    buf[0]=0;
    out.write(buf,0,1);
    out.flush();
    if (checkAck(in) != 0) {
      System.out.println(""String_Node_Str"");
    }
    out.close();
    channel.disconnect();
    session.disconnect();
  }
 catch (  Exception e) {
    try {
      if (fis != null)       fis.close();
    }
 catch (    Exception ee) {
    }
    throw e;
  }
}",0.989445011916922
92801,"public ScpClient(){
  String user=ConsoleLogPlugin.getDefault().getPluginPreferences().getString(ConsoleLogPreferenceConstants.SCP_USER);
  String host=ConsoleLogPlugin.getDefault().getPluginPreferences().getString(ConsoleLogPreferenceConstants.HOST_NAME);
  try {
    JSch jsch=new JSch();
    session=jsch.getSession(user,host,22);
    session.setPassword(ConsoleLogPlugin.getDefault().getPluginPreferences().getString(ConsoleLogPreferenceConstants.SCP_PASSWORD));
    java.util.Properties config=new java.util.Properties();
    config.put(""String_Node_Str"",""String_Node_Str"");
    session.setConfig(config);
    session.connect();
  }
 catch (  Exception e) {
    e.printStackTrace(System.err);
    new ErrorMessage(""String_Node_Str"",""String_Node_Str"").open();
  }
}","public ScpClient() throws Exception {
  String user=ConsoleLogPlugin.getDefault().getPluginPreferences().getString(ConsoleLogPreferenceConstants.SCP_USER);
  String host=ConsoleLogPlugin.getDefault().getPluginPreferences().getString(ConsoleLogPreferenceConstants.HOST_NAME);
  try {
    JSch jsch=new JSch();
    session=jsch.getSession(user,host,22);
    session.setPassword(ConsoleLogPlugin.getDefault().getPluginPreferences().getString(ConsoleLogPreferenceConstants.SCP_PASSWORD));
    java.util.Properties config=new java.util.Properties();
    config.put(""String_Node_Str"",""String_Node_Str"");
    session.setConfig(config);
    session.connect();
  }
 catch (  Exception e) {
    e.printStackTrace(System.err);
    new ErrorMessage(""String_Node_Str"",""String_Node_Str"").open();
    throw e;
  }
}",0.980242192479286
92802,"/** 
 * The main body of this event. Starts by making sure the current editor is valid to run, then builds the command line arguments for stap and retrieves the environment variables. Next, it gets an instance of <code>ScriptConsole</code> to run the script. Finally, it Registers a new <code>ChartStreamDaemon2</code> to handle formating the script output for a <code>DataSet</code>. Once everything is setup, it will attempt to switch to the Graphing Perspective.
 */
public void run(){
  LogManager.logDebug(""String_Node_Str"",this);
  continueRun=true;
  if (ConsoleLogPlugin.getDefault().getPluginPreferences().getBoolean(ConsoleLogPreferenceConstants.REMEMBER_SERVER) != true) {
    new SelectServerDialog(fWindow.getShell()).open();
  }
  if (isValid()) {
    try {
      ScpClient scpclient=new ScpClient();
      serverfileName=fileName.substring(fileName.lastIndexOf('/') + 1);
      tmpfileName=""String_Node_Str"" + serverfileName;
      scpclient.transfer(fileName,tmpfileName);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    String[] script=buildScript();
    String[] envVars=getEnvironmentVariables();
    if (continueRun) {
      ScriptConsole console=ScriptConsole.getInstance(serverfileName);
      console.run(script,envVars,new PasswordPrompt(IDESessionSettings.password),new StapErrorParser());
      console.getCommand().addInputStreamListener(new ChartStreamDaemon2(console,dataSet,parser));
      try {
        IWorkbenchPage p=PlatformUI.getWorkbench().showPerspective(GraphingPerspective.ID,PlatformUI.getWorkbench().getActiveWorkbenchWindow());
        IViewPart ivp=p.findView(GraphSelectorView.ID);
        String name=console.getName();
        ((GraphSelectorView)ivp).createScriptSet(name.substring(name.lastIndexOf('/') + 1),dataSet);
      }
 catch (      WorkbenchException we) {
      }
    }
  }
  LogManager.logDebug(""String_Node_Str"",this);
}","/** 
 * The main body of this event. Starts by making sure the current editor is valid to run, then builds the command line arguments for stap and retrieves the environment variables. Next, it gets an instance of <code>ScriptConsole</code> to run the script. Finally, it Registers a new <code>ChartStreamDaemon2</code> to handle formating the script output for a <code>DataSet</code>. Once everything is setup, it will attempt to switch to the Graphing Perspective.
 */
public void run(){
  LogManager.logDebug(""String_Node_Str"",this);
  continueRun=true;
  if (ConsoleLogPlugin.getDefault().getPluginPreferences().getBoolean(ConsoleLogPreferenceConstants.REMEMBER_SERVER) != true) {
    new SelectServerDialog(fWindow.getShell()).open();
  }
  if (isValid()) {
    try {
      ScpClient scpclient=new ScpClient();
      serverfileName=fileName.substring(fileName.lastIndexOf('/') + 1);
      tmpfileName=""String_Node_Str"" + serverfileName;
      scpclient.transfer(fileName,tmpfileName);
    }
 catch (    Exception e) {
      continueRun=false;
    }
    String[] script=null;
    if (continueRun)     script=buildScript();
    if (continueRun) {
      String[] envVars=getEnvironmentVariables();
      ScriptConsole console=ScriptConsole.getInstance(serverfileName);
      console.run(script,envVars,new PasswordPrompt(IDESessionSettings.password),new StapErrorParser());
      console.getCommand().addInputStreamListener(new ChartStreamDaemon2(console,dataSet,parser));
      try {
        IWorkbenchPage p=PlatformUI.getWorkbench().showPerspective(GraphingPerspective.ID,PlatformUI.getWorkbench().getActiveWorkbenchWindow());
        IViewPart ivp=p.findView(GraphSelectorView.ID);
        String name=console.getName();
        ((GraphSelectorView)ivp).createScriptSet(name.substring(name.lastIndexOf('/') + 1),dataSet);
      }
 catch (      WorkbenchException we) {
      }
    }
  }
  LogManager.logDebug(""String_Node_Str"",this);
}",0.9682457053617908
92803,"@Override void paint(Rectangle rect,PaintEvent e){
  if (_isInUpdate || null == _timeProvider)   return;
  GC gc=e.gc;
  gc.fillRectangle(rect);
  if (null == _timeProvider) {
    return;
  }
  long time0=_timeProvider.getTime0();
  long time1=_timeProvider.getTime1();
  long selectedTime=_timeProvider.getSelectedTime();
  int leftSpace=_timeProvider.getNameSpace();
  int timeSpace=_timeProvider.getTimeSpace();
  gc.setBackground(_colors.getColor(TraceColorScheme.TOOL_BACKGROUND));
  gc.setForeground(_colors.getColor(TraceColorScheme.TOOL_FOREGROUND));
  Utils.init(_rect0,rect);
  _rect0.width=leftSpace;
  _rect0.x+=4;
  _rect0.width-=4;
  if (_rect0.width > 0) {
    Utils.drawText(gc,Messages.TimeScaleCtrl_Timescale + ""String_Node_Str"",_rect0,true);
  }
  int messageWidth=gc.stringExtent(Messages.TimeScaleCtrl_Timescale + ""String_Node_Str"").x + 4;
  Rectangle absHeaderRect=new Rectangle(_rect0.x + messageWidth,_rect0.y,_rect0.width - messageWidth,_rect0.height);
  _rect0.x-=4;
  _rect0.width+=4;
  _rect0.x+=leftSpace;
  _rect0.width=rect.width - leftSpace;
  gc.drawLine(rect.x,rect.y + rect.height - 1,rect.x + rect.width - 1,rect.y + rect.height - 1);
  _rect0.height--;
  gc.fillRectangle(_rect0);
  if (time1 <= time0 || timeSpace < 2) {
    return;
  }
  int numDigits=calculateDigits(time0,time1);
  int labelWidth=gc.getCharWidth('0') * numDigits;
  double pixelsPerNanoSec=(timeSpace <= RIGHT_MARGIN) ? 0 : (double)(timeSpace - RIGHT_MARGIN) / (time1 - time0);
  calcTimeDelta(labelWidth,pixelsPerNanoSec);
  TimeDraw timeDraw=getTimeDraw(_timeDelta);
  if (3 == _dragState && null != _timeProvider) {
    if (_dragX0 < _dragX) {
      gc.drawRectangle(leftSpace + _dragX0,rect.y,_dragX - _dragX0 - 1,rect.height - 8);
    }
 else     if (_dragX0 > _dragX) {
      gc.drawRectangle(leftSpace + _dragX,rect.y,_dragX0 - _dragX - 1,rect.height - 8);
    }
  }
  if (_rect0.isEmpty())   return;
  int x=_rect0.x + (int)((double)(selectedTime - time0) * pixelsPerNanoSec);
  if (x >= _rect0.x && x < _rect0.x + _rect0.width) {
    gc.setForeground(_colors.getColor(TraceColorScheme.SELECTED_TIME));
    gc.drawLine(x,_rect0.y + _rect0.height - 6,x,_rect0.y + _rect0.height);
    gc.setForeground(_colors.getColor(TraceColorScheme.TOOL_FOREGROUND));
  }
  _rect0.y=rect.y;
  _rect0.height=rect.height - 4;
  _rect0.width=labelWidth;
  long time;
  if (_timeProvider != null && _timeProvider.isCalendarFormat()) {
    time=floorToCalendar(time0,_timeDelta);
  }
 else {
    time=(long)(Math.ceil((double)time0 / _timeDelta) * _timeDelta);
  }
  int y=_rect0.y + _rect0.height;
  if (_timeProvider != null && _timeProvider.isCalendarFormat()) {
    timeDraw.drawAbsHeader(gc,time,absHeaderRect);
  }
  while (true) {
    x=rect.x + leftSpace + (int)(Math.floor((time - time0) * pixelsPerNanoSec));
    if (x >= rect.x + leftSpace + rect.width - _rect0.width) {
      break;
    }
    if (x >= rect.x + leftSpace) {
      gc.drawLine(x,y,x,y + 4);
      _rect0.x=x;
      if (x + _rect0.width <= rect.x + rect.width)       timeDraw.draw(gc,time,_rect0);
    }
    if (pixelsPerNanoSec == 0 || time > Long.MAX_VALUE - _timeDelta) {
      break;
    }
    time+=_timeDelta;
    if (_timeProvider != null && _timeProvider.isCalendarFormat()) {
      if (_timeDelta >= YEAR_IN_NS) {
        GREGORIAN_CALENDAR.setTime(new Date(time / 1000000));
        GREGORIAN_CALENDAR.set(Calendar.MONTH,0);
        GREGORIAN_CALENDAR.set(Calendar.DAY_OF_MONTH,1);
        time=GREGORIAN_CALENDAR.getTimeInMillis() * 1000000;
      }
 else       if (_timeDelta >= MONTH_IN_NS) {
        GREGORIAN_CALENDAR.setTime(new Date(time / 1000000));
        GREGORIAN_CALENDAR.set(Calendar.DAY_OF_MONTH,1);
        time=GREGORIAN_CALENDAR.getTimeInMillis() * 1000000;
      }
    }
  }
}","@Override void paint(Rectangle rect,PaintEvent e){
  if (_isInUpdate || null == _timeProvider)   return;
  GC gc=e.gc;
  gc.fillRectangle(rect);
  if (null == _timeProvider) {
    return;
  }
  long time0=_timeProvider.getTime0();
  long time1=_timeProvider.getTime1();
  long selectedTime=_timeProvider.getSelectedTime();
  int leftSpace=_timeProvider.getNameSpace();
  int timeSpace=_timeProvider.getTimeSpace();
  gc.setBackground(_colors.getColor(TraceColorScheme.TOOL_BACKGROUND));
  gc.setForeground(_colors.getColor(TraceColorScheme.TOOL_FOREGROUND));
  Utils.init(_rect0,rect);
  _rect0.width=leftSpace;
  _rect0.x+=4;
  _rect0.width-=4;
  if (_rect0.width > 0) {
    Utils.drawText(gc,Messages.TimeScaleCtrl_Timescale + ""String_Node_Str"",_rect0,true);
  }
  int messageWidth=gc.stringExtent(Messages.TimeScaleCtrl_Timescale + ""String_Node_Str"").x + 4;
  Rectangle absHeaderRect=new Rectangle(_rect0.x + messageWidth,_rect0.y,_rect0.width - messageWidth,_rect0.height);
  _rect0.x-=4;
  _rect0.width+=4;
  _rect0.x+=leftSpace;
  _rect0.width=rect.width - leftSpace;
  gc.drawLine(rect.x,rect.y + rect.height - 1,rect.x + rect.width - 1,rect.y + rect.height - 1);
  _rect0.height--;
  gc.fillRectangle(_rect0);
  if (time1 <= time0 || timeSpace < 2) {
    return;
  }
  int numDigits=calculateDigits(time0,time1);
  int labelWidth=gc.getCharWidth('0') * numDigits;
  double pixelsPerNanoSec=(timeSpace <= RIGHT_MARGIN) ? 0 : (double)(timeSpace - RIGHT_MARGIN) / (time1 - time0);
  calcTimeDelta(labelWidth,pixelsPerNanoSec);
  TimeDraw timeDraw=getTimeDraw(_timeDelta);
  if (3 == _dragState && null != _timeProvider) {
    if (_dragX0 < _dragX) {
      gc.drawRectangle(leftSpace + _dragX0,rect.y,_dragX - _dragX0 - 1,rect.height - 8);
    }
 else     if (_dragX0 > _dragX) {
      gc.drawRectangle(leftSpace + _dragX,rect.y,_dragX0 - _dragX - 1,rect.height - 8);
    }
  }
  if (_rect0.isEmpty())   return;
  int x=_rect0.x + (int)((double)(selectedTime - time0) * pixelsPerNanoSec);
  if (x >= _rect0.x && x < _rect0.x + _rect0.width) {
    gc.setForeground(_colors.getColor(TraceColorScheme.SELECTED_TIME));
    gc.drawLine(x,_rect0.y + _rect0.height - 6,x,_rect0.y + _rect0.height);
    gc.setForeground(_colors.getColor(TraceColorScheme.TOOL_FOREGROUND));
  }
  _rect0.y=rect.y;
  _rect0.height=rect.height - 4;
  _rect0.width=labelWidth;
  long time;
  if (_timeProvider != null && _timeProvider.isCalendarFormat()) {
    time=floorToCalendar(time0,_timeDelta);
  }
 else {
    time=(long)(Math.ceil((double)time0 / _timeDelta) * _timeDelta);
  }
  int y=_rect0.y + _rect0.height;
  if (_timeProvider != null && _timeProvider.isCalendarFormat()) {
    timeDraw.drawAbsHeader(gc,time,absHeaderRect);
  }
  while (true) {
    x=rect.x + leftSpace + (int)(Math.floor((time - time0) * pixelsPerNanoSec));
    if (x >= rect.x + leftSpace + rect.width - _rect0.width) {
      break;
    }
    if (x >= rect.x + leftSpace) {
      gc.drawLine(x,y,x,y + 4);
      _rect0.x=x;
      if (x + _rect0.width <= rect.x + rect.width)       timeDraw.draw(gc,time,_rect0);
    }
    if (pixelsPerNanoSec == 0 || time > Long.MAX_VALUE - _timeDelta || _timeDelta == 0) {
      break;
    }
    time+=_timeDelta;
    if (_timeProvider != null && _timeProvider.isCalendarFormat()) {
      if (_timeDelta >= YEAR_IN_NS) {
        GREGORIAN_CALENDAR.setTime(new Date(time / 1000000));
        GREGORIAN_CALENDAR.set(Calendar.MONTH,0);
        GREGORIAN_CALENDAR.set(Calendar.DAY_OF_MONTH,1);
        time=GREGORIAN_CALENDAR.getTimeInMillis() * 1000000;
      }
 else       if (_timeDelta >= MONTH_IN_NS) {
        GREGORIAN_CALENDAR.setTime(new Date(time / 1000000));
        GREGORIAN_CALENDAR.set(Calendar.DAY_OF_MONTH,1);
        time=GREGORIAN_CALENDAR.getTimeInMillis() * 1000000;
      }
    }
  }
}",0.9974910867555792
92804,"/** 
 * Return the top event in the events stack, determined by timestamp, in the trace (all the tracefiles). <p> Note : If the events were read before, the top event and the event currently loaded (currentEvent) are most likely the same.
 * @return The top event in the stack or null if no event is available.
 * @see org.eclipse.linuxtools.lttng.jni.JniEvent
 */
public JniEvent findNextEvent(){
  return eventsHeap.peek();
}","/** 
 * Return the top event in the events stack, determined by timestamp, in the trace (all the tracefiles). <p> Note : If the events were read before, the top event and the event currently loaded (currentEvent) are most likely the same.
 * @@return The top event in the stack or null if no event is available or if the heap is null.
 * @see org.eclipse.linuxtools.lttng.jni.JniEvent
 */
public JniEvent findNextEvent(){
  if (eventsHeap != null) {
    return eventsHeap.peek();
  }
  return null;
}",0.9212513484358144
92805,"@Override public void dispose(){
  currentJniTrace.closeTrace();
  super.dispose();
}","@Override public synchronized void dispose(){
  currentJniTrace.closeTrace();
  super.dispose();
}",0.9289617486338798
92806,"@Override public void handleCompleted(){
  nbRead[0]+=getNbRead();
  if (nbRead[0] >= request.getNbRequested() || (getNbRead() < CHUNK_SIZE[0])) {
    if (isCancelled()) {
      request.cancel();
    }
 else {
      request.done();
    }
    isFinished[0]=Boolean.TRUE;
  }
  super.handleCompleted();
}","@Override public void handleCompleted(){
  nbRead[0]+=getNbRead();
  if (nbRead[0] >= request.getNbRequested() || (getNbRead() < CHUNK_SIZE[0])) {
    if (this.isCancelled()) {
      request.cancel();
    }
 else     if (this.isFailed()) {
      request.fail();
    }
 else {
      request.done();
    }
    isFinished[0]=Boolean.TRUE;
  }
  super.handleCompleted();
}",0.9014925373134328
92807,"@Override public void run(){
  request.start();
  final Integer[] CHUNK_SIZE=new Integer[1];
  CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
  final Integer[] nbRead=new Integer[1];
  nbRead[0]=0;
  final Boolean[] isFinished=new Boolean[1];
  isFinished[0]=Boolean.FALSE;
  while (!isFinished[0]) {
    TmfDataRequest<T> subRequest=new TmfDataRequest<T>(request.getDataType(),request.getIndex() + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
      @Override public void handleData(      T data){
        super.handleData(data);
        request.handleData(data);
        if (getNbRead() > CHUNK_SIZE[0]) {
          System.out.println(""String_Node_Str"");
        }
      }
      @Override public void handleCompleted(){
        nbRead[0]+=getNbRead();
        if (nbRead[0] >= request.getNbRequested() || (getNbRead() < CHUNK_SIZE[0])) {
          if (isCancelled()) {
            request.cancel();
          }
 else {
            request.done();
          }
          isFinished[0]=Boolean.TRUE;
        }
        super.handleCompleted();
      }
    }
;
    if (!isFinished[0]) {
      queueRequest(subRequest);
      try {
        subRequest.waitForCompletion();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
    }
  }
}","@Override public void run(){
  request.start();
  final Integer[] CHUNK_SIZE=new Integer[1];
  CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
  final Integer[] nbRead=new Integer[1];
  nbRead[0]=0;
  final Boolean[] isFinished=new Boolean[1];
  isFinished[0]=Boolean.FALSE;
  while (!isFinished[0]) {
    TmfDataRequest<T> subRequest=new TmfDataRequest<T>(request.getDataType(),request.getIndex() + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
      @Override public void handleData(      T data){
        super.handleData(data);
        request.handleData(data);
        if (getNbRead() > CHUNK_SIZE[0]) {
          System.out.println(""String_Node_Str"");
        }
      }
      @Override public void handleCompleted(){
        nbRead[0]+=getNbRead();
        if (nbRead[0] >= request.getNbRequested() || (getNbRead() < CHUNK_SIZE[0])) {
          if (this.isCancelled()) {
            request.cancel();
          }
 else           if (this.isFailed()) {
            request.fail();
          }
 else {
            request.done();
          }
          isFinished[0]=Boolean.TRUE;
        }
        super.handleCompleted();
      }
    }
;
    if (!isFinished[0]) {
      queueRequest(subRequest);
      try {
        subRequest.waitForCompletion();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
    }
  }
}",0.9707317073170731
92808,"protected void queueBackgroundRequest(final ITmfDataRequest<T> request,final int blockSize,final boolean indexing){
  Thread thread=new Thread(){
    @Override public void run(){
      request.start();
      final Integer[] CHUNK_SIZE=new Integer[1];
      CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
      final Integer[] nbRead=new Integer[1];
      nbRead[0]=0;
      final Boolean[] isFinished=new Boolean[1];
      isFinished[0]=Boolean.FALSE;
      while (!isFinished[0]) {
        TmfDataRequest<T> subRequest=new TmfDataRequest<T>(request.getDataType(),request.getIndex() + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
          @Override public void handleData(          T data){
            super.handleData(data);
            request.handleData(data);
            if (getNbRead() > CHUNK_SIZE[0]) {
              System.out.println(""String_Node_Str"");
            }
          }
          @Override public void handleCompleted(){
            nbRead[0]+=getNbRead();
            if (nbRead[0] >= request.getNbRequested() || (getNbRead() < CHUNK_SIZE[0])) {
              if (isCancelled()) {
                request.cancel();
              }
 else {
                request.done();
              }
              isFinished[0]=Boolean.TRUE;
            }
            super.handleCompleted();
          }
        }
;
        if (!isFinished[0]) {
          queueRequest(subRequest);
          try {
            subRequest.waitForCompletion();
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
        }
      }
    }
  }
;
  thread.start();
}","protected void queueBackgroundRequest(final ITmfDataRequest<T> request,final int blockSize,final boolean indexing){
  Thread thread=new Thread(){
    @Override public void run(){
      request.start();
      final Integer[] CHUNK_SIZE=new Integer[1];
      CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
      final Integer[] nbRead=new Integer[1];
      nbRead[0]=0;
      final Boolean[] isFinished=new Boolean[1];
      isFinished[0]=Boolean.FALSE;
      while (!isFinished[0]) {
        TmfDataRequest<T> subRequest=new TmfDataRequest<T>(request.getDataType(),request.getIndex() + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
          @Override public void handleData(          T data){
            super.handleData(data);
            request.handleData(data);
            if (getNbRead() > CHUNK_SIZE[0]) {
              System.out.println(""String_Node_Str"");
            }
          }
          @Override public void handleCompleted(){
            nbRead[0]+=getNbRead();
            if (nbRead[0] >= request.getNbRequested() || (getNbRead() < CHUNK_SIZE[0])) {
              if (this.isCancelled()) {
                request.cancel();
              }
 else               if (this.isFailed()) {
                request.fail();
              }
 else {
                request.done();
              }
              isFinished[0]=Boolean.TRUE;
            }
            super.handleCompleted();
          }
        }
;
        if (!isFinished[0]) {
          queueRequest(subRequest);
          try {
            subRequest.waitForCompletion();
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
        }
      }
    }
  }
;
  thread.start();
}",0.973109243697479
92809,"@Override protected void queueBackgroundRequest(final ITmfDataRequest<T> request,final int blockSize,final boolean indexing){
  if (!(request instanceof ITmfEventRequest)) {
    super.queueBackgroundRequest(request,blockSize,indexing);
    return;
  }
  Thread thread=new Thread(){
    @Override public void run(){
      request.start();
      final Integer[] CHUNK_SIZE=new Integer[1];
      CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
      final Integer[] nbRead=new Integer[1];
      nbRead[0]=0;
      final Boolean[] isFinished=new Boolean[1];
      isFinished[0]=Boolean.FALSE;
      int startIndex=request.getIndex();
      while (!isFinished[0]) {
        TmfEventRequest<T> subRequest=new TmfEventRequest<T>(request.getDataType(),((ITmfEventRequest<?>)request).getRange(),startIndex + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
          @Override public void handleData(          T data){
            super.handleData(data);
            request.handleData(data);
            if (this.getNbRead() > CHUNK_SIZE[0]) {
              System.out.println(""String_Node_Str"");
            }
          }
          @Override public void handleCompleted(){
            nbRead[0]+=this.getNbRead();
            if (nbRead[0] >= request.getNbRequested() || (this.getNbRead() < CHUNK_SIZE[0])) {
              if (isCancelled()) {
                request.cancel();
              }
 else {
                request.done();
              }
              isFinished[0]=Boolean.TRUE;
            }
            super.handleCompleted();
          }
        }
;
        if (!isFinished[0]) {
          queueRequest(subRequest);
          try {
            subRequest.waitForCompletion();
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          if (startIndex == 0 && nbRead[0] == CHUNK_SIZE[0]) {
            startIndex=subRequest.getIndex();
          }
          CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
        }
      }
    }
  }
;
  thread.start();
}","@Override protected void queueBackgroundRequest(final ITmfDataRequest<T> request,final int blockSize,final boolean indexing){
  if (!(request instanceof ITmfEventRequest)) {
    super.queueBackgroundRequest(request,blockSize,indexing);
    return;
  }
  Thread thread=new Thread(){
    @Override public void run(){
      request.start();
      final Integer[] CHUNK_SIZE=new Integer[1];
      CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
      final Integer[] nbRead=new Integer[1];
      nbRead[0]=0;
      final Boolean[] isFinished=new Boolean[1];
      isFinished[0]=Boolean.FALSE;
      int startIndex=request.getIndex();
      while (!isFinished[0]) {
        TmfEventRequest<T> subRequest=new TmfEventRequest<T>(request.getDataType(),((ITmfEventRequest<?>)request).getRange(),startIndex + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
          @Override public void handleData(          T data){
            super.handleData(data);
            request.handleData(data);
            if (this.getNbRead() > CHUNK_SIZE[0]) {
              System.out.println(""String_Node_Str"");
            }
          }
          @Override public void handleCompleted(){
            nbRead[0]+=this.getNbRead();
            if (nbRead[0] >= request.getNbRequested() || (this.getNbRead() < CHUNK_SIZE[0])) {
              if (this.isCancelled()) {
                request.cancel();
              }
 else               if (this.isFailed()) {
                request.fail();
              }
 else {
                request.done();
              }
              isFinished[0]=Boolean.TRUE;
            }
            super.handleCompleted();
          }
        }
;
        if (!isFinished[0]) {
          queueRequest(subRequest);
          try {
            subRequest.waitForCompletion();
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          if (startIndex == 0 && nbRead[0] == CHUNK_SIZE[0]) {
            startIndex=subRequest.getIndex();
          }
          CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
        }
      }
    }
  }
;
  thread.start();
}",0.9775070290534208
92810,"@Override public void handleCompleted(){
  nbRead[0]+=this.getNbRead();
  if (nbRead[0] >= request.getNbRequested() || (this.getNbRead() < CHUNK_SIZE[0])) {
    if (isCancelled()) {
      request.cancel();
    }
 else {
      request.done();
    }
    isFinished[0]=Boolean.TRUE;
  }
  super.handleCompleted();
}","@Override public void handleCompleted(){
  nbRead[0]+=this.getNbRead();
  if (nbRead[0] >= request.getNbRequested() || (this.getNbRead() < CHUNK_SIZE[0])) {
    if (this.isCancelled()) {
      request.cancel();
    }
 else     if (this.isFailed()) {
      request.fail();
    }
 else {
      request.done();
    }
    isFinished[0]=Boolean.TRUE;
  }
  super.handleCompleted();
}",0.9043478260869564
92811,"@Override public void run(){
  request.start();
  final Integer[] CHUNK_SIZE=new Integer[1];
  CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
  final Integer[] nbRead=new Integer[1];
  nbRead[0]=0;
  final Boolean[] isFinished=new Boolean[1];
  isFinished[0]=Boolean.FALSE;
  int startIndex=request.getIndex();
  while (!isFinished[0]) {
    TmfEventRequest<T> subRequest=new TmfEventRequest<T>(request.getDataType(),((ITmfEventRequest<?>)request).getRange(),startIndex + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
      @Override public void handleData(      T data){
        super.handleData(data);
        request.handleData(data);
        if (this.getNbRead() > CHUNK_SIZE[0]) {
          System.out.println(""String_Node_Str"");
        }
      }
      @Override public void handleCompleted(){
        nbRead[0]+=this.getNbRead();
        if (nbRead[0] >= request.getNbRequested() || (this.getNbRead() < CHUNK_SIZE[0])) {
          if (isCancelled()) {
            request.cancel();
          }
 else {
            request.done();
          }
          isFinished[0]=Boolean.TRUE;
        }
        super.handleCompleted();
      }
    }
;
    if (!isFinished[0]) {
      queueRequest(subRequest);
      try {
        subRequest.waitForCompletion();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      if (startIndex == 0 && nbRead[0] == CHUNK_SIZE[0]) {
        startIndex=subRequest.getIndex();
      }
      CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
    }
  }
}","@Override public void run(){
  request.start();
  final Integer[] CHUNK_SIZE=new Integer[1];
  CHUNK_SIZE[0]=Math.min(request.getNbRequested(),blockSize + ((indexing) ? 1 : 0));
  final Integer[] nbRead=new Integer[1];
  nbRead[0]=0;
  final Boolean[] isFinished=new Boolean[1];
  isFinished[0]=Boolean.FALSE;
  int startIndex=request.getIndex();
  while (!isFinished[0]) {
    TmfEventRequest<T> subRequest=new TmfEventRequest<T>(request.getDataType(),((ITmfEventRequest<?>)request).getRange(),startIndex + nbRead[0],CHUNK_SIZE[0],blockSize,ExecutionType.BACKGROUND){
      @Override public void handleData(      T data){
        super.handleData(data);
        request.handleData(data);
        if (this.getNbRead() > CHUNK_SIZE[0]) {
          System.out.println(""String_Node_Str"");
        }
      }
      @Override public void handleCompleted(){
        nbRead[0]+=this.getNbRead();
        if (nbRead[0] >= request.getNbRequested() || (this.getNbRead() < CHUNK_SIZE[0])) {
          if (this.isCancelled()) {
            request.cancel();
          }
 else           if (this.isFailed()) {
            request.fail();
          }
 else {
            request.done();
          }
          isFinished[0]=Boolean.TRUE;
        }
        super.handleCompleted();
      }
    }
;
    if (!isFinished[0]) {
      queueRequest(subRequest);
      try {
        subRequest.waitForCompletion();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      if (startIndex == 0 && nbRead[0] == CHUNK_SIZE[0]) {
        startIndex=subRequest.getIndex();
      }
      CHUNK_SIZE[0]=Math.min(request.getNbRequested() - nbRead[0],blockSize);
    }
  }
}",0.9742647058823528
92812,"@Override @SuppressWarnings(""String_Node_Str"") public TmfCheckpoint restoreCheckPointByTimestamp(TmfTimestamp eventTime){
  TmfTimeRange experimentRange=fExperiment.getTimeRange();
  TmfCheckpoint checkpoint=new TmfCheckpoint(fTrace.getStartTime(),new TmfLocation<Long>(0L));
  if ((eventTime.getValue() < 0) || (eventTime.getValue() > experimentRange.getEndTime().getValue())) {
    return null;
  }
  if ((eventTime.getValue() < fTrace.getStartTime().getValue())) {
    eventTime=fTrace.getStartTime();
  }
  LttngTraceState traceState;
synchronized (fCheckPointsLock) {
    Collections.sort(timestampCheckpointsList);
    int index=Collections.binarySearch(timestampCheckpointsList,new TmfCheckpoint(eventTime,new TmfLocation<Long>(0L)));
    index=getPrevIndex(index);
    if (index == 0) {
      traceState=StateModelFactory.getStateEntryInstance(this);
    }
 else {
      checkpoint=timestampCheckpointsList.get(index);
      TmfLocation<Long> location=(TmfLocation<Long>)checkpoint.getLocation();
      traceState=stateCheckpointsList.get(location.getLocation()).clone();
    }
  }
synchronized (fStateModelLock) {
    fStateModel=traceState;
  }
  return checkpoint;
}","@Override @SuppressWarnings(""String_Node_Str"") public TmfCheckpoint restoreCheckPointByTimestamp(TmfTimestamp eventTime){
  TmfTimeRange experimentRange=fExperiment.getTimeRange();
  TmfCheckpoint checkpoint=new TmfCheckpoint(fTrace.getStartTime(),new TmfLocation<Long>(0L));
  if ((eventTime.getValue() < 0) || (!experimentRange.equals(TmfTimeRange.Null) && (eventTime.getValue() > experimentRange.getEndTime().getValue()))) {
    return null;
  }
  if ((eventTime.getValue() < fTrace.getStartTime().getValue())) {
    eventTime=fTrace.getStartTime();
  }
  LttngTraceState traceState;
synchronized (fCheckPointsLock) {
    Collections.sort(timestampCheckpointsList);
    int index=Collections.binarySearch(timestampCheckpointsList,new TmfCheckpoint(eventTime,new TmfLocation<Long>(0L)));
    index=getPrevIndex(index);
    if (index == 0) {
      traceState=StateModelFactory.getStateEntryInstance(this);
    }
 else {
      checkpoint=timestampCheckpointsList.get(index);
      TmfLocation<Long> location=(TmfLocation<Long>)checkpoint.getLocation();
      traceState=stateCheckpointsList.get(location.getLocation()).clone();
    }
  }
synchronized (fStateModelLock) {
    fStateModel=traceState;
  }
  return checkpoint;
}",0.9800166527893422
92813,"@SuppressWarnings(""String_Node_Str"") @Override protected void indexExperiment(final boolean waitForCompletion){
  if (waitForCompletion) {
    TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(LTTngExperiment.this,LTTngExperiment.this,TmfTimeRange.Eternity);
    broadcast(signal);
    while (isIndexingBusy()) {
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    ;
    return;
  }
  for (  ITmfTrace trace : fTraces) {
    if (trace instanceof LTTngTrace) {
      JniTrace jniTrace=((LTTngTrace)trace).getCurrentJniTrace();
      if (jniTrace != null && !jniTrace.isLiveTraceSupported()) {
        updateTimeRange();
        TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(LTTngExperiment.this,LTTngExperiment.this,getTimeRange());
        broadcast(signal);
        return;
      }
    }
  }
  final Thread thread=new Thread(""String_Node_Str"" + getName()){
    LttngTimestamp safeTimestamp=null;
    TmfTimeRange timeRange=null;
    @Override public void run(){
      while (!fExecutor.isShutdown()) {
        final TmfEventRequest<LttngEvent> request=new TmfEventRequest<LttngEvent>(LttngEvent.class,TmfTimeRange.Eternity,0,ExecutionType.FOREGROUND){
          @Override public void handleCompleted(){
            super.handleCompleted();
            if (isIndexingBusy()) {
              timeRange=null;
              return;
            }
            long startTime=Long.MAX_VALUE;
            long endTime=Long.MIN_VALUE;
            for (            ITmfTrace trace : getTraces()) {
              if (trace instanceof LTTngTrace) {
                LTTngTrace lttngTrace=(LTTngTrace)trace;
                JniTrace jniTrace=lttngTrace.getCurrentJniTrace();
                jniTrace.updateTrace();
                startTime=Math.min(startTime,lttngTrace.getStartTime().getValue());
                endTime=Math.max(endTime,jniTrace.getEndTime().getTime());
              }
            }
            LttngTimestamp startTimestamp=new LttngTimestamp(startTime);
            LttngTimestamp endTimestamp=new LttngTimestamp(endTime);
            if (safeTimestamp != null && safeTimestamp.compareTo(getTimeRange().getEndTime(),false) > 0) {
              timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
            }
 else {
              timeRange=null;
            }
            safeTimestamp=endTimestamp;
          }
        }
;
        try {
          sendRequest((ITmfDataRequest<T>)request);
          request.waitForCompletion();
          if (timeRange != null && timeRange != TmfTimeRange.Null) {
            TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(LTTngExperiment.this,LTTngExperiment.this,timeRange);
            broadcast(signal);
          }
          Thread.sleep(2000);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  thread.start();
}","@SuppressWarnings(""String_Node_Str"") @Override protected void indexExperiment(final boolean waitForCompletion){
  if (waitForCompletion) {
    TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(LTTngExperiment.this,LTTngExperiment.this,TmfTimeRange.Eternity);
    broadcast(signal);
    while (isIndexingBusy()) {
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    ;
    return;
  }
  for (  ITmfTrace trace : fTraces) {
    if (trace instanceof LTTngTrace) {
      JniTrace jniTrace=((LTTngTrace)trace).getCurrentJniTrace();
      if (jniTrace != null && !jniTrace.isLiveTraceSupported()) {
        updateTimeRange();
        TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(LTTngExperiment.this,LTTngExperiment.this,getTimeRange());
        broadcast(signal);
        return;
      }
    }
  }
  final Thread thread=new Thread(""String_Node_Str"" + getName()){
    LttngTimestamp safeTimestamp=null;
    TmfTimeRange timeRange=null;
    @Override public void run(){
      while (!fExecutor.isShutdown()) {
        final TmfEventRequest<LttngEvent> request=new TmfEventRequest<LttngEvent>(LttngEvent.class,TmfTimeRange.Eternity,0,ExecutionType.FOREGROUND){
          @Override public void handleCompleted(){
            super.handleCompleted();
            if (isIndexingBusy()) {
              timeRange=null;
              return;
            }
            long startTime=Long.MAX_VALUE;
            long endTime=Long.MIN_VALUE;
            for (            ITmfTrace trace : getTraces()) {
              if (trace instanceof LTTngTrace) {
                LTTngTrace lttngTrace=(LTTngTrace)trace;
                JniTrace jniTrace=lttngTrace.getCurrentJniTrace();
                jniTrace.updateTrace();
                startTime=Math.min(startTime,lttngTrace.getStartTime().getValue());
                endTime=Math.max(endTime,jniTrace.getEndTime().getTime());
              }
            }
            LttngTimestamp startTimestamp=new LttngTimestamp(startTime);
            LttngTimestamp endTimestamp=new LttngTimestamp(endTime);
            if (safeTimestamp != null && safeTimestamp.compareTo(getTimeRange().getEndTime(),false) > 0) {
              timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
            }
 else {
              timeRange=null;
            }
            safeTimestamp=endTimestamp;
          }
        }
;
        try {
          sendRequest((ITmfDataRequest<T>)request);
          request.waitForCompletion();
          if (timeRange != null && !timeRange.equals(TmfTimeRange.Null)) {
            TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(LTTngExperiment.this,LTTngExperiment.this,timeRange);
            broadcast(signal);
          }
          Thread.sleep(2000);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  thread.start();
}",0.9976674441852716
92814,"@Override public void run(){
  while (!fExecutor.isShutdown()) {
    final TmfEventRequest<LttngEvent> request=new TmfEventRequest<LttngEvent>(LttngEvent.class,TmfTimeRange.Eternity,0,ExecutionType.FOREGROUND){
      @Override public void handleCompleted(){
        super.handleCompleted();
        if (isIndexingBusy()) {
          timeRange=null;
          return;
        }
        long startTime=Long.MAX_VALUE;
        long endTime=Long.MIN_VALUE;
        for (        ITmfTrace trace : getTraces()) {
          if (trace instanceof LTTngTrace) {
            LTTngTrace lttngTrace=(LTTngTrace)trace;
            JniTrace jniTrace=lttngTrace.getCurrentJniTrace();
            jniTrace.updateTrace();
            startTime=Math.min(startTime,lttngTrace.getStartTime().getValue());
            endTime=Math.max(endTime,jniTrace.getEndTime().getTime());
          }
        }
        LttngTimestamp startTimestamp=new LttngTimestamp(startTime);
        LttngTimestamp endTimestamp=new LttngTimestamp(endTime);
        if (safeTimestamp != null && safeTimestamp.compareTo(getTimeRange().getEndTime(),false) > 0) {
          timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
        }
 else {
          timeRange=null;
        }
        safeTimestamp=endTimestamp;
      }
    }
;
    try {
      sendRequest((ITmfDataRequest<T>)request);
      request.waitForCompletion();
      if (timeRange != null && timeRange != TmfTimeRange.Null) {
        TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(LTTngExperiment.this,LTTngExperiment.this,timeRange);
        broadcast(signal);
      }
      Thread.sleep(2000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  while (!fExecutor.isShutdown()) {
    final TmfEventRequest<LttngEvent> request=new TmfEventRequest<LttngEvent>(LttngEvent.class,TmfTimeRange.Eternity,0,ExecutionType.FOREGROUND){
      @Override public void handleCompleted(){
        super.handleCompleted();
        if (isIndexingBusy()) {
          timeRange=null;
          return;
        }
        long startTime=Long.MAX_VALUE;
        long endTime=Long.MIN_VALUE;
        for (        ITmfTrace trace : getTraces()) {
          if (trace instanceof LTTngTrace) {
            LTTngTrace lttngTrace=(LTTngTrace)trace;
            JniTrace jniTrace=lttngTrace.getCurrentJniTrace();
            jniTrace.updateTrace();
            startTime=Math.min(startTime,lttngTrace.getStartTime().getValue());
            endTime=Math.max(endTime,jniTrace.getEndTime().getTime());
          }
        }
        LttngTimestamp startTimestamp=new LttngTimestamp(startTime);
        LttngTimestamp endTimestamp=new LttngTimestamp(endTime);
        if (safeTimestamp != null && safeTimestamp.compareTo(getTimeRange().getEndTime(),false) > 0) {
          timeRange=new TmfTimeRange(startTimestamp,safeTimestamp);
        }
 else {
          timeRange=null;
        }
        safeTimestamp=endTimestamp;
      }
    }
;
    try {
      sendRequest((ITmfDataRequest<T>)request);
      request.waitForCompletion();
      if (timeRange != null && !timeRange.equals(TmfTimeRange.Null)) {
        TmfExperimentRangeUpdatedSignal signal=new TmfExperimentRangeUpdatedSignal(LTTngExperiment.this,LTTngExperiment.this,timeRange);
        broadcast(signal);
      }
      Thread.sleep(2000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}",0.9959514170040484
92815,"@Override public void increase(LttngEvent event,LttngTraceState traceState,int values){
  FixedArray[] paths=getNormalPaths(event,traceState);
  Long cpu=event.getCpuId();
  LttngProcessState process=traceState.getRunning_process().get(cpu);
  for (int j=0; j < paths.length; ++j) {
    StatisticsTreeNode node=getOrCreate(paths[j],event,traceState,j,false);
    if ((values & Values.CPU_TIME) != 0) {
      if ((process.getState().getProc_status().equals(ProcessStatus.LTTV_STATE_RUN)) && !process.getState().getExec_mode().equals(ExecutionMode.LTTV_STATE_MODE_UNKNOWN)) {
        node.getValue().cpuTime+=event.getTimestamp().getValue() - process.getState().getChange_LttTime();
      }
    }
    if ((values & Values.CUMULATIVE_CPU_TIME) != 0) {
      if (!process.getState().getExec_mode().equals(ExecutionMode.LTTV_STATE_MODE_UNKNOWN)) {
        long cumulativeCpuTime=process.getState().getCum_cpu_time();
        long delta=event.getTimestamp().getValue() - process.getState().getEntry_LttTime();
        process.getState().setCum_cpu_time(cumulativeCpuTime + delta);
        node.getValue().cumulativeCpuTime+=process.getState().getCum_cpu_time();
      }
 else       if (process.getState().getProc_status().equals(ProcessStatus.LTTV_STATE_RUN) && !process.getState().getExec_mode().equals(ExecutionMode.LTTV_STATE_MODE_UNKNOWN)) {
        long cumulativeCpuTime=process.getState().getCum_cpu_time();
        long delta=event.getTimestamp().getValue() - process.getState().getChange_LttTime();
        process.getState().setCum_cpu_time(cumulativeCpuTime + delta);
        node.getValue().cumulativeCpuTime+=process.getState().getCum_cpu_time();
      }
    }
    if ((values & Values.ELAPSED_TIME) != 0) {
      if (!process.getState().getExec_mode().equals(ExecutionMode.LTTV_STATE_MODE_UNKNOWN)) {
        node.getValue().elapsedTime+=event.getTimestamp().getValue() - process.getState().getEntry_LttTime();
      }
    }
    if ((values & Values.STATE_CUMULATIVE_CPU_TIME) != 0) {
      if (process.getState().getProc_status().equals(ProcessStatus.LTTV_STATE_RUN) && !process.getState().getExec_mode().equals(ExecutionMode.LTTV_STATE_MODE_UNKNOWN)) {
        long cumulativeCpuTime=process.getState().getCum_cpu_time();
        long delta=event.getTimestamp().getValue() - process.getState().getChange_LttTime();
        process.getState().setCum_cpu_time(cumulativeCpuTime + delta);
      }
    }
  }
}","@Override public void increase(LttngEvent event,LttngTraceState traceState,int values){
  FixedArray[] paths=getNormalPaths(event,traceState);
  Long cpu=event.getCpuId();
  LttngProcessState process=traceState.getRunning_process().get(cpu);
  if ((values & Values.STATE_CUMULATIVE_CPU_TIME) != 0) {
    if (process.getState().getProc_status().equals(ProcessStatus.LTTV_STATE_RUN) && !process.getState().getExec_mode().equals(ExecutionMode.LTTV_STATE_MODE_UNKNOWN)) {
      long cumulativeCpuTime=process.getState().getCum_cpu_time();
      long delta=event.getTimestamp().getValue() - process.getState().getChange_LttTime();
      process.getState().setCum_cpu_time(cumulativeCpuTime + delta);
    }
  }
  if ((values & Values.CUMULATIVE_CPU_TIME) != 0) {
    if (!process.getState().getExec_mode().equals(ExecutionMode.LTTV_STATE_MODE_UNKNOWN)) {
      long cumulativeCpuTime=process.getState().getCum_cpu_time();
      long delta=event.getTimestamp().getValue() - process.getState().getEntry_LttTime();
      long newCumulativeCpuTime=cumulativeCpuTime + delta;
      process.getState().setCum_cpu_time(newCumulativeCpuTime);
    }
 else     if (process.getState().getProc_status().equals(ProcessStatus.LTTV_STATE_RUN) && !process.getState().getExec_mode().equals(ExecutionMode.LTTV_STATE_MODE_UNKNOWN)) {
      long cumulativeCpuTime=process.getState().getCum_cpu_time();
      long delta=event.getTimestamp().getValue() - process.getState().getChange_LttTime();
      long newCumulativeCpuTime=cumulativeCpuTime + delta;
      process.getState().setCum_cpu_time(newCumulativeCpuTime);
    }
  }
  for (int j=0; j < paths.length; ++j) {
    StatisticsTreeNode node=getOrCreate(paths[j],event,traceState,j,false);
    if ((values & Values.CPU_TIME) != 0) {
      if ((process.getState().getProc_status().equals(ProcessStatus.LTTV_STATE_RUN)) && !process.getState().getExec_mode().equals(ExecutionMode.LTTV_STATE_MODE_UNKNOWN)) {
        node.getValue().cpuTime+=event.getTimestamp().getValue() - process.getState().getChange_LttTime();
      }
    }
    if ((values & Values.CUMULATIVE_CPU_TIME) != 0) {
      if (!process.getState().getExec_mode().equals(ExecutionMode.LTTV_STATE_MODE_UNKNOWN)) {
        node.getValue().cumulativeCpuTime+=process.getState().getCum_cpu_time();
      }
 else       if (process.getState().getProc_status().equals(ProcessStatus.LTTV_STATE_RUN) && !process.getState().getExec_mode().equals(ExecutionMode.LTTV_STATE_MODE_UNKNOWN)) {
        node.getValue().cumulativeCpuTime+=process.getState().getCum_cpu_time();
      }
    }
    if ((values & Values.ELAPSED_TIME) != 0) {
      if (!process.getState().getExec_mode().equals(ExecutionMode.LTTV_STATE_MODE_UNKNOWN)) {
        node.getValue().elapsedTime+=event.getTimestamp().getValue() - process.getState().getEntry_LttTime();
      }
    }
  }
}",0.6454441479222265
92816,"/** 
 * Registers as listener of time selection from other views
 * @param signal
 */
public void synchToTime(TmfTimeSynchSignal signal){
  if (synch) {
    Object source=signal.getSource();
    if (signal != null && source != null && source != this) {
      long selectedTime=signal.getCurrentTime().getValue();
      if (tsfviewer != null) {
        tsfviewer.setSelectedTime(selectedTime,true,source);
        ParamsUpdater paramUpdater=getParamsUpdater();
        Long savedSelTime=paramUpdater.getSelectedTime();
        if ((savedSelTime == null) || (savedSelTime != selectedTime)) {
          paramUpdater.setSelectedTime(selectedTime);
        }
      }
    }
  }
}","/** 
 * Registers as listener of time selection from other views
 * @param signal
 */
public void synchToTime(TmfTimeSynchSignal signal){
  if (synch) {
    Object source=signal.getSource();
    if (signal != null && source != null && source != this) {
      if ((tsfviewer != null) && (!tsfviewer.getControl().isDisposed())) {
        if (Display.getCurrent() != null) {
          long selectedTime=signal.getCurrentTime().getValue();
          if (tsfviewer != null) {
            tsfviewer.setSelectedTime(selectedTime,true,source);
            ParamsUpdater paramUpdater=getParamsUpdater();
            Long savedSelTime=paramUpdater.getSelectedTime();
            if ((savedSelTime == null) || (savedSelTime != selectedTime)) {
              paramUpdater.setSelectedTime(selectedTime);
            }
          }
        }
 else {
          final TmfTimeSynchSignal savedSignal=new TmfTimeSynchSignal(signal.getSource(),signal.getCurrentTime().clone());
          tsfviewer.getControl().getDisplay().asyncExec(new Runnable(){
            @Override public void run(){
              if ((tsfviewer != null) && (!tsfviewer.getControl().isDisposed())) {
                synchToTime(savedSignal);
              }
            }
          }
);
        }
      }
    }
  }
}",0.6680391147709728
92817,"/** 
 * @param tableComposite
 * @param table
 */
private synchronized void resizeTableColumns(Table table){
  if (table != null) {
    Composite parent=table.getParent();
    int tableWidthSum=parent.getBorderWidth();
    TableColumn[] columns=table.getColumns();
    for (    TableColumn column : columns) {
      column.pack();
      tableWidthSum+=column.getWidth();
    }
  }
}","/** 
 * @param tableComposite
 * @param table
 */
private synchronized void resizeTableColumns(Table table){
  if (table != null) {
    TableColumn[] columns=table.getColumns();
    for (    TableColumn column : columns) {
      column.pack();
    }
  }
}",0.533751962323391
92818,"/** 
 * Moves to a certain message defined by timestamp in current page
 */
protected void moveToMessageInPage(){
  fLock.lock();
  try {
    TmfSyncMessage prevMessage=null;
    TmfSyncMessage syncMessage=null;
    boolean isExactTime=false;
    for (int i=0; i < fFrame.syncMessageCount(); i++) {
      if (fFrame.getSyncMessage(i) instanceof TmfSyncMessage) {
        syncMessage=(TmfSyncMessage)fFrame.getSyncMessage(i);
        if (syncMessage.getStartTime().compareTo(fCurrentTime,false) == 0) {
          isExactTime=true;
          break;
        }
 else         if (syncMessage.getStartTime().compareTo(fCurrentTime,false) > 0) {
          if (prevMessage != null) {
            syncMessage=prevMessage;
            break;
          }
        }
        prevMessage=syncMessage;
      }
    }
    if (fIsSelect && isExactTime) {
      fView.getSDWidget().moveTo(syncMessage);
    }
 else {
      fView.getSDWidget().ensureVisible(syncMessage);
      fView.getSDWidget().clearSelection();
      fView.getSDWidget().redraw();
    }
  }
  finally {
    fLock.unlock();
  }
}","/** 
 * Moves to a certain message defined by timestamp in current page
 */
protected void moveToMessageInPage(){
  fLock.lock();
  try {
    if (!fView.getSDWidget().isDisposed()) {
      if (Display.getCurrent() != null) {
        TmfSyncMessage prevMessage=null;
        TmfSyncMessage syncMessage=null;
        boolean isExactTime=false;
        for (int i=0; i < fFrame.syncMessageCount(); i++) {
          if (fFrame.getSyncMessage(i) instanceof TmfSyncMessage) {
            syncMessage=(TmfSyncMessage)fFrame.getSyncMessage(i);
            if (syncMessage.getStartTime().compareTo(fCurrentTime,false) == 0) {
              isExactTime=true;
              break;
            }
 else             if (syncMessage.getStartTime().compareTo(fCurrentTime,false) > 0) {
              if (prevMessage != null) {
                syncMessage=prevMessage;
                break;
              }
            }
            prevMessage=syncMessage;
          }
        }
        if (fIsSelect && isExactTime) {
          fView.getSDWidget().moveTo(syncMessage);
        }
 else {
          fView.getSDWidget().ensureVisible(syncMessage);
          fView.getSDWidget().clearSelection();
          fView.getSDWidget().redraw();
        }
      }
 else {
        fView.getSDWidget().getDisplay().asyncExec(new Runnable(){
          @Override public void run(){
            moveToMessageInPage();
          }
        }
);
      }
    }
  }
  finally {
    fLock.unlock();
  }
}",0.8298624754420432
92819,"public void refreshView(){
  if (messages != null) {
    messagesViewer.getTreeViewer().setInput(messages);
    if (hasDynamicContent && messages.length == 0) {
      showCoreAction.setEnabled(false);
      showToolPage();
    }
 else {
      showCoreAction.setEnabled(true);
      showCorePage();
    }
  }
  if (dynamicView != null) {
    dynamicView.refreshView();
  }
}","public void refreshView(){
  if (messages != null) {
    messagesViewer.getTreeViewer().setInput(messages);
    if (hasDynamicContent && messages[0] instanceof ValgrindInfo) {
      showCoreAction.setEnabled(false);
      showToolPage();
    }
 else {
      showCoreAction.setEnabled(true);
      showCorePage();
    }
  }
  if (dynamicView != null) {
    dynamicView.refreshView();
  }
}",0.9513797634691196
92820,"public IValgrindToolView createDynamicContent(String description,String toolID) throws CoreException {
  setContentDescription(description);
  IToolBarManager toolbar=getViewSite().getActionBars().getToolBarManager();
  if (dynamicActions != null) {
    for (    ActionContributionItem item : dynamicActions) {
      toolbar.remove(item);
    }
  }
  if (dynamicView != null) {
    dynamicView.dispose();
  }
  for (  Control child : dynamicViewHolder.getChildren()) {
    if (!child.isDisposed()) {
      child.dispose();
    }
  }
  if (toolID != null) {
    dynamicView=ValgrindUIPlugin.getDefault().getToolView(toolID);
    dynamicView.createPartControl(dynamicViewHolder);
    IAction[] actions=dynamicView.getToolbarActions();
    if (actions != null) {
      dynamicActions=new ActionContributionItem[actions.length];
      for (int i=0; i < actions.length; i++) {
        dynamicActions[i]=new ActionContributionItem(actions[i]);
        toolbar.appendToGroup(ValgrindUIPlugin.TOOLBAR_LOC_GROUP_ID,dynamicActions[i]);
      }
    }
  }
 else {
    dynamicView=null;
  }
  IMenuManager menu=getViewSite().getActionBars().getMenuManager();
  menu.removeAll();
  hasDynamicContent=dynamicViewHolder.getChildren().length > 0;
  if (hasDynamicContent) {
    menu.add(showCoreAction);
    menu.add(showToolAction);
  }
  menu.update(true);
  toolbar.update(true);
  dynamicViewHolder.layout(true);
  return dynamicView;
}","public IValgrindToolView createDynamicContent(String description,String toolID) throws CoreException {
  setContentDescription(description);
  IToolBarManager toolbar=getViewSite().getActionBars().getToolBarManager();
  if (dynamicActions != null) {
    for (    ActionContributionItem item : dynamicActions) {
      toolbar.remove(item);
    }
  }
  if (dynamicView != null) {
    dynamicView.dispose();
  }
  if (messages != null) {
    messagesViewer.getTreeViewer().setInput(null);
    messages=null;
  }
  for (  Control child : dynamicViewHolder.getChildren()) {
    if (!child.isDisposed()) {
      child.dispose();
    }
  }
  if (toolID != null) {
    dynamicView=ValgrindUIPlugin.getDefault().getToolView(toolID);
    dynamicView.createPartControl(dynamicViewHolder);
    IAction[] actions=dynamicView.getToolbarActions();
    if (actions != null) {
      dynamicActions=new ActionContributionItem[actions.length];
      for (int i=0; i < actions.length; i++) {
        dynamicActions[i]=new ActionContributionItem(actions[i]);
        toolbar.appendToGroup(ValgrindUIPlugin.TOOLBAR_LOC_GROUP_ID,dynamicActions[i]);
      }
    }
  }
 else {
    dynamicView=null;
  }
  IMenuManager menu=getViewSite().getActionBars().getMenuManager();
  menu.removeAll();
  hasDynamicContent=dynamicViewHolder.getChildren().length > 0;
  if (hasDynamicContent) {
    menu.add(showCoreAction);
    menu.add(showToolAction);
  }
  menu.update(true);
  toolbar.update(true);
  dynamicViewHolder.layout(true);
  return dynamicView;
}",0.9660556687033266
92821,"public ImportTraceWizardPage(IWorkbench workbench,IStructuredSelection selection){
  super(workbench,selection);
  LTTngProjectNode folder=(LTTngProjectNode)selection.getFirstElement();
  project=folder.getProject();
  String path=folder.getTracesFolder().getFolder().getFullPath().toOSString();
  initialContainerString=path;
  setContainerFieldValue(path);
}","public ImportTraceWizardPage(IWorkbench workbench,IStructuredSelection selection){
  super(workbench,selection);
  project=(IProject)selection.getFirstElement();
  IFolder folder=project.getFolder(LTTngProjectNode.TRACE_FOLDER_NAME);
  if (folder == null) {
    MessageDialog.openError(getShell(),Messages.ImportTrace_ErrorTitle,Messages.ImportTrace_InvalidProject);
  }
  String path=folder.getFullPath().toOSString();
  initialContainerString=path;
  setContainerFieldValue(path);
}",0.556872037914692
92822,"@Override protected Control createContents(Composite parent){
  Composite client=new Composite(parent,SWT.NONE);
  client.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout(3,false);
  layout.marginHeight=0;
  layout.marginWidth=0;
  client.setLayout(layout);
  Label label=new Label(client,SWT.NONE);
  label.setText(Messages.TraceLibraryPath_label);
  traceLibraryPath=new Text(client,SWT.BORDER);
  traceLibraryPath.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
  traceLibraryPath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      setValid(validateInputs());
    }
  }
);
  browsePathButton=new Button(client,SWT.PUSH);
  browsePathButton.setLayoutData(new GridData(SWT.END,SWT.CENTER,false,false));
  browsePathButton.setText(Messages.TraceLibraryPath_browseBtn);
  browsePathButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String dir=new DirectoryDialog(Display.getDefault().getActiveShell()).open();
      if (dir != null) {
        traceLibraryPath.setText(dir);
      }
    }
  }
);
  Label noteBoldLabel=new Label(client,SWT.BOLD);
  noteBoldLabel.setText(Messages.TraceLibraryPath_Note);
  noteBoldLabel.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false));
  Font font=noteBoldLabel.getFont();
  if (font.getFontData().length > 0)   noteBoldLabel.setFont(new Font(client.getDisplay(),font.getFontData()[0].getName(),font.getFontData()[0].getHeight(),SWT.BOLD));
  Label noteTextLabel=new Label(client,SWT.WRAP);
  noteTextLabel.setText(Messages.TraceLibraryPath_Message);
  GridData gd=new GridData(SWT.FILL,SWT.CENTER,true,false);
  gd.widthHint=400;
  gd.horizontalSpan=2;
  noteTextLabel.setLayoutData(gd);
  performDefaults();
  return client;
}","@Override protected Control createContents(Composite parent){
  Composite client=new Composite(parent,SWT.NONE);
  client.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout(3,false);
  layout.marginHeight=0;
  layout.marginWidth=0;
  client.setLayout(layout);
  Label label=new Label(client,SWT.NONE);
  label.setText(Messages.TraceLibraryPath_label);
  traceLibraryPath=new Text(client,SWT.BORDER);
  traceLibraryPath.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
  traceLibraryPath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      setValid(validateInputs());
    }
  }
);
  browsePathButton=new Button(client,SWT.PUSH);
  browsePathButton.setLayoutData(new GridData(SWT.END,SWT.CENTER,false,false));
  browsePathButton.setText(Messages.TraceLibraryPath_browseBtn);
  browsePathButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String dir=new DirectoryDialog(Display.getDefault().getActiveShell()).open();
      if (dir != null) {
        traceLibraryPath.setText(dir);
      }
    }
  }
);
  Label noLabel=new Label(client,SWT.NONE);
  noLabel.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false));
  Label descTextLabel=new Label(client,SWT.WRAP);
  descTextLabel.setText(Messages.TraceLibraryPathProperty_Message);
  GridData gd=new GridData(SWT.FILL,SWT.CENTER,true,false);
  gd.widthHint=400;
  gd.horizontalSpan=2;
  descTextLabel.setLayoutData(gd);
  Label noteBoldLabel=new Label(client,SWT.BOLD);
  noteBoldLabel.setText(Messages.TraceLibraryPath_Note);
  noteBoldLabel.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false));
  Font font=noteBoldLabel.getFont();
  if (font.getFontData().length > 0)   noteBoldLabel.setFont(new Font(client.getDisplay(),font.getFontData()[0].getName(),font.getFontData()[0].getHeight(),SWT.BOLD));
  Label noteTextLabel=new Label(client,SWT.WRAP);
  noteTextLabel.setText(Messages.TraceLibraryPath_Message);
  gd=new GridData(SWT.FILL,SWT.CENTER,true,false);
  gd.widthHint=400;
  gd.horizontalSpan=2;
  noteTextLabel.setLayoutData(gd);
  performDefaults();
  return client;
}",0.7593371258966114
92823,"public void createControl(Composite parent){
  Composite client=new Composite(parent,SWT.NONE);
  client.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout(3,false);
  layout.marginHeight=0;
  layout.marginWidth=0;
  client.setLayout(layout);
  Label label=new Label(client,SWT.NONE);
  label.setText(Messages.TraceLibraryPath_label);
  traceLibraryPath=new Text(client,SWT.BORDER);
  traceLibraryPath.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
  traceLibraryPath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      boolean valid=validatePage();
      setPageComplete(valid);
    }
  }
);
  browsePathButton=new Button(client,SWT.PUSH);
  browsePathButton.setLayoutData(new GridData(SWT.END,SWT.CENTER,false,false));
  browsePathButton.setText(Messages.TraceLibraryPath_browseBtn);
  browsePathButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String dir=new DirectoryDialog(Display.getDefault().getActiveShell()).open();
      if (dir != null) {
        traceLibraryPath.setText(dir);
      }
    }
  }
);
  Label noteBoldLabel=new Label(client,SWT.BOLD);
  noteBoldLabel.setText(Messages.TraceLibraryPath_Note);
  noteBoldLabel.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false));
  Font font=noteBoldLabel.getFont();
  if (font.getFontData().length > 0)   noteBoldLabel.setFont(new Font(client.getDisplay(),font.getFontData()[0].getName(),font.getFontData()[0].getHeight(),SWT.BOLD));
  Label noteTextLabel=new Label(client,SWT.WRAP);
  noteTextLabel.setText(Messages.TraceLibraryPath_Message);
  GridData gd=new GridData(SWT.FILL,SWT.CENTER,true,false);
  gd.widthHint=400;
  gd.horizontalSpan=2;
  noteTextLabel.setLayoutData(gd);
  setControl(client);
}","public void createControl(Composite parent){
  Composite client=new Composite(parent,SWT.NONE);
  client.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout(3,false);
  layout.marginHeight=0;
  layout.marginWidth=0;
  client.setLayout(layout);
  Label label=new Label(client,SWT.NONE);
  label.setText(Messages.TraceLibraryPath_label);
  traceLibraryPath=new Text(client,SWT.BORDER);
  traceLibraryPath.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
  traceLibraryPath.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      boolean valid=validatePage();
      setPageComplete(valid);
    }
  }
);
  browsePathButton=new Button(client,SWT.PUSH);
  browsePathButton.setLayoutData(new GridData(SWT.END,SWT.CENTER,false,false));
  browsePathButton.setText(Messages.TraceLibraryPath_browseBtn);
  browsePathButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String dir=new DirectoryDialog(Display.getDefault().getActiveShell()).open();
      if (dir != null) {
        traceLibraryPath.setText(dir);
      }
    }
  }
);
  Label noLabel=new Label(client,SWT.NONE);
  noLabel.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false));
  Label descTextLabel=new Label(client,SWT.WRAP);
  descTextLabel.setText(Messages.TraceLibraryPathWizard_Message);
  GridData gd=new GridData(SWT.FILL,SWT.CENTER,true,false);
  gd.widthHint=400;
  gd.horizontalSpan=2;
  descTextLabel.setLayoutData(gd);
  Label noteBoldLabel=new Label(client,SWT.BOLD);
  noteBoldLabel.setText(Messages.TraceLibraryPath_Note);
  noteBoldLabel.setLayoutData(new GridData(SWT.RIGHT,SWT.TOP,false,false));
  Font font=noteBoldLabel.getFont();
  if (font.getFontData().length > 0)   noteBoldLabel.setFont(new Font(client.getDisplay(),font.getFontData()[0].getName(),font.getFontData()[0].getHeight(),SWT.BOLD));
  Label noteTextLabel=new Label(client,SWT.WRAP);
  noteTextLabel.setText(Messages.TraceLibraryPath_Message);
  gd=new GridData(SWT.FILL,SWT.CENTER,true,false);
  gd.widthHint=400;
  gd.horizontalSpan=2;
  noteTextLabel.setLayoutData(gd);
  setControl(client);
}",0.7605843030453082
92824,"/** 
 * Open an existing trace. <p> The tracepath should have been set already,
 * @exception JniOpenTraceFailedException Thrown if the open failed
 */
public void openTrace() throws JniException {
  if (tracepath == ""String_Node_Str"") {
    throw new JniTraceException(""String_Node_Str"");
  }
  if (thisTracePtr.getPointer() != NULL) {
    closeTrace();
  }
  int newLibraryId=initializeLibrary();
  if (newLibraryId != -1) {
    long newPtr=NULL;
    try {
      newPtr=ltt_openTraceLive(newLibraryId,tracepath,printLttDebug);
    }
 catch (    UnsatisfiedLinkError e) {
    }
    if (newPtr == NULL) {
      isLiveTraceSupported=false;
      newPtr=ltt_openTrace(newLibraryId,tracepath,printLttDebug);
    }
    if (newPtr == NULL) {
      thisTracePtr=new Jni_C_Pointer_And_Library_Id();
      throw new JniOpenTraceFailedException(""String_Node_Str"");
    }
    thisTracePtr=new Jni_C_Pointer_And_Library_Id(newLibraryId,newPtr);
    populateTraceInformation();
  }
 else {
    thisTracePtr=new Jni_C_Pointer_And_Library_Id();
    throw new JniTraceException(""String_Node_Str"" + ""String_Node_Str"");
  }
}","/** 
 * Open an existing trace. <p> The tracepath should have been set already,
 * @exception JniOpenTraceFailedException Thrown if the open failed
 */
public void openTrace() throws JniException {
  if (tracepath == ""String_Node_Str"") {
    throw new JniTraceException(""String_Node_Str"");
  }
  if (thisTracePtr.getPointer() != NULL) {
    closeTrace();
  }
  int newLibraryId=initializeLibrary();
  if (newLibraryId != -1) {
    long newPtr=NULL;
    try {
      newPtr=ltt_openTraceLive(newLibraryId,tracepath,printLttDebug);
    }
 catch (    UnsatisfiedLinkError e) {
    }
    if (newPtr == NULL) {
      isLiveTraceSupported=false;
      newPtr=ltt_openTrace(newLibraryId,tracepath,printLttDebug);
    }
    if (newPtr == NULL) {
      thisTracePtr=new Jni_C_Pointer_And_Library_Id();
      throw new JniOpenTraceFailedException(""String_Node_Str"");
    }
    thisTracePtr=new Jni_C_Pointer_And_Library_Id(newLibraryId,newPtr);
    populateTraceInformation();
  }
 else {
    thisTracePtr=new Jni_C_Pointer_And_Library_Id();
    throw new JniTraceException(""String_Node_Str"" + getTraceLibFullPath() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
}",0.9568221070811744
92825,"/** 
 * Function place holder to load the correct C library. <p> <br> Can be as simple as calling ltt_initializeHandle(LIBRARY_NAME) with the correct .so instead of LIBRARY_NAME.<br> You may also want to perform some check or some additionnal validations.<br> <br> <b>!! Override this with you version specific implementation.</b><br>
 * @return integer that is the library id, or -1 if the load wasunsuccessful
 */
public abstract int initializeLibrary();","/** 
 * Initialize the C library. <p> Call the library loader with the .so we wish to load.
 * @return The library id if successful, -1 if something went wrong
 */
public int initializeLibrary(){
  return ltt_initializeHandle(getTraceLibFullPath());
}",0.2206506364922206
92826,"private void selectTrace(LTTngTraceNode traceNode){
  if (fSelectedExperiment != null) {
    fSelectedExperiment.dispose();
  }
  try {
    ITmfTrace[] traces=new ITmfTrace[1];
    IResource res=traceNode.getFolder();
    String location=res.getLocation().toOSString();
    IProject project=traceNode.getProject().getProject();
    String traceLibPath=TraceHelper.getTraceLibDirFromProject(project);
    ITmfTrace trace=new LTTngTrace(location,traceLibPath,waitForCompletion,false);
    traces[0]=trace;
    fSelectedExperiment=new LTTngExperiment<LttngEvent>(LttngEvent.class,traceNode.getName(),traces);
    TmfExperiment.setCurrentExperiment(fSelectedExperiment);
    StateManagerFactory.getExperimentManager().experimentSelected_prep((TmfExperiment<LttngEvent>)fSelectedExperiment);
    broadcast(new TmfExperimentSelectedSignal<LttngEvent>(this,fSelectedExperiment));
  }
 catch (  FileNotFoundException e) {
    return;
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}","private void selectTrace(LTTngTraceNode traceNode){
  if (fSelectedExperiment != null) {
    fSelectedExperiment.dispose();
  }
  try {
    ITmfTrace[] traces=new ITmfTrace[1];
    IResource res=traceNode.getFolder();
    String location=res.getLocation().toOSString();
    IProject project=traceNode.getProject().getProject();
    String traceLibPath=TraceHelper.getTraceLibDirFromProject(project);
    ITmfTrace trace=new LTTngTrace(location,traceLibPath,waitForCompletion,false);
    traces[0]=trace;
    fSelectedExperiment=new LTTngExperiment<LttngEvent>(LttngEvent.class,traceNode.getName(),traces);
    TmfExperiment.setCurrentExperiment(fSelectedExperiment);
    StateManagerFactory.getExperimentManager().experimentSelected_prep((TmfExperiment<LttngEvent>)fSelectedExperiment);
    broadcast(new TmfExperimentSelectedSignal<LttngEvent>(this,fSelectedExperiment));
  }
 catch (  FileNotFoundException e) {
    return;
  }
catch (  Exception e) {
    MessageDialog.openError(getViewSite().getShell(),Messages.SelectTrace_ErrorTitle,e.getMessage());
  }
}",0.9447432762836184
92827,"protected IValgrindMessage[] parseLogs(IPath outputPath) throws IOException, CoreException {
  List<IValgrindMessage> messages=new ArrayList<IValgrindMessage>();
  for (  File log : outputPath.toFile().listFiles(LOG_FILTER)) {
    ValgrindCoreParser parser=new ValgrindCoreParser(log,launch);
    IValgrindMessage[] results=parser.getMessages();
    messages.addAll(Arrays.asList(results));
    createMarkers(results);
  }
  return messages.toArray(new IValgrindMessage[messages.size()]);
}","protected IValgrindMessage[] parseLogs(IPath outputPath) throws IOException, CoreException {
  List<IValgrindMessage> messages=new ArrayList<IValgrindMessage>();
  for (  File log : outputPath.toFile().listFiles(LOG_FILTER)) {
    ValgrindCoreParser parser=new ValgrindCoreParser(log,launch);
    IValgrindMessage[] results=parser.getMessages();
    if (results.length == 0) {
      results=new IValgrindMessage[1];
      results[0]=new ValgrindInfo(null,Messages.getString(""String_Node_Str""),launch);
    }
    messages.addAll(Arrays.asList(results));
    createMarkers(results);
  }
  return messages.toArray(new IValgrindMessage[messages.size()]);
}",0.8581436077057794
92828,"@Override protected void initializeDefaultPreferences(IPreferenceStore store){
  ValgrindCommand valCommand=new ValgrindCommand();
  try {
    store.setDefault(ValgrindPreferencePage.VALGRIND_PATH,valCommand.whichValgrind());
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","@Override protected void initializeDefaultPreferences(IPreferenceStore store){
  ValgrindCommand valCommand=new ValgrindCommand();
  try {
    store.setDefault(ValgrindPreferencePage.VALGRIND_ENABLE,true);
    store.setDefault(ValgrindPreferencePage.VALGRIND_PATH,valCommand.whichValgrind());
  }
 catch (  IOException e) {
    store.setDefault(ValgrindPreferencePage.VALGRIND_ENABLE,false);
  }
}",0.7865497076023392
92829,"@Override public boolean performOk(){
  if (passesValidityChecks()) {
    ValgrindPlugin.getDefault().savePluginPreferences();
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performOk(){
  if (isValid()) {
    store.setValue(VALGRIND_ENABLE,enableButton.getSelection());
    store.setValue(VALGRIND_PATH,binText.getText());
    ValgrindPlugin.getDefault().savePluginPreferences();
    return true;
  }
 else {
    return false;
  }
}",0.2894168466522678
92830,"@Override protected void performDefaults(){
  super.performDefaults();
  store.setValue(VALGRIND_PATH,store.getDefaultString(VALGRIND_PATH));
  binText.setText(store.getDefaultString(VALGRIND_PATH));
}","@Override protected void performDefaults(){
  store.setValue(VALGRIND_ENABLE,store.getDefaultBoolean(VALGRIND_ENABLE));
  enableButton.setSelection(store.getDefaultBoolean(VALGRIND_ENABLE));
  store.setValue(VALGRIND_PATH,store.getDefaultString(VALGRIND_PATH));
  binText.setText(store.getDefaultString(VALGRIND_PATH));
  super.performDefaults();
}",0.6557377049180327
92831,"@Override protected Control createContents(Composite parent){
  Composite composite=new Composite(parent,SWT.NULL);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  composite.setLayout(layout);
  GridData data=new GridData();
  data.verticalAlignment=SWT.FILL;
  data.horizontalAlignment=SWT.FILL;
  data.grabExcessHorizontalSpace=true;
  data.grabExcessVerticalSpace=true;
  composite.setLayoutData(data);
  Label pathLabel=new Label(composite,SWT.NONE);
  pathLabel.setText(Messages.getString(""String_Node_Str""));
  binText=new Text(composite,SWT.SINGLE | SWT.BORDER);
  GridData binTextData=new GridData();
  binTextData.horizontalAlignment=SWT.FILL;
  binTextData.grabExcessHorizontalSpace=true;
  binText.setLayoutData(binTextData);
  button=new Button(composite,SWT.PUSH);
  button.setText(Messages.getString(""String_Node_Str""));
  button.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      Shell shell=new Shell();
      FileDialog dialog=new FileDialog(shell);
      String path=dialog.open();
      if (path != null) {
        binText.setText(path);
      }
    }
  }
);
  loadPreferences();
  return parent;
}","@Override protected Control createContents(Composite parent){
  Composite enableTop=new Composite(parent,SWT.NONE);
  enableTop.setLayout(new GridLayout());
  GridData enableData=new GridData(SWT.FILL,SWT.FILL,true,true);
  enableTop.setLayoutData(enableData);
  enableButton=new Button(enableTop,SWT.CHECK);
  enableButton.setText(Messages.getString(""String_Node_Str""));
  enableButton.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      checkValgrindEnablement();
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  Composite locationTop=new Composite(enableTop,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.marginTop=0;
  locationTop.setLayout(layout);
  GridData data=new GridData();
  data.verticalAlignment=SWT.FILL;
  data.horizontalAlignment=SWT.FILL;
  data.grabExcessHorizontalSpace=true;
  data.grabExcessVerticalSpace=true;
  locationTop.setLayoutData(data);
  Label pathLabel=new Label(locationTop,SWT.NONE);
  pathLabel.setText(Messages.getString(""String_Node_Str""));
  binText=new Text(locationTop,SWT.SINGLE | SWT.BORDER);
  GridData binTextData=new GridData();
  binTextData.horizontalAlignment=SWT.FILL;
  binTextData.grabExcessHorizontalSpace=true;
  binText.setLayoutData(binTextData);
  browseButton=new Button(locationTop,SWT.PUSH);
  browseButton.setText(Messages.getString(""String_Node_Str""));
  browseButton.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      Shell shell=new Shell();
      FileDialog dialog=new FileDialog(shell);
      String path=dialog.open();
      if (path != null) {
        binText.setText(path);
      }
    }
  }
);
  loadPreferences();
  return parent;
}",0.5320864237342793
92832,"private void loadPreferences(){
  binText.setText(store.getString(VALGRIND_PATH));
}","private void loadPreferences(){
  enableButton.setSelection(store.getBoolean(VALGRIND_ENABLE));
  binText.setText(store.getString(VALGRIND_PATH));
  checkValgrindEnablement();
}",0.6436781609195402
92833,"public ColorSetting(RGB foreground,RGB background,int tickColorIndex,ITmfFilterTreeNode filter){
  fForegroundRGB=foreground;
  fBackgroundRGB=background;
  fTickColorIndex=tickColorIndex;
  fFilter=filter;
  Display display=Display.getDefault();
  fForegroundColor=new Color(display,fForegroundRGB);
  fBackgroundColor=new Color(display,fBackgroundRGB);
  fDimmedForegroundColor=new Color(display,ColorUtil.blend(fForegroundRGB,fBackgroundRGB));
  fDimmedBackgroundColor=new Color(display,ColorUtil.blend(fBackgroundRGB,display.getSystemColor(SWT.COLOR_LIST_BACKGROUND).getRGB()));
}","/** 
 * You must dispose the color setting when it is no longer required.
 */
public ColorSetting(RGB foreground,RGB background,int tickColorIndex,ITmfFilterTreeNode filter){
  fForegroundRGB=foreground;
  fBackgroundRGB=background;
  fTickColorIndex=tickColorIndex;
  fFilter=filter;
  Display display=Display.getDefault();
  fForegroundColor=new Color(display,fForegroundRGB);
  fBackgroundColor=new Color(display,fBackgroundRGB);
  fDimmedForegroundColor=new Color(display,ColorUtil.blend(fForegroundRGB,fBackgroundRGB));
  fDimmedBackgroundColor=new Color(display,ColorUtil.blend(fBackgroundRGB,display.getSystemColor(SWT.COLOR_LIST_BACKGROUND).getRGB()));
}",0.9373996789727128
92834,"public static ColorSetting[] load(String pathName){
  if (!new File(pathName).canRead()) {
    return new ColorSetting[0];
  }
  SAXParserFactory parserFactory=SAXParserFactory.newInstance();
  parserFactory.setNamespaceAware(true);
  try {
    XMLReader saxReader=parserFactory.newSAXParser().getXMLReader();
    ColorSettingsContentHandler handler=new ColorSettingsContentHandler();
    saxReader.setContentHandler(handler);
    saxReader.parse(pathName);
    return handler.colorSettings.toArray(new ColorSetting[0]);
  }
 catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return new ColorSetting[0];
}","public static ColorSetting[] load(String pathName){
  if (!new File(pathName).canRead()) {
    return new ColorSetting[0];
  }
  SAXParserFactory parserFactory=SAXParserFactory.newInstance();
  parserFactory.setNamespaceAware(true);
  ColorSettingsContentHandler handler=new ColorSettingsContentHandler();
  try {
    XMLReader saxReader=parserFactory.newSAXParser().getXMLReader();
    saxReader.setContentHandler(handler);
    saxReader.parse(pathName);
    return handler.colorSettings.toArray(new ColorSetting[0]);
  }
 catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  for (  ColorSetting colorSetting : handler.colorSettings) {
    colorSetting.dispose();
  }
  return new ColorSetting[0];
}",0.8460559796437659
92835,"@Override public void run(){
  FileDialog fileDialog=new FileDialog(fShell,SWT.OPEN);
  fileDialog.setFilterExtensions(new String[]{""String_Node_Str""});
  String pathName=fileDialog.open();
  if (pathName != null) {
    ColorSetting[] colorSettings=ColorSettingsXML.load(pathName);
    if (colorSettings.length > 0) {
      if (fColorSettings.size() > 0) {
        boolean overwrite=MessageDialog.openQuestion(fShell,Messages.ColorsView_ImportOverwriteDialogTitle,Messages.ColorsView_ImportOverwriteDialogMessage1 + Messages.ColorsView_ImportOverwriteDialogMessage2);
        if (overwrite) {
          for (          Control control : fListComposite.getChildren()) {
            if (control instanceof ColorSettingRow) {
              control.dispose();
            }
          }
          fColorSettings=new ArrayList<ColorSetting>();
          fSelectedRow=null;
        }
      }
      for (      ColorSetting colorSetting : colorSettings) {
        ColorSettingRow row=new ColorSettingRow(fListComposite,colorSetting);
        if (fSelectedRow == null) {
          fColorSettings.add(colorSetting);
          row.moveAbove(fFillerComposite);
        }
 else {
          fColorSettings.add(fColorSettings.indexOf(fSelectedRow.getColorSetting()),colorSetting);
          row.moveAbove(fSelectedRow);
        }
      }
      refresh();
      ColorSettingsManager.setColorSettings(fColorSettings.toArray(new ColorSetting[0]));
    }
  }
}","@Override public void run(){
  FileDialog fileDialog=new FileDialog(fShell,SWT.OPEN);
  fileDialog.setFilterExtensions(new String[]{""String_Node_Str""});
  String pathName=fileDialog.open();
  if (pathName != null) {
    ColorSetting[] colorSettings=ColorSettingsXML.load(pathName);
    if (colorSettings.length > 0) {
      if (fColorSettings.size() > 0) {
        boolean overwrite=MessageDialog.openQuestion(fShell,Messages.ColorsView_ImportOverwriteDialogTitle,Messages.ColorsView_ImportOverwriteDialogMessage1 + Messages.ColorsView_ImportOverwriteDialogMessage2);
        if (overwrite) {
          for (          Control control : fListComposite.getChildren()) {
            if (control instanceof ColorSettingRow) {
              ((ColorSettingRow)control).fColorSetting.dispose();
              control.dispose();
            }
          }
          fColorSettings=new ArrayList<ColorSetting>();
          fSelectedRow=null;
        }
      }
      for (      ColorSetting colorSetting : colorSettings) {
        ColorSettingRow row=new ColorSettingRow(fListComposite,colorSetting);
        if (fSelectedRow == null) {
          fColorSettings.add(colorSetting);
          row.moveAbove(fFillerComposite);
        }
 else {
          fColorSettings.add(fColorSettings.indexOf(fSelectedRow.getColorSetting()),colorSetting);
          row.moveAbove(fSelectedRow);
        }
      }
      refresh();
      ColorSettingsManager.setColorSettings(fColorSettings.toArray(new ColorSetting[0]));
    }
  }
}",0.9775815217391304
92836,"/** 
 * Returns the lifeline categories array set for the this frame
 * @return the lifeline categories array or null if not set
 */
public LifelineCategories[] getLifelineCategories(){
  return lifelineCategories;
}","/** 
 * Returns the lifeline categories array set for the this frame
 * @return the lifeline categories array or null if not set
 */
public LifelineCategories[] getLifelineCategories(){
  return Arrays.copyOf(lifelineCategories,lifelineCategories.length);
}",0.8372093023255814
92837,"/** 
 * Set the lifeline categories which will be use during the lifelines creation
 * @see Lifeline#setCategory(int)
 * @param categories the lifeline categories array
 */
public void setLifelineCategories(LifelineCategories[] categories){
  lifelineCategories=categories;
}","/** 
 * Set the lifeline categories which will be use during the lifelines creation
 * @see Lifeline#setCategory(int)
 * @param categories the lifeline categories array
 */
public void setLifelineCategories(LifelineCategories[] categories){
  lifelineCategories=Arrays.copyOf(categories,categories.length);
}",0.9090909090909092
92838,"public Image getResourceImage(String _name){
  try {
    URL url=new URL(BASIC_URL,""String_Node_Str"" + _name);
    ImageDescriptor img=ImageDescriptor.createFromURL(url);
    return img.createImage();
  }
 catch (  Exception E) {
    System.err.println(E);
  }
  return null;
}","public Image getResourceImage(String _name){
  try {
    URL BASIC_URL=new URL(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    URL url=new URL(BASIC_URL,""String_Node_Str"" + _name);
    ImageDescriptor img=ImageDescriptor.createFromURL(url);
    return img.createImage();
  }
 catch (  MalformedURLException E) {
    System.err.println(E);
  }
  return null;
}",0.8179012345679012
92839,"@Override public void handleData(TmfEvent event){
  super.handleData(event);
  if ((fMonitor != null) && fMonitor.isCanceled()) {
    cancel();
    return;
  }
  ITmfSyncSequenceDiagramEvent sdEvent=getSequnceDiagramEvent(event);
  if (sdEvent != null) {
    if (fCriteria.isLifeLineSelected()) {
      if (fCriteria.matches(sdEvent.getSender())) {
        fFoundTime=event.getTimestamp().clone();
        fIsFound=true;
        super.cancel();
      }
      if (fCriteria.matches(sdEvent.getReceiver())) {
        fFoundTime=event.getTimestamp().clone();
        fIsFound=true;
        super.cancel();
      }
    }
    if (fCriteria.isSyncMessageSelected()) {
      if (fCriteria.matches(sdEvent.getName())) {
        fFoundTime=event.getTimestamp().clone();
        fIsFound=true;
        super.cancel();
      }
    }
  }
}","@Override public void handleData(TmfEvent event){
  super.handleData(event);
  if ((fMonitor != null) && fMonitor.isCanceled()) {
    super.cancel();
    return;
  }
  ITmfSyncSequenceDiagramEvent sdEvent=getSequnceDiagramEvent(event);
  if (sdEvent != null) {
    if (fCriteria.isLifeLineSelected()) {
      if (fCriteria.matches(sdEvent.getSender())) {
        fFoundTime=event.getTimestamp().clone();
        fIsFound=true;
        super.cancel();
      }
      if (fCriteria.matches(sdEvent.getReceiver())) {
        fFoundTime=event.getTimestamp().clone();
        fIsFound=true;
        super.cancel();
      }
    }
    if (fCriteria.isSyncMessageSelected()) {
      if (fCriteria.matches(sdEvent.getName())) {
        fFoundTime=event.getTimestamp().clone();
        fIsFound=true;
        super.cancel();
      }
    }
  }
}",0.9963855421686748
92840,"/** 
 * Loads the Sequence diagram default preference settings
 */
@Override protected void performDefaults(){
  link.loadDefault();
  tooltip.loadDefault();
  noExternalTime.loadDefault();
  useGrad.loadDefault();
  lifelineWidth.loadDefault();
  Set<String> keySet=SDViewPref.getInstance().fontPref.keySet();
  Iterator<String> it=keySet.iterator();
  while (it.hasNext()) {
    Object prefName=it.next();
    if (prefName instanceof String) {
      font.setPreferenceName((String)prefName);
      font.loadDefault();
      font.setPreferenceName((String)prefName + TEMP_TAG);
      font.store();
    }
  }
  keySet=SDViewPref.getInstance().backColorPref.keySet();
  it=keySet.iterator();
  while (it.hasNext()) {
    Object prefName=it.next();
    if (prefName instanceof String) {
      backGroundColor.setPreferenceName((String)prefName);
      backGroundColor.loadDefault();
      backGroundColor.setPreferenceName((String)prefName + TEMP_TAG);
      backGroundColor.store();
    }
  }
  backGroundColor.setPreferenceName(SDViewPref.fontList[classItemList.getSelectionIndex()] + SDViewPref.BACK_COLOR_POSTFIX + TEMP_TAG);
  backGroundColor.load();
  keySet=SDViewPref.getInstance().foreColorPref.keySet();
  it=keySet.iterator();
  while (it.hasNext()) {
    Object prefName=it.next();
    if (prefName instanceof String) {
      lineColor.setPreferenceName((String)prefName);
      lineColor.loadDefault();
      lineColor.setPreferenceName((String)prefName + TEMP_TAG);
      lineColor.store();
    }
  }
  lineColor.setPreferenceName(SDViewPref.fontList[classItemList.getSelectionIndex()] + SDViewPref.FORE_COLOR_POSTFIX + TEMP_TAG);
  lineColor.load();
  keySet=SDViewPref.getInstance().textColorPref.keySet();
  it=keySet.iterator();
  while (it.hasNext()) {
    Object prefName=it.next();
    if (prefName instanceof String) {
      textColor.setPreferenceName((String)prefName);
      textColor.loadDefault();
      textColor.setPreferenceName((String)prefName + TEMP_TAG);
      textColor.store();
    }
  }
  textColor.setPreferenceName(SDViewPref.fontList[classItemList.getSelectionIndex()] + SDViewPref.TEXT_COLOR_POSTFIX + TEMP_TAG);
  textColor.load();
}","/** 
 * Loads the Sequence diagram default preference settings
 */
@Override protected void performDefaults(){
  link.loadDefault();
  tooltip.loadDefault();
  noExternalTime.loadDefault();
  useGrad.loadDefault();
  lifelineWidth.loadDefault();
  Set<String> keySet=SDViewPref.getInstance().fontPref.keySet();
  Iterator<String> it=keySet.iterator();
  while (it.hasNext()) {
    Object prefName=it.next();
    if (prefName instanceof String) {
      font.setPreferenceName((String)prefName);
      font.loadDefault();
      font.setPreferenceName((String)prefName + TEMP_TAG);
      font.store();
    }
  }
  keySet=SDViewPref.getInstance().backColorPref.keySet();
  it=keySet.iterator();
  while (it.hasNext()) {
    Object prefName=it.next();
    if (prefName instanceof String) {
      backGroundColor.setPreferenceName((String)prefName);
      backGroundColor.loadDefault();
      backGroundColor.setPreferenceName((String)prefName + TEMP_TAG);
      backGroundColor.store();
    }
  }
  String[] fontList=SDViewPref.getFontList();
  backGroundColor.setPreferenceName(fontList[classItemList.getSelectionIndex()] + SDViewPref.BACK_COLOR_POSTFIX + TEMP_TAG);
  backGroundColor.load();
  keySet=SDViewPref.getInstance().foreColorPref.keySet();
  it=keySet.iterator();
  while (it.hasNext()) {
    Object prefName=it.next();
    if (prefName instanceof String) {
      lineColor.setPreferenceName((String)prefName);
      lineColor.loadDefault();
      lineColor.setPreferenceName((String)prefName + TEMP_TAG);
      lineColor.store();
    }
  }
  lineColor.setPreferenceName(fontList[classItemList.getSelectionIndex()] + SDViewPref.FORE_COLOR_POSTFIX + TEMP_TAG);
  lineColor.load();
  keySet=SDViewPref.getInstance().textColorPref.keySet();
  it=keySet.iterator();
  while (it.hasNext()) {
    Object prefName=it.next();
    if (prefName instanceof String) {
      textColor.setPreferenceName((String)prefName);
      textColor.loadDefault();
      textColor.setPreferenceName((String)prefName + TEMP_TAG);
      textColor.store();
    }
  }
  textColor.setPreferenceName(fontList[classItemList.getSelectionIndex()] + SDViewPref.TEXT_COLOR_POSTFIX + TEMP_TAG);
  textColor.load();
}",0.9818765771966048
92841,"/** 
 * Sent when a new selection occurs in the graphNode font list
 * @param e the selection event
 */
@Override public void widgetSelected(SelectionEvent e){
  font.store();
  lineColor.store();
  backGroundColor.store();
  textColor.store();
  font.setPreferenceName(SDViewPref.fontList[classItemList.getSelectionIndex()] + TEMP_TAG);
  font.load();
  backGroundColor.setPreferenceName(SDViewPref.fontList[classItemList.getSelectionIndex()] + SDViewPref.BACK_COLOR_POSTFIX + TEMP_TAG);
  backGroundColor.load();
  lineColor.setPreferenceName(SDViewPref.fontList[classItemList.getSelectionIndex()] + SDViewPref.FORE_COLOR_POSTFIX + TEMP_TAG);
  lineColor.load();
  textColor.setPreferenceName(SDViewPref.fontList[classItemList.getSelectionIndex()] + SDViewPref.TEXT_COLOR_POSTFIX + TEMP_TAG);
  textColor.load();
  if ((SDViewPref.fontList[classItemList.getSelectionIndex()].equals(SDViewPref.PREF_SYNC_MESS)) || (SDViewPref.fontList[classItemList.getSelectionIndex()].equals(SDViewPref.PREF_SYNC_MESS_RET)) || (SDViewPref.fontList[classItemList.getSelectionIndex()].equals(SDViewPref.PREF_ASYNC_MESS))|| (SDViewPref.fontList[classItemList.getSelectionIndex()].equals(SDViewPref.PREF_ASYNC_MESS_RET)))   backGroundColor.setEnabled(false,buttonArea);
 else   backGroundColor.setEnabled(true,buttonArea);
  if ((SDViewPref.fontList[classItemList.getSelectionIndex()].equals(SDViewPref.PREF_EXEC)) || (SDViewPref.fontList[classItemList.getSelectionIndex()].equals(SDViewPref.PREF_FRAME)))   textColor.setEnabled(false,buttonArea);
 else   textColor.setEnabled(true,buttonArea);
  if (SDViewPref.fontList[classItemList.getSelectionIndex()].equals(SDViewPref.PREF_FRAME))   font.setEnabled(false,buttonArea);
 else   font.setEnabled(true,buttonArea);
}","/** 
 * Sent when a new selection occurs in the graphNode font list
 * @param e the selection event
 */
@Override public void widgetSelected(SelectionEvent e){
  font.store();
  lineColor.store();
  backGroundColor.store();
  textColor.store();
  String[] fontList=SDViewPref.getFontList();
  font.setPreferenceName(fontList[classItemList.getSelectionIndex()] + TEMP_TAG);
  font.load();
  backGroundColor.setPreferenceName(fontList[classItemList.getSelectionIndex()] + SDViewPref.BACK_COLOR_POSTFIX + TEMP_TAG);
  backGroundColor.load();
  lineColor.setPreferenceName(fontList[classItemList.getSelectionIndex()] + SDViewPref.FORE_COLOR_POSTFIX + TEMP_TAG);
  lineColor.load();
  textColor.setPreferenceName(fontList[classItemList.getSelectionIndex()] + SDViewPref.TEXT_COLOR_POSTFIX + TEMP_TAG);
  textColor.load();
  if ((fontList[classItemList.getSelectionIndex()].equals(SDViewPref.PREF_SYNC_MESS)) || (fontList[classItemList.getSelectionIndex()].equals(SDViewPref.PREF_SYNC_MESS_RET)) || (fontList[classItemList.getSelectionIndex()].equals(SDViewPref.PREF_ASYNC_MESS))|| (fontList[classItemList.getSelectionIndex()].equals(SDViewPref.PREF_ASYNC_MESS_RET)))   backGroundColor.setEnabled(false,buttonArea);
 else   backGroundColor.setEnabled(true,buttonArea);
  if ((fontList[classItemList.getSelectionIndex()].equals(SDViewPref.PREF_EXEC)) || (fontList[classItemList.getSelectionIndex()].equals(SDViewPref.PREF_FRAME)))   textColor.setEnabled(false,buttonArea);
 else   textColor.setEnabled(true,buttonArea);
  if (fontList[classItemList.getSelectionIndex()].equals(SDViewPref.PREF_FRAME))   font.setEnabled(false,buttonArea);
 else   font.setEnabled(true,buttonArea);
}",0.7502191060473269
92842,"protected void swapPref(boolean toTemp){
  String TAG1=""String_Node_Str"";
  String TAG2=TEMP_TAG;
  if (!toTemp) {
    TAG1=TEMP_TAG;
    TAG2=""String_Node_Str"";
  }
  Set<String> keySet=SDViewPref.getInstance().fontPref.keySet();
  Iterator<String> it=keySet.iterator();
  while (it.hasNext()) {
    Object prefName=it.next();
    if (prefName instanceof String) {
      font.setPreferenceName((String)prefName + TAG1);
      font.load();
      font.setPreferenceName((String)prefName + TAG2);
      font.store();
    }
  }
  keySet=SDViewPref.getInstance().backColorPref.keySet();
  it=keySet.iterator();
  while (it.hasNext()) {
    Object prefName=it.next();
    if (prefName instanceof String) {
      backGroundColor.setPreferenceName((String)prefName + TAG1);
      backGroundColor.load();
      backGroundColor.setPreferenceName((String)prefName + TAG2);
      backGroundColor.store();
    }
  }
  keySet=SDViewPref.getInstance().foreColorPref.keySet();
  it=keySet.iterator();
  while (it.hasNext()) {
    Object prefName=it.next();
    if (prefName instanceof String) {
      lineColor.setPreferenceName((String)prefName + TAG1);
      lineColor.load();
      lineColor.setPreferenceName((String)prefName + TAG2);
      lineColor.store();
    }
  }
  keySet=SDViewPref.getInstance().textColorPref.keySet();
  it=keySet.iterator();
  while (it.hasNext()) {
    Object prefName=it.next();
    if (prefName instanceof String) {
      textColor.setPreferenceName((String)prefName + TAG1);
      textColor.load();
      textColor.setPreferenceName((String)prefName + TAG2);
      textColor.store();
    }
  }
  if (toTemp) {
    font.setPreferenceName(SDViewPref.fontList[classItemList.getSelectionIndex()] + TEMP_TAG);
    font.load();
    backGroundColor.setPreferenceName(SDViewPref.fontList[classItemList.getSelectionIndex()] + SDViewPref.BACK_COLOR_POSTFIX + TEMP_TAG);
    backGroundColor.load();
    lineColor.setPreferenceName(SDViewPref.fontList[classItemList.getSelectionIndex()] + SDViewPref.FORE_COLOR_POSTFIX + TEMP_TAG);
    lineColor.load();
    textColor.setPreferenceName(SDViewPref.fontList[classItemList.getSelectionIndex()] + SDViewPref.TEXT_COLOR_POSTFIX + TEMP_TAG);
    textColor.load();
  }
}","protected void swapPref(boolean toTemp){
  String TAG1=""String_Node_Str"";
  String TAG2=TEMP_TAG;
  if (!toTemp) {
    TAG1=TEMP_TAG;
    TAG2=""String_Node_Str"";
  }
  Set<String> keySet=SDViewPref.getInstance().fontPref.keySet();
  Iterator<String> it=keySet.iterator();
  while (it.hasNext()) {
    Object prefName=it.next();
    if (prefName instanceof String) {
      font.setPreferenceName((String)prefName + TAG1);
      font.load();
      font.setPreferenceName((String)prefName + TAG2);
      font.store();
    }
  }
  keySet=SDViewPref.getInstance().backColorPref.keySet();
  it=keySet.iterator();
  while (it.hasNext()) {
    Object prefName=it.next();
    if (prefName instanceof String) {
      backGroundColor.setPreferenceName((String)prefName + TAG1);
      backGroundColor.load();
      backGroundColor.setPreferenceName((String)prefName + TAG2);
      backGroundColor.store();
    }
  }
  keySet=SDViewPref.getInstance().foreColorPref.keySet();
  it=keySet.iterator();
  while (it.hasNext()) {
    Object prefName=it.next();
    if (prefName instanceof String) {
      lineColor.setPreferenceName((String)prefName + TAG1);
      lineColor.load();
      lineColor.setPreferenceName((String)prefName + TAG2);
      lineColor.store();
    }
  }
  keySet=SDViewPref.getInstance().textColorPref.keySet();
  it=keySet.iterator();
  while (it.hasNext()) {
    Object prefName=it.next();
    if (prefName instanceof String) {
      textColor.setPreferenceName((String)prefName + TAG1);
      textColor.load();
      textColor.setPreferenceName((String)prefName + TAG2);
      textColor.store();
    }
  }
  String[] fontList=SDViewPref.getFontList();
  if (toTemp) {
    font.setPreferenceName(fontList[classItemList.getSelectionIndex()] + TEMP_TAG);
    font.load();
    backGroundColor.setPreferenceName(fontList[classItemList.getSelectionIndex()] + SDViewPref.BACK_COLOR_POSTFIX + TEMP_TAG);
    backGroundColor.load();
    lineColor.setPreferenceName(fontList[classItemList.getSelectionIndex()] + SDViewPref.FORE_COLOR_POSTFIX + TEMP_TAG);
    lineColor.load();
    textColor.setPreferenceName(fontList[classItemList.getSelectionIndex()] + SDViewPref.TEXT_COLOR_POSTFIX + TEMP_TAG);
    textColor.load();
  }
}",0.9662466246624662
92843,"/** 
 * Creates the Sequence Diagram preference page content
 * @param parent the parent composite
 */
@Override protected Control createContents(Composite parent){
  parent.setLayout(new GridLayout());
  Composite page=new Composite(parent,SWT.NONE);
  GridLayout pageLayout=new GridLayout();
  pageLayout.numColumns=2;
  GridData pageLayoutdata=new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_VERTICAL| GridData.VERTICAL_ALIGN_FILL);
  page.setLayoutData(pageLayoutdata);
  page.setLayout(pageLayout);
  tooltip=new BooleanFieldEditor(SDViewPref.PREF_TOOLTIP,SDMessages._97,page);
  tooltip.setPreferenceStore(pref.getPreferenceStore());
  tooltip.load();
  link=new BooleanFieldEditor(SDViewPref.PREF_LINK_FONT,SDMessages._82,page);
  link.setPreferenceStore(pref.getPreferenceStore());
  link.load();
  noExternalTime=new BooleanFieldEditor(SDViewPref.PREF_EXCLUDE_EXTERNAL_TIME,SDMessages._83,page);
  noExternalTime.setPreferenceStore(pref.getPreferenceStore());
  noExternalTime.load();
  useGrad=new BooleanFieldEditor(SDViewPref.PREF_USE_GRADIENT,SDMessages._84,page);
  useGrad.setPreferenceStore(pref.getPreferenceStore());
  useGrad.load();
  Label separator=new Label(page,SWT.SEPARATOR | SWT.HORIZONTAL | SWT.SHADOW_NONE);
  GridData sepData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL | GridData.VERTICAL_ALIGN_FILL);
  separator.setLayoutData(sepData);
  Composite prefPage=new Composite(page,SWT.NONE);
  GridLayout prefPageLayout=new GridLayout();
  prefPage.setLayoutData(pageLayoutdata);
  prefPageLayout.numColumns=1;
  prefPage.setLayout(prefPageLayout);
  lifelineWidth=new IntegerFieldEditor(SDViewPref.PREF_LIFELINE_WIDTH,SDMessages._80,prefPage);
  lifelineWidth.setPreferenceStore(pref.getPreferenceStore());
  lifelineWidth.setValidRange(119,500);
  lifelineWidth.load();
  new Label(prefPage,SWT.SEPARATOR | SWT.HORIZONTAL | SWT.SHADOW_NONE);
  new Label(prefPage,SWT.SEPARATOR | SWT.HORIZONTAL | SWT.SHADOW_NONE);
  classItemList=new List(prefPage,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  GridData tabItemLayoutdata=new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_VERTICAL| GridData.VERTICAL_ALIGN_FILL);
  classItemList.setLayoutData(tabItemLayoutdata);
  for (int i=0; i < SDViewPref.fontList2.length; i++) {
    classItemList.add(SDViewPref.fontList2[i]);
  }
  classItemList.setSelection(0);
  classItemList.addSelectionListener(this);
  buttonArea=new Composite(prefPage,SWT.NONE);
  GridData tabItemLayoutdata2=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_VERTICAL | GridData.VERTICAL_ALIGN_FILL);
  buttonArea.setLayoutData(tabItemLayoutdata2);
  GridLayout buttonAreaLayout=new GridLayout();
  buttonAreaLayout.numColumns=1;
  buttonArea.setLayout(buttonAreaLayout);
  font=new FontFieldEditor(SDViewPref.fontList[0],""String_Node_Str"",SDMessages._81,buttonArea);
  font.getPreviewControl().setSize(500,500);
  font.setPreferenceStore(pref.getPreferenceStore());
  font.load();
  backGroundColor=new ColorFieldEditor(SDViewPref.fontList[0] + SDViewPref.BACK_COLOR_POSTFIX,SDMessages._85,buttonArea);
  backGroundColor.setPreferenceStore(pref.getPreferenceStore());
  backGroundColor.load();
  lineColor=new ColorFieldEditor(SDViewPref.fontList[0] + SDViewPref.FORE_COLOR_POSTFIX,SDMessages._86,buttonArea);
  lineColor.setPreferenceStore(pref.getPreferenceStore());
  lineColor.load();
  textColor=new ColorFieldEditor(SDViewPref.fontList[0] + SDViewPref.TEXT_COLOR_POSTFIX,SDMessages._87,buttonArea);
  textColor.setPreferenceStore(pref.getPreferenceStore());
  textColor.load();
  swapPref(true);
  Dialog.applyDialogFont(page);
  return page;
}","/** 
 * Creates the Sequence Diagram preference page content
 * @param parent the parent composite
 */
@Override protected Control createContents(Composite parent){
  parent.setLayout(new GridLayout());
  Composite page=new Composite(parent,SWT.NONE);
  GridLayout pageLayout=new GridLayout();
  pageLayout.numColumns=2;
  GridData pageLayoutdata=new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_VERTICAL| GridData.VERTICAL_ALIGN_FILL);
  page.setLayoutData(pageLayoutdata);
  page.setLayout(pageLayout);
  tooltip=new BooleanFieldEditor(SDViewPref.PREF_TOOLTIP,SDMessages._97,page);
  tooltip.setPreferenceStore(pref.getPreferenceStore());
  tooltip.load();
  link=new BooleanFieldEditor(SDViewPref.PREF_LINK_FONT,SDMessages._82,page);
  link.setPreferenceStore(pref.getPreferenceStore());
  link.load();
  noExternalTime=new BooleanFieldEditor(SDViewPref.PREF_EXCLUDE_EXTERNAL_TIME,SDMessages._83,page);
  noExternalTime.setPreferenceStore(pref.getPreferenceStore());
  noExternalTime.load();
  useGrad=new BooleanFieldEditor(SDViewPref.PREF_USE_GRADIENT,SDMessages._84,page);
  useGrad.setPreferenceStore(pref.getPreferenceStore());
  useGrad.load();
  Label separator=new Label(page,SWT.SEPARATOR | SWT.HORIZONTAL | SWT.SHADOW_NONE);
  GridData sepData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL | GridData.VERTICAL_ALIGN_FILL);
  separator.setLayoutData(sepData);
  Composite prefPage=new Composite(page,SWT.NONE);
  GridLayout prefPageLayout=new GridLayout();
  prefPage.setLayoutData(pageLayoutdata);
  prefPageLayout.numColumns=1;
  prefPage.setLayout(prefPageLayout);
  lifelineWidth=new IntegerFieldEditor(SDViewPref.PREF_LIFELINE_WIDTH,SDMessages._80,prefPage);
  lifelineWidth.setPreferenceStore(pref.getPreferenceStore());
  lifelineWidth.setValidRange(119,500);
  lifelineWidth.load();
  new Label(prefPage,SWT.SEPARATOR | SWT.HORIZONTAL | SWT.SHADOW_NONE);
  new Label(prefPage,SWT.SEPARATOR | SWT.HORIZONTAL | SWT.SHADOW_NONE);
  classItemList=new List(prefPage,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  GridData tabItemLayoutdata=new GridData(GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_VERTICAL| GridData.VERTICAL_ALIGN_FILL);
  classItemList.setLayoutData(tabItemLayoutdata);
  String[] fontList2=SDViewPref.getFontList2();
  for (int i=0; i < fontList2.length; i++) {
    classItemList.add(fontList2[i]);
  }
  classItemList.setSelection(0);
  classItemList.addSelectionListener(this);
  buttonArea=new Composite(prefPage,SWT.NONE);
  GridData tabItemLayoutdata2=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_VERTICAL | GridData.VERTICAL_ALIGN_FILL);
  buttonArea.setLayoutData(tabItemLayoutdata2);
  GridLayout buttonAreaLayout=new GridLayout();
  buttonAreaLayout.numColumns=1;
  buttonArea.setLayout(buttonAreaLayout);
  String[] fontList=SDViewPref.getFontList();
  font=new FontFieldEditor(fontList[0],""String_Node_Str"",SDMessages._81,buttonArea);
  font.getPreviewControl().setSize(500,500);
  font.setPreferenceStore(pref.getPreferenceStore());
  font.load();
  backGroundColor=new ColorFieldEditor(fontList[0] + SDViewPref.BACK_COLOR_POSTFIX,SDMessages._85,buttonArea);
  backGroundColor.setPreferenceStore(pref.getPreferenceStore());
  backGroundColor.load();
  lineColor=new ColorFieldEditor(fontList[0] + SDViewPref.FORE_COLOR_POSTFIX,SDMessages._86,buttonArea);
  lineColor.setPreferenceStore(pref.getPreferenceStore());
  lineColor.load();
  textColor=new ColorFieldEditor(fontList[0] + SDViewPref.TEXT_COLOR_POSTFIX,SDMessages._87,buttonArea);
  textColor.setPreferenceStore(pref.getPreferenceStore());
  textColor.load();
  swapPref(true);
  Dialog.applyDialogFont(page);
  return page;
}",0.9742903053026244
92844,"/** 
 * Open an existing trace.<p> The tracepath should have been set already,
 * @exception JniOpenTraceFailedException  Thrown if the open failed
 */
public void openTrace() throws JniException {
  if (tracepath == ""String_Node_Str"") {
    throw new JniTraceException(""String_Node_Str"");
  }
  if (thisTracePtr.getPointer() != NULL) {
    closeTrace();
  }
  int newLibraryId=initializeLibrary();
  if (newLibraryId != -1) {
    long newPtr;
    if (isLiveTraceSupported()) {
      newPtr=ltt_openTraceLive(newLibraryId,tracepath,printLttDebug);
    }
 else {
      newPtr=ltt_openTrace(newLibraryId,tracepath,printLttDebug);
    }
    if (newPtr == NULL) {
      thisTracePtr=new Jni_C_Pointer_And_Library_Id();
      throw new JniOpenTraceFailedException(""String_Node_Str"");
    }
    thisTracePtr=new Jni_C_Pointer_And_Library_Id(newLibraryId,newPtr);
    populateTraceInformation();
  }
 else {
    thisTracePtr=new Jni_C_Pointer_And_Library_Id();
    throw new JniTraceException(""String_Node_Str"" + ""String_Node_Str"");
  }
}","/** 
 * Open an existing trace.<p> The tracepath should have been set already,
 * @exception JniOpenTraceFailedException  Thrown if the open failed
 */
public void openTrace() throws JniException {
  if (tracepath == ""String_Node_Str"") {
    throw new JniTraceException(""String_Node_Str"");
  }
  if (thisTracePtr.getPointer() != NULL) {
    closeTrace();
  }
  int newLibraryId=initializeLibrary();
  if (newLibraryId != -1) {
    long newPtr;
    if (isLiveTraceSupported()) {
      try {
        newPtr=ltt_openTraceLive(newLibraryId,tracepath,printLttDebug);
      }
 catch (      UnsatisfiedLinkError e) {
        setLiveTraceSupported(false);
        newPtr=ltt_openTrace(newLibraryId,tracepath,printLttDebug);
      }
    }
 else {
      newPtr=ltt_openTrace(newLibraryId,tracepath,printLttDebug);
    }
    if (newPtr == NULL) {
      thisTracePtr=new Jni_C_Pointer_And_Library_Id();
      throw new JniOpenTraceFailedException(""String_Node_Str"");
    }
    thisTracePtr=new Jni_C_Pointer_And_Library_Id(newLibraryId,newPtr);
    populateTraceInformation();
  }
 else {
    thisTracePtr=new Jni_C_Pointer_And_Library_Id();
    throw new JniTraceException(""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.9177837354781054
92845,"/** 
 * Indicate whether a trace can be opened in live mode. Override if live mode is supported
 * @return true if the trace version supports live
 */
public boolean isLiveTraceSupported(){
  return false;
}","/** 
 * Indicate whether a trace can be opened in live mode.
 * @return true if the trace version supports live
 */
public boolean isLiveTraceSupported(){
  return isLiveTraceSupported;
}",0.8578680203045685
92846,"private String fileToString(IFile file){
  String ret=new String();
  try {
    InputStream in=file.getContents();
    int nbrOfByte=in.available();
    byte[] bytes=new byte[nbrOfByte];
    in.read(bytes);
    ret=new String(bytes);
    in.close();
  }
 catch (  CoreException e) {
    RpmlintLog.logError(e);
  }
catch (  IOException e) {
    RpmlintLog.logError(e);
  }
  return ret;
}","private String fileToString(IFile file){
  String ret=""String_Node_Str"";
  try {
    InputStream in=file.getContents();
    int nbrOfByte=in.available();
    byte[] bytes=new byte[nbrOfByte];
    in.read(bytes);
    ret=new String(bytes);
    in.close();
  }
 catch (  CoreException e) {
    RpmlintLog.logError(e);
  }
catch (  IOException e) {
    RpmlintLog.logError(e);
  }
  return ret;
}",0.9628681177976952
92847,"private void fillSoftIRQStateToColor(){
  softIrqStateToColor.put(SoftIRQMode.LTTV_SOFT_IRQ_UNKNOWN.getInName(),StateColor.BLACK);
  softIrqStateToColor.put(SoftIRQMode.LTTV_SOFT_IRQ_IDLE.getInName(),StateColor.BLACK);
  softIrqStateToColor.put(SoftIRQMode.LTTV_SOFT_IRQ_PENDING.getInName(),StateColor.PINK1);
  softIrqStateToColor.put(SoftIRQMode.LTTV_SOFT_IRQ_BUSY.getInName(),StateColor.PURPLE1);
}","private void fillSoftIRQStateToColor(){
  softIrqStateToColor.put(SoftIRQMode.LTTV_SOFT_IRQ_UNKNOWN.getInName(),StateColor.BLACK);
  softIrqStateToColor.put(SoftIRQMode.LTTV_SOFT_IRQ_IDLE.getInName(),StateColor.GRAY);
  softIrqStateToColor.put(SoftIRQMode.LTTV_SOFT_IRQ_PENDING.getInName(),StateColor.PINK1);
  softIrqStateToColor.put(SoftIRQMode.LTTV_SOFT_IRQ_BUSY.getInName(),StateColor.PURPLE1);
}",0.9912609238451936
92848,"private void fillBdevStateToColor(){
  softIrqStateToColor.put(BdevMode.LTTV_BDEV_UNKNOWN.getInName(),StateColor.BLACK);
  softIrqStateToColor.put(BdevMode.LTTV_BDEV_IDLE.getInName(),StateColor.BLACK);
  softIrqStateToColor.put(BdevMode.LTTV_BDEV_BUSY_READING.getInName(),StateColor.DARK_BLUE);
  softIrqStateToColor.put(BdevMode.LTTV_BDEV_BUSY_WRITING.getInName(),StateColor.RED);
}","private void fillBdevStateToColor(){
  softIrqStateToColor.put(BdevMode.LTTV_BDEV_UNKNOWN.getInName(),StateColor.BLACK);
  softIrqStateToColor.put(BdevMode.LTTV_BDEV_IDLE.getInName(),StateColor.GRAY);
  softIrqStateToColor.put(BdevMode.LTTV_BDEV_BUSY_READING.getInName(),StateColor.DARK_BLUE);
  softIrqStateToColor.put(BdevMode.LTTV_BDEV_BUSY_WRITING.getInName(),StateColor.RED);
}",0.7320261437908496
92849,"private void fillTrapStateToColor(){
  trapStateToColor.put(TrapMode.LTTV_TRAP_UNKNOWN.getInName(),StateColor.BLACK);
  trapStateToColor.put(TrapMode.LTTV_TRAP_IDLE.getInName(),StateColor.BLACK);
  trapStateToColor.put(TrapMode.LTTV_TRAP_BUSY.getInName(),StateColor.GOLD);
}","private void fillTrapStateToColor(){
  trapStateToColor.put(TrapMode.LTTV_TRAP_UNKNOWN.getInName(),StateColor.BLACK);
  trapStateToColor.put(TrapMode.LTTV_TRAP_IDLE.getInName(),StateColor.GRAY);
  trapStateToColor.put(TrapMode.LTTV_TRAP_BUSY.getInName(),StateColor.GOLD);
}",0.9835466179159048
92850,"private void fillContextMenu(IMenuManager manager){
  manager.add(new Separator());
  manager.add(resetScale);
  manager.add(nextEvent);
  manager.add(prevEvent);
  manager.add(nextTrace);
  manager.add(prevTrace);
  manager.add(zoomIn);
  manager.add(zoomOut);
  manager.add(zoomFilter);
  manager.add(new Separator());
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","private void fillContextMenu(IMenuManager manager){
  manager.add(showLegend);
  manager.add(new Separator());
  manager.add(resetScale);
  manager.add(nextEvent);
  manager.add(prevEvent);
  manager.add(nextTrace);
  manager.add(prevTrace);
  manager.add(showLegend);
  manager.add(zoomIn);
  manager.add(zoomOut);
  manager.add(zoomFilter);
  manager.add(new Separator());
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.935560859188544
92851,"private void fillLocalToolBar(IToolBarManager manager){
  manager.add(new Separator());
  manager.add(resetScale);
  manager.add(nextEvent);
  manager.add(prevEvent);
  manager.add(nextTrace);
  manager.add(prevTrace);
  manager.add(zoomIn);
  manager.add(zoomOut);
  manager.add(zoomFilter);
  manager.add(new Separator());
}","private void fillLocalToolBar(IToolBarManager manager){
  manager.add(showLegend);
  manager.add(new Separator());
  manager.add(resetScale);
  manager.add(nextEvent);
  manager.add(prevEvent);
  manager.add(nextTrace);
  manager.add(prevTrace);
  manager.add(zoomIn);
  manager.add(zoomOut);
  manager.add(zoomFilter);
  manager.add(new Separator());
}",0.9602356406480118
92852,"private void fillLocalPullDown(IMenuManager manager){
  manager.add(new Separator());
  manager.add(new Separator());
  manager.add(resetScale);
  manager.add(nextEvent);
  manager.add(prevEvent);
  manager.add(nextTrace);
  manager.add(prevTrace);
  manager.add(zoomIn);
  manager.add(zoomOut);
  manager.add(zoomFilter);
  manager.add(new Separator());
}","private void fillLocalPullDown(IMenuManager manager){
  manager.add(new Separator());
  manager.add(showLegend);
  manager.add(new Separator());
  manager.add(resetScale);
  manager.add(nextEvent);
  manager.add(prevEvent);
  manager.add(nextTrace);
  manager.add(prevTrace);
  manager.add(zoomIn);
  manager.add(zoomOut);
  manager.add(zoomFilter);
  manager.add(new Separator());
}",0.9634641407307172
92853,"/** 
 * This is a callback that will allow us to create the viewer and initialize it.
 */
@Override public void createPartControl(Composite parent){
  scrollFrame=new ScrolledComposite(parent,SWT.V_SCROLL);
  scrollFrame.setExpandVertical(true);
  scrollFrame.setExpandHorizontal(true);
  scrollFrame.setAlwaysShowScrollBars(true);
  SashForm sash=new SashForm(scrollFrame,SWT.NONE);
  scrollFrame.setContent(sash);
  tableViewer=new TableViewer(sash,SWT.FULL_SELECTION | SWT.H_SCROLL);
  tableViewer.setContentProvider(new ViewContentProvider(tableViewer));
  tableViewer.setLabelProvider(new ViewLabelProvider());
  Table table=tableViewer.getTable();
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      ISelection sel=event.getSelection();
      if (!sel.isEmpty()) {
        Object firstSel=null;
        if (sel instanceof IStructuredSelection) {
          firstSel=((IStructuredSelection)sel).getFirstElement();
          updateScrollOrigin();
          if (firstSel instanceof ITmfTimeAnalysisEntry) {
            ITmfTimeAnalysisEntry trace=(ITmfTimeAnalysisEntry)firstSel;
            tsfviewer.setSelectedTrace(trace);
          }
        }
      }
    }
    /** 
 * Make sure the selected item is visible
 */
    private void updateScrollOrigin(){
      Table table=tableViewer.getTable();
      if (table != null && table.getItemCount() > 0) {
        TableItem item=table.getSelection()[0];
        if (item == null) {
          return;
        }
        Rectangle itemRect=item.getBounds();
        int step=itemRect.height;
        int hscrolly=0;
        ScrollBar hbar=scrollFrame.getHorizontalBar();
        if (hbar != null) {
          hscrolly=hbar.getSize().y;
        }
        int visibleHeight=scrollFrame.getSize().y - hscrolly;
        Point origin=scrollFrame.getOrigin();
        int endy=origin.y + visibleHeight;
        int itemStartPos=itemRect.y + table.getHeaderHeight() + table.getBorderWidth()+ table.getParent().getBorderWidth();
        int itemEndPos=itemStartPos + step;
        if (origin.y >= step && itemStartPos < origin.y) {
          scrollFrame.setOrigin(origin.x,origin.y - step);
        }
        if (itemEndPos > endy) {
          scrollFrame.setOrigin(origin.x,origin.y + step);
        }
      }
    }
  }
);
  tableViewer.getTable().addKeyListener(new KeyListener(){
    @Override public void keyPressed(    KeyEvent e){
      Table table=tableViewer.getTable();
      Point origin=scrollFrame.getOrigin();
      if (table == null || table.getItemCount() < 1) {
        return;
      }
      TableItem item;
      int count;
switch (e.keyCode) {
case SWT.PAGE_DOWN:
        updateScrollPageDown();
      break;
case SWT.PAGE_UP:
    updateScrollUp();
  break;
case SWT.HOME:
count=table.getItemCount();
item=table.getItem(0);
scrollFrame.setOrigin(origin.x,0);
break;
case SWT.END:
count=table.getItemCount();
item=table.getItem(count - 1);
int itemStartPos=item.getBounds().y;
scrollFrame.setOrigin(origin.x,itemStartPos);
break;
default :
break;
}
}
@Override public void keyReleased(KeyEvent e){
}
/** 
 * Scroll one page down
 */
private void updateScrollPageDown(){
Table table=tableViewer.getTable();
int step=table.getItemHeight();
int hscrolly=0;
ScrollBar hbar=scrollFrame.getHorizontalBar();
if (hbar != null) {
hscrolly=hbar.getSize().y;
}
Point origin=scrollFrame.getOrigin();
int visibleHeight=scrollFrame.getSize().y - hscrolly;
int endy=origin.y + visibleHeight;
scrollFrame.setOrigin(origin.x,endy - step);
}
/** 
 * Scroll one page up
 */
private void updateScrollUp(){
Table table=tableViewer.getTable();
int step=table.getItemHeight();
int hscrolly=0;
ScrollBar hbar=scrollFrame.getHorizontalBar();
if (hbar != null) {
hscrolly=hbar.getSize().y;
}
Point origin=scrollFrame.getOrigin();
int visibleHeight=scrollFrame.getSize().y - hscrolly;
int pageUpPos=origin.y - visibleHeight + step;
pageUpPos=pageUpPos > 0 ? pageUpPos : 0;
scrollFrame.setOrigin(origin.x,pageUpPos);
}
}
);
applyTableLayout(table);
int borderWidth=table.getBorderWidth();
int itemHeight=table.getItemHeight() + getTableItemHeightAdjustement();
int headerHeight=table.getHeaderHeight();
table.getVerticalBar().setVisible(false);
tsfviewer=TmfViewerFactory.createViewer(sash,new TimeRangeViewerProvider(getParamsUpdater()));
tsfviewer.groupTraces(false);
tsfviewer.setItemHeight(itemHeight);
tsfviewer.setBorderWidth(borderWidth);
tsfviewer.setHeaderHeight(headerHeight);
tsfviewer.setVisibleVerticalScroll(false);
tsfviewer.setNameWidthPref(0);
tsfviewer.setAcceptSelectionAPIcalls(true);
tsfviewer.addWidgetSelectionListner(this);
tsfviewer.addFilterSelectionListner(this);
tsfviewer.addWidgetTimeScaleSelectionListner(this);
sash.setWeights(new int[]{1,1});
PlatformUI.getWorkbench().getHelpSystem().setHelp(tableViewer.getControl(),""String_Node_Str"");
makeActions();
hookContextMenu();
hookDoubleClickAction();
contributeToActionBars();
int timeSpaceWidth=tsfviewer.getTimeSpace();
if (timeSpaceWidth < 0) {
timeSpaceWidth=-timeSpaceWidth;
}
TmfExperiment<?> experiment=TmfExperiment.getCurrentExperiment();
if (experiment != null) {
TmfTimeRange experimentTRange=experiment.getTimeRange();
TmfTimeRange adjustedTimeRange=initialExperimentDataRequest(this,experimentTRange);
ModelUpdateInit(experimentTRange,adjustedTimeRange,this);
}
 else {
TraceDebug.debug(""String_Node_Str"");
}
}","/** 
 * This is a callback that will allow us to create the viewer and initialize it.
 */
@Override public void createPartControl(Composite parent){
  scrollFrame=new ScrolledComposite(parent,SWT.V_SCROLL);
  scrollFrame.setExpandVertical(true);
  scrollFrame.setExpandHorizontal(true);
  scrollFrame.setAlwaysShowScrollBars(true);
  SashForm sash=new SashForm(scrollFrame,SWT.NONE);
  scrollFrame.setContent(sash);
  tableViewer=new TableViewer(sash,SWT.FULL_SELECTION | SWT.H_SCROLL);
  tableViewer.setContentProvider(new ViewContentProvider(tableViewer));
  tableViewer.setLabelProvider(new ViewLabelProvider());
  Table table=tableViewer.getTable();
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      ISelection sel=event.getSelection();
      if (!sel.isEmpty()) {
        Object firstSel=null;
        if (sel instanceof IStructuredSelection) {
          firstSel=((IStructuredSelection)sel).getFirstElement();
          updateScrollOrigin();
          if (firstSel instanceof ITmfTimeAnalysisEntry) {
            ITmfTimeAnalysisEntry trace=(ITmfTimeAnalysisEntry)firstSel;
            tsfviewer.setSelectedTrace(trace);
          }
        }
      }
    }
    /** 
 * Make sure the selected item is visible
 */
    private void updateScrollOrigin(){
      Table table=tableViewer.getTable();
      if (table != null && table.getItemCount() > 0) {
        TableItem item=table.getSelection()[0];
        if (item == null) {
          return;
        }
        Rectangle itemRect=item.getBounds();
        int step=itemRect.height;
        int hscrolly=0;
        ScrollBar hbar=scrollFrame.getHorizontalBar();
        if (hbar != null) {
          hscrolly=hbar.getSize().y;
        }
        int visibleHeight=scrollFrame.getSize().y - hscrolly;
        Point origin=scrollFrame.getOrigin();
        int endy=origin.y + visibleHeight;
        int itemStartPos=itemRect.y + table.getHeaderHeight() + table.getBorderWidth()+ table.getParent().getBorderWidth();
        int itemEndPos=itemStartPos + step;
        if (origin.y >= step && itemStartPos < origin.y) {
          scrollFrame.setOrigin(origin.x,origin.y - step);
        }
        if (itemEndPos > endy) {
          scrollFrame.setOrigin(origin.x,origin.y + step);
        }
      }
    }
  }
);
  tableViewer.getTable().addKeyListener(new KeyListener(){
    @Override public void keyPressed(    KeyEvent e){
      Table table=tableViewer.getTable();
      Point origin=scrollFrame.getOrigin();
      if (table == null || table.getItemCount() < 1) {
        return;
      }
      TableItem item;
      int count;
switch (e.keyCode) {
case SWT.PAGE_DOWN:
        updateScrollPageDown();
      break;
case SWT.PAGE_UP:
    updateScrollUp();
  break;
case SWT.HOME:
count=table.getItemCount();
item=table.getItem(0);
scrollFrame.setOrigin(origin.x,0);
break;
case SWT.END:
count=table.getItemCount();
item=table.getItem(count - 1);
int itemStartPos=item.getBounds().y;
scrollFrame.setOrigin(origin.x,itemStartPos);
break;
default :
break;
}
}
@Override public void keyReleased(KeyEvent e){
}
/** 
 * Scroll one page down
 */
private void updateScrollPageDown(){
Table table=tableViewer.getTable();
int step=table.getItemHeight();
int hscrolly=0;
ScrollBar hbar=scrollFrame.getHorizontalBar();
if (hbar != null) {
hscrolly=hbar.getSize().y;
}
Point origin=scrollFrame.getOrigin();
int visibleHeight=scrollFrame.getSize().y - hscrolly;
int endy=origin.y + visibleHeight;
scrollFrame.setOrigin(origin.x,endy - step);
}
/** 
 * Scroll one page up
 */
private void updateScrollUp(){
Table table=tableViewer.getTable();
int step=table.getItemHeight();
int hscrolly=0;
ScrollBar hbar=scrollFrame.getHorizontalBar();
if (hbar != null) {
hscrolly=hbar.getSize().y;
}
Point origin=scrollFrame.getOrigin();
int visibleHeight=scrollFrame.getSize().y - hscrolly;
int pageUpPos=origin.y - visibleHeight + step;
pageUpPos=pageUpPos > 0 ? pageUpPos : 0;
scrollFrame.setOrigin(origin.x,pageUpPos);
}
}
);
applyTableLayout(table);
int borderWidth=table.getBorderWidth();
int itemHeight=table.getItemHeight() + getTableItemHeightAdjustement();
int headerHeight=table.getHeaderHeight();
table.getVerticalBar().setVisible(false);
tsfviewer=TmfViewerFactory.createViewer(sash,new FlowTimeRangeViewerProvider(getParamsUpdater()));
tsfviewer.groupTraces(false);
tsfviewer.setItemHeight(itemHeight);
tsfviewer.setBorderWidth(borderWidth);
tsfviewer.setHeaderHeight(headerHeight);
tsfviewer.setVisibleVerticalScroll(false);
tsfviewer.setNameWidthPref(0);
tsfviewer.setAcceptSelectionAPIcalls(true);
tsfviewer.addWidgetSelectionListner(this);
tsfviewer.addFilterSelectionListner(this);
tsfviewer.addWidgetTimeScaleSelectionListner(this);
sash.setWeights(new int[]{1,1});
PlatformUI.getWorkbench().getHelpSystem().setHelp(tableViewer.getControl(),""String_Node_Str"");
makeActions();
hookContextMenu();
hookDoubleClickAction();
contributeToActionBars();
int timeSpaceWidth=tsfviewer.getTimeSpace();
if (timeSpaceWidth < 0) {
timeSpaceWidth=-timeSpaceWidth;
}
TmfExperiment<?> experiment=TmfExperiment.getCurrentExperiment();
if (experiment != null) {
TmfTimeRange experimentTRange=experiment.getTimeRange();
TmfTimeRange adjustedTimeRange=initialExperimentDataRequest(this,experimentTRange);
ModelUpdateInit(experimentTRange,adjustedTimeRange,this);
}
 else {
TraceDebug.debug(""String_Node_Str"");
}
}",0.9996322177271056
92854,"private void fillLocalToolBar(IToolBarManager manager){
  manager.add(new Separator());
  manager.add(resetScale);
  manager.add(nextEvent);
  manager.add(prevEvent);
  manager.add(nextTrace);
  manager.add(prevTrace);
  manager.add(zoomIn);
  manager.add(zoomOut);
  manager.add(zoomFilter);
  manager.add(new Separator());
}","private void fillLocalToolBar(IToolBarManager manager){
  manager.add(showLegend);
  manager.add(new Separator());
  manager.add(resetScale);
  manager.add(nextEvent);
  manager.add(prevEvent);
  manager.add(nextTrace);
  manager.add(prevTrace);
  manager.add(zoomIn);
  manager.add(zoomOut);
  manager.add(zoomFilter);
  manager.add(new Separator());
}",0.9602356406480118
92855,"private void fillLocalPullDown(IMenuManager manager){
  manager.add(new Separator());
  manager.add(new Separator());
  manager.add(resetScale);
  manager.add(nextEvent);
  manager.add(prevEvent);
  manager.add(nextTrace);
  manager.add(prevTrace);
  manager.add(zoomIn);
  manager.add(zoomOut);
  manager.add(zoomFilter);
  manager.add(new Separator());
}","private void fillLocalPullDown(IMenuManager manager){
  manager.add(new Separator());
  manager.add(showLegend);
  manager.add(new Separator());
  manager.add(resetScale);
  manager.add(nextEvent);
  manager.add(prevEvent);
  manager.add(nextTrace);
  manager.add(prevTrace);
  manager.add(zoomIn);
  manager.add(zoomOut);
  manager.add(zoomFilter);
  manager.add(new Separator());
}",0.9634641407307172
92856,"private void fillContextMenu(IMenuManager manager){
  manager.add(new Separator());
  manager.add(resetScale);
  manager.add(nextEvent);
  manager.add(prevEvent);
  manager.add(nextTrace);
  manager.add(prevTrace);
  manager.add(zoomIn);
  manager.add(zoomOut);
  manager.add(zoomFilter);
  manager.add(new Separator());
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}","private void fillContextMenu(IMenuManager manager){
  manager.add(showLegend);
  manager.add(new Separator());
  manager.add(resetScale);
  manager.add(nextEvent);
  manager.add(prevEvent);
  manager.add(nextTrace);
  manager.add(prevTrace);
  manager.add(zoomIn);
  manager.add(zoomOut);
  manager.add(zoomFilter);
  manager.add(new Separator());
  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
}",0.966707768187423
92857,"/** 
 * This is a callback that will allow us to create the viewer and initialize it.
 */
@Override public void createPartControl(Composite parent){
  top=new Composite(parent,SWT.BORDER);
  top.setLayout(new FillLayout());
  tsfviewer=TmfViewerFactory.createViewer(top,new TimeRangeViewerProvider(getParamsUpdater()));
  tsfviewer.addWidgetSelectionListner(this);
  tsfviewer.addWidgetTimeScaleSelectionListner(this);
  tsfviewer.groupTraces(true);
  tsfviewer.setAcceptSelectionAPIcalls(true);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(tsfviewer.getControl(),""String_Node_Str"");
  makeActions();
  hookContextMenu();
  contributeToActionBars();
  TmfExperiment<?> experiment=TmfExperiment.getCurrentExperiment();
  if (experiment != null) {
    TmfTimeRange experimentTRange=experiment.getTimeRange();
    if (experimentTRange != null) {
      long time0=experimentTRange.getStartTime().getValue();
      long time1=experimentTRange.getEndTime().getValue();
      ParamsUpdater paramUpdater=getParamsUpdater();
      paramUpdater.update(time0,time1);
    }
    TmfTimeRange adjustedTimeRange=initialExperimentDataRequest(this,experimentTRange);
    ModelUpdateInit(experimentTRange,adjustedTimeRange,this);
  }
 else {
    TraceDebug.debug(""String_Node_Str"");
  }
}","/** 
 * This is a callback that will allow us to create the viewer and initialize it.
 */
@Override public void createPartControl(Composite parent){
  top=new Composite(parent,SWT.BORDER);
  top.setLayout(new FillLayout());
  tsfviewer=TmfViewerFactory.createViewer(top,new ResourcesTimeRangeViewerProvider(getParamsUpdater()));
  tsfviewer.addWidgetSelectionListner(this);
  tsfviewer.addWidgetTimeScaleSelectionListner(this);
  tsfviewer.groupTraces(true);
  tsfviewer.setAcceptSelectionAPIcalls(true);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(tsfviewer.getControl(),""String_Node_Str"");
  makeActions();
  hookContextMenu();
  contributeToActionBars();
  TmfExperiment<?> experiment=TmfExperiment.getCurrentExperiment();
  if (experiment != null) {
    TmfTimeRange experimentTRange=experiment.getTimeRange();
    if (experimentTRange != null) {
      long time0=experimentTRange.getStartTime().getValue();
      long time1=experimentTRange.getEndTime().getValue();
      ParamsUpdater paramUpdater=getParamsUpdater();
      paramUpdater.update(time0,time1);
    }
    TmfTimeRange adjustedTimeRange=initialExperimentDataRequest(this,experimentTRange);
    ModelUpdateInit(experimentTRange,adjustedTimeRange,this);
  }
 else {
    TraceDebug.debug(""String_Node_Str"");
  }
}",0.9964884900507218
92858,"private void createThreadStatesGroup(Composite composite){
  Group gs=new Group(composite,SWT.NONE);
  gs.setText(Messages.TmfTimeLegend_TRACE_STATES);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  gs.setLayoutData(gd);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  layout.marginWidth=20;
  layout.marginBottom=10;
  gs.setLayout(layout);
  for (int i=0; i < 7; i++) {
    Bar bar=new Bar(gs,i);
    gd=new GridData();
    gd.widthHint=40;
    gd.heightHint=20;
    gd.verticalIndent=8;
    bar.setLayoutData(gd);
    Label name=new Label(gs,SWT.NONE);
    StateColor stateColor=TraceColorScheme.getStateColors()[i];
    name.setText(ifUtil.getStateName(stateColor));
    gd=new GridData();
    gd.horizontalIndent=10;
    gd.verticalIndent=8;
    name.setLayoutData(gd);
  }
}","private void createThreadStatesGroup(Composite composite){
  Group gs=new Group(composite,SWT.NONE);
  gs.setText(Messages.TmfTimeLegend_TRACE_STATES);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  gs.setLayoutData(gd);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  layout.marginWidth=20;
  layout.marginBottom=10;
  gs.setLayout(layout);
  for (int i=0; i < TraceColorScheme.getStateColors().length; i++) {
    StateColor stateColor=TraceColorScheme.getStateColors()[i];
    String stateName=ifUtil.getStateName(stateColor);
    if (stateName != ""String_Node_Str"") {
      Bar bar=new Bar(gs,i);
      gd=new GridData();
      gd.widthHint=40;
      gd.heightHint=20;
      gd.verticalIndent=8;
      bar.setLayoutData(gd);
      Label name=new Label(gs,SWT.NONE);
      name.setText(stateName);
      gd=new GridData();
      gd.horizontalIndent=10;
      gd.verticalIndent=8;
      name.setLayoutData(gd);
    }
  }
}",0.8173022196926579
92859,"/** 
 * @param trace
 * @param disposeOnClose true if the trace should be disposed when the table is disposed
 */
public void setTrace(ITmfTrace trace,boolean disposeOnClose){
  if (fTrace != null && fDisposeOnClose) {
    fTrace.dispose();
  }
  fTrace=trace;
  fPackDone=false;
  fHeaderState=HeaderState.SEARCH;
  fSelectedRank=0;
  fDisposeOnClose=disposeOnClose;
  fTable.getDisplay().syncExec(new Runnable(){
    @Override public void run(){
      fTable.removeAll();
      fTable.setData(Key.FILTER_OBJ,null);
      fTable.setData(Key.FILTER_TXT,null);
      fTable.setData(Key.SEARCH_OBJ,null);
      fTable.setData(Key.SEARCH_TXT,null);
      fCacheStartIndex=fCacheEndIndex=0;
      if (fTrace != null) {
        if (!fTable.isDisposed() && fTrace != null) {
          fTable.setItemCount((int)fTrace.getNbEvents() + 1);
        }
        fRawViewer.setTrace(fTrace);
      }
    }
  }
);
}","/** 
 * @param trace
 * @param disposeOnClose true if the trace should be disposed when the table is disposed
 */
public void setTrace(ITmfTrace trace,boolean disposeOnClose){
  if (fTrace != null && fDisposeOnClose) {
    fTrace.dispose();
  }
  fTrace=trace;
  fPackDone=false;
  fHeaderState=HeaderState.SEARCH;
  fSelectedRank=0;
  fDisposeOnClose=disposeOnClose;
  fTable.getDisplay().syncExec(new Runnable(){
    @Override public void run(){
      fTable.removeAll();
      fTable.setData(Key.FILTER_OBJ,null);
      fTable.setData(Key.FILTER_TXT,null);
      fTable.setData(Key.SEARCH_OBJ,null);
      fTable.setData(Key.SEARCH_TXT,null);
      for (      TableColumn column : fTable.getColumns()) {
        column.setData(Key.FILTER_OBJ,null);
        column.setData(Key.FILTER_TXT,null);
        column.setData(Key.SEARCH_OBJ,null);
        column.setData(Key.SEARCH_TXT,null);
      }
      fCacheStartIndex=fCacheEndIndex=0;
      if (fTrace != null) {
        if (!fTable.isDisposed() && fTrace != null) {
          fTable.setItemCount((int)fTrace.getNbEvents() + 1);
        }
        fRawViewer.setTrace(fTrace);
      }
    }
  }
);
}",0.8784773060029283
92860,"@Override @SuppressWarnings(""String_Node_Str"") public Vector<TimeEvent> getTraceEvents(){
  return traceEvents;
}","@Override @Deprecated public Vector<ITimeEvent> getTraceEvents(){
  return traceEvents;
}",0.8316831683168316
92861,"private void create5000Events(TraceImpl trace){
  EventImpl event;
  Long eventTime;
  int numEvents=5000;
  long sTime=trace.getStartTime();
  long eTime=trace.getStopTime();
  long duration=(long)((eTime - sTime) / numEvents);
  for (int i=0; i < numEvents; i++) {
    eventTime=sTime + (i * duration);
    event=new EventImpl(eventTime,trace,getEventType(i % 16));
    event.setDuration(duration);
    trace.getTraceEvents().add(event);
  }
}","private void create5000Events(TraceImpl trace){
  EventImpl event;
  Long eventTime;
  int numEvents=5000;
  long sTime=trace.getStartTime();
  long eTime=trace.getStopTime();
  long duration=(long)((eTime - sTime) / numEvents);
  for (int i=0; i < numEvents; i++) {
    eventTime=sTime + (i * duration);
    event=new EventImpl(eventTime,trace,getEventType(i % 16));
    event.setDuration(duration);
    trace.addTraceEvent(event);
  }
}",0.9626274065685164
92862,"private void createEvents(TraceImpl trace){
  EventImpl event;
  Long eventTime;
  int numEvents=17;
  long duration=0;
  for (int i=0; i < numEvents; i++) {
    eventTime=timeRef + msTons * i + (5 * msTons * count) + (5 * i);
    duration=msTons + i * msTons + (long)((i % 4));
    event=new EventImpl(eventTime,trace,getEventType(i));
    event.setDuration(duration);
    trace.getTraceEvents().add(event);
  }
}","private void createEvents(TraceImpl trace){
  EventImpl event;
  Long eventTime;
  int numEvents=17;
  long duration=0;
  for (int i=0; i < numEvents; i++) {
    eventTime=timeRef + msTons * i + (5 * msTons * count) + (5 * i);
    duration=msTons + i * msTons + (long)((i % 4));
    event=new EventImpl(eventTime,trace,getEventType(i));
    event.setDuration(duration);
    trace.addTraceEvent(event);
  }
}",0.9598051157125456
92863,"@Override public void tsfTmProcessSelEvent(TmfTimeSelectionEvent event){
  Object source=event.getSource();
  if (source == null || !(source instanceof ITimeAnalysisViewer)) {
    return;
  }
  ITimeAnalysisViewer rViewer=(ITimeAnalysisViewer)event.getSource();
  ITimeAnalysisViewer synchViewer=null;
  if (tsfviewer == rViewer) {
    synchViewer=tsfviewer2;
  }
 else {
    synchViewer=tsfviewer;
  }
  Object selection=event.getSelection();
  long selTimens=event.getSelectedTime();
  long tms=(long)(selTimens * 1E-6);
  Date date=new Date(tms);
  String fDate=stimeformat.format(date);
  String ns=formatNs(selTimens);
  if (selection instanceof EventImpl) {
    EventImpl selEvent=(EventImpl)selection;
    date=new Date((long)(selTimens / 1E-6));
    System.out.println(""String_Node_Str"" + selEvent.getType().toString() + ""String_Node_Str""+ selEvent.getTime()+ ""String_Node_Str""+ selEvent.getEntry().getName()+ ""String_Node_Str""+ event.getDType().toString()+ ""String_Node_Str""+ selTimens+ ""String_Node_Str""+ fDate+ ""String_Node_Str""+ ns);
    synchViewer.setSelectedEvent(selEvent,source);
  }
 else   if (selection instanceof TraceImpl) {
    TraceImpl selTrace=(TraceImpl)selection;
    System.out.println(""String_Node_Str"" + selTrace.getName().toString() + ""String_Node_Str""+ selTrace.getClassName()+ ""String_Node_Str""+ selTrace.getTraceEvents().size()+ ""String_Node_Str""+ event.getDType().toString()+ ""String_Node_Str""+ selTimens+ ""String_Node_Str""+ fDate+ ""String_Node_Str""+ ns);
    synchViewer.setSelectedTraceTime(selTrace,event.getSelectedTime(),source);
  }
 else {
    System.out.println(""String_Node_Str"" + selection.getClass().getName());
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void tsfTmProcessSelEvent(TmfTimeSelectionEvent event){
  Object source=event.getSource();
  if (source == null || !(source instanceof ITimeAnalysisViewer)) {
    return;
  }
  ITimeAnalysisViewer rViewer=(ITimeAnalysisViewer)event.getSource();
  ITimeAnalysisViewer synchViewer=null;
  if (tsfviewer == rViewer) {
    synchViewer=tsfviewer2;
  }
 else {
    synchViewer=tsfviewer;
  }
  Object selection=event.getSelection();
  long selTimens=event.getSelectedTime();
  long tms=(long)(selTimens * 1E-6);
  Date date=new Date(tms);
  String fDate=stimeformat.format(date);
  String ns=formatNs(selTimens);
  if (selection instanceof EventImpl) {
    EventImpl selEvent=(EventImpl)selection;
    date=new Date((long)(selTimens / 1E-6));
    System.out.println(""String_Node_Str"" + selEvent.getType().toString() + ""String_Node_Str""+ selEvent.getTime()+ ""String_Node_Str""+ selEvent.getEntry().getName()+ ""String_Node_Str""+ event.getDType().toString()+ ""String_Node_Str""+ selTimens+ ""String_Node_Str""+ fDate+ ""String_Node_Str""+ ns);
    synchViewer.setSelectedEvent(selEvent,source);
  }
 else   if (selection instanceof TraceImpl) {
    TraceImpl selTrace=(TraceImpl)selection;
    System.out.println(""String_Node_Str"" + selTrace.getName().toString() + ""String_Node_Str""+ selTrace.getClassName()+ ""String_Node_Str""+ selTrace.getTraceEvents().size()+ ""String_Node_Str""+ event.getDType().toString()+ ""String_Node_Str""+ selTimens+ ""String_Node_Str""+ fDate+ ""String_Node_Str""+ ns);
    synchViewer.setSelectedTraceTime(selTrace,event.getSelectedTime(),source);
  }
 else {
    System.out.println(""String_Node_Str"" + selection.getClass().getName());
  }
}",0.9890044576523032
92864,"@Override public Iterator<TimeRangeComponent> getTraceEventsIterator(long startTime,long stopTime,long visibleDuration){
  return ChildEventLeafs.iterator();
}","@Override @SuppressWarnings(""String_Node_Str"") public Iterator<TimeRangeComponent> getTraceEventsIterator(long startTime,long stopTime,long visibleDuration){
  return ChildEventLeafs.iterator();
}",0.895774647887324
92865,"@Override @SuppressWarnings(""String_Node_Str"") public TmfContext seekLocation(ITmfLocation<?> location){
  TmfContext context=null;
  try {
synchronized (fTrace) {
      fTrace.seek((location != null) ? ((TmfLocation<Long>)location).getLocation() : 0);
      context=new TmfContext(getCurrentLocation(),0);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return context;
}","@Override public TmfContext seekLocation(double ratio){
  return null;
}",0.2672413793103448
92866,"@Override @SuppressWarnings(""String_Node_Str"") public Vector<TimeRangeComponent> getTraceEvents(){
  return ChildEventLeafs;
}","@Override @SuppressWarnings(""String_Node_Str"") @Deprecated public Vector<TimeRangeComponent> getTraceEvents(){
  return ChildEventLeafs;
}",0.9545454545454546
92867,"@Override @SuppressWarnings(""String_Node_Str"") public TmfContext seekLocation(ITmfLocation<?> location){
  if (location == null) {
    location=new TmfLocation<Long>(0L);
  }
  if (!((TmfLocation<Long>)location).getLocation().equals(nbCharRead)) {
    skipToPosition((TmfLocation<Long>)location);
  }
  TmfContext tmpTraceContext=new TmfContext(location,0L);
  return tmpTraceContext;
}","@Override public TmfContext seekLocation(double ratio){
  return null;
}",0.2707423580786026
92868,"/** 
 * Position the trace to the event at the given location. <p> NOTE : Seeking by location is very fast compare to seeking by position but is still slower than ""ReadNext"", avoid using it for small interval.
 * @param location Location of the event in the trace. If no event available at this exact location, we will position ourself to the next one.
 * @return The TmfContext that point to this event
 * @see org.eclipse.linuxtools.lttng.event.LttngLocation
 * @see org.eclipse.linuxtools.tmf.trace.TmfContext
 */
@Override public synchronized TmfContext seekLocation(ITmfLocation<?> location){
  if (PrintDebug) {
    System.out.println(""String_Node_Str"" + location);
  }
  LttngLocation curLocation=null;
  if (location == null) {
    curLocation=new LttngLocation();
    TmfContext context=seekEvent(curLocation.getOperationTime());
    context.setRank(ITmfContext.INITIAL_RANK);
    return context;
  }
 else {
    curLocation=(LttngLocation)location;
  }
  TmfContext context=seekEvent(curLocation.getOperationTime());
  return context;
}","@Override public TmfContext seekLocation(double ratio){
  return null;
}",0.1198568872987477
92869,"/** 
 * @param path
 * @param cacheSize
 * @param indexTrace
 * @throws FileNotFoundException
 */
protected TmfTrace(String name,Class<T> type,String path,int cacheSize,boolean indexTrace) throws FileNotFoundException {
  super(name,type);
  int sep=path.lastIndexOf(File.separator);
  String simpleName=(sep >= 0) ? path.substring(sep + 1) : path;
  setName(simpleName);
  fPath=path;
  fIndexPageSize=(cacheSize > 0) ? cacheSize : DEFAULT_INDEX_PAGE_SIZE;
}","/** 
 * @param path
 * @param cacheSize
 * @param indexTrace
 * @throws FileNotFoundException
 */
protected TmfTrace(String name,Class<T> type,String path,int cacheSize,boolean indexTrace) throws FileNotFoundException {
  super(name,type);
  int sep=path.lastIndexOf(File.separator);
  String simpleName=(sep >= 0) ? path.substring(sep + 1) : path;
  setName(simpleName);
  fPath=path;
  fIndexPageSize=(cacheSize > 0) ? cacheSize : DEFAULT_INDEX_PAGE_SIZE;
  if (indexTrace) {
    indexTrace(false);
  }
}",0.9512953367875648
92870,"@Override @SuppressWarnings(""String_Node_Str"") public TmfContext seekLocation(ITmfLocation<?> location){
  try {
synchronized (fTrace) {
      long loc=0;
      long rank=0;
      if (location != null) {
        loc=((TmfLocation<Long>)location).getLocation();
        rank=ITmfContext.UNKNOWN_RANK;
      }
      if (loc != fTrace.getFilePointer()) {
        fTrace.seek(loc);
      }
      TmfContext context=new TmfContext(getCurrentLocation(),rank);
      return context;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return null;
}","@Override public TmfContext seekLocation(double ratio){
  try {
    ITmfLocation<?> location=new TmfLocation<Long>(new Long((long)(ratio * fTrace.length())));
    TmfContext context=seekLocation(location);
    context.setRank(ITmfContext.UNKNOWN_RANK);
    return context;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return null;
}",0.3572216097023153
92871,"@Override public TmfContext seekLocation(ITmfLocation<?> location){
  CustomTxtTraceContext context=new CustomTxtTraceContext(NULL_LOCATION,ITmfContext.INITIAL_RANK);
  if (NULL_LOCATION.equals(location) || !new File(getPath()).isFile()) {
    return context;
  }
  try {
    BufferedRandomAccessFile raFile=new BufferedRandomAccessFile(getPath(),""String_Node_Str"");
    if (location != null && location.getLocation() instanceof Long) {
      raFile.seek((Long)location.getLocation());
    }
    String line;
    long rawPos=raFile.getFilePointer();
    while ((line=raFile.getNextLine()) != null) {
      for (      InputLine input : getFirstLines()) {
        Matcher matcher=input.getPattern().matcher(line);
        if (matcher.find()) {
          context.setLocation(new TmfLocation<Long>(rawPos));
          context.raFile=raFile;
          context.firstLineMatcher=matcher;
          context.firstLine=line;
          context.nextLineLocation=raFile.getFilePointer();
          context.inputLine=input;
          return context;
        }
      }
      rawPos=raFile.getFilePointer();
    }
    return context;
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return context;
  }
catch (  IOException e) {
    e.printStackTrace();
    return context;
  }
}","@Override public TmfContext seekLocation(double ratio){
  try {
    BufferedRandomAccessFile raFile=new BufferedRandomAccessFile(getPath(),""String_Node_Str"");
    ITmfLocation<?> location=new TmfLocation<Long>(new Long((long)(ratio * raFile.length())));
    TmfContext context=seekLocation(location);
    context.setRank(ITmfContext.UNKNOWN_RANK);
    return context;
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return new CustomTxtTraceContext(NULL_LOCATION,ITmfContext.INITIAL_RANK);
  }
catch (  IOException e) {
    e.printStackTrace();
    return new CustomTxtTraceContext(NULL_LOCATION,ITmfContext.INITIAL_RANK);
  }
}",0.2605997931747673
92872,"@Override public TmfContext seekLocation(ITmfLocation<?> location){
  CustomXmlTraceContext context=new CustomXmlTraceContext(NULL_LOCATION,ITmfContext.INITIAL_RANK);
  if (NULL_LOCATION.equals(location) || !new File(getPath()).isFile()) {
    return context;
  }
  try {
    context.raFile=new BufferedRandomAccessFile(getPath(),""String_Node_Str"");
    if (location != null && location.getLocation() instanceof Long) {
      context.raFile.seek((Long)location.getLocation());
    }
    String line;
    String recordElementStart=""String_Node_Str"" + fRecordInputElement.elementName;
    long rawPos=context.raFile.getFilePointer();
    while ((line=context.raFile.getNextLine()) != null) {
      int idx=line.indexOf(recordElementStart);
      if (idx != -1) {
        context.setLocation(new TmfLocation<Long>(rawPos + idx));
        return context;
      }
      rawPos=context.raFile.getFilePointer();
    }
    return context;
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return context;
  }
catch (  IOException e) {
    e.printStackTrace();
    return context;
  }
}","@Override public TmfContext seekLocation(double ratio){
  try {
    RandomAccessFile raFile=new RandomAccessFile(getPath(),""String_Node_Str"");
    ITmfLocation<?> location=new TmfLocation<Long>(new Long((long)(ratio * raFile.length())));
    TmfContext context=seekLocation(location);
    context.setRank(ITmfContext.UNKNOWN_RANK);
    return context;
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return new CustomXmlTraceContext(NULL_LOCATION,ITmfContext.INITIAL_RANK);
  }
catch (  IOException e) {
    e.printStackTrace();
    return new CustomXmlTraceContext(NULL_LOCATION,ITmfContext.INITIAL_RANK);
  }
}",0.2484113229347198
92873,"@Override public TmfEventContent clone(){
  TmfEventContent clone=null;
  try {
    clone=(TmfEventContent)super.clone();
    clone.fParentEvent=fParentEvent;
    clone.fRawContent=null;
    clone.fFields=null;
  }
 catch (  CloneNotSupportedException e) {
    e.printStackTrace();
  }
  return clone;
}","@Override public TmfEventContent clone(){
  TmfEventContent clone=null;
  try {
    clone=(TmfEventContent)super.clone();
    clone.fParentEvent=fParentEvent;
    clone.fRawContent=fRawContent;
    clone.fFields=fFields;
  }
 catch (  CloneNotSupportedException e) {
    e.printStackTrace();
  }
  return clone;
}",0.9577922077922078
92874,"@Override public TmfEventReference clone(){
  TmfEventReference clone=null;
  try {
    clone=(TmfEventReference)super.clone();
    clone.fReference=null;
  }
 catch (  CloneNotSupportedException e) {
    e.printStackTrace();
  }
  return clone;
}","@Override public TmfEventReference clone(){
  TmfEventReference clone=null;
  try {
    clone=(TmfEventReference)super.clone();
    clone.fReference=fReference;
  }
 catch (  CloneNotSupportedException e) {
    e.printStackTrace();
  }
  return clone;
}",0.972
92875,"@Override public TmfEventSource clone(){
  TmfEventSource clone=null;
  try {
    clone=(TmfEventSource)super.clone();
    clone.fSourceId=null;
  }
 catch (  CloneNotSupportedException e) {
    e.printStackTrace();
  }
  return clone;
}","@Override public TmfEventSource clone(){
  TmfEventSource clone=null;
  try {
    clone=(TmfEventSource)super.clone();
    clone.fSourceId=fSourceId;
  }
 catch (  CloneNotSupportedException e) {
    e.printStackTrace();
  }
  return clone;
}",0.9728601252609604
92876,"private void processData(){
  String timeStampString=fData.get(CustomTraceDefinition.TAG_TIMESTAMP);
  String timeStampInputFormat=fData.get(TIMESTAMP_INPUT_FORMAT_KEY);
  Date date=null;
  if (timeStampInputFormat != null && timeStampString != null) {
    SimpleDateFormat dateFormat=new SimpleDateFormat(timeStampInputFormat);
    try {
      date=dateFormat.parse(timeStampString);
      fOriginalTimestamp=fEffectiveTimestamp=new TmfTimestamp(date.getTime(),TIMESTAMP_SCALE);
    }
 catch (    ParseException e) {
      fOriginalTimestamp=fEffectiveTimestamp=TmfTimestamp.Zero;
    }
  }
 else {
    fOriginalTimestamp=fEffectiveTimestamp=TmfTimestamp.Zero;
  }
  int i=0;
  fColumnData=new String[fDefinition.outputs.size()];
  for (  OutputColumn outputColumn : fDefinition.outputs) {
    String value=fData.get(outputColumn.name);
    if (outputColumn.name.equals(CustomTraceDefinition.TAG_TIMESTAMP) && date != null) {
      SimpleDateFormat dateFormat=new SimpleDateFormat(fDefinition.timeStampOutputFormat);
      fColumnData[i++]=dateFormat.format(date);
    }
 else {
      fColumnData[i++]=value;
    }
  }
  String message=fData.get(CustomTraceDefinition.TAG_MESSAGE);
  ;
  setContent(new TmfEventContent(this,message));
  fData=null;
}","private void processData(){
  String timeStampString=fData.get(CustomTraceDefinition.TAG_TIMESTAMP);
  String timeStampInputFormat=fData.get(TIMESTAMP_INPUT_FORMAT_KEY);
  Date date=null;
  if (timeStampInputFormat != null && timeStampString != null) {
    SimpleDateFormat dateFormat=new SimpleDateFormat(timeStampInputFormat);
    try {
      date=dateFormat.parse(timeStampString);
      fOriginalTimestamp=fEffectiveTimestamp=new TmfTimestamp(date.getTime(),TIMESTAMP_SCALE);
    }
 catch (    ParseException e) {
      fOriginalTimestamp=fEffectiveTimestamp=TmfTimestamp.Zero;
    }
  }
 else {
    fOriginalTimestamp=fEffectiveTimestamp=TmfTimestamp.Zero;
  }
  int i=0;
  fColumnData=new String[fDefinition.outputs.size()];
  for (  OutputColumn outputColumn : fDefinition.outputs) {
    String value=fData.get(outputColumn.name);
    if (outputColumn.name.equals(CustomTraceDefinition.TAG_TIMESTAMP) && date != null) {
      SimpleDateFormat dateFormat=new SimpleDateFormat(fDefinition.timeStampOutputFormat);
      fColumnData[i++]=dateFormat.format(date);
    }
 else {
      fColumnData[i++]=(value != null ? value : ""String_Node_Str"");
    }
  }
  fData=null;
}",0.9364686468646864
92877,"public CustomEventsTable(CustomTraceDefinition definition,Composite parent,int cacheSize){
  super(parent,cacheSize);
  fDefinition=definition;
  createColumnHeaders();
}","public CustomEventsTable(CustomTraceDefinition definition,Composite parent,int cacheSize){
  super(parent,cacheSize,new ColumnData[0]);
  fDefinition=definition;
  createColumnHeaders();
}",0.9497206703910616
92878,"public void processGroups(InputLine input,Matcher matcher){
  for (int i=0; i < input.columns.size(); i++) {
    InputData column=input.columns.get(i);
    if (i < matcher.groupCount() && matcher.group(i + 1) != null) {
      String value=matcher.group(i + 1).trim();
      if (value.length() == 0) {
        continue;
      }
      String name=column.name;
      if (column.action == CustomTxtTraceDefinition.ACTION_SET) {
        fData.put(name,value);
        if (name.equals(CustomTxtTraceDefinition.TAG_TIMESTAMP)) {
          fData.put(TIMESTAMP_INPUT_FORMAT_KEY,column.format);
        }
      }
 else       if (column.action == CustomTxtTraceDefinition.ACTION_APPEND) {
        String s=fData.get(name);
        if (s != null) {
          fData.put(name,s + value);
        }
 else {
          fData.put(name,value);
        }
        if (name.equals(CustomTxtTraceDefinition.TAG_TIMESTAMP)) {
          String timeStampInputFormat=fData.get(TIMESTAMP_INPUT_FORMAT_KEY);
          if (timeStampInputFormat != null) {
            fData.put(TIMESTAMP_INPUT_FORMAT_KEY,timeStampInputFormat + column.format);
          }
 else {
            fData.put(TIMESTAMP_INPUT_FORMAT_KEY,column.format);
          }
        }
      }
 else       if (column.action == CustomTxtTraceDefinition.ACTION_APPEND_WITH_SEPARATOR) {
        String s=fData.get(name);
        if (s != null) {
          fData.put(name,s + ""String_Node_Str"" + value);
        }
 else {
          fData.put(name,value);
        }
        if (name.equals(CustomTxtTraceDefinition.TAG_TIMESTAMP)) {
          String timeStampInputFormat=fData.get(TIMESTAMP_INPUT_FORMAT_KEY);
          if (timeStampInputFormat != null) {
            fData.put(TIMESTAMP_INPUT_FORMAT_KEY,timeStampInputFormat + ""String_Node_Str"" + column.format);
          }
 else {
            fData.put(TIMESTAMP_INPUT_FORMAT_KEY,column.format);
          }
        }
      }
    }
  }
}","public void processGroups(InputLine input,Matcher matcher){
  if (input.columns == null) {
    return;
  }
  for (int i=0; i < input.columns.size(); i++) {
    InputData column=input.columns.get(i);
    if (i < matcher.groupCount() && matcher.group(i + 1) != null) {
      String value=matcher.group(i + 1).trim();
      if (value.length() == 0) {
        continue;
      }
      String name=column.name;
      if (column.action == CustomTxtTraceDefinition.ACTION_SET) {
        fData.put(name,value);
        if (name.equals(CustomTxtTraceDefinition.TAG_TIMESTAMP)) {
          fData.put(TIMESTAMP_INPUT_FORMAT_KEY,column.format);
        }
      }
 else       if (column.action == CustomTxtTraceDefinition.ACTION_APPEND) {
        String s=fData.get(name);
        if (s != null) {
          fData.put(name,s + value);
        }
 else {
          fData.put(name,value);
        }
        if (name.equals(CustomTxtTraceDefinition.TAG_TIMESTAMP)) {
          String timeStampInputFormat=fData.get(TIMESTAMP_INPUT_FORMAT_KEY);
          if (timeStampInputFormat != null) {
            fData.put(TIMESTAMP_INPUT_FORMAT_KEY,timeStampInputFormat + column.format);
          }
 else {
            fData.put(TIMESTAMP_INPUT_FORMAT_KEY,column.format);
          }
        }
      }
 else       if (column.action == CustomTxtTraceDefinition.ACTION_APPEND_WITH_SEPARATOR) {
        String s=fData.get(name);
        if (s != null) {
          fData.put(name,s + ""String_Node_Str"" + value);
        }
 else {
          fData.put(name,value);
        }
        if (name.equals(CustomTxtTraceDefinition.TAG_TIMESTAMP)) {
          String timeStampInputFormat=fData.get(TIMESTAMP_INPUT_FORMAT_KEY);
          if (timeStampInputFormat != null) {
            fData.put(TIMESTAMP_INPUT_FORMAT_KEY,timeStampInputFormat + ""String_Node_Str"" + column.format);
          }
 else {
            fData.put(TIMESTAMP_INPUT_FORMAT_KEY,column.format);
          }
        }
      }
    }
  }
}",0.987902187902188
92879,"@Override public TmfContext seekLocation(ITmfLocation<?> location){
  CustomTxtTraceContext context=new CustomTxtTraceContext(new TmfLocation<Long>((Long)null),ITmfContext.INITIAL_RANK);
  if (!new File(getPath()).isFile()) {
    return context;
  }
  try {
    RandomAccessFile raFile=new RandomAccessFile(getPath(),""String_Node_Str"");
    if (location != null && location.getLocation() instanceof Long) {
      raFile.seek((Long)location.getLocation());
    }
    String line;
    long rawPos=raFile.getFilePointer();
    while ((line=raFile.readLine()) != null) {
      for (      InputLine input : getFirstLines()) {
        Matcher matcher=input.getPattern().matcher(line);
        if (matcher.find()) {
          context.setLocation(new TmfLocation<Long>(rawPos));
          context.raFile=raFile;
          context.firstLineMatcher=matcher;
          context.nextLineLocation=raFile.getFilePointer();
          context.inputLine=input;
          return context;
        }
      }
      rawPos=raFile.getFilePointer();
    }
    return context;
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return context;
  }
catch (  IOException e) {
    e.printStackTrace();
    return context;
  }
}","@Override public TmfContext seekLocation(ITmfLocation<?> location){
  CustomTxtTraceContext context=new CustomTxtTraceContext(NULL_LOCATION,ITmfContext.INITIAL_RANK);
  if (NULL_LOCATION.equals(location) || !new File(getPath()).isFile()) {
    return context;
  }
  try {
    BufferedRandomAccessFile raFile=new BufferedRandomAccessFile(getPath(),""String_Node_Str"");
    if (location != null && location.getLocation() instanceof Long) {
      raFile.seek((Long)location.getLocation());
    }
    String line;
    long rawPos=raFile.getFilePointer();
    while ((line=raFile.getNextLine()) != null) {
      for (      InputLine input : getFirstLines()) {
        Matcher matcher=input.getPattern().matcher(line);
        if (matcher.find()) {
          context.setLocation(new TmfLocation<Long>(rawPos));
          context.raFile=raFile;
          context.firstLineMatcher=matcher;
          context.firstLine=line;
          context.nextLineLocation=raFile.getFilePointer();
          context.inputLine=input;
          return context;
        }
      }
      rawPos=raFile.getFilePointer();
    }
    return context;
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return context;
  }
catch (  IOException e) {
    e.printStackTrace();
    return context;
  }
}",0.944422231107557
92880,"@Override public TmfEvent parseEvent(TmfContext tmfContext){
  if (!(tmfContext instanceof CustomTxtTraceContext)) {
    return null;
  }
  CustomTxtTraceContext context=(CustomTxtTraceContext)tmfContext;
  if (!(context.getLocation().getLocation() instanceof Long)) {
    return null;
  }
  CustomTxtEvent event=parseFirstLine(context);
  HashMap<InputLine,Integer> countMap=new HashMap<InputLine,Integer>();
  InputLine currentInput=null;
  if (context.inputLine.childrenInputs != null && context.inputLine.childrenInputs.size() > 0) {
    currentInput=context.inputLine.childrenInputs.get(0);
    countMap.put(currentInput,0);
  }
synchronized (context.raFile) {
    try {
      if (context.raFile.getFilePointer() != context.nextLineLocation) {
        context.raFile.seek(context.nextLineLocation);
      }
      String line;
      long rawPos=context.raFile.getFilePointer();
      while ((line=context.raFile.readLine()) != null) {
        boolean processed=false;
        if (currentInput == null) {
          for (          InputLine input : getFirstLines()) {
            Matcher matcher=input.getPattern().matcher(line);
            if (matcher.find()) {
              context.setLocation(new TmfLocation<Long>(rawPos));
              context.firstLineMatcher=matcher;
              context.nextLineLocation=context.raFile.getFilePointer();
              context.inputLine=input;
              return event;
            }
          }
        }
 else {
          if (countMap.get(currentInput) >= currentInput.getMinCount()) {
            List<InputLine> nextInputs=currentInput.getNextInputs(countMap);
            if (nextInputs.size() == 0 || nextInputs.get(nextInputs.size() - 1).getMinCount() == 0) {
              for (              InputLine input : getFirstLines()) {
                Matcher matcher=input.getPattern().matcher(line);
                if (matcher.find()) {
                  context.setLocation(new TmfLocation<Long>(rawPos));
                  context.firstLineMatcher=matcher;
                  context.nextLineLocation=context.raFile.getFilePointer();
                  context.inputLine=input;
                  return event;
                }
              }
            }
            for (            InputLine input : nextInputs) {
              Matcher matcher=input.getPattern().matcher(line);
              if (matcher.find()) {
                event.processGroups(input,matcher);
                currentInput=input;
                if (countMap.get(currentInput) == null) {
                  countMap.put(currentInput,1);
                }
 else {
                  countMap.put(currentInput,countMap.get(currentInput) + 1);
                }
                Iterator<InputLine> iter=countMap.keySet().iterator();
                while (iter.hasNext()) {
                  InputLine inputLine=iter.next();
                  if (inputLine.level > currentInput.level) {
                    iter.remove();
                  }
                }
                if (currentInput.childrenInputs != null && currentInput.childrenInputs.size() > 0) {
                  currentInput=currentInput.childrenInputs.get(0);
                  countMap.put(currentInput,0);
                }
 else {
                  if (countMap.get(currentInput) >= currentInput.getMaxCount()) {
                    if (currentInput.getNextInputs(countMap).size() > 0) {
                      currentInput=currentInput.getNextInputs(countMap).get(0);
                      if (countMap.get(currentInput) == null) {
                        countMap.put(currentInput,0);
                      }
                      iter=countMap.keySet().iterator();
                      while (iter.hasNext()) {
                        InputLine inputLine=iter.next();
                        if (inputLine.level > currentInput.level) {
                          iter.remove();
                        }
                      }
                    }
 else {
                      currentInput=null;
                    }
                  }
                }
                processed=true;
                break;
              }
            }
          }
          if (!processed) {
            Matcher matcher=currentInput.getPattern().matcher(line);
            if (matcher.find()) {
              event.processGroups(currentInput,matcher);
              countMap.put(currentInput,countMap.get(currentInput) + 1);
              if (currentInput.childrenInputs != null && currentInput.childrenInputs.size() > 0) {
                currentInput=currentInput.childrenInputs.get(0);
                countMap.put(currentInput,0);
              }
 else {
                if (countMap.get(currentInput) >= currentInput.getMaxCount()) {
                  if (currentInput.getNextInputs(countMap).size() > 0) {
                    currentInput=currentInput.getNextInputs(countMap).get(0);
                    if (countMap.get(currentInput) == null) {
                      countMap.put(currentInput,0);
                    }
                    Iterator<InputLine> iter=countMap.keySet().iterator();
                    while (iter.hasNext()) {
                      InputLine inputLine=iter.next();
                      if (inputLine.level > currentInput.level) {
                        iter.remove();
                      }
                    }
                  }
 else {
                    currentInput=null;
                  }
                }
              }
            }
          }
        }
        rawPos=context.raFile.getFilePointer();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  for (  Entry<InputLine,Integer> entry : countMap.entrySet()) {
    if (entry.getValue() < entry.getKey().getMinCount()) {
      event=null;
    }
  }
  context.setLocation(new TmfLocation<Long>((Long)null));
  return event;
}","@Override public TmfEvent parseEvent(TmfContext tmfContext){
  if (!(tmfContext instanceof CustomTxtTraceContext)) {
    return null;
  }
  CustomTxtTraceContext context=(CustomTxtTraceContext)tmfContext;
  if (!(context.getLocation().getLocation() instanceof Long) || NULL_LOCATION.equals(context.getLocation())) {
    return null;
  }
  CustomTxtEvent event=parseFirstLine(context);
  HashMap<InputLine,Integer> countMap=new HashMap<InputLine,Integer>();
  InputLine currentInput=null;
  if (context.inputLine.childrenInputs != null && context.inputLine.childrenInputs.size() > 0) {
    currentInput=context.inputLine.childrenInputs.get(0);
    countMap.put(currentInput,0);
  }
synchronized (context.raFile) {
    try {
      if (context.raFile.getFilePointer() != context.nextLineLocation) {
        context.raFile.seek(context.nextLineLocation);
      }
      String line;
      long rawPos=context.raFile.getFilePointer();
      while ((line=context.raFile.getNextLine()) != null) {
        boolean processed=false;
        if (currentInput == null) {
          for (          InputLine input : getFirstLines()) {
            Matcher matcher=input.getPattern().matcher(line);
            if (matcher.find()) {
              context.setLocation(new TmfLocation<Long>(rawPos));
              context.firstLineMatcher=matcher;
              context.firstLine=line;
              context.nextLineLocation=context.raFile.getFilePointer();
              context.inputLine=input;
              return event;
            }
          }
        }
 else {
          if (countMap.get(currentInput) >= currentInput.getMinCount()) {
            List<InputLine> nextInputs=currentInput.getNextInputs(countMap);
            if (nextInputs.size() == 0 || nextInputs.get(nextInputs.size() - 1).getMinCount() == 0) {
              for (              InputLine input : getFirstLines()) {
                Matcher matcher=input.getPattern().matcher(line);
                if (matcher.find()) {
                  context.setLocation(new TmfLocation<Long>(rawPos));
                  context.firstLineMatcher=matcher;
                  context.firstLine=line;
                  context.nextLineLocation=context.raFile.getFilePointer();
                  context.inputLine=input;
                  return event;
                }
              }
            }
            for (            InputLine input : nextInputs) {
              Matcher matcher=input.getPattern().matcher(line);
              if (matcher.find()) {
                event.processGroups(input,matcher);
                currentInput=input;
                if (countMap.get(currentInput) == null) {
                  countMap.put(currentInput,1);
                }
 else {
                  countMap.put(currentInput,countMap.get(currentInput) + 1);
                }
                Iterator<InputLine> iter=countMap.keySet().iterator();
                while (iter.hasNext()) {
                  InputLine inputLine=iter.next();
                  if (inputLine.level > currentInput.level) {
                    iter.remove();
                  }
                }
                if (currentInput.childrenInputs != null && currentInput.childrenInputs.size() > 0) {
                  currentInput=currentInput.childrenInputs.get(0);
                  countMap.put(currentInput,0);
                }
 else {
                  if (countMap.get(currentInput) >= currentInput.getMaxCount()) {
                    if (currentInput.getNextInputs(countMap).size() > 0) {
                      currentInput=currentInput.getNextInputs(countMap).get(0);
                      if (countMap.get(currentInput) == null) {
                        countMap.put(currentInput,0);
                      }
                      iter=countMap.keySet().iterator();
                      while (iter.hasNext()) {
                        InputLine inputLine=iter.next();
                        if (inputLine.level > currentInput.level) {
                          iter.remove();
                        }
                      }
                    }
 else {
                      currentInput=null;
                    }
                  }
                }
                processed=true;
                break;
              }
            }
          }
          if (!processed) {
            Matcher matcher=currentInput.getPattern().matcher(line);
            if (matcher.find()) {
              event.processGroups(currentInput,matcher);
              countMap.put(currentInput,countMap.get(currentInput) + 1);
              if (currentInput.childrenInputs != null && currentInput.childrenInputs.size() > 0) {
                currentInput=currentInput.childrenInputs.get(0);
                countMap.put(currentInput,0);
              }
 else {
                if (countMap.get(currentInput) >= currentInput.getMaxCount()) {
                  if (currentInput.getNextInputs(countMap).size() > 0) {
                    currentInput=currentInput.getNextInputs(countMap).get(0);
                    if (countMap.get(currentInput) == null) {
                      countMap.put(currentInput,0);
                    }
                    Iterator<InputLine> iter=countMap.keySet().iterator();
                    while (iter.hasNext()) {
                      InputLine inputLine=iter.next();
                      if (inputLine.level > currentInput.level) {
                        iter.remove();
                      }
                    }
                  }
 else {
                    currentInput=null;
                  }
                }
              }
            }
            ((StringBuffer)event.getContent().getContent()).append(""String_Node_Str"").append(line);
          }
        }
        rawPos=context.raFile.getFilePointer();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  for (  Entry<InputLine,Integer> entry : countMap.entrySet()) {
    if (entry.getValue() < entry.getKey().getMinCount()) {
      event=null;
    }
  }
  context.setLocation(NULL_LOCATION);
  return event;
}",0.9763383117972816
92881,"public CustomTxtTrace(String name,CustomTxtTraceDefinition definition,String path,int cacheSize) throws FileNotFoundException {
  super(name,CustomTxtEvent.class,path,cacheSize);
  fDefinition=definition;
}","public CustomTxtTrace(String name,CustomTxtTraceDefinition definition,String path,int cacheSize) throws FileNotFoundException {
  super(name,CustomTxtEvent.class,path,cacheSize);
  fDefinition=definition;
  fEventType=new CustomTxtEventType(fDefinition);
}",0.8917748917748918
92882,"public CustomTxtEvent parseFirstLine(CustomTxtTraceContext context){
  CustomTxtEvent event=new CustomTxtEvent(fDefinition,TmfTimestamp.Zero,new TmfEventSource(""String_Node_Str""),new TmfEventType(fDefinition.definitionName,new String[0]),new TmfEventReference(""String_Node_Str""));
  event.processGroups(context.inputLine,context.firstLineMatcher);
  return event;
}","public CustomTxtEvent parseFirstLine(CustomTxtTraceContext context){
  CustomTxtEvent event=new CustomTxtEvent(fDefinition,TmfTimestamp.Zero,new TmfEventSource(""String_Node_Str""),fEventType,new TmfEventReference(""String_Node_Str""));
  event.processGroups(context.inputLine,context.firstLineMatcher);
  event.setContent(new CustomEventContent(event,new StringBuffer(context.firstLine)));
  return event;
}",0.8244473342002601
92883,"@Override public void handleCompleted(){
  final TmfTimestamp timestamp[]=new TmfTimestamp[1];
  timestamp[0]=signal.getCurrentTime();
  if (timestamp[0].compareTo(fTrace.getStartTime(),true) == -1) {
    timestamp[0]=fTrace.getStartTime();
  }
  if (timestamp[0].compareTo(fTrace.getEndTime(),true) == 1) {
    timestamp[0]=fTrace.getEndTime();
  }
  final int index=(int)fTrace.getRank(timestamp[0]);
  fTable.getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTable.isDisposed())       return;
      fTable.setSelection(index);
      if ((index >= fCacheStartIndex) && (index < fCacheEndIndex)) {
        fTable.notifyUpdatedSelection(timestamp[0]);
      }
      if ((index > 0) && (index == fTable.getTopIndex())) {
        fTable.setTopIndex(index - 1);
      }
    }
  }
);
  super.handleCompleted();
}","@Override public void handleCompleted(){
  final TmfTimestamp timestamp[]=new TmfTimestamp[1];
  timestamp[0]=signal.getCurrentTime();
  if (timestamp[0].compareTo(fTrace.getStartTime(),true) == -1) {
    timestamp[0]=fTrace.getStartTime();
  }
  if (timestamp[0].compareTo(fTrace.getEndTime(),true) == 1) {
    timestamp[0]=fTrace.getEndTime();
  }
  final int index=(int)fTrace.getRank(timestamp[0]);
  fTable.getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      if (fTable.isDisposed())       return;
      fTable.setSelection(index);
      if ((index >= fCacheStartIndex) && (index < fCacheEndIndex)) {
      }
      if ((index > 0) && (index == fTable.getTopIndex())) {
        fTable.setTopIndex(index - 1);
      }
    }
  }
);
  super.handleCompleted();
}",0.967464702271332
92884,"@Override public void run(){
  if (!fTable.isDisposed()) {
    fTable.refresh();
    fTable.notifyUpdatedSelection();
  }
}","@Override public void run(){
  if (!fTable.isDisposed()) {
    fTable.refresh();
  }
}",0.8229665071770335
92885,"private synchronized void populateCache(final int index){
  if (job != null) {
    if (job.getState() != Job.NONE) {
      if (index >= fCacheStartIndex && index < (fCacheStartIndex + fCacheSize)) {
        return;
      }
      job.cancel();
    }
  }
  fCacheStartIndex=index;
  fCacheEndIndex=index;
  job=new Job(""String_Node_Str""){
    @Override @SuppressWarnings(""String_Node_Str"") protected IStatus run(    final IProgressMonitor monitor){
      TmfDataRequest<TmfEvent> request=new TmfDataRequest<TmfEvent>(TmfEvent.class,index,fCacheSize){
        private int count=0;
        @Override public void handleData(        TmfEvent event){
          if (monitor.isCanceled()) {
            cancel();
            return;
          }
          super.handleData(event);
          if (event != null) {
            fCache[count++]=event.clone();
            fCacheEndIndex++;
          }
        }
      }
;
      ((ITmfDataProvider<TmfEvent>)fTrace).sendRequest(request);
      try {
        request.waitForCompletion();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      if (!fTable.isDisposed() && !monitor.isCanceled()) {
        fTable.getDisplay().asyncExec(new Runnable(){
          @Override public void run(){
            if (!fTable.isDisposed()) {
              fTable.refresh();
              fTable.notifyUpdatedSelection();
            }
          }
        }
);
      }
      if (monitor.isCanceled()) {
        return new Status(IStatus.CANCEL,TmfUiPlugin.PLUGIN_ID,""String_Node_Str"");
      }
 else {
        return new Status(IStatus.OK,TmfUiPlugin.PLUGIN_ID,""String_Node_Str"");
      }
    }
  }
;
  job.setPriority(Job.SHORT);
  job.schedule();
}","private synchronized void populateCache(final int index){
  if (job != null) {
    if (job.getState() != Job.NONE) {
      if (index >= fCacheStartIndex && index < (fCacheStartIndex + fCacheSize)) {
        return;
      }
      job.cancel();
    }
  }
  fCacheStartIndex=index;
  fCacheEndIndex=index;
  job=new Job(""String_Node_Str""){
    @Override @SuppressWarnings(""String_Node_Str"") protected IStatus run(    final IProgressMonitor monitor){
      TmfDataRequest<TmfEvent> request=new TmfDataRequest<TmfEvent>(TmfEvent.class,index,fCacheSize){
        private int count=0;
        @Override public void handleData(        TmfEvent event){
          if (monitor.isCanceled()) {
            cancel();
            return;
          }
          super.handleData(event);
          if (event != null) {
            fCache[count++]=event.clone();
            fCacheEndIndex++;
          }
        }
      }
;
      ((ITmfDataProvider<TmfEvent>)fTrace).sendRequest(request);
      try {
        request.waitForCompletion();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      if (!fTable.isDisposed() && !monitor.isCanceled()) {
        fTable.getDisplay().asyncExec(new Runnable(){
          @Override public void run(){
            if (!fTable.isDisposed()) {
              fTable.refresh();
            }
          }
        }
);
      }
      if (monitor.isCanceled()) {
        return new Status(IStatus.CANCEL,TmfUiPlugin.PLUGIN_ID,""String_Node_Str"");
      }
 else {
        return new Status(IStatus.OK,TmfUiPlugin.PLUGIN_ID,""String_Node_Str"");
      }
    }
  }
;
  job.setPriority(Job.SHORT);
  job.schedule();
}",0.9860243829913768
92886,"@TmfSignalHandler public void currentTimeUpdated(final TmfTimeSynchSignal signal){
  if ((signal.getSource() != fTable) && (fTrace != null) && (!fTable.isDisposed())) {
    final TmfDataRequest<TmfEvent> subRequest=new TmfDataRequest<TmfEvent>(TmfEvent.class,0,1,ExecutionType.FOREGROUND){
      @Override public void handleData(      TmfEvent event){
        super.handleData(event);
      }
      @Override public void handleCompleted(){
        final TmfTimestamp timestamp[]=new TmfTimestamp[1];
        timestamp[0]=signal.getCurrentTime();
        if (timestamp[0].compareTo(fTrace.getStartTime(),true) == -1) {
          timestamp[0]=fTrace.getStartTime();
        }
        if (timestamp[0].compareTo(fTrace.getEndTime(),true) == 1) {
          timestamp[0]=fTrace.getEndTime();
        }
        final int index=(int)fTrace.getRank(timestamp[0]);
        fTable.getDisplay().asyncExec(new Runnable(){
          @Override public void run(){
            if (fTable.isDisposed())             return;
            fTable.setSelection(index);
            if ((index >= fCacheStartIndex) && (index < fCacheEndIndex)) {
              fTable.notifyUpdatedSelection(timestamp[0]);
            }
            if ((index > 0) && (index == fTable.getTopIndex())) {
              fTable.setTopIndex(index - 1);
            }
          }
        }
);
        super.handleCompleted();
      }
    }
;
    @SuppressWarnings(""String_Node_Str"") TmfExperiment<TmfEvent> experiment=(TmfExperiment<TmfEvent>)TmfExperiment.getCurrentExperiment();
    if (experiment != null) {
      experiment.sendRequest(subRequest);
    }
  }
}","@TmfSignalHandler public void currentTimeUpdated(final TmfTimeSynchSignal signal){
  if ((signal.getSource() != fTable) && (fTrace != null) && (!fTable.isDisposed())) {
    final TmfDataRequest<TmfEvent> subRequest=new TmfDataRequest<TmfEvent>(TmfEvent.class,0,1,ExecutionType.FOREGROUND){
      @Override public void handleData(      TmfEvent event){
        super.handleData(event);
      }
      @Override public void handleCompleted(){
        final TmfTimestamp timestamp[]=new TmfTimestamp[1];
        timestamp[0]=signal.getCurrentTime();
        if (timestamp[0].compareTo(fTrace.getStartTime(),true) == -1) {
          timestamp[0]=fTrace.getStartTime();
        }
        if (timestamp[0].compareTo(fTrace.getEndTime(),true) == 1) {
          timestamp[0]=fTrace.getEndTime();
        }
        final int index=(int)fTrace.getRank(timestamp[0]);
        fTable.getDisplay().asyncExec(new Runnable(){
          @Override public void run(){
            if (fTable.isDisposed())             return;
            fTable.setSelection(index);
            if ((index >= fCacheStartIndex) && (index < fCacheEndIndex)) {
            }
            if ((index > 0) && (index == fTable.getTopIndex())) {
              fTable.setTopIndex(index - 1);
            }
          }
        }
);
        super.handleCompleted();
      }
    }
;
    @SuppressWarnings(""String_Node_Str"") TmfExperiment<TmfEvent> experiment=(TmfExperiment<TmfEvent>)TmfExperiment.getCurrentExperiment();
    if (experiment != null) {
      experiment.sendRequest(subRequest);
    }
  }
}",0.9813938820561338
92887,"public TmfEventsTable(Composite parent,int cacheSize,ColumnData[] columnData){
  super(""String_Node_Str"");
  fCacheSize=cacheSize;
  fCache=new TmfEvent[fCacheSize];
  final int style=SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER;
  fTable=new TmfVirtualTable(parent,style);
  GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
  fTable.setLayoutData(layoutData);
  fTable.setHeaderVisible(true);
  fTable.setLinesVisible(true);
  setColumnHeaders(columnData);
  fTable.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TmfTimestamp ts=(TmfTimestamp)fTable.getSelection()[0].getData();
      broadcast(new TmfTimeSynchSignal(fTable,ts));
    }
  }
);
  fTable.addListener(SWT.SetData,new Listener(){
    @Override public void handleEvent(    Event event){
      final TableItem item=(TableItem)event.item;
      final int index=fTable.indexOf(item);
      if ((index >= fCacheStartIndex) && (index < fCacheEndIndex)) {
        int i=index - fCacheStartIndex;
        item.setText(extractItemFields(fCache[i]));
        item.setData(new TmfTimestamp(fCache[i].getTimestamp()));
        return;
      }
      populateCache(index);
    }
  }
);
  fTable.setItemCount(0);
}","public TmfEventsTable(Composite parent,int cacheSize,ColumnData[] columnData){
  super(""String_Node_Str"");
  fCacheSize=cacheSize;
  fCache=new TmfEvent[fCacheSize];
  final int style=SWT.H_SCROLL | SWT.V_SCROLL | SWT.SINGLE| SWT.FULL_SELECTION;
  fTable=new TmfVirtualTable(parent,style);
  GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
  fTable.setLayoutData(layoutData);
  fTable.setHeaderVisible(true);
  fTable.setLinesVisible(true);
  setColumnHeaders(columnData);
  fTable.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TmfTimestamp ts=(TmfTimestamp)fTable.getSelection()[0].getData();
      broadcast(new TmfTimeSynchSignal(fTable,ts));
    }
  }
);
  fTable.addListener(SWT.SetData,new Listener(){
    @Override public void handleEvent(    Event event){
      final TableItem item=(TableItem)event.item;
      final int index=fTable.indexOf(item);
      if ((index >= fCacheStartIndex) && (index < fCacheEndIndex)) {
        int i=index - fCacheStartIndex;
        item.setText(extractItemFields(fCache[i]));
        item.setData(new TmfTimestamp(fCache[i].getTimestamp()));
        return;
      }
      populateCache(index);
    }
  }
);
  fTable.setItemCount(0);
}",0.9824421388667198
92888,"@Override public void handleSuccess(){
  updateTraceData();
}","@Override public void handleSuccess(){
  updateTrace();
}",0.9661016949152542
92889,"@Override public void handleData(TmfEvent event){
  super.handleData(event);
  if (event != null) {
    TmfTimestamp ts=event.getTimestamp();
    if (startTime == null) {
      startTime=new TmfTimestamp(ts);
      fStartTime=startTime;
    }
    lastTime=new TmfTimestamp(ts);
    if ((getNbRead() % fIndexPageSize) == 0) {
      updateTraceData();
    }
  }
}","@Override public void handleData(T data){
  super.handleData(data);
  eventRequest.handleData(data);
  if (getNbRead() == CHUNK_SIZE[0]) {
    nbRead[0]+=getNbRead();
  }
  if (getNbRead() > CHUNK_SIZE[0]) {
    System.out.println(""String_Node_Str"");
  }
}",0.1815235008103727
92890,"@Override protected void queueBackgroundRequest(final ITmfDataRequest<T> request,final int blockSize,final boolean adjust){
  super.queueBackgroundRequest(request,fIndexPageSize,true);
}","@Override protected void queueBackgroundRequest(final ITmfDataRequest<T> request,final int blockSize,final boolean indexing){
  if (!(request instanceof ITmfEventRequest<?>)) {
    super.queueRequest(request);
    return;
  }
  final ITmfEventRequest<T> eventRequest=(ITmfEventRequest<T>)request;
  Thread thread=new Thread(){
    @Override public void run(){
      final Integer[] CHUNK_SIZE=new Integer[1];
      CHUNK_SIZE[0]=blockSize + ((indexing) ? 1 : 0);
      final Integer[] nbRead=new Integer[1];
      nbRead[0]=0;
      final Boolean[] isFinished=new Boolean[1];
      isFinished[0]=Boolean.FALSE;
      while (!isFinished[0]) {
        TmfDataRequest<T> subRequest=new TmfDataRequest<T>(eventRequest.getDataType(),nbRead[0],CHUNK_SIZE[0],ExecutionType.BACKGROUND){
          @Override public void handleData(          T data){
            super.handleData(data);
            eventRequest.handleData(data);
            if (getNbRead() == CHUNK_SIZE[0]) {
              nbRead[0]+=getNbRead();
            }
            if (getNbRead() > CHUNK_SIZE[0]) {
              System.out.println(""String_Node_Str"");
            }
          }
          @Override public void handleCompleted(){
            if (getNbRead() < CHUNK_SIZE[0]) {
              if (isCancelled()) {
                eventRequest.cancel();
              }
 else {
                eventRequest.done();
              }
              isFinished[0]=Boolean.TRUE;
              nbRead[0]+=getNbRead();
            }
            super.handleCompleted();
          }
        }
;
        if (!isFinished[0]) {
          queueRequest(subRequest);
          try {
            subRequest.waitForCompletion();
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          CHUNK_SIZE[0]=blockSize;
        }
      }
    }
  }
;
  thread.start();
}",0.1406936980947728
92891,"@SuppressWarnings({""String_Node_Str""}) private void indexTrace(boolean waitForCompletion){
  fCheckpoints.clear();
  ITmfEventRequest<TmfEvent> request=new TmfEventRequest<TmfEvent>(TmfEvent.class,TmfTimeRange.Eternity,TmfDataRequest.ALL_DATA,1,ITmfDataRequest.ExecutionType.BACKGROUND){
    TmfTimestamp startTime=null;
    TmfTimestamp lastTime=null;
    @Override public void handleData(    TmfEvent event){
      super.handleData(event);
      if (event != null) {
        TmfTimestamp ts=event.getTimestamp();
        if (startTime == null)         startTime=new TmfTimestamp(ts);
        lastTime=new TmfTimestamp(ts);
        if ((getNbRead() % DEFAULT_INDEX_PAGE_SIZE) == 0) {
          updateTrace();
        }
      }
    }
    @Override public void handleSuccess(){
      updateTrace();
    }
    private void updateTrace(){
      int nbRead=getNbRead();
      if (nbRead != 0) {
        fStartTime=startTime;
        fEndTime=lastTime;
        fNbEvents=nbRead;
        notifyListeners();
      }
    }
  }
;
  sendRequest((ITmfDataRequest<T>)request);
  if (waitForCompletion)   try {
    request.waitForCompletion();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","@SuppressWarnings({""String_Node_Str""}) private void indexTrace(boolean waitForCompletion){
  fCheckpoints.clear();
  ITmfEventRequest<TmfEvent> request=new TmfEventRequest<TmfEvent>(TmfEvent.class,TmfTimeRange.Eternity,TmfDataRequest.ALL_DATA,1,ITmfDataRequest.ExecutionType.BACKGROUND){
    TmfTimestamp startTime=null;
    TmfTimestamp lastTime=null;
    @Override public void handleData(    TmfEvent event){
      super.handleData(event);
      if (event != null) {
        TmfTimestamp ts=event.getTimestamp();
        if (startTime == null)         startTime=new TmfTimestamp(ts);
        lastTime=new TmfTimestamp(ts);
        if ((getNbRead() % fIndexPageSize) == 0) {
          updateTrace();
        }
      }
    }
    @Override public void handleSuccess(){
      updateTrace();
    }
    private void updateTrace(){
      int nbRead=getNbRead();
      if (nbRead != 0) {
        fStartTime=startTime;
        fEndTime=lastTime;
        fNbEvents=nbRead;
        notifyListeners();
      }
    }
  }
;
  sendRequest((ITmfDataRequest<T>)request);
  if (waitForCompletion)   try {
    request.waitForCompletion();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}",0.9870455495194316
92892,"@SuppressWarnings(""String_Node_Str"") private void indexExperiment(boolean waitForCompletion){
  fCheckpoints.clear();
  ITmfEventRequest<TmfEvent> request=new TmfEventRequest<TmfEvent>(TmfEvent.class,TmfTimeRange.Eternity,TmfDataRequest.ALL_DATA,1,ITmfDataRequest.ExecutionType.BACKGROUND){
    TmfTimestamp startTime=null;
    TmfTimestamp lastTime=null;
    @Override public void handleData(    TmfEvent event){
      super.handleData(event);
      if (event != null) {
        TmfTimestamp ts=event.getTimestamp();
        if (startTime == null)         startTime=new TmfTimestamp(ts);
        lastTime=new TmfTimestamp(ts);
        if ((getNbRead() % fIndexPageSize) == 0) {
          updateExperiment();
        }
      }
    }
    @Override public void handleSuccess(){
      updateExperiment();
      super.handleSuccess();
    }
    private void updateExperiment(){
      int nbRead=getNbRead();
      if (nbRead != 0) {
        fTimeRange=new TmfTimeRange(startTime,new TmfTimestamp(lastTime));
        fNbEvents=nbRead;
        notifyListeners();
      }
    }
  }
;
  sendRequest((ITmfDataRequest<T>)request);
  if (waitForCompletion)   try {
    request.waitForCompletion();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","@SuppressWarnings(""String_Node_Str"") protected void indexExperiment(boolean waitForCompletion){
  final Job job=new Job(""String_Node_Str"" + getName() + ""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      while (!monitor.isCanceled()) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          return Status.OK_STATUS;
        }
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
  fCheckpoints.clear();
  ITmfEventRequest<TmfEvent> request=new TmfEventRequest<TmfEvent>(TmfEvent.class,TmfTimeRange.Eternity,TmfDataRequest.ALL_DATA,1,ITmfDataRequest.ExecutionType.BACKGROUND){
    TmfTimestamp startTime=null;
    TmfTimestamp lastTime=null;
    @Override public void handleData(    TmfEvent event){
      super.handleData(event);
      if (event != null) {
        TmfTimestamp ts=event.getTimestamp();
        if (startTime == null)         startTime=new TmfTimestamp(ts);
        lastTime=new TmfTimestamp(ts);
        if ((getNbRead() % fIndexPageSize) == 0) {
          updateExperiment();
        }
      }
    }
    @Override public void handleSuccess(){
      updateExperiment();
      super.handleSuccess();
    }
    @Override public void handleCompleted(){
      job.cancel();
      super.handleCompleted();
    }
    private void updateExperiment(){
      int nbRead=getNbRead();
      if (nbRead != 0) {
        fTimeRange=new TmfTimeRange(startTime,new TmfTimestamp(lastTime));
        fNbEvents=nbRead;
        notifyListeners();
      }
    }
  }
;
  sendRequest((ITmfDataRequest<T>)request);
  if (waitForCompletion)   try {
    request.waitForCompletion();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}",0.8264026402640264
92893,"/** 
 * @param path
 * @param cacheSize
 * @throws FileNotFoundException
 */
protected TmfTrace(String name,Class<T> type,String path,int cacheSize) throws FileNotFoundException {
  super(name,type);
  int sep=path.lastIndexOf(File.separator);
  String simpleName=(sep >= 0) ? path.substring(sep + 1) : path;
  setName(simpleName);
  fPath=path;
  fIndexPageSize=(cacheSize > 0) ? cacheSize : DEFAULT_INDEX_PAGE_SIZE;
}","/** 
 * @param path
 * @param cacheSize
 * @param indexTrace
 * @throws FileNotFoundException
 */
protected TmfTrace(String name,Class<T> type,String path,int cacheSize,boolean indexTrace) throws FileNotFoundException {
  super(name,type);
  int sep=path.lastIndexOf(File.separator);
  String simpleName=(sep >= 0) ? path.substring(sep + 1) : path;
  setName(simpleName);
  fPath=path;
  fIndexPageSize=(cacheSize > 0) ? cacheSize : DEFAULT_INDEX_PAGE_SIZE;
}",0.9544419134396356
92894,"@SuppressWarnings({""String_Node_Str""}) private void indexTrace(boolean waitForCompletion){
  fCheckpoints.clear();
  ITmfEventRequest<TmfEvent> request=new TmfEventRequest<TmfEvent>(TmfEvent.class,TmfTimeRange.Eternity,TmfDataRequest.ALL_DATA,1,ITmfDataRequest.ExecutionType.BACKGROUND){
    TmfTimestamp startTime=null;
    TmfTimestamp lastTime=null;
    @Override public void handleData(    TmfEvent event){
      super.handleData(event);
      if (event != null) {
        TmfTimestamp ts=event.getTimestamp();
        if (startTime == null)         startTime=new TmfTimestamp(ts);
        lastTime=new TmfTimestamp(ts);
        if ((getNbRead() % fIndexPageSize) == 0) {
          updateTrace();
        }
      }
    }
    @Override public void handleSuccess(){
      updateTrace();
    }
    private void updateTrace(){
      int nbRead=getNbRead();
      if (nbRead != 0) {
        fStartTime=startTime;
        fEndTime=lastTime;
        fNbEvents=nbRead;
        notifyListeners();
      }
    }
  }
;
  sendRequest((ITmfDataRequest<T>)request);
  if (waitForCompletion)   try {
    request.waitForCompletion();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","@SuppressWarnings({""String_Node_Str""}) private void indexTrace(boolean waitForCompletion){
  final Job job=new Job(""String_Node_Str"" + getName() + ""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      while (!monitor.isCanceled()) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          return Status.OK_STATUS;
        }
      }
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.schedule();
  fCheckpoints.clear();
  ITmfEventRequest<TmfEvent> request=new TmfEventRequest<TmfEvent>(TmfEvent.class,TmfTimeRange.Eternity,TmfDataRequest.ALL_DATA,1,ITmfDataRequest.ExecutionType.BACKGROUND){
    TmfTimestamp startTime=null;
    TmfTimestamp lastTime=null;
    @Override public void handleData(    TmfEvent event){
      super.handleData(event);
      if (event != null) {
        TmfTimestamp ts=event.getTimestamp();
        if (startTime == null)         startTime=new TmfTimestamp(ts);
        lastTime=new TmfTimestamp(ts);
        if ((getNbRead() % fIndexPageSize) == 0) {
          updateTrace();
        }
      }
    }
    @Override public void handleSuccess(){
      updateTrace();
    }
    @Override public void handleCompleted(){
      job.cancel();
      super.handleCompleted();
    }
    private void updateTrace(){
      int nbRead=getNbRead();
      if (nbRead != 0) {
        fStartTime=startTime;
        fEndTime=lastTime;
        fNbEvents=nbRead;
        notifyListeners();
      }
    }
  }
;
  sendRequest((ITmfDataRequest<T>)request);
  if (waitForCompletion)   try {
    request.waitForCompletion();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}",0.8226363008971704
92895,"@Override public boolean performDrop(Object data){
  Object target=getCurrentTarget();
  ITmfProjectTreeNode node=(TmfProjectTreeNode)target;
  while (node != null && !(node instanceof TmfProjectNode)) {
    node=node.getParent();
  }
  IFolder targetFolder=((TmfProjectNode)node).getTracesFolder().getFolder();
  if (data instanceof String[]) {
    System.out.println(""String_Node_Str"" + ((String[])data)[0]);
    System.out.println(""String_Node_Str"" + targetFolder);
    for (    String path : (String[])data) {
      File sourceFile=new File(path);
      if (sourceFile.isFile()) {
        IFile file=targetFolder.getFile(path.substring(path.lastIndexOf(File.separator)));
        try {
          file.createLink(sourceFile.toURI(),IResource.NONE,null);
          ITmfTrace trace=ParserProviderManager.getTrace(file);
          if (trace != null) {
            trace.dispose();
          }
        }
 catch (        CoreException e) {
          e.printStackTrace();
        }
      }
    }
  }
 else   if (data instanceof IResource[]) {
    System.out.println(""String_Node_Str"" + ((IResource[])data)[0].getName());
    System.out.println(""String_Node_Str"" + targetFolder);
    for (    IResource resource : (IResource[])data) {
      if (resource instanceof IFile) {
        IFile file=targetFolder.getFile(resource.getName());
        try {
          file.createLink(resource.getLocation(),IResource.NONE,null);
          String parser=resource.getPersistentProperty(ParserProviderManager.PARSER_PROPERTY);
          file.setPersistentProperty(ParserProviderManager.PARSER_PROPERTY,parser);
        }
 catch (        CoreException e) {
          e.printStackTrace();
        }
      }
    }
  }
  return true;
}","@Override public boolean performDrop(Object data){
  Object target=getCurrentTarget();
  ITmfProjectTreeNode node=(TmfProjectTreeNode)target;
  while (node != null && !(node instanceof TmfProjectNode)) {
    node=node.getParent();
  }
  IFolder targetFolder=((TmfProjectNode)node).getTracesFolder().getFolder();
  if (data instanceof String[]) {
    for (    String path : (String[])data) {
      File sourceFile=new File(path);
      if (sourceFile.isFile()) {
        IFile file=targetFolder.getFile(path.substring(path.lastIndexOf(File.separator)));
        try {
          file.createLink(sourceFile.toURI(),IResource.NONE,null);
          ITmfTrace trace=ParserProviderManager.getTrace(file);
          if (trace != null) {
            trace.dispose();
          }
        }
 catch (        CoreException e) {
          e.printStackTrace();
        }
      }
    }
  }
 else   if (data instanceof IResource[]) {
    for (    IResource resource : (IResource[])data) {
      if (resource instanceof IFile) {
        IFile file=targetFolder.getFile(resource.getName());
        try {
          file.createLink(resource.getLocation(),IResource.NONE,null);
          String parser=resource.getPersistentProperty(ParserProviderManager.PARSER_PROPERTY);
          file.setPersistentProperty(ParserProviderManager.PARSER_PROPERTY,parser);
        }
 catch (        CoreException e) {
          e.printStackTrace();
        }
      }
    }
  }
  return true;
}",0.9183222958057397
92896,"public void selectExperiment(TmfExperimentNode experiment){
  String expId=experiment.getName();
  try {
    TmfTraceNode[] traceEntries=experiment.getTraces();
    int nbTraces=traceEntries.length;
    List<ITmfTrace> traces=new ArrayList<ITmfTrace>();
    int cacheSize=Integer.MAX_VALUE;
    for (int i=0; i < nbTraces; i++) {
      IResource resource=traceEntries[i].getResource();
      resource=experiment.getProject().getTracesFolder().getTraceForLocation(resource.getLocation()).getResource();
      ITmfTrace expTrace=ParserProviderManager.getTrace(resource);
      if (expTrace != null) {
        traces.add(expTrace);
        cacheSize=Math.min(cacheSize,expTrace.getCacheSize());
        try {
          ITmfTrace trace=ParserProviderManager.getTrace(resource);
          IEditorInput editorInput=new TmfEditorInput(resource,trace);
          IWorkbench wb=PlatformUI.getWorkbench();
          IWorkbenchPage activePage=wb.getActiveWorkbenchWindow().getActivePage();
          String editorId=ParserProviderManager.getEditorId(resource);
          IEditorPart editor=activePage.findEditor(editorInput);
          if (editor != null && editor instanceof IReusableEditor) {
            activePage.reuseEditor((IReusableEditor)editor,editorInput);
            activePage.activate(editor);
          }
 else {
            editor=activePage.openEditor(editorInput,editorId);
          }
        }
 catch (        PartInitException e) {
          e.printStackTrace();
        }
      }
    }
    TmfExperiment<TmfEvent> selectedExperiment=new TmfExperiment<TmfEvent>(TmfEvent.class,expId,traces.toArray(new ITmfTrace[0]),cacheSize);
    broadcast(new TmfExperimentSelectedSignal<TmfEvent>(this,selectedExperiment));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void selectExperiment(TmfExperimentNode experiment){
  String expId=experiment.getName();
  try {
    TmfTraceNode[] traceEntries=experiment.getTraces();
    int nbTraces=traceEntries.length;
    List<ITmfTrace> traces=new ArrayList<ITmfTrace>();
    int cacheSize=Integer.MAX_VALUE;
    for (int i=0; i < nbTraces; i++) {
      IResource resource=traceEntries[i].getResource();
      resource=experiment.getProject().getTracesFolder().getTraceForLocation(resource.getLocation()).getResource();
      ITmfTrace expTrace=ParserProviderManager.getTrace(resource);
      if (expTrace != null) {
        traces.add(expTrace);
        cacheSize=Math.min(cacheSize,expTrace.getCacheSize());
        try {
          ITmfTrace trace=ParserProviderManager.getTrace(resource);
          IEditorInput editorInput=new TmfEditorInput(resource,trace);
          IWorkbench wb=PlatformUI.getWorkbench();
          IWorkbenchPage activePage=wb.getActiveWorkbenchWindow().getActivePage();
          String editorId=ParserProviderManager.getEditorId(resource);
          if (resource instanceof IFile) {
            IDE.setDefaultEditor((IFile)resource,editorId);
          }
          IEditorPart editor=activePage.findEditor(editorInput);
          if (editor != null && editor instanceof IReusableEditor) {
            activePage.reuseEditor((IReusableEditor)editor,editorInput);
            activePage.activate(editor);
          }
 else {
            editor=activePage.openEditor(editorInput,editorId);
          }
        }
 catch (        PartInitException e) {
          e.printStackTrace();
        }
      }
    }
    TmfExperiment<TmfEvent> selectedExperiment=new TmfExperiment<TmfEvent>(TmfEvent.class,expId,traces.toArray(new ITmfTrace[0]),cacheSize);
    broadcast(new TmfExperimentSelectedSignal<TmfEvent>(this,selectedExperiment));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9687245036714712
92897,"@Override public void createPartControl(Composite parent){
  fViewer=new TreeViewer(parent,SWT.SINGLE);
  fViewer.setContentProvider(new TmfProjectContentProvider());
  fViewer.setSorter(new ViewerSorter());
  fViewer.setLabelProvider(new TmfProjectLabelProvider());
  fViewer.setInput(fProjectRoot);
  int ops=DND.DROP_COPY | DND.DROP_MOVE | DND.DROP_LINK;
  Transfer[] transfers=new Transfer[]{ResourceTransfer.getInstance(),FileTransfer.getInstance()};
  fViewer.addDropSupport(ops,transfers,new ViewerDropAdapter(fViewer){
    @Override public boolean validateDrop(    Object target,    int operation,    TransferData transferType){
      if (!(target instanceof ITmfProjectTreeNode)) {
        return false;
      }
      overrideOperation(DND.DROP_LINK);
      return true;
    }
    @Override public boolean performDrop(    Object data){
      Object target=getCurrentTarget();
      ITmfProjectTreeNode node=(TmfProjectTreeNode)target;
      while (node != null && !(node instanceof TmfProjectNode)) {
        node=node.getParent();
      }
      IFolder targetFolder=((TmfProjectNode)node).getTracesFolder().getFolder();
      if (data instanceof String[]) {
        System.out.println(""String_Node_Str"" + ((String[])data)[0]);
        System.out.println(""String_Node_Str"" + targetFolder);
        for (        String path : (String[])data) {
          File sourceFile=new File(path);
          if (sourceFile.isFile()) {
            IFile file=targetFolder.getFile(path.substring(path.lastIndexOf(File.separator)));
            try {
              file.createLink(sourceFile.toURI(),IResource.NONE,null);
              ITmfTrace trace=ParserProviderManager.getTrace(file);
              if (trace != null) {
                trace.dispose();
              }
            }
 catch (            CoreException e) {
              e.printStackTrace();
            }
          }
        }
      }
 else       if (data instanceof IResource[]) {
        System.out.println(""String_Node_Str"" + ((IResource[])data)[0].getName());
        System.out.println(""String_Node_Str"" + targetFolder);
        for (        IResource resource : (IResource[])data) {
          if (resource instanceof IFile) {
            IFile file=targetFolder.getFile(resource.getName());
            try {
              file.createLink(resource.getLocation(),IResource.NONE,null);
              String parser=resource.getPersistentProperty(ParserProviderManager.PARSER_PROPERTY);
              file.setPersistentProperty(ParserProviderManager.PARSER_PROPERTY,parser);
            }
 catch (            CoreException e) {
              e.printStackTrace();
            }
          }
        }
      }
      return true;
    }
  }
);
  getSite().setSelectionProvider(fViewer);
  hookMouse();
  createContextMenu();
}","@Override public void createPartControl(Composite parent){
  fViewer=new TreeViewer(parent,SWT.SINGLE);
  fViewer.setContentProvider(new TmfProjectContentProvider());
  fViewer.setSorter(new ViewerSorter());
  fViewer.setLabelProvider(new TmfProjectLabelProvider());
  fViewer.setInput(fProjectRoot);
  int ops=DND.DROP_COPY | DND.DROP_MOVE | DND.DROP_LINK;
  Transfer[] transfers=new Transfer[]{ResourceTransfer.getInstance(),FileTransfer.getInstance()};
  fViewer.addDropSupport(ops,transfers,new ViewerDropAdapter(fViewer){
    @Override public boolean validateDrop(    Object target,    int operation,    TransferData transferType){
      if (!(target instanceof ITmfProjectTreeNode)) {
        return false;
      }
      overrideOperation(DND.DROP_LINK);
      return true;
    }
    @Override public boolean performDrop(    Object data){
      Object target=getCurrentTarget();
      ITmfProjectTreeNode node=(TmfProjectTreeNode)target;
      while (node != null && !(node instanceof TmfProjectNode)) {
        node=node.getParent();
      }
      IFolder targetFolder=((TmfProjectNode)node).getTracesFolder().getFolder();
      if (data instanceof String[]) {
        for (        String path : (String[])data) {
          File sourceFile=new File(path);
          if (sourceFile.isFile()) {
            IFile file=targetFolder.getFile(path.substring(path.lastIndexOf(File.separator)));
            try {
              file.createLink(sourceFile.toURI(),IResource.NONE,null);
              ITmfTrace trace=ParserProviderManager.getTrace(file);
              if (trace != null) {
                trace.dispose();
              }
            }
 catch (            CoreException e) {
              e.printStackTrace();
            }
          }
        }
      }
 else       if (data instanceof IResource[]) {
        for (        IResource resource : (IResource[])data) {
          if (resource instanceof IFile) {
            IFile file=targetFolder.getFile(resource.getName());
            try {
              file.createLink(resource.getLocation(),IResource.NONE,null);
              String parser=resource.getPersistentProperty(ParserProviderManager.PARSER_PROPERTY);
              file.setPersistentProperty(ParserProviderManager.PARSER_PROPERTY,parser);
            }
 catch (            CoreException e) {
              e.printStackTrace();
            }
          }
        }
      }
      return true;
    }
  }
);
  getSite().setSelectionProvider(fViewer);
  hookMouse();
  createContextMenu();
}",0.9481034157388186
92898,"@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  IResource resource=fTrace.getResource();
  if (fTrace.getParent() instanceof TmfExperimentNode) {
    resource=fTrace.getProject().getTracesFolder().getTraceForLocation(resource.getLocation()).getResource();
  }
  ITmfTrace trace=ParserProviderManager.getTrace(resource);
  if (trace == null) {
    return null;
  }
  try {
    IEditorInput editorInput=new TmfEditorInput(resource,trace);
    IWorkbench wb=PlatformUI.getWorkbench();
    IWorkbenchPage activePage=wb.getActiveWorkbenchWindow().getActivePage();
    String editorId=ParserProviderManager.getEditorId(resource);
    IEditorPart editor=activePage.findEditor(editorInput);
    if (editor != null && editor instanceof IReusableEditor) {
      activePage.reuseEditor((IReusableEditor)editor,editorInput);
      activePage.activate(editor);
    }
 else {
      editor=activePage.openEditor(editorInput,editorId);
    }
  }
 catch (  PartInitException e) {
    e.printStackTrace();
  }
  return null;
}","@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  IResource resource=fTrace.getResource();
  if (fTrace.getParent() instanceof TmfExperimentNode) {
    resource=fTrace.getProject().getTracesFolder().getTraceForLocation(resource.getLocation()).getResource();
  }
  ITmfTrace trace=ParserProviderManager.getTrace(resource);
  if (trace == null) {
    return null;
  }
  try {
    IEditorInput editorInput=new TmfEditorInput(resource,trace);
    IWorkbench wb=PlatformUI.getWorkbench();
    IWorkbenchPage activePage=wb.getActiveWorkbenchWindow().getActivePage();
    String editorId=ParserProviderManager.getEditorId(resource);
    if (resource instanceof IFile) {
      IDE.setDefaultEditor((IFile)resource,editorId);
    }
    IEditorPart editor=activePage.findEditor(editorInput);
    if (editor != null && editor instanceof IReusableEditor) {
      activePage.reuseEditor((IReusableEditor)editor,editorInput);
      activePage.activate(editor);
    }
 else {
      editor=activePage.openEditor(editorInput,editorId);
    }
  }
 catch (  PartInitException e) {
    e.printStackTrace();
  }
  return null;
}",0.9556064073226544
92899,"@Override protected IContributionItem[] getContributionItems(){
  Map<String,String> params;
  LinkedList<IContributionItem> list=new LinkedList<IContributionItem>();
  ParserProviderManager.getParserMap();
  for (  Entry<String,Map<String,String>> providerEntry : ParserProviderManager.getParserMap().entrySet()) {
    MenuManager subMenu=new MenuManager(providerEntry.getKey());
    for (    Entry<String,String> entry : providerEntry.getValue().entrySet()) {
      params=new HashMap<String,String>();
      params.put(""String_Node_Str"",entry.getValue());
      CommandContributionItemParameter param=new CommandContributionItemParameter(PlatformUI.getWorkbench().getActiveWorkbenchWindow(),""String_Node_Str"",""String_Node_Str"",params,null,null,null,entry.getKey().replaceAll(""String_Node_Str"",""String_Node_Str""),null,null,CommandContributionItem.STYLE_PUSH,null,true);
      subMenu.add(new CommandContributionItem(param));
    }
    list.add(subMenu);
  }
  return (IContributionItem[])list.toArray(new IContributionItem[list.size()]);
}","@Override protected IContributionItem[] getContributionItems(){
  Map<String,String> params;
  LinkedList<IContributionItem> list=new LinkedList<IContributionItem>();
  ParserProviderManager.getParserMap();
  String parser=null;
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  IWorkbenchPage page=window.getActivePage();
  ISelection selection=page.getSelection(ProjectView.ID);
  if (selection instanceof StructuredSelection) {
    Object element=((StructuredSelection)selection).getFirstElement();
    if (!(element instanceof TmfTraceNode)) {
      return new IContributionItem[0];
    }
    TmfTraceNode trace=(TmfTraceNode)element;
    IResource resource=trace.getResource();
    if (trace.getParent() instanceof TmfExperimentNode) {
      resource=trace.getProject().getTracesFolder().getTraceForLocation(resource.getLocation()).getResource();
    }
    try {
      parser=resource.getPersistentProperty(ParserProviderManager.PARSER_PROPERTY);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
  }
  for (  Entry<String,Map<String,String>> providerEntry : ParserProviderManager.getParserMap().entrySet()) {
    MenuManager subMenu=new MenuManager(providerEntry.getKey());
    for (    Entry<String,String> entry : providerEntry.getValue().entrySet()) {
      params=new HashMap<String,String>();
      params.put(""String_Node_Str"",entry.getValue());
      ImageDescriptor icon=null;
      if (entry.getValue().equals(parser)) {
        icon=SELECTED_ICON;
      }
      CommandContributionItemParameter param=new CommandContributionItemParameter(PlatformUI.getWorkbench().getActiveWorkbenchWindow(),""String_Node_Str"",""String_Node_Str"",params,icon,null,null,entry.getKey().replaceAll(""String_Node_Str"",""String_Node_Str""),null,null,CommandContributionItem.STYLE_PUSH,null,true);
      subMenu.add(new CommandContributionItem(param));
    }
    list.add(subMenu);
  }
  return (IContributionItem[])list.toArray(new IContributionItem[list.size()]);
}",0.6806695109944207
92900,"/** 
 */
public TmfProjectLabelProvider(){
  fOpenedProjectIcon=PlatformUI.getWorkbench().getSharedImages().getImage(org.eclipse.ui.ide.IDE.SharedImages.IMG_OBJ_PROJECT);
  fClosedProjectIcon=PlatformUI.getWorkbench().getSharedImages().getImage(org.eclipse.ui.ide.IDE.SharedImages.IMG_OBJ_PROJECT_CLOSED);
  fFolderIcon=PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJ_FOLDER);
  fTraceIcon=loadIcon(fTraceIconFile);
  fUnknownTraceIcon=PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_LCL_LINKTO_HELP);
  fExperimentIcon=fFolderIcon;
}","/** 
 */
public TmfProjectLabelProvider(){
  fOpenedProjectIcon=PlatformUI.getWorkbench().getSharedImages().getImage(org.eclipse.ui.ide.IDE.SharedImages.IMG_OBJ_PROJECT);
  fClosedProjectIcon=PlatformUI.getWorkbench().getSharedImages().getImage(org.eclipse.ui.ide.IDE.SharedImages.IMG_OBJ_PROJECT_CLOSED);
  fFolderIcon=PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJ_FOLDER);
  fTraceIcon=loadIcon(fTraceIconFile);
  fUnknownTraceIcon=TmfUiPlugin.getDefault().getImageFromPath(""String_Node_Str"");
  fExperimentIcon=fFolderIcon;
}",0.8764241893076249
92901,"/** 
 * Handling method for the event list. Gets the selection from the listviewer  and updates the UnitMask and event description text box. 
 */
private void _handleEventListSelectionChange(){
  int index=_eventList.getList().getSelectionIndex();
  OpEvent event=(OpEvent)_eventList.getElementAt(index);
  _counter.setEvent(event);
  _eventDescText.setText(event.getTextDescription());
  _unitMaskViewer.displayEvent(event);
  int min=_counter.getEvent().getMinCount();
  if (_counter.getCount() < min) {
    setErrorMessage(getMinCountErrorMessage(min));
  }
  updateLaunchConfigurationDialog();
}","/** 
 * Handling method for the event list. Gets the selection from the listviewer  and updates the UnitMask and event description text box. 
 */
private void _handleEventListSelectionChange(){
  int index=_eventList.getList().getSelectionIndex();
  if (index != -1) {
    OpEvent event=(OpEvent)_eventList.getElementAt(index);
    _counter.setEvent(event);
    _eventDescText.setText(event.getTextDescription());
    _unitMaskViewer.displayEvent(event);
    int min=_counter.getEvent().getMinCount();
    if (_counter.getCount() < min) {
      setErrorMessage(getMinCountErrorMessage(min));
    }
  }
  updateLaunchConfigurationDialog();
}",0.9249394673123488
92902,"/** 
 */
public void testSyntheticEventRequest(){
  init();
  IStateExperimentManager expManager=prepareExperimentContext(false);
  TmfExperiment<LttngEvent> experiment=prepareExperimentToTest();
  expManager.experimentSelected_prep(experiment);
  expManager.experimentSelected(this,experiment);
  LttngSyntheticEventProvider synProvider=LttngCoreProviderFactory.getEventProvider();
  boolean printExpectedEvents=false;
  TmfEventRequest<LttngSyntheticEvent> request1=prepareEventRequest(LttngSyntheticEvent.class,5,9,printExpectedEvents);
  TmfEventRequest<LttngSyntheticEvent> request2=prepareEventRequest(LttngSyntheticEvent.class,11,13,printExpectedEvents);
  synProvider.sendRequest(request1);
  try {
    request1.waitForCompletion();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  System.out.println(""String_Node_Str"" + feventCount);
  synProvider.sendRequest(request2);
  try {
    request2.waitForCompletion();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  System.out.println(""String_Node_Str"" + feventCount);
  assertEquals(""String_Node_Str"",3002,feventCount);
}","/** 
 */
public void testSyntheticEventRequest(){
}",0.0870307167235494
92903,"/** 
 */
public void testSyntheticEventRequest(){
  init();
  LttngSyntheticEventProvider synProvider=LttngCoreProviderFactory.getEventProvider();
  prepareTextExperimentToTest();
  TmfEventRequest<LttngSyntheticEvent> request=prepareEventRequest(LttngSyntheticEvent.class,0,31);
  synProvider.sendRequest(request);
  try {
    request.waitForCompletion();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  assertEquals(""String_Node_Str"",15316,feventCount);
}","/** 
 */
public void testSyntheticEventRequest(){
}",0.192090395480226
92904,"/** 
 * Notify listeners to prepare to receive data e.g. clean previous data etc.
 */
public void handleProviderStarted(LttngTraceState traceModel){
  LttngSyntheticEvent startIndEvent=new LttngSyntheticEvent(fStatusEvent);
  startIndEvent.setSequenceInd(SequenceInd.STARTREQ);
  try {
    queueResult(startIndEvent);
    queueResult(fStatusEventAck);
  }
 catch (  InterruptedException e) {
  }
  fstateUpdateProcessor.process(startIndEvent,null);
}","/** 
 * Notify listeners to prepare to receive data e.g. clean previous data etc.
 */
public void handleProviderStarted(LttngTraceState traceModel){
  LttngSyntheticEvent startIndEvent=new LttngSyntheticEvent(fStatusEvent);
  startIndEvent.setSequenceInd(SequenceInd.STARTREQ);
  LttngSyntheticEvent[] result=new LttngSyntheticEvent[1];
  result[0]=startIndEvent;
  fmainRequest.setData(result);
  fmainRequest.handleData();
  result[0]=fStatusEventAck;
  fmainRequest.setData(result);
  fmainRequest.handleData();
  fstateUpdateProcessor.process(startIndEvent,null);
}",0.6790971540726202
92905,"@SuppressWarnings(""String_Node_Str"") @Override public ITmfContext armRequest(final ITmfDataRequest<LttngSyntheticEvent> request){
  if (!(request instanceof ITmfEventRequest<?>)) {
    request.cancel();
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  if (fExperiment == null) {
    TraceDebug.debug(""String_Node_Str"");
    request.cancel();
    return null;
  }
  reset(fExperiment);
  if (fEventProviderRequests.size() < 1) {
    request.cancel();
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  fmainRequest=request;
  ITmfEventRequest<LttngSyntheticEvent> eventRequest=(ITmfEventRequest<LttngSyntheticEvent>)fmainRequest;
  TmfTimeRange reqWindow=eventRequest.getRange();
  TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
  boolean subRequestQueued=false;
  TmfExperiment<LttngEvent> experiment=(TmfExperiment<LttngEvent>)fExperiment.getValue();
  experiment.startSynch(new TmfStartSynchSignal(0));
  for (  IStateTraceManager traceManager : fEventProviderRequests.keySet()) {
    TmfTimestamp checkPoint=traceManager.restoreCheckPointByTimestamp(reqWindow.getStartTime());
    TmfTimeRange traceRange=traceManager.getTrace().getTimeRange();
    if ((checkPoint != null) && !(checkPoint.getValue() >= traceRange.getStartTime().getValue() && checkPoint.getValue() <= traceRange.getEndTime().getValue() && checkPoint.getValue() < reqWindow.getEndTime().getValue())) {
      continue;
    }
    TmfTimeRange adjustedRange=reqWindow;
    if (checkPoint != null) {
      adjustedRange=new TmfTimeRange(checkPoint,reqWindow.getEndTime());
    }
    LttngTraceState traceModel=traceManager.getStateModel();
    ITmfTrace trace=traceManager.getTrace();
    final LttngBaseEventRequest subRequest=new LttngBaseEventRequest(adjustedRange,reqWindow.getStartTime(),0,TmfEventRequest.ALL_DATA,BLOCK_SIZE,traceModel,ITmfDataRequest.ExecutionType.SHORT,trace){
      private LttngSyntheticEvent syntheticEvent=null;
      private LttngSyntheticEvent syntheticAckIndicator=null;
      long subEventCount=0L;
      private final long fDispatchTime=getDispatchTime().getValue();
      private final LttngTraceState fTraceModel=getTraceModel();
      @Override public void handleData(){
        LttngEvent[] events=getData();
        if (events.length > 0) {
          for (          LttngEvent e : events) {
            handleIncomingData(e);
          }
        }
 else {
          TraceDebug.debug(""String_Node_Str"");
        }
      }
      @Override public void done(){
        super.done();
        handleProviderDone(getTraceModel());
      }
      /** 
 * Trigger the Analysis and sequential control of the events.
 * @param e
 */
      private void handleIncomingData(      LttngEvent e){
        long eventTime=e.getTimestamp().getValue();
        TmfTrace<LttngEvent> inTrace=e.getParentTrace();
        if (!(inTrace == getTrace())) {
          return;
        }
        updateSynEvent(e);
        try {
          if (eventTime >= fDispatchTime) {
            syntheticEvent.setSequenceInd(SequenceInd.BEFORE);
            queueResult(syntheticEvent);
            queueResult(syntheticAckIndicator);
            syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
            fstateUpdateProcessor.process(syntheticEvent,fTraceModel);
            syntheticEvent.setSequenceInd(SequenceInd.AFTER);
            queueResult(syntheticEvent);
            queueResult(syntheticAckIndicator);
            incrementSynEvenCount();
            subEventCount++;
          }
 else {
            syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
            fstateUpdateProcessor.process(syntheticEvent,fTraceModel);
          }
        }
 catch (        InterruptedException e1) {
          request.cancel();
        }
      }
      /** 
 * Create a synthetic event from the received new reference, if the reference is the same there is no need for a new instance if this is the first event for this request, call start handler
 * @param e
 * @return
 */
      private LttngSyntheticEvent updateSynEvent(      LttngEvent e){
        if (syntheticEvent == null || syntheticEvent.getBaseEvent() != e) {
          syntheticEvent=new LttngSyntheticEvent(e);
          syntheticAckIndicator=new LttngSyntheticEvent(e);
          syntheticAckIndicator.setSequenceInd(SequenceInd.ACK);
        }
        syntheticEvent.setTraceModel(fTraceModel);
        if (!startIndSent) {
          TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
          handleProviderStarted(getTraceModel());
          startIndSent=true;
        }
        return syntheticEvent;
      }
    }
;
    fEventProviderRequests.put(traceManager,subRequest);
    TmfExperiment<LttngEvent> provider=(TmfExperiment<LttngEvent>)fExperiment.getValue();
    provider.sendRequest(subRequest);
    subRequestQueued=true;
  }
  experiment.endSynch(new TmfEndSynchSignal(0));
  return (subRequestQueued) ? new TmfContext() : null;
}","@SuppressWarnings(""String_Node_Str"") @Override public ITmfContext armRequest(final ITmfDataRequest<LttngSyntheticEvent> request){
  if (!(request instanceof ITmfEventRequest<?>)) {
    request.cancel();
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  if (fExperiment == null) {
    TraceDebug.debug(""String_Node_Str"");
    request.cancel();
    return null;
  }
  reset(fExperiment);
  if (fEventProviderRequests.size() < 1) {
    request.cancel();
    TraceDebug.debug(""String_Node_Str"");
    return null;
  }
  fmainRequest=request;
  ITmfEventRequest<LttngSyntheticEvent> eventRequest=(ITmfEventRequest<LttngSyntheticEvent>)fmainRequest;
  TmfTimeRange reqWindow=eventRequest.getRange();
  TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
  boolean subRequestQueued=false;
  TmfExperiment<LttngEvent> experiment=(TmfExperiment<LttngEvent>)fExperiment.getValue();
  experiment.startSynch(new TmfStartSynchSignal(0));
  for (  IStateTraceManager traceManager : fEventProviderRequests.keySet()) {
    TmfTimestamp checkPoint=traceManager.restoreCheckPointByTimestamp(reqWindow.getStartTime());
    TmfTimeRange traceRange=traceManager.getTrace().getTimeRange();
    if ((checkPoint != null) && !(checkPoint.getValue() >= traceRange.getStartTime().getValue() && checkPoint.getValue() <= traceRange.getEndTime().getValue() && checkPoint.getValue() < reqWindow.getEndTime().getValue())) {
      continue;
    }
    TmfTimeRange adjustedRange=reqWindow;
    if (checkPoint != null) {
      adjustedRange=new TmfTimeRange(checkPoint,reqWindow.getEndTime());
    }
    LttngTraceState traceModel=traceManager.getStateModel();
    ITmfTrace trace=traceManager.getTrace();
    final LttngBaseEventRequest subRequest=new LttngBaseEventRequest(adjustedRange,reqWindow.getStartTime(),0,TmfEventRequest.ALL_DATA,BLOCK_SIZE,traceModel,ITmfDataRequest.ExecutionType.SHORT,trace){
      private LttngSyntheticEvent syntheticEvent=null;
      private LttngSyntheticEvent syntheticAckIndicator=null;
      long subEventCount=0L;
      private final long fDispatchTime=getDispatchTime().getValue();
      private final LttngTraceState fTraceModel=getTraceModel();
      @Override public void handleData(){
        LttngEvent[] events=getData();
        if (events.length > 0) {
          for (          LttngEvent e : events) {
            handleIncomingData(e);
          }
        }
 else {
          TraceDebug.debug(""String_Node_Str"");
        }
      }
      @Override public void done(){
        super.done();
        handleProviderDone(getTraceModel());
      }
      /** 
 * Trigger the Analysis and sequential control of the events.
 * @param e
 */
      private void handleIncomingData(      LttngEvent e){
        long eventTime=e.getTimestamp().getValue();
        TmfTrace<LttngEvent> inTrace=e.getParentTrace();
        if (!(inTrace == getTrace())) {
          return;
        }
        updateSynEvent(e);
        if (eventTime >= fDispatchTime) {
          syntheticEvent.setSequenceInd(SequenceInd.BEFORE);
          LttngSyntheticEvent[] result=new LttngSyntheticEvent[1];
          result[0]=syntheticEvent;
          fmainRequest.setData(result);
          fmainRequest.handleData();
          result[0]=syntheticAckIndicator;
          fmainRequest.setData(result);
          fmainRequest.handleData();
          syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
          fstateUpdateProcessor.process(syntheticEvent,fTraceModel);
          syntheticEvent.setSequenceInd(SequenceInd.AFTER);
          result=new LttngSyntheticEvent[1];
          result[0]=syntheticEvent;
          fmainRequest.setData(result);
          fmainRequest.handleData();
          result[0]=syntheticAckIndicator;
          fmainRequest.setData(result);
          fmainRequest.handleData();
          incrementSynEvenCount();
          subEventCount++;
        }
 else {
          syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
          fstateUpdateProcessor.process(syntheticEvent,fTraceModel);
        }
      }
      /** 
 * Create a synthetic event from the received new reference, if the reference is the same there is no need for a new instance if this is the first event for this request, call start handler
 * @param e
 * @return
 */
      private LttngSyntheticEvent updateSynEvent(      LttngEvent e){
        if (syntheticEvent == null || syntheticEvent.getBaseEvent() != e) {
          syntheticEvent=new LttngSyntheticEvent(e);
          syntheticAckIndicator=new LttngSyntheticEvent(e);
          syntheticAckIndicator.setSequenceInd(SequenceInd.ACK);
        }
        syntheticEvent.setTraceModel(fTraceModel);
        if (!startIndSent) {
          TraceDebug.debug(""String_Node_Str"" + Thread.currentThread().getName());
          handleProviderStarted(getTraceModel());
          startIndSent=true;
        }
        return syntheticEvent;
      }
    }
;
    fEventProviderRequests.put(traceManager,subRequest);
    TmfExperiment<LttngEvent> provider=(TmfExperiment<LttngEvent>)fExperiment.getValue();
    provider.sendRequest(subRequest);
    subRequestQueued=true;
  }
  experiment.endSynch(new TmfEndSynchSignal(0));
  return (subRequestQueued) ? new TmfContext() : null;
}",0.9269491692065676
92906,"/** 
 * Notify listeners, no more events for the current request will be distributed e.g. update view.
 */
public synchronized void handleProviderDone(LttngTraceState traceModel){
  for (  LttngBaseEventRequest subRequest : fEventProviderRequests.values()) {
    if (subRequest != null) {
      if (!subRequest.isCompleted()) {
        return;
      }
    }
  }
  LttngSyntheticEvent finishEvent=new LttngSyntheticEvent(fStatusEvent);
  finishEvent.setSequenceInd(SequenceInd.ENDREQ);
  finishEvent.setTraceModel(traceModel);
  try {
    queueResult(finishEvent);
    queueResult(fStatusEventAck);
    queueResult(LttngSyntheticEvent.NullEvent);
  }
 catch (  InterruptedException e) {
  }
}","/** 
 * Notify listeners, no more events for the current request will be distributed e.g. update view.
 */
public synchronized void handleProviderDone(LttngTraceState traceModel){
  for (  LttngBaseEventRequest subRequest : fEventProviderRequests.values()) {
    if (subRequest != null) {
      if (!subRequest.isCompleted()) {
        return;
      }
    }
  }
  LttngSyntheticEvent finishEvent=new LttngSyntheticEvent(fStatusEvent);
  finishEvent.setSequenceInd(SequenceInd.ENDREQ);
  finishEvent.setTraceModel(traceModel);
  LttngSyntheticEvent[] result=new LttngSyntheticEvent[1];
  result[0]=finishEvent;
  fmainRequest.setData(result);
  fmainRequest.handleData();
  result[0]=fStatusEventAck;
  fmainRequest.setData(result);
  fmainRequest.handleData();
  fmainRequest.done();
}",0.7384823848238482
92907,"@Override public LttngSyntheticEvent getNext(ITmfContext context) throws InterruptedException {
  return super.getNext(context);
}","@Override public LttngSyntheticEvent getNext(ITmfContext context){
  try {
    fmainRequest.waitForCompletion();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return null;
}",0.6402439024390244
92908,"/** 
 * Trigger the Analysis and sequential control of the events.
 * @param e
 */
private void handleIncomingData(LttngEvent e){
  long eventTime=e.getTimestamp().getValue();
  TmfTrace<LttngEvent> inTrace=e.getParentTrace();
  if (!(inTrace == getTrace())) {
    return;
  }
  updateSynEvent(e);
  try {
    if (eventTime >= fDispatchTime) {
      syntheticEvent.setSequenceInd(SequenceInd.BEFORE);
      queueResult(syntheticEvent);
      queueResult(syntheticAckIndicator);
      syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
      fstateUpdateProcessor.process(syntheticEvent,fTraceModel);
      syntheticEvent.setSequenceInd(SequenceInd.AFTER);
      queueResult(syntheticEvent);
      queueResult(syntheticAckIndicator);
      incrementSynEvenCount();
      subEventCount++;
    }
 else {
      syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
      fstateUpdateProcessor.process(syntheticEvent,fTraceModel);
    }
  }
 catch (  InterruptedException e1) {
    request.cancel();
  }
}","/** 
 * Trigger the Analysis and sequential control of the events.
 * @param e
 */
private void handleIncomingData(LttngEvent e){
  long eventTime=e.getTimestamp().getValue();
  TmfTrace<LttngEvent> inTrace=e.getParentTrace();
  if (!(inTrace == getTrace())) {
    return;
  }
  updateSynEvent(e);
  if (eventTime >= fDispatchTime) {
    syntheticEvent.setSequenceInd(SequenceInd.BEFORE);
    LttngSyntheticEvent[] result=new LttngSyntheticEvent[1];
    result[0]=syntheticEvent;
    fmainRequest.setData(result);
    fmainRequest.handleData();
    result[0]=syntheticAckIndicator;
    fmainRequest.setData(result);
    fmainRequest.handleData();
    syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
    fstateUpdateProcessor.process(syntheticEvent,fTraceModel);
    syntheticEvent.setSequenceInd(SequenceInd.AFTER);
    result=new LttngSyntheticEvent[1];
    result[0]=syntheticEvent;
    fmainRequest.setData(result);
    fmainRequest.handleData();
    result[0]=syntheticAckIndicator;
    fmainRequest.setData(result);
    fmainRequest.handleData();
    incrementSynEvenCount();
    subEventCount++;
  }
 else {
    syntheticEvent.setSequenceInd(SequenceInd.UPDATE);
    fstateUpdateProcessor.process(syntheticEvent,fTraceModel);
  }
}",0.7188198480107286
92909,"public static Test suite(){
  TestSuite suite=new TestSuite(AllLTTngCoreTests.class.getName());
  suite.addTestSuite(LttngTimestampTest.class);
  suite.addTestSuite(LttngEventFieldTest.class);
  suite.addTestSuite(LttngEventContentTest.class);
  suite.addTestSuite(LttngEventReferenceTest.class);
  suite.addTestSuite(LttngEventTypeTest.class);
  suite.addTestSuite(LttngEventTest.class);
  suite.addTestSuite(JniTraceTest.class);
  suite.addTestSuite(JniTracefileTest.class);
  suite.addTestSuite(JniEventTest.class);
  suite.addTestSuite(JniMarkerTest.class);
  suite.addTestSuite(JniMarkerFieldTest.class);
  suite.addTestSuite(LTTngTextTraceTest.class);
  suite.addTestSuite(LTTngTraceTest.class);
  suite.addTestSuite(LTTngTreeNodeTest.class);
  suite.addTestSuite(StateExperimentManagerTextTest.class);
  suite.addTestSuite(LTTngStateResourceTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(AllLTTngCoreTests.class.getName());
  suite.addTestSuite(LttngTimestampTest.class);
  suite.addTestSuite(LttngEventFieldTest.class);
  suite.addTestSuite(LttngEventContentTest.class);
  suite.addTestSuite(LttngEventReferenceTest.class);
  suite.addTestSuite(LttngEventTypeTest.class);
  suite.addTestSuite(LttngEventTest.class);
  suite.addTestSuite(JniTraceTest.class);
  suite.addTestSuite(JniTracefileTest.class);
  suite.addTestSuite(JniEventTest.class);
  suite.addTestSuite(JniMarkerTest.class);
  suite.addTestSuite(JniMarkerFieldTest.class);
  suite.addTestSuite(LTTngTextTraceTest.class);
  suite.addTestSuite(LTTngTraceTest.class);
  suite.addTestSuite(LTTngSyntheticEventProviderTest.class);
  suite.addTestSuite(LTTngSyntheticEventProviderTextTest.class);
  suite.addTestSuite(LTTngTreeNodeTest.class);
  suite.addTestSuite(StateExperimentManagerTextTest.class);
  suite.addTestSuite(LTTngStateResourceTest.class);
  return suite;
}",0.9330499468650372
92910,"/** 
 * @param zoomedTRange
 * @param experimentTRange
 */
public void dataRequest(TmfTimeRange zoomedTRange,TmfTimeRange experimentTRange,boolean clearingData){
  boolean sent=processDataRequest(zoomedTRange,experimentTRange,clearingData);
  if (sent) {
    waitCursor(true);
  }
}","/** 
 * @param zoomedTRange
 * @param experimentTRange
 * @param execType 
 */
public void dataRequest(TmfTimeRange zoomedTRange,TmfTimeRange experimentTRange,boolean clearingData,ExecutionType execType){
  boolean sent=processDataRequest(zoomedTRange,experimentTRange,clearingData,execType);
  if (sent) {
    waitCursor(true);
  }
}",0.9155844155844156
92911,"/** 
 * Process the reception of time window adjustment in this view if the source of the update is not this view.
 * @param signal
 * @param clearingData
 */
public void synchToTimeRange(TmfRangeSynchSignal signal,boolean clearingData){
  if (synch) {
    Object source=signal.getSource();
    if (signal != null && source != null && source != this) {
      TmfTimeRange trange=signal.getCurrentRange();
      TmfExperiment<?> experiment=TmfExperiment.getCurrentExperiment();
      if (experiment == null) {
        TraceDebug.debug(""String_Node_Str"");
        return;
      }
      dataRequest(trange,experiment.getTimeRange(),clearingData);
    }
  }
}","/** 
 * Process the reception of time window adjustment in this view if the source of the update is not this view.
 * @param signal
 * @param clearingData
 */
public void synchToTimeRange(TmfRangeSynchSignal signal,boolean clearingData){
  if (synch) {
    Object source=signal.getSource();
    if (signal != null && source != null && source != this) {
      TmfTimeRange trange=signal.getCurrentRange();
      TmfExperiment<?> experiment=TmfExperiment.getCurrentExperiment();
      if (experiment == null) {
        TraceDebug.debug(""String_Node_Str"");
        return;
      }
      dataRequest(trange,experiment.getTimeRange(),clearingData,ExecutionType.SHORT);
    }
  }
}",0.9849624060150376
92912,"/** 
 * send data request directly e.g. doesn't use a queue
 * @param requestTrange
 * @param listener
 * @param experimentTRange
 * @param processor
 * @return
 */
private boolean processDataRequest(TmfTimeRange requestTrange,TmfTimeRange experimentTRange,boolean clearingData){
  if (requestTrange == null || experimentTRange == null) {
    TraceDebug.debug(""String_Node_Str"");
    return false;
  }
  if (fCurrentRequest != null && !fCurrentRequest.isCompleted()) {
    System.out.println(""String_Node_Str"");
  }
  fCurrentRequest=new LttngSyntEventRequest(requestTrange,DEFAULT_OFFSET,TmfDataRequest.ALL_DATA,DEFAULT_CHUNK,this,experimentTRange,getEventProcessor()){
    Long fCount=getSynEventCount();
    ITransEventProcessor processor=getProcessor();
    TmfTimestamp frunningTimeStamp;
    @Override public void handleData(){
      LttngSyntheticEvent[] result=getData();
      TmfEvent evt=(result.length > 0) ? result[0] : null;
      if (evt != null) {
        LttngSyntheticEvent synEvent=(LttngSyntheticEvent)evt;
        SequenceInd indicator=synEvent.getSynType();
        if (indicator == SequenceInd.BEFORE || indicator == SequenceInd.AFTER) {
          processor.process(evt,synEvent.getTraceModel());
        }
 else         if (indicator == SequenceInd.STARTREQ) {
          handleRequestStarted();
        }
 else         if (indicator == SequenceInd.ENDREQ) {
          processor.process(evt,synEvent.getTraceModel());
        }
        if (indicator == SequenceInd.BEFORE) {
          fCount++;
          if (fCount != 0 && fCount % INPUT_CHANGED_REFRESH == 0) {
            modelInputChanged(this,false);
            if (TraceDebug.isDEBUG()) {
              frunningTimeStamp=evt.getTimestamp();
              TraceDebug.debug(""String_Node_Str"" + fCount + ""String_Node_Str""+ synEvent.getSynType());
            }
          }
        }
      }
    }
    public void handleRequestStarted(){
      notifyStarting();
    }
    @Override public void done(){
      super.done();
    }
    @Override public void handleCompleted(){
      super.handleCompleted();
      if (isFailed() || isCancelled()) {
        modelIncomplete(this);
      }
      if (TraceDebug.isDEBUG()) {
        if (frunningTimeStamp != null) {
          TraceDebug.debug(""String_Node_Str"" + frunningTimeStamp.getValue());
        }
      }
    }
  }
;
  LttngSyntheticEventProvider provider=LttngCoreProviderFactory.getEventProvider();
  fCurrentRequest.startRequestInd(provider);
  fCurrentRequest.setclearDataInd(clearingData);
  return true;
}","/** 
 * send data request directly e.g. doesn't use a queue
 * @param requestTrange
 * @param listener
 * @param experimentTRange
 * @param execType 
 * @param processor
 * @return
 */
private boolean processDataRequest(TmfTimeRange requestTrange,TmfTimeRange experimentTRange,boolean clearingData,ExecutionType execType){
  if (requestTrange == null || experimentTRange == null) {
    TraceDebug.debug(""String_Node_Str"");
    return false;
  }
  if (fCurrentRequest != null && !fCurrentRequest.isCompleted()) {
  }
  fCurrentRequest=new LttngSyntEventRequest(requestTrange,DEFAULT_OFFSET,TmfDataRequest.ALL_DATA,DEFAULT_CHUNK,this,experimentTRange,getEventProcessor(),execType){
    Long fCount=getSynEventCount();
    ITransEventProcessor processor=getProcessor();
    TmfTimestamp frunningTimeStamp;
    @Override public void handleData(){
      LttngSyntheticEvent[] result=getData();
      TmfEvent evt=(result.length > 0) ? result[0] : null;
      if (evt != null) {
        LttngSyntheticEvent synEvent=(LttngSyntheticEvent)evt;
        SequenceInd indicator=synEvent.getSynType();
        if (indicator == SequenceInd.BEFORE || indicator == SequenceInd.AFTER) {
          processor.process(evt,synEvent.getTraceModel());
        }
 else         if (indicator == SequenceInd.STARTREQ) {
          handleRequestStarted();
        }
 else         if (indicator == SequenceInd.ENDREQ) {
          processor.process(evt,synEvent.getTraceModel());
        }
        if (indicator == SequenceInd.BEFORE) {
          fCount++;
          if (fCount != 0 && fCount % INPUT_CHANGED_REFRESH == 0) {
            modelInputChanged(this,false);
            if (TraceDebug.isDEBUG()) {
              frunningTimeStamp=evt.getTimestamp();
              TraceDebug.debug(""String_Node_Str"" + fCount + ""String_Node_Str""+ synEvent.getSynType());
            }
          }
        }
      }
    }
    public void handleRequestStarted(){
      notifyStarting();
    }
    @Override public void done(){
      super.done();
    }
    @Override public void handleCompleted(){
      super.handleCompleted();
      if (isFailed() || isCancelled()) {
        modelIncomplete(this);
      }
      if (TraceDebug.isDEBUG()) {
        if (frunningTimeStamp != null) {
          TraceDebug.debug(""String_Node_Str"" + frunningTimeStamp.getValue());
        }
      }
    }
  }
;
  LttngSyntheticEventProvider provider=LttngCoreProviderFactory.getEventProvider();
  fCurrentRequest.startRequestInd(provider);
  fCurrentRequest.setclearDataInd(clearingData);
  return true;
}",0.9813102498524492
92913,"/** 
 * @param source
 * @param experimentTRange
 * @return Adjusted time window used for the request (smaller window toinitialize view)
 */
private TmfTimeRange initialExperimentDataRequest(Object source,TmfTimeRange experimentTRange){
  TmfTimeRange initTimeWindow=getInitTRange(experimentTRange);
  dataRequest(initTimeWindow,experimentTRange,true);
  if (TraceDebug.isDEBUG()) {
    TraceDebug.debug(""String_Node_Str"" + initTimeWindow.getStartTime().toString() + ""String_Node_Str""+ initTimeWindow.getEndTime().toString());
  }
  return initTimeWindow;
}","/** 
 * @param source
 * @param experimentTRange
 * @return Adjusted time window used for the request (smaller window toinitialize view)
 */
private TmfTimeRange initialExperimentDataRequest(Object source,TmfTimeRange experimentTRange){
  TmfTimeRange initTimeWindow=getInitTRange(experimentTRange);
  dataRequest(initTimeWindow,experimentTRange,true,ExecutionType.SHORT);
  if (TraceDebug.isDEBUG()) {
    TraceDebug.debug(""String_Node_Str"" + initTimeWindow.getStartTime().toString() + ""String_Node_Str""+ initTimeWindow.getEndTime().toString());
  }
  return initTimeWindow;
}",0.982363315696649
92914,"public void testCompareToBigRanges() throws Exception {
  TmfTimestamp ts0a=new TmfTimestamp(0,Byte.MAX_VALUE);
  TmfTimestamp ts0b=new TmfTimestamp(0,Byte.MIN_VALUE);
  TmfTimestamp ts1=new TmfTimestamp(-1,Byte.MAX_VALUE);
  TmfTimestamp ts2=new TmfTimestamp(-1,Byte.MIN_VALUE);
  TmfTimestamp ts3=new TmfTimestamp(1,Byte.MAX_VALUE);
  TmfTimestamp ts4=new TmfTimestamp(1,Byte.MIN_VALUE);
  assertTrue(""String_Node_Str"",ts0a.compareTo(TmfTimestamp.BigBang,false) > 0);
  assertTrue(""String_Node_Str"",ts0a.compareTo(TmfTimestamp.BigCrunch,false) < 0);
  assertTrue(""String_Node_Str"",ts0b.compareTo(TmfTimestamp.BigBang,false) > 0);
  assertTrue(""String_Node_Str"",ts0b.compareTo(TmfTimestamp.BigCrunch,false) < 0);
  assertTrue(""String_Node_Str"",ts0a.compareTo(ts0b,false) == 0);
  assertTrue(""String_Node_Str"",ts0b.compareTo(ts0a,false) == 0);
  assertTrue(""String_Node_Str"",ts0a.compareTo(TmfTimestamp.BigBang,false) > 0);
  assertTrue(""String_Node_Str"",ts0a.compareTo(TmfTimestamp.BigCrunch,false) < 0);
  assertTrue(""String_Node_Str"",ts1.compareTo(TmfTimestamp.BigBang,false) > 0);
  assertTrue(""String_Node_Str"",ts1.compareTo(TmfTimestamp.BigCrunch,false) < 0);
  assertTrue(""String_Node_Str"",ts2.compareTo(TmfTimestamp.BigBang,false) > 0);
  assertTrue(""String_Node_Str"",ts2.compareTo(TmfTimestamp.BigCrunch,false) < 0);
  assertTrue(""String_Node_Str"",ts3.compareTo(TmfTimestamp.BigBang,false) > 0);
  assertTrue(""String_Node_Str"",ts3.compareTo(TmfTimestamp.BigCrunch,false) < 0);
  assertTrue(""String_Node_Str"",ts4.compareTo(TmfTimestamp.BigBang,false) > 0);
  assertTrue(""String_Node_Str"",ts4.compareTo(TmfTimestamp.BigCrunch,false) < 0);
}","public void testCompareToBigRanges() throws Exception {
  TmfTimestamp ts0a=new TmfTimestamp(0,Byte.MAX_VALUE);
  TmfTimestamp ts0b=new TmfTimestamp(0,Byte.MIN_VALUE);
  TmfTimestamp ts1=new TmfTimestamp(-1,Byte.MAX_VALUE);
  TmfTimestamp ts2=new TmfTimestamp(-1,Byte.MIN_VALUE);
  TmfTimestamp ts3=new TmfTimestamp(1,Byte.MAX_VALUE);
  TmfTimestamp ts4=new TmfTimestamp(1,Byte.MIN_VALUE);
  assertEquals(""String_Node_Str"",1,ts0a.compareTo(TmfTimestamp.BigBang,false));
  assertEquals(""String_Node_Str"",-1,ts0a.compareTo(TmfTimestamp.BigCrunch,false));
  assertEquals(""String_Node_Str"",1,ts0b.compareTo(TmfTimestamp.BigBang,false));
  assertEquals(""String_Node_Str"",-1,ts0b.compareTo(TmfTimestamp.BigCrunch,false));
  assertEquals(""String_Node_Str"",0,ts0a.compareTo(ts0b,false));
  assertEquals(""String_Node_Str"",0,ts0b.compareTo(ts0a,false));
  assertEquals(""String_Node_Str"",1,ts0a.compareTo(TmfTimestamp.BigBang,false));
  assertEquals(""String_Node_Str"",-1,ts0a.compareTo(TmfTimestamp.BigCrunch,false));
  assertEquals(""String_Node_Str"",1,ts1.compareTo(TmfTimestamp.BigBang,false));
  assertEquals(""String_Node_Str"",-1,ts1.compareTo(TmfTimestamp.BigCrunch,false));
  assertEquals(""String_Node_Str"",1,ts2.compareTo(TmfTimestamp.BigBang,false));
  assertEquals(""String_Node_Str"",-1,ts2.compareTo(TmfTimestamp.BigCrunch,false));
  assertEquals(""String_Node_Str"",1,ts3.compareTo(TmfTimestamp.BigBang,false));
  assertEquals(""String_Node_Str"",-1,ts3.compareTo(TmfTimestamp.BigCrunch,false));
  assertEquals(""String_Node_Str"",1,ts4.compareTo(TmfTimestamp.BigBang,false));
  assertEquals(""String_Node_Str"",-1,ts4.compareTo(TmfTimestamp.BigCrunch,false));
}",0.5995756289784784
92915,"/** 
 * Compare with another timestamp
 * @param other the other timestamp
 * @param withinPrecision indicates if precision is to be take into consideration
 * @return -1: this timestamp is lower (i.e. anterior)0: timestamps are equal (within precision if requested) 1: this timestamp is higher (i.e. posterior)
 */
public int compareTo(final TmfTimestamp other,boolean withinPrecision){
  if (fScale == other.fScale) {
    if (withinPrecision) {
      if ((fValue + fPrecision) < (other.fValue - other.fPrecision))       return -1;
      if ((fValue - fPrecision) > (other.fValue + other.fPrecision))       return 1;
      return 0;
    }
    return (fValue == other.fValue) ? 0 : (fValue < other.fValue) ? -1 : 1;
  }
  byte newScale=(fScale < other.fScale) ? fScale : other.fScale;
  try {
    TmfTimestamp ts1=this.synchronize(0,newScale);
    TmfTimestamp ts2=other.synchronize(0,newScale);
    return ts1.compareTo(ts2,withinPrecision);
  }
 catch (  ArithmeticException e) {
    if ((fValue == 0) || (other.fValue == 0)) {
      return (fValue == other.fValue) ? 0 : (fValue < other.fValue) ? -1 : 1;
    }
    if ((fValue > 0) && (other.fValue > 0)) {
      return (fScale < other.fScale) ? -1 : 1;
    }
    if ((fValue < 0) && (other.fValue < 0)) {
      return (fScale > other.fScale) ? -1 : 1;
    }
    return (fValue < 0) ? -1 : 1;
  }
}","/** 
 * Compare with another timestamp
 * @param other the other timestamp
 * @param withinPrecision indicates if precision is to be take into consideration
 * @return -1: this timestamp is lower (i.e. anterior)0: timestamps are equal (within precision if requested) 1: this timestamp is higher (i.e. posterior)
 */
public int compareTo(final TmfTimestamp other,boolean withinPrecision){
  if (fScale == other.fScale) {
    if (withinPrecision) {
      if ((fValue + fPrecision) < (other.fValue - other.fPrecision))       return -1;
      if ((fValue - fPrecision) > (other.fValue + other.fPrecision))       return 1;
      return 0;
    }
    return (fValue == other.fValue) ? 0 : (fValue < other.fValue) ? -1 : 1;
  }
  if (Math.abs(fScale - other.fScale) > MAX_SCALING) {
    return simpleCompare(other);
  }
  byte newScale=(fScale < other.fScale) ? fScale : other.fScale;
  try {
    TmfTimestamp ts1=this.synchronize(0,newScale);
    TmfTimestamp ts2=other.synchronize(0,newScale);
    return ts1.compareTo(ts2,withinPrecision);
  }
 catch (  ArithmeticException e) {
    return simpleCompare(other);
  }
}",0.8063337393422655
92916,"/** 
 * Return a shifted and scaled timestamp. Limitation: The scaling is limited to MAX_SCALING orders of magnitude. The main reason is that the 64 bits value starts to lose any significance meaning beyond that scale difference and it's not even worth the trouble to switch to BigDecimal arithmetics.
 * @param offset the shift value (in the same scale as newScale)
 * @param newScale the new timestamp scale
 * @return the synchronized timestamp in the new scale
 * @throws ArithmeticException
 */
public TmfTimestamp synchronize(long offset,byte newScale) throws ArithmeticException {
  int MAX_SCALING=19;
  long newValue=fValue;
  long newPrecision=fPrecision;
  if (fScale != newScale) {
    int scaleDiff=Math.abs(fScale - newScale);
    if (scaleDiff > MAX_SCALING) {
      throw new ArithmeticException(""String_Node_Str"");
    }
    long scalingFactor=1;
    for (int i=0; i < scaleDiff; i++) {
      scalingFactor*=10;
    }
    if (newScale < fScale) {
      newValue*=scalingFactor;
      newPrecision*=scalingFactor;
    }
 else {
      newValue/=scalingFactor;
      newPrecision/=scalingFactor;
    }
  }
  return new TmfTimestamp(newValue + offset,newScale,newPrecision);
}","/** 
 * Return a shifted and scaled timestamp. Limitation: The scaling is limited to MAX_SCALING orders of magnitude. The main reason is that the 64 bits value starts to lose any significance meaning beyond that scale difference and it's not even worth the trouble to switch to BigDecimal arithmetics.
 * @param offset the shift value (in the same scale as newScale)
 * @param newScale the new timestamp scale
 * @return the synchronized timestamp in the new scale
 * @throws ArithmeticException
 */
public TmfTimestamp synchronize(long offset,byte newScale) throws ArithmeticException {
  long newValue=fValue;
  long newPrecision=fPrecision;
  if (fScale != newScale) {
    int scaleDiff=Math.abs(fScale - newScale);
    if (scaleDiff > MAX_SCALING) {
      throw new ArithmeticException(""String_Node_Str"");
    }
    long scalingFactor=1;
    for (int i=0; i < scaleDiff; i++) {
      scalingFactor*=10;
    }
    if (newScale < fScale) {
      newValue*=scalingFactor;
      newPrecision*=scalingFactor;
    }
 else {
      newValue/=scalingFactor;
      newPrecision/=scalingFactor;
    }
  }
  return new TmfTimestamp(newValue + offset,newScale,newPrecision);
}",0.9906621392190152
92917,"/** 
 * Convert a String representing nanoseconds into a valid long.<p> This can handle number like ""0.5"", ""0.123456789"" as well as plain number like ""12"".<p> Note : This function ALWAYS return a number, if conversion failed, 0 will be returned.<p>
 * @param timeString	The string to convert
 * @return				The converted nanoseconds time as long
 */
public static long convertStringToNanoseconds(String timeString){
  long returnedNumber=0L;
  try {
    timeString=timeString.replace(""String_Node_Str"",""String_Node_Str"");
    int dotPosition=timeString.indexOf(""String_Node_Str"");
    if (dotPosition == 0) {
      timeString=""String_Node_Str"" + timeString;
      dotPosition=1;
    }
    if (dotPosition != -1) {
      int decimalNumber=(timeString.length() - dotPosition - 1);
      if (decimalNumber <= 9) {
        for (int nbDec=decimalNumber; nbDec < 9; nbDec++) {
          timeString+=""String_Node_Str"";
        }
      }
 else {
        timeString=timeString.substring(dotPosition,9);
      }
    }
    double dblMaxTimerange=Double.parseDouble(timeString);
    returnedNumber=(long)(dblMaxTimerange * 1000000000.0);
  }
 catch (  NumberFormatException e) {
    System.out.println(""String_Node_Str"");
  }
  return returnedNumber;
}","/** 
 * Convert a String representing nanoseconds into a valid long.<p> This can handle number like ""0.5"", ""0.123456789"" as well as plain number like ""12"".<p> Note : This function ALWAYS return a number, if conversion failed, 0 will be returned.<p>
 * @param timeString	The string to convert
 * @return				The converted nanoseconds time as long
 */
public static long convertStringToNanoseconds(String timeString){
  long returnedNumber=0L;
  try {
    timeString=timeString.replace(""String_Node_Str"",""String_Node_Str"");
    int dotPosition=timeString.indexOf(""String_Node_Str"");
    if (dotPosition == 0) {
      timeString=""String_Node_Str"" + timeString;
      dotPosition=1;
    }
    if (dotPosition != -1) {
      int decimalNumber=(timeString.length() - dotPosition - 1);
      if (decimalNumber <= 9) {
        StringBuffer strBuffer=new StringBuffer(timeString);
        for (int nbDec=decimalNumber; nbDec < 9; nbDec++) {
          strBuffer.append(""String_Node_Str"");
        }
        timeString=strBuffer.toString();
      }
 else {
        timeString=timeString.substring(dotPosition,9);
      }
    }
    double dblMaxTimerange=Double.parseDouble(timeString);
    returnedNumber=(long)(dblMaxTimerange * 1000000000.0);
  }
 catch (  NumberFormatException e) {
    System.out.println(""String_Node_Str"");
  }
  return returnedNumber;
}",0.948955916473318
92918,"/** 
 * Recalculate the average number of events by time interval.<p> Note : This run over all the element so this is quite cpu intensive, use with care. 
 */
public void recalculateAverageNumberOfEvents(){
  int nbInterval=0;
  int totalNbEvents=0;
  for (int x=0; x < readyUpToPosition; x++) {
    if (HistogramConstant.SKIP_EMPTY_INTERVALS_WHEN_CALCULATING_AVERAGE) {
      if (elementTable[x].intervalNbEvents > 0) {
        nbInterval++;
      }
    }
 else {
      nbInterval++;
    }
    totalNbEvents+=elementTable[x].intervalNbEvents;
  }
  averageNumberOfEvents=(int)((double)totalNbEvents / (double)nbInterval);
}","/** 
 * Recalculate the average number of events by time interval.<p> Note : This run over all the element so this is quite cpu intensive, use with care. 
 */
public void recalculateAverageNumberOfEvents(){
  int nbInterval=0;
  int totalNbEvents=0;
  for (int x=0; x < readyUpToPosition; x++) {
    if (HistogramConstant.SKIP_EMPTY_INTERVALS_WHEN_CALCULATING_AVERAGE) {
      if (elementTable[x].intervalNbEvents > 0) {
        nbInterval++;
      }
    }
 else {
      nbInterval++;
    }
    totalNbEvents+=elementTable[x].intervalNbEvents;
  }
  averageNumberOfEvents=(int)Math.round((double)totalNbEvents / (double)nbInterval);
}",0.9888712241653418
92919,"/** 
 * Recalculate the height of each bar in a certain interval of the elements table.<p> Unlike recalculateEventHeight(), this only recalculate for the given range, not the whole table.
 */
public void recalculateEventHeightInInterval(int startPosition,int stopPosition){
  if (startPosition < 0) {
    startPosition=0;
  }
  if (stopPosition >= elementTable.length) {
    stopPosition=(elementTable.length - 1);
  }
  for (int x=startPosition; x < stopPosition; x++) {
    elementTable[x].intervalHeight=(int)(elementTable[x].intervalNbEvents * heightFactor);
  }
}","/** 
 * Recalculate the height of each bar in a certain interval of the elements table.<p> Unlike recalculateEventHeight(), this only recalculate for the given range, not the whole table.
 */
public void recalculateEventHeightInInterval(int startPosition,int stopPosition){
  if (startPosition < 0) {
    startPosition=0;
  }
  if (stopPosition >= elementTable.length) {
    stopPosition=(elementTable.length - 1);
  }
  for (int x=startPosition; x < stopPosition; x++) {
    elementTable[x].intervalHeight=(int)Math.ceil((double)elementTable[x].intervalNbEvents * heightFactor);
  }
}",0.9835212489158716
92920,"/** 
 * Calculate the correct time interval of each element from the given time.<p>
 * @return	The complete time interval
 */
public void recalculateElementsTimeInterval(long startTime,long endTime){
  long tmpInterval=((endTime - startTime) / getNbElement());
  if (tmpInterval <= 0) {
    tmpInterval=1L;
  }
  this.elementsTimeInterval=tmpInterval;
}","/** 
 * Calculate the correct time interval of each element from the given time.<p>
 * @return	The complete time interval
 */
public void recalculateElementsTimeInterval(long startTime,long endTime){
  long tmpInterval=(long)Math.ceil((double)(endTime - startTime) / (double)getNbElement());
  if (tmpInterval <= 0) {
    tmpInterval=1L;
  }
  this.elementsTimeInterval=tmpInterval;
}",0.9579375848032564
92921,"/** 
 * Return the closest element to a timestamp (long) given.<p> Note : startTime and intervalTime need to be set correctly here, otherwise unexpected element might be returned.<p> <p> NOTE : This <b>ALWAYS</b> return an element;  If calculation lead outside the table, the first or the last element will be returned.  
 * @param timestamp  The timestamp (in nanosecond, as long) of the element we are looking for (startTime < timestamp < endTime) 
 * @return	The <i>closest</i> element found.
 */
public HistogramElement getClosestElementFromTimestamp(long timestamp){
  int index=(int)((timestamp - startTime) / elementsTimeInterval);
  if (index < 0) {
    index=0;
  }
 else   if (index >= elementTable.length) {
    index=(elementTable.length - 1);
  }
  return elementTable[index];
}","/** 
 * Return the closest element to a timestamp (long) given.<p> Note : startTime and intervalTime need to be set correctly here, otherwise unexpected element might be returned.<p> <p> NOTE : This <b>ALWAYS</b> return an element;  If calculation lead outside the table, the first or the last element will be returned.  
 * @param timestamp  The timestamp (in nanosecond, as long) of the element we are looking for (startTime < timestamp < endTime) 
 * @return	The <i>closest</i> element found.
 */
public HistogramElement getClosestElementFromTimestamp(long timestamp){
  int index=(int)Math.round((double)(timestamp - startTime) / (double)elementsTimeInterval);
  if (index < 0) {
    index=0;
  }
 else   if (index >= elementTable.length) {
    index=(elementTable.length - 1);
  }
  return elementTable[index];
}",0.9825870646766168
92922,"/** 
 * Return the X position (relative to the canvas) of a certain element.<p> Note : canvasWindowSize need to be set correctly here, otherwise unexpected element might be returned.<p> NOTE : This <b>ALWAYS</b> return an element;  If calculation lead outside the table, the first or the last element will be returned.
 * @param targetElement		The element we are looking to find the position 
 * @return					The <i>closest</i> found element. 
 */
public int getXPositionFromElement(HistogramElement targetElement){
  return (int)(((double)targetElement.index / (double)elementTable.length) * (double)canvasWindowSize);
}","/** 
 * Return the X position (relative to the canvas) of a certain element.<p> Note : canvasWindowSize need to be set correctly here, otherwise unexpected element might be returned.<p> NOTE : This <b>ALWAYS</b> return an element;  If calculation lead outside the table, the first or the last element will be returned.
 * @param targetElement		The element we are looking to find the position 
 * @return					The <i>closest</i> found element. 
 */
public int getXPositionFromElement(HistogramElement targetElement){
  return (int)Math.round(((double)targetElement.index / (double)elementTable.length) * (double)canvasWindowSize);
}",0.992
92923,"/** 
 * Return the closest element to a X position on the canvas.<p> Note : canvasWindowSize need to be set correctly here, otherwise unexpected element might be returned.<p> <p> NOTE : This <b>ALWAYS</b> return an element;  If calculation lead outside the table, the first or the last element will be returned.  
 * @param position  The X position we are looking at (0 < pos < canvasWidth) 
 * @return	The <i>closest</i> element found.
 */
public HistogramElement getClosestElementFromXPosition(int position){
  int index=(int)((double)elementTable.length * ((double)position / (double)canvasWindowSize));
  if (index < 0) {
    index=0;
  }
 else   if (index >= elementTable.length) {
    index=(elementTable.length - 1);
  }
  return elementTable[index];
}","/** 
 * Return the closest element to a X position on the canvas.<p> Note : canvasWindowSize need to be set correctly here, otherwise unexpected element might be returned.<p> <p> NOTE : This <b>ALWAYS</b> return an element;  If calculation lead outside the table, the first or the last element will be returned.  
 * @param position  The X position we are looking at (0 < pos < canvasWidth) 
 * @return	The <i>closest</i> element found.
 */
public HistogramElement getClosestElementFromXPosition(int position){
  int index=(int)Math.round((double)elementTable.length * ((double)position / (double)canvasWindowSize));
  if (index < 0) {
    index=0;
  }
 else   if (index >= elementTable.length) {
    index=(elementTable.length - 1);
  }
  return elementTable[index];
}",0.993455497382199
92924,"/** 
 * Recalculate the height of each bar in the elements table.<p> This assume ""heightFactor"" is already set correctly.<p> NOTE : if ""maxHeight"", ""heighestEventCount"" or ""averageNumberOfEvents"" changes,  recalculateHeightFactor() should be recalled.
 */
public void recalculateEventHeight(){
  for (int x=0; x < readyUpToPosition; x++) {
    elementTable[x].intervalHeight=(int)(elementTable[x].intervalNbEvents * heightFactor);
  }
}","/** 
 * Recalculate the height of each bar in the elements table.<p> This assume ""heightFactor"" is already set correctly.<p> NOTE : if ""maxHeight"", ""heighestEventCount"" or ""averageNumberOfEvents"" changes,  recalculateHeightFactor() should be recalled.
 */
public void recalculateEventHeight(){
  for (int x=0; x < readyUpToPosition; x++) {
    elementTable[x].intervalHeight=(int)Math.ceil((double)elementTable[x].intervalNbEvents * heightFactor);
  }
}",0.9786276715410572
92925,"/** 
 * Getter for the left border of the window.<p> Compute the position from the HistogramContent data; may return 0 if the content data are wrong.  
 * @return The left position of the window, or 0 if it cannot compute it. 
 */
public int getWindowXPositionLeft(){
  int tmpLeftPosition=histogramContent.getXPositionByPositionAndTimeInterval(windowCenterPosition,-(windowTimeWidth / 2));
  if ((tmpLeftPosition == windowCenterPosition) && (tmpLeftPosition > 0)) {
    tmpLeftPosition=tmpLeftPosition - 1;
  }
  return tmpLeftPosition;
}","/** 
 * Getter for the left border of the window.<p> Compute the position from the HistogramContent data; may return 0 if the content data are wrong.  
 * @return The left position of the window, or 0 if it cannot compute it. 
 */
public int getWindowXPositionLeft(){
  if (windowTimeWidth < histogramContent.getElementsTimeInterval()) {
    return histogramContent.getXPositionByPositionAndTimeInterval(windowCenterPosition,-(histogramContent.getElementsTimeInterval()));
  }
 else {
    return histogramContent.getXPositionByPositionAndTimeInterval(windowCenterPosition,-(windowTimeWidth / 2));
  }
}",0.6503067484662577
92926,"/** 
 * Getter for the right border of the window.<p> Compute the position from the HistogramContent data; may return 0 if the content data are wrong.  
 * @return The right position of the window, or 0 if it cannot compute it. 
 */
public int getWindowXPositionRight(){
  int tmpRightPosition=histogramContent.getXPositionByPositionAndTimeInterval(windowCenterPosition,+(windowTimeWidth / 2));
  if ((tmpRightPosition == windowCenterPosition) && (tmpRightPosition < (histogramContent.getNbElement() - 1))) {
    tmpRightPosition=tmpRightPosition + 1;
  }
  return tmpRightPosition;
}","/** 
 * Getter for the right border of the window.<p> Compute the position from the HistogramContent data; may return 0 if the content data are wrong.  
 * @return The right position of the window, or 0 if it cannot compute it. 
 */
public int getWindowXPositionRight(){
  if (windowTimeWidth < histogramContent.getElementsTimeInterval()) {
    return histogramContent.getXPositionByPositionAndTimeInterval(windowCenterPosition,+(histogramContent.getElementsTimeInterval()));
  }
 else {
    return histogramContent.getXPositionByPositionAndTimeInterval(windowCenterPosition,+(windowTimeWidth / 2));
  }
}",0.6291000841042893
92927,"/** 
 * Perform a new request for the Selection window.<p> This assume the full experiment canvas has correct information about the selected window;  we need the fullExperimentCanvas' HistogramContent to be created and a selection window to be set.
 * @param experiment	The experiment we will select from
 */
public void performSelectedWindowEventsRequest(TmfExperiment<LttngEvent> experiment){
  HistogramSelectedWindow curSelectedWindow=fullExperimentCanvas.getCurrentWindow();
  if (curSelectedWindow == null) {
    fullExperimentCanvas.createNewSelectedWindow(DEFAULT_WINDOW_SIZE);
    curSelectedWindow=fullExperimentCanvas.getCurrentWindow();
  }
  LttngTimestamp ts1=new LttngTimestamp(curSelectedWindow.getTimestampLeft());
  LttngTimestamp ts2=new LttngTimestamp(curSelectedWindow.getTimestampRight());
  TmfTimeRange tmpRange=new TmfTimeRange(ts1,ts2);
  long intervalTime=((ts2.getValue() - ts1.getValue()) / selectedWindowCanvas.getHistogramContent().getNbElement());
  selectedWindowRequest=performRequest(experiment,selectedWindowCanvas,tmpRange,intervalTime);
  selectedWindowCanvas.redrawAsynchronously();
}","/** 
 * Perform a new request for the Selection window.<p> This assume the full experiment canvas has correct information about the selected window;  we need the fullExperimentCanvas' HistogramContent to be created and a selection window to be set.
 * @param experiment	The experiment we will select from
 */
public void performSelectedWindowEventsRequest(TmfExperiment<LttngEvent> experiment){
  HistogramSelectedWindow curSelectedWindow=fullExperimentCanvas.getCurrentWindow();
  if (curSelectedWindow == null) {
    fullExperimentCanvas.createNewSelectedWindow(DEFAULT_WINDOW_SIZE);
    curSelectedWindow=fullExperimentCanvas.getCurrentWindow();
  }
  LttngTimestamp ts1=new LttngTimestamp(curSelectedWindow.getTimestampOfLeftPosition());
  LttngTimestamp ts2=new LttngTimestamp(curSelectedWindow.getTimestampOfRightPosition());
  TmfTimeRange tmpRange=new TmfTimeRange(ts1,ts2);
  long intervalTime=((ts2.getValue() - ts1.getValue()) / selectedWindowCanvas.getHistogramContent().getNbElement());
  selectedWindowRequest=performRequest(experiment,selectedWindowCanvas,tmpRange,intervalTime);
  selectedWindowCanvas.redrawAsynchronously();
}",0.9911738746690204
92928,"/** 
 * Function used to tell that the timerange (window) changed.<p> This will most likely be called if the time window is resized. We send a signal to notify other views of the new timerange.
 */
public void sendTmfRangeSynchSignalBroadcast(){
  long centerTime=fullExperimentCanvas.getCurrentWindow().getTimestampCenter();
  long windowWidth=fullExperimentCanvas.getCurrentWindow().getWindowTimeWidth();
  long startTime=centerTime - windowWidth;
  if (startTime < fullExperimentCanvas.getHistogramContent().getStartTime()) {
    startTime=fullExperimentCanvas.getHistogramContent().getStartTime();
  }
  LttngTimestamp tmpStartTime=new LttngTimestamp(startTime);
  long endTime=centerTime + windowWidth;
  if (endTime > fullExperimentCanvas.getHistogramContent().getEndTime()) {
    endTime=fullExperimentCanvas.getHistogramContent().getEndTime();
  }
  LttngTimestamp tmpEndTime=new LttngTimestamp(endTime);
  TmfTimeRange tmpTimeRange=new TmfTimeRange(tmpStartTime,tmpEndTime);
  LttngTimestamp tmpEventTime=new LttngTimestamp(currentEventTime);
  broadcast(new TmfRangeSynchSignal(this,tmpTimeRange,tmpEventTime));
}","/** 
 * Function used to tell that the timerange (window) changed.<p> This will most likely be called if the time window is resized. We send a signal to notify other views of the new timerange.
 */
public void sendTmfRangeSynchSignalBroadcast(){
  long centerTime=fullExperimentCanvas.getCurrentWindow().getTimestampOfCenterPosition();
  long windowWidth=fullExperimentCanvas.getCurrentWindow().getWindowTimeWidth();
  long startTime=centerTime - windowWidth;
  if (startTime < fullExperimentCanvas.getHistogramContent().getStartTime()) {
    startTime=fullExperimentCanvas.getHistogramContent().getStartTime();
  }
  LttngTimestamp tmpStartTime=new LttngTimestamp(startTime);
  long endTime=centerTime + windowWidth;
  if (endTime > fullExperimentCanvas.getHistogramContent().getEndTime()) {
    endTime=fullExperimentCanvas.getHistogramContent().getEndTime();
  }
  LttngTimestamp tmpEndTime=new LttngTimestamp(endTime);
  TmfTimeRange tmpTimeRange=new TmfTimeRange(tmpStartTime,tmpEndTime);
  LttngTimestamp tmpEventTime=new LttngTimestamp(currentEventTime);
  broadcast(new TmfRangeSynchSignal(this,tmpTimeRange,tmpEventTime));
}",0.9902482269503546
92929,"/** 
 * Update the content of the controls related to the timestamp of the selection window<p> WARNING : Calls in there are not thread safe and can't be called from different thread than ""main""
 */
public void updateSelectedWindowTimestamp(){
  String startTime=HistogramConstant.formatNanoSecondsTime(selectedWindowCanvas.getHistogramContent().getStartTime());
  String stopTime=HistogramConstant.formatNanoSecondsTime(selectedWindowCanvas.getHistogramContent().getEndTime());
  txtWindowStartTime.setText(startTime);
  txtWindowStopTime.setText(stopTime);
  ntgCurrentWindowTime.setValue(fullExperimentCanvas.getCurrentWindow().getTimestampCenter());
  ntgTimeRangeWindow.setValue(fullExperimentCanvas.getCurrentWindow().getWindowTimeWidth());
  if (isGivenTimestampInSelectedWindow(ntgCurrentEventTime.getValue()) == false) {
    currentEventChangeNotification(fullExperimentCanvas.getCurrentWindow().getTimestampCenter());
  }
  txtWindowStartTime.getParent().layout();
  ntgCurrentWindowTime.getParent().layout();
}","/** 
 * Update the content of the controls related to the timestamp of the selection window<p> WARNING : Calls in there are not thread safe and can't be called from different thread than ""main""
 */
public void updateSelectedWindowTimestamp(){
  String startTime=HistogramConstant.formatNanoSecondsTime(selectedWindowCanvas.getHistogramContent().getStartTime());
  String stopTime=HistogramConstant.formatNanoSecondsTime(selectedWindowCanvas.getHistogramContent().getEndTime());
  txtWindowStartTime.setText(startTime);
  txtWindowStopTime.setText(stopTime);
  ntgCurrentWindowTime.setValue(fullExperimentCanvas.getCurrentWindow().getTimestampOfCenterPosition());
  ntgTimeRangeWindow.setValue(fullExperimentCanvas.getCurrentWindow().getWindowTimeWidth());
  if (isGivenTimestampInSelectedWindow(ntgCurrentEventTime.getValue()) == false) {
    currentEventChangeNotification(fullExperimentCanvas.getCurrentWindow().getTimestampOfCenterPosition());
  }
  txtWindowStartTime.getParent().layout();
  ntgCurrentWindowTime.getParent().layout();
}",0.9786407766990292
92930,"/** 
 * Check if a given timestamp is inside the selection window.<p> This assume fullExperimentCanvas contain a valid HistogramContent
 * @param timestamp	the timestamp to check
 * @return	if the time is inside the selection window or not
 */
public boolean isGivenTimestampInSelectedWindow(long timestamp){
  boolean returnedValue=true;
  if ((timestamp < fullExperimentCanvas.getCurrentWindow().getTimestampLeft()) || (timestamp > fullExperimentCanvas.getCurrentWindow().getTimestampRight())) {
    returnedValue=false;
  }
  return returnedValue;
}","/** 
 * Check if a given timestamp is inside the selection window.<p> This assume fullExperimentCanvas contain a valid HistogramContent
 * @param timestamp	the timestamp to check
 * @return	if the time is inside the selection window or not
 */
public boolean isGivenTimestampInSelectedWindow(long timestamp){
  boolean returnedValue=true;
  if ((timestamp < fullExperimentCanvas.getCurrentWindow().getTimestampOfLeftPosition()) || (timestamp > fullExperimentCanvas.getCurrentWindow().getTimestampOfRightPosition())) {
    returnedValue=false;
  }
  return returnedValue;
}",0.98220640569395
92931,"private void createCanvasAndRequests(TmfExperiment<LttngEvent> newExperiment){
  lastUsedExperiment=newExperiment;
  TmfExperiment<LttngEvent> experimentCopy=newExperiment.createTraceCopy();
  fullExperimentCanvas.createNewHistogramContent(fullExperimentCanvas.getSize().x,FULL_TRACE_BAR_WIDTH,FULL_TRACE_CANVAS_HEIGHT,FULL_TRACE_DIFFERENCE_TO_AVERAGE);
  fullExperimentCanvas.createNewSelectedWindow(DEFAULT_WINDOW_SIZE);
  currentEventTime=newExperiment.getStartTime().getValue();
  fullExperimentCanvas.getCurrentWindow().setSelectedWindowVisible(true);
  fullExperimentCanvas.getHistogramContent().resetTable(newExperiment.getStartTime().getValue(),newExperiment.getEndTime().getValue());
  selectedWindowCanvas.createNewHistogramContent(selectedWindowCanvas.getSize().x,SELECTED_WINDOW_BAR_WIDTH,SELECTED_WINDOW_CANVAS_HEIGHT,SELECTED_WINDOW_DIFFERENCE_TO_AVERAGE);
  selectedWindowCanvas.getHistogramContent().resetTable(fullExperimentCanvas.getCurrentWindow().getTimestampLeft(),fullExperimentCanvas.getCurrentWindow().getTimestampRight());
  resetControlsContent();
  if (dataBackgroundFullRequest != null) {
    fullExperimentCanvas.redraw();
    selectedWindowCanvas.redraw();
  }
  dataBackgroundFullRequest=null;
  selectedWindowRequest=null;
  performSelectedWindowEventsRequest(newExperiment);
  performAllTraceEventsRequest(experimentCopy);
}","private void createCanvasAndRequests(TmfExperiment<LttngEvent> newExperiment){
  lastUsedExperiment=newExperiment;
  TmfExperiment<LttngEvent> experimentCopy=newExperiment.createTraceCopy();
  fullExperimentCanvas.createNewHistogramContent(fullExperimentCanvas.getSize().x,FULL_TRACE_BAR_WIDTH,FULL_TRACE_CANVAS_HEIGHT,FULL_TRACE_DIFFERENCE_TO_AVERAGE);
  fullExperimentCanvas.createNewSelectedWindow(DEFAULT_WINDOW_SIZE);
  currentEventTime=newExperiment.getStartTime().getValue();
  fullExperimentCanvas.getCurrentWindow().setSelectedWindowVisible(true);
  fullExperimentCanvas.getHistogramContent().resetTable(newExperiment.getStartTime().getValue(),newExperiment.getEndTime().getValue());
  selectedWindowCanvas.createNewHistogramContent(selectedWindowCanvas.getSize().x,SELECTED_WINDOW_BAR_WIDTH,SELECTED_WINDOW_CANVAS_HEIGHT,SELECTED_WINDOW_DIFFERENCE_TO_AVERAGE);
  selectedWindowCanvas.getHistogramContent().resetTable(fullExperimentCanvas.getCurrentWindow().getTimestampOfLeftPosition(),fullExperimentCanvas.getCurrentWindow().getTimestampOfRightPosition());
  resetControlsContent();
  if (dataBackgroundFullRequest != null) {
    fullExperimentCanvas.redraw();
    selectedWindowCanvas.redraw();
  }
  dataBackgroundFullRequest=null;
  selectedWindowRequest=null;
  performSelectedWindowEventsRequest(newExperiment);
  performAllTraceEventsRequest(experimentCopy);
}",0.9926847110460864
92932,"/** 
 * Function used to warn that the selection window changed.<p> This might be called because the window moved or because its size changed.<p> We will update the different control related to the selection window.
 */
public void windowChangedNotification(){
  if (lastUsedExperiment != null) {
    if (selectedWindowRequest.isCompleted() == false) {
      selectedWindowRequest.cancel();
    }
    selectedWindowTime=fullExperimentCanvas.getCurrentWindow().getTimestampCenter();
    selectedWindowTimerange=fullExperimentCanvas.getCurrentWindow().getWindowTimeWidth();
    if (isGivenTimestampInSelectedWindow(currentEventTime) == false) {
      currentEventChangeNotification(fullExperimentCanvas.getCurrentWindow().getTimestampLeft());
    }
    performSelectedWindowEventsRequest(lastUsedExperiment);
  }
}","/** 
 * Function used to warn that the selection window changed.<p> This might be called because the window moved or because its size changed.<p> We will update the different control related to the selection window.
 */
public void windowChangedNotification(){
  if (lastUsedExperiment != null) {
    if (selectedWindowRequest.isCompleted() == false) {
      selectedWindowRequest.cancel();
    }
    selectedWindowTime=fullExperimentCanvas.getCurrentWindow().getTimestampOfCenterPosition();
    selectedWindowTimerange=fullExperimentCanvas.getCurrentWindow().getWindowTimeWidth();
    if (isGivenTimestampInSelectedWindow(currentEventTime) == false) {
      currentEventChangeNotification(fullExperimentCanvas.getCurrentWindow().getTimestampOfLeftPosition());
    }
    performSelectedWindowEventsRequest(lastUsedExperiment);
  }
}",0.9805352798053528
92933,"protected void recalculateHeightIfCanvasSizeChanged(){
  HistogramContent tmpContent=parentCanvas.getHistogramContent();
  int exp=(int)Math.floor(Math.log((double)tmpContent.getCanvasWindowSize()) / Math.log(2.0));
  int contentSize=(int)Math.pow(2,exp);
  double maxBarsDiffFactor=((double)tmpContent.getNbElement() / (double)contentSize);
  if (maxBarsDiffFactor != tmpContent.getMaxDifferenceToAverageFactor()) {
    tmpContent.setMaxDifferenceToAverageFactor(maxBarsDiffFactor);
    tmpContent.recalculateHeightFactor();
    tmpContent.recalculateEventHeight();
  }
}","protected void recalculateHeightIfCanvasSizeChanged(){
  HistogramContent tmpContent=parentCanvas.getHistogramContent();
  int exp=(int)Math.floor(Math.log((double)tmpContent.getCanvasWindowSize()) / Math.log(2.0));
  int contentSize=(int)Math.pow(2,exp);
  double maxBarsDiffFactor=((double)tmpContent.getNbElement() / (double)contentSize);
  if (Math.abs(maxBarsDiffFactor - tmpContent.getMaxDifferenceToAverageFactor()) > 0.001) {
    tmpContent.setMaxDifferenceToAverageFactor(maxBarsDiffFactor);
    tmpContent.recalculateHeightFactor();
    tmpContent.recalculateEventHeight();
  }
}",0.9819121447028424
92934,"public static Test suite(){
  TestSuite suite=new TestSuite(AllTmfCoreTests.class.getName());
  suite.addTestSuite(TmfCorePluginTest.class);
  suite.addTestSuite(TmfEventFieldTest.class);
  suite.addTestSuite(TmfEventContentTest.class);
  suite.addTestSuite(TmfEventTypeTest.class);
  suite.addTestSuite(TmfEventSourceTest.class);
  suite.addTestSuite(TmfTraceEventTest.class);
  suite.addTestSuite(TmfEventReferenceTest.class);
  suite.addTestSuite(TmfTimestampTest.class);
  suite.addTestSuite(TmfTimeRangeTest.class);
  suite.addTestSuite(TmfEventTest.class);
  suite.addTestSuite(TmfDataRequestTest.class);
  suite.addTestSuite(TmfEventRequestTest.class);
  suite.addTestSuite(TmfCoalescedDataRequestTest.class);
  suite.addTestSuite(TmfCoalescedEventRequestTest.class);
  suite.addTestSuite(TmfRequestExecutorTest.class);
  suite.addTestSuite(TmfEventProviderTest.class);
  suite.addTestSuite(TmfProviderManagerTest.class);
  suite.addTestSuite(TmfTraceTest.class);
  suite.addTestSuite(TmfExperimentTest.class);
  suite.addTestSuite(TmfMultiTraceExperimentTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(AllTmfCoreTests.class.getName());
  suite.addTestSuite(TmfCorePluginTest.class);
  suite.addTest(org.eclipse.linuxtools.tmf.tests.event.AllTests.suite());
  suite.addTest(org.eclipse.linuxtools.tmf.tests.request.AllTests.suite());
  suite.addTest(org.eclipse.linuxtools.tmf.tests.component.AllTests.suite());
  suite.addTest(org.eclipse.linuxtools.tmf.tests.trace.AllTests.suite());
  suite.addTest(org.eclipse.linuxtools.tmf.tests.experiment.AllTests.suite());
  return suite;
}",0.2317596566523605
92935,"public static Test suite(){
  TestSuite suite=new TestSuite(AllTests.class.getName());
  suite.addTestSuite(TmfEventProviderTest.class);
  suite.addTestSuite(TmfProviderManagerTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(AllTests.class.getName());
  suite.addTestSuite(TmfProviderManagerTest.class);
  suite.addTestSuite(TmfEventProviderTest.class);
  return suite;
}",0.7475728155339806
92936,"@SuppressWarnings(""String_Node_Str"") public void testGetProviders(){
  ITmfDataProvider<TmfEvent>[] eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(eventProviders.length == 2);
  eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TmfTraceStub.class);
  assertTrue(eventProviders.length == 1);
  eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TmfEventProviderStub.class);
  assertTrue(eventProviders.length == 1);
  eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfSyntheticEventStub.class);
  assertTrue(eventProviders.length == 1);
}","@SuppressWarnings(""String_Node_Str"") public void testGetProviders(){
  ITmfDataProvider<TmfEvent>[] eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertEquals(""String_Node_Str"",2,eventProviders.length);
  eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TmfTraceStub.class);
  assertEquals(""String_Node_Str"",1,eventProviders.length);
  eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TmfEventProviderStub.class);
  assertEquals(""String_Node_Str"",1,eventProviders.length);
  eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfSyntheticEventStub.class);
  assertEquals(""String_Node_Str"",1,eventProviders.length);
}",0.9005376344086021
92937,"@SuppressWarnings(""String_Node_Str"") public void testGetProviders2(){
  ITmfDataProvider<TmfEvent>[] eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(eventProviders.length == 2);
  eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TmfTraceStub.class);
  assertTrue(eventProviders.length == 1);
  eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TmfEventProviderStub.class);
  assertTrue(eventProviders.length == 1);
  eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfSyntheticEventStub.class);
  assertTrue(eventProviders.length == 1);
}","@SuppressWarnings(""String_Node_Str"") public void testGetProviders2(){
  ITmfDataProvider<TmfEvent>[] eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertEquals(""String_Node_Str"",2,eventProviders.length);
  eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TmfTraceStub.class);
  assertEquals(""String_Node_Str"",1,eventProviders.length);
  eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TmfEventProviderStub.class);
  assertEquals(""String_Node_Str"",1,eventProviders.length);
  eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfSyntheticEventStub.class);
  assertEquals(""String_Node_Str"",1,eventProviders.length);
}",0.9006711409395973
92938,"private void createCanvasAndRequests(TmfExperiment<LttngEvent> newExperiment){
  TmfExperiment<LttngEvent> experimentCopy=newExperiment.createTraceCopy();
  lastUsedExperiment=experimentCopy;
  fullExperimentCanvas.createNewHistogramContent(fullExperimentCanvas.getSize().x,FULL_TRACE_BAR_WIDTH,FULL_TRACE_CANVAS_HEIGHT,FULL_TRACE_DIFFERENCE_TO_AVERAGE);
  fullExperimentCanvas.createNewSelectedWindow(DEFAULT_WINDOW_SIZE);
  currentEventTime=newExperiment.getStartTime().getValue();
  fullExperimentCanvas.getCurrentWindow().setSelectedWindowVisible(true);
  fullExperimentCanvas.getHistogramContent().resetTable(newExperiment.getStartTime().getValue(),newExperiment.getEndTime().getValue());
  selectedWindowCanvas.createNewHistogramContent(selectedWindowCanvas.getSize().x,SELECTED_WINDOW_BAR_WIDTH,SELECTED_WINDOW_CANVAS_HEIGHT,SELECTED_WINDOW_DIFFERENCE_TO_AVERAGE);
  selectedWindowCanvas.getHistogramContent().resetTable(fullExperimentCanvas.getCurrentWindow().getTimestampLeft(),fullExperimentCanvas.getCurrentWindow().getTimestampRight());
  resetControlsContent();
  if (dataBackgroundFullRequest != null) {
    fullExperimentCanvas.redraw();
    selectedWindowCanvas.redraw();
  }
  dataBackgroundFullRequest=null;
  selectedWindowRequest=null;
  performSelectedWindowEventsRequest(newExperiment);
  performAllTraceEventsRequest(experimentCopy);
}","private void createCanvasAndRequests(TmfExperiment<LttngEvent> newExperiment){
  lastUsedExperiment=newExperiment;
  TmfExperiment<LttngEvent> experimentCopy=newExperiment.createTraceCopy();
  fullExperimentCanvas.createNewHistogramContent(fullExperimentCanvas.getSize().x,FULL_TRACE_BAR_WIDTH,FULL_TRACE_CANVAS_HEIGHT,FULL_TRACE_DIFFERENCE_TO_AVERAGE);
  fullExperimentCanvas.createNewSelectedWindow(DEFAULT_WINDOW_SIZE);
  currentEventTime=newExperiment.getStartTime().getValue();
  fullExperimentCanvas.getCurrentWindow().setSelectedWindowVisible(true);
  fullExperimentCanvas.getHistogramContent().resetTable(newExperiment.getStartTime().getValue(),newExperiment.getEndTime().getValue());
  selectedWindowCanvas.createNewHistogramContent(selectedWindowCanvas.getSize().x,SELECTED_WINDOW_BAR_WIDTH,SELECTED_WINDOW_CANVAS_HEIGHT,SELECTED_WINDOW_DIFFERENCE_TO_AVERAGE);
  selectedWindowCanvas.getHistogramContent().resetTable(fullExperimentCanvas.getCurrentWindow().getTimestampLeft(),fullExperimentCanvas.getCurrentWindow().getTimestampRight());
  resetControlsContent();
  if (dataBackgroundFullRequest != null) {
    fullExperimentCanvas.redraw();
    selectedWindowCanvas.redraw();
  }
  dataBackgroundFullRequest=null;
  selectedWindowRequest=null;
  performSelectedWindowEventsRequest(newExperiment);
  performAllTraceEventsRequest(experimentCopy);
}",0.9731123388581951
92939,"public void selectExperiment(LTTngExperimentNode experiment){
  String expId=experiment.getName();
  if (fSelectedExperiment != null)   fSelectedExperiment.deregister();
  try {
    LTTngTraceNode[] traceEntries=experiment.getTraces();
    int nbTraces=traceEntries.length;
    ITmfTrace[] traces=new ITmfTrace[nbTraces];
    for (int i=0; i < nbTraces; i++) {
      IResource res=traceEntries[i].getFolder();
      String location=res.getLocation().toOSString();
      ITmfTrace trace=new LTTngTrace(location,waitForCompletion);
      traces[i]=trace;
    }
    fSelectedExperiment=new TmfExperiment<LttngEvent>(LttngEvent.class,expId,traces);
    fSelectedExperiment.indexExperiment(waitForCompletion);
    broadcast(new TmfExperimentSelectedSignal<LttngEvent>(this,fSelectedExperiment));
  }
 catch (  FileNotFoundException e) {
    return;
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}","public void selectExperiment(LTTngExperimentNode experiment){
  String expId=experiment.getName();
  if (fSelectedExperiment != null)   fSelectedExperiment.dispose();
  try {
    LTTngTraceNode[] traceEntries=experiment.getTraces();
    int nbTraces=traceEntries.length;
    ITmfTrace[] traces=new ITmfTrace[nbTraces];
    for (int i=0; i < nbTraces; i++) {
      IResource res=traceEntries[i].getFolder();
      String location=res.getLocation().toOSString();
      ITmfTrace trace=new LTTngTrace(location,waitForCompletion);
      traces[i]=trace;
    }
    fSelectedExperiment=new TmfExperiment<LttngEvent>(LttngEvent.class,expId,traces);
    fSelectedExperiment.indexExperiment(waitForCompletion);
    broadcast(new TmfExperimentSelectedSignal<LttngEvent>(this,fSelectedExperiment));
  }
 catch (  FileNotFoundException e) {
    return;
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}",0.991671293725708
92940,"/** 
 * Clea up resources
 */
public static void dispose(){
  if (experimentManager != null) {
    experimentManager.deregister();
    experimentManager=null;
    instanceBook=null;
  }
}","/** 
 * Clea up resources
 */
public static void dispose(){
  if (experimentManager != null) {
    experimentManager.dispose();
    experimentManager=null;
    instanceBook=null;
  }
}",0.9757412398921832
92941,"public static Test suite(){
  TestSuite suite=new TestSuite(AllTmfCoreTests.class.getName());
  suite.addTestSuite(TmfCorePluginTest.class);
  suite.addTestSuite(TmfEventProviderTest.class);
  suite.addTestSuite(TmfProviderManagerTest.class);
  suite.addTestSuite(TmfEventFieldTest.class);
  suite.addTestSuite(TmfEventContentTest.class);
  suite.addTestSuite(TmfEventTypeTest.class);
  suite.addTestSuite(TmfEventSourceTest.class);
  suite.addTestSuite(TmfTraceEventTest.class);
  suite.addTestSuite(TmfEventReferenceTest.class);
  suite.addTestSuite(TmfTimestampTest.class);
  suite.addTestSuite(TmfTimeRangeTest.class);
  suite.addTestSuite(TmfEventTest.class);
  suite.addTestSuite(TmfDataRequestTest.class);
  suite.addTestSuite(TmfEventRequestTest.class);
  suite.addTestSuite(TmfCoalescedDataRequestTest.class);
  suite.addTestSuite(TmfCoalescedEventRequestTest.class);
  suite.addTestSuite(TmfTraceTest.class);
  suite.addTestSuite(TmfExperimentTest.class);
  suite.addTestSuite(TmfMultiTraceExperimentTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(AllTmfCoreTests.class.getName());
  suite.addTestSuite(TmfCorePluginTest.class);
  suite.addTestSuite(TmfEventFieldTest.class);
  suite.addTestSuite(TmfEventContentTest.class);
  suite.addTestSuite(TmfEventTypeTest.class);
  suite.addTestSuite(TmfEventSourceTest.class);
  suite.addTestSuite(TmfTraceEventTest.class);
  suite.addTestSuite(TmfEventReferenceTest.class);
  suite.addTestSuite(TmfTimestampTest.class);
  suite.addTestSuite(TmfTimeRangeTest.class);
  suite.addTestSuite(TmfEventTest.class);
  suite.addTestSuite(TmfDataRequestTest.class);
  suite.addTestSuite(TmfEventRequestTest.class);
  suite.addTestSuite(TmfCoalescedDataRequestTest.class);
  suite.addTestSuite(TmfCoalescedEventRequestTest.class);
  suite.addTestSuite(TmfEventProviderTest.class);
  suite.addTestSuite(TmfProviderManagerTest.class);
  suite.addTestSuite(TmfTraceTest.class);
  suite.addTestSuite(TmfExperimentTest.class);
  suite.addTestSuite(TmfMultiTraceExperimentTest.class);
  return suite;
}",0.9019230769230768
92942,"@SuppressWarnings(""String_Node_Str"") public void testGetPlainEvents(){
  final int BLOCK_SIZE=100;
  final int NB_EVENTS=1000;
  final Vector<TmfEvent> requestedEvents=new Vector<TmfEvent>();
  ITmfDataProvider<TmfEvent>[] eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TmfEventProviderStub.class);
  ITmfDataProvider<TmfEvent> provider=eventProviders[0];
  TmfTimeRange range=new TmfTimeRange(TmfTimestamp.BigBang,TmfTimestamp.BigCrunch);
  final TmfEventRequest<TmfEvent> request=new TmfEventRequest<TmfEvent>(TmfEvent.class,range,NB_EVENTS,BLOCK_SIZE){
    @Override public void handleData(){
      TmfEvent[] events=getData();
      for (      TmfEvent e : events) {
        requestedEvents.add(e);
      }
    }
  }
;
  provider.sendRequest(request);
  request.waitForCompletion();
  assertEquals(""String_Node_Str"",NB_EVENTS,requestedEvents.size());
  assertTrue(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isCancelled());
  for (int i=0; i < NB_EVENTS; i++) {
    assertEquals(""String_Node_Str"",i + 1,requestedEvents.get(i).getTimestamp().getValue());
  }
}","@SuppressWarnings(""String_Node_Str"") public void testGetPlainEvents() throws InterruptedException {
  final int BLOCK_SIZE=100;
  final int NB_EVENTS=1000;
  final Vector<TmfEvent> requestedEvents=new Vector<TmfEvent>();
  ITmfDataProvider<TmfEvent>[] eventProviders=(ITmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TmfEventProviderStub.class);
  ITmfDataProvider<TmfEvent> provider=eventProviders[0];
  TmfTimeRange range=new TmfTimeRange(TmfTimestamp.BigBang,TmfTimestamp.BigCrunch);
  final TmfEventRequest<TmfEvent> request=new TmfEventRequest<TmfEvent>(TmfEvent.class,range,NB_EVENTS,BLOCK_SIZE){
    @Override public void handleData(){
      TmfEvent[] events=getData();
      for (      TmfEvent e : events) {
        requestedEvents.add(e);
      }
    }
  }
;
  provider.sendRequest(request);
  request.waitForCompletion();
  assertEquals(""String_Node_Str"",NB_EVENTS,requestedEvents.size());
  assertTrue(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isCancelled());
  for (int i=0; i < NB_EVENTS; i++) {
    assertEquals(""String_Node_Str"",i + 1,requestedEvents.get(i).getTimestamp().getValue());
  }
}",0.9875053856096512
92943,"public void testGetSyntheticEvents_LargerBlock(){
  TmfTimeRange range=new TmfTimeRange(TmfTimestamp.BigBang,TmfTimestamp.BigCrunch);
  getSyntheticData(range,1000,TmfSyntheticEventProviderStub.BLOCK_SIZE * 2);
}","public void testGetSyntheticEvents_LargerBlock() throws InterruptedException {
  TmfTimeRange range=new TmfTimeRange(TmfTimestamp.BigBang,TmfTimestamp.BigCrunch);
  getSyntheticData(range,1000,TmfSyntheticEventProviderStub.BLOCK_SIZE * 2);
}",0.93598233995585
92944,"public void testGetSyntheticEvents_WeirdTimeRange2(){
  TmfTimestamp start=new TmfTimestamp(0,(byte)-3,0);
  TmfTimestamp end=TmfTimestamp.BigCrunch;
  TmfTimeRange range=new TmfTimeRange(start,end);
  getSyntheticData(range,-1,TmfSyntheticEventProviderStub.BLOCK_SIZE);
}","public void testGetSyntheticEvents_WeirdTimeRange2() throws InterruptedException {
  TmfTimestamp start=new TmfTimestamp(0,(byte)-3,0);
  TmfTimestamp end=TmfTimestamp.BigCrunch;
  TmfTimeRange range=new TmfTimeRange(start,end);
  getSyntheticData(range,-1,TmfSyntheticEventProviderStub.BLOCK_SIZE);
}",0.949389179755672
92945,"public void testGetSyntheticEvents_TimeRange(){
  TmfTimestamp start=new TmfTimestamp(1,(byte)-3,0);
  TmfTimestamp end=new TmfTimestamp(1000,(byte)-3,0);
  TmfTimeRange range=new TmfTimeRange(start,end);
  getSyntheticData(range,-1,TmfSyntheticEventProviderStub.BLOCK_SIZE);
}","public void testGetSyntheticEvents_TimeRange() throws InterruptedException {
  TmfTimestamp start=new TmfTimestamp(1,(byte)-3,0);
  TmfTimestamp end=new TmfTimestamp(1000,(byte)-3,0);
  TmfTimeRange range=new TmfTimeRange(start,end);
  getSyntheticData(range,-1,TmfSyntheticEventProviderStub.BLOCK_SIZE);
}",0.9502572898799314
92946,"public void testGetSyntheticEvents_WeirdTimeRange1(){
  TmfTimestamp start=TmfTimestamp.BigBang;
  TmfTimestamp end=new TmfTimestamp(0,(byte)-3,0);
  TmfTimeRange range=new TmfTimeRange(start,end);
  getSyntheticData(range,-1,TmfSyntheticEventProviderStub.BLOCK_SIZE);
}","public void testGetSyntheticEvents_WeirdTimeRange1() throws InterruptedException {
  TmfTimestamp start=TmfTimestamp.BigBang;
  TmfTimestamp end=new TmfTimestamp(0,(byte)-3,0);
  TmfTimeRange range=new TmfTimeRange(start,end);
  getSyntheticData(range,-1,TmfSyntheticEventProviderStub.BLOCK_SIZE);
}",0.9490333919156416
92947,"public void testGetSyntheticEvents_EqualBlockSizes(){
  TmfTimeRange range=new TmfTimeRange(TmfTimestamp.BigBang,TmfTimestamp.BigCrunch);
  getSyntheticData(range,1000,TmfSyntheticEventProviderStub.BLOCK_SIZE);
}","public void testGetSyntheticEvents_EqualBlockSizes() throws InterruptedException {
  TmfTimeRange range=new TmfTimeRange(TmfTimestamp.BigBang,TmfTimestamp.BigCrunch);
  getSyntheticData(range,1000,TmfSyntheticEventProviderStub.BLOCK_SIZE);
}",0.93598233995585
92948,"@SuppressWarnings(""String_Node_Str"") private void getSyntheticData(final TmfTimeRange range,final int nbEvents,final int blockSize){
  final Vector<TmfSyntheticEventStub> requestedEvents=new Vector<TmfSyntheticEventStub>();
  ITmfDataProvider<TmfSyntheticEventStub>[] eventProviders=(ITmfDataProvider<TmfSyntheticEventStub>[])TmfProviderManager.getProviders(TmfSyntheticEventStub.class);
  ITmfDataProvider<TmfSyntheticEventStub> provider=eventProviders[0];
  final TmfEventRequest<TmfSyntheticEventStub> request=new TmfEventRequest<TmfSyntheticEventStub>(TmfSyntheticEventStub.class,range,nbEvents,blockSize){
    @Override public void handleData(){
      TmfSyntheticEventStub[] events=getData();
      for (      TmfSyntheticEventStub e : events) {
        requestedEvents.add(e);
      }
    }
  }
;
  provider.sendRequest(request);
  request.waitForCompletion();
  if (nbEvents != -1)   assertEquals(""String_Node_Str"",nbEvents,requestedEvents.size());
  assertTrue(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isCancelled());
  for (int i=0; i < (nbEvents / 2); i++) {
    assertEquals(""String_Node_Str"",i + 1,requestedEvents.get(2 * i + 0).getTimestamp().getValue());
    assertEquals(""String_Node_Str"",i + 1,requestedEvents.get(2 * i + 1).getTimestamp().getValue());
  }
}","@SuppressWarnings(""String_Node_Str"") private void getSyntheticData(final TmfTimeRange range,final int nbEvents,final int blockSize) throws InterruptedException {
  final Vector<TmfSyntheticEventStub> requestedEvents=new Vector<TmfSyntheticEventStub>();
  ITmfDataProvider<TmfSyntheticEventStub>[] eventProviders=(ITmfDataProvider<TmfSyntheticEventStub>[])TmfProviderManager.getProviders(TmfSyntheticEventStub.class);
  ITmfDataProvider<TmfSyntheticEventStub> provider=eventProviders[0];
  final TmfEventRequest<TmfSyntheticEventStub> request=new TmfEventRequest<TmfSyntheticEventStub>(TmfSyntheticEventStub.class,range,nbEvents,blockSize){
    @Override public void handleData(){
      TmfSyntheticEventStub[] events=getData();
      for (      TmfSyntheticEventStub e : events) {
        requestedEvents.add(e);
      }
    }
  }
;
  provider.sendRequest(request);
  request.waitForCompletion();
  if (nbEvents != -1)   assertEquals(""String_Node_Str"",nbEvents,requestedEvents.size());
  assertTrue(""String_Node_Str"",request.isCompleted());
  assertFalse(""String_Node_Str"",request.isCancelled());
  for (int i=0; i < (nbEvents / 2); i++) {
    assertEquals(""String_Node_Str"",i + 1,requestedEvents.get(2 * i + 0).getTimestamp().getValue());
    assertEquals(""String_Node_Str"",i + 1,requestedEvents.get(2 * i + 1).getTimestamp().getValue());
  }
}",0.9891018414130026
92949,"@Override protected void tearDown() throws Exception {
  super.tearDown();
  fEventProvider.deregister();
  fSyntheticEventProvider.deregister();
}","@Override protected void tearDown() throws Exception {
  super.tearDown();
  fEventProvider.dispose();
  fSyntheticEventProvider.dispose();
}",0.9375
92950,"public void testGetSyntheticEvents_SmallerBlock(){
  TmfTimeRange range=new TmfTimeRange(TmfTimestamp.BigBang,TmfTimestamp.BigCrunch);
  getSyntheticData(range,1000,TmfSyntheticEventProviderStub.BLOCK_SIZE / 2);
}","public void testGetSyntheticEvents_SmallerBlock() throws InterruptedException {
  TmfTimeRange range=new TmfTimeRange(TmfTimestamp.BigBang,TmfTimestamp.BigCrunch);
  getSyntheticData(range,1000,TmfSyntheticEventProviderStub.BLOCK_SIZE / 2);
}",0.9362637362637364
92951,"@Override public ITmfContext armRequest(TmfDataRequest<TmfEvent3> request){
  return null;
}","@Override public ITmfContext armRequest(ITmfDataRequest<TmfEvent3> request){
  return null;
}",0.9945945945945946
92952,"@SuppressWarnings(""String_Node_Str"") public void testRegister_Unregister_3(){
  TestProvider1 testProvider1=new TestProvider1(TmfEvent.class);
  TestProvider2 testProvider2=new TestProvider2(TmfEvent.class);
  TestProvider3 testProvider3=new TestProvider3(TmfEvent3.class);
  TmfDataProvider<TmfEvent>[] providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 2);
  if (providers[0] == testProvider1) {
    assertTrue(providers[1] == testProvider2);
  }
 else {
    assertTrue(providers[1] == testProvider1);
    assertTrue(providers[0] == testProvider2);
  }
  TmfDataProvider<TmfEvent3>[] providers3=(TmfDataProvider<TmfEvent3>[])TmfProviderManager.getProviders(TmfEvent3.class);
  assertTrue(providers3.length == 1);
  assertTrue(providers3[0] == testProvider3);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider1);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider2.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider2);
  providers3=(TmfDataProvider<TmfEvent3>[])TmfProviderManager.getProviders(TmfEvent3.class,TestProvider3.class);
  assertTrue(providers3.length == 1);
  assertTrue(providers3[0] == testProvider3);
  testProvider1.deregister();
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider2);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider2.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider2);
  providers3=(TmfDataProvider<TmfEvent3>[])TmfProviderManager.getProviders(TmfEvent3.class);
  assertTrue(providers3.length == 1);
  assertTrue(providers3[0] == testProvider3);
  providers3=(TmfDataProvider<TmfEvent3>[])TmfProviderManager.getProviders(TmfEvent3.class,TestProvider3.class);
  assertTrue(providers3.length == 1);
  assertTrue(providers3[0] == testProvider3);
  testProvider2.deregister();
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider2.class);
  assertTrue(providers.length == 0);
  providers3=(TmfDataProvider<TmfEvent3>[])TmfProviderManager.getProviders(TmfEvent3.class);
  assertTrue(providers3.length == 1);
  assertTrue(providers3[0] == testProvider3);
  providers3=(TmfDataProvider<TmfEvent3>[])TmfProviderManager.getProviders(TmfEvent3.class,TestProvider3.class);
  assertTrue(providers3.length == 1);
  assertTrue(providers3[0] == testProvider3);
  testProvider3.deregister();
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider2.class);
  assertTrue(providers.length == 0);
  providers3=(TmfDataProvider<TmfEvent3>[])TmfProviderManager.getProviders(TmfEvent3.class);
  assertTrue(providers3.length == 0);
  providers3=(TmfDataProvider<TmfEvent3>[])TmfProviderManager.getProviders(TmfEvent3.class,TestProvider3.class);
  assertTrue(providers3.length == 0);
}","@SuppressWarnings(""String_Node_Str"") public void testRegister_Unregister_3(){
  TestProvider1 testProvider1=new TestProvider1(TmfEvent.class);
  TestProvider2 testProvider2=new TestProvider2(TmfEvent.class);
  TestProvider3 testProvider3=new TestProvider3(TmfEvent3.class);
  TmfDataProvider<TmfEvent>[] providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 2);
  if (providers[0] == testProvider1) {
    assertTrue(providers[1] == testProvider2);
  }
 else {
    assertTrue(providers[1] == testProvider1);
    assertTrue(providers[0] == testProvider2);
  }
  TmfDataProvider<TmfEvent3>[] providers3=(TmfDataProvider<TmfEvent3>[])TmfProviderManager.getProviders(TmfEvent3.class);
  assertTrue(providers3.length == 1);
  assertTrue(providers3[0] == testProvider3);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider1);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider2.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider2);
  providers3=(TmfDataProvider<TmfEvent3>[])TmfProviderManager.getProviders(TmfEvent3.class,TestProvider3.class);
  assertTrue(providers3.length == 1);
  assertTrue(providers3[0] == testProvider3);
  testProvider1.dispose();
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider2);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider2.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider2);
  providers3=(TmfDataProvider<TmfEvent3>[])TmfProviderManager.getProviders(TmfEvent3.class);
  assertTrue(providers3.length == 1);
  assertTrue(providers3[0] == testProvider3);
  providers3=(TmfDataProvider<TmfEvent3>[])TmfProviderManager.getProviders(TmfEvent3.class,TestProvider3.class);
  assertTrue(providers3.length == 1);
  assertTrue(providers3[0] == testProvider3);
  testProvider2.dispose();
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider2.class);
  assertTrue(providers.length == 0);
  providers3=(TmfDataProvider<TmfEvent3>[])TmfProviderManager.getProviders(TmfEvent3.class);
  assertTrue(providers3.length == 1);
  assertTrue(providers3[0] == testProvider3);
  providers3=(TmfDataProvider<TmfEvent3>[])TmfProviderManager.getProviders(TmfEvent3.class,TestProvider3.class);
  assertTrue(providers3.length == 1);
  assertTrue(providers3[0] == testProvider3);
  testProvider3.dispose();
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider2.class);
  assertTrue(providers.length == 0);
  providers3=(TmfDataProvider<TmfEvent3>[])TmfProviderManager.getProviders(TmfEvent3.class);
  assertTrue(providers3.length == 0);
  providers3=(TmfDataProvider<TmfEvent3>[])TmfProviderManager.getProviders(TmfEvent3.class,TestProvider3.class);
  assertTrue(providers3.length == 0);
}",0.9942032719309544
92953,"@SuppressWarnings(""String_Node_Str"") public void testRegister_Unregister_2(){
  TestProvider1 testProvider1=new TestProvider1(TmfEvent.class);
  TestProvider2 testProvider2=new TestProvider2(TmfEvent.class);
  TmfDataProvider<TmfEvent>[] providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 2);
  if (providers[0] == testProvider1) {
    assertTrue(providers[1] == testProvider2);
  }
 else {
    assertTrue(providers[1] == testProvider1);
    assertTrue(providers[0] == testProvider2);
  }
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider1);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider2.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider2);
  testProvider1.deregister();
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider2);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider2.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider2);
  testProvider2.deregister();
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider2.class);
  assertTrue(providers.length == 0);
}","@SuppressWarnings(""String_Node_Str"") public void testRegister_Unregister_2(){
  TestProvider1 testProvider1=new TestProvider1(TmfEvent.class);
  TestProvider2 testProvider2=new TestProvider2(TmfEvent.class);
  TmfDataProvider<TmfEvent>[] providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 2);
  if (providers[0] == testProvider1) {
    assertTrue(providers[1] == testProvider2);
  }
 else {
    assertTrue(providers[1] == testProvider1);
    assertTrue(providers[0] == testProvider2);
  }
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider1);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider2.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider2);
  testProvider1.dispose();
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider2);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider2.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider2);
  testProvider2.dispose();
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider2.class);
  assertTrue(providers.length == 0);
}",0.992240041386446
92954,"@SuppressWarnings(""String_Node_Str"") public void testRegister_Unregister_1(){
  TestProvider1 testProvider1=new TestProvider1(TmfEvent.class);
  TmfDataProvider<TmfEvent>[] providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider1);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider1);
  testProvider1.deregister();
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 0);
}","@SuppressWarnings(""String_Node_Str"") public void testRegister_Unregister_1(){
  TestProvider1 testProvider1=new TestProvider1(TmfEvent.class);
  TmfDataProvider<TmfEvent>[] providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider1);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 1);
  assertTrue(providers[0] == testProvider1);
  testProvider1.dispose();
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class);
  assertTrue(providers.length == 0);
  providers=(TmfDataProvider<TmfEvent>[])TmfProviderManager.getProviders(TmfEvent.class,TestProvider1.class);
  assertTrue(providers.length == 0);
}",0.9910554561717352
92955,"@Override public boolean isCompleted(TmfDataRequest<TmfEvent3> request,TmfEvent3 data,int nbRead){
  return false;
}","@Override public boolean isCompleted(ITmfDataRequest<TmfEvent3> request,TmfEvent3 data,int nbRead){
  return false;
}",0.9957081545064378
92956,"@Override public void focusGained(FocusEvent event){
}","public void focusGained(FocusEvent event){
}",0.8979591836734694
92957,"@Override public void keyPressed(KeyEvent event){
switch (event.keyCode) {
case SWT.CR:
    handleNewStringValue();
  break;
default :
break;
}
}","public void keyPressed(KeyEvent event){
switch (event.keyCode) {
case SWT.CR:
    handleNewStringValue();
  break;
default :
break;
}
}",0.9642857142857144
92958,"@Override public void focusLost(FocusEvent event){
  handleNewStringValue();
}","public void focusLost(FocusEvent event){
  handleNewStringValue();
}",0.9315068493150684
92959,"@Override public void keyReleased(KeyEvent e){
}","public void keyReleased(KeyEvent e){
}",0.8837209302325582
92960,"public TimeTextGroup(HistogramView newParentView,Composite parent,int textStyle,int groupStyle,String groupValue,String textValue){
  Font font=parent.getFont();
  FontData tmpFontData=font.getFontData()[0];
  Font smallFont=new Font(font.getDevice(),tmpFontData.getName(),tmpFontData.getHeight(),tmpFontData.getStyle());
  parentView=newParentView;
  grpName=new Group(parent,groupStyle);
  grpName.setText(groupValue);
  grpName.setFont(smallFont);
  grpName.setLayout(new GridLayout(2,false));
  int textBoxSize=HistogramConstant.getTextSizeInControl(parent,LONGEST_STRING_VALUE);
  txtNanosec=new Text(grpName,textStyle);
  txtNanosec.setTextLimit(MAX_CHAR_IN_TEXTBOX);
  txtNanosec.setText(textValue);
  txtNanosec.setOrientation(SWT.RIGHT_TO_LEFT);
  GridData gridDataTextBox=new GridData(SWT.FILL,SWT.CENTER,true,false);
  gridDataTextBox.widthHint=textBoxSize;
  gridDataTextBox.minimumWidth=textBoxSize;
  txtNanosec.setFont(smallFont);
  txtNanosec.setLayoutData(gridDataTextBox);
  lblNanosec=new Label(grpName,SWT.LEFT);
  lblNanosec.setText(NANOSEC_LABEL);
  lblNanosec.setFont(smallFont);
  lblNanosec.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false));
  addNeededListeners();
}","public TimeTextGroup(HistogramView newParentView,Composite parent,int textStyle,int groupStyle,String groupValue,String textValue){
  Font font=parent.getFont();
  FontData tmpFontData=font.getFontData()[0];
  Font smallFont=new Font(font.getDevice(),tmpFontData.getName(),tmpFontData.getHeight() - SMALL_FONT_MODIFIER,tmpFontData.getStyle());
  parentView=newParentView;
  GridLayout gridLayoutgroup=new GridLayout(2,false);
  gridLayoutgroup.horizontalSpacing=0;
  gridLayoutgroup.verticalSpacing=0;
  grpName=new Group(parent,groupStyle);
  grpName.setText(groupValue);
  grpName.setFont(smallFont);
  grpName.setLayout(gridLayoutgroup);
  int textBoxSize=HistogramConstant.getTextSizeInControl(parent,LONGEST_STRING_VALUE);
  txtNanosec=new Text(grpName,textStyle);
  txtNanosec.setTextLimit(MAX_CHAR_IN_TEXTBOX);
  txtNanosec.setText(textValue);
  txtNanosec.setFont(smallFont);
  GridData gridDataTextBox=new GridData(SWT.LEFT,SWT.CENTER,true,false);
  gridDataTextBox.horizontalIndent=10;
  gridDataTextBox.verticalIndent=0;
  gridDataTextBox.widthHint=textBoxSize;
  gridDataTextBox.minimumWidth=textBoxSize;
  txtNanosec.setLayoutData(gridDataTextBox);
  int labelSize=HistogramConstant.getTextSizeInControl(parent,NANOSEC_LABEL);
  lblNanosec=new Label(grpName,SWT.LEFT);
  lblNanosec.setText(NANOSEC_LABEL);
  lblNanosec.setFont(smallFont);
  GridData gridDataLabel=new GridData(SWT.LEFT,SWT.CENTER,false,false);
  gridDataLabel.widthHint=labelSize;
  gridDataLabel.minimumWidth=labelSize;
  gridDataLabel.horizontalIndent=10;
  gridDataLabel.verticalIndent=0;
  lblNanosec.setLayoutData(gridDataLabel);
  addNeededListeners();
}",0.6788603587759409
92961,"@Override void paint(Rectangle bound,PaintEvent e){
  if (_itemHeight == _itemHeightDefault) {
    _itemHeight=getFontHeight() + 6;
  }
  if (bound.width < 2 || bound.height < 2 || null == _timeProvider)   return;
  _idealNameWidth=0;
  GC gc=e.gc;
  int nameWidth=_timeProvider.getNameSpace();
  long time0=_timeProvider.getTime0();
  long time1=_timeProvider.getTime1();
  long endTime=_timeProvider.getEndTime();
  long selectedTime=_timeProvider.getSelectedTime();
  Object[] items=_data._items;
  for (int i=_topItem; i < items.length; i++) {
    Item item=(Item)items[i];
    getNameRect(_rect0,bound,i,nameWidth);
    if (_rect0.y >= bound.y + bound.height)     break;
    if (item instanceof GroupItem) {
      getStatesRect(_rect1,bound,i,nameWidth);
      _rect0.width+=_rect1.width;
      drawName(item,_rect0,gc);
    }
 else {
      drawName(item,_rect0,gc);
    }
    getStatesRect(_rect0,bound,i,nameWidth);
    drawItemDataDurations(item,_rect0,time0,time1,endTime,selectedTime,gc);
  }
  if (drawTracesInteraction)   drawTraceInteractions(bound,e.gc);
  _rect0.x=bound.x;
  _rect0.y+=_rect0.height;
  _rect0.width=bound.width;
  _rect0.height=bound.y + bound.height - _rect0.y;
  if (_rect0.y < bound.y + bound.height) {
    gc.setBackground(_colors.getColor(TraceColorScheme.BACKGROUND));
    gc.fillRectangle(_rect0);
  }
  if (3 == _dragState) {
    gc.setForeground(_colors.getColor(TraceColorScheme.BLACK));
    gc.drawLine(bound.x + nameWidth,bound.y,bound.x + nameWidth,bound.y + bound.height - 1);
  }
 else   if (0 == _dragState && _mouseHover && _timeProvider.getNameSpace() > 0) {
    gc.setForeground(_colors.getColor(TraceColorScheme.RED));
    gc.drawLine(bound.x + nameWidth,bound.y,bound.x + nameWidth,bound.y + bound.height - 1);
  }
}","@Override void paint(Rectangle bound,PaintEvent e){
  if (_itemHeight == _itemHeightDefault) {
    _itemHeight=getFontHeight() + 6;
  }
  if (bound.width < 2 || bound.height < 2 || null == _timeProvider)   return;
  _idealNameWidth=0;
  GC gc=e.gc;
  int nameWidth=_timeProvider.getNameSpace();
  long time0=_timeProvider.getTime0();
  long time1=_timeProvider.getTime1();
  long endTime=_timeProvider.getEndTime();
  long selectedTime=_timeProvider.getSelectedTime();
  Object[] items=_data._items;
  for (int i=_topItem; i < items.length; i++) {
    Item item=(Item)items[i];
    int newItemHeight=(bound.height / items.length);
    if (newItemHeight > _itemHeight) {
      _itemHeight=newItemHeight;
    }
    getNameRect(_rect0,bound,i,nameWidth);
    if (_rect0.y >= bound.y + bound.height)     break;
    if (item instanceof GroupItem) {
      getStatesRect(_rect1,bound,i,nameWidth);
      _rect0.width+=_rect1.width;
      drawName(item,_rect0,gc);
    }
 else {
      drawName(item,_rect0,gc);
    }
    getStatesRect(_rect0,bound,i,nameWidth);
    drawItemDataDurations(item,_rect0,time0,time1,endTime,selectedTime,gc);
  }
  if (drawTracesInteraction)   drawTraceInteractions(bound,e.gc);
  _rect0.x=bound.x;
  _rect0.y+=_rect0.height;
  _rect0.width=bound.width;
  _rect0.height=bound.y + bound.height - _rect0.y;
  if (_rect0.y < bound.y + bound.height) {
    gc.setBackground(_colors.getColor(TraceColorScheme.BACKGROUND));
    gc.fillRectangle(_rect0);
  }
  if (3 == _dragState) {
    gc.setForeground(_colors.getColor(TraceColorScheme.BLACK));
    gc.drawLine(bound.x + nameWidth,bound.y,bound.x + nameWidth,bound.y + bound.height - 1);
  }
 else   if (0 == _dragState && _mouseHover && _timeProvider.getNameSpace() > 0) {
    gc.setForeground(_colors.getColor(TraceColorScheme.RED));
    gc.drawLine(bound.x + nameWidth,bound.y,bound.x + nameWidth,bound.y + bound.height - 1);
  }
}",0.9642954483510492
92962,"public static Test suite(){
  TestSuite suite=new TestSuite(AllTmfCoreTests.class.getName());
  suite.addTestSuite(TmfEventProviderTest.class);
  suite.addTestSuite(TmfProviderManagerTest.class);
  suite.addTestSuite(TmfEventFieldTest.class);
  suite.addTestSuite(TmfEventContentTest.class);
  suite.addTestSuite(TmfEventTypeTest.class);
  suite.addTestSuite(TmfEventSourceTest.class);
  suite.addTestSuite(TmfTraceEventTest.class);
  suite.addTestSuite(TmfEventReferenceTest.class);
  suite.addTestSuite(TmfTimestampTest.class);
  suite.addTestSuite(TmfTimeRangeTest.class);
  suite.addTestSuite(TmfEventTest.class);
  suite.addTestSuite(TmfDataRequestTest.class);
  suite.addTestSuite(TmfEventRequestTest.class);
  suite.addTestSuite(TmfCoalescedDataRequestTest.class);
  suite.addTestSuite(TmfTraceTest.class);
  suite.addTestSuite(TmfExperimentTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(AllTmfCoreTests.class.getName());
  suite.addTestSuite(TmfEventProviderTest.class);
  suite.addTestSuite(TmfProviderManagerTest.class);
  suite.addTestSuite(TmfEventFieldTest.class);
  suite.addTestSuite(TmfEventContentTest.class);
  suite.addTestSuite(TmfEventTypeTest.class);
  suite.addTestSuite(TmfEventSourceTest.class);
  suite.addTestSuite(TmfTraceEventTest.class);
  suite.addTestSuite(TmfEventReferenceTest.class);
  suite.addTestSuite(TmfTimestampTest.class);
  suite.addTestSuite(TmfTimeRangeTest.class);
  suite.addTestSuite(TmfEventTest.class);
  suite.addTestSuite(TmfDataRequestTest.class);
  suite.addTestSuite(TmfEventRequestTest.class);
  suite.addTestSuite(TmfCoalescedDataRequestTest.class);
  suite.addTestSuite(TmfCoalescedEventRequestTest.class);
  suite.addTestSuite(TmfTraceTest.class);
  suite.addTestSuite(TmfExperimentTest.class);
  suite.addTestSuite(TmfMultiTraceExperimentTest.class);
  return suite;
}",0.9385355424906467
92963,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"" + TmfCorePlugin.PLUGIN_ID + ""String_Node_Str"");
  suite.addTestSuite(TmfDataRequestTest.class);
  suite.addTestSuite(TmfEventRequestTest.class);
  suite.addTestSuite(TmfCoalescedDataRequestTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"" + TmfCorePlugin.PLUGIN_ID + ""String_Node_Str"");
  suite.addTestSuite(TmfDataRequestTest.class);
  suite.addTestSuite(TmfEventRequestTest.class);
  suite.addTestSuite(TmfCoalescedDataRequestTest.class);
  suite.addTestSuite(TmfCoalescedEventRequestTest.class);
  return suite;
}",0.911042944785276
92964,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"" + TmfCorePlugin.PLUGIN_ID + ""String_Node_Str"");
  suite.addTestSuite(TmfTraceTest.class);
  suite.addTestSuite(TmfExperimentTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"" + TmfCorePlugin.PLUGIN_ID + ""String_Node_Str"");
  suite.addTestSuite(TmfTraceTest.class);
  suite.addTestSuite(TmfExperimentTest.class);
  suite.addTestSuite(TmfMultiTraceExperimentTest.class);
  return suite;
}",0.8905950095969289
92965,"private void setupExperiment(){
  if (fExperiment == null) {
    fExperiment=new TmfExperiment<TmfEvent>(TmfEvent.class,EXPERIMENT,new ITmfTrace[]{fTrace});
    fExperiment.indexExperiment(true);
  }
}","private void setupExperiment(){
  if (fExperiment == null) {
    fExperiment=new TmfExperiment<TmfEvent>(TmfEvent.class,EXPERIMENT,fTrace);
    fExperiment.indexExperiment(true);
  }
}",0.9558441558441558
92966,"private ITmfTrace setupTrace(String path){
  if (fTrace == null) {
    try {
      URL location=FileLocator.find(TmfCoreTestPlugin.getPlugin().getBundle(),new Path(path),null);
      File test=new File(FileLocator.toFileURL(location).toURI());
      TmfTraceStub trace=new TmfTraceStub(test.getPath(),true);
      fTrace=trace;
    }
 catch (    URISyntaxException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return fTrace;
}","private ITmfTrace[] setupTrace(String path){
  if (fTrace == null) {
    fTrace=new ITmfTrace[1];
    try {
      URL location=FileLocator.find(TmfCoreTestPlugin.getPlugin().getBundle(),new Path(path),null);
      File test=new File(FileLocator.toFileURL(location).toURI());
      TmfTraceStub trace=new TmfTraceStub(test.getPath(),true);
      fTrace[0]=trace;
    }
 catch (    URISyntaxException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return fTrace;
}",0.9662027833001988
92967,"/** 
 * Method to convert a JniEvent into a LttngEvent
 * @param jniEvent        The JniEvent to convert into LttngEvent
 * @param isParsingNeeded A boolean value telling if the event should be parsed or not.
 * @return  The converted LttngEvent
 * @see org.eclipse.linuxtools.org.eclipse.linuxtools.lttng.jni.JniEvent
 * @see org.eclipse.linuxtools.lttng.event.LttngEvent
 */
public LttngEvent convertJniEventToTmf(JniEvent jniEvent,boolean isParsingNeeded){
  eventTimestamp.setValue(jniEvent.getEventTime().getTime());
  eventSource.setSourceId(jniEvent.requestEventSource());
  eventType=traceTypes.get(EventTypeKey.getEventTypeKey(jniEvent));
  eventReference.setValue(jniEvent.getParentTracefile().getTracefilePath());
  eventReference.setTracepath(this.getName());
  eventContent.emptyContent();
  currentLttngEvent.setType(eventType);
  currentLttngEvent.updateJniEventReference(jniEvent);
  if (isParsingNeeded == true) {
    eventContent.getFields();
  }
  return currentLttngEvent;
}","/** 
 * Method to convert a JniEvent into a LttngEvent
 * @param jniEvent        The JniEvent to convert into LttngEvent
 * @param isParsingNeeded A boolean value telling if the event should be parsed or not.
 * @return  The converted LttngEvent
 * @see org.eclipse.linuxtools.org.eclipse.linuxtools.lttng.jni.JniEvent
 * @see org.eclipse.linuxtools.lttng.event.LttngEvent
 */
public LttngEvent convertJniEventToTmf(JniEvent jniEvent,boolean isParsingNeeded){
  if (uniqueEvent == true) {
    eventTimestamp.setValue(jniEvent.getEventTime().getTime());
    eventSource.setSourceId(jniEvent.requestEventSource());
    eventType=traceTypes.get(EventTypeKey.getEventTypeKey(jniEvent));
    eventReference.setValue(jniEvent.getParentTracefile().getTracefilePath());
    eventReference.setTracepath(this.getName());
    eventContent.emptyContent();
    currentLttngEvent.setType(eventType);
    currentLttngEvent.updateJniEventReference(jniEvent);
    if (isParsingNeeded == true) {
      eventContent.getFields();
    }
    return currentLttngEvent;
  }
 else {
    return convertJniEventToTmfMultipleEventEvilFix(jniEvent);
  }
}",0.9377358490566038
92968,"/** 
 * @return
 */
public LTTngTraceNode[] getTraces(){
  return (LTTngTraceNode[])fChildren.toArray();
}","/** 
 * @return
 */
public LTTngTraceNode[] getTraces(){
  LTTngTraceNode[] result=(LTTngTraceNode[])Array.newInstance(LTTngTraceNode.class,fChildren.size());
  return fChildren.toArray(result);
}",0.6754966887417219
92969,"public boolean isEnabled(){
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null)   return false;
  ISelection selection=window.getActivePage().getSelection(ProjectView.ID);
  if (selection instanceof StructuredSelection) {
    Object element=((StructuredSelection)selection).getFirstElement();
    if (element instanceof ILTTngProjectTreeNode) {
      ILTTngProjectTreeNode node=(ILTTngProjectTreeNode)element;
      while (node != null && !(node instanceof LTTngProjectRoot)) {
        node=node.getParent();
      }
      fProjectRoot=(node instanceof LTTngProjectRoot) ? (LTTngProjectRoot)node : null;
    }
  }
  return (fProjectRoot != null);
}","public boolean isEnabled(){
  IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (window == null)   return false;
  IWorkbenchPart part=window.getActivePage().getActivePart();
  if (!(part instanceof ProjectView))   return false;
  fProjectRoot=((ProjectView)part).getRoot();
  return (fProjectRoot != null);
}",0.3653846153846153
92970,"public void testParseFieldByIdFunctions(){
  JniEvent testEvent=prepareEventToTest();
  assertNotNull(""String_Node_Str"",testEvent.parseFieldById(0));
  testEvent.readNextEvent();
  assertNotNull(""String_Node_Str"",testEvent.parseFieldById(chosenPositionOfFieldsFirstEvent));
  assertEquals(""String_Node_Str"",contentOfFieldsFirstEvent,testEvent.parseFieldById(chosenPositionOfFieldsFirstEvent));
  assertEquals(""String_Node_Str"",contentOfFieldsFirstEvent,testEvent.parseFieldByName(chosenNameOfFieldsFirstEvent));
  testEvent.readNextEvent();
  assertNotNull(""String_Node_Str"",testEvent.parseFieldById(chosenPositionOfFieldsSecondEvent));
  assertEquals(""String_Node_Str"",contentOfFieldsSecondEvent,testEvent.parseFieldById(chosenPositionOfFieldsSecondEvent));
  assertEquals(""String_Node_Str"",contentOfFieldsSecondEvent,testEvent.parseFieldByName(chosenNameOfFieldsSecondEvent));
  testEvent.seekToTime(new JniTime(timestampToSeekTest1));
  testEvent.readNextEvent();
  assertNotNull(""String_Node_Str"",testEvent.parseFieldById(chosenPositionOfFieldsAfterSeekEvent));
  assertEquals(""String_Node_Str"",contentOfFieldsThirdEvent,testEvent.parseFieldById(chosenPositionOfFieldsAfterSeekEvent));
  assertEquals(""String_Node_Str"",contentOfFieldsThirdEvent,testEvent.parseFieldByName(chosenNameOfFieldsThirdEvent));
  testEvent.seekToTime(new JniTime(firstEventTimestamp));
  testEvent.readNextEvent();
  assertNotNull(""String_Node_Str"",testEvent.parseFieldById(chosenPositionOfFieldsFirstEvent));
  assertEquals(""String_Node_Str"",contentOfFieldsFirstEvent,testEvent.parseFieldById(chosenPositionOfFieldsFirstEvent));
  assertEquals(""String_Node_Str"",contentOfFieldsFirstEvent,testEvent.parseFieldByName(chosenNameOfFieldsFirstEvent));
}","public void testParseFieldByIdFunctions(){
  JniEvent testEvent=prepareEventToTest();
  assertNotNull(""String_Node_Str"",testEvent.parseFieldById(0));
  testEvent.readNextEvent();
  assertNotNull(""String_Node_Str"",testEvent.parseFieldById(chosenPositionOfFieldsFirstEvent));
  assertEquals(""String_Node_Str"",contentOfFieldsFirstEvent,testEvent.parseFieldById(chosenPositionOfFieldsFirstEvent));
  assertEquals(""String_Node_Str"",contentOfFieldsFirstEvent,testEvent.parseFieldByName(chosenNameOfFieldsFirstEvent));
  testEvent.readNextEvent();
  assertNotNull(""String_Node_Str"",testEvent.parseFieldById(chosenPositionOfFieldsSecondEvent));
  assertEquals(""String_Node_Str"",contentOfFieldsSecondEvent,testEvent.parseFieldById(chosenPositionOfFieldsSecondEvent).toString());
  assertEquals(""String_Node_Str"",contentOfFieldsSecondEvent,testEvent.parseFieldByName(chosenNameOfFieldsSecondEvent).toString());
  testEvent.seekToTime(new JniTime(timestampToSeekTest1));
  testEvent.readNextEvent();
  assertNotNull(""String_Node_Str"",testEvent.parseFieldById(chosenPositionOfFieldsAfterSeekEvent));
  assertEquals(""String_Node_Str"",contentOfFieldsThirdEvent,testEvent.parseFieldById(chosenPositionOfFieldsAfterSeekEvent));
  assertEquals(""String_Node_Str"",contentOfFieldsThirdEvent,testEvent.parseFieldByName(chosenNameOfFieldsThirdEvent));
  testEvent.seekToTime(new JniTime(firstEventTimestamp));
  testEvent.readNextEvent();
  assertNotNull(""String_Node_Str"",testEvent.parseFieldById(chosenPositionOfFieldsFirstEvent));
  assertEquals(""String_Node_Str"",contentOfFieldsFirstEvent,testEvent.parseFieldById(chosenPositionOfFieldsFirstEvent));
  assertEquals(""String_Node_Str"",contentOfFieldsFirstEvent,testEvent.parseFieldByName(chosenNameOfFieldsFirstEvent));
}",0.9936781609195402
92971,"public void testGetter(){
  LttngEventContent testContent=null;
  LTTngTextTrace tmpStream=null;
  LttngEvent tmpEvent=null;
  TmfTraceContext tmpContext=null;
  tmpStream=initializeEventStream();
  tmpContext=new TmfTraceContext(0L,new LttngTimestamp(0L),0);
  tmpEvent=(LttngEvent)tmpStream.getNextEvent(tmpContext);
  testContent=prepareToTest();
  assertNotSame(""String_Node_Str"",null,testContent.getFields());
  assertEquals(""String_Node_Str"",firstEventContentFirstField,testContent.getField(0).toString());
  assertEquals(""String_Node_Str"",firstEventContentFirstField,testContent.getField(firstEventContentFirstFieldName).toString());
  assertNotSame(""String_Node_Str"",null,testContent.getRawContent());
  assertTrue(""String_Node_Str"",tmpEvent.getTimestamp().getValue() == testContent.getEvent().getTimestamp().getValue());
  assertEquals(""String_Node_Str"",firstEventContentType,testContent.getType().toString());
  tmpStream=initializeEventStream();
  tmpContext=new TmfTraceContext(0L,new LttngTimestamp(0L),0);
  tmpContext=tmpStream.seekEvent(new LttngTimestamp(timestampAfterMetadata));
  tmpEvent=(LttngEvent)tmpStream.getNextEvent(tmpContext);
  tmpEvent=(LttngEvent)tmpStream.getNextEvent(tmpContext);
  testContent=tmpEvent.getContent();
  assertTrue(""String_Node_Str"",tmpEvent.getTimestamp().getValue() == testContent.getEvent().getTimestamp().getValue());
  assertEquals(""String_Node_Str"",secondEventContentType,testContent.getType().toString());
  assertNotSame(""String_Node_Str"",null,testContent.getFields());
  assertEquals(""String_Node_Str"",secondEventContentSecondField,testContent.getField(1).toString());
  assertEquals(""String_Node_Str"",secondEventContentSecondField,testContent.getField(secondEventContentSecondFieldName).toString());
  assertNotSame(""String_Node_Str"",null,testContent.getRawContent());
}","public void testGetter(){
  LttngEventContent testContent=null;
  LTTngTextTrace tmpStream=null;
  LttngEvent tmpEvent=null;
  TmfTraceContext tmpContext=null;
  tmpStream=initializeEventStream();
  tmpContext=new TmfTraceContext(0L,new LttngTimestamp(0L),0);
  tmpEvent=(LttngEvent)tmpStream.getNextEvent(tmpContext);
  testContent=prepareToTest();
  assertNotSame(""String_Node_Str"",null,testContent.getFields());
  assertNotSame(""String_Node_Str"",null,testContent.getField(0).toString());
  assertEquals(""String_Node_Str"",firstEventContentFirstField,testContent.getField(firstEventContentFirstFieldName).toString());
  assertNotSame(""String_Node_Str"",null,testContent.getRawContent());
  assertTrue(""String_Node_Str"",tmpEvent.getTimestamp().getValue() == testContent.getEvent().getTimestamp().getValue());
  assertEquals(""String_Node_Str"",firstEventContentType,testContent.getType().toString());
  tmpStream=initializeEventStream();
  tmpContext=new TmfTraceContext(0L,new LttngTimestamp(0L),0);
  tmpContext=tmpStream.seekEvent(new LttngTimestamp(timestampAfterMetadata));
  tmpEvent=(LttngEvent)tmpStream.getNextEvent(tmpContext);
  tmpEvent=(LttngEvent)tmpStream.getNextEvent(tmpContext);
  testContent=tmpEvent.getContent();
  assertTrue(""String_Node_Str"",tmpEvent.getTimestamp().getValue() == testContent.getEvent().getTimestamp().getValue());
  assertEquals(""String_Node_Str"",secondEventContentType,testContent.getType().toString());
  assertNotSame(""String_Node_Str"",null,testContent.getFields());
  assertEquals(""String_Node_Str"",secondEventContentSecondField,testContent.getField(1).toString());
  assertEquals(""String_Node_Str"",secondEventContentSecondField,testContent.getField(secondEventContentSecondFieldName).toString());
  assertNotSame(""String_Node_Str"",null,testContent.getRawContent());
}",0.9774725274725274
92972,"public void testGetter(){
  LTTngTextTrace tmpStream=initializeEventStream();
  LttngEventField testField=(LttngEventField)tmpStream.getNextEvent(new TmfTraceContext(0,new LttngTimestamp(0L),0)).getContent().getField(0);
  assertNotSame(""String_Node_Str"",null,testField);
  assertTrue(""String_Node_Str"",firstEventName.equals(testField.getId().toString()));
  assertTrue(""String_Node_Str"",firstEventValue.equals(testField.getValue().toString()));
}","public void testGetter(){
  LTTngTextTrace tmpStream=initializeEventStream();
  LttngEventField testField=(LttngEventField)tmpStream.getNextEvent(new TmfTraceContext(0,new LttngTimestamp(0L),0)).getContent().getField(0);
  assertNotSame(""String_Node_Str"",null,testField);
  assertNotSame(""String_Node_Str"",null,testField.getId());
  assertTrue(""String_Node_Str"",firstEventValue.equals(testField.getValue().toString()));
}",0.8133640552995391
92973,"public void testGetter(){
  LttngEvent testEvent=prepareToTest();
  assertEquals(""String_Node_Str"",eventTimestamp,testEvent.getTimestamp().getValue());
  assertEquals(""String_Node_Str"",eventSource,testEvent.getSource().getSourceId());
  assertEquals(""String_Node_Str"",eventReference,((String)testEvent.getReference().toString()));
  assertEquals(""String_Node_Str"",eventType,testEvent.getType().getTypeId());
  assertEquals(""String_Node_Str"",eventChannel,testEvent.getChannelName());
  assertEquals(""String_Node_Str"",eventCpu,testEvent.getCpuId());
  assertEquals(""String_Node_Str"",eventMarker,testEvent.getMarkerName());
  assertEquals(""String_Node_Str"",eventContent,testEvent.getContent().toString());
}","public void testGetter(){
  LttngEvent testEvent=prepareToTest();
  assertEquals(""String_Node_Str"",eventTimestamp,testEvent.getTimestamp().getValue());
  assertEquals(""String_Node_Str"",eventSource,testEvent.getSource().getSourceId());
  assertEquals(""String_Node_Str"",eventReference,((String)testEvent.getReference().toString()));
  assertEquals(""String_Node_Str"",eventType,testEvent.getType().getTypeId());
  assertEquals(""String_Node_Str"",eventChannel,testEvent.getChannelName());
  assertEquals(""String_Node_Str"",eventCpu,testEvent.getCpuId());
  assertEquals(""String_Node_Str"",eventMarker,testEvent.getMarkerName());
  assertNotSame(""String_Node_Str"",null,testEvent.getContent());
}",0.925179856115108
92974,"public void testConstructors(){
  LttngEvent testEvent=null;
  LttngEventContent testContent=null;
  LttngEventContent testContent2=null;
  LttngEventField[] testFields=new LttngEventField[1];
  testFields[0]=new LttngEventField(testContent2,""String_Node_Str"");
  try {
    testContent=new LttngEventContent();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testContent=new LttngEventContent(testEvent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testContent=new LttngEventContent(testEvent);
    testContent2=new LttngEventContent(testContent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","public void testConstructors(){
  LttngEvent testEvent=null;
  LttngEventContent testContent=null;
  LttngEventContent testContent2=null;
  LttngEventField[] testFields=new LttngEventField[1];
  testFields[0]=new LttngEventField(testContent2,""String_Node_Str"");
  try {
    testContent=new LttngEventContent();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testContent=new LttngEventContent(testEvent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    HashMap<String,LttngEventField> parsedContent=new HashMap<String,LttngEventField>();
    testContent=new LttngEventContent(testEvent,parsedContent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testContent=new LttngEventContent(testEvent);
    testContent2=new LttngEventContent(testContent);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.8516377649325626
92975,"private LTTngTextTrace initializeEventStream(){
  if (testStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTextTrace tmpStream=new LTTngTextTrace(testfile.getPath(),skipIndexing);
      testStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + tracepath1);
      testStream=null;
    }
  }
  return testStream;
}","private LTTngTextTrace initializeEventStream(){
  if (testStream == null) {
    try {
      URL location=FileLocator.find(LTTngCoreTestPlugin.getPlugin().getBundle(),new Path(tracepath1),null);
      File testfile=new File(FileLocator.toFileURL(location).toURI());
      LTTngTextTrace tmpStream=new LTTngTextTrace(testfile.getPath());
      testStream=tmpStream;
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + tracepath1);
      testStream=null;
    }
  }
  return testStream;
}",0.9874152952565344
92976,"private LttngEventContent prepareToTest(){
  LttngEventContent tmpEventContent=null;
  try {
    LTTngTextTrace tmpStream=initializeEventStream();
    tmpEventContent=(LttngEventContent)tmpStream.getNextEvent(new TmfTraceContext(0L,new LttngTimestamp(0L),0)).getContent();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  return tmpEventContent;
}","private LttngEventContent prepareToTest(){
  LttngEventContent tmpEventContent=null;
  try {
    testStream=null;
    LTTngTextTrace tmpStream=initializeEventStream();
    tmpEventContent=(LttngEventContent)tmpStream.getNextEvent(new TmfTraceContext(0L,new LttngTimestamp(0L),0)).getContent();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  return tmpEventContent;
}",0.9718120805369128
92977,"public void testConstructors(){
  LttngEventReference testRef=null;
  @SuppressWarnings(""String_Node_Str"") LttngEventReference testRef2=null;
  try {
    testRef=new LttngEventReference(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testRef=new LttngEventReference(""String_Node_Str"",""String_Node_Str"");
    testRef2=new LttngEventReference(testRef);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","public void testConstructors(){
  LttngEventReference testRef=null;
  @SuppressWarnings(""String_Node_Str"") LttngEventReference testRef2=null;
  try {
    testRef=new LttngEventReference(""String_Node_Str"");
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testRef=new LttngEventReference(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  try {
    testRef=new LttngEventReference(""String_Node_Str"",""String_Node_Str"");
    testRef2=new LttngEventReference(testRef);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.8835489833641405
92978,"@Override public TmfTraceContext seekLocation(Object location){
  if (location == null) {
    location=0L;
  }
  TmfTraceContext tmpTraceContext=new TmfTraceContext(nbCharRead,(LttngTimestamp)currentLttngEvent.getTimestamp(),0L);
  Long previousCharRead=nbCharRead;
  Long previousTimestamp=currentLttngEvent.getTimestamp().getValue();
  Long tmploc=(Long)location;
  if (showDebug == true) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + (LttngTimestamp)currentLttngEvent.getTimestamp());
    System.out.println(""String_Node_Str"" + nbCharRead);
    System.out.println(""String_Node_Str"" + location);
    System.out.println();
  }
  if (tmploc < nbCharRead) {
    skipToPosition(tmploc);
  }
  if (tmploc > nbCharRead) {
    while (tmploc > nbCharRead) {
      previousCharRead=nbCharRead;
      previousTimestamp=currentLttngEvent.getTimestamp().getValue();
      getNextEvent(tmpTraceContext);
    }
  }
  tmpTraceContext.setTimestamp(new LttngTimestamp(previousTimestamp));
  tmpTraceContext.setLocation(previousCharRead);
  return tmpTraceContext;
}","public TmfTraceContext seekLocation(Object location){
  if (location == null) {
    location=0L;
  }
  TmfTraceContext tmpTraceContext=new TmfTraceContext(nbCharRead,(LttngTimestamp)currentLttngEvent.getTimestamp(),0L);
  Long previousCharRead=nbCharRead;
  Long previousTimestamp=currentLttngEvent.getTimestamp().getValue();
  Long tmploc=(Long)location;
  if (showDebug == true) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + (LttngTimestamp)currentLttngEvent.getTimestamp());
    System.out.println(""String_Node_Str"" + nbCharRead);
    System.out.println(""String_Node_Str"" + location);
    System.out.println();
  }
  if (tmploc < nbCharRead) {
    skipToPosition(tmploc);
  }
  if (tmploc > nbCharRead) {
    while (tmploc > nbCharRead) {
      previousCharRead=nbCharRead;
      previousTimestamp=currentLttngEvent.getTimestamp().getValue();
      getNextEvent(tmpTraceContext);
    }
  }
  tmpTraceContext.setTimestamp(new LttngTimestamp(previousTimestamp));
  tmpTraceContext.setLocation(previousCharRead);
  return tmpTraceContext;
}",0.9954001839926404
92979,"public TmfTraceContext seekLocation(Object location){
  if (location == null) {
    location=0L;
  }
  TmfTraceContext tmpTraceContext=new TmfTraceContext(nbCharRead,(LttngTimestamp)currentLttngEvent.getTimestamp(),0L);
  Long previousCharRead=nbCharRead;
  Long previousTimestamp=currentLttngEvent.getTimestamp().getValue();
  Long tmploc=(Long)location;
  if (showDebug == true) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + (LttngTimestamp)currentLttngEvent.getTimestamp());
    System.out.println(""String_Node_Str"" + nbCharRead);
    System.out.println(""String_Node_Str"" + location);
    System.out.println();
  }
  if (tmploc < nbCharRead) {
    skipToPosition(tmploc);
  }
  if (tmploc > nbCharRead) {
    while (tmploc > nbCharRead) {
      previousCharRead=nbCharRead;
      previousTimestamp=currentLttngEvent.getTimestamp().getValue();
      getNextEvent(tmpTraceContext);
    }
  }
  tmpTraceContext.setTimestamp(new LttngTimestamp(previousTimestamp));
  tmpTraceContext.setLocation(previousCharRead);
  return tmpTraceContext;
}","@Override public TmfTraceContext seekLocation(Object location){
  if (location == null) {
    location=0L;
  }
  TmfTraceContext tmpTraceContext=new TmfTraceContext(nbCharRead,(LttngTimestamp)currentLttngEvent.getTimestamp(),0L);
  Long previousCharRead=nbCharRead;
  Long previousTimestamp=currentLttngEvent.getTimestamp().getValue();
  Long tmploc=(Long)location;
  if (showDebug == true) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + (LttngTimestamp)currentLttngEvent.getTimestamp());
    System.out.println(""String_Node_Str"" + nbCharRead);
    System.out.println(""String_Node_Str"" + location);
    System.out.println();
  }
  if (tmploc < nbCharRead) {
    skipToPosition(tmploc);
  }
  if (tmploc > nbCharRead) {
    while (tmploc > nbCharRead) {
      previousCharRead=nbCharRead;
      previousTimestamp=currentLttngEvent.getTimestamp().getValue();
      getNextEvent(tmpTraceContext);
    }
  }
  tmpTraceContext.setTimestamp(new LttngTimestamp(previousTimestamp));
  tmpTraceContext.setLocation(previousCharRead);
  return tmpTraceContext;
}",0.9954001839926404
92980,"@Override public TmfEvent getNextEvent(TmfTraceContext context){
  String tmpContent=null;
  int tmpCurIndex=0;
  int tmpPrevIndex=0;
  String tracefile=""String_Node_Str"";
  long tmpCpu=0;
  String marker=""String_Node_Str"";
  long tmpSecond=0;
  long tmpNanosecond=0;
  String parsedPayload=""String_Node_Str"";
  String markerName=""String_Node_Str"";
  Object payload=""String_Node_Str"";
  HashMap<String,LttngEventField> fieldsMap=null;
  LttngEvent returnedEvent=null;
  try {
    tmpContent=br.readLine();
    if (tmpContent != null) {
      nbCharRead+=(tmpContent.length() + 1);
      if ((currentLttngEvent != null) && (currentLttngEvent.getContent().getRawContent() != null)) {
        currentLttngEvent.getContent().emptyContent();
      }
      eventSource.setSourceId(""String_Node_Str"");
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      if (tmpCurIndex < 0) {
        if (showDebug == true) {
          System.out.println(""String_Node_Str"");
          System.out.println();
        }
        return returnedEvent;
      }
      tracefile=tmpContent.substring(tmpPrevIndex,tmpCurIndex).trim();
      tmpPrevIndex=tmpCurIndex;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      marker=tmpContent.substring(tmpPrevIndex + 1,tmpCurIndex).trim();
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpSecond=Long.parseLong(tmpContent.substring(tmpPrevIndex,tmpCurIndex).trim());
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpNanosecond=Long.parseLong(tmpContent.substring(tmpPrevIndex,tmpCurIndex).trim());
      eventTimestamp.setValue((tmpSecond * 1000000000) + tmpNanosecond);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      String fullTracePath=tmpContent.substring(tmpPrevIndex,tmpCurIndex).trim();
      eventReference.setValue(fullTracePath);
      String traceName=fullTracePath.substring(fullTracePath.lastIndexOf(""String_Node_Str"") + 1).trim();
      eventReference.setTracepath(traceName);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpPrevIndex=tmpCurIndex + 2;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpCpu=Long.parseLong(tmpContent.substring(tmpPrevIndex,tmpCurIndex).trim());
      if (cpuNumber < (tmpCpu + 1)) {
        cpuNumber=(int)(tmpCpu + 1);
      }
      int tmpIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      if (tmpIndex != -1) {
        tmpPrevIndex=tmpCurIndex + 1;
        tmpCurIndex=tmpIndex;
        tmpPrevIndex=tmpCurIndex + 1;
        tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
        parsedPayload=tmpContent.substring(tmpPrevIndex,tmpCurIndex).trim();
        boolean isDone=false;
        int tmpIndexBegin=0;
        int tmpIndexEqual=0;
        int tmpIndexEnd=0;
        fieldsMap=new HashMap<String,LttngEventField>();
        while (isDone == false) {
          tmpIndexEqual=parsedPayload.indexOf(""String_Node_Str"",(int)tmpIndexBegin);
          tmpIndexEnd=parsedPayload.indexOf(""String_Node_Str"",(int)tmpIndexEqual);
          if (tmpIndexEnd == -1) {
            tmpIndexEnd=parsedPayload.length();
            isDone=true;
          }
          markerName=parsedPayload.substring((int)tmpIndexBegin,(int)tmpIndexEqual - 1).trim();
          payload=((String)parsedPayload.substring((int)tmpIndexEqual + 1,(int)tmpIndexEnd)).replace(""String_Node_Str"",""String_Node_Str"").trim();
          try {
            payload=Long.parseLong((String)payload);
          }
 catch (          NumberFormatException e) {
          }
          LttngEventField tmpField=new LttngEventField(eventContent,markerName,payload);
          fieldsMap.put(markerName,tmpField);
          tmpIndexBegin=tmpIndexEnd + 1;
        }
        eventContent=new TextLttngEventContent(currentLttngEvent,fieldsMap);
        String tmpTypeKey=tracefile + ""String_Node_Str"" + tmpCpu+ ""String_Node_Str""+ marker;
        if (traceTypes.get(tmpTypeKey) == null) {
          traceTypes.put(tmpTypeKey,new LttngEventType(tracefile,tmpCpu,marker,fieldsMap.keySet().toArray(new String[fieldsMap.size()])));
        }
        currentLttngEvent.setContent(eventContent);
        currentLttngEvent.setType(traceTypes.get(tmpTypeKey));
      }
      context.setTimestamp(eventTimestamp);
      context.setLocation(nbCharRead);
      returnedEvent=currentLttngEvent;
    }
 else     if (showDebug == true) {
      System.out.println(""String_Node_Str"");
      System.out.println();
    }
  }
 catch (  Exception e) {
    if (tmpContent != null) {
      System.out.println(""String_Node_Str"" + nbCharRead);
      System.out.println(""String_Node_Str"" + tmpContent);
    }
    tmpContent=null;
    e.printStackTrace();
  }
  return returnedEvent;
}","@Override public TmfEvent getNextEvent(TmfTraceContext context){
  String tmpContent=null;
  int tmpCurIndex=0;
  int tmpPrevIndex=0;
  String tracefile=""String_Node_Str"";
  long tmpCpu=0;
  String marker=""String_Node_Str"";
  long tmpSecond=0;
  long tmpNanosecond=0;
  String parsedPayload=""String_Node_Str"";
  String markerName=""String_Node_Str"";
  Object payload=""String_Node_Str"";
  HashMap<String,LttngEventField> fieldsMap=null;
  LttngEvent returnedEvent=null;
  try {
    tmpContent=br.readLine();
    if (tmpContent != null) {
      nbCharRead+=(tmpContent.length() + 1);
      if ((currentLttngEvent != null) && (currentLttngEvent.getContent().getRawContent() != null)) {
        currentLttngEvent.getContent().emptyContent();
      }
      eventSource.setSourceId(""String_Node_Str"");
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      if (tmpCurIndex < 0) {
        if (showDebug == true) {
          System.out.println(""String_Node_Str"");
          System.out.println();
        }
        return returnedEvent;
      }
      tracefile=tmpContent.substring(tmpPrevIndex,tmpCurIndex).trim();
      tmpPrevIndex=tmpCurIndex;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      marker=tmpContent.substring(tmpPrevIndex + 1,tmpCurIndex).trim();
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpSecond=Long.parseLong(tmpContent.substring(tmpPrevIndex,tmpCurIndex).trim());
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpNanosecond=Long.parseLong(tmpContent.substring(tmpPrevIndex,tmpCurIndex).trim());
      eventTimestamp.setValue((tmpSecond * 1000000000) + tmpNanosecond);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      String fullTracePath=tmpContent.substring(tmpPrevIndex,tmpCurIndex).trim();
      eventReference.setValue(fullTracePath);
      String traceName=fullTracePath.substring(fullTracePath.lastIndexOf(""String_Node_Str"") + 1).trim();
      eventReference.setTracepath(traceName);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpPrevIndex=tmpCurIndex + 1;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpPrevIndex=tmpCurIndex + 2;
      tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      tmpCpu=Long.parseLong(tmpContent.substring(tmpPrevIndex,tmpCurIndex).trim());
      if (cpuNumber < (tmpCpu + 1)) {
        cpuNumber=(int)(tmpCpu + 1);
      }
      int tmpIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
      if (tmpIndex != -1) {
        tmpPrevIndex=tmpCurIndex + 1;
        tmpCurIndex=tmpIndex;
        tmpPrevIndex=tmpCurIndex + 1;
        tmpCurIndex=tmpContent.indexOf(""String_Node_Str"",tmpPrevIndex);
        parsedPayload=tmpContent.substring(tmpPrevIndex,tmpCurIndex).trim();
        boolean isDone=false;
        int tmpIndexBegin=0;
        int tmpIndexEqual=0;
        int tmpIndexEnd=0;
        fieldsMap=new HashMap<String,LttngEventField>();
        while (isDone == false) {
          tmpIndexEqual=parsedPayload.indexOf(""String_Node_Str"",(int)tmpIndexBegin);
          tmpIndexEnd=parsedPayload.indexOf(""String_Node_Str"",(int)tmpIndexEqual);
          if (tmpIndexEnd == -1) {
            tmpIndexEnd=parsedPayload.length();
            isDone=true;
          }
          markerName=parsedPayload.substring((int)tmpIndexBegin,(int)tmpIndexEqual - 1).trim();
          payload=((String)parsedPayload.substring((int)tmpIndexEqual + 1,(int)tmpIndexEnd)).replace(""String_Node_Str"",""String_Node_Str"").trim();
          try {
            payload=Long.parseLong((String)payload);
          }
 catch (          NumberFormatException e) {
          }
          LttngEventField tmpField=new LttngEventField(eventContent,markerName,payload);
          fieldsMap.put(markerName,tmpField);
          tmpIndexBegin=tmpIndexEnd + 1;
        }
      }
 else {
        fieldsMap=new HashMap<String,LttngEventField>();
        markerName=""String_Node_Str"";
        payload=""String_Node_Str"";
        LttngEventField tmpField=new LttngEventField(eventContent,markerName,payload);
        fieldsMap.put(markerName,tmpField);
      }
      eventContent=new TextLttngEventContent(currentLttngEvent,fieldsMap);
      String tmpTypeKey=tracefile + ""String_Node_Str"" + tmpCpu+ ""String_Node_Str""+ marker;
      if (traceTypes.get(tmpTypeKey) == null) {
        traceTypes.put(tmpTypeKey,new LttngEventType(tracefile,tmpCpu,marker,fieldsMap.keySet().toArray(new String[fieldsMap.size()])));
      }
      currentLttngEvent.setContent(eventContent);
      currentLttngEvent.setType(traceTypes.get(tmpTypeKey));
      context.setTimestamp(eventTimestamp);
      context.setLocation(nbCharRead);
      returnedEvent=currentLttngEvent;
    }
 else     if (showDebug == true) {
      System.out.println(""String_Node_Str"");
      System.out.println();
      returnedEvent=null;
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + nbCharRead);
    if (tmpContent != null) {
      System.out.println(""String_Node_Str"" + tmpContent);
    }
    tmpContent=null;
    e.printStackTrace();
    returnedEvent=null;
  }
  return returnedEvent;
}",0.9599451067844584
92981,"public TmfEvent peekEvent(TmfTraceContext context){
  TmfTraceContext ctx=new TmfTraceContext(context);
  return getNextEvent(ctx);
}","public TmfEvent peekEvent(TmfTraceContext context){
  TmfTraceContext ctx=new TmfTraceContext(context);
  TmfEvent event=getNextEvent(ctx);
  seekLocation(context.location);
  return event;
}",0.7962962962962963
92982,"static public synchronized void dispatchSignal(Object signal){
  Class<?> signalClass=signal.getClass();
  Map<Object,List<Method>> listeners=new HashMap<Object,List<Method>>();
  listeners.clear();
  for (  Map.Entry<Object,Method[]> entry : fListeners.entrySet()) {
    List<Method> matchingMethods=new ArrayList<Method>();
    for (    Method method : entry.getValue()) {
      if (method.getParameterTypes()[0].isAssignableFrom(signalClass)) {
        matchingMethods.add(method);
      }
    }
    if (!matchingMethods.isEmpty()) {
      listeners.put(entry.getKey(),matchingMethods);
    }
  }
  for (  Map.Entry<Object,List<Method>> entry : listeners.entrySet()) {
    for (    Method method : entry.getValue()) {
      getInstance().dispatch(method,entry.getKey(),signal);
    }
  }
}","/** 
 * Invokes the handling methods that expect this signal. The list of handlers is built on-the-fly to allow for the dynamic creation/deletion of signal handlers. Since the number of signal handlers shouldn't be too high, this is not a big performance issue to pay for the flexibility.
 * @param signal
 */
static public synchronized void dispatchSignal(Object signal){
  Class<?> signalClass=signal.getClass();
  Map<Object,List<Method>> listeners=new HashMap<Object,List<Method>>();
  listeners.clear();
  for (  Map.Entry<Object,Method[]> entry : fListeners.entrySet()) {
    List<Method> matchingMethods=new ArrayList<Method>();
    for (    Method method : entry.getValue()) {
      if (method.getParameterTypes()[0].isAssignableFrom(signalClass)) {
        matchingMethods.add(method);
      }
    }
    if (!matchingMethods.isEmpty()) {
      listeners.put(entry.getKey(),matchingMethods);
    }
  }
  for (  Map.Entry<Object,List<Method>> entry : listeners.entrySet()) {
    for (    Method method : entry.getValue()) {
      try {
        method.invoke(entry.getKey(),new Object[]{signal});
      }
 catch (      IllegalArgumentException e) {
        e.printStackTrace();
      }
catch (      IllegalAccessException e) {
        e.printStackTrace();
      }
catch (      InvocationTargetException e) {
        e.printStackTrace();
      }
    }
  }
}",0.6889507892293407
92983,"private synchronized void notifyListeners(){
  TmfSignalManager.dispatchSignal(new TmfStreamUpdatedSignal(this,this));
}","private void notifyListeners(){
  TmfSignalManager.dispatchSignal(new TmfStreamUpdatedSignal(this,this));
}",0.9427312775330396
92984,public void removeWidgetTimeScaleSelectionListner(ITmfTimeScaleSelectionListener listener);,public void removeWidgetTimeScaleSelectionListner(ITmfTimeTimeScaleSelectionListener listener);,0.978494623655914
92985,public void addWidgetTimeScaleSelectionListner(ITmfTimeScaleSelectionListener listener);,public void addWidgetTimeScaleSelectionListner(ITmfTimeTimeScaleSelectionListener listener);,0.9777777777777776
92986,"/** 
 * Provides the image icon for a given Event or Trace e.g. customize to use different icons according to specific event /state combination
 * @param obj
 * @return
 */
public Image getItemImage(Object obj){
  return null;
}","/** 
 * Provides the image icon for a given Event or Trace e.g. customize to use different icons according to specific event /state combination
 * @param obj
 * @return
 */
public Image getItemImage(Object obj){
  if (obj instanceof ITmfTimeAnalysisEntry) {
    List<TimeEvent> list=((ITmfTimeAnalysisEntry)obj).getTraceEvents();
    if (null != list && list.size() > 0)     obj=list.get(list.size() - 1);
 else     if (((ITmfTimeAnalysisEntry)obj).getStopTime() > 0)     return getImage(IMG_THREAD_STOPPED);
 else     return getImage(IMG_THREAD_RUNNING);
  }
  if (obj instanceof TimeEvent) {
    return getImage(IMG_THREAD_RUNNING);
  }
  return null;
}",0.4915062287655719
92987,"public static Test suite(){
  TestSuite ats=new TestSuite(""String_Node_Str"");
  File[] testDirs=STJunitUtils.getTestDirs(""String_Node_Str"",""String_Node_Str"" + GMON_DIRECTORY_SUFFIX);
  for (  File testDir : testDirs) {
    final File logFile=new File(testDir,GMON_OUTPUT_FILE);
    final File binaryFile=new File(testDir,GMON_BINARY_FILE);
    final File parserRefFile=new File(testDir,""String_Node_Str"");
    final File parserDumpFile=new File(testDir,""String_Node_Str"");
    ats.addTest(new TestCase(testDir.getName() + ""String_Node_Str""){
      public void runTest() throws Throwable {
        testProcessGmonFile(logFile,binaryFile,parserRefFile,parserRefFile);
      }
    }
);
  }
  return ats;
}","public static Test suite(){
  TestSuite ats=new TestSuite(""String_Node_Str"");
  File[] testDirs=STJunitUtils.getTestDirs(""String_Node_Str"",""String_Node_Str"" + GMON_DIRECTORY_SUFFIX);
  for (  File testDir : testDirs) {
    final File logFile=new File(testDir,GMON_OUTPUT_FILE);
    final File binaryFile=new File(testDir,GMON_BINARY_FILE);
    final File parserRefFile=new File(testDir,""String_Node_Str"");
    final File parserDumpFile=new File(testDir,""String_Node_Str"");
    ats.addTest(new TestCase(testDir.getName() + ""String_Node_Str""){
      public void runTest() throws Throwable {
        testProcessGmonFile(logFile,binaryFile,parserRefFile,parserDumpFile);
      }
    }
);
  }
  return ats;
}",0.995017793594306
92988,"public static void testProcessGmonFile(File gmonFile,File binaryFile,File parserRefFile,File parserDumpFile) throws Exception {
  IBinaryObject binary=STSymbolManager.sharedInstance.getBinaryObject(binaryFile.getAbsolutePath());
  final GmonDecoder gmondecoder=new GmonDecoder(binary,new PrintStream(parserRefFile));
  gmondecoder.setShouldDump(true);
  gmondecoder.read(gmonFile.getAbsolutePath());
  STJunitUtils.compareIgnoreEOL(parserDumpFile.getAbsolutePath(),parserRefFile.getAbsolutePath(),true);
}","public static void testProcessGmonFile(File gmonFile,File binaryFile,File parserRefFile,File parserDumpFile) throws Exception {
  IBinaryObject binary=STSymbolManager.sharedInstance.getBinaryObject(binaryFile.getAbsolutePath());
  final GmonDecoder gmondecoder=new GmonDecoder(binary,new PrintStream(parserDumpFile));
  gmondecoder.setShouldDump(true);
  gmondecoder.read(gmonFile.getAbsolutePath());
  STJunitUtils.compareIgnoreEOL(parserDumpFile.getAbsolutePath(),parserRefFile.getAbsolutePath(),true);
}",0.993076162215628
92989,"public void runTest() throws Throwable {
  testProcessGmonFile(logFile,binaryFile,parserRefFile,parserRefFile);
}","public void runTest() throws Throwable {
  testProcessGmonFile(logFile,binaryFile,parserRefFile,parserDumpFile);
}",0.9691629955947136
92990,"/** 
 * Kick off creating the UI model from the data model. Meant to  be called from UI code. The refreshModel() method is called for  the child elements from their constructor.
 */
public void refreshModel(){
  OpModelEvent dataModelEvents[]=getModelDataEvents();
  if (dataModelEvents == null || dataModelEvents.length == 0) {
    _rootError=UiModelError.NO_SAMPLES_ERROR;
  }
 else {
    _events=new UiModelEvent[dataModelEvents.length];
    for (int i=0; i < dataModelEvents.length; i++) {
      _events[i]=new UiModelEvent(dataModelEvents[i]);
    }
  }
}","/** 
 * Kick off creating the UI model from the data model. Meant to  be called from UI code. The refreshModel() method is called for  the child elements from their constructor.
 */
public void refreshModel(){
  OpModelEvent dataModelEvents[]=getModelDataEvents();
  if (dataModelEvents == null || dataModelEvents.length == 0) {
    _rootError=UiModelError.NO_SAMPLES_ERROR;
    _events=null;
  }
 else {
    _rootError=null;
    _events=new UiModelEvent[dataModelEvents.length];
    for (int i=0; i < dataModelEvents.length; i++) {
      _events[i]=new UiModelEvent(dataModelEvents[i]);
    }
  }
}",0.9663503019844694
92991,"@Override public void run(){
  boolean defaultSessionExists=false;
  UiModelRoot modelRoot=UiModelRoot.getDefault();
  if (modelRoot.hasChildren()) {
    IUiModelElement[] events=modelRoot.getChildren();
    for (    IUiModelElement e : events) {
      IUiModelElement[] sessions=e.getChildren();
      for (      IUiModelElement s : sessions) {
        if (((UiModelSession)s).isDefaultSession()) {
          defaultSessionExists=true;
          break;
        }
      }
      if (defaultSessionExists)       break;
    }
  }
  if (defaultSessionExists) {
    InputDialog dialog=new InputDialog(OprofileUiPlugin.getActiveWorkbenchShell(),OprofileUiMessages.getString(""String_Node_Str""),OprofileUiMessages.getString(""String_Node_Str""),OprofileUiMessages.getString(""String_Node_Str""),new SaveSessionValidator());
    int result=dialog.open();
    if (result == Window.OK) {
      try {
        OprofileCorePlugin.getDefault().getOpcontrolProvider().saveSession(dialog.getValue());
        OprofileUiPlugin.getDefault().getOprofileView().refreshView();
      }
 catch (      OpcontrolException oe) {
        OprofileCorePlugin.showErrorDialog(""String_Node_Str"",oe);
      }
    }
  }
 else {
    MessageDialog.openError(OprofileUiPlugin.getActiveWorkbenchShell(),OprofileUiMessages.getString(""String_Node_Str""),OprofileUiMessages.getString(""String_Node_Str""));
  }
}","@Override public void run(){
  boolean defaultSessionExists=false;
  UiModelRoot modelRoot=UiModelRoot.getDefault();
  if (modelRoot.hasChildren()) {
    IUiModelElement[] events=modelRoot.getChildren();
    for (    IUiModelElement e : events) {
      if (e instanceof UiModelError)       break;
      IUiModelElement[] sessions=e.getChildren();
      for (      IUiModelElement s : sessions) {
        if (((UiModelSession)s).isDefaultSession()) {
          defaultSessionExists=true;
          break;
        }
      }
      if (defaultSessionExists)       break;
    }
  }
  if (defaultSessionExists) {
    InputDialog dialog=new InputDialog(OprofileUiPlugin.getActiveWorkbenchShell(),OprofileUiMessages.getString(""String_Node_Str""),OprofileUiMessages.getString(""String_Node_Str""),OprofileUiMessages.getString(""String_Node_Str""),new SaveSessionValidator());
    int result=dialog.open();
    if (result == Window.OK) {
      try {
        OprofileCorePlugin.getDefault().getOpcontrolProvider().saveSession(dialog.getValue());
        OprofileUiPlugin.getDefault().getOprofileView().refreshView();
      }
 catch (      OpcontrolException oe) {
        OprofileCorePlugin.showErrorDialog(""String_Node_Str"",oe);
      }
    }
  }
 else {
    MessageDialog.openError(OprofileUiPlugin.getActiveWorkbenchShell(),OprofileUiMessages.getString(""String_Node_Str""),OprofileUiMessages.getString(""String_Node_Str""));
  }
}",0.9820014398848091
92992,"private static void _initializeOprofileCore(){
  _info=OpInfo.getInfo();
}","private static void _initializeOprofileCore(){
  _info=OpInfo.getInfo();
  if (_info == null) {
    throw new ExceptionInInitializerError(OprofileProperties.getString(""String_Node_Str""));
  }
}",0.5543071161048689
92993,"/** 
 * Return all of Oprofile's generic information.
 * @return a class containing the information
 */
public static OpInfo getInfo(){
  OpInfo info=new OpInfo();
  try {
    IRunnableWithProgress opxml=OprofileCorePlugin.getDefault().getOpxmlProvider().info(info);
    opxml.run(null);
  }
 catch (  InvocationTargetException e) {
  }
catch (  InterruptedException e) {
  }
catch (  OpxmlException e) {
    OprofileCorePlugin.showErrorDialog(""String_Node_Str"",e);
  }
  return info;
}","/** 
 * Return all of Oprofile's generic information.
 * @return a class containing the information
 */
public static OpInfo getInfo(){
  OpInfo info=new OpInfo();
  try {
    OpInfoRunner opxml=(OpInfoRunner)OprofileCorePlugin.getDefault().getOpxmlProvider().info(info);
    boolean ret=opxml.run0(null);
    if (ret == false)     info=null;
  }
 catch (  InvocationTargetException e) {
  }
catch (  InterruptedException e) {
  }
catch (  OpxmlException e) {
    OprofileCorePlugin.showErrorDialog(""String_Node_Str"",e);
  }
  return info;
}",0.7458617332035054
92994,"public IRunnableWithProgress info(final OpInfo info){
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      OpxmlRunner runner=new OpxmlRunner(_pathToOpxml);
      String[] args=new String[]{OpxmlConstants.OPXML_INFO};
      runner.run(args,info);
    }
  }
;
  return runnable;
}","public IRunnableWithProgress info(final OpInfo info){
  return new OpInfoRunner(info);
}",0.3353783231083844
92995,"/** 
 * Runs opxml with the given arguments.
 * @param args the arguments to pass to opxml
 * @param callData any callData to pass to the processor
 * @return boolean indicating the success/failure of opxml
 * @throws OpxmlException 
 */
public boolean run(String[] args,Object callData){
  XMLReader reader=null;
  _handler=OprofileSAXHandler.getInstance(callData);
  SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    reader=factory.newSAXParser().getXMLReader();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
  reader.setContentHandler(_handler);
  reader.setErrorHandler(_handler);
  String[] cmdArray=new String[args.length + 1];
  cmdArray[0]=_pathToOpxml;
  System.arraycopy(args,0,cmdArray,1,args.length);
  try {
    Process p=Runtime.getRuntime().exec(cmdArray);
    BufferedReader bi=new BufferedReader(new InputStreamReader(p.getInputStream()));
    reader.parse(new InputSource(bi));
    if (p.waitFor() != 0) {
      return false;
    }
    return true;
  }
 catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
    OprofileCorePlugin.showErrorDialog(""String_Node_Str"",null);
  }
  return false;
}","/** 
 * Runs opxml with the given arguments.
 * @param args the arguments to pass to opxml
 * @param callData any callData to pass to the processor
 * @return boolean indicating the success/failure of opxml
 * @throws OpxmlException 
 */
public boolean run(String[] args,Object callData){
  XMLReader reader=null;
  _handler=OprofileSAXHandler.getInstance(callData);
  SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    reader=factory.newSAXParser().getXMLReader();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
  reader.setContentHandler(_handler);
  reader.setErrorHandler(_handler);
  String[] cmdArray=new String[args.length + 1];
  cmdArray[0]=_pathToOpxml;
  System.arraycopy(args,0,cmdArray,1,args.length);
  try {
    Process p=Runtime.getRuntime().exec(cmdArray);
    BufferedReader bi=new BufferedReader(new InputStreamReader(p.getInputStream()));
    reader.parse(new InputSource(bi));
    int ret=p.waitFor();
    if (ret != 0) {
      return false;
    }
    return true;
  }
 catch (  SAXException e) {
    OprofileCorePlugin.showErrorDialog(""String_Node_Str"",null);
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
    OprofileCorePlugin.showErrorDialog(""String_Node_Str"",null);
  }
  return false;
}",0.9624521072796934
92996,"public void testParse(){
  assertNull(_uiModelRoot2.getLabelImage());
  assertNull(_uiModelRoot2.getParent());
  assertNull(_uiModelRoot2.getLabelText());
  assertFalse(_uiModelRoot2.hasChildren());
  assertNull(_uiModelRoot2.getChildren());
  assertNull(_uiModelRoot.getLabelImage());
  assertNull(_uiModelRoot.getParent());
  assertNull(_uiModelRoot.getLabelText());
  assertTrue(_uiModelRoot.hasChildren());
  IUiModelElement events[]=_uiModelRoot.getChildren();
  assertNotNull(events);
  assertEquals(3,events.length);
  assertNotNull(events[0]);
  assertNotNull(events[1]);
  assertNotNull(events[2]);
  assertEquals(TestingOpModelRoot.NAME_E1,events[0].toString());
  assertEquals(TestingOpModelRoot.NAME_E1,events[0].getLabelText());
  assertTrue(events[0].hasChildren());
  assertNull(events[0].getParent());
  assertNotNull(events[0].getLabelImage());
  assertEquals(TestingOpModelRoot.NAME_E2,events[1].toString());
  assertEquals(TestingOpModelRoot.NAME_E2,events[1].getLabelText());
  assertTrue(events[1].hasChildren());
  assertNull(events[1].getParent());
  assertNotNull(events[1].getLabelImage());
  assertEquals(""String_Node_Str"",events[2].toString());
  assertEquals(""String_Node_Str"",events[2].getLabelText());
  assertFalse(events[2].hasChildren());
  assertNull(events[2].getParent());
  assertNotNull(events[2].getLabelImage());
  IUiModelElement[] e1_sessions=events[0].getChildren(), e2_sessions=events[1].getChildren();
  assertNotNull(e1_sessions);
  assertNotNull(e2_sessions);
  assertEquals(1,e1_sessions.length);
  assertEquals(4,e2_sessions.length);
  assertNotNull(e1_sessions[0]);
  assertNotNull(e2_sessions[0]);
  assertNotNull(e2_sessions[1]);
  assertNotNull(e2_sessions[2]);
  assertNotNull(e2_sessions[3]);
  assertEquals(TestingOpModelRoot.NAME_E1_S1,e1_sessions[0].toString());
  assertEquals(TestingOpModelRoot.NAME_E1_S1,e1_sessions[0].getLabelText());
  assertFalse(((UiModelSession)e1_sessions[0]).isDefaultSession());
  assertTrue(e1_sessions[0].hasChildren());
  assertEquals(events[0],e1_sessions[0].getParent());
  assertNotNull(e1_sessions[0].getLabelImage());
  assertEquals(TestingOpModelRoot.NAME_E2_S1,e2_sessions[0].toString());
  assertEquals(TestingOpModelRoot.NAME_E2_S1,e2_sessions[0].getLabelText());
  assertFalse(((UiModelSession)e2_sessions[0]).isDefaultSession());
  assertTrue(e2_sessions[0].hasChildren());
  assertEquals(events[1],e2_sessions[0].getParent());
  assertNotNull(e2_sessions[0].getLabelImage());
  assertEquals(TestingOpModelRoot.NAME_E2_S2,e2_sessions[1].toString());
  assertEquals(TestingOpModelRoot.NAME_E2_S2,e2_sessions[1].getLabelText());
  assertFalse(((UiModelSession)e2_sessions[1]).isDefaultSession());
  assertTrue(e2_sessions[1].hasChildren());
  assertEquals(events[1],e2_sessions[1].getParent());
  assertNotNull(e2_sessions[1].getLabelImage());
  assertEquals(TestingOpModelRoot.NAME_E2_S3,e2_sessions[2].toString());
  assertEquals(TestingOpModelRoot.NAME_E2_S3,e2_sessions[2].getLabelText());
  assertFalse(((UiModelSession)e2_sessions[2]).isDefaultSession());
  assertTrue(e2_sessions[2].hasChildren());
  assertEquals(events[1],e2_sessions[2].getParent());
  assertNotNull(e2_sessions[2].getLabelImage());
  assertEquals(TestingOpModelRoot.NAME_E2_S4,e2_sessions[3].toString());
  assertEquals(TestingOpModelRoot.NAME_E2_S4,e2_sessions[3].getLabelText());
  assertFalse(((UiModelSession)e2_sessions[3]).isDefaultSession());
  assertFalse(e2_sessions[3].hasChildren());
  assertEquals(events[1],e2_sessions[3].getParent());
  assertNotNull(e2_sessions[3].getLabelImage());
  IUiModelElement[] e1_s1_images=e1_sessions[0].getChildren(), e2_s1_images=e2_sessions[0].getChildren(), e2_s2_images=e2_sessions[1].getChildren(), e2_s3_images=e2_sessions[2].getChildren(), e2_s4_images=e2_sessions[3].getChildren();
  assertNotNull(e1_s1_images);
  assertNotNull(e2_s1_images);
  assertNotNull(e2_s2_images);
  assertNotNull(e2_s3_images);
  assertNotNull(e2_s4_images);
  assertEquals(2,e1_s1_images.length);
  assertEquals(2,e2_s1_images.length);
  assertEquals(1,e2_s2_images.length);
  assertEquals(1,e2_s3_images.length);
  assertEquals(1,e2_s4_images.length);
  assertNotNull(e1_s1_images[0]);
  assertNotNull(e1_s1_images[1]);
  assertNotNull(e2_s1_images[0]);
  assertNotNull(e2_s1_images[1]);
  assertNotNull(e2_s2_images[0]);
  assertNotNull(e2_s3_images[0]);
  assertNull(e2_s4_images[0]);
  assertNotNull(e1_s1_images[0].toString());
  assertNotNull(e1_s1_images[0].getLabelText());
  assertTrue(e1_s1_images[0].hasChildren());
  assertEquals(e1_sessions[0],e1_s1_images[0].getParent());
  assertNotNull(e1_s1_images[0].getLabelImage());
  assertNotNull(e1_s1_images[1].toString());
  assertNotNull(e1_s1_images[1].getLabelText());
  assertTrue(e1_s1_images[1].hasChildren());
  assertEquals(e1_sessions[0],e1_s1_images[1].getParent());
  assertNotNull(e1_s1_images[1].getLabelImage());
  assertNotNull(e2_s1_images[0].toString());
  assertNotNull(e2_s1_images[0].getLabelText());
  assertTrue(e2_s1_images[0].hasChildren());
  assertEquals(e2_sessions[0],e2_s1_images[0].getParent());
  assertNotNull(e2_s1_images[0].getLabelImage());
  assertNotNull(e2_s1_images[1].toString());
  assertNotNull(e2_s1_images[1].getLabelText());
  assertTrue(e2_s1_images[1].hasChildren());
  assertEquals(e2_sessions[0],e2_s1_images[1].getParent());
  assertNotNull(e2_s1_images[1].getLabelImage());
  assertNotNull(e2_s2_images[0].toString());
  assertNotNull(e2_s2_images[0].getLabelText());
  assertTrue(e2_s2_images[0].hasChildren());
  assertEquals(e2_sessions[1],e2_s2_images[0].getParent());
  assertNotNull(e2_s2_images[0].getLabelImage());
  assertNotNull(e2_s3_images[0].toString());
  assertNotNull(e2_s3_images[0].getLabelText());
  assertFalse(e2_s3_images[0].hasChildren());
  assertEquals(e2_sessions[2],e2_s3_images[0].getParent());
  assertNotNull(e2_s3_images[0].getLabelImage());
  IUiModelElement[] e1_s1_i1_symbols=e1_s1_images[0].getChildren(), e1_s1_i2_depimages=e1_s1_images[1].getChildren(), e2_s1_i1_symbols=e2_s1_images[0].getChildren(), e2_s1_i2_depimages=e2_s1_images[1].getChildren(), e2_s2_i1_symbols=e2_s2_images[0].getChildren();
  assertNotNull(e1_s1_i1_symbols);
  assertNotNull(e1_s1_i2_depimages);
  assertNotNull(e2_s1_i1_symbols);
  assertNotNull(e2_s1_i2_depimages);
  assertNotNull(e2_s2_i1_symbols);
  assertEquals(2,e1_s1_i1_symbols.length);
  assertEquals(4,e1_s1_i2_depimages.length);
  assertEquals(2,e2_s1_i1_symbols.length);
  assertEquals(4,e2_s1_i2_depimages.length);
  assertEquals(2,e2_s2_i1_symbols.length);
  assertNotNull(e1_s1_i1_symbols[0]);
  assertNotNull(e1_s1_i1_symbols[1]);
  assertNotNull(e1_s1_i2_depimages[0]);
  assertNotNull(e1_s1_i2_depimages[1]);
  assertNotNull(e1_s1_i2_depimages[2]);
  assertNotNull(e1_s1_i2_depimages[3]);
  assertNotNull(e2_s1_i1_symbols[0]);
  assertNotNull(e2_s1_i1_symbols[1]);
  assertNotNull(e2_s1_i2_depimages[0]);
  assertNotNull(e2_s1_i2_depimages[1]);
  assertNotNull(e2_s1_i2_depimages[2]);
  assertNotNull(e2_s1_i2_depimages[3]);
  assertNotNull(e2_s2_i1_symbols[0]);
  assertNotNull(e2_s2_i1_symbols[1]);
  assertNotNull(e1_s1_i1_symbols[0].toString());
  assertNotNull(e1_s1_i1_symbols[0].getLabelText());
  assertEquals(TestPlugin.SYMBOL1_FILENAME,((UiModelSymbol)e1_s1_i1_symbols[0]).getFileName());
  assertTrue(e1_s1_i1_symbols[0].hasChildren());
  assertEquals(e1_s1_images[0],e1_s1_i1_symbols[0].getParent());
  assertNotNull(e1_s1_i1_symbols[0].getLabelImage());
  assertNotNull(e1_s1_i1_symbols[1].toString());
  assertNotNull(e1_s1_i1_symbols[1].getLabelText());
  assertEquals(TestPlugin.SYMBOL2_FILENAME,((UiModelSymbol)e1_s1_i1_symbols[1]).getFileName());
  assertTrue(e1_s1_i1_symbols[1].hasChildren());
  assertEquals(e1_s1_images[0],e1_s1_i1_symbols[1].getParent());
  assertNotNull(e1_s1_i1_symbols[1].getLabelImage());
  assertNotNull(e1_s1_i2_depimages[0].toString());
  assertNotNull(e1_s1_i2_depimages[0].getLabelText());
  assertFalse(e1_s1_i2_depimages[0].hasChildren());
  assertEquals(e1_s1_images[1],e1_s1_i2_depimages[0].getParent());
  assertNotNull(e1_s1_i2_depimages[0].getLabelImage());
  assertNotNull(e1_s1_i2_depimages[1].toString());
  assertNotNull(e1_s1_i2_depimages[1].getLabelText());
  assertTrue(e1_s1_i2_depimages[1].hasChildren());
  assertEquals(e1_s1_images[1],e1_s1_i2_depimages[1].getParent());
  assertNotNull(e1_s1_i2_depimages[1].getLabelImage());
  assertNotNull(e1_s1_i2_depimages[2].toString());
  assertNotNull(e1_s1_i2_depimages[2].getLabelText());
  assertFalse(e1_s1_i2_depimages[2].hasChildren());
  assertEquals(e1_s1_images[1],e1_s1_i2_depimages[2].getParent());
  assertNotNull(e1_s1_i2_depimages[2].getLabelImage());
  assertNotNull(e1_s1_i2_depimages[3].toString());
  assertNotNull(e1_s1_i2_depimages[3].getLabelText());
  assertTrue(e1_s1_i2_depimages[3].hasChildren());
  assertEquals(e1_s1_images[1],e1_s1_i2_depimages[3].getParent());
  assertNotNull(e1_s1_i2_depimages[3].getLabelImage());
  assertNotNull(e2_s1_i1_symbols[0].toString());
  assertNotNull(e2_s1_i1_symbols[0].getLabelText());
  assertEquals(TestPlugin.SYMBOL1_FILENAME,((UiModelSymbol)e2_s1_i1_symbols[0]).getFileName());
  assertTrue(e2_s1_i1_symbols[0].hasChildren());
  assertEquals(e2_s1_images[0],e2_s1_i1_symbols[0].getParent());
  assertNotNull(e2_s1_i1_symbols[0].getLabelImage());
  assertNotNull(e2_s1_i1_symbols[1].toString());
  assertNotNull(e2_s1_i1_symbols[1].getLabelText());
  assertEquals(TestPlugin.SYMBOL2_FILENAME,((UiModelSymbol)e2_s1_i1_symbols[1]).getFileName());
  assertTrue(e2_s1_i1_symbols[1].hasChildren());
  assertEquals(e2_s1_images[0],e2_s1_i1_symbols[1].getParent());
  assertNotNull(e2_s1_i1_symbols[1].getLabelImage());
  assertNotNull(e2_s1_i2_depimages[0].toString());
  assertNotNull(e2_s1_i2_depimages[0].getLabelText());
  assertFalse(e2_s1_i2_depimages[0].hasChildren());
  assertEquals(e2_s1_images[1],e2_s1_i2_depimages[0].getParent());
  assertNotNull(e2_s1_i2_depimages[0].getLabelImage());
  assertNotNull(e2_s1_i2_depimages[1].toString());
  assertNotNull(e2_s1_i2_depimages[1].getLabelText());
  assertTrue(e2_s1_i2_depimages[1].hasChildren());
  assertEquals(e2_s1_images[1],e2_s1_i2_depimages[1].getParent());
  assertNotNull(e2_s1_i2_depimages[1].getLabelImage());
  assertNotNull(e2_s1_i2_depimages[2].toString());
  assertNotNull(e2_s1_i2_depimages[2].getLabelText());
  assertFalse(e2_s1_i2_depimages[2].hasChildren());
  assertEquals(e2_s1_images[1],e2_s1_i2_depimages[2].getParent());
  assertNotNull(e2_s1_i2_depimages[2].getLabelImage());
  assertNotNull(e2_s1_i2_depimages[3].toString());
  assertNotNull(e2_s1_i2_depimages[3].getLabelText());
  assertTrue(e2_s1_i2_depimages[3].hasChildren());
  assertEquals(e2_s1_images[1],e2_s1_i2_depimages[3].getParent());
  assertNotNull(e2_s1_i2_depimages[3].getLabelImage());
  assertNotNull(e2_s2_i1_symbols[0].toString());
  assertNotNull(e2_s2_i1_symbols[0].getLabelText());
  assertEquals(TestPlugin.SYMBOL1_FILENAME,((UiModelSymbol)e2_s2_i1_symbols[0]).getFileName());
  assertTrue(e2_s2_i1_symbols[0].hasChildren());
  assertEquals(e2_s2_images[0],e2_s2_i1_symbols[0].getParent());
  assertNotNull(e2_s2_i1_symbols[0].getLabelImage());
  assertNotNull(e2_s2_i1_symbols[1].toString());
  assertNotNull(e2_s2_i1_symbols[1].getLabelText());
  assertEquals(TestPlugin.SYMBOL2_FILENAME,((UiModelSymbol)e2_s2_i1_symbols[1]).getFileName());
  assertTrue(e2_s2_i1_symbols[1].hasChildren());
  assertEquals(e2_s2_images[0],e2_s2_i1_symbols[1].getParent());
  assertNotNull(e2_s2_i1_symbols[1].getLabelImage());
  IUiModelElement[] e1_s1_i2_dep1_symbols=e1_s1_i2_depimages[0].getChildren(), e1_s1_i2_dep2_symbols=e1_s1_i2_depimages[1].getChildren(), e1_s1_i2_dep3_symbols=e1_s1_i2_depimages[2].getChildren(), e1_s1_i2_dep4_symbols=e1_s1_i2_depimages[3].getChildren(), e2_s1_i2_dep1_symbols=e2_s1_i2_depimages[0].getChildren(), e2_s1_i2_dep2_symbols=e2_s1_i2_depimages[1].getChildren(), e2_s1_i2_dep3_symbols=e2_s1_i2_depimages[2].getChildren(), e2_s1_i2_dep4_symbols=e2_s1_i2_depimages[3].getChildren();
  assertNull(e1_s1_i2_dep1_symbols);
  assertNotNull(e1_s1_i2_dep2_symbols);
  assertNull(e1_s1_i2_dep3_symbols);
  assertNotNull(e1_s1_i2_dep4_symbols);
  assertNull(e2_s1_i2_dep1_symbols);
  assertNotNull(e2_s1_i2_dep2_symbols);
  assertNull(e2_s1_i2_dep3_symbols);
  assertNotNull(e2_s1_i2_dep4_symbols);
  assertEquals(2,e1_s1_i2_dep2_symbols.length);
  assertEquals(2,e1_s1_i2_dep4_symbols.length);
  assertEquals(2,e2_s1_i2_dep2_symbols.length);
  assertEquals(2,e2_s1_i2_dep4_symbols.length);
  assertNotNull(e1_s1_i2_dep2_symbols[0]);
  assertNotNull(e1_s1_i2_dep2_symbols[1]);
  assertNotNull(e1_s1_i2_dep4_symbols[0]);
  assertNotNull(e1_s1_i2_dep4_symbols[1]);
  assertNotNull(e2_s1_i2_dep2_symbols[0]);
  assertNotNull(e2_s1_i2_dep2_symbols[1]);
  assertNotNull(e2_s1_i2_dep4_symbols[0]);
  assertNotNull(e2_s1_i2_dep4_symbols[1]);
  assertNotNull(e1_s1_i2_dep2_symbols[0].toString());
  assertNotNull(e1_s1_i2_dep2_symbols[0].getLabelText());
  assertEquals(TestPlugin.DEP2_SYMBOL1_FILENAME,((UiModelSymbol)e1_s1_i2_dep2_symbols[0]).getFileName());
  assertFalse(e1_s1_i2_dep2_symbols[0].hasChildren());
  assertEquals(e1_s1_i2_depimages[1],e1_s1_i2_dep2_symbols[0].getParent());
  assertNotNull(e1_s1_i2_dep2_symbols[0].getLabelImage());
  assertNotNull(e1_s1_i2_dep2_symbols[1].toString());
  assertNotNull(e1_s1_i2_dep2_symbols[1].getLabelText());
  assertEquals(TestPlugin.DEP2_SYMBOL2_FILENAME,((UiModelSymbol)e1_s1_i2_dep2_symbols[1]).getFileName());
  assertFalse(e1_s1_i2_dep2_symbols[1].hasChildren());
  assertEquals(e1_s1_i2_depimages[1],e1_s1_i2_dep2_symbols[1].getParent());
  assertNotNull(e1_s1_i2_dep2_symbols[1].getLabelImage());
  assertNotNull(e1_s1_i2_dep4_symbols[0].toString());
  assertNotNull(e1_s1_i2_dep4_symbols[0].getLabelText());
  assertEquals(TestPlugin.DEP4_SYMBOL_FILENAME,((UiModelSymbol)e1_s1_i2_dep4_symbols[0]).getFileName());
  assertFalse(e1_s1_i2_dep4_symbols[0].hasChildren());
  assertEquals(e1_s1_i2_depimages[3],e1_s1_i2_dep4_symbols[0].getParent());
  assertNotNull(e1_s1_i2_dep4_symbols[0].getLabelImage());
  assertNotNull(e1_s1_i2_dep4_symbols[1].toString());
  assertNotNull(e1_s1_i2_dep4_symbols[1].getLabelText());
  assertEquals(TestPlugin.DEP4_SYMBOL_FILENAME,((UiModelSymbol)e1_s1_i2_dep4_symbols[1]).getFileName());
  assertFalse(e1_s1_i2_dep4_symbols[1].hasChildren());
  assertEquals(e1_s1_i2_depimages[3],e1_s1_i2_dep4_symbols[1].getParent());
  assertNotNull(e1_s1_i2_dep4_symbols[1].getLabelImage());
  assertNotNull(e2_s1_i2_dep2_symbols[0].toString());
  assertNotNull(e2_s1_i2_dep2_symbols[0].getLabelText());
  assertEquals(TestPlugin.DEP2_SYMBOL1_FILENAME,((UiModelSymbol)e2_s1_i2_dep2_symbols[0]).getFileName());
  assertFalse(e2_s1_i2_dep2_symbols[0].hasChildren());
  assertEquals(e2_s1_i2_depimages[1],e2_s1_i2_dep2_symbols[0].getParent());
  assertNotNull(e2_s1_i2_dep2_symbols[0].getLabelImage());
  assertNotNull(e2_s1_i2_dep2_symbols[1].toString());
  assertNotNull(e2_s1_i2_dep2_symbols[1].getLabelText());
  assertEquals(TestPlugin.DEP2_SYMBOL2_FILENAME,((UiModelSymbol)e2_s1_i2_dep2_symbols[1]).getFileName());
  assertFalse(e2_s1_i2_dep2_symbols[1].hasChildren());
  assertEquals(e2_s1_i2_depimages[1],e2_s1_i2_dep2_symbols[1].getParent());
  assertNotNull(e2_s1_i2_dep2_symbols[1].getLabelImage());
  assertNotNull(e2_s1_i2_dep4_symbols[0].toString());
  assertNotNull(e2_s1_i2_dep4_symbols[0].getLabelText());
  assertEquals(TestPlugin.DEP4_SYMBOL_FILENAME,((UiModelSymbol)e2_s1_i2_dep4_symbols[0]).getFileName());
  assertFalse(e2_s1_i2_dep4_symbols[0].hasChildren());
  assertEquals(e2_s1_i2_depimages[3],e2_s1_i2_dep4_symbols[0].getParent());
  assertNotNull(e2_s1_i2_dep4_symbols[0].getLabelImage());
  assertNotNull(e2_s1_i2_dep4_symbols[1].toString());
  assertNotNull(e2_s1_i2_dep4_symbols[1].getLabelText());
  assertEquals(TestPlugin.DEP4_SYMBOL_FILENAME,((UiModelSymbol)e2_s1_i2_dep4_symbols[1]).getFileName());
  assertFalse(e2_s1_i2_dep4_symbols[1].hasChildren());
  assertEquals(e2_s1_i2_depimages[3],e2_s1_i2_dep4_symbols[1].getParent());
  assertNotNull(e2_s1_i2_dep4_symbols[1].getLabelImage());
  IUiModelElement[] e1_s1_i1_s1_samples=e1_s1_i1_symbols[0].getChildren(), e1_s1_i1_s2_samples=e1_s1_i1_symbols[1].getChildren(), e1_s1_d2_s1_samples=e1_s1_i2_dep2_symbols[0].getChildren(), e1_s1_d2_s2_samples=e1_s1_i2_dep2_symbols[1].getChildren(), e1_s1_d4_s1_samples=e1_s1_i2_dep4_symbols[0].getChildren(), e1_s1_d4_s2_samples=e1_s1_i2_dep4_symbols[1].getChildren(), e2_s1_i1_s1_samples=e2_s1_i1_symbols[0].getChildren(), e2_s1_i1_s2_samples=e2_s1_i1_symbols[1].getChildren(), e2_s1_d2_s1_samples=e2_s1_i2_dep2_symbols[0].getChildren(), e2_s1_d2_s2_samples=e2_s1_i2_dep2_symbols[1].getChildren(), e2_s1_d4_s1_samples=e2_s1_i2_dep4_symbols[0].getChildren(), e2_s1_d4_s2_samples=e2_s1_i2_dep4_symbols[1].getChildren(), e2_s2_i1_s1_samples=e2_s2_i1_symbols[0].getChildren(), e2_s2_i1_s2_samples=e2_s2_i1_symbols[1].getChildren();
  assertNotNull(e1_s1_i1_s1_samples);
  assertNotNull(e1_s1_i1_s2_samples);
  assertNotNull(e1_s1_d2_s1_samples);
  assertNotNull(e1_s1_d2_s2_samples);
  assertNotNull(e1_s1_d4_s1_samples);
  assertNotNull(e1_s1_d4_s2_samples);
  assertNotNull(e2_s1_i1_s1_samples);
  assertNotNull(e2_s1_i1_s2_samples);
  assertNotNull(e2_s1_d2_s1_samples);
  assertNotNull(e2_s1_d2_s2_samples);
  assertNotNull(e2_s1_d4_s1_samples);
  assertNotNull(e2_s1_d4_s2_samples);
  assertNotNull(e2_s2_i1_s1_samples);
  assertNotNull(e2_s2_i1_s2_samples);
  assertEquals(4,e1_s1_i1_s1_samples.length);
  assertEquals(3,e1_s1_i1_s2_samples.length);
  assertEquals(0,e1_s1_d2_s1_samples.length);
  assertEquals(0,e1_s1_d2_s2_samples.length);
  assertEquals(0,e1_s1_d4_s1_samples.length);
  assertEquals(0,e1_s1_d4_s2_samples.length);
  assertEquals(4,e2_s1_i1_s1_samples.length);
  assertEquals(3,e2_s1_i1_s2_samples.length);
  assertEquals(0,e2_s1_d2_s1_samples.length);
  assertEquals(0,e2_s1_d2_s2_samples.length);
  assertEquals(0,e2_s1_d4_s1_samples.length);
  assertEquals(0,e2_s1_d4_s2_samples.length);
  assertEquals(4,e2_s2_i1_s1_samples.length);
  assertEquals(3,e2_s2_i1_s2_samples.length);
  assertNotNull(e1_s1_i1_s1_samples[0]);
  assertNotNull(e1_s1_i1_s1_samples[1]);
  assertNotNull(e1_s1_i1_s1_samples[2]);
  assertNotNull(e1_s1_i1_s1_samples[3]);
  assertNotNull(e1_s1_i1_s2_samples[0]);
  assertNotNull(e1_s1_i1_s2_samples[1]);
  assertNotNull(e1_s1_i1_s2_samples[2]);
  assertNotNull(e2_s1_i1_s1_samples[0]);
  assertNotNull(e2_s1_i1_s1_samples[1]);
  assertNotNull(e2_s1_i1_s1_samples[2]);
  assertNotNull(e2_s1_i1_s1_samples[3]);
  assertNotNull(e2_s1_i1_s2_samples[0]);
  assertNotNull(e2_s1_i1_s2_samples[1]);
  assertNotNull(e2_s1_i1_s2_samples[2]);
  assertNotNull(e2_s2_i1_s1_samples[0]);
  assertNotNull(e2_s2_i1_s1_samples[1]);
  assertNotNull(e2_s2_i1_s1_samples[2]);
  assertNotNull(e2_s2_i1_s1_samples[3]);
  assertNotNull(e2_s2_i1_s2_samples[0]);
  assertNotNull(e2_s2_i1_s2_samples[1]);
  assertNotNull(e2_s2_i1_s2_samples[2]);
  assertNotNull(e1_s1_i1_s1_samples[0].toString());
  assertNotNull(e1_s1_i1_s1_samples[0].getLabelText());
  assertEquals(42,((UiModelSample)e1_s1_i1_s1_samples[0]).getLine());
  assertEquals((double)0.6341,((UiModelSample)e1_s1_i1_s1_samples[0]).getCountPercentage(),(double)0.0001);
  assertNull(e1_s1_i1_s1_samples[0].getChildren());
  assertFalse(e1_s1_i1_s1_samples[0].hasChildren());
  assertEquals(e1_s1_i1_symbols[0],e1_s1_i1_s1_samples[0].getParent());
  assertNotNull(e1_s1_i1_s1_samples[0].getLabelImage());
  assertNotNull(e1_s1_i1_s1_samples[1].toString());
  assertNotNull(e1_s1_i1_s1_samples[1].getLabelText());
  assertEquals(36,((UiModelSample)e1_s1_i1_s1_samples[1]).getLine());
  assertEquals((double)0.1951,((UiModelSample)e1_s1_i1_s1_samples[1]).getCountPercentage(),(double)0.0001);
  assertNull(e1_s1_i1_s1_samples[1].getChildren());
  assertFalse(e1_s1_i1_s1_samples[1].hasChildren());
  assertEquals(e1_s1_i1_symbols[0],e1_s1_i1_s1_samples[1].getParent());
  assertNotNull(e1_s1_i1_s1_samples[1].getLabelImage());
  assertNotNull(e1_s1_i1_s1_samples[2].toString());
  assertNotNull(e1_s1_i1_s1_samples[2].getLabelText());
  assertEquals(31,((UiModelSample)e1_s1_i1_s1_samples[2]).getLine());
  assertEquals((double)0.0488,((UiModelSample)e1_s1_i1_s1_samples[2]).getCountPercentage(),(double)0.0001);
  assertNull(e1_s1_i1_s1_samples[2].getChildren());
  assertFalse(e1_s1_i1_s1_samples[2].hasChildren());
  assertEquals(e1_s1_i1_symbols[0],e1_s1_i1_s1_samples[2].getParent());
  assertNotNull(e1_s1_i1_s1_samples[2].getLabelImage());
  assertNotNull(e1_s1_i1_s1_samples[3].toString());
  assertNotNull(e1_s1_i1_s1_samples[3].getLabelText());
  assertEquals(39,((UiModelSample)e1_s1_i1_s1_samples[3]).getLine());
  assertEquals((double)0.0,((UiModelSample)e1_s1_i1_s1_samples[3]).getCountPercentage(),(double)0.0001);
  assertNull(e1_s1_i1_s1_samples[3].getChildren());
  assertFalse(e1_s1_i1_s1_samples[3].hasChildren());
  assertEquals(e1_s1_i1_symbols[0],e1_s1_i1_s1_samples[3].getParent());
  assertNotNull(e1_s1_i1_s1_samples[3].getLabelImage());
  assertNotNull(e1_s1_i1_s2_samples[0].toString());
  assertNotNull(e1_s1_i1_s2_samples[0].getLabelText());
  assertEquals(94,((UiModelSample)e1_s1_i1_s2_samples[0]).getLine());
  assertEquals((double)0.0976,((UiModelSample)e1_s1_i1_s2_samples[0]).getCountPercentage(),(double)0.0001);
  assertNull(e1_s1_i1_s2_samples[0].getChildren());
  assertFalse(e1_s1_i1_s2_samples[0].hasChildren());
  assertEquals(e1_s1_i1_symbols[1],e1_s1_i1_s2_samples[0].getParent());
  assertNotNull(e1_s1_i1_s2_samples[0].getLabelImage());
  assertNotNull(e1_s1_i1_s2_samples[1].toString());
  assertNotNull(e1_s1_i1_s2_samples[1].getLabelText());
  assertEquals(12,((UiModelSample)e1_s1_i1_s2_samples[1]).getLine());
  assertEquals((double)0.0,((UiModelSample)e1_s1_i1_s2_samples[1]).getCountPercentage(),(double)0.0001);
  assertNull(e1_s1_i1_s2_samples[1].getChildren());
  assertFalse(e1_s1_i1_s2_samples[1].hasChildren());
  assertEquals(e1_s1_i1_symbols[1],e1_s1_i1_s2_samples[1].getParent());
  assertNotNull(e1_s1_i1_s2_samples[1].getLabelImage());
  assertNotNull(e1_s1_i1_s2_samples[2].toString());
  assertNotNull(e1_s1_i1_s2_samples[2].getLabelText());
  assertEquals(55,((UiModelSample)e1_s1_i1_s2_samples[2]).getLine());
  assertEquals((double)0.0,((UiModelSample)e1_s1_i1_s2_samples[2]).getCountPercentage(),(double)0.0001);
  assertNull(e1_s1_i1_s2_samples[2].getChildren());
  assertFalse(e1_s1_i1_s2_samples[2].hasChildren());
  assertEquals(e1_s1_i1_symbols[1],e1_s1_i1_s2_samples[2].getParent());
  assertNotNull(e1_s1_i1_s2_samples[2].getLabelImage());
  assertNotNull(e2_s1_i1_s1_samples[0].toString());
  assertNotNull(e2_s1_i1_s1_samples[0].getLabelText());
  assertEquals(42,((UiModelSample)e2_s1_i1_s1_samples[0]).getLine());
  assertEquals((double)0.6341,((UiModelSample)e2_s1_i1_s1_samples[0]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s1_i1_s1_samples[0].getChildren());
  assertFalse(e2_s1_i1_s1_samples[0].hasChildren());
  assertEquals(e2_s1_i1_symbols[0],e2_s1_i1_s1_samples[0].getParent());
  assertNotNull(e2_s1_i1_s1_samples[0].getLabelImage());
  assertNotNull(e2_s1_i1_s1_samples[1].toString());
  assertNotNull(e2_s1_i1_s1_samples[1].getLabelText());
  assertEquals(36,((UiModelSample)e2_s1_i1_s1_samples[1]).getLine());
  assertEquals((double)0.1951,((UiModelSample)e2_s1_i1_s1_samples[1]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s1_i1_s1_samples[1].getChildren());
  assertFalse(e2_s1_i1_s1_samples[1].hasChildren());
  assertEquals(e2_s1_i1_symbols[0],e2_s1_i1_s1_samples[1].getParent());
  assertNotNull(e2_s1_i1_s1_samples[1].getLabelImage());
  assertNotNull(e2_s1_i1_s1_samples[2].toString());
  assertNotNull(e2_s1_i1_s1_samples[2].getLabelText());
  assertEquals(31,((UiModelSample)e2_s1_i1_s1_samples[2]).getLine());
  assertEquals((double)0.0488,((UiModelSample)e2_s1_i1_s1_samples[2]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s1_i1_s1_samples[2].getChildren());
  assertFalse(e2_s1_i1_s1_samples[2].hasChildren());
  assertEquals(e2_s1_i1_symbols[0],e2_s1_i1_s1_samples[2].getParent());
  assertNotNull(e2_s1_i1_s1_samples[2].getLabelImage());
  assertNotNull(e2_s1_i1_s1_samples[3].toString());
  assertNotNull(e2_s1_i1_s1_samples[3].getLabelText());
  assertEquals(39,((UiModelSample)e2_s1_i1_s1_samples[3]).getLine());
  assertEquals((double)0.0,((UiModelSample)e2_s1_i1_s1_samples[3]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s1_i1_s1_samples[3].getChildren());
  assertFalse(e2_s1_i1_s1_samples[3].hasChildren());
  assertEquals(e2_s1_i1_symbols[0],e2_s1_i1_s1_samples[3].getParent());
  assertNotNull(e2_s1_i1_s1_samples[3].getLabelImage());
  assertNotNull(e2_s1_i1_s2_samples[0].toString());
  assertNotNull(e2_s1_i1_s2_samples[0].getLabelText());
  assertEquals(94,((UiModelSample)e2_s1_i1_s2_samples[0]).getLine());
  assertEquals((double)0.0976,((UiModelSample)e2_s1_i1_s2_samples[0]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s1_i1_s2_samples[0].getChildren());
  assertFalse(e2_s1_i1_s2_samples[0].hasChildren());
  assertEquals(e2_s1_i1_symbols[1],e2_s1_i1_s2_samples[0].getParent());
  assertNotNull(e2_s1_i1_s2_samples[0].getLabelImage());
  assertNotNull(e2_s1_i1_s2_samples[1].toString());
  assertNotNull(e2_s1_i1_s2_samples[1].getLabelText());
  assertEquals(12,((UiModelSample)e2_s1_i1_s2_samples[1]).getLine());
  assertEquals((double)0.0,((UiModelSample)e2_s1_i1_s2_samples[1]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s1_i1_s2_samples[1].getChildren());
  assertFalse(e2_s1_i1_s2_samples[1].hasChildren());
  assertEquals(e2_s1_i1_symbols[1],e2_s1_i1_s2_samples[1].getParent());
  assertNotNull(e2_s1_i1_s2_samples[1].getLabelImage());
  assertNotNull(e2_s1_i1_s2_samples[2].toString());
  assertNotNull(e2_s1_i1_s2_samples[2].getLabelText());
  assertEquals(55,((UiModelSample)e2_s1_i1_s2_samples[2]).getLine());
  assertEquals((double)0.0,((UiModelSample)e2_s1_i1_s2_samples[2]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s1_i1_s2_samples[2].getChildren());
  assertFalse(e2_s1_i1_s2_samples[2].hasChildren());
  assertEquals(e2_s1_i1_symbols[1],e2_s1_i1_s2_samples[2].getParent());
  assertNotNull(e2_s1_i1_s2_samples[2].getLabelImage());
  assertNotNull(e2_s2_i1_s1_samples[0].toString());
  assertNotNull(e2_s2_i1_s1_samples[0].getLabelText());
  assertEquals(42,((UiModelSample)e2_s2_i1_s1_samples[0]).getLine());
  assertEquals((double)0.65,((UiModelSample)e2_s2_i1_s1_samples[0]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s2_i1_s1_samples[0].getChildren());
  assertFalse(e2_s2_i1_s1_samples[0].hasChildren());
  assertEquals(e2_s2_i1_symbols[0],e2_s2_i1_s1_samples[0].getParent());
  assertNotNull(e2_s2_i1_s1_samples[0].getLabelImage());
  assertNotNull(e2_s2_i1_s1_samples[1].toString());
  assertNotNull(e2_s2_i1_s1_samples[1].getLabelText());
  assertEquals(36,((UiModelSample)e2_s2_i1_s1_samples[1]).getLine());
  assertEquals((double)0.2,((UiModelSample)e2_s2_i1_s1_samples[1]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s2_i1_s1_samples[1].getChildren());
  assertFalse(e2_s2_i1_s1_samples[1].hasChildren());
  assertEquals(e2_s2_i1_symbols[0],e2_s2_i1_s1_samples[1].getParent());
  assertNotNull(e2_s2_i1_s1_samples[1].getLabelImage());
  assertNotNull(e2_s2_i1_s1_samples[2].toString());
  assertNotNull(e2_s2_i1_s1_samples[2].getLabelText());
  assertEquals(31,((UiModelSample)e2_s2_i1_s1_samples[2]).getLine());
  assertEquals((double)0.05,((UiModelSample)e2_s2_i1_s1_samples[2]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s2_i1_s1_samples[2].getChildren());
  assertFalse(e2_s2_i1_s1_samples[2].hasChildren());
  assertEquals(e2_s2_i1_symbols[0],e2_s2_i1_s1_samples[2].getParent());
  assertNotNull(e2_s2_i1_s1_samples[2].getLabelImage());
  assertNotNull(e2_s2_i1_s1_samples[3].toString());
  assertNotNull(e2_s2_i1_s1_samples[3].getLabelText());
  assertEquals(39,((UiModelSample)e2_s2_i1_s1_samples[3]).getLine());
  assertEquals((double)0.0,((UiModelSample)e2_s2_i1_s1_samples[3]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s2_i1_s1_samples[3].getChildren());
  assertFalse(e2_s2_i1_s1_samples[3].hasChildren());
  assertEquals(e2_s2_i1_symbols[0],e2_s2_i1_s1_samples[3].getParent());
  assertNotNull(e2_s2_i1_s1_samples[3].getLabelImage());
  assertNotNull(e2_s2_i1_s2_samples[0].toString());
  assertNotNull(e2_s2_i1_s2_samples[0].getLabelText());
  assertEquals(94,((UiModelSample)e2_s2_i1_s2_samples[0]).getLine());
  assertEquals((double)0.1,((UiModelSample)e2_s2_i1_s2_samples[0]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s2_i1_s2_samples[0].getChildren());
  assertFalse(e2_s2_i1_s2_samples[0].hasChildren());
  assertEquals(e2_s2_i1_symbols[1],e2_s2_i1_s2_samples[0].getParent());
  assertNotNull(e2_s2_i1_s2_samples[0].getLabelImage());
  assertNotNull(e2_s2_i1_s2_samples[1].toString());
  assertNotNull(e2_s2_i1_s2_samples[1].getLabelText());
  assertEquals(12,((UiModelSample)e2_s2_i1_s2_samples[1]).getLine());
  assertEquals((double)0.0,((UiModelSample)e2_s2_i1_s2_samples[1]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s2_i1_s2_samples[1].getChildren());
  assertFalse(e2_s2_i1_s2_samples[1].hasChildren());
  assertEquals(e2_s2_i1_symbols[1],e2_s2_i1_s2_samples[1].getParent());
  assertNotNull(e2_s2_i1_s2_samples[1].getLabelImage());
  assertNotNull(e2_s2_i1_s2_samples[2].toString());
  assertNotNull(e2_s2_i1_s2_samples[2].getLabelText());
  assertEquals(55,((UiModelSample)e2_s2_i1_s2_samples[2]).getLine());
  assertEquals((double)0.0,((UiModelSample)e2_s2_i1_s2_samples[2]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s2_i1_s2_samples[2].getChildren());
  assertFalse(e2_s2_i1_s2_samples[2].hasChildren());
  assertEquals(e2_s2_i1_symbols[1],e2_s2_i1_s2_samples[2].getParent());
  assertNotNull(e2_s2_i1_s2_samples[2].getLabelImage());
}","public void testParse(){
  assertNull(_uiModelRoot2.getLabelImage());
  assertNull(_uiModelRoot2.getParent());
  assertNull(_uiModelRoot2.getLabelText());
  assertTrue(_uiModelRoot2.hasChildren());
  IUiModelElement r2_events[]=_uiModelRoot2.getChildren();
  assertNotNull(r2_events);
  assertEquals(1,r2_events.length);
  IUiModelElement r2_event1=r2_events[0];
  assertFalse(r2_event1.hasChildren());
  assertNull(r2_event1.getChildren());
  assertNull(r2_event1.getParent());
  assertNotNull(r2_event1.getLabelImage());
  assertNotNull(r2_event1.getLabelText());
  assertNull(_uiModelRoot.getLabelImage());
  assertNull(_uiModelRoot.getParent());
  assertNull(_uiModelRoot.getLabelText());
  assertTrue(_uiModelRoot.hasChildren());
  IUiModelElement events[]=_uiModelRoot.getChildren();
  assertNotNull(events);
  assertEquals(3,events.length);
  assertNotNull(events[0]);
  assertNotNull(events[1]);
  assertNotNull(events[2]);
  assertEquals(TestingOpModelRoot.NAME_E1,events[0].toString());
  assertEquals(TestingOpModelRoot.NAME_E1,events[0].getLabelText());
  assertTrue(events[0].hasChildren());
  assertNull(events[0].getParent());
  assertNotNull(events[0].getLabelImage());
  assertEquals(TestingOpModelRoot.NAME_E2,events[1].toString());
  assertEquals(TestingOpModelRoot.NAME_E2,events[1].getLabelText());
  assertTrue(events[1].hasChildren());
  assertNull(events[1].getParent());
  assertNotNull(events[1].getLabelImage());
  assertEquals(""String_Node_Str"",events[2].toString());
  assertEquals(""String_Node_Str"",events[2].getLabelText());
  assertFalse(events[2].hasChildren());
  assertNull(events[2].getParent());
  assertNotNull(events[2].getLabelImage());
  IUiModelElement[] e1_sessions=events[0].getChildren(), e2_sessions=events[1].getChildren();
  assertNotNull(e1_sessions);
  assertNotNull(e2_sessions);
  assertEquals(1,e1_sessions.length);
  assertEquals(4,e2_sessions.length);
  assertNotNull(e1_sessions[0]);
  assertNotNull(e2_sessions[0]);
  assertNotNull(e2_sessions[1]);
  assertNotNull(e2_sessions[2]);
  assertNotNull(e2_sessions[3]);
  assertEquals(TestingOpModelRoot.NAME_E1_S1,e1_sessions[0].toString());
  assertEquals(TestingOpModelRoot.NAME_E1_S1,e1_sessions[0].getLabelText());
  assertFalse(((UiModelSession)e1_sessions[0]).isDefaultSession());
  assertTrue(e1_sessions[0].hasChildren());
  assertEquals(events[0],e1_sessions[0].getParent());
  assertNotNull(e1_sessions[0].getLabelImage());
  assertEquals(TestingOpModelRoot.NAME_E2_S1,e2_sessions[0].toString());
  assertEquals(TestingOpModelRoot.NAME_E2_S1,e2_sessions[0].getLabelText());
  assertFalse(((UiModelSession)e2_sessions[0]).isDefaultSession());
  assertTrue(e2_sessions[0].hasChildren());
  assertEquals(events[1],e2_sessions[0].getParent());
  assertNotNull(e2_sessions[0].getLabelImage());
  assertEquals(TestingOpModelRoot.NAME_E2_S2,e2_sessions[1].toString());
  assertEquals(TestingOpModelRoot.NAME_E2_S2,e2_sessions[1].getLabelText());
  assertFalse(((UiModelSession)e2_sessions[1]).isDefaultSession());
  assertTrue(e2_sessions[1].hasChildren());
  assertEquals(events[1],e2_sessions[1].getParent());
  assertNotNull(e2_sessions[1].getLabelImage());
  assertEquals(TestingOpModelRoot.NAME_E2_S3,e2_sessions[2].toString());
  assertEquals(TestingOpModelRoot.NAME_E2_S3,e2_sessions[2].getLabelText());
  assertFalse(((UiModelSession)e2_sessions[2]).isDefaultSession());
  assertTrue(e2_sessions[2].hasChildren());
  assertEquals(events[1],e2_sessions[2].getParent());
  assertNotNull(e2_sessions[2].getLabelImage());
  assertEquals(TestingOpModelRoot.NAME_E2_S4,e2_sessions[3].toString());
  assertEquals(TestingOpModelRoot.NAME_E2_S4,e2_sessions[3].getLabelText());
  assertFalse(((UiModelSession)e2_sessions[3]).isDefaultSession());
  assertFalse(e2_sessions[3].hasChildren());
  assertEquals(events[1],e2_sessions[3].getParent());
  assertNotNull(e2_sessions[3].getLabelImage());
  IUiModelElement[] e1_s1_images=e1_sessions[0].getChildren(), e2_s1_images=e2_sessions[0].getChildren(), e2_s2_images=e2_sessions[1].getChildren(), e2_s3_images=e2_sessions[2].getChildren(), e2_s4_images=e2_sessions[3].getChildren();
  assertNotNull(e1_s1_images);
  assertNotNull(e2_s1_images);
  assertNotNull(e2_s2_images);
  assertNotNull(e2_s3_images);
  assertNotNull(e2_s4_images);
  assertEquals(2,e1_s1_images.length);
  assertEquals(2,e2_s1_images.length);
  assertEquals(1,e2_s2_images.length);
  assertEquals(1,e2_s3_images.length);
  assertEquals(1,e2_s4_images.length);
  assertNotNull(e1_s1_images[0]);
  assertNotNull(e1_s1_images[1]);
  assertNotNull(e2_s1_images[0]);
  assertNotNull(e2_s1_images[1]);
  assertNotNull(e2_s2_images[0]);
  assertNotNull(e2_s3_images[0]);
  assertNull(e2_s4_images[0]);
  assertNotNull(e1_s1_images[0].toString());
  assertNotNull(e1_s1_images[0].getLabelText());
  assertTrue(e1_s1_images[0].hasChildren());
  assertEquals(e1_sessions[0],e1_s1_images[0].getParent());
  assertNotNull(e1_s1_images[0].getLabelImage());
  assertNotNull(e1_s1_images[1].toString());
  assertNotNull(e1_s1_images[1].getLabelText());
  assertTrue(e1_s1_images[1].hasChildren());
  assertEquals(e1_sessions[0],e1_s1_images[1].getParent());
  assertNotNull(e1_s1_images[1].getLabelImage());
  assertNotNull(e2_s1_images[0].toString());
  assertNotNull(e2_s1_images[0].getLabelText());
  assertTrue(e2_s1_images[0].hasChildren());
  assertEquals(e2_sessions[0],e2_s1_images[0].getParent());
  assertNotNull(e2_s1_images[0].getLabelImage());
  assertNotNull(e2_s1_images[1].toString());
  assertNotNull(e2_s1_images[1].getLabelText());
  assertTrue(e2_s1_images[1].hasChildren());
  assertEquals(e2_sessions[0],e2_s1_images[1].getParent());
  assertNotNull(e2_s1_images[1].getLabelImage());
  assertNotNull(e2_s2_images[0].toString());
  assertNotNull(e2_s2_images[0].getLabelText());
  assertTrue(e2_s2_images[0].hasChildren());
  assertEquals(e2_sessions[1],e2_s2_images[0].getParent());
  assertNotNull(e2_s2_images[0].getLabelImage());
  assertNotNull(e2_s3_images[0].toString());
  assertNotNull(e2_s3_images[0].getLabelText());
  assertFalse(e2_s3_images[0].hasChildren());
  assertEquals(e2_sessions[2],e2_s3_images[0].getParent());
  assertNotNull(e2_s3_images[0].getLabelImage());
  IUiModelElement[] e1_s1_i1_symbols=e1_s1_images[0].getChildren(), e1_s1_i2_depimages=e1_s1_images[1].getChildren(), e2_s1_i1_symbols=e2_s1_images[0].getChildren(), e2_s1_i2_depimages=e2_s1_images[1].getChildren(), e2_s2_i1_symbols=e2_s2_images[0].getChildren();
  assertNotNull(e1_s1_i1_symbols);
  assertNotNull(e1_s1_i2_depimages);
  assertNotNull(e2_s1_i1_symbols);
  assertNotNull(e2_s1_i2_depimages);
  assertNotNull(e2_s2_i1_symbols);
  assertEquals(2,e1_s1_i1_symbols.length);
  assertEquals(4,e1_s1_i2_depimages.length);
  assertEquals(2,e2_s1_i1_symbols.length);
  assertEquals(4,e2_s1_i2_depimages.length);
  assertEquals(2,e2_s2_i1_symbols.length);
  assertNotNull(e1_s1_i1_symbols[0]);
  assertNotNull(e1_s1_i1_symbols[1]);
  assertNotNull(e1_s1_i2_depimages[0]);
  assertNotNull(e1_s1_i2_depimages[1]);
  assertNotNull(e1_s1_i2_depimages[2]);
  assertNotNull(e1_s1_i2_depimages[3]);
  assertNotNull(e2_s1_i1_symbols[0]);
  assertNotNull(e2_s1_i1_symbols[1]);
  assertNotNull(e2_s1_i2_depimages[0]);
  assertNotNull(e2_s1_i2_depimages[1]);
  assertNotNull(e2_s1_i2_depimages[2]);
  assertNotNull(e2_s1_i2_depimages[3]);
  assertNotNull(e2_s2_i1_symbols[0]);
  assertNotNull(e2_s2_i1_symbols[1]);
  assertNotNull(e1_s1_i1_symbols[0].toString());
  assertNotNull(e1_s1_i1_symbols[0].getLabelText());
  assertEquals(TestPlugin.SYMBOL1_FILENAME,((UiModelSymbol)e1_s1_i1_symbols[0]).getFileName());
  assertTrue(e1_s1_i1_symbols[0].hasChildren());
  assertEquals(e1_s1_images[0],e1_s1_i1_symbols[0].getParent());
  assertNotNull(e1_s1_i1_symbols[0].getLabelImage());
  assertNotNull(e1_s1_i1_symbols[1].toString());
  assertNotNull(e1_s1_i1_symbols[1].getLabelText());
  assertEquals(TestPlugin.SYMBOL2_FILENAME,((UiModelSymbol)e1_s1_i1_symbols[1]).getFileName());
  assertTrue(e1_s1_i1_symbols[1].hasChildren());
  assertEquals(e1_s1_images[0],e1_s1_i1_symbols[1].getParent());
  assertNotNull(e1_s1_i1_symbols[1].getLabelImage());
  assertNotNull(e1_s1_i2_depimages[0].toString());
  assertNotNull(e1_s1_i2_depimages[0].getLabelText());
  assertFalse(e1_s1_i2_depimages[0].hasChildren());
  assertEquals(e1_s1_images[1],e1_s1_i2_depimages[0].getParent());
  assertNotNull(e1_s1_i2_depimages[0].getLabelImage());
  assertNotNull(e1_s1_i2_depimages[1].toString());
  assertNotNull(e1_s1_i2_depimages[1].getLabelText());
  assertTrue(e1_s1_i2_depimages[1].hasChildren());
  assertEquals(e1_s1_images[1],e1_s1_i2_depimages[1].getParent());
  assertNotNull(e1_s1_i2_depimages[1].getLabelImage());
  assertNotNull(e1_s1_i2_depimages[2].toString());
  assertNotNull(e1_s1_i2_depimages[2].getLabelText());
  assertFalse(e1_s1_i2_depimages[2].hasChildren());
  assertEquals(e1_s1_images[1],e1_s1_i2_depimages[2].getParent());
  assertNotNull(e1_s1_i2_depimages[2].getLabelImage());
  assertNotNull(e1_s1_i2_depimages[3].toString());
  assertNotNull(e1_s1_i2_depimages[3].getLabelText());
  assertTrue(e1_s1_i2_depimages[3].hasChildren());
  assertEquals(e1_s1_images[1],e1_s1_i2_depimages[3].getParent());
  assertNotNull(e1_s1_i2_depimages[3].getLabelImage());
  assertNotNull(e2_s1_i1_symbols[0].toString());
  assertNotNull(e2_s1_i1_symbols[0].getLabelText());
  assertEquals(TestPlugin.SYMBOL1_FILENAME,((UiModelSymbol)e2_s1_i1_symbols[0]).getFileName());
  assertTrue(e2_s1_i1_symbols[0].hasChildren());
  assertEquals(e2_s1_images[0],e2_s1_i1_symbols[0].getParent());
  assertNotNull(e2_s1_i1_symbols[0].getLabelImage());
  assertNotNull(e2_s1_i1_symbols[1].toString());
  assertNotNull(e2_s1_i1_symbols[1].getLabelText());
  assertEquals(TestPlugin.SYMBOL2_FILENAME,((UiModelSymbol)e2_s1_i1_symbols[1]).getFileName());
  assertTrue(e2_s1_i1_symbols[1].hasChildren());
  assertEquals(e2_s1_images[0],e2_s1_i1_symbols[1].getParent());
  assertNotNull(e2_s1_i1_symbols[1].getLabelImage());
  assertNotNull(e2_s1_i2_depimages[0].toString());
  assertNotNull(e2_s1_i2_depimages[0].getLabelText());
  assertFalse(e2_s1_i2_depimages[0].hasChildren());
  assertEquals(e2_s1_images[1],e2_s1_i2_depimages[0].getParent());
  assertNotNull(e2_s1_i2_depimages[0].getLabelImage());
  assertNotNull(e2_s1_i2_depimages[1].toString());
  assertNotNull(e2_s1_i2_depimages[1].getLabelText());
  assertTrue(e2_s1_i2_depimages[1].hasChildren());
  assertEquals(e2_s1_images[1],e2_s1_i2_depimages[1].getParent());
  assertNotNull(e2_s1_i2_depimages[1].getLabelImage());
  assertNotNull(e2_s1_i2_depimages[2].toString());
  assertNotNull(e2_s1_i2_depimages[2].getLabelText());
  assertFalse(e2_s1_i2_depimages[2].hasChildren());
  assertEquals(e2_s1_images[1],e2_s1_i2_depimages[2].getParent());
  assertNotNull(e2_s1_i2_depimages[2].getLabelImage());
  assertNotNull(e2_s1_i2_depimages[3].toString());
  assertNotNull(e2_s1_i2_depimages[3].getLabelText());
  assertTrue(e2_s1_i2_depimages[3].hasChildren());
  assertEquals(e2_s1_images[1],e2_s1_i2_depimages[3].getParent());
  assertNotNull(e2_s1_i2_depimages[3].getLabelImage());
  assertNotNull(e2_s2_i1_symbols[0].toString());
  assertNotNull(e2_s2_i1_symbols[0].getLabelText());
  assertEquals(TestPlugin.SYMBOL1_FILENAME,((UiModelSymbol)e2_s2_i1_symbols[0]).getFileName());
  assertTrue(e2_s2_i1_symbols[0].hasChildren());
  assertEquals(e2_s2_images[0],e2_s2_i1_symbols[0].getParent());
  assertNotNull(e2_s2_i1_symbols[0].getLabelImage());
  assertNotNull(e2_s2_i1_symbols[1].toString());
  assertNotNull(e2_s2_i1_symbols[1].getLabelText());
  assertEquals(TestPlugin.SYMBOL2_FILENAME,((UiModelSymbol)e2_s2_i1_symbols[1]).getFileName());
  assertTrue(e2_s2_i1_symbols[1].hasChildren());
  assertEquals(e2_s2_images[0],e2_s2_i1_symbols[1].getParent());
  assertNotNull(e2_s2_i1_symbols[1].getLabelImage());
  IUiModelElement[] e1_s1_i2_dep1_symbols=e1_s1_i2_depimages[0].getChildren(), e1_s1_i2_dep2_symbols=e1_s1_i2_depimages[1].getChildren(), e1_s1_i2_dep3_symbols=e1_s1_i2_depimages[2].getChildren(), e1_s1_i2_dep4_symbols=e1_s1_i2_depimages[3].getChildren(), e2_s1_i2_dep1_symbols=e2_s1_i2_depimages[0].getChildren(), e2_s1_i2_dep2_symbols=e2_s1_i2_depimages[1].getChildren(), e2_s1_i2_dep3_symbols=e2_s1_i2_depimages[2].getChildren(), e2_s1_i2_dep4_symbols=e2_s1_i2_depimages[3].getChildren();
  assertNull(e1_s1_i2_dep1_symbols);
  assertNotNull(e1_s1_i2_dep2_symbols);
  assertNull(e1_s1_i2_dep3_symbols);
  assertNotNull(e1_s1_i2_dep4_symbols);
  assertNull(e2_s1_i2_dep1_symbols);
  assertNotNull(e2_s1_i2_dep2_symbols);
  assertNull(e2_s1_i2_dep3_symbols);
  assertNotNull(e2_s1_i2_dep4_symbols);
  assertEquals(2,e1_s1_i2_dep2_symbols.length);
  assertEquals(2,e1_s1_i2_dep4_symbols.length);
  assertEquals(2,e2_s1_i2_dep2_symbols.length);
  assertEquals(2,e2_s1_i2_dep4_symbols.length);
  assertNotNull(e1_s1_i2_dep2_symbols[0]);
  assertNotNull(e1_s1_i2_dep2_symbols[1]);
  assertNotNull(e1_s1_i2_dep4_symbols[0]);
  assertNotNull(e1_s1_i2_dep4_symbols[1]);
  assertNotNull(e2_s1_i2_dep2_symbols[0]);
  assertNotNull(e2_s1_i2_dep2_symbols[1]);
  assertNotNull(e2_s1_i2_dep4_symbols[0]);
  assertNotNull(e2_s1_i2_dep4_symbols[1]);
  assertNotNull(e1_s1_i2_dep2_symbols[0].toString());
  assertNotNull(e1_s1_i2_dep2_symbols[0].getLabelText());
  assertEquals(TestPlugin.DEP2_SYMBOL1_FILENAME,((UiModelSymbol)e1_s1_i2_dep2_symbols[0]).getFileName());
  assertFalse(e1_s1_i2_dep2_symbols[0].hasChildren());
  assertEquals(e1_s1_i2_depimages[1],e1_s1_i2_dep2_symbols[0].getParent());
  assertNotNull(e1_s1_i2_dep2_symbols[0].getLabelImage());
  assertNotNull(e1_s1_i2_dep2_symbols[1].toString());
  assertNotNull(e1_s1_i2_dep2_symbols[1].getLabelText());
  assertEquals(TestPlugin.DEP2_SYMBOL2_FILENAME,((UiModelSymbol)e1_s1_i2_dep2_symbols[1]).getFileName());
  assertFalse(e1_s1_i2_dep2_symbols[1].hasChildren());
  assertEquals(e1_s1_i2_depimages[1],e1_s1_i2_dep2_symbols[1].getParent());
  assertNotNull(e1_s1_i2_dep2_symbols[1].getLabelImage());
  assertNotNull(e1_s1_i2_dep4_symbols[0].toString());
  assertNotNull(e1_s1_i2_dep4_symbols[0].getLabelText());
  assertEquals(TestPlugin.DEP4_SYMBOL_FILENAME,((UiModelSymbol)e1_s1_i2_dep4_symbols[0]).getFileName());
  assertFalse(e1_s1_i2_dep4_symbols[0].hasChildren());
  assertEquals(e1_s1_i2_depimages[3],e1_s1_i2_dep4_symbols[0].getParent());
  assertNotNull(e1_s1_i2_dep4_symbols[0].getLabelImage());
  assertNotNull(e1_s1_i2_dep4_symbols[1].toString());
  assertNotNull(e1_s1_i2_dep4_symbols[1].getLabelText());
  assertEquals(TestPlugin.DEP4_SYMBOL_FILENAME,((UiModelSymbol)e1_s1_i2_dep4_symbols[1]).getFileName());
  assertFalse(e1_s1_i2_dep4_symbols[1].hasChildren());
  assertEquals(e1_s1_i2_depimages[3],e1_s1_i2_dep4_symbols[1].getParent());
  assertNotNull(e1_s1_i2_dep4_symbols[1].getLabelImage());
  assertNotNull(e2_s1_i2_dep2_symbols[0].toString());
  assertNotNull(e2_s1_i2_dep2_symbols[0].getLabelText());
  assertEquals(TestPlugin.DEP2_SYMBOL1_FILENAME,((UiModelSymbol)e2_s1_i2_dep2_symbols[0]).getFileName());
  assertFalse(e2_s1_i2_dep2_symbols[0].hasChildren());
  assertEquals(e2_s1_i2_depimages[1],e2_s1_i2_dep2_symbols[0].getParent());
  assertNotNull(e2_s1_i2_dep2_symbols[0].getLabelImage());
  assertNotNull(e2_s1_i2_dep2_symbols[1].toString());
  assertNotNull(e2_s1_i2_dep2_symbols[1].getLabelText());
  assertEquals(TestPlugin.DEP2_SYMBOL2_FILENAME,((UiModelSymbol)e2_s1_i2_dep2_symbols[1]).getFileName());
  assertFalse(e2_s1_i2_dep2_symbols[1].hasChildren());
  assertEquals(e2_s1_i2_depimages[1],e2_s1_i2_dep2_symbols[1].getParent());
  assertNotNull(e2_s1_i2_dep2_symbols[1].getLabelImage());
  assertNotNull(e2_s1_i2_dep4_symbols[0].toString());
  assertNotNull(e2_s1_i2_dep4_symbols[0].getLabelText());
  assertEquals(TestPlugin.DEP4_SYMBOL_FILENAME,((UiModelSymbol)e2_s1_i2_dep4_symbols[0]).getFileName());
  assertFalse(e2_s1_i2_dep4_symbols[0].hasChildren());
  assertEquals(e2_s1_i2_depimages[3],e2_s1_i2_dep4_symbols[0].getParent());
  assertNotNull(e2_s1_i2_dep4_symbols[0].getLabelImage());
  assertNotNull(e2_s1_i2_dep4_symbols[1].toString());
  assertNotNull(e2_s1_i2_dep4_symbols[1].getLabelText());
  assertEquals(TestPlugin.DEP4_SYMBOL_FILENAME,((UiModelSymbol)e2_s1_i2_dep4_symbols[1]).getFileName());
  assertFalse(e2_s1_i2_dep4_symbols[1].hasChildren());
  assertEquals(e2_s1_i2_depimages[3],e2_s1_i2_dep4_symbols[1].getParent());
  assertNotNull(e2_s1_i2_dep4_symbols[1].getLabelImage());
  IUiModelElement[] e1_s1_i1_s1_samples=e1_s1_i1_symbols[0].getChildren(), e1_s1_i1_s2_samples=e1_s1_i1_symbols[1].getChildren(), e1_s1_d2_s1_samples=e1_s1_i2_dep2_symbols[0].getChildren(), e1_s1_d2_s2_samples=e1_s1_i2_dep2_symbols[1].getChildren(), e1_s1_d4_s1_samples=e1_s1_i2_dep4_symbols[0].getChildren(), e1_s1_d4_s2_samples=e1_s1_i2_dep4_symbols[1].getChildren(), e2_s1_i1_s1_samples=e2_s1_i1_symbols[0].getChildren(), e2_s1_i1_s2_samples=e2_s1_i1_symbols[1].getChildren(), e2_s1_d2_s1_samples=e2_s1_i2_dep2_symbols[0].getChildren(), e2_s1_d2_s2_samples=e2_s1_i2_dep2_symbols[1].getChildren(), e2_s1_d4_s1_samples=e2_s1_i2_dep4_symbols[0].getChildren(), e2_s1_d4_s2_samples=e2_s1_i2_dep4_symbols[1].getChildren(), e2_s2_i1_s1_samples=e2_s2_i1_symbols[0].getChildren(), e2_s2_i1_s2_samples=e2_s2_i1_symbols[1].getChildren();
  assertNotNull(e1_s1_i1_s1_samples);
  assertNotNull(e1_s1_i1_s2_samples);
  assertNotNull(e1_s1_d2_s1_samples);
  assertNotNull(e1_s1_d2_s2_samples);
  assertNotNull(e1_s1_d4_s1_samples);
  assertNotNull(e1_s1_d4_s2_samples);
  assertNotNull(e2_s1_i1_s1_samples);
  assertNotNull(e2_s1_i1_s2_samples);
  assertNotNull(e2_s1_d2_s1_samples);
  assertNotNull(e2_s1_d2_s2_samples);
  assertNotNull(e2_s1_d4_s1_samples);
  assertNotNull(e2_s1_d4_s2_samples);
  assertNotNull(e2_s2_i1_s1_samples);
  assertNotNull(e2_s2_i1_s2_samples);
  assertEquals(4,e1_s1_i1_s1_samples.length);
  assertEquals(3,e1_s1_i1_s2_samples.length);
  assertEquals(0,e1_s1_d2_s1_samples.length);
  assertEquals(0,e1_s1_d2_s2_samples.length);
  assertEquals(0,e1_s1_d4_s1_samples.length);
  assertEquals(0,e1_s1_d4_s2_samples.length);
  assertEquals(4,e2_s1_i1_s1_samples.length);
  assertEquals(3,e2_s1_i1_s2_samples.length);
  assertEquals(0,e2_s1_d2_s1_samples.length);
  assertEquals(0,e2_s1_d2_s2_samples.length);
  assertEquals(0,e2_s1_d4_s1_samples.length);
  assertEquals(0,e2_s1_d4_s2_samples.length);
  assertEquals(4,e2_s2_i1_s1_samples.length);
  assertEquals(3,e2_s2_i1_s2_samples.length);
  assertNotNull(e1_s1_i1_s1_samples[0]);
  assertNotNull(e1_s1_i1_s1_samples[1]);
  assertNotNull(e1_s1_i1_s1_samples[2]);
  assertNotNull(e1_s1_i1_s1_samples[3]);
  assertNotNull(e1_s1_i1_s2_samples[0]);
  assertNotNull(e1_s1_i1_s2_samples[1]);
  assertNotNull(e1_s1_i1_s2_samples[2]);
  assertNotNull(e2_s1_i1_s1_samples[0]);
  assertNotNull(e2_s1_i1_s1_samples[1]);
  assertNotNull(e2_s1_i1_s1_samples[2]);
  assertNotNull(e2_s1_i1_s1_samples[3]);
  assertNotNull(e2_s1_i1_s2_samples[0]);
  assertNotNull(e2_s1_i1_s2_samples[1]);
  assertNotNull(e2_s1_i1_s2_samples[2]);
  assertNotNull(e2_s2_i1_s1_samples[0]);
  assertNotNull(e2_s2_i1_s1_samples[1]);
  assertNotNull(e2_s2_i1_s1_samples[2]);
  assertNotNull(e2_s2_i1_s1_samples[3]);
  assertNotNull(e2_s2_i1_s2_samples[0]);
  assertNotNull(e2_s2_i1_s2_samples[1]);
  assertNotNull(e2_s2_i1_s2_samples[2]);
  assertNotNull(e1_s1_i1_s1_samples[0].toString());
  assertNotNull(e1_s1_i1_s1_samples[0].getLabelText());
  assertEquals(42,((UiModelSample)e1_s1_i1_s1_samples[0]).getLine());
  assertEquals((double)0.6341,((UiModelSample)e1_s1_i1_s1_samples[0]).getCountPercentage(),(double)0.0001);
  assertNull(e1_s1_i1_s1_samples[0].getChildren());
  assertFalse(e1_s1_i1_s1_samples[0].hasChildren());
  assertEquals(e1_s1_i1_symbols[0],e1_s1_i1_s1_samples[0].getParent());
  assertNotNull(e1_s1_i1_s1_samples[0].getLabelImage());
  assertNotNull(e1_s1_i1_s1_samples[1].toString());
  assertNotNull(e1_s1_i1_s1_samples[1].getLabelText());
  assertEquals(36,((UiModelSample)e1_s1_i1_s1_samples[1]).getLine());
  assertEquals((double)0.1951,((UiModelSample)e1_s1_i1_s1_samples[1]).getCountPercentage(),(double)0.0001);
  assertNull(e1_s1_i1_s1_samples[1].getChildren());
  assertFalse(e1_s1_i1_s1_samples[1].hasChildren());
  assertEquals(e1_s1_i1_symbols[0],e1_s1_i1_s1_samples[1].getParent());
  assertNotNull(e1_s1_i1_s1_samples[1].getLabelImage());
  assertNotNull(e1_s1_i1_s1_samples[2].toString());
  assertNotNull(e1_s1_i1_s1_samples[2].getLabelText());
  assertEquals(31,((UiModelSample)e1_s1_i1_s1_samples[2]).getLine());
  assertEquals((double)0.0488,((UiModelSample)e1_s1_i1_s1_samples[2]).getCountPercentage(),(double)0.0001);
  assertNull(e1_s1_i1_s1_samples[2].getChildren());
  assertFalse(e1_s1_i1_s1_samples[2].hasChildren());
  assertEquals(e1_s1_i1_symbols[0],e1_s1_i1_s1_samples[2].getParent());
  assertNotNull(e1_s1_i1_s1_samples[2].getLabelImage());
  assertNotNull(e1_s1_i1_s1_samples[3].toString());
  assertNotNull(e1_s1_i1_s1_samples[3].getLabelText());
  assertEquals(39,((UiModelSample)e1_s1_i1_s1_samples[3]).getLine());
  assertEquals((double)0.0,((UiModelSample)e1_s1_i1_s1_samples[3]).getCountPercentage(),(double)0.0001);
  assertNull(e1_s1_i1_s1_samples[3].getChildren());
  assertFalse(e1_s1_i1_s1_samples[3].hasChildren());
  assertEquals(e1_s1_i1_symbols[0],e1_s1_i1_s1_samples[3].getParent());
  assertNotNull(e1_s1_i1_s1_samples[3].getLabelImage());
  assertNotNull(e1_s1_i1_s2_samples[0].toString());
  assertNotNull(e1_s1_i1_s2_samples[0].getLabelText());
  assertEquals(94,((UiModelSample)e1_s1_i1_s2_samples[0]).getLine());
  assertEquals((double)0.0976,((UiModelSample)e1_s1_i1_s2_samples[0]).getCountPercentage(),(double)0.0001);
  assertNull(e1_s1_i1_s2_samples[0].getChildren());
  assertFalse(e1_s1_i1_s2_samples[0].hasChildren());
  assertEquals(e1_s1_i1_symbols[1],e1_s1_i1_s2_samples[0].getParent());
  assertNotNull(e1_s1_i1_s2_samples[0].getLabelImage());
  assertNotNull(e1_s1_i1_s2_samples[1].toString());
  assertNotNull(e1_s1_i1_s2_samples[1].getLabelText());
  assertEquals(12,((UiModelSample)e1_s1_i1_s2_samples[1]).getLine());
  assertEquals((double)0.0,((UiModelSample)e1_s1_i1_s2_samples[1]).getCountPercentage(),(double)0.0001);
  assertNull(e1_s1_i1_s2_samples[1].getChildren());
  assertFalse(e1_s1_i1_s2_samples[1].hasChildren());
  assertEquals(e1_s1_i1_symbols[1],e1_s1_i1_s2_samples[1].getParent());
  assertNotNull(e1_s1_i1_s2_samples[1].getLabelImage());
  assertNotNull(e1_s1_i1_s2_samples[2].toString());
  assertNotNull(e1_s1_i1_s2_samples[2].getLabelText());
  assertEquals(55,((UiModelSample)e1_s1_i1_s2_samples[2]).getLine());
  assertEquals((double)0.0,((UiModelSample)e1_s1_i1_s2_samples[2]).getCountPercentage(),(double)0.0001);
  assertNull(e1_s1_i1_s2_samples[2].getChildren());
  assertFalse(e1_s1_i1_s2_samples[2].hasChildren());
  assertEquals(e1_s1_i1_symbols[1],e1_s1_i1_s2_samples[2].getParent());
  assertNotNull(e1_s1_i1_s2_samples[2].getLabelImage());
  assertNotNull(e2_s1_i1_s1_samples[0].toString());
  assertNotNull(e2_s1_i1_s1_samples[0].getLabelText());
  assertEquals(42,((UiModelSample)e2_s1_i1_s1_samples[0]).getLine());
  assertEquals((double)0.6341,((UiModelSample)e2_s1_i1_s1_samples[0]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s1_i1_s1_samples[0].getChildren());
  assertFalse(e2_s1_i1_s1_samples[0].hasChildren());
  assertEquals(e2_s1_i1_symbols[0],e2_s1_i1_s1_samples[0].getParent());
  assertNotNull(e2_s1_i1_s1_samples[0].getLabelImage());
  assertNotNull(e2_s1_i1_s1_samples[1].toString());
  assertNotNull(e2_s1_i1_s1_samples[1].getLabelText());
  assertEquals(36,((UiModelSample)e2_s1_i1_s1_samples[1]).getLine());
  assertEquals((double)0.1951,((UiModelSample)e2_s1_i1_s1_samples[1]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s1_i1_s1_samples[1].getChildren());
  assertFalse(e2_s1_i1_s1_samples[1].hasChildren());
  assertEquals(e2_s1_i1_symbols[0],e2_s1_i1_s1_samples[1].getParent());
  assertNotNull(e2_s1_i1_s1_samples[1].getLabelImage());
  assertNotNull(e2_s1_i1_s1_samples[2].toString());
  assertNotNull(e2_s1_i1_s1_samples[2].getLabelText());
  assertEquals(31,((UiModelSample)e2_s1_i1_s1_samples[2]).getLine());
  assertEquals((double)0.0488,((UiModelSample)e2_s1_i1_s1_samples[2]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s1_i1_s1_samples[2].getChildren());
  assertFalse(e2_s1_i1_s1_samples[2].hasChildren());
  assertEquals(e2_s1_i1_symbols[0],e2_s1_i1_s1_samples[2].getParent());
  assertNotNull(e2_s1_i1_s1_samples[2].getLabelImage());
  assertNotNull(e2_s1_i1_s1_samples[3].toString());
  assertNotNull(e2_s1_i1_s1_samples[3].getLabelText());
  assertEquals(39,((UiModelSample)e2_s1_i1_s1_samples[3]).getLine());
  assertEquals((double)0.0,((UiModelSample)e2_s1_i1_s1_samples[3]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s1_i1_s1_samples[3].getChildren());
  assertFalse(e2_s1_i1_s1_samples[3].hasChildren());
  assertEquals(e2_s1_i1_symbols[0],e2_s1_i1_s1_samples[3].getParent());
  assertNotNull(e2_s1_i1_s1_samples[3].getLabelImage());
  assertNotNull(e2_s1_i1_s2_samples[0].toString());
  assertNotNull(e2_s1_i1_s2_samples[0].getLabelText());
  assertEquals(94,((UiModelSample)e2_s1_i1_s2_samples[0]).getLine());
  assertEquals((double)0.0976,((UiModelSample)e2_s1_i1_s2_samples[0]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s1_i1_s2_samples[0].getChildren());
  assertFalse(e2_s1_i1_s2_samples[0].hasChildren());
  assertEquals(e2_s1_i1_symbols[1],e2_s1_i1_s2_samples[0].getParent());
  assertNotNull(e2_s1_i1_s2_samples[0].getLabelImage());
  assertNotNull(e2_s1_i1_s2_samples[1].toString());
  assertNotNull(e2_s1_i1_s2_samples[1].getLabelText());
  assertEquals(12,((UiModelSample)e2_s1_i1_s2_samples[1]).getLine());
  assertEquals((double)0.0,((UiModelSample)e2_s1_i1_s2_samples[1]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s1_i1_s2_samples[1].getChildren());
  assertFalse(e2_s1_i1_s2_samples[1].hasChildren());
  assertEquals(e2_s1_i1_symbols[1],e2_s1_i1_s2_samples[1].getParent());
  assertNotNull(e2_s1_i1_s2_samples[1].getLabelImage());
  assertNotNull(e2_s1_i1_s2_samples[2].toString());
  assertNotNull(e2_s1_i1_s2_samples[2].getLabelText());
  assertEquals(55,((UiModelSample)e2_s1_i1_s2_samples[2]).getLine());
  assertEquals((double)0.0,((UiModelSample)e2_s1_i1_s2_samples[2]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s1_i1_s2_samples[2].getChildren());
  assertFalse(e2_s1_i1_s2_samples[2].hasChildren());
  assertEquals(e2_s1_i1_symbols[1],e2_s1_i1_s2_samples[2].getParent());
  assertNotNull(e2_s1_i1_s2_samples[2].getLabelImage());
  assertNotNull(e2_s2_i1_s1_samples[0].toString());
  assertNotNull(e2_s2_i1_s1_samples[0].getLabelText());
  assertEquals(42,((UiModelSample)e2_s2_i1_s1_samples[0]).getLine());
  assertEquals((double)0.65,((UiModelSample)e2_s2_i1_s1_samples[0]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s2_i1_s1_samples[0].getChildren());
  assertFalse(e2_s2_i1_s1_samples[0].hasChildren());
  assertEquals(e2_s2_i1_symbols[0],e2_s2_i1_s1_samples[0].getParent());
  assertNotNull(e2_s2_i1_s1_samples[0].getLabelImage());
  assertNotNull(e2_s2_i1_s1_samples[1].toString());
  assertNotNull(e2_s2_i1_s1_samples[1].getLabelText());
  assertEquals(36,((UiModelSample)e2_s2_i1_s1_samples[1]).getLine());
  assertEquals((double)0.2,((UiModelSample)e2_s2_i1_s1_samples[1]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s2_i1_s1_samples[1].getChildren());
  assertFalse(e2_s2_i1_s1_samples[1].hasChildren());
  assertEquals(e2_s2_i1_symbols[0],e2_s2_i1_s1_samples[1].getParent());
  assertNotNull(e2_s2_i1_s1_samples[1].getLabelImage());
  assertNotNull(e2_s2_i1_s1_samples[2].toString());
  assertNotNull(e2_s2_i1_s1_samples[2].getLabelText());
  assertEquals(31,((UiModelSample)e2_s2_i1_s1_samples[2]).getLine());
  assertEquals((double)0.05,((UiModelSample)e2_s2_i1_s1_samples[2]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s2_i1_s1_samples[2].getChildren());
  assertFalse(e2_s2_i1_s1_samples[2].hasChildren());
  assertEquals(e2_s2_i1_symbols[0],e2_s2_i1_s1_samples[2].getParent());
  assertNotNull(e2_s2_i1_s1_samples[2].getLabelImage());
  assertNotNull(e2_s2_i1_s1_samples[3].toString());
  assertNotNull(e2_s2_i1_s1_samples[3].getLabelText());
  assertEquals(39,((UiModelSample)e2_s2_i1_s1_samples[3]).getLine());
  assertEquals((double)0.0,((UiModelSample)e2_s2_i1_s1_samples[3]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s2_i1_s1_samples[3].getChildren());
  assertFalse(e2_s2_i1_s1_samples[3].hasChildren());
  assertEquals(e2_s2_i1_symbols[0],e2_s2_i1_s1_samples[3].getParent());
  assertNotNull(e2_s2_i1_s1_samples[3].getLabelImage());
  assertNotNull(e2_s2_i1_s2_samples[0].toString());
  assertNotNull(e2_s2_i1_s2_samples[0].getLabelText());
  assertEquals(94,((UiModelSample)e2_s2_i1_s2_samples[0]).getLine());
  assertEquals((double)0.1,((UiModelSample)e2_s2_i1_s2_samples[0]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s2_i1_s2_samples[0].getChildren());
  assertFalse(e2_s2_i1_s2_samples[0].hasChildren());
  assertEquals(e2_s2_i1_symbols[1],e2_s2_i1_s2_samples[0].getParent());
  assertNotNull(e2_s2_i1_s2_samples[0].getLabelImage());
  assertNotNull(e2_s2_i1_s2_samples[1].toString());
  assertNotNull(e2_s2_i1_s2_samples[1].getLabelText());
  assertEquals(12,((UiModelSample)e2_s2_i1_s2_samples[1]).getLine());
  assertEquals((double)0.0,((UiModelSample)e2_s2_i1_s2_samples[1]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s2_i1_s2_samples[1].getChildren());
  assertFalse(e2_s2_i1_s2_samples[1].hasChildren());
  assertEquals(e2_s2_i1_symbols[1],e2_s2_i1_s2_samples[1].getParent());
  assertNotNull(e2_s2_i1_s2_samples[1].getLabelImage());
  assertNotNull(e2_s2_i1_s2_samples[2].toString());
  assertNotNull(e2_s2_i1_s2_samples[2].getLabelText());
  assertEquals(55,((UiModelSample)e2_s2_i1_s2_samples[2]).getLine());
  assertEquals((double)0.0,((UiModelSample)e2_s2_i1_s2_samples[2]).getCountPercentage(),(double)0.0001);
  assertNull(e2_s2_i1_s2_samples[2].getChildren());
  assertFalse(e2_s2_i1_s2_samples[2].hasChildren());
  assertEquals(e2_s2_i1_symbols[1],e2_s2_i1_s2_samples[2].getParent());
  assertNotNull(e2_s2_i1_s2_samples[2].getLabelImage());
}",0.9941094249201278
92997,"public void endElement(String name,Object callData){
  if (name.equals(IMAGE_TAG)) {
  }
 else   if (name.equals(SYMBOLS_TAG)) {
    _image._setSymbols(_symbolsProcessor.getSymbols());
  }
 else   if (name.equals(DEPENDENT_TAG)) {
    _image._setDependents(_dependentProcessor.getImages());
  }
 else {
    super.endElement(name,callData);
  }
}","public void endElement(String name,Object callData){
  if (name.equals(IMAGE_TAG)) {
    if (img_seen > 1) {
      _image._setCount(OpModelImage.IMAGE_PARSE_ERROR);
      _image._setDepCount(0);
      _image._setDependents(null);
      _image._setSymbols(null);
      _image._setName(""String_Node_Str"");
    }
  }
 else   if (name.equals(SYMBOLS_TAG)) {
    _image._setSymbols(_symbolsProcessor.getSymbols());
  }
 else   if (name.equals(DEPENDENT_TAG)) {
    _image._setDependents(_dependentProcessor.getImages());
  }
 else {
    super.endElement(name,callData);
  }
}",0.7540983606557377
92998,"public void startElement(String name,Attributes attrs,Object callData){
  if (name.equals(IMAGE_TAG)) {
    if (!parsing_image) {
      _image._setName(attrs.getValue(ATTR_IMAGENAME));
      _image._setCount(Integer.parseInt(attrs.getValue(ATTR_COUNT)));
      parsing_image=true;
    }
 else {
      _image._setCount(OpModelImage.IMAGE_PARSE_ERROR);
      _image._setDepCount(0);
      _image._setDependents(null);
      _image._setSymbols(null);
      _image._setName(""String_Node_Str"");
    }
  }
 else   if (name.equals(SYMBOLS_TAG)) {
    OprofileSAXHandler.getInstance(callData).push(_symbolsProcessor);
  }
 else   if (name.equals(DEPENDENT_TAG)) {
    _image._setDepCount(Integer.parseInt(attrs.getValue(ATTR_DEPCOUNT)));
    OprofileSAXHandler.getInstance(callData).push(_dependentProcessor);
  }
 else {
    super.startElement(name,attrs,callData);
  }
}","public void startElement(String name,Attributes attrs,Object callData){
  if (name.equals(IMAGE_TAG)) {
    if (img_seen == 0) {
      _image._setName(attrs.getValue(ATTR_IMAGENAME));
      _image._setCount(Integer.parseInt(attrs.getValue(ATTR_COUNT)));
    }
    img_seen++;
  }
 else   if (name.equals(SYMBOLS_TAG)) {
    OprofileSAXHandler.getInstance(callData).push(_symbolsProcessor);
  }
 else   if (name.equals(DEPENDENT_TAG)) {
    _image._setDepCount(Integer.parseInt(attrs.getValue(ATTR_DEPCOUNT)));
    OprofileSAXHandler.getInstance(callData).push(_dependentProcessor);
  }
 else {
    super.startElement(name,attrs,callData);
  }
}",0.8156498673740054
92999,"public void reset(Object callData){
  _image=((CallData)callData).image;
  parsing_image=false;
}","public void reset(Object callData){
  _image=((CallData)callData).image;
  img_seen=0;
}",0.8972972972972973
93000,"/** 
 * Disposes of the old unit mask check list and creates a new one with  the appropriate default value. 
 * @param oe the event
 */
public void displayEvent(OpEvent oe){
  OpUnitMask mask=oe.getUnitMask();
  int totalMasks=mask.numMasks();
  if (_maskListComp != null) {
    _maskListComp.dispose();
  }
  Composite newMaskComp=new Composite(_top,SWT.NONE);
  newMaskComp.setLayout(new GridLayout());
  newMaskComp.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,true));
  _maskListComp=newMaskComp;
  mask.setDefaultMaskValue();
  ArrayList<Button> maskButtons=new ArrayList<Button>();
  for (int i=0; i < totalMasks; i++) {
    Button maskButton;
    if (mask.getType() == OpUnitMask.MANDATORY) {
      maskButton=new Button(newMaskComp,SWT.RADIO);
      maskButton.setEnabled(false);
      maskButton.setText(mask.getText(i));
      maskButton.setSelection(true);
    }
 else {
      int buttonType;
      final int maskButtonIndex=i;
      boolean selected=mask.isMaskSetFromIndex(maskButtonIndex);
      if (mask.getType() == OpUnitMask.EXCLUSIVE) {
        buttonType=SWT.RADIO;
      }
 else {
        buttonType=SWT.CHECK;
      }
      maskButton=new Button(newMaskComp,buttonType);
      maskButton.setEnabled(true);
      maskButton.setText(mask.getText(i));
      maskButton.setSelection(selected);
      maskButton.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent se){
          _handleToggle((Button)se.getSource(),maskButtonIndex);
        }
      }
);
      maskButtons.add(maskButton);
    }
  }
  _unitMaskButtons=new Button[maskButtons.size()];
  maskButtons.toArray(_unitMaskButtons);
}","/** 
 * Disposes of the old unit mask check list and creates a new one with  the appropriate default value. 
 * @param oe the event
 */
public void displayEvent(OpEvent oe){
  OpUnitMask mask=oe.getUnitMask();
  int totalMasks=mask.numMasks();
  if (_maskListComp != null) {
    _maskListComp.dispose();
  }
  Composite newMaskComp=new Composite(_top,SWT.NONE);
  newMaskComp.setLayout(new GridLayout());
  newMaskComp.setLayoutData(new GridData(SWT.LEFT,SWT.FILL,false,true));
  _maskListComp=newMaskComp;
  mask.setDefaultMaskValue();
  ArrayList<Button> maskButtons=new ArrayList<Button>();
  for (int i=0; i < totalMasks; i++) {
    Button maskButton;
    if (mask.getType() == OpUnitMask.MANDATORY) {
      maskButton=new Button(newMaskComp,SWT.RADIO);
      maskButton.setEnabled(false);
      maskButton.setText(mask.getText(i));
      maskButton.setSelection(true);
    }
 else {
      int buttonType;
      final int maskButtonIndex=i;
      boolean selected=mask.isMaskSetFromIndex(maskButtonIndex);
      if (mask.getType() == OpUnitMask.EXCLUSIVE) {
        buttonType=SWT.RADIO;
      }
 else {
        buttonType=SWT.CHECK;
      }
      maskButton=new Button(newMaskComp,buttonType);
      maskButton.setEnabled(true);
      maskButton.setText(mask.getText(i));
      maskButton.setSelection(selected);
      maskButton.addSelectionListener(new SelectionAdapter(){
        public void widgetSelected(        SelectionEvent se){
          _handleToggle((Button)se.getSource(),maskButtonIndex);
        }
      }
);
      maskButtons.add(maskButton);
    }
  }
  _unitMaskButtons=new Button[maskButtons.size()];
  maskButtons.toArray(_unitMaskButtons);
  resizeScrollContainer();
}",0.99196667658435
