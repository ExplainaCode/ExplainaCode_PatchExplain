record_number,buggy_code,fixed_code,code_similarity
45001,"/** 
 * Stops the current stress test.
 */
public static void stop(){
  stressThread=null;
}","/** 
 * Stops the current stress test.
 */
public void stop(){
  run=false;
}",0.8284023668639053
45002,"public void run(){
  Random random=new Random();
  MainFrame mainFrame=WindowManager.getCurrentMainFrame();
  while (stressThread != null) {
    if (random.nextInt(2) == 0)     ActionManager.performAction(com.mucommander.ui.action.SwitchActiveTableAction.class,mainFrame);
    FileTable fileTable=mainFrame.getActiveTable();
    AbstractFile currentFolder=fileTable.getCurrentFolder();
    try {
      AbstractFile parentFolder=currentFolder.getParent();
      AbstractFile children[]=currentFolder.ls();
      if (children.length == 0 || (random.nextInt(3) == 0 && parentFolder != null)) {
        fileTable.selectRow(0);
        ActionManager.performAction(com.mucommander.ui.action.OpenAction.class,mainFrame);
      }
 else {
        AbstractFile randomChild=children[random.nextInt(children.length)];
        if (!randomChild.isBrowsable())         continue;
        randomChild.ls();
        fileTable.selectFile(randomChild);
        ActionManager.performAction(com.mucommander.ui.action.OpenAction.class,mainFrame);
      }
    }
 catch (    Exception e) {
      if (com.mucommander.Debug.ON)       com.mucommander.Debug.trace(""String_Node_Str"" + e);
    }
    if (com.mucommander.Debug.ON)     com.mucommander.Debug.trace(""String_Node_Str"");
    try {
      stressThread.sleep(100 + random.nextInt(200));
    }
 catch (    InterruptedException e) {
      if (com.mucommander.Debug.ON)       com.mucommander.Debug.trace(""String_Node_Str"" + e);
    }
  }
}","public void run(){
  Random random=new Random();
  MainFrame mainFrame=WindowManager.getCurrentMainFrame();
  while (run) {
    if (random.nextInt(2) == 0)     ActionManager.performAction(com.mucommander.ui.action.SwitchActiveTableAction.class,mainFrame);
    FileTable fileTable=mainFrame.getActiveTable();
    AbstractFile currentFolder=fileTable.getCurrentFolder();
    try {
      AbstractFile parentFolder=currentFolder.getParent();
      AbstractFile children[]=currentFolder.ls();
      if (children.length == 0 || (random.nextInt(3) == 0 && parentFolder != null)) {
        fileTable.selectRow(0);
        ActionManager.performAction(com.mucommander.ui.action.OpenAction.class,mainFrame);
      }
 else {
        AbstractFile randomChild=children[random.nextInt(children.length)];
        if (!randomChild.isBrowsable())         continue;
        randomChild.ls();
        fileTable.selectFile(randomChild);
        ActionManager.performAction(com.mucommander.ui.action.OpenAction.class,mainFrame);
      }
    }
 catch (    Exception e) {
      if (com.mucommander.Debug.ON)       com.mucommander.Debug.trace(""String_Node_Str"" + e);
    }
    if (com.mucommander.Debug.ON)     com.mucommander.Debug.trace(""String_Node_Str"");
    try {
      Thread.currentThread().sleep(100 + random.nextInt(200));
    }
 catch (    InterruptedException e) {
      if (com.mucommander.Debug.ON)       com.mucommander.Debug.trace(""String_Node_Str"" + e);
    }
  }
}",0.9845837615621787
45003,"/** 
 * Method used to start the stress tester.
 * @param args command line arguments.
 */
public static void main(String args[]){
  Launcher.main(args);
  StressTester instance=new StressTester();
  JDialog stopDialog=new JDialog();
  JButton stopButton=new JButton(""String_Node_Str"");
  stopButton.addActionListener(instance);
  stopDialog.getContentPane().add(stopButton);
  stopDialog.setSize(new Dimension(80,60));
  stopDialog.setVisible(true);
}","/** 
 * Method used to start the stress tester.
 * @param args command line arguments.
 */
public static void main(String args[]){
  Launcher.main(args);
  StressTester instance=new StressTester();
  JDialog stopDialog=new JDialog();
  JButton stopButton=new JButton(""String_Node_Str"");
  new Thread(instance).start();
  stopButton.addActionListener(instance);
  stopDialog.getContentPane().add(stopButton);
  stopDialog.setSize(new Dimension(80,60));
  stopDialog.setVisible(true);
}",0.9658119658119658
45004,"public StressTester(){
  (stressThread=new Thread(this)).start();
}","public StressTester(){
  run=true;
}",0.6019417475728155
45005,"/** 
 * Initialises the tabbed panel's UI.
 */
private void initUI(){
  Container contentPane;
  XBoxPanel buttonsPanel;
  JPanel tempPanel;
  prefPanels=new Vector();
  tabbedPane=new JTabbedPane(JTabbedPane.TOP);
  tabbedPane.addChangeListener(this);
  contentPane=getContentPane();
  contentPane.setLayout(new BorderLayout());
  contentPane.add(tabbedPane,BorderLayout.CENTER);
  buttonsPanel=new XBoxPanel();
  buttonsPanel.add(applyButton=new JButton(Translator.get(""String_Node_Str"")));
  buttonsPanel.addSpace(20);
  buttonsPanel.add(okButton=new JButton(Translator.get(""String_Node_Str"")));
  buttonsPanel.add(cancelButton=new JButton(Translator.get(""String_Node_Str"")));
  applyButton.addActionListener(this);
  okButton.addActionListener(this);
  cancelButton.addActionListener(this);
  tempPanel=new JPanel(new FlowLayout(FlowLayout.RIGHT));
  tempPanel.add(buttonsPanel);
  contentPane.add(tempPanel,BorderLayout.SOUTH);
  getRootPane().setDefaultButton(okButton);
}","/** 
 * Initialises the tabbed panel's UI.
 */
private void initUI(){
  Container contentPane;
  XBoxPanel buttonsPanel;
  JPanel tempPanel;
  prefPanels=new Vector();
  tabbedPane=new JTabbedPane(JTabbedPane.TOP);
  contentPane=getContentPane();
  contentPane.setLayout(new BorderLayout());
  contentPane.add(tabbedPane,BorderLayout.CENTER);
  buttonsPanel=new XBoxPanel();
  buttonsPanel.add(applyButton=new JButton(Translator.get(""String_Node_Str"")));
  buttonsPanel.addSpace(20);
  buttonsPanel.add(okButton=new JButton(Translator.get(""String_Node_Str"")));
  buttonsPanel.add(cancelButton=new JButton(Translator.get(""String_Node_Str"")));
  applyButton.addActionListener(this);
  okButton.addActionListener(this);
  cancelButton.addActionListener(this);
  tempPanel=new JPanel(new FlowLayout(FlowLayout.RIGHT));
  tempPanel.add(buttonsPanel);
  contentPane.add(tempPanel,BorderLayout.SOUTH);
  getRootPane().setDefaultButton(okButton);
}",0.9801876955161628
45006,"/** 
 * Commits the changes and writes the configuration file if necessary.
 */
public void commit(){
  super.commit();
  try {
    MuConfiguration.write();
  }
 catch (  Exception e) {
  }
}","/** 
 * Commits the changes and writes the configuration file if necessary.
 */
public void commit(){
  super.commit();
  try {
    MuConfiguration.write();
  }
 catch (  Exception e) {
    JOptionPane.showMessageDialog(this,Translator.get(""String_Node_Str""),Translator.get(""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
  }
}",0.7388781431334622
45007,"/** 
 * Releases the singleton.
 */
public void dispose(){
synchronized (singletonLock) {
    singleton=null;
  }
  super.dispose();
}","/** 
 * Releases the singleton.
 */
public void dispose(){
  releaseSingleton(getSelectedPanelIndex());
  super.dispose();
}",0.751937984496124
45008,"/** 
 * Returns an instance of <code>GeneralPreferencesDialog</code>. <p> This will not necessarily create a new instance - if a dialog is already in use, it will be returned. This is an attempt to ensure that the preferences dialog is not opened more than once. </p>
 * @return an instance of <code>GeneralPreferencesDialog</code>.
 */
public static GeneralPreferencesDialog getDialog(){
synchronized (singletonLock) {
    if (singleton == null)     singleton=new GeneralPreferencesDialog();
    return singleton;
  }
}","/** 
 * Returns an instance of <code>GeneralPreferencesDialog</code>. <p> This will not necessarily create a new instance - if a dialog is already in use, it will be returned. This is an attempt to ensure that the preferences dialog is not opened more than once. </p>
 * @return an instance of <code>GeneralPreferencesDialog</code>.
 */
public static synchronized GeneralPreferencesDialog getDialog(){
  if (singleton == null)   singleton=new GeneralPreferencesDialog();
  return singleton;
}",0.9466403162055336
45009,"protected RuntimeProperty getCurrentValue(){
  return currentValue;
}","protected RuntimeProperty getCurrentValue(){
  return getCurrent();
}",0.9130434782608696
45010,"protected RuntimeProperty getCurrentValue(){
  return currentValue;
}","protected RuntimeProperty getCurrentValue(){
  return getCurrent();
}",0.9130434782608696
45011,"/** 
 * Returns <code>true</code> if the specified class must be used.
 * @return <code>true</code> if the specified class must be used, <code>false</code> otherwise.
 */
public boolean accept(Class c);","/** 
 * Returns <code>true</code> if the specified class must be used.
 * @param c class that must be evaluated.
 * @return   <code>true</code> if the specified class must be used, <code>false</code> otherwise.
 */
public boolean accept(Class c);",0.9017857142857144
45012,"/** 
 * Explores the content of the specified file and looks for classes that match the specified class filter, <p> This is a convenience method and is strictly equivalent to calling   {@link #find(AbstractFile,ClassFilter,ClassLoader)}with a class loader argument initialised with the following code: <pre> AbstractFileClassLoader loader; loader = new AbstractFileClassLoader(); loader.addFile(browsable); </pre> </p>
 * @param browsable   file in which to look for classes.
 * @param classFilter how to decide which classes should be kept.
 * @return             a vector containing the names of all the classes that were found and matched <code>classFilter</code>.
 * @throws IOException if an error occurs while exploring <code>browsable</code>.
 */
public Vector find(AbstractFile browsable,ClassFilter classFilter) throws IOException {
  AbstractFileClassLoader classLoader;
  classLoader=new AbstractFileClassLoader();
  classLoader.addFile(browsable);
  return find(browsable,classFilter,classLoader);
}","/** 
 * Explores the content of the specified file and looks for classes that match the specified class filter. <p> This is a convenience method and is strictly equivalent to calling   {@link #find(AbstractFile,ClassFilter,ClassLoader)}with a class loader argument initialised with the following code: <pre> AbstractFileClassLoader loader; loader = new AbstractFileClassLoader(); loader.addFile(browsable); </pre> </p>
 * @param browsable   file in which to look for classes.
 * @param classFilter how to decide which classes should be kept.
 * @return             a vector containing the names of all the classes that were found and matched <code>classFilter</code>.
 * @throws IOException if an error occurs while exploring <code>browsable</code>.
 */
public Vector find(AbstractFile browsable,ClassFilter classFilter) throws IOException {
  AbstractFileClassLoader classLoader;
  classLoader=new AbstractFileClassLoader();
  classLoader.addFile(browsable);
  return find(browsable,classFilter,classLoader);
}",0.9990108803165184
45013,"/** 
 * Returns <code>true</code> if the specified file is either in the extension or system classpath. <p> This is a convenience method and is equivalent to calling: <code>  {@link #isInClasspath(AbstractFile) isInClasspath}(file) ||   {@link #isInExtensionsPath(AbstractFile) isInExtensionsPath}(file)</code>. </p>
 * @param file file whose availability will be checked.
 */
public static boolean isAvailable(AbstractFile file){
  return isInClasspath(file) || isInExtensionsPath(file);
}","/** 
 * Returns <code>true</code> if the specified file is either in the extension or system classpath. <p> This is a convenience method and is equivalent to calling: <code>  {@link #isInClasspath(AbstractFile) isInClasspath}(file) ||   {@link #isInExtensionsPath(AbstractFile) isInExtensionsPath}(file)</code>. </p>
 * @param file file whose availability will be checked.
 * @return <code>true</code> if the specified file is either in the extension or system classpath, <code>false</code> otherwise.
 */
public static boolean isAvailable(AbstractFile file){
  return isInClasspath(file) || isInExtensionsPath(file);
}",0.8836789900811542
45014,"/** 
 * Returns the folder in which all extensions are stored.
 * @return             the folder in which all extensions are stored.
 * @throws IOException if an error occured while locating the default extensions folder.
 */
public static AbstractFile getExtensionsFolder() throws IOException {
  if (extensionsFolder != null)   return extensionsFolder;
  return getDefaultExtensionsFolder();
}","/** 
 * Returns the folder in which all extensions are stored.
 * @return             the folder in which all extensions are stored.
 * @throws IOException if an error occured while locating the default extensions folder.
 * @see #setExtensionsFolder(AbstractFile)
 */
public static AbstractFile getExtensionsFolder() throws IOException {
  if (extensionsFolder != null)   return extensionsFolder;
  return getDefaultExtensionsFolder();
}",0.9483793517406964
45015,"public static boolean importLibrary(AbstractFile file,boolean force) throws IOException {
  AbstractFile dest;
  if (isAvailable(file))   return true;
  dest=getExtensionsFolder().getDirectChild(file.getName());
  if (dest.exists()) {
    if (!force)     return false;
    dest.delete();
  }
  file.copyTo(dest);
  addToClassPath(dest);
  return true;
}","/** 
 * Imports the specified file in muCommander's libraries.
 * @param file  path to the library to import.
 * @param force       wether to overwrite eventual existing libraries of the same name.
 * @return             <code>true</code> if the operation was a success,<code>false</code> if a library of the same name already exists and <code>force</code> is set to <code>false</code>.
 * @throws IOException if an I/O error occurs.
 */
public static boolean importLibrary(AbstractFile file,boolean force) throws IOException {
  AbstractFile dest;
  if (isAvailable(file))   return true;
  dest=getExtensionsFolder().getDirectChild(file.getName());
  if (dest.exists()) {
    if (!force)     return false;
    dest.delete();
  }
  file.copyTo(dest);
  addToClassPath(dest);
  return true;
}",0.5087412587412588
45016,"/** 
 * Returns <code>true</code> if this process only uses one output stream. <p> Some processes will use a single stream for their standard error and standard output streams. Such processes should return <code>true</code> here to prevent both streams from being monitored.<br/> Note that if a process uses merged streams,   {@link #getInputStream()} will be monitored.</p>
 * @return <code>true</code> if this process merges his output streams, <code>false</code> otherwise.
 */
public abstract boolean usesMergedStreams();","/** 
 * Returns <code>true</code> if this process only uses one output stream. <p> Some processes will use a single stream for their standard error and standard output streams. Such processes should return <code>true</code> here to prevent both streams from being monitored.<br> Note that if a process uses merged streams,   {@link #getInputStream()} will be monitored.</p>
 * @return <code>true</code> if this process merges his output streams, <code>false</code> otherwise.
 */
public abstract boolean usesMergedStreams();",0.9990467111534796
45017,"/** 
 * Loads the shell history.
 */
public static void loadHistory() throws Exception {
  BackupInputStream in;
  in=null;
  try {
    ShellHistoryReader.read(in=new BackupInputStream(getHistoryFile()));
  }
  finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e2) {
      }
    }
  }
}","/** 
 * Loads the shell history.
 * @throws Exception if an error occurs.
 */
public static void loadHistory() throws Exception {
  BackupInputStream in;
  in=null;
  try {
    ShellHistoryReader.read(in=new BackupInputStream(getHistoryFile()));
  }
  finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e2) {
      }
    }
  }
}",0.8425531914893617
45018,"/** 
 * Returns a <b>non thread-safe</code> iterator on the history.
 * @return an iterator on the history.
 */
public static Iterator getHistoryIterator(){
  return new HistoryIterator();
}","/** 
 * Returns a <b>non thread-safe</b> iterator on the history.
 * @return an iterator on the history.
 */
public static Iterator getHistoryIterator(){
  return new HistoryIterator();
}",0.986737400530504
45019,"/** 
 * Returns the path to the shell history file. <p> This method cannot guarantee the file's existence, and it's up to the caller to deal with the fact that the user might not actually have created a history file yet. </p> <p> This method's return value can be modified through   {@link #setHistoryFile(String)}. If this wasn't called, the default path will be used:   {@link #DEFAULT_HISTORY_FILE_NAME}in the   {@link com.mucommander.PlatformManager#getPreferencesFolder() preferences} folder.</p>
 * @return             the path to the shell history file.
 * @throws IOException if an error occured while locating the default shell history file.
 */
public static AbstractFile getHistoryFile() throws IOException {
  if (historyFile == null)   return PlatformManager.getPreferencesFolder().getChild(DEFAULT_HISTORY_FILE_NAME);
  return historyFile;
}","/** 
 * Returns the path to the shell history file. <p> This method cannot guarantee the file's existence, and it's up to the caller to deal with the fact that the user might not actually have created a history file yet. </p> <p> This method's return value can be modified through   {@link #setHistoryFile(String)}. If this wasn't called, the default path will be used:   {@link #DEFAULT_HISTORY_FILE_NAME}in the   {@link com.mucommander.PlatformManager#getPreferencesFolder() preferences} folder.</p>
 * @return             the path to the shell history file.
 * @throws IOException if an error occured while locating the default shell history file.
 * @see #setHistoryFile(File)
 * @see #setHistoryFile(String)
 * @see #setHistoryFile(AbstractFile)
 */
public static AbstractFile getHistoryFile() throws IOException {
  if (historyFile == null)   return PlatformManager.getPreferencesFolder().getChild(DEFAULT_HISTORY_FILE_NAME);
  return historyFile;
}",0.9447513812154696
45020,"/** 
 * Sets the path of the shell history file.
 * @param file                  where to load the shell history from.
 * @exception FileNotFoundException if <code>path</code> is not accessible.
 */
public static void setHistoryFile(AbstractFile file) throws FileNotFoundException {
  if (file.isBrowsable())   throw new FileNotFoundException(""String_Node_Str"" + file.getAbsolutePath());
  historyFile=file;
}","/** 
 * Sets the path of the shell history file.
 * @param file                  where to load the shell history from.
 * @exception FileNotFoundException if <code>path</code> is not accessible.
 * @see #getHistoryFile()
 * @see #setHistoryFile(File)
 * @see #setHistoryFile(String)
 */
public static void setHistoryFile(AbstractFile file) throws FileNotFoundException {
  if (file.isBrowsable())   throw new FileNotFoundException(""String_Node_Str"" + file.getAbsolutePath());
  historyFile=file;
}",0.9028697571743928
45021,"public void actionPerformed(ActionEvent e){
  Object source=e.getSource();
  if (source == okButton || source == applyButton) {
    if (!checkCommit())     return;
    commit();
  }
  if (source == okButton || source == cancelButton)   dispose();
}","/** 
 * Reacts to buttons being pushed.
 */
public void actionPerformed(ActionEvent e){
  Object source=e.getSource();
  if (source == okButton || source == applyButton) {
    if (!checkCommit())     return;
    commit();
  }
  if (source == okButton || source == cancelButton)   dispose();
}",0.9185185185185184
45022,"public boolean checkCommit(){
  int nbPanels=prefPanels.size();
  for (int i=0; i < nbPanels; i++)   if (!((PreferencesPanel)prefPanels.elementAt(i)).checkCommit())   return false;
  return true;
}","/** 
 * Notifies all panels that changes are about to be commited. <p> This gives preference panels a chance to display warning or errors before changes are commited. </p>
 * @return <code>true</code> if all preference panels are ok with commiting the changes, <code>false</code> otherwise.
 */
public boolean checkCommit(){
  int nbPanels=prefPanels.size();
  for (int i=0; i < nbPanels; i++)   if (!((PreferencesPanel)prefPanels.elementAt(i)).checkCommit())   return false;
  return true;
}",0.5718432510885341
45023,"public PreferencesDialog(Dialog parent,String title){
  super(parent,title,parent);
  initUI();
}","/** 
 * Creates a new preferences dialog.
 * @param parent parent of the dialog.
 * @param title  title of the dialg.
 */
public PreferencesDialog(Dialog parent,String title){
  super(parent,title,parent);
  initUI();
}",0.6139240506329114
45024,"public void tabSelectionChanged(int newIndex){
}","/** 
 * Ignored.
 * @param newIndex ignored.
 */
public void tabSelectionChanged(int newIndex){
}",0.6620689655172414
45025,"public void addPreferencesPanel(PreferencesPanel prefPanel){
  addPreferencesPanel(prefPanel,true);
}","/** 
 * Adds the specified preferences panel to this dialog.
 * @param prefPanel panel to add.
 */
public void addPreferencesPanel(PreferencesPanel prefPanel){
  addPreferencesPanel(prefPanel,true);
}",0.6710963455149501
45026,"/** 
 * Sets the currently active tab.
 */
public void setActiveTab(int index){
  tabbedPane.setSelectedIndex(index);
}","/** 
 * Sets the currently active tab.
 * @param index index of the tab to select.
 */
public void setActiveTab(int index){
  tabbedPane.setSelectedIndex(index);
}",0.8439716312056738
45027,"public void stateChanged(ChangeEvent e){
  if (e.getSource() == tabbedPane)   tabSelectionChanged(tabbedPane.getSelectedIndex());
}","/** 
 * Reacts to changes in the panel selection.
 */
public void stateChanged(ChangeEvent e){
  if (e.getSource() == tabbedPane)   tabSelectionChanged(tabbedPane.getSelectedIndex());
}",0.8291139240506329
45028,"public String getTitle(){
  return title;
}","/** 
 * Returns the panel's title.
 * @return the panel's title.
 */
public String getTitle(){
  return title;
}",0.5548387096774193
45029,"protected boolean checkCommit(){
  return true;
}","/** 
 * Checks whether this panel's data can be commited or whether it contains an error.
 * @return <code>true</code> if the panel's data can be commited, <code>false</code> otherwise.
 */
protected boolean checkCommit(){
  return true;
}",0.3402777777777778
45030,"public PreferencesPanel(PreferencesDialog parent,String title){
  this.title=title;
  this.parent=parent;
}","/** 
 * Creates a new preferences panel.
 * @param parent dialog that contains this panel.
 * @param title  panel's title.
 */
public PreferencesPanel(PreferencesDialog parent,String title){
  this.title=title;
  this.parent=parent;
}",0.6275659824046921
45031,"public boolean editTheme(){
  showDialog();
  return wasThemeModified;
}","/** 
 * Edits the theme specified at creation time and returns <code>true</code> if it was modified.
 * @return <code>true</code> if the theme was modified by the user, <code>false</code> otherwise.
 */
public boolean editTheme(){
  showDialog();
  return wasThemeModified;
}",0.414985590778098
45032,"public ThemeEditorDialog(Frame parent,Theme theme){
  super(parent,createTitle(theme));
  initUI(theme);
}","/** 
 * Creates a new theme editor dialog.
 * @param parent parent of the dialog.
 * @param theme  theme to edit.
 */
public ThemeEditorDialog(Frame parent,Theme theme){
  super(parent,createTitle(theme));
  initUI(theme);
}",0.6424242424242425
45033,"/** 
 * Removes any archive format that might have been registered to the specified extension.
 */
public static void unregisterArchiveFileFormat(ArchiveFormatMapping mapping){
  int index=archiveFormatMappingsV.indexOf(mapping);
  if (index != -1) {
    archiveFormatMappingsV.removeElementAt(index);
    updateArchiveFormatMappingsArray();
  }
}","/** 
 * Removes any archive format that might have been registered to the specified extension.
 * @param mapping archive format mapping to unregister.
 */
public static void unregisterArchiveFileFormat(ArchiveFormatMapping mapping){
  int index=archiveFormatMappingsV.indexOf(mapping);
  if (index != -1) {
    archiveFormatMappingsV.removeElementAt(index);
    updateArchiveFormatMappingsArray();
  }
}",0.9253333333333332
45034,"public static void registerArchiveFormat(ArchiveFormatProvider provider,FilenameFilter filter){
  registerArchiveFormat(new ArchiveFormatMapping(provider,filter));
}","/** 
 * Registers a new archive format.
 * @param provider class used to create instances of the new archive format.
 * @param filter   filter that files must match to be considered of the new format.
 */
public static void registerArchiveFormat(ArchiveFormatProvider provider,FilenameFilter filter){
  registerArchiveFormat(new ArchiveFormatMapping(provider,filter));
}",0.616822429906542
45035,"/** 
 * Returns true if the given filename's extension matches one of the registered archive formats.
 * @param filename the filename to test
 */
public static boolean isArchiveFilename(String filename){
  return getArchiveFormatProvider(filename) != null;
}","/** 
 * Returns true if the given filename's extension matches one of the registered archive formats.
 * @param filename the filename to test
 * @return <code>true</code> if the specified filename is a known archive file name, <code>false</code> otherwise.
 */
public static boolean isArchiveFilename(String filename){
  return getArchiveFormatProvider(filename) != null;
}",0.8177496038034865
45036,"/** 
 * Creates and returns an instance of AbstractFile for the given FileURL and uses the specified parent file (if any) as the created file's parent. <p>Specifying the file parent if an instance already exists allows to recycle the AbstractFile instance instead of creating a new one when the parent file is requested.
 * @param fileURL the file URL representing the file to be created
 * @param parent the parent AbstractFile to use as the created file's parent, can be <code>null</code>
 * @throws java.io.IOException if something went wrong during file creation.
 */
public static AbstractFile getFile(FileURL fileURL,AbstractFile parent) throws IOException {
  PathTokenizer pt=new PathTokenizer(fileURL.getPath(),fileURL.getPathSeparator(),false);
  AbstractFile currentFile=null;
  boolean lastFileResolved=false;
  while (pt.hasMoreFilenames()) {
    if (isArchiveFilename(pt.nextFilename())) {
      String currentPath=FileToolkit.removeTrailingSeparator(pt.getCurrentPath());
      if (currentFile == null || !(currentFile instanceof AbstractArchiveFile)) {
        FileURL clonedURL=(FileURL)fileURL.clone();
        clonedURL.setPath(currentPath);
        currentFile=wrapArchive(createRawFile(clonedURL));
        lastFileResolved=true;
      }
 else {
        AbstractFile tempEntryFile=((AbstractArchiveFile)currentFile).getArchiveEntryFile(FileToolkit.removeLeadingSeparator(currentPath.substring(currentFile.getURL().getPath().length(),currentPath.length())));
        if (tempEntryFile instanceof AbstractArchiveFile) {
          currentFile=tempEntryFile;
          lastFileResolved=true;
        }
 else {
          lastFileResolved=false;
        }
      }
    }
 else {
      lastFileResolved=false;
    }
  }
  if (!lastFileResolved) {
    String currentPath=pt.getCurrentPath();
    if (currentFile == null || !(currentFile instanceof AbstractArchiveFile)) {
      FileURL clonedURL=(FileURL)fileURL.clone();
      clonedURL.setPath(currentPath);
      currentFile=createRawFile(clonedURL);
    }
 else {
      currentFile=((AbstractArchiveFile)currentFile).getArchiveEntryFile(FileToolkit.removeLeadingSeparator(currentPath.substring(currentFile.getURL().getPath().length(),currentPath.length())));
    }
  }
  if (parent != null)   currentFile.setParent(parent);
  return currentFile;
}","/** 
 * Creates and returns an instance of AbstractFile for the given FileURL and uses the specified parent file (if any) as the created file's parent. <p>Specifying the file parent if an instance already exists allows to recycle the AbstractFile instance instead of creating a new one when the parent file is requested.
 * @param fileURL the file URL representing the file to be created
 * @param parent the parent AbstractFile to use as the created file's parent, can be <code>null</code>
 * @return an instance of {@link AbstractFile} for the given {@link FileURL}.
 * @throws java.io.IOException if something went wrong during file creation.
 */
public static AbstractFile getFile(FileURL fileURL,AbstractFile parent) throws IOException {
  PathTokenizer pt=new PathTokenizer(fileURL.getPath(),fileURL.getPathSeparator(),false);
  AbstractFile currentFile=null;
  boolean lastFileResolved=false;
  while (pt.hasMoreFilenames()) {
    if (isArchiveFilename(pt.nextFilename())) {
      String currentPath=FileToolkit.removeTrailingSeparator(pt.getCurrentPath());
      if (currentFile == null || !(currentFile instanceof AbstractArchiveFile)) {
        FileURL clonedURL=(FileURL)fileURL.clone();
        clonedURL.setPath(currentPath);
        currentFile=wrapArchive(createRawFile(clonedURL));
        lastFileResolved=true;
      }
 else {
        AbstractFile tempEntryFile=((AbstractArchiveFile)currentFile).getArchiveEntryFile(FileToolkit.removeLeadingSeparator(currentPath.substring(currentFile.getURL().getPath().length(),currentPath.length())));
        if (tempEntryFile instanceof AbstractArchiveFile) {
          currentFile=tempEntryFile;
          lastFileResolved=true;
        }
 else {
          lastFileResolved=false;
        }
      }
    }
 else {
      lastFileResolved=false;
    }
  }
  if (!lastFileResolved) {
    String currentPath=pt.getCurrentPath();
    if (currentFile == null || !(currentFile instanceof AbstractArchiveFile)) {
      FileURL clonedURL=(FileURL)fileURL.clone();
      clonedURL.setPath(currentPath);
      currentFile=createRawFile(clonedURL);
    }
 else {
      currentFile=((AbstractArchiveFile)currentFile).getArchiveEntryFile(FileToolkit.removeLeadingSeparator(currentPath.substring(currentFile.getURL().getPath().length(),currentPath.length())));
    }
  }
  if (parent != null)   currentFile.setParent(parent);
  return currentFile;
}",0.9834183673469388
45037,"/** 
 * Sets the protocol part of this FileURL. The specified protocol must not be null.
 */
public void setProtocol(String protocol){
  this.protocol=protocol;
}","/** 
 * Sets the protocol part of this FileURL. The specified protocol must not be null.
 * @param protocol new protocol part for this <code>FileURL</code>.
 * @see #getProtocol()
 */
public void setProtocol(String protocol){
  this.protocol=protocol;
}",0.7807228915662651
45038,"/** 
 * Returns the credentials (login and password) contained in this FileURL, wrapped in an   {@link Credentials} object.Returns null if this FileURL doesn't contain any login or password.
 */
public Credentials getCredentials(){
  return credentials;
}","/** 
 * Returns the credentials (login and password) contained in this FileURL, wrapped in an   {@link Credentials} object.Returns null if this FileURL doesn't contain any login or password.
 * @return the credentials contained by this <code>FileURL</code>, <code>null</code> if none.
 * @see #setCredentials(Credentials)
 */
public Credentials getCredentials(){
  return credentials;
}",0.7956318252730109
45039,"/** 
 * Test method.
 */
public static void main(String args[]){
  String urls[]=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  try {
    FileURL f;
    for (int i=0; i < urls.length; i++) {
      System.out.println(""String_Node_Str"" + urls[i]);
      f=new FileURL(urls[i]);
      System.out.println(""String_Node_Str"" + f.getPath());
      System.out.println(""String_Node_Str"" + f.getHost());
      System.out.println(""String_Node_Str"" + f.getPort());
      if (f.getLogin() != null)       System.out.println(""String_Node_Str"" + f.getLogin() + ""String_Node_Str""+ f.getPassword());
      System.out.println(""String_Node_Str"" + f.getFilename());
      System.out.println(""String_Node_Str"" + f.getQuery());
      String stringRep=f.toString(true);
      System.out.println(""String_Node_Str"" + stringRep + ""String_Node_Str""+ (stringRep.equals(urls[i]) ? ""String_Node_Str"" : ""String_Node_Str""));
      System.out.println(""String_Node_Str"" + f.getParent());
      if (f.getParent() != null)       System.out.println(""String_Node_Str"" + f.getParent().getPath());
      System.out.println(""String_Node_Str"" + f.getJavaNetURL().toString());
      System.out.println();
    }
  }
 catch (  java.io.IOException e) {
    if (com.mucommander.Debug.ON) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
}","/** 
 * Test method.
 * @param args command line arguments.
 */
public static void main(String[] args){
  String urls[]=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  try {
    FileURL f;
    for (int i=0; i < urls.length; i++) {
      System.out.println(""String_Node_Str"" + urls[i]);
      f=new FileURL(urls[i]);
      System.out.println(""String_Node_Str"" + f.getPath());
      System.out.println(""String_Node_Str"" + f.getHost());
      System.out.println(""String_Node_Str"" + f.getPort());
      if (f.getLogin() != null)       System.out.println(""String_Node_Str"" + f.getLogin() + ""String_Node_Str""+ f.getPassword());
      System.out.println(""String_Node_Str"" + f.getFilename());
      System.out.println(""String_Node_Str"" + f.getQuery());
      String stringRep=f.toString(true);
      System.out.println(""String_Node_Str"" + stringRep + ""String_Node_Str""+ (stringRep.equals(urls[i]) ? ""String_Node_Str"" : ""String_Node_Str""));
      System.out.println(""String_Node_Str"" + f.getParent());
      if (f.getParent() != null)       System.out.println(""String_Node_Str"" + f.getParent().getPath());
      System.out.println(""String_Node_Str"" + f.getJavaNetURL().toString());
      System.out.println();
    }
  }
 catch (  java.io.IOException e) {
    if (com.mucommander.Debug.ON) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
}",0.987629386518556
45040,"/** 
 * Sets a custom port, -1 for no custom port (use the protocol's defaut port).
 */
public void setPort(int port){
  this.port=port;
}","/** 
 * Sets a custom port, -1 for no custom port (use the protocol's defaut port).
 * @param port new port for this <code>FileURL</code>.
 * @see #getPort()
 */
public void setPort(int port){
  this.port=port;
}",0.7885714285714286
45041,"/** 
 * Copies the properties of the given FileURL into this FileURL.
 */
public void copyProperties(FileURL url){
  Enumeration propertyKeys=url.getPropertyKeys();
  if (propertyKeys != null) {
    String key;
    while (propertyKeys.hasMoreElements()) {
      key=(String)propertyKeys.nextElement();
      setProperty(key,url.getProperty(key));
    }
  }
}","/** 
 * Copies the properties of the given FileURL into this FileURL.
 * @param url url whose properties should be copied.
 */
public void copyProperties(FileURL url){
  Enumeration propertyKeys=url.getPropertyKeys();
  if (propertyKeys != null) {
    String key;
    while (propertyKeys.hasMoreElements()) {
      key=(String)propertyKeys.nextElement();
      setProperty(key,url.getProperty(key));
    }
  }
}",0.9310793237971392
45042,"/** 
 * Sets the credentials (login and password) contained by this FileURL. Any credentials contained by this FileURL will be discarded. Null can be passed to discard existing credentials.
 * @param credentials the new credentials to use, replacing any existing credentials. If null is passed, existingcredentials will be discarded. 
 */
public void setCredentials(Credentials credentials){
  if (credentials == null || credentials.isEmpty())   this.credentials=null;
 else   this.credentials=credentials;
}","/** 
 * Sets the credentials (login and password) contained by this FileURL. Any credentials contained by this FileURL will be discarded. Null can be passed to discard existing credentials.
 * @param credentials the new credentials to use, replacing any existing credentials. If null is passed, existingcredentials will be discarded. 
 * @see #getCredentials()
 */
public void setCredentials(Credentials credentials){
  if (credentials == null || credentials.isEmpty())   this.credentials=null;
 else   this.credentials=credentials;
}",0.9750479846449136
45043,"/** 
 * Returns true if this FileURL contains credentials. If true is returned,   {@link #getCredentials()}will return a non-null value.
 */
public boolean containsCredentials(){
  return credentials != null;
}","/** 
 * Returns true if this FileURL contains credentials. If true is returned,   {@link #getCredentials()}will return a non-null value.
 * @return <code>true</code> if this <code>FileURL</code> contains credentials, <code>false</code> otherwise.
 */
public boolean containsCredentials(){
  return credentials != null;
}",0.7924528301886793
45044,"/** 
 * Returns the path part of this FileURL (e.g. /webstart/mucommander.jnlp for http://mucommander.com/webstart/mucommander.jnlp).
 */
public String getPath(){
  return path;
}","/** 
 * Returns the path part of this FileURL (e.g. /webstart/mucommander.jnlp for http://mucommander.com/webstart/mucommander.jnlp).
 * @return the path part of this <code>FileURL</code>.
 * @see #setPath(String)
 */
public String getPath(){
  return path;
}",0.817351598173516
45045,"/** 
 * Sets the query part of this FileURL, <code>null</code> for no query part.
 */
public void setQuery(String query){
  this.query=query;
}","/** 
 * Sets the query part of this FileURL, <code>null</code> for no query part.
 * @param query new query part for this <code>FileURL</code>.
 * @see #getQuery()
 */
public void setQuery(String query){
  this.query=query;
}",0.7771739130434783
45046,"/** 
 * Returns the host part of this FileURL (e.g. google.com), <code>null</code> if this FileURL doesn't contain any host.
 */
public String getHost(){
  return host;
}","/** 
 * Returns the host part of this FileURL (e.g. google.com), <code>null</code> if this FileURL doesn't contain any host.
 * @return the host part of this <code>FileURL</code>.
 * @see #setHost(String)
 */
public String getHost(){
  return host;
}",0.8095238095238095
45047,"/** 
 * Returns the query part of this FileURL if there is one (e.g. ?dummy=1&void=1 for http://mucommander.com/useless.php?dummy=1&void=1), <code>null</code> otherwise.
 */
public String getQuery(){
  return query;
}","/** 
 * Returns the query part of this FileURL if there is one (e.g. ?dummy=1&void=1 for http://mucommander.com/useless.php?dummy=1&void=1), <code>null</code> otherwise.
 * @return the query part of this <code>FileURL</code> if present, <code>null</code> otherwise.
 * @see #setQuery(String)
 */
public String getQuery(){
  return query;
}",0.7805755395683454
45048,"/** 
 * Sets the host part of this FileURL, <code>null</code> for no host.
 */
public void setHost(String host){
  this.host=host;
}","/** 
 * Sets the host part of this FileURL, <code>null</code> for no host.
 * @param host new host part for this <code>FileURL</code>.
 * @see #getHost()
 */
public void setHost(String host){
  this.host=host;
}",0.7696793002915452
45049,"/** 
 * Returns this FileURL's parent, or null if this FileURL has no parent (path is ""/""). The returned parent will have the same protocol, host, port, credentials and properties as this FileURL. The filename and query parts of this FileURL (if any) will not be set in the returned parent, both will be null. <p>Note: this method returns a new FileURL instance everytime it is called, and all mutable fields of this FileURL are cloned. Therefore the returned parent can be safely modified without risking to modify other FileURL instances.</p>
 */
public FileURL getParent(){
  if (!(path.equals(""String_Node_Str"") || path.equals(""String_Node_Str""))) {
    String separator=getPathSeparator();
    String parentPath=path.endsWith(separator) ? path.substring(0,path.length() - separator.length()) : path;
    int lastSeparatorPos=parentPath.lastIndexOf(separator);
    if (lastSeparatorPos != -1) {
      FileURL parentURL=new FileURL();
      parentURL.protocol=protocol;
      parentURL.host=host;
      parentURL.port=port;
      parentURL.path=parentPath.substring(0,lastSeparatorPos + 1);
      parentURL.filename=getFilenameFromPath(parentURL.path,separator);
      parentURL.credentials=credentials;
      if (properties != null)       parentURL.properties=new Hashtable(properties);
      return parentURL;
    }
  }
  return null;
}","/** 
 * Returns this FileURL's parent, or null if this FileURL has no parent (path is ""/""). The returned parent will have the same protocol, host, port, credentials and properties as this FileURL. The filename and query parts of this FileURL (if any) will not be set in the returned parent, both will be null. <p>Note: this method returns a new FileURL instance everytime it is called, and all mutable fields of this FileURL are cloned. Therefore the returned parent can be safely modified without risking to modify other FileURL instances.</p>
 * @return this <code>FileURL</code>'s parent, <code>null</code> if it doesn't have one.
 */
public FileURL getParent(){
  if (!(path.equals(""String_Node_Str"") || path.equals(""String_Node_Str""))) {
    String separator=getPathSeparator();
    String parentPath=path.endsWith(separator) ? path.substring(0,path.length() - separator.length()) : path;
    int lastSeparatorPos=parentPath.lastIndexOf(separator);
    if (lastSeparatorPos != -1) {
      FileURL parentURL=new FileURL();
      parentURL.protocol=protocol;
      parentURL.host=host;
      parentURL.port=port;
      parentURL.path=parentPath.substring(0,lastSeparatorPos + 1);
      parentURL.filename=getFilenameFromPath(parentURL.path,separator);
      parentURL.credentials=credentials;
      if (properties != null)       parentURL.properties=new Hashtable(properties);
      return parentURL;
    }
  }
  return null;
}",0.9678816311800794
45050,"/** 
 * Returns the value corresponding to the given property's name, null if the property doesn't exist (has no value).
 */
public String getProperty(String name){
  return properties == null ? null : (String)properties.get(name);
}","/** 
 * Returns the value corresponding to the given property's name, null if the property doesn't exist (has no value).
 * @param name name of the property whose value should be retrieved.
 * @return      the value associated with the specified <code>name</code>, <code>null</code> if not found.
 * @see #setProperty(String,String)
 */
public String getProperty(String name){
  return properties == null ? null : (String)properties.get(name);
}",0.640117994100295
45051,"/** 
 * Sets the path part of this FileURL. The specified path must not be <code>null</code>.
 */
public void setPath(String path){
  this.path=path;
  this.filename=getFilenameFromPath(path,getPathSeparator());
}","/** 
 * Sets the path part of this FileURL. The specified path must not be <code>null</code>.
 * @param path new path part for this <code>FileURL</code>.
 * @see #getPath()
 */
public void setPath(String path){
  this.path=path;
  this.filename=getFilenameFromPath(path,getPathSeparator());
}",0.8435643564356435
45052,"/** 
 * Returns the protocol part of this FileURL (e.g. smb). The returned protocol may never be <code>null</code>.
 */
public String getProtocol(){
  return protocol;
}","/** 
 * Returns the protocol part of this FileURL (e.g. smb). The returned protocol may never be <code>null</code>.
 * @return the protocol part of this <code>FileURL</code>.
 * @see #setProtocol(String)
 */
public String getProtocol(){
  return protocol;
}",0.7934272300469484
45053,"/** 
 * Returns the login specified in this FileURL (e.g. maxence for ftp://maxence@mucommander.com), <code>null</code> otherwise.
 */
public String getLogin(){
  return credentials == null ? null : credentials.getLogin();
}","/** 
 * Returns the login specified in this FileURL (e.g. maxence for ftp://maxence@mucommander.com), <code>null</code> otherwise.
 * @return the login specified in this <code>FileURL</code>.
 */
public String getLogin(){
  return credentials == null ? null : credentials.getLogin();
}",0.8801571709233792
45054,"/** 
 * Creates a new FileURL from the given URL string.
 */
public FileURL(String url) throws MalformedURLException {
  try {
    int pos;
    int protocolDelimPos=url.indexOf(""String_Node_Str"");
    int urlLen=url.length();
    if (protocolDelimPos == -1) {
      if ((!LocalFile.USES_ROOT_DRIVES && url.startsWith(""String_Node_Str"")) || (LocalFile.USES_ROOT_DRIVES && url.indexOf(""String_Node_Str"") == 1) || url.startsWith(""String_Node_Str"")) {
        protocol=FileProtocols.FILE;
        host=LOCALHOST;
        String pathSeparator=getPathSeparator(FileProtocols.FILE);
        path=canonizePath(url,pathSeparator,true);
        filename=getFilenameFromPath(path,pathSeparator);
        return;
      }
 else       if (url.startsWith(""String_Node_Str"") && urlLen > 2) {
        if (PlatformManager.WINDOWS.isCurrent()) {
          pos=url.indexOf('\\',2);
          if (pos == -1)           url=FileProtocols.FILE + ""String_Node_Str"" + url.substring(2);
 else           url=FileProtocols.FILE + ""String_Node_Str"" + url.substring(2,pos)+ ""String_Node_Str""+ (pos == urlLen - 1 ? ""String_Node_Str"" : url.substring(pos + 1));
          protocolDelimPos=FileProtocols.FILE.length();
        }
 else {
          url=FileProtocols.SMB + ""String_Node_Str"" + url.substring(2).replace('\\','/');
          protocolDelimPos=FileProtocols.SMB.length();
        }
        urlLen=url.length();
      }
 else {
        throw new MalformedURLException(""String_Node_Str"" + url);
      }
    }
    protocol=url.substring(0,protocolDelimPos);
    pos=protocolDelimPos + 3;
    int separatorPos=url.indexOf('/',pos);
    int questionMarkPos=FileProtocols.HTTP.equals(protocol) || FileProtocols.HTTPS.equals(protocol) ? url.indexOf('?',pos) : -1;
    int hostEndPos;
    if (separatorPos != -1)     hostEndPos=separatorPos;
 else     if (questionMarkPos != -1)     hostEndPos=questionMarkPos;
 else     hostEndPos=urlLen;
    String urlBP=url.substring(pos,hostEndPos);
    pos=0;
    int atPos=urlBP.lastIndexOf('@');
    int colonPos;
    if (atPos != -1 && (separatorPos == -1 || atPos < separatorPos)) {
      colonPos=urlBP.indexOf(':');
      String login=urlBP.substring(0,colonPos == -1 ? atPos : colonPos);
      String password;
      if (colonPos != -1)       password=urlBP.substring(colonPos + 1,atPos);
 else       password=null;
      if (!""String_Node_Str"".equals(login) || !(password == null || ""String_Node_Str"".equals(password)))       this.credentials=new Credentials(login,password);
      pos=atPos + 1;
    }
    colonPos=urlBP.indexOf(':',pos);
    if (colonPos != -1) {
      host=urlBP.substring(pos,colonPos);
      port=Integer.parseInt(urlBP.substring(colonPos + 1));
    }
 else {
      host=urlBP.substring(pos);
    }
    if (host.equals(""String_Node_Str""))     host=null;
    pos=hostEndPos;
    path=url.substring(pos,questionMarkPos == -1 ? urlLen : questionMarkPos);
    if (path.equals(""String_Node_Str""))     path=""String_Node_Str"";
    String pathSeparator=getPathSeparator(protocol);
    path=canonizePath(path,pathSeparator,protocol.equals(FileProtocols.FILE));
    if (Debug.ON && path.trim().equals(""String_Node_Str""))     Debug.trace(""String_Node_Str"" + url);
    if (questionMarkPos != -1)     query=url.substring(questionMarkPos);
    filename=getFilenameFromPath(path,pathSeparator);
  }
 catch (  MalformedURLException e) {
    throw e;
  }
catch (  Exception e2) {
    if (com.mucommander.Debug.ON) {
      com.mucommander.Debug.trace(""String_Node_Str"" + url + ""String_Node_Str""+ e2);
      e2.printStackTrace();
    }
    throw new MalformedURLException();
  }
}","/** 
 * Creates a new FileURL from the given URL string.
 * @param url the string to parse as <code>FileURL</code>.
 * @throws MalformedURLException if the specified string isn't a valid URL.
 */
public FileURL(String url) throws MalformedURLException {
  try {
    int pos;
    int protocolDelimPos=url.indexOf(""String_Node_Str"");
    int urlLen=url.length();
    if (protocolDelimPos == -1) {
      if ((!LocalFile.USES_ROOT_DRIVES && url.startsWith(""String_Node_Str"")) || (LocalFile.USES_ROOT_DRIVES && url.indexOf(""String_Node_Str"") == 1) || url.startsWith(""String_Node_Str"")) {
        protocol=FileProtocols.FILE;
        host=LOCALHOST;
        String pathSeparator=getPathSeparator(FileProtocols.FILE);
        path=canonizePath(url,pathSeparator,true);
        filename=getFilenameFromPath(path,pathSeparator);
        return;
      }
 else       if (url.startsWith(""String_Node_Str"") && urlLen > 2) {
        if (PlatformManager.WINDOWS.isCurrent()) {
          pos=url.indexOf('\\',2);
          if (pos == -1)           url=FileProtocols.FILE + ""String_Node_Str"" + url.substring(2);
 else           url=FileProtocols.FILE + ""String_Node_Str"" + url.substring(2,pos)+ ""String_Node_Str""+ (pos == urlLen - 1 ? ""String_Node_Str"" : url.substring(pos + 1));
          protocolDelimPos=FileProtocols.FILE.length();
        }
 else {
          url=FileProtocols.SMB + ""String_Node_Str"" + url.substring(2).replace('\\','/');
          protocolDelimPos=FileProtocols.SMB.length();
        }
        urlLen=url.length();
      }
 else {
        throw new MalformedURLException(""String_Node_Str"" + url);
      }
    }
    protocol=url.substring(0,protocolDelimPos);
    pos=protocolDelimPos + 3;
    int separatorPos=url.indexOf('/',pos);
    int questionMarkPos=FileProtocols.HTTP.equals(protocol) || FileProtocols.HTTPS.equals(protocol) ? url.indexOf('?',pos) : -1;
    int hostEndPos;
    if (separatorPos != -1)     hostEndPos=separatorPos;
 else     if (questionMarkPos != -1)     hostEndPos=questionMarkPos;
 else     hostEndPos=urlLen;
    String urlBP=url.substring(pos,hostEndPos);
    pos=0;
    int atPos=urlBP.lastIndexOf('@');
    int colonPos;
    if (atPos != -1 && (separatorPos == -1 || atPos < separatorPos)) {
      colonPos=urlBP.indexOf(':');
      String login=urlBP.substring(0,colonPos == -1 ? atPos : colonPos);
      String password;
      if (colonPos != -1)       password=urlBP.substring(colonPos + 1,atPos);
 else       password=null;
      if (!""String_Node_Str"".equals(login) || !(password == null || ""String_Node_Str"".equals(password)))       this.credentials=new Credentials(login,password);
      pos=atPos + 1;
    }
    colonPos=urlBP.indexOf(':',pos);
    if (colonPos != -1) {
      host=urlBP.substring(pos,colonPos);
      port=Integer.parseInt(urlBP.substring(colonPos + 1));
    }
 else {
      host=urlBP.substring(pos);
    }
    if (host.equals(""String_Node_Str""))     host=null;
    pos=hostEndPos;
    path=url.substring(pos,questionMarkPos == -1 ? urlLen : questionMarkPos);
    if (path.equals(""String_Node_Str""))     path=""String_Node_Str"";
    String pathSeparator=getPathSeparator(protocol);
    path=canonizePath(path,pathSeparator,protocol.equals(FileProtocols.FILE));
    if (Debug.ON && path.trim().equals(""String_Node_Str""))     Debug.trace(""String_Node_Str"" + url);
    if (questionMarkPos != -1)     query=url.substring(questionMarkPos);
    filename=getFilenameFromPath(path,pathSeparator);
  }
 catch (  MalformedURLException e) {
    throw e;
  }
catch (  Exception e2) {
    if (com.mucommander.Debug.ON) {
      com.mucommander.Debug.trace(""String_Node_Str"" + url + ""String_Node_Str""+ e2);
      e2.printStackTrace();
    }
    throw new MalformedURLException();
  }
}",0.9815800245599672
45055,"/** 
 * Returns the password specified in this FileURL (e.g. blah for ftp://maxence:blah@mucommander.com), <code>null</code> otherwise.
 */
public String getPassword(){
  return credentials == null ? null : credentials.getPassword();
}","/** 
 * Returns the password specified in this FileURL (e.g. blah for ftp://maxence:blah@mucommander.com), <code>null</code> otherwise.
 * @return the password specified in this <code>FileURL</code>.
 */
public String getPassword(){
  return credentials == null ? null : credentials.getPassword();
}",0.8801498127340824
45056,"/** 
 * Returns the port specified in this FileURL (e.g. 8080) if there is one, -1 otherwise. (-1 means the protocol's default port).
 */
public int getPort(){
  return port;
}","/** 
 * Returns the port specified in this FileURL (e.g. 8080) if there is one, -1 otherwise. (-1 means the protocol's default port).
 * @return the port specified in this <code>FileURL</code>.
 * @see #setPort(int)
 */
public int getPort(){
  return port;
}",0.8110599078341014
45057,"/** 
 * Returns the filename part of this FileURL, and if specified, decodes URL-encoded characters (e.g. %5D%35)
 */
public String getFilename(boolean urlDecode){
  try {
    if (urlDecode && filename != null)     return URLDecoder.decode(filename,URL_CHARSET);
  }
 catch (  UnsupportedEncodingException e) {
  }
  return filename;
}","/** 
 * Returns the filename part of this FileURL, and if specified, decodes URL-encoded characters (e.g. %5D%35)
 * @param urlDecode whether to URL-decode the filename.
 * @return the filename part of this <code>FileURL</code>, URL-decoded if necessary.
 * @see #setPath(String)
 * @see #getFilename()
 */
public String getFilename(boolean urlDecode){
  try {
    if (urlDecode && filename != null)     return URLDecoder.decode(filename,URL_CHARSET);
  }
 catch (  UnsupportedEncodingException e) {
  }
  return filename;
}",0.779976717112922
45058,"/** 
 * Sets the given properties (name/value pair) to this FileURL. Properties can be used as a way to pass parameters to AbstractFile constructors.
 */
public void setProperty(String name,String value){
  if (properties == null)   properties=new Hashtable();
  properties.put(name,value);
}","/** 
 * Sets the given properties (name/value pair) to this FileURL. Properties can be used as a way to pass parameters to AbstractFile constructors.
 * @param name  name of the property to set.
 * @param value value for the property.
 * @see #getProperty(String)
 */
public void setProperty(String name,String value){
  if (properties == null)   properties=new Hashtable();
  properties.put(name,value);
}",0.836676217765043
45059,"/** 
 * Tests FileURL instances for equality: <ul <li>credentials (login and password) are not taken into account when testing equality <li>case is ignored <li>there can be a trailing slash or backslash difference in the path of 2 otherwise identical URLs, true will still be returned </ul>
 * @return true if both FileURL instances are equal.
 */
public boolean equals(Object o){
  if (o == null || !(o instanceof FileURL))   return false;
  String url1=toString(false).toLowerCase();
  String url2=((FileURL)o).toString(false).toLowerCase();
  if (url1.equals(url2))   return true;
  int len1=url1.length();
  int len2=url2.length();
  if (Math.abs(len1 - len2) == 1 && (len1 > len2 ? url1.startsWith(url2) : url2.startsWith(url1))) {
    char cdiff=len1 > len2 ? url1.charAt(len1 - 1) : url2.charAt(len2 - 1);
    if (cdiff == '/' || cdiff == '\\')     return true;
  }
  return false;
}","/** 
 * Tests FileURL instances for equality. <p> Two <code>FileURL</code> instances are said to be equal if: <ul> <li>credentials (login and password) are not taken into account when testing equality <li>case is ignored <li>there can be a trailing slash or backslash difference in the path of 2 otherwise identical URLs, true will still be returned </ul> </p>
 * @param o object against which to compare this <code>FileURL</code>.
 * @return   true if both FileURL instances are equal.
 */
public boolean equals(Object o){
  if (o == null || !(o instanceof FileURL))   return false;
  String url1=toString(false).toLowerCase();
  String url2=((FileURL)o).toString(false).toLowerCase();
  if (url1.equals(url2))   return true;
  int len1=url1.length();
  int len2=url2.length();
  if (Math.abs(len1 - len2) == 1 && (len1 > len2 ? url1.startsWith(url2) : url2.startsWith(url1))) {
    char cdiff=len1 > len2 ? url1.charAt(len1 - 1) : url2.charAt(len2 - 1);
    if (cdiff == '/' || cdiff == '\\')     return true;
  }
  return false;
}",0.6739469578783152
45060,"/** 
 * Returns an Enumeration of property keys, or null if this FileURL contains no keys.
 */
public Enumeration getPropertyKeys(){
  return properties == null ? null : properties.keys();
}","/** 
 * Returns an Enumeration of property keys, or null if this FileURL contains no keys.
 * @return an <code>Enumaration</code> on all available property names, <code>null</code> if none.
 */
public Enumeration getPropertyKeys(){
  return properties == null ? null : properties.keys();
}",0.7933194154488518
45061,"/** 
 * Sets the source that will be used to read and write configuration information.
 * @param s new configuration source.
 */
public void setSource(ConfigurationSource s){
synchronized (sourceLock) {
    source=s;
  }
}","/** 
 * Sets the source that will be used to read and write configuration information.
 * @param s new configuration source.
 * @see #getSource()
 */
public void setSource(ConfigurationSource s){
synchronized (sourceLock) {
    source=s;
  }
}",0.9548387096774194
45062,"/** 
 * Returns the value of the specified variable as a double.
 * @param name fully qualified name of the variable whose value should be retrieved.
 * @return                       the variable's value if set, <code>0</code> otherwise.
 * @throws NumberFormatException if the variable's value cannot be cast to a double.
 */
public double getDoubleVariable(String name){
  return ConfigurationSection.getDoubleValue(getVariable(name));
}","/** 
 * Returns the value of the specified variable as a double.
 * @param name fully qualified name of the variable whose value should be retrieved.
 * @return                       the variable's value if set, <code>0</code> otherwise.
 * @throws NumberFormatException if the variable's value cannot be cast to a double.
 * @see #setVariable(String,double)
 * @see #getVariable(String,double)
 */
public double getDoubleVariable(String name){
  return ConfigurationSection.getDoubleValue(getVariable(name));
}",0.9242105263157896
45063,"/** 
 * Adds the specified object to the list of registered configuration listeners.
 * @param listener object to register as a configuration listener.
 */
public static void addConfigurationListener(ConfigurationListener listener){
  listeners.put(listener,null);
}","/** 
 * Adds the specified object to the list of registered configuration listeners.
 * @param listener object to register as a configuration listener.
 * @see #removeConfigurationListener(ConfigurationListener)
 */
public static void addConfigurationListener(ConfigurationListener listener){
  listeners.put(listener,null);
}",0.8209459459459459
45064,"/** 
 * Removes the specified object from the list of registered configuration listeners.
 * @param listener object to remove from the list of registered configuration listeners.
 */
public static void removeConfigurationListener(ConfigurationListener listener){
  listeners.remove(listener);
}","/** 
 * Removes the specified object from the list of registered configuration listeners.
 * @param listener object to remove from the list of registered configuration listeners.
 * @see #addConfigurationListener(ConfigurationListener)
 */
public static void removeConfigurationListener(ConfigurationListener listener){
  listeners.remove(listener);
}",0.827906976744186
45065,"/** 
 * Returns the value of the specified variable as a long.
 * @param name fully qualified name of the variable whose value should be retrieved.
 * @return                       the variable's value if set, <code>0</code> otherwise.
 * @throws NumberFormatException if the variable's value cannot be cast to a long.
 */
public long getLongVariable(String name){
  return ConfigurationSection.getLongValue(getVariable(name));
}","/** 
 * Returns the value of the specified variable as a long.
 * @param name fully qualified name of the variable whose value should be retrieved.
 * @return                       the variable's value if set, <code>0</code> otherwise.
 * @throws NumberFormatException if the variable's value cannot be cast to a long.
 * @see #setVariable(String,long)
 * @see #getVariable(String,long)
 */
public long getLongVariable(String name){
  return ConfigurationSection.getLongValue(getVariable(name));
}",0.9265658747300216
45066,"/** 
 * Returns the value of the specified variable as an integer.
 * @param name fully qualified name of the variable whose value should be retrieved.
 * @return                       the variable's value if set, <code>0</code> otherwise.
 * @throws NumberFormatException if the variable's value cannot be cast to an integer.
 */
public int getIntegerVariable(String name){
  return ConfigurationSection.getIntegerValue(getVariable(name));
}","/** 
 * Returns the value of the specified variable as an integer.
 * @param name fully qualified name of the variable whose value should be retrieved.
 * @return                       the variable's value if set, <code>0</code> otherwise.
 * @throws NumberFormatException if the variable's value cannot be cast to an integer.
 * @see #setVariable(String,int)
 * @see #getVariable(String,int)
 */
public int getIntegerVariable(String name){
  return ConfigurationSection.getIntegerValue(getVariable(name));
}",0.9305263157894736
45067,"/** 
 * Returns the value of the specified variable as a   {@link ValueList}.
 * @param name      fully qualified name of the variable whose value should be retrieved.
 * @param separator character used to split the variable's value into a list.
 * @return           the variable's value if set, <code>null</code> otherwise.
 */
public ValueList getListVariable(String name,String separator){
  return ConfigurationSection.getListValue(getVariable(name),separator);
}","/** 
 * Returns the value of the specified variable as a   {@link ValueList}.
 * @param name      fully qualified name of the variable whose value should be retrieved.
 * @param separator character used to split the variable's value into a list.
 * @return           the variable's value if set, <code>null</code> otherwise.
 * @see #setVariable(String,List,String)
 * @see #getVariable(String,List,String)
 */
public ValueList getListVariable(String name,String separator){
  return ConfigurationSection.getListValue(getVariable(name),separator);
}",0.9192913385826772
45068,"/** 
 * Returns the value of the specified variable as a float.
 * @param name fully qualified name of the variable whose value should be retrieved.
 * @return                       the variable's value if set, <code>0</code> otherwise.
 * @throws NumberFormatException if the variable's value cannot be cast to a float.
 */
public float getFloatVariable(String name){
  return ConfigurationSection.getFloatValue(getVariable(name));
}","/** 
 * Returns the value of the specified variable as a float.
 * @param name fully qualified name of the variable whose value should be retrieved.
 * @return                       the variable's value if set, <code>0</code> otherwise.
 * @throws NumberFormatException if the variable's value cannot be cast to a float.
 * @see #setVariable(String,float)
 * @see #getVariable(String,float)
 */
public float getFloatVariable(String name){
  return ConfigurationSection.getFloatValue(getVariable(name));
}",0.9253731343283582
45069,"/** 
 * Sets the value of the specified variable. <p> This method will return <code>false</code> if it didn't modify <code>name</code>'s value. This, however, is not a way of indicating that the call failed: <code>false</code> is only ever returned if the previous value is equal to the new value. </p> <p> If the value of the specified variable is actually modified, an   {@link ConfigurationEvent event} will be passed to alllisteners. </p>
 * @param name  fully qualified name of the variable to set.
 * @param value new value for the variable.
 * @return       <code>true</code> if this call resulted in a modification of the variable's value, <code>false</code> otherwise.
 */
public boolean setVariable(String name,double value){
  return setVariable(name,ConfigurationSection.getValue(value));
}","/** 
 * Sets the value of the specified variable. <p> This method will return <code>false</code> if it didn't modify <code>name</code>'s value. This, however, is not a way of indicating that the call failed: <code>false</code> is only ever returned if the previous value is equal to the new value. </p> <p> If the value of the specified variable is actually modified, an   {@link ConfigurationEvent event} will be passed to alllisteners. </p>
 * @param name  fully qualified name of the variable to set.
 * @param value new value for the variable.
 * @return       <code>true</code> if this call resulted in a modification of the variable's value, <code>false</code> otherwise.
 * @see #getDoubleVariable(String)
 * @see #getVariable(String,double)
 */
public boolean setVariable(String name,double value){
  return setVariable(name,ConfigurationSection.getValue(value));
}",0.9576119402985076
45070,"/** 
 * Retrieves the value of the specified variable as a double. <p> If the variable isn't set, this method will set it to <code>defaultValue</code> before returning it. If this happens, a configuration   {@link ConfigurationEvent event} willbe sent to all registered listeners. </p>
 * @param name                  name of the variable to retrieve.
 * @param defaultValue          value to use if <code>name</code> is not set.
 * @return                       the specified variable's value.
 * @throws NumberFormatException if the variable's value cannot be cast to a double.
 */
public double getVariable(String name,double defaultValue){
  return ConfigurationSection.getDoubleValue(getVariable(name,ConfigurationSection.getValue(defaultValue)));
}","/** 
 * Retrieves the value of the specified variable as a double. <p> If the variable isn't set, this method will set it to <code>defaultValue</code> before returning it. If this happens, a configuration   {@link ConfigurationEvent event} willbe sent to all registered listeners. </p>
 * @param name                  name of the variable to retrieve.
 * @param defaultValue          value to use if <code>name</code> is not set.
 * @return                       the specified variable's value.
 * @throws NumberFormatException if the variable's value cannot be cast to a double.
 * @see #setVariable(String,double)
 * @see #getDoubleVariable(String)
 */
public double getVariable(String name,double defaultValue){
  return ConfigurationSection.getDoubleValue(getVariable(name,ConfigurationSection.getValue(defaultValue)));
}",0.9550348321722608
45071,"/** 
 * Returns the value of the specified variable as a boolean.
 * @param name fully qualified name of the variable whose value should be retrieved.
 * @return the variable's value if set, <code>false</code> otherwise.
 */
public boolean getBooleanVariable(String name){
  return ConfigurationSection.getBooleanValue(getVariable(name));
}","/** 
 * Returns the value of the specified variable as a boolean.
 * @param name fully qualified name of the variable whose value should be retrieved.
 * @return the variable's value if set, <code>false</code> otherwise.
 * @see #setVariable(String,boolean)
 * @see #getVariable(String,boolean)
 */
public boolean getBooleanVariable(String name){
  return ConfigurationSection.getBooleanValue(getVariable(name));
}",0.9018567639257294
45072,"/** 
 * Returns the current configuration source.
 * @return the current configuration source, or <code>null</code> if it hasn't been set.
 */
public ConfigurationSource getSource(){
synchronized (sourceLock) {
    return source;
  }
}","/** 
 * Returns the current configuration source.
 * @return the current configuration source, or <code>null</code> if it hasn't been set.
 * @see #setSource(ConfigurationSource)
 */
public ConfigurationSource getSource(){
synchronized (sourceLock) {
    return source;
  }
}",0.9215686274509804
45073,"public void testConstructor(){
  ConfigurationEvent event;
  event=new ConfigurationEvent(conf,VARIABLE_NAME,STRING_VALUE);
  assertEquals(conf,event.getConfiguration());
  assertEquals(VARIABLE_NAME,event.getVariable());
}","/** 
 * Tests event creation.
 */
public void testConstructor(){
  ConfigurationEvent event;
  event=new ConfigurationEvent(conf,VARIABLE_NAME,STRING_VALUE);
  assertEquals(conf,event.getConfiguration());
  assertEquals(VARIABLE_NAME,event.getVariable());
}",0.9291666666666668
45074,"/** 
 * Returns a configuration explorer on the test section.
 */
protected ConfigurationExplorer getExplorer(){
  return new ConfigurationExplorer(conf.getRoot());
}","/** 
 * Returns a configuration explorer on the test section.
 * @return a configuration explorer on the test section.
 */
protected ConfigurationExplorer getExplorer(){
  return new ConfigurationExplorer(conf.getRoot());
}",0.8534704370179949
45075,"/** 
 * Moves to the specified depth.
 */
protected ConfigurationSection moveTo(ConfigurationExplorer explorer,int depth){
  ConfigurationSection section;
  section=conf.getRoot();
  for (int i=0; i < depth; i++) {
    assertTrue(explorer.moveTo(SECTION_NAME + i,false));
    section=explorer.getSection();
  }
  return section;
}","/** 
 * Moves to the specified depth.
 * @param explorer explorer to use when moving to the specified depth.
 * @param depth    depth in the configuration tree at which to move.
 * @return          section that was found at the specified depth.
 */
protected ConfigurationSection moveTo(ConfigurationExplorer explorer,int depth){
  ConfigurationSection section;
  section=conf.getRoot();
  for (int i=0; i < depth; i++) {
    assertTrue(explorer.moveTo(SECTION_NAME + i,false));
    section=explorer.getSection();
  }
  return section;
}",0.7612456747404844
45076,"/** 
 * Creates an instance of   {@link ConfigurationReader}.
 * @return an instance of {@link ConfigurationReader}.
 */
public ConfigurationReader getReaderInstance() throws ReaderConfigurationException ;","/** 
 * Creates an instance of   {@link ConfigurationReader}.
 * @return                              an instance of {@link ConfigurationReader}.
 * @throws ReaderConfigurationException if the factory wasn't properly configured.
 */
public ConfigurationReader getReaderInstance() throws ReaderConfigurationException ;",0.7854406130268199
45077,"/** 
 * Ignored.
 */
public void setOutputStream(OutputStream out){
}","/** 
 * Ignored.
 * @see #getOutputStream()
 */
public void setOutputStream(OutputStream out){
}",0.8363636363636363
45078,"/** 
 * Ignored.
 */
public OutputStream getOutputStream(){
  return null;
}","/** 
 * Ignored.
 * @see #setOutputStream(OutputStream)
 */
public OutputStream getOutputStream(){
  return null;
}",0.7958115183246073
45079,"/** 
 * Creates an instance of   {@link ConfigurationWriter}.
 * @return an instance of {@link ConfigurationWriter}.
 */
public ConfigurationWriter getWriterInstance() throws WriterConfigurationException ;","/** 
 * Creates an instance of   {@link ConfigurationWriter}.
 * @return                              an instance of {@link ConfigurationWriter}.
 * @throws WriterConfigurationException if the factory wasn't properly configured.
 */
public ConfigurationWriter getWriterInstance() throws WriterConfigurationException ;",0.7854406130268199
45080,"/** 
 * Sets the file on which input and output streams will be opened.
 * @param path path to the file on which input and output streams will be opened.
 */
public synchronized void setFile(String path){
  file=new File(path);
}","/** 
 * Sets the file on which input and output streams will be opened.
 * @param path path to the file on which input and output streams will be opened.
 * @see #setFile(File)
 * @see #getFile()
 */
public synchronized void setFile(String path){
  file=new File(path);
}",0.916
45081,"/** 
 * Returns the file on which input and output streams are opened.
 * @return the file on which input and output streams are opened.
 */
public synchronized File getFile(){
  return file;
}","/** 
 * Returns the file on which input and output streams are opened.
 * @return the file on which input and output streams are opened.
 * @see #setFile(File)
 * @see #setFile(String)
 */
public synchronized File getFile(){
  return file;
}",0.8894009216589862
45082,"/** 
 * Tests the source's streams.
 */
public void testStreams() throws IOException {
  FileConfigurationSource source;
  OutputStream out;
  InputStream in;
  out=null;
  in=null;
  source=new FileConfigurationSource(file);
  try {
    (out=source.getOutputStream()).write(TEST_VALUE.getBytes());
  }
  finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      Exception e) {
      }
    }
  }
  try {
    assertEquals(TEST_VALUE,read(in=source.getInputStream()));
  }
  finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e) {
      }
    }
  }
}","/** 
 * Tests the source's streams.
 * @throws IOException if an IO related error occurs.
 */
public void testStreams() throws IOException {
  FileConfigurationSource source;
  OutputStream out;
  InputStream in;
  out=null;
  in=null;
  source=new FileConfigurationSource(file);
  try {
    (out=source.getOutputStream()).write(TEST_VALUE.getBytes());
  }
  finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      Exception e) {
      }
    }
  }
  try {
    assertEquals(TEST_VALUE,read(in=source.getInputStream()));
  }
  finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e) {
      }
    }
  }
}",0.9584615384615384
45083,"/** 
 * Path to your application's JAR file. <p> In order for the application to start, the JAR file must be executable. Click <a href=""http://java.sun.com/j2se/javadoc/"">here</a> to learn more about making JAR files executable. </p>
 * @ant.required
 */
public void setJar(File f){
  jar=f;
}","/** 
 * Path to your application's JAR file. <p> In order for the application to start, the JAR file must be executable. Click <a href=""http://java.sun.com/developer/Books/javaprogramming/JAR/basics/manifest.html"">here</a> to learn more about making JAR files executable. </p>
 * @ant.required
 */
public void setJar(File f){
  jar=f;
}",0.90302066772655
45084,"/** 
 * Enables/disables Bonjour services discovery. If currently active and false is specified, current services will be lost and   {@link #getServices()} will return an empty array. If currently inactive and true is specified,services discovery will be immediately started but it may take a while (a few seconds at least) to collect services.
 */
public static void setActive(boolean enabled){
  if (enabled && jmDNS == null) {
    try {
      jmDNS=new JmDNS();
      int nbServices=KNOWN_SERVICE_TYPES.length;
      for (int i=0; i < nbServices; i++)       jmDNS.addServiceListener(KNOWN_SERVICE_TYPES[i][0],instance);
    }
 catch (    IOException e) {
      if (Debug.ON)       Debug.trace(""String_Node_Str"" + e);
    }
  }
 else   if (!enabled && jmDNS != null) {
    jmDNS.close();
    services.clear();
    jmDNS=null;
  }
}","/** 
 * Enables/disables Bonjour services discovery. If currently active and false is specified, current services will be lost and   {@link #getServices()} will return an empty array. If currently inactive and true is specified,services discovery will be immediately started but it may take a while (a few seconds at least) to collect services.
 * @param enabled whether Bonjour services discovery should be enabled.
 */
public static void setActive(boolean enabled){
  if (enabled && jmDNS == null) {
    try {
      jmDNS=new JmDNS();
      int nbServices=KNOWN_SERVICE_TYPES.length;
      for (int i=0; i < nbServices; i++)       jmDNS.addServiceListener(KNOWN_SERVICE_TYPES[i][0],instance);
    }
 catch (    IOException e) {
      if (Debug.ON)       Debug.trace(""String_Node_Str"" + e);
    }
  }
 else   if (!enabled && jmDNS != null) {
    jmDNS.close();
    services.clear();
    jmDNS=null;
  }
}",0.9585730724971232
45085,"/** 
 * Returns all currently available Bonjour services. The returned array may be empty but never null. If BonjourDirectory is not currently active (  {@link #isActive()}, an empty array will be returned.
 */
public static BonjourService[] getServices(){
  BonjourService servicesArray[]=new BonjourService[services.size()];
  services.toArray(servicesArray);
  return servicesArray;
}","/** 
 * Returns all currently available Bonjour services. The returned array may be empty but never null. If BonjourDirectory is not currently active (  {@link #isActive()}, an empty array will be returned.
 * @return all currently available Bonjour services
 */
public static BonjourService[] getServices(){
  BonjourService servicesArray[]=new BonjourService[services.size()];
  services.toArray(servicesArray);
  return servicesArray;
}",0.937046004842615
45086,"/** 
 * Returns true if Bonjour services discovery is currently running.
 */
public static boolean isActive(){
  return jmDNS != null;
}","/** 
 * Returns <code>true</code> if Bonjour services discovery is currently running.
 * @return <code>true</code> if Bonjour services discovery is currently running, <code>false</code> otherwise.
 */
public static boolean isActive(){
  return jmDNS != null;
}",0.6666666666666666
45087,"public BonjourMenu(MainFrame mainFrame){
  super(Translator.get(""String_Node_Str""));
  this.mainFrame=mainFrame;
  setIcon(IconManager.getIcon(IconManager.FILE_ICON_SET,""String_Node_Str""));
  addMenuListener(this);
}","/** 
 * Creates a new instance of <code>BonjourMenu</code>.
 * @param mainFrame frame to which the menu will be attached.
 */
public BonjourMenu(MainFrame mainFrame){
  super(Translator.get(""String_Node_Str""));
  this.mainFrame=mainFrame;
  setIcon(IconManager.getIcon(IconManager.FILE_ICON_SET,""String_Node_Str""));
  addMenuListener(this);
}",0.7741935483870968
45088,"/** 
 * Returns the name appended with the URL's protocol.
 */
public String getNameWithProtocol(){
  return name + ""String_Node_Str"" + url.getProtocol().toUpperCase()+ ""String_Node_Str"";
}","/** 
 * Returns the name appended with the URL's protocol.
 * @return the name appended with the URL's protocol.
 */
public String getNameWithProtocol(){
  return name + ""String_Node_Str"" + url.getProtocol().toUpperCase()+ ""String_Node_Str"";
}",0.875
45089,"/** 
 * Returns the location of this service.
 */
public FileURL getURL(){
  return url;
}","/** 
 * Returns the location of this service.
 * @return the location of this service.
 */
public FileURL getURL(){
  return url;
}",0.8144796380090498
45090,"/** 
 * Returns the service's name.
 */
public String getName(){
  return name;
}","/** 
 * Returns the service's name.
 * @return the service's name.
 */
public String getName(){
  return name;
}",0.8393782383419689
45091,"/** 
 * Changes this bookmark's name to the given one and fires an event to registered   {@link BookmarkListener}instances.
 */
public void setName(String newName){
  if (newName == null)   newName=""String_Node_Str"";
  if (!newName.equals(this.name)) {
    this.name=newName;
    BookmarkManager.fireBookmarksChanged();
  }
}","/** 
 * Changes this bookmark's name to the given one and fires an event to registered   {@link BookmarkListener}instances.
 * @param newName bookmark's new name.
 * @see #getName()
 */
public void setName(String newName){
  if (newName == null)   newName=""String_Node_Str"";
  if (!newName.equals(this.name)) {
    this.name=newName;
    BookmarkManager.fireBookmarksChanged();
  }
}",0.9180790960451978
45092,"/** 
 * Returns this bookmark's location which should normally designate a path or file URL, but which isn't necessarily valid nor exists.
 */
public String getLocation(){
  return location;
}","/** 
 * Returns this bookmark's location which should normally designate a path or file URL, but which isn't necessarily valid nor exists.
 * @return this bookmark's location.
 * @see #setLocation(String)
 */
public String getLocation(){
  return location;
}",0.8533333333333334
45093,"/** 
 * Returns this bookmark's name.
 */
public String getName(){
  return name;
}","/** 
 * Returns this bookmark's name.
 * @return this bookmark's name.
 * @see #setName(String)
 */
public String getName(){
  return name;
}",0.7410714285714286
45094,"/** 
 * Changes this bookmark's location to the given one and fires an event to registered   {@link BookmarkListener}instances.
 */
public void setLocation(String newLocation){
  if (newLocation == null)   newLocation=""String_Node_Str"";
  if (!newLocation.equals(this.location)) {
    this.location=newLocation;
    BookmarkManager.fireBookmarksChanged();
  }
}","/** 
 * Changes this bookmark's location to the given one and fires an event to registered   {@link BookmarkListener}instances.
 * @param newLocation bookmark's new location.
 * @see #getLocation()
 */
public void setLocation(String newLocation){
  if (newLocation == null)   newLocation=""String_Node_Str"";
  if (!newLocation.equals(this.location)) {
    this.location=newLocation;
    BookmarkManager.fireBookmarksChanged();
  }
}",0.9116161616161615
45095,"public void addBookmark(String name,String location) throws BookmarkException ;","/** 
 * Notifies the builder of a new bookmark in the list.
 * @param name              bookmark's name.
 * @param location          bookmark's location.
 * @throws BookmarkException if an error occurs.
 */
public void addBookmark(String name,String location) throws BookmarkException ;",0.4328767123287671
45096,public void startBookmarks() throws BookmarkException ;,"/** 
 * Notifies the builder that the bookmark list is starting.
 * @throws BookmarkException if an error occurs.
 */
public void startBookmarks() throws BookmarkException ;",0.4824561403508772
45097,public void endBookmarks() throws BookmarkException ;,"/** 
 * Notifies the builder that the bookmark list is finished.
 * @throws BookmarkException if an error occurs.
 */
public void endBookmarks() throws BookmarkException ;",0.4732142857142857
45098,"public BookmarkException(String message,Throwable cause){
  super(message,cause);
}","/** 
 * Creates a new exception with the specified message and cause.
 * @param message exception's message.
 * @param cause   root cause of the new exception.
 */
public BookmarkException(String message,Throwable cause){
  super(message,cause);
}",0.503030303030303
45099,"/** 
 * Removes the specified BookmarkListener from the list of registered listeners.
 * @param listener the BookmarkListener to remove from the list of registered listeners.
 */
public static void removeBookmarkListener(BookmarkListener listener){
synchronized (listeners) {
    listeners.remove(listener);
  }
}","/** 
 * Removes the specified BookmarkListener from the list of registered listeners.
 * @param listener the BookmarkListener to remove from the list of registered listeners.
 * @see #addBookmarkListener(BookmarkListener)
 */
public static void removeBookmarkListener(BookmarkListener listener){
synchronized (listeners) {
    listeners.remove(listener);
  }
}",0.9301634472511144
45100,"public static synchronized void readBookmarks(InputStream in,BookmarkBuilder builder) throws Exception {
  new BookmarkParser().parse(in,builder);
}","/** 
 * Reads bookmarks from the specified <code>InputStream</code> and passes messages to the specified   {@link BookmarkBuilder}.
 * @param in        where to read bookmarks from.
 * @param builder   where to send builing messages to.
 * @throws Exception if an error occurs.
 */
public static synchronized void readBookmarks(InputStream in,BookmarkBuilder builder) throws Exception {
  new BookmarkParser().parse(in,builder);
}",0.5121107266435986
45101,"/** 
 * Adds the specified BookmarkListener to the list of registered listeners. <p>Listeners are stored as weak references so   {@link #removeBookmarkListener(BookmarkListener)}doesn't need to be called for listeners to be garbage collected when they're not used anymore.
 * @param listener the BookmarkListener to add to the list of registered listeners.
 */
public static void addBookmarkListener(BookmarkListener listener){
synchronized (listeners) {
    listeners.put(listener,null);
  }
}","/** 
 * Adds the specified BookmarkListener to the list of registered listeners. <p>Listeners are stored as weak references so   {@link #removeBookmarkListener(BookmarkListener)}doesn't need to be called for listeners to be garbage collected when they're not used anymore.
 * @param listener the BookmarkListener to add to the list of registered listeners.
 * @see #removeBookmarkListener(BookmarkListener)
 */
public static void addBookmarkListener(BookmarkListener listener){
synchronized (listeners) {
    listeners.put(listener,null);
  }
}",0.9518304431599228
45102,"/** 
 * Specifies whether bookmark events should be fired when a change in the bookmarks is detected. This allows to temporarily suspend events firing when a lot of them are made, for example when editing the bookmarks list. <p>If true is speicified, any subsequent calls to fireBookmarksChanged will be ignored, until this method is called again with false.
 */
public static synchronized void setFireEvents(boolean b){
  if (b) {
    if (!fireEvents && lastBookmarkChangeTime >= lastEventPauseTime) {
      fireEvents=true;
      fireBookmarksChanged();
    }
  }
 else {
    if (fireEvents) {
      fireEvents=false;
      lastEventPauseTime=System.currentTimeMillis();
    }
  }
}","/** 
 * Specifies whether bookmark events should be fired when a change in the bookmarks is detected. This allows to temporarily suspend events firing when a lot of them are made, for example when editing the bookmarks list. <p>If true is speicified, any subsequent calls to fireBookmarksChanged will be ignored, until this method is called again with false.</p>
 * @param b whether to fire events.
 */
public static synchronized void setFireEvents(boolean b){
  if (b) {
    if (!fireEvents && lastBookmarkChangeTime >= lastEventPauseTime) {
      fireEvents=true;
      fireBookmarksChanged();
    }
  }
 else {
    if (fireEvents) {
      fireEvents=false;
      lastEventPauseTime=System.currentTimeMillis();
    }
  }
}",0.9715909090909092
45103,"public static BookmarkBuilder getBookmarkWriter(OutputStream out) throws IOException {
  return new BookmarkWriter(out);
}","/** 
 * Returns a   {@link BookmarkBuilder} that will write all building messages as XML to the specified output stream.
 * @param out where to write the bookmarks' XML content.
 * @return             a {@link BookmarkBuilder} that will write all building messages as XML to the specified output stream.
 * @throws IOException if an IO related error occurs.
 */
public static BookmarkBuilder getBookmarkWriter(OutputStream out) throws IOException {
  return new BookmarkWriter(out);
}",0.1914191419141914
45104,"public static synchronized void loadBookmarks() throws Exception {
  InputStream in;
  in=null;
  isLoading=true;
  try {
    readBookmarks(in=new BackupInputStream(getBookmarksFile()),new Loader());
  }
  finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e) {
      }
    }
    isLoading=false;
  }
}","/** 
 * Loads all available bookmarks.
 * @throws Exception if an error occurs.
 */
public static synchronized void loadBookmarks() throws Exception {
  InputStream in;
  in=null;
  isLoading=true;
  try {
    readBookmarks(in=new BackupInputStream(getBookmarksFile()),new Loader());
  }
  finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e) {
      }
    }
    isLoading=false;
  }
}",0.8920308483290489
45105,"/** 
 * Returns an   {@link AlteredVector} that contains all bookmarks.<p>Important: the returned Vector should not directly be used to add or remove bookmarks, doing so won't trigger any event to registered bookmark listeners. However, it is safe to modify bookmarks individually, events will be properly fired.
 */
public static synchronized AlteredVector getBookmarks(){
  return bookmarks;
}","/** 
 * Returns an   {@link AlteredVector} that contains all bookmarks.<p>Important: the returned Vector should not directly be used to add or remove bookmarks, doing so won't trigger any event to registered bookmark listeners. However, it is safe to modify bookmarks individually, events will be properly fired.
 * @return an {@link AlteredVector} that contains all bookmarks.
 */
public static synchronized AlteredVector getBookmarks(){
  return bookmarks;
}",0.9239766081871345
45106,"public static synchronized void buildBookmarks(BookmarkBuilder builder) throws BookmarkException {
  Iterator iterator;
  Bookmark bookmark;
  builder.startBookmarks();
  iterator=bookmarks.iterator();
  while (iterator.hasNext()) {
    bookmark=(Bookmark)iterator.next();
    builder.addBookmark(bookmark.getName(),bookmark.getLocation());
  }
  builder.endBookmarks();
}","/** 
 * Passes messages about all known bookmarks to the specified builder.
 * @param builder           where to send bookmark building messages.
 * @throws BookmarkException if an error occurs.
 */
public static synchronized void buildBookmarks(BookmarkBuilder builder) throws BookmarkException {
  Iterator iterator;
  Bookmark bookmark;
  builder.startBookmarks();
  iterator=bookmarks.iterator();
  while (iterator.hasNext()) {
    bookmark=(Bookmark)iterator.next();
    builder.addBookmark(bookmark.getName(),bookmark.getLocation());
  }
  builder.endBookmarks();
}",0.6383881230116649
45107,"public Bookmark getBookmark(){
  return bookmark;
}","/** 
 * Returns the underlying bookmark.
 * @return the underlying bookmark.
 */
public Bookmark getBookmark(){
  return bookmark;
}",0.5573770491803278
45108,"/** 
 * Sets the wrapped file's parent.
 * @param parent object to use as the wrapped file's parent.
 */
public void setParent(AbstractFile parent){
  getUnderlyingFile().setParent(parent);
}","/** 
 * Sets the wrapped file's parent.
 * @param parent object to use as the wrapped file's parent.
 * @see #getParent()
 */
public void setParent(AbstractFile parent){
  getUnderlyingFile().setParent(parent);
}",0.9478908188585607
45109,"/** 
 * Returns <code>false</code>. <p> Bookmarks always have all permissions, this is not changeable. Calls to this method will always be ignored. </p>
 * @param access     ignored.
 * @param permission ignored.
 * @param enabled    ignored.
 * @return            <code>false</code>.
 */
public boolean setPermission(int access,int permission,boolean enabled){
  return false;
}","/** 
 * Returns <code>false</code>. <p> Bookmarks always have all permissions, this is not changeable. Calls to this method will always be ignored. </p>
 * @param access     ignored.
 * @param permission ignored.
 * @param enabled    ignored.
 * @return            <code>false</code>.
 * @see #getPermission(int,int)
 */
public boolean setPermission(int access,int permission,boolean enabled){
  return false;
}",0.959493670886076
45110,"/** 
 * Returns the wrapped file's parent.
 * @return the wrapped file's parent.
 */
public AbstractFile getParent() throws IOException {
  return new BookmarkRoot();
}","/** 
 * Returns the wrapped file's parent.
 * @return             the wrapped file's parent.
 * @throws IOException if an IO error occurs.
 * @see #setParent(AbstractFile)
 */
public AbstractFile getParent() throws IOException {
  return new BookmarkRoot();
}",0.6276346604215457
45111,"/** 
 * Returns <code>true</code>. <p> Since bookmarks are always readable, writable and 'openable' by the current user, all permissions are always granted. </p>
 * @param access     ignored.
 * @param permission ignored.
 * @return            <code>true</code>.
 */
public boolean getPermission(int access,int permission){
  return true;
}","/** 
 * Returns <code>true</code>. <p> Since bookmarks are always readable, writable and 'openable' by the current user, all permissions are always granted. </p>
 * @param access     ignored.
 * @param permission ignored.
 * @return            <code>true</code>.
 * @see #setPermission(int,int,boolean)
 */
public boolean getPermission(int access,int permission){
  return true;
}",0.9444444444444444
45112,"/** 
 * Runs the specified command on the wrapped file.
 * @param tokens command to run.
 * @return        a process running the specified command.
 */
public AbstractProcess runProcess(String[] tokens) throws IOException {
  return getUnderlyingFile().runProcess(tokens);
}","/** 
 * Runs the specified command on the wrapped file.
 * @param tokens      command to run.
 * @return             a process running the specified command.
 * @throws IOException if an IO error occurs.
 */
public AbstractProcess runProcess(String[] tokens) throws IOException {
  return getUnderlyingFile().runProcess(tokens);
}",0.7317880794701986
45113,"/** 
 * Returns a message describing the exception.
 */
public String getMessage(){
  return msg;
}","/** 
 * Returns a message describing the exception.
 * @return a message describing the exception.
 */
public String getMessage(){
  return msg;
}",0.8081632653061225
45114,"/** 
 * Returns the URL of the file for which authentication failed.
 */
public FileURL getFileURL(){
  return fileURL;
}","/** 
 * Returns the URL of the file for which authentication failed.
 * @return the URL of the file for which authentication failed.
 */
public FileURL getFileURL(){
  return fileURL;
}",0.7908496732026143
45115,"/** 
 * Returns the login part. Returned login may be an empty string but never null.
 */
public String getLogin(){
  return login;
}","/** 
 * Returns the login part. <p> Returned login may be an empty string but never <code>null</code>. </p>
 * @return the login part.
 */
public String getLogin(){
  return login;
}",0.8444444444444444
45116,"/** 
 * Returns the password part. Returned password may be an empty string but never null.
 */
public String getPassword(){
  return password;
}","/** 
 * Returns the password part. <p> Returned password may be an empty string but never <code>null</code>. </p>
 * @return the password part.
 */
public String getPassword(){
  return password;
}",0.847953216374269
45117,"/** 
 * Returns the password as a masked string, each of the characters replaced by '*' characters. 
 */
public String getMaskedPassword(){
  int passwordLength=password.length();
  StringBuffer maskedPasswordSb=new StringBuffer(passwordLength);
  for (int i=0; i < passwordLength; i++)   maskedPasswordSb.append('*');
  return maskedPasswordSb.toString();
}","/** 
 * Returns the password as a masked string, each of the characters replaced by '*' characters. 
 * @return the password as a masked string.
 */
public String getMaskedPassword(){
  int passwordLength=password.length();
  StringBuffer maskedPasswordSb=new StringBuffer(passwordLength);
  for (int i=0; i < passwordLength; i++)   maskedPasswordSb.append('*');
  return maskedPasswordSb.toString();
}",0.9421052631578948
45118,"/** 
 * Returns true if these credentials are empty, that is both the login and password are empty strings.
 */
public boolean isEmpty(){
  return ""String_Node_Str"".equals(login) && ""String_Node_Str"".equals(password);
}","/** 
 * Returns <code>true</code> if these credentials are empty. <p> Credentials are said to be empty if both login and password are empty strings. </p>
 * @return <code>true</code> if these credentials are empty, <code>false</code> otherwise.
 */
public boolean isEmpty(){
  return ""String_Node_Str"".equals(login) && ""String_Node_Str"".equals(password);
}",0.5739130434782609
45119,"/** 
 * Returns the password as a weakly encrypted string.
 */
public String getEncryptedPassword(){
  return XORCipher.encryptXORBase64(password);
}","/** 
 * Returns the password as a weakly encrypted string.
 * @return the password as a weakly encrypted string.
 */
public String getEncryptedPassword(){
  return XORCipher.encryptXORBase64(password);
}",0.8465909090909091
45120,"/** 
 * Returns the list of known volatile MappedCredentials, stored in a Vector. The returned Vector instance is the one actually used by CredentialsManager, so use it with care.
 */
public static Vector getVolatileCredentials(){
  return volatileCredentials;
}","/** 
 * Returns the list of known volatile   {@link MappedCredentials}, stored in a Vector. <p> The returned Vector instance is the one actually used by CredentialsManager, so use it with care. </p>
 * @return the list of known volatile {@link MappedCredentials}.
 */
public static Vector getVolatileCredentials(){
  return volatileCredentials;
}",0.8618421052631579
45121,"/** 
 * Returns the list of known persistent MappedCredentials, stored in an AlteredVector. Any changes made to the Vector will be detected and will yield to writing the credentials file when  {@link #writeCredentials(boolean)} is called with false.
 */
public static AlteredVector getPersistentCredentials(){
  return persistentCredentials;
}","/** 
 * Returns the list of known persistent   {@link MappedCredentials}, stored in an   {@link AlteredVector}. <p> Any changes made to the Vector will be detected and will yield to writing the credentials file when  {@link #writeCredentials(boolean)} is called with false.</p>
 * @return the list of known persistent {@link MappedCredentials}.
 */
public static AlteredVector getPersistentCredentials(){
  return persistentCredentials;
}",0.5044814340588989
45122,"/** 
 * Returns true if these credentials should be saved when the application terminates.
 */
public boolean isPersistent(){
  return isPersistent;
}","/** 
 * Returns <code>true</code> if these credentials should be saved when the application terminates.
 * @return <code>true</code> if these credentials should be saved when the application terminates, <code>false</code> otherwise.
 */
public boolean isPersistent(){
  return isPersistent;
}",0.6606334841628959
45123,"/** 
 * Returns the location to the server these credentials are associated with. The returned   {@link FileURL} will notcontain any credentials.
 */
public FileURL getRealm(){
  return realm;
}","/** 
 * Returns the location to the server these credentials are associated with. <p> The returned   {@link FileURL} will not contain any credentials.</p>
 * @return the location to the server these credentials are associated with.
 */
public FileURL getRealm(){
  return realm;
}",0.8185654008438819
45124,public void setIsReadable(boolean isReadable) throws CommandException ;,"/** 
 * Adds a <i>readable</i> filter on the current association.
 * @param isReadable       whether readable files must be refused or accepted by the association.
 * @throws CommandException if an error occurs.
 */
public void setIsReadable(boolean isReadable) throws CommandException ;",0.1899441340782122
45125,public void setIsWritable(boolean isWritable) throws CommandException ;,"/** 
 * Adds a <i>writable</i> filter on the current association.
 * @param isWritable       whether writable files must be refused or accepted by the association.
 * @throws CommandException if an error occurs.
 */
public void setIsWritable(boolean isWritable) throws CommandException ;",0.1899441340782122
45126,public void endAssociation() throws CommandException ;,"/** 
 * Notifies the builder that the current association declaration is finished.
 * @throws CommandException if an error ocurs.
 */
public void endAssociation() throws CommandException ;",0.4462809917355372
45127,"public void setMask(String mask,boolean isCaseSensitive) throws CommandException ;","/** 
 * Adds a mask to the current association.
 * @param mask             regular expression that a file name must match in order to match the association.
 * @param isCaseSensitive  whether the regular expression is case sensitive.
 * @throws CommandException if an error occurs.
 */
public void setMask(String mask,boolean isCaseSensitive) throws CommandException ;",0.3644444444444444
45128,public void setIsHidden(boolean isHidden) throws CommandException ;,"/** 
 * Adds a <i>hidden</i> filter on the current association.
 * @param isHidden         whether hidden files must be refused or accepted by the association.
 * @throws CommandException if an error occurs.
 */
public void setIsHidden(boolean isHidden) throws CommandException ;",0.1849710982658959
45129,public void startAssociation(String command) throws CommandException ;,"/** 
 * Notifies the builder that a new association declaration is starting.
 * @param command          command to call when the association is matched.
 * @throws CommandException if an error occurs.
 */
public void startAssociation(String command) throws CommandException ;",0.4057971014492754
45130,public void setIsSymlink(boolean isSymlink) throws CommandException ;,"/** 
 * Adds a <i>symlink</i> filter on the current association.
 * @param isSymlink        whether symbolic links must be refused or accepted by the association.
 * @throws CommandException if an error occurs.
 */
public void setIsSymlink(boolean isSymlink) throws CommandException ;",0.1869688385269121
45131,public void setIsExecutable(boolean isExecutable) throws CommandException ;,"/** 
 * Adds a <i>executable</i> filter on the current association.
 * @param isExecutable     whether executable files must be refused or accepted by the association.
 * @throws CommandException if an error occurs.
 */
public void setIsExecutable(boolean isExecutable) throws CommandException ;",0.4054054054054054
45132,"/** 
 * Returns the specified command's tokens after replacing keywords by the corresponding values from the specified files.
 * @param files file from which to retrieve keyword substitution values.
 * @return the specified command's tokens after replacing keywords by the corresponding values from the specified files.
 */
public static String[] getTokens(String command,AbstractFile[] files){
  Vector tokens;
  char[] buffer;
  StringBuffer currentToken;
  boolean isInQuotes;
  tokens=new Vector();
  command=command.trim();
  currentToken=new StringBuffer(command.length());
  buffer=command.toCharArray();
  isInQuotes=false;
  for (int i=0; i < command.length(); i++) {
    if (buffer[i] == '\""') {
      currentToken.append(buffer[i]);
      isInQuotes=!isInQuotes;
    }
 else     if (buffer[i] == '\\') {
      if (i + 1 != command.length())       currentToken.append(buffer[++i]);
    }
 else     if (buffer[i] == ' ' && !isInQuotes) {
      while (i + 1 < command.length() && buffer[i + 1] == ' ')       i++;
      tokens.add(currentToken.toString());
      currentToken.setLength(0);
    }
 else     if (buffer[i] == KEYWORD_HEADER) {
      if (files == null)       currentToken.append(KEYWORD_HEADER);
 else       if (++i == buffer.length)       currentToken.append(KEYWORD_HEADER);
 else       if (isLegalKeyword(buffer[i])) {
        currentToken.append(getKeywordReplacement(buffer[i],files[0]));
        if (buffer[i] != KEYWORD_VM_PATH) {
          if (!isInQuotes && files.length != 1) {
            tokens.add(currentToken.toString());
            currentToken.setLength(0);
          }
          for (int j=1; j < files.length; j++) {
            if (isInQuotes) {
              currentToken.append(' ');
              currentToken.append(getKeywordReplacement(buffer[i],files[j]));
            }
 else             if (j != files.length - 1)             tokens.add(getKeywordReplacement(buffer[i],files[j]));
 else             currentToken.append(getKeywordReplacement(buffer[i],files[j]));
          }
        }
      }
 else {
        currentToken.append(KEYWORD_HEADER);
        currentToken.append(buffer[i]);
      }
    }
 else     currentToken.append(buffer[i]);
  }
  if (currentToken.length() != 0)   tokens.add(currentToken.toString());
  if (tokens.size() == 0)   return new String[]{""String_Node_Str""};
  return (String[])tokens.toArray(new String[tokens.size()]);
}","/** 
 * Returns the specified command's tokens after replacing keywords by the corresponding values from the specified files.
 * @param command command to tokenize.
 * @param files   file from which to retrieve keyword substitution values.
 * @return         the specified command's tokens after replacing keywords by the corresponding values from the specified files.
 */
public static String[] getTokens(String command,AbstractFile[] files){
  Vector tokens;
  char[] buffer;
  StringBuffer currentToken;
  boolean isInQuotes;
  tokens=new Vector();
  command=command.trim();
  currentToken=new StringBuffer(command.length());
  buffer=command.toCharArray();
  isInQuotes=false;
  for (int i=0; i < command.length(); i++) {
    if (buffer[i] == '\""') {
      currentToken.append(buffer[i]);
      isInQuotes=!isInQuotes;
    }
 else     if (buffer[i] == '\\') {
      if (i + 1 != command.length())       currentToken.append(buffer[++i]);
    }
 else     if (buffer[i] == ' ' && !isInQuotes) {
      while (i + 1 < command.length() && buffer[i + 1] == ' ')       i++;
      tokens.add(currentToken.toString());
      currentToken.setLength(0);
    }
 else     if (buffer[i] == KEYWORD_HEADER) {
      if (files == null)       currentToken.append(KEYWORD_HEADER);
 else       if (++i == buffer.length)       currentToken.append(KEYWORD_HEADER);
 else       if (isLegalKeyword(buffer[i])) {
        currentToken.append(getKeywordReplacement(buffer[i],files[0]));
        if (buffer[i] != KEYWORD_VM_PATH) {
          if (!isInQuotes && files.length != 1) {
            tokens.add(currentToken.toString());
            currentToken.setLength(0);
          }
          for (int j=1; j < files.length; j++) {
            if (isInQuotes) {
              currentToken.append(' ');
              currentToken.append(getKeywordReplacement(buffer[i],files[j]));
            }
 else             if (j != files.length - 1)             tokens.add(getKeywordReplacement(buffer[i],files[j]));
 else             currentToken.append(getKeywordReplacement(buffer[i],files[j]));
          }
        }
      }
 else {
        currentToken.append(KEYWORD_HEADER);
        currentToken.append(buffer[i]);
      }
    }
 else     currentToken.append(buffer[i]);
  }
  if (currentToken.length() != 0)   tokens.add(currentToken.toString());
  if (tokens.size() == 0)   return new String[]{""String_Node_Str""};
  return (String[])tokens.toArray(new String[tokens.size()]);
}",0.9878325427923283
45133,"public Iterator filters(){
  return fileFilter.getFileFilterIterator();
}","/** 
 * Returns an iterator on the various filters that must accept a file for it to match the association.
 * @return an iterator on the various filters that must accept a file for it to match the association.
 */
public Iterator filters(){
  return fileFilter.getFileFilterIterator();
}",0.4044321329639889
45134,"public CommandAssociation(Command command,ChainedFileFilter filter){
  this.command=command;
  this.fileFilter=filter;
}","/** 
 * Creates a new <code>CommandAssociation</code>.
 * @param command command that must be executed if the association is matched.
 * @param filter  filter that files must match in order to be taken into account by the association.
 */
public CommandAssociation(Command command,ChainedFileFilter filter){
  this.command=command;
  this.fileFilter=filter;
}",0.5010438413361169
45135,"public boolean accept(AbstractFile file){
  return fileFilter.match(file);
}","/** 
 * Returns <code>true</code> if the specified file matches the association.
 * @param file file to match against the association.
 * @return      <code>true</code> if the specified file matches the association, <code>false</code> otherwise.
 */
public boolean accept(AbstractFile file){
  return fileFilter.match(file);
}",0.3781094527363184
45136,"/** 
 * Notifies the builder that a new command has been found. </p>
 * @param command          command that has been found.
 * @throws CommandException if an error occurs.
 */
public void addCommand(Command command) throws CommandException ;","/** 
 * Notifies the builder that a new command has been found.
 * @param command          command that has been found.
 * @throws CommandException if an error occurs.
 */
public void addCommand(Command command) throws CommandException ;",0.9895615866388308
45137,"/** 
 * Removes the specified command from the list of registered commands. <p> This method might actually refuse to remove <code>command</code>: if it is associated to any file name filter, a command cannot be removed without, well, messing the system up quite baddly.<br/> If the command is associated to any file name filter, this method will return <code>false</code> and not do anything. </p>
 * @param command command to remove from the list.
 * @return         <code>false</code> if the command could not be removed, <code>true</code> otherwise.
 */
public static boolean removeCommand(Command command){
  if (isCommandAssociated(command))   return false;
  if (commands.remove(command))   wereCommandsModified=true;
  return true;
}","/** 
 * Removes the specified command from the list of registered commands. <p> This method might actually refuse to remove <code>command</code>: if it is associated to any file name filter, a command cannot be removed without, well, messing the system up quite baddly.<br> If the command is associated to any file name filter, this method will return <code>false</code> and not do anything. </p>
 * @param command command to remove from the list.
 * @return         <code>false</code> if the command could not be removed, <code>true</code> otherwise.
 */
public static boolean removeCommand(Command command){
  if (isCommandAssociated(command))   return false;
  if (commands.remove(command))   wereCommandsModified=true;
  return true;
}",0.9993238674780256
45138,"/** 
 * Writes all registered commands to the custom commands file. <p> Data will be written to the path returned by   {@link #getCommandFile()}. Note, however, that this method will not actually do anything if the command list hasn't been modified since the last time it was saved. </p> <p> The command files will be saved as a <i>backed-up file</i> (see   {@link com.mucommander.io.BackupOutputStream}). Its format is described   {@link CommandsXmlConstants here}. </p>
 * @see #loadCommands()
 * @see #getCommandFile()
 * @see #setCommandFile(String)
 * @throws IOException if an I/O error occurs.
 */
public static void writeCommands() throws IOException, CommandException {
  if (wereCommandsModified) {
    BackupOutputStream out;
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + getCommandFile());
    out=null;
    try {
      buildCommands(new CommandWriter(out=new BackupOutputStream(getCommandFile())));
      wereCommandsModified=false;
    }
  finally {
      if (out != null) {
        try {
          out.close();
        }
 catch (        Exception e) {
        }
      }
    }
  }
 else   if (Debug.ON)   Debug.trace(""String_Node_Str"");
}","/** 
 * Writes all registered commands to the custom commands file. <p> Data will be written to the path returned by   {@link #getCommandFile()}. Note, however, that this method will not actually do anything if the command list hasn't been modified since the last time it was saved. </p> <p> The command files will be saved as a <i>backed-up file</i> (see   {@link com.mucommander.io.BackupOutputStream}). Its format is described   {@link CommandsXmlConstants here}. </p>
 * @throws IOException      if an I/O error occurs.
 * @throws CommandException if an error occurs.
 * @see #loadCommands()
 * @see #getCommandFile()
 * @see #setCommandFile(String)
 */
public static void writeCommands() throws IOException, CommandException {
  if (wereCommandsModified) {
    BackupOutputStream out;
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + getCommandFile());
    out=null;
    try {
      buildCommands(new CommandWriter(out=new BackupOutputStream(getCommandFile())));
      wereCommandsModified=false;
    }
  finally {
      if (out != null) {
        try {
          out.close();
        }
 catch (        Exception e) {
        }
      }
    }
  }
 else   if (Debug.ON)   Debug.trace(""String_Node_Str"");
}",0.9085545722713864
45139,"/** 
 * Loads the custom commands XML File. <p> The command files will be loaded as a <i>backed-up file</i> (see   {@link com.mucommander.io.BackupInputStream}). Its format is described   {@link CommandsXmlConstants here}. </p>
 * @see #writeCommands()
 * @see #getCommandFile()
 * @see #setCommandFile(String)
 */
public static void loadCommands() throws IOException {
  AbstractFile file;
  InputStream in;
  file=getCommandFile();
  if (Debug.ON)   Debug.trace(""String_Node_Str"" + file.getAbsolutePath());
  in=null;
  try {
    CommandReader.read(in=new BackupInputStream(file),new CommandManager());
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    commands=new Vector();
    throw new IOException(e.getMessage());
  }
 finally {
    registerDefaultCommand(FILE_OPENER_ALIAS,PlatformManager.getDefaultFileOpenerCommand(),null);
    registerDefaultCommand(URL_OPENER_ALIAS,PlatformManager.getDefaultUrlOpenerCommand(),null);
    registerDefaultCommand(EXE_OPENER_ALIAS,PlatformManager.getDefaultExeOpenerCommand(),null);
    registerDefaultCommand(FILE_MANAGER_ALIAS,PlatformManager.getDefaultFileManagerCommand(),PlatformManager.getDefaultFileManagerName());
    wereCommandsModified=false;
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e) {
      }
    }
  }
}","/** 
 * Loads the custom commands XML File. <p> The command files will be loaded as a <i>backed-up file</i> (see   {@link com.mucommander.io.BackupInputStream}). Its format is described   {@link CommandsXmlConstants here}. </p>
 * @throws IOException if an I/O error occurs.
 * @see #writeCommands()
 * @see #getCommandFile()
 * @see #setCommandFile(String)
 */
public static void loadCommands() throws IOException {
  AbstractFile file;
  InputStream in;
  file=getCommandFile();
  if (Debug.ON)   Debug.trace(""String_Node_Str"" + file.getAbsolutePath());
  in=null;
  try {
    CommandReader.read(in=new BackupInputStream(file),new CommandManager());
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    commands=new Vector();
    throw new IOException(e.getMessage());
  }
 finally {
    registerDefaultCommand(FILE_OPENER_ALIAS,PlatformManager.getDefaultFileOpenerCommand(),null);
    registerDefaultCommand(URL_OPENER_ALIAS,PlatformManager.getDefaultUrlOpenerCommand(),null);
    registerDefaultCommand(EXE_OPENER_ALIAS,PlatformManager.getDefaultExeOpenerCommand(),null);
    registerDefaultCommand(FILE_MANAGER_ALIAS,PlatformManager.getDefaultFileManagerCommand(),PlatformManager.getDefaultFileManagerName());
    wereCommandsModified=false;
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e) {
      }
    }
  }
}",0.9832680669277324
45140,"/** 
 * Loads the custom associations XML File. <p> The command files will be loaded as a <i>backed-up file</i> (see   {@link com.mucommander.io.BackupInputStream}). Its format is described   {@link AssociationsXmlConstants here}. </p>
 * @see #writeAssociations()
 * @see #getAssociationFile()
 * @see #setAssociationFile(String)
 */
public static void loadAssociations() throws IOException {
  AbstractFile file;
  InputStream in;
  file=getAssociationFile();
  if (Debug.ON)   Debug.trace(""String_Node_Str"" + file.getAbsolutePath());
  in=null;
  try {
    AssociationReader.read(in=new BackupInputStream(file),new AssociationFactory());
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    associations=new Vector();
    throw new IOException(e.getMessage());
  }
 finally {
    if (getCommandForAlias(EXE_OPENER_ALIAS) != null) {
      AndFileFilter filter;
      if (PlatformManager.getExeAssociation() != null) {
        try {
          filter=new AndFileFilter();
          filter.addFileFilter(new RegexpFilenameFilter(PlatformManager.getExeAssociation(),PlatformManager.getDefaultRegexpCaseSensitivity()));
          registerAssociation(EXE_OPENER_ALIAS,filter);
        }
 catch (        Exception e) {
          if (Debug.ON)           Debug.trace(""String_Node_Str"" + e.getMessage());
        }
      }
      if (PlatformManager.runExecutables() && PlatformManager.JAVA_1_6.isCurrentOrHigher()) {
        try {
          filter=new AndFileFilter();
          filter.addFileFilter(new PermissionsFileFilter(PermissionsFileFilter.EXECUTE_PERMISSION,true));
          registerAssociation(EXE_OPENER_ALIAS,filter);
        }
 catch (        Exception e) {
          if (Debug.ON)           Debug.trace(""String_Node_Str"" + e.getMessage());
        }
      }
    }
    wereAssociationsModified=false;
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e) {
      }
    }
  }
}","/** 
 * Loads the custom associations XML File. <p> The command files will be loaded as a <i>backed-up file</i> (see   {@link com.mucommander.io.BackupInputStream}). Its format is described   {@link AssociationsXmlConstants here}. </p>
 * @throws IOException if an IO error occurs.
 * @see #writeAssociations()
 * @see #getAssociationFile()
 * @see #setAssociationFile(String)
 */
public static void loadAssociations() throws IOException {
  AbstractFile file;
  InputStream in;
  file=getAssociationFile();
  if (Debug.ON)   Debug.trace(""String_Node_Str"" + file.getAbsolutePath());
  in=null;
  try {
    AssociationReader.read(in=new BackupInputStream(file),new AssociationFactory());
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    associations=new Vector();
    throw new IOException(e.getMessage());
  }
 finally {
    if (getCommandForAlias(EXE_OPENER_ALIAS) != null) {
      AndFileFilter filter;
      if (PlatformManager.getExeAssociation() != null) {
        try {
          filter=new AndFileFilter();
          filter.addFileFilter(new RegexpFilenameFilter(PlatformManager.getExeAssociation(),PlatformManager.getDefaultRegexpCaseSensitivity()));
          registerAssociation(EXE_OPENER_ALIAS,filter);
        }
 catch (        Exception e) {
          if (Debug.ON)           Debug.trace(""String_Node_Str"" + e.getMessage());
        }
      }
      if (PlatformManager.runExecutables() && PlatformManager.JAVA_1_6.isCurrentOrHigher()) {
        try {
          filter=new AndFileFilter();
          filter.addFileFilter(new PermissionsFileFilter(PermissionsFileFilter.EXECUTE_PERMISSION,true));
          registerAssociation(EXE_OPENER_ALIAS,filter);
        }
 catch (        Exception e) {
          if (Debug.ON)           Debug.trace(""String_Node_Str"" + e.getMessage());
        }
      }
    }
    wereAssociationsModified=false;
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e) {
      }
    }
  }
}",0.9885629040278467
45141,"public static String[] getTokensForFile(AbstractFile file,boolean allowDefault){
  Command command;
  if ((command=getCommandForFile(file,allowDefault)) == null)   return null;
  return command.getTokens(file);
}","/** 
 * Returns the tokens that compose the command that must be executed to open the specified file.
 * @param file         file for which the opening command's tokens must be returned.
 * @param allowDefault whether to use the default command if none was found to match the specified file.
 * @return              the tokens that compose the command that must be executed to open the specified file, <code>null</code> if not found.
 */
public static String[] getTokensForFile(AbstractFile file,boolean allowDefault){
  Command command;
  if ((command=getCommandForFile(file,allowDefault)) == null)   return null;
  return command.getTokens(file);
}",0.4918793503480278
45142,"/** 
 * , Writes all registered associations to the custom associations file. <p> Data will be written to the path returned by   {@link #getAssociationFile()}. Note, however, that this method will not actually do anything if the association list hasn't been modified since the last time it was saved. </p> <p> The association files will be saved as a <i>backed-up file</i> (see   {@link com.mucommander.io.BackupOutputStream}). Its format is described   {@link AssociationsXmlConstants here}. </p>
 * @see #loadAssociations()
 * @see #getAssociationFile()
 * @see #setAssociationFile(String)
 * @throws IOException if an I/O error occurs.
 */
public static void writeAssociations() throws CommandException, IOException {
  if (wereAssociationsModified) {
    BackupOutputStream out;
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + getAssociationFile());
    out=null;
    try {
      buildAssociations(new AssociationWriter(out=new BackupOutputStream(getAssociationFile())));
      wereAssociationsModified=false;
    }
  finally {
      if (out != null) {
        try {
          out.close();
        }
 catch (        Exception e) {
        }
      }
    }
  }
 else   if (Debug.ON)   Debug.trace(""String_Node_Str"");
}","/** 
 * , Writes all registered associations to the custom associations file. <p> Data will be written to the path returned by   {@link #getAssociationFile()}. Note, however, that this method will not actually do anything if the association list hasn't been modified since the last time it was saved. </p> <p> The association files will be saved as a <i>backed-up file</i> (see   {@link com.mucommander.io.BackupOutputStream}). Its format is described   {@link AssociationsXmlConstants here}. </p>
 * @throws IOException      if an I/O error occurs.
 * @throws CommandException if an error occurs.
 * @see #loadAssociations()
 * @see #getAssociationFile()
 * @see #setAssociationFile(String)
 */
public static void writeAssociations() throws CommandException, IOException {
  if (wereAssociationsModified) {
    BackupOutputStream out;
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + getAssociationFile());
    out=null;
    try {
      buildAssociations(new AssociationWriter(out=new BackupOutputStream(getAssociationFile())));
      wereAssociationsModified=false;
    }
  finally {
      if (out != null) {
        try {
          out.close();
        }
 catch (        Exception e) {
        }
      }
    }
  }
 else   if (Debug.ON)   Debug.trace(""String_Node_Str"");
}",0.9037924151696608
45143,"public static Command getCommandForFile(AbstractFile file,boolean allowDefault){
  Iterator iterator;
  CommandAssociation association;
  iterator=associations();
  while (iterator.hasNext())   if ((association=(CommandAssociation)iterator.next()).accept(file))   return association.getCommand();
  if (allowDefault)   return (defaultCommand == null) ? RUN_AS_EXECUTABLE_COMMAND : defaultCommand;
  return null;
}","/** 
 * Returns the command that must be executed to open the specified file.
 * @param file         file for which the opening command must be returned.
 * @param allowDefault whether to use the default command if none was found to match the specified file.
 * @return              the command that must be executed to open the specified file, <code>null</code> if not found.
 */
public static Command getCommandForFile(AbstractFile file,boolean allowDefault){
  Iterator iterator;
  CommandAssociation association;
  iterator=associations();
  while (iterator.hasNext())   if ((association=(CommandAssociation)iterator.next()).accept(file))   return association.getCommand();
  if (allowDefault)   return (defaultCommand == null) ? RUN_AS_EXECUTABLE_COMMAND : defaultCommand;
  return null;
}",0.6843413421706711
45144,"public static void registerAssociation(String command,ChainedFileFilter filter) throws CommandException {
  Command cmd;
  if ((cmd=getCommandForAlias(command)) != null) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + command + ""String_Node_Str"");
    associations.add(new CommandAssociation(cmd,filter));
    wereAssociationsModified=true;
  }
 else {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + command + ""String_Node_Str"");
    throw new CommandException(command + ""String_Node_Str"");
  }
}","/** 
 * Registers the specified association.
 * @param command          command to execute when the association is matched.
 * @param filter           file filters that a file must match to be accepted by the association.
 * @throws CommandException if an error occurs.
 */
public static void registerAssociation(String command,ChainedFileFilter filter) throws CommandException {
  Command cmd;
  if ((cmd=getCommandForAlias(command)) != null) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + command + ""String_Node_Str"");
    associations.add(new CommandAssociation(cmd,filter));
    wereAssociationsModified=true;
  }
 else {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + command + ""String_Node_Str"");
    throw new CommandException(command + ""String_Node_Str"");
  }
}",0.7885802469135802
45145,"/** 
 * Removes the command found at the specified index of the command list. <p> This method might actually not remove the command: if it is associated to any file name filter, a command cannot be removed without, well, messing the system up quite baddly.<br/> If the command is associated to any file name filter, this method will return <code>false</code> and not do anything. </p>
 * @param i index of the command to remove.
 * @return   <code>false</code> if the command could not be removed, <code>true</code> otherwise.
 */
public static boolean removeCommandAt(int i){
  Command buffer;
  buffer=(Command)commands.get(i);
  if (isCommandAssociated(buffer))   return false;
  commands.remove(i);
  wereCommandsModified=true;
  return true;
}","/** 
 * Removes the command found at the specified index of the command list. <p> This method might actually not remove the command: if it is associated to any file name filter, a command cannot be removed without, well, messing the system up quite baddly.<br> If the command is associated to any file name filter, this method will return <code>false</code> and not do anything. </p>
 * @param i index of the command to remove.
 * @return   <code>false</code> if the command could not be removed, <code>true</code> otherwise.
 */
public static boolean removeCommandAt(int i){
  Command buffer;
  buffer=(Command)commands.get(i);
  if (isCommandAssociated(buffer))   return false;
  commands.remove(i);
  wereCommandsModified=true;
  return true;
}",0.9993311036789296
45146,"/** 
 * Writes the specified command's XML description.
 * @param command command that should be written.
 */
public void addCommand(Command command) throws CommandException {
  XmlAttributes attributes;
  attributes=new XmlAttributes();
  attributes.add(ATTRIBUTE_ALIAS,command.getAlias());
  attributes.add(ATTRIBUTE_VALUE,command.getCommand());
  if (command.getType() == Command.SYSTEM_COMMAND)   attributes.add(ATTRIBUTE_TYPE,VALUE_SYSTEM);
 else   if (command.getType() == Command.INVISIBLE_COMMAND)   attributes.add(ATTRIBUTE_TYPE,VALUE_INVISIBLE);
  if (command.isDisplayNameSet())   attributes.add(ATTRIBUTE_DISPLAY,command.getDisplayName());
  try {
    out.writeStandAloneElement(ELEMENT_COMMAND,attributes);
  }
 catch (  IOException e) {
    throw new CommandException(e);
  }
}","/** 
 * Writes the specified command's XML description.
 * @param command          command that should be written.
 * @throws CommandException if an error occurs.
 */
public void addCommand(Command command) throws CommandException {
  XmlAttributes attributes;
  attributes=new XmlAttributes();
  attributes.add(ATTRIBUTE_ALIAS,command.getAlias());
  attributes.add(ATTRIBUTE_VALUE,command.getCommand());
  if (command.getType() == Command.SYSTEM_COMMAND)   attributes.add(ATTRIBUTE_TYPE,VALUE_SYSTEM);
 else   if (command.getType() == Command.INVISIBLE_COMMAND)   attributes.add(ATTRIBUTE_TYPE,VALUE_INVISIBLE);
  if (command.isDisplayNameSet())   attributes.add(ATTRIBUTE_DISPLAY,command.getDisplayName());
  try {
    out.writeStandAloneElement(ELEMENT_COMMAND,attributes);
  }
 catch (  IOException e) {
    throw new CommandException(e);
  }
}",0.9652226967663208
45147,"/** 
 * Builds a new writer that will send data to the specified output stream.
 * @param stream where to write the XML data.
 */
public CommandWriter(OutputStream stream) throws IOException {
  out=new XmlWriter(stream);
}","/** 
 * Builds a new writer that will send data to the specified output stream.
 * @param stream      where to write the XML data.
 * @throws IOException if an IO error occurs.
 */
public CommandWriter(OutputStream stream) throws IOException {
  out=new XmlWriter(stream);
}",0.7203219315895373
45148,"public boolean getFilter(){
  return filter;
}","/** 
 * Returns <code>true</code> if files must have the filter's permission flag set in order to be accepted.
 * @return <code>true</code> if files must have the filter's permission flag set in order to be accepted, <code>false</code> otherwise.
 */
public boolean getFilter(){
  return filter;
}",0.2682215743440233
45149,"public int getPermission(){
  return permission;
}","/** 
 * Returns the permission that this filter will check.
 * @return the permission that this filter will check.
 */
public int getPermission(){
  return permission;
}",0.45662100456621
45150,"public PermissionsFileFilter(int permission,boolean filter){
  this.permission=permission;
  this.filter=filter;
}","/** 
 * Creates a new <code>PermissionsFileFilter</code>.
 * @param permission permission that will be checked against as defined in {@link FilePermissions}.
 * @param filter     whether or not the specified permission flag must be set for a file to be accepted.
 */
public PermissionsFileFilter(int permission,boolean filter){
  this.permission=permission;
  this.filter=filter;
}",0.4606060606060606
45151,"/** 
 * Adds the given   {@link FileChangeListener} instance to the list of registered listeners.<p>Listeners are stored as weak references so  {@link #removeFileChangeListener(FileChangeListener)}doesn't need to be called for listeners to be garbage collected when they're not used anymore.</p>
 * @param listener the FileChangeListener to add to the list of registered listeners.
 */
public void addFileChangeListener(FileChangeListener listener){
  listeners.put(listener,null);
}","/** 
 * Adds the given   {@link FileChangeListener} instance to the list of registered listeners.<p>Listeners are stored as weak references so  {@link #removeFileChangeListener(FileChangeListener)}doesn't need to be called for listeners to be garbage collected when they're not used anymore.</p>
 * @param listener the FileChangeListener to add to the list of registered listeners.
 * @see #removeFileChangeListener(FileChangeListener)
 */
public void addFileChangeListener(FileChangeListener listener){
  listeners.put(listener,null);
}",0.9470588235294116
45152,"/** 
 * Removes the given   {@link FileChangeListener} instance to the list of registered listeners.
 * @param listener the FileChangeListener to remove from the list of registered listeners.
 */
public void removeFileChangeListener(FileChangeListener listener){
  listeners.remove(listener);
}","/** 
 * Removes the given   {@link FileChangeListener} instance to the list of registered listeners.
 * @param listener the FileChangeListener to remove from the list of registered listeners.
 * @see #addFileChangeListener(FileChangeListener)
 */
public void removeFileChangeListener(FileChangeListener listener){
  listeners.remove(listener);
}",0.92018779342723
45153,"/** 
 * Recursively calculates the total size for the given files and folders.
 */
public static long getFileSize(AbstractFile files[]){
  AbstractFile file;
  long total=0;
  long fileSize;
  for (int i=0; i < files.length; i++) {
    file=files[i];
    if (file.isDirectory() && !file.isSymlink()) {
      try {
        total+=getFileCount(file.ls());
      }
 catch (      IOException e) {
      }
    }
 else {
      fileSize=file.getSize();
      if (fileSize > 0)       total+=fileSize;
    }
  }
  return total;
}","/** 
 * Recursively calculates the total size for the given files and folders.
 * @param files files and folders that need to be explored and weighed.
 * @return       the specified files total size.
 */
public static long getFileSize(AbstractFile files[]){
  AbstractFile file;
  long total=0;
  long fileSize;
  for (int i=0; i < files.length; i++) {
    file=files[i];
    if (file.isDirectory() && !file.isSymlink()) {
      try {
        total+=getFileCount(file.ls());
      }
 catch (      IOException e) {
      }
    }
 else {
      fileSize=file.getSize();
      if (fileSize > 0)       total+=fileSize;
    }
  }
  return total;
}",0.8957795004306632
45154,"/** 
 * Recursively calculates the total number of files.
 */
public static int getFileCount(AbstractFile files[]){
  AbstractFile file;
  int total=0;
  for (int i=0; i < files.length; i++) {
    file=files[i];
    if (file.isDirectory() && !file.isSymlink()) {
      try {
        total+=getFileCount(file.ls());
      }
 catch (      IOException e) {
      }
    }
 else     total++;
  }
  return total;
}","/** 
 * Recursively calculates the total number of files.
 * @param files files and folders that need to be explored and counted.
 * @return       the total number of files contained in the specified array.
 */
public static int getFileCount(AbstractFile[] files){
  AbstractFile file;
  int total=0;
  for (int i=0; i < files.length; i++) {
    file=files[i];
    if (file.isDirectory() && !file.isSymlink()) {
      try {
        total+=getFileCount(file.ls());
      }
 catch (      IOException e) {
      }
    }
 else     total++;
  }
  return total;
}",0.8331606217616581
45155,"/** 
 * Returns true if this PathTokenizer has more filename tokens.
 */
public boolean hasMoreFilenames(){
  return currentIndex < tokens.length;
}","/** 
 * Returns <code>true</code> if this PathTokenizer has more filename tokens.
 * @return <code>true</code> if this PathTokenizer has more filename tokens, <code>false</code> otherwise.
 */
public boolean hasMoreFilenames(){
  return currentIndex < tokens.length;
}",0.6923076923076923
45156,"/** 
 * Returns the current path part that has been tokenized, i.e. that ends with the last filename token returned by  {@link #nextFilename()} and separator string returned by {@link #getLastSeparator()}.<br> If this PathTokenizer operates in reverse order, the returned path is the path part that has not yet been  tokenized.
 */
public String getCurrentPath(){
  return currentPath.toString();
}","/** 
 * Returns the current path part that has been tokenized, i.e. that ends with the last filename token returned by  {@link #nextFilename()} and separator string returned by {@link #getLastSeparator()}.<br> If this PathTokenizer operates in reverse order, the returned path is the path part that has not yet been  tokenized.
 * @return the current path part that has been tokenized.
 */
public String getCurrentPath(){
  return currentPath.toString();
}",0.9320843091334896
45157,"/** 
 * Returns the last separator string that appeared in the path after the last filename token returned by  {@link #nextFilename()} and before the next filename, or an empty string """" if there isn't any separatorcharacter after the filename (path ends without a trailing separator).<br> Note: the returned string can be made of several consecutive separator characters. <p>Initially, before any calls to  {@link #nextFilename()} have been made, this method will return any leadingseparator string in the path string, or an empty string if the path doesn't start with a separator.
 */
public String getLastSeparator(){
  return lastSeparator;
}","/** 
 * Returns the last separator string that appeared in the path after the last filename token returned by  {@link #nextFilename()} and before the next filename, or an empty string """" if there isn't any separatorcharacter after the filename (path ends without a trailing separator).<br> Note: the returned string can be made of several consecutive separator characters. <p>Initially, before any calls to  {@link #nextFilename()} have been made, this method will return any leadingseparator string in the path string, or an empty string if the path doesn't start with a separator.
 * @return the last separator string that appeared in the path.
 */
public String getLastSeparator(){
  return lastSeparator;
}",0.952802359882006
45158,"/** 
 * Returns an   {@link AbstractFile} to the root package of the given <code>Class</code>. For example, if thespecified <code>Class</code> is <code>java.lang.Object</code>'s, the returned file will be the Java runtime JAR file, which on most platforms is <code>$JAVA_HOME/lib/jre/rt.jar</code>.<br/> The returned file can be used to list or manipulate all resource files contained in a particular classpath's location, including the .class files.
 * @param aClass the class for which to locate the root package.
 * @return an AbstractFile to the root package of the given <code>Class</code>
 */
public static AbstractFile getRootPackageAsFile(Class aClass){
  ClassLoader classLoader=aClass.getClassLoader();
  if (classLoader == null)   classLoader=getDefaultClassLoader();
  String aClassRelPath=aClass.getName().replace('.','/') + ""String_Node_Str"";
  URL aClassURL=getResourceAsURL(aClassRelPath,classLoader);
  if (aClassURL == null)   return null;
  if (""String_Node_Str"".equals(aClassURL.getProtocol()))   return FileFactory.getFile(getJarFilePath(aClassURL));
  String aClassPath=getLocalFilePath(aClassURL);
  return FileFactory.getFile(aClassPath.substring(0,aClassPath.length() - aClassRelPath.length()));
}","/** 
 * Returns an   {@link AbstractFile} to the root package of the given <code>Class</code>. For example, if thespecified <code>Class</code> is <code>java.lang.Object</code>'s, the returned file will be the Java runtime JAR file, which on most platforms is <code>$JAVA_HOME/lib/jre/rt.jar</code>.<br> The returned file can be used to list or manipulate all resource files contained in a particular classpath's location, including the .class files.
 * @param aClass the class for which to locate the root package.
 * @return an AbstractFile to the root package of the given <code>Class</code>
 */
public static AbstractFile getRootPackageAsFile(Class aClass){
  ClassLoader classLoader=aClass.getClassLoader();
  if (classLoader == null)   classLoader=getDefaultClassLoader();
  String aClassRelPath=aClass.getName().replace('.','/') + ""String_Node_Str"";
  URL aClassURL=getResourceAsURL(aClassRelPath,classLoader);
  if (aClassURL == null)   return null;
  if (""String_Node_Str"".equals(aClassURL.getProtocol()))   return FileFactory.getFile(getJarFilePath(aClassURL));
  String aClassPath=getLocalFilePath(aClassURL);
  return FileFactory.getFile(aClassPath.substring(0,aClassPath.length() - aClassRelPath.length()));
}",0.9995906672124436
45159,"/** 
 * Main method used to startup muCommander.
 */
public static void main(String args[]){
  int i;
  fatalWarnings=false;
  verbose=true;
  useSplash=true;
  for (i=0; i < args.length; i++) {
    if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     printVersion();
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     printUsage();
 else     if (args[i].equals(""String_Node_Str""))     useSplash=false;
 else     if (args[i].equals(""String_Node_Str""))     useSplash=true;
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.command.CommandManager.setAssociationFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.command.CommandManager.setCommandFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.bookmark.BookmarkManager.setBookmarksFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        MuConfiguration.setConfigurationFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        ShellHistoryManager.setHistoryFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.ui.action.ActionKeymap.setActionKeyMapFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        ToolBar.setDescriptionFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        CommandBar.setDescriptionFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.auth.CredentialsManager.setCredentialsFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (Debug.ON && (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")))     Debug.setEnabled(false);
 else     if (Debug.ON && (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")))     Debug.setEnabled(true);
 else     if ((args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        PlatformManager.setPreferencesFolder(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if ((args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        ExtensionManager.setExtensionsFolder(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     fatalWarnings=false;
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     fatalWarnings=true;
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     verbose=false;
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     verbose=true;
 else     break;
  }
  if (PlatformManager.getOsFamily() == PlatformManager.MAC_OS_X) {
    try {
      MuConfiguration.read();
    }
 catch (    Exception e) {
      printFileError(""String_Node_Str"",e,fatalWarnings);
    }
    try {
      Class osxIntegrationClass=Class.forName(""String_Node_Str"");
      Constructor constructor=osxIntegrationClass.getConstructor(new Class[]{});
      constructor.newInstance(new Object[]{});
    }
 catch (    Exception e) {
      if (Debug.ON)       Debug.trace(""String_Node_Str"");
    }
  }
  try {
    ExtensionManager.addExtensionsToClasspath();
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"");
  }
  if (useSplash)   splashScreen=new SplashScreen(RuntimeConstants.VERSION,""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (PlatformManager.getOsFamily() != PlatformManager.MAC_OS_X) {
    try {
      MuConfiguration.read();
    }
 catch (    Exception e) {
      printFileError(""String_Node_Str"",e,fatalWarnings);
    }
  }
  showSetup=MuConfiguration.getVariable(MuConfiguration.THEME_TYPE) == null;
  Runtime.getRuntime().addShutdownHook(new ShutdownHook());
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.text.Translator.loadDictionaryFile();
  }
 catch (  Exception e) {
    printError(""String_Node_Str"",e,true);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.command.CommandManager.loadCommands();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  try {
    com.mucommander.command.CommandManager.loadAssociations();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.bookmark.BookmarkManager.loadBookmarks();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.auth.CredentialsManager.loadCredentials();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    ShellHistoryManager.loadHistory();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  com.mucommander.text.CustomDateFormat.init();
  printStartupMessage(""String_Node_Str"");
  com.mucommander.ui.icon.FileIcons.setScaleFactor(Math.max(1.0f,MuConfiguration.getVariable(MuConfiguration.TABLE_ICON_SCALE,MuConfiguration.DEFAULT_TABLE_ICON_SCALE)));
  com.mucommander.ui.icon.FileIcons.setSystemIconsPolicy(MuConfiguration.getVariable(MuConfiguration.USE_SYSTEM_FILE_ICONS,MuConfiguration.DEFAULT_USE_SYSTEM_FILE_ICONS));
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.ui.action.ActionKeymap.loadActionKeyMap();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    ToolBar.loadDescriptionFile();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    CommandBar.loadDescriptionFile();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  com.mucommander.ui.theme.ThemeManager.loadCurrentTheme();
  printStartupMessage(""String_Node_Str"");
  com.mucommander.bonjour.BonjourDirectory.setActive(MuConfiguration.getVariable(MuConfiguration.ENABLE_BONJOUR_DISCOVERY,MuConfiguration.DEFAULT_ENABLE_BONJOUR_DISCOVERY));
  printStartupMessage(""String_Node_Str"");
  for (; i < args.length; i+=2) {
    if (i < args.length - 1)     WindowManager.createNewMainFrame(args[i],args[i + 1]);
 else     WindowManager.createNewMainFrame(args[i],null);
  }
  if (WindowManager.getCurrentMainFrame() == null)   WindowManager.createNewMainFrame();
  if (MuConfiguration.getVariable(MuConfiguration.ENABLE_SYSTEM_NOTIFICATIONS,MuConfiguration.DEFAULT_ENABLE_SYSTEM_NOTIFICATIONS)) {
    printStartupMessage(""String_Node_Str"");
    if (com.mucommander.ui.notifier.AbstractNotifier.isAvailable())     com.mucommander.ui.notifier.AbstractNotifier.getNotifier().setEnabled(true);
  }
  if (useSplash)   splashScreen.dispose();
  if (MuConfiguration.getVariable(MuConfiguration.CHECK_FOR_UPDATE,MuConfiguration.DEFAULT_CHECK_FOR_UPDATE))   new CheckVersionDialog(WindowManager.getCurrentMainFrame(),false);
  if (showSetup)   new InitialSetupDialog(WindowManager.getCurrentMainFrame()).showDialog();
}","/** 
 * Main method used to startup muCommander.
 * @param args command line arguments.
 */
public static void main(String args[]){
  int i;
  fatalWarnings=false;
  verbose=true;
  useSplash=true;
  for (i=0; i < args.length; i++) {
    if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     printVersion();
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     printUsage();
 else     if (args[i].equals(""String_Node_Str""))     useSplash=false;
 else     if (args[i].equals(""String_Node_Str""))     useSplash=true;
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.command.CommandManager.setAssociationFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.command.CommandManager.setCommandFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.bookmark.BookmarkManager.setBookmarksFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        MuConfiguration.setConfigurationFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        ShellHistoryManager.setHistoryFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.ui.action.ActionKeymap.setActionKeyMapFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        ToolBar.setDescriptionFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        CommandBar.setDescriptionFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        com.mucommander.auth.CredentialsManager.setCredentialsFile(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (Debug.ON && (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")))     Debug.setEnabled(false);
 else     if (Debug.ON && (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")))     Debug.setEnabled(true);
 else     if ((args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        PlatformManager.setPreferencesFolder(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if ((args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))) {
      if (i >= args.length - 1)       printError(""String_Node_Str"" + args[i],null,true);
      try {
        ExtensionManager.setExtensionsFolder(args[++i]);
      }
 catch (      Exception e) {
        printError(""String_Node_Str"",e,fatalWarnings);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     fatalWarnings=false;
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     fatalWarnings=true;
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     verbose=false;
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str""))     verbose=true;
 else     break;
  }
  if (PlatformManager.getOsFamily() == PlatformManager.MAC_OS_X) {
    try {
      MuConfiguration.read();
    }
 catch (    Exception e) {
      printFileError(""String_Node_Str"",e,fatalWarnings);
    }
    try {
      Class osxIntegrationClass=Class.forName(""String_Node_Str"");
      Constructor constructor=osxIntegrationClass.getConstructor(new Class[]{});
      constructor.newInstance(new Object[]{});
    }
 catch (    Exception e) {
      if (Debug.ON)       Debug.trace(""String_Node_Str"");
    }
  }
  try {
    ExtensionManager.addExtensionsToClasspath();
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"");
  }
  if (useSplash)   splashScreen=new SplashScreen(RuntimeConstants.VERSION,""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (PlatformManager.getOsFamily() != PlatformManager.MAC_OS_X) {
    try {
      MuConfiguration.read();
    }
 catch (    Exception e) {
      printFileError(""String_Node_Str"",e,fatalWarnings);
    }
  }
  showSetup=MuConfiguration.getVariable(MuConfiguration.THEME_TYPE) == null;
  Runtime.getRuntime().addShutdownHook(new ShutdownHook());
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.text.Translator.loadDictionaryFile();
  }
 catch (  Exception e) {
    printError(""String_Node_Str"",e,true);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.command.CommandManager.loadCommands();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  try {
    com.mucommander.command.CommandManager.loadAssociations();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.bookmark.BookmarkManager.loadBookmarks();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.auth.CredentialsManager.loadCredentials();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    ShellHistoryManager.loadHistory();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  com.mucommander.text.CustomDateFormat.init();
  printStartupMessage(""String_Node_Str"");
  com.mucommander.ui.icon.FileIcons.setScaleFactor(Math.max(1.0f,MuConfiguration.getVariable(MuConfiguration.TABLE_ICON_SCALE,MuConfiguration.DEFAULT_TABLE_ICON_SCALE)));
  com.mucommander.ui.icon.FileIcons.setSystemIconsPolicy(MuConfiguration.getVariable(MuConfiguration.USE_SYSTEM_FILE_ICONS,MuConfiguration.DEFAULT_USE_SYSTEM_FILE_ICONS));
  printStartupMessage(""String_Node_Str"");
  try {
    com.mucommander.ui.action.ActionKeymap.loadActionKeyMap();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    ToolBar.loadDescriptionFile();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  try {
    CommandBar.loadDescriptionFile();
  }
 catch (  Exception e) {
    printFileError(""String_Node_Str"",e,fatalWarnings);
  }
  printStartupMessage(""String_Node_Str"");
  com.mucommander.ui.theme.ThemeManager.loadCurrentTheme();
  printStartupMessage(""String_Node_Str"");
  com.mucommander.bonjour.BonjourDirectory.setActive(MuConfiguration.getVariable(MuConfiguration.ENABLE_BONJOUR_DISCOVERY,MuConfiguration.DEFAULT_ENABLE_BONJOUR_DISCOVERY));
  printStartupMessage(""String_Node_Str"");
  for (; i < args.length; i+=2) {
    if (i < args.length - 1)     WindowManager.createNewMainFrame(args[i],args[i + 1]);
 else     WindowManager.createNewMainFrame(args[i],null);
  }
  if (WindowManager.getCurrentMainFrame() == null)   WindowManager.createNewMainFrame();
  if (MuConfiguration.getVariable(MuConfiguration.ENABLE_SYSTEM_NOTIFICATIONS,MuConfiguration.DEFAULT_ENABLE_SYSTEM_NOTIFICATIONS)) {
    printStartupMessage(""String_Node_Str"");
    if (com.mucommander.ui.notifier.AbstractNotifier.isAvailable())     com.mucommander.ui.notifier.AbstractNotifier.getNotifier().setEnabled(true);
  }
  if (useSplash)   splashScreen.dispose();
  if (MuConfiguration.getVariable(MuConfiguration.CHECK_FOR_UPDATE,MuConfiguration.DEFAULT_CHECK_FOR_UPDATE))   new CheckVersionDialog(WindowManager.getCurrentMainFrame(),false);
  if (showSetup)   new InitialSetupDialog(WindowManager.getCurrentMainFrame()).showDialog();
}",0.998000922651084
45160,"public static String getDefaultUrlOpenerCommand(){
  return defaultUrlOpenerCommand;
}","/** 
 * Returns the default command used to open URLs under the current system.
 * @return the default command used to open URLs under the current system, or <code>null</code> if not found.
 */
public static String getDefaultUrlOpenerCommand(){
  return defaultUrlOpenerCommand;
}",0.4699453551912568
45161,"public static boolean getDefaultRegexpCaseSensitivity(){
  return defaultRegexpCaseSensitivity;
}","/** 
 * Returns <code>true</code> if the current system should use case-sensitive regular expression when matching file names.
 * @return <code>true</code> if the current system should use case-sensitive regular expression when matching file names, <code>false</code> otherwise.
 */
public static boolean getDefaultRegexpCaseSensitivity(){
  return defaultRegexpCaseSensitivity;
}",0.4067085953878406
45162,"public static String getDefaultExeOpenerCommand(){
  return defaultExeOpenerCommand;
}","/** 
 * Returns the default command used to open executable files under the current system.
 * @return the default command used to open executable files under the current system, or <code>null</code> if not found.
 */
public static String getDefaultExeOpenerCommand(){
  return defaultExeOpenerCommand;
}",0.441025641025641
45163,"public static String getDefaultShellCommand(){
  return defaultShellCommand;
}","/** 
 * Returns the system's default shell command.
 * @return the system's default shell command, or <code>null</code> if not known.
 */
public static String getDefaultShellCommand(){
  return defaultShellCommand;
}",0.5306122448979592
45164,"public static String getExeAssociation(){
  return exeAssociation;
}","/** 
 * Returns the regular expression used to match executable files.
 * @return the regular expression used to match executable files, <code>null</code> if not found.
 */
public static String getExeAssociation(){
  return exeAssociation;
}",0.4401294498381877
45165,"public static boolean runExecutables(){
  return runExecutables;
}","/** 
 * Returns <code>true</code> if executable files must be opened with a different command than regular files.
 * @return <code>true</code> if executable files must be opened with a different command than regular files, <code>false</code> otherwise.
 */
public static boolean runExecutables(){
  return runExecutables;
}",0.3393316195372751
45166,"public static void setPreferencesFolder(AbstractFile folder) throws IOException {
  if (!folder.exists())   folder.mkdir();
 else   if (!folder.isBrowsable())   folder=folder.getParent();
  prefFolder=folder;
}","/** 
 * Sets the path to the folder in which muCommander will look for its preferences. <p> If <code>folder</code> is a file, its parent folder will be used instead. If it doesn't exist, this method will create it. </p>
 * @param folder      path to the folder in which muCommander will look for its preferences.
 * @throws IOException if an IO error occurs.
 * @see #getPreferencesFolder()
 * @see #setPreferencesFolder(String)
 * @see #setPreferencesFolder(File)
 */
public static void setPreferencesFolder(AbstractFile folder) throws IOException {
  if (!folder.exists())   folder.mkdir();
 else   if (!folder.isBrowsable())   folder=folder.getParent();
  prefFolder=folder;
}",0.3397075365579302
45167,"public static String getDefaultFileManagerName(){
  return defaultFileManagerName;
}","/** 
 * Returns the name of the system's default file manager.
 * @return the name of the system's default file manager, or <code>null</code> if not known.
 */
public static String getDefaultFileManagerName(){
  return defaultFileManagerName;
}",0.5121951219512195
45168,"public static String getDefaultFileManagerCommand(){
  return defaultFileManagerCommand;
}","/** 
 * Returns the command used to start the system's default file manager.
 * @return the command used to start the system's default file manager, or <code>null</code> if not found.
 */
public static String getDefaultFileManagerCommand(){
  return defaultFileManagerCommand;
}",0.4891304347826087
45169,"/** 
 * Tries to open the specified file in the system's file manager. <p> Developers should make sure the operation is possible before calling this. This can be done through   {@link #canOpenInFileManager()}. </p>
 */
public static void openInFileManager(AbstractFile file){
  try {
    if (!file.getURL().getProtocol().equals(FileProtocols.FILE))     return;
    if (!file.isDirectory())     file=file.getParent();
    Command command;
    if ((command=CommandManager.getCommandForAlias(CommandManager.FILE_MANAGER_ALIAS)) != null) {
      if (Debug.ON)       Debug.trace(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"");
      ProcessRunner.execute(command.getTokens(file),file);
    }
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ e);
  }
}","/** 
 * Tries to open the specified file in the system's file manager. <p> Developers should make sure the operation is possible before calling this. This can be done through   {@link #canOpenInFileManager()}. </p>
 * @param file file to open in the system's file manager.
 */
public static void openInFileManager(AbstractFile file){
  try {
    if (!file.getURL().getProtocol().equals(FileProtocols.FILE))     return;
    if (!file.isDirectory())     file=file.getParent();
    Command command;
    if ((command=CommandManager.getCommandForAlias(CommandManager.FILE_MANAGER_ALIAS)) != null) {
      if (Debug.ON)       Debug.trace(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"");
      ProcessRunner.execute(command.getTokens(file),file);
    }
  }
 catch (  Exception e) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ e);
  }
}",0.9666283084004604
45170,"/** 
 * Returns the path to the folder that contains all of the user's data. <p> All modules that save user data to a file should do so in a file located in the folder returned by this method. </p> <p> The value returned by this method can be set through   {@link #setPreferencesFolder(File)}. Otherwise, the   {@link #getDefaultPreferencesFolder() default preference folder} will beused. </p>
 * @return the path to the user's preference folder.
 */
public static AbstractFile getPreferencesFolder(){
  if (prefFolder != null)   return prefFolder;
  return getDefaultPreferencesFolder();
}","/** 
 * Returns the path to the folder that contains all of the user's data. <p> All modules that save user data to a file should do so in a file located in the folder returned by this method. </p> <p> The value returned by this method can be set through   {@link #setPreferencesFolder(File)}. Otherwise, the   {@link #getDefaultPreferencesFolder() default preference folder} will beused. </p>
 * @return the path to the user's preference folder.
 * @see #setPreferencesFolder(AbstractFile)
 */
public static AbstractFile getPreferencesFolder(){
  if (prefFolder != null)   return prefFolder;
  return getDefaultPreferencesFolder();
}",0.9640522875816994
45171,"/** 
 * Returns <code>true</code> if the current platform is capable of opening a file or folder in the desktop's default file manager (Finder for Mac OS X, Explorer for Windows...).
 */
public static boolean canOpenInFileManager(){
  return CommandManager.getCommandForAlias(CommandManager.FILE_MANAGER_ALIAS) != null;
}","/** 
 * Returns <code>true</code> if the current platform is capable of opening a file or folder in the desktop's default file manager (Finder for Mac OS X, Explorer for Windows...).
 * @return <code>true</code> if the current platform is capable of opening file or folders in the default file manager, <code>false</code> otherwise.
 */
public static boolean canOpenInFileManager(){
  return CommandManager.getCommandForAlias(CommandManager.FILE_MANAGER_ALIAS) != null;
}",0.8106060606060606
45172,"/** 
 * Opens the specified URL in the registered web browser.
 */
public static void openUrl(AbstractFile file){
  try {
    String protocol;
    protocol=file.getURL().getProtocol();
    if (!protocol.equals(FileProtocols.HTTP) && !protocol.equals(FileProtocols.HTTPS))     return;
    Command command;
    if ((command=CommandManager.getCommandForAlias(CommandManager.URL_OPENER_ALIAS)) != null)     ProcessRunner.execute(command.getTokens(file),file);
  }
 catch (  Exception e) {
  }
}","/** 
 * Opens the specified URL in the registered web browser.
 * @param file URL to open.
 */
public static void openUrl(AbstractFile file){
  try {
    String protocol;
    protocol=file.getURL().getProtocol();
    if (!protocol.equals(FileProtocols.HTTP) && !protocol.equals(FileProtocols.HTTPS))     return;
    Command command;
    if ((command=CommandManager.getCommandForAlias(CommandManager.URL_OPENER_ALIAS)) != null)     ProcessRunner.execute(command.getTokens(file),file);
  }
 catch (  Exception e) {
  }
}",0.9722222222222222
45173,"public static String getDefaultFileOpenerCommand(){
  return defaultFileOpenerCommand;
}","/** 
 * Returns the default command used to open files under the current system.
 * @return the default command used to open files under the current system, or <code>null</code> if not found.
 */
public static String getDefaultFileOpenerCommand(){
  return defaultFileOpenerCommand;
}",0.4731182795698925
45174,"public ShutdownHook(){
  super(ShutdownHook.class.getName());
}","/** 
 * Creates a new <code>ShutdownHook</code>.
 */
public ShutdownHook(){
  super(ShutdownHook.class.getName());
}",0.7039106145251397
45175,"public static void initiateShutdown(){
  if (Debug.ON)   Debug.trace(""String_Node_Str"");
  System.exit(0);
}","/** 
 * Shuts down muCommander.
 */
public static void initiateShutdown(){
  if (Debug.ON)   Debug.trace(""String_Node_Str"");
  System.exit(0);
}",0.8571428571428571
45176,"public static void stop(){
  stressThread=null;
}","/** 
 * Stops the current stress test.
 */
public static void stop(){
  stressThread=null;
}",0.6950354609929078
45177,"public static void main(String args[]){
  Launcher.main(args);
  StressTester instance=new StressTester();
  JDialog stopDialog=new JDialog();
  JButton stopButton=new JButton(""String_Node_Str"");
  stopButton.addActionListener(instance);
  stopDialog.getContentPane().add(stopButton);
  stopDialog.setSize(new Dimension(80,60));
  stopDialog.setVisible(true);
}","/** 
 * Method used to start the stress tester.
 * @param args command line arguments.
 */
public static void main(String args[]){
  Launcher.main(args);
  StressTester instance=new StressTester();
  JDialog stopDialog=new JDialog();
  JButton stopButton=new JButton(""String_Node_Str"");
  stopButton.addActionListener(instance);
  stopDialog.getContentPane().add(stopButton);
  stopDialog.setSize(new Dimension(80,60));
  stopDialog.setVisible(true);
}",0.8880688806888068
45178,"public InputStream getInputStream() throws IOException {
  BookmarkBuilder builder;
  ByteArrayOutputStream stream;
  builder=BookmarkManager.getBookmarkWriter(stream=new ByteArrayOutputStream());
  try {
    builder.startBookmarks();
    builder.addBookmark(bookmark.getName(),bookmark.getLocation());
    builder.endBookmarks();
  }
 catch (  Throwable e) {
    Throwable e2;
    while ((e2=e.getCause()) != null)     e=e2;
    if (e2 instanceof IOException)     throw (IOException)e2;
    throw new IOException(e.getMessage());
  }
  return new ByteArrayInputStream(stream.toByteArray());
}","public InputStream getInputStream() throws IOException {
  BookmarkBuilder builder;
  ByteArrayOutputStream stream;
  builder=BookmarkManager.getBookmarkWriter(stream=new ByteArrayOutputStream());
  try {
    builder.startBookmarks();
    builder.addBookmark(bookmark.getName(),bookmark.getLocation());
    builder.endBookmarks();
  }
 catch (  Throwable e) {
    Throwable e2;
    while ((e2=e.getCause()) != null)     e=e2;
    if (e instanceof IOException)     throw (IOException)e;
    throw new IOException(e.getMessage());
  }
  return new ByteArrayInputStream(stream.toByteArray());
}",0.9983108108108107
45179,"/** 
 * Copies recursively the given file or folder. 
 * @param file the file or folder to move
 * @param recurseParams destination folder where the given file will be copied (null for top level files)
 * @return <code>true</code> if the file has been copied.
 */
protected boolean processFile(AbstractFile file,Object recurseParams){
  if (getState() == INTERRUPTED)   return false;
  AbstractFile destFolder=recurseParams == null ? baseDestFolder : (AbstractFile)recurseParams;
  boolean isFileInBaseFolder=files.indexOf(file) != -1;
  if (mode == UNPACK_MODE && isFileInBaseFolder) {
    do {
      try {
        AbstractFile archiveFiles[]=currentFile.ls();
        for (int j=0; j < archiveFiles.length && getState() != INTERRUPTED; j++) {
          nextFile(archiveFiles[j]);
          processFile(archiveFiles[j],destFolder);
        }
        return true;
      }
 catch (      IOException e) {
        int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",currentFile.getName()));
        if (ret == RETRY_ACTION)         continue;
        return false;
      }
    }
 while (true);
  }
  String originalName=file.getName();
  String destFileName;
  if (isFileInBaseFolder && newName != null)   destFileName=newName;
 else   destFileName=originalName;
  AbstractFile destFile;
  do {
    try {
      destFile=destFolder.getDirectChild(destFileName);
      currentDestFile=destFile;
      break;
    }
 catch (    IOException e) {
      int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",destFileName));
      if (ret == RETRY_ACTION)       continue;
      return false;
    }
  }
 while (true);
  if (file.isSymlink())   return true;
  int collision=FileCollisionChecker.checkForCollision(file,destFile);
  boolean append=false;
  if (collision != FileCollisionChecker.NO_COLLOSION) {
    int choice;
    if (defaultFileExistsAction == FileCollisionDialog.ASK_ACTION) {
      FileCollisionDialog dialog=new FileCollisionDialog(progressDialog,mainFrame,collision,file,destFile,true);
      choice=waitForUserResponse(dialog);
      if (dialog.applyToAllSelected())       defaultFileExistsAction=choice;
    }
 else     choice=defaultFileExistsAction;
    if (choice == -1 || choice == FileCollisionDialog.CANCEL_ACTION) {
      interrupt();
      return false;
    }
 else     if (choice == FileCollisionDialog.SKIP_ACTION) {
      return false;
    }
 else     if (choice == FileCollisionDialog.RESUME_ACTION) {
      append=true;
    }
 else     if (choice == FileCollisionDialog.OVERWRITE_ACTION) {
    }
 else     if (choice == FileCollisionDialog.OVERWRITE_IF_OLDER_ACTION) {
      if (file.getDate() <= destFile.getDate())       return false;
    }
  }
  if (file.isDirectory()) {
    if (!(destFile.exists() && destFile.isDirectory())) {
      do {
        try {
          destFile.mkdir();
        }
 catch (        IOException e) {
          int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",destFileName));
          if (ret == RETRY_ACTION)           continue;
          return false;
        }
        break;
      }
 while (true);
    }
    do {
      try {
        AbstractFile subFiles[]=file.ls();
        for (int i=0; i < subFiles.length && getState() != INTERRUPTED; i++) {
          nextFile(subFiles[i]);
          processFile(subFiles[i],destFile);
        }
        destFile.changeDate(file.getDate());
        return true;
      }
 catch (      IOException e) {
        int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",destFile.getName()));
        if (ret == RETRY_ACTION)         continue;
        return false;
      }
    }
 while (true);
  }
 else {
    return tryCopyFile(file,destFile,append,errorDialogTitle);
  }
}","/** 
 * Copies recursively the given file or folder. 
 * @param file the file or folder to move
 * @param recurseParams destination folder where the given file will be copied (null for top level files)
 * @return <code>true</code> if the file has been copied.
 */
protected boolean processFile(AbstractFile file,Object recurseParams){
  if (getState() == INTERRUPTED)   return false;
  AbstractFile destFolder=recurseParams == null ? baseDestFolder : (AbstractFile)recurseParams;
  boolean isFileInBaseFolder=files.indexOf(file) != -1;
  if (mode == UNPACK_MODE && isFileInBaseFolder) {
    do {
      try {
        AbstractFile archiveFiles[]=currentFile.ls();
        for (int j=0; j < archiveFiles.length && getState() != INTERRUPTED; j++) {
          nextFile(archiveFiles[j]);
          processFile(archiveFiles[j],destFolder);
        }
        return true;
      }
 catch (      IOException e) {
        int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",currentFile.getName()));
        if (ret == RETRY_ACTION)         continue;
        return false;
      }
    }
 while (true);
  }
  String originalName=file.getName();
  String destFileName;
  if (isFileInBaseFolder && newName != null)   destFileName=newName;
 else   destFileName=originalName;
  AbstractFile destFile;
  do {
    try {
      destFile=destFolder.getDirectChild(destFileName);
      currentDestFile=destFile;
      break;
    }
 catch (    IOException e) {
      int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",destFileName));
      if (ret == RETRY_ACTION)       continue;
      return false;
    }
  }
 while (true);
  if (file.isSymlink())   return true;
  int collision=FileCollisionChecker.checkForCollision(file,destFile);
  boolean append=false;
  if (collision != FileCollisionChecker.NO_COLLOSION) {
    int choice;
    if (defaultFileExistsAction == FileCollisionDialog.ASK_ACTION) {
      FileCollisionDialog dialog=new FileCollisionDialog(progressDialog,mainFrame,collision,file,destFile,true);
      choice=waitForUserResponse(dialog);
      if (dialog.applyToAllSelected())       defaultFileExistsAction=choice;
    }
 else     choice=defaultFileExistsAction;
    if (choice == -1 || choice == FileCollisionDialog.CANCEL_ACTION) {
      interrupt();
      return false;
    }
 else     if (choice == FileCollisionDialog.SKIP_ACTION) {
      return false;
    }
 else     if (choice == FileCollisionDialog.RESUME_ACTION) {
      append=true;
    }
 else     if (choice == FileCollisionDialog.OVERWRITE_ACTION) {
    }
 else     if (choice == FileCollisionDialog.OVERWRITE_IF_OLDER_ACTION) {
      if (file.getDate() <= destFile.getDate())       return false;
    }
  }
  if (file.isDirectory()) {
    if (!(destFile.exists() && destFile.isDirectory())) {
      do {
        try {
          destFile.mkdir();
        }
 catch (        IOException e) {
          int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",destFileName));
          if (ret == RETRY_ACTION)           continue;
          return false;
        }
        break;
      }
 while (true);
    }
    do {
      try {
        AbstractFile subFiles[]=file.ls();
        for (int i=0; i < subFiles.length && getState() != INTERRUPTED; i++) {
          nextFile(subFiles[i]);
          processFile(subFiles[i],destFile);
        }
        destFile.changeDate(file.getDate());
        return true;
      }
 catch (      IOException e) {
        int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",file.getName()));
        if (ret == RETRY_ACTION)         continue;
        return false;
      }
    }
 while (true);
  }
 else {
    return tryCopyFile(file,destFile,append,errorDialogTitle);
  }
}",0.9991989319092124
45180,"/** 
 * Moves recursively the given file or folder. 
 * @param file the file or folder to move
 * @param recurseParams destination folder where the given file will be moved (null for top level files)
 * @return <code>true</code> if the file has been moved completly (copied + deleted).
 */
protected boolean processFile(AbstractFile file,Object recurseParams){
  if (getState() == INTERRUPTED)   return false;
  AbstractFile destFolder=recurseParams == null ? baseDestFolder : (AbstractFile)recurseParams;
  boolean isFileInBaseFolder=files.indexOf(file) != -1;
  String originalName=file.getName();
  String destFileName;
  if (isFileInBaseFolder && newName != null)   destFileName=newName;
 else   destFileName=originalName;
  AbstractFile destFile;
  do {
    try {
      destFile=destFolder.getDirectChild(destFileName);
      break;
    }
 catch (    IOException e) {
      int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",destFileName));
      if (ret == RETRY_ACTION)       continue;
      return false;
    }
  }
 while (true);
  if (file.isSymlink()) {
    do {
      try {
        file.delete();
        return true;
      }
 catch (      IOException e) {
        if (com.mucommander.Debug.ON)         com.mucommander.Debug.trace(""String_Node_Str"" + e);
        int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",file.getAbsolutePath()));
        if (ret == RETRY_ACTION)         continue;
        return false;
      }
    }
 while (true);
  }
  int collision=FileCollisionChecker.checkForCollision(file,destFile);
  boolean append=false;
  boolean caseRenaming=false;
  if (renameMode && collision == FileCollisionChecker.SAME_SOURCE_AND_DESTINATION) {
    String sourceFileName=file.getName();
    if (sourceFileName.equalsIgnoreCase(destFileName) && !sourceFileName.equals(destFileName))     caseRenaming=true;
  }
  if (!caseRenaming && collision != FileCollisionChecker.NO_COLLOSION) {
    int choice;
    if (defaultFileExistsAction == FileCollisionDialog.ASK_ACTION) {
      FileCollisionDialog dialog=new FileCollisionDialog(progressDialog,mainFrame,collision,file,destFile,true);
      choice=waitForUserResponse(dialog);
      if (dialog.applyToAllSelected())       defaultFileExistsAction=choice;
    }
 else     choice=defaultFileExistsAction;
    if (choice == -1 || choice == FileCollisionDialog.CANCEL_ACTION) {
      interrupt();
      return false;
    }
 else     if (choice == FileCollisionDialog.SKIP_ACTION) {
      return false;
    }
 else     if (choice == FileCollisionDialog.RESUME_ACTION) {
      append=true;
    }
 else     if (choice == FileCollisionDialog.OVERWRITE_ACTION) {
    }
 else     if (choice == FileCollisionDialog.OVERWRITE_IF_OLDER_ACTION) {
      if (file.getDate() <= destFile.getDate())       return false;
    }
  }
  if (!append) {
    int moveToHint=file.getMoveToHint(destFile);
    if (moveToHint == AbstractFile.SHOULD_HINT || moveToHint == AbstractFile.MUST_HINT) {
      do {
        try {
          if (file.moveTo(destFile))           return true;
          break;
        }
 catch (        FileTransferException e) {
          int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",file.getAbsolutePath()));
          if (ret == RETRY_ACTION)           continue;
          return false;
        }
      }
 while (true);
    }
  }
  if (file.isDirectory()) {
    if (!(destFile.exists() && destFile.isDirectory())) {
      do {
        try {
          destFile.mkdir();
        }
 catch (        IOException e) {
          if (com.mucommander.Debug.ON)           com.mucommander.Debug.trace(""String_Node_Str"" + e);
          int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",destFile.getAbsolutePath()));
          if (ret == RETRY_ACTION)           continue;
          return false;
        }
        break;
      }
 while (true);
    }
    do {
      try {
        AbstractFile subFiles[]=file.ls();
        boolean isFolderEmpty=true;
        for (int i=0; i < subFiles.length; i++) {
          if (getState() == INTERRUPTED)           return false;
          nextFile(subFiles[i]);
          if (!processFile(subFiles[i],destFile))           isFolderEmpty=false;
        }
        destFile.changeDate(file.getDate());
        if (!isFolderEmpty)         return false;
      }
 catch (      IOException e) {
        if (com.mucommander.Debug.ON)         com.mucommander.Debug.trace(""String_Node_Str"" + e);
        int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",file.getAbsolutePath()));
        if (ret == RETRY_ACTION)         continue;
        return false;
      }
      break;
    }
 while (true);
    if (getState() == INTERRUPTED)     return false;
    do {
      try {
        file.delete();
        return true;
      }
 catch (      IOException e) {
        if (com.mucommander.Debug.ON)         com.mucommander.Debug.trace(""String_Node_Str"" + e);
        int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",file.getAbsolutePath()));
        if (ret == RETRY_ACTION)         continue;
        return false;
      }
    }
 while (true);
  }
 else {
    if (tryCopyFile(file,destFile,append,errorDialogTitle) && getState() != INTERRUPTED) {
      do {
        try {
          file.delete();
          return true;
        }
 catch (        IOException e) {
          if (com.mucommander.Debug.ON)           com.mucommander.Debug.trace(""String_Node_Str"" + e);
          int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",file.getAbsolutePath()));
          if (ret == RETRY_ACTION)           continue;
          return false;
        }
      }
 while (true);
    }
    return false;
  }
}","/** 
 * Moves recursively the given file or folder. 
 * @param file the file or folder to move
 * @param recurseParams destination folder where the given file will be moved (null for top level files)
 * @return <code>true</code> if the file has been moved completly (copied + deleted).
 */
protected boolean processFile(AbstractFile file,Object recurseParams){
  if (getState() == INTERRUPTED)   return false;
  AbstractFile destFolder=recurseParams == null ? baseDestFolder : (AbstractFile)recurseParams;
  boolean isFileInBaseFolder=files.indexOf(file) != -1;
  String originalName=file.getName();
  String destFileName;
  if (isFileInBaseFolder && newName != null)   destFileName=newName;
 else   destFileName=originalName;
  AbstractFile destFile;
  do {
    try {
      destFile=destFolder.getDirectChild(destFileName);
      break;
    }
 catch (    IOException e) {
      int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",destFileName));
      if (ret == RETRY_ACTION)       continue;
      return false;
    }
  }
 while (true);
  if (file.isSymlink()) {
    do {
      try {
        file.delete();
        return true;
      }
 catch (      IOException e) {
        if (com.mucommander.Debug.ON)         com.mucommander.Debug.trace(""String_Node_Str"" + e);
        int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",file.getAbsolutePath()));
        if (ret == RETRY_ACTION)         continue;
        return false;
      }
    }
 while (true);
  }
  int collision=FileCollisionChecker.checkForCollision(file,destFile);
  boolean append=false;
  boolean caseRenaming=false;
  if (renameMode && collision == FileCollisionChecker.SAME_SOURCE_AND_DESTINATION) {
    String sourceFileName=file.getName();
    if (sourceFileName.equalsIgnoreCase(destFileName) && !sourceFileName.equals(destFileName))     caseRenaming=true;
  }
  if (!caseRenaming && collision != FileCollisionChecker.NO_COLLOSION) {
    int choice;
    if (defaultFileExistsAction == FileCollisionDialog.ASK_ACTION) {
      FileCollisionDialog dialog=new FileCollisionDialog(progressDialog,mainFrame,collision,file,destFile,true);
      choice=waitForUserResponse(dialog);
      if (dialog.applyToAllSelected())       defaultFileExistsAction=choice;
    }
 else     choice=defaultFileExistsAction;
    if (choice == -1 || choice == FileCollisionDialog.CANCEL_ACTION) {
      interrupt();
      return false;
    }
 else     if (choice == FileCollisionDialog.SKIP_ACTION) {
      return false;
    }
 else     if (choice == FileCollisionDialog.RESUME_ACTION) {
      append=true;
    }
 else     if (choice == FileCollisionDialog.OVERWRITE_ACTION) {
    }
 else     if (choice == FileCollisionDialog.OVERWRITE_IF_OLDER_ACTION) {
      if (file.getDate() <= destFile.getDate())       return false;
    }
  }
  if (!append) {
    int moveToHint=file.getMoveToHint(destFile);
    if (moveToHint == AbstractFile.SHOULD_HINT || moveToHint == AbstractFile.MUST_HINT) {
      do {
        try {
          if (file.moveTo(destFile))           return true;
          break;
        }
 catch (        FileTransferException e) {
          int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",file.getAbsolutePath()));
          if (ret == RETRY_ACTION)           continue;
          return false;
        }
      }
 while (true);
    }
  }
  if (file.isDirectory()) {
    if (!(destFile.exists() && destFile.isDirectory())) {
      do {
        try {
          destFile.mkdir();
        }
 catch (        IOException e) {
          int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",destFile.getAbsolutePath()));
          if (ret == RETRY_ACTION)           continue;
          return false;
        }
        break;
      }
 while (true);
    }
    do {
      try {
        AbstractFile subFiles[]=file.ls();
        boolean isFolderEmpty=true;
        for (int i=0; i < subFiles.length; i++) {
          if (getState() == INTERRUPTED)           return false;
          nextFile(subFiles[i]);
          if (!processFile(subFiles[i],destFile))           isFolderEmpty=false;
        }
        destFile.changeDate(file.getDate());
        if (!isFolderEmpty)         return false;
      }
 catch (      IOException e) {
        int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",file.getName()));
        if (ret == RETRY_ACTION)         continue;
        return false;
      }
      break;
    }
 while (true);
    if (getState() == INTERRUPTED)     return false;
    do {
      try {
        file.delete();
        return true;
      }
 catch (      IOException e) {
        int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",file.getAbsolutePath()));
        if (ret == RETRY_ACTION)         continue;
        return false;
      }
    }
 while (true);
  }
 else {
    if (tryCopyFile(file,destFile,append,errorDialogTitle) && getState() != INTERRUPTED) {
      do {
        try {
          file.delete();
          return true;
        }
 catch (        IOException e) {
          if (com.mucommander.Debug.ON)           com.mucommander.Debug.trace(""String_Node_Str"" + e);
          int ret=showErrorDialog(errorDialogTitle,Translator.get(""String_Node_Str"",file.getAbsolutePath()));
          if (ret == RETRY_ACTION)           continue;
          return false;
        }
      }
 while (true);
    }
    return false;
  }
}",0.961255605381166
45181,"protected void init(String title,String labelText,String okText,String errorDialogTitle){
  this.errorDialogTitle=errorDialogTitle;
  setTitle(title);
  YBoxPanel mainPanel=new YBoxPanel();
  JLabel label=new JLabel(labelText + ""String_Node_Str"");
  mainPanel.add(label);
  pathField=new JTextField();
  pathField.addActionListener(this);
  mainPanel.add(pathField);
  mainPanel.addSpace(10);
  setInitialFocusComponent(pathField);
  mainPanel.add(new JLabel(Translator.get(""String_Node_Str"")));
  fileExistsActionComboBox=new JComboBox();
  fileExistsActionComboBox.addItem(Translator.get(""String_Node_Str""));
  int nbChoices=DEFAULT_ACTIONS_TEXT.length;
  for (int i=0; i < nbChoices; i++)   fileExistsActionComboBox.addItem(DEFAULT_ACTIONS_TEXT[i]);
  mainPanel.add(fileExistsActionComboBox);
  mainPanel.addSpace(10);
  JPanel fileDetailsPanel=createFileDetailsPanel();
  okButton=new JButton(okText);
  cancelButton=new JButton(Translator.get(""String_Node_Str""));
  mainPanel.add(createButtonsPanel(createFileDetailsButton(fileDetailsPanel),DialogToolkit.createOKCancelPanel(okButton,cancelButton,getRootPane(),this)));
  mainPanel.add(fileDetailsPanel);
  getContentPane().add(mainPanel,BorderLayout.NORTH);
  setMinimumSize(MINIMUM_DIALOG_DIMENSION);
  setMaximumSize(MAXIMUM_DIALOG_DIMENSION);
}","protected void init(String title,String labelText,String okText,String errorDialogTitle){
  this.errorDialogTitle=errorDialogTitle;
  setTitle(title);
  YBoxPanel mainPanel=new YBoxPanel();
  JLabel label=new JLabel(labelText + ""String_Node_Str"");
  mainPanel.add(label);
  pathField=new JTextField();
  pathField.addActionListener(this);
  mainPanel.add(pathField);
  mainPanel.addSpace(10);
  setInitialFocusComponent(pathField);
  mainPanel.add(new JLabel(Translator.get(""String_Node_Str"") + ""String_Node_Str""));
  fileExistsActionComboBox=new JComboBox();
  fileExistsActionComboBox.addItem(Translator.get(""String_Node_Str""));
  int nbChoices=DEFAULT_ACTIONS_TEXT.length;
  for (int i=0; i < nbChoices; i++)   fileExistsActionComboBox.addItem(DEFAULT_ACTIONS_TEXT[i]);
  mainPanel.add(fileExistsActionComboBox);
  mainPanel.addSpace(10);
  JPanel fileDetailsPanel=createFileDetailsPanel();
  okButton=new JButton(okText);
  cancelButton=new JButton(Translator.get(""String_Node_Str""));
  mainPanel.add(createButtonsPanel(createFileDetailsButton(fileDetailsPanel),DialogToolkit.createOKCancelPanel(okButton,cancelButton,getRootPane(),this)));
  mainPanel.add(fileDetailsPanel);
  getContentPane().add(mainPanel,BorderLayout.NORTH);
  setMinimumSize(MINIMUM_DIALOG_DIMENSION);
  setMaximumSize(MAXIMUM_DIALOG_DIMENSION);
}",0.9923838537699924
45182,"/** 
 * This method is invoked when the OK button is pressed.
 */
private void okPressed(){
  String destPath=pathField.getText();
  Object ret[]=FileToolkit.resolvePath(destPath,mainFrame.getActiveTable().getCurrentFolder());
  if (ret == null || (files.size() > 1 && ret[1] != null)) {
    showErrorDialog(Translator.get(""String_Node_Str"",destPath));
    return;
  }
  AbstractFile destFolder=(AbstractFile)ret[0];
  String newName=(String)ret[1];
  int defaultFileExistsAction=fileExistsActionComboBox.getSelectedIndex();
  if (defaultFileExistsAction == 0)   defaultFileExistsAction=FileCollisionDialog.ASK_ACTION;
 else   defaultFileExistsAction=DEFAULT_ACTIONS[defaultFileExistsAction - 1];
  startJob(destFolder,newName,defaultFileExistsAction);
}","/** 
 * This method is invoked when the OK button is pressed.
 */
private void okPressed(){
  String destPath=pathField.getText();
  Object ret[]=FileToolkit.resolvePath(destPath,mainFrame.getActiveTable().getCurrentFolder());
  if (ret == null || (files.size() > 1 && ret[1] != null)) {
    showErrorDialog(Translator.get(""String_Node_Str"",destPath),errorDialogTitle);
    return;
  }
  AbstractFile destFolder=(AbstractFile)ret[0];
  String newName=(String)ret[1];
  int defaultFileExistsAction=fileExistsActionComboBox.getSelectedIndex();
  if (defaultFileExistsAction == 0)   defaultFileExistsAction=FileCollisionDialog.ASK_ACTION;
 else   defaultFileExistsAction=DEFAULT_ACTIONS[defaultFileExistsAction - 1];
  startJob(destFolder,newName,defaultFileExistsAction);
}",0.9888524590163934
45183,"public CompatURLConnection(URL url,AbstractFile file) throws IOException {
  super(url);
  this.file=file;
  connected=true;
}","public CompatURLConnection(URL url,AbstractFile file) throws IOException {
  super(url);
  if (file != null) {
    this.file=file;
    connected=true;
  }
}",0.8936170212765957
45184,"/** 
 * Opens a stream on the right file. <p> If a backup file is found, and is bigger than the target file, then it will be used. </p>
 * @param file        file on which to open an input stream.
 * @return                a stream on the right file.
 * @exception IOException thrown if any IO related error occurs.
 */
private static InputStream getInputStream(AbstractFile file) throws IOException {
  AbstractFile backup;
  backup=FileFactory.getFile(file.getAbsolutePath() + BACKUP_SUFFIX);
  if (backup.exists() && (file.getSize() < backup.getSize()))   return backup.getInputStream();
  return file.getInputStream();
}","/** 
 * Opens a stream on the right file. <p> If a backup file is found, and is bigger than the target file, then it will be used. </p>
 * @param file        file on which to open an input stream.
 * @return                a stream on the right file.
 * @exception IOException thrown if any IO related error occurs.
 */
private static InputStream getInputStream(AbstractFile file) throws IOException {
  AbstractFile backup;
  FileURL test;
  test=(FileURL)file.getURL().clone();
  test.setPath(test.getPath() + BACKUP_SUFFIX);
  backup=FileFactory.getFile(test);
  if (backup != null && backup.exists() && (file.getSize() < backup.getSize()))   return backup.getInputStream();
  return file.getInputStream();
}",0.8524344569288389
45185,"/** 
 * Returns this FileURL's parent, or null if this FileURL has no parent (path is ""/""). The returned parent will have the same protocol, host, port, credentials and properties as this FileURL. The filename and query parts of this FileURL (if any) will not be set in the returned parent, both will be null. <p>Note: this method returns a new FileURL instance everytime it is called, and all mutable fields of this FileURL are cloned. Therefore the returned parent can be safely modified without risking to modify other FileURL instances.
 */
public FileURL getParent(){
  if (!(path.equals(""String_Node_Str"") || path.equals(""String_Node_Str""))) {
    String separator=getPathSeparator();
    String parentPath=path.endsWith(separator) ? path.substring(0,path.length() - separator.length()) : path;
    int lastSeparatorPos=parentPath.lastIndexOf(separator);
    if (lastSeparatorPos != -1) {
      FileURL parentURL=new FileURL();
      parentURL.protocol=protocol;
      parentURL.host=host;
      parentURL.port=port;
      parentURL.path=parentPath.substring(0,lastSeparatorPos + 1);
      parentURL.credentials=credentials;
      if (properties != null)       parentURL.properties=new Hashtable(properties);
      return parentURL;
    }
  }
  return null;
}","/** 
 * Returns this FileURL's parent, or null if this FileURL has no parent (path is ""/""). The returned parent will have the same protocol, host, port, credentials and properties as this FileURL. The filename and query parts of this FileURL (if any) will not be set in the returned parent, both will be null. <p>Note: this method returns a new FileURL instance everytime it is called, and all mutable fields of this FileURL are cloned. Therefore the returned parent can be safely modified without risking to modify other FileURL instances.</p>
 */
public FileURL getParent(){
  if (!(path.equals(""String_Node_Str"") || path.equals(""String_Node_Str""))) {
    String separator=getPathSeparator();
    String parentPath=path.endsWith(separator) ? path.substring(0,path.length() - separator.length()) : path;
    int lastSeparatorPos=parentPath.lastIndexOf(separator);
    if (lastSeparatorPos != -1) {
      FileURL parentURL=new FileURL();
      parentURL.protocol=protocol;
      parentURL.host=host;
      parentURL.port=port;
      parentURL.path=parentPath.substring(0,lastSeparatorPos + 1);
      parentURL.filename=getFilenameFromPath(parentURL.path,separator);
      parentURL.credentials=credentials;
      if (properties != null)       parentURL.properties=new Hashtable(properties);
      return parentURL;
    }
  }
  return null;
}",0.9708365310821182
45186,"public void focusLost(FocusEvent e){
  if (e.getSource() == fileTable) {
    ((MutableLineBorder)scrollPane.getBorder()).setLineColor(unfocusedBorderColor);
    scrollPane.getViewport().setBackground(unfocusedBackgroundColor);
  }
  fileTable.getQuickSearch().cancel();
}","public void focusLost(FocusEvent e){
  if (e.getSource() == fileTable) {
    setBorderColor(unfocusedBorderColor);
    scrollPane.getViewport().setBackground(unfocusedBackgroundColor);
  }
  fileTable.getQuickSearch().cancel();
}",0.88
45187,"/** 
 * Receives theme color changes notifications.
 */
public void colorChanged(ColorChangedEvent event){
switch (event.getColorId()) {
case Theme.FILE_TABLE_BORDER_COLOR:
    borderColor=event.getColor();
  if (fileTable.hasFocus()) {
    ((MutableLineBorder)scrollPane.getBorder()).setLineColor(borderColor);
    scrollPane.repaint();
  }
break;
case Theme.FILE_TABLE_INACTIVE_BORDER_COLOR:
unfocusedBorderColor=event.getColor();
if (!fileTable.hasFocus()) {
((MutableLineBorder)scrollPane.getBorder()).setLineColor(unfocusedBorderColor);
scrollPane.repaint();
}
break;
case Theme.FILE_TABLE_BACKGROUND_COLOR:
backgroundColor=event.getColor();
if (fileTable.hasFocus()) scrollPane.getViewport().setBackground(backgroundColor);
break;
case Theme.FILE_TABLE_INACTIVE_BACKGROUND_COLOR:
unfocusedBackgroundColor=event.getColor();
if (!fileTable.hasFocus()) scrollPane.getViewport().setBackground(unfocusedBackgroundColor);
break;
case Theme.FILE_TABLE_UNMATCHED_BACKGROUND_COLOR:
unmatchedBackgroundColor=event.getColor();
break;
}
}","/** 
 * Receives theme color changes notifications.
 */
public void colorChanged(ColorChangedEvent event){
switch (event.getColorId()) {
case Theme.FILE_TABLE_BORDER_COLOR:
    borderColor=event.getColor();
  if (fileTable.hasFocus()) {
    setBorderColor(borderColor);
    scrollPane.repaint();
  }
break;
case Theme.FILE_TABLE_INACTIVE_BORDER_COLOR:
unfocusedBorderColor=event.getColor();
if (!fileTable.hasFocus()) {
setBorderColor(unfocusedBorderColor);
scrollPane.repaint();
}
break;
case Theme.FILE_TABLE_BACKGROUND_COLOR:
backgroundColor=event.getColor();
if (fileTable.hasFocus()) scrollPane.getViewport().setBackground(backgroundColor);
break;
case Theme.FILE_TABLE_INACTIVE_BACKGROUND_COLOR:
unfocusedBackgroundColor=event.getColor();
if (!fileTable.hasFocus()) scrollPane.getViewport().setBackground(unfocusedBackgroundColor);
break;
case Theme.FILE_TABLE_UNMATCHED_BACKGROUND_COLOR:
unmatchedBackgroundColor=event.getColor();
break;
}
}",0.9393939393939394
45188,"public void focusGained(FocusEvent e){
  mainFrame.setActiveTable(fileTable);
  if (e.getSource() == fileTable) {
    ((MutableLineBorder)scrollPane.getBorder()).setLineColor(borderColor);
    scrollPane.getViewport().setBackground(backgroundColor);
  }
}","public void focusGained(FocusEvent e){
  mainFrame.setActiveTable(fileTable);
  if (e.getSource() == fileTable) {
    setBorderColor(borderColor);
    scrollPane.getViewport().setBackground(backgroundColor);
  }
}",0.8974358974358975
45189,"public void colorChanged(ColorChangedEvent event){
switch (event.getColorId()) {
case Theme.STATUS_BAR_BACKGROUND_COLOR:
    backgroundColor=event.getColor();
  break;
case Theme.STATUS_BAR_BORDER_COLOR:
((MutableLineBorder)getBorder()).setLineColor(event.getColor());
break;
case Theme.STATUS_BAR_OK_COLOR:
okColor=event.getColor();
break;
case Theme.STATUS_BAR_WARNING_COLOR:
warningColor=event.getColor();
break;
case Theme.STATUS_BAR_CRITICAL_COLOR:
criticalColor=event.getColor();
break;
default :
return;
}
repaint();
}","public void colorChanged(ColorChangedEvent event){
switch (event.getColorId()) {
case Theme.STATUS_BAR_BACKGROUND_COLOR:
    backgroundColor=event.getColor();
  break;
case Theme.STATUS_BAR_BORDER_COLOR:
if (getBorder() instanceof MutableLineBorder) ((MutableLineBorder)getBorder()).setLineColor(event.getColor());
break;
case Theme.STATUS_BAR_OK_COLOR:
okColor=event.getColor();
break;
case Theme.STATUS_BAR_WARNING_COLOR:
warningColor=event.getColor();
break;
case Theme.STATUS_BAR_CRITICAL_COLOR:
criticalColor=event.getColor();
break;
default :
return;
}
repaint();
}",0.958029197080292
45190,"public void propertyChange(PropertyChangeEvent event){
  if (event.getPropertyName().equals(PreviewLabel.BACKGROUND_COLOR_PROPERTY_NAME))   getViewport().setBackground(data.getColor(isActive ? Theme.FILE_TABLE_BACKGROUND_COLOR : Theme.FILE_TABLE_INACTIVE_BACKGROUND_COLOR));
 else   if (event.getPropertyName().equals(PreviewLabel.BORDER_COLOR_PROPERTY_NAME))   ((MutableLineBorder)getBorder()).setLineColor(data.getColor(isActive ? Theme.FILE_TABLE_BORDER_COLOR : Theme.FILE_TABLE_INACTIVE_BORDER_COLOR));
 else   if (!event.getPropertyName().equals(PreviewLabel.FOREGROUND_COLOR_PROPERTY_NAME))   return;
  repaint();
}","public void propertyChange(PropertyChangeEvent event){
  if (event.getPropertyName().equals(PreviewLabel.BACKGROUND_COLOR_PROPERTY_NAME))   getViewport().setBackground(data.getColor(isActive ? Theme.FILE_TABLE_BACKGROUND_COLOR : Theme.FILE_TABLE_INACTIVE_BACKGROUND_COLOR));
 else   if (event.getPropertyName().equals(PreviewLabel.BORDER_COLOR_PROPERTY_NAME)) {
    if (getBorder() instanceof MutableLineBorder)     ((MutableLineBorder)getBorder()).setLineColor(data.getColor(isActive ? Theme.FILE_TABLE_BORDER_COLOR : Theme.FILE_TABLE_INACTIVE_BORDER_COLOR));
  }
 else   if (!event.getPropertyName().equals(PreviewLabel.FOREGROUND_COLOR_PROPERTY_NAME))   return;
  repaint();
}",0.9492307692307692
45191,"/** 
 * Saves the specified theme to the specified output stream.
 * @param theme       theme to save.
 * @param stream      where to write the theme to.
 * @throws IOException thrown if any IO related error occurs.
 */
public static void write(ThemeData theme,OutputStream stream) throws IOException {
  XmlWriter out;
  out=new XmlWriter(stream);
  out.startElement(ELEMENT_ROOT);
  out.println();
  out.startElement(ELEMENT_TABLE);
  out.println();
  if (theme.isColorSet(Theme.FILE_TABLE_BORDER_COLOR))   out.writeStandAloneElement(ELEMENT_BORDER,getColorAttributes(theme.getColor(Theme.FILE_TABLE_BORDER_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_INACTIVE_BORDER_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_BORDER,getColorAttributes(theme.getColor(Theme.FILE_TABLE_INACTIVE_BORDER_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_SELECTED_OUTLINE_COLOR))   out.writeStandAloneElement(ELEMENT_OUTLINE,getColorAttributes(theme.getColor(Theme.FILE_TABLE_SELECTED_OUTLINE_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_INACTIVE_SELECTED_OUTLINE_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_OUTLINE,getColorAttributes(theme.getColor(Theme.FILE_TABLE_INACTIVE_SELECTED_OUTLINE_COLOR)));
  if (theme.isFontSet(Theme.FILE_TABLE_FONT))   out.writeStandAloneElement(ELEMENT_FONT,getFontAttributes(theme.getFont(Theme.FILE_TABLE_FONT)));
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.FILE_TABLE_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_INACTIVE_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_INACTIVE_BACKGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.FILE_TABLE_SELECTED_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_SELECTED_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_INACTIVE_SELECTED_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_INACTIVE_SELECTED_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_INACTIVE_SELECTED_SECONDARY_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_SECONDARY_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_INACTIVE_SELECTED_SECONDARY_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_SELECTED_SECONDARY_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_SECONDARY_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_SELECTED_SECONDARY_BACKGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.startElement(ELEMENT_ALTERNATE);
  out.println();
  if (theme.isColorSet(Theme.FILE_TABLE_ALTERNATE_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_ALTERNATE_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_INACTIVE_ALTERNATE_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_INACTIVE_ALTERNATE_BACKGROUND_COLOR)));
  out.endElement(ELEMENT_ALTERNATE);
  out.startElement(ELEMENT_UNMATCHED);
  out.println();
  if (theme.isColorSet(Theme.FILE_TABLE_UNMATCHED_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_UNMATCHED_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_UNMATCHED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_UNMATCHED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_UNMATCHED);
  out.startElement(ELEMENT_HIDDEN);
  out.println();
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.HIDDEN_FILE_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.HIDDEN_FILE_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.HIDDEN_FILE_INACTIVE_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.HIDDEN_FILE_INACTIVE_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.HIDDEN_FILE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.HIDDEN_FILE_SELECTED_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.HIDDEN_FILE_INACTIVE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.HIDDEN_FILE_INACTIVE_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_HIDDEN);
  out.startElement(ELEMENT_FOLDER);
  out.println();
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.FOLDER_INACTIVE_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.FOLDER_INACTIVE_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.FOLDER_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.FOLDER_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.FOLDER_INACTIVE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.FOLDER_INACTIVE_SELECTED_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.FOLDER_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.FOLDER_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_FOLDER);
  out.startElement(ELEMENT_ARCHIVE);
  out.println();
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.ARCHIVE_INACTIVE_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.ARCHIVE_INACTIVE_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.ARCHIVE_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.ARCHIVE_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.ARCHIVE_INACTIVE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.ARCHIVE_INACTIVE_SELECTED_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.ARCHIVE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.ARCHIVE_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_ARCHIVE);
  out.startElement(ELEMENT_SYMLINK);
  out.println();
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.SYMLINK_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.SYMLINK_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.SYMLINK_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.SYMLINK_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.SYMLINK_INACTIVE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.SYMLINK_INACTIVE_SELECTED_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.SYMLINK_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.SYMLINK_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_SYMLINK);
  out.startElement(ELEMENT_MARKED);
  out.println();
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.MARKED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.MARKED_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.MARKED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.MARKED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.MARKED_INACTIVE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.MARKED_INACTIVE_SELECTED_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.MARKED_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.MARKED_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_MARKED);
  out.startElement(ELEMENT_FILE);
  out.println();
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.FILE_INACTIVE_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.FILE_INACTIVE_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.FILE_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.FILE_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.FILE_INACTIVE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.FILE_INACTIVE_SELECTED_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.FILE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.FILE_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_FILE);
  out.endElement(ELEMENT_TABLE);
  out.startElement(ELEMENT_SHELL);
  out.println();
  if (theme.isFontSet(Theme.SHELL_FONT))   out.writeStandAloneElement(ELEMENT_FONT,getFontAttributes(theme.getFont(Theme.SHELL_FONT)));
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.SHELL_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.SHELL_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.SHELL_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.SHELL_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.SHELL_SELECTED_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.SHELL_SELECTED_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.SHELL_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.SHELL_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_SHELL);
  out.startElement(ELEMENT_SHELL_HISTORY);
  out.println();
  if (theme.isFontSet(Theme.SHELL_HISTORY_FONT))   out.writeStandAloneElement(ELEMENT_FONT,getFontAttributes(theme.getFont(Theme.SHELL_HISTORY_FONT)));
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.SHELL_HISTORY_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.SHELL_HISTORY_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.SHELL_HISTORY_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.SHELL_HISTORY_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.SHELL_HISTORY_SELECTED_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.SHELL_HISTORY_SELECTED_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.SHELL_HISTORY_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.SHELL_HISTORY_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_SHELL_HISTORY);
  out.startElement(ELEMENT_EDITOR);
  out.println();
  if (theme.isFontSet(Theme.EDITOR_FONT))   out.writeStandAloneElement(ELEMENT_FONT,getFontAttributes(theme.getFont(Theme.EDITOR_FONT)));
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.EDITOR_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.EDITOR_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.EDITOR_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.EDITOR_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.EDITOR_SELECTED_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.EDITOR_SELECTED_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.EDITOR_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.EDITOR_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_EDITOR);
  out.startElement(ELEMENT_LOCATION_BAR);
  out.println();
  if (theme.isFontSet(Theme.LOCATION_BAR_FONT))   out.writeStandAloneElement(ELEMENT_FONT,getFontAttributes(theme.getFont(Theme.LOCATION_BAR_FONT)));
  if (theme.isColorSet(Theme.LOCATION_BAR_PROGRESS_COLOR))   out.writeStandAloneElement(ELEMENT_PROGRESS,getColorAttributes(theme.getColor(Theme.LOCATION_BAR_PROGRESS_COLOR)));
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.LOCATION_BAR_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.LOCATION_BAR_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.LOCATION_BAR_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.LOCATION_BAR_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.LOCATION_BAR_SELECTED_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.LOCATION_BAR_SELECTED_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.LOCATION_BAR_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.LOCATION_BAR_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_LOCATION_BAR);
  out.startElement(ELEMENT_STATUS_BAR);
  out.println();
  if (theme.isFontSet(Theme.STATUS_BAR_FONT))   out.writeStandAloneElement(ELEMENT_FONT,getFontAttributes(theme.getFont(Theme.STATUS_BAR_FONT)));
  if (theme.isColorSet(Theme.STATUS_BAR_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.STATUS_BAR_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.STATUS_BAR_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.STATUS_BAR_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.STATUS_BAR_BORDER_COLOR))   out.writeStandAloneElement(ELEMENT_BORDER,getColorAttributes(theme.getColor(Theme.STATUS_BAR_BORDER_COLOR)));
  if (theme.isColorSet(Theme.STATUS_BAR_OK_COLOR))   out.writeStandAloneElement(ELEMENT_OK,getColorAttributes(theme.getColor(Theme.STATUS_BAR_OK_COLOR)));
  if (theme.isColorSet(Theme.STATUS_BAR_WARNING_COLOR))   out.writeStandAloneElement(ELEMENT_WARNING,getColorAttributes(theme.getColor(Theme.STATUS_BAR_WARNING_COLOR)));
  if (theme.isColorSet(Theme.STATUS_BAR_CRITICAL_COLOR))   out.writeStandAloneElement(ELEMENT_CRITICAL,getColorAttributes(theme.getColor(Theme.STATUS_BAR_CRITICAL_COLOR)));
  out.endElement(ELEMENT_STATUS_BAR);
  out.endElement(ELEMENT_ROOT);
}","/** 
 * Saves the specified theme to the specified output stream.
 * @param theme       theme to save.
 * @param stream      where to write the theme to.
 * @throws IOException thrown if any IO related error occurs.
 */
public static void write(ThemeData theme,OutputStream stream) throws IOException {
  XmlWriter out;
  out=new XmlWriter(stream);
  out.startElement(ELEMENT_ROOT);
  out.println();
  out.startElement(ELEMENT_TABLE);
  out.println();
  if (theme.isColorSet(Theme.FILE_TABLE_BORDER_COLOR))   out.writeStandAloneElement(ELEMENT_BORDER,getColorAttributes(theme.getColor(Theme.FILE_TABLE_BORDER_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_INACTIVE_BORDER_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_BORDER,getColorAttributes(theme.getColor(Theme.FILE_TABLE_INACTIVE_BORDER_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_SELECTED_OUTLINE_COLOR))   out.writeStandAloneElement(ELEMENT_OUTLINE,getColorAttributes(theme.getColor(Theme.FILE_TABLE_SELECTED_OUTLINE_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_INACTIVE_SELECTED_OUTLINE_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_OUTLINE,getColorAttributes(theme.getColor(Theme.FILE_TABLE_INACTIVE_SELECTED_OUTLINE_COLOR)));
  if (theme.isFontSet(Theme.FILE_TABLE_FONT))   out.writeStandAloneElement(ELEMENT_FONT,getFontAttributes(theme.getFont(Theme.FILE_TABLE_FONT)));
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.FILE_TABLE_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_INACTIVE_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_INACTIVE_BACKGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.FILE_TABLE_SELECTED_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_SELECTED_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_INACTIVE_SELECTED_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_INACTIVE_SELECTED_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_INACTIVE_SELECTED_SECONDARY_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_SECONDARY_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_INACTIVE_SELECTED_SECONDARY_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_SELECTED_SECONDARY_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_SECONDARY_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_SELECTED_SECONDARY_BACKGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.startElement(ELEMENT_ALTERNATE);
  out.println();
  if (theme.isColorSet(Theme.FILE_TABLE_ALTERNATE_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_ALTERNATE_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_INACTIVE_ALTERNATE_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_INACTIVE_ALTERNATE_BACKGROUND_COLOR)));
  out.endElement(ELEMENT_ALTERNATE);
  out.startElement(ELEMENT_UNMATCHED);
  out.println();
  if (theme.isColorSet(Theme.FILE_TABLE_UNMATCHED_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_UNMATCHED_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.FILE_TABLE_UNMATCHED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.FILE_TABLE_UNMATCHED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_UNMATCHED);
  out.startElement(ELEMENT_HIDDEN);
  out.println();
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.HIDDEN_FILE_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.HIDDEN_FILE_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.HIDDEN_FILE_INACTIVE_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.HIDDEN_FILE_INACTIVE_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.HIDDEN_FILE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.HIDDEN_FILE_SELECTED_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.HIDDEN_FILE_INACTIVE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.HIDDEN_FILE_INACTIVE_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_HIDDEN);
  out.startElement(ELEMENT_FOLDER);
  out.println();
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.FOLDER_INACTIVE_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.FOLDER_INACTIVE_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.FOLDER_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.FOLDER_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.FOLDER_INACTIVE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.FOLDER_INACTIVE_SELECTED_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.FOLDER_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.FOLDER_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_FOLDER);
  out.startElement(ELEMENT_ARCHIVE);
  out.println();
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.ARCHIVE_INACTIVE_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.ARCHIVE_INACTIVE_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.ARCHIVE_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.ARCHIVE_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.ARCHIVE_INACTIVE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.ARCHIVE_INACTIVE_SELECTED_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.ARCHIVE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.ARCHIVE_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_ARCHIVE);
  out.startElement(ELEMENT_SYMLINK);
  out.println();
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.SYMLINK_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.SYMLINK_INACTIVE_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.SYMLINK_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.SYMLINK_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.SYMLINK_INACTIVE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.SYMLINK_INACTIVE_SELECTED_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.SYMLINK_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.SYMLINK_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_SYMLINK);
  out.startElement(ELEMENT_MARKED);
  out.println();
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.MARKED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.MARKED_INACTIVE_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.MARKED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.MARKED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.MARKED_INACTIVE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.MARKED_INACTIVE_SELECTED_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.MARKED_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.MARKED_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_MARKED);
  out.startElement(ELEMENT_FILE);
  out.println();
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.FILE_INACTIVE_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.FILE_INACTIVE_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.FILE_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.FILE_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.FILE_INACTIVE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_INACTIVE_FOREGROUND,getColorAttributes(theme.getColor(Theme.FILE_INACTIVE_SELECTED_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.FILE_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.FILE_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_FILE);
  out.endElement(ELEMENT_TABLE);
  out.startElement(ELEMENT_SHELL);
  out.println();
  if (theme.isFontSet(Theme.SHELL_FONT))   out.writeStandAloneElement(ELEMENT_FONT,getFontAttributes(theme.getFont(Theme.SHELL_FONT)));
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.SHELL_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.SHELL_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.SHELL_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.SHELL_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.SHELL_SELECTED_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.SHELL_SELECTED_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.SHELL_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.SHELL_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_SHELL);
  out.startElement(ELEMENT_SHELL_HISTORY);
  out.println();
  if (theme.isFontSet(Theme.SHELL_HISTORY_FONT))   out.writeStandAloneElement(ELEMENT_FONT,getFontAttributes(theme.getFont(Theme.SHELL_HISTORY_FONT)));
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.SHELL_HISTORY_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.SHELL_HISTORY_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.SHELL_HISTORY_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.SHELL_HISTORY_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.SHELL_HISTORY_SELECTED_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.SHELL_HISTORY_SELECTED_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.SHELL_HISTORY_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.SHELL_HISTORY_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_SHELL_HISTORY);
  out.startElement(ELEMENT_EDITOR);
  out.println();
  if (theme.isFontSet(Theme.EDITOR_FONT))   out.writeStandAloneElement(ELEMENT_FONT,getFontAttributes(theme.getFont(Theme.EDITOR_FONT)));
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.EDITOR_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.EDITOR_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.EDITOR_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.EDITOR_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.EDITOR_SELECTED_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.EDITOR_SELECTED_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.EDITOR_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.EDITOR_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_EDITOR);
  out.startElement(ELEMENT_LOCATION_BAR);
  out.println();
  if (theme.isFontSet(Theme.LOCATION_BAR_FONT))   out.writeStandAloneElement(ELEMENT_FONT,getFontAttributes(theme.getFont(Theme.LOCATION_BAR_FONT)));
  if (theme.isColorSet(Theme.LOCATION_BAR_PROGRESS_COLOR))   out.writeStandAloneElement(ELEMENT_PROGRESS,getColorAttributes(theme.getColor(Theme.LOCATION_BAR_PROGRESS_COLOR)));
  out.startElement(ELEMENT_NORMAL);
  out.println();
  if (theme.isColorSet(Theme.LOCATION_BAR_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.LOCATION_BAR_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.LOCATION_BAR_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.LOCATION_BAR_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_NORMAL);
  out.startElement(ELEMENT_SELECTED);
  out.println();
  if (theme.isColorSet(Theme.LOCATION_BAR_SELECTED_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.LOCATION_BAR_SELECTED_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.LOCATION_BAR_SELECTED_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.LOCATION_BAR_SELECTED_FOREGROUND_COLOR)));
  out.endElement(ELEMENT_SELECTED);
  out.endElement(ELEMENT_LOCATION_BAR);
  out.startElement(ELEMENT_STATUS_BAR);
  out.println();
  if (theme.isFontSet(Theme.STATUS_BAR_FONT))   out.writeStandAloneElement(ELEMENT_FONT,getFontAttributes(theme.getFont(Theme.STATUS_BAR_FONT)));
  if (theme.isColorSet(Theme.STATUS_BAR_BACKGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_BACKGROUND,getColorAttributes(theme.getColor(Theme.STATUS_BAR_BACKGROUND_COLOR)));
  if (theme.isColorSet(Theme.STATUS_BAR_FOREGROUND_COLOR))   out.writeStandAloneElement(ELEMENT_FOREGROUND,getColorAttributes(theme.getColor(Theme.STATUS_BAR_FOREGROUND_COLOR)));
  if (theme.isColorSet(Theme.STATUS_BAR_BORDER_COLOR))   out.writeStandAloneElement(ELEMENT_BORDER,getColorAttributes(theme.getColor(Theme.STATUS_BAR_BORDER_COLOR)));
  if (theme.isColorSet(Theme.STATUS_BAR_OK_COLOR))   out.writeStandAloneElement(ELEMENT_OK,getColorAttributes(theme.getColor(Theme.STATUS_BAR_OK_COLOR)));
  if (theme.isColorSet(Theme.STATUS_BAR_WARNING_COLOR))   out.writeStandAloneElement(ELEMENT_WARNING,getColorAttributes(theme.getColor(Theme.STATUS_BAR_WARNING_COLOR)));
  if (theme.isColorSet(Theme.STATUS_BAR_CRITICAL_COLOR))   out.writeStandAloneElement(ELEMENT_CRITICAL,getColorAttributes(theme.getColor(Theme.STATUS_BAR_CRITICAL_COLOR)));
  out.endElement(ELEMENT_STATUS_BAR);
  out.endElement(ELEMENT_ROOT);
}",0.9994453346480956
45192,"/** 
 * Creates a new <code>EditAction</code>.
 */
public EditAction(MainFrame mainFrame,Hashtable properties){
  super(mainFrame,properties);
  String iconPath;
  iconPath=getIconPath(InternalEditAction.class);
  if (ResourceLoader.getResourceAsURL(iconPath) != null)   setIcon(IconManager.getIcon(iconPath));
  useCustomEditor=MuConfiguration.getVariable(MuConfiguration.USE_CUSTOM_EDITOR,MuConfiguration.DEFAULT_USE_CUSTOM_EDITOR);
  setCustomEditor(MuConfiguration.getVariable(MuConfiguration.CUSTOM_EDITOR));
}","/** 
 * Creates a new <code>EditAction</code>.
 */
public EditAction(MainFrame mainFrame,Hashtable properties){
  super(mainFrame,properties);
  String iconPath;
  iconPath=getIconPath(InternalEditAction.class);
  if (ResourceLoader.getResourceAsURL(iconPath) != null)   setIcon(IconManager.getIcon(iconPath));
  useCustomEditor=MuConfiguration.getVariable(MuConfiguration.USE_CUSTOM_EDITOR,MuConfiguration.DEFAULT_USE_CUSTOM_EDITOR);
  setCustomEditor(MuConfiguration.getVariable(MuConfiguration.CUSTOM_EDITOR));
  MuConfiguration.addConfigurationListener(this);
}",0.9537037037037036
45193,"/** 
 * Creates a new <code>ViewAction</code>.
 */
public ViewAction(MainFrame mainFrame,Hashtable properties){
  super(mainFrame,properties);
  String iconPath;
  iconPath=getIconPath(InternalViewAction.class);
  if (ResourceLoader.getResourceAsURL(iconPath) != null)   setIcon(IconManager.getIcon(iconPath));
  useCustomViewer=MuConfiguration.getVariable(MuConfiguration.USE_CUSTOM_VIEWER,MuConfiguration.DEFAULT_USE_CUSTOM_VIEWER);
  setCustomViewer(MuConfiguration.getVariable(MuConfiguration.CUSTOM_VIEWER));
}","/** 
 * Creates a new <code>ViewAction</code>.
 */
public ViewAction(MainFrame mainFrame,Hashtable properties){
  super(mainFrame,properties);
  String iconPath;
  iconPath=getIconPath(InternalViewAction.class);
  if (ResourceLoader.getResourceAsURL(iconPath) != null)   setIcon(IconManager.getIcon(iconPath));
  useCustomViewer=MuConfiguration.getVariable(MuConfiguration.USE_CUSTOM_VIEWER,MuConfiguration.DEFAULT_USE_CUSTOM_VIEWER);
  setCustomViewer(MuConfiguration.getVariable(MuConfiguration.CUSTOM_VIEWER));
  MuConfiguration.addConfigurationListener(this);
}",0.9537037037037036
45194,"/** 
 * Enables or disables this action based on the history of the currently active FolderPanel: if there is a previous folder in the history, this action will be enabled, if not it will be disabled.
 */
private void toggleEnabledState(){
  setEnabled(mainFrame.getActiveTable().getFolderPanel().getFolderHistory().hasBackFolder());
}","/** 
 * Enables or disables this action based on the history of the currently active FolderPanel: if there is a previous folder in the history, this action will be enabled, if not it will be disabled.
 */
protected void toggleEnabledState(){
  setEnabled(mainFrame.getActiveTable().getFolderPanel().getFolderHistory().hasBackFolder());
}",0.8125
45195,"/** 
 * Enables or disables this action based on the history of the currently active FolderPanel: if there is a next folder in the history, this action will be enabled, if not it will be disabled.
 */
private void toggleEnabledState(){
  setEnabled(mainFrame.getActiveTable().getFolderPanel().getFolderHistory().hasForwardFolder());
}","/** 
 * Enables or disables this action based on the history of the currently active FolderPanel: if there is a next folder in the history, this action will be enabled, if not it will be disabled.
 */
protected void toggleEnabledState(){
  setEnabled(mainFrame.getActiveTable().getFolderPanel().getFolderHistory().hasForwardFolder());
}",0.8119402985074626
45196,"/** 
 * Enables or disables this action based on the history of the currently active FolderPanel: if there is a previous folder in the history, this action will be enabled, if not it will be disabled.
 */
private abstract void toggleEnabledState();","/** 
 * Enables or disables this action based on the history of the currently active FolderPanel: if there is a previous folder in the history, this action will be enabled, if not it will be disabled.
 */
protected abstract void toggleEnabledState();",0.9759036144578314
45197,"/** 
 * Enables or disables this action based on the currently active folder's has a parent, this action will be enabled, if not it will be disabled.
 */
private void toggleEnabledState(){
  setEnabled(mainFrame.getActiveTable().getFolderPanel().getCurrentFolder().getParentSilently() != null);
}","/** 
 * Enables or disables this action based on the currently active folder's has a parent, this action will be enabled, if not it will be disabled.
 */
protected void toggleEnabledState(){
  setEnabled(mainFrame.getActiveTable().getFolderPanel().getCurrentFolder().getParentSilently() != null);
}",0.9797979797979798
45198,"public void mousePressed(MouseEvent e){
  if (PlatformManager.isLeftMouseButton(e)) {
    fileTable.requestFocus();
  }
 else   if (PlatformManager.isRightMouseButton(e)) {
    AbstractFile currentFolder=getCurrentFolder();
    new TablePopupMenu(FolderPanel.this.mainFrame,currentFolder,null,false,fileTable.getFileTableModel().getMarkedFiles()).show(scrollPane,e.getX(),e.getY());
  }
}","public void mousePressed(MouseEvent e){
  if (PlatformManager.isLeftMouseButton(e)) {
    fileTable.requestFocus();
  }
 else   if (PlatformManager.isRightMouseButton(e)) {
    if (!fileTable.hasFocus())     fileTable.requestFocus();
    AbstractFile currentFolder=getCurrentFolder();
    new TablePopupMenu(FolderPanel.this.mainFrame,currentFolder,null,false,fileTable.getFileTableModel().getMarkedFiles()).show(scrollPane,e.getX(),e.getY());
  }
}",0.927120669056153
45199,"FolderPanel(MainFrame mainFrame,AbstractFile initialFolder,FileTableConfiguration conf){
  super(new BorderLayout());
  if (com.mucommander.Debug.ON)   com.mucommander.Debug.trace(""String_Node_Str"" + initialFolder);
  this.mainFrame=mainFrame;
  setBorder(null);
  JPanel locationPanel=new JPanel(new GridBagLayout());
  GridBagConstraints c=new GridBagConstraints();
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridy=0;
  this.driveButton=new DrivePopupButton(this);
  c.weightx=0;
  c.gridx=0;
  locationPanel.add(driveButton,c);
  this.locationComboBox=new LocationComboBox(this);
  this.locationField=(ProgressTextField)locationComboBox.getTextField();
  c.weightx=1;
  c.gridx=1;
  c.insets=new Insets(0,4,0,0);
  locationPanel.add(locationComboBox,c);
  add(locationPanel,BorderLayout.NORTH);
  fileTable=new FileTable(mainFrame,this,conf);
  chainedFileFilter=new AndFileFilter();
  if (!MuConfiguration.getVariable(MuConfiguration.SHOW_HIDDEN_FILES,MuConfiguration.DEFAULT_SHOW_HIDDEN_FILES))   chainedFileFilter.addFileFilter(new HiddenFileFilter());
  if (!MuConfiguration.getVariable(MuConfiguration.SHOW_DS_STORE_FILES,MuConfiguration.DEFAULT_SHOW_DS_STORE_FILES))   chainedFileFilter.addFileFilter(new DSStoreFileFilter());
  if (!MuConfiguration.getVariable(MuConfiguration.SHOW_SYSTEM_FOLDERS,MuConfiguration.DEFAULT_SHOW_SYSTEM_FOLDERS))   chainedFileFilter.addFileFilter(new SystemFileFilter());
  try {
    setCurrentFolder(initialFolder,initialFolder.ls(chainedFileFilter),null);
  }
 catch (  Exception e) {
    AbstractFile rootFolders[]=RootFolders.getRootFolders();
    for (int i=0; i < rootFolders.length; i++) {
      try {
        setCurrentFolder(rootFolders[i],rootFolders[i].ls(chainedFileFilter),null);
        break;
      }
 catch (      IOException e2) {
        if (i == rootFolders.length - 1) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
  }
  folderChangeMonitor=new FolderChangeMonitor(this);
  scrollPane=new JScrollPane(fileTable,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  scrollPane.setBorder(new MutableLineBorder(unfocusedBorderColor=ThemeManager.getCurrentColor(Theme.FILE_TABLE_INACTIVE_BORDER_COLOR),1));
  borderColor=ThemeManager.getCurrentColor(Theme.FILE_TABLE_BORDER_COLOR);
  scrollPane.getViewport().setBackground(unfocusedBackgroundColor=ThemeManager.getCurrentColor(Theme.FILE_TABLE_INACTIVE_BACKGROUND_COLOR));
  backgroundColor=ThemeManager.getCurrentColor(Theme.FILE_TABLE_BACKGROUND_COLOR);
  unmatchedBackgroundColor=ThemeManager.getCurrentColor(Theme.FILE_TABLE_UNMATCHED_BACKGROUND_COLOR);
  scrollPane.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      if (PlatformManager.isLeftMouseButton(e)) {
        fileTable.requestFocus();
      }
 else       if (PlatformManager.isRightMouseButton(e)) {
        AbstractFile currentFolder=getCurrentFolder();
        new TablePopupMenu(FolderPanel.this.mainFrame,currentFolder,null,false,fileTable.getFileTableModel().getMarkedFiles()).show(scrollPane,e.getX(),e.getY());
      }
    }
  }
);
  add(scrollPane,BorderLayout.CENTER);
  MuConfiguration.addConfigurationListener(this);
  ThemeManager.addCurrentThemeListener(this);
  fileTable.addFocusListener(this);
  locationField.addFocusListener(this);
  this.fileDragSourceListener=new FileDragSourceListener(this);
  fileDragSourceListener.enableDrag(fileTable);
  FileDropTargetListener dropTargetListener=new FileDropTargetListener(this,false);
  fileTable.setDropTarget(new DropTarget(fileTable,dropTargetListener));
  scrollPane.setDropTarget(new DropTarget(scrollPane,dropTargetListener));
  dropTargetListener=new FileDropTargetListener(this,true);
  locationField.setDropTarget(new DropTarget(locationField,dropTargetListener));
  driveButton.setDropTarget(new DropTarget(driveButton,dropTargetListener));
}","FolderPanel(MainFrame mainFrame,AbstractFile initialFolder,FileTableConfiguration conf){
  super(new BorderLayout());
  if (com.mucommander.Debug.ON)   com.mucommander.Debug.trace(""String_Node_Str"" + initialFolder);
  this.mainFrame=mainFrame;
  setBorder(null);
  JPanel locationPanel=new JPanel(new GridBagLayout());
  GridBagConstraints c=new GridBagConstraints();
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridy=0;
  this.driveButton=new DrivePopupButton(this);
  c.weightx=0;
  c.gridx=0;
  locationPanel.add(driveButton,c);
  this.locationComboBox=new LocationComboBox(this);
  this.locationField=(ProgressTextField)locationComboBox.getTextField();
  c.weightx=1;
  c.gridx=1;
  c.insets=new Insets(0,4,0,0);
  locationPanel.add(locationComboBox,c);
  add(locationPanel,BorderLayout.NORTH);
  fileTable=new FileTable(mainFrame,this,conf);
  chainedFileFilter=new AndFileFilter();
  if (!MuConfiguration.getVariable(MuConfiguration.SHOW_HIDDEN_FILES,MuConfiguration.DEFAULT_SHOW_HIDDEN_FILES))   chainedFileFilter.addFileFilter(new HiddenFileFilter());
  if (!MuConfiguration.getVariable(MuConfiguration.SHOW_DS_STORE_FILES,MuConfiguration.DEFAULT_SHOW_DS_STORE_FILES))   chainedFileFilter.addFileFilter(new DSStoreFileFilter());
  if (!MuConfiguration.getVariable(MuConfiguration.SHOW_SYSTEM_FOLDERS,MuConfiguration.DEFAULT_SHOW_SYSTEM_FOLDERS))   chainedFileFilter.addFileFilter(new SystemFileFilter());
  try {
    setCurrentFolder(initialFolder,initialFolder.ls(chainedFileFilter),null);
  }
 catch (  Exception e) {
    AbstractFile rootFolders[]=RootFolders.getRootFolders();
    for (int i=0; i < rootFolders.length; i++) {
      try {
        setCurrentFolder(rootFolders[i],rootFolders[i].ls(chainedFileFilter),null);
        break;
      }
 catch (      IOException e2) {
        if (i == rootFolders.length - 1) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
  }
  folderChangeMonitor=new FolderChangeMonitor(this);
  scrollPane=new JScrollPane(fileTable,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  scrollPane.setBorder(new MutableLineBorder(unfocusedBorderColor=ThemeManager.getCurrentColor(Theme.FILE_TABLE_INACTIVE_BORDER_COLOR),1));
  borderColor=ThemeManager.getCurrentColor(Theme.FILE_TABLE_BORDER_COLOR);
  scrollPane.getViewport().setBackground(unfocusedBackgroundColor=ThemeManager.getCurrentColor(Theme.FILE_TABLE_INACTIVE_BACKGROUND_COLOR));
  backgroundColor=ThemeManager.getCurrentColor(Theme.FILE_TABLE_BACKGROUND_COLOR);
  unmatchedBackgroundColor=ThemeManager.getCurrentColor(Theme.FILE_TABLE_UNMATCHED_BACKGROUND_COLOR);
  scrollPane.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      if (PlatformManager.isLeftMouseButton(e)) {
        fileTable.requestFocus();
      }
 else       if (PlatformManager.isRightMouseButton(e)) {
        if (!fileTable.hasFocus())         fileTable.requestFocus();
        AbstractFile currentFolder=getCurrentFolder();
        new TablePopupMenu(FolderPanel.this.mainFrame,currentFolder,null,false,fileTable.getFileTableModel().getMarkedFiles()).show(scrollPane,e.getX(),e.getY());
      }
    }
  }
);
  add(scrollPane,BorderLayout.CENTER);
  MuConfiguration.addConfigurationListener(this);
  ThemeManager.addCurrentThemeListener(this);
  fileTable.addFocusListener(this);
  locationField.addFocusListener(this);
  this.fileDragSourceListener=new FileDragSourceListener(this);
  fileDragSourceListener.enableDrag(fileTable);
  FileDropTargetListener dropTargetListener=new FileDropTargetListener(this,false);
  fileTable.setDropTarget(new DropTarget(fileTable,dropTargetListener));
  scrollPane.setDropTarget(new DropTarget(scrollPane,dropTargetListener));
  dropTargetListener=new FileDropTargetListener(this,true);
  locationField.setDropTarget(new DropTarget(locationField,dropTargetListener));
  driveButton.setDropTarget(new DropTarget(driveButton,dropTargetListener));
}",0.99121354896218
45200,"/** 
 * Returns an   {@link AbstractFile} to the root package of the given <code>Class</code>. For example, if thespecified <code>Class</code> is <code>java.lang.Object</code>'s, the returned file will be the Java runtime JAR file, which on most platforms is <code>$JAVA_HOME/lib/jre/rt.jar</code>.<br/> The returned file can be used to list or manipulate all resource files contained in a particular classpath's location, including the .class files.
 * @param aClass the class for which to locate the root package.
 * @return an AbstractFile to the root package of the given <code>Class</code>
 */
public static AbstractFile getRootPackageAsFile(Class aClass){
  ClassLoader classLoader=aClass.getClassLoader();
  if (classLoader == null)   classLoader=ClassLoader.getSystemClassLoader();
  String aClassRelPath=aClass.getName().replace('.','/') + ""String_Node_Str"";
  URL aClassURL=getResourceAsURL(aClassRelPath,classLoader);
  if (aClassURL == null)   return null;
  if (""String_Node_Str"".equals(aClassURL.getProtocol()))   return FileFactory.getFile(getJarPath(aClassURL));
  String aClassPath=getDecodedURLPath(aClassURL);
  return FileFactory.getFile(aClassPath.substring(0,aClassPath.length() - aClassRelPath.length()));
}","/** 
 * Returns an   {@link AbstractFile} to the root package of the given <code>Class</code>. For example, if thespecified <code>Class</code> is <code>java.lang.Object</code>'s, the returned file will be the Java runtime JAR file, which on most platforms is <code>$JAVA_HOME/lib/jre/rt.jar</code>.<br/> The returned file can be used to list or manipulate all resource files contained in a particular classpath's location, including the .class files.
 * @param aClass the class for which to locate the root package.
 * @return an AbstractFile to the root package of the given <code>Class</code>
 */
public static AbstractFile getRootPackageAsFile(Class aClass){
  ClassLoader classLoader=aClass.getClassLoader();
  if (classLoader == null)   classLoader=ClassLoader.getSystemClassLoader();
  String aClassRelPath=aClass.getName().replace('.','/') + ""String_Node_Str"";
  URL aClassURL=getResourceAsURL(aClassRelPath,classLoader);
  if (aClassURL == null)   return null;
  if (""String_Node_Str"".equals(aClassURL.getProtocol()))   return FileFactory.getFile(getJarFilePath(aClassURL));
  String aClassPath=getLocalFilePath(aClassURL);
  return FileFactory.getFile(aClassPath.substring(0,aClassPath.length() - aClassRelPath.length()));
}",0.9906617945594804
45201,"/** 
 * Finds the resource with the given path and returns a URL pointing to its location, or <code>null</code> if the resource couldn't be located. The given <code>ClassLoader</code> is used for locating the resource. <p>The given path may or may not start with a leading slash character ('/'), this doesn't affect the way it is interpreted.</p>
 * @param path a path to the resource, relative to the system ClassLoader's classpath
 * @param classLoader the ClassLoader used for locating the resource
 * @return a URL pointing to the resource, or null if the resource couldn't be located
 */
public static URL getResourceAsURL(String path,ClassLoader classLoader){
  return classLoader.getResource(normalizePath(path));
}","/** 
 * Finds the resource with the given path and returns a URL pointing to its location, or <code>null</code> if the resource couldn't be located. The given <code>ClassLoader</code> is used for locating the resource. <p>The given path may or may not start with a leading slash character ('/'), this doesn't affect the way it is interpreted.</p>
 * @param path a path to the resource, relative to the system ClassLoader's classpath
 * @param classLoader the ClassLoader used for locating the resource
 * @return a URL pointing to the resource, or null if the resource couldn't be located
 */
public static URL getResourceAsURL(String path,ClassLoader classLoader){
  return classLoader.getResource(removeLeadingSlash(path));
}",0.9813664596273292
45202,"/** 
 * Finds the resource with the given path and returns an <code>InputStream</code> to read from it, or <code>null</code> if the resource couldn't be located. The given <code>ClassLoader</code> is used for locating the resource. <p>The given path may or may not start with a leading slash character ('/'), this doesn't affect the way it is interpreted.</p>
 * @param path a path to the resource, relative to the system ClassLoader's classpath
 * @param classLoader the Class whose ClassLoader is used for locating the resource
 * @return an InputStream that allows to read from the resource, or null if the resource couldn't be located
 */
public static InputStream getResourceAsStream(String path,ClassLoader classLoader){
  return classLoader.getResourceAsStream(normalizePath(path));
}","/** 
 * Finds the resource with the given path and returns an <code>InputStream</code> to read from it, or <code>null</code> if the resource couldn't be located. The given <code>ClassLoader</code> is used for locating the resource. <p>The given path may or may not start with a leading slash character ('/'), this doesn't affect the way it is interpreted.</p>
 * @param path a path to the resource, relative to the system ClassLoader's classpath
 * @param classLoader the Class whose ClassLoader is used for locating the resource
 * @return an InputStream that allows to read from the resource, or null if the resource couldn't be located
 */
public static InputStream getResourceAsStream(String path,ClassLoader classLoader){
  return classLoader.getResourceAsStream(removeLeadingSlash(path));
}",0.9817265280403276
45203,"/** 
 * Finds the resource with the given path and returns an   {@link AbstractFile} that gives full access to it,or <code>null</code> if the resource couldn't be located. The given <code>ClassLoader</code> is used for locating the resource. <p>The given path may or may not start with a leading slash character ('/'), this doesn't affect the way it is interpreted. Also noteworthy is this method may be slower than  {@link #getResourceAsStream(String)} ifthe resource is located inside a JAR file, because the Zip file headers will have to be parsed the first time the archive is accessed. So this latter method should be favored if the file is simply used for reading the resource.</p>
 * @param path a path to the resource, relative to the system ClassLoader's classpath
 * @param classLoader the ClassLoader is used for locating the resource
 * @return an AbstractFile that allows to access the resource, or null if the resource couldn't be located
 */
public static AbstractFile getResourceAsFile(String path,ClassLoader classLoader){
  path=normalizePath(path);
  URL aClassURL=getResourceAsURL(path,classLoader);
  if (aClassURL == null)   return null;
  if (""String_Node_Str"".equals(aClassURL.getProtocol())) {
    try {
      return ((AbstractArchiveFile)FileFactory.getFile(getJarPath(aClassURL))).getArchiveEntryFile(path);
    }
 catch (    Exception e) {
      return null;
    }
  }
  return FileFactory.getFile(getDecodedURLPath(aClassURL));
}","/** 
 * Finds the resource with the given path and returns an   {@link AbstractFile} that gives full access to it,or <code>null</code> if the resource couldn't be located. The given <code>ClassLoader</code> is used for locating the resource. <p>The given path may or may not start with a leading slash character ('/'), this doesn't affect the way it is interpreted. Also noteworthy is this method may be slower than  {@link #getResourceAsStream(String)} ifthe resource is located inside a JAR file, because the Zip file headers will have to be parsed the first time the archive is accessed. So this latter method should be favored if the file is simply used for reading the resource.</p>
 * @param path a path to the resource, relative to the system ClassLoader's classpath
 * @param classLoader the ClassLoader is used for locating the resource
 * @return an AbstractFile that allows to access the resource, or null if the resource couldn't be located
 */
public static AbstractFile getResourceAsFile(String path,ClassLoader classLoader){
  path=removeLeadingSlash(path);
  URL aClassURL=getResourceAsURL(path,classLoader);
  if (aClassURL == null)   return null;
  if (""String_Node_Str"".equals(aClassURL.getProtocol())) {
    try {
      return ((AbstractArchiveFile)FileFactory.getFile(getJarFilePath(aClassURL))).getArchiveEntryFile(path);
    }
 catch (    Exception e) {
      return null;
    }
  }
  return FileFactory.getFile(getLocalFilePath(aClassURL));
}",0.975376196990424
45204,"private static String getThemeName(String path){
  return path.substring(path.lastIndexOf('/') + 1,path.lastIndexOf('.'));
}","private static String getThemeName(AbstractFile themeFile){
  return themeFile.getNameWithoutExtension();
}",0.5800865800865801
45205,"private static Iterator predefinedThemeNames(){
  AbstractFile[] files;
  Vector names;
  try {
    files=ResourceLoader.getResourceAsFile(RuntimeConstants.THEMES_PATH).ls(new ExtensionFilenameFilter(""String_Node_Str""));
    names=new Vector();
    for (int i=0; i < files.length; i++)     names.add(getThemeName(files[i].getAbsolutePath()));
    return names.iterator();
  }
 catch (  Exception e) {
    return new Vector().iterator();
  }
}","private static Iterator predefinedThemeNames(){
  return getThemeNames(ResourceLoader.getResourceAsFile(RuntimeConstants.THEMES_PATH));
}",0.4317789291882556
45206,"private static Iterator customThemeNames(){
  String[] files;
  Vector names;
  names=new Vector();
  files=getCustomThemesFolder().list(new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      return name.toLowerCase().endsWith(""String_Node_Str"");
    }
  }
);
  for (int i=0; i < files.length; i++)   names.add(getThemeName(files[i]));
  return names.iterator();
}","private static Iterator customThemeNames(){
  return getThemeNames(FileFactory.getFile(getCustomThemesFolder().getAbsolutePath()));
}",0.3757115749525617
45207,"/** 
 * Overridden for performance reasons.
 */
public boolean isOpaque(){
  if (gradient == null) {
    Color back;
    Component p;
    back=lastBackgroundColor;
    if ((p=getParent()) != null)     p=p.getParent();
    return !((back != null) && (p != null) && back.equals(p.getBackground())&& p.isOpaque());
  }
  return false;
}","/** 
 * Overridden for performance reasons.
 */
public boolean isOpaque(){
  if (gradientColor == null) {
    Color back;
    Component p;
    back=lastBackgroundColor;
    if ((p=getParent()) != null)     p=p.getParent();
    return !((back != null) && (p != null) && back.equals(p.getBackground())&& p.isOpaque());
  }
  return false;
}",0.992548435171386
45208,"/** 
 * Paints the label.
 * @param g where to paint the label.
 */
public void paint(Graphics g){
  if (gradient != null) {
    Graphics2D g2;
    Paint oldPaint;
    g2=(Graphics2D)g;
    oldPaint=g2.getPaint();
    g2.setPaint(gradient);
    g2.fillRect(0,0,getWidth(),getHeight());
    g2.setPaint(oldPaint);
  }
  super.paint(g);
  if (outlineColor != null && !outlineColor.equals(lastBackgroundColor)) {
    g.setColor(outlineColor);
    g.drawLine(0,0,getWidth(),0);
    g.drawLine(0,getHeight() - 1,getWidth(),getHeight() - 1);
  }
}","/** 
 * Paints the label.
 * @param g where to paint the label.
 */
public void paint(Graphics g){
  if (gradientColor != null) {
    Graphics2D g2;
    Paint oldPaint;
    g2=(Graphics2D)g;
    oldPaint=g2.getPaint();
    g2.setPaint(new GradientPaint(0,0,lastBackgroundColor,0,getHeight(),gradientColor,false));
    g2.fillRect(0,0,getWidth(),getHeight());
    g2.setPaint(oldPaint);
  }
  super.paint(g);
  if (outlineColor != null && !outlineColor.equals(lastBackgroundColor)) {
    g.setColor(outlineColor);
    g.drawLine(0,0,getWidth(),0);
    g.drawLine(0,getHeight() - 1,getWidth(),getHeight() - 1);
  }
}",0.922943722943723
45209,"/** 
 * Sets the background to a gradient between the two specified colors.
 * @param c1 first component of the gradient.
 * @param c2 second component of the gradient.
 */
public void setBackground(Color c1,Color c2){
  if (c1.equals(c2))   setBackground(c1);
 else {
    lastBackgroundColor=c1;
    gradient=new GradientPaint(0,0,c1,0,getHeight(),c2,false);
  }
}","/** 
 * Sets the background to a gradient between the two specified colors.
 * @param c1 first component of the gradient.
 * @param c2 second component of the gradient.
 */
public void setBackground(Color c1,Color c2){
  if (c1.equals(c2))   setBackground(c1);
 else {
    lastBackgroundColor=c1;
    gradientColor=c2;
  }
}",0.9259796806966618
45210,"/** 
 * Updates the divider component's location to keep the current proportional divider location. 
 */
public void updateDividerLocation(){
  if (!window.isVisible())   return;
  setDividerLocation((int)(splitRatio * (getOrientation() == HORIZONTAL_SPLIT ? getWidth() : getHeight())));
  lastDividerLocation=getDividerLocation();
}","/** 
 * Updates the divider component's location to keep the current proportional divider location. 
 */
public void updateDividerLocation(){
  if (!window.isVisible())   return;
  lastDividerLocation=-1;
  setDividerLocation((int)(splitRatio * (getOrientation() == HORIZONTAL_SPLIT ? getWidth() : getHeight())));
}",0.8919753086419753
45211,"/** 
 * Sets the constant, proportional divider's location. The given float but be comprised between 0 and 1, 0 meaning completely left (or top), 1 right completely (or bottom).   
 * @param splitRatio the proportional divider's location, comprised between 0 and 1.
 */
public void setSplitRatio(float splitRatio){
  this.splitRatio=splitRatio;
  lastDividerLocation=-1;
  updateDividerLocation();
}","/** 
 * Sets the constant, proportional divider's location. The given float but be comprised between 0 and 1, 0 meaning completely left (or top), 1 right completely (or bottom).   
 * @param splitRatio the proportional divider's location, comprised between 0 and 1.
 */
public void setSplitRatio(float splitRatio){
  this.splitRatio=splitRatio;
  updateDividerLocation();
}",0.966321243523316
45212,"public void componentMoved(ComponentEvent e){
  Object source=e.getSource();
  if (source == getDividerComponent()) {
    if (lastDividerLocation == -1 || lastDividerLocation == getDividerLocation()) {
      return;
    }
    lastDividerLocation=getDividerLocation();
    splitRatio=lastDividerLocation / (float)(getOrientation() == HORIZONTAL_SPLIT ? getWidth() : getHeight());
  }
}","public void componentMoved(ComponentEvent e){
  if (e.getSource() == getDividerComponent()) {
    if (lastDividerLocation == -1) {
      lastDividerLocation=getDividerLocation();
      return;
    }
 else     if (lastDividerLocation == getDividerLocation())     return;
    lastDividerLocation=getDividerLocation();
    splitRatio=lastDividerLocation / (float)(getOrientation() == HORIZONTAL_SPLIT ? getWidth() : getHeight());
  }
}",0.7377450980392157
45213,"/** 
 * Creates a new LocationComboBox for use in the given FolderPanel.
 * @param folderPanel FolderPanel this combo box is displayed in
 */
public LocationComboBox(FolderPanel folderPanel){
  super(new ProgressTextField(0,ThemeManager.getCurrentColor(Theme.LOCATION_BAR_PROGRESS_COLOR)));
  this.folderPanel=folderPanel;
  this.locationField=(ProgressTextField)getTextField();
  locationField.setComboBox(this);
  setFont(ThemeManager.getCurrentFont(Theme.LOCATION_BAR_FONT));
  setForeground(ThemeManager.getCurrentColor(Theme.LOCATION_BAR_FOREGROUND_COLOR));
  setBackground(ThemeManager.getCurrentColor(Theme.LOCATION_BAR_BACKGROUND_COLOR));
  setSelectionForeground(ThemeManager.getCurrentColor(Theme.LOCATION_BAR_SELECTED_FOREGROUND_COLOR));
  setSelectionBackground(ThemeManager.getCurrentColor(Theme.LOCATION_BAR_SELECTED_BACKGROUND_COLOR));
  addEditableComboBoxListener(this);
  folderPanel.getLocationManager().addLocationListener(this);
  locationField.addFocusListener(this);
  addFocusListener(this);
  ThemeManager.addCurrentThemeListener(this);
}","/** 
 * Creates a new LocationComboBox for use in the given FolderPanel.
 * @param folderPanel FolderPanel this combo box is displayed in
 */
public LocationComboBox(FolderPanel folderPanel){
  super(new ProgressTextField(0,ThemeManager.getCurrentColor(Theme.LOCATION_BAR_PROGRESS_COLOR)));
  this.folderPanel=folderPanel;
  this.locationField=(ProgressTextField)getTextField();
  locationField.setComboBox(this);
  setFont(ThemeManager.getCurrentFont(Theme.LOCATION_BAR_FONT));
  locationField.setDisabledTextColor(ThemeManager.getCurrentColor(Theme.LOCATION_BAR_FOREGROUND_COLOR));
  setForeground(ThemeManager.getCurrentColor(Theme.LOCATION_BAR_FOREGROUND_COLOR));
  setBackground(ThemeManager.getCurrentColor(Theme.LOCATION_BAR_BACKGROUND_COLOR));
  setSelectionForeground(ThemeManager.getCurrentColor(Theme.LOCATION_BAR_SELECTED_FOREGROUND_COLOR));
  setSelectionBackground(ThemeManager.getCurrentColor(Theme.LOCATION_BAR_SELECTED_BACKGROUND_COLOR));
  addEditableComboBoxListener(this);
  folderPanel.getLocationManager().addLocationListener(this);
  locationField.addFocusListener(this);
  addFocusListener(this);
  ThemeManager.addCurrentThemeListener(this);
}",0.941281936351412
45214,"/** 
 * Receives theme color changes notifications.
 */
public void colorChanged(ColorChangedEvent event){
switch (event.getColorId()) {
case Theme.LOCATION_BAR_PROGRESS_COLOR:
    locationField.setProgressColor(event.getColor());
  break;
case Theme.LOCATION_BAR_FOREGROUND_COLOR:
setForeground(event.getColor());
break;
case Theme.LOCATION_BAR_BACKGROUND_COLOR:
setBackground(event.getColor());
break;
case Theme.LOCATION_BAR_SELECTED_FOREGROUND_COLOR:
setSelectionForeground(event.getColor());
break;
case Theme.LOCATION_BAR_SELECTED_BACKGROUND_COLOR:
setSelectionBackground(event.getColor());
break;
}
}","/** 
 * Receives theme color changes notifications.
 */
public void colorChanged(ColorChangedEvent event){
switch (event.getColorId()) {
case Theme.LOCATION_BAR_PROGRESS_COLOR:
    locationField.setProgressColor(event.getColor());
  break;
case Theme.LOCATION_BAR_FOREGROUND_COLOR:
locationField.setDisabledTextColor(event.getColor());
setForeground(event.getColor());
break;
case Theme.LOCATION_BAR_BACKGROUND_COLOR:
setBackground(event.getColor());
break;
case Theme.LOCATION_BAR_SELECTED_FOREGROUND_COLOR:
setSelectionForeground(event.getColor());
break;
case Theme.LOCATION_BAR_SELECTED_BACKGROUND_COLOR:
setSelectionBackground(event.getColor());
break;
}
}",0.9574132492113564
45215,"public void setFont(Font font){
  if (renderer == null)   super.setFont(font);
 else {
    renderer.setFont(font);
    textField.setFont(font);
  }
}","public void setFont(Font font){
  super.setFont(font);
  if (renderer != null) {
    renderer.setFont(font);
    textField.setFont(font);
  }
}",0.8424657534246576
45216,"/** 
 * Initialises the panel's UI.
 */
private void initUI(){
  YBoxPanel mainPanel;
  ProportionalGridPanel gridPanel;
  JPanel colorsPanel;
  FontChooser fontChooser;
  JPanel wrapper;
  JPanel previewPanel;
  fontChooser=createFontChooser(""String_Node_Str"",ThemeData.EDITOR_FONT);
  gridPanel=new ProportionalGridPanel(4);
  addLabelRow(gridPanel);
  createButtons(gridPanel,fontChooser,""String_Node_Str"",ThemeData.EDITOR_FOREGROUND_COLOR,ThemeData.EDITOR_BACKGROUND_COLOR);
  createButtons(gridPanel,fontChooser,""String_Node_Str"",ThemeData.EDITOR_SELECTED_FOREGROUND_COLOR,ThemeData.EDITOR_SELECTED_BACKGROUND_COLOR);
  colorsPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
  colorsPanel.add(gridPanel);
  colorsPanel.setBorder(BorderFactory.createTitledBorder(Translator.get(""String_Node_Str"")));
  mainPanel=new YBoxPanel();
  mainPanel.add(fontChooser);
  mainPanel.addSpace(10);
  mainPanel.add(colorsPanel);
  previewPanel=new JPanel();
  previewPanel.add(createPreviewPanel(mainPanel.getPreferredSize().height));
  previewPanel.setBorder(BorderFactory.createTitledBorder(Translator.get(""String_Node_Str"")));
  addFontChooserListener(fontChooser,preview);
  wrapper=new JPanel(new BorderLayout());
  wrapper.add(mainPanel,BorderLayout.CENTER);
  wrapper.add(previewPanel,BorderLayout.EAST);
  setLayout(new BorderLayout());
  add(wrapper,BorderLayout.NORTH);
}","/** 
 * Initialises the panel's UI.
 */
private void initUI(){
  YBoxPanel mainPanel;
  ProportionalGridPanel gridPanel;
  JPanel colorsPanel;
  FontChooser fontChooser;
  JPanel wrapper;
  JPanel previewPanel;
  JScrollPane scroll;
  fontChooser=createFontChooser(""String_Node_Str"",ThemeData.EDITOR_FONT);
  gridPanel=new ProportionalGridPanel(3);
  gridPanel.add(new JLabel());
  gridPanel.add(createCaptionLabel(""String_Node_Str""));
  gridPanel.add(createCaptionLabel(""String_Node_Str""));
  createTextButtons(gridPanel,fontChooser,""String_Node_Str"",ThemeData.EDITOR_FOREGROUND_COLOR,ThemeData.EDITOR_BACKGROUND_COLOR);
  createTextButtons(gridPanel,fontChooser,""String_Node_Str"",ThemeData.EDITOR_SELECTED_FOREGROUND_COLOR,ThemeData.EDITOR_SELECTED_BACKGROUND_COLOR);
  colorsPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
  colorsPanel.add(gridPanel);
  colorsPanel.setBorder(BorderFactory.createTitledBorder(Translator.get(""String_Node_Str"")));
  mainPanel=new YBoxPanel();
  mainPanel.add(fontChooser);
  mainPanel.addSpace(10);
  mainPanel.add(colorsPanel);
  previewPanel=new JPanel();
  previewPanel.add(createPreviewPanel(mainPanel.getPreferredSize().height));
  previewPanel.setBorder(BorderFactory.createTitledBorder(Translator.get(""String_Node_Str"")));
  addFontChooserListener(fontChooser,preview);
  wrapper=new JPanel(new BorderLayout());
  wrapper.add(mainPanel,BorderLayout.CENTER);
  wrapper.add(previewPanel,BorderLayout.EAST);
  setLayout(new BorderLayout());
  add(wrapper,BorderLayout.NORTH);
}",0.926374006221915
45217,"public void commit(){
}","/** 
 * Ignored.
 */
public void commit(){
}",0.6865671641791045
45218,"public void propertyChange(PropertyChangeEvent event){
  if (event.getPropertyName().equals(PreviewLabel.BACKGROUND_COLOR_PROPERTY_NAME)) {
    preview.setBackground(template.getColor(ThemeData.EDITOR_BACKGROUND_COLOR));
    preview.setSelectionColor(template.getColor(ThemeData.EDITOR_SELECTED_BACKGROUND_COLOR));
  }
 else   if (!event.getPropertyName().equals(PreviewLabel.FOREGROUND_COLOR_PROPERTY_NAME)) {
    preview.setForeground(template.getColor(ThemeData.EDITOR_FOREGROUND_COLOR));
    preview.setSelectedTextColor(template.getColor(ThemeData.EDITOR_SELECTED_FOREGROUND_COLOR));
    preview.setCaretColor(template.getColor(ThemeData.EDITOR_FOREGROUND_COLOR));
  }
  preview.repaint();
}","/** 
 * Listens on changes on the foreground and background colors.
 */
public void propertyChange(PropertyChangeEvent event){
  if (event.getPropertyName().equals(PreviewLabel.BACKGROUND_COLOR_PROPERTY_NAME)) {
    preview.setBackground(template.getColor(ThemeData.EDITOR_BACKGROUND_COLOR));
    preview.setSelectionColor(template.getColor(ThemeData.EDITOR_SELECTED_BACKGROUND_COLOR));
  }
 else   if (!event.getPropertyName().equals(PreviewLabel.FOREGROUND_COLOR_PROPERTY_NAME)) {
    preview.setForeground(template.getColor(ThemeData.EDITOR_FOREGROUND_COLOR));
    preview.setSelectedTextColor(template.getColor(ThemeData.EDITOR_SELECTED_FOREGROUND_COLOR));
    preview.setCaretColor(template.getColor(ThemeData.EDITOR_FOREGROUND_COLOR));
  }
 else   return;
  preview.repaint();
}",0.9405405405405406
45219,"private JScrollPane createPreviewPanel(int preferredHeight){
  JScrollPane scroll;
  preview=new JTextArea(15,15);
  scroll=new JScrollPane(preview,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  scroll.getViewport().setPreferredSize(new Dimension(preview.getPreferredSize().width,preferredHeight));
  preview.setText(Translator.get(""String_Node_Str""));
  preview.setBackground(template.getColor(ThemeData.EDITOR_BACKGROUND_COLOR));
  preview.setSelectionColor(template.getColor(ThemeData.EDITOR_SELECTED_BACKGROUND_COLOR));
  preview.setForeground(template.getColor(ThemeData.EDITOR_FOREGROUND_COLOR));
  preview.setSelectedTextColor(template.getColor(ThemeData.EDITOR_SELECTED_FOREGROUND_COLOR));
  preview.setCaretColor(template.getColor(ThemeData.EDITOR_FOREGROUND_COLOR));
  preview.setFont(template.getFont(ThemeData.EDITOR_FONT));
  return scroll;
}","/** 
 * Creates the file editor preview panel.
 */
private JScrollPane createPreviewPanel(int preferredHeight){
  JScrollPane scroll;
  preview=new JTextArea(15,15);
  scroll=new JScrollPane(preview,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  scroll.getViewport().setPreferredSize(new Dimension(preview.getPreferredSize().width,preferredHeight));
  preview.setText(Translator.get(""String_Node_Str""));
  preview.setBackground(template.getColor(ThemeData.EDITOR_BACKGROUND_COLOR));
  preview.setSelectionColor(template.getColor(ThemeData.EDITOR_SELECTED_BACKGROUND_COLOR));
  preview.setForeground(template.getColor(ThemeData.EDITOR_FOREGROUND_COLOR));
  preview.setSelectedTextColor(template.getColor(ThemeData.EDITOR_SELECTED_FOREGROUND_COLOR));
  preview.setCaretColor(template.getColor(ThemeData.EDITOR_FOREGROUND_COLOR));
  preview.setFont(template.getFont(ThemeData.EDITOR_FONT));
  return scroll;
}",0.9722373434948284
45220,"/** 
 * Stops dimming the scrollpane's background (returns to a normal background color), called by  {@link com.mucommander.ui.main.table.FileTable.QuickSearch} when a quick search is over.
 */
public void undimBackground(){
  if (fileTable.hasFocus())   scrollPane.getViewport().setBackground(backgroundColor);
 else   scrollPane.getViewport().setBackground(unfocusedBackgroundColor);
}","/** 
 * Stops dimming the scrollpane's background (returns to a normal background color), called by  {@link com.mucommander.ui.main.table.FileTable.QuickSearch} when a quick search is over.
 */
public void undimBackground(){
  Color newColor;
  if (fileTable.hasFocus())   newColor=backgroundColor;
 else   newColor=unfocusedBackgroundColor;
  if (newColor.equals(scrollPane.getViewport().getBackground()))   fileTable.repaint();
 else   scrollPane.getViewport().setBackground(newColor);
}",0.8036529680365296
45221,"/** 
 * Notifies the reader that the current element declaration is over.
 */
public void endElement(String uri,String localName,String qName) throws SAXException {
  if (unknownElement != null) {
    if (qName.equals(unknownElement))     unknownElement=null;
 else     return;
  }
  if (qName.equals(ELEMENT_ROOT)) {
    if (state != STATE_ROOT)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_UNKNOWN;
  }
 else   if (qName.equals(ELEMENT_TABLE)) {
    if (state != STATE_TABLE)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_ROOT;
  }
 else   if (qName.equals(ELEMENT_ALTERNATE)) {
    if (state != STATE_TABLE_ALTERNATE)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_TABLE;
  }
 else   if (qName.equals(ELEMENT_HIDDEN)) {
    if (state != STATE_HIDDEN)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_TABLE;
  }
 else   if (qName.equals(ELEMENT_FOLDER)) {
    if (state != STATE_FOLDER)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_TABLE;
  }
 else   if (qName.equals(ELEMENT_ARCHIVE)) {
    if (state != STATE_ARCHIVE)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_TABLE;
  }
 else   if (qName.equals(ELEMENT_SYMLINK)) {
    if (state != STATE_SYMLINK)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_TABLE;
  }
 else   if (qName.equals(ELEMENT_MARKED)) {
    if (state != STATE_MARKED)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_TABLE;
  }
 else   if (qName.equals(ELEMENT_FILE)) {
    if (state != STATE_FILE)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_TABLE;
  }
 else   if (qName.equals(ELEMENT_SHELL)) {
    if (state != STATE_SHELL)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_ROOT;
  }
 else   if (qName.equals(ELEMENT_SHELL_HISTORY)) {
    if (state != STATE_SHELL_HISTORY)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_ROOT;
  }
 else   if (qName.equals(ELEMENT_EDITOR)) {
    if (state != STATE_EDITOR)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_ROOT;
  }
 else   if (qName.equals(ELEMENT_LOCATION_BAR)) {
    if (state != STATE_LOCATION_BAR)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_ROOT;
  }
 else   if (qName.equals(ELEMENT_STATUS_BAR)) {
    if (state != STATE_STATUS_BAR)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_ROOT;
  }
 else   if (qName.equals(ELEMENT_NORMAL)) {
    if (state == STATE_SHELL_NORMAL)     state=STATE_SHELL;
 else     if (state == STATE_SHELL_HISTORY_NORMAL)     state=STATE_SHELL_HISTORY;
 else     if (state == STATE_HIDDEN_NORMAL)     state=STATE_HIDDEN;
 else     if (state == STATE_FOLDER_NORMAL)     state=STATE_FOLDER;
 else     if (state == STATE_ARCHIVE_NORMAL)     state=STATE_ARCHIVE;
 else     if (state == STATE_SYMLINK_NORMAL)     state=STATE_SYMLINK;
 else     if (state == STATE_MARKED_NORMAL)     state=STATE_MARKED;
 else     if (state == STATE_FILE_NORMAL)     state=STATE_FILE;
 else     if (state == STATE_EDITOR_NORMAL)     state=STATE_EDITOR;
 else     if (state == STATE_LOCATION_BAR_NORMAL)     state=STATE_LOCATION_BAR;
 else     if (state == STATE_TABLE_NORMAL)     state=STATE_TABLE;
 else     if (Debug.ON)     traceIllegalClosing(qName);
  }
 else   if (qName.equals(ELEMENT_SELECTED)) {
    if (state == STATE_SHELL_SELECTED)     state=STATE_SHELL;
 else     if (state == STATE_SHELL_HISTORY_SELECTED)     state=STATE_SHELL_HISTORY;
 else     if (state == STATE_HIDDEN_SELECTED)     state=STATE_HIDDEN;
 else     if (state == STATE_FOLDER_SELECTED)     state=STATE_FOLDER;
 else     if (state == STATE_ARCHIVE_SELECTED)     state=STATE_ARCHIVE;
 else     if (state == STATE_SYMLINK_SELECTED)     state=STATE_SYMLINK;
 else     if (state == STATE_MARKED_SELECTED)     state=STATE_MARKED;
 else     if (state == STATE_FILE_SELECTED)     state=STATE_FILE;
 else     if (state == STATE_EDITOR_SELECTED)     state=STATE_EDITOR;
 else     if (state == STATE_LOCATION_BAR_SELECTED)     state=STATE_LOCATION_BAR;
 else     if (state == STATE_TABLE_SELECTED)     state=STATE_TABLE;
 else     if (Debug.ON)     traceIllegalClosing(qName);
  }
}","/** 
 * Notifies the reader that the current element declaration is over.
 */
public void endElement(String uri,String localName,String qName) throws SAXException {
  if (unknownElement != null) {
    if (qName.equals(unknownElement))     unknownElement=null;
 else     return;
  }
  if (qName.equals(ELEMENT_ROOT)) {
    if (state != STATE_ROOT)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_UNKNOWN;
  }
 else   if (qName.equals(ELEMENT_TABLE)) {
    if (state != STATE_TABLE)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_ROOT;
  }
 else   if (qName.equals(ELEMENT_ALTERNATE)) {
    if (state != STATE_TABLE_ALTERNATE)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_TABLE;
  }
 else   if (qName.equals(ELEMENT_UNMATCHED)) {
    if (state != STATE_TABLE_UNMATCHED)     traceIllegalDeclaration(qName);
    state=STATE_TABLE;
  }
 else   if (qName.equals(ELEMENT_HIDDEN)) {
    if (state != STATE_HIDDEN)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_TABLE;
  }
 else   if (qName.equals(ELEMENT_FOLDER)) {
    if (state != STATE_FOLDER)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_TABLE;
  }
 else   if (qName.equals(ELEMENT_ARCHIVE)) {
    if (state != STATE_ARCHIVE)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_TABLE;
  }
 else   if (qName.equals(ELEMENT_SYMLINK)) {
    if (state != STATE_SYMLINK)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_TABLE;
  }
 else   if (qName.equals(ELEMENT_MARKED)) {
    if (state != STATE_MARKED)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_TABLE;
  }
 else   if (qName.equals(ELEMENT_FILE)) {
    if (state != STATE_FILE)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_TABLE;
  }
 else   if (qName.equals(ELEMENT_SHELL)) {
    if (state != STATE_SHELL)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_ROOT;
  }
 else   if (qName.equals(ELEMENT_SHELL_HISTORY)) {
    if (state != STATE_SHELL_HISTORY)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_ROOT;
  }
 else   if (qName.equals(ELEMENT_EDITOR)) {
    if (state != STATE_EDITOR)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_ROOT;
  }
 else   if (qName.equals(ELEMENT_LOCATION_BAR)) {
    if (state != STATE_LOCATION_BAR)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_ROOT;
  }
 else   if (qName.equals(ELEMENT_STATUS_BAR)) {
    if (state != STATE_STATUS_BAR)     if (Debug.ON)     traceIllegalClosing(qName);
    state=STATE_ROOT;
  }
 else   if (qName.equals(ELEMENT_NORMAL)) {
    if (state == STATE_SHELL_NORMAL)     state=STATE_SHELL;
 else     if (state == STATE_SHELL_HISTORY_NORMAL)     state=STATE_SHELL_HISTORY;
 else     if (state == STATE_HIDDEN_NORMAL)     state=STATE_HIDDEN;
 else     if (state == STATE_FOLDER_NORMAL)     state=STATE_FOLDER;
 else     if (state == STATE_ARCHIVE_NORMAL)     state=STATE_ARCHIVE;
 else     if (state == STATE_SYMLINK_NORMAL)     state=STATE_SYMLINK;
 else     if (state == STATE_MARKED_NORMAL)     state=STATE_MARKED;
 else     if (state == STATE_FILE_NORMAL)     state=STATE_FILE;
 else     if (state == STATE_EDITOR_NORMAL)     state=STATE_EDITOR;
 else     if (state == STATE_LOCATION_BAR_NORMAL)     state=STATE_LOCATION_BAR;
 else     if (state == STATE_TABLE_NORMAL)     state=STATE_TABLE;
 else     if (Debug.ON)     traceIllegalClosing(qName);
  }
 else   if (qName.equals(ELEMENT_SELECTED)) {
    if (state == STATE_SHELL_SELECTED)     state=STATE_SHELL;
 else     if (state == STATE_SHELL_HISTORY_SELECTED)     state=STATE_SHELL_HISTORY;
 else     if (state == STATE_HIDDEN_SELECTED)     state=STATE_HIDDEN;
 else     if (state == STATE_FOLDER_SELECTED)     state=STATE_FOLDER;
 else     if (state == STATE_ARCHIVE_SELECTED)     state=STATE_ARCHIVE;
 else     if (state == STATE_SYMLINK_SELECTED)     state=STATE_SYMLINK;
 else     if (state == STATE_MARKED_SELECTED)     state=STATE_MARKED;
 else     if (state == STATE_FILE_SELECTED)     state=STATE_FILE;
 else     if (state == STATE_EDITOR_SELECTED)     state=STATE_EDITOR;
 else     if (state == STATE_LOCATION_BAR_SELECTED)     state=STATE_LOCATION_BAR;
 else     if (state == STATE_TABLE_SELECTED)     state=STATE_TABLE;
 else     if (Debug.ON)     traceIllegalClosing(qName);
  }
}",0.9824520355638746
45222,"/** 
 * Notifies the reader that a new XML element is starting.
 */
public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  if (unknownElement != null) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + qName);
    return;
  }
  if (qName.equals(ELEMENT_ROOT)) {
    if (state != STATE_UNKNOWN)     traceIllegalDeclaration(ELEMENT_ROOT);
    state=STATE_ROOT;
  }
 else   if (qName.equals(ELEMENT_TABLE)) {
    if (state != STATE_ROOT)     traceIllegalDeclaration(qName);
    state=STATE_TABLE;
  }
 else   if (qName.equals(ELEMENT_SHELL)) {
    if (state != STATE_ROOT)     traceIllegalDeclaration(qName);
    state=STATE_SHELL;
  }
 else   if (qName.equals(ELEMENT_EDITOR)) {
    if (state != STATE_ROOT)     traceIllegalDeclaration(qName);
    state=STATE_EDITOR;
  }
 else   if (qName.equals(ELEMENT_LOCATION_BAR)) {
    if (state != STATE_ROOT)     traceIllegalDeclaration(qName);
    state=STATE_LOCATION_BAR;
  }
 else   if (qName.equals(ELEMENT_SHELL_HISTORY)) {
    if (state != STATE_ROOT)     traceIllegalDeclaration(qName);
    state=STATE_SHELL_HISTORY;
  }
 else   if (qName.equals(ELEMENT_STATUS_BAR)) {
    if (state != STATE_ROOT)     traceIllegalDeclaration(qName);
    state=STATE_STATUS_BAR;
  }
 else   if (qName.equals(ELEMENT_HIDDEN)) {
    if (state != STATE_TABLE)     traceIllegalDeclaration(qName);
    state=STATE_HIDDEN;
  }
 else   if (qName.equals(ELEMENT_FOLDER)) {
    if (state != STATE_TABLE)     traceIllegalDeclaration(qName);
    state=STATE_FOLDER;
  }
 else   if (qName.equals(ELEMENT_ARCHIVE)) {
    if (state != STATE_TABLE)     traceIllegalDeclaration(qName);
    state=STATE_ARCHIVE;
  }
 else   if (qName.equals(ELEMENT_SYMLINK)) {
    if (state != STATE_TABLE)     traceIllegalDeclaration(qName);
    state=STATE_SYMLINK;
  }
 else   if (qName.equals(ELEMENT_MARKED)) {
    if (state != STATE_TABLE)     traceIllegalDeclaration(qName);
    state=STATE_MARKED;
  }
 else   if (qName.equals(ELEMENT_FILE)) {
    if (state != STATE_TABLE)     traceIllegalDeclaration(qName);
    state=STATE_FILE;
  }
 else   if (qName.equals(ELEMENT_ALTERNATE)) {
    if (state != STATE_TABLE)     traceIllegalDeclaration(qName);
    state=STATE_TABLE_ALTERNATE;
  }
 else   if (qName.equals(ELEMENT_NORMAL)) {
    if (state == STATE_SHELL)     state=STATE_SHELL_NORMAL;
 else     if (state == STATE_EDITOR)     state=STATE_EDITOR_NORMAL;
 else     if (state == STATE_LOCATION_BAR)     state=STATE_LOCATION_BAR_NORMAL;
 else     if (state == STATE_SHELL_HISTORY)     state=STATE_SHELL_HISTORY_NORMAL;
 else     if (state == STATE_HIDDEN)     state=STATE_HIDDEN_NORMAL;
 else     if (state == STATE_FOLDER)     state=STATE_FOLDER_NORMAL;
 else     if (state == STATE_ARCHIVE)     state=STATE_ARCHIVE_NORMAL;
 else     if (state == STATE_SYMLINK)     state=STATE_SYMLINK_NORMAL;
 else     if (state == STATE_MARKED)     state=STATE_MARKED_NORMAL;
 else     if (state == STATE_FILE)     state=STATE_FILE_NORMAL;
 else     if (state == STATE_TABLE)     state=STATE_TABLE_NORMAL;
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_SELECTED)) {
    if (state == STATE_SHELL)     state=STATE_SHELL_SELECTED;
 else     if (state == STATE_EDITOR)     state=STATE_EDITOR_SELECTED;
 else     if (state == STATE_LOCATION_BAR)     state=STATE_LOCATION_BAR_SELECTED;
 else     if (state == STATE_SHELL_HISTORY)     state=STATE_SHELL_HISTORY_SELECTED;
 else     if (state == STATE_HIDDEN)     state=STATE_HIDDEN_SELECTED;
 else     if (state == STATE_FOLDER)     state=STATE_FOLDER_SELECTED;
 else     if (state == STATE_ARCHIVE)     state=STATE_ARCHIVE_SELECTED;
 else     if (state == STATE_SYMLINK)     state=STATE_SYMLINK_SELECTED;
 else     if (state == STATE_MARKED)     state=STATE_MARKED_SELECTED;
 else     if (state == STATE_FILE)     state=STATE_FILE_SELECTED;
 else     if (state == STATE_TABLE)     state=STATE_TABLE_SELECTED;
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_FONT)) {
    if (state == STATE_SHELL)     template.setFont(ThemeData.SHELL_FONT,createFont(attributes));
 else     if (state == STATE_EDITOR)     template.setFont(ThemeData.EDITOR_FONT,createFont(attributes));
 else     if (state == STATE_LOCATION_BAR)     template.setFont(ThemeData.LOCATION_BAR_FONT,createFont(attributes));
 else     if (state == STATE_SHELL_HISTORY)     template.setFont(ThemeData.SHELL_HISTORY_FONT,createFont(attributes));
 else     if (state == STATE_STATUS_BAR)     template.setFont(ThemeData.STATUS_BAR_FONT,createFont(attributes));
 else     if (state == STATE_TABLE)     template.setFont(ThemeData.FILE_TABLE_FONT,createFont(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_INACTIVE_BACKGROUND)) {
    if (state == STATE_TABLE_NORMAL)     template.setColor(ThemeData.FILE_TABLE_INACTIVE_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_TABLE_SELECTED)     template.setColor(ThemeData.FILE_TABLE_INACTIVE_SELECTED_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_TABLE_ALTERNATE)     template.setColor(ThemeData.FILE_TABLE_INACTIVE_ALTERNATE_BACKGROUND_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_INACTIVE_FOREGROUND)) {
    if (state == STATE_FILE_NORMAL)     template.setColor(ThemeData.FILE_INACTIVE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_FOLDER_NORMAL)     template.setColor(ThemeData.FOLDER_INACTIVE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_ARCHIVE_NORMAL)     template.setColor(ThemeData.ARCHIVE_INACTIVE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SYMLINK_NORMAL)     template.setColor(ThemeData.SYMLINK_INACTIVE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_HIDDEN_NORMAL)     template.setColor(ThemeData.HIDDEN_FILE_INACTIVE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_MARKED_NORMAL)     template.setColor(ThemeData.MARKED_INACTIVE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_FILE_SELECTED)     template.setColor(ThemeData.FILE_INACTIVE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_FOLDER_SELECTED)     template.setColor(ThemeData.FOLDER_INACTIVE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_ARCHIVE_SELECTED)     template.setColor(ThemeData.ARCHIVE_INACTIVE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SYMLINK_SELECTED)     template.setColor(ThemeData.SYMLINK_INACTIVE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_HIDDEN_SELECTED)     template.setColor(ThemeData.HIDDEN_FILE_INACTIVE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_MARKED_SELECTED)     template.setColor(ThemeData.MARKED_INACTIVE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_BORDER)) {
    if (state == STATE_TABLE)     template.setColor(ThemeData.FILE_TABLE_BORDER_COLOR,createColor(attributes));
 else     if (state == STATE_STATUS_BAR)     template.setColor(ThemeData.STATUS_BAR_BORDER_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_INACTIVE_BORDER)) {
    if (state == STATE_TABLE)     template.setColor(ThemeData.FILE_TABLE_INACTIVE_BORDER_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_OUTLINE)) {
    if (state == STATE_TABLE)     template.setColor(ThemeData.FILE_TABLE_SELECTED_OUTLINE_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_INACTIVE_OUTLINE)) {
    if (state == STATE_TABLE)     template.setColor(ThemeData.FILE_TABLE_INACTIVE_SELECTED_OUTLINE_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_BACKGROUND)) {
    if (state == STATE_TABLE_NORMAL)     template.setColor(ThemeData.FILE_TABLE_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_TABLE_SELECTED)     template.setColor(ThemeData.FILE_TABLE_SELECTED_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_TABLE_ALTERNATE)     template.setColor(ThemeData.FILE_TABLE_ALTERNATE_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_TABLE_UNMATCHED)     template.setColor(ThemeData.FILE_TABLE_UNMATCHED_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SHELL_NORMAL)     template.setColor(ThemeData.SHELL_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SHELL_SELECTED)     template.setColor(ThemeData.SHELL_SELECTED_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_EDITOR_NORMAL)     template.setColor(ThemeData.EDITOR_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_EDITOR_SELECTED)     template.setColor(ThemeData.EDITOR_SELECTED_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_LOCATION_BAR_NORMAL)     template.setColor(ThemeData.LOCATION_BAR_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_LOCATION_BAR_SELECTED)     template.setColor(ThemeData.LOCATION_BAR_SELECTED_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SHELL_HISTORY_NORMAL)     template.setColor(ThemeData.SHELL_HISTORY_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SHELL_HISTORY_SELECTED)     template.setColor(ThemeData.SHELL_HISTORY_SELECTED_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_STATUS_BAR)     template.setColor(ThemeData.STATUS_BAR_BACKGROUND_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_PROGRESS)) {
    if (state == STATE_LOCATION_BAR)     template.setColor(ThemeData.LOCATION_BAR_PROGRESS_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_OK)) {
    if (state == STATE_STATUS_BAR)     template.setColor(ThemeData.STATUS_BAR_OK_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_WARNING)) {
    if (state == STATE_STATUS_BAR)     template.setColor(ThemeData.STATUS_BAR_WARNING_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_CRITICAL)) {
    if (state == STATE_STATUS_BAR)     template.setColor(ThemeData.STATUS_BAR_CRITICAL_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_FOREGROUND)) {
    if (state == STATE_HIDDEN_NORMAL)     template.setColor(ThemeData.HIDDEN_FILE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_HIDDEN_SELECTED)     template.setColor(ThemeData.HIDDEN_FILE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_TABLE_UNMATCHED)     template.setColor(ThemeData.FILE_TABLE_UNMATCHED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_FOLDER_NORMAL)     template.setColor(ThemeData.FOLDER_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_FOLDER_SELECTED)     template.setColor(ThemeData.FOLDER_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_ARCHIVE_NORMAL)     template.setColor(ThemeData.ARCHIVE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_ARCHIVE_SELECTED)     template.setColor(ThemeData.ARCHIVE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SYMLINK_NORMAL)     template.setColor(ThemeData.SYMLINK_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SYMLINK_SELECTED)     template.setColor(ThemeData.SYMLINK_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_MARKED_NORMAL)     template.setColor(ThemeData.MARKED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_MARKED_SELECTED)     template.setColor(ThemeData.MARKED_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_FILE_NORMAL)     template.setColor(ThemeData.FILE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_FILE_SELECTED)     template.setColor(ThemeData.FILE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SHELL_NORMAL)     template.setColor(ThemeData.SHELL_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SHELL_SELECTED)     template.setColor(ThemeData.SHELL_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SHELL_HISTORY_NORMAL)     template.setColor(ThemeData.SHELL_HISTORY_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SHELL_HISTORY_SELECTED)     template.setColor(ThemeData.SHELL_HISTORY_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_EDITOR_NORMAL)     template.setColor(ThemeData.EDITOR_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_EDITOR_SELECTED)     template.setColor(ThemeData.EDITOR_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_LOCATION_BAR_NORMAL)     template.setColor(ThemeData.LOCATION_BAR_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_LOCATION_BAR_SELECTED)     template.setColor(ThemeData.LOCATION_BAR_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_STATUS_BAR)     template.setColor(ThemeData.STATUS_BAR_FOREGROUND_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   traceIllegalDeclaration(qName);
}","/** 
 * Notifies the reader that a new XML element is starting.
 */
public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  if (unknownElement != null) {
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + qName);
    return;
  }
  if (qName.equals(ELEMENT_ROOT)) {
    if (state != STATE_UNKNOWN)     traceIllegalDeclaration(ELEMENT_ROOT);
    state=STATE_ROOT;
  }
 else   if (qName.equals(ELEMENT_TABLE)) {
    if (state != STATE_ROOT)     traceIllegalDeclaration(qName);
    state=STATE_TABLE;
  }
 else   if (qName.equals(ELEMENT_SHELL)) {
    if (state != STATE_ROOT)     traceIllegalDeclaration(qName);
    state=STATE_SHELL;
  }
 else   if (qName.equals(ELEMENT_EDITOR)) {
    if (state != STATE_ROOT)     traceIllegalDeclaration(qName);
    state=STATE_EDITOR;
  }
 else   if (qName.equals(ELEMENT_LOCATION_BAR)) {
    if (state != STATE_ROOT)     traceIllegalDeclaration(qName);
    state=STATE_LOCATION_BAR;
  }
 else   if (qName.equals(ELEMENT_SHELL_HISTORY)) {
    if (state != STATE_ROOT)     traceIllegalDeclaration(qName);
    state=STATE_SHELL_HISTORY;
  }
 else   if (qName.equals(ELEMENT_STATUS_BAR)) {
    if (state != STATE_ROOT)     traceIllegalDeclaration(qName);
    state=STATE_STATUS_BAR;
  }
 else   if (qName.equals(ELEMENT_HIDDEN)) {
    if (state != STATE_TABLE)     traceIllegalDeclaration(qName);
    state=STATE_HIDDEN;
  }
 else   if (qName.equals(ELEMENT_FOLDER)) {
    if (state != STATE_TABLE)     traceIllegalDeclaration(qName);
    state=STATE_FOLDER;
  }
 else   if (qName.equals(ELEMENT_ARCHIVE)) {
    if (state != STATE_TABLE)     traceIllegalDeclaration(qName);
    state=STATE_ARCHIVE;
  }
 else   if (qName.equals(ELEMENT_SYMLINK)) {
    if (state != STATE_TABLE)     traceIllegalDeclaration(qName);
    state=STATE_SYMLINK;
  }
 else   if (qName.equals(ELEMENT_MARKED)) {
    if (state != STATE_TABLE)     traceIllegalDeclaration(qName);
    state=STATE_MARKED;
  }
 else   if (qName.equals(ELEMENT_FILE)) {
    if (state != STATE_TABLE)     traceIllegalDeclaration(qName);
    state=STATE_FILE;
  }
 else   if (qName.equals(ELEMENT_ALTERNATE)) {
    if (state != STATE_TABLE)     traceIllegalDeclaration(qName);
    state=STATE_TABLE_ALTERNATE;
  }
 else   if (qName.equals(ELEMENT_NORMAL)) {
    if (state == STATE_SHELL)     state=STATE_SHELL_NORMAL;
 else     if (state == STATE_EDITOR)     state=STATE_EDITOR_NORMAL;
 else     if (state == STATE_LOCATION_BAR)     state=STATE_LOCATION_BAR_NORMAL;
 else     if (state == STATE_SHELL_HISTORY)     state=STATE_SHELL_HISTORY_NORMAL;
 else     if (state == STATE_HIDDEN)     state=STATE_HIDDEN_NORMAL;
 else     if (state == STATE_FOLDER)     state=STATE_FOLDER_NORMAL;
 else     if (state == STATE_ARCHIVE)     state=STATE_ARCHIVE_NORMAL;
 else     if (state == STATE_SYMLINK)     state=STATE_SYMLINK_NORMAL;
 else     if (state == STATE_MARKED)     state=STATE_MARKED_NORMAL;
 else     if (state == STATE_FILE)     state=STATE_FILE_NORMAL;
 else     if (state == STATE_TABLE)     state=STATE_TABLE_NORMAL;
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_SELECTED)) {
    if (state == STATE_SHELL)     state=STATE_SHELL_SELECTED;
 else     if (state == STATE_EDITOR)     state=STATE_EDITOR_SELECTED;
 else     if (state == STATE_LOCATION_BAR)     state=STATE_LOCATION_BAR_SELECTED;
 else     if (state == STATE_SHELL_HISTORY)     state=STATE_SHELL_HISTORY_SELECTED;
 else     if (state == STATE_HIDDEN)     state=STATE_HIDDEN_SELECTED;
 else     if (state == STATE_FOLDER)     state=STATE_FOLDER_SELECTED;
 else     if (state == STATE_ARCHIVE)     state=STATE_ARCHIVE_SELECTED;
 else     if (state == STATE_SYMLINK)     state=STATE_SYMLINK_SELECTED;
 else     if (state == STATE_MARKED)     state=STATE_MARKED_SELECTED;
 else     if (state == STATE_FILE)     state=STATE_FILE_SELECTED;
 else     if (state == STATE_TABLE)     state=STATE_TABLE_SELECTED;
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_FONT)) {
    if (state == STATE_SHELL)     template.setFont(ThemeData.SHELL_FONT,createFont(attributes));
 else     if (state == STATE_EDITOR)     template.setFont(ThemeData.EDITOR_FONT,createFont(attributes));
 else     if (state == STATE_LOCATION_BAR)     template.setFont(ThemeData.LOCATION_BAR_FONT,createFont(attributes));
 else     if (state == STATE_SHELL_HISTORY)     template.setFont(ThemeData.SHELL_HISTORY_FONT,createFont(attributes));
 else     if (state == STATE_STATUS_BAR)     template.setFont(ThemeData.STATUS_BAR_FONT,createFont(attributes));
 else     if (state == STATE_TABLE)     template.setFont(ThemeData.FILE_TABLE_FONT,createFont(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_INACTIVE_BACKGROUND)) {
    if (state == STATE_TABLE_NORMAL)     template.setColor(ThemeData.FILE_TABLE_INACTIVE_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_TABLE_SELECTED)     template.setColor(ThemeData.FILE_TABLE_INACTIVE_SELECTED_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_TABLE_ALTERNATE)     template.setColor(ThemeData.FILE_TABLE_INACTIVE_ALTERNATE_BACKGROUND_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_INACTIVE_FOREGROUND)) {
    if (state == STATE_FILE_NORMAL)     template.setColor(ThemeData.FILE_INACTIVE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_FOLDER_NORMAL)     template.setColor(ThemeData.FOLDER_INACTIVE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_ARCHIVE_NORMAL)     template.setColor(ThemeData.ARCHIVE_INACTIVE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SYMLINK_NORMAL)     template.setColor(ThemeData.SYMLINK_INACTIVE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_HIDDEN_NORMAL)     template.setColor(ThemeData.HIDDEN_FILE_INACTIVE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_MARKED_NORMAL)     template.setColor(ThemeData.MARKED_INACTIVE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_FILE_SELECTED)     template.setColor(ThemeData.FILE_INACTIVE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_FOLDER_SELECTED)     template.setColor(ThemeData.FOLDER_INACTIVE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_ARCHIVE_SELECTED)     template.setColor(ThemeData.ARCHIVE_INACTIVE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SYMLINK_SELECTED)     template.setColor(ThemeData.SYMLINK_INACTIVE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_HIDDEN_SELECTED)     template.setColor(ThemeData.HIDDEN_FILE_INACTIVE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_MARKED_SELECTED)     template.setColor(ThemeData.MARKED_INACTIVE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_BORDER)) {
    if (state == STATE_TABLE)     template.setColor(ThemeData.FILE_TABLE_BORDER_COLOR,createColor(attributes));
 else     if (state == STATE_STATUS_BAR)     template.setColor(ThemeData.STATUS_BAR_BORDER_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_INACTIVE_BORDER)) {
    if (state == STATE_TABLE)     template.setColor(ThemeData.FILE_TABLE_INACTIVE_BORDER_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_OUTLINE)) {
    if (state == STATE_TABLE)     template.setColor(ThemeData.FILE_TABLE_SELECTED_OUTLINE_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_INACTIVE_OUTLINE)) {
    if (state == STATE_TABLE)     template.setColor(ThemeData.FILE_TABLE_INACTIVE_SELECTED_OUTLINE_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_UNMATCHED)) {
    if (state != STATE_TABLE)     traceIllegalDeclaration(qName);
    state=STATE_TABLE_UNMATCHED;
  }
 else   if (qName.equals(ELEMENT_BACKGROUND)) {
    if (state == STATE_TABLE_NORMAL)     template.setColor(ThemeData.FILE_TABLE_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_TABLE_SELECTED)     template.setColor(ThemeData.FILE_TABLE_SELECTED_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_TABLE_ALTERNATE)     template.setColor(ThemeData.FILE_TABLE_ALTERNATE_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_TABLE_UNMATCHED)     template.setColor(ThemeData.FILE_TABLE_UNMATCHED_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SHELL_NORMAL)     template.setColor(ThemeData.SHELL_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SHELL_SELECTED)     template.setColor(ThemeData.SHELL_SELECTED_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_EDITOR_NORMAL)     template.setColor(ThemeData.EDITOR_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_EDITOR_SELECTED)     template.setColor(ThemeData.EDITOR_SELECTED_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_LOCATION_BAR_NORMAL)     template.setColor(ThemeData.LOCATION_BAR_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_LOCATION_BAR_SELECTED)     template.setColor(ThemeData.LOCATION_BAR_SELECTED_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SHELL_HISTORY_NORMAL)     template.setColor(ThemeData.SHELL_HISTORY_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SHELL_HISTORY_SELECTED)     template.setColor(ThemeData.SHELL_HISTORY_SELECTED_BACKGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_STATUS_BAR)     template.setColor(ThemeData.STATUS_BAR_BACKGROUND_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_PROGRESS)) {
    if (state == STATE_LOCATION_BAR)     template.setColor(ThemeData.LOCATION_BAR_PROGRESS_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_OK)) {
    if (state == STATE_STATUS_BAR)     template.setColor(ThemeData.STATUS_BAR_OK_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_WARNING)) {
    if (state == STATE_STATUS_BAR)     template.setColor(ThemeData.STATUS_BAR_WARNING_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_CRITICAL)) {
    if (state == STATE_STATUS_BAR)     template.setColor(ThemeData.STATUS_BAR_CRITICAL_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   if (qName.equals(ELEMENT_FOREGROUND)) {
    if (state == STATE_HIDDEN_NORMAL)     template.setColor(ThemeData.HIDDEN_FILE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_HIDDEN_SELECTED)     template.setColor(ThemeData.HIDDEN_FILE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_TABLE_UNMATCHED)     template.setColor(ThemeData.FILE_TABLE_UNMATCHED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_FOLDER_NORMAL)     template.setColor(ThemeData.FOLDER_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_FOLDER_SELECTED)     template.setColor(ThemeData.FOLDER_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_ARCHIVE_NORMAL)     template.setColor(ThemeData.ARCHIVE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_ARCHIVE_SELECTED)     template.setColor(ThemeData.ARCHIVE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SYMLINK_NORMAL)     template.setColor(ThemeData.SYMLINK_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SYMLINK_SELECTED)     template.setColor(ThemeData.SYMLINK_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_MARKED_NORMAL)     template.setColor(ThemeData.MARKED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_MARKED_SELECTED)     template.setColor(ThemeData.MARKED_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_FILE_NORMAL)     template.setColor(ThemeData.FILE_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_FILE_SELECTED)     template.setColor(ThemeData.FILE_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SHELL_NORMAL)     template.setColor(ThemeData.SHELL_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SHELL_SELECTED)     template.setColor(ThemeData.SHELL_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SHELL_HISTORY_NORMAL)     template.setColor(ThemeData.SHELL_HISTORY_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_SHELL_HISTORY_SELECTED)     template.setColor(ThemeData.SHELL_HISTORY_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_EDITOR_NORMAL)     template.setColor(ThemeData.EDITOR_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_EDITOR_SELECTED)     template.setColor(ThemeData.EDITOR_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_LOCATION_BAR_NORMAL)     template.setColor(ThemeData.LOCATION_BAR_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_LOCATION_BAR_SELECTED)     template.setColor(ThemeData.LOCATION_BAR_SELECTED_FOREGROUND_COLOR,createColor(attributes));
 else     if (state == STATE_STATUS_BAR)     template.setColor(ThemeData.STATUS_BAR_FOREGROUND_COLOR,createColor(attributes));
 else     traceIllegalDeclaration(qName);
  }
 else   traceIllegalDeclaration(qName);
}",0.9946101329500538
45223,"public Object clone(){
  PreviewLabel previewLabel=new PreviewLabel();
  previewLabel.setText(getText());
  previewLabel.setForeground(getForeground());
  previewLabel.setBackground(getBackground());
  previewLabel.setOverlayUnderText(overlayUnderText);
  previewLabel.putClientProperty(OVERLAY_COLOR_PROPERTY_NAME,getClientProperty(OVERLAY_COLOR_PROPERTY_NAME));
  previewLabel.putClientProperty(BORDER_COLOR_PROPERTY_NAME,getClientProperty(BORDER_COLOR_PROPERTY_NAME));
  return previewLabel;
}","public Object clone(){
  PreviewLabel previewLabel=new PreviewLabel();
  previewLabel.setText(getText());
  previewLabel.setForeground(getForeground());
  previewLabel.setBackground(getBackground());
  previewLabel.setOverlayUnderText(overlayUnderText);
  previewLabel.setFont(getFont());
  previewLabel.putClientProperty(OVERLAY_COLOR_PROPERTY_NAME,getClientProperty(OVERLAY_COLOR_PROPERTY_NAME));
  previewLabel.putClientProperty(BORDER_COLOR_PROPERTY_NAME,getClientProperty(BORDER_COLOR_PROPERTY_NAME));
  return previewLabel;
}",0.9659201557935736
45224,"public void execute() throws BuildException {
  if (with == null)   throw new BuildException(""String_Node_Str"");
  if (what == null)   throw new BuildException(""String_Node_Str"");
  if (from == null)   throw new BuildException(""String_Node_Str"");
  if (to == null)   throw new BuildException(""String_Node_Str"");
  getProject().setProperty(to,from.replaceAll(what,with));
}","public void execute() throws BuildException {
  if (with == null)   throw new BuildException(""String_Node_Str"");
  if (what == null)   throw new BuildException(""String_Node_Str"");
  if (from == null)   throw new BuildException(""String_Node_Str"");
  if (to == null)   throw new BuildException(""String_Node_Str"");
  getProject().setNewProperty(to,from.replaceAll(what,with));
}",0.9959839357429718
45225,"/** 
 * Changes current folder, keeping current selection if folder hasn't changed. Should only be called by FolderPanel!
 */
public synchronized void setCurrentFolder(AbstractFile folder,AbstractFile children[]){
  AbstractFile current;
  FileSet markedFiles;
  AbstractFile selectedFile;
  quickSearch.cancel();
  currentFolder=folder;
  current=getCurrentFolder();
  markedFiles=null;
  selectedFile=null;
  if (current != null && folder.equals(current)) {
    markedFiles=tableModel.getMarkedFiles();
    selectedFile=getSelectedFile();
  }
 else   if (tableModel.hasParentFolder() && folder.equals(tableModel.getParentFolder()))   selectedFile=current;
  SwingUtilities.invokeLater(new FolderChangeThread(folder,children,markedFiles,selectedFile));
}","/** 
 * Changes current folder, keeping current selection if folder hasn't changed. Should only be called by FolderPanel!
 */
public synchronized void setCurrentFolder(AbstractFile folder,AbstractFile children[]){
  AbstractFile current;
  FileSet markedFiles;
  AbstractFile selectedFile;
  quickSearch.cancel();
  current=getCurrentFolder();
  currentFolder=folder;
  markedFiles=null;
  selectedFile=null;
  if (current != null && folder.equals(current)) {
    markedFiles=tableModel.getMarkedFiles();
    selectedFile=getSelectedFile();
  }
 else   if (tableModel.hasParentFolder() && folder.equals(tableModel.getParentFolder()))   selectedFile=current;
  SwingUtilities.invokeLater(new FolderChangeThread(folder,children,markedFiles,selectedFile));
}",0.9456953642384106
45226,"/** 
 * Parses the specified command and stores the result in <code>tokens</code>. <p> The <code>tokenTypes</code> argument is optional, and can be set to <code>null</code>. If not set to null, it will contain instructions about whether a keyword is declared in the token of the same index.<br/> For example, if <code>tokenTypes[i] == true</code>, then <code>tokens[i]</code> contains a keyword. </p> <p> This method is very lax about syntax. Errors are just ignored, and a best effort will be made to make sense of the rest of the command. </p> <p> When not sure about how many tokens compose the command - which should be pretty much all the time, it is advised to allocate <code>command.length()</code> big arrays. While not very memory efficient, this is the only way to ensure success. This is an implementation design: growing the size of the buffer to fit the actual number of tokens is resource consuming, both in terms of CPU and memory. The 'use the maximum amount of memory that makes sense' is the lesser of two evils. </p>
 * @param command    command to parse.
 * @param tokens     where to store the tokens that compose the command.
 * @param tokenTypes optional array in which to store information about potential keywords.
 * @return            the number of tokens that were found.
 */
private static int parse(String command,String[] tokens,boolean[] tokenTypes){
  char[] buffer;
  int tokenIndex;
  StringBuffer currentToken;
  boolean isInQuotes;
  command=command.trim();
  currentToken=new StringBuffer(command.length());
  tokenIndex=0;
  buffer=command.toCharArray();
  isInQuotes=false;
  for (int i=0; i < command.length(); i++) {
    if (buffer[i] == '\""') {
      currentToken.append(buffer[i]);
      isInQuotes=!isInQuotes;
    }
 else     if (buffer[i] == '\\') {
      currentToken.append(buffer[i]);
      if (i + 1 != command.length())       currentToken.append(buffer[++i]);
    }
 else     if (buffer[i] == ' ' && !isInQuotes) {
      while (i + 1 < command.length() && buffer[i + 1] == ' ')       i++;
      tokens[tokenIndex]=currentToken.toString();
      tokenIndex++;
      currentToken.setLength(0);
    }
 else     if (buffer[i] == KEYWORD_HEADER) {
      currentToken.append(KEYWORD_HEADER);
      if (++i != command.length()) {
        if (tokenTypes != null)         if (buffer[i] == KEYWORD_PATH || buffer[i] == KEYWORD_NAME || buffer[i] == KEYWORD_PARENT || buffer[i] == KEYWORD_VM_PATH)         tokenTypes[tokenIndex]=true;
        currentToken.append(buffer[i]);
      }
    }
 else     currentToken.append(buffer[i]);
  }
  if (currentToken.length() != 0) {
    tokens[tokenIndex]=currentToken.toString();
    return tokenIndex + 1;
  }
  return tokenIndex;
}","/** 
 * Parses the specified command and stores the result in <code>tokens</code>. <p> The <code>tokenTypes</code> argument is optional, and can be set to <code>null</code>. If not set to null, it will contain instructions about whether a keyword is declared in the token of the same index.<br/> For example, if <code>tokenTypes[i] == true</code>, then <code>tokens[i]</code> contains a keyword. </p> <p> This method is very lax about syntax. Errors are just ignored, and a best effort will be made to make sense of the rest of the command. </p> <p> When not sure about how many tokens compose the command - which should be pretty much all the time, it is advised to allocate <code>command.length()</code> big arrays. While not very memory efficient, this is the only way to ensure success. This is an implementation design: growing the size of the buffer to fit the actual number of tokens is resource consuming, both in terms of CPU and memory. The 'use the maximum amount of memory that makes sense' is the lesser of two evils. </p>
 * @param command    command to parse.
 * @param tokens     where to store the tokens that compose the command.
 * @param tokenTypes optional array in which to store information about potential keywords.
 * @return            the number of tokens that were found.
 */
private static int parse(String command,String[] tokens,boolean[] tokenTypes){
  char[] buffer;
  int tokenIndex;
  StringBuffer currentToken;
  boolean isInQuotes;
  command=command.trim();
  currentToken=new StringBuffer(command.length());
  tokenIndex=0;
  buffer=command.toCharArray();
  isInQuotes=false;
  for (int i=0; i < command.length(); i++) {
    if (buffer[i] == '\""') {
      currentToken.append(buffer[i]);
      isInQuotes=!isInQuotes;
    }
 else     if (buffer[i] == '\\') {
      if (i + 1 != command.length())       currentToken.append(buffer[++i]);
    }
 else     if (buffer[i] == ' ' && !isInQuotes) {
      while (i + 1 < command.length() && buffer[i + 1] == ' ')       i++;
      tokens[tokenIndex]=currentToken.toString();
      tokenIndex++;
      currentToken.setLength(0);
    }
 else     if (buffer[i] == KEYWORD_HEADER) {
      currentToken.append(KEYWORD_HEADER);
      if (++i != command.length()) {
        if (tokenTypes != null)         if (buffer[i] == KEYWORD_PATH || buffer[i] == KEYWORD_NAME || buffer[i] == KEYWORD_PARENT || buffer[i] == KEYWORD_VM_PATH)         tokenTypes[tokenIndex]=true;
        currentToken.append(buffer[i]);
      }
    }
 else     currentToken.append(buffer[i]);
  }
  if (currentToken.length() != 0) {
    tokens[tokenIndex]=currentToken.toString();
    return tokenIndex + 1;
  }
  return tokenIndex;
}",0.9929446713702192
45227,"/** 
 * Skips (up to) the specified number of bytes and returns the number of bytes effectively skipped. The exact given number of bytes will be skipped as long as the current offset as returned by   {@link #getOffset()}plus the number of bytes to skip doesn't exceed the length of this stream as returned by   {@link #getLength()}. If it does, all the remaining bytes will be skipped so that the offset of this stream will be positionned to  {@link #getLength()}.
 * @param n number of bytes to skip
 * @return the number of bytes that have effectively been skipped
 * @throws IOException if something went wrong
 */
public long skip(long n) throws IOException {
  long offset=getOffset();
  if (offset + n >= getLength()) {
    seek(getLength() - 1);
    return getLength() - offset - 1;
  }
  seek(n);
  return n;
}","/** 
 * Skips (up to) the specified number of bytes and returns the number of bytes effectively skipped. The exact given number of bytes will be skipped as long as the current offset as returned by   {@link #getOffset()}plus the number of bytes to skip doesn't exceed the length of this stream as returned by   {@link #getLength()}. If it does, all the remaining bytes will be skipped so that the offset of this stream will be positionned to  {@link #getLength()}.
 * @param n number of bytes to skip
 * @return the number of bytes that have effectively been skipped
 * @throws IOException if something went wrong
 */
public long skip(long n) throws IOException {
  long offset=getOffset();
  long length=getLength();
  if (offset + n >= length) {
    seek(length - 1);
    return length - offset - 1;
  }
  seek(offset + n);
  return n;
}",0.9474954737477368
45228,"private void initUI(){
  Container contentPane=getContentPane();
  totalProgressBar=new JProgressBar();
  totalProgressBar.setStringPainted(true);
  totalProgressBar.setAlignmentX(LEFT_ALIGNMENT);
  currentFileLabel=new JLabel(job.getStatusString());
  currentFileLabel.setAlignmentX(LEFT_ALIGNMENT);
  YBoxPanel yPanel=new YBoxPanel();
  if (transferFileJob != null) {
    yPanel.add(currentFileLabel);
    currentFileProgressBar=new JProgressBar();
    currentFileProgressBar.setStringPainted(true);
    yPanel.add(currentFileProgressBar);
    yPanel.addSpace(10);
    totalTransferredLabel=new JLabel(Translator.get(""String_Node_Str""));
    yPanel.add(totalTransferredLabel);
    yPanel.add(totalProgressBar);
  }
 else {
    yPanel.add(currentFileLabel);
    yPanel.add(totalProgressBar);
  }
  yPanel.addSpace(10);
  elapsedTimeLabel=new JLabel(Translator.get(""String_Node_Str"") + ""String_Node_Str"");
  elapsedTimeLabel.setIcon(IconManager.getIcon(IconManager.STATUS_BAR_ICON_SET,StatusBar.WAITING_ICON));
  yPanel.add(elapsedTimeLabel);
  if (transferFileJob != null) {
    JPanel tempPanel=new JPanel(new BorderLayout());
    this.currentSpeedLabel=new JLabel();
    updateCurrentSpeedLabel(""String_Node_Str"");
    currentSpeedLabel.setIcon(IconManager.getIcon(IconManager.PROGRESS_ICON_SET,CURRENT_SPEED_ICON));
    tempPanel.add(currentSpeedLabel,BorderLayout.WEST);
    YBoxPanel advancedPanel=new YBoxPanel();
    JPanel tempPanel2=new JPanel(new BorderLayout());
    this.limitSpeedCheckBox=new JCheckBox(Translator.get(""String_Node_Str"") + ""String_Node_Str"",false);
    limitSpeedCheckBox.setFocusable(false);
    limitSpeedCheckBox.addItemListener(this);
    tempPanel2.add(limitSpeedCheckBox,BorderLayout.WEST);
    this.limitSpeedSpinner=new JSpinner(new SpinnerNumberModel(0,0,10000,100));
    limitSpeedSpinner.setEnabled(false);
    limitSpeedSpinner.addChangeListener(this);
    JPanel tempPanel3=new JPanel(new FlowLayout(FlowLayout.LEADING));
    tempPanel3.add(limitSpeedSpinner);
    speedUnitComboBox=new JComboBox();
    for (int i=SizeFormat.BYTE_UNIT; i < SizeFormat.GIGA_BYTE_UNIT; i++)     speedUnitComboBox.addItem(SizeFormat.getUnitString(i,true));
    speedUnitComboBox.setSelectedIndex(SizeFormat.KILO_BYTE_UNIT);
    speedUnitComboBox.setEnabled(false);
    speedUnitComboBox.addItemListener(this);
    tempPanel3.add(speedUnitComboBox);
    tempPanel2.add(tempPanel3,BorderLayout.EAST);
    advancedPanel.add(tempPanel2);
    advancedPanel.addSpace(5);
    this.speedGraph=new SpeedGraph();
    speedGraph.setPreferredSize(new Dimension(0,SPEED_GRAPH_HEIGHT));
    advancedPanel.add(speedGraph);
    this.collapseExpandButton=new CollapseExpandButton(Translator.get(""String_Node_Str""),advancedPanel,this,true);
    collapseExpandButton.setExpandedState(ConfigurationManager.getVariableBoolean(ConfigurationVariables.PROGRESS_DIALOG_EXPANDED,ConfigurationVariables.DEFAULT_PROGRESS_DIALOG_EXPANDED));
    tempPanel.add(collapseExpandButton,BorderLayout.EAST);
    yPanel.add(tempPanel);
    yPanel.addSpace(5);
    yPanel.add(advancedPanel);
  }
  closeWhenFinishedCheckBox=new JCheckBox(Translator.get(""String_Node_Str""));
  closeWhenFinishedCheckBox.setSelected(ConfigurationManager.getVariableBoolean(ConfigurationVariables.PROGRESS_DIALOG_CLOSE_WHEN_FINISHED,ConfigurationVariables.DEFAULT_PROGRESS_DIALOG_CLOSE_WHEN_FINISHED));
  closeWhenFinishedCheckBox.setFocusable(false);
  yPanel.add(closeWhenFinishedCheckBox);
  yPanel.add(Box.createVerticalGlue());
  contentPane.add(yPanel,BorderLayout.CENTER);
  pauseResumeButton=new JButton(Translator.get(""String_Node_Str""),IconManager.getIcon(IconManager.PROGRESS_ICON_SET,PAUSE_ICON));
  pauseResumeButton.addActionListener(this);
  if (transferFileJob != null) {
    skipButton=new JButton(Translator.get(""String_Node_Str""),IconManager.getIcon(IconManager.PROGRESS_ICON_SET,SKIP_ICON));
    skipButton.addActionListener(this);
  }
  stopButton=new JButton(Translator.get(""String_Node_Str""),IconManager.getIcon(IconManager.PROGRESS_ICON_SET,STOP_ICON));
  stopButton.addActionListener(this);
  this.buttonsChoicePanel=new ButtonChoicePanel(skipButton == null ? new JButton[]{pauseResumeButton,stopButton} : new JButton[]{pauseResumeButton,skipButton,stopButton},0,getRootPane());
  contentPane.add(buttonsChoicePanel,BorderLayout.SOUTH);
  setInitialFocusComponent(stopButton);
  getRootPane().setDefaultButton(stopButton);
}","private void initUI(){
  Container contentPane=getContentPane();
  totalProgressBar=new JProgressBar();
  totalProgressBar.setStringPainted(true);
  totalProgressBar.setAlignmentX(LEFT_ALIGNMENT);
  currentFileLabel=new JLabel(job.getStatusString());
  currentFileLabel.setAlignmentX(LEFT_ALIGNMENT);
  YBoxPanel yPanel=new YBoxPanel();
  if (transferFileJob != null) {
    yPanel.add(currentFileLabel);
    currentFileProgressBar=new JProgressBar();
    currentFileProgressBar.setStringPainted(true);
    yPanel.add(currentFileProgressBar);
    yPanel.addSpace(10);
    totalTransferredLabel=new JLabel(Translator.get(""String_Node_Str""));
    yPanel.add(totalTransferredLabel);
    yPanel.add(totalProgressBar);
  }
 else {
    yPanel.add(currentFileLabel);
    yPanel.add(totalProgressBar);
  }
  yPanel.addSpace(10);
  elapsedTimeLabel=new JLabel(Translator.get(""String_Node_Str"") + ""String_Node_Str"");
  elapsedTimeLabel.setIcon(IconManager.getIcon(IconManager.STATUS_BAR_ICON_SET,StatusBar.WAITING_ICON));
  yPanel.add(elapsedTimeLabel);
  if (transferFileJob != null) {
    JPanel tempPanel=new JPanel(new BorderLayout());
    this.currentSpeedLabel=new JLabel();
    updateCurrentSpeedLabel(""String_Node_Str"");
    currentSpeedLabel.setIcon(IconManager.getIcon(IconManager.PROGRESS_ICON_SET,CURRENT_SPEED_ICON));
    tempPanel.add(currentSpeedLabel,BorderLayout.WEST);
    YBoxPanel advancedPanel=new YBoxPanel();
    JPanel tempPanel2=new JPanel(new BorderLayout());
    this.limitSpeedCheckBox=new JCheckBox(Translator.get(""String_Node_Str"") + ""String_Node_Str"",false);
    limitSpeedCheckBox.addItemListener(this);
    tempPanel2.add(limitSpeedCheckBox,BorderLayout.WEST);
    this.limitSpeedSpinner=new JSpinner(new SpinnerNumberModel(0,0,10000,100));
    limitSpeedSpinner.setEnabled(false);
    limitSpeedSpinner.addChangeListener(this);
    JPanel tempPanel3=new JPanel(new FlowLayout(FlowLayout.LEADING));
    tempPanel3.add(limitSpeedSpinner);
    speedUnitComboBox=new JComboBox();
    for (int i=SizeFormat.BYTE_UNIT; i < SizeFormat.GIGA_BYTE_UNIT; i++)     speedUnitComboBox.addItem(SizeFormat.getUnitString(i,true));
    speedUnitComboBox.setSelectedIndex(SizeFormat.KILO_BYTE_UNIT);
    speedUnitComboBox.setEnabled(false);
    speedUnitComboBox.addItemListener(this);
    tempPanel3.add(speedUnitComboBox);
    tempPanel2.add(tempPanel3,BorderLayout.EAST);
    advancedPanel.add(tempPanel2);
    advancedPanel.addSpace(5);
    this.speedGraph=new SpeedGraph();
    speedGraph.setPreferredSize(new Dimension(0,SPEED_GRAPH_HEIGHT));
    advancedPanel.add(speedGraph);
    this.collapseExpandButton=new CollapseExpandButton(Translator.get(""String_Node_Str""),advancedPanel,this,true);
    collapseExpandButton.setExpandedState(ConfigurationManager.getVariableBoolean(ConfigurationVariables.PROGRESS_DIALOG_EXPANDED,ConfigurationVariables.DEFAULT_PROGRESS_DIALOG_EXPANDED));
    tempPanel.add(collapseExpandButton,BorderLayout.EAST);
    yPanel.add(tempPanel);
    yPanel.addSpace(5);
    yPanel.add(advancedPanel);
  }
  closeWhenFinishedCheckBox=new JCheckBox(Translator.get(""String_Node_Str""));
  closeWhenFinishedCheckBox.setSelected(ConfigurationManager.getVariableBoolean(ConfigurationVariables.PROGRESS_DIALOG_CLOSE_WHEN_FINISHED,ConfigurationVariables.DEFAULT_PROGRESS_DIALOG_CLOSE_WHEN_FINISHED));
  yPanel.add(closeWhenFinishedCheckBox);
  yPanel.add(Box.createVerticalGlue());
  contentPane.add(yPanel,BorderLayout.CENTER);
  pauseResumeButton=new JButton(Translator.get(""String_Node_Str""),IconManager.getIcon(IconManager.PROGRESS_ICON_SET,PAUSE_ICON));
  pauseResumeButton.addActionListener(this);
  if (transferFileJob != null) {
    skipButton=new JButton(Translator.get(""String_Node_Str""),IconManager.getIcon(IconManager.PROGRESS_ICON_SET,SKIP_ICON));
    skipButton.addActionListener(this);
  }
  stopButton=new JButton(Translator.get(""String_Node_Str""),IconManager.getIcon(IconManager.PROGRESS_ICON_SET,STOP_ICON));
  stopButton.addActionListener(this);
  this.buttonsChoicePanel=new ButtonChoicePanel(skipButton == null ? new JButton[]{pauseResumeButton,stopButton} : new JButton[]{pauseResumeButton,skipButton,stopButton},0,getRootPane());
  contentPane.add(buttonsChoicePanel,BorderLayout.SOUTH);
  setInitialFocusComponent(stopButton);
  getRootPane().setDefaultButton(stopButton);
}",0.9893531768746422
45229,"private static Reader getStreamReader(InputStream in,String encoding){
  if (encoding != null) {
    try {
      return new InputStreamReader(in,encoding);
    }
 catch (    Exception e) {
    }
  }
  return new InputStreamReader(in);
}","private static Reader getStreamReader(InputStream in,String encoding){
  if (encoding != null) {
    try {
      return new InputStreamReader(in,encoding);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return new InputStreamReader(in);
}",0.9458917835671342
45230,"/** 
 * Extracts the shell command from configuration.
 */
private static synchronized void setShellCommand(){
  String buffer;
  if (ConfigurationManager.getVariableBoolean(ConfigurationVariables.USE_CUSTOM_SHELL,ConfigurationVariables.DEFAULT_USE_CUSTOM_SHELL))   buffer=ConfigurationManager.getVariable(ConfigurationVariables.CUSTOM_SHELL,PlatformManager.DEFAULT_SHELL_COMMAND);
 else   buffer=PlatformManager.DEFAULT_SHELL_COMMAND;
  tokens=CommandParser.getTokensWithParams(buffer,1);
  encoding=ConfigurationManager.getVariable(ConfigurationVariables.SHELL_ENCODING,PlatformManager.DEFAULT_SHELL_ENCODING);
}","/** 
 * Extracts the shell command from configuration.
 */
private static synchronized void setShellCommand(){
  String buffer;
  if (ConfigurationManager.getVariableBoolean(ConfigurationVariables.USE_CUSTOM_SHELL,ConfigurationVariables.DEFAULT_USE_CUSTOM_SHELL))   buffer=ConfigurationManager.getVariable(ConfigurationVariables.CUSTOM_SHELL,PlatformManager.DEFAULT_SHELL_COMMAND);
 else   buffer=PlatformManager.DEFAULT_SHELL_COMMAND;
  tokens=CommandParser.getTokensWithParams(buffer,1);
  encoding=ConfigurationManager.getVariable(ConfigurationVariables.SHELL_ENCODING);
}",0.9671993271656856
45231,"/** 
 * Executes the specified command in the specified folder. <p> The <code>currentFolder</code> folder parameter will only be used if it's neither a remote directory nor an archive. Otherwise, the command will run from the user's home directory. </p> <p> Information about the resulting process will be sent to the specified <code>listener</code>. </p>
 * @param command       command to run.
 * @param currentFolder where to run the command from.
 * @param listener      where to send information about the resulting process.
 * @return                  the resulting process.
 * @exception IOException   thrown if any error occurs while trying to run the command.
 */
public static synchronized AbstractProcess execute(String command,AbstractFile currentFolder,ProcessListener listener) throws IOException {
  String[] commandTokens;
  if (Debug.ON)   Debug.trace(""String_Node_Str"" + command);
  ShellHistoryManager.add(command);
  if (currentFolder instanceof LocalFile || !currentFolder.canRunProcess()) {
    tokens[tokens.length - 1]=command;
    commandTokens=tokens;
  }
 else {
    remoteTokens[0]=command;
    commandTokens=remoteTokens;
  }
  return ProcessRunner.execute(commandTokens,currentFolder,listener,encoding);
}","/** 
 * Executes the specified command in the specified folder. <p> The <code>currentFolder</code> folder parameter will only be used if it's neither a remote directory nor an archive. Otherwise, the command will run from the user's home directory. </p> <p> Information about the resulting process will be sent to the specified <code>listener</code>. </p>
 * @param command       command to run.
 * @param currentFolder where to run the command from.
 * @param listener      where to send information about the resulting process.
 * @return                  the resulting process.
 * @exception IOException   thrown if any error occurs while trying to run the command.
 */
public static synchronized AbstractProcess execute(String command,AbstractFile currentFolder,ProcessListener listener) throws IOException {
  String[] commandTokens;
  if (Debug.ON)   Debug.trace(""String_Node_Str"" + command);
  ShellHistoryManager.add(command);
  if (currentFolder instanceof LocalFile || !currentFolder.canRunProcess()) {
    tokens[tokens.length - 1]=command;
    commandTokens=tokens;
  }
 else {
    remoteTokens[0]=command;
    commandTokens=remoteTokens;
  }
  return (encoding == null) ? ProcessRunner.execute(commandTokens,currentFolder,listener) : ProcessRunner.execute(commandTokens,currentFolder,listener,encoding);
}",0.9674892283587936
45232,"public void menuSelected(MenuEvent e){
  Object source=e.getSource();
  if (source == viewMenu) {
switch (mainFrame.getActiveTable().getSortByCriteria()) {
case Columns.EXTENSION:
      sortByExtensionItem.setSelected(true);
    break;
case Columns.NAME:
  sortByNameItem.setSelected(true);
break;
case Columns.SIZE:
sortBySizeItem.setSelected(true);
break;
case Columns.DATE:
sortByDateItem.setSelected(true);
break;
}
}
 else if (source == columnsMenu) {
FileTable activeTable=mainFrame.getActiveTable();
toggleExtensionColumnItem.setSelected(activeTable.isColumnVisible(Columns.EXTENSION));
toggleSizeColumnItem.setSelected(activeTable.isColumnVisible(Columns.SIZE));
toggleDateColumnItem.setSelected(activeTable.isColumnVisible(Columns.DATE));
togglePermissionsColumnItem.setSelected(activeTable.isColumnVisible(Columns.PERMISSIONS));
}
 else if (source == goMenu) {
for (int i=goMenu.getItemCount(); i > rootFoldersOffset; i--) goMenu.remove(rootFoldersOffset);
AbstractFile rootFolders[]=RootFolders.getRootFolders();
int nbFolders=rootFolders.length;
for (int i=0; i < nbFolders; i++) goMenu.add(new OpenLocationAction(mainFrame,rootFolders[i]));
}
 else if (source == bookmarksMenu) {
for (int i=bookmarksMenu.getItemCount(); i > bookmarksOffset; i--) bookmarksMenu.remove(bookmarksOffset);
Vector bookmarks=BookmarkManager.getBookmarks();
int nbBookmarks=bookmarks.size();
if (nbBookmarks > 0) {
Bookmark b;
for (int i=0; i < nbBookmarks; i++) MenuToolkit.addMenuItem(bookmarksMenu,new OpenLocationAction(mainFrame,(Bookmark)bookmarks.elementAt(i)),null);
}
 else {
JMenuItem noBookmarkItem=MenuToolkit.addMenuItem(bookmarksMenu,Translator.get(""String_Node_Str""),null,null,null);
noBookmarkItem.setEnabled(false);
}
}
 else if (source == windowMenu) {
if (mainFrame.getSplitPaneOrientation()) splitVerticallyItem.setSelected(true);
 else splitHorizontallyItem.setSelected(true);
for (int i=windowMenu.getItemCount(); i > windowOffset; i--) windowMenu.remove(windowOffset);
windowMenuFrames=new WeakHashMap();
java.util.Vector mainFrames=WindowManager.getMainFrames();
MainFrame mainFrame;
JCheckBoxMenuItem checkBoxMenuItem;
int nbFrames=mainFrames.size();
for (int i=0; i < nbFrames; i++) {
mainFrame=(MainFrame)mainFrames.elementAt(i);
checkBoxMenuItem=new JCheckBoxMenuItem();
if (i < 10) checkBoxMenuItem.setAction(ActionManager.getActionInstance(RECALL_WINDOW_ACTIONS[i],this.mainFrame));
 else {
checkBoxMenuItem.addActionListener(this);
windowMenuFrames.put(checkBoxMenuItem,mainFrame);
}
checkBoxMenuItem.setText((i + 1) + ""String_Node_Str"" + mainFrame.getActiveTable().getCurrentFolder().getAbsolutePath());
checkBoxMenuItem.setSelected(mainFrame == this.mainFrame);
windowMenu.add(checkBoxMenuItem);
}
Frame frames[]=Frame.getFrames();
nbFrames=frames.length;
Frame frame;
JMenuItem menuItem;
boolean firstFrame=true;
for (int i=0; i < nbFrames; i++) {
frame=frames[i];
if (frame.isShowing() && ((frame instanceof ViewerFrame) || (frame instanceof EditorFrame))) {
if (firstFrame) {
windowMenu.add(new JSeparator());
firstFrame=false;
}
menuItem=new JMenuItem(frame.getTitle());
menuItem.addActionListener(this);
windowMenu.add(menuItem);
windowMenuFrames.put(menuItem,frame);
}
}
}
 else if (source == themesMenu) {
themesMenu.removeAll();
ButtonGroup buttonGroup=new ButtonGroup();
Iterator themes=ThemeManager.availableThemes();
Theme theme;
JCheckBoxMenuItem item;
while (themes.hasNext()) {
theme=(Theme)themes.next();
item=new JCheckBoxMenuItem(new ChangeCurrentThemeAction(theme));
buttonGroup.add(item);
if (ThemeManager.isCurrentTheme(theme)) item.setSelected(true);
themesMenu.add(item);
}
}
}","public void menuSelected(MenuEvent e){
  Object source=e.getSource();
  if (source == viewMenu) {
switch (mainFrame.getActiveTable().getSortByCriteria()) {
case Columns.EXTENSION:
      sortByExtensionItem.setSelected(true);
    break;
case Columns.NAME:
  sortByNameItem.setSelected(true);
break;
case Columns.SIZE:
sortBySizeItem.setSelected(true);
break;
case Columns.DATE:
sortByDateItem.setSelected(true);
break;
}
}
 else if (source == columnsMenu) {
FileTable activeTable=mainFrame.getActiveTable();
toggleExtensionColumnItem.setSelected(activeTable.isColumnVisible(Columns.EXTENSION));
toggleSizeColumnItem.setSelected(activeTable.isColumnVisible(Columns.SIZE));
toggleDateColumnItem.setSelected(activeTable.isColumnVisible(Columns.DATE));
togglePermissionsColumnItem.setSelected(activeTable.isColumnVisible(Columns.PERMISSIONS));
}
 else if (source == goMenu) {
for (int i=goMenu.getItemCount(); i > rootFoldersOffset; i--) goMenu.remove(rootFoldersOffset);
AbstractFile rootFolders[]=RootFolders.getRootFolders();
int nbFolders=rootFolders.length;
for (int i=0; i < nbFolders; i++) goMenu.add(new OpenLocationAction(mainFrame,new Hashtable(),rootFolders[i]));
}
 else if (source == bookmarksMenu) {
for (int i=bookmarksMenu.getItemCount(); i > bookmarksOffset; i--) bookmarksMenu.remove(bookmarksOffset);
Vector bookmarks=BookmarkManager.getBookmarks();
int nbBookmarks=bookmarks.size();
if (nbBookmarks > 0) {
Bookmark b;
for (int i=0; i < nbBookmarks; i++) MenuToolkit.addMenuItem(bookmarksMenu,new OpenLocationAction(mainFrame,new Hashtable(),(Bookmark)bookmarks.elementAt(i)),null);
}
 else {
JMenuItem noBookmarkItem=MenuToolkit.addMenuItem(bookmarksMenu,Translator.get(""String_Node_Str""),null,null,null);
noBookmarkItem.setEnabled(false);
}
}
 else if (source == windowMenu) {
if (mainFrame.getSplitPaneOrientation()) splitVerticallyItem.setSelected(true);
 else splitHorizontallyItem.setSelected(true);
for (int i=windowMenu.getItemCount(); i > windowOffset; i--) windowMenu.remove(windowOffset);
windowMenuFrames=new WeakHashMap();
java.util.Vector mainFrames=WindowManager.getMainFrames();
MainFrame mainFrame;
JCheckBoxMenuItem checkBoxMenuItem;
int nbFrames=mainFrames.size();
for (int i=0; i < nbFrames; i++) {
mainFrame=(MainFrame)mainFrames.elementAt(i);
checkBoxMenuItem=new JCheckBoxMenuItem();
MucoAction recallWindowAction;
if (i < 10) {
recallWindowAction=ActionManager.getActionInstance(RECALL_WINDOW_ACTIONS[i],this.mainFrame);
}
 else {
Hashtable actionProps=new Hashtable();
actionProps.put(RecallWindowAction.WINDOW_NUMBER_PROPERTY_KEY,""String_Node_Str"" + (i + 1));
recallWindowAction=ActionManager.getActionInstance(new ActionDescriptor(RecallWindowAction.class,actionProps),this.mainFrame);
}
checkBoxMenuItem.setAction(recallWindowAction);
checkBoxMenuItem.setText((i + 1) + ""String_Node_Str"" + mainFrame.getActiveTable().getCurrentFolder().getAbsolutePath());
checkBoxMenuItem.setToolTipText(recallWindowAction.getLabel());
checkBoxMenuItem.setSelected(mainFrame == this.mainFrame);
windowMenu.add(checkBoxMenuItem);
}
Frame frames[]=Frame.getFrames();
nbFrames=frames.length;
Frame frame;
JMenuItem menuItem;
boolean firstFrame=true;
for (int i=0; i < nbFrames; i++) {
frame=frames[i];
if (frame.isShowing() && ((frame instanceof ViewerFrame) || (frame instanceof EditorFrame))) {
if (firstFrame) {
windowMenu.add(new JSeparator());
firstFrame=false;
}
menuItem=new JMenuItem(frame.getTitle());
menuItem.addActionListener(this);
windowMenu.add(menuItem);
windowMenuFrames.put(menuItem,frame);
}
}
}
 else if (source == themesMenu) {
themesMenu.removeAll();
ButtonGroup buttonGroup=new ButtonGroup();
Iterator themes=ThemeManager.availableThemes();
Theme theme;
JCheckBoxMenuItem item;
while (themes.hasNext()) {
theme=(Theme)themes.next();
item=new JCheckBoxMenuItem(new ChangeCurrentThemeAction(theme));
buttonGroup.add(item);
if (ThemeManager.isCurrentTheme(theme)) item.setSelected(true);
themesMenu.add(item);
}
}
}",0.912664907651715
45233,"public void performAction(){
  FileTable fileTable=mainFrame.getActiveTable();
  FileTableModel tableModel=fileTable.getFileTableModel();
  int nbRows=tableModel.getRowCount();
  for (int i=fileTable.getParent() == null ? 0 : 1; i < nbRows; i++)   tableModel.setRowMarked(i,true);
  fileTable.repaint();
  fileTable.fireMarkedFilesChangedEvent();
}","public void performAction(){
  FileTable fileTable=mainFrame.getActiveTable();
  FileTableModel tableModel=fileTable.getFileTableModel();
  int nbRows=tableModel.getRowCount();
  for (int i=fileTable.getCurrentFolder().getParent() == null ? 0 : 1; i < nbRows; i++)   tableModel.setRowMarked(i,true);
  fileTable.repaint();
  fileTable.fireMarkedFilesChangedEvent();
}",0.9734265734265736
45234,"public void performAction(){
  FileTable fileTable=mainFrame.getActiveTable();
  FileTableModel tableModel=fileTable.getFileTableModel();
  int nbRows=tableModel.getRowCount();
  for (int i=fileTable.getParent() == null ? 0 : 1; i < nbRows; i++)   tableModel.setRowMarked(i,false);
  fileTable.repaint();
  fileTable.fireMarkedFilesChangedEvent();
}","public void performAction(){
  FileTable fileTable=mainFrame.getActiveTable();
  FileTableModel tableModel=fileTable.getFileTableModel();
  int nbRows=tableModel.getRowCount();
  for (int i=fileTable.getCurrentFolder().getParent() == null ? 0 : 1; i < nbRows; i++)   tableModel.setRowMarked(i,false);
  fileTable.repaint();
  fileTable.fireMarkedFilesChangedEvent();
}",0.9735006973500696
45235,"public boolean canRunProcess(){
  return true;
}","public boolean canRunProcess(){
  return false;
}",0.9278350515463918
45236,"private SFTPProcess(String tokens[]) throws IOException {
  try {
    connHandler=(SFTPConnectionHandler)ConnectionPool.getConnectionHandler(SFTPFile.this,fileURL,true);
    connHandler.checkConnection();
    sessionClient=connHandler.sshClient.openSessionChannel();
    String command=""String_Node_Str"";
    int nbTokens=tokens.length;
    for (int i=0; i < nbTokens; i++) {
      command+=tokens[i];
      if (i != nbTokens - 1)       command+=""String_Node_Str"";
    }
    success=sessionClient.executeCommand(command);
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + command + ""String_Node_Str""+ success);
  }
 catch (  IOException e) {
    connHandler.releaseLock();
    sessionClient.close();
  }
}","private SFTPProcess(String tokens[]) throws IOException {
  try {
    connHandler=(SFTPConnectionHandler)ConnectionPool.getConnectionHandler(SFTPFile.this,fileURL,true);
    connHandler.checkConnection();
    sessionClient=connHandler.sshClient.openSessionChannel();
    String command=""String_Node_Str"";
    int nbTokens=tokens.length;
    for (int i=0; i < nbTokens; i++) {
      command+=tokens[i];
      if (i != nbTokens - 1)       command+=""String_Node_Str"";
    }
    success=sessionClient.executeCommand(command);
    if (Debug.ON)     Debug.trace(""String_Node_Str"" + command + ""String_Node_Str""+ success);
  }
 catch (  IOException e) {
    connHandler.releaseLock();
    sessionClient.close();
    throw e;
  }
}",0.9909154437456325
45237,"/** 
 * Overrident method to close connection to the mail server.
 */
protected void jobStopped(){
  super.jobStopped();
  closeConnection();
}","/** 
 * Method overridden to close connection to the mail server.
 */
protected void jobStopped(){
  super.jobStopped();
  closeConnection();
}",0.9370629370629372
45238,"protected boolean processFile(AbstractFile file,Object recurseParams){
  if (getState() == INTERRUPTED)   return false;
  try {
    return sendAttachment(file);
  }
 catch (  IOException e) {
    showErrorDialog(Translator.get(""String_Node_Str"",file.getName()));
    return false;
  }
}","protected boolean processFile(AbstractFile file,Object recurseParams){
  if (getState() == INTERRUPTED)   return false;
  try {
    sendAttachment(file);
  }
 catch (  IOException e) {
    showErrorDialog(Translator.get(""String_Node_Str"",file.getName()));
    return false;
  }
  if (getCurrentFileIndex() == getNbFiles() - 1) {
    try {
      sayGoodBye();
    }
 catch (    IOException e) {
      showErrorDialog(Translator.get(""String_Node_Str""));
      return false;
    }
  }
  return true;
}",0.7091836734693877
45239,"/** 
 * Send file as attachment encoded in Base64, and returns true if file was successfully and completely transferred.
 */
private boolean sendAttachment(AbstractFile file) throws IOException {
  InputStream fileIn=null;
  try {
    String mimeType=MimeTypes.getMimeType(file);
    if (mimeType == null)     mimeType=""String_Node_Str"";
    writeLine(""String_Node_Str"" + mimeType + ""String_Node_Str""+ file.getName());
    writeLine(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
    writeLine(""String_Node_Str"");
    fileIn=setCurrentInputStream(file.getInputStream());
    AbstractFile.copyStream(fileIn,out64);
    out64.writePadding();
    writeLine(""String_Node_Str"" + boundary);
    return true;
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    if (fileIn != null)     fileIn.close();
  }
}","/** 
 * Send file as attachment encoded in Base64, and returns true if file was successfully and completely transferred.
 */
private void sendAttachment(AbstractFile file) throws IOException {
  InputStream fileIn=null;
  try {
    String mimeType=MimeTypes.getMimeType(file);
    if (mimeType == null)     mimeType=""String_Node_Str"";
    writeLine(""String_Node_Str"" + mimeType + ""String_Node_Str""+ file.getName());
    writeLine(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
    writeLine(""String_Node_Str"");
    fileIn=setCurrentInputStream(file.getInputStream());
    AbstractFile.copyStream(fileIn,out64);
    out64.writePadding();
    writeLine(""String_Node_Str"" + boundary);
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    if (fileIn != null)     fileIn.close();
  }
}",0.982716049382716
45240,"/** 
 * TransferFileJob methods implementation 
 */
public String getStatusString(){
  if (connectedToMailServer)   return Translator.get(""String_Node_Str"",getCurrentFileInfo());
 else   return Translator.get(""String_Node_Str"",mailServer);
}","public String getStatusString(){
  if (connectedToMailServer)   return Translator.get(""String_Node_Str"",getCurrentFileInfo());
 else   return Translator.get(""String_Node_Str"",mailServer);
}",0.8790697674418605
45241,"/** 
 * Creates a new local process running the specified command.
 * @param tokens      command to run and its parameters.
 * @param dir         directory in which to start the command.
 * @return             the newly created process.
 * @throws IOException if the process could not be created.
 */
public LocalProcess(String[] tokens,File dir) throws IOException {
  if (PlatformManager.JAVA_VERSION >= PlatformManager.JAVA_1_5) {
    ProcessBuilder pb=new ProcessBuilder(tokens);
    pb.directory(dir);
    pb.redirectErrorStream(true);
    process=pb.start();
  }
 else   process=Runtime.getRuntime().exec(tokens,null,dir);
  if (process == null)   throw new IOException();
}","/** 
 * Creates a new local process running the specified command.
 * @param tokens      command to run and its parameters.
 * @param dir         directory in which to start the command.
 * @throws IOException if the process could not be created.
 */
public LocalProcess(String[] tokens,File dir) throws IOException {
  if (PlatformManager.JAVA_VERSION >= PlatformManager.JAVA_1_5) {
    ProcessBuilder pb=new ProcessBuilder(tokens);
    pb.directory(dir);
    pb.redirectErrorStream(true);
    process=pb.start();
  }
 else   process=Runtime.getRuntime().exec(tokens,null,dir);
  if (process == null)   throw new IOException();
}",0.9618320610687024
45242,"/** 
 * Creates a new ViewerFrame to start viewing the given file. <p>This constructor has package access only, ViewerFrame need to be created can  {@link ViewerRegistrar#getViewerFrame(AbstractFile) ViewerRegistrar.getViewerFrame(AbstractFile)}. 
 */
ViewerFrame(MainFrame mainFrame,AbstractFile file,Image icon){
  super();
  setIconImage(icon);
  this.mainFrame=mainFrame;
  this.file=file;
  this.menuMnemonicHelper=new MnemonicHelper();
  MnemonicHelper menuItemMnemonicHelper=new MnemonicHelper();
  this.menuBar=new JMenuBar();
  JMenu menu=addMenu(Translator.get(""String_Node_Str""));
  closeItem=MenuToolkit.addMenuItem(menu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),this);
  menu.add(closeItem);
  setJMenuBar(menuBar);
  setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
  setResizable(true);
  new Thread(ViewerFrame.this,""String_Node_Str"").start();
}","/** 
 * Creates a new ViewerFrame to start viewing the given file. <p>This constructor has package access only, ViewerFrame need to be created can  {@link ViewerRegistrar#createViewerFrame(MainFrame,AbstractFile,Image)}.
 */
ViewerFrame(MainFrame mainFrame,AbstractFile file,Image icon){
  super();
  setIconImage(icon);
  this.mainFrame=mainFrame;
  this.file=file;
  this.menuMnemonicHelper=new MnemonicHelper();
  MnemonicHelper menuItemMnemonicHelper=new MnemonicHelper();
  this.menuBar=new JMenuBar();
  JMenu menu=addMenu(Translator.get(""String_Node_Str""));
  closeItem=MenuToolkit.addMenuItem(menu,Translator.get(""String_Node_Str""),menuItemMnemonicHelper,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),this);
  menu.add(closeItem);
  setJMenuBar(menuBar);
  setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
  setResizable(true);
  new Thread(ViewerFrame.this,""String_Node_Str"").start();
}",0.9624387588459444
45243,"/** 
 * Changes the current theme. <p> This method will change the current theme and trigger all the proper events. </p>
 * @param theme theme to use as the current theme.
 */
public synchronized static void setCurrentTheme(Theme theme){
  ThemeData oldData;
  if (isCurrentTheme(theme)) {
    setConfigurationTheme(theme);
    return;
  }
  oldData=currentData;
  if ((currentData=theme.getThemeData()) == null)   throw new IllegalStateException(""String_Node_Str"" + theme.getName());
  setConfigurationTheme(theme);
  for (int i=0; i < Theme.FONT_COUNT; i++) {
    if (oldData.getFont(i) == null) {
      if (currentData.getFont(i) == null)       continue;
    }
 else     if (currentData.getFont(i) != null) {
      if (oldData.getFont(i).equals(currentData.getFont(i)))       continue;
    }
    triggerFontEvent(i,getCurrentFont(i));
  }
  for (int i=0; i < Theme.COLOR_COUNT; i++) {
    if (oldData.getColor(i) == null) {
      if (currentData.getColor(i) == null)       continue;
    }
 else     if (currentData.getColor(i) != null) {
      if (oldData.getColor(i).equals(currentData.getColor(i)))       continue;
    }
    triggerColorEvent(i,getCurrentColor(i));
  }
}","/** 
 * Changes the current theme. <p> This method will change the current theme and trigger all the proper events. </p>
 * @param theme theme to use as the current theme.
 */
public synchronized static void setCurrentTheme(Theme theme){
  ThemeData oldData;
  if (isCurrentTheme(theme)) {
    setConfigurationTheme(theme);
    return;
  }
  oldData=currentData;
  if ((currentData=theme.getThemeData()) == null)   throw new IllegalStateException(""String_Node_Str"" + theme.getName());
  if (currentType == USER_THEME)   saveUserTheme();
  setConfigurationTheme(theme);
  for (int i=0; i < Theme.FONT_COUNT; i++) {
    if (oldData.getFont(i) == null) {
      if (currentData.getFont(i) == null)       continue;
    }
 else     if (currentData.getFont(i) != null) {
      if (oldData.getFont(i).equals(currentData.getFont(i)))       continue;
    }
    triggerFontEvent(i,getCurrentFont(i));
  }
  for (int i=0; i < Theme.COLOR_COUNT; i++) {
    if (oldData.getColor(i) == null) {
      if (currentData.getColor(i) == null)       continue;
    }
 else     if (currentData.getColor(i) != null) {
      if (oldData.getColor(i).equals(currentData.getColor(i)))       continue;
    }
    triggerColorEvent(i,getCurrentColor(i));
  }
}",0.978369384359401
45244,"public void mousePressed(MouseEvent e){
  int modifiers=e.getModifiers();
  if (PlatformManager.isRightMouseButton(e)) {
    AbstractFile currentFolder=getCurrentFolder();
    new TablePopupMenu(FolderPanel.this.mainFrame,currentFolder,null,false,fileTable.getFileTableModel().getMarkedFiles()).show(scrollPane,e.getX(),e.getY());
  }
}","public void mousePressed(MouseEvent e){
  if (PlatformManager.isLeftMouseButton(e)) {
    fileTable.requestFocus();
  }
 else   if (PlatformManager.isRightMouseButton(e)) {
    AbstractFile currentFolder=getCurrentFolder();
    new TablePopupMenu(FolderPanel.this.mainFrame,currentFolder,null,false,fileTable.getFileTableModel().getMarkedFiles()).show(scrollPane,e.getX(),e.getY());
  }
}",0.1629834254143646
45245,"public FolderPanel(MainFrame mainFrame,AbstractFile initialFolder){
  super(new BorderLayout());
  if (com.mucommander.Debug.ON)   com.mucommander.Debug.trace(""String_Node_Str"" + initialFolder);
  this.mainFrame=mainFrame;
  setBorder(null);
  JPanel locationPanel=new JPanel(new GridBagLayout());
  GridBagConstraints c=new GridBagConstraints();
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridy=0;
  this.driveButton=new DrivePopupButton(this);
  c.weightx=0;
  c.gridx=0;
  locationPanel.add(driveButton,c);
  this.locationComboBox=new LocationComboBox(this);
  this.locationField=(ProgressTextField)locationComboBox.getTextField();
  c.weightx=1;
  c.gridx=1;
  c.insets=new Insets(0,4,0,0);
  locationPanel.add(locationComboBox,c);
  add(locationPanel,BorderLayout.NORTH);
  fileTable=new FileTable(mainFrame,this);
  try {
    setCurrentFolder(initialFolder,applyFilters(initialFolder.ls()),null);
  }
 catch (  Exception e) {
    AbstractFile rootFolders[]=RootFolders.getRootFolders();
    for (int i=0; i < rootFolders.length; i++) {
      try {
        setCurrentFolder(rootFolders[i],applyFilters(rootFolders[i].ls()),null);
        break;
      }
 catch (      IOException e2) {
        if (i == rootFolders.length - 1) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
  }
  folderChangeMonitor=new FolderChangeMonitor(this);
  scrollPane=new JScrollPane(fileTable,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  scrollPane.setBorder(BorderFactory.createLineBorder(ThemeManager.getCurrentColor(Theme.FILE_TABLE_BORDER),1));
  scrollPane.getViewport().setBackground(ThemeManager.getCurrentColor(Theme.FILE_BACKGROUND));
  scrollPane.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      int modifiers=e.getModifiers();
      if (PlatformManager.isRightMouseButton(e)) {
        AbstractFile currentFolder=getCurrentFolder();
        new TablePopupMenu(FolderPanel.this.mainFrame,currentFolder,null,false,fileTable.getFileTableModel().getMarkedFiles()).show(scrollPane,e.getX(),e.getY());
      }
    }
  }
);
  add(scrollPane,BorderLayout.CENTER);
  ConfigurationManager.addConfigurationListener(this);
  ThemeManager.addThemeListener(this);
  fileTable.addFocusListener(this);
  locationField.addFocusListener(this);
  this.fileDragSourceListener=new FileDragSourceListener(this);
  fileDragSourceListener.enableDrag(fileTable);
  FileDropTargetListener dropTargetListener=new FileDropTargetListener(this,false);
  fileTable.setDropTarget(new DropTarget(fileTable,dropTargetListener));
  scrollPane.setDropTarget(new DropTarget(scrollPane,dropTargetListener));
  dropTargetListener=new FileDropTargetListener(this,true);
  locationField.setDropTarget(new DropTarget(locationField,dropTargetListener));
  driveButton.setDropTarget(new DropTarget(driveButton,dropTargetListener));
}","public FolderPanel(MainFrame mainFrame,AbstractFile initialFolder){
  super(new BorderLayout());
  if (com.mucommander.Debug.ON)   com.mucommander.Debug.trace(""String_Node_Str"" + initialFolder);
  this.mainFrame=mainFrame;
  setBorder(null);
  JPanel locationPanel=new JPanel(new GridBagLayout());
  GridBagConstraints c=new GridBagConstraints();
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridy=0;
  this.driveButton=new DrivePopupButton(this);
  c.weightx=0;
  c.gridx=0;
  locationPanel.add(driveButton,c);
  this.locationComboBox=new LocationComboBox(this);
  this.locationField=(ProgressTextField)locationComboBox.getTextField();
  c.weightx=1;
  c.gridx=1;
  c.insets=new Insets(0,4,0,0);
  locationPanel.add(locationComboBox,c);
  add(locationPanel,BorderLayout.NORTH);
  fileTable=new FileTable(mainFrame,this);
  try {
    setCurrentFolder(initialFolder,applyFilters(initialFolder.ls()),null);
  }
 catch (  Exception e) {
    AbstractFile rootFolders[]=RootFolders.getRootFolders();
    for (int i=0; i < rootFolders.length; i++) {
      try {
        setCurrentFolder(rootFolders[i],applyFilters(rootFolders[i].ls()),null);
        break;
      }
 catch (      IOException e2) {
        if (i == rootFolders.length - 1) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
  }
  folderChangeMonitor=new FolderChangeMonitor(this);
  scrollPane=new JScrollPane(fileTable,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  scrollPane.setBorder(BorderFactory.createLineBorder(ThemeManager.getCurrentColor(Theme.FILE_TABLE_BORDER),1));
  scrollPane.getViewport().setBackground(ThemeManager.getCurrentColor(Theme.FILE_BACKGROUND));
  scrollPane.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      if (PlatformManager.isLeftMouseButton(e)) {
        fileTable.requestFocus();
      }
 else       if (PlatformManager.isRightMouseButton(e)) {
        AbstractFile currentFolder=getCurrentFolder();
        new TablePopupMenu(FolderPanel.this.mainFrame,currentFolder,null,false,fileTable.getFileTableModel().getMarkedFiles()).show(scrollPane,e.getX(),e.getY());
      }
    }
  }
);
  add(scrollPane,BorderLayout.CENTER);
  ConfigurationManager.addConfigurationListener(this);
  ThemeManager.addThemeListener(this);
  fileTable.addFocusListener(this);
  locationField.addFocusListener(this);
  this.fileDragSourceListener=new FileDragSourceListener(this);
  fileDragSourceListener.enableDrag(fileTable);
  FileDropTargetListener dropTargetListener=new FileDropTargetListener(this,false);
  fileTable.setDropTarget(new DropTarget(fileTable,dropTargetListener));
  scrollPane.setDropTarget(new DropTarget(scrollPane,dropTargetListener));
  dropTargetListener=new FileDropTargetListener(this,true);
  locationField.setDropTarget(new DropTarget(locationField,dropTargetListener));
  driveButton.setDropTarget(new DropTarget(driveButton,dropTargetListener));
}",0.9801980198019802
45246,"/** 
 * Creates and returns an AbstractFile using the provided entry and parent file. This method takes care of creating the proper AbstractArchiveFile instance if the entry is itself an archive.
 */
private AbstractFile createArchiveEntryFile(ArchiveEntry entry,AbstractFile parentFile) throws java.net.MalformedURLException {
  String separator=getSeparator();
  FileURL archiveURL=getURL();
  String entryURLString=archiveURL.getStringRep(false);
  if (!entryURLString.endsWith(separator))   entryURLString+=separator;
  entryURLString+=entry.getPath();
  AbstractFile entryFile=FileFactory.wrapArchive(new ArchiveEntryFile(this,entry,URLFactory.getFileURL(entryURLString,archiveURL,true)));
  entryFile.setParent(parentFile);
  return entryFile;
}","/** 
 * Creates and returns an AbstractFile using the provided entry and parent file. This method takes care of creating the proper AbstractArchiveFile instance if the entry is itself an archive.
 */
private AbstractFile createArchiveEntryFile(ArchiveEntry entry,AbstractFile parentFile) throws java.net.MalformedURLException {
  String separator=getSeparator();
  FileURL archiveURL=getURL();
  String entryURLString=archiveURL.getStringRep(false);
  if (!entryURLString.endsWith(separator))   entryURLString+=separator;
  String entryPath=entry.getPath();
  String parentSeparator=parentFile.getSeparator();
  if (!parentSeparator.equals(""String_Node_Str""))   entryPath=entryPath.replace(""String_Node_Str"",parentSeparator);
  entryURLString+=entryPath;
  AbstractFile entryFile=FileFactory.wrapArchive(new ArchiveEntryFile(this,entry,URLFactory.getFileURL(entryURLString,archiveURL,true)));
  entryFile.setParent(parentFile);
  return entryFile;
}",0.8764705882352941
45247,"/** 
 * Returns true if the login of the provided credentials (as returned by   {@link #getLogin()} equals to one inthis Credentials instance, false otherwise. Two Credentials instances with the same login but a different password will thus be equal. If null is passed, true will be returned if these Credentials are empty, as returned by  {@link #isEmpty()}.
 */
public boolean equals(Object o){
  if (o == null)   return isEmpty();
  if (!(o instanceof Credentials))   return false;
  Credentials credentials=(Credentials)o;
  return credentials.login.equals(this.login) && credentials.password.equals(this.password);
}","/** 
 * Returns true if the login of the provided credentials (as returned by   {@link #getLogin()} equals to one inthis Credentials instance, false otherwise. Two Credentials instances with the same login but a different password will thus be equal. If null is passed, true will be returned if these Credentials are empty, as returned by  {@link #isEmpty()}.
 */
public boolean equals(Object o){
  if (o == null)   return isEmpty();
  if (!(o instanceof Credentials))   return false;
  Credentials credentials=(Credentials)o;
  return credentials.login.equals(this.login);
}",0.9615384615384616
45248,"/** 
 * Pops up the menu and requests focus on the popup menu.
 */
public void popup(){
  rootFolders=RootFolders.getRootFolders();
  popupMenu=new JPopupMenu();
  popupMenu.addPopupMenuListener(this);
  menuItems=new Vector();
  int nbRoots=rootFolders.length;
  if (PlatformManager.isWindowsFamily()) {
    FileSystemView fileSystemView=FileSystemView.getFileSystemView();
    for (int i=0; i < nbRoots; i++) {
      Icon driveIcon=null;
      if (PlatformManager.JAVA_VERSION >= PlatformManager.JAVA_1_4)       driveIcon=fileSystemView.getSystemIcon(new java.io.File(rootFolders[i].getAbsolutePath()));
      addMenuItem(rootFolders[i].getName(),driveIcon);
    }
  }
 else {
    for (int i=0; i < nbRoots; i++)     addMenuItem(rootFolders[i].getName());
  }
  popupMenu.add(new JSeparator());
  this.bookmarksOffset=menuItems.size();
  this.bookmarks=BookmarkManager.getBookmarks();
  int nbBookmarks=bookmarks.size();
  if (nbBookmarks > 0) {
    for (int i=0; i < nbBookmarks; i++)     addMenuItem(((Bookmark)bookmarks.elementAt(i)).getName());
  }
 else {
    addMenuItem(Translator.get(""String_Node_Str"")).setEnabled(false);
  }
  popupMenu.add(new JSeparator());
  this.serverShortcutsOffset=menuItems.size();
  addMenuItem(""String_Node_Str"");
  addMenuItem(""String_Node_Str"");
  addMenuItem(""String_Node_Str"");
  addMenuItem(""String_Node_Str"");
  popupMenu.show(this,0,getHeight());
}","/** 
 * Pops up the menu and requests focus on the popup menu.
 */
public void popup(){
  rootFolders=RootFolders.getRootFolders();
  popupMenu=new JPopupMenu();
  popupMenu.addPopupMenuListener(this);
  menuItems=new Vector();
  int nbRoots=rootFolders.length;
  if (PlatformManager.isWindowsFamily()) {
    FileSystemView fileSystemView=FileSystemView.getFileSystemView();
    for (int i=0; i < nbRoots; i++) {
      Icon driveIcon=null;
      if (PlatformManager.JAVA_VERSION >= PlatformManager.JAVA_1_5)       driveIcon=fileSystemView.getSystemIcon(new java.io.File(rootFolders[i].getAbsolutePath()));
      addMenuItem(rootFolders[i].getName(),driveIcon);
    }
  }
 else {
    for (int i=0; i < nbRoots; i++)     addMenuItem(rootFolders[i].getName());
  }
  popupMenu.add(new JSeparator());
  this.bookmarksOffset=menuItems.size();
  this.bookmarks=BookmarkManager.getBookmarks();
  int nbBookmarks=bookmarks.size();
  if (nbBookmarks > 0) {
    for (int i=0; i < nbBookmarks; i++)     addMenuItem(((Bookmark)bookmarks.elementAt(i)).getName());
  }
 else {
    addMenuItem(Translator.get(""String_Node_Str"")).setEnabled(false);
  }
  popupMenu.add(new JSeparator());
  this.serverShortcutsOffset=menuItems.size();
  addMenuItem(""String_Node_Str"");
  addMenuItem(""String_Node_Str"");
  addMenuItem(""String_Node_Str"");
  addMenuItem(""String_Node_Str"");
  popupMenu.show(this,0,getHeight());
}",0.9992826398852224
45249,"public PsiFile resolve(){
  JavaPsiFacade javaFacade=JavaPsiFacade.getInstance(xav.getProject());
  if (page.startsWith(""String_Node_Str"")) {
    String pkg=page.substring(1,page.lastIndexOf('/')).replace('/','.');
    PsiPackage jpkg=javaFacade.findPackage(pkg);
    if (jpkg == null)     return null;
    for (    PsiDirectory dir : jpkg.getDirectories()) {
      PsiFile f=dir.findFile(page.substring(page.lastIndexOf('/') + 1));
      if (f != null)       return f;
    }
    return null;
  }
 else {
    PsiFile f=xav.getContainingFile();
    PsiDirectory p=f.getParent();
    if (p == null)     return null;
    PsiFile target=p.findFile(page);
    if (target != null)     return target;
    JavaDirectoryService jds=JavaDirectoryService.getInstance();
    PsiPackage pkg=jds.getPackage(p);
    if (pkg == null)     return null;
    Module m=ModuleUtil.findModuleForFile(f.getVirtualFile(),f.getProject());
    PsiClass c=javaFacade.findClass(pkg.getName(),GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(m));
    if (c == null)     return null;
    c=c.getSuperClass();
    for (; c != null; c=c.getSuperClass()) {
      pkg=javaFacade.findPackage(c.getQualifiedName());
      if (pkg != null) {
        for (        PsiDirectory dir : pkg.getDirectories()) {
          target=dir.findFile(page);
          if (target != null)           return f;
        }
      }
    }
    return null;
  }
}","public PsiFile resolve(){
  JavaPsiFacade javaFacade=JavaPsiFacade.getInstance(xav.getProject());
  if (page.startsWith(""String_Node_Str"")) {
    String pkg=page.substring(1,page.lastIndexOf('/')).replace('/','.');
    PsiPackage jpkg=javaFacade.findPackage(pkg);
    if (jpkg == null)     return null;
    for (    PsiDirectory dir : jpkg.getDirectories()) {
      PsiFile f=dir.findFile(page.substring(page.lastIndexOf('/') + 1));
      if (f != null)       return f;
    }
    return null;
  }
 else {
    PsiFile f=xav.getContainingFile();
    PsiDirectory p=f.getParent();
    if (p == null)     return null;
    PsiFile target=p.findFile(page);
    if (target != null)     return target;
    JavaDirectoryService jds=JavaDirectoryService.getInstance();
    PsiPackage pkg=jds.getPackage(p);
    if (pkg == null)     return null;
    Module m=ModuleUtil.findModuleForFile(f.getVirtualFile(),f.getProject());
    PsiClass c=javaFacade.findClass(pkg.getQualifiedName(),GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(m));
    if (c == null)     return null;
    c=c.getSuperClass();
    for (; c != null; c=c.getSuperClass()) {
      pkg=javaFacade.findPackage(c.getQualifiedName());
      if (pkg != null) {
        for (        PsiDirectory dir : pkg.getDirectories()) {
          target=dir.findFile(page);
          if (target != null)           return target;
        }
      }
    }
    return null;
  }
}",0.9943542695836274
45250,"/** 
 * Creates   {@link PsiReference} for &lt;st:include page=""..."" /> attribute.
 */
private PsiReference[] onAttributeValue(final XmlAttributeValue xav){
  PsiElement _xa=xav.getParent();
  if (!(_xa instanceof XmlAttribute))   return PsiReference.EMPTY_ARRAY;
  XmlAttribute a=(XmlAttribute)_xa;
  if (!a.getName().equals(""String_Node_Str""))   return PsiReference.EMPTY_ARRAY;
  XmlTag p=a.getParent();
  if (p == null)   return PsiReference.EMPTY_ARRAY;
  if (!p.getLocalName().equals(""String_Node_Str"") || !p.getNamespace().equals(""String_Node_Str""))   return PsiReference.EMPTY_ARRAY;
  if (p.getAttribute(""String_Node_Str"") == null && p.getAttribute(""String_Node_Str"") == null) {
    return array(new PsiReferenceBase<XmlAttributeValue>(xav,TextRange.from(1,xav.getTextLength() - 2)){
      private final String page=xav.getValue();
      public PsiFile resolve(){
        JavaPsiFacade javaFacade=JavaPsiFacade.getInstance(xav.getProject());
        if (page.startsWith(""String_Node_Str"")) {
          String pkg=page.substring(1,page.lastIndexOf('/')).replace('/','.');
          PsiPackage jpkg=javaFacade.findPackage(pkg);
          if (jpkg == null)           return null;
          for (          PsiDirectory dir : jpkg.getDirectories()) {
            PsiFile f=dir.findFile(page.substring(page.lastIndexOf('/') + 1));
            if (f != null)             return f;
          }
          return null;
        }
 else {
          PsiFile f=xav.getContainingFile();
          PsiDirectory p=f.getParent();
          if (p == null)           return null;
          PsiFile target=p.findFile(page);
          if (target != null)           return target;
          JavaDirectoryService jds=JavaDirectoryService.getInstance();
          PsiPackage pkg=jds.getPackage(p);
          if (pkg == null)           return null;
          Module m=ModuleUtil.findModuleForFile(f.getVirtualFile(),f.getProject());
          PsiClass c=javaFacade.findClass(pkg.getName(),GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(m));
          if (c == null)           return null;
          c=c.getSuperClass();
          for (; c != null; c=c.getSuperClass()) {
            pkg=javaFacade.findPackage(c.getQualifiedName());
            if (pkg != null) {
              for (              PsiDirectory dir : pkg.getDirectories()) {
                target=dir.findFile(page);
                if (target != null)                 return f;
              }
            }
          }
          return null;
        }
      }
      public Object[] getVariants(){
        return ArrayUtils.EMPTY_OBJECT_ARRAY;
      }
    }
);
  }
  return PsiReference.EMPTY_ARRAY;
}","/** 
 * Creates   {@link PsiReference} for &lt;st:include page=""..."" /> attribute.
 */
private PsiReference[] onAttributeValue(final XmlAttributeValue xav){
  PsiElement _xa=xav.getParent();
  if (!(_xa instanceof XmlAttribute))   return PsiReference.EMPTY_ARRAY;
  XmlAttribute a=(XmlAttribute)_xa;
  if (!a.getName().equals(""String_Node_Str""))   return PsiReference.EMPTY_ARRAY;
  XmlTag p=a.getParent();
  if (p == null)   return PsiReference.EMPTY_ARRAY;
  if (!p.getLocalName().equals(""String_Node_Str"") || !p.getNamespace().equals(""String_Node_Str""))   return PsiReference.EMPTY_ARRAY;
  if (p.getAttribute(""String_Node_Str"") == null && p.getAttribute(""String_Node_Str"") == null) {
    return array(new PsiReferenceBase<XmlAttributeValue>(xav,TextRange.from(1,xav.getTextLength() - 2)){
      private final String page=xav.getValue();
      public PsiFile resolve(){
        JavaPsiFacade javaFacade=JavaPsiFacade.getInstance(xav.getProject());
        if (page.startsWith(""String_Node_Str"")) {
          String pkg=page.substring(1,page.lastIndexOf('/')).replace('/','.');
          PsiPackage jpkg=javaFacade.findPackage(pkg);
          if (jpkg == null)           return null;
          for (          PsiDirectory dir : jpkg.getDirectories()) {
            PsiFile f=dir.findFile(page.substring(page.lastIndexOf('/') + 1));
            if (f != null)             return f;
          }
          return null;
        }
 else {
          PsiFile f=xav.getContainingFile();
          PsiDirectory p=f.getParent();
          if (p == null)           return null;
          PsiFile target=p.findFile(page);
          if (target != null)           return target;
          JavaDirectoryService jds=JavaDirectoryService.getInstance();
          PsiPackage pkg=jds.getPackage(p);
          if (pkg == null)           return null;
          Module m=ModuleUtil.findModuleForFile(f.getVirtualFile(),f.getProject());
          PsiClass c=javaFacade.findClass(pkg.getQualifiedName(),GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(m));
          if (c == null)           return null;
          c=c.getSuperClass();
          for (; c != null; c=c.getSuperClass()) {
            pkg=javaFacade.findPackage(c.getQualifiedName());
            if (pkg != null) {
              for (              PsiDirectory dir : pkg.getDirectories()) {
                target=dir.findFile(page);
                if (target != null)                 return target;
              }
            }
          }
          return null;
        }
      }
      public Object[] getVariants(){
        return ArrayUtils.EMPTY_OBJECT_ARRAY;
      }
    }
);
  }
  return PsiReference.EMPTY_ARRAY;
}",0.997002622705133
45251,"@Override public void visitXmlText(XmlText text){
  if (!started[0]) {
    started[0]=true;
    registrar.startInjecting(language);
  }
  int len=text.getTextLength();
  if (len == 0)   return;
  registrar.addPlace(null,null,(PsiLanguageInjectionHost)text,TextRange.from(0,len));
}","@Override public void visitXmlText(XmlText text){
  int len=text.getTextLength();
  if (len == 0)   return;
  if (!started[0]) {
    started[0]=true;
    registrar.startInjecting(language);
  }
  registrar.addPlace(null,null,(PsiLanguageInjectionHost)text,TextRange.from(0,len));
}",0.5480427046263345
45252,"public void getLanguagesToInject(@NotNull final MultiHostRegistrar registrar,@NotNull PsiElement context){
  if (!context.getContainingFile().getName().endsWith(""String_Node_Str""))   return;
  if (context instanceof XmlAttributeValue) {
    final XmlAttributeValue value=(XmlAttributeValue)context;
    XmlAttribute a=(XmlAttribute)value.getParent();
    if (!a.getName().equals(""String_Node_Str""))     return;
    Language language=findLanguage(""String_Node_Str"");
    if (language == null)     return;
    registrar.startInjecting(language);
    registrar.addPlace(""String_Node_Str"",""String_Node_Str"",(PsiLanguageInjectionHost)value,TextRange.from(1,value.getTextLength() - 2));
    registrar.doneInjecting();
  }
  if (context instanceof XmlTag) {
    final boolean[] started=new boolean[1];
    XmlTag t=(XmlTag)context;
    if (!t.getName().equals(""String_Node_Str""))     return;
    final Language language=findLanguage(""String_Node_Str"");
    if (language == null)     return;
    t.acceptChildren(new XmlElementVisitor(){
      @Override public void visitXmlText(      XmlText text){
        if (!started[0]) {
          started[0]=true;
          registrar.startInjecting(language);
        }
        int len=text.getTextLength();
        if (len == 0)         return;
        registrar.addPlace(null,null,(PsiLanguageInjectionHost)text,TextRange.from(0,len));
      }
    }
);
    if (started[0])     registrar.doneInjecting();
  }
}","public void getLanguagesToInject(@NotNull final MultiHostRegistrar registrar,@NotNull PsiElement context){
  if (!context.getContainingFile().getName().endsWith(""String_Node_Str""))   return;
  if (context instanceof XmlAttributeValue) {
    final XmlAttributeValue value=(XmlAttributeValue)context;
    XmlAttribute a=(XmlAttribute)value.getParent();
    if (!a.getName().equals(""String_Node_Str""))     return;
    Language language=findLanguage(""String_Node_Str"");
    if (language == null)     return;
    registrar.startInjecting(language);
    registrar.addPlace(""String_Node_Str"",""String_Node_Str"",(PsiLanguageInjectionHost)value,TextRange.from(1,value.getTextLength() - 2));
    registrar.doneInjecting();
  }
  if (context instanceof XmlTag) {
    final boolean[] started=new boolean[1];
    XmlTag t=(XmlTag)context;
    if (!t.getName().equals(""String_Node_Str""))     return;
    final Language language=findLanguage(""String_Node_Str"");
    if (language == null)     return;
    t.acceptChildren(new XmlElementVisitor(){
      @Override public void visitXmlText(      XmlText text){
        int len=text.getTextLength();
        if (len == 0)         return;
        if (!started[0]) {
          started[0]=true;
          registrar.startInjecting(language);
        }
        registrar.addPlace(null,null,(PsiLanguageInjectionHost)text,TextRange.from(0,len));
      }
    }
);
    if (started[0])     registrar.doneInjecting();
  }
}",0.9473319473319474
45253,"public JellyCompletionContributer(){
  extend(CompletionType.BASIC,XML_ELEMENT_NAME_PATTERN,new CompletionProvider<CompletionParameters>(false,true){
    protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      XmlElement name=(XmlElement)parameters.getPosition();
      if (!name.getContainingFile().getName().endsWith(""String_Node_Str""))       return;
      XmlTag tag=(XmlTag)name.getParent();
      Module module=ModuleUtil.findModuleForPsiElement(tag);
      String[] uris=tag.knownNamespaces();
      for (      String uri : uris) {
        String prefix=tag.getPrefixByNamespace(uri);
        if (prefix != null && prefix.length() > 0)         prefix+=':';
        XmlNSDescriptorImpl d=XmlNSDescriptorImpl.get(uri,module);
        if (d != null) {
          for (          XmlElementDescriptor e : d.getRootElementsDescriptors(null)) {
            result.addElement(LookupItem.fromString(prefix + e.getName()));
          }
        }
      }
    }
  }
);
}","public JellyCompletionContributer(){
  extend(CompletionType.BASIC,XML_ELEMENT_NAME_PATTERN,new CompletionProvider<CompletionParameters>(true,true){
    protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      XmlElement name=(XmlElement)parameters.getPosition();
      if (!name.getContainingFile().getName().endsWith(""String_Node_Str""))       return;
      XmlTag tag=(XmlTag)name.getParent();
      Module module=ModuleUtil.findModuleForPsiElement(tag);
      String[] uris=tag.knownNamespaces();
      for (      String uri : uris) {
        String prefix=tag.getPrefixByNamespace(uri);
        if (prefix != null && prefix.length() > 0)         prefix+=':';
        XmlNSDescriptorImpl d=XmlNSDescriptorImpl.get(uri,module);
        if (d != null) {
          for (          XmlElementDescriptor e : d.getRootElementsDescriptors(null)) {
            result.addElement(LookupItem.fromString(prefix + e.getName()));
          }
        }
      }
    }
  }
);
}",0.9966965549787636
45254,"@NotNull public PsiElementVisitor buildVisitor(@NotNull final ProblemsHolder holder,final boolean isOnTheFly){
  return new PsiElementVisitor(){
    public void visitXmlText(    XmlText text){
      addDescriptors(checkXmlText(text,holder.getManager(),isOnTheFly));
    }
    public void visitXmlAttributeValue(    XmlAttributeValue value){
      addDescriptors(checkXmlAttributeValue(value,holder.getManager(),isOnTheFly));
    }
    public void visitReferenceExpression(    PsiReferenceExpression expression){
    }
    private void addDescriptors(    final ProblemDescriptor[] descriptors){
      for (      ProblemDescriptor descriptor : descriptors) {
        holder.registerProblem(descriptor);
      }
    }
  }
;
}","@NotNull public PsiElementVisitor buildVisitor(@NotNull final ProblemsHolder holder,final boolean isOnTheFly){
  return new XmlElementVisitor(){
    @Override public void visitXmlText(    XmlText text){
      addDescriptors(checkXmlText(text,holder.getManager(),isOnTheFly));
    }
    @Override public void visitXmlAttributeValue(    XmlAttributeValue value){
      addDescriptors(checkXmlAttributeValue(value,holder.getManager(),isOnTheFly));
    }
    private void addDescriptors(    final ProblemDescriptor[] descriptors){
      for (      ProblemDescriptor descriptor : descriptors) {
        holder.registerProblem(descriptor);
      }
    }
  }
;
}",0.9179375453885258
45255,"public void visitXmlAttributeValue(XmlAttributeValue value){
  addDescriptors(checkXmlAttributeValue(value,holder.getManager(),isOnTheFly));
}","@Override public void visitXmlAttributeValue(XmlAttributeValue value){
  addDescriptors(checkXmlAttributeValue(value,holder.getManager(),isOnTheFly));
}",0.9659863945578232
45256,"public void visitXmlText(XmlText text){
  addDescriptors(checkXmlText(text,holder.getManager(),isOnTheFly));
}","@Override public void visitXmlText(XmlText text){
  addDescriptors(checkXmlText(text,holder.getManager(),isOnTheFly));
}",0.9565217391304348
45257,"@Override public void visitXmlText(XmlText text){
  int len=text.getTextLength();
  if (len == 0)   return;
  registrar.addPlace(null,null,(PsiLanguageInjectionHost)text,TextRange.from(0,len));
}","@Override public void visitXmlText(XmlText text){
  if (!started[0]) {
    started[0]=true;
    registrar.startInjecting(language);
  }
  int len=text.getTextLength();
  if (len == 0)   return;
  registrar.addPlace(null,null,(PsiLanguageInjectionHost)text,TextRange.from(0,len));
}",0.819327731092437
45258,"public void getLanguagesToInject(@NotNull final MultiHostRegistrar registrar,@NotNull PsiElement context){
  if (!context.getContainingFile().getName().endsWith(""String_Node_Str""))   return;
  if (context instanceof XmlAttributeValue) {
    final XmlAttributeValue value=(XmlAttributeValue)context;
    XmlAttribute a=(XmlAttribute)value.getParent();
    if (!a.getName().equals(""String_Node_Str""))     return;
    Language language=findLanguage(""String_Node_Str"");
    if (language == null)     return;
    registrar.startInjecting(language);
    registrar.addPlace(""String_Node_Str"",""String_Node_Str"",(PsiLanguageInjectionHost)value,TextRange.from(1,value.getTextLength() - 2));
    registrar.doneInjecting();
  }
  if (context instanceof XmlTag) {
    XmlTag t=(XmlTag)context;
    if (!t.getName().equals(""String_Node_Str""))     return;
    Language language=findLanguage(""String_Node_Str"");
    if (language == null)     return;
    registrar.startInjecting(language);
    t.acceptChildren(new XmlElementVisitor(){
      @Override public void visitXmlText(      XmlText text){
        int len=text.getTextLength();
        if (len == 0)         return;
        registrar.addPlace(null,null,(PsiLanguageInjectionHost)text,TextRange.from(0,len));
      }
    }
);
    registrar.doneInjecting();
  }
}","public void getLanguagesToInject(@NotNull final MultiHostRegistrar registrar,@NotNull PsiElement context){
  if (!context.getContainingFile().getName().endsWith(""String_Node_Str""))   return;
  if (context instanceof XmlAttributeValue) {
    final XmlAttributeValue value=(XmlAttributeValue)context;
    XmlAttribute a=(XmlAttribute)value.getParent();
    if (!a.getName().equals(""String_Node_Str""))     return;
    Language language=findLanguage(""String_Node_Str"");
    if (language == null)     return;
    registrar.startInjecting(language);
    registrar.addPlace(""String_Node_Str"",""String_Node_Str"",(PsiLanguageInjectionHost)value,TextRange.from(1,value.getTextLength() - 2));
    registrar.doneInjecting();
  }
  if (context instanceof XmlTag) {
    final boolean[] started=new boolean[1];
    XmlTag t=(XmlTag)context;
    if (!t.getName().equals(""String_Node_Str""))     return;
    final Language language=findLanguage(""String_Node_Str"");
    if (language == null)     return;
    t.acceptChildren(new XmlElementVisitor(){
      @Override public void visitXmlText(      XmlText text){
        if (!started[0]) {
          started[0]=true;
          registrar.startInjecting(language);
        }
        int len=text.getTextLength();
        if (len == 0)         return;
        registrar.addPlace(null,null,(PsiLanguageInjectionHost)text,TextRange.from(0,len));
      }
    }
);
    if (started[0])     registrar.doneInjecting();
  }
}",0.9198834668608884
45259,"public boolean isRequired(){
  return def.isRequired();
}","/** 
 * This only seems to be used when a new tag is inserted, to automatically complete all required attributes. But not having a required attribute missing in XML doesn't automatically flag an error annotation.
 */
public boolean isRequired(){
  return def.isRequired();
}",0.3444108761329305
45260,"public int getContentType(){
  return CONTENT_TYPE_MIXED;
}","public int getContentType(){
  return CONTENT_TYPE_ANY;
}",0.9310344827586208
45261,"public XmlElementDescriptor getDescriptor(XmlTag xmlTag){
  if (!xmlTag.getContainingFile().getName().endsWith(""String_Node_Str""))   return null;
  String nsUri=xmlTag.getNamespace();
  if (nsUri.length() == 0)   return null;
  Module m=ModuleUtil.findModuleForPsiElement(xmlTag);
  if (m == null)   return null;
  JavaPsiFacade javaPsi=JavaPsiFacade.getInstance(xmlTag.getProject());
  String pkgName=nsUri.substring(1).replace('/','.');
  PsiPackage pkg=javaPsi.findPackage(pkgName);
  if (pkg == null)   return null;
  PsiDirectory[] dirs=pkg.getDirectories(GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(m,false));
  for (  PsiDirectory dir : dirs) {
    if (dir.findFile(""String_Node_Str"") != null) {
      return new XmlNSDescriptorImpl(nsUri,dir).getElementDescriptor(xmlTag);
    }
  }
  return null;
}","public XmlElementDescriptor getDescriptor(XmlTag tag){
  XmlNSDescriptorImpl ns=XmlNSDescriptorImpl.get(tag);
  if (ns != null)   return ns.getElementDescriptor(tag);
  return null;
}",0.2450199203187251
45262,"/** 
 * Calculate the text range withtin   {@link XmlTag} that representsthe tag name.
 */
private static TextRange calcTagNameRange(XmlTag t){
  TextRange tr=t.getFirstChild().getNextSibling().getTextRange();
  return tr.shiftRight(t.getTextRange().getStartOffset());
}","/** 
 * Calculate the text range withtin   {@link XmlTag} that representsthe tag name.
 */
private static TextRange calcTagNameRange(XmlTag t){
  TextRange tr=t.getFirstChild().getNextSibling().getTextRange();
  return tr.shiftRight(-t.getTextRange().getStartOffset());
}",0.99815157116451
45263,"public I18nRefactorAction(){
  super(new EditorActionHandler(){
    public void execute(    final Editor editor,    DataContext dataContext){
      if (editor == null)       return;
      SelectionModel selectionModel=editor.getSelectionModel();
      final Project project=editor.getProject();
      if (project == null)       return;
      PsiDocumentManager psiManager=PsiDocumentManager.getInstance(project);
      PsiFile psiFile=psiManager.getPsiFile(editor.getDocument());
      if (!(psiFile instanceof PsiJavaFile)) {
        return;
      }
      PsiJavaFile javaFile=(PsiJavaFile)psiFile;
      PsiFile props=findMessagesDotProperties(project,javaFile);
      if (props == null) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      if (!(props instanceof PropertiesFile)) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final PropertiesFile propsFile=(PropertiesFile)props;
      PsiElement e=findSelectedPsiElement(selectionModel,javaFile);
      while (e != null) {
        if (e instanceof PsiExpression)         break;
        e=e.getParent();
      }
      if (e == null) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final PsiExpression exp=(PsiExpression)e;
      final PsiClassType stringType=PsiType.getJavaLangString(PsiManager.getInstance(project),e.getResolveScope());
      if (exp.getType() == null || !exp.getType().equals(stringType)) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final String key=getResourceName(javaFile);
      if (key == null)       return;
      final StringBuilder propertyValue=new StringBuilder();
      final StringBuilder expression=new StringBuilder();
      new Runnable(){
        int numArgs=0;
        public void run(){
          process(exp);
        }
        private void process(        PsiElement exp){
          if (exp instanceof PsiLiteralExpression) {
            PsiLiteralExpression lit=(PsiLiteralExpression)exp;
            if (lit.getType().equals(stringType)) {
              escapeAndAppend(lit.getValue().toString());
              return;
            }
          }
          if (exp instanceof PsiBinaryExpression) {
            PsiBinaryExpression binExp=(PsiBinaryExpression)exp;
            if (binExp.getOperationTokenType() == JavaTokenType.PLUS) {
              process(binExp.getLOperand());
              process(binExp.getROperand());
              return;
            }
          }
          propertyValue.append('{').append(numArgs++).append('}');
          if (expression.length() > 0)           expression.append(',');
          expression.append(exp.getText());
        }
        /** 
 * Takes the literal string value and appends that to <tt>propertyValue</tt> with proper escaping.
 */
        private void escapeAndAppend(        String value){
          for (          char ch : value.toCharArray()) {
switch (ch) {
case '\'':
              propertyValue.append(""String_Node_Str"");
            break;
case '{':
case '}':
          propertyValue.append('\'').append(ch).append('\'');
        break;
case ' ':
      if (propertyValue.length() == 0)       propertyValue.append('\\');
default :
    propertyValue.append(ch);
}
}
}
}
.run();
ApplicationManager.getApplication().runWriteAction(new Runnable(){
public void run(){
try {
propsFile.addPropertyAfter(PropertiesElementFactory.createProperty(project,key,propertyValue.toString()),findAnchor(propsFile,key));
}
 catch (IncorrectOperationException x) {
Messages.showErrorDialog(x.getMessage(),""String_Node_Str"");
return;
}
expression.insert(0,""String_Node_Str"" + toJavaIdentifier(key) + ""String_Node_Str"");
expression.append(""String_Node_Str"");
TextRange tr=exp.getTextRange();
editor.getDocument().deleteString(tr.getStartOffset(),tr.getEndOffset());
EditorModificationUtil.insertStringAtCaret(editor,expression.toString());
}
private Property findAnchor(PropertiesFile propsFile,String key){
List<Property> list=propsFile.getProperties();
for (int i=0; i < list.size() - 1; i++) {
Property prev=list.get(i);
Property next=list.get(i + 1);
if (prev.getKey().compareTo(key) < 0 && key.compareTo(next.getKey()) < 0) return prev;
}
if (list.isEmpty()) return null;
return list.get(list.size() - 1);
}
}
);
}
private String getResourceName(PsiJavaFile javaFile){
String key=Messages.showInputDialog(""String_Node_Str"",""String_Node_Str"",null);
if (key == null || key.length() == 0) return null;
return getMainClassName(javaFile.getName()) + '.' + key;
}
private String getMainClassName(String name){
if (name.endsWith(""String_Node_Str"")) return name.substring(0,name.length() - 5);
return name;
}
/** 
 * Locates <tt>Messages.properties</tt> in the same package
 */
private PsiFile findMessagesDotProperties(Project project,PsiJavaFile javaFile){
PsiPackage pkg=PsiManager.getInstance(project).findPackage(javaFile.getPackageName());
for (PsiDirectory dir : pkg.getDirectories()) {
PsiFile props=dir.findFile(""String_Node_Str"");
if (props != null) return props;
}
return null;
}
/** 
 * Finds the smallest   {@link PsiElement} that encompasses the current selection.
 */
@Nullable private PsiElement findSelectedPsiElement(SelectionModel selectionModel,PsiJavaFile javaFile){
PsiElement e=javaFile.findElementAt(selectionModel.getSelectionStart());
if (e == null) return null;
while (true) {
PsiElement p=e.getParent();
TextRange tr=p.getTextRange();
if (selectionModel.getSelectionEnd() <= tr.getEndOffset()) return e;
e=p;
}
}
/** 
 * Copied from the localizer code. Converts a property name to a method name.
 */
protected String toJavaIdentifier(String key){
return key.replace('.','_');
}
}
);
}","public I18nRefactorAction(){
  super(new EditorActionHandler(){
    public void execute(    final Editor editor,    DataContext dataContext){
      if (editor == null)       return;
      SelectionModel selectionModel=editor.getSelectionModel();
      final Project project=editor.getProject();
      if (project == null)       return;
      PsiDocumentManager psiManager=PsiDocumentManager.getInstance(project);
      PsiFile psiFile=psiManager.getPsiFile(editor.getDocument());
      if (!(psiFile instanceof PsiJavaFile)) {
        return;
      }
      PsiJavaFile javaFile=(PsiJavaFile)psiFile;
      PsiFile props=findMessagesDotProperties(project,javaFile);
      if (props == null) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      if (!(props instanceof PropertiesFile)) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final PropertiesFile propsFile=(PropertiesFile)props;
      PsiElement e=findSelectedPsiElement(selectionModel,javaFile);
      while (e != null) {
        if (e instanceof PsiExpression)         break;
        e=e.getParent();
      }
      if (e == null) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final PsiExpression exp=(PsiExpression)e;
      final PsiClassType stringType=PsiType.getJavaLangString(PsiManager.getInstance(project),e.getResolveScope());
      if (exp.getType() == null || !exp.getType().equals(stringType)) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final String key=getResourceName(javaFile);
      if (key == null)       return;
      final StringBuilder propertyValue=new StringBuilder();
      final StringBuilder expression=new StringBuilder();
      new Runnable(){
        int numArgs=0;
        public void run(){
          process(exp);
        }
        private void process(        PsiElement exp){
          if (exp instanceof PsiLiteralExpression) {
            PsiLiteralExpression lit=(PsiLiteralExpression)exp;
            if (lit.getType().equals(stringType)) {
              escapeAndAppend(lit.getValue().toString());
              return;
            }
          }
          if (exp instanceof PsiBinaryExpression) {
            PsiBinaryExpression binExp=(PsiBinaryExpression)exp;
            if (binExp.getOperationTokenType() == JavaTokenType.PLUS) {
              process(binExp.getLOperand());
              process(binExp.getROperand());
              return;
            }
          }
          propertyValue.append('{').append(numArgs++).append('}');
          if (expression.length() > 0)           expression.append(',');
          expression.append(exp.getText());
        }
        /** 
 * Takes the literal string value and appends that to <tt>propertyValue</tt> with proper escaping.
 */
        private void escapeAndAppend(        String value){
          for (          char ch : value.toCharArray()) {
switch (ch) {
case '\'':
              propertyValue.append(""String_Node_Str"");
            break;
case '{':
case '}':
          propertyValue.append('\'').append(ch).append('\'');
        break;
case ' ':
      if (propertyValue.length() == 0)       propertyValue.append('\\');
default :
    propertyValue.append(ch);
}
}
}
}
.run();
ApplicationManager.getApplication().runWriteAction(new Runnable(){
public void run(){
try {
propsFile.addPropertyAfter(PropertiesElementFactory.createProperty(project,key,propertyValue.toString()),findAnchor(propsFile,key));
}
 catch (IncorrectOperationException x) {
Messages.showErrorDialog(x.getMessage(),""String_Node_Str"");
return;
}
expression.insert(0,""String_Node_Str"" + toJavaIdentifier(key) + ""String_Node_Str"");
expression.append(""String_Node_Str"");
TextRange tr=exp.getTextRange();
editor.getDocument().deleteString(tr.getStartOffset(),tr.getEndOffset());
EditorModificationUtil.insertStringAtCaret(editor,expression.toString());
}
private Property findAnchor(PropertiesFile propsFile,String key){
List<Property> list=propsFile.getProperties();
for (int i=0; i < list.size() - 1; i++) {
Property prev=list.get(i);
Property next=list.get(i + 1);
if (prev.getKey().compareTo(key) < 0 && key.compareTo(next.getKey()) < 0) return prev;
}
if (list.isEmpty()) return null;
return list.get(list.size() - 1);
}
}
);
}
private String getResourceName(PsiJavaFile javaFile){
String key=Messages.showInputDialog(""String_Node_Str"",""String_Node_Str"",null);
if (key == null || key.length() == 0) return null;
return getMainClassName(javaFile.getName()) + '.' + key;
}
private String getMainClassName(String name){
if (name.endsWith(""String_Node_Str"")) return name.substring(0,name.length() - 5);
return name;
}
/** 
 * Locates <tt>Messages.properties</tt> in the same package
 */
private PsiFile findMessagesDotProperties(Project project,PsiJavaFile javaFile){
PsiPackage pkg=PsiManager.getInstance(project).findPackage(javaFile.getPackageName());
for (PsiDirectory dir : pkg.getDirectories()) {
PsiFile props=dir.findFile(""String_Node_Str"");
if (props != null) return props;
}
return null;
}
/** 
 * Finds the smallest   {@link PsiElement} that encompasses the current selection.
 */
@Nullable private PsiElement findSelectedPsiElement(SelectionModel selectionModel,PsiJavaFile javaFile){
PsiElement e=javaFile.findElementAt(selectionModel.getSelectionStart());
if (e == null) return null;
while (true) {
TextRange tr=e.getTextRange();
if (selectionModel.getSelectionEnd() <= tr.getEndOffset()) return e;
e=e.getParent();
}
}
/** 
 * Copied from the localizer code. Converts a property name to a method name.
 */
protected String toJavaIdentifier(String key){
return key.replace('.','_');
}
}
);
}",0.9942648592283628
45264,"/** 
 * Finds the smallest   {@link PsiElement} that encompasses the current selection.
 */
@Nullable private PsiElement findSelectedPsiElement(SelectionModel selectionModel,PsiJavaFile javaFile){
  PsiElement e=javaFile.findElementAt(selectionModel.getSelectionStart());
  if (e == null)   return null;
  while (true) {
    PsiElement p=e.getParent();
    TextRange tr=p.getTextRange();
    if (selectionModel.getSelectionEnd() <= tr.getEndOffset())     return e;
    e=p;
  }
}","/** 
 * Finds the smallest   {@link PsiElement} that encompasses the current selection.
 */
@Nullable private PsiElement findSelectedPsiElement(SelectionModel selectionModel,PsiJavaFile javaFile){
  PsiElement e=javaFile.findElementAt(selectionModel.getSelectionStart());
  if (e == null)   return null;
  while (true) {
    TextRange tr=e.getTextRange();
    if (selectionModel.getSelectionEnd() <= tr.getEndOffset())     return e;
    e=e.getParent();
  }
}",0.7377398720682303
45265,"public PsiElement resolve(){
  String localName=myElement.getLocalName();
  String nsUri=myElement.getNamespace();
  Module m=ModuleUtil.findModuleForPsiElement(myElement);
  if (m != null) {
    PsiManager psiManager=PsiManager.getInstance(myElement.getProject());
    String pkgName=nsUri.substring(1).replace('/','.');
    PsiPackage pkg=psiManager.findPackage(pkgName);
    PsiDirectory[] dirs=pkg.getDirectories(GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(m,false));
    for (    PsiDirectory dir : dirs) {
      PsiFile tagFile=dir.findFile(localName + ""String_Node_Str"");
      if (tagFile != null)       return tagFile;
    }
    VirtualFile module=m.getModuleFile().getParent();
    VirtualFile child=module.findChild(localName + ""String_Node_Str"");
    if (child != null)     return psiManager.findFile(child);
  }
  return null;
}","public PsiElement resolve(){
  String localName=myElement.getLocalName();
  String nsUri=myElement.getNamespace();
  if (nsUri.length() == 0)   return null;
  Module m=ModuleUtil.findModuleForPsiElement(myElement);
  if (m == null)   return null;
  PsiManager psiManager=PsiManager.getInstance(myElement.getProject());
  String pkgName=nsUri.substring(1).replace('/','.');
  PsiPackage pkg=psiManager.findPackage(pkgName);
  if (pkg == null)   return null;
  PsiDirectory[] dirs=pkg.getDirectories(GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(m,false));
  for (  PsiDirectory dir : dirs) {
    PsiFile tagFile=dir.findFile(localName + ""String_Node_Str"");
    if (tagFile != null)     return tagFile;
  }
  VirtualFile module=m.getModuleFile().getParent();
  VirtualFile child=module.findChild(localName + ""String_Node_Str"");
  if (child != null)   return psiManager.findFile(child);
  return null;
}",0.9009620826259196
45266,"public I18nRefactorAction(){
  super(new EditorActionHandler(){
    public void execute(    final Editor editor,    DataContext dataContext){
      if (editor == null)       return;
      SelectionModel selectionModel=editor.getSelectionModel();
      final Project project=editor.getProject();
      if (project == null)       return;
      PsiDocumentManager psiManager=PsiDocumentManager.getInstance(project);
      PsiFile psiFile=psiManager.getPsiFile(editor.getDocument());
      if (!(psiFile instanceof PsiJavaFile)) {
        return;
      }
      PsiJavaFile javaFile=(PsiJavaFile)psiFile;
      PsiFile props=findMessagesDotProperties(project,javaFile);
      if (props == null) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      if (!(props instanceof PropertiesFile)) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final PropertiesFile propsFile=(PropertiesFile)props;
      PsiElement e=findSelectedPsiElement(selectionModel,javaFile);
      while (e != null) {
        if (e instanceof PsiExpression)         break;
        e=e.getParent();
      }
      if (e == null) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final PsiExpression exp=(PsiExpression)e;
      final PsiClassType stringType=PsiType.getJavaLangString(PsiManager.getInstance(project),e.getResolveScope());
      if (exp.getType() == null || !exp.getType().equals(stringType)) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final String key=getResourceName(javaFile);
      if (key == null)       return;
      final StringBuilder propertyValue=new StringBuilder();
      final StringBuilder expression=new StringBuilder();
      new Runnable(){
        int numArgs=0;
        public void run(){
          process(exp);
        }
        private void process(        PsiElement exp){
          if (exp instanceof PsiLiteralExpression) {
            PsiLiteralExpression lit=(PsiLiteralExpression)exp;
            if (lit.getType().equals(stringType)) {
              escapeAndAppend(lit.getValue().toString());
              return;
            }
          }
          if (exp instanceof PsiBinaryExpression) {
            PsiBinaryExpression binExp=(PsiBinaryExpression)exp;
            if (binExp.getOperationTokenType() == JavaTokenType.PLUS) {
              process(binExp.getLOperand());
              process(binExp.getROperand());
              return;
            }
          }
          propertyValue.append('{').append(numArgs++).append('}');
          if (expression.length() > 0)           expression.append(',');
          expression.append(exp.getText());
        }
        /** 
 * Takes the literal string value and appends that to <tt>propertyValue</tt> with proper escaping.
 */
        private void escapeAndAppend(        String value){
          for (          char ch : value.toCharArray()) {
switch (ch) {
case '\'':
              propertyValue.append(""String_Node_Str"");
            break;
case '{':
case '}':
          propertyValue.append('\'').append(ch).append('\'');
        break;
default :
      propertyValue.append(ch);
  }
}
}
}
.run();
ApplicationManager.getApplication().runWriteAction(new Runnable(){
public void run(){
try {
  propsFile.addPropertyAfter(PropertiesElementFactory.createProperty(project,key,propertyValue.toString()),findAnchor(propsFile,key));
}
 catch (IncorrectOperationException x) {
  Messages.showErrorDialog(x.getMessage(),""String_Node_Str"");
  return;
}
expression.insert(0,""String_Node_Str"" + toJavaIdentifier(key) + ""String_Node_Str"");
expression.append(""String_Node_Str"");
TextRange tr=exp.getTextRange();
editor.getDocument().deleteString(tr.getStartOffset(),tr.getEndOffset());
EditorModificationUtil.insertStringAtCaret(editor,expression.toString());
}
private Property findAnchor(PropertiesFile propsFile,String key){
List<Property> list=propsFile.getProperties();
for (int i=0; i < list.size() - 1; i++) {
  Property prev=list.get(i);
  Property next=list.get(i + 1);
  if (prev.getKey().compareTo(key) < 0 && key.compareTo(next.getKey()) < 0)   return prev;
}
if (list.isEmpty()) return null;
return list.get(list.size() - 1);
}
}
);
}
private String getResourceName(PsiJavaFile javaFile){
String key=Messages.showInputDialog(""String_Node_Str"",""String_Node_Str"",null);
if (key == null || key.length() == 0) return null;
return getMainClassName(javaFile.getName()) + '.' + key;
}
private String getMainClassName(String name){
if (name.endsWith(""String_Node_Str"")) return name.substring(0,name.length() - 5);
return name;
}
/** 
 * Locates <tt>Messages.properties</tt> in the same package
 */
private PsiFile findMessagesDotProperties(Project project,PsiJavaFile javaFile){
PsiPackage pkg=PsiManager.getInstance(project).findPackage(javaFile.getPackageName());
for (PsiDirectory dir : pkg.getDirectories()) {
PsiFile props=dir.findFile(""String_Node_Str"");
if (props != null) return props;
}
return null;
}
/** 
 * Finds the smallest   {@link PsiElement} that encompasses the current selection.
 */
@Nullable private PsiElement findSelectedPsiElement(SelectionModel selectionModel,PsiJavaFile javaFile){
PsiElement e=javaFile.findElementAt(selectionModel.getSelectionStart());
if (e == null) return null;
while (true) {
PsiElement p=e.getParent();
TextRange tr=p.getTextRange();
if (selectionModel.getSelectionEnd() < tr.getEndOffset()) return e;
e=p;
}
}
/** 
 * Copied from the localizer code. Converts a property name to a method name.
 */
protected String toJavaIdentifier(String key){
return key.replace('.','_');
}
}
);
}","public I18nRefactorAction(){
  super(new EditorActionHandler(){
    public void execute(    final Editor editor,    DataContext dataContext){
      if (editor == null)       return;
      SelectionModel selectionModel=editor.getSelectionModel();
      final Project project=editor.getProject();
      if (project == null)       return;
      PsiDocumentManager psiManager=PsiDocumentManager.getInstance(project);
      PsiFile psiFile=psiManager.getPsiFile(editor.getDocument());
      if (!(psiFile instanceof PsiJavaFile)) {
        return;
      }
      PsiJavaFile javaFile=(PsiJavaFile)psiFile;
      PsiFile props=findMessagesDotProperties(project,javaFile);
      if (props == null) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      if (!(props instanceof PropertiesFile)) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final PropertiesFile propsFile=(PropertiesFile)props;
      PsiElement e=findSelectedPsiElement(selectionModel,javaFile);
      while (e != null) {
        if (e instanceof PsiExpression)         break;
        e=e.getParent();
      }
      if (e == null) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final PsiExpression exp=(PsiExpression)e;
      final PsiClassType stringType=PsiType.getJavaLangString(PsiManager.getInstance(project),e.getResolveScope());
      if (exp.getType() == null || !exp.getType().equals(stringType)) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final String key=getResourceName(javaFile);
      if (key == null)       return;
      final StringBuilder propertyValue=new StringBuilder();
      final StringBuilder expression=new StringBuilder();
      new Runnable(){
        int numArgs=0;
        public void run(){
          process(exp);
        }
        private void process(        PsiElement exp){
          if (exp instanceof PsiLiteralExpression) {
            PsiLiteralExpression lit=(PsiLiteralExpression)exp;
            if (lit.getType().equals(stringType)) {
              escapeAndAppend(lit.getValue().toString());
              return;
            }
          }
          if (exp instanceof PsiBinaryExpression) {
            PsiBinaryExpression binExp=(PsiBinaryExpression)exp;
            if (binExp.getOperationTokenType() == JavaTokenType.PLUS) {
              process(binExp.getLOperand());
              process(binExp.getROperand());
              return;
            }
          }
          propertyValue.append('{').append(numArgs++).append('}');
          if (expression.length() > 0)           expression.append(',');
          expression.append(exp.getText());
        }
        /** 
 * Takes the literal string value and appends that to <tt>propertyValue</tt> with proper escaping.
 */
        private void escapeAndAppend(        String value){
          for (          char ch : value.toCharArray()) {
switch (ch) {
case '\'':
              propertyValue.append(""String_Node_Str"");
            break;
case '{':
case '}':
          propertyValue.append('\'').append(ch).append('\'');
        break;
default :
      propertyValue.append(ch);
  }
}
}
}
.run();
ApplicationManager.getApplication().runWriteAction(new Runnable(){
public void run(){
try {
  propsFile.addPropertyAfter(PropertiesElementFactory.createProperty(project,key,propertyValue.toString()),findAnchor(propsFile,key));
}
 catch (IncorrectOperationException x) {
  Messages.showErrorDialog(x.getMessage(),""String_Node_Str"");
  return;
}
expression.insert(0,""String_Node_Str"" + toJavaIdentifier(key) + ""String_Node_Str"");
expression.append(""String_Node_Str"");
TextRange tr=exp.getTextRange();
editor.getDocument().deleteString(tr.getStartOffset(),tr.getEndOffset());
EditorModificationUtil.insertStringAtCaret(editor,expression.toString());
}
private Property findAnchor(PropertiesFile propsFile,String key){
List<Property> list=propsFile.getProperties();
for (int i=0; i < list.size() - 1; i++) {
  Property prev=list.get(i);
  Property next=list.get(i + 1);
  if (prev.getKey().compareTo(key) < 0 && key.compareTo(next.getKey()) < 0)   return prev;
}
if (list.isEmpty()) return null;
return list.get(list.size() - 1);
}
}
);
}
private String getResourceName(PsiJavaFile javaFile){
String key=Messages.showInputDialog(""String_Node_Str"",""String_Node_Str"",null);
if (key == null || key.length() == 0) return null;
return getMainClassName(javaFile.getName()) + '.' + key;
}
private String getMainClassName(String name){
if (name.endsWith(""String_Node_Str"")) return name.substring(0,name.length() - 5);
return name;
}
/** 
 * Locates <tt>Messages.properties</tt> in the same package
 */
private PsiFile findMessagesDotProperties(Project project,PsiJavaFile javaFile){
PsiPackage pkg=PsiManager.getInstance(project).findPackage(javaFile.getPackageName());
for (PsiDirectory dir : pkg.getDirectories()) {
PsiFile props=dir.findFile(""String_Node_Str"");
if (props != null) return props;
}
return null;
}
/** 
 * Finds the smallest   {@link PsiElement} that encompasses the current selection.
 */
@Nullable private PsiElement findSelectedPsiElement(SelectionModel selectionModel,PsiJavaFile javaFile){
PsiElement e=javaFile.findElementAt(selectionModel.getSelectionStart());
if (e == null) return null;
while (true) {
PsiElement p=e.getParent();
TextRange tr=p.getTextRange();
if (selectionModel.getSelectionEnd() <= tr.getEndOffset()) return e;
e=p;
}
}
/** 
 * Copied from the localizer code. Converts a property name to a method name.
 */
protected String toJavaIdentifier(String key){
return key.replace('.','_');
}
}
);
}",0.9999122268059336
45267,"/** 
 * Finds the smallest   {@link PsiElement} that encompasses the current selection.
 */
@Nullable private PsiElement findSelectedPsiElement(SelectionModel selectionModel,PsiJavaFile javaFile){
  PsiElement e=javaFile.findElementAt(selectionModel.getSelectionStart());
  if (e == null)   return null;
  while (true) {
    PsiElement p=e.getParent();
    TextRange tr=p.getTextRange();
    if (selectionModel.getSelectionEnd() < tr.getEndOffset())     return e;
    e=p;
  }
}","/** 
 * Finds the smallest   {@link PsiElement} that encompasses the current selection.
 */
@Nullable private PsiElement findSelectedPsiElement(SelectionModel selectionModel,PsiJavaFile javaFile){
  PsiElement e=javaFile.findElementAt(selectionModel.getSelectionStart());
  if (e == null)   return null;
  while (true) {
    PsiElement p=e.getParent();
    TextRange tr=p.getTextRange();
    if (selectionModel.getSelectionEnd() <= tr.getEndOffset())     return e;
    e=p;
  }
}",0.9989550679205852
45268,"public I18nRefactorAction(){
  super(new EditorActionHandler(){
    public void execute(    final Editor editor,    DataContext dataContext){
      if (editor == null)       return;
      SelectionModel selectionModel=editor.getSelectionModel();
      final Project project=editor.getProject();
      if (project == null)       return;
      PsiDocumentManager psiManager=PsiDocumentManager.getInstance(project);
      PsiFile psiFile=psiManager.getPsiFile(editor.getDocument());
      if (!(psiFile instanceof PsiJavaFile)) {
        return;
      }
      PsiJavaFile javaFile=(PsiJavaFile)psiFile;
      PsiFile props=findMessagesDotProperties(project,javaFile);
      if (props == null) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      if (!(props instanceof PropertiesFile)) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final PropertiesFile propsFile=(PropertiesFile)props;
      PsiElement e=findSelectedPsiElement(selectionModel,javaFile);
      while (e != null) {
        if (e instanceof PsiExpression)         break;
        e=e.getParent();
      }
      if (e == null) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final PsiExpression exp=(PsiExpression)e;
      final PsiClassType stringType=PsiType.getJavaLangString(PsiManager.getInstance(project),e.getResolveScope());
      if (exp.getType() == null || !exp.getType().equals(stringType)) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final String key=getResourceName(javaFile);
      if (key == null)       return;
      final StringBuilder propertyValue=new StringBuilder();
      final StringBuilder expression=new StringBuilder();
      new Runnable(){
        int numArgs=0;
        public void run(){
          process(exp);
        }
        private void process(        PsiElement exp){
          if (exp instanceof PsiLiteralExpression) {
            PsiLiteralExpression lit=(PsiLiteralExpression)exp;
            if (lit.getType().equals(stringType)) {
              escapeAndAppend(lit.getValue().toString());
              return;
            }
          }
          if (exp instanceof PsiBinaryExpression) {
            PsiBinaryExpression binExp=(PsiBinaryExpression)exp;
            if (binExp.getOperationTokenType() == JavaTokenType.PLUS) {
              process(binExp.getLOperand());
              process(binExp.getROperand());
              return;
            }
          }
          propertyValue.append('{').append(numArgs++).append('}');
          if (expression.length() > 0)           expression.append(',');
          expression.append(exp.getText());
        }
        /** 
 * Takes the literal string value and appends that to <tt>propertyValue</tt> with proper escaping.
 */
        private void escapeAndAppend(        String value){
          for (          char ch : value.toCharArray()) {
switch (ch) {
case '\'':
              propertyValue.append(""String_Node_Str"");
            break;
case '{':
case '}':
          propertyValue.append('\'').append(ch).append('\'');
        break;
default :
      propertyValue.append(ch);
  }
}
}
}
.run();
ApplicationManager.getApplication().runWriteAction(new Runnable(){
public void run(){
try {
  propsFile.addPropertyAfter(PropertiesElementFactory.createProperty(project,key,propertyValue.toString()),findAnchor(propsFile,key));
}
 catch (IncorrectOperationException x) {
  Messages.showErrorDialog(x.getMessage(),""String_Node_Str"");
  return;
}
expression.insert(0,""String_Node_Str"" + toJavaIdentifier(key) + ""String_Node_Str"");
expression.append(""String_Node_Str"");
TextRange tr=exp.getTextRange();
editor.getDocument().deleteString(tr.getStartOffset(),tr.getEndOffset());
EditorModificationUtil.insertStringAtCaret(editor,expression.toString());
}
private Property findAnchor(PropertiesFile propsFile,String key){
List<Property> list=propsFile.getProperties();
for (int i=0; i < list.size() - 1; i++) {
  Property prev=list.get(i);
  Property next=list.get(i + 1);
  if (prev.getKey().compareTo(key) < 0 && key.compareTo(next.getKey()) < 0)   return prev;
}
if (list.isEmpty()) return null;
return list.get(list.size() - 1);
}
}
);
}
private String getResourceName(PsiJavaFile javaFile){
String key=Messages.showInputDialog(""String_Node_Str"",""String_Node_Str"",null);
if (key == null || key.length() == 0) return null;
return getMainClassName(javaFile.getName()) + '.' + key;
}
private String getMainClassName(String name){
if (name.endsWith(""String_Node_Str"")) return name.substring(0,name.length() - 5);
return name;
}
/** 
 * Locates <tt>Messages.properties</tt> in the same package
 */
private PsiFile findMessagesDotProperties(Project project,PsiJavaFile javaFile){
PsiPackage pkg=PsiManager.getInstance(project).findPackage(javaFile.getPackageName());
for (PsiDirectory dir : pkg.getDirectories()) {
PsiFile props=dir.findFile(""String_Node_Str"");
if (props != null) return props;
}
return null;
}
/** 
 * Finds the smallest   {@link PsiElement} that encompasses the current selection.
 */
@Nullable private PsiElement findSelectedPsiElement(SelectionModel selectionModel,PsiJavaFile javaFile){
PsiElement e=javaFile.findElementAt(selectionModel.getSelectionStart());
if (e == null) return null;
while (true) {
PsiElement p=e.getParent();
TextRange tr=p.getTextRange();
if (selectionModel.getSelectionEnd() <= tr.getEndOffset()) return e;
e=p;
}
}
/** 
 * Copied from the localizer code. Converts a property name to a method name.
 */
protected String toJavaIdentifier(String key){
return key.replace('.','_');
}
}
);
}","public I18nRefactorAction(){
  super(new EditorActionHandler(){
    public void execute(    final Editor editor,    DataContext dataContext){
      if (editor == null)       return;
      SelectionModel selectionModel=editor.getSelectionModel();
      final Project project=editor.getProject();
      if (project == null)       return;
      PsiDocumentManager psiManager=PsiDocumentManager.getInstance(project);
      PsiFile psiFile=psiManager.getPsiFile(editor.getDocument());
      if (!(psiFile instanceof PsiJavaFile)) {
        return;
      }
      PsiJavaFile javaFile=(PsiJavaFile)psiFile;
      PsiFile props=findMessagesDotProperties(project,javaFile);
      if (props == null) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      if (!(props instanceof PropertiesFile)) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final PropertiesFile propsFile=(PropertiesFile)props;
      PsiElement e=findSelectedPsiElement(selectionModel,javaFile);
      while (e != null) {
        if (e instanceof PsiExpression)         break;
        e=e.getParent();
      }
      if (e == null) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final PsiExpression exp=(PsiExpression)e;
      final PsiClassType stringType=PsiType.getJavaLangString(PsiManager.getInstance(project),e.getResolveScope());
      if (exp.getType() == null || !exp.getType().equals(stringType)) {
        Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      final String key=getResourceName(javaFile);
      if (key == null)       return;
      final StringBuilder propertyValue=new StringBuilder();
      final StringBuilder expression=new StringBuilder();
      new Runnable(){
        int numArgs=0;
        public void run(){
          process(exp);
        }
        private void process(        PsiElement exp){
          if (exp instanceof PsiLiteralExpression) {
            PsiLiteralExpression lit=(PsiLiteralExpression)exp;
            if (lit.getType().equals(stringType)) {
              escapeAndAppend(lit.getValue().toString());
              return;
            }
          }
          if (exp instanceof PsiBinaryExpression) {
            PsiBinaryExpression binExp=(PsiBinaryExpression)exp;
            if (binExp.getOperationTokenType() == JavaTokenType.PLUS) {
              process(binExp.getLOperand());
              process(binExp.getROperand());
              return;
            }
          }
          propertyValue.append('{').append(numArgs++).append('}');
          if (expression.length() > 0)           expression.append(',');
          expression.append(exp.getText());
        }
        /** 
 * Takes the literal string value and appends that to <tt>propertyValue</tt> with proper escaping.
 */
        private void escapeAndAppend(        String value){
          for (          char ch : value.toCharArray()) {
switch (ch) {
case '\'':
              propertyValue.append(""String_Node_Str"");
            break;
case '{':
case '}':
          propertyValue.append('\'').append(ch).append('\'');
        break;
case ' ':
      if (propertyValue.length() == 0)       propertyValue.append('\\');
default :
    propertyValue.append(ch);
}
}
}
}
.run();
ApplicationManager.getApplication().runWriteAction(new Runnable(){
public void run(){
try {
propsFile.addPropertyAfter(PropertiesElementFactory.createProperty(project,key,propertyValue.toString()),findAnchor(propsFile,key));
}
 catch (IncorrectOperationException x) {
Messages.showErrorDialog(x.getMessage(),""String_Node_Str"");
return;
}
expression.insert(0,""String_Node_Str"" + toJavaIdentifier(key) + ""String_Node_Str"");
expression.append(""String_Node_Str"");
TextRange tr=exp.getTextRange();
editor.getDocument().deleteString(tr.getStartOffset(),tr.getEndOffset());
EditorModificationUtil.insertStringAtCaret(editor,expression.toString());
}
private Property findAnchor(PropertiesFile propsFile,String key){
List<Property> list=propsFile.getProperties();
for (int i=0; i < list.size() - 1; i++) {
Property prev=list.get(i);
Property next=list.get(i + 1);
if (prev.getKey().compareTo(key) < 0 && key.compareTo(next.getKey()) < 0) return prev;
}
if (list.isEmpty()) return null;
return list.get(list.size() - 1);
}
}
);
}
private String getResourceName(PsiJavaFile javaFile){
String key=Messages.showInputDialog(""String_Node_Str"",""String_Node_Str"",null);
if (key == null || key.length() == 0) return null;
return getMainClassName(javaFile.getName()) + '.' + key;
}
private String getMainClassName(String name){
if (name.endsWith(""String_Node_Str"")) return name.substring(0,name.length() - 5);
return name;
}
/** 
 * Locates <tt>Messages.properties</tt> in the same package
 */
private PsiFile findMessagesDotProperties(Project project,PsiJavaFile javaFile){
PsiPackage pkg=PsiManager.getInstance(project).findPackage(javaFile.getPackageName());
for (PsiDirectory dir : pkg.getDirectories()) {
PsiFile props=dir.findFile(""String_Node_Str"");
if (props != null) return props;
}
return null;
}
/** 
 * Finds the smallest   {@link PsiElement} that encompasses the current selection.
 */
@Nullable private PsiElement findSelectedPsiElement(SelectionModel selectionModel,PsiJavaFile javaFile){
PsiElement e=javaFile.findElementAt(selectionModel.getSelectionStart());
if (e == null) return null;
while (true) {
PsiElement p=e.getParent();
TextRange tr=p.getTextRange();
if (selectionModel.getSelectionEnd() <= tr.getEndOffset()) return e;
e=p;
}
}
/** 
 * Copied from the localizer code. Converts a property name to a method name.
 */
protected String toJavaIdentifier(String key){
return key.replace('.','_');
}
}
);
}",0.9882188672659046
45269,"public void execute(final Editor editor,DataContext dataContext){
  if (editor == null)   return;
  SelectionModel selectionModel=editor.getSelectionModel();
  final Project project=editor.getProject();
  if (project == null)   return;
  PsiDocumentManager psiManager=PsiDocumentManager.getInstance(project);
  PsiFile psiFile=psiManager.getPsiFile(editor.getDocument());
  if (!(psiFile instanceof PsiJavaFile)) {
    return;
  }
  PsiJavaFile javaFile=(PsiJavaFile)psiFile;
  PsiFile props=findMessagesDotProperties(project,javaFile);
  if (props == null) {
    Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!(props instanceof PropertiesFile)) {
    Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  final PropertiesFile propsFile=(PropertiesFile)props;
  PsiElement e=findSelectedPsiElement(selectionModel,javaFile);
  while (e != null) {
    if (e instanceof PsiExpression)     break;
    e=e.getParent();
  }
  if (e == null) {
    Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  final PsiExpression exp=(PsiExpression)e;
  final PsiClassType stringType=PsiType.getJavaLangString(PsiManager.getInstance(project),e.getResolveScope());
  if (exp.getType() == null || !exp.getType().equals(stringType)) {
    Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  final String key=getResourceName(javaFile);
  if (key == null)   return;
  final StringBuilder propertyValue=new StringBuilder();
  final StringBuilder expression=new StringBuilder();
  new Runnable(){
    int numArgs=0;
    public void run(){
      process(exp);
    }
    private void process(    PsiElement exp){
      if (exp instanceof PsiLiteralExpression) {
        PsiLiteralExpression lit=(PsiLiteralExpression)exp;
        if (lit.getType().equals(stringType)) {
          escapeAndAppend(lit.getValue().toString());
          return;
        }
      }
      if (exp instanceof PsiBinaryExpression) {
        PsiBinaryExpression binExp=(PsiBinaryExpression)exp;
        if (binExp.getOperationTokenType() == JavaTokenType.PLUS) {
          process(binExp.getLOperand());
          process(binExp.getROperand());
          return;
        }
      }
      propertyValue.append('{').append(numArgs++).append('}');
      if (expression.length() > 0)       expression.append(',');
      expression.append(exp.getText());
    }
    /** 
 * Takes the literal string value and appends that to <tt>propertyValue</tt> with proper escaping.
 */
    private void escapeAndAppend(    String value){
      for (      char ch : value.toCharArray()) {
switch (ch) {
case '\'':
          propertyValue.append(""String_Node_Str"");
        break;
case '{':
case '}':
      propertyValue.append('\'').append(ch).append('\'');
    break;
default :
  propertyValue.append(ch);
}
}
}
}
.run();
ApplicationManager.getApplication().runWriteAction(new Runnable(){
public void run(){
try {
propsFile.addPropertyAfter(PropertiesElementFactory.createProperty(project,key,propertyValue.toString()),findAnchor(propsFile,key));
}
 catch (IncorrectOperationException x) {
Messages.showErrorDialog(x.getMessage(),""String_Node_Str"");
return;
}
expression.insert(0,""String_Node_Str"" + toJavaIdentifier(key) + ""String_Node_Str"");
expression.append(""String_Node_Str"");
TextRange tr=exp.getTextRange();
editor.getDocument().deleteString(tr.getStartOffset(),tr.getEndOffset());
EditorModificationUtil.insertStringAtCaret(editor,expression.toString());
}
private Property findAnchor(PropertiesFile propsFile,String key){
List<Property> list=propsFile.getProperties();
for (int i=0; i < list.size() - 1; i++) {
Property prev=list.get(i);
Property next=list.get(i + 1);
if (prev.getKey().compareTo(key) < 0 && key.compareTo(next.getKey()) < 0) return prev;
}
if (list.isEmpty()) return null;
return list.get(list.size() - 1);
}
}
);
}","public void execute(final Editor editor,DataContext dataContext){
  if (editor == null)   return;
  SelectionModel selectionModel=editor.getSelectionModel();
  final Project project=editor.getProject();
  if (project == null)   return;
  PsiDocumentManager psiManager=PsiDocumentManager.getInstance(project);
  PsiFile psiFile=psiManager.getPsiFile(editor.getDocument());
  if (!(psiFile instanceof PsiJavaFile)) {
    return;
  }
  PsiJavaFile javaFile=(PsiJavaFile)psiFile;
  PsiFile props=findMessagesDotProperties(project,javaFile);
  if (props == null) {
    Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!(props instanceof PropertiesFile)) {
    Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  final PropertiesFile propsFile=(PropertiesFile)props;
  PsiElement e=findSelectedPsiElement(selectionModel,javaFile);
  while (e != null) {
    if (e instanceof PsiExpression)     break;
    e=e.getParent();
  }
  if (e == null) {
    Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  final PsiExpression exp=(PsiExpression)e;
  final PsiClassType stringType=PsiType.getJavaLangString(PsiManager.getInstance(project),e.getResolveScope());
  if (exp.getType() == null || !exp.getType().equals(stringType)) {
    Messages.showErrorDialog(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  final String key=getResourceName(javaFile);
  if (key == null)   return;
  final StringBuilder propertyValue=new StringBuilder();
  final StringBuilder expression=new StringBuilder();
  new Runnable(){
    int numArgs=0;
    public void run(){
      process(exp);
    }
    private void process(    PsiElement exp){
      if (exp instanceof PsiLiteralExpression) {
        PsiLiteralExpression lit=(PsiLiteralExpression)exp;
        if (lit.getType().equals(stringType)) {
          escapeAndAppend(lit.getValue().toString());
          return;
        }
      }
      if (exp instanceof PsiBinaryExpression) {
        PsiBinaryExpression binExp=(PsiBinaryExpression)exp;
        if (binExp.getOperationTokenType() == JavaTokenType.PLUS) {
          process(binExp.getLOperand());
          process(binExp.getROperand());
          return;
        }
      }
      propertyValue.append('{').append(numArgs++).append('}');
      if (expression.length() > 0)       expression.append(',');
      expression.append(exp.getText());
    }
    /** 
 * Takes the literal string value and appends that to <tt>propertyValue</tt> with proper escaping.
 */
    private void escapeAndAppend(    String value){
      for (      char ch : value.toCharArray()) {
switch (ch) {
case '\'':
          propertyValue.append(""String_Node_Str"");
        break;
case '{':
case '}':
      propertyValue.append('\'').append(ch).append('\'');
    break;
case ' ':
  if (propertyValue.length() == 0)   propertyValue.append('\\');
default :
propertyValue.append(ch);
}
}
}
}
.run();
ApplicationManager.getApplication().runWriteAction(new Runnable(){
public void run(){
try {
propsFile.addPropertyAfter(PropertiesElementFactory.createProperty(project,key,propertyValue.toString()),findAnchor(propsFile,key));
}
 catch (IncorrectOperationException x) {
Messages.showErrorDialog(x.getMessage(),""String_Node_Str"");
return;
}
expression.insert(0,""String_Node_Str"" + toJavaIdentifier(key) + ""String_Node_Str"");
expression.append(""String_Node_Str"");
TextRange tr=exp.getTextRange();
editor.getDocument().deleteString(tr.getStartOffset(),tr.getEndOffset());
EditorModificationUtil.insertStringAtCaret(editor,expression.toString());
}
private Property findAnchor(PropertiesFile propsFile,String key){
List<Property> list=propsFile.getProperties();
for (int i=0; i < list.size() - 1; i++) {
Property prev=list.get(i);
Property next=list.get(i + 1);
if (prev.getKey().compareTo(key) < 0 && key.compareTo(next.getKey()) < 0) return prev;
}
if (list.isEmpty()) return null;
return list.get(list.size() - 1);
}
}
);
}",0.9886811649497648
45270,"/** 
 * Takes the literal string value and appends that to <tt>propertyValue</tt> with proper escaping.
 */
private void escapeAndAppend(String value){
  for (  char ch : value.toCharArray()) {
switch (ch) {
case '\'':
      propertyValue.append(""String_Node_Str"");
    break;
case '{':
case '}':
  propertyValue.append('\'').append(ch).append('\'');
break;
default :
propertyValue.append(ch);
}
}
}","/** 
 * Takes the literal string value and appends that to <tt>propertyValue</tt> with proper escaping.
 */
private void escapeAndAppend(String value){
  for (  char ch : value.toCharArray()) {
switch (ch) {
case '\'':
      propertyValue.append(""String_Node_Str"");
    break;
case '{':
case '}':
  propertyValue.append('\'').append(ch).append('\'');
break;
case ' ':
if (propertyValue.length() == 0) propertyValue.append('\\');
default :
propertyValue.append(ch);
}
}
}",0.9136939010356732
45271,"@Override protected void setUp() throws Exception {
  super.setUp();
  ApplicationContextMock appctx=new ApplicationContextMock();
  application.addComponentInstantiationListener(new SpringComponentInjector(application,appctx));
}","@Override protected void setUp() throws Exception {
  super.setUp();
  ApplicationContextMock appctx=new ApplicationContextMock();
  application.addComponentInstantiationListener(new SpringComponentInjector(application,appctx,true));
}",0.989247311827957
45272,"public void testStartFirstSecure(){
  ApplicationContextMock appctx=new ApplicationContextMock();
  application.addComponentInstantiationListener(new SpringComponentInjector(application,appctx));
  loginToApp(""String_Node_Str"");
  mock.assertRenderedPage(HomePage.class);
  logoutOfApp();
}","public void testStartFirstSecure(){
  ApplicationContextMock appctx=new ApplicationContextMock();
  application.addComponentInstantiationListener(new SpringComponentInjector(application,appctx,true));
  loginToApp(""String_Node_Str"");
  mock.assertRenderedPage(HomePage.class);
  logoutOfApp();
}",0.9914529914529916
45273,"@Override protected void setUp() throws Exception {
  super.setUp();
  ApplicationContextMock appctx=new ApplicationContextMock();
  application.addComponentInstantiationListener(new SpringComponentInjector(application,appctx));
}","@Override protected void setUp() throws Exception {
  super.setUp();
  ApplicationContextMock appctx=new ApplicationContextMock();
  application.addComponentInstantiationListener(new SpringComponentInjector(application,appctx,true));
}",0.989247311827957
45274,"@Override public void init(){
  ApplicationContextMock appctx=new ApplicationContextMock();
  addComponentInstantiationListener(new SpringComponentInjector(this,appctx));
  ProviderManager authMan=new ProviderManager();
  List<TestingAuthenticationProvider> providerList=new ArrayList<TestingAuthenticationProvider>();
  providerList.add(new TestingAuthenticationProvider());
  authMan.setProviders(providerList);
  this.authenticationManager=authMan;
  this.setupStrategyFactory();
  this.setupActionFactory();
  this.setUpHive();
  getMarkupSettings().setStripComments(false);
  getMarkupSettings().setStripWicketTags(false);
  getMarkupSettings().setDefaultBeforeDisabledLink(""String_Node_Str"");
  getMarkupSettings().setDefaultAfterDisabledLink(""String_Node_Str"");
}","@Override public void init(){
  ApplicationContextMock appctx=new ApplicationContextMock();
  addComponentInstantiationListener(new SpringComponentInjector(this,appctx,true));
  ProviderManager authMan=new ProviderManager();
  List<TestingAuthenticationProvider> providerList=new ArrayList<TestingAuthenticationProvider>();
  providerList.add(new TestingAuthenticationProvider());
  authMan.setProviders(providerList);
  this.authenticationManager=authMan;
  this.setupStrategyFactory();
  this.setupActionFactory();
  this.setUpHive();
  getMarkupSettings().setStripComments(false);
  getMarkupSettings().setStripWicketTags(false);
  getMarkupSettings().setDefaultBeforeDisabledLink(""String_Node_Str"");
  getMarkupSettings().setDefaultAfterDisabledLink(""String_Node_Str"");
}",0.9967637540453076
45275,"/** 
 * Checks raw input for aliases and then replaces those with the registered values. Note that if the encountered alias is not allowed it is left unresolved and will probably later in the creation of the factory be skipped or cause a failure.
 * @param raw the raw input
 * @return the input with as much aliases resolved
 */
private String resolveAliases(String raw){
  Matcher m=aliasPattern.matcher(raw);
  StringBuffer buff=new StringBuffer(raw.length() + 30);
  int index=0;
  while (m.find()) {
    if (m.start() > index)     buff.append(raw.substring(index,m.start()));
 else     if (m.start() == index) {
      String key=raw.substring(m.start() + 2,m.end() - 1);
      String alias=getAlias(key);
      if (alias == null) {
        alias=key;
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + key);
      }
 else       if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + key + ""String_Node_Str""+ alias);
      buff.ensureCapacity(buff.length() + alias.length());
      buff.append(alias);
    }
 else     throw new IllegalStateException(""String_Node_Str"" + raw);
    index=m.end();
  }
  if (index < raw.length())   buff.append(raw.substring(index,raw.length()));
  String temp=buff.toString();
  if (temp.indexOf(""String_Node_Str"") >= 0)   throw new IllegalStateException(""String_Node_Str"" + raw);
  return temp;
}","/** 
 * Checks raw input for aliases and then replaces those with the registered values. Note that if the encountered alias is not allowed it is left unresolved and will probably later in the creation of the factory be skipped or cause a failure.
 * @param raw the raw input
 * @return the input with as much aliases resolved
 */
private String resolveAliases(String raw){
  Matcher m=aliasPattern.matcher(raw);
  StringBuffer buff=new StringBuffer(raw.length() + 30);
  int index=0;
  while (m.find()) {
    if (m.start() > index) {
      buff.append(raw.substring(index,m.start()));
      replaceAlias(raw,m,buff);
    }
 else     if (m.start() == index) {
      replaceAlias(raw,m,buff);
    }
 else     throw new IllegalStateException(""String_Node_Str"" + raw);
    index=m.end();
  }
  if (index < raw.length())   buff.append(raw.substring(index,raw.length()));
  String temp=buff.toString();
  if (temp.indexOf(""String_Node_Str"") >= 0)   throw new IllegalStateException(""String_Node_Str"" + raw);
  return temp;
}",0.5839293226756416
45276,"private void doCreateHive(PolicyFileHiveFactory factory){
  factory.setAlias(""String_Node_Str"",""String_Node_Str"");
  factory.setAlias(""String_Node_Str"",""String_Node_Str"");
  factory.setAlias(""String_Node_Str"",""String_Node_Str"");
  factory.setAlias(""String_Node_Str"",""String_Node_Str"");
  Hive hive=factory.createHive();
  assertTrue(hive.containsPrincipal(new EverybodyPrincipal()));
  assertTrue(hive.containsPrincipal(new SimplePrincipal(""String_Node_Str"")));
  assertTrue(hive.containsPrincipal(new SimplePrincipal(""String_Node_Str"")));
  assertTrue(hive.containsPrincipal(new SimplePrincipal(""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertFalse(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertFalse(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertFalse(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertFalse(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertFalse(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertFalse(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertFalse(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertFalse(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPrincipal(new SimplePrincipal(""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"")));
  assertFalse(hive.containsPermission(new FaultyPermission()));
  assertTrue(hive.containsPrincipal(new SimplePrincipal(""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPrincipal(new SimplePrincipal(""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"")));
}","private void doCreateHive(PolicyFileHiveFactory factory){
  factory.setAlias(""String_Node_Str"",""String_Node_Str"");
  factory.setAlias(""String_Node_Str"",""String_Node_Str"");
  factory.setAlias(""String_Node_Str"",""String_Node_Str"");
  factory.setAlias(""String_Node_Str"",""String_Node_Str"");
  Hive hive=factory.createHive();
  assertTrue(hive.containsPrincipal(new EverybodyPrincipal()));
  assertTrue(hive.containsPrincipal(new SimplePrincipal(""String_Node_Str"")));
  assertTrue(hive.containsPrincipal(new SimplePrincipal(""String_Node_Str"")));
  assertTrue(hive.containsPrincipal(new SimplePrincipal(""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertFalse(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertFalse(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertFalse(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertFalse(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertFalse(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertFalse(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertFalse(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertFalse(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPrincipal(new SimplePrincipal(""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"")));
  assertFalse(hive.containsPermission(new FaultyPermission()));
  assertTrue(hive.containsPrincipal(new SimplePrincipal(""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPrincipal(new SimplePrincipal(""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"",""String_Node_Str"")));
  assertTrue(hive.containsPrincipal(new SimplePrincipal(""String_Node_Str"")));
  assertTrue(hive.containsPermission(new TestPermission(""String_Node_Str"")));
}",0.962290502793296
45277,"/** 
 * Effect the move
 * @param board the board
 * @param piece the piece of move
 * @param row row of the move
 * @param col column of the move
 * @return the new board after the move is affected
 */
public static char[][] effectMove(char[][] board,char piece,int row,int col){
  board[row][col]=piece;
  for (int i=0; i < 8; ++i) {
    int curRow=row + sOFFSET_MOVE_ROW[i];
    int curCol=col + sOFFSET_MOVE_COL[i];
    boolean hasOppPieceBetween=false;
    while (curRow >= 0 && curRow < 8 && curCol >= 0 && curCol < 8) {
      if (board[curRow][curCol] == sEMPTY_PIECE)       break;
      if (board[curRow][curCol] != piece)       hasOppPieceBetween=true;
      if ((board[curRow][curCol] == piece) && hasOppPieceBetween) {
        Reversi.getInstance().resetEffectedPieces();
        int effectPieceRow=row + sOFFSET_MOVE_ROW[i];
        int effectPieceCol=col + sOFFSET_MOVE_COL[i];
        while (effectPieceRow != curRow || effectPieceCol != curCol) {
          Reversi.getInstance().setEffectedPiece(effectPieceRow,effectPieceCol);
          board[effectPieceRow][effectPieceCol]=piece;
          effectPieceRow+=sOFFSET_MOVE_ROW[i];
          effectPieceCol+=sOFFSET_MOVE_COL[i];
        }
        break;
      }
      curRow+=sOFFSET_MOVE_ROW[i];
      curCol+=sOFFSET_MOVE_COL[i];
    }
  }
  return board;
}","/** 
 * Effect the move
 * @param board the board
 * @param piece the piece of move
 * @param row row of the move
 * @param col column of the move
 * @return the new board after the move is affected
 */
public static char[][] effectMove(char[][] board,char piece,int row,int col){
  board[row][col]=piece;
  Reversi.getInstance().resetEffectedPieces();
  for (int i=0; i < 8; ++i) {
    int curRow=row + sOFFSET_MOVE_ROW[i];
    int curCol=col + sOFFSET_MOVE_COL[i];
    boolean hasOppPieceBetween=false;
    while (curRow >= 0 && curRow < 8 && curCol >= 0 && curCol < 8) {
      if (board[curRow][curCol] == sEMPTY_PIECE)       break;
      if (board[curRow][curCol] != piece)       hasOppPieceBetween=true;
      if ((board[curRow][curCol] == piece) && hasOppPieceBetween) {
        int effectPieceRow=row + sOFFSET_MOVE_ROW[i];
        int effectPieceCol=col + sOFFSET_MOVE_COL[i];
        while (effectPieceRow != curRow || effectPieceCol != curCol) {
          Reversi.getInstance().setEffectedPiece(effectPieceRow,effectPieceCol);
          board[effectPieceRow][effectPieceCol]=piece;
          effectPieceRow+=sOFFSET_MOVE_ROW[i];
          effectPieceCol+=sOFFSET_MOVE_COL[i];
        }
        break;
      }
      curRow+=sOFFSET_MOVE_ROW[i];
      curCol+=sOFFSET_MOVE_COL[i];
    }
  }
  return board;
}",0.6444275966641395
45278,"/** 
 * @param args the command line argumentsusage is: <p/> java BehaviorRunner my/path/to/spec/MyStory.groovy -txtstory ./reports/story-report.txt <p/> You don't need to pass in the file name for the report either-- if no path is present, then the runner will create a report in the current directory with a default filename following this convention: easyb-<type>-report.<format> (for reports of either story or specification) easyb-report.<format> (for reports that contain both) <p/> Multiple specifications can be passed in on the command line <p/> java BehaviorRunner my/path/to/spec/MyStory.groovy my/path/to/spec/AnotherStory.groovy
 */
public static void main(final String[] args){
  final Configuration configuration=new ConsoleConfigurator().configure(args);
  final ConsoleReporter consoleRpt=configuration.getConsoleReporter();
  if (configuration != null) {
    final BehaviorRunner runner=new BehaviorRunner(configuration,consoleRpt);
    try {
      boolean success=runner.runBehaviors(getBehaviors(configuration.getFilePaths(),configuration));
      if (!success) {
        System.exit(-1);
      }
    }
 catch (    Throwable exception) {
      System.err.println(""String_Node_Str"");
      exception.printStackTrace(System.err);
      System.exit(-1);
    }
  }
}","/** 
 * @param args the command line argumentsusage is: <p/> java BehaviorRunner my/path/to/spec/MyStory.groovy -txtstory ./reports/story-report.txt <p/> You don't need to pass in the file name for the report either-- if no path is present, then the runner will create a report in the current directory with a default filename following this convention: easyb-<type>-report.<format> (for reports of either story or specification) easyb-report.<format> (for reports that contain both) <p/> Multiple specifications can be passed in on the command line <p/> java BehaviorRunner my/path/to/spec/MyStory.groovy my/path/to/spec/AnotherStory.groovy
 */
public static void main(final String[] args){
  final Configuration configuration=new ConsoleConfigurator().configure(args);
  if (configuration != null) {
    final ConsoleReporter consoleRpt=configuration.getConsoleReporter();
    final BehaviorRunner runner=new BehaviorRunner(configuration,consoleRpt);
    try {
      boolean success=runner.runBehaviors(getBehaviors(configuration.getFilePaths(),configuration));
      if (!success) {
        System.exit(-1);
      }
    }
 catch (    Throwable exception) {
      System.err.println(""String_Node_Str"");
      exception.printStackTrace(System.err);
      System.exit(-1);
    }
  }
}",0.9438815276695246
45279,"private static void validateArguments(final CommandLine commandLine) throws IllegalArgumentException {
  if (commandLine.getArgs().length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
}","private static void validateArguments(final CommandLine commandLine) throws IllegalArgumentException {
  if (commandLine.getArgs().length == 0) {
    if (!commandLine.hasOption(BEHAVIOR_FILE)) {
      throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}",0.8566108007448789
45280,"/** 
 * @param behaviors collection of files that contain the specifications
 * @throws Exception if unable to write report file
 */
public void runBehavior(List<Behavior> behaviors) throws Exception {
  for (  final Behavior behavior : behaviors) {
    behavior.execute(broadcastListener);
  }
  broadcastListener.completeTesting();
  for (  final ReportWriter report : reports) {
    report.writeReport(resultsCollector);
  }
}","/** 
 * @param behaviors collection of files that contain the specifications
 * @throws Exception if unable to write report file
 */
public boolean runBehavior(List<Behavior> behaviors) throws Exception {
  boolean wasSuccessful=true;
  for (  final Behavior behavior : behaviors) {
    behavior.execute(broadcastListener);
  }
  broadcastListener.completeTesting();
  for (  final ReportWriter report : reports) {
    report.writeReport(resultsCollector);
  }
  if (failureDetector.failuresDetected()) {
    wasSuccessful=false;
  }
  return wasSuccessful;
}",0.8603238866396761
45281,"/** 
 * @param args the command line argumentsusage is: <p/> java BehaviorRunner my/path/to/spec/MyStory.groovy -txtstory ./reports/story-report.txt <p/> You don't need to pass in the file name for the report either-- if no path is present, then the runner will create a report in the current directory with a default filename following this convention: easyb-<type>-report.<format> (for reports of either story or specification) easyb-report.<format> (for reports that contain both) <p/> Multiple specifications can be passed in on the command line <p/> java BehaviorRunner my/path/to/spec/MyStory.groovy my/path/to/spec/AnotherStory.groovy
 */
public static void main(final String[] args){
  final Configuration configuration=new ConsoleConfigurator().configure(args);
  final ConsoleReporter consoleRpt=configuration.getConsoleReporter();
  if (configuration != null) {
    final BehaviorRunner runner=new BehaviorRunner(configuration.getConfiguredReports(),consoleRpt);
    try {
      runner.runBehavior(getBehaviors(configuration.getFilePaths()));
    }
 catch (    Throwable exception) {
      System.err.println(""String_Node_Str"");
      exception.printStackTrace(System.err);
      System.exit(-1);
    }
  }
}","/** 
 * @param args the command line argumentsusage is: <p/> java BehaviorRunner my/path/to/spec/MyStory.groovy -txtstory ./reports/story-report.txt <p/> You don't need to pass in the file name for the report either-- if no path is present, then the runner will create a report in the current directory with a default filename following this convention: easyb-<type>-report.<format> (for reports of either story or specification) easyb-report.<format> (for reports that contain both) <p/> Multiple specifications can be passed in on the command line <p/> java BehaviorRunner my/path/to/spec/MyStory.groovy my/path/to/spec/AnotherStory.groovy
 */
public static void main(final String[] args){
  final Configuration configuration=new ConsoleConfigurator().configure(args);
  final ConsoleReporter consoleRpt=configuration.getConsoleReporter();
  if (configuration != null) {
    final BehaviorRunner runner=new BehaviorRunner(configuration.getConfiguredReports(),consoleRpt);
    try {
      boolean success=runner.runBehavior(getBehaviors(configuration.getFilePaths()));
      if (!success) {
        System.exit(-1);
      }
    }
 catch (    Throwable exception) {
      System.err.println(""String_Node_Str"");
      exception.printStackTrace(System.err);
      System.exit(-1);
    }
  }
}",0.9717018732562774
45282,"List<String> easybDependencies() throws ArtifactResolutionException, ArtifactNotFoundException {
  List<String> dependencies=new ArrayList<String>();
  dependencies.add(pathForDependency(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  dependencies.add(pathForDependency(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  dependencies.add(pathForDependency(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  return dependencies;
}","List<String> easybDependencies() throws ArtifactResolutionException, ArtifactNotFoundException, MojoExecutionException {
  Artifact mojoArtifact=artifactFactory.createBuildArtifact(""String_Node_Str"",""String_Node_Str"",pluginVersion,""String_Node_Str"");
  Artifact easybArtifact=findEasybArtifact(this.pluginArtifacts);
  easybArtifact=artifactFactory.createArtifact(easybArtifact.getGroupId(),easybArtifact.getArtifactId(),easybArtifact.getVersion(),Artifact.SCOPE_COMPILE,easybArtifact.getType());
  ArtifactResolutionResult resolutionResult=resolver.resolveTransitively(singleton(easybArtifact),mojoArtifact,EMPTY_LIST,localRepository,metadataSource);
  getLog().debug(""String_Node_Str"" + easybArtifact);
  List<String> dependencies=new ArrayList<String>();
  for (  Object each : resolutionResult.getArtifacts()) {
    Artifact artifact=(Artifact)each;
    getLog().info(""String_Node_Str"" + artifact);
    dependencies.add(artifact.getFile().getAbsolutePath());
  }
  return dependencies;
}",0.2252937111264685
45283,"/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  try {
    Options options=getOptionsForMain();
    if (args.length > 0 && args[0] != null) {
      CommandLine commandLine=getCommandLineForMain(args,options);
      SpecificationRunner runner=new SpecificationRunner(getConfiguredReports(commandLine));
      List<SpecificationListener> listeners=runner.runSpecification(getFileCollection(commandLine.getArgs()));
      notifyAndExitOnSpecificationFailures(listeners);
    }
 else {
      handleHelpForMain(options);
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace(System.err);
    System.exit(-6);
  }
}","/** 
 * @param args the command line arguments
 */
public static void main(String[] args){
  Options options=getOptionsForMain();
  try {
    CommandLine commandLine=getCommandLineForMain(args,options);
    validateArguments(commandLine);
    SpecificationRunner runner=new SpecificationRunner(getConfiguredReports(commandLine));
    List<SpecificationListener> listeners=runner.runSpecification(getFileCollection(commandLine.getArgs()));
    notifyAndExitOnSpecificationFailures(listeners);
  }
 catch (  InvalidArgumentException iae) {
    System.out.println(iae.getMessage());
    handleHelpForMain(options);
  }
catch (  ParseException pe) {
    System.out.println(pe.getMessage());
    handleHelpForMain(options);
  }
catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace(System.err);
    System.exit(-6);
  }
}",0.4167741935483871
45284,"public void init(){
  if (_name == null) {
    _logger.warning(""String_Node_Str"");
    return;
  }
  _daemonDir=_config.getString(""String_Node_Str"",getDefaultDaemonDir());
  File daemonDir=new File(_daemonDir);
  if (!daemonDir.exists() || !daemonDir.isDirectory()) {
    _logger.warning(""String_Node_Str"" + _daemonDir + ""String_Node_Str"");
    return;
  }
  _pidDir=_config.getString(""String_Node_Str"",Constants.DEFAULT_DAEMON_PID_DIR);
  File pidDir=new File(_pidDir);
  if (!pidDir.exists() || !pidDir.isDirectory()) {
    _logger.warning(""String_Node_Str"" + _pidDir + ""String_Node_Str"");
    return;
  }
  String wrapperJar=WrapperLoader.getWrapperJar().trim();
  String wrapperHome=""String_Node_Str"";
  try {
    wrapperHome=new File(wrapperJar).getParentFile().getCanonicalPath();
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  String confFile=_config.getString(""String_Node_Str"");
  String confDir=null;
  if (confFile != null) {
    File f=new File(confFile);
    if (f.exists())     try {
      confDir=f.getParentFile().getCanonicalPath();
    }
 catch (    IOException e) {
    }
  }
  if (confDir == null)   confDir=wrapperHome + ""String_Node_Str"";
  if (confFile == null) {
    _logger.warning(""String_Node_Str"");
    return;
  }
  try {
    _confFile=new File(confFile).getCanonicalPath();
  }
 catch (  IOException e) {
    _logger.throwing(this.getClass().getName(),""String_Node_Str"",e);
  }
  _daemonTemplate=_config.getString(""String_Node_Str"",wrapperHome + ""String_Node_Str"");
  File daemonTemplate=new File(_daemonTemplate);
  if (!daemonTemplate.exists() || !daemonTemplate.isFile()) {
    if (_logger != null)     _logger.warning(""String_Node_Str"" + _daemonTemplate + ""String_Node_Str"");
    return;
  }
  File daemonScript=getDaemonScript();
  if (daemonScript.exists())   if (_logger != null)   _logger.info(daemonScript.getAbsolutePath() + ""String_Node_Str"");
  String pidName=null;
  try {
    pidName=_config.getString(""String_Node_Str"",new File(pidDir,""String_Node_Str"" + getName() + ""String_Node_Str"").getCanonicalPath());
  }
 catch (  IOException e) {
    if (_logger != null)     _logger.throwing(this.getClass().getName(),""String_Node_Str"",e);
  }
  File pidFile=new File(pidName);
  String apidName=null;
  try {
    apidName=_config.getString(""String_Node_Str"",new File(pidDir,""String_Node_Str"" + getName() + ""String_Node_Str"").getCanonicalPath());
  }
 catch (  IOException e) {
    if (_logger != null)     _logger.throwing(this.getClass().getName(),""String_Node_Str"",e);
  }
  File apidFile=new File(apidName);
  try {
    _daemonTemplate=daemonTemplate.getCanonicalPath();
    _wrapperPidFile=pidFile.getCanonicalPath();
    _appPidFile=apidFile.getCanonicalPath();
    _daemonScript=daemonScript.getCanonicalPath();
  }
 catch (  Exception ex) {
    if (_logger != null)     _logger.throwing(this.getClass().getName(),""String_Node_Str"",ex);
  }
  JavaHome javaHome=OperatingSystem.instance().getJavaHome(_config);
  String java=javaHome.findJava();
  _startCmd=new String[10];
  _startCmd[0]=java;
  _startCmd[1]=""String_Node_Str"" + _wrapperPidFile;
  _startCmd[2]=""String_Node_Str"";
  _startCmd[3]=""String_Node_Str"";
  _startCmd[4]=null;
  _startCmd[5]=null;
  _startCmd[6]=""String_Node_Str"";
  _startCmd[7]=wrapperJar;
  _startCmd[8]=""String_Node_Str"";
  _startCmd[9]=_confFile;
  _execCmd=_startCmd.clone();
  _execCmd[4]=""String_Node_Str"";
  _execCmd[8]=""String_Node_Str"";
  if (_config.getBoolean(""String_Node_Str"",false)) {
    _execCmd[4]=""String_Node_Str"";
    _execCmd[5]=""String_Node_Str"";
  }
  _stopCmd=_startCmd.clone();
  _stopCmd[8]=""String_Node_Str"";
  _statusCmd=_startCmd.clone();
  _statusCmd[8]=""String_Node_Str"";
  String defaultRunLevelDir=_daemonDir + ""String_Node_Str"" + DEFAULT_DAEMON_RUN_LEVEL_DIR;
  String runLevelDir=_config.getString(""String_Node_Str"",defaultRunLevelDir);
  _updateRcParser=new UpdateRcParser(_config.getString(""String_Node_Str"",null),runLevelDir,getName());
  _ksLinks.addAll(_updateRcParser.getStartLinks());
  _ksLinks.addAll(_updateRcParser.getStopLinks());
  _stopTimeout=_config.getInt(""String_Node_Str"",Constants.DEFAULT_SHUTDOWN_TIMEOUT) * 1000;
}","public void init(){
  if (_name == null) {
    _logger.warning(""String_Node_Str"");
    return;
  }
  _daemonDir=_config.getString(""String_Node_Str"",getDefaultDaemonDir());
  File daemonDir=new File(_daemonDir);
  if (!daemonDir.exists() || !daemonDir.isDirectory()) {
    _logger.warning(""String_Node_Str"" + _daemonDir + ""String_Node_Str"");
    return;
  }
  _pidDir=_config.getString(""String_Node_Str"",Constants.DEFAULT_DAEMON_PID_DIR);
  File pidDir=new File(_pidDir);
  if (!pidDir.exists() || !pidDir.isDirectory()) {
    _logger.warning(""String_Node_Str"" + _pidDir + ""String_Node_Str"");
    return;
  }
  String wrapperJar=WrapperLoader.getWrapperJar().trim();
  String wrapperHome=""String_Node_Str"";
  try {
    wrapperHome=new File(wrapperJar).getParentFile().getCanonicalPath();
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  String confFile=_config.getString(""String_Node_Str"");
  String confDir=null;
  if (confFile != null) {
    File f=new File(confFile);
    if (f.exists())     try {
      confDir=f.getParentFile().getCanonicalPath();
    }
 catch (    IOException e) {
    }
  }
  if (confDir == null)   confDir=wrapperHome + ""String_Node_Str"";
  if (confFile == null) {
    _logger.warning(""String_Node_Str"");
    return;
  }
  try {
    _confFile=new File(confFile).getCanonicalPath();
  }
 catch (  IOException e) {
    _logger.throwing(this.getClass().getName(),""String_Node_Str"",e);
  }
  _daemonTemplate=_config.getString(""String_Node_Str"",wrapperHome + ""String_Node_Str"");
  File daemonTemplate=new File(_daemonTemplate);
  if (!daemonTemplate.exists() || !daemonTemplate.isFile()) {
    if (_logger != null)     _logger.warning(""String_Node_Str"" + _daemonTemplate + ""String_Node_Str"");
    return;
  }
  File daemonScript=getDaemonScript();
  if (daemonScript.exists())   if (_logger != null)   _logger.info(daemonScript.getAbsolutePath() + ""String_Node_Str"");
  String pidName=null;
  try {
    pidName=_config.getString(""String_Node_Str"",new File(pidDir,""String_Node_Str"" + getName() + ""String_Node_Str"").getCanonicalPath());
  }
 catch (  IOException e) {
    if (_logger != null)     _logger.throwing(this.getClass().getName(),""String_Node_Str"",e);
  }
  File pidFile=new File(pidName);
  String apidName=null;
  try {
    apidName=_config.getString(""String_Node_Str"",new File(pidDir,""String_Node_Str"" + getName() + ""String_Node_Str"").getCanonicalPath());
  }
 catch (  IOException e) {
    if (_logger != null)     _logger.throwing(this.getClass().getName(),""String_Node_Str"",e);
  }
  File apidFile=new File(apidName);
  try {
    _daemonTemplate=daemonTemplate.getCanonicalPath();
    _wrapperPidFile=pidFile.getCanonicalPath();
    _appPidFile=apidFile.getCanonicalPath();
    _daemonScript=daemonScript.getCanonicalPath();
  }
 catch (  Exception ex) {
    if (_logger != null)     _logger.throwing(this.getClass().getName(),""String_Node_Str"",ex);
  }
  JavaHome javaHome=OperatingSystem.instance().getJavaHome(_config);
  String java=javaHome.findJava();
  _startCmd=new String[10];
  _startCmd[0]=java;
  _startCmd[1]=""String_Node_Str"" + _wrapperPidFile;
  _startCmd[2]=""String_Node_Str"";
  _startCmd[3]=""String_Node_Str"";
  _startCmd[4]=null;
  _startCmd[5]=null;
  _startCmd[6]=""String_Node_Str"";
  _startCmd[7]=wrapperJar;
  _startCmd[8]=""String_Node_Str"";
  _startCmd[9]=_confFile;
  _execCmd=_startCmd.clone();
  _execCmd[4]=""String_Node_Str"";
  _execCmd[8]=""String_Node_Str"";
  if (_config.getBoolean(""String_Node_Str"",false)) {
    _execCmd[4]=""String_Node_Str"";
    _execCmd[5]=""String_Node_Str"";
  }
  _stopCmd=_startCmd.clone();
  _stopCmd[8]=""String_Node_Str"";
  _statusCmd=_startCmd.clone();
  _statusCmd[8]=""String_Node_Str"";
  String defaultRunLevelDir=_daemonDir + ""String_Node_Str"" + DEFAULT_DAEMON_RUN_LEVEL_DIR;
  if (!new File(defaultRunLevelDir).exists()) {
    defaultRunLevelDir=""String_Node_Str"" + (isDebian() ? DEFAULT_DAEMON_RUN_LEVEL_DIR_DEBIAN : DEFAULT_DAEMON_RUN_LEVEL_DIR);
  }
  String runLevelDir=_config.getString(""String_Node_Str"",defaultRunLevelDir);
  _updateRcParser=new UpdateRcParser(_config.getString(""String_Node_Str"",null),runLevelDir,getName());
  _ksLinks.addAll(_updateRcParser.getStartLinks());
  _ksLinks.addAll(_updateRcParser.getStopLinks());
  _stopTimeout=_config.getInt(""String_Node_Str"",Constants.DEFAULT_SHUTDOWN_TIMEOUT) * 1000;
}",0.9790489642184558
45285,"/** 
 * Gets the formatter.
 * @param wFormat the w format
 * @return the formatter
 */
private PatternFormatter getFormatter(String wFormat){
  PatternFormatter formatter=new PatternFormatter();
  String pattern=""String_Node_Str"";
  if (wFormat.contains(""String_Node_Str"")) {
    formatter.setTimeFormat(""String_Node_Str"");
  }
 else {
    formatter.setTimeFormat(""String_Node_Str"");
  }
  for (int i=0; i < wFormat.length(); i++) {
    if (i > 0)     pattern+=""String_Node_Str"";
    char c=wFormat.charAt(i);
switch (c) {
case 'L':
      pattern+=""String_Node_Str"";
    break;
case 'P':
  pattern+=""String_Node_Str"";
break;
case 'N':
pattern+=""String_Node_Str"";
break;
case 'T':
case 'Z':
pattern+=""String_Node_Str"";
break;
case 'M':
pattern+=""String_Node_Str"";
break;
default :
;
}
}
pattern+=""String_Node_Str"";
formatter.setLogPattern(pattern);
return formatter;
}","/** 
 * Gets the formatter.
 * @param wFormat the w format
 * @return the formatter
 */
private PatternFormatter getFormatter(String wFormat){
  PatternFormatter formatter=new PatternFormatter();
  String pattern=""String_Node_Str"";
  if (wFormat.contains(""String_Node_Str"")) {
    formatter.setTimeFormat(""String_Node_Str"");
  }
 else {
    formatter.setTimeFormat(""String_Node_Str"");
  }
  for (int i=0; i < wFormat.length(); i++) {
    if (i > 0)     pattern+=""String_Node_Str"";
    char c=wFormat.charAt(i);
switch (c) {
case 'L':
      pattern+=""String_Node_Str"";
    break;
case 'P':
  pattern+=""String_Node_Str"";
break;
case 'N':
pattern+=""String_Node_Str"";
break;
case 'T':
case 'Z':
pattern+=""String_Node_Str"";
break;
case 'M':
pattern+=""String_Node_Str"";
break;
default :
;
}
}
pattern+=System.getProperty(""String_Node_Str"");
formatter.setLogPattern(pattern);
return formatter;
}",0.9567198177676538
45286,"/** 
 * Gets the wrapper logger.
 * @return the wrapper logger
 */
@Override public Logger getWrapperLogger(){
  if (_wrapperLogger != null)   return _wrapperLogger;
  _wrapperLogger=new MyLogger();
  ((MyLogger)_wrapperLogger).setPID(_wrapperLoggerName);
  ((MyLogger)_wrapperLogger).setName(getName());
  _wrapperLogger.setUseParentHandlers(false);
  if (_controller != null)   _controller.setLogger(_appLogger);
  if (getFileHandler() != null)   _wrapperLogger.addHandler(getFileHandler());
  return _wrapperLogger;
}","/** 
 * Gets the wrapper logger.
 * @return the wrapper logger
 */
@Override public Logger getWrapperLogger(){
  if (_wrapperLogger != null)   return _wrapperLogger;
  _wrapperLogger=new MyLogger();
  ((MyLogger)_wrapperLogger).setPID(_wrapperLoggerName);
  ((MyLogger)_wrapperLogger).setName(getName());
  _wrapperLogger.setUseParentHandlers(false);
  if (_controller != null)   _controller.setLogger(_appLogger);
  if (getFileHandler() != null)   _wrapperLogger.addHandler(getFileHandler());
  if (getConsoleHandler() != null)   _wrapperLogger.addHandler(getConsoleHandler());
  return _wrapperLogger;
}",0.9244444444444444
45287,"/** 
 * Gets the app logger.
 * @return the app logger
 */
protected Logger getAppLogger(){
  if (_appLogger != null)   return _appLogger;
  if (_appLogger == null) {
    _appLogger=new MyLogger();
    updateAppLoggerName();
    _appLogger.setUseParentHandlers(false);
  }
  if (getFileHandler() != null)   _appLogger.addHandler(getFileHandler());
  if (getConsoleHandler() != null)   _appLogger.addHandler(getConsoleHandler());
  _appLogger.setLevel(Level.ALL);
  return _appLogger;
}","/** 
 * Gets the app logger.
 * @return the app logger
 */
protected Logger getAppLogger(){
  if (_appLogger != null)   return _appLogger;
  if (_appLogger == null) {
    _appLogger=new MyLogger();
    updateAppLoggerName();
    _appLogger.setUseParentHandlers(false);
  }
  if (getFileHandler() != null)   _appLogger.addHandler(getFileHandler());
  _appLogger.setLevel(Level.ALL);
  return _appLogger;
}",0.9088863892013498
45288,"/** 
 * Builds the options.
 */
private static void buildOptions(){
  DefaultOptionBuilder oBuilder=new DefaultOptionBuilder(""String_Node_Str"",""String_Node_Str"",true);
  ArgumentBuilder aBuilder=new ArgumentBuilder();
  GroupBuilder gBuilder=new GroupBuilder();
  gBuilder.withOption(oBuilder.reset().withId(OPTION_C).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_T).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_P).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_TX).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_PX).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_I).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_R).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_Q).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_Y).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_QS).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_QX).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  Argument pid=aBuilder.reset().withName(PID).withDescription(""String_Node_Str"").withMinimum(1).withMaximum(1).withValidator(NumberValidator.getIntegerInstance()).create();
  gBuilder.withOption(oBuilder.reset().withId(OPTION_N).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").withArgument(pid).create());
  Argument pid2=aBuilder.reset().withName(PID).withDescription(""String_Node_Str"").withMinimum(1).withMaximum(1).withValidator(NumberValidator.getIntegerInstance()).create();
  Argument defaultFile=aBuilder.reset().withName(DEFAULT_FILE).withDescription(""String_Node_Str"").withMinimum(0).withMaximum(1).withValidator(VFSFileValidator.getExistingFileInstance().setBase(""String_Node_Str"")).create();
  gBuilder.withOption(oBuilder.reset().withId(OPTION_D).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").withArgument(defaultFile).create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_G).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").withArgument(pid2).create());
  FileValidator fValidator=VFSFileValidator.getExistingFileInstance().setBase(""String_Node_Str"");
  fValidator.setFile(false);
  gBuilder.withOption(aBuilder.reset().withName(CONF_FILE).withDescription(""String_Node_Str"").withMinimum(0).withMaximum(10).create());
  Validator pValidator=new Validator(){
    @Override public void validate(    List values) throws InvalidArgumentException {
      for (Iterator it=values.iterator(); it.hasNext(); ) {
        String p=(String)it.next();
        if (!Pattern.matches(""String_Node_Str"",p)) {
          throw new InvalidArgumentException(p);
        }
      }
    }
  }
;
  gBuilder.withOption(aBuilder.reset().withName(PROPERTIES).withDescription(""String_Node_Str"").withMinimum(0).withValidator(pValidator).create());
  gBuilder.withMaximum(3);
  group=gBuilder.create();
}","/** 
 * Builds the options.
 */
private static void buildOptions(){
  DefaultOptionBuilder oBuilder=new DefaultOptionBuilder(""String_Node_Str"",""String_Node_Str"",true);
  ArgumentBuilder aBuilder=new ArgumentBuilder();
  GroupBuilder gBuilder=new GroupBuilder();
  gBuilder.withOption(oBuilder.reset().withId(OPTION_C).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_T).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_P).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_TX).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_PX).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_I).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_R).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_Q).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_Y).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_QS).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_QX).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").create());
  Argument pid=aBuilder.reset().withName(PID).withDescription(""String_Node_Str"").withMinimum(1).withMaximum(1).withValidator(NumberValidator.getIntegerInstance()).create();
  gBuilder.withOption(oBuilder.reset().withId(OPTION_N).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").withArgument(pid).create());
  Argument pid2=aBuilder.reset().withName(PID).withDescription(""String_Node_Str"").withMinimum(1).withMaximum(1).withValidator(NumberValidator.getIntegerInstance()).create();
  Argument defaultFile=aBuilder.reset().withName(DEFAULT_FILE).withDescription(""String_Node_Str"").withMinimum(0).withMaximum(1).withValidator(VFSFileValidator.getExistingFileInstance().setBase(""String_Node_Str"")).create();
  gBuilder.withOption(oBuilder.reset().withId(OPTION_D).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").withArgument(defaultFile).create());
  gBuilder.withOption(oBuilder.reset().withId(OPTION_G).withShortName(""String_Node_Str"").withLongName(""String_Node_Str"").withDescription(""String_Node_Str"").withArgument(pid2).create());
  FileValidator fValidator=VFSFileValidator.getExistingFileInstance().setBase(""String_Node_Str"");
  fValidator.setFile(false);
  gBuilder.withOption(aBuilder.withName(CONF_FILE).withDescription(""String_Node_Str"").withMinimum(0).create());
  Validator pValidator=new Validator(){
    @Override public void validate(    List values) throws InvalidArgumentException {
      for (Iterator it=values.iterator(); it.hasNext(); ) {
        String p=(String)it.next();
        if (!Pattern.matches(""String_Node_Str"",p)) {
          throw new InvalidArgumentException(p);
        }
      }
    }
  }
;
  gBuilder.withOption(aBuilder.reset().withName(PROPERTIES).withDescription(""String_Node_Str"").withMinimum(0).withValidator(pValidator).create());
  gBuilder.withMaximum(3);
  group=gBuilder.create();
}",0.9970326409495548
45289,"/** 
 * Parses the command.
 * @param args the args
 */
private static void parseCommand(String[] args){
  HelpFormatter hf=new HelpFormatter();
  DefaultOptionBuilder oBuilder=new DefaultOptionBuilder();
  ;
  Parser p=new Parser();
  p.setGroup(group);
  p.setHelpFormatter(hf);
  p.setHelpOption(oBuilder.withLongName(""String_Node_Str"").withShortName(""String_Node_Str"").create());
  cl=p.parseAndHelp(args);
  if (cl == null) {
    System.exit(-1);
  }
  cmds=cl.getOptions();
  try {
    confFileList=cl.getValues(CONF_FILE);
    if (confFileList == null || confFileList.isEmpty())     System.out.println(""String_Node_Str"");
 else     confFile=(String)confFileList.get(0);
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"");
  }
  try {
    defaultFile=(String)cl.getValue(cl.getOption(""String_Node_Str""));
    if (defaultFile != null)     defaultFile=new File(defaultFile).getCanonicalPath();
  }
 catch (  Exception ex) {
  }
  properties=cl.getValues(PROPERTIES);
}","/** 
 * Parses the command.
 * @param args the args
 */
private static void parseCommand(String[] args){
  HelpFormatter hf=new HelpFormatter();
  DefaultOptionBuilder oBuilder=new DefaultOptionBuilder();
  Parser p=new Parser();
  p.setGroup(group);
  p.setHelpFormatter(hf);
  p.setHelpOption(oBuilder.withLongName(""String_Node_Str"").withShortName(""String_Node_Str"").create());
  cl=p.parseAndHelp(args);
  if (cl == null) {
    System.exit(-1);
  }
  cmds=cl.getOptions();
  try {
    confFileList=cl.getValues(CONF_FILE);
    if (confFileList == null || confFileList.isEmpty())     System.out.println(""String_Node_Str"");
 else     confFile=(String)confFileList.get(0);
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"");
  }
  try {
    defaultFile=(String)cl.getValue(cl.getOption(""String_Node_Str""));
    if (defaultFile != null)     defaultFile=new File(defaultFile).getCanonicalPath();
  }
 catch (  Exception ex) {
  }
  properties=cl.getValues(PROPERTIES);
}",0.9979818365287588
45290,"private ArrayList<? extends Location> getLocationList(LocationType type){
  ArrayList<? extends Location> locs=new ArrayList<Location>();
  DBAdapter adp=new DBAdapter(this);
  try {
    adp.createDataBase();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  adp.openDataBase();
switch (type) {
case BUILDING:
    locs=adp.getBuildings();
  break;
case ROOM:
locs=adp.getRooms();
break;
default :
locs=adp.getAllLocations();
break;
}
adp.close();
places=new String[locs.size()];
int i=0;
for (Location l : locs) {
places[i]=l.getName();
i++;
}
return locs;
}","private ArrayList<? extends Location> getLocationList(LocationType type){
  ArrayList<? extends Location> locs=new ArrayList<Location>();
  DBAdapter adp=new DBAdapter(this);
  try {
    adp.createDataBase();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  adp.openDataBase();
switch (type) {
case BUILDINGS:
    locs=adp.getBuildings();
  break;
case ROOMS:
locs=adp.getRooms();
break;
case RESTAURANTS:
locs=adp.getRestaurants();
break;
default :
locs=adp.getAllLocations();
break;
}
adp.close();
places=new String[locs.size()];
int i=0;
for (Location l : locs) {
places[i]=l.getName();
i++;
}
return locs;
}",0.9547738693467336
45291,"private int yChute(int x,int y){
  while (map.get(y + 1).get(x) == Box.EMPTY) {
    ++y;
  }
  return y;
}","private int yChute(int x,int y){
  while (map.get(y + 1).get(x) == Box.EMPTY) {
    ++y;
  }
  if (map.get(y + 1).get(x) == Box.DOOR) {
    ++y;
  }
  return y;
}",0.7910447761194029
45292,"public void keyPressed(int key,char c){
  if (key == Input.KEY_ENTER) {
    try {
      game.getState(1).init(container,game);
      ((Level)game.getState(1)).setLevel(selected + 1);
    }
 catch (    SlickException e) {
      e.printStackTrace();
    }
    game.enterState(1);
  }
 else {
    int d=0;
switch (key) {
case Input.KEY_UP:
      d=-7;
    break;
case Input.KEY_DOWN:
  d=7;
;
break;
case Input.KEY_LEFT:
d=-1;
break;
case Input.KEY_RIGHT:
d=1;
break;
}
if (selected + d >= 0 && selected + d < 7 * 5) {
selected+=d;
}
}
}","public void keyPressed(int key,char c){
  if (key == Input.KEY_ENTER || key == Input.KEY_SPACE) {
    try {
      game.getState(1).init(container,game);
      ((Level)game.getState(1)).setLevel(selected + 1);
    }
 catch (    SlickException e) {
      e.printStackTrace();
    }
    game.enterState(1);
  }
 else {
    int d=0;
switch (key) {
case Input.KEY_UP:
      d=-7;
    break;
case Input.KEY_DOWN:
  d=7;
;
break;
case Input.KEY_LEFT:
d=-1;
break;
case Input.KEY_RIGHT:
d=1;
break;
}
if (selected + d >= 0 && selected + d < 7 * 5) {
selected+=d;
}
}
}",0.9762340036563072
45293,"private int parseArgument(String[] args,int position,boolean argStop) throws CliArgumentParseException {
  if (!argStop) {
    for (    CliArgument argument : arguments) {
      if (argument == defaultArgument) {
        continue;
      }
      if (args[position].startsWith(argument.getShortName())) {
        if (args[position].length() != argument.getShortName().length()) {
          return parseShortNameWithAppend(args,position,argument);
        }
        try {
          argument.parse(buildParamsForArgument(args,position + 1,argument));
        }
 catch (        CliArgumentParseException e) {
          e.setArgsNum(position);
          e.setArgsPos(1);
          throw e;
        }
        int readedParsed=parseTypeRead(args,position + 1 + argument.getNumberOfParams(),argument);
        return readedParsed + argument.getNumberOfParams();
      }
      if (typeScanLongName && argument.getNumberOfParams() == 1) {
        if (args[position].startsWith(argument.getName() + ""String_Node_Str"")) {
          return parseLongName(argument,argument.getName(),args[position]);
        }
        List<String> hnames=argument.getHiddenNames();
        for (        String name : hnames) {
          if (args[position].startsWith(name + ""String_Node_Str"")) {
            return parseLongName(argument,name,args[position]);
          }
        }
      }
      if (args[position].equals(argument.getName())) {
        argument.parse(buildParamsForArgument(args,position + 1,argument));
        int readedParsed=parseTypeRead(args,position + argument.getNumberOfParams(),argument);
        return readedParsed + argument.getNumberOfParams();
      }
      List<String> hnames=argument.getHiddenNames();
      for (      String name : hnames) {
        if (args[position].equals(name)) {
          argument.parse(buildParamsForArgument(args,position + 1,argument));
          int readedParsed=parseTypeRead(args,position + argument.getNumberOfParams(),argument);
          return readedParsed + argument.getNumberOfParams();
        }
      }
    }
  }
  defaultArgument.parse(buildParamsForArgument(args,position,defaultArgument));
  return defaultArgument.getNumberOfParams();
}","private int parseArgument(String[] args,int position,boolean argStop) throws CliArgumentParseException {
  if (!argStop) {
    for (    CliArgument argument : arguments) {
      if (argument == defaultArgument) {
        continue;
      }
      if (args[position].startsWith(argument.getShortName())) {
        if (args[position].length() != argument.getShortName().length()) {
          return parseShortNameWithAppend(args,position,argument);
        }
        try {
          argument.parse(buildParamsForArgument(args,position + 1,argument));
        }
 catch (        CliArgumentParseException e) {
          e.setArgsNum(position);
          e.setArgsPos(1);
          throw e;
        }
        int readedParsed=parseTypeRead(args,position + 1 + argument.getNumberOfParams(),argument);
        return readedParsed + argument.getNumberOfParams();
      }
      if (typeScanLongName && argument.getNumberOfParams() == 1) {
        if (args[position].startsWith(argument.getName() + ""String_Node_Str"")) {
          parseLongName(argument,argument.getName(),args[position]);
          return 0;
        }
        List<String> hnames=argument.getHiddenNames();
        for (        String name : hnames) {
          if (args[position].startsWith(name + ""String_Node_Str"")) {
            return parseLongName(argument,name,args[position]);
          }
        }
      }
      if (args[position].equals(argument.getName())) {
        argument.parse(buildParamsForArgument(args,position + 1,argument));
        int readedParsed=parseTypeRead(args,position + argument.getNumberOfParams(),argument);
        return readedParsed + argument.getNumberOfParams();
      }
      List<String> hnames=argument.getHiddenNames();
      for (      String name : hnames) {
        if (args[position].equals(name)) {
          argument.parse(buildParamsForArgument(args,position + 1,argument));
          int readedParsed=parseTypeRead(args,position + argument.getNumberOfParams(),argument);
          return readedParsed + argument.getNumberOfParams();
        }
      }
    }
  }
  defaultArgument.parse(buildParamsForArgument(args,position,defaultArgument));
  return defaultArgument.getNumberOfParams();
}",0.9938285714285714
45294,"/** 
 * {@inheritDoc}
 */
public final void injectMembers(Object target){
  if (isFinal(field.getModifiers())) {
    return;
  }
  boolean wasAccessible=field.isAccessible();
  field.setAccessible(true);
  try {
    if (field.get(target) == null) {
      field.set(target,createLogger(field.getType()));
    }
  }
 catch (  Exception e) {
    throw new ProvisionException(format(""String_Node_Str"",field,e.getMessage()));
  }
 finally {
    field.setAccessible(wasAccessible);
  }
}","/** 
 * {@inheritDoc}
 */
public final void injectMembers(Object target){
  if (isFinal(field.getModifiers())) {
    return;
  }
  boolean wasAccessible=field.isAccessible();
  field.setAccessible(true);
  try {
    if (field.get(target) == null) {
      field.set(target,createLogger(target.getClass()));
    }
  }
 catch (  Exception e) {
    throw new ProvisionException(format(""String_Node_Str"",field,e.getMessage()));
  }
 finally {
    field.setAccessible(wasAccessible);
  }
}",0.970954356846473
45295,"public Player getLastWhisperSent(Player sender){
  if (this.whisperTracker.containsKey(sender)) {
    return ((Whispers)this.whisperTracker.get(sender)).lastTo;
  }
  return null;
}","public String getLastWhisperSent(Player sender){
  if (this.whisperTracker.containsKey(sender.getName())) {
    return ((Whispers)this.whisperTracker.get(sender.getName())).lastTo;
  }
  return null;
}",0.3036649214659686
45296,"public void setWhisperSent(Player sender,Player receiver){
  if (this.whisperTracker.containsKey(sender)) {
    ((Whispers)this.whisperTracker.get(sender)).lastTo=receiver;
  }
 else {
    Whispers whisper=new Whispers();
    whisper.lastTo=receiver;
    this.whisperTracker.put(sender,whisper);
  }
}","public void setWhisperSent(Player sender,Player receiver){
  if (this.whisperTracker.containsKey(sender.getName())) {
    ((Whispers)this.whisperTracker.get(sender.getName())).lastTo=receiver.getName();
  }
 else {
    Whispers whisper=new Whispers();
    whisper.lastTo=receiver.getName();
    this.whisperTracker.put(sender.getName(),whisper);
  }
}",0.9233128834355828
45297,"public void setWhisperReceived(Player sender,Player receiver){
  if (this.whisperTracker.containsKey(receiver)) {
    ((Whispers)this.whisperTracker.get(receiver)).lastFrom=sender;
  }
 else {
    Whispers whisper=new Whispers();
    whisper.lastFrom=sender;
    this.whisperTracker.put(receiver,whisper);
  }
}","public void setWhisperReceived(Player sender,Player receiver){
  if (this.whisperTracker.containsKey(receiver.getName())) {
    ((Whispers)this.whisperTracker.get(receiver.getName())).lastFrom=sender.getName();
  }
 else {
    Whispers whisper=new Whispers();
    whisper.lastFrom=sender.getName();
    this.whisperTracker.put(receiver.getName(),whisper);
  }
}",0.925595238095238
45298,"public Player getLastWhisperRecieved(Player receiver){
  if (this.whisperTracker.containsKey(receiver)) {
    return ((Whispers)this.whisperTracker.get(receiver)).lastFrom;
  }
  return null;
}","public String getLastWhisperRecieved(Player receiver){
  if (this.whisperTracker.containsKey(receiver.getName())) {
    return ((Whispers)this.whisperTracker.get(receiver.getName())).lastFrom;
  }
  return null;
}",0.3645320197044335
45299,"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  String argString=StringHelper.join(args,0);
  if (args.length == 0) {
    return false;
  }
  if (sender instanceof Player) {
    Player player=(Player)sender;
    ChatChannel chan=plugin.channelHelper.getChannelFromName(argString);
    if (chan != null) {
      ChatChannelJoinEvent ccje=new ChatChannelJoinEvent(player,chan,""String_Node_Str"",false,true,true,false);
      server.getPluginManager().callEvent(ccje);
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  String argString=StringHelper.join(args,0);
  if (args.length == 0) {
    return false;
  }
  if (sender instanceof Player) {
    Player player=(Player)sender;
    ChatChannel chan=plugin.channelHelper.getChannelFromName(argString);
    if (chan != null) {
      Boolean alertOthers=!(chan.getId().equals(""String_Node_Str"") || chan.getId().equals(""String_Node_Str""));
      ChatChannelJoinEvent ccje=new ChatChannelJoinEvent(player,chan,""String_Node_Str"",false,true,alertOthers,false);
      server.getPluginManager().callEvent(ccje);
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
  return false;
}",0.907624633431085
45300,"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  String argString=StringHelper.join(args,0);
  if (sender instanceof Player) {
    Player player=(Player)sender;
    Player reply=plugin.whisperTracker.getLastWhisperRecieved(player);
    if (reply != null) {
      ChatWhisperEvent cwe=new ChatWhisperEvent(player,reply,argString);
      server.getPluginManager().callEvent(cwe);
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  String argString=StringHelper.join(args,0);
  if (sender instanceof Player) {
    Player player=(Player)sender;
    String name=plugin.whisperTracker.getLastWhisperRecieved(player);
    if (name != null) {
      List<Player> matches=plugin.getServer().matchPlayer(name);
      if (matches.size() > 0) {
        Player reply=matches.get(0);
        ChatWhisperEvent cwe=new ChatWhisperEvent(player,reply,argString);
        server.getPluginManager().callEvent(cwe);
      }
 else {
        player.sendMessage(String.format(""String_Node_Str"",name));
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
  return false;
}",0.7941403238242097
45301,"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  String argString=StringHelper.join(args,0);
  if (sender instanceof Player) {
    Player player=(Player)sender;
    Player rewhisper=plugin.whisperTracker.getLastWhisperSent(player);
    if (rewhisper != null) {
      ChatWhisperEvent cwe=new ChatWhisperEvent(player,rewhisper,argString);
      server.getPluginManager().callEvent(cwe);
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  String argString=StringHelper.join(args,0);
  if (sender instanceof Player) {
    Player player=(Player)sender;
    String name=plugin.whisperTracker.getLastWhisperSent(player);
    if (name != null) {
      List<Player> matches=plugin.getServer().matchPlayer(name);
      if (matches.size() > 0) {
        Player rewhisper=plugin.getServer().matchPlayer(name).get(0);
        ChatWhisperEvent cwe=new ChatWhisperEvent(player,rewhisper,argString);
        server.getPluginManager().callEvent(cwe);
      }
 else {
        player.sendMessage(String.format(""String_Node_Str"",name));
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
  return false;
}",0.7354260089686099
45302,"public static List<String> getIgnoreList(Player player){
  return ignoreList.get(player);
}","public static List<String> getIgnoreList(Player player){
  return ignoreList.get(player.getName());
}",0.9479166666666666
45303,"@Override public List<Document> buildSplitGpx(int preferredInstrNum){
  List<Document> gpxList=new ArrayList<Document>();
  List<Waypoint> instructions=gpx.getInstructions();
  int splitFiles=howManyFiles(instructions.size(),preferredInstrNum);
  int currInstr=0;
  int fileNum=1;
  while (fileNum <= splitFiles) {
    Document newGpxDocument=createGpxTemplate();
    Element route=new Element(Gpx.RTE_TAG);
    for (int i=0; i < preferredInstrNum; i++) {
      Waypoint currentInstruction=instructions.get(currInstr);
      Element routePt=new Element(Gpx.RTEPT_TAG);
      routePt.setAttribute(Gpx.LATITUDE_TAG,currentInstruction.getLatitude());
      routePt.setAttribute(Gpx.LONGITUDE_TAG,currentInstruction.getLongitude());
      Element ele=new Element(Gpx.ELEMENT_TAG);
      ele.setText(currentInstruction.getElement());
      routePt.setContent(ele);
      Element name=new Element(Gpx.ELEMENT_TAG);
      name.setText(currentInstruction.getElement());
      routePt.setContent(name);
      route.addContent(routePt);
      currInstr++;
    }
    newGpxDocument.getRootElement().setContent(route);
    gpxList.add(newGpxDocument);
    fileNum++;
  }
  return gpxList;
}","@Override public List<Document> buildSplitGpx(int preferredInstrNum){
  List<Document> gpxList=new ArrayList<Document>();
  List<Waypoint> instructions=gpx.getInstructions();
  int splitFiles=howManyFiles(instructions.size(),preferredInstrNum);
  int currInstr=0;
  int fileNum=1;
  while (fileNum <= splitFiles) {
    Document newGpxDocument=createGpxTemplate();
    Element route=new Element(Gpx.RTE_TAG);
    for (int i=0; i < preferredInstrNum; i++) {
      try {
        Waypoint currentInstruction=instructions.get(currInstr);
        Element routePt=new Element(Gpx.RTEPT_TAG);
        routePt.setAttribute(Gpx.LATITUDE_TAG,currentInstruction.getLatitude());
        routePt.setAttribute(Gpx.LONGITUDE_TAG,currentInstruction.getLongitude());
        Element ele=new Element(Gpx.ELEMENT_TAG);
        ele.setText(currentInstruction.getElement());
        routePt.setContent(ele);
        Element name=new Element(Gpx.ELEMENT_TAG);
        name.setText(currentInstruction.getElement());
        routePt.setContent(name);
        route.addContent(routePt);
        currInstr++;
      }
 catch (      IndexOutOfBoundsException e) {
        break;
      }
    }
    newGpxDocument.getRootElement().setContent(route);
    gpxList.add(newGpxDocument);
    fileNum++;
  }
  return gpxList;
}",0.9546191247974068
45304,"@Override public void build(File file,int preferedInstrNum) throws IOException {
  int fileNum=1;
  int instrNum=1;
  while (fileNum <= fileNum) {
    Document newGpxDocument=createGpxTemplate();
    Element rteSeg=new Element(""String_Node_Str"");
    for (    Waypoint wpt : gpx.getInstructions()) {
      Element rtePt=new Element(""String_Node_Str"");
      rtePt.setAttribute(Gpx.LATITUDE_TAG,wpt.getLatitude());
      rtePt.setAttribute(Gpx.LONGITUDE_TAG,wpt.getLongitude());
      Element ele=new Element(Gpx.ELEMENT_TAG);
      ele.setText(wpt.getElement());
      rtePt.setContent(ele);
      rteSeg.setContent(rtePt);
    }
    newGpxDocument.setContent(rteSeg);
    saveFile(new File(file.getName() + ""String_Node_Str"" + fileNum+ GPX_FORMAT),newGpxDocument);
    instrNum--;
    fileNum++;
  }
}","@Override public void build(File file,int preferedInstrNum) throws IOException {
  int fileNum=1;
  List<Document> docs=buildSplitGpx(preferedInstrNum);
  for (  Document newGpxDocument : docs) {
    saveFile(new File(stripExtension(file.getAbsolutePath(),GPX_FORMAT) + ""String_Node_Str"" + fileNum+ GPX_FORMAT),newGpxDocument);
    fileNum++;
  }
}",0.288695652173913
45305,"@Override public List<Document> buildSplitGpx(int preferredInstrNum){
  List<Document> gpxList=new ArrayList<Document>();
  List<Waypoint> instructions=gpx.getInstructions();
  int splitFiles=howManyFiles(instructions.size(),preferredInstrNum);
  int currInstr=0;
  int fileNum=1;
  while (fileNum <= splitFiles) {
    Document newGpxDocument=createGpxTemplate();
    Element track=new Element(Gpx.TRK_TAG);
    Element trackSegment=new Element(Gpx.TRACKSEGMENT_TAG);
    track.setContent(trackSegment);
    for (int i=0; i < preferredInstrNum; i++) {
      Waypoint currentInstruction=instructions.get(currInstr);
      Element trackPoint=new Element(Gpx.TRACKPOINT);
      trackPoint.setAttribute(Gpx.LATITUDE_TAG,currentInstruction.getLatitude());
      trackPoint.setAttribute(Gpx.LONGITUDE_TAG,currentInstruction.getLongitude());
      Element ele=new Element(Gpx.ELEMENT_TAG);
      ele.setText(currentInstruction.getElement());
      trackPoint.setContent(ele);
      trackSegment.addContent(trackPoint);
      currInstr++;
    }
    newGpxDocument.getRootElement().setContent(track);
    gpxList.add(newGpxDocument);
    fileNum++;
  }
  return gpxList;
}","@Override public List<Document> buildSplitGpx(int preferredInstrNum){
  List<Document> gpxList=new ArrayList<Document>();
  List<Waypoint> instructions=gpx.getInstructions();
  int splitFiles=howManyFiles(instructions.size(),preferredInstrNum);
  int currInstr=0;
  int fileNum=1;
  while (fileNum <= splitFiles) {
    Document newGpxDocument=createGpxTemplate();
    Element track=new Element(Gpx.TRK_TAG);
    Element trackSegment=new Element(Gpx.TRACKSEGMENT_TAG);
    track.setContent(trackSegment);
    for (int i=0; i < preferredInstrNum; i++) {
      try {
        Waypoint currentInstruction=instructions.get(currInstr);
        Element trackPoint=new Element(Gpx.TRACKPOINT);
        trackPoint.setAttribute(Gpx.LATITUDE_TAG,currentInstruction.getLatitude());
        trackPoint.setAttribute(Gpx.LONGITUDE_TAG,currentInstruction.getLongitude());
        Element ele=new Element(Gpx.ELEMENT_TAG);
        ele.setText(currentInstruction.getElement());
        trackPoint.setContent(ele);
        trackSegment.addContent(trackPoint);
        currInstr++;
      }
 catch (      IndexOutOfBoundsException e) {
        break;
      }
    }
    newGpxDocument.getRootElement().setContent(track);
    gpxList.add(newGpxDocument);
    fileNum++;
  }
  return gpxList;
}",0.9185855263157896
45306,"private void saveGpxFile(){
  String numOfInstructions=view.getInstructionsNumber();
  if (!isAValidInteger(numOfInstructions)) {
    view.showMessage(""String_Node_Str"");
    return;
  }
  int instNum=Integer.parseInt(numOfInstructions);
  String gpxType=view.getHighlightedGpxType();
  String fileName=view.getNewGpxFileName();
  if (fileName.isEmpty()) {
    view.showMessage(""String_Node_Str"");
    return;
  }
  try {
    JFileChooser saveFileChooser=new JFileChooser(fileName);
    saveFileChooser.setFileFilter(new GpxFileFilter());
    saveFileChooser.showSaveDialog(view);
    saveGpxFile(instNum,gpxType,saveFileChooser.getSelectedFile());
  }
 catch (  IOException e) {
    view.showMessage(""String_Node_Str"");
  }
}","private void saveGpxFile(){
  String numOfInstructions=view.getInstructionsNumber();
  if (!isAValidInteger(numOfInstructions)) {
    view.showMessage(""String_Node_Str"");
    return;
  }
  int instNum=Integer.parseInt(numOfInstructions);
  String gpxType=view.getHighlightedGpxType();
  String fileName=view.getNewGpxFileName();
  if (fileName.isEmpty()) {
    view.showMessage(""String_Node_Str"");
    return;
  }
  try {
    JFileChooser saveFileChooser=new JFileChooser();
    saveFileChooser.setSelectedFile(new File(fileName));
    saveFileChooser.setFileFilter(new GpxFileFilter());
    saveFileChooser.showSaveDialog(view);
    saveGpxFile(instNum,gpxType,saveFileChooser.getSelectedFile());
  }
 catch (  IOException e) {
    view.showMessage(""String_Node_Str"");
  }
}",0.9673550966022652
45307,"/** 
 * This method will build a set of GPX files given the file name, number of GPX instructions per file and the number of files to be built. TODO: split this method so it returns a testable gpx document. TODO: do we need to pass in the num of instructions
 * @param file
 * @param instNum
 * @param filesNum
 * @throws IOException
 */
public void build(File file,int totalInstructionsNum,int filesNum) throws IOException {
  int fileNum=1;
  int instrNum=1;
  while (fileNum <= filesNum) {
    Document newGpxDocument=createNewGpx();
    Element rteSeg=new Element(""String_Node_Str"");
    for (    WayPoint wpt : gpx.getIntructions()) {
      Element rtePt=new Element(""String_Node_Str"");
      rtePt.setAttribute(""String_Node_Str"",wpt.getLatitude() + ""String_Node_Str"");
      rtePt.setAttribute(""String_Node_Str"",wpt.getLongitude() + ""String_Node_Str"");
      Element ele=new Element(""String_Node_Str"");
      ele.setText(wpt.getElement());
      rtePt.setContent(ele);
      rteSeg.setContent(rtePt);
    }
    newGpxDocument.setContent(rteSeg);
    saveFile(new File(file + ""String_Node_Str"" + fileNum+ GPX_FORMAT),newGpxDocument);
    instrNum--;
    fileNum++;
  }
}","/** 
 * This method will build a set of GPX files given the file name, number of GPX instructions per file and the number of files to be built. TODO: split this method so it returns a testable gpx document. TODO: do we need to pass in the num of instructions TODO: fix multiple files bug
 * @param file
 * @param instNum
 * @param filesNum
 * @throws IOException
 */
public void build(File file,int totalInstructionsNum,int filesNum) throws IOException {
  int fileNum=1;
  int instrNum=1;
  while (fileNum <= filesNum) {
    Document newGpxDocument=createNewGpx();
    Element track=new Element(""String_Node_Str"");
    Element trackSegment=new Element(""String_Node_Str"");
    track.setContent(trackSegment);
    for (    WayPoint wpt : gpx.getIntructions()) {
      Element trackPoint=new Element(""String_Node_Str"");
      trackPoint.setAttribute(""String_Node_Str"",wpt.getLatitude() + ""String_Node_Str"");
      trackPoint.setAttribute(""String_Node_Str"",wpt.getLongitude() + ""String_Node_Str"");
      Element ele=new Element(""String_Node_Str"");
      ele.setText(wpt.getElement());
      trackPoint.setContent(ele);
      trackSegment.addContent(trackPoint);
    }
    newGpxDocument.getRootElement().setContent(track);
    saveFile(new File(file + ""String_Node_Str"" + fileNum+ GPX_FORMAT),newGpxDocument);
    instrNum--;
    fileNum++;
  }
}",0.9046862589356632
45308,"public double calculatetax(){
  if (age < 60) {
switch (gender) {
case 'M':
      if (totalSalary <= 180000)       return 0.0;
    if (totalSalary <= 500000)     return (totalSalary - 180000) * 0.10;
  if (totalSalary <= 800000)   return 32000 + (totalSalary - 500000) * 0.20;
return 92000 + (totalSalary - 800000) * 0.30;
case 'F':
if (totalSalary <= 190000) return 0.0;
if (totalSalary <= 500000) return (totalSalary - 190000) * 0.10;
if (totalSalary <= 800000) return 31000 + (totalSalary - 500000) * 0.20;
return 91000 + (totalSalary - 800000) * 0.30;
default :
break;
}
}
 else if (age < 80) {
if (totalSalary <= 250000) return 0.0;
if (totalSalary <= 500000) return (totalSalary - 250000) * 0.10;
if (totalSalary <= 800000) return 25000 + (totalSalary - 500000) * 0.20;
return 75000 + (totalSalary - 800000) * 0.30;
}
if (totalSalary <= 500000) return 0.0;
 else if (totalSalary <= 800000) return (totalSalary - 500000) * 0.20;
return 60000 + (totalSalary - 800000) * 0.30;
}","public double calculatetax(){
  if (age < 60) {
switch (gender) {
case 'M':
      if (totalSalary <= 180000)       return 0.0;
    if (totalSalary <= 500000)     return (totalSalary - 180000) * 0.10;
  if (totalSalary <= 800000)   return 32000 + (totalSalary - 500000) * 0.20;
return 92000 + (totalSalary - 800000) * 0.30;
case 'F':
if (totalSalary <= 190000) return 0.0;
if (totalSalary <= 500000) return (totalSalary - 190000) * 0.10;
if (totalSalary <= 800000) return 31000 + (totalSalary - 500000) * 0.20;
return 91000 + (totalSalary - 800000) * 0.30;
default :
break;
}
}
 else if (age < 80) {
if (totalSalary <= 250000) return 0.0;
if (totalSalary <= 500000) return (totalSalary - 250000) * 0.10;
if (totalSalary <= 800000) return 25000 + (totalSalary - 500000) * 0.20;
return 85000 + (totalSalary - 800000) * 0.30;
}
if (totalSalary <= 500000) return 0.0;
 else if (totalSalary <= 800000) return (totalSalary - 500000) * 0.20;
return 60000 + (totalSalary - 800000) * 0.30;
}",0.9989806320081548
45309,"@Test public void taxForSeniorCitizenIfInThirdIncomeSlab(){
  assertEquals(78000.0,new Salary('M',60,810000).calculatetax(),0.1);
}","@Test public void taxForSeniorCitizenIfInThirdIncomeSlab(){
  assertEquals(88000.0,new Salary('M',60,810000).calculatetax(),0.1);
}",0.9923664122137404
45310,"public boolean play(CellKey this_cell_key,Player this_player){
  assert(cell_space != null);
  assert(started);
  Cell this_cell=cell_space.get_cell_from_key(this_cell_key);
  if (this_cell != null)   return play(this_cell,this_player);
 else   return false;
}","public boolean play(CellKey this_cell_key,Player this_player){
  assert(myCellSpace != null);
  assert(started);
  Cell this_cell=myCellSpace.get_cell_from_key(this_cell_key);
  if (this_cell != null)   return play(this_cell,this_player);
 else   return false;
}",0.950191570881226
45311,"public void set_listener(GameListener this_listener){
  my_listener=this_listener;
}","public void set_listener(GameListener this_listener){
  myListener=this_listener;
}",0.9820359281437124
45312,"protected Game(){
  players=new LinkedHashSet<Player>();
  pieces=new LinkedHashSet<Piece>();
  started=false;
  my_listener=null;
}","protected Game(){
  myPlayers=new LinkedHashSet<Player>();
  pieces=new LinkedHashSet<Piece>();
  started=false;
  myListener=null;
}",0.9735849056603774
45313,protected abstract void next_player();,"protected void next_player(){
  if (playerTurn.hasNext()) {
    currentPlayer=playerTurn.next();
    if (!currentPlayer.is_alive())     next_player();
    assert(currentPlayer != null);
  }
 else   select_first_player();
}",0.2153846153846154
45314,protected abstract void select_first_player();,"protected void select_first_player(){
  playerTurn=getPlayers().iterator();
  currentPlayer=playerTurn.next();
  if (!currentPlayer.is_alive())   next_player();
  assert(currentPlayer != null);
}",0.3070539419087137
45315,"public void start(){
  assert(players.size() > 1);
  select_first_player();
  started=true;
}","public void start(){
  assert(myPlayers.size() > 1);
  select_first_player();
  started=true;
}",0.9787234042553192
45316,"public ReadOnlyCellSpace get_cell_space_view(){
  assert(cell_space != null);
  return cell_space;
}","public ReadOnlyCellSpace get_cell_space_view(){
  assert(myCellSpace != null);
  return myCellSpace;
}",0.9306930693069309
45317,public abstract Player get_current_player();,"public Player get_current_player(){
  return currentPlayer;
}",0.6666666666666666
45318,"protected void win(Player winner){
  if (my_listener != null)   my_listener.on_win(this,winner);
}","protected void win(Player winner){
  if (myListener != null) {
    myListener.on_win(this,winner);
  }
}",0.9306930693069309
45319,"public void change_owner(Player this_player){
  Player old_owner=owner;
  old_owner.loose_a_piece(this);
  owner=this_player;
  owner.win_a_piece(this);
  if (my_listener != null)   my_listener.on_owner_changed(this,old_owner,owner);
}","public void change_owner(Player this_player){
  Player old_owner=owner;
  old_owner.looseAPiece(this);
  owner=this_player;
  owner.winAPiece(this);
  if (my_listener != null)   my_listener.on_owner_changed(this,old_owner,owner);
}",0.871244635193133
45320,"public Player(String this_name){
  super(this_name);
}","public Player(String thisName){
  super(thisName);
}",0.9433962264150944
45321,"public void addCard(View view){
  original=((EditText)findViewById(R.id.translate)).getText().toString();
  translation=((TextView)findViewById(R.id.translation)).getText().toString();
  if (!dialog) {
    dialog=true;
    mDialog.setMessage(""String_Node_Str"");
    mDialog.show();
  }
  new Thread(new Runnable(){
    public void run(){
      try {
        System.out.println(""String_Node_Str"");
        HttpClient httpClient=new DefaultHttpClient();
        HttpContext localContext=new BasicHttpContext();
        HttpPost httpPost=new HttpPost(""String_Node_Str"");
        httpPost.addHeader(BasicScheme.authenticate(new UsernamePasswordCredentials(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",false));
        MultipartEntity entity=new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
        ByteArrayOutputStream bos=new ByteArrayOutputStream();
        resizedBitmap.compress(CompressFormat.JPEG,100,bos);
        byte[] data=bos.toByteArray();
        entity.addPart(""String_Node_Str"",new ByteArrayBody(data,original + ""String_Node_Str""));
        entity.addPart(""String_Node_Str"",new StringBody(original));
        entity.addPart(""String_Node_Str"",new StringBody(""String_Node_Str""));
        httpPost.setEntity(entity);
        HttpResponse response=httpClient.execute(httpPost,localContext);
        ResponseHandler<String> responseHandler=new BasicResponseHandler();
        String s_response=httpClient.execute(httpPost,responseHandler);
        submissionHandler.sendMessage(Message.obtain());
        System.out.println(s_response);
      }
 catch (      Throwable t) {
        System.out.println(""String_Node_Str"" + t.toString());
      }
    }
  }
).start();
}","public void addCard(View view){
  translation=tv_Translation.getText().toString();
  if (!dialog) {
    dialog=true;
    mDialog.setMessage(""String_Node_Str"");
    mDialog.show();
  }
  new Thread(new Runnable(){
    public void run(){
      try {
        System.out.println(""String_Node_Str"");
        HttpClient httpClient=new DefaultHttpClient();
        HttpContext localContext=new BasicHttpContext();
        HttpPost httpPost=new HttpPost(""String_Node_Str"");
        httpPost.addHeader(BasicScheme.authenticate(new UsernamePasswordCredentials(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",false));
        MultipartEntity entity=new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
        ByteArrayOutputStream bos=new ByteArrayOutputStream();
        resizedBitmap.compress(CompressFormat.JPEG,100,bos);
        byte[] data=bos.toByteArray();
        entity.addPart(""String_Node_Str"",new ByteArrayBody(data,original + ""String_Node_Str""));
        entity.addPart(""String_Node_Str"",new StringBody(original));
        entity.addPart(""String_Node_Str"",new StringBody(""String_Node_Str""));
        httpPost.setEntity(entity);
        HttpResponse response=httpClient.execute(httpPost,localContext);
        ResponseHandler<String> responseHandler=new BasicResponseHandler();
        String s_response=httpClient.execute(httpPost,responseHandler);
        submissionHandler.sendMessage(Message.obtain());
        System.out.println(s_response);
      }
 catch (      Throwable t) {
        System.out.println(""String_Node_Str"" + t.toString());
      }
    }
  }
).start();
}",0.9543239951278928
45322,"public void translateWord(View view){
  if (!dialog) {
    dialog=true;
    mDialog.setMessage(""String_Node_Str"");
    mDialog.show();
  }
  new Thread(new Runnable(){
    public void run(){
      try {
        Message msg=Message.obtain();
        Bundle bundle=new Bundle();
        bundle.putString(""String_Node_Str"",""String_Node_Str"");
        msg.setData(bundle);
        translationHandler.sendMessage(msg);
        DefaultHttpClient client=new DefaultHttpClient();
        HttpPost post=new HttpPost(""String_Node_Str"");
        post.addHeader(BasicScheme.authenticate(new UsernamePasswordCredentials(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",false));
        List<NameValuePair> form=new ArrayList<NameValuePair>();
        form.add(new BasicNameValuePair(""String_Node_Str"",et_Original.getText().toString()));
        post.setEntity(new UrlEncodedFormEntity(form,HTTP.UTF_8));
        ResponseHandler<String> responseHandler=new BasicResponseHandler();
        String responseBody=client.execute(post,responseHandler);
        JSONObject word=new JSONObject(responseBody);
        String translated_word=word.getString(""String_Node_Str"");
        Message msg_translated=Message.obtain();
        bundle.putString(""String_Node_Str"",translated_word);
        msg_translated.setData(bundle);
        translationHandler.sendMessage(msg_translated);
      }
 catch (      Exception t) {
        System.out.println(t.toString());
      }
    }
  }
).start();
}","public void translateWord(View view){
  if (!dialog) {
    dialog=true;
    mDialog.setMessage(""String_Node_Str"");
    mDialog.show();
  }
  new Thread(new Runnable(){
    public void run(){
      try {
        original=et_Original.getText().toString();
        if (original.endsWith(""String_Node_Str"")) {
          original=original.substring(0,original.length() - 1);
        }
 else         if (original.contains(""String_Node_Str"")) {
          Message msg=Message.obtain();
          Bundle bundle=new Bundle();
          bundle.putString(""String_Node_Str"",""String_Node_Str"");
          bundle.putInt(""String_Node_Str"",1);
          msg.setData(bundle);
          translationHandler.sendMessage(msg);
        }
 else         if (original.compareTo(""String_Node_Str"") == 0) {
          Message msg=Message.obtain();
          Bundle bundle=new Bundle();
          bundle.putString(""String_Node_Str"",""String_Node_Str"");
          bundle.putInt(""String_Node_Str"",1);
          msg.setData(bundle);
          translationHandler.sendMessage(msg);
        }
 else {
          Message msg=Message.obtain();
          Bundle bundle=new Bundle();
          bundle.putString(""String_Node_Str"",""String_Node_Str"");
          bundle.putInt(""String_Node_Str"",0);
          msg.setData(bundle);
          translationHandler.sendMessage(msg);
          DefaultHttpClient client=new DefaultHttpClient();
          HttpPost post=new HttpPost(""String_Node_Str"");
          post.addHeader(BasicScheme.authenticate(new UsernamePasswordCredentials(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",false));
          List<NameValuePair> form=new ArrayList<NameValuePair>();
          form.add(new BasicNameValuePair(""String_Node_Str"",original));
          post.setEntity(new UrlEncodedFormEntity(form,HTTP.UTF_8));
          ResponseHandler<String> responseHandler=new BasicResponseHandler();
          String responseBody=client.execute(post,responseHandler);
          JSONObject word=new JSONObject(responseBody);
          String translated_word=word.getString(""String_Node_Str"");
          Message msg_translated=Message.obtain();
          bundle.putString(""String_Node_Str"",translated_word);
          bundle.putInt(""String_Node_Str"",0);
          msg_translated.setData(bundle);
          translationHandler.sendMessage(msg_translated);
        }
      }
 catch (      Exception t) {
        System.out.println(t.toString());
      }
    }
  }
).start();
}",0.7327388535031847
45323,"protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == CAMERA_PIC_REQUEST) {
    final File file=getTempFile(this);
    try {
      pic=Media.getBitmap(getContentResolver(),Uri.fromFile(file));
      int srcWidth=pic.getWidth();
      int srcHeight=pic.getHeight();
      int desiredWidth=350;
      int desiredHeight=350;
      if (srcWidth > srcHeight && srcWidth > desiredWidth) {
        float scaleRatio=(float)srcWidth / (float)desiredWidth;
        float newHeight=(float)srcHeight / scaleRatio;
        resizedBitmap=Bitmap.createScaledBitmap(pic,desiredWidth,(int)newHeight,true);
        pic.recycle();
      }
 else       if (srcHeight > desiredHeight) {
        float scaleRatio=(float)srcHeight / (float)desiredWidth;
        float newWidth=(float)srcWidth / scaleRatio;
        resizedBitmap=Bitmap.createScaledBitmap(pic,(int)newWidth,desiredHeight,true);
        pic.recycle();
      }
      tookPic=true;
      iv_Image.setImageBitmap(resizedBitmap);
      iv_Image.setVisibility(View.VISIBLE);
      b_AddCard.setVisibility(View.VISIBLE);
      ib_Camera.setVisibility(View.GONE);
      tv_TakeAPic.setVisibility(View.GONE);
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == CAMERA_PIC_REQUEST) {
    final File file=getTempFile(this);
    try {
      pic=Media.getBitmap(getContentResolver(),Uri.fromFile(file));
      int srcWidth=pic.getWidth();
      int srcHeight=pic.getHeight();
      int desiredWidth=350;
      int desiredHeight=350;
      if (srcWidth > srcHeight && srcWidth > desiredWidth) {
        float scaleRatio=(float)srcWidth / (float)desiredWidth;
        float newHeight=(float)srcHeight / scaleRatio;
        resizedBitmap=Bitmap.createScaledBitmap(pic,desiredWidth,(int)newHeight,true);
        pic.recycle();
      }
 else       if (srcHeight > desiredHeight) {
        float scaleRatio=(float)srcHeight / (float)desiredWidth;
        float newWidth=(float)srcWidth / scaleRatio;
        resizedBitmap=Bitmap.createScaledBitmap(pic,(int)newWidth,desiredHeight,true);
        pic.recycle();
      }
      tookPic=true;
      et_Original.setText(original);
      iv_Image.setImageBitmap(resizedBitmap);
      iv_Image.setVisibility(View.VISIBLE);
      b_AddCard.setVisibility(View.VISIBLE);
      ib_Camera.setVisibility(View.GONE);
      tv_TakeAPic.setVisibility(View.GONE);
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.9862810530218762
45324,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.game);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.personal);
}",0.9735449735449736
45325,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.viewcard);
  Bundle extras=getIntent().getExtras();
  pos=(Integer)extras.get(""String_Node_Str"");
  num=(Integer)extras.get(""String_Node_Str"");
  listOfWords=new String[num + 1];
  listOfForeign=new String[num + 1];
  listOfImageUrls=new String[num + 1];
  for (int i=0; i < num; i++) {
    listOfWords[i]=extras.getString(""String_Node_Str"" + i);
    listOfForeign[i]=extras.getString(""String_Node_Str"" + i);
    listOfImageUrls[i]=extras.getString(""String_Node_Str"" + i);
  }
  String foreign=listOfForeign[pos];
  String word=listOfWords[pos];
  Toast.makeText(ViewCard.this,""String_Node_Str"" + ((Integer)pos).toString() + ""String_Node_Str""+ ((Integer)num).toString(),Toast.LENGTH_SHORT).show();
  tv_wordZero=(TextView)findViewById(R.id.wordZero);
  tv_foreignZero=(TextView)findViewById(R.id.foreignZero);
  iv_imageZero=(ImageView)findViewById(R.id.imageZero);
  tv_wordOne=(TextView)findViewById(R.id.wordOne);
  tv_foreignOne=(TextView)findViewById(R.id.foreignOne);
  iv_imageOne=(ImageView)findViewById(R.id.imageOne);
  tv_wordTwo=(TextView)findViewById(R.id.wordTwo);
  tv_foreignTwo=(TextView)findViewById(R.id.foreignTwo);
  iv_imageTwo=(ImageView)findViewById(R.id.imageTwo);
  vf_flipper=(ViewFlipper)findViewById(R.id.viewflipper);
  tv_wordZero.setText(word);
  tv_foreignZero.setText(foreign);
  Drawable pic=Utils.loadDrawable(listOfImageUrls[pos]);
  iv_imageZero.setBackgroundDrawable(pic);
  gestureDetector=new GestureDetector(new MyGestureDetector());
  gestureListener=new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (gestureDetector.onTouchEvent(event)) {
        return true;
      }
      return false;
    }
  }
;
  iv_imageZero.setOnTouchListener(gestureListener);
  iv_imageOne.setOnTouchListener(gestureListener);
  iv_imageTwo.setOnTouchListener(gestureListener);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.viewcard);
  Bundle extras=getIntent().getExtras();
  pos=(Integer)extras.get(""String_Node_Str"");
  num=(Integer)extras.get(""String_Node_Str"");
  listOfWords=new String[num + 1];
  listOfForeign=new String[num + 1];
  listOfImageUrls=new String[num + 1];
  for (int i=0; i < num; i++) {
    listOfWords[i]=extras.getString(""String_Node_Str"" + i);
    listOfForeign[i]=extras.getString(""String_Node_Str"" + i);
    listOfImageUrls[i]=extras.getString(""String_Node_Str"" + i);
  }
  String foreign=listOfForeign[pos];
  String word=listOfWords[pos];
  Toast.makeText(ViewCard.this,""String_Node_Str"" + ((Integer)pos).toString() + ""String_Node_Str""+ ((Integer)num).toString(),Toast.LENGTH_SHORT).show();
  tv_wordZero=(TextView)findViewById(R.id.wordZero);
  tv_foreignZero=(TextView)findViewById(R.id.foreignZero);
  iv_imageZero=(ImageView)findViewById(R.id.imageZero);
  tv_wordOne=(TextView)findViewById(R.id.wordOne);
  tv_foreignOne=(TextView)findViewById(R.id.foreignOne);
  iv_imageOne=(ImageView)findViewById(R.id.imageOne);
  tv_wordTwo=(TextView)findViewById(R.id.wordTwo);
  tv_foreignTwo=(TextView)findViewById(R.id.foreignTwo);
  iv_imageTwo=(ImageView)findViewById(R.id.imageTwo);
  vf_flipper=(ViewFlipper)findViewById(R.id.viewflipper);
  tv_wordZero.setText(word);
  tv_foreignZero.setText(foreign);
  Bitmap pic=Utils.getBitmapFromURL(listOfImageUrls[pos]);
  Bitmap resizedBitmap=resize(pic);
  iv_imageZero.setImageBitmap(resizedBitmap);
  gestureDetector=new GestureDetector(new MyGestureDetector());
  gestureListener=new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (gestureDetector.onTouchEvent(event)) {
        return true;
      }
      return false;
    }
  }
;
  iv_imageZero.setOnTouchListener(gestureListener);
  iv_imageOne.setOnTouchListener(gestureListener);
  iv_imageTwo.setOnTouchListener(gestureListener);
}",0.9641200878691726
45326,"@Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){
  try {
    if (e1.getX() - e2.getX() > SWIPE_MIN_DISTANCE && Math.abs(velocityX) > SWIPE_THRESHOLD_VELOCITY) {
      vf_flipper.setInAnimation(AnimationUtils.inFromRightAnimation());
      vf_flipper.setOutAnimation(AnimationUtils.outToLeftAnimation());
      if (pos == (num - 1))       pos=0;
 else       pos++;
      Drawable pic=Utils.loadDrawable(listOfImageUrls[pos]);
      if (currentView == 0) {
        currentView=1;
        tv_wordOne.setText(listOfWords[pos]);
        tv_foreignOne.setText(listOfForeign[pos]);
        iv_imageOne.setBackgroundDrawable(pic);
      }
 else       if (currentView == 1) {
        currentView=2;
        tv_wordTwo.setText(listOfWords[pos]);
        tv_foreignTwo.setText(listOfForeign[pos]);
        iv_imageTwo.setBackgroundDrawable(pic);
      }
 else {
        currentView=0;
        tv_wordZero.setText(listOfWords[pos]);
        tv_foreignZero.setText(listOfForeign[pos]);
        iv_imageZero.setBackgroundDrawable(pic);
      }
      vf_flipper.showNext();
    }
 else     if (e2.getX() - e1.getX() > SWIPE_MIN_DISTANCE && Math.abs(velocityX) > SWIPE_THRESHOLD_VELOCITY) {
      vf_flipper.setInAnimation(AnimationUtils.inFromLeftAnimation());
      vf_flipper.setOutAnimation(AnimationUtils.outToRightAnimation());
      if (pos == 0)       pos=(num - 1);
 else       pos--;
      Drawable pic=Utils.loadDrawable(listOfImageUrls[pos]);
      if (currentView == 0) {
        currentView=2;
        tv_wordTwo.setText(listOfWords[pos]);
        tv_foreignTwo.setText(listOfForeign[pos]);
        iv_imageTwo.setBackgroundDrawable(pic);
      }
 else       if (currentView == 2) {
        currentView=1;
        tv_wordOne.setText(listOfWords[pos]);
        tv_foreignOne.setText(listOfForeign[pos]);
        iv_imageOne.setBackgroundDrawable(pic);
      }
 else {
        currentView=0;
        tv_wordZero.setText(listOfWords[pos]);
        tv_foreignZero.setText(listOfForeign[pos]);
        iv_imageZero.setBackgroundDrawable(pic);
      }
      vf_flipper.showPrevious();
    }
  }
 catch (  Exception e) {
    System.out.println(e.toString());
  }
  return true;
}","@Override public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY){
  try {
    if (e1.getX() - e2.getX() > SWIPE_MIN_DISTANCE && Math.abs(velocityX) > SWIPE_THRESHOLD_VELOCITY) {
      vf_flipper.setInAnimation(AnimationUtils.inFromRightAnimation());
      vf_flipper.setOutAnimation(AnimationUtils.outToLeftAnimation());
      if (pos == (num - 1))       pos=0;
 else       pos++;
      Bitmap pic=Utils.getBitmapFromURL(listOfImageUrls[pos]);
      Bitmap resizedBitmap=resize(pic);
      if (currentView == 0) {
        currentView=1;
        tv_wordOne.setText(listOfWords[pos]);
        tv_foreignOne.setText(listOfForeign[pos]);
        iv_imageOne.setImageBitmap(resizedBitmap);
      }
 else       if (currentView == 1) {
        currentView=2;
        tv_wordTwo.setText(listOfWords[pos]);
        tv_foreignTwo.setText(listOfForeign[pos]);
        iv_imageTwo.setImageBitmap(resizedBitmap);
      }
 else {
        currentView=0;
        tv_wordZero.setText(listOfWords[pos]);
        tv_foreignZero.setText(listOfForeign[pos]);
        iv_imageZero.setImageBitmap(resizedBitmap);
      }
      vf_flipper.showNext();
    }
 else     if (e2.getX() - e1.getX() > SWIPE_MIN_DISTANCE && Math.abs(velocityX) > SWIPE_THRESHOLD_VELOCITY) {
      vf_flipper.setInAnimation(AnimationUtils.inFromLeftAnimation());
      vf_flipper.setOutAnimation(AnimationUtils.outToRightAnimation());
      if (pos == 0)       pos=(num - 1);
 else       pos--;
      Bitmap pic=Utils.getBitmapFromURL(listOfImageUrls[pos]);
      Bitmap resizedBitmap=resize(pic);
      if (currentView == 0) {
        currentView=2;
        tv_wordTwo.setText(listOfWords[pos]);
        tv_foreignTwo.setText(listOfForeign[pos]);
        iv_imageTwo.setImageBitmap(resizedBitmap);
      }
 else       if (currentView == 2) {
        currentView=1;
        tv_wordOne.setText(listOfWords[pos]);
        tv_foreignOne.setText(listOfForeign[pos]);
        iv_imageOne.setImageBitmap(resizedBitmap);
      }
 else {
        currentView=0;
        tv_wordZero.setText(listOfWords[pos]);
        tv_foreignZero.setText(listOfForeign[pos]);
        iv_imageZero.setImageBitmap(resizedBitmap);
      }
      vf_flipper.showPrevious();
    }
  }
 catch (  Exception e) {
    System.out.println(e.toString());
  }
  return true;
}",0.8893785808726311
45327,"@Override public void handleImageLoaded(final ViewSwitcher vs,final ImageView iv,final Drawable draw){
  mHandler.post(new Runnable(){
    public void run(){
      iv.setImageDrawable(draw);
      vs.setDisplayedChild(1);
    }
  }
);
}","@Override public void handleImageLoaded(final ViewSwitcher vs,final ImageView iv,final Bitmap draw){
  mHandler.post(new Runnable(){
    public void run(){
      Bitmap resizedBitmap=Bitmap.createScaledBitmap(draw,85,85,true);
      draw.recycle();
      iv.setImageBitmap(resizedBitmap);
      vs.setDisplayedChild(1);
    }
  }
);
}",0.6
45328,"public void run(){
  iv.setImageDrawable(draw);
  vs.setDisplayedChild(1);
}","public void run(){
  Bitmap resizedBitmap=Bitmap.createScaledBitmap(draw,85,85,true);
  draw.recycle();
  iv.setImageBitmap(resizedBitmap);
  vs.setDisplayedChild(1);
}",0.5327868852459017
45329,"public int getCount(){
  return mUrls.length;
}","public int getCount(){
  return mUrls.length - 1;
}",0.9591836734693876
45330,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.game);
  choices[0]=(Button)findViewById(R.id.Button0);
  choices[1]=(Button)findViewById(R.id.Button1);
  choices[2]=(Button)findViewById(R.id.Button2);
  choices[3]=(Button)findViewById(R.id.Button3);
  tableLayout=(TableLayout)findViewById(R.id.buttonLayout);
  popup=(Button)findViewById(R.id.Popup);
  vibrator=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
  timerHandler=new Handler();
  timerUpdateRunnable=new Runnable(){
    public void run(){
      long secLeft=((timerEndTime - System.currentTimeMillis()) / 1000);
      timerText.setText(""String_Node_Str"" + secLeft);
      if (secLeft < 10) {
        vibrator.vibrate(200 * (10 - secLeft) / 10);
      }
      if (secLeft > 0)       timerHandler.postAtTime(this,SystemClock.uptimeMillis() + 200);
 else       gameOver();
    }
  }
;
  initializeGame();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.game);
  choices[0]=(Button)findViewById(R.id.Button0);
  choices[1]=(Button)findViewById(R.id.Button1);
  choices[2]=(Button)findViewById(R.id.Button2);
  choices[3]=(Button)findViewById(R.id.Button3);
  tableLayout=(TableLayout)findViewById(R.id.buttonLayout);
  title=(TextView)findViewById(R.id.Title);
  popup=(Button)findViewById(R.id.Popup);
  vibrator=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
  timerText=(TextView)findViewById(R.id.Timer);
  cardsText=(TextView)findViewById(R.id.CardsLeft);
  timerHandler=new Handler();
  timerUpdateRunnable=new Runnable(){
    public void run(){
      long secLeft=((timerEndTime - System.currentTimeMillis()) / 1000);
      timerText.setText(""String_Node_Str"" + secLeft);
      if (secLeft < 10) {
        vibrator.vibrate(200 * (10 - secLeft) / 10);
      }
      if (secLeft > 0)       timerHandler.postAtTime(this,SystemClock.uptimeMillis() + 200);
 else       gameOver();
    }
  }
;
  initializeGame();
}",0.9294117647058824
45331,"public void addCard(View view){
  translation=tv_Translation.getText().toString();
  if (!dialog) {
    dialog=true;
    mDialog.setMessage(""String_Node_Str"");
    mDialog.show();
  }
  new Thread(new Runnable(){
    public void run(){
      try {
        System.out.println(""String_Node_Str"");
        HttpClient httpClient=new DefaultHttpClient();
        HttpContext localContext=new BasicHttpContext();
        HttpPost httpPost=new HttpPost(""String_Node_Str"");
        httpPost.addHeader(BasicScheme.authenticate(new UsernamePasswordCredentials(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",false));
        MultipartEntity entity=new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
        ByteArrayOutputStream bos=new ByteArrayOutputStream();
        resizedBitmap.compress(CompressFormat.JPEG,100,bos);
        byte[] data=bos.toByteArray();
        entity.addPart(""String_Node_Str"",new ByteArrayBody(data,original + ""String_Node_Str""));
        entity.addPart(""String_Node_Str"",new StringBody(original));
        entity.addPart(""String_Node_Str"",new StringBody(""String_Node_Str""));
        httpPost.setEntity(entity);
        HttpResponse response=httpClient.execute(httpPost,localContext);
        ResponseHandler<String> responseHandler=new BasicResponseHandler();
        String s_response=httpClient.execute(httpPost,responseHandler);
        submissionHandler.sendMessage(Message.obtain());
        System.out.println(s_response);
      }
 catch (      Throwable t) {
        System.out.println(""String_Node_Str"" + t.toString());
      }
    }
  }
).start();
}","public void addCard(View view){
  if (!addingCard) {
    addingCard=true;
    translation=tv_Translation.getText().toString();
    System.out.println(""String_Node_Str"");
    if (!dialog) {
      dialog=true;
      mDialog.setMessage(""String_Node_Str"");
      mDialog.show();
    }
    new Thread(new Runnable(){
      public void run(){
        try {
          System.out.println(""String_Node_Str"");
          HttpClient httpClient=new DefaultHttpClient();
          HttpContext localContext=new BasicHttpContext();
          HttpPost httpPost=new HttpPost(""String_Node_Str"");
          httpPost.addHeader(BasicScheme.authenticate(new UsernamePasswordCredentials(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",false));
          MultipartEntity entity=new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
          ByteArrayOutputStream bos=new ByteArrayOutputStream();
          resizedBitmap.compress(CompressFormat.JPEG,100,bos);
          byte[] data=bos.toByteArray();
          entity.addPart(""String_Node_Str"",new ByteArrayBody(data,original + ""String_Node_Str""));
          entity.addPart(""String_Node_Str"",new StringBody(original));
          entity.addPart(""String_Node_Str"",new StringBody(""String_Node_Str""));
          httpPost.setEntity(entity);
          HttpResponse response=httpClient.execute(httpPost,localContext);
          ResponseHandler<String> responseHandler=new BasicResponseHandler();
          String s_response=httpClient.execute(httpPost,responseHandler);
          submissionHandler.sendMessage(Message.obtain());
          System.out.println(s_response);
        }
 catch (        Throwable t) {
          System.out.println(""String_Node_Str"" + t.toString());
        }
      }
    }
).start();
  }
}",0.9469583458195984
45332,"@Override public void handleMessage(Message msg){
  CharSequence text=""String_Node_Str"";
  Toast toast=Toast.makeText(getApplicationContext(),text,Toast.LENGTH_SHORT);
  toast.show();
  if (dialog) {
    dialog=false;
    mDialog.dismiss();
  }
  tookPic=false;
  iv_Image.setImageDrawable(null);
  tv_Translation.setText(""String_Node_Str"");
  if (resizedBitmap != null)   resizedBitmap.recycle();
  iv_Image.setVisibility(View.INVISIBLE);
  b_AddCard.setVisibility(View.INVISIBLE);
}","@Override public void handleMessage(Message msg){
  CharSequence text=""String_Node_Str"";
  Toast toast=Toast.makeText(getApplicationContext(),text,Toast.LENGTH_SHORT);
  toast.show();
  if (dialog) {
    dialog=false;
    mDialog.dismiss();
  }
  tookPic=false;
  iv_Image.setImageDrawable(null);
  tv_Translation.setText(""String_Node_Str"");
  if (resizedBitmap != null)   resizedBitmap.recycle();
  iv_Image.setVisibility(View.INVISIBLE);
  b_AddCard.setVisibility(View.INVISIBLE);
  addingCard=false;
}",0.979757085020243
45333,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.startup);
  TextView tv_location=(TextView)findViewById(R.id.location);
  SharedPreferences sharedPreferences=getSharedPreferences(Utils.PREF,MODE_PRIVATE);
  lon=sharedPreferences.getFloat(Utils.PREF_LONGITUDE,0);
  lat=sharedPreferences.getFloat(Utils.PREF_LATITUDE,0);
  String placeId=sharedPreferences.getString(Utils.PREF_PLACEID,""String_Node_Str"");
  tv_location.setText(sharedPreferences.getString(Utils.PREF_PLACENAME,""String_Node_Str""));
  if (lon == 0 && lat == 0 && placeId == ""String_Node_Str"") {
    dialog=true;
    System.out.println(""String_Node_Str"" + placeId + ""String_Node_Str""+ lon+ ""String_Node_Str""+ lat);
    mDialog=new ProgressDialog(Startup.this);
    mDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
    mDialog.setMessage(""String_Node_Str"");
    mDialog.show();
  }
  mlocManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  mlocManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,0,0,onLocationChange);
  mlocManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,0,0,onLocationChange);
  new Thread(new Runnable(){
    public void run(){
      try {
        ThumbnailObtainer tbo=new ThumbnailObtainer();
        Message msg=Message.obtain();
        Bundle bundle=new Bundle();
        bundle.putStringArray(""String_Node_Str"",tbo.listOfWords);
        bundle.putStringArray(""String_Node_Str"",tbo.listOfForeign);
        bundle.putStringArray(""String_Node_Str"",tbo.listOfImageUrls);
        bundle.putInt(""String_Node_Str"",tbo.numOfCards);
        msg.setData(bundle);
        thumbnailHandler.sendMessage(msg);
      }
 catch (      Exception e) {
        System.out.println(e.toString());
      }
    }
  }
).start();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.startup);
  TextView tv_location=(TextView)findViewById(R.id.location);
  SharedPreferences sharedPreferences=getSharedPreferences(Utils.PREF,MODE_PRIVATE);
  lon=sharedPreferences.getFloat(Utils.PREF_LONGITUDE,0);
  lat=sharedPreferences.getFloat(Utils.PREF_LATITUDE,0);
  String placeId=sharedPreferences.getString(Utils.PREF_PLACEID,""String_Node_Str"");
  tv_location.setText(sharedPreferences.getString(Utils.PREF_PLACENAME,""String_Node_Str""));
  if (lon == 0 && lat == 0 && placeId == ""String_Node_Str"") {
    dialog=true;
    System.out.println(""String_Node_Str"" + placeId + ""String_Node_Str""+ lon+ ""String_Node_Str""+ lat);
    mDialog=new ProgressDialog(Startup.this);
    mDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
    mDialog.setMessage(""String_Node_Str"");
    mDialog.show();
  }
  mlocManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  mlocManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,0,0,onLocationChange);
  mlocManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,0,0,onLocationChange);
  new Thread(new Runnable(){
    public void run(){
      try {
        ThumbnailObtainer tbo=new ThumbnailObtainer();
        Message msg=Message.obtain();
        Bundle bundle=new Bundle();
        bundle.putStringArray(""String_Node_Str"",tbo.listOfWords);
        bundle.putStringArray(""String_Node_Str"",tbo.listOfForeign);
        bundle.putStringArray(""String_Node_Str"",tbo.listOfImageUrls);
        bundle.putStringArray(""String_Node_Str"",tbo.listOfThumbnailUrls);
        bundle.putInt(""String_Node_Str"",tbo.numOfCards);
        msg.setData(bundle);
        thumbnailHandler.sendMessage(msg);
      }
 catch (      Exception e) {
        System.out.println(e.toString());
      }
    }
  }
).start();
}",0.9800431499460626
45334,"@Override public void handleMessage(Message msg){
  Bundle bundle=msg.getData();
  final int numOfCards=bundle.getInt(""String_Node_Str"");
  final String[] listOfWords=bundle.getStringArray(""String_Node_Str"");
  final String[] listOfForeign=bundle.getStringArray(""String_Node_Str"");
  final String[] listOfImageUrls=bundle.getStringArray(""String_Node_Str"");
  final GridView gridview=(GridView)findViewById(R.id.currentCards);
  ThumbnailAdapter gridAdapter=new ThumbnailAdapter(Startup.this.getApplicationContext(),listOfImageUrls,listOfWords,listOfForeign,numOfCards);
  gridview.setAdapter(gridAdapter);
  gridview.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View v,    int position,    long id){
      Toast.makeText(Startup.this,""String_Node_Str"" + position,Toast.LENGTH_SHORT).show();
      Intent myIntent=new Intent(Startup.this,ViewCard.class);
      myIntent.putExtra(""String_Node_Str"",position);
      myIntent.putExtra(""String_Node_Str"",numOfCards);
      for (int i=0; i < numOfCards; i++) {
        myIntent.putExtra(""String_Node_Str"" + i,listOfWords[i]);
        myIntent.putExtra(""String_Node_Str"" + i,listOfForeign[i]);
        myIntent.putExtra(""String_Node_Str"" + i,listOfImageUrls[i]);
      }
      startActivityForResult(myIntent,0);
    }
  }
);
}","@Override public void handleMessage(Message msg){
  Bundle bundle=msg.getData();
  final int numOfCards=bundle.getInt(""String_Node_Str"");
  final String[] listOfWords=bundle.getStringArray(""String_Node_Str"");
  final String[] listOfForeign=bundle.getStringArray(""String_Node_Str"");
  final String[] listOfThumbnailUrls=bundle.getStringArray(""String_Node_Str"");
  final String[] listOfImageUrls=bundle.getStringArray(""String_Node_Str"");
  final GridView gridview=(GridView)findViewById(R.id.currentCards);
  if (numOfCards > 0) {
    ThumbnailAdapter gridAdapter=new ThumbnailAdapter(Startup.this.getApplicationContext(),listOfThumbnailUrls,listOfWords,listOfForeign,numOfCards);
    gridview.setAdapter(gridAdapter);
    gridview.setOnItemClickListener(new OnItemClickListener(){
      public void onItemClick(      AdapterView<?> parent,      View v,      int position,      long id){
        Toast.makeText(Startup.this,""String_Node_Str"" + position,Toast.LENGTH_SHORT).show();
        Intent myIntent=new Intent(Startup.this,ViewCard.class);
        myIntent.putExtra(""String_Node_Str"",position);
        myIntent.putExtra(""String_Node_Str"",numOfCards);
        for (int i=0; i < numOfCards; i++) {
          myIntent.putExtra(""String_Node_Str"" + i,listOfWords[i]);
          myIntent.putExtra(""String_Node_Str"" + i,listOfForeign[i]);
          myIntent.putExtra(""String_Node_Str"" + i,listOfImageUrls[i]);
        }
        startActivityForResult(myIntent,0);
      }
    }
);
  }
}",0.9336173233936812
45335,"public void run(){
  try {
    ThumbnailObtainer tbo=new ThumbnailObtainer();
    Message msg=Message.obtain();
    Bundle bundle=new Bundle();
    bundle.putStringArray(""String_Node_Str"",tbo.listOfWords);
    bundle.putStringArray(""String_Node_Str"",tbo.listOfForeign);
    bundle.putStringArray(""String_Node_Str"",tbo.listOfImageUrls);
    bundle.putInt(""String_Node_Str"",tbo.numOfCards);
    msg.setData(bundle);
    thumbnailHandler.sendMessage(msg);
  }
 catch (  Exception e) {
    System.out.println(e.toString());
  }
}","public void run(){
  try {
    ThumbnailObtainer tbo=new ThumbnailObtainer();
    Message msg=Message.obtain();
    Bundle bundle=new Bundle();
    bundle.putStringArray(""String_Node_Str"",tbo.listOfWords);
    bundle.putStringArray(""String_Node_Str"",tbo.listOfForeign);
    bundle.putStringArray(""String_Node_Str"",tbo.listOfImageUrls);
    bundle.putStringArray(""String_Node_Str"",tbo.listOfThumbnailUrls);
    bundle.putInt(""String_Node_Str"",tbo.numOfCards);
    msg.setData(bundle);
    thumbnailHandler.sendMessage(msg);
  }
 catch (  Exception e) {
    System.out.println(e.toString());
  }
}",0.9375
45336,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.viewcard);
  Bundle extras=getIntent().getExtras();
  pos=(Integer)extras.get(""String_Node_Str"");
  num=(Integer)extras.get(""String_Node_Str"");
  listOfWords=new String[num + 1];
  listOfForeign=new String[num + 1];
  listOfImageUrls=new String[num + 1];
  for (int i=0; i < num; i++) {
    listOfWords[i]=extras.getString(""String_Node_Str"" + i);
    listOfForeign[i]=extras.getString(""String_Node_Str"" + i);
    listOfImageUrls[i]=extras.getString(""String_Node_Str"" + i);
  }
  String foreign=listOfForeign[pos];
  String word=listOfWords[pos];
  Toast.makeText(ViewCard.this,""String_Node_Str"" + ((Integer)pos).toString() + ""String_Node_Str""+ ((Integer)num).toString(),Toast.LENGTH_SHORT).show();
  tv_wordZero=(TextView)findViewById(R.id.wordZero);
  tv_foreignZero=(TextView)findViewById(R.id.foreignZero);
  iv_imageZero=(ImageView)findViewById(R.id.imageZero);
  tv_wordOne=(TextView)findViewById(R.id.wordOne);
  tv_foreignOne=(TextView)findViewById(R.id.foreignOne);
  iv_imageOne=(ImageView)findViewById(R.id.imageOne);
  tv_wordTwo=(TextView)findViewById(R.id.wordTwo);
  tv_foreignTwo=(TextView)findViewById(R.id.foreignTwo);
  iv_imageTwo=(ImageView)findViewById(R.id.imageTwo);
  vf_flipper=(ViewFlipper)findViewById(R.id.viewflipper);
  tv_wordZero.setText(word);
  tv_foreignZero.setText(foreign);
  Bitmap pic=Utils.getBitmapFromURL(listOfImageUrls[pos]);
  Bitmap resizedBitmap=resize(pic);
  iv_imageZero.setImageBitmap(resizedBitmap);
  gestureDetector=new GestureDetector(new MyGestureDetector());
  gestureListener=new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (gestureDetector.onTouchEvent(event)) {
        return true;
      }
      return false;
    }
  }
;
  iv_imageZero.setOnTouchListener(gestureListener);
  iv_imageOne.setOnTouchListener(gestureListener);
  iv_imageTwo.setOnTouchListener(gestureListener);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.viewcard);
  Bundle extras=getIntent().getExtras();
  pos=(Integer)extras.get(""String_Node_Str"");
  num=(Integer)extras.get(""String_Node_Str"");
  listOfWords=new String[num];
  listOfForeign=new String[num];
  listOfImageUrls=new String[num];
  for (int i=0; i < num; i++) {
    listOfWords[i]=extras.getString(""String_Node_Str"" + i);
    listOfForeign[i]=extras.getString(""String_Node_Str"" + i);
    listOfImageUrls[i]=extras.getString(""String_Node_Str"" + i);
  }
  String foreign=listOfForeign[pos];
  String word=listOfWords[pos];
  Toast.makeText(ViewCard.this,""String_Node_Str"" + ((Integer)pos).toString() + ""String_Node_Str""+ ((Integer)num).toString(),Toast.LENGTH_SHORT).show();
  tv_wordZero=(TextView)findViewById(R.id.wordZero);
  tv_foreignZero=(TextView)findViewById(R.id.foreignZero);
  iv_imageZero=(ImageView)findViewById(R.id.imageZero);
  tv_wordOne=(TextView)findViewById(R.id.wordOne);
  tv_foreignOne=(TextView)findViewById(R.id.foreignOne);
  iv_imageOne=(ImageView)findViewById(R.id.imageOne);
  tv_wordTwo=(TextView)findViewById(R.id.wordTwo);
  tv_foreignTwo=(TextView)findViewById(R.id.foreignTwo);
  iv_imageTwo=(ImageView)findViewById(R.id.imageTwo);
  vf_flipper=(ViewFlipper)findViewById(R.id.viewflipper);
  tv_wordZero.setText(word);
  tv_foreignZero.setText(foreign);
  Bitmap pic=Utils.getBitmapFromURL(listOfImageUrls[pos]);
  Bitmap resizedBitmap=resize(pic);
  pic.recycle();
  iv_imageZero.setImageBitmap(resizedBitmap);
  gestureDetector=new GestureDetector(new MyGestureDetector());
  gestureListener=new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (gestureDetector.onTouchEvent(event)) {
        return true;
      }
      return false;
    }
  }
;
  iv_imageZero.setOnTouchListener(gestureListener);
  iv_imageOne.setOnTouchListener(gestureListener);
  iv_imageTwo.setOnTouchListener(gestureListener);
}",0.9930002413709872
45337,"public int getCount(){
  return mUrls.length - 1;
}","public int getCount(){
  return mUrls.length;
}",0.9591836734693876
45338,"public ThumbnailObtainer(){
  HttpGet get=new HttpGet(""String_Node_Str"");
  ResponseHandler<String> responseHandler=new BasicResponseHandler();
  HttpClient client=new DefaultHttpClient();
  get.addHeader(BasicScheme.authenticate(new UsernamePasswordCredentials(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",false));
  try {
    String responseBody=client.execute(get,responseHandler);
    System.out.println(responseBody);
    JSONObject jObject=new JSONObject(responseBody);
    JSONArray items=jObject.getJSONArray(""String_Node_Str"");
    listOfWords=new String[items.length() + 1];
    listOfForeign=new String[items.length() + 1];
    listOfImageUrls=new String[items.length() + 1];
    for (int i=0; i < items.length(); i++) {
      numOfCards++;
      JSONObject item=items.getJSONObject(i);
      String image_url=item.getString(""String_Node_Str"");
      String word=item.getString(""String_Node_Str"");
      String answer=item.getString(""String_Node_Str"");
      String flashcard_id=item.getString(""String_Node_Str"");
      listOfWords[i]=word;
      listOfForeign[i]=answer;
      image_url=image_url.substring(image_url.lastIndexOf(""String_Node_Str""));
      listOfImageUrls[i]=image_url;
    }
  }
 catch (  Throwable t) {
    Log.e(""String_Node_Str"",""String_Node_Str"",t);
  }
}","public ThumbnailObtainer(){
  HttpGet get=new HttpGet(""String_Node_Str"");
  ResponseHandler<String> responseHandler=new BasicResponseHandler();
  HttpClient client=new DefaultHttpClient();
  get.addHeader(BasicScheme.authenticate(new UsernamePasswordCredentials(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",false));
  try {
    String responseBody=client.execute(get,responseHandler);
    System.out.println(responseBody);
    JSONObject jObject=new JSONObject(responseBody);
    JSONArray items=jObject.getJSONArray(""String_Node_Str"");
    listOfWords=new String[items.length()];
    listOfForeign=new String[items.length()];
    listOfImageUrls=new String[items.length()];
    listOfThumbnailUrls=new String[items.length()];
    for (int i=0; i < items.length(); i++) {
      numOfCards++;
      JSONObject item=items.getJSONObject(i);
      String image_url=item.getString(""String_Node_Str"");
      String thumbnail_url=item.getString(""String_Node_Str"");
      String word=item.getString(""String_Node_Str"");
      String answer=item.getString(""String_Node_Str"");
      String flashcard_id=item.getString(""String_Node_Str"");
      listOfWords[i]=word;
      listOfForeign[i]=answer;
      image_url=image_url.substring(image_url.lastIndexOf(""String_Node_Str""));
      thumbnail_url=thumbnail_url.substring(thumbnail_url.lastIndexOf(""String_Node_Str""));
      listOfImageUrls[i]=image_url;
      listOfThumbnailUrls[i]=thumbnail_url;
    }
  }
 catch (  Throwable t) {
    Log.e(""String_Node_Str"",""String_Node_Str"",t);
  }
}",0.9078715142957996
45339,"public Drawable loadDrawable(String image_url){
  URL url=null;
  InputStream inputStream=null;
  try {
    url=new URL(image_url);
    inputStream=(InputStream)url.getContent();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  Drawable drawable=Drawable.createFromStream(inputStream,""String_Node_Str"");
  Toast.makeText(this.getApplicationContext(),""String_Node_Str"" + url.toString(),Toast.LENGTH_LONG).show();
  return drawable;
}","public Drawable loadDrawable(String image_url){
  URL url=null;
  InputStream inputStream=null;
  try {
    url=new URL(image_url);
    inputStream=(InputStream)url.getContent();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  Drawable drawable=Drawable.createFromStream(inputStream,""String_Node_Str"");
  Toast.makeText(this.getApplicationContext(),""String_Node_Str"" + url.toString(),Toast.LENGTH_SHORT).show();
  return drawable;
}",0.992108229988726
45340,"public void onChoiceClicked(View view){
  Button button=(Button)view;
  this.questionCorrect=(choices[correctChoice] == button);
  if (this.questionCorrect) {
    view.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
    popup.setText(""String_Node_Str"" + title.getText().toString() + ""String_Node_Str""+ button.getText());
    popup.setBackgroundColor(0xaa00ff00);
    popup.setVisibility(View.VISIBLE);
  }
 else {
    Log.i(""String_Node_Str"",""String_Node_Str"" + button.getText().toString());
    button.setVisibility(View.INVISIBLE);
    int i;
    for (i=0; i < choices.length; i++) {
      if (choices[i] == button)       break;
    }
    popup.setText(""String_Node_Str"" + button.getText().toString() + ""String_Node_Str""+ translatedChoices[i]);
    popup.setBackgroundColor(0xaaff0000);
    popup.setVisibility(View.VISIBLE);
    vibrator.vibrate(500);
  }
}","public void onChoiceClicked(View view){
  Button button=(Button)view;
  this.questionCorrect=(choices[correctChoice] == button);
  if (this.questionCorrect) {
    if (!this.wrong) {
      flashcards[currentFlashcardIndex].setCorrect();
      correctPicks++;
    }
    view.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
    popup.setText(""String_Node_Str"" + title.getText().toString() + ""String_Node_Str""+ button.getText());
    popup.setBackgroundColor(0xaa00ff00);
    popup.setVisibility(View.VISIBLE);
  }
 else {
    Log.i(""String_Node_Str"",""String_Node_Str"" + button.getText().toString());
    this.wrong=true;
    button.setVisibility(View.INVISIBLE);
    int i;
    for (i=0; i < choices.length; i++) {
      if (choices[i] == button)       break;
    }
    popup.setText(""String_Node_Str"" + button.getText().toString() + ""String_Node_Str""+ translatedChoices[i]);
    popup.setBackgroundColor(0xaaff0000);
    popup.setVisibility(View.VISIBLE);
    vibrator.vibrate(500);
  }
}",0.936105476673428
45341,"public void loadCurrentFlashCard(){
  FlashCard flashcard=this.flashcards[this.currentFlashcardIndex];
  tableLayout.setBackgroundDrawable(flashcard.drawable);
  for (int i=0; i < 4; i++) {
    choices[i].setText(flashcard.choices[i]);
  }
  title.setText(flashcard.title);
  this.correctChoice=flashcard.correctChoice;
  popup.setVisibility(View.INVISIBLE);
  this.currentFlashcardIndex++;
}","public void loadCurrentFlashCard(){
  this.wrong=false;
  FlashCard flashcard=this.flashcards[this.currentFlashcardIndex];
  if (flashcard != null) {
    tableLayout.setBackgroundDrawable(flashcard.drawable);
    for (int i=0; i < 4; i++) {
      choices[i].setText(flashcard.choices[i]);
    }
    title.setText(flashcard.title);
    this.correctChoice=flashcard.correctChoice;
    popup.setVisibility(View.INVISIBLE);
  }
 else   Toast.makeText(this.getApplicationContext(),""String_Node_Str"" + this.currentFlashcardIndex + ""String_Node_Str""+ this.flashcards.length,Toast.LENGTH_LONG).show();
  setAllVisible();
}",0.7793240556660039
45342,"public void onPopupClicked(View v){
  popup.setVisibility(View.INVISIBLE);
  if (this.questionCorrect) {
    this.currentFlashcardIndex++;
    loadCurrentFlashCard();
  }
}","public void onPopupClicked(View v){
  popup.setVisibility(View.INVISIBLE);
  if (this.questionCorrect && this.currentFlashcardIndex < (this.flashcards.length - 1)) {
    this.currentFlashcardIndex++;
    loadCurrentFlashCard();
    Toast.makeText(this.getApplicationContext(),""String_Node_Str"" + this.currentFlashcardIndex + ""String_Node_Str""+ this.flashcards.length,Toast.LENGTH_SHORT).show();
  }
 else   if (this.questionCorrect && this.currentFlashcardIndex >= (this.flashcards.length - 1)) {
    Toast.makeText(this.getApplicationContext(),""String_Node_Str"" + correctPicks + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
}",0.4283935242839352
45343,"public ArrayList<Double> method1(int a,int b){
  int nnumberofFilters=24;
  int nlifteringCoefficient=b;
  boolean oisLifteringEnabled=true;
  boolean oisZeroThCepstralCoefficientCalculated=false;
  int nnumberOfMFCCParameters=a;
  double dsamplingFrequency=8000.0;
  int nFFTLength=512;
  ArrayList<Double> mfcc_parameters=new ArrayList<Double>();
  if (oisZeroThCepstralCoefficientCalculated) {
    nnumberOfMFCCParameters=nnumberOfMFCCParameters + 1;
  }
 else {
    nnumberOfMFCCParameters=nnumberOfMFCCParameters;
  }
  MFCC mfcc=new MFCC(nnumberOfMFCCParameters,dsamplingFrequency,nnumberofFilters,nFFTLength,oisLifteringEnabled,nlifteringCoefficient,oisZeroThCepstralCoefficientCalculated);
  double[] x=new double[160];
  Random rand=new Random();
  x[2]=rand.nextDouble();
  x[4]=rand.nextDouble();
  double[] dparameters=mfcc.getParameters(x);
  for (int i=0; i < dparameters.length; i++) {
    mfcc_parameters.add(dparameters[i]);
  }
  if (Preferences.DEBUG_MODE)   System.out.println(""String_Node_Str"" + mfcc_parameters);
  return mfcc_parameters;
}","public ArrayList<Double> method1(int a,int b){
  if (a > b) {
    int temp=a;
    a=b;
    b=temp;
  }
  int nnumberofFilters=24;
  int nlifteringCoefficient=b;
  boolean oisLifteringEnabled=true;
  boolean oisZeroThCepstralCoefficientCalculated=false;
  int nnumberOfMFCCParameters=a;
  double dsamplingFrequency=8000.0;
  int nFFTLength=512;
  ArrayList<Double> mfcc_parameters=new ArrayList<Double>();
  if (oisZeroThCepstralCoefficientCalculated) {
    nnumberOfMFCCParameters=nnumberOfMFCCParameters + 1;
  }
 else {
    nnumberOfMFCCParameters=nnumberOfMFCCParameters;
  }
  MFCC mfcc=new MFCC(nnumberOfMFCCParameters,dsamplingFrequency,nnumberofFilters,nFFTLength,oisLifteringEnabled,nlifteringCoefficient,oisZeroThCepstralCoefficientCalculated);
  double[] x=new double[160];
  Random rand=new Random();
  x[2]=rand.nextDouble();
  x[4]=rand.nextDouble();
  double[] dparameters=mfcc.getParameters(x);
  for (int i=0; i < dparameters.length; i++) {
    mfcc_parameters.add(dparameters[i]);
  }
  if (Preferences.DEBUG_MODE)   System.out.println(""String_Node_Str"" + mfcc_parameters);
  return mfcc_parameters;
}",0.9743119266055046
45344,"void sendMsgThroSocket(Message message){
  ObjectOutputStream oos=null;
  try {
    sendData=null;
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    oos=new ObjectOutputStream(bos);
synchronized (message) {
      try {
        oos.writeObject((Object)message);
      }
 catch (      ConcurrentModificationException e) {
        if (Preferences.DEBUG_MODE)         System.out.println(""String_Node_Str"");
      }
    }
    oos.flush();
    sendData=bos.toByteArray();
    DatagramPacket udpsendPacket=null;
    DatagramSocket udpClientSocket=null;
    prop=new Properties();
    prop.load(new FileInputStream(conf_file));
    udpClientSocket=new DatagramSocket();
    udpClientSocket.setReceiveBufferSize(5000);
    udpClientSocket.setSendBufferSize(5000);
    if (message instanceof MulticastMessage) {
      if (((MulticastMessage)message).getMessageType() == MulticastMessage.MessageType.GET_MUTEX) {
synchronized (process_state) {
synchronized (arrMutexAckReceived) {
            arrMutexAckReceived[(this.nodes.get(host_name)).getIndex()]=true;
          }
        }
      }
 else       if (((MulticastMessage)message).getMessageType() == MulticastMessage.MessageType.RELEASE_MUTEX) {
synchronized (process_state) {
synchronized (arrMutexAckReceived) {
synchronized (mutexQueue) {
              process_state=Process_State.RELEASED;
              for (int i=0; i < arrMutexAckReceived.length; i++) {
                arrMutexAckReceived[i]=false;
              }
              while (!mutexQueue.isEmpty()) {
                MulticastMessage mutexAckMsg=new MulticastMessage(mutexQueue.remove(0),MulticastMessage.MessageType.MUTEX_ACK);
                mutexAckMsg.setDest(mutexAckMsg.getSource());
                mutexAckMsg.setSource(host_name);
                sendMsgThroSocket(mutexAckMsg);
              }
              return;
            }
          }
        }
      }
      if (((MulticastMessage)message).getMessageType() == MulticastMessage.MessageType.UPDATE_STATE || ((MulticastMessage)message).getMessageType() == MulticastMessage.MessageType.RUT || ((MulticastMessage)message).getMessageType() == MulticastMessage.MessageType.MUTEX_ACK) {
        if (((MulticastMessage)message).getMessageType() == MulticastMessage.MessageType.MUTEX_ACK) {
          System.out.println(""String_Node_Str"" + message.getDest());
        }
        if (message.getDest().equalsIgnoreCase(Preferences.LOGGER_NAME)) {
          udpsendPacket=new DatagramPacket(sendData,sendData.length,InetAddress.getByName(prop.getProperty(""String_Node_Str"" + message.getDest() + ""String_Node_Str"")),Integer.parseInt(prop.getProperty(""String_Node_Str"" + message.getDest() + ""String_Node_Str"")));
        }
 else {
          if (this.nodes.containsKey(message.getDest())) {
            udpsendPacket=new DatagramPacket(sendData,sendData.length,this.nodes.get(message.getDest()).getAdrress(),this.nodes.get(message.getDest()).getNodePort());
          }
        }
        if (this.nodes.get(host_name) != null && this.nodes.get(host_name).getBatteryLevel() >= Preferences.BATTERY_SPENT_IN_COMMUNICATION_SEND) {
          udpClientSocket.send(udpsendPacket);
        }
        if (this.nodes.get(host_name) != null && !message.getDest().equals(Preferences.LOGGER_NAME) && !message.getSource().equals(Preferences.LOGGER_NAME)) {
          this.nodes.get(host_name).decrBatteryLevel(Preferences.BATTERY_SPENT_IN_COMMUNICATION_SEND);
        }
      }
 else {
        Object[] node_names=this.node_addresses.keySet().toArray();
        for (int i=0; i < node_names.length; i++) {
          if (!host_name.equalsIgnoreCase((String)node_names[i]) && !Preferences.crashNode.equalsIgnoreCase((String)node_names[i])) {
            if (((MulticastMessage)message).getMessageType() == MulticastMessage.MessageType.GET_MUTEX) {
              System.out.println(""String_Node_Str"" + message.getDest());
            }
            if (message.getDest().equalsIgnoreCase(Preferences.LOGGER_NAME)) {
              udpsendPacket=new DatagramPacket(sendData,sendData.length,InetAddress.getByName(prop.getProperty(""String_Node_Str"" + message.getDest() + ""String_Node_Str"")),Integer.parseInt(prop.getProperty(""String_Node_Str"" + message.getDest() + ""String_Node_Str"")));
            }
 else {
              if (this.nodes.containsKey(message.getDest())) {
                udpsendPacket=new DatagramPacket(sendData,sendData.length,this.nodes.get(node_names[i]).getAdrress(),this.nodes.get(node_names[i]).getNodePort());
              }
            }
            if (this.nodes.get(host_name) != null && this.nodes.get(host_name).getBatteryLevel() >= Preferences.BATTERY_SPENT_IN_COMMUNICATION_SEND) {
              udpClientSocket.send(udpsendPacket);
            }
            if (this.nodes.get(host_name) != null && !message.getDest().equals(Preferences.LOGGER_NAME) && !message.getSource().equals(Preferences.LOGGER_NAME)) {
              this.nodes.get(host_name).decrBatteryLevel(Preferences.BATTERY_SPENT_IN_COMMUNICATION_SEND);
            }
          }
        }
      }
    }
 else {
      if (message.getDest().equalsIgnoreCase(Preferences.LOGGER_NAME)) {
        udpsendPacket=new DatagramPacket(sendData,sendData.length,InetAddress.getByName(prop.getProperty(""String_Node_Str"" + message.getDest() + ""String_Node_Str"")),Integer.parseInt(prop.getProperty(""String_Node_Str"" + message.getDest() + ""String_Node_Str"")));
      }
 else {
        if (this.nodes.containsKey(message.getDest())) {
          udpsendPacket=new DatagramPacket(sendData,sendData.length,this.nodes.get(message.getDest()).getAdrress(),this.nodes.get(message.getDest()).getNodePort());
        }
      }
      if (this.nodes.get(host_name) != null && this.nodes.get(host_name).getBatteryLevel() >= Preferences.BATTERY_SPENT_IN_COMMUNICATION_SEND) {
        if (udpsendPacket != null)         udpClientSocket.send(udpsendPacket);
      }
      if (this.nodes.get(host_name) != null && !message.getDest().equals(Preferences.LOGGER_NAME) && !message.getSource().equals(Preferences.LOGGER_NAME)) {
        this.nodes.get(host_name).decrBatteryLevel(Preferences.BATTERY_SPENT_IN_COMMUNICATION_SEND);
      }
    }
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
 finally {
    try {
      oos.close();
    }
 catch (    IOException ex) {
      ex.printStackTrace();
    }
  }
}","void sendMsgThroSocket(Message message){
  ObjectOutputStream oos=null;
  try {
    sendData=null;
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    oos=new ObjectOutputStream(bos);
synchronized (message) {
      try {
        oos.writeObject((Object)message);
      }
 catch (      ConcurrentModificationException e) {
        if (Preferences.DEBUG_MODE)         System.out.println(""String_Node_Str"");
      }
    }
    oos.flush();
    sendData=bos.toByteArray();
    DatagramPacket udpsendPacket=null;
    DatagramSocket udpClientSocket=null;
    prop=new Properties();
    prop.load(new FileInputStream(conf_file));
    udpClientSocket=new DatagramSocket();
    udpClientSocket.setReceiveBufferSize(5000);
    udpClientSocket.setSendBufferSize(5000);
    if (message instanceof MulticastMessage) {
      if (((MulticastMessage)message).getMessageType() == MulticastMessage.MessageType.GET_MUTEX) {
synchronized (process_state) {
synchronized (arrMutexAckReceived) {
            arrMutexAckReceived[(this.nodes.get(host_name)).getIndex()]=true;
          }
        }
      }
 else       if (((MulticastMessage)message).getMessageType() == MulticastMessage.MessageType.RELEASE_MUTEX) {
synchronized (process_state) {
synchronized (arrMutexAckReceived) {
synchronized (mutexQueue) {
              process_state=Process_State.RELEASED;
              for (int i=0; i < arrMutexAckReceived.length; i++) {
                arrMutexAckReceived[i]=false;
              }
              while (!mutexQueue.isEmpty()) {
                MulticastMessage mutexAckMsg=new MulticastMessage(mutexQueue.remove(0),MulticastMessage.MessageType.MUTEX_ACK);
                mutexAckMsg.setDest(mutexAckMsg.getSource());
                mutexAckMsg.setSource(host_name);
                sendMsgThroSocket(mutexAckMsg);
              }
              return;
            }
          }
        }
      }
      if (((MulticastMessage)message).getMessageType() == MulticastMessage.MessageType.UPDATE_STATE || ((MulticastMessage)message).getMessageType() == MulticastMessage.MessageType.RUT || ((MulticastMessage)message).getMessageType() == MulticastMessage.MessageType.MUTEX_ACK) {
        if (((MulticastMessage)message).getMessageType() == MulticastMessage.MessageType.MUTEX_ACK) {
          System.out.println(""String_Node_Str"" + message.getDest());
        }
        if (message.getDest().equalsIgnoreCase(Preferences.LOGGER_NAME)) {
          udpsendPacket=new DatagramPacket(sendData,sendData.length,InetAddress.getByName(prop.getProperty(""String_Node_Str"" + message.getDest() + ""String_Node_Str"")),Integer.parseInt(prop.getProperty(""String_Node_Str"" + message.getDest() + ""String_Node_Str"")));
        }
 else {
          if (this.nodes.containsKey(message.getDest())) {
            udpsendPacket=new DatagramPacket(sendData,sendData.length,this.nodes.get(message.getDest()).getAdrress(),this.nodes.get(message.getDest()).getNodePort());
          }
        }
        if (host_name.equalsIgnoreCase(Preferences.LOGGER_NAME) || (this.nodes.get(host_name) != null && this.nodes.get(host_name).getBatteryLevel() >= Preferences.BATTERY_SPENT_IN_COMMUNICATION_SEND)) {
          udpClientSocket.send(udpsendPacket);
        }
        if (!host_name.equalsIgnoreCase(Preferences.LOGGER_NAME) && this.nodes.get(host_name) != null && !message.getDest().equals(Preferences.LOGGER_NAME) && !message.getSource().equals(Preferences.LOGGER_NAME)) {
          this.nodes.get(host_name).decrBatteryLevel(Preferences.BATTERY_SPENT_IN_COMMUNICATION_SEND);
        }
      }
 else {
        Object[] node_names=this.node_addresses.keySet().toArray();
        for (int i=0; i < node_names.length; i++) {
          if (!host_name.equalsIgnoreCase((String)node_names[i]) && !Preferences.crashNode.equalsIgnoreCase((String)node_names[i])) {
            if (((MulticastMessage)message).getMessageType() == MulticastMessage.MessageType.GET_MUTEX) {
              System.out.println(""String_Node_Str"" + message.getDest());
            }
            if (message.getDest().equalsIgnoreCase(Preferences.LOGGER_NAME)) {
              udpsendPacket=new DatagramPacket(sendData,sendData.length,InetAddress.getByName(prop.getProperty(""String_Node_Str"" + message.getDest() + ""String_Node_Str"")),Integer.parseInt(prop.getProperty(""String_Node_Str"" + message.getDest() + ""String_Node_Str"")));
            }
 else {
              if (this.nodes.containsKey(message.getDest())) {
                udpsendPacket=new DatagramPacket(sendData,sendData.length,this.nodes.get(node_names[i]).getAdrress(),this.nodes.get(node_names[i]).getNodePort());
              }
            }
            if (host_name.equalsIgnoreCase(Preferences.LOGGER_NAME) || (this.nodes.get(host_name) != null && this.nodes.get(host_name).getBatteryLevel() >= Preferences.BATTERY_SPENT_IN_COMMUNICATION_SEND)) {
              udpClientSocket.send(udpsendPacket);
            }
            if (!host_name.equalsIgnoreCase(Preferences.LOGGER_NAME) && this.nodes.get(host_name) != null && !message.getDest().equals(Preferences.LOGGER_NAME) && !message.getSource().equals(Preferences.LOGGER_NAME)) {
              this.nodes.get(host_name).decrBatteryLevel(Preferences.BATTERY_SPENT_IN_COMMUNICATION_SEND);
            }
          }
        }
      }
    }
 else {
      if (message.getDest().equalsIgnoreCase(Preferences.LOGGER_NAME)) {
        udpsendPacket=new DatagramPacket(sendData,sendData.length,InetAddress.getByName(prop.getProperty(""String_Node_Str"" + message.getDest() + ""String_Node_Str"")),Integer.parseInt(prop.getProperty(""String_Node_Str"" + message.getDest() + ""String_Node_Str"")));
      }
 else {
        if (this.nodes.containsKey(message.getDest())) {
          udpsendPacket=new DatagramPacket(sendData,sendData.length,this.nodes.get(message.getDest()).getAdrress(),this.nodes.get(message.getDest()).getNodePort());
        }
      }
      if (host_name.equalsIgnoreCase(Preferences.LOGGER_NAME) || (this.nodes.get(host_name) != null && this.nodes.get(host_name).getBatteryLevel() >= Preferences.BATTERY_SPENT_IN_COMMUNICATION_SEND)) {
        if (udpsendPacket != null)         udpClientSocket.send(udpsendPacket);
      }
      if (!host_name.equalsIgnoreCase(Preferences.LOGGER_NAME) && this.nodes.get(host_name) != null && !message.getDest().equals(Preferences.LOGGER_NAME) && !message.getSource().equals(Preferences.LOGGER_NAME)) {
        this.nodes.get(host_name).decrBatteryLevel(Preferences.BATTERY_SPENT_IN_COMMUNICATION_SEND);
      }
    }
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
 finally {
    try {
      oos.close();
    }
 catch (    IOException ex) {
      ex.printStackTrace();
    }
  }
}",0.9739411176877546
45345,"private void doSimulation(){
  List<TaskDistributor> nodeList=new ArrayList<TaskDistributor>();
  int nodeCount=10;
  for (int i=0; i < nodeCount; i++) {
    String host=""String_Node_Str"" + i;
    String conf_file=""String_Node_Str"";
    TaskDistributor distributor=new TaskDistributor(host,conf_file,""String_Node_Str"");
    nodeList.add(distributor);
  }
  try {
    Thread.sleep(5000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  Random randomGenerator=new Random();
  int totalLoad=0;
  for (int loop=0; loop < 50; loop++) {
    int from=0;
    int load=randomGenerator.nextInt(40);
    load+=20;
    totalLoad+=load;
    System.out.println(""String_Node_Str"" + load + ""String_Node_Str""+ from);
    nodeList.get(from).distribute(""String_Node_Str"",load);
    int wait=randomGenerator.nextInt(200);
    wait+=50;
    try {
      Thread.sleep(wait);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  for (int i=0; i < nodeCount; i++) {
    System.out.println(nodeList.get(i).getNodes().get(""String_Node_Str"" + i).getBatteryLevel());
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + totalLoad);
  System.out.println(""String_Node_Str"");
}","private void doSimulation(){
  List<TaskDistributor> nodeList=new ArrayList<TaskDistributor>();
  int nodeCount=3;
  for (int i=0; i < nodeCount; i++) {
    String host=""String_Node_Str"" + i;
    String conf_file=""String_Node_Str"";
    TaskDistributor distributor=new TaskDistributor(host,conf_file,""String_Node_Str"");
    nodeList.add(distributor);
  }
  try {
    Thread.sleep(4000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  Random randomGenerator=new Random();
  int totalLoad=0;
  for (int loop=0; loop < 3; loop++) {
    int from=0;
    int load;
    load=1000;
    totalLoad+=load;
    System.out.println(""String_Node_Str"" + load + ""String_Node_Str""+ from);
    nodeList.get(from).distribute(""String_Node_Str"",load);
    int wait=randomGenerator.nextInt(200);
    wait+=50;
    try {
      Thread.sleep(wait);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  try {
    Thread.sleep(7000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  List<Integer> leftBattreyList=new ArrayList<Integer>(nodeCount);
  int sum=0;
  List<Integer> notReceiverNodes=new ArrayList<Integer>();
  notReceiverNodes.add(0);
  for (int i=0; i < nodeCount; i++) {
    if (notReceiverNodes.contains(i))     continue;
    int battrey=nodeList.get(i).getNodes().get(""String_Node_Str"" + i).getBatteryLevel();
    leftBattreyList.add(battrey);
    sum+=battrey;
    System.out.println(battrey);
  }
  double avgBattrey=sum / leftBattreyList.size();
  double variance=0;
  for (  int battrey : leftBattreyList) {
    variance+=Math.pow((battrey - avgBattrey),2);
  }
  double std_dev=Math.sqrt(variance / leftBattreyList.size());
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + totalLoad);
  System.out.println(""String_Node_Str"" + avgBattrey + ""String_Node_Str""+ std_dev);
  System.out.println(""String_Node_Str"");
}",0.630808402291534
45346,"private void listenForIncomingMessages(){
  (new Thread(){
    @Override public void run(){
      while (true) {
        try {
          Thread.sleep(10);
          Message msg=mp.receive();
          if (msg != null) {
            if (!(msg instanceof MulticastMessage)) {
switch (msg.getNormalMsgType()) {
case TASK_ADV:
                Task receivedTask=(Task)msg.getData();
synchronized (nodes) {
                logMessage(""String_Node_Str"" + msg.getSource());
                Node host_node=nodes.get(host);
                if (receivedTask.getTaskProcessorLoad() > (Preferences.TOTAL_PROCESSOR_LOAD_AT_NODE - host_node.getProcessorLoad() - Preferences.RESERVED_PROCESSOR_AT_NODE)) {
                  logMessage(""String_Node_Str"" + receivedTask.taskId + ""String_Node_Str""+ receivedTask.getTaskProcessorLoad()+ ""String_Node_Str""+ (Preferences.TOTAL_PROCESSOR_LOAD_AT_NODE - host_node.getProcessorLoad() - Preferences.RESERVED_PROCESSOR_AT_NODE));
                  break;
                }
                if (receivedTask.getTaskMemoryLoad() > (Preferences.TOTAL_MEMORY_LOAD_AT_NODE - host_node.getMemoryLoad() - Preferences.RESERVED_MEMORY_AT_NODE)) {
                  logMessage(""String_Node_Str"" + receivedTask.taskId + ""String_Node_Str""+ receivedTask.getTaskMemoryLoad()+ ""String_Node_Str""+ (Preferences.TOTAL_MEMORY_LOAD_AT_NODE - host_node.getMemoryLoad() - Preferences.RESERVED_MEMORY_AT_NODE));
                  break;
                }
                int remaining_battrey_load=host_node.getBatteryLevel() - (receivedTask.getTaskBattreyLoad() + Preferences.BATTERY_SPENT_IN_TASK_CHUNK_EXECUTION + host_node.getPromisedBattreyLoad());
                int battreyLoadCanServe=0;
                if (remaining_battrey_load > Preferences.RESERVED_BATTERY_AT_NODE) {
                  battreyLoadCanServe=receivedTask.getTaskBattreyLoad();
                }
 else {
                  battreyLoadCanServe=host_node.getBatteryLevel() - (Preferences.RESERVED_BATTERY_AT_NODE + Preferences.BATTERY_SPENT_IN_TASK_CHUNK_EXECUTION + host_node.getPromisedBattreyLoad());
                }
                if (remaining_battrey_load > Preferences.MAX_TASK_CHUNK_LOAD_SIZE) {
                  remaining_battrey_load=Preferences.MAX_TASK_CHUNK_LOAD_SIZE;
                }
                if (battreyLoadCanServe > Preferences.MINIMUM_LOAD_REQUEST) {
                  Integer tempTaskAdvReplyId=++taskAdvReplyId;
                  String tempTaskAdvReplyIdStr=host_node.getName() + tempTaskAdvReplyId;
                  receivedTask.setPromisedTaskBattreyLoad(battreyLoadCanServe + Preferences.BATTERY_SPENT_IN_TASK_CHUNK_EXECUTION);
                  receivedTask.setPromisedTimeStamp(new Date().getTime());
                  host_node.addToAcceptedTask(tempTaskAdvReplyIdStr,receivedTask);
                  host_node.incrPromisedBattreyLoad(receivedTask.getPromisedBattreyTaskLoad());
                  host_node.incrProcessorLoad(receivedTask.getTaskProcessorLoad());
                  host_node.incrMemoryLoad(receivedTask.getTaskMemoryLoad());
                  TaskAdvReply taskAdvReply=new TaskAdvReply(tempTaskAdvReplyIdStr,receivedTask.getTaskId(),host_node,battreyLoadCanServe);
                  Message profileMsg=new Message(msg.getSource(),""String_Node_Str"",""String_Node_Str"",taskAdvReply,host);
                  profileMsg.setNormalMsgType(Message.NormalMsgType.PROFILE_XCHG);
                  try {
                    if (Preferences.DEBUG_MODE) {
                      System.out.println(""String_Node_Str"" + host + ""String_Node_Str""+ nodes.get(host).getAdrress()+ ""String_Node_Str""+ nodes.get(host).getNodePort());
                    }
                    mp.send(profileMsg);
                  }
 catch (                  InvalidMessageException ex) {
                    host_node.removeFromAcceptedTask(tempTaskAdvReplyIdStr);
                    host_node.decrProcessorLoad(receivedTask.getTaskProcessorLoad());
                    host_node.decrMemoryLoad(receivedTask.getTaskMemoryLoad());
                    host_node.decrPromisedBattreyLoad(receivedTask.getPromisedBattreyTaskLoad());
                    ex.printStackTrace();
                  }
catch (                  UnknownHostException e) {
                    e.printStackTrace();
                  }
                  logMessage(""String_Node_Str"" + receivedTask.taskId + ""String_Node_Str""+ remaining_battrey_load);
                }
 else {
                  logMessage(""String_Node_Str"" + receivedTask.taskId + ""String_Node_Str""+ battreyLoadCanServe);
                }
              }
            break;
case NORMAL:
          logMessage(msg.getData().toString());
        break;
case PROFILE_XCHG:
      TaskAdvReply taskAdvReply=(TaskAdvReply)msg.getData();
    if (Preferences.DEBUG_MODE) {
      System.out.println(""String_Node_Str"" + taskAdvReply.getNode().getName() + ""String_Node_Str""+ taskAdvReply.getNode().getAdrress()+ ""String_Node_Str""+ taskAdvReply.getNode().getNodePort());
    }
  TaskLookup taskLookup=taskLookups.get(taskAdvReply.getTaskId());
taskLookup.setRetry(0);
distributeTask(taskAdvReply);
break;
case DISTRIBUTED_TASK:
TaskChunk taskChunk=(TaskChunk)msg.getData();
DistributedTask distTask=taskChunk.getDsTask();
Node host_node=nodes.get(host);
if (host_node.getAcceptedTaskByTaskId(taskChunk.getTaskAdvReplyId()) == null) {
break;
}
host_node.getAcceptedTaskByTaskId(taskChunk.getTaskAdvReplyId()).setInExecution(true);
TaskResult result;
Map<Integer,TaskResult> tempResults=taskResults.get(distTask.getTaskId());
result=new TaskResult(distTask.getTaskProcessorLoad(),distTask.getTaskMemoryLoad(),distTask.getTaskBattreyLoad(),distTask.taskId,host,handleDistributedTask(distTask),taskChunk.getSequenceNumber());
if (tempResults == null) {
tempResults=new HashMap<Integer,TaskResult>();
}
tempResults.put(taskChunk.getSequenceNumber(),result);
taskResults.put(distTask.getTaskId(),tempResults);
int loadServed=host_node.getAcceptedTaskByTaskId(taskChunk.getTaskAdvReplyId()).getPromisedBattreyTaskLoad();
if (host_node.getAcceptedTaskByTaskId(taskChunk.getTaskAdvReplyId()) != null) {
host_node.decrPromisedBattreyLoad(loadServed);
}
host_node.removeFromAcceptedTask(taskChunk.getTaskAdvReplyId());
nodes.get(host).decrBatteryLevel(loadServed);
host_node.decrProcessorLoad(distTask.getTaskProcessorLoad());
host_node.decrMemoryLoad(distTask.getTaskMemoryLoad());
logMessage(result.getTaskResult().toString());
Message resultMsg=new Message(distTask.getSource(),""String_Node_Str"",""String_Node_Str"",result,host_node.getName());
resultMsg.setNormalMsgType(Message.NormalMsgType.TASK_RESULT);
try {
mp.send(resultMsg);
}
 catch (InvalidMessageException ex) {
Logger.getLogger(TaskDistributor.class.getName()).log(Level.SEVERE,null,ex);
}
break;
case TASK_RESULT:
TaskResult taskResult=(TaskResult)msg.getData();
Integer seqNumber=taskResult.getSeqNumber();
taskLookup=taskLookups.get(taskResult.getTaskId());
synchronized (taskLookup) {
taskLookup.getTaskGroup().get(taskLookup.getResultTracker().get(taskResult.getSeqNumber())).setStatus(Preferences.TASK_CHUNK_STATUS.RECEIVED);
taskLookup.removeFromResultTracker(seqNumber);
addAndMergeResults(taskResult);
}
logMessage(""String_Node_Str"" + seqNumber + ""String_Node_Str""+ taskLookup.printResultTracker()+ ""String_Node_Str""+ taskResult.getSource()+ ""String_Node_Str""+ taskResult.getTaskResult());
break;
}
}
}
}
 catch (InterruptedException ex) {
ex.printStackTrace();
}
catch (UnknownHostException e) {
e.printStackTrace();
}
}
}
private Serializable handleDistributedTask(DistributedTask gotTask){
try {
Class cl=Class.forName(gotTask.getClassName());
HashMap<String,Class[]> mthdDef=new HashMap<String,Class[]>();
Method mthds[]=cl.getDeclaredMethods();
for (Method m : mthds) {
mthdDef.put(m.getName(),m.getParameterTypes());
}
if (gotTask.getParameters() != null && ((mthdDef.get(gotTask.getMethodName())).length != gotTask.getParameters().length)) {
logMessage(""String_Node_Str"");
}
 else {
Class params[]=mthdDef.get(gotTask.getMethodName());
Object parameters[]=(Object[])gotTask.getParameters();
try {
Method invokedMethod=cl.getMethod(gotTask.getMethodName(),params);
return (Serializable)invokedMethod.invoke(new SampleApplicationLocal(),parameters);
}
 catch (IllegalAccessException ex) {
ex.printStackTrace();
}
catch (InvocationTargetException ex) {
ex.printStackTrace();
}
catch (IllegalArgumentException e) {
e.printStackTrace();
}
catch (SecurityException e) {
e.printStackTrace();
}
catch (NoSuchMethodException e) {
e.printStackTrace();
}
}
}
 catch (ClassNotFoundException e) {
e.printStackTrace();
}
return null;
}
private void distributeTask(TaskAdvReply taskAdvReply){
String taskId=taskAdvReply.getTaskId();
Node node=taskAdvReply.getNode();
TaskLookup taskLookup=taskLookups.get(taskId);
Task taskToDistribute=(taskLookups.get(taskId)).getTask();
if (taskToDistribute.getTaskBattreyLoad() <= 0) {
return;
}
if (taskLookup.getStatus() == Preferences.TASK_STATUS.DISTRIBUTED) {
return;
}
if (!isNodeSuitableForDistribution(node,taskLookup)) {
return;
}
int loadDistributed=(int)Math.ceil((taskToDistribute.getTaskBattreyLoad() > taskAdvReply.getLoadCanServe()) ? (taskAdvReply.getLoadCanServe()) : taskToDistribute.getTaskBattreyLoad());
taskToDistribute.setTaskBattreyLoad(taskToDistribute.getTaskBattreyLoad() - loadDistributed);
if (taskToDistribute.getTaskBattreyLoad() <= 0) {
taskLookup.setStatus(Preferences.TASK_STATUS.DISTRIBUTED);
}
Serializable[] parameters=new Serializable[2];
parameters[0]=10;
parameters[1]=20;
DistributedTask dsTask=new DistributedTask(taskToDistribute.getTaskProcessorLoad(),taskToDistribute.getTaskMemoryLoad(),loadDistributed,taskId,taskToDistribute.getSource(),""String_Node_Str"",""String_Node_Str"",parameters);
TaskChunk taskChunk=new TaskChunk(taskId,node,taskLookup.nextSequenceNumber(),dsTask,taskAdvReply.getTaskAdvReplyId());
taskLookup.addToTaskGroup(taskChunk.getTaskAdvReplyId(),taskChunk);
Message distMsg=new Message(node.getName(),""String_Node_Str"",""String_Node_Str"",taskChunk,host);
distMsg.setNormalMsgType(Message.NormalMsgType.DISTRIBUTED_TASK);
if (Preferences.DEBUG_MODE) {
try {
System.out.println(""String_Node_Str"" + node.getName() + ""String_Node_Str""+ node.getAdrress()+ ""String_Node_Str""+ node.getNodePort());
}
 catch (UnknownHostException e) {
e.printStackTrace();
}
}
sendAndRetryTaskChunk(taskChunk,distMsg,dsTask,loadDistributed,taskLookup);
}
private boolean isNodeSuitableForDistribution(Node node,TaskLookup taskLookup){
return isNodeSuitableForEfficientDistributionCheck(node,taskLookup);
}
private boolean isNodeSuitableForNaiveDistributionCheck(Node node,TaskLookup taskLookup){
return true;
}
private boolean isNodeSuitableForEfficientDistributionCheck(Node node,TaskLookup taskLookup){
boolean isSuitable=true;
float alpha=Preferences.ALPHA_MIN;
float beta=Preferences.BETA;
float gama=Preferences.GAMA;
float weight=beta;
BattreyInfo oldBattreyInfo=null;
float lastAvgNodeLoad;
Queue<BattreyInfo> nodeBattreyLoadInfo=battreyLoadInfo.get(node.getName());
if (nodeBattreyLoadInfo == null) {
nodeBattreyLoadInfo=new LinkedList<BattreyInfo>();
battreyLoadInfo.put(node.getName(),nodeBattreyLoadInfo);
}
if (nodeBattreyLoadInfo.size() >= Preferences.NODE_BATTERY_INFO_QUEUE_SIZE) {
oldBattreyInfo=nodeBattreyLoadInfo.remove();
}
advReplyTotalCount++;
if (advReplyCount > 1) {
double stdDevNodeLoad=Math.sqrt(varianceNodeLoad / advReplyCount);
if (oldBattreyInfo != null) {
advReplyCount--;
lastAvgNodeLoad=avgNodeLoad;
avgNodeLoad=avgNodeLoad - (oldBattreyInfo.getWeight() * ((oldBattreyInfo.getBattreyLoad() - avgNodeLoad) / advReplyCount));
varianceNodeLoad=varianceNodeLoad - (oldBattreyInfo.getWeight() * ((oldBattreyInfo.getBattreyLoad() - lastAvgNodeLoad) * (oldBattreyInfo.getBattreyLoad() - avgNodeLoad)));
}
if (advReplyTotalCount < Preferences.NUMBER_PACKETS_NETWORK_STABLIZE) {
alpha=Preferences.ALPHA_MIN + (((Preferences.NUMBER_PACKETS_NETWORK_STABLIZE - advReplyTotalCount) / (Preferences.NUMBER_PACKETS_NETWORK_STABLIZE * 1.0f)) * (Preferences.ALPHA_MAX - Preferences.ALPHA_MIN));
}
if (Math.abs(node.getBatteryLevel() - avgNodeLoad) > alpha * stdDevNodeLoad) {
isSuitable=false;
}
}
advReplyCount++;
lastAvgNodeLoad=avgNodeLoad;
if (!isSuitable) {
weight=gama;
}
nodeBattreyLoadInfo.add(new BattreyInfo(node.getBatteryLevel(),weight));
avgNodeLoad=avgNodeLoad + weight * ((node.getBatteryLevel() - avgNodeLoad) / advReplyCount);
if (advReplyCount == 1) {
varianceNodeLoad=0;
}
 else {
varianceNodeLoad=varianceNodeLoad + weight * ((node.getBatteryLevel() - lastAvgNodeLoad) * (node.getBatteryLevel() - avgNodeLoad));
}
return isSuitable;
}
private void addAndMergeResults(TaskResult taskResult){
TaskLookup taskLookup=taskLookups.get(taskResult.getTaskId());
taskLookup.getTaskResults().put(taskResult.getSeqNumber(),taskResult);
if (taskLookup.getTask().getTaskBattreyLoad() <= 0 && taskLookup.getTaskGroup().size() == taskLookup.getTaskResults().size()) {
taskLookup.setStatus(Preferences.TASK_STATUS.RECEIVED_RESULTS);
}
if (taskLookup.getStatus() == Preferences.TASK_STATUS.RECEIVED_RESULTS) {
String result=""String_Node_Str"";
for (int i=0; i < taskLookup.getTaskResults().size(); i++) {
result+=(taskLookup.getTaskResults().get(i)).toString() + ""String_Node_Str"";
}
logMessage(""String_Node_Str"" + result);
nodes.get(host).decrBatteryLevel(Preferences.BATTERY_SPENT_IN_TASK_DISTRIBUTION);
}
}
}
).start();
}","private void listenForIncomingMessages(){
  (new Thread(){
    @Override public void run(){
      while (true) {
        try {
          Thread.sleep(10);
          Message msg=mp.receive();
          if (msg != null) {
            if (!(msg instanceof MulticastMessage)) {
switch (msg.getNormalMsgType()) {
case TASK_ADV:
                Task receivedTask=(Task)msg.getData();
synchronized (nodes) {
                logMessage(""String_Node_Str"" + msg.getSource() + ""String_Node_Str""+ receivedTask.getTaskBattreyLoad());
                Node host_node=nodes.get(host);
                if (receivedTask.getTaskBattreyLoad() <= 0) {
                  System.out.println(""String_Node_Str"" + host_node.getName() + ""String_Node_Str""+ receivedTask.getTaskBattreyLoad());
                  break;
                }
                if (receivedTask.getTaskProcessorLoad() > (Preferences.TOTAL_PROCESSOR_LOAD_AT_NODE - host_node.getProcessorLoad() - Preferences.RESERVED_PROCESSOR_AT_NODE)) {
                  logMessage(""String_Node_Str"" + receivedTask.taskId + ""String_Node_Str""+ receivedTask.getTaskProcessorLoad()+ ""String_Node_Str""+ (Preferences.TOTAL_PROCESSOR_LOAD_AT_NODE - host_node.getProcessorLoad() - Preferences.RESERVED_PROCESSOR_AT_NODE));
                  break;
                }
                if (receivedTask.getTaskMemoryLoad() > (Preferences.TOTAL_MEMORY_LOAD_AT_NODE - host_node.getMemoryLoad() - Preferences.RESERVED_MEMORY_AT_NODE)) {
                  logMessage(""String_Node_Str"" + receivedTask.taskId + ""String_Node_Str""+ receivedTask.getTaskMemoryLoad()+ ""String_Node_Str""+ (Preferences.TOTAL_MEMORY_LOAD_AT_NODE - host_node.getMemoryLoad() - Preferences.RESERVED_MEMORY_AT_NODE));
                  break;
                }
                int remaining_battrey_load=host_node.getBatteryLevel() - (receivedTask.getTaskBattreyLoad() + Preferences.BATTERY_SPENT_IN_TASK_CHUNK_EXECUTION + host_node.getPromisedBattreyLoad());
                int battreyLoadCanServe=0;
                if (remaining_battrey_load > Preferences.RESERVED_BATTERY_AT_NODE) {
                  battreyLoadCanServe=receivedTask.getTaskBattreyLoad();
                }
 else {
                  battreyLoadCanServe=host_node.getBatteryLevel() - (Preferences.RESERVED_BATTERY_AT_NODE + Preferences.BATTERY_SPENT_IN_TASK_CHUNK_EXECUTION + host_node.getPromisedBattreyLoad());
                }
                if (battreyLoadCanServe > Preferences.MAX_TASK_CHUNK_LOAD_SIZE) {
                  battreyLoadCanServe=Preferences.MAX_TASK_CHUNK_LOAD_SIZE;
                }
                if (battreyLoadCanServe > Preferences.MINIMUM_LOAD_REQUEST) {
                  Integer tempTaskAdvReplyId=++taskAdvReplyId;
                  String tempTaskAdvReplyIdStr=host_node.getName() + tempTaskAdvReplyId;
                  receivedTask.setPromisedTaskBattreyLoad(battreyLoadCanServe + Preferences.BATTERY_SPENT_IN_TASK_CHUNK_EXECUTION);
                  receivedTask.setPromisedTimeStamp(new Date().getTime());
                  host_node.addToAcceptedTask(tempTaskAdvReplyIdStr,receivedTask);
                  host_node.incrPromisedBattreyLoad(receivedTask.getPromisedBattreyTaskLoad());
                  host_node.incrProcessorLoad(receivedTask.getTaskProcessorLoad());
                  host_node.incrMemoryLoad(receivedTask.getTaskMemoryLoad());
                  TaskAdvReply taskAdvReply=new TaskAdvReply(tempTaskAdvReplyIdStr,receivedTask.getTaskId(),host_node,battreyLoadCanServe);
                  Message profileMsg=new Message(msg.getSource(),""String_Node_Str"",""String_Node_Str"",taskAdvReply,host);
                  profileMsg.setNormalMsgType(Message.NormalMsgType.PROFILE_XCHG);
                  try {
                    if (Preferences.DEBUG_MODE) {
                      System.out.println(""String_Node_Str"" + host + ""String_Node_Str""+ nodes.get(host).getAdrress()+ ""String_Node_Str""+ nodes.get(host).getNodePort());
                    }
                    mp.send(profileMsg);
                  }
 catch (                  InvalidMessageException ex) {
                    host_node.removeFromAcceptedTask(tempTaskAdvReplyIdStr);
                    host_node.decrProcessorLoad(receivedTask.getTaskProcessorLoad());
                    host_node.decrMemoryLoad(receivedTask.getTaskMemoryLoad());
                    host_node.decrPromisedBattreyLoad(receivedTask.getPromisedBattreyTaskLoad());
                    ex.printStackTrace();
                  }
catch (                  UnknownHostException e) {
                    e.printStackTrace();
                  }
                  logMessage(""String_Node_Str"" + receivedTask.taskId + ""String_Node_Str""+ remaining_battrey_load);
                }
 else {
                  System.out.println(""String_Node_Str"" + host_node.getName() + ""String_Node_Str""+ battreyLoadCanServe+ ""String_Node_Str""+ remaining_battrey_load+ ""String_Node_Str""+ receivedTask.getTaskBattreyLoad()+ ""String_Node_Str""+ host_node.getPromisedBattreyLoad());
                  logMessage(""String_Node_Str"" + receivedTask.taskId + ""String_Node_Str""+ battreyLoadCanServe);
                }
              }
            break;
case NORMAL:
          logMessage(msg.getData().toString());
        break;
case PROFILE_XCHG:
      TaskAdvReply taskAdvReply=(TaskAdvReply)msg.getData();
    if (Preferences.DEBUG_MODE) {
      System.out.println(""String_Node_Str"" + taskAdvReply.getNode().getName() + ""String_Node_Str""+ taskAdvReply.getNode().getAdrress()+ ""String_Node_Str""+ taskAdvReply.getNode().getNodePort());
    }
  TaskLookup taskLookup=taskLookups.get(taskAdvReply.getTaskId());
taskLookup.setRetry(0);
distributeTask(taskAdvReply);
break;
case DISTRIBUTED_TASK:
TaskChunk taskChunk=(TaskChunk)msg.getData();
DistributedTask distTask=taskChunk.getDsTask();
Node host_node=nodes.get(host);
TaskResult result;
Map<Integer,TaskResult> tempResults=taskResults.get(distTask.getTaskId());
if (tempResults != null && tempResults.get(distTask.getSeqNumber()) != null) {
result=taskResults.get(distTask.getTaskId()).get(taskChunk.getSequenceNumber());
}
 else {
if (host_node.getAcceptedTaskByTaskId(taskChunk.getTaskAdvReplyId()) == null) {
break;
}
host_node.getAcceptedTaskByTaskId(taskChunk.getTaskAdvReplyId()).setInExecution(true);
result=new TaskResult(distTask.getTaskProcessorLoad(),distTask.getTaskMemoryLoad(),distTask.getTaskBattreyLoad(),distTask.taskId,host,handleDistributedTask(distTask),taskChunk.getSequenceNumber());
if (tempResults == null) {
tempResults=new HashMap<Integer,TaskResult>();
}
tempResults.put(taskChunk.getSequenceNumber(),result);
taskResults.put(distTask.getTaskId(),tempResults);
int loadServed=host_node.getAcceptedTaskByTaskId(taskChunk.getTaskAdvReplyId()).getPromisedBattreyTaskLoad();
if (host_node.getAcceptedTaskByTaskId(taskChunk.getTaskAdvReplyId()) != null) {
host_node.decrPromisedBattreyLoad(loadServed);
}
host_node.removeFromAcceptedTask(taskChunk.getTaskAdvReplyId());
nodes.get(host).decrBatteryLevel(loadServed);
host_node.decrProcessorLoad(distTask.getTaskProcessorLoad());
host_node.decrMemoryLoad(distTask.getTaskMemoryLoad());
}
logMessage(result.getTaskResult().toString());
Message resultMsg=new Message(distTask.getSource(),""String_Node_Str"",""String_Node_Str"",result,host_node.getName());
resultMsg.setNormalMsgType(Message.NormalMsgType.TASK_RESULT);
try {
mp.send(resultMsg);
}
 catch (InvalidMessageException ex) {
Logger.getLogger(TaskDistributor.class.getName()).log(Level.SEVERE,null,ex);
}
break;
case TASK_RESULT:
TaskResult taskResult=(TaskResult)msg.getData();
Integer seqNumber=taskResult.getSeqNumber();
taskLookup=taskLookups.get(taskResult.getTaskId());
synchronized (taskLookup) {
taskLookup.getTaskGroup().get(taskLookup.getResultTracker().get(taskResult.getSeqNumber())).setStatus(Preferences.TASK_CHUNK_STATUS.RECEIVED);
taskLookup.removeFromResultTracker(seqNumber);
addAndMergeResults(taskResult);
}
logMessage(""String_Node_Str"" + seqNumber + ""String_Node_Str""+ taskLookup.printResultTracker()+ ""String_Node_Str""+ taskResult.getSource()+ ""String_Node_Str""+ taskResult.getTaskResult());
break;
}
}
}
}
 catch (InterruptedException ex) {
ex.printStackTrace();
}
catch (UnknownHostException e) {
e.printStackTrace();
}
}
}
private Serializable handleDistributedTask(DistributedTask gotTask){
try {
Class cl=Class.forName(gotTask.getClassName());
HashMap<String,Class[]> mthdDef=new HashMap<String,Class[]>();
Method mthds[]=cl.getDeclaredMethods();
for (Method m : mthds) {
mthdDef.put(m.getName(),m.getParameterTypes());
}
if (gotTask.getParameters() != null && ((mthdDef.get(gotTask.getMethodName())).length != gotTask.getParameters().length)) {
logMessage(""String_Node_Str"");
}
 else {
Class params[]=mthdDef.get(gotTask.getMethodName());
Object parameters[]=(Object[])gotTask.getParameters();
try {
Method invokedMethod=cl.getMethod(gotTask.getMethodName(),params);
return (Serializable)invokedMethod.invoke(new SampleApplicationLocal(),parameters);
}
 catch (IllegalAccessException ex) {
ex.printStackTrace();
}
catch (InvocationTargetException ex) {
ex.printStackTrace();
}
catch (IllegalArgumentException e) {
e.printStackTrace();
}
catch (SecurityException e) {
e.printStackTrace();
}
catch (NoSuchMethodException e) {
e.printStackTrace();
}
}
}
 catch (ClassNotFoundException e) {
e.printStackTrace();
}
return null;
}
private synchronized void distributeTask(TaskAdvReply taskAdvReply){
String taskId=taskAdvReply.getTaskId();
Node node=taskAdvReply.getNode();
TaskLookup taskLookup=taskLookups.get(taskId);
Task taskToDistribute=(taskLookups.get(taskId)).getTask();
int loadDistributed;
if (taskToDistribute.getTaskBattreyLoad() <= 0) {
return;
}
if (taskLookup.getStatus() == Preferences.TASK_STATUS.DISTRIBUTED) {
return;
}
if (!isNodeSuitableForDistribution(node,taskLookup)) {
return;
}
loadDistributed=(int)Math.ceil((taskToDistribute.getTaskBattreyLoad() > taskAdvReply.getLoadCanServe()) ? (taskAdvReply.getLoadCanServe()) : taskToDistribute.getTaskBattreyLoad());
taskToDistribute.setTaskBattreyLoad(taskToDistribute.getTaskBattreyLoad() - loadDistributed);
if (taskToDistribute.getTaskBattreyLoad() <= 0) {
taskLookup.setStatus(Preferences.TASK_STATUS.DISTRIBUTED);
}
Serializable[] parameters=new Serializable[2];
parameters[0]=10;
parameters[1]=20;
DistributedTask dsTask=new DistributedTask(taskToDistribute.getTaskProcessorLoad(),taskToDistribute.getTaskMemoryLoad(),loadDistributed,taskId,taskToDistribute.getSource(),""String_Node_Str"",""String_Node_Str"",parameters);
TaskChunk taskChunk=new TaskChunk(taskId,node,taskLookup.nextSequenceNumber(),dsTask,taskAdvReply.getTaskAdvReplyId());
taskLookup.addToTaskGroup(taskChunk.getTaskAdvReplyId(),taskChunk);
Message distMsg=new Message(node.getName(),""String_Node_Str"",""String_Node_Str"",taskChunk,host);
distMsg.setNormalMsgType(Message.NormalMsgType.DISTRIBUTED_TASK);
if (Preferences.DEBUG_MODE) {
try {
System.out.println(""String_Node_Str"" + node.getName() + ""String_Node_Str""+ node.getAdrress()+ ""String_Node_Str""+ node.getNodePort());
}
 catch (UnknownHostException e) {
e.printStackTrace();
}
}
sendAndRetryTaskChunk(taskChunk,distMsg,dsTask,loadDistributed,taskLookup);
}
private boolean isNodeSuitableForDistribution(Node node,TaskLookup taskLookup){
return isNodeSuitableForEfficientDistributionCheck(node,taskLookup);
}
private boolean isNodeSuitableForNaiveDistributionCheck(Node node,TaskLookup taskLookup){
return true;
}
private boolean isNodeSuitableForEfficientDistributionCheck(Node node,TaskLookup taskLookup){
boolean isSuitable=true;
float alpha=Preferences.ALPHA_MIN;
float beta=Preferences.BETA;
float gama=Preferences.GAMA;
float weight=beta;
BattreyInfo oldBattreyInfo=null;
float lastAvgNodeLoad;
Queue<BattreyInfo> nodeBattreyLoadInfo=battreyLoadInfo.get(node.getName());
if (nodeBattreyLoadInfo == null) {
nodeBattreyLoadInfo=new LinkedList<BattreyInfo>();
battreyLoadInfo.put(node.getName(),nodeBattreyLoadInfo);
}
if (nodeBattreyLoadInfo.size() >= Preferences.NODE_BATTERY_INFO_QUEUE_SIZE) {
oldBattreyInfo=nodeBattreyLoadInfo.remove();
}
advReplyTotalCount++;
if (advReplyCount > 1) {
double stdDevNodeLoad=Math.sqrt(varianceNodeLoad / advReplyCount);
if (oldBattreyInfo != null) {
advReplyCount--;
lastAvgNodeLoad=avgNodeLoad;
avgNodeLoad=avgNodeLoad - (oldBattreyInfo.getWeight() * ((oldBattreyInfo.getBattreyLoad() - avgNodeLoad) / advReplyCount));
varianceNodeLoad=varianceNodeLoad - (oldBattreyInfo.getWeight() * ((oldBattreyInfo.getBattreyLoad() - lastAvgNodeLoad) * (oldBattreyInfo.getBattreyLoad() - avgNodeLoad)));
}
if (advReplyTotalCount < Preferences.NUMBER_PACKETS_NETWORK_STABLIZE) {
alpha=Preferences.ALPHA_MIN + (((Preferences.NUMBER_PACKETS_NETWORK_STABLIZE - advReplyTotalCount) / (Preferences.NUMBER_PACKETS_NETWORK_STABLIZE * 1.0f)) * (Preferences.ALPHA_MAX - Preferences.ALPHA_MIN));
}
alpha=alpha + (22 - nodes.size()) * (Preferences.ALPHA_SAFE - Preferences.ALPHA_MIN) / 20.0f;
if ((node.getBatteryLevel() - avgNodeLoad) > (Preferences.ALPHA_POSITIVE_RANGE * stdDevNodeLoad)) {
isSuitable=true;
}
 else if (Math.abs(node.getBatteryLevel() - avgNodeLoad) > (alpha * stdDevNodeLoad)) {
isSuitable=false;
}
System.out.println(""String_Node_Str"" + node.getName() + ""String_Node_Str""+ node.getBatteryLevel()+ ""String_Node_Str""+ avgNodeLoad+ ""String_Node_Str""+ stdDevNodeLoad+ ""String_Node_Str""+ alpha+ ""String_Node_Str""+ isSuitable);
}
advReplyCount++;
lastAvgNodeLoad=avgNodeLoad;
if (!isSuitable) {
weight=gama;
}
nodeBattreyLoadInfo.add(new BattreyInfo(node.getBatteryLevel(),weight));
avgNodeLoad=avgNodeLoad + weight * ((node.getBatteryLevel() - avgNodeLoad) / advReplyCount);
if (advReplyCount == 1) {
varianceNodeLoad=0;
}
 else {
varianceNodeLoad=varianceNodeLoad + weight * ((node.getBatteryLevel() - lastAvgNodeLoad) * (node.getBatteryLevel() - avgNodeLoad));
}
return isSuitable;
}
private void addAndMergeResults(TaskResult taskResult){
TaskLookup taskLookup=taskLookups.get(taskResult.getTaskId());
taskLookup.getTaskResults().put(taskResult.getSeqNumber(),taskResult);
if (taskLookup.getTask().getTaskBattreyLoad() <= 0 && taskLookup.getTaskGroup().size() == taskLookup.getTaskResults().size()) {
taskLookup.setStatus(Preferences.TASK_STATUS.RECEIVED_RESULTS);
}
if (taskLookup.getStatus() == Preferences.TASK_STATUS.RECEIVED_RESULTS) {
String result=""String_Node_Str"";
for (int i=0; i < taskLookup.getTaskResults().size(); i++) {
result+=(taskLookup.getTaskResults().get(i)).toString() + ""String_Node_Str"";
}
logMessage(""String_Node_Str"" + result);
nodes.get(host).decrBatteryLevel(Preferences.BATTERY_SPENT_IN_TASK_DISTRIBUTION);
}
}
}
).start();
}",0.9033134360367444
45347,"private void distributeTask(TaskAdvReply taskAdvReply){
  String taskId=taskAdvReply.getTaskId();
  Node node=taskAdvReply.getNode();
  TaskLookup taskLookup=taskLookups.get(taskId);
  Task taskToDistribute=(taskLookups.get(taskId)).getTask();
  if (taskToDistribute.getTaskBattreyLoad() <= 0) {
    return;
  }
  if (taskLookup.getStatus() == Preferences.TASK_STATUS.DISTRIBUTED) {
    return;
  }
  if (!isNodeSuitableForDistribution(node,taskLookup)) {
    return;
  }
  int loadDistributed=(int)Math.ceil((taskToDistribute.getTaskBattreyLoad() > taskAdvReply.getLoadCanServe()) ? (taskAdvReply.getLoadCanServe()) : taskToDistribute.getTaskBattreyLoad());
  taskToDistribute.setTaskBattreyLoad(taskToDistribute.getTaskBattreyLoad() - loadDistributed);
  if (taskToDistribute.getTaskBattreyLoad() <= 0) {
    taskLookup.setStatus(Preferences.TASK_STATUS.DISTRIBUTED);
  }
  Serializable[] parameters=new Serializable[2];
  parameters[0]=10;
  parameters[1]=20;
  DistributedTask dsTask=new DistributedTask(taskToDistribute.getTaskProcessorLoad(),taskToDistribute.getTaskMemoryLoad(),loadDistributed,taskId,taskToDistribute.getSource(),""String_Node_Str"",""String_Node_Str"",parameters);
  TaskChunk taskChunk=new TaskChunk(taskId,node,taskLookup.nextSequenceNumber(),dsTask,taskAdvReply.getTaskAdvReplyId());
  taskLookup.addToTaskGroup(taskChunk.getTaskAdvReplyId(),taskChunk);
  Message distMsg=new Message(node.getName(),""String_Node_Str"",""String_Node_Str"",taskChunk,host);
  distMsg.setNormalMsgType(Message.NormalMsgType.DISTRIBUTED_TASK);
  if (Preferences.DEBUG_MODE) {
    try {
      System.out.println(""String_Node_Str"" + node.getName() + ""String_Node_Str""+ node.getAdrress()+ ""String_Node_Str""+ node.getNodePort());
    }
 catch (    UnknownHostException e) {
      e.printStackTrace();
    }
  }
  sendAndRetryTaskChunk(taskChunk,distMsg,dsTask,loadDistributed,taskLookup);
}","private synchronized void distributeTask(TaskAdvReply taskAdvReply){
  String taskId=taskAdvReply.getTaskId();
  Node node=taskAdvReply.getNode();
  TaskLookup taskLookup=taskLookups.get(taskId);
  Task taskToDistribute=(taskLookups.get(taskId)).getTask();
  int loadDistributed;
  if (taskToDistribute.getTaskBattreyLoad() <= 0) {
    return;
  }
  if (taskLookup.getStatus() == Preferences.TASK_STATUS.DISTRIBUTED) {
    return;
  }
  if (!isNodeSuitableForDistribution(node,taskLookup)) {
    return;
  }
  loadDistributed=(int)Math.ceil((taskToDistribute.getTaskBattreyLoad() > taskAdvReply.getLoadCanServe()) ? (taskAdvReply.getLoadCanServe()) : taskToDistribute.getTaskBattreyLoad());
  taskToDistribute.setTaskBattreyLoad(taskToDistribute.getTaskBattreyLoad() - loadDistributed);
  if (taskToDistribute.getTaskBattreyLoad() <= 0) {
    taskLookup.setStatus(Preferences.TASK_STATUS.DISTRIBUTED);
  }
  Serializable[] parameters=new Serializable[2];
  parameters[0]=10;
  parameters[1]=20;
  DistributedTask dsTask=new DistributedTask(taskToDistribute.getTaskProcessorLoad(),taskToDistribute.getTaskMemoryLoad(),loadDistributed,taskId,taskToDistribute.getSource(),""String_Node_Str"",""String_Node_Str"",parameters);
  TaskChunk taskChunk=new TaskChunk(taskId,node,taskLookup.nextSequenceNumber(),dsTask,taskAdvReply.getTaskAdvReplyId());
  taskLookup.addToTaskGroup(taskChunk.getTaskAdvReplyId(),taskChunk);
  Message distMsg=new Message(node.getName(),""String_Node_Str"",""String_Node_Str"",taskChunk,host);
  distMsg.setNormalMsgType(Message.NormalMsgType.DISTRIBUTED_TASK);
  if (Preferences.DEBUG_MODE) {
    try {
      System.out.println(""String_Node_Str"" + node.getName() + ""String_Node_Str""+ node.getAdrress()+ ""String_Node_Str""+ node.getNodePort());
    }
 catch (    UnknownHostException e) {
      e.printStackTrace();
    }
  }
  sendAndRetryTaskChunk(taskChunk,distMsg,dsTask,loadDistributed,taskLookup);
}",0.9894847528916928
45348,"private boolean isNodeSuitableForEfficientDistributionCheck(Node node,TaskLookup taskLookup){
  boolean isSuitable=true;
  float alpha=Preferences.ALPHA_MIN;
  float beta=Preferences.BETA;
  float gama=Preferences.GAMA;
  float weight=beta;
  BattreyInfo oldBattreyInfo=null;
  float lastAvgNodeLoad;
  Queue<BattreyInfo> nodeBattreyLoadInfo=battreyLoadInfo.get(node.getName());
  if (nodeBattreyLoadInfo == null) {
    nodeBattreyLoadInfo=new LinkedList<BattreyInfo>();
    battreyLoadInfo.put(node.getName(),nodeBattreyLoadInfo);
  }
  if (nodeBattreyLoadInfo.size() >= Preferences.NODE_BATTERY_INFO_QUEUE_SIZE) {
    oldBattreyInfo=nodeBattreyLoadInfo.remove();
  }
  advReplyTotalCount++;
  if (advReplyCount > 1) {
    double stdDevNodeLoad=Math.sqrt(varianceNodeLoad / advReplyCount);
    if (oldBattreyInfo != null) {
      advReplyCount--;
      lastAvgNodeLoad=avgNodeLoad;
      avgNodeLoad=avgNodeLoad - (oldBattreyInfo.getWeight() * ((oldBattreyInfo.getBattreyLoad() - avgNodeLoad) / advReplyCount));
      varianceNodeLoad=varianceNodeLoad - (oldBattreyInfo.getWeight() * ((oldBattreyInfo.getBattreyLoad() - lastAvgNodeLoad) * (oldBattreyInfo.getBattreyLoad() - avgNodeLoad)));
    }
    if (advReplyTotalCount < Preferences.NUMBER_PACKETS_NETWORK_STABLIZE) {
      alpha=Preferences.ALPHA_MIN + (((Preferences.NUMBER_PACKETS_NETWORK_STABLIZE - advReplyTotalCount) / (Preferences.NUMBER_PACKETS_NETWORK_STABLIZE * 1.0f)) * (Preferences.ALPHA_MAX - Preferences.ALPHA_MIN));
    }
    if (Math.abs(node.getBatteryLevel() - avgNodeLoad) > alpha * stdDevNodeLoad) {
      isSuitable=false;
    }
  }
  advReplyCount++;
  lastAvgNodeLoad=avgNodeLoad;
  if (!isSuitable) {
    weight=gama;
  }
  nodeBattreyLoadInfo.add(new BattreyInfo(node.getBatteryLevel(),weight));
  avgNodeLoad=avgNodeLoad + weight * ((node.getBatteryLevel() - avgNodeLoad) / advReplyCount);
  if (advReplyCount == 1) {
    varianceNodeLoad=0;
  }
 else {
    varianceNodeLoad=varianceNodeLoad + weight * ((node.getBatteryLevel() - lastAvgNodeLoad) * (node.getBatteryLevel() - avgNodeLoad));
  }
  return isSuitable;
}","private boolean isNodeSuitableForEfficientDistributionCheck(Node node,TaskLookup taskLookup){
  boolean isSuitable=true;
  float alpha=Preferences.ALPHA_MIN;
  float beta=Preferences.BETA;
  float gama=Preferences.GAMA;
  float weight=beta;
  BattreyInfo oldBattreyInfo=null;
  float lastAvgNodeLoad;
  Queue<BattreyInfo> nodeBattreyLoadInfo=battreyLoadInfo.get(node.getName());
  if (nodeBattreyLoadInfo == null) {
    nodeBattreyLoadInfo=new LinkedList<BattreyInfo>();
    battreyLoadInfo.put(node.getName(),nodeBattreyLoadInfo);
  }
  if (nodeBattreyLoadInfo.size() >= Preferences.NODE_BATTERY_INFO_QUEUE_SIZE) {
    oldBattreyInfo=nodeBattreyLoadInfo.remove();
  }
  advReplyTotalCount++;
  if (advReplyCount > 1) {
    double stdDevNodeLoad=Math.sqrt(varianceNodeLoad / advReplyCount);
    if (oldBattreyInfo != null) {
      advReplyCount--;
      lastAvgNodeLoad=avgNodeLoad;
      avgNodeLoad=avgNodeLoad - (oldBattreyInfo.getWeight() * ((oldBattreyInfo.getBattreyLoad() - avgNodeLoad) / advReplyCount));
      varianceNodeLoad=varianceNodeLoad - (oldBattreyInfo.getWeight() * ((oldBattreyInfo.getBattreyLoad() - lastAvgNodeLoad) * (oldBattreyInfo.getBattreyLoad() - avgNodeLoad)));
    }
    if (advReplyTotalCount < Preferences.NUMBER_PACKETS_NETWORK_STABLIZE) {
      alpha=Preferences.ALPHA_MIN + (((Preferences.NUMBER_PACKETS_NETWORK_STABLIZE - advReplyTotalCount) / (Preferences.NUMBER_PACKETS_NETWORK_STABLIZE * 1.0f)) * (Preferences.ALPHA_MAX - Preferences.ALPHA_MIN));
    }
    alpha=alpha + (22 - nodes.size()) * (Preferences.ALPHA_SAFE - Preferences.ALPHA_MIN) / 20.0f;
    if ((node.getBatteryLevel() - avgNodeLoad) > (Preferences.ALPHA_POSITIVE_RANGE * stdDevNodeLoad)) {
      isSuitable=true;
    }
 else     if (Math.abs(node.getBatteryLevel() - avgNodeLoad) > (alpha * stdDevNodeLoad)) {
      isSuitable=false;
    }
    System.out.println(""String_Node_Str"" + node.getName() + ""String_Node_Str""+ node.getBatteryLevel()+ ""String_Node_Str""+ avgNodeLoad+ ""String_Node_Str""+ stdDevNodeLoad+ ""String_Node_Str""+ alpha+ ""String_Node_Str""+ isSuitable);
  }
  advReplyCount++;
  lastAvgNodeLoad=avgNodeLoad;
  if (!isSuitable) {
    weight=gama;
  }
  nodeBattreyLoadInfo.add(new BattreyInfo(node.getBatteryLevel(),weight));
  avgNodeLoad=avgNodeLoad + weight * ((node.getBatteryLevel() - avgNodeLoad) / advReplyCount);
  if (advReplyCount == 1) {
    varianceNodeLoad=0;
  }
 else {
    varianceNodeLoad=varianceNodeLoad + weight * ((node.getBatteryLevel() - lastAvgNodeLoad) * (node.getBatteryLevel() - avgNodeLoad));
  }
  return isSuitable;
}",0.8753486376314096
45349,"private void sendAndRetryTaskAdv(final TaskLookup taskLookup,final Message advMsg){
  (new Thread(){
    public void run(){
      while (taskLookup.getStatus() == Preferences.TASK_STATUS.ADVERTISED && taskLookup.getRetry() < Preferences.NUMBER_OF_RETRIES_BEFORE_QUITTING) {
        logMessage(""String_Node_Str"" + taskLookup.getStatus() + ""String_Node_Str""+ taskLookup.getRetry());
        try {
synchronized (mp) {
synchronized (nodes) {
              Collection<Node> nodesTemp=nodes.values();
              for (              Node n : nodesTemp) {
                if (!n.getName().equalsIgnoreCase(host)) {
                  advMsg.setDest(n.getName());
                  mp.send(advMsg);
                  Thread.sleep(100);
                }
              }
            }
          }
        }
 catch (        InterruptedException ex) {
          Logger.getLogger(TaskDistributor.class.getName()).log(Level.SEVERE,null,ex);
        }
catch (        InvalidMessageException e) {
          e.printStackTrace();
        }
        taskLookup.incrRetry();
        try {
          if (taskLookup.getRetry() < Preferences.NUMBER_OF_RETRIES_BEFORE_QUITTING) {
            Thread.sleep(Preferences.WAIT_TIME_BEFORE_RETRYING);
          }
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
).start();
}","private void sendAndRetryTaskAdv(final TaskLookup taskLookup,final Message advMsg){
  (new Thread(){
    public void run(){
      while (taskLookup.getStatus() == Preferences.TASK_STATUS.ADVERTISED && taskLookup.getRetry() < Preferences.NUMBER_OF_RETRIES_BEFORE_QUITTING) {
        logMessage(""String_Node_Str"" + taskLookup.getStatus() + ""String_Node_Str""+ taskLookup.getRetry());
        try {
synchronized (mp) {
synchronized (nodes) {
              Collection<Node> nodesTemp=nodes.values();
              for (              Node n : nodesTemp) {
                if (!n.getName().equalsIgnoreCase(host)) {
                  advMsg.setDest(n.getName());
                  if (taskLookup.getStatus() == Preferences.TASK_STATUS.DISTRIBUTED)                   break;
                  mp.send(advMsg);
                  Thread.sleep(100);
                }
              }
            }
          }
        }
 catch (        InterruptedException ex) {
          Logger.getLogger(TaskDistributor.class.getName()).log(Level.SEVERE,null,ex);
        }
catch (        InvalidMessageException e) {
          e.printStackTrace();
        }
        taskLookup.incrRetry();
        try {
          if (taskLookup.getRetry() < Preferences.NUMBER_OF_RETRIES_BEFORE_QUITTING) {
            Thread.sleep(Preferences.WAIT_TIME_BEFORE_RETRYING);
          }
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
).start();
}",0.960144927536232
45350,"public void run(){
synchronized (lock) {
    int noCommands=commands.size();
    int commandsRun=0;
    this.owner.getRunButton().setEnabled(false);
    this.owner.getProgressBar().setMaximum(noCommands);
    this.owner.getProgressBar().setValue(0);
    Iterator<RunCommand> iter=this.commands.iterator();
    while (iter.hasNext() && !stop) {
      RunCommand r=iter.next();
      this.owner.getProgressBar().setString(""String_Node_Str"" + r.getMethod() + ""String_Node_Str"");
      this.owner.getProgressBar().setStringPainted(true);
      r.run();
      passes+=r.getPasses();
      failures+=r.getFailures();
      exceptions+=r.getExceptions();
      if (owner.getHideSuccessfulTests().getState() && r.getFailures() == 0) {
      }
 else {
        owner.getTestOutput().append(r.getOutput() + ""String_Node_Str"");
        owner.getTestOutput().setCaretPosition(owner.getTestOutput().getText().length());
      }
      this.owner.getProgressBar().setValue(++commandsRun);
    }
    owner.getTestOutput().append(""String_Node_Str"");
    owner.getTestOutput().append(""String_Node_Str"" + passes + ""String_Node_Str""+ failures+ ""String_Node_Str""+ exceptions+ ""String_Node_Str"");
    owner.getTestOutput().setCaretPosition(owner.getTestOutput().getText().length());
    if (stop) {
      this.owner.getProgressBar().setValue(0);
      this.owner.getProgressBar().setString(""String_Node_Str"");
    }
 else {
      this.owner.getProgressBar().setString(""String_Node_Str"");
    }
    stop=false;
    this.owner.getRunButton().setEnabled(true);
    this.owner.getCancelButton().setEnabled(false);
  }
}","@Override public void run(){
synchronized (lock) {
    int noCommands=commands.size();
    this.owner.getRunButton().setEnabled(false);
    this.owner.getProgressBar().setMaximum(noCommands);
    this.owner.getProgressBar().setValue(0);
    Iterator<RunCommand> iter=this.commands.iterator();
    while (iter.hasNext() && !stop) {
      RunCommand r=iter.next();
      this.owner.getProgressBar().setString(""String_Node_Str"" + r.getMethod() + ""String_Node_Str"");
      this.owner.getProgressBar().setStringPainted(true);
      r.run();
      passes+=r.getPasses();
      failures+=r.getFailures();
      exceptions+=r.getExceptions();
      commandsRun++;
      if (owner.getHideSuccessfulTests().getState() && r.getFailures() == 0 && r.getPasses() > 0) {
      }
 else {
        owner.getTestOutput().append(r.getOutput() + ""String_Node_Str"");
        owner.getTestOutput().setCaretPosition(owner.getTestOutput().getText().length());
      }
      if (!r.getError().isEmpty()) {
        owner.getTestOutput().append(r.getMethod() + ""String_Node_Str"" + r.getError()+ ""String_Node_Str"");
        owner.getTestOutput().setCaretPosition(owner.getTestOutput().getText().length());
      }
      this.owner.getProgressBar().setValue(commandsRun);
    }
    owner.getTestOutput().append(""String_Node_Str"");
    owner.getTestOutput().append(""String_Node_Str"" + commandsRun + ""String_Node_Str""+ passes+ ""String_Node_Str""+ failures+ ""String_Node_Str""+ exceptions+ ""String_Node_Str"");
    owner.getTestOutput().setCaretPosition(owner.getTestOutput().getText().length());
    if (stop) {
      this.owner.getProgressBar().setValue(0);
      this.owner.getProgressBar().setString(""String_Node_Str"");
    }
 else {
      this.owner.getProgressBar().setString(""String_Node_Str"");
    }
    stop=false;
    this.owner.getRunButton().setEnabled(true);
    this.owner.getCancelButton().setEnabled(false);
  }
}",0.8315638450502152
45351,"/** 
 * Runs the command and adds the command output to the output box on the owner form.
 */
public void run(){
  Matcher passesMatcher;
  Matcher failuresMatcher;
  Matcher exceptionsMatcher;
  try {
    Process p=Runtime.getRuntime().exec(this.command,this.env);
    BufferedReader br=new BufferedReader(new InputStreamReader(p.getInputStream()));
    String line=br.readLine();
    while (line != null) {
      output+=line + ""String_Node_Str"";
      line=br.readLine();
    }
    passesMatcher=getPassesPattern.matcher(output);
    failuresMatcher=getFailuresPattern.matcher(output);
    exceptionsMatcher=getExceptionsPattern.matcher(output);
    if (passesMatcher.find()) {
      passes+=Integer.parseInt(passesMatcher.group(1));
    }
    if (failuresMatcher.find()) {
      failures+=Integer.parseInt(failuresMatcher.group(1));
    }
    if (exceptionsMatcher.find()) {
      exceptions+=Integer.parseInt(exceptionsMatcher.group(1));
    }
    br.close();
  }
 catch (  Exception e) {
    output+=""String_Node_Str"" + command + ""String_Node_Str"";
    for (int i=0; i < env.length; i++) {
      output+=env[i] + ""String_Node_Str"";
    }
  }
}","/** 
 * Runs the command and adds the command output to the output box on the owner form.
 */
@Override public void run(){
  Matcher passesMatcher;
  Matcher failuresMatcher;
  Matcher exceptionsMatcher;
  System.out.println(""String_Node_Str"" + this.command);
  System.out.println(""String_Node_Str"");
  for (int i=0; i < env.length; i++) {
    System.out.println(env[i]);
  }
  try {
    Process p=Runtime.getRuntime().exec(this.command,this.env);
    BufferedReader br=new BufferedReader(new InputStreamReader(p.getInputStream()));
    BufferedReader br_err=new BufferedReader(new InputStreamReader(p.getErrorStream()));
    String line=br.readLine();
    while (line != null) {
      output+=line + ""String_Node_Str"";
      line=br.readLine();
    }
    line=br_err.readLine();
    while (line != null) {
      error+=line + ""String_Node_Str"";
      line=br_err.readLine();
    }
    passesMatcher=getPassesPattern.matcher(output);
    failuresMatcher=getFailuresPattern.matcher(output);
    exceptionsMatcher=getExceptionsPattern.matcher(output);
    if (passesMatcher.find()) {
      passes+=Integer.parseInt(passesMatcher.group(1));
    }
    if (failuresMatcher.find()) {
      failures+=Integer.parseInt(failuresMatcher.group(1));
    }
    if (exceptionsMatcher.find()) {
      exceptions+=Integer.parseInt(exceptionsMatcher.group(1));
    }
    br.close();
  }
 catch (  Exception e) {
    output+=""String_Node_Str"" + command + ""String_Node_Str"";
    for (int i=0; i < env.length; i++) {
      output+=env[i] + ""String_Node_Str"";
    }
  }
}",0.8410522415709522
45352,"/** 
 * Initialises the RunCommand object with the owner form, the command to execute and the environment variables to use.
 * @param owner The owner form.
 * @param command
 * @param env
 */
public RunCommand(MainForm owner,String command,String[] env){
  this.owner=owner;
  this.command=command;
  this.env=env;
  System.out.println(""String_Node_Str"" + this.command);
  System.out.println(""String_Node_Str"");
  for (int i=0; i < env.length; i++) {
    System.out.println(env[i]);
  }
}","/** 
 * Initialises the RunCommand object with the owner form, the command to execute and the environment variables to use.
 * @param owner The owner form.
 * @param command
 * @param env
 */
public RunCommand(MainForm owner,String command,String[] env){
  this.owner=owner;
  this.command=command;
  this.env=env;
}",0.7860696517412935
45353,"public String getOutput(){
  return output;
}","/** 
 * Returns whatever was output to stdout during the run of the command.
 * @return The stdout for the command.
 */
public String getOutput(){
  return output;
}",0.4285714285714285
45354,"public DIFManager(String rina,String addr,String DNSAddress){
  ipAddr=addr;
  rinaName=rina;
  InetIPC ipc=new InetIPC(rinaName);
  try {
    Socket dns=new Socket(DNSAddress,DNS_PORT);
    String IDDAdress=""String_Node_Str"";
    boolean success2=false;
    while (!success2) {
      dns.getOutputStream().write(Message.newDNS_UPDATE_REQ(rinaName));
      Message response=Message.readFromSocket(dns);
      if (response.errorCode == 0) {
        success2=true;
        IDDAdress=response.text1;
        if (IDDAdress == null || IDDAdress.equals(""String_Node_Str"")) {
          System.out.println(""String_Node_Str"");
          System.exit(0);
        }
      }
    }
    Socket s=new Socket(IDDAdress,IDD_PORT);
    boolean success=false;
    while (!success) {
      s.getOutputStream().write(Message.newCDAP_IDD_SERVADD_REQ(rinaName,ipAddr));
      Message response=Message.readFromSocket(s);
      if (response.errorCode == 0)       success=true;
    }
    InetDIFServerSocket idss=ipc.newServerSocket(Constants.DIF_MANAGER_PORT);
    while (true) {
      InetDIFSocket ids=idss.accept();
      Message req=Message.parseMessage(ids.read());
      if (req.type == Message.CDAP_CONNECT_REQ) {
        int auth=authenticate(req.text1,req.text2);
        ids.write(Message.newCDAP_CONNECT_RSP(auth));
        if (auth == 0) {
          internalData.addMember(new Member(ids.getDestName(),new DIF(""String_Node_Str""),ids.getDestAddr()));
          boolean received=false;
          while (!received) {
            byte[] update=Message.newCDAP_UPDATE_RIB_REQ(internalData.getMemberList());
            ids.write(update);
            if (Message.parseMessage(ids.read()).errorCode == 0)             received=true;
          }
          for (          Member b : internalData.getMemberList()) {
            InetDIFSocket cli_sock=ipc.openNewSocket(b.getName());
            received=false;
            while (!received) {
              byte[] update=Message.newCDAP_UPDATE_RIB_REQ(internalData.getMemberList());
              cli_sock.write(update);
              if (Message.parseMessage(cli_sock.read()).errorCode == 0)               received=true;
            }
          }
        }
      }
      ids.close();
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public DIFManager(String rina){
  rinaName=Constants.DIF_MANAGER_NAME;
  DIFName=rina;
  userPasswordPairs=new Hashtable<String,String>();
  internalData=new ResourceInformationBase();
  userPasswordPairs.put(Constants.username,Constants.password);
  InetIPC ipc=new InetIPC(rinaName);
  try {
    Socket dns=new Socket(Constants.DNS_IP,Constants.DNS_PORT);
    String IDDAdress=""String_Node_Str"";
    boolean success2=false;
    while (!success2) {
      dns.getOutputStream().write(Message.newDNS_UPDATE_REQ(rinaName));
      Message response=Message.readFromSocket(dns);
      System.out.println(""String_Node_Str"");
      if (response.errorCode == 0) {
        System.out.println(""String_Node_Str"");
        success2=true;
        IDDAdress=response.text1;
        System.out.println(""String_Node_Str"" + IDDAdress);
        if (IDDAdress == null || IDDAdress.equals(""String_Node_Str"")) {
          System.out.println(""String_Node_Str"");
          System.exit(0);
        }
      }
    }
    System.out.println(""String_Node_Str"" + IDDAdress);
    Socket s=new Socket(IDDAdress,Constants.IDD_PORT);
    boolean success=false;
    while (!success) {
      s.getOutputStream().write(Message.newCDAP_IDD_UPDATE_REQ(DIFName,rinaName));
      Message response=Message.readFromSocket(s);
      if (response.errorCode == 0)       success=true;
    }
    InetDIFServerSocket idss=ipc.newServerSocket(Constants.DIF_MANAGER_PORT);
    while (true) {
      InetDIFSocket ids=idss.accept();
      Message req=Message.parseMessage(ids.read());
      if (req.type == Message.CDAP_CONNECT_REQ) {
        int auth=authenticate(req.text1,req.text2);
        ids.write(Message.newCDAP_CONNECT_RSP(auth));
        if (auth == 0) {
          internalData.addMember(new Member(ids.getDestName(),new DIF(""String_Node_Str""),ids.getDestAddr()));
          boolean received=false;
          while (!received) {
            byte[] update=Message.newCDAP_UPDATE_RIB_REQ(internalData.getMemberList());
            ids.write(update);
            if (Message.parseMessage(ids.read()).errorCode == 0)             received=true;
          }
          for (          Member b : internalData.getMemberList()) {
            InetDIFSocket cli_sock=ipc.openNewSocket(b.getName());
            received=false;
            while (!received) {
              byte[] update=Message.newCDAP_UPDATE_RIB_REQ(internalData.getMemberList());
              cli_sock.write(update);
              if (Message.parseMessage(cli_sock.read()).errorCode == 0)               received=true;
            }
          }
        }
      }
      ids.close();
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.5282331511839709
45355,"private static Boolean set_ip(String url,String ip,LinkedList<Addr_pair> at){
  Addr_pair ap;
  ListIterator iter=at.listIterator();
  while (iter.hasNext()) {
    ap=(Addr_pair)iter.next();
    if (ap.url == url) {
      ap.ip=ip;
      return true;
    }
  }
  return false;
}","private static boolean set_ip(String url,String ip,LinkedList<Addr_pair> at){
  System.out.println(""String_Node_Str"" + url + ""String_Node_Str""+ ip);
  Addr_pair ap;
  ListIterator<Addr_pair> iter=at.listIterator();
  while (iter.hasNext()) {
    ap=(Addr_pair)iter.next();
    if (ap.url == url) {
      ap.ip=ip;
      return true;
    }
  }
  at.add(new Addr_pair(url,ip));
  return false;
}",0.8256333830104322
45356,"private static String get_ip(String url,LinkedList<Addr_pair> at){
  Addr_pair ap;
  ListIterator iter=at.listIterator();
  while (iter.hasNext()) {
    ap=(Addr_pair)iter.next();
    if (ap.url == url)     return ap.ip;
  }
  return ""String_Node_Str"";
}","private static String get_ip(String url,LinkedList<Addr_pair> at){
  for (  Addr_pair cur : at) {
    if (cur.url.equals(url)) {
      return cur.ip;
    }
  }
  return null;
}",0.6372093023255814
45357,"private static String get_rsp(Message req,LinkedList<Addr_pair> at){
  String reply=null;
  if (req != DNS_REQ && req != DNS_UPDATE_REQ) {
    if (req.type == DNS_REQ) {
      reply=get_ip(req.url,at);
    }
 else     if (req.type == DNS_UPDATE_REQ) {
      if (set_ip(req.url,req.ip,at))       reply=""String_Node_Str"";
 else       reply=""String_Node_Str"";
    }
  }
  return reply;
}","private byte[] get_rsp(Message req,String ip,LinkedList<Addr_pair> at){
  String reply=null;
  if (req.type == Message.DNS_REQ || req.type == Message.DNS_UPDATE_REQ) {
    if (req.type == Message.DNS_REQ) {
      System.out.println(""String_Node_Str"" + req.text1);
      return Message.newDNS_RSP(get_ip(req.text1,at));
    }
 else     if (req.type == Message.DNS_UPDATE_REQ) {
      System.out.println(""String_Node_Str"");
      int response=0;
      if (set_ip(req.text1,ip,at))       return Message.newDNS_UPDATE_RSP(response);
      String IDD=null;
      for (      Addr_pair a : at) {
        if (a.url.equals(Constants.IDD_NAME)) {
          IDD=a.ip;
          break;
        }
      }
      if (IDD != null)       return Message.newDNS_UPDATE_RSP(response,IDD);
    }
  }
  return null;
}",0.4054283290924512
45358,"public TCPIDDServer(InterDIFDirectory IDD){
  this.IDD=IDD;
  try {
    Socket toDNS=new Socket(Constants.DNS_IP,Constants.DNS_PORT);
    toDNS.getOutputStream().write(Message.newDNS_UPDATE_REQ(Constants.IDD_NAME));
    Message dnsReply=Message.readFromSocket(toDNS);
    if (dnsReply.errorCode != 0) {
      throw new Exception();
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  try {
    serverSocket=new ServerSocket(PORT);
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
}","public TCPIDDServer(){
  this.IDD=new InterDIFDirectory();
  try {
    Socket toDNS=new Socket(Constants.DNS_IP,Constants.DNS_PORT);
    toDNS.getOutputStream().write(Message.newDNS_UPDATE_REQ(Constants.IDD_NAME));
    Message dnsReply=Message.readFromSocket(toDNS);
    if (dnsReply.errorCode != 0) {
      throw new Exception();
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  try {
    serverSocket=new ServerSocket(Constants.IDD_PORT);
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  this.start();
}",0.9414674361088212
45359,"/** 
 * Return the SHA1 sum of a given string
 * @param str The string to be hashed
 * @return The SHA1 sum as a hex encoded string
 */
protected String getMboxSha1Sum(String str){
  try {
    MessageDigest md=MessageDigest.getInstance(""String_Node_Str"");
    md.update(str.getBytes());
    return new BigInteger(1,md.digest()).toString(16);
  }
 catch (  NoSuchAlgorithmException e) {
    log.error(e.getMessage(),e);
    throw new RuntimeException(""String_Node_Str"");
  }
}","/** 
 * Return the SHA1 sum of a given string
 * @param str The string to be hashed
 * @return The SHA1 sum as a hex encoded string
 */
protected String getMboxSha1Sum(String str){
  try {
    MessageDigest md=MessageDigest.getInstance(""String_Node_Str"");
    md.update(str.getBytes());
    return String.format(""String_Node_Str"",new BigInteger(1,md.digest()));
  }
 catch (  NoSuchAlgorithmException e) {
    log.error(e.getMessage(),e);
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.954639175257732
45360,"@Override public void run(){
  try {
    if (getArgList().isEmpty()) {
      usage();
    }
    if (noTDB() || hasOption(""String_Node_Str"")) {
      FileUtils.deleteQuietly(getTDBFile());
      FileUtils.forceMkdir(getTDBFile());
      SetupTDB.setOptimizerWarningFlag(false);
      Dataset dataset=TDBFactory.createDataset(getTdbLocation());
      String projectName=getArgs()[0];
      String projectURI=projectNamespace() + projectName;
      Resource project=dataset.getDefaultModel().createResource(projectURI);
      project.addProperty(RDF.type,DOAP.Project);
      project.addProperty(DOAP.name,projectName);
      addOptionalProperty(project,DOAP.shortdesc,""String_Node_Str"");
      addOptionalProperty(project,DOAP.description,""String_Node_Str"");
      System.out.println(String.format(""String_Node_Str"",projectName,dataset.getDefaultModel().size()));
    }
 else {
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
}","@Override public void run(){
  try {
    if (getArgList().isEmpty()) {
      usage();
    }
    if (noTDB() || hasOption(""String_Node_Str"")) {
      FileUtils.deleteQuietly(getTDBFile());
      FileUtils.forceMkdir(getTDBFile());
      SetupTDB.setOptimizerWarningFlag(false);
      Dataset dataset=TDBFactory.createDataset(getTdbLocation());
      String projectName=getArgs()[0];
      String projectURI=projectNamespace() + projectName;
      Resource project=dataset.getDefaultModel().createResource(projectURI);
      project.addProperty(RDF.type,DOAP.Project).addProperty(RDF.type,projectRootType()).addProperty(DOAP.name,projectName);
      addOptionalProperty(project,DOAP.shortdesc,""String_Node_Str"");
      addOptionalProperty(project,DOAP.description,""String_Node_Str"");
      System.out.println(String.format(""String_Node_Str"",projectName,dataset.getDefaultModel().size()));
    }
 else {
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
}",0.9727317798710956
45361,"/** 
 * Get the DOAP project resource 
 */
public Resource getProjectResource(){
  ResIterator i=getTDBModel().listSubjectsWithProperty(RDF.type,DOAP.Project);
  if (i.hasNext()) {
    return i.next();
  }
 else {
    System.err.println(""String_Node_Str"");
    throw new RuntimeException(""String_Node_Str"");
  }
}","/** 
 * Get the DOAP project resource 
 */
public Resource getProjectResource(){
  ResIterator i=getTDBModel().listSubjectsWithProperty(RDF.type,projectRootType());
  if (i.hasNext()) {
    return i.next();
  }
 else {
    System.err.println(""String_Node_Str"");
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.9730586370839936
45362,"public void send_startVariableDeclare(String name,List<String> type,String attributes) throws org.apache.thrift.TException {
  oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage(""String_Node_Str"",org.apache.thrift.protocol.TMessageType.CALL,++seqid_));
  startVariableDeclare_args args=new startVariableDeclare_args();
  args.setName(name);
  args.setType(type);
  args.setAttributes(attributes);
  args.write(oprot_);
  oprot_.writeMessageEnd();
  oprot_.getTransport().flush();
}","public void send_startVariableDeclare(String name,List<String> type,List<String> attributes) throws org.apache.thrift.TException {
  oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage(""String_Node_Str"",org.apache.thrift.protocol.TMessageType.CALL,++seqid_));
  startVariableDeclare_args args=new startVariableDeclare_args();
  args.setName(name);
  args.setType(type);
  args.setAttributes(attributes);
  args.write(oprot_);
  oprot_.writeMessageEnd();
  oprot_.getTransport().flush();
}",0.993975903614458
45363,"public startVariableDeclare_call(String name,List<String> type,String attributes,org.apache.thrift.async.AsyncMethodCallback<startVariableDeclare_call> resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
  super(client,protocolFactory,transport,resultHandler,true);
  this.name=name;
  this.type=type;
  this.attributes=attributes;
}","public startVariableDeclare_call(String name,List<String> type,List<String> attributes,org.apache.thrift.async.AsyncMethodCallback<startVariableDeclare_call> resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
  super(client,protocolFactory,transport,resultHandler,true);
  this.name=name;
  this.type=type;
  this.attributes=attributes;
}",0.994011976047904
45364,"public void startVariableDeclare(String name,List<String> type,String attributes,org.apache.thrift.async.AsyncMethodCallback<startVariableDeclare_call> resultHandler) throws org.apache.thrift.TException {
  checkReady();
  startVariableDeclare_call method_call=new startVariableDeclare_call(name,type,attributes,resultHandler,this,protocolFactory,transport);
  this.currentMethod=method_call;
  manager.call(method_call);
}","public void startVariableDeclare(String name,List<String> type,List<String> attributes,org.apache.thrift.async.AsyncMethodCallback<startVariableDeclare_call> resultHandler) throws org.apache.thrift.TException {
  checkReady();
  startVariableDeclare_call method_call=new startVariableDeclare_call(name,type,attributes,resultHandler,this,protocolFactory,transport);
  this.currentMethod=method_call;
  manager.call(method_call);
}",0.9929577464788732
45365,"public String getAttributes(){
  return this.attributes;
}","public List<String> getAttributes(){
  return this.attributes;
}",0.9508196721311476
45366,"public startVariableDeclare_args setAttributes(String attributes){
  this.attributes=attributes;
  return this;
}","public startVariableDeclare_args setAttributes(List<String> attributes){
  this.attributes=attributes;
  return this;
}",0.9741379310344828
45367,"/** 
 * Performs a deep copy on <i>other</i>.
 */
public startVariableDeclare_args(startVariableDeclare_args other){
  if (other.isSetName()) {
    this.name=other.name;
  }
  if (other.isSetType()) {
    this.type=other.type;
  }
  if (other.isSetAttributes()) {
    this.attributes=other.attributes;
  }
}","/** 
 * Performs a deep copy on <i>other</i>.
 */
public startVariableDeclare_args(startVariableDeclare_args other){
  if (other.isSetName()) {
    this.name=other.name;
  }
  if (other.isSetType()) {
    this.type=other.type;
  }
  if (other.isSetAttributes()) {
    List<String> __this__attributes=new ArrayList<String>();
    for (    String other_element : other.attributes) {
      __this__attributes.add(other_element);
    }
    this.attributes=__this__attributes;
  }
}",0.7295918367346939
45368,"private void addPositionMetadata(Context cx,DefinitionNode def){
  MetaDataNode mn=cx.getNodeFactory().metaData(null,-1);
  mn.id=""String_Node_Str"";
  mn.values=new Value[2];
  mn.values[0]=new KeyValuePair(""String_Node_Str"",cx.getErrorOrigin());
  mn.values[1]=new KeyValuePair(""String_Node_Str"",String.valueOf(def.pos()));
  def.addMetaDataNode(mn);
}","private void addPositionMetadata(Context cx,DefinitionNode def){
  def.addMetaDataNode(makePositionMetadata(cx,def,false));
}",0.3891213389121339
45369,"public Node assignmentExpression(Node lhs,int op,Node rhs,int pos){
  Node node;
  boolean is_constinit=false;
  if (op == CONST_TOKEN) {
    op=ASSIGN_TOKEN;
    is_constinit=true;
  }
  int prevOp=op;
  if (op != ASSIGN_TOKEN) {
    op=op == MULTASSIGN_TOKEN ? op=MULT_TOKEN : op == DIVASSIGN_TOKEN ? op=DIV_TOKEN : op == MODULUSASSIGN_TOKEN ? op=MODULUS_TOKEN : op == PLUSASSIGN_TOKEN ? op=PLUS_TOKEN : op == MINUSASSIGN_TOKEN ? op=MINUS_TOKEN : op == LEFTSHIFTASSIGN_TOKEN ? op=LEFTSHIFT_TOKEN : op == RIGHTSHIFTASSIGN_TOKEN ? op=RIGHTSHIFT_TOKEN : op == UNSIGNEDRIGHTSHIFTASSIGN_TOKEN ? op=UNSIGNEDRIGHTSHIFT_TOKEN : op == BITWISEANDASSIGN_TOKEN ? op=BITWISEAND_TOKEN : op == BITWISEXORASSIGN_TOKEN ? op=BITWISEXOR_TOKEN : op == BITWISEORASSIGN_TOKEN ? op=BITWISEOR_TOKEN : op == LOGICALANDASSIGN_TOKEN ? op=LOGICALAND_TOKEN : op == LOGICALXORASSIGN_TOKEN ? op=LOGICALXOR_TOKEN : op == LOGICALORASSIGN_TOKEN ? op=LOGICALOR_TOKEN : ERROR_TOKEN;
    rhs=this.binaryExpression(op,lhs,rhs);
  }
  if (lhs.isMemberExpression()) {
    MemberExpressionNode member=(MemberExpressionNode)lhs;
    if (member.selector.isGetExpression()) {
      GetExpressionNode get;
      get=(GetExpressionNode)member.selector;
      if (member.isIndexedMemberExpression()) {
        node=this.indexedMemberExpression(member.base,this.setExpression(get,this.argumentList(null,rhs),is_constinit));
      }
 else {
        node=this.memberExpression(member.base,this.setExpression(get,this.argumentList(null,rhs),is_constinit,rhs.pos()));
      }
    }
 else {
      node=this.error(pos,kError_AssignmentTargetNotRefVal);
    }
  }
 else {
    node=this.memberExpression(null,this.setExpression(lhs,this.argumentList(null,rhs),is_constinit));
  }
  if (cx.scriptAssistParsing) {
    MemberExpressionNode exprNode=(MemberExpressionNode)node;
    if (exprNode != null && (prevOp != op))     exprNode.setOrigToken(prevOp);
  }
  node.setPositionNonterminal(lhs,pos);
  return node;
}","public Node assignmentExpression(Node lhs,int op,Node rhs,int pos){
  Node node;
  boolean is_constinit=false;
  if (op == CONST_TOKEN) {
    op=ASSIGN_TOKEN;
    is_constinit=true;
  }
  int prevOp=op;
  if (op != ASSIGN_TOKEN) {
    while (lhs.isList() && ((ListNode)lhs).items.size() == 1) {
      lhs=((ListNode)lhs).items.get(0);
    }
    op=op == MULTASSIGN_TOKEN ? op=MULT_TOKEN : op == DIVASSIGN_TOKEN ? op=DIV_TOKEN : op == MODULUSASSIGN_TOKEN ? op=MODULUS_TOKEN : op == PLUSASSIGN_TOKEN ? op=PLUS_TOKEN : op == MINUSASSIGN_TOKEN ? op=MINUS_TOKEN : op == LEFTSHIFTASSIGN_TOKEN ? op=LEFTSHIFT_TOKEN : op == RIGHTSHIFTASSIGN_TOKEN ? op=RIGHTSHIFT_TOKEN : op == UNSIGNEDRIGHTSHIFTASSIGN_TOKEN ? op=UNSIGNEDRIGHTSHIFT_TOKEN : op == BITWISEANDASSIGN_TOKEN ? op=BITWISEAND_TOKEN : op == BITWISEXORASSIGN_TOKEN ? op=BITWISEXOR_TOKEN : op == BITWISEORASSIGN_TOKEN ? op=BITWISEOR_TOKEN : op == LOGICALANDASSIGN_TOKEN ? op=LOGICALAND_TOKEN : op == LOGICALXORASSIGN_TOKEN ? op=LOGICALXOR_TOKEN : op == LOGICALORASSIGN_TOKEN ? op=LOGICALOR_TOKEN : ERROR_TOKEN;
    rhs=this.binaryExpression(op,lhs,rhs);
  }
  if (lhs.isMemberExpression()) {
    MemberExpressionNode member=(MemberExpressionNode)lhs;
    if (member.selector.isGetExpression()) {
      GetExpressionNode get;
      get=(GetExpressionNode)member.selector;
      if (member.isIndexedMemberExpression()) {
        node=this.indexedMemberExpression(member.base,this.setExpression(get,this.argumentList(null,rhs),is_constinit));
      }
 else {
        node=this.memberExpression(member.base,this.setExpression(get,this.argumentList(null,rhs),is_constinit,rhs.pos()));
      }
    }
 else {
      node=this.error(pos,kError_AssignmentTargetNotRefVal);
    }
  }
 else {
    node=this.memberExpression(null,this.setExpression(lhs,this.argumentList(null,rhs),is_constinit));
  }
  if (cx.scriptAssistParsing) {
    MemberExpressionNode exprNode=(MemberExpressionNode)node;
    if (exprNode != null && (prevOp != op))     exprNode.setOrigToken(prevOp);
  }
  node.setPositionNonterminal(lhs,pos);
  return node;
}",0.9726911618669316
45370,"public static int getLanguageID(String language){
  int langID=ContextStatics.LANG_EN;
  if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_EN;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_CN;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_CS;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_DE;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_ES;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_FR;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_IT;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_JP;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_KR;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_NL;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_PL;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_PT;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_RU;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_SV;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_TR;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_TW;
  return langID;
}","public static int getLanguageID(String language){
  int langID=ContextStatics.LANG_EN;
  if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_EN;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_CN;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_CS;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_DA;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_DE;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_ES;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_FI;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_FR;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_IT;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_JP;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_KR;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_NB;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_NL;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_PL;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_PT;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_RU;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_SV;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_TR;
 else   if (language.equals(""String_Node_Str""))   langID=ContextStatics.LANG_TW;
  return langID;
}",0.9198813056379822
45371,"public int nexttoken(boolean resetState){
  String doctagname=""String_Node_Str"";
  StringBuilder doctextbuf=null;
  int startofxml=pos();
  StringBuilder blockcommentbuf=null;
  char regexp_flags=0;
  boolean maybe_reserved=false;
  char c=0;
  if (resetState) {
    isFirstTokenOnLine=false;
  }
  while (true) {
    if (debug) {
      System.out.println(""String_Node_Str"" + state + ""String_Node_Str""+ pos());
    }
switch (state) {
case start_state:
{
        c=nextchar();
        mark();
switch (c) {
case 'a':
case 'b':
case 'c':
case 'd':
case 'e':
case 'f':
case 'g':
case 'h':
case 'i':
case 'j':
case 'k':
case 'l':
case 'm':
case 'n':
case 'o':
case 'p':
case 'q':
case 'r':
case 's':
case 't':
case 'u':
case 'v':
case 'w':
case 'x':
case 'y':
case 'z':
          maybe_reserved=true;
case 'A':
case 'B':
case 'C':
case 'D':
case 'E':
case 'F':
case 'G':
case 'H':
case 'I':
case 'J':
case 'K':
case 'L':
case 'M':
case 'N':
case 'O':
case 'P':
case 'Q':
case 'R':
case 'S':
case 'T':
case 'U':
case 'V':
case 'W':
case 'X':
case 'Y':
case 'Z':
case '_':
case '$':
        state=A_state;
      continue;
case 0xffef:
    if (nextchar() == 0xffffffbb && nextchar() == 0xffffffbf) {
      state=start_state;
    }
 else {
      state=error_state;
    }
  continue;
case '@':
return makeToken(ATSIGN_TOKEN);
case '\'':
case '\""':
{
char startquote=(char)c;
boolean needs_escape=false;
while ((c=nextchar()) != startquote) {
  if (c == '\\') {
    needs_escape=true;
    c=nextchar();
    if (c == '\r')     c=nextchar();
    if (c == '\n')     continue;
  }
 else   if (c == '\r' || c == '\n') {
    if (startquote == '\'')     error(kError_Lexical_LineTerminatorInSingleQuotedStringLiteral);
 else     error(kError_Lexical_LineTerminatorInDoubleQuotedStringLiteral);
    break;
  }
 else   if (c == 0) {
    error(kError_Lexical_EndOfStreamInStringLiteral);
    return makeToken(EOS_TOKEN);
  }
}
return makeToken(STRINGLITERAL_TOKEN,input.copyReplaceStringEscapes(needs_escape));
}
case '-':
switch (nextchar()) {
case '-':
return makeToken(MINUSMINUS_TOKEN);
case '=':
return makeToken(MINUSASSIGN_TOKEN);
default :
retract();
return makeToken(MINUS_TOKEN);
}
case '!':
if (nextchar() == '=') {
if (nextchar() == '=') return makeToken(STRICTNOTEQUALS_TOKEN);
retract();
return makeToken(NOTEQUALS_TOKEN);
}
retract();
return makeToken(NOT_TOKEN);
case '%':
switch (nextchar()) {
case '=':
return makeToken(MODULUSASSIGN_TOKEN);
default :
retract();
return makeToken(MODULUS_TOKEN);
}
case '&':
c=nextchar();
if (c == '=') return makeToken(BITWISEANDASSIGN_TOKEN);
if (c == '&') {
if (nextchar() == '=') return makeToken(LOGICALANDASSIGN_TOKEN);
retract();
return makeToken(LOGICALAND_TOKEN);
}
retract();
return makeToken(BITWISEAND_TOKEN);
case '#':
if (HAS_HASHPRAGMAS) {
return makeToken(USE_TOKEN);
}
state=error_state;
continue;
case '(':
return makeToken(LEFTPAREN_TOKEN);
case ')':
return makeToken(RIGHTPAREN_TOKEN);
case '*':
if (nextchar() == '=') return makeToken(MULTASSIGN_TOKEN);
retract();
return makeToken(MULT_TOKEN);
case ',':
return makeToken(COMMA_TOKEN);
case '.':
state=dot_state;
continue;
case '/':
state=slash_state;
continue;
case ':':
if (nextchar() == ':') {
return makeToken(DOUBLECOLON_TOKEN);
}
retract();
return makeToken(COLON_TOKEN);
case ';':
return makeToken(SEMICOLON_TOKEN);
case '?':
return makeToken(QUESTIONMARK_TOKEN);
case '[':
return makeToken(LEFTBRACKET_TOKEN);
case ']':
return makeToken(RIGHTBRACKET_TOKEN);
case '^':
if (nextchar() == '=') return makeToken(BITWISEXORASSIGN_TOKEN);
retract();
return makeToken(BITWISEXOR_TOKEN);
case '{':
return makeToken(LEFTBRACE_TOKEN);
case '|':
c=nextchar();
if (c == '=') return makeToken(BITWISEORASSIGN_TOKEN);
if (c == '|') {
if (nextchar() == '=') return makeToken(LOGICALORASSIGN_TOKEN);
retract();
return makeToken(LOGICALOR_TOKEN);
}
retract();
return makeToken(BITWISEOR_TOKEN);
case '}':
return makeToken(RIGHTBRACE_TOKEN);
case '~':
return makeToken(BITWISENOT_TOKEN);
case '+':
c=nextchar();
if (c == '+') return makeToken(PLUSPLUS_TOKEN);
if (c == '=') return makeToken(PLUSASSIGN_TOKEN);
retract();
return makeToken(PLUS_TOKEN);
case '<':
switch (nextchar()) {
case '<':
if (nextchar() == '=') return makeToken(LEFTSHIFTASSIGN_TOKEN);
retract();
return makeToken(LEFTSHIFT_TOKEN);
case '=':
return makeToken(LESSTHANOREQUALS_TOKEN);
case '/':
return makeToken(XMLTAGSTARTEND_TOKEN);
case '!':
state=xmlcommentorcdatastart_state;
continue;
case '?':
state=xmlpi_state;
continue;
}
retract();
return makeToken(LESSTHAN_TOKEN);
case '=':
if (nextchar() == '=') {
if (nextchar() == '=') return makeToken(STRICTEQUALS_TOKEN);
retract();
return makeToken(EQUALS_TOKEN);
}
retract();
return makeToken(ASSIGN_TOKEN);
case '>':
state=start_state;
switch (nextchar()) {
case '>':
switch (nextchar()) {
case '>':
if (nextchar() == '=') return makeToken(UNSIGNEDRIGHTSHIFTASSIGN_TOKEN);
retract();
return makeToken(UNSIGNEDRIGHTSHIFT_TOKEN);
case '=':
return makeToken(RIGHTSHIFTASSIGN_TOKEN);
default :
retract();
return makeToken(RIGHTSHIFT_TOKEN);
}
case '=':
return makeToken(GREATERTHANOREQUALS_TOKEN);
}
retract();
return makeToken(GREATERTHAN_TOKEN);
case '0':
state=zero_state;
continue;
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
state=decimalinteger_state;
continue;
case ' ':
case '\t':
case 0x000b:
case 0x000c:
case 0x0085:
case 0x00a0:
continue;
case '\n':
case '\r':
isFirstTokenOnLine=true;
continue;
case 0:
return makeToken(EOS_TOKEN);
default :
switch (input.nextcharClass((char)c,true)) {
case Lu:
case Ll:
case Lt:
case Lm:
case Lo:
case Nl:
maybe_reserved=false;
state=A_state;
continue;
case Zs:
case Cc:
case Cf:
continue;
case Zl:
case Zp:
isFirstTokenOnLine=true;
continue;
default :
state=error_state;
continue;
}
}
}
case A_state:
{
boolean needs_escape=c == '\\';
while (true) {
c=nextchar();
if (c >= 'a' && c <= 'z') {
continue;
}
if ((c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '$' || c == '_') {
maybe_reserved=false;
continue;
}
if (c <= 0x7f) {
if (c == '\\') {
needs_escape=true;
}
 else {
retract();
break;
}
}
switch (input.nextcharClass(c,false)) {
case Lu:
case Ll:
case Lt:
case Lm:
case Lo:
case Nl:
case Mn:
case Mc:
case Nd:
case Pc:
maybe_reserved=false;
input.nextcharClass(c,true);
continue;
}
retract();
break;
}
state=start_state;
String s=input.copyReplaceUnicodeEscapes(needs_escape);
if (maybe_reserved) {
Integer i=reservedWord.get(s);
if (i != null) return makeToken((int)i);
}
return makeToken(IDENTIFIER_TOKEN,s);
}
case zero_state:
switch (nextchar()) {
case 'x':
case 'X':
switch (nextchar()) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
case 'a':
case 'b':
case 'c':
case 'd':
case 'e':
case 'f':
case 'A':
case 'B':
case 'C':
case 'D':
case 'E':
case 'F':
state=hexinteger_state;
break;
default :
state=start_state;
error(kError_Lexical_General);
}
continue;
case '.':
state=decimal_state;
continue;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
state=decimalinteger_state;
continue;
case 'E':
case 'e':
state=exponentstart_state;
continue;
case 'd':
case 'm':
case 'i':
case 'u':
if (!ctx.statics.es4_numerics) retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
default :
retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
}
case hexinteger_state:
switch (nextchar()) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
case 'a':
case 'b':
case 'c':
case 'd':
case 'e':
case 'f':
case 'A':
case 'B':
case 'C':
case 'D':
case 'E':
case 'F':
state=hexinteger_state;
continue;
case 'u':
case 'i':
if (!ctx.statics.es4_numerics) retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
default :
retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
}
case dot_state:
switch (nextchar()) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
state=decimal_state;
continue;
case '.':
state=start_state;
if (nextchar() == '.') return makeToken(TRIPLEDOT_TOKEN);
retract();
return makeToken(DOUBLEDOT_TOKEN);
case '<':
state=start_state;
return makeToken(DOTLESSTHAN_TOKEN);
default :
retract();
state=start_state;
return makeToken(DOT_TOKEN);
}
case decimalinteger_state:
switch (nextchar()) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
state=decimalinteger_state;
continue;
case '.':
state=decimal_state;
continue;
case 'd':
case 'm':
case 'u':
case 'i':
if (!ctx.statics.es4_numerics) retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
case 'E':
case 'e':
state=exponentstart_state;
continue;
default :
retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
}
case decimal_state:
switch (nextchar()) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
state=decimal_state;
continue;
case 'd':
case 'm':
if (!ctx.statics.es4_numerics) retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
case 'E':
case 'e':
state=exponentstart_state;
continue;
default :
retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
}
case exponentstart_state:
switch (nextchar()) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
case '+':
case '-':
state=exponent_state;
continue;
default :
error(kError_Lexical_General);
state=start_state;
continue;
}
case exponent_state:
switch (nextchar()) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
state=exponent_state;
continue;
case 'd':
case 'm':
if (!ctx.statics.es4_numerics) retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
default :
retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
}
case slash_state:
{
c=nextchar();
switch (c) {
case '/':
state=start_state;
line_comment: while ((c=nextchar()) != 0) {
if (c == '\r' || c == '\n') {
isFirstTokenOnLine=true;
if (save_comments == false) {
break line_comment;
}
retract();
return makeToken(SLASHSLASHCOMMENT_TOKEN,input.copyReplaceUnicodeEscapes());
}
}
continue;
case '*':
if (save_comments == false) {
block_comment: while ((c=nextchar()) != 0) {
if (c == '\r' || c == '\n') isFirstTokenOnLine=true;
if (c == '*') {
c=nextchar();
if (c == '/') {
break block_comment;
}
retract();
}
}
state=start_state;
}
 else {
if (blockcommentbuf == null) blockcommentbuf=new StringBuilder();
blockcommentbuf.append(""String_Node_Str"");
state=blockcommentstart_state;
}
continue;
case '>':
if (inXML > 0) {
state=start_state;
return makeToken(XMLTAGENDEND_TOKEN);
}
default :
int lb=currentToken.id;
if (lb == IDENTIFIER_TOKEN || lb == NUMBERLITERAL_TOKEN || lb == RIGHTPAREN_TOKEN || lb == RIGHTBRACE_TOKEN || lb == RIGHTBRACKET_TOKEN) {
state=start_state;
if (c == '=') return makeToken(DIVASSIGN_TOKEN);
retract();
return makeToken(DIV_TOKEN);
}
state=slashregexp_state;
retract();
continue;
}
}
case slashregexp_state:
switch (nextchar()) {
case '\\':
nextchar();
continue;
case '/':
regexp_flags=0;
state=regexp_state;
continue;
case 0:
case '\n':
case '\r':
error(kError_Lexical_General);
state=start_state;
continue;
default :
state=slashregexp_state;
continue;
}
case regexp_state:
c=nextchar();
switch (c) {
case 'g':
if ((regexp_flags & 0x01) == 0) {
regexp_flags|=0x01;
continue;
}
error(kError_Lexical_General);
state=start_state;
continue;
case 'i':
if ((regexp_flags & 0x02) == 0) {
regexp_flags|=0x02;
continue;
}
error(kError_Lexical_General);
state=start_state;
continue;
case 'm':
if ((regexp_flags & 0x04) == 0) {
regexp_flags|=0x04;
continue;
}
error(kError_Lexical_General);
state=start_state;
continue;
case 's':
if ((regexp_flags & 0x08) == 0) {
regexp_flags|=0x08;
continue;
}
error(kError_Lexical_General);
state=start_state;
continue;
case 'x':
if ((regexp_flags & 0x10) == 0) {
regexp_flags|=0x10;
continue;
}
error(kError_Lexical_General);
state=start_state;
continue;
default :
if (Character.isJavaIdentifierPart(c)) {
error(kError_Lexical_General);
state=start_state;
continue;
}
retract();
state=start_state;
return makeToken(REGEXPLITERAL_TOKEN,input.copyReplaceUnicodeEscapes());
}
case xmlcommentorcdatastart_state:
switch (nextchar()) {
case '[':
if (nextchar() == 'C' && nextchar() == 'D' && nextchar() == 'A' && nextchar() == 'T' && nextchar() == 'A' && nextchar() == '[') {
state=xmlcdata_state;
continue;
}
break;
case '-':
if (nextchar() == '-') {
state=xmlcomment_state;
continue;
}
}
error(kError_Lexical_General);
state=start_state;
continue;
case xmlcdata_state:
switch (nextchar()) {
case ']':
if (nextchar() == ']' && nextchar() == '>') {
state=start_state;
return makeToken(XMLMARKUP_TOKEN,input.substringReplaceUnicodeEscapes(startofxml,pos()));
}
continue;
case 0:
error(kError_Lexical_General);
state=start_state;
}
continue;
case xmlcomment_state:
while ((c=nextchar()) != '-' && c != 0) ;
if (c == '-' && nextchar() != '-') {
continue;
}
if (nextchar() == '>') {
state=start_state;
return makeToken(XMLMARKUP_TOKEN,input.substringReplaceUnicodeEscapes(startofxml,pos()));
}
error(kError_Lexical_General);
state=start_state;
continue;
case xmlpi_state:
while ((c=nextchar()) != '?' && c != 0) ;
if (c == '?' && nextchar() == '>') {
state=start_state;
return makeToken(XMLMARKUP_TOKEN,input.substringReplaceUnicodeEscapes(startofxml,pos()));
}
if (c == 0) {
error(kError_Lexical_General);
state=start_state;
}
continue;
case xmltext_state:
{
switch (nextchar()) {
case '<':
case '{':
{
retract();
String xmltext=input.substringReplaceUnicodeEscapes(startofxml,pos());
if (xmltext != null) {
state=start_state;
return makeToken(XMLTEXT_TOKEN,xmltext);
}
 else {
switch (nextchar()) {
case '<':
switch (nextchar()) {
case '/':
state=start_state;
return makeToken(XMLTAGSTARTEND_TOKEN);
case '!':
state=xmlcommentorcdatastart_state;
continue;
case '?':
state=xmlpi_state;
continue;
default :
retract();
state=start_state;
return makeToken(LESSTHAN_TOKEN);
}
case '{':
state=start_state;
return makeToken(LEFTBRACE_TOKEN);
}
}
}
case 0:
state=start_state;
return makeToken(EOS_TOKEN);
}
continue;
}
case xmlliteral_state:
switch (nextchar()) {
case '{':
return makeToken(XMLPART_TOKEN,input.substringReplaceUnicodeEscapes(startofxml,pos() - 1));
case '<':
if (nextchar() == '/') {
--level;
nextchar();
mark();
retract();
state=endxmlname_state;
}
 else {
++level;
state=xmlliteral_state;
}
continue;
case '/':
if (nextchar() == '>') {
--level;
if (level == 0) {
state=start_state;
return makeToken(XMLLITERAL_TOKEN,input.substringReplaceUnicodeEscapes(startofxml,pos() + 1));
}
}
continue;
case 0:
retract();
error(kError_Lexical_NoMatchingTag);
state=start_state;
continue;
default :
continue;
}
case endxmlname_state:
c=nextchar();
if (Character.isJavaIdentifierPart(c) || c == ':') {
continue;
}
switch (c) {
case '{':
{
String xmltext=input.substringReplaceUnicodeEscapes(startofxml,pos() - 1);
return makeToken(XMLPART_TOKEN,xmltext);
}
case '>':
retract();
nextchar();
if (level == 0) {
String xmltext=input.substringReplaceUnicodeEscapes(startofxml,pos() + 1);
state=start_state;
return makeToken(XMLLITERAL_TOKEN,xmltext);
}
state=xmlliteral_state;
continue;
default :
state=xmlliteral_state;
continue;
}
case blockcommentstart_state:
{
c=nextchar();
blockcommentbuf.append(c);
switch (c) {
case '*':
if (nextchar() == '/') {
state=start_state;
return makeToken(BLOCKCOMMENT_TOKEN,new String());
}
retract();
state=doccomment_state;
continue;
case 0:
error(kError_BlockCommentNotTerminated);
state=start_state;
continue;
case '\n':
case '\r':
isFirstTokenOnLine=true;
default :
state=blockcomment_state;
continue;
}
}
case doccomment_state:
{
c=nextchar();
blockcommentbuf.append(c);
switch (c) {
case '*':
state=doccommentstar_state;
continue;
case '@':
if (doctextbuf == null) doctextbuf=getDocTextBuffer(doctagname);
if (doctagname.length() > 0) {
doctextbuf.append(""String_Node_Str"").append(doctagname).append(""String_Node_Str"");
}
doctagname=""String_Node_Str"";
state=doccommenttag_state;
continue;
case '\r':
case '\n':
isFirstTokenOnLine=true;
if (doctextbuf == null) doctextbuf=getDocTextBuffer(doctagname);
doctextbuf.append('\n');
state=doccomment_state;
continue;
case 0:
error(kError_BlockCommentNotTerminated);
state=start_state;
continue;
default :
if (doctextbuf == null) doctextbuf=getDocTextBuffer(doctagname);
doctextbuf.append((char)(c));
state=doccomment_state;
continue;
}
}
case doccommentstar_state:
{
c=nextchar();
blockcommentbuf.append(c);
switch (c) {
case '/':
{
if (doctextbuf == null) doctextbuf=getDocTextBuffer(doctagname);
if (doctagname.length() > 0) {
doctextbuf.append(""String_Node_Str"").append(doctagname).append(""String_Node_Str"");
}
String doctext=doctextbuf.toString();
state=start_state;
return makeToken(DOCCOMMENT_TOKEN,doctext);
}
case '*':
state=doccommentstar_state;
continue;
case 0:
error(kError_BlockCommentNotTerminated);
state=start_state;
continue;
default :
state=doccomment_state;
continue;
}
}
case doccommenttag_state:
{
c=nextchar();
switch (c) {
case '*':
state=doccommentstar_state;
continue;
case ' ':
case '\t':
case '\r':
case '\n':
{
if (doctextbuf == null) doctextbuf=getDocTextBuffer(doctagname);
while ((c=nextchar()) == ' ' || c == '\t') ;
retract();
if (doctagname.length() > 0) {
doctextbuf.append(""String_Node_Str"").append(doctagname).append(""String_Node_Str"");
}
state=doccomment_state;
continue;
}
case 0:
error(kError_BlockCommentNotTerminated);
state=start_state;
continue;
default :
doctagname+=(char)(c);
continue;
}
}
case doccommentvalue_state:
switch (nextchar()) {
case '*':
state=doccommentstar_state;
continue;
case '@':
state=doccommenttag_state;
continue;
case 0:
error(kError_BlockCommentNotTerminated);
state=start_state;
continue;
default :
state=doccomment_state;
continue;
}
case blockcomment_state:
{
c=nextchar();
blockcommentbuf.append(c);
switch (c) {
case '*':
state=blockcommentstar_state;
continue;
case '\r':
case '\n':
isFirstTokenOnLine=true;
state=blockcomment_state;
continue;
case 0:
error(kError_BlockCommentNotTerminated);
state=start_state;
continue;
default :
state=blockcomment_state;
continue;
}
}
case blockcommentstar_state:
{
c=nextchar();
blockcommentbuf.append(c);
switch (c) {
case '/':
{
state=start_state;
String blocktext=blockcommentbuf.toString();
return makeToken(BLOCKCOMMENT_TOKEN,blocktext);
}
case '*':
state=blockcommentstar_state;
continue;
case 0:
error(kError_BlockCommentNotTerminated);
state=start_state;
continue;
default :
state=blockcomment_state;
continue;
}
}
case error_state:
error(kError_Lexical_General);
skiperror();
state=start_state;
continue;
default :
error(""String_Node_Str"");
state=start_state;
return makeToken(EOS_TOKEN);
}
}
}","public int nexttoken(boolean resetState){
  String doctagname=""String_Node_Str"";
  StringBuilder doctextbuf=null;
  int startofxml=pos();
  StringBuilder blockcommentbuf=null;
  char regexp_flags=0;
  boolean maybe_reserved=false;
  char c=0;
  if (resetState) {
    isFirstTokenOnLine=false;
  }
  while (true) {
    if (debug) {
      System.out.println(""String_Node_Str"" + state + ""String_Node_Str""+ pos());
    }
switch (state) {
case start_state:
{
        c=nextchar();
        mark();
switch (c) {
case 'a':
case 'b':
case 'c':
case 'd':
case 'e':
case 'f':
case 'g':
case 'h':
case 'i':
case 'j':
case 'k':
case 'l':
case 'm':
case 'n':
case 'o':
case 'p':
case 'q':
case 'r':
case 's':
case 't':
case 'u':
case 'v':
case 'w':
case 'x':
case 'y':
case 'z':
          maybe_reserved=true;
case 'A':
case 'B':
case 'C':
case 'D':
case 'E':
case 'F':
case 'G':
case 'H':
case 'I':
case 'J':
case 'K':
case 'L':
case 'M':
case 'N':
case 'O':
case 'P':
case 'Q':
case 'R':
case 'S':
case 'T':
case 'U':
case 'V':
case 'W':
case 'X':
case 'Y':
case 'Z':
case '_':
case '$':
        state=A_state;
      continue;
case 0xffef:
    if (nextchar() == 0xffffffbb && nextchar() == 0xffffffbf) {
      state=start_state;
    }
 else {
      state=error_state;
    }
  continue;
case '@':
return makeToken(ATSIGN_TOKEN);
case '\'':
case '\""':
{
char startquote=(char)c;
boolean needs_escape=false;
while ((c=nextchar()) != startquote) {
  if (c == '\\') {
    needs_escape=true;
    c=nextchar();
    if (c == '\r')     c=nextchar();
    if (c == '\n')     continue;
  }
 else   if (c == '\r' || c == '\n') {
    if (startquote == '\'')     error(kError_Lexical_LineTerminatorInSingleQuotedStringLiteral);
 else     error(kError_Lexical_LineTerminatorInDoubleQuotedStringLiteral);
    break;
  }
 else   if (c == 0) {
    error(kError_Lexical_EndOfStreamInStringLiteral);
    return makeToken(EOS_TOKEN);
  }
}
return makeToken(STRINGLITERAL_TOKEN,input.copyReplaceStringEscapes(needs_escape));
}
case '-':
switch (nextchar()) {
case '-':
return makeToken(MINUSMINUS_TOKEN);
case '=':
return makeToken(MINUSASSIGN_TOKEN);
default :
retract();
return makeToken(MINUS_TOKEN);
}
case '!':
if (nextchar() == '=') {
if (nextchar() == '=') return makeToken(STRICTNOTEQUALS_TOKEN);
retract();
return makeToken(NOTEQUALS_TOKEN);
}
retract();
return makeToken(NOT_TOKEN);
case '%':
switch (nextchar()) {
case '=':
return makeToken(MODULUSASSIGN_TOKEN);
default :
retract();
return makeToken(MODULUS_TOKEN);
}
case '&':
c=nextchar();
if (c == '=') return makeToken(BITWISEANDASSIGN_TOKEN);
if (c == '&') {
if (nextchar() == '=') return makeToken(LOGICALANDASSIGN_TOKEN);
retract();
return makeToken(LOGICALAND_TOKEN);
}
retract();
return makeToken(BITWISEAND_TOKEN);
case '#':
if (HAS_HASHPRAGMAS) {
return makeToken(USE_TOKEN);
}
state=error_state;
continue;
case '(':
return makeToken(LEFTPAREN_TOKEN);
case ')':
return makeToken(RIGHTPAREN_TOKEN);
case '*':
if (nextchar() == '=') return makeToken(MULTASSIGN_TOKEN);
retract();
return makeToken(MULT_TOKEN);
case ',':
return makeToken(COMMA_TOKEN);
case '.':
state=dot_state;
continue;
case '/':
state=slash_state;
continue;
case ':':
if (nextchar() == ':') {
return makeToken(DOUBLECOLON_TOKEN);
}
retract();
return makeToken(COLON_TOKEN);
case ';':
return makeToken(SEMICOLON_TOKEN);
case '?':
return makeToken(QUESTIONMARK_TOKEN);
case '[':
return makeToken(LEFTBRACKET_TOKEN);
case ']':
return makeToken(RIGHTBRACKET_TOKEN);
case '^':
if (nextchar() == '=') return makeToken(BITWISEXORASSIGN_TOKEN);
retract();
return makeToken(BITWISEXOR_TOKEN);
case '{':
return makeToken(LEFTBRACE_TOKEN);
case '|':
c=nextchar();
if (c == '=') return makeToken(BITWISEORASSIGN_TOKEN);
if (c == '|') {
if (nextchar() == '=') return makeToken(LOGICALORASSIGN_TOKEN);
retract();
return makeToken(LOGICALOR_TOKEN);
}
retract();
return makeToken(BITWISEOR_TOKEN);
case '}':
return makeToken(RIGHTBRACE_TOKEN);
case '~':
return makeToken(BITWISENOT_TOKEN);
case '+':
c=nextchar();
if (c == '+') return makeToken(PLUSPLUS_TOKEN);
if (c == '=') return makeToken(PLUSASSIGN_TOKEN);
retract();
return makeToken(PLUS_TOKEN);
case '<':
switch (nextchar()) {
case '<':
if (nextchar() == '=') return makeToken(LEFTSHIFTASSIGN_TOKEN);
retract();
return makeToken(LEFTSHIFT_TOKEN);
case '=':
return makeToken(LESSTHANOREQUALS_TOKEN);
case '/':
return makeToken(XMLTAGSTARTEND_TOKEN);
case '!':
state=xmlcommentorcdatastart_state;
continue;
case '?':
state=xmlpi_state;
continue;
}
retract();
return makeToken(LESSTHAN_TOKEN);
case '=':
if (nextchar() == '=') {
if (nextchar() == '=') return makeToken(STRICTEQUALS_TOKEN);
retract();
return makeToken(EQUALS_TOKEN);
}
retract();
return makeToken(ASSIGN_TOKEN);
case '>':
state=start_state;
switch (nextchar()) {
case '>':
switch (nextchar()) {
case '>':
if (nextchar() == '=') return makeToken(UNSIGNEDRIGHTSHIFTASSIGN_TOKEN);
retract();
return makeToken(UNSIGNEDRIGHTSHIFT_TOKEN);
case '=':
return makeToken(RIGHTSHIFTASSIGN_TOKEN);
default :
retract();
return makeToken(RIGHTSHIFT_TOKEN);
}
case '=':
return makeToken(GREATERTHANOREQUALS_TOKEN);
}
retract();
return makeToken(GREATERTHAN_TOKEN);
case '0':
state=zero_state;
continue;
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
state=decimalinteger_state;
continue;
case ' ':
case '\t':
case 0x000b:
case 0x000c:
case 0x0085:
case 0x00a0:
continue;
case '\n':
case '\r':
isFirstTokenOnLine=true;
continue;
case 0:
return makeToken(EOS_TOKEN);
default :
switch (input.nextcharClass((char)c,true)) {
case Lu:
case Ll:
case Lt:
case Lm:
case Lo:
case Nl:
maybe_reserved=false;
state=A_state;
continue;
case Zs:
case Cc:
case Cf:
continue;
case Zl:
case Zp:
isFirstTokenOnLine=true;
continue;
default :
state=error_state;
continue;
}
}
}
case A_state:
{
boolean needs_escape=c == '\\';
while (true) {
c=nextchar();
if (c >= 'a' && c <= 'z') {
continue;
}
if ((c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '$' || c == '_') {
maybe_reserved=false;
continue;
}
if (c <= 0x7f) {
if (c == '\\') {
needs_escape=true;
}
 else {
retract();
break;
}
}
switch (input.nextcharClass(c,false)) {
case Lu:
case Ll:
case Lt:
case Lm:
case Lo:
case Nl:
case Mn:
case Mc:
case Nd:
case Pc:
maybe_reserved=false;
input.nextcharClass(c,true);
continue;
}
retract();
break;
}
state=start_state;
String s=input.copyReplaceUnicodeEscapes(needs_escape);
if (maybe_reserved) {
Integer i=reservedWord.get(s);
if (i != null) return makeToken((int)i);
}
return makeToken(IDENTIFIER_TOKEN,s);
}
case zero_state:
switch (nextchar()) {
case 'x':
case 'X':
switch (nextchar()) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
case 'a':
case 'b':
case 'c':
case 'd':
case 'e':
case 'f':
case 'A':
case 'B':
case 'C':
case 'D':
case 'E':
case 'F':
state=hexinteger_state;
break;
default :
state=start_state;
error(kError_Lexical_General);
}
continue;
case '.':
state=decimal_state;
continue;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
state=decimalinteger_state;
continue;
case 'E':
case 'e':
state=exponentstart_state;
continue;
case 'd':
case 'm':
case 'i':
case 'u':
if (!ctx.statics.es4_numerics) retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
default :
retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
}
case hexinteger_state:
switch (nextchar()) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
case 'a':
case 'b':
case 'c':
case 'd':
case 'e':
case 'f':
case 'A':
case 'B':
case 'C':
case 'D':
case 'E':
case 'F':
state=hexinteger_state;
continue;
case 'u':
case 'i':
if (!ctx.statics.es4_numerics) retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
default :
retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
}
case dot_state:
switch (nextchar()) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
state=decimal_state;
continue;
case '.':
state=start_state;
if (nextchar() == '.') return makeToken(TRIPLEDOT_TOKEN);
retract();
return makeToken(DOUBLEDOT_TOKEN);
case '<':
state=start_state;
return makeToken(DOTLESSTHAN_TOKEN);
default :
retract();
state=start_state;
return makeToken(DOT_TOKEN);
}
case decimalinteger_state:
switch (nextchar()) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
state=decimalinteger_state;
continue;
case '.':
state=decimal_state;
continue;
case 'd':
case 'm':
case 'u':
case 'i':
if (!ctx.statics.es4_numerics) retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
case 'E':
case 'e':
state=exponentstart_state;
continue;
default :
retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
}
case decimal_state:
switch (nextchar()) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
state=decimal_state;
continue;
case 'd':
case 'm':
if (!ctx.statics.es4_numerics) retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
case 'E':
case 'e':
state=exponentstart_state;
continue;
default :
retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
}
case exponentstart_state:
switch (nextchar()) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
case '+':
case '-':
state=exponent_state;
continue;
default :
error(kError_Lexical_General);
state=start_state;
continue;
}
case exponent_state:
switch (nextchar()) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
state=exponent_state;
continue;
case 'd':
case 'm':
if (!ctx.statics.es4_numerics) retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
default :
retract();
state=start_state;
return makeToken(NUMBERLITERAL_TOKEN,input.copy());
}
case slash_state:
{
c=nextchar();
switch (c) {
case '/':
state=start_state;
line_comment: while ((c=nextchar()) != 0) {
if (c == '\r' || c == '\n') {
isFirstTokenOnLine=true;
if (save_comments == false) {
break line_comment;
}
retract();
return makeCommentToken(SLASHSLASHCOMMENT_TOKEN,input.copyReplaceUnicodeEscapes());
}
}
continue;
case '*':
if (save_comments == false) {
block_comment: while ((c=nextchar()) != 0) {
if (c == '\r' || c == '\n') isFirstTokenOnLine=true;
if (c == '*') {
c=nextchar();
if (c == '/') {
break block_comment;
}
retract();
}
}
state=start_state;
}
 else {
if (blockcommentbuf == null) blockcommentbuf=new StringBuilder();
blockcommentbuf.append(""String_Node_Str"");
state=blockcommentstart_state;
}
continue;
case '>':
if (inXML > 0) {
state=start_state;
return makeToken(XMLTAGENDEND_TOKEN);
}
default :
int lb=currentToken.lookback;
if (lb == IDENTIFIER_TOKEN || lb == NUMBERLITERAL_TOKEN || lb == RIGHTPAREN_TOKEN || lb == RIGHTBRACE_TOKEN || lb == RIGHTBRACKET_TOKEN) {
state=start_state;
if (c == '=') return makeToken(DIVASSIGN_TOKEN);
retract();
return makeToken(DIV_TOKEN);
}
state=slashregexp_state;
retract();
continue;
}
}
case slashregexp_state:
switch (nextchar()) {
case '\\':
nextchar();
continue;
case '/':
regexp_flags=0;
state=regexp_state;
continue;
case 0:
case '\n':
case '\r':
error(kError_Lexical_General);
state=start_state;
continue;
default :
state=slashregexp_state;
continue;
}
case regexp_state:
c=nextchar();
switch (c) {
case 'g':
if ((regexp_flags & 0x01) == 0) {
regexp_flags|=0x01;
continue;
}
error(kError_Lexical_General);
state=start_state;
continue;
case 'i':
if ((regexp_flags & 0x02) == 0) {
regexp_flags|=0x02;
continue;
}
error(kError_Lexical_General);
state=start_state;
continue;
case 'm':
if ((regexp_flags & 0x04) == 0) {
regexp_flags|=0x04;
continue;
}
error(kError_Lexical_General);
state=start_state;
continue;
case 's':
if ((regexp_flags & 0x08) == 0) {
regexp_flags|=0x08;
continue;
}
error(kError_Lexical_General);
state=start_state;
continue;
case 'x':
if ((regexp_flags & 0x10) == 0) {
regexp_flags|=0x10;
continue;
}
error(kError_Lexical_General);
state=start_state;
continue;
default :
if (Character.isJavaIdentifierPart(c)) {
error(kError_Lexical_General);
state=start_state;
continue;
}
retract();
state=start_state;
return makeToken(REGEXPLITERAL_TOKEN,input.copyReplaceUnicodeEscapes());
}
case xmlcommentorcdatastart_state:
switch (nextchar()) {
case '[':
if (nextchar() == 'C' && nextchar() == 'D' && nextchar() == 'A' && nextchar() == 'T' && nextchar() == 'A' && nextchar() == '[') {
state=xmlcdata_state;
continue;
}
break;
case '-':
if (nextchar() == '-') {
state=xmlcomment_state;
continue;
}
}
error(kError_Lexical_General);
state=start_state;
continue;
case xmlcdata_state:
switch (nextchar()) {
case ']':
if (nextchar() == ']' && nextchar() == '>') {
state=start_state;
return makeToken(XMLMARKUP_TOKEN,input.substringReplaceUnicodeEscapes(startofxml,pos()));
}
continue;
case 0:
error(kError_Lexical_General);
state=start_state;
}
continue;
case xmlcomment_state:
while ((c=nextchar()) != '-' && c != 0) ;
if (c == '-' && nextchar() != '-') {
continue;
}
if (nextchar() == '>') {
state=start_state;
return makeToken(XMLMARKUP_TOKEN,input.substringReplaceUnicodeEscapes(startofxml,pos()));
}
error(kError_Lexical_General);
state=start_state;
continue;
case xmlpi_state:
while ((c=nextchar()) != '?' && c != 0) ;
if (c == '?' && nextchar() == '>') {
state=start_state;
return makeToken(XMLMARKUP_TOKEN,input.substringReplaceUnicodeEscapes(startofxml,pos()));
}
if (c == 0) {
error(kError_Lexical_General);
state=start_state;
}
continue;
case xmltext_state:
{
switch (nextchar()) {
case '<':
case '{':
{
retract();
String xmltext=input.substringReplaceUnicodeEscapes(startofxml,pos());
if (xmltext != null) {
state=start_state;
return makeToken(XMLTEXT_TOKEN,xmltext);
}
 else {
switch (nextchar()) {
case '<':
switch (nextchar()) {
case '/':
state=start_state;
return makeToken(XMLTAGSTARTEND_TOKEN);
case '!':
state=xmlcommentorcdatastart_state;
continue;
case '?':
state=xmlpi_state;
continue;
default :
retract();
state=start_state;
return makeToken(LESSTHAN_TOKEN);
}
case '{':
state=start_state;
return makeToken(LEFTBRACE_TOKEN);
}
}
}
case 0:
state=start_state;
return makeToken(EOS_TOKEN);
}
continue;
}
case xmlliteral_state:
switch (nextchar()) {
case '{':
return makeToken(XMLPART_TOKEN,input.substringReplaceUnicodeEscapes(startofxml,pos() - 1));
case '<':
if (nextchar() == '/') {
--level;
nextchar();
mark();
retract();
state=endxmlname_state;
}
 else {
++level;
state=xmlliteral_state;
}
continue;
case '/':
if (nextchar() == '>') {
--level;
if (level == 0) {
state=start_state;
return makeToken(XMLLITERAL_TOKEN,input.substringReplaceUnicodeEscapes(startofxml,pos() + 1));
}
}
continue;
case 0:
retract();
error(kError_Lexical_NoMatchingTag);
state=start_state;
continue;
default :
continue;
}
case endxmlname_state:
c=nextchar();
if (Character.isJavaIdentifierPart(c) || c == ':') {
continue;
}
switch (c) {
case '{':
{
String xmltext=input.substringReplaceUnicodeEscapes(startofxml,pos() - 1);
return makeToken(XMLPART_TOKEN,xmltext);
}
case '>':
retract();
nextchar();
if (level == 0) {
String xmltext=input.substringReplaceUnicodeEscapes(startofxml,pos() + 1);
state=start_state;
return makeToken(XMLLITERAL_TOKEN,xmltext);
}
state=xmlliteral_state;
continue;
default :
state=xmlliteral_state;
continue;
}
case blockcommentstart_state:
{
c=nextchar();
blockcommentbuf.append(c);
switch (c) {
case '*':
if (nextchar() == '/') {
state=start_state;
return makeCommentToken(BLOCKCOMMENT_TOKEN,new String());
}
retract();
state=doccomment_state;
continue;
case 0:
error(kError_BlockCommentNotTerminated);
state=start_state;
continue;
case '\n':
case '\r':
isFirstTokenOnLine=true;
default :
state=blockcomment_state;
continue;
}
}
case doccomment_state:
{
c=nextchar();
blockcommentbuf.append(c);
switch (c) {
case '*':
state=doccommentstar_state;
continue;
case '@':
if (doctextbuf == null) doctextbuf=getDocTextBuffer(doctagname);
if (doctagname.length() > 0) {
doctextbuf.append(""String_Node_Str"").append(doctagname).append(""String_Node_Str"");
}
doctagname=""String_Node_Str"";
state=doccommenttag_state;
continue;
case '\r':
case '\n':
isFirstTokenOnLine=true;
if (doctextbuf == null) doctextbuf=getDocTextBuffer(doctagname);
doctextbuf.append('\n');
continue;
case 0:
error(kError_BlockCommentNotTerminated);
state=start_state;
continue;
default :
if (doctextbuf == null) doctextbuf=getDocTextBuffer(doctagname);
doctextbuf.append((char)(c));
continue;
}
}
case doccommentstar_state:
{
c=nextchar();
blockcommentbuf.append(c);
switch (c) {
case '/':
{
if (doctextbuf == null) doctextbuf=getDocTextBuffer(doctagname);
if (doctagname.length() > 0) {
doctextbuf.append(""String_Node_Str"").append(doctagname).append(""String_Node_Str"");
}
String doctext=doctextbuf.toString();
state=start_state;
return makeCommentToken(DOCCOMMENT_TOKEN,doctext);
}
case '*':
continue;
case 0:
error(kError_BlockCommentNotTerminated);
state=start_state;
continue;
default :
state=doccomment_state;
continue;
}
}
case doccommenttag_state:
{
c=nextchar();
switch (c) {
case '*':
state=doccommentstar_state;
continue;
case ' ':
case '\t':
case '\r':
case '\n':
{
if (doctextbuf == null) doctextbuf=getDocTextBuffer(doctagname);
while ((c=nextchar()) == ' ' || c == '\t') ;
retract();
if (doctagname.length() > 0) {
doctextbuf.append(""String_Node_Str"").append(doctagname).append(""String_Node_Str"");
}
state=doccomment_state;
continue;
}
case 0:
error(kError_BlockCommentNotTerminated);
state=start_state;
continue;
default :
doctagname+=(char)(c);
continue;
}
}
case doccommentvalue_state:
switch (nextchar()) {
case '*':
state=doccommentstar_state;
continue;
case '@':
state=doccommenttag_state;
continue;
case 0:
error(kError_BlockCommentNotTerminated);
state=start_state;
continue;
default :
state=doccomment_state;
continue;
}
case blockcomment_state:
{
c=nextchar();
blockcommentbuf.append(c);
switch (c) {
case '*':
c=nextchar();
if (c == '/') {
state=start_state;
blockcommentbuf.append(c);
String blocktext=blockcommentbuf.toString();
return makeCommentToken(BLOCKCOMMENT_TOKEN,blocktext);
}
retract();
break;
case '\r':
case '\n':
isFirstTokenOnLine=true;
break;
case 0:
error(kError_BlockCommentNotTerminated);
state=start_state;
break;
}
continue;
}
case error_state:
error(kError_Lexical_General);
skiperror();
state=start_state;
continue;
default :
error(""String_Node_Str"");
state=start_state;
return makeToken(EOS_TOKEN);
}
}
}",0.981922892337226
45372,"private final int makeToken(int id){
  currentToken.id=id;
  currentToken.text=null;
  return id;
}","private final int makeToken(int id){
  currentToken.id=id;
  currentToken.lookback=id;
  currentToken.text=null;
  return id;
}",0.8761061946902655
45373,"private Node parseSuperStatement(int mode){
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  Node result;
  shift();
  SuperExpressionNode first=nodeFactory.superExpression(null,scanner.input.positionOfMark());
  if (lookahead() == LEFTPAREN_TOKEN) {
    CallExpressionNode call=(CallExpressionNode)parseArguments(first);
    if (lookaheadSemicolon(mode)) {
      result=nodeFactory.superStatement(call);
      matchSemicolon(mode);
    }
 else {
      if (call == null || call.args == null || call.args.size() != 1) {
        error(kError_Parser_WrongNumberOfSuperArgs);
      }
 else {
        first.expr=call.args.items.get(0);
      }
      Node t=parseFullPostfixExpressionPrime(first);
      result=nodeFactory.expressionStatement(parseListExpressionPrime(mode,nodeFactory.list(null,t)));
      matchSemicolon(mode);
    }
  }
 else {
    Node t=parseFullPostfixExpressionPrime(first);
    if (lookahead() == ASSIGN_TOKEN) {
      t=parseAssignmentExpressionSuffix(mode,t);
    }
    result=nodeFactory.expressionStatement(parseListExpressionPrime(mode,nodeFactory.list(null,t)));
    matchSemicolon(mode);
  }
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  return result;
}","private Node parseSuperStatement(int mode){
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  Node result;
  shift();
  SuperExpressionNode first=nodeFactory.superExpression(null,scanner.input.positionOfMark());
  if (lookahead() == LEFTPAREN_TOKEN) {
    CallExpressionNode call=(CallExpressionNode)parseArguments(first);
    if (lookaheadSemicolon(mode)) {
      result=nodeFactory.superStatement(call);
      matchSemicolon(mode);
    }
 else {
      if (call == null || call.args == null || call.args.size() != 1) {
        error(kError_Parser_WrongNumberOfSuperArgs);
      }
 else {
        first.expr=call.args.items.get(0);
      }
      Node t=parseFullPostfixExpressionPrime(first);
      result=nodeFactory.expressionStatement(parseListExpressionPrime(mode,nodeFactory.list(null,t)));
      matchSemicolon(mode);
    }
  }
 else   if (lookahead() == DOT_TOKEN || lookahead() == LEFTBRACKET_TOKEN) {
    Node t=parseFullPostfixExpressionPrime(first);
    if (lookahead() == ASSIGN_TOKEN) {
      t=parseAssignmentExpressionSuffix(mode,t);
    }
    result=nodeFactory.expressionStatement(parseListExpressionPrime(mode,nodeFactory.list(null,t)));
    matchSemicolon(mode);
  }
 else {
    error(ParseError.EOS,kError_Parser_ExpectedToken,Token.getTokenClassName(LEFTPAREN_TOKEN),scanner.getCurrentTokenTextOrTypeText(lookahead()));
    result=nodeFactory.error(kError_Parser_ExpectedToken);
    skiperror(SEMICOLON_TOKEN);
  }
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  return result;
}",0.8840262582056893
45374,"public Node forInStatement(boolean is_each,Node expr1,Node expr2,Node stmt,int pos){
  if (!cx.scriptAssistParsing) {
    if (stmt != null && !stmt.isStatementList()) {
      stmt=statementList(null,stmt);
    }
    VariableDefinitionNode vard=null;
    if (expr1.isDefinition()) {
      vard=(VariableDefinitionNode)expr1;
      VariableBindingNode varb=(VariableBindingNode)vard.list.items.back();
      TypedIdentifierNode var=varb.variable;
      expr1=var.identifier;
    }
 else {
      ListNode list=(ListNode)expr1;
      expr1=list.items.back();
    }
    RegisterNode ndx_reg=register(pos);
    RegisterNode obj_reg=register(pos);
    Node init;
    Node test;
    Node untypedExpr=coerce(expr2,null,cx.noType().getDefaultTypeInfo(),true,pos);
    init=list(list(null,storeRegister(ndx_reg,literalNumber(""String_Node_Str"",pos),cx.intType(),pos)),storeRegister(obj_reg,untypedExpr,cx.noType(),pos));
    test=hasNext(obj_reg,ndx_reg,pos);
    Node incr;
    if (is_each) {
      incr=expressionStatement(assignmentExpression(expr1,ASSIGN_TOKEN,memberExpression(loadRegister(obj_reg,cx.noType(),pos),invoke(""String_Node_Str"",argumentList(null,loadRegister(ndx_reg,cx.intType(),pos)),pos))));
    }
 else {
      incr=expressionStatement(assignmentExpression(expr1,ASSIGN_TOKEN,memberExpression(loadRegister(obj_reg,cx.noType(),pos),invoke(""String_Node_Str"",argumentList(null,loadRegister(ndx_reg,cx.intType(),pos)),expr1.pos()))));
    }
    stmt=statementList(statementList(null,incr),stmt);
    Node node=forStatement(init,test,null,stmt,true,(pos == -1) ? expr1.pos() : pos);
    if (vard != null) {
      StatementListNode stmtlist=this.statementList(this.statementList(null,vard),node);
      node=stmtlist;
    }
    return node;
  }
 else {
    if (stmt != null && !stmt.isStatementList()) {
      stmt=this.statementList(null,stmt);
    }
    VariableDefinitionNode vard=null;
    if (expr1 != null && expr1.isDefinition()) {
      vard=(VariableDefinitionNode)expr1;
      expr1=null;
    }
    if (expr1 != null)     pos=expr1.pos();
 else     if (expr2 != null)     pos=expr2.pos();
    Node node=new ForStatementNode(expr1,expr2,null,stmt,true);
    node.setPositionNonterminal(expr1,pos);
    if (vard != null) {
      StatementListNode stmtlist=this.statementList(this.statementList(null,vard),node);
      node=stmtlist;
      stmtlist.is_loop=true;
    }
 else {
      StatementListNode stmtlist=(stmt instanceof StatementListNode) ? (StatementListNode)stmt : null;
      if (stmtlist != null) {
        stmtlist.is_loop=true;
      }
    }
    return node;
  }
}","public Node forInStatement(boolean is_each,Node expr1,Node expr2,Node stmt,int pos){
  if (!cx.scriptAssistParsing) {
    if (stmt != null && !stmt.isStatementList()) {
      stmt=statementList(null,stmt);
    }
    VariableDefinitionNode vard=null;
    if (expr1.isDefinition()) {
      vard=(VariableDefinitionNode)expr1;
      VariableBindingNode varb=(VariableBindingNode)vard.list.items.back();
      TypedIdentifierNode var=varb.variable;
      expr1=var.identifier;
    }
 else {
      ListNode list=(ListNode)expr1;
      expr1=list.items.back();
    }
    RegisterNode ndx_reg=register(pos);
    RegisterNode obj_reg=register(pos);
    Node init;
    Node test;
    Node untypedExpr=coerce(expr2,null,cx.noType().getDefaultTypeInfo(),true,pos);
    init=list(list(null,storeRegister(ndx_reg,literalNumber(""String_Node_Str"",pos),cx.intType(),pos)),storeRegister(obj_reg,untypedExpr,cx.noType(),pos));
    test=hasNext(obj_reg,ndx_reg,pos);
    Node incr;
    if (is_each) {
      incr=expressionStatement(assignmentExpression(expr1,ASSIGN_TOKEN,memberExpression(loadRegister(obj_reg,cx.noType(),pos),invoke(""String_Node_Str"",argumentList(null,loadRegister(ndx_reg,cx.intType(),pos)),pos))));
    }
 else {
      incr=expressionStatement(assignmentExpression(expr1,ASSIGN_TOKEN,memberExpression(loadRegister(obj_reg,cx.noType(),pos),invoke(""String_Node_Str"",argumentList(null,loadRegister(ndx_reg,cx.intType(),pos)),expr1.pos()))));
    }
    stmt=statementList(statementList(null,incr),stmt);
    Node node=forStatement(init,test,null,stmt,true,(pos == -1) ? expr1.pos() : pos);
    if (vard != null) {
      StatementListNode stmtlist=this.statementList(this.statementList(null,vard),node);
      if (stmtlist != null)       stmtlist.is_loop=true;
      node=stmtlist;
    }
    return node;
  }
 else {
    if (stmt != null && !stmt.isStatementList()) {
      stmt=this.statementList(null,stmt);
    }
    VariableDefinitionNode vard=null;
    if (expr1 != null && expr1.isDefinition()) {
      vard=(VariableDefinitionNode)expr1;
      expr1=null;
    }
    if (expr1 != null)     pos=expr1.pos();
 else     if (expr2 != null)     pos=expr2.pos();
    Node node=new ForStatementNode(expr1,expr2,null,stmt,true);
    node.setPositionNonterminal(expr1,pos);
    if (vard != null) {
      StatementListNode stmtlist=this.statementList(this.statementList(null,vard),node);
      node=stmtlist;
      stmtlist.is_loop=true;
    }
 else {
      StatementListNode stmtlist=(stmt instanceof StatementListNode) ? (StatementListNode)stmt : null;
      if (stmtlist != null) {
        stmtlist.is_loop=true;
      }
    }
    return node;
  }
}",0.989103421907857
45375,"public void processUnresolvedNamespaces(){
  if (unresolved_namespaces != null) {
    List<UnresolvedNamespace> nsList=new ArrayList<UnresolvedNamespace>(unresolved_namespaces.keySet());
    for (int i=0, size=nsList.size(); i < size; i++) {
      UnresolvedNamespace ns=nsList.get(i);
      ObjectList<ObjectValue> scopes=unresolved_namespaces.get(ns);
      ObjectList<ObjectValue> temp=statics.scopes;
      statics.scopes=unresolved_namespaces.get(ns);
      Slot slot=ns.ref.getSlot(this);
      statics.scopes=temp;
      if (slot != null) {
        Value val=slot.getValue();
        ObjectValue realNamespace=(val instanceof ObjectValue) ? (ObjectValue)val : null;
        if (realNamespace != null) {
          ns.name=realNamespace.name;
          ns.ns_kind=realNamespace.getNamespaceKind();
          ns.resolved=true;
        }
      }
 else {
        ns.cx.error(ns.node.pos(),kError_Unknown_Namespace);
      }
      ns.cx=null;
      ns.node=null;
    }
    unresolved_namespaces.clear();
    unresolved_namespaces=null;
  }
}","public void processUnresolvedNamespaces(){
  if (unresolved_namespaces != null) {
    List<UnresolvedNamespace> nsList=new ArrayList<UnresolvedNamespace>(unresolved_namespaces.keySet());
    for (int i=0, size=nsList.size(); i < size; i++) {
      UnresolvedNamespace ns=nsList.get(i);
      ObjectList<ObjectValue> temp=statics.scopes;
      statics.scopes=unresolved_namespaces.get(ns);
      Slot slot=ns.ref.getSlot(this);
      statics.scopes=temp;
      if (slot != null) {
        Value val=slot.getValue();
        ObjectValue realNamespace=(val instanceof ObjectValue) ? (ObjectValue)val : null;
        if (realNamespace != null) {
          unresolved_namespaces.remove(ns);
          ns.name=realNamespace.name;
          ns.ns_kind=realNamespace.getNamespaceKind();
          ns.resolved=true;
        }
      }
 else {
        ns.cx.error(ns.node.pos(),kError_Unknown_Namespace);
      }
      ns.cx=null;
      ns.node=null;
    }
    unresolved_namespaces.clear();
    unresolved_namespaces=null;
  }
}",0.7233009708737864
45376,"void warning(int pos,InputBuffer input,int code,String errorArg1,String errorArg2,String errorArg3){
  if (first_pass || (enabledMap.containsKey(code) && !enabledMap.get(code)) || ignorableFile(input)|| (pos == 0))   return;
  CodeLocation loc=new CodeLocation();
  loc.pos=pos;
  loc.input=input;
  if (input != null) {
    int colPos=input.getColPos(loc.pos);
    if (colPos > 300) {
      colPos=1;
    }
    WarningRecord rec=new WarningRecord(loc,input.getLnNum(loc.pos),colPos,code,errorArg1,errorArg2,errorArg3);
    ObjectList<WarningRecord> warnList=pWarnings.get(code);
    if (warnList == null)     warnList=new ObjectList<WarningRecord>();
    for (    WarningRecord test : warnList) {
      if (test.colNum == rec.colNum && test.lineNum == rec.lineNum && test.errStringArg1.equals(rec.errStringArg1) && test.errStringArg2.equals(rec.errStringArg2) && test.errStringArg3.equals(rec.errStringArg3) && test.loc.input.equals(rec.loc.input))       return;
    }
    warnList.add(rec);
    pWarnings.put(code,warnList);
    String origin=loc.input.origin;
    TreeMap<Integer,WarningRecord> locMap=warningsByLoc.get(origin);
    if (locMap == null) {
      locMap=new TreeMap<Integer,WarningRecord>();
      warningsByLoc.put(origin,locMap);
    }
    locMap.put(rec.lineNum,rec);
  }
 else   assert(false);
}","void warning(int pos,InputBuffer input,int code,String errorArg1,String errorArg2,String errorArg3){
  if (first_pass || (enabledMap.containsKey(code) && !enabledMap.get(code)) || ignorableFile(input)|| (pos == 0))   return;
  CodeLocation loc=new CodeLocation();
  loc.pos=pos;
  loc.input=input;
  if (input != null) {
    int colPos=input.getColPos(loc.pos);
    if (colPos > 300) {
      colPos=1;
    }
    WarningRecord rec=new WarningRecord(loc,input.getLnNum(loc.pos),colPos,code,errorArg1,errorArg2,errorArg3);
    ObjectList<WarningRecord> warnList=pWarnings.get(code);
    if (warnList == null)     warnList=new ObjectList<WarningRecord>();
    for (    WarningRecord test : warnList) {
      if (test.colNum == rec.colNum && test.lineNum == rec.lineNum && test.errStringArg1.equals(rec.errStringArg1) && test.errStringArg2.equals(rec.errStringArg2) && test.errStringArg3.equals(rec.errStringArg3) && test.loc.input.equals(rec.loc.input))       return;
    }
    warnList.add(rec);
    pWarnings.put(code,warnList);
    String origin=loc.input.origin;
    TreeMap<Integer,Set<WarningRecord>> locMap=warningsByLoc.get(origin);
    if (locMap == null) {
      locMap=new TreeMap<Integer,Set<WarningRecord>>();
      warningsByLoc.put(origin,locMap);
    }
    Set<WarningRecord> records=locMap.get(rec.lineNum);
    if (records == null) {
      records=new HashSet<WarningRecord>(1);
      locMap.put(rec.lineNum,records);
    }
    records.add(rec);
  }
 else   assert(false);
}",0.9322396576319544
45377,"/** 
 * Log warnings with little formatting to the warning or error stream FLEX hooks into this method, nothing in ASC uses it.
 */
public int simpleLogWarnings(Context cx,boolean logAsErrors){
  CompilerHandler handler=cx.getHandler();
  if (handler == null) {
    handler=cx.statics.handler;
  }
  int count=0;
  for (  TreeMap<Integer,WarningRecord> locMap : warningsByLoc.values()) {
    for (    WarningRecord pRec : locMap.values()) {
      StringBuilder sb=new StringBuilder();
      InputBuffer input=pRec.loc.input;
      createErrorMessage(pRec,sb,pRec.code);
      String source=input.getLineText(pRec.loc.pos);
      if (logAsErrors) {
        handler.error(input.origin,pRec.lineNum,pRec.colNum,sb.toString(),source,pRec.code);
      }
 else {
        handler.warning(input.origin,pRec.lineNum,pRec.colNum,sb.toString(),source,pRec.code);
      }
      count++;
    }
  }
  return count;
}","/** 
 * Log warnings with little formatting to the warning or error stream FLEX hooks into this method, nothing in ASC uses it.
 */
public int simpleLogWarnings(Context cx,boolean logAsErrors){
  CompilerHandler handler=cx.getHandler();
  if (handler == null) {
    handler=cx.statics.handler;
  }
  int count=0;
  for (  TreeMap<Integer,Set<WarningRecord>> locMap : warningsByLoc.values()) {
    for (    Set<WarningRecord> records : locMap.values()) {
      for (      WarningRecord record : records) {
        StringBuilder sb=new StringBuilder();
        InputBuffer input=record.loc.input;
        createErrorMessage(record,sb,record.code);
        String source=input.getLineText(record.loc.pos);
        if (logAsErrors) {
          handler.error(input.origin,record.lineNum,record.colNum,sb.toString(),source,record.code);
        }
 else {
          handler.warning(input.origin,record.lineNum,record.colNum,sb.toString(),source,record.code);
        }
        count++;
      }
    }
  }
  return count;
}",0.8538622129436325
45378,"/** 
 * visit a single expression.  compute it's type and constant value.  If either change, add any dependents to the appropriate work list.
 * @param m
 * @param e
 * @param values
 * @param types
 * @param flowWork
 * @param ssaWork
 * @param uses
 */
void sccp_eval(Method m,Expr e,Map<Expr,Object> values,Map<Expr,Typeref> types,Set<Edge> flowWork,Set<Expr> ssaWork,EdgeMap<Expr> uses){
  Object v=null;
  Typeref tref=null;
  if (e.op == OP_phi) {
    for (    Expr a : e.args) {
      Object av=values.get(a);
      if (av == null)       continue;
      if (v == null)       v=av;
 else       if (!av.equals(v))       v=BOTTOM;
      Typeref aref=types.get(a);
      if (tref == null)       tref=aref;
 else       if (!tref.equals(aref))       tref=mdb(tref,aref);
    }
  }
 else {
    for (    Expr a : e.args)     if (!values.containsKey(a))     return;
    for (    Expr a : e.scopes)     if (!values.containsKey(a))     return;
    for (    Expr a : e.locals)     if (!values.containsKey(a))     return;
    v=BOTTOM;
    tref=ANY.ref;
switch (e.op) {
default :
      System.err.println(""String_Node_Str"" + e.op + ""String_Node_Str""+ opNames[e.op]);
    assert(false);
case OP_hasnext2_o:
case OP_nextname:
case OP_nextvalue:
case OP_call:
case OP_callsuper:
case OP_getsuper:
case OP_getdescendants:
  break;
case OP_convert_o:
{
  tref=types.get(e.args[0]).nonnull();
  v=values.get(e.args[0]);
  break;
}
case OP_esc_xattr:
case OP_esc_xelem:
tref=STRING.ref.nonnull();
break;
case OP_newcatch:
tref=m.handlers[e.imm[0]].activation;
break;
case OP_newobject:
tref=OBJECT.ref.nonnull();
break;
case OP_newarray:
tref=ARRAY.ref.nonnull();
break;
case OP_newactivation:
tref=m.activation;
break;
case OP_getglobalscope:
if (m.cx.scopes.length > 0) {
tref=m.cx.scopes[0];
}
 else {
v=values.get(e.scopes[0].args[0]);
tref=types.get(e.scopes[0].args[0]);
}
break;
case OP_getscopeobject:
v=values.get(e.scopes[0].args[0]);
tref=types.get(e.scopes[0].args[0]);
if (tref == null) {
tref=ANY.ref;
}
break;
case OP_newclass:
tref=e.c.ref.nonnull();
break;
case OP_newfunction:
tref=FUNCTION.ref.nonnull();
break;
case OP_finddef:
if (globals.contains(e.ref)) tref=globals.get(e.ref);
break;
case OP_findpropstrict:
case OP_findproperty:
{
int i=findInner(e.ref,e.scopes,types);
if (i >= 0) {
v=values.get(e.scopes[i]);
tref=types.get(e.scopes[i]);
}
 else if ((i=findOuter(e.ref,m.cx.scopes)) >= 0) {
tref=m.cx.scopes[i];
}
 else if (globals.contains(e.ref)) {
tref=globals.get(e.ref);
}
 else {
if (m.cx.scopes.length > 0) {
tref=m.cx.scopes[0];
}
 else {
v=values.get(e.scopes[0]);
tref=types.get(e.scopes[0]);
}
}
break;
}
case OP_getlex:
{
int i=findInner(e.ref,e.scopes,types);
Typeref stref=i >= 0 ? types.get(e.scopes[i]) : (i=findOuter(e.ref,m.cx.scopes)) >= 0 ? m.cx.scopes[i] : globals.contains(e.ref) ? globals.get(e.ref) : m.cx.scopes.length > 0 ? m.cx.scopes[0] : types.get(e.scopes[0]);
Binding b=stref.t.findGet(e.ref);
if (isSlot(b)) {
tref=b.type;
if (isConst(b) && defaultValueChanged(b)) v=b.value;
}
 else if (isMethod(b)) {
tref=FUNCTION.ref.nonnull();
}
 else if (isGetter(b)) {
tref=b.method.returns;
}
break;
}
case OP_construct:
{
tref=OBJECT.ref.nonnull();
break;
}
case OP_constructprop:
{
Type ot=type(types,e.args[0]);
Binding b=ot.findGet(e.ref);
if (b != null && b.type != null && b.type.t.itype != null) {
tref=b.type.t.itype.ref.nonnull();
break;
}
break;
}
case OP_callproperty:
case OP_callproplex:
{
Type ot=type(types,e.args[0]);
Binding b=ot.findGet(e.ref);
if (isMethod(b)) {
tref=b.method.returns;
}
 else if (isSlot(b) && b.type != null) {
if (b.type.t.itype == INT) {
tref=INT.ref;
v=eval_convert_i(values.get(e.args[1]));
}
 else if (b.type.t.itype == UINT) {
tref=UINT.ref;
v=eval_convert_u(values.get(e.args[1]));
}
 else if (b.type.t.itype == STRING) {
tref=STRING.ref.nonnull();
v=eval_convert_s(values.get(e.args[1]));
}
 else if (b.type.t.itype == BOOLEAN) {
tref=BOOLEAN.ref;
v=eval_convert_b(values.get(e.args[1]));
}
 else if (b.type.t.itype == NUMBER) {
tref=NUMBER.ref;
v=eval_convert_d(values.get(e.args[1]));
}
}
break;
}
case OP_applytype:
tref=types.get(e.args[0]).nonnull();
break;
case OP_callstatic:
tref=e.m.returns;
break;
case OP_arg:
if (e.imm[0] < m.params.length) tref=m.params[e.imm[0]];
 else if (m.needsArguments() || m.needsRest() && e.imm[0] == m.params.length) tref=ARRAY.ref.nonnull();
 else tref=VOID.ref;
break;
case OP_xarg:
tref=m.handlers[e.imm[0]].type;
break;
case OP_getslot:
{
Type t0=type(types,e.args[0]);
Binding b=t0.findSlot(e.imm[0]);
if (b != null) tref=b.type;
break;
}
case OP_getproperty:
{
Type t0=type(types,e.args[0]);
Binding b=t0.findGet(e.ref);
if (isSlot(b)) {
tref=b.type;
if (isConst(b) && defaultValueChanged(b)) v=b.value;
}
 else if (isMethod(b)) {
tref=FUNCTION.ref.nonnull();
}
 else if (isGetter(b)) {
tref=b.method.returns;
}
break;
}
case OP_pushundefined:
v=e.value;
tref=VOID.ref;
break;
case OP_pushnull:
v=e.value;
tref=NULL.ref;
break;
case OP_pushtrue:
case OP_pushfalse:
v=e.value;
tref=BOOLEAN.ref;
break;
case OP_pushbyte:
case OP_pushshort:
case OP_pushint:
v=e.value;
tref=INT.ref;
break;
case OP_pushuint:
v=e.value;
tref=UINT.ref;
break;
case OP_pushstring:
v=e.value;
tref=STRING.ref.nonnull();
break;
case OP_pushnan:
case OP_pushdouble:
v=e.value;
tref=NUMBER.ref;
break;
case OP_pushnamespace:
v=e.value;
tref=NAMESPACE.ref.nonnull();
break;
case OP_jump:
flowWork.add(e.succ[0]);
return;
case OP_lookupswitch:
{
Object v1=values.get(e.args[0]);
if (v1 == BOTTOM) for (Edge s : e.succ) flowWork.add(s);
 else {
int i=intValue(v1);
if (i < 0 || i >= e.succ.length - 1) i=e.succ.length - 1;
flowWork.add(e.succ[i]);
}
return;
}
case OP_iffalse:
case OP_iftrue:
{
Object v1=values.get(e.args[0]);
if (v1 == BOTTOM) {
flowWork.add(e.succ[0]);
flowWork.add(e.succ[1]);
}
 else if (e.op == OP_iffalse) flowWork.add(e.succ[booleanValue(v1) ? 0 : 1]);
 else if (e.op == OP_iftrue) flowWork.add(e.succ[booleanValue(v1) ? 1 : 0]);
return;
}
case OP_pushscope:
case OP_pushwith:
v=values.get(e.args[0]);
tref=types.get(e.args[0]).nonnull();
break;
case OP_convert_b:
tref=BOOLEAN.ref;
v=eval_convert_b(values.get(e.args[0]));
break;
case OP_not:
{
tref=BOOLEAN.ref;
Object v0=values.get(e.args[0]);
if (v0 != BOTTOM) v=booleanValue(v0) ? FALSE : TRUE;
break;
}
case OP_deleteproperty:
case OP_deldescendants:
case OP_hasnext:
case OP_hasnext2:
case OP_equals:
case OP_strictequals:
case OP_in:
case OP_istype:
case OP_istypelate:
case OP_instanceof:
tref=BOOLEAN.ref;
break;
case OP_lessthan:
case OP_lessequals:
case OP_greaterthan:
case OP_greaterequals:
{
tref=BOOLEAN.ref;
Object v0=values.get(e.args[0]);
Object v1=values.get(e.args[1]);
if (v0.equals(NAN) || v0 == UNDEFINED || v1.equals(NAN) || v1 == UNDEFINED) v=FALSE;
 else if (v0 != BOTTOM && v1 != BOTTOM) v=e.op == OP_lessthan ? lessthan(v0,v1) : e.op == OP_lessequals ? !lessthan(v1,v0) : e.op == OP_greaterthan ? lessthan(v1,v0) : !lessthan(v0,v1);
break;
}
case OP_convert_s:
tref=STRING.ref.nonnull();
v=eval_convert_s(values.get(e.args[0]));
break;
case OP_coerce_s:
{
tref=eval_coerce_s(types.get(e.args[0]));
v=eval_coerce_s(values.get(e.args[0]));
break;
}
case OP_coerce_o:
{
Typeref t0=types.get(e.args[0]);
tref=eval_coerce_o(t0);
v=eval_coerce_o(values.get(e.args[0]),t0.t);
break;
}
case OP_coerce_a:
{
if (!(types.get(e.args[0]).equals(VOID.ref))) {
v=values.get(e.args[0]);
tref=types.get(e.args[0]);
}
 else {
tref=ANY.ref;
}
break;
}
case OP_coerce:
{
Typeref t0=types.get(e.args[0]);
Object v0=values.get(e.args[0]);
Type t=namedTypes.get(e.ref);
assert(t != null);
if (t == STRING) {
tref=eval_coerce_s(t0);
v=eval_coerce_s(v0);
}
 else if (t == OBJECT) {
tref=eval_coerce_o(t0);
v=eval_coerce_o(v0,t0.t);
}
 else if (t == INT) {
tref=t.ref;
v=eval_convert_i(v0);
}
 else if (t == UINT) {
tref=t.ref;
v=eval_convert_u(v0);
}
 else if (t == NUMBER) {
tref=t.ref;
v=eval_convert_d(v0);
}
 else if (t == BOOLEAN) {
tref=t.ref;
v=eval_convert_b(v0);
}
 else {
if (istype(t0.t,t)) {
tref=t0;
v=v0;
}
 else if (t0.t == NULL || t0.t == VOID) {
tref=NULL.ref;
}
 else {
tref=t.ref;
}
}
break;
}
case OP_astype:
tref=namedTypes.get(e.ref).ref;
break;
case OP_astypelate:
{
Typeref t1=types.get(e.args[1]);
if (t1.t.itype != null) {
if (t1.t.itype.atom || t1.t.itype.numeric) tref=OBJECT.ref;
 else tref=t1.t.itype.ref;
}
 else {
tref=ANY.ref;
}
break;
}
case OP_typeof:
{
Type t0=type(types,e.args[0]);
if (t0 == INT || t0 == UINT || t0 == NUMBER) v=""String_Node_Str"";
 else if (t0 == STRING) v=""String_Node_Str"";
 else if (istype(t0,XML) || istype(t0,XMLLIST)) v=""String_Node_Str"";
 else if (t0 == VOID) v=""String_Node_Str"";
 else if (t0 == BOOLEAN) v=""String_Node_Str"";
 else if (istype(t0,FUNCTION)) v=""String_Node_Str"";
 else if (t0 != OBJECT && istype(t0,OBJECT)) v=""String_Node_Str"";
tref=STRING.ref.nonnull();
break;
}
case OP_add:
{
Expr a0=e.args[0];
Expr a1=e.args[1];
Typeref t0=types.get(a0);
Typeref t1=types.get(a1);
Object v0=values.get(a0);
Object v1=values.get(a1);
if (t0.t == STRING && !t0.nullable || t1.t == STRING && !t1.nullable) {
tref=STRING.ref.nonnull();
if (v0 != BOTTOM && v1 != BOTTOM) v=stringValue(v0) + stringValue(v1);
}
 else if (t0.t.numeric && t1.t.numeric) {
tref=NUMBER.ref;
if (v0 instanceof Number && v1 instanceof Number) v=doubleValue(v0) + doubleValue(v1);
}
 else {
tref=OBJECT.ref.nonnull();
}
break;
}
case OP_divide:
{
tref=NUMBER.ref;
Object v0=values.get(e.args[0]);
Object v1=values.get(e.args[1]);
if (v0 instanceof Number && v1 instanceof Number) v=doubleValue(v0) / doubleValue(v1);
break;
}
case OP_subtract:
case OP_multiply:
case OP_modulo:
case OP_negate:
case OP_increment:
case OP_decrement:
tref=NUMBER.ref;
break;
case OP_convert_d:
tref=NUMBER.ref;
v=eval_convert_d(values.get(e.args[0]));
break;
case OP_convert_i:
tref=INT.ref;
v=eval_convert_i(values.get(e.args[0]));
break;
case OP_convert_u:
tref=UINT.ref;
v=eval_convert_u(values.get(e.args[0]));
break;
case OP_bitor:
{
tref=INT.ref;
Object v0=values.get(e.args[0]);
Object v1=values.get(e.args[1]);
if (v0 instanceof Number && v1 instanceof Number) v=intValue(v0) | intValue(v1);
break;
}
case OP_bitand:
{
tref=INT.ref;
Object v0=values.get(e.args[0]);
Object v1=values.get(e.args[1]);
if (v0 instanceof Number && v1 instanceof Number) {
v=intValue(v0) & intValue(v1);
}
break;
}
case OP_bitnot:
case OP_add_i:
case OP_subtract_i:
case OP_multiply_i:
case OP_negate_i:
case OP_bitxor:
case OP_lshift:
case OP_rshift:
case OP_hasnext2_i:
case OP_increment_i:
case OP_decrement_i:
tref=INT.ref;
break;
case OP_urshift:
tref=UINT.ref;
break;
case OP_setslot:
case OP_setproperty:
case OP_setsuper:
case OP_initproperty:
case OP_callpropvoid:
case OP_constructsuper:
case OP_callsupervoid:
case OP_returnvoid:
case OP_returnvalue:
case OP_throw:
case OP_popscope:
case OP_debug:
case OP_debugline:
case OP_debugfile:
case OP_bkpt:
case OP_bkptline:
case OP_checkfilter:
return;
}
}
assert(tref != null && tref.t != null);
if (tref.t == VOID) v=UNDEFINED;
 else if (tref.t == NULL) v=NULL;
if (v != null && !v.equals(values.get(e))) {
values.put(e,v);
ssaWork.addAll(uses.get(e));
}
if (!tref.equals(types.get(e))) {
types.put(e,tref);
ssaWork.addAll(uses.get(e));
}
}","/** 
 * visit a single expression.  compute it's type and constant value.  If either change, add any dependents to the appropriate work list.
 * @param m
 * @param e
 * @param values
 * @param types
 * @param flowWork
 * @param ssaWork
 * @param uses
 */
void sccp_eval(Method m,Expr e,Map<Expr,Object> values,Map<Expr,Typeref> types,Set<Edge> flowWork,Set<Expr> ssaWork,EdgeMap<Expr> uses){
  Object v=null;
  Typeref tref=null;
  if (e.op == OP_phi) {
    for (    Expr a : e.args) {
      Object av=values.get(a);
      if (av == null)       continue;
      if (v == null)       v=av;
 else       if (!av.equals(v))       v=BOTTOM;
      Typeref aref=types.get(a);
      if (tref == null)       tref=aref;
 else       if (!tref.equals(aref))       tref=mdb(tref,aref);
    }
  }
 else {
    for (    Expr a : e.args)     if (!values.containsKey(a))     return;
    for (    Expr a : e.scopes)     if (!values.containsKey(a))     return;
    for (    Expr a : e.locals)     if (!values.containsKey(a))     return;
    v=BOTTOM;
    tref=ANY.ref;
switch (e.op) {
default :
      System.err.println(""String_Node_Str"" + e.op + ""String_Node_Str""+ opNames[e.op]);
    assert(false);
case OP_hasnext2_o:
case OP_nextname:
case OP_nextvalue:
case OP_call:
case OP_callsuper:
case OP_getsuper:
case OP_getdescendants:
  break;
case OP_convert_o:
{
  tref=types.get(e.args[0]).nonnull();
  v=values.get(e.args[0]);
  break;
}
case OP_esc_xattr:
case OP_esc_xelem:
tref=STRING.ref.nonnull();
break;
case OP_newcatch:
tref=m.handlers[e.imm[0]].activation;
break;
case OP_newobject:
tref=OBJECT.ref.nonnull();
break;
case OP_newarray:
tref=ARRAY.ref.nonnull();
break;
case OP_newactivation:
tref=m.activation;
break;
case OP_getglobalscope:
if (m.cx.scopes.length > 0) {
tref=m.cx.scopes[0];
}
 else {
v=values.get(e.scopes[0].args[0]);
tref=types.get(e.scopes[0].args[0]);
}
break;
case OP_getscopeobject:
v=values.get(e.scopes[0].args[0]);
tref=types.get(e.scopes[0].args[0]);
if (tref == null) {
tref=ANY.ref;
}
break;
case OP_newclass:
tref=e.c.ref.nonnull();
break;
case OP_newfunction:
tref=FUNCTION.ref.nonnull();
break;
case OP_finddef:
if (globals.contains(e.ref)) tref=globals.get(e.ref);
break;
case OP_findpropstrict:
case OP_findproperty:
{
int i=findInner(e.ref,e.scopes,types);
if (i >= 0) {
v=values.get(e.scopes[i]);
tref=types.get(e.scopes[i]);
}
 else if ((i=findOuter(e.ref,m.cx.scopes)) >= 0) {
tref=m.cx.scopes[i];
}
 else if (globals.contains(e.ref)) {
tref=globals.get(e.ref);
}
 else {
if (m.cx.scopes.length > 0) {
tref=m.cx.scopes[0];
}
 else {
v=values.get(e.scopes[0]);
tref=types.get(e.scopes[0]);
}
}
break;
}
case OP_getlex:
{
int i=findInner(e.ref,e.scopes,types);
Typeref stref=i >= 0 ? types.get(e.scopes[i]) : (i=findOuter(e.ref,m.cx.scopes)) >= 0 ? m.cx.scopes[i] : globals.contains(e.ref) ? globals.get(e.ref) : m.cx.scopes.length > 0 ? m.cx.scopes[0] : types.get(e.scopes[0]);
Binding b=stref.t.findGet(e.ref);
if (isSlot(b)) {
tref=b.type;
if (isConst(b) && defaultValueChanged(b)) v=b.value;
}
 else if (isMethod(b)) {
tref=FUNCTION.ref.nonnull();
}
 else if (isGetter(b)) {
tref=b.method.returns;
}
break;
}
case OP_construct:
{
tref=OBJECT.ref.nonnull();
break;
}
case OP_constructprop:
{
Type ot=type(types,e.args[0]);
Binding b=ot.findGet(e.ref);
if (b != null && b.type != null && b.type.t.itype != null) {
tref=b.type.t.itype.ref.nonnull();
break;
}
break;
}
case OP_callproperty:
case OP_callproplex:
{
Type ot=type(types,e.args[0]);
Binding b=ot.findGet(e.ref);
if (isMethod(b)) {
tref=b.method.returns;
}
 else if (isSlot(b) && b.type != null) {
if (b.type.t.itype == INT) {
tref=INT.ref;
if (e.args.length > 1) v=eval_convert_i(values.get(e.args[1]));
}
 else if (b.type.t.itype == UINT) {
tref=UINT.ref;
if (e.args.length > 1) v=eval_convert_u(values.get(e.args[1]));
}
 else if (b.type.t.itype == STRING) {
tref=STRING.ref.nonnull();
if (e.args.length > 1) v=eval_convert_s(values.get(e.args[1]));
}
 else if (b.type.t.itype == BOOLEAN) {
tref=BOOLEAN.ref;
if (e.args.length > 1) v=eval_convert_b(values.get(e.args[1]));
}
 else if (b.type.t.itype == NUMBER) {
tref=NUMBER.ref;
if (e.args.length > 1) v=eval_convert_d(values.get(e.args[1]));
}
}
break;
}
case OP_applytype:
tref=types.get(e.args[0]).nonnull();
break;
case OP_callstatic:
tref=e.m.returns;
break;
case OP_arg:
if (e.imm[0] < m.params.length) tref=m.params[e.imm[0]];
 else if (m.needsArguments() || m.needsRest() && e.imm[0] == m.params.length) tref=ARRAY.ref.nonnull();
 else tref=VOID.ref;
break;
case OP_xarg:
tref=m.handlers[e.imm[0]].type;
break;
case OP_getslot:
{
Type t0=type(types,e.args[0]);
Binding b=t0.findSlot(e.imm[0]);
if (b != null) tref=b.type;
break;
}
case OP_getproperty:
{
Type t0=type(types,e.args[0]);
Binding b=t0.findGet(e.ref);
if (isSlot(b)) {
tref=b.type;
if (isConst(b) && defaultValueChanged(b)) v=b.value;
}
 else if (isMethod(b)) {
tref=FUNCTION.ref.nonnull();
}
 else if (isGetter(b)) {
tref=b.method.returns;
}
break;
}
case OP_pushundefined:
v=e.value;
tref=VOID.ref;
break;
case OP_pushnull:
v=e.value;
tref=NULL.ref;
break;
case OP_pushtrue:
case OP_pushfalse:
v=e.value;
tref=BOOLEAN.ref;
break;
case OP_pushbyte:
case OP_pushshort:
case OP_pushint:
v=e.value;
tref=INT.ref;
break;
case OP_pushuint:
v=e.value;
tref=UINT.ref;
break;
case OP_pushstring:
v=e.value;
tref=STRING.ref.nonnull();
break;
case OP_pushnan:
case OP_pushdouble:
v=e.value;
tref=NUMBER.ref;
break;
case OP_pushnamespace:
v=e.value;
tref=NAMESPACE.ref.nonnull();
break;
case OP_jump:
flowWork.add(e.succ[0]);
return;
case OP_lookupswitch:
{
Object v1=values.get(e.args[0]);
if (v1 == BOTTOM) for (Edge s : e.succ) flowWork.add(s);
 else {
int i=intValue(v1);
if (i < 0 || i >= e.succ.length - 1) i=e.succ.length - 1;
flowWork.add(e.succ[i]);
}
return;
}
case OP_iffalse:
case OP_iftrue:
{
Object v1=values.get(e.args[0]);
if (v1 == BOTTOM) {
flowWork.add(e.succ[0]);
flowWork.add(e.succ[1]);
}
 else if (e.op == OP_iffalse) flowWork.add(e.succ[booleanValue(v1) ? 0 : 1]);
 else if (e.op == OP_iftrue) flowWork.add(e.succ[booleanValue(v1) ? 1 : 0]);
return;
}
case OP_pushscope:
case OP_pushwith:
v=values.get(e.args[0]);
tref=types.get(e.args[0]).nonnull();
break;
case OP_convert_b:
tref=BOOLEAN.ref;
v=eval_convert_b(values.get(e.args[0]));
break;
case OP_not:
{
tref=BOOLEAN.ref;
Object v0=values.get(e.args[0]);
if (v0 != BOTTOM) v=booleanValue(v0) ? FALSE : TRUE;
break;
}
case OP_deleteproperty:
case OP_deldescendants:
case OP_hasnext:
case OP_hasnext2:
case OP_equals:
case OP_strictequals:
case OP_in:
case OP_istype:
case OP_istypelate:
case OP_instanceof:
tref=BOOLEAN.ref;
break;
case OP_lessthan:
case OP_lessequals:
case OP_greaterthan:
case OP_greaterequals:
{
tref=BOOLEAN.ref;
Object v0=values.get(e.args[0]);
Object v1=values.get(e.args[1]);
if (v0.equals(NAN) || v0 == UNDEFINED || v1.equals(NAN) || v1 == UNDEFINED) v=FALSE;
 else if (v0 != BOTTOM && v1 != BOTTOM) v=e.op == OP_lessthan ? lessthan(v0,v1) : e.op == OP_lessequals ? !lessthan(v1,v0) : e.op == OP_greaterthan ? lessthan(v1,v0) : !lessthan(v0,v1);
break;
}
case OP_convert_s:
tref=STRING.ref.nonnull();
v=eval_convert_s(values.get(e.args[0]));
break;
case OP_coerce_s:
{
tref=eval_coerce_s(types.get(e.args[0]));
v=eval_coerce_s(values.get(e.args[0]));
break;
}
case OP_coerce_o:
{
Typeref t0=types.get(e.args[0]);
tref=eval_coerce_o(t0);
v=eval_coerce_o(values.get(e.args[0]),t0.t);
break;
}
case OP_coerce_a:
{
if (!(types.get(e.args[0]).equals(VOID.ref))) {
v=values.get(e.args[0]);
tref=types.get(e.args[0]);
}
 else {
tref=ANY.ref;
}
break;
}
case OP_coerce:
{
Typeref t0=types.get(e.args[0]);
Object v0=values.get(e.args[0]);
Type t=namedTypes.get(e.ref);
assert(t != null);
if (t == STRING) {
tref=eval_coerce_s(t0);
v=eval_coerce_s(v0);
}
 else if (t == OBJECT) {
tref=eval_coerce_o(t0);
v=eval_coerce_o(v0,t0.t);
}
 else if (t == INT) {
tref=t.ref;
v=eval_convert_i(v0);
}
 else if (t == UINT) {
tref=t.ref;
v=eval_convert_u(v0);
}
 else if (t == NUMBER) {
tref=t.ref;
v=eval_convert_d(v0);
}
 else if (t == BOOLEAN) {
tref=t.ref;
v=eval_convert_b(v0);
}
 else {
if (istype(t0.t,t)) {
tref=t0;
v=v0;
}
 else if (t0.t == NULL || t0.t == VOID) {
tref=NULL.ref;
}
 else {
tref=t.ref;
}
}
break;
}
case OP_astype:
tref=namedTypes.get(e.ref).ref;
break;
case OP_astypelate:
{
Typeref t1=types.get(e.args[1]);
if (t1.t.itype != null) {
if (t1.t.itype.atom || t1.t.itype.numeric) tref=OBJECT.ref;
 else tref=t1.t.itype.ref;
}
 else {
tref=ANY.ref;
}
break;
}
case OP_typeof:
{
Type t0=type(types,e.args[0]);
if (t0 == INT || t0 == UINT || t0 == NUMBER) v=""String_Node_Str"";
 else if (t0 == STRING) v=""String_Node_Str"";
 else if (istype(t0,XML) || istype(t0,XMLLIST)) v=""String_Node_Str"";
 else if (t0 == VOID) v=""String_Node_Str"";
 else if (t0 == BOOLEAN) v=""String_Node_Str"";
 else if (istype(t0,FUNCTION)) v=""String_Node_Str"";
 else if (t0 != OBJECT && istype(t0,OBJECT)) v=""String_Node_Str"";
tref=STRING.ref.nonnull();
break;
}
case OP_add:
{
Expr a0=e.args[0];
Expr a1=e.args[1];
Typeref t0=types.get(a0);
Typeref t1=types.get(a1);
Object v0=values.get(a0);
Object v1=values.get(a1);
if (t0.t == STRING && !t0.nullable || t1.t == STRING && !t1.nullable) {
tref=STRING.ref.nonnull();
if (v0 != BOTTOM && v1 != BOTTOM) v=stringValue(v0) + stringValue(v1);
}
 else if (t0.t.numeric && t1.t.numeric) {
tref=NUMBER.ref;
if (v0 instanceof Number && v1 instanceof Number) v=doubleValue(v0) + doubleValue(v1);
}
 else {
tref=OBJECT.ref.nonnull();
}
break;
}
case OP_divide:
{
tref=NUMBER.ref;
Object v0=values.get(e.args[0]);
Object v1=values.get(e.args[1]);
if (v0 instanceof Number && v1 instanceof Number) v=doubleValue(v0) / doubleValue(v1);
break;
}
case OP_subtract:
case OP_multiply:
case OP_modulo:
case OP_negate:
case OP_increment:
case OP_decrement:
tref=NUMBER.ref;
break;
case OP_convert_d:
tref=NUMBER.ref;
v=eval_convert_d(values.get(e.args[0]));
break;
case OP_convert_i:
tref=INT.ref;
v=eval_convert_i(values.get(e.args[0]));
break;
case OP_convert_u:
tref=UINT.ref;
v=eval_convert_u(values.get(e.args[0]));
break;
case OP_bitor:
{
tref=INT.ref;
Object v0=values.get(e.args[0]);
Object v1=values.get(e.args[1]);
if (v0 instanceof Number && v1 instanceof Number) v=intValue(v0) | intValue(v1);
break;
}
case OP_bitand:
{
tref=INT.ref;
Object v0=values.get(e.args[0]);
Object v1=values.get(e.args[1]);
if (v0 instanceof Number && v1 instanceof Number) {
v=intValue(v0) & intValue(v1);
}
break;
}
case OP_bitnot:
case OP_add_i:
case OP_subtract_i:
case OP_multiply_i:
case OP_negate_i:
case OP_bitxor:
case OP_lshift:
case OP_rshift:
case OP_hasnext2_i:
case OP_increment_i:
case OP_decrement_i:
tref=INT.ref;
break;
case OP_urshift:
tref=UINT.ref;
break;
case OP_setslot:
case OP_setproperty:
case OP_setsuper:
case OP_initproperty:
case OP_callpropvoid:
case OP_constructsuper:
case OP_callsupervoid:
case OP_returnvoid:
case OP_returnvalue:
case OP_throw:
case OP_popscope:
case OP_debug:
case OP_debugline:
case OP_debugfile:
case OP_bkpt:
case OP_bkptline:
case OP_checkfilter:
return;
}
}
assert(tref != null && tref.t != null);
if (tref.t == VOID) v=UNDEFINED;
 else if (tref.t == NULL) v=NULL;
if (v != null && !v.equals(values.get(e))) {
values.put(e,v);
ssaWork.addAll(uses.get(e));
}
if (!tref.equals(types.get(e))) {
types.put(e,tref);
ssaWork.addAll(uses.get(e));
}
}",0.994882748186713
45379,"Name readName(Reader p){
  int kind=p.readU8();
switch (kind) {
default :
    throw new RuntimeException(""String_Node_Str"" + kind);
case CONSTANT_TypeName:
{
    int index=p.readU30();
    int count=p.readU30();
    assert(count == 1);
    int typeparm=p.readU30();
    Name mn=this.names[index];
    return new Name(kind,mn.name,mn.nsset,typeparm);
  }
case CONSTANT_Qname:
case CONSTANT_QnameA:
return new Name(kind,namespaces[p.readU30()],strings[p.readU30()]);
case CONSTANT_Multiname:
case CONSTANT_MultinameA:
return new Name(kind,strings[p.readU30()],nssets[p.readU30()]);
case CONSTANT_RTQname:
case CONSTANT_RTQnameA:
return new Name(kind,uniqueNs(),strings[p.readU30()]);
case CONSTANT_MultinameL:
case CONSTANT_MultinameLA:
return new Name(kind,unique(),nssets[p.readU30()]);
case CONSTANT_RTQnameL:
case CONSTANT_RTQnameLA:
return new Name(kind);
}
}","Name readName(Reader p){
  int kind=p.readU8();
switch (kind) {
default :
    throw new RuntimeException(""String_Node_Str"" + kind);
case CONSTANT_TypeName:
{
    int index=p.readU30();
    int count=p.readU30();
    assert(count == 1);
    int typeparm=p.readU30();
    Name mn=this.names[index];
    Name type_param=this.names[typeparm];
    return new Name(kind,mn.name,mn.nsset,type_param.name);
  }
case CONSTANT_Qname:
case CONSTANT_QnameA:
return new Name(kind,namespaces[p.readU30()],strings[p.readU30()]);
case CONSTANT_Multiname:
case CONSTANT_MultinameA:
return new Name(kind,strings[p.readU30()],nssets[p.readU30()]);
case CONSTANT_RTQname:
case CONSTANT_RTQnameA:
return new Name(kind,uniqueNs(),strings[p.readU30()]);
case CONSTANT_MultinameL:
case CONSTANT_MultinameLA:
return new Name(kind,unique(),nssets[p.readU30()]);
case CONSTANT_RTQnameL:
case CONSTANT_RTQnameLA:
return new Name(kind);
}
}",0.9678510998307952
45380,"byte[] emitAbc(Abc abc) throws IOException {
  AbcWriter w=new AbcWriter();
  w.writeU16(16);
  w.writeU16(46);
  int pos=w.size();
  w.writeU30(abc.intPool.size());
  for (  int x : abc.intPool.values)   w.writeU30(x);
  verboseStatus(""String_Node_Str"" + abc.intPool.size() + ""String_Node_Str""+ (w.size() - pos));
  pos=w.size();
  w.writeU30(abc.uintPool.size());
  for (  long x : abc.uintPool.values)   w.writeU30((int)x);
  verboseStatus(""String_Node_Str"" + abc.uintPool.size() + ""String_Node_Str""+ (w.size() - pos));
  pos=w.size();
  verboseStatus(""String_Node_Str"" + abc.doublePool.size());
  w.writeU30(abc.doublePool.size());
  for (  double x : abc.doublePool.values)   w.write64(Double.doubleToLongBits(x));
  verboseStatus(""String_Node_Str"" + abc.doublePool.size() + ""String_Node_Str""+ (w.size() - pos));
  pos=w.size();
  w.writeU30(abc.stringPool.size());
  for (  String s : abc.stringPool.values) {
    w.writeU30(s.length());
    w.write(s.getBytes(""String_Node_Str""));
  }
  verboseStatus(""String_Node_Str"" + abc.stringPool.size() + ""String_Node_Str""+ (w.size() - pos));
  pos=w.size();
  w.writeU30(abc.nsPool.size());
  for (  Namespace ns : abc.nsPool.values)   emitNamespace(abc,w,ns);
  verboseStatus(""String_Node_Str"" + abc.nsPool.size() + ""String_Node_Str""+ (w.size() - pos));
  pos=w.size();
  w.writeU30(abc.nssetPool.size());
  for (  Nsset nsset : abc.nssetPool.values) {
    w.writeU30(nsset.length);
    for (    Namespace ns : nsset)     w.writeU30(abc.nsPool.id(ns));
  }
  verboseStatus(""String_Node_Str"" + abc.nssetPool.size() + ""String_Node_Str""+ (w.size() - pos));
  pos=w.size();
  w.writeU30(abc.namePool.size());
  for (  Name n : abc.namePool.values) {
    w.write(n.kind);
switch (n.kind) {
case CONSTANT_TypeName:
      throw new RuntimeException(""String_Node_Str"");
case CONSTANT_Qname:
case CONSTANT_QnameA:
    w.writeU30(abc.nsPool.id(n.nsset(0)));
  w.writeU30(abc.stringPool.id(n.name));
break;
case CONSTANT_Multiname:
case CONSTANT_MultinameA:
w.writeU30(abc.stringPool.id(n.name));
w.writeU30(abc.nssetPool.id(n.nsset));
break;
case CONSTANT_RTQname:
case CONSTANT_RTQnameA:
w.writeU30(abc.stringPool.id(n.name));
break;
case CONSTANT_MultinameL:
case CONSTANT_MultinameLA:
w.writeU30(abc.nssetPool.id(n.nsset));
break;
case CONSTANT_RTQnameL:
case CONSTANT_RTQnameLA:
break;
default :
assert(false);
}
}
verboseStatus(""String_Node_Str"" + abc.namePool.size() + ""String_Node_Str""+ (w.size() - pos));
pos=w.size();
w.writeU30(abc.methodPool2.size());
int method_id=0;
for (Method m : abc.methodPool1.values) emitMethod(abc,w,method_id++,m);
for (Method m : abc.methodPool2.values) emitMethod(abc,w,method_id++,m);
w.writeU30(abc.metaPool.size());
for (Metadata md : abc.metaPool.values) {
w.writeU30(abc.stringPool.id(md.name));
w.writeU30(md.attrs.length);
for (Attr a : md.attrs) w.writeU30(abc.stringPool.id(a.name));
for (Attr a : md.attrs) w.writeU30(abc.stringPool.id(a.value));
}
w.writeU30(abc.classes.size());
for (Type c : abc.classes) {
Type t=c.itype;
w.writeU30(abc.namePool.id(t.name));
w.writeU30(abc.typeRef(t.base));
w.write(t.flags);
if (t.hasProtectedNs()) w.writeU30(abc.nsPool.id(t.protectedNs));
w.writeU30(t.interfaces.length);
for (Type i : t.interfaces) w.writeU30(abc.typeRef(i));
w.writeU30(abc.methodId(t.init));
emitTraits(w,abc,t);
}
for (Type c : abc.classes) {
w.writeU30(abc.methodId(c.init));
emitTraits(w,abc,c);
}
w.writeU30(abc.scripts.size());
for (Type s : abc.scripts) {
w.writeU30(abc.methodId(s.init));
emitTraits(w,abc,s);
}
w.writeU30(abc.bodyCount);
emitBodies(abc,w,abc.methodPool1);
emitBodies(abc,w,abc.methodPool2);
return w.toByteArray();
}","byte[] emitAbc(Abc abc) throws IOException {
  AbcWriter w=new AbcWriter();
  w.writeU16(16);
  w.writeU16(46);
  int pos=w.size();
  w.writeU30(abc.intPool.size());
  for (  int x : abc.intPool.values)   w.writeU30(x);
  verboseStatus(""String_Node_Str"" + abc.intPool.size() + ""String_Node_Str""+ (w.size() - pos));
  pos=w.size();
  w.writeU30(abc.uintPool.size());
  for (  long x : abc.uintPool.values)   w.writeU30((int)x);
  verboseStatus(""String_Node_Str"" + abc.uintPool.size() + ""String_Node_Str""+ (w.size() - pos));
  pos=w.size();
  verboseStatus(""String_Node_Str"" + abc.doublePool.size());
  w.writeU30(abc.doublePool.size());
  for (  double x : abc.doublePool.values)   w.write64(Double.doubleToLongBits(x));
  verboseStatus(""String_Node_Str"" + abc.doublePool.size() + ""String_Node_Str""+ (w.size() - pos));
  pos=w.size();
  w.writeU30(abc.stringPool.size());
  for (  String s : abc.stringPool.values) {
    w.writeU30(s.length());
    w.write(s.getBytes(""String_Node_Str""));
  }
  verboseStatus(""String_Node_Str"" + abc.stringPool.size() + ""String_Node_Str""+ (w.size() - pos));
  pos=w.size();
  w.writeU30(abc.nsPool.size());
  for (  Namespace ns : abc.nsPool.values)   emitNamespace(abc,w,ns);
  verboseStatus(""String_Node_Str"" + abc.nsPool.size() + ""String_Node_Str""+ (w.size() - pos));
  pos=w.size();
  w.writeU30(abc.nssetPool.size());
  for (  Nsset nsset : abc.nssetPool.values) {
    w.writeU30(nsset.length);
    for (    Namespace ns : nsset)     w.writeU30(abc.nsPool.id(ns));
  }
  verboseStatus(""String_Node_Str"" + abc.nssetPool.size() + ""String_Node_Str""+ (w.size() - pos));
  pos=w.size();
  w.writeU30(abc.namePool.size());
  for (  Name n : abc.namePool.values) {
    w.write(n.kind);
switch (n.kind) {
case CONSTANT_TypeName:
      throw new IllegalArgumentException(""String_Node_Str"");
case CONSTANT_Qname:
case CONSTANT_QnameA:
    w.writeU30(abc.nsPool.id(n.nsset(0)));
  w.writeU30(abc.stringPool.id(n.name));
break;
case CONSTANT_Multiname:
case CONSTANT_MultinameA:
w.writeU30(abc.stringPool.id(n.name));
w.writeU30(abc.nssetPool.id(n.nsset));
break;
case CONSTANT_RTQname:
case CONSTANT_RTQnameA:
w.writeU30(abc.stringPool.id(n.name));
break;
case CONSTANT_MultinameL:
case CONSTANT_MultinameLA:
w.writeU30(abc.nssetPool.id(n.nsset));
break;
case CONSTANT_RTQnameL:
case CONSTANT_RTQnameLA:
break;
default :
assert(false);
}
}
verboseStatus(""String_Node_Str"" + abc.namePool.size() + ""String_Node_Str""+ (w.size() - pos));
pos=w.size();
w.writeU30(abc.methodPool2.size());
int method_id=0;
for (Method m : abc.methodPool1.values) emitMethod(abc,w,method_id++,m);
for (Method m : abc.methodPool2.values) emitMethod(abc,w,method_id++,m);
w.writeU30(abc.metaPool.size());
for (Metadata md : abc.metaPool.values) {
w.writeU30(abc.stringPool.id(md.name));
w.writeU30(md.attrs.length);
for (Attr a : md.attrs) w.writeU30(abc.stringPool.id(a.name));
for (Attr a : md.attrs) w.writeU30(abc.stringPool.id(a.value));
}
w.writeU30(abc.classes.size());
for (Type c : abc.classes) {
Type t=c.itype;
w.writeU30(abc.namePool.id(t.name));
w.writeU30(abc.typeRef(t.base));
w.write(t.flags);
if (t.hasProtectedNs()) w.writeU30(abc.nsPool.id(t.protectedNs));
w.writeU30(t.interfaces.length);
for (Type i : t.interfaces) w.writeU30(abc.typeRef(i));
w.writeU30(abc.methodId(t.init));
emitTraits(w,abc,t);
}
for (Type c : abc.classes) {
w.writeU30(abc.methodId(c.init));
emitTraits(w,abc,c);
}
w.writeU30(abc.scripts.size());
for (Type s : abc.scripts) {
w.writeU30(abc.methodId(s.init));
emitTraits(w,abc,s);
}
w.writeU30(abc.bodyCount);
emitBodies(abc,w,abc.methodPool1);
emitBodies(abc,w,abc.methodPool2);
return w.toByteArray();
}",0.9972565157750344
45381,"void emitCode(AbcWriter out,Abc abc,Method m) throws IOException {
  int emit_code_trace_phase=pushTracePhase(""String_Node_Str"");
  addTraceAttr(""String_Node_Str"",m);
  Map<Block,Integer> padding=new HashMap<Block,Integer>();
  Deque<Block> code=schedule(m.entry.to);
  Map<Block,AbcWriter> writers=new HashMap<Block,AbcWriter>();
  BitSet labels=new BitSet();
  BitSet done=new BitSet();
  for (  Block b : code) {
    done.set(b.id);
    for (    Edge e : b.succ())     if (done.get(e.to.id)) {
      labels.set(e.to.id);
    }
  }
  Map<Block,Integer> pos=new HashMap<Block,Integer>();
  Map<Block,Integer> blockends=new HashMap<Block,Integer>();
  int code_len=0;
  Deque<Block> work=new ArrayDeque<Block>(code);
  while (!work.isEmpty()) {
    Block b=work.removeFirst();
    int block_trace_phase=pushTracePhase(""String_Node_Str"");
    addTraceAttr(""String_Node_Str"",b);
    addTraceAttr(""String_Node_Str"",code_len);
    pos.put(b,code_len);
    AbcWriter w=new AbcWriter();
    writers.put(b,w);
    if (labels.get(b.id)) {
      addTraceAttr(""String_Node_Str"");
      w.write(OP_label);
    }
    emitBlock(w,b,abc);
    code_len+=w.size();
    Expr last=b.last();
    if (last.succ.length == 0) {
      w.write(last.op);
      code_len++;
      traceEntry(""String_Node_Str"",""String_Node_Str"",opNames[last.op]);
    }
 else     if (isJump(last)) {
      traceEntry(""String_Node_Str"",""String_Node_Str"",last.succ[0].to);
      if (work.isEmpty() || last.succ[0].to != work.peekFirst()) {
        code_len+=4;
        padding.put(b,4);
        addTraceAttr(""String_Node_Str"",false);
      }
 else       addTraceAttr(""String_Node_Str"",true);
    }
 else     if (isBranch(last)) {
      if (work.isEmpty() || last.succ[0].to != work.peekFirst()) {
        code_len+=8;
        padding.put(b,8);
      }
 else {
        code_len+=4;
        padding.put(b,4);
      }
    }
 else {
      assert(last.op == OP_lookupswitch);
      int switch_size=1 + out.sizeOfU30(last.succ.length) + 3 * last.succ.length;
      code_len+=switch_size;
      padding.put(b,switch_size);
    }
    blockends.put(b,code_len);
    unwindTrace(block_trace_phase);
  }
  out.writeU30(code_len);
  int code_start=out.size();
  traceEntry(""String_Node_Str"",""String_Node_Str"",code_start);
  for (  Block b : code) {
    int write_block_trace_phase=pushTracePhase(""String_Node_Str"");
    addTraceAttr(""String_Node_Str"",b);
    addTraceAttr(""String_Node_Str"",b.postorder);
    addTraceAttr(""String_Node_Str"",out.size());
    addTraceAttr(""String_Node_Str"",out.size() - code_start);
    writers.get(b).writeTo(out);
    if (padding.containsKey(b)) {
      Expr last=b.last();
      int trace_phase_jump=pushTracePhase(""String_Node_Str"");
      addTraceAttr(last);
      addTraceAttr(""String_Node_Str"",opNames[last.op]);
      addTraceAttr(""String_Node_Str"",padding.get(b));
      if (isBranch(last)) {
        addTraceAttr(""String_Node_Str"");
        emitBranch(out,last.op,last.succ[1].to,code_start,pos);
        padding.put(b,padding.get(b) - 4);
      }
      if (padding.get(b) == 4) {
        traceEntry(""String_Node_Str"");
        addTraceAttr(""String_Node_Str"",last.succ[0].id);
        emitBranch(out,OP_jump,last.succ[0].to,code_start,pos);
      }
      if (last.op == OP_lookupswitch) {
        emitLookupswitch(out,last,code_start,pos);
      }
      unwindTrace(trace_phase_jump);
    }
    unwindTrace(write_block_trace_phase);
  }
  out.writeU30(m.handlers.length);
  for (  Handler h : m.handlers) {
    int from=code_len;
    int to=0;
    for (    Block b : code) {
      for (      Edge x : b.xsucc) {
        if (x.to == h.entry) {
          if (pos.get(b) < from)           from=pos.get(b);
          if (blockends.get(b) > to)           to=blockends.get(b);
        }
      }
    }
    out.writeU30(from);
    out.writeU30(to);
    int off=pos.get(h.entry);
    verboseStatus(""String_Node_Str"" + h.entry + ""String_Node_Str""+ from+ ""String_Node_Str""+ to+ ""String_Node_Str""+ off);
    out.writeU30(off);
    out.writeU30(abc.typeRef(h.type));
    if (h.name != null)     out.writeU30(abc.namePool.id(h.name));
 else     out.writeU30(0);
  }
  unwindTrace(emit_code_trace_phase);
}","void emitCode(AbcWriter out,Abc abc,Method m) throws IOException {
  int emit_code_trace_phase=pushTracePhase(""String_Node_Str"");
  addTraceAttr(""String_Node_Str"",m);
  Map<Block,Integer> padding=new HashMap<Block,Integer>();
  Deque<Block> code=schedule(m.entry.to);
  Map<Block,AbcWriter> writers=new HashMap<Block,AbcWriter>();
  BitSet labels=new BitSet();
  BitSet done=new BitSet();
  for (  Block b : code) {
    done.set(b.id);
    for (    Edge e : b.succ())     if (done.get(e.to.id)) {
      labels.set(e.to.id);
    }
  }
  Map<Block,Integer> pos=new HashMap<Block,Integer>();
  Map<Block,Integer> blockends=new HashMap<Block,Integer>();
  int code_len=0;
  Deque<Block> work=new ArrayDeque<Block>(code);
  while (!work.isEmpty()) {
    Block b=work.removeFirst();
    int block_trace_phase=pushTracePhase(""String_Node_Str"");
    addTraceAttr(""String_Node_Str"",b);
    addTraceAttr(""String_Node_Str"",code_len);
    pos.put(b,code_len);
    AbcWriter w=new AbcWriter();
    writers.put(b,w);
    if (labels.get(b.id)) {
      addTraceAttr(""String_Node_Str"");
      w.write(OP_label);
    }
    emitBlock(w,b,abc);
    code_len+=w.size();
    Expr last=b.last();
    if (last.succ.length == 0) {
      w.write(last.op);
      code_len++;
      traceEntry(""String_Node_Str"",""String_Node_Str"",opNames[last.op]);
    }
 else     if (isJump(last)) {
      traceEntry(""String_Node_Str"",""String_Node_Str"",last.succ[0].to);
      if (work.isEmpty() || last.succ[0].to != work.peekFirst()) {
        code_len+=4;
        padding.put(b,4);
        addTraceAttr(""String_Node_Str"",false);
      }
 else       addTraceAttr(""String_Node_Str"",true);
    }
 else     if (isBranch(last)) {
      if (work.isEmpty() || last.succ[0].to != work.peekFirst()) {
        code_len+=8;
        padding.put(b,8);
      }
 else {
        code_len+=4;
        padding.put(b,4);
      }
    }
 else {
      assert(last.op == OP_lookupswitch);
      int switch_size=1 + out.sizeOfU30(last.succ.length) + 3 * last.succ.length;
      code_len+=switch_size;
      padding.put(b,switch_size);
    }
    blockends.put(b,code_len);
    unwindTrace(block_trace_phase);
  }
  out.writeU30(code_len);
  int code_start=out.size();
  traceEntry(""String_Node_Str"",""String_Node_Str"",code_start);
  for (  Block b : code) {
    int write_block_trace_phase=pushTracePhase(""String_Node_Str"");
    addTraceAttr(""String_Node_Str"",b);
    addTraceAttr(""String_Node_Str"",b.postorder);
    addTraceAttr(""String_Node_Str"",out.size());
    addTraceAttr(""String_Node_Str"",out.size() - code_start);
    writers.get(b).writeTo(out);
    if (padding.containsKey(b)) {
      Expr last=b.last();
      int trace_phase_jump=pushTracePhase(""String_Node_Str"");
      addTraceAttr(last);
      addTraceAttr(""String_Node_Str"",opNames[last.op]);
      addTraceAttr(""String_Node_Str"",padding.get(b));
      if (isBranch(last)) {
        addTraceAttr(""String_Node_Str"");
        emitBranch(out,last.op,last.succ[1].to,code_start,pos);
        padding.put(b,padding.get(b) - 4);
      }
      if (padding.get(b) == 4) {
        traceEntry(""String_Node_Str"");
        addTraceAttr(""String_Node_Str"",last.succ[0].id);
        emitBranch(out,OP_jump,last.succ[0].to,code_start,pos);
      }
      if (last.op == OP_lookupswitch) {
        emitLookupswitch(out,last,code_start,pos);
      }
      unwindTrace(trace_phase_jump);
    }
    unwindTrace(write_block_trace_phase);
  }
  out.writeU30(m.handlers.length);
  for (  Handler h : m.handlers) {
    int from=code_len;
    int to=0;
    for (    Block b : code) {
      for (      Edge x : b.xsucc) {
        if (x.to == h.entry) {
          if (pos.get(b) < from)           from=pos.get(b);
          if (blockends.get(b) > to)           to=blockends.get(b);
        }
      }
    }
    out.writeU30(from);
    out.writeU30(to);
    int off;
    if (h.entry != null)     off=pos.get(h.entry);
 else {
      off=0;
    }
    verboseStatus(""String_Node_Str"" + h.entry + ""String_Node_Str""+ from+ ""String_Node_Str""+ to+ ""String_Node_Str""+ off);
    out.writeU30(off);
    out.writeU30(abc.typeRef(h.type));
    if (h.name != null)     out.writeU30(abc.namePool.id(h.name));
 else     out.writeU30(0);
  }
  unwindTrace(emit_code_trace_phase);
}",0.9903651718805756
45382,"private StringBuilder emitMetaDataComment(StringBuilder buf,String debugName,MetaDataNode meta,boolean isAttributeOfDefinition){
  buf.append(""String_Node_Str"");
  String tagname=meta.id;
  buf.append(""String_Node_Str"").append(tagname).append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(debugName).append(""String_Node_Str"");
  boolean has_name=false;
  if (meta.values != null) {
    for (    Value v : meta.values) {
      if (v instanceof MetaDataEvaluator.KeylessValue && has_name == false) {
        MetaDataEvaluator.KeylessValue ov=(MetaDataEvaluator.KeylessValue)v;
        buf.append(""String_Node_Str"").append(ov.obj).append(""String_Node_Str"");
        has_name=true;
        continue;
      }
      if (v instanceof MetaDataEvaluator.KeyValuePair) {
        MetaDataEvaluator.KeyValuePair kv=(MetaDataEvaluator.KeyValuePair)v;
        buf.append(kv.key).append(""String_Node_Str"").append(kv.obj).append(""String_Node_Str"");
        continue;
      }
    }
  }
 else   if (meta.id != null) {
    buf.append(""String_Node_Str"").append(meta.id).append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"");
  if (isAttributeOfDefinition == false) {
    if (values != null) {
      for (      Value v : values) {
        if (v instanceof MetaDataEvaluator.KeylessValue) {
          MetaDataEvaluator.KeylessValue ov=(MetaDataEvaluator.KeylessValue)v;
          buf.append(ov.obj);
          continue;
        }
        if (v instanceof MetaDataEvaluator.KeyValuePair) {
          MetaDataEvaluator.KeyValuePair kv=(MetaDataEvaluator.KeyValuePair)v;
          buf.append(""String_Node_Str"").append(kv.key).append(""String_Node_Str"").append(kv.obj).append(""String_Node_Str"").append(kv.key).append(""String_Node_Str"");
          continue;
        }
      }
    }
 else     if (id != null) {
      buf.append(id);
    }
  }
  buf.append(""String_Node_Str"").append(tagname).append(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  return buf;
}","private StringBuilder emitMetaDataComment(StringBuilder buf,String debugName,MetaDataNode meta,boolean isAttributeOfDefinition){
  buf.append(""String_Node_Str"");
  String tagname=meta.id;
  buf.append(""String_Node_Str"").append(tagname).append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(debugName).append(""String_Node_Str"");
  boolean has_name=false;
  if (meta.values != null) {
    if (""String_Node_Str"".equals(meta.id)) {
      boolean first=true;
      for (      Value v : meta.values) {
        if (v instanceof MetaDataEvaluator.KeylessValue) {
          MetaDataEvaluator.KeylessValue ov=(MetaDataEvaluator.KeylessValue)v;
          if (first) {
            first=false;
            buf.append(""String_Node_Str"");
          }
 else {
            buf.append(""String_Node_Str"");
          }
          buf.append(ov.obj);
        }
      }
      if (!first)       buf.append(""String_Node_Str"");
    }
 else {
      for (      Value v : meta.values) {
        if (v instanceof MetaDataEvaluator.KeylessValue && has_name == false) {
          MetaDataEvaluator.KeylessValue ov=(MetaDataEvaluator.KeylessValue)v;
          buf.append(""String_Node_Str"").append(ov.obj).append(""String_Node_Str"");
          has_name=true;
          continue;
        }
        if (v instanceof MetaDataEvaluator.KeyValuePair) {
          MetaDataEvaluator.KeyValuePair kv=(MetaDataEvaluator.KeyValuePair)v;
          buf.append(kv.key).append(""String_Node_Str"").append(kv.obj).append(""String_Node_Str"");
          continue;
        }
      }
    }
  }
 else   if (meta.id != null) {
    buf.append(""String_Node_Str"").append(meta.id).append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"");
  if (isAttributeOfDefinition == false) {
    if (values != null) {
      for (      Value v : values) {
        if (v instanceof MetaDataEvaluator.KeylessValue) {
          MetaDataEvaluator.KeylessValue ov=(MetaDataEvaluator.KeylessValue)v;
          buf.append(ov.obj);
          continue;
        }
        if (v instanceof MetaDataEvaluator.KeyValuePair) {
          MetaDataEvaluator.KeyValuePair kv=(MetaDataEvaluator.KeyValuePair)v;
          buf.append(""String_Node_Str"").append(kv.key).append(""String_Node_Str"").append(kv.obj).append(""String_Node_Str"").append(kv.key).append(""String_Node_Str"");
          continue;
        }
      }
    }
 else     if (id != null) {
      buf.append(id);
    }
  }
  buf.append(""String_Node_Str"").append(tagname).append(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  return buf;
}",0.8711547035220687
45383,"public StringBuilder emit(Context cx,StringBuilder buf){
  String tagname=""String_Node_Str"";
  StatementListNode metaData=null;
  String debug_name=""String_Node_Str"";
  if (this.def instanceof FunctionDefinitionNode) {
    FunctionDefinitionNode fd=(FunctionDefinitionNode)this.def;
    debug_name=fd.fexpr.debug_name;
    metaData=fd.metaData;
    tagname=""String_Node_Str"";
    buf.append(""String_Node_Str"");
    buf.append(fd.name.identifier.name);
    buf.append(""String_Node_Str"");
    buf.append(fd.fexpr.debug_name);
    buf.append(""String_Node_Str"");
    AttributeListNode attrs=fd.attrs;
    if (attrs != null) {
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasStatic ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasFinal ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasOverride ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
    fd.fexpr.signature.toCanonicalString(cx,buf);
    buf.append(""String_Node_Str"");
  }
  if (this.def instanceof VariableDefinitionNode) {
    VariableDefinitionNode vd=(VariableDefinitionNode)this.def;
    VariableBindingNode vb=(VariableBindingNode)(vd.list.items.get(0));
    debug_name=vb.debug_name;
    metaData=vd.metaData;
    tagname=""String_Node_Str"";
    buf.append(""String_Node_Str"");
    buf.append(tagname);
    buf.append(""String_Node_Str"");
    buf.append(vb.variable.identifier.name);
    buf.append(""String_Node_Str"");
    buf.append(vb.debug_name);
    buf.append(""String_Node_Str"");
    if (vb.typeref != null) {
      buf.append(getRefName(cx,vb.typeref));
    }
    buf.append(""String_Node_Str"");
    AttributeListNode attrs=vd.attrs;
    if (attrs != null) {
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasStatic ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
    }
    Slot s=vb.ref.getSlot(cx);
    if (s != null) {
      buf.append(""String_Node_Str"");
      buf.append(s.isConst() ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
    if (vb.initializer != null) {
      buf.append(""String_Node_Str"");
      if (vb.initializer instanceof LiteralNumberNode) {
        buf.append(((LiteralNumberNode)(vb.initializer)).value);
      }
 else       if (vb.initializer instanceof LiteralStringNode) {
        buf.append(escapeXml(((LiteralStringNode)(vb.initializer)).value));
      }
 else       if (vb.initializer instanceof LiteralNullNode) {
        buf.append(""String_Node_Str"");
      }
 else       if (vb.initializer instanceof LiteralBooleanNode) {
        buf.append((((LiteralBooleanNode)(vb.initializer)).value) ? ""String_Node_Str"" : ""String_Node_Str"");
      }
 else       if (vb.initializer instanceof MemberExpressionNode) {
        MemberExpressionNode mb=(MemberExpressionNode)(vb.initializer);
        Slot vs=(mb.ref != null ? mb.ref.getSlot(cx,GET_TOKEN) : null);
        Value v=(vs != null ? vs.getValue() : null);
        ObjectValue ov=((v instanceof ObjectValue) ? (ObjectValue)(v) : null);
        buf.append((ov != null) ? ov.getValue() : ""String_Node_Str"");
      }
 else {
        Slot vs=vb.ref.getSlot(cx,GET_TOKEN);
        Value v=(vs != null ? vs.getValue() : null);
        ObjectValue ov=((v instanceof ObjectValue) ? (ObjectValue)(v) : null);
        buf.append((ov != null) ? ov.getValue() : ""String_Node_Str"");
      }
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
  }
  if (this.def instanceof PackageDefinitionNode) {
    PackageDefinitionNode pd=(PackageDefinitionNode)(this.def);
    tagname=""String_Node_Str"";
    debug_name=""String_Node_Str"";
    metaData=null;
    buf.append(""String_Node_Str"");
    buf.append(tagname);
    buf.append(""String_Node_Str"");
    buf.append((pd.name.id != null ? pd.name.id.pkg_part : ""String_Node_Str""));
    buf.append(""String_Node_Str"");
    buf.append((pd.name.id != null ? pd.name.id.def_part : ""String_Node_Str""));
    buf.append(""String_Node_Str"");
    buf.append((pd.name.id != null ? pd.name.id.pkg_part : ""String_Node_Str""));
    buf.append(""String_Node_Str"");
    buf.append((pd.name.id != null ? pd.name.id.def_part : ""String_Node_Str""));
    buf.append(""String_Node_Str"");
  }
  if (this.def instanceof ClassDefinitionNode) {
    ClassDefinitionNode cd=(ClassDefinitionNode)this.def;
    if (cd.metaData.items.at(0) != this)     return buf;
    debug_name=cd.debug_name;
    metaData=cd.metaData;
    InterfaceDefinitionNode id=null;
    if (this.def instanceof InterfaceDefinitionNode) {
      tagname=""String_Node_Str"";
      id=(InterfaceDefinitionNode)(this.def);
    }
 else {
      tagname=""String_Node_Str"";
    }
    buf.append(""String_Node_Str"");
    buf.append(tagname);
    buf.append(""String_Node_Str"");
    buf.append(cd.name.name);
    buf.append(""String_Node_Str"");
    buf.append(cd.debug_name);
    if (cd.cx.input != null && cd.cx.input.origin.length() != 0) {
      buf.append(""String_Node_Str"");
      buf.append(cd.cx.input.origin);
    }
    buf.append(""String_Node_Str"");
    buf.append(cd.cframe.builder.classname.ns.name);
    buf.append(""String_Node_Str"");
    buf.append(getAccessKindFromNS(cd.cframe.builder.classname.ns));
    if (id != null) {
      buf.append(""String_Node_Str"");
      if (id.interfaces != null) {
        Value firstV=id.interfaces.values.get(0);
        for (        Value v : id.interfaces.values) {
          ReferenceValue rv=(ReferenceValue)v;
          if (v != firstV) {
            buf.append(""String_Node_Str"");
          }
          Slot s=rv.getSlot(cx,GET_TOKEN);
          buf.append((s == null || s.getDebugName().length() == 0) ? rv.name : s.getDebugName());
        }
      }
 else {
        buf.append(""String_Node_Str"");
      }
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
      if (cd.baseref != null) {
        Slot s=cd.baseref.getSlot(cx,GET_TOKEN);
        buf.append((s == null || s.getDebugName().length() == 0) ? ""String_Node_Str"" : s.getDebugName());
      }
 else {
        buf.append(""String_Node_Str"");
      }
      buf.append(""String_Node_Str"");
      if (cd.interfaces != null) {
        buf.append(""String_Node_Str"");
        Value firstV=cd.interfaces.values.get(0);
        for (        Value v : cd.interfaces.values) {
          ReferenceValue rv=(ReferenceValue)v;
          if (v != firstV) {
            buf.append(""String_Node_Str"");
          }
          Slot s=rv.getSlot(cx,GET_TOKEN);
          buf.append((s == null || s.getDebugName().length() == 0) ? rv.name : s.getDebugName());
        }
        buf.append(""String_Node_Str"");
      }
    }
    AttributeListNode attrs=cd.attrs;
    if (attrs != null) {
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasFinal ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasDynamic ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
  }
  if (values != null) {
    for (    Value v : values) {
      if (v instanceof MetaDataEvaluator.KeylessValue) {
        MetaDataEvaluator.KeylessValue ov=(MetaDataEvaluator.KeylessValue)v;
        buf.append(ov.obj);
        continue;
      }
      if (v instanceof MetaDataEvaluator.KeyValuePair) {
        MetaDataEvaluator.KeyValuePair kv=(MetaDataEvaluator.KeyValuePair)v;
        buf.append(""String_Node_Str"").append(kv.key).append(""String_Node_Str"").append(kv.obj).append(""String_Node_Str"").append(kv.key).append(""String_Node_Str"");
        continue;
      }
    }
  }
 else   if (id != null) {
    buf.append(id);
  }
  if (this.def != null && this.def.metaData != null) {
    int numItems=this.def.metaData.items.size();
    for (int x=0; x < numItems; x++) {
      Node md=this.def.metaData.items.at(x);
      MetaDataNode mdi=(md instanceof MetaDataNode) ? (MetaDataNode)(md) : null;
      if (mdi != null && mdi.id != null) {
        if (mdi.id.equals(""String_Node_Str"") || mdi.id.equals(""String_Node_Str"") || mdi.id.equals(""String_Node_Str"")) {
          if (x + 1 < numItems) {
            Node next=this.def.metaData.items.at(x + 1);
            DocCommentNode metaDataComment=(next instanceof DocCommentNode) ? (DocCommentNode)next : null;
            if ((metaDataComment != null) && (metaDataComment.metaData != mdi))             metaDataComment=null;
            if (metaDataComment != null) {
              metaDataComment.emitMetaDataComment(buf,debug_name,mdi,false);
              x++;
            }
 else {
              emitMetaDataComment(buf,debug_name,mdi,true);
            }
          }
 else {
            emitMetaDataComment(buf,debug_name,mdi,true);
          }
        }
 else         if (mdi.id.equals(""String_Node_Str"") || mdi.id.equals(""String_Node_Str"") || mdi.id.equals(""String_Node_Str"")|| mdi.id.equals(""String_Node_Str"")) {
          emitMetaDataComment(buf,debug_name,mdi,true);
        }
      }
    }
  }
  if (!""String_Node_Str"".equals(tagname)) {
    buf.append(""String_Node_Str"");
    buf.append(tagname);
    buf.append(""String_Node_Str"");
  }
 else {
    if (this.def instanceof NamespaceDefinitionNode) {
      NamespaceDefinitionNode nd=(NamespaceDefinitionNode)(this.def);
      if (nd != null)       buf.append(""String_Node_Str"").append(nd.debug_name).append(""String_Node_Str"");
    }
  }
  return buf;
}","public StringBuilder emit(Context cx,StringBuilder buf){
  String tagname=""String_Node_Str"";
  StatementListNode metaData=null;
  String debug_name=""String_Node_Str"";
  if (this.def instanceof FunctionDefinitionNode) {
    FunctionDefinitionNode fd=(FunctionDefinitionNode)this.def;
    debug_name=fd.fexpr.debug_name;
    metaData=fd.metaData;
    tagname=""String_Node_Str"";
    buf.append(""String_Node_Str"");
    buf.append(fd.name.identifier.name);
    buf.append(""String_Node_Str"");
    buf.append(fd.fexpr.debug_name);
    buf.append(""String_Node_Str"");
    AttributeListNode attrs=fd.attrs;
    if (attrs != null) {
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasStatic ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasFinal ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasOverride ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
    fd.fexpr.signature.toCanonicalString(cx,buf);
    buf.append(""String_Node_Str"");
  }
  if (this.def instanceof VariableDefinitionNode) {
    VariableDefinitionNode vd=(VariableDefinitionNode)this.def;
    VariableBindingNode vb=(VariableBindingNode)(vd.list.items.get(0));
    debug_name=vb.debug_name;
    metaData=vd.metaData;
    tagname=""String_Node_Str"";
    buf.append(""String_Node_Str"");
    buf.append(tagname);
    buf.append(""String_Node_Str"");
    buf.append(vb.variable.identifier.name);
    buf.append(""String_Node_Str"");
    buf.append(vb.debug_name);
    buf.append(""String_Node_Str"");
    if (vb.typeref != null) {
      buf.append(getRefName(cx,vb.typeref));
    }
    buf.append(""String_Node_Str"");
    AttributeListNode attrs=vd.attrs;
    if (attrs != null) {
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasStatic ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
    }
    Slot s=vb.ref.getSlot(cx);
    if (s != null) {
      buf.append(""String_Node_Str"");
      buf.append(s.isConst() ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
    if (vb.initializer != null) {
      buf.append(""String_Node_Str"");
      if (vb.initializer instanceof LiteralNumberNode) {
        buf.append(((LiteralNumberNode)(vb.initializer)).value);
      }
 else       if (vb.initializer instanceof LiteralStringNode) {
        buf.append(escapeXml(((LiteralStringNode)(vb.initializer)).value));
      }
 else       if (vb.initializer instanceof LiteralNullNode) {
        buf.append(""String_Node_Str"");
      }
 else       if (vb.initializer instanceof LiteralBooleanNode) {
        buf.append((((LiteralBooleanNode)(vb.initializer)).value) ? ""String_Node_Str"" : ""String_Node_Str"");
      }
 else       if (vb.initializer instanceof MemberExpressionNode) {
        MemberExpressionNode mb=(MemberExpressionNode)(vb.initializer);
        Slot vs=(mb.ref != null ? mb.ref.getSlot(cx,GET_TOKEN) : null);
        Value v=(vs != null ? vs.getValue() : null);
        ObjectValue ov=((v instanceof ObjectValue) ? (ObjectValue)(v) : null);
        buf.append((ov != null) ? ov.getValue() : ""String_Node_Str"");
      }
 else {
        Slot vs=vb.ref.getSlot(cx,GET_TOKEN);
        Value v=(vs != null ? vs.getValue() : null);
        ObjectValue ov=((v instanceof ObjectValue) ? (ObjectValue)(v) : null);
        buf.append((ov != null) ? ov.getValue() : ""String_Node_Str"");
      }
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
  }
  if (this.def instanceof PackageDefinitionNode) {
    PackageDefinitionNode pd=(PackageDefinitionNode)(this.def);
    tagname=""String_Node_Str"";
    debug_name=""String_Node_Str"";
    metaData=null;
    buf.append(""String_Node_Str"");
    buf.append(tagname);
    buf.append(""String_Node_Str"");
    buf.append((pd.name.id != null ? pd.name.id.pkg_part : ""String_Node_Str""));
    buf.append(""String_Node_Str"");
    buf.append((pd.name.id != null ? pd.name.id.def_part : ""String_Node_Str""));
    buf.append(""String_Node_Str"");
    buf.append((pd.name.id != null ? pd.name.id.pkg_part : ""String_Node_Str""));
    buf.append(""String_Node_Str"");
    buf.append((pd.name.id != null ? pd.name.id.def_part : ""String_Node_Str""));
    buf.append(""String_Node_Str"");
  }
  if (this.def instanceof ClassDefinitionNode) {
    ClassDefinitionNode cd=(ClassDefinitionNode)this.def;
    if (cd.metaData.items.at(0) != this)     return buf;
    debug_name=cd.debug_name;
    metaData=cd.metaData;
    InterfaceDefinitionNode id=null;
    if (this.def instanceof InterfaceDefinitionNode) {
      tagname=""String_Node_Str"";
      id=(InterfaceDefinitionNode)(this.def);
    }
 else {
      tagname=""String_Node_Str"";
    }
    buf.append(""String_Node_Str"");
    buf.append(tagname);
    buf.append(""String_Node_Str"");
    buf.append(cd.name.name);
    buf.append(""String_Node_Str"");
    buf.append(cd.debug_name);
    if (cd.cx.input != null && cd.cx.input.origin.length() != 0) {
      buf.append(""String_Node_Str"");
      buf.append(cd.cx.input.origin);
    }
    buf.append(""String_Node_Str"");
    buf.append(cd.cframe.builder.classname.ns.name);
    buf.append(""String_Node_Str"");
    buf.append(getAccessKindFromNS(cd.cframe.builder.classname.ns));
    if (id != null) {
      buf.append(""String_Node_Str"");
      if (id.interfaces != null) {
        Value firstV=id.interfaces.values.get(0);
        for (        Value v : id.interfaces.values) {
          ReferenceValue rv=(ReferenceValue)v;
          if (v != firstV) {
            buf.append(""String_Node_Str"");
          }
          Slot s=rv.getSlot(cx,GET_TOKEN);
          buf.append((s == null || s.getDebugName().length() == 0) ? rv.name : s.getDebugName());
        }
      }
 else {
        buf.append(""String_Node_Str"");
      }
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
      if (cd.baseref != null) {
        Slot s=cd.baseref.getSlot(cx,GET_TOKEN);
        buf.append((s == null || s.getDebugName().length() == 0) ? ""String_Node_Str"" : s.getDebugName());
      }
 else {
        buf.append(""String_Node_Str"");
      }
      buf.append(""String_Node_Str"");
      if (cd.interfaces != null) {
        buf.append(""String_Node_Str"");
        Value firstV=cd.interfaces.values.get(0);
        for (        Value v : cd.interfaces.values) {
          ReferenceValue rv=(ReferenceValue)v;
          if (v != firstV) {
            buf.append(""String_Node_Str"");
          }
          Slot s=rv.getSlot(cx,GET_TOKEN);
          buf.append((s == null || s.getDebugName().length() == 0) ? rv.name : s.getDebugName());
        }
        buf.append(""String_Node_Str"");
      }
    }
    AttributeListNode attrs=cd.attrs;
    if (attrs != null) {
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasFinal ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasDynamic ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
  }
  if (values != null) {
    for (    Value v : values) {
      if (v instanceof MetaDataEvaluator.KeylessValue) {
        MetaDataEvaluator.KeylessValue ov=(MetaDataEvaluator.KeylessValue)v;
        buf.append(ov.obj);
        continue;
      }
      if (v instanceof MetaDataEvaluator.KeyValuePair) {
        MetaDataEvaluator.KeyValuePair kv=(MetaDataEvaluator.KeyValuePair)v;
        buf.append(""String_Node_Str"").append(kv.key).append(""String_Node_Str"").append(kv.obj).append(""String_Node_Str"").append(kv.key).append(""String_Node_Str"");
        continue;
      }
    }
  }
 else   if (id != null) {
    buf.append(id);
  }
  if (this.def != null && this.def.metaData != null) {
    int numItems=this.def.metaData.items.size();
    for (int x=0; x < numItems; x++) {
      Node md=this.def.metaData.items.at(x);
      MetaDataNode mdi=(md instanceof MetaDataNode) ? (MetaDataNode)(md) : null;
      if (mdi != null && mdi.id != null) {
        if (mdi.id.equals(""String_Node_Str"") || mdi.id.equals(""String_Node_Str"") || mdi.id.equals(""String_Node_Str"")) {
          if (x + 1 < numItems) {
            Node next=this.def.metaData.items.at(x + 1);
            DocCommentNode metaDataComment=(next instanceof DocCommentNode) ? (DocCommentNode)next : null;
            if ((metaDataComment != null) && (metaDataComment.metaData != mdi))             metaDataComment=null;
            if (metaDataComment != null) {
              metaDataComment.emitMetaDataComment(buf,debug_name,mdi,false);
              x++;
            }
 else {
              emitMetaDataComment(buf,debug_name,mdi,true);
            }
          }
 else {
            emitMetaDataComment(buf,debug_name,mdi,true);
          }
        }
 else         if (mdi.id.equals(""String_Node_Str"") || mdi.id.equals(""String_Node_Str"") || mdi.id.equals(""String_Node_Str"")|| mdi.id.equals(""String_Node_Str"")|| mdi.id.equals(""String_Node_Str"")) {
          emitMetaDataComment(buf,debug_name,mdi,true);
        }
      }
    }
  }
  if (!""String_Node_Str"".equals(tagname)) {
    buf.append(""String_Node_Str"");
    buf.append(tagname);
    buf.append(""String_Node_Str"");
  }
 else {
    if (this.def instanceof NamespaceDefinitionNode) {
      NamespaceDefinitionNode nd=(NamespaceDefinitionNode)(this.def);
      if (nd != null)       buf.append(""String_Node_Str"").append(nd.debug_name).append(""String_Node_Str"");
    }
  }
  return buf;
}",0.9982201881515382
45384,"private void buildLineMap(char[] src,int max){
  int line=0;
  int pos=0;
  int[] lb=new int[max + 1];
  while (pos < max) {
    lb[line++]=pos;
    do {
      char ch=src[pos];
      if (ch == '\r' || ch == '\n') {
        if (ch == '\r' && (pos + 1) < max && src[pos + 1] == '\n')         pos+=2;
 else         ++pos;
        break;
      }
    }
 while (++pos < max);
  }
  lb[line++]=pos;
  lineMap=new int[line];
  System.arraycopy(lb,0,lineMap,0,line);
}","private void buildLineMap(String src,int max){
  int line=0;
  int pos=0;
  int[] lb=new int[max + 1];
  while (pos < max) {
    lb[line++]=pos;
    do {
      char ch=src.charAt(pos);
      if (ch == '\r' || ch == '\n') {
        if (ch == '\r' && (pos + 1) < max && src.charAt(pos + 1) == '\n')         pos+=2;
 else         ++pos;
        break;
      }
    }
 while (++pos < max);
  }
  lb[line++]=pos;
  lineMap=new int[line];
  System.arraycopy(lb,0,lineMap,0,line);
}",0.8565310492505354
45385,"public String getLineText(int srcPos){
  int i, start;
  start=getLineStartPos(srcPos);
  for (i=start; i < text.length; i++) {
    char c=text[i];
    if (c == '\n' || c == '\r' || c == 0x00 || c == 0x2028 || c == 0x2029)     break;
  }
  return String.valueOf(text,start,i - start);
}","public String getLineText(int srcPos){
  int i, start;
  start=getLineStartPos(srcPos);
  for (i=start; i < text.length(); i++) {
    char c=text.charAt(i);
    if (c == '\n' || c == '\r' || c == 0x00 || c == 0x2028 || c == 0x2029)     break;
  }
  return text.substring(start,i);
}",0.8873239436619719
45386,"/** 
 * Copies a string from index <from> to <to>, interpreting escape characters
 */
private String escapeString(char[] src,int from,int to){
  int len=1 + to - from;
  if (has_escape(src,from,to) == false) {
    return String.valueOf(src,from,len);
  }
  final StringBuilder buf=new StringBuilder(len);
  for (int i=from; i <= to; i++) {
    char c=src[i];
    if (c == '\\') {
      int c2=src[i + 1];
switch (c2) {
case '\'':
case '\""':
        continue;
case '\r':
      if (src[i + 2] == '\n') {
        i++;
      }
case '\n':
    i++;
  continue;
case '\\':
c='\\';
++i;
break;
case 'u':
{
int thisChar=0;
int y, digit;
for (y=i + 2; y < i + 6 && y < to + 1; y++) {
digit=Character.digit(src[y],16);
if (digit == -1) break;
thisChar=(thisChar << 4) + digit;
}
if (y != i + 6 || Character.isDefined((char)thisChar) == false) {
c=src[++i];
}
 else {
c=(char)thisChar;
i+=5;
}
break;
}
default :
{
if (PASS_ESCAPES_TO_BACKEND) {
c=src[++i];
break;
}
switch (c2) {
case 'b':
c='\b';
++i;
break;
case 'f':
c='\f';
++i;
break;
case 'n':
c='\n';
++i;
break;
case 'r':
c='\r';
++i;
break;
case 't':
c='\t';
++i;
break;
case 'v':
c=0xb;
++i;
break;
case 'x':
{
int d1, d2;
if (i + 4 > to || (d1=Character.digit(src[i + 2],16)) == -1 || (d2=Character.digit(src[i + 3],16)) == -1) {
++i;
c='x';
}
 else {
i+=3;
c=(char)((d1 << 4) + d2);
}
break;
}
default :
c=src[++i];
break;
}
}
}
}
buf.append(c);
}
return buf.toString();
}","/** 
 * Copies a string from index <from> to <to>, interpreting escape characters
 */
private String escapeString(String src,int from,int to){
  if (has_escape(src,from,to) == false) {
    return src.substring(from,to);
  }
  int len=to - from;
  final StringBuilder buf=new StringBuilder(len);
  for (int i=from; i < to; i++) {
    char c=src.charAt(i);
    if (c == '\\') {
      int c2=src.charAt(i + 1);
switch (c2) {
case '\'':
case '\""':
        continue;
case '\r':
      if (src.charAt(i + 2) == '\n') {
        i++;
      }
case '\n':
    i++;
  continue;
case '\\':
c='\\';
++i;
break;
case 'u':
{
int thisChar=0;
int y, digit;
for (y=i + 2; y < i + 6 && y < to + 1; y++) {
digit=Character.digit(src.charAt(y),16);
if (digit == -1) break;
thisChar=(thisChar << 4) + digit;
}
if (y != i + 6 || Character.isDefined((char)thisChar) == false) {
c=src.charAt(++i);
}
 else {
c=(char)thisChar;
i+=5;
}
break;
}
default :
{
if (PASS_ESCAPES_TO_BACKEND) {
c=src.charAt(++i);
break;
}
switch (c2) {
case 'b':
c='\b';
++i;
break;
case 'f':
c='\f';
++i;
break;
case 'n':
c='\n';
++i;
break;
case 'r':
c='\r';
++i;
break;
case 't':
c='\t';
++i;
break;
case 'v':
c=0xb;
++i;
break;
case 'x':
{
int d1, d2;
if (i + 4 > to || (d1=Character.digit(src.charAt(i + 2),16)) == -1 || (d2=Character.digit(src.charAt(i + 3),16)) == -1) {
++i;
c='x';
}
 else {
i+=3;
c=(char)((d1 << 4) + d2);
}
break;
}
default :
c=src.charAt(++i);
break;
}
}
}
}
buf.append(c);
}
return buf.toString();
}",0.9061421670117322
45387,"private CharBuffer createBuffer(InputStream in,String encoding){
}","private String createBuffer(InputStream in,String encoding){
}",0.890625
45388,"/** 
 * Advance the input cursor if advance is true.
 * @return the Unicode character class of the currentcharacter
 */
public char nextcharClass(char c,boolean advance){
  int distance=0;
  if (c == '\\' && text[textPos] == 'u') {
    int y, digit, thisChar=0;
    for (y=textPos + 1; y < textPos + 5 && y < text.length; y++) {
      digit=Character.digit(text[y],16);
      if (digit == -1)       break;
      thisChar=(thisChar << 4) + digit;
    }
    if (y == textPos + 5 && Character.isDefined((char)thisChar)) {
      c=(char)thisChar;
      distance=5;
    }
 else {
      distance=1;
    }
  }
  if (advance)   textPos+=distance;
  return javaTypeOfToCharacterClass(Character.getType(c));
}","/** 
 * Advance the input cursor if advance is true.
 * @return the Unicode character class of the currentcharacter
 */
public char nextcharClass(char c,boolean advance){
  int distance=0;
  if (c == '\\' && text.charAt(textPos) == 'u') {
    int y, digit, thisChar=0;
    for (y=textPos + 1; y < textPos + 5 && y < text.length(); y++) {
      digit=Character.digit(text.charAt(y),16);
      if (digit == -1)       break;
      thisChar=(thisChar << 4) + digit;
    }
    if (y == textPos + 5 && Character.isDefined((char)thisChar)) {
      c=(char)thisChar;
      distance=5;
    }
 else {
      distance=1;
    }
  }
  if (advance)   textPos+=distance;
  return javaTypeOfToCharacterClass(Character.getType(c));
}",0.9816124469589816
45389,"public String substringReplaceUnicodeEscapes(int begin,int end){
  int len=(end - begin) + 1;
  if (len <= 0)   return null;
  return escapeUnicode(text,begin,end);
}","public String substringReplaceUnicodeEscapes(int begin,int end){
  final int len=(end - begin);
  if (len <= 0)   return null;
  return escapeUnicode(text,begin,end);
}",0.9700598802395208
45390,"/** 
 * nextchar, advance pos
 */
public int nextchar(){
  int c;
  if (textPos >= text.length) {
    textPos=text.length + 1;
    return 0;
  }
  c=text[textPos++];
  return c;
}","/** 
 * nextchar, advance pos
 */
public int nextchar(){
  int c;
  if (textPos >= text.length()) {
    textPos=text.length() + 1;
    return 0;
  }
  c=text.charAt(textPos++);
  return c;
}",0.959349593495935
45391,"public char markCharAt(int offset){
  return text[textMarkPos - offset];
}","public char markCharAt(int offset){
  return text.charAt(textMarkPos - offset);
}",0.9290322580645162
45392,"/** 
 * Binary search for nearest newline, given a position in text, note that lines start at 1 Returns 0 if pos is low, max if high
 * @param sourcePos -- file based source position, converted to text[pos]
 * @return line map index
 */
private int getLineMapIndex(int srcPos){
  int pos=srcPos - startSourcePos;
  if (pos < 0)   return 0;
  if (lineMap == null)   buildLineMap(text,text.length);
  if (pos == cachedLastLineMapPos)   return cachedLastLineMapIndex;
  cachedLastLineMapPos=pos;
  int low=0;
  int high=lineMap.length - 1;
  while (low <= high) {
    int mid=(low + high) >> 1;
    int midPos=lineMap[mid];
    if (midPos < pos)     low=mid + 1;
 else     if (midPos > pos)     high=mid - 1;
 else {
      cachedLastLineMapIndex=mid + 1;
      return cachedLastLineMapIndex;
    }
  }
  cachedLastLineMapIndex=low;
  return cachedLastLineMapIndex;
}","/** 
 * Binary search for nearest newline, given a position in text, note that lines start at 1 Returns 0 if pos is low, max if high
 * @param sourcePos -- file based source position, converted to text[pos]
 * @return line map index
 */
private int getLineMapIndex(int srcPos){
  int pos=srcPos - startSourcePos;
  if (pos < 0)   return 0;
  if (lineMap == null)   buildLineMap(text,text.length());
  if (pos == cachedLastLineMapPos)   return cachedLastLineMapIndex;
  cachedLastLineMapPos=pos;
  int low=0;
  int high=lineMap.length - 1;
  while (low <= high) {
    int mid=(low + high) >> 1;
    int midPos=lineMap[mid];
    if (midPos < pos)     low=mid + 1;
 else     if (midPos > pos)     high=mid - 1;
 else {
      cachedLastLineMapIndex=mid + 1;
      return cachedLastLineMapIndex;
    }
  }
  cachedLastLineMapIndex=low;
  return cachedLastLineMapIndex;
}",0.9988425925925926
45393,"private boolean has_escape(char[] src,int from,int to){
  for (int i=from; i <= to; i++) {
    if (src[i] == '\\') {
      return true;
    }
  }
  return false;
}","private boolean has_escape(String src,int from,int to){
  for (int i=from; i < to; i++) {
    if (src.charAt(i) == '\\') {
      return true;
    }
  }
  return false;
}",0.933734939759036
45394,"private String escapeUnicode(char[] src,int from,int to){
  int len=1 + to - from;
  if (has_u_escape(src,from,to) == false) {
    return String.valueOf(src,from,len);
  }
  final StringBuilder buf=new StringBuilder(len);
  for (int i=from; i <= to; i++) {
    char c=src[i];
    if (c == '\\' && i < to) {
      if (src[i + 1] == 'u') {
        int thisChar=0;
        int y, digit;
        for (y=i + 2; y < i + 6 && y < to + 1; y++) {
          digit=Character.digit(src[y],16);
          if (digit == -1)           break;
          thisChar=(thisChar << 4) + digit;
        }
        if (y != i + 6 || Character.isDefined((char)thisChar) == false) {
          c=src[++i];
        }
 else {
          c=(char)thisChar;
          i+=5;
        }
      }
    }
    buf.append(c);
  }
  return buf.toString();
}","private String escapeUnicode(String src,int from,int to){
  if (has_u_escape(src,from,to) == false) {
    return src.substring(from,to);
  }
  final int len=to - from;
  final StringBuilder buf=new StringBuilder(len);
  for (int i=from; i < to; i++) {
    char c=src.charAt(i);
    if (c == '\\' && i < to) {
      if (src.charAt(i + 1) == 'u') {
        int thisChar=0;
        int y, digit;
        for (y=i + 2; y < i + 6 && y < to + 1; y++) {
          digit=Character.digit(src.charAt(y),16);
          if (digit == -1)           break;
          thisChar=(thisChar << 4) + digit;
        }
        if (y != i + 6 || Character.isDefined((char)thisChar) == false) {
          c=src.charAt(++i);
        }
 else {
          c=(char)thisChar;
          i+=5;
        }
      }
    }
    buf.append(c);
  }
  return buf.toString();
}",0.8924012158054712
45395,"private boolean has_u_escape(char[] src,int from,int to){
  for (int i=from; i <= to; i++) {
    if (src[i] == '\\' && i < to && src[i + 1] == 'u') {
      return true;
    }
  }
  return false;
}","private boolean has_u_escape(String src,int from,int to){
  for (int i=from; i < to; i++) {
    if (src.charAt(i) == '\\' && i < to && src.charAt(i + 1) == 'u') {
      return true;
    }
  }
  return false;
}",0.908641975308642
45396,"public void setPosition(int lnNum,int colPos,int pos){
  super.setPosition(lnNum,colPos,pos);
  if (emit_debug_info) {
    if (pos > 0) {
      if (debug_info.debug_linenum != lnNum) {
        debug_info.debug_linenum_dirty=true;
        debug_info.debug_linenum=lnNum;
      }
    }
 else {
      debug_info.debug_linenum=-1;
    }
  }
}","public void setPosition(int lnNum,int colPos,int pos){
  super.setPosition(lnNum,colPos,pos);
  if ((emit_debug_info) && (pos > 0) && (debug_info.debug_linenum != lnNum)) {
    debug_info.debug_linenum_dirty=true;
    debug_info.debug_linenum=lnNum;
  }
}",0.7824620573355818
45397,"protected int FinishMethod(Context cx,final String name,TypeInfo type,ObjectList<TypeInfo> types,ObjectValue activation,int needs_arguments,int scope_depth,String debug_name,boolean is_native,boolean is_interface,String[] arg_names){
  if (show_instructions) {
    code_out.println();
    code_out.print(""String_Node_Str"" + name + ""String_Node_Str""+ debug_name);
  }
  showLineNumber();
  int method_info=GetMethodInfo(name);
  ObjectList<ByteList> traits=new ObjectList<ByteList>();
  if (activation != null) {
    ObjectValue obj=activation;
    FinishTraits(obj,traits);
  }
  int flags=0;
  flags|=needs_arguments;
  flags|=activation != null ? METHOD_Activation : 0;
  int debug_name_index=ab.addUtf8Constant(bytecodeFactory.ConstantUtf8Info(emit_debug_info ? debug_name : ""String_Node_Str""));
  if (is_native) {
    flags|=METHOD_Native;
  }
  if (sets_dxns) {
    flags|=METHOD_Setsdxns;
  }
  int return_type=type != null ? addClassName(type.getName(cx)) : 0;
  IntList param_types=null;
  IntList param_values=null;
  ByteList param_kinds=null;
{
    ObjectValue obj=cx.scope();
    Slots slots=obj.slots;
    if (slots != null) {
      param_types=new IntList(slots.size());
      param_values=new IntList(slots.size());
      param_kinds=new ByteList(slots.size());
      Iterator<Slot> it=slots.iterator();
      boolean value_required=false;
      for (int i=1; it.hasNext() && i < max_params; ++i) {
        Slot slot=it.next();
        int type_index=addClassName(slot.getType().getName(cx));
        param_types.add(type_index);
        int value_index=0;
        byte value_kind=0;
        ObjectValue iv=slot.getInitializerValue();
        if (iv != null) {
          value_required=true;
          String value=iv.toString();
          NumberUsage numberUsage=iv.getNumberUsage();
          TypeValue defaultValueType=slot.getInitializerValue().type != null ? slot.getInitializerValue().type.getTypeValue() : null;
          if (defaultValueType == cx.booleanType()) {
            value_index=value.equals(""String_Node_Str"") ? CONSTANT_True : CONSTANT_False;
            value_kind=value.equals(""String_Node_Str"") ? CONSTANT_True : CONSTANT_False;
          }
 else           if (defaultValueType == cx.stringType()) {
            value_index=ab.addUtf8Constant(bytecodeFactory.ConstantUtf8Info(value));
            value_kind=CONSTANT_Utf8;
          }
 else           if (defaultValueType == cx.intType()) {
            value_index=ab.addIntConstant(bytecodeFactory.ConstantIntegerInfo(getValueOfNumberLiteral(value,new TypeValue[1],numberUsage).intValue()));
            value_kind=CONSTANT_Integer;
          }
 else           if ((defaultValueType == cx.doubleType()) || (cx.abcVersion(Features.TARGET_AVM1) && (defaultValueType == cx.uintType()))) {
            value_index=ab.addDoubleConstant(bytecodeFactory.ConstantDoubleInfo(getValueOfNumberLiteral(value,new TypeValue[1],numberUsage).doubleValue()));
            value_kind=CONSTANT_Double;
          }
 else           if (defaultValueType == cx.uintType()) {
            value_index=ab.addUintConstant(bytecodeFactory.ConstantUintInfo(getValueOfNumberLiteral(value,new TypeValue[1],numberUsage).uintValue()));
            value_kind=CONSTANT_UInteger;
          }
 else           if (cx.statics.es4_numerics && (defaultValueType == cx.decimalType())) {
            value_index=ab.addDecimalConstant(bytecodeFactory.ConstantDecimalInfo(getValueOfNumberLiteral(value,new TypeValue[1],numberUsage).decimalValue()));
            value_kind=CONSTANT_Decimal;
          }
 else           if (defaultValueType == cx.nullType()) {
            value_index=CONSTANT_Null;
            value_kind=CONSTANT_Null;
          }
 else           if (defaultValueType == cx.voidType()) {
            value_index=0;
            value_kind=0;
          }
 else           if (slot.getInitializerValue() instanceof NamespaceValue) {
            value_index=addNamespace(slot.getInitializerValue());
            value_kind=CONSTANT_Namespace;
          }
        }
        if (value_required) {
          param_values.add(value_index);
          param_kinds.add(value_kind);
        }
      }
      if (value_required) {
        flags|=METHOD_HasOptional;
      }
    }
  }
  IntList param_names=null;
  if (emit_debug_info && arg_names != null) {
    flags|=METHOD_HasParamNames;
    param_names=new IntList(arg_names.length);
    for (int x=0; x < arg_names.length; ++x) {
      param_names.add(ab.addUtf8Constant(bytecodeFactory.ConstantUtf8Info(arg_names[x])));
    }
  }
{
    bytecodeFactory.MethodInfo(ab.methods.at(method_info),max_params - 1,return_type,param_types,param_values,param_kinds,param_names,debug_name_index,flags,method_info);
  }
  if (!is_native) {
    if (!is_interface) {
      ab.addBody(bytecodeFactory.MethodBody(allocBytes(),(short)max_stack,max_locals,scope_depth,scope_depth + max_scope,ab.code.size(),ab.code,ab.exception_count,ab.exception_table,traits,method_info));
    }
  }
 else {
    String constName=debug_name.replace('.','_');
    constName=constName.replace('/','_');
    constName=constName.replace(':','_');
    constName=constName.replace('|','_');
    constName=constName.replace('$','_');
    header_out.println(""String_Node_Str"" + constName + ""String_Node_Str""+ method_info+ ""String_Node_Str"");
    if (method_info >= native_method_count)     native_method_count=method_info + 1;
  }
  cur_locals=max_locals=0;
  ab.exception_count=0;
  ab.exception_table.clear();
  return method_info;
}","protected int FinishMethod(Context cx,final String name,TypeInfo type,ObjectList<TypeInfo> types,ObjectValue activation,int needs_arguments,int scope_depth,String debug_name,boolean is_native,boolean is_interface,String[] arg_names){
  if (show_instructions) {
    code_out.println();
    code_out.print(""String_Node_Str"" + name + ""String_Node_Str""+ debug_name);
  }
  showLineNumber();
  int method_info=GetMethodInfo(name);
  ObjectList<ByteList> traits=new ObjectList<ByteList>();
  if (activation != null) {
    ObjectValue obj=activation;
    FinishTraits(obj,traits);
  }
  int flags=0;
  flags|=needs_arguments;
  flags|=activation != null ? METHOD_Activation : 0;
  int debug_name_index=ab.addUtf8Constant(bytecodeFactory.ConstantUtf8Info(emit_debug_info ? debug_name : ""String_Node_Str""));
  if (is_native) {
    flags|=METHOD_Native;
  }
  if (sets_dxns) {
    flags|=METHOD_Setsdxns;
  }
  int return_type=type != null ? addClassName(type.getName(cx)) : 0;
  IntList param_types=null;
  IntList param_values=null;
  ByteList param_kinds=null;
{
    ObjectValue obj=cx.scope();
    Slots slots=obj.slots;
    if (slots != null) {
      param_types=new IntList(slots.size());
      param_values=new IntList(slots.size());
      param_kinds=new ByteList(slots.size());
      Iterator<Slot> it=slots.iterator();
      boolean value_required=false;
      for (int i=1; it.hasNext() && i < max_params; ++i) {
        Slot slot=it.next();
        int type_index=addClassName(slot.getType().getName(cx));
        param_types.add(type_index);
        int value_index=0;
        byte value_kind=0;
        ObjectValue iv=slot.getInitializerValue();
        if (iv != null) {
          value_required=true;
          String value=iv.toString();
          NumberUsage numberUsage=iv.getNumberUsage();
          TypeValue defaultValueType=slot.getInitializerValue().type != null ? slot.getInitializerValue().type.getTypeValue() : null;
          if (defaultValueType == cx.booleanType()) {
            value_index=value.equals(""String_Node_Str"") ? CONSTANT_True : CONSTANT_False;
            value_kind=value.equals(""String_Node_Str"") ? CONSTANT_True : CONSTANT_False;
          }
 else           if (defaultValueType == cx.stringType()) {
            value_index=ab.addUtf8Constant(bytecodeFactory.ConstantUtf8Info(value));
            value_kind=CONSTANT_Utf8;
          }
 else           if (defaultValueType == cx.intType()) {
            value_index=ab.addIntConstant(bytecodeFactory.ConstantIntegerInfo(getValueOfNumberLiteral(value,new TypeValue[1],numberUsage).intValue()));
            value_kind=CONSTANT_Integer;
          }
 else           if ((defaultValueType == cx.doubleType()) || (cx.abcVersion(Features.TARGET_AVM1) && (defaultValueType == cx.uintType()))) {
            value_index=ab.addDoubleConstant(bytecodeFactory.ConstantDoubleInfo(getValueOfNumberLiteral(value,new TypeValue[1],numberUsage).doubleValue()));
            value_kind=CONSTANT_Double;
          }
 else           if (defaultValueType == cx.uintType()) {
            value_index=ab.addUintConstant(bytecodeFactory.ConstantUintInfo(getValueOfNumberLiteral(value,new TypeValue[1],numberUsage).uintValue()));
            value_kind=CONSTANT_UInteger;
          }
 else           if (cx.statics.es4_numerics && (defaultValueType == cx.decimalType())) {
            value_index=ab.addDecimalConstant(bytecodeFactory.ConstantDecimalInfo(getValueOfNumberLiteral(value,new TypeValue[1],numberUsage).decimalValue()));
            value_kind=CONSTANT_Decimal;
          }
 else           if (defaultValueType == cx.nullType()) {
            value_index=CONSTANT_Null;
            value_kind=CONSTANT_Null;
          }
 else           if (defaultValueType == cx.voidType()) {
            value_index=0;
            value_kind=0;
          }
 else           if (slot.getInitializerValue() instanceof NamespaceValue) {
            value_index=addNamespace(slot.getInitializerValue());
            value_kind=CONSTANT_Namespace;
          }
        }
        if (value_required) {
          param_values.add(value_index);
          param_kinds.add(value_kind);
        }
      }
      if (value_required) {
        flags|=METHOD_HasOptional;
      }
    }
  }
  IntList param_names=null;
  if (emit_debug_info && arg_names != null) {
    flags|=METHOD_HasParamNames;
    param_names=new IntList(arg_names.length);
    for (int x=0; x < arg_names.length; ++x) {
      param_names.add(ab.addUtf8Constant(bytecodeFactory.ConstantUtf8Info(arg_names[x])));
    }
  }
{
    bytecodeFactory.MethodInfo(ab.methods.at(method_info),max_params - 1,return_type,param_types,param_values,param_kinds,param_names,debug_name_index,flags,method_info);
  }
  if (!is_native) {
    if (!is_interface) {
      ab.addBody(bytecodeFactory.MethodBody(allocBytes(),(short)max_stack,max_locals,scope_depth,scope_depth + max_scope,ab.code.size(),ab.code,ab.exception_count,ab.exception_table,traits,method_info));
    }
  }
 else {
    String constName=debug_name.replace('.','_');
    constName=constName.replace('/','_');
    constName=constName.replace(':','_');
    constName=constName.replace('|','_');
    constName=constName.replace('$','_');
    header_out.println(""String_Node_Str"" + constName + ""String_Node_Str""+ method_info+ ""String_Node_Str"");
    if (method_info >= native_method_count)     native_method_count=method_info + 1;
  }
  cur_locals=max_locals=0;
  ab.exception_count=0;
  ab.exception_table.clear();
  clearPositionInfo();
  return method_info;
}",0.9979119382660008
45398,"public static String getRefName(Context cx,ReferenceValue ref){
  Slot s=ref.getSlot(cx,GET_TOKEN);
  if (s == null || s.getDebugName().length() == 0) {
    String name=ref.name;
    if (ref.type_params != null && s != null && s.getValue() instanceof TypeValue) {
      TypeValue t=(TypeValue)s.getValue();
      name+=""String_Node_Str"" + t.indexed_type;
    }
    return name;
  }
 else {
    return s.getDebugName();
  }
}","public static String getRefName(Context cx,ReferenceValue ref){
  Slot s=ref.getSlot(cx,GET_TOKEN);
  if (s == null || s.getDebugName().length() == 0) {
    String name=ref.name;
    if (ref.type_params != null && s != null && s.getValue() instanceof TypeValue) {
      TypeValue t=(TypeValue)s.getValue();
      name+=getIndexedTypeName(cx,t.indexed_type);
    }
    return name;
  }
 else {
    return s.getDebugName();
  }
}",0.9518213866039952
45399,"private void bindToTypeParamSlot(Context cx,ObjectValue obj,ObjectValue qualifier,Slot s){
  if (s.getValue() instanceof TypeValue) {
    TypeValue factory=(TypeValue)s.getValue();
    ObjectList<TypeValue> types=new ObjectList<TypeValue>(type_params.size());
    for (int i=0, limit=type_params.size(); i < limit; ++i) {
      ReferenceValue r=type_params.at(i);
      Slot type_slot=r.getSlot(cx);
      if (type_slot != null) {
        Value v=type_slot.getValue();
        if (v instanceof TypeValue) {
          types.add((TypeValue)v);
        }
      }
 else       if (""String_Node_Str"".equals(r.name) && r.namespaces.contains(cx.publicNamespace())) {
        types.add(cx.noType());
      }
      if (types.size() != i + 1) {
        this.slot=null;
        return;
      }
    }
    Slot slot;
    if (factory.is_parameterized) {
      ParameterizedName fullname=new ParameterizedName(qualifier,name,types);
      String name=fullname.getNamePart();
      int slot_id;
      if (!obj.hasName(cx,Tokens.GET_TOKEN,name,qualifier)) {
        slot_id=obj.builder.ImplicitVar(cx,obj,name,qualifier,cx.typeType(),-1,-1,-1);
        TypeValue cframe=null;
        if (factory.types != null && factory.types.containsKey(name)) {
          Slot instaniated=factory.types.get(name);
          cframe=(TypeValue)instaniated.getValue();
        }
 else {
          ObjectValue prot_ns=cx.getNamespace(fullname.toString(),Context.NS_PROTECTED);
          ObjectValue static_prot_ns=cx.getNamespace(fullname.toString(),Context.NS_STATIC_PROTECTED);
          cframe=new TypeValue(cx,new ClassBuilder(fullname,prot_ns,static_prot_ns),fullname,TYPE_object);
          ObjectValue iframe=new ObjectValue(cx,new InstanceBuilder(fullname),cframe);
          cframe.prototype=iframe;
          FlowAnalyzer.inheritClassSlotsStatic(cframe,iframe,cx.vectorObjType(),cx);
        }
        slot=obj.getSlot(cx,slot_id);
        slot.setValue(cframe);
        slot.setConst(true);
        slot.declaredBy=null;
        obj.builder.ImplicitCall(cx,obj,slot_id,cframe,CALL_Method,-1,-1);
        obj.builder.ImplicitConstruct(cx,obj,slot_id,cframe,CALL_Method,-1,-1);
        factory.addParameterizedTypeSlot(cx,name,slot);
        if (factory == cx.vectorType()) {
          cframe.indexed_type=types.at(0);
        }
      }
 else {
        slot_id=obj.getSlotIndex(cx,Tokens.GET_TOKEN,name,qualifier);
        slot=obj.getSlot(cx,slot_id);
      }
      bindToSlot(cx,name,obj,fullname.ns);
    }
 else {
      cx.internalError(""String_Node_Str"");
    }
  }
}","private void bindToTypeParamSlot(Context cx,ObjectValue obj,ObjectValue qualifier,Slot s){
  if (s.getValue() instanceof TypeValue) {
    TypeValue factory=(TypeValue)s.getValue();
    ObjectList<TypeValue> types=new ObjectList<TypeValue>(type_params.size());
    for (int i=0, limit=type_params.size(); i < limit; ++i) {
      ReferenceValue r=type_params.at(i);
      Slot type_slot=r.getSlot(cx);
      if (type_slot != null) {
        Value v=type_slot.getValue();
        if (v instanceof TypeValue) {
          types.add((TypeValue)v);
        }
      }
 else       if (""String_Node_Str"".equals(r.name) && r.namespaces.contains(cx.publicNamespace())) {
        types.add(cx.noType());
      }
      if (types.size() != i + 1) {
        this.slot=null;
        return;
      }
    }
    Slot slot;
    if (factory.is_parameterized) {
      ParameterizedName fullname=new ParameterizedName(qualifier,name,types);
      String name=fullname.getNamePart();
      int slot_id;
      if (!obj.hasName(cx,Tokens.GET_TOKEN,name,qualifier)) {
        slot_id=obj.builder.ImplicitVar(cx,obj,name,qualifier,cx.typeType(),-1,-1,-1);
        TypeValue cframe=null;
        if (factory.types != null && factory.types.containsKey(name)) {
          Slot instaniated=factory.types.get(name);
          cframe=(TypeValue)instaniated.getValue();
        }
 else {
          ObjectValue prot_ns=cx.getNamespace(fullname.toString(),Context.NS_PROTECTED);
          ObjectValue static_prot_ns=cx.getNamespace(fullname.toString(),Context.NS_STATIC_PROTECTED);
          cframe=new TypeValue(cx,new ClassBuilder(fullname,prot_ns,static_prot_ns),fullname,TYPE_object);
          cframe.type=cx.typeType().getDefaultTypeInfo();
          ObjectValue iframe=new ObjectValue(cx,new InstanceBuilder(fullname),cframe);
          cframe.prototype=iframe;
          FlowAnalyzer.inheritClassSlotsStatic(cframe,iframe,cx.vectorObjType(),cx);
        }
        slot=obj.getSlot(cx,slot_id);
        slot.setValue(cframe);
        slot.setConst(true);
        slot.declaredBy=null;
        obj.builder.ImplicitCall(cx,obj,slot_id,cframe,CALL_Method,-1,-1);
        obj.builder.ImplicitConstruct(cx,obj,slot_id,cframe,CALL_Method,-1,-1);
        factory.addParameterizedTypeSlot(cx,name,slot);
        if (factory == cx.vectorType()) {
          cframe.indexed_type=types.at(0);
        }
      }
 else {
        slot_id=obj.getSlotIndex(cx,Tokens.GET_TOKEN,name,qualifier);
        slot=obj.getSlot(cx,slot_id);
      }
      bindToSlot(cx,name,obj,fullname.ns);
    }
 else {
      cx.internalError(""String_Node_Str"");
    }
  }
}",0.9887334887334888
45400,"public IdentifierNode parseSimpleQualifiedIdentifier(){
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  IdentifierNode result=null;
  IdentifierNode first;
  boolean is_attr;
  if (HAS_ATTRIBUTEIDENTIFIERS && lookahead(AMPERSAND_TOKEN)) {
    match(AMPERSAND_TOKEN);
    is_attr=true;
  }
 else {
    is_attr=false;
  }
  if (is_attr && lookahead(LEFTBRACKET_TOKEN)) {
    MemberExpressionNode men=parseBrackets(null);
    GetExpressionNode gen=men.selector instanceof GetExpressionNode ? (GetExpressionNode)men.selector : null;
    result=nodeFactory.qualifiedExpression(null,gen.expr,gen.expr.pos());
  }
 else {
    first=parseQualifier();
    if (HAS_QUALIFIEDIDENTIFIERS && lookahead(DOUBLECOLON_TOKEN)) {
      match(DOUBLECOLON_TOKEN);
      MemberExpressionNode temp;
      temp=nodeFactory.memberExpression(null,nodeFactory.getExpression(first));
      if (lookahead(LEFTBRACKET_TOKEN)) {
        MemberExpressionNode men=parseBrackets(null);
        GetExpressionNode gen=men.selector instanceof GetExpressionNode ? (GetExpressionNode)men.selector : null;
        result=nodeFactory.qualifiedExpression(temp,gen.expr,gen.expr.pos());
      }
 else {
        QualifiedIdentifierNode qualid=nodeFactory.qualifiedIdentifier(temp,parsePropertyIdentifier());
        if (config_namespaces.last().contains(first.name))         qualid.is_config_name=true;
        result=qualid;
        result.setOrigTypeToken(DOUBLECOLON_TOKEN);
      }
    }
 else {
      result=first;
    }
  }
  result.setAttr(is_attr);
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  return result;
}","public IdentifierNode parseSimpleQualifiedIdentifier(){
}",0.0684273709483793
45401,"public NamespaceDefinitionNode parseConfigNamespaceDefinition(AttributeListNode first){
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  NamespaceDefinitionNode result;
  match(NAMESPACE_TOKEN);
  IdentifierNode second=parseIdentifier();
  result=nodeFactory.configNamespaceDefinition(first,second,-1);
  config_namespaces.last().add(result.name.name);
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  return result;
}","public NamespaceDefinitionNode parseConfigNamespaceDefinition(AttributeListNode first){
}",0.3314711359404096
45402,"public Node parseFieldOrConfigName(){
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  Node result;
  if (HAS_NONIDENTFIELDNAMES && lookahead(STRINGLITERAL_TOKEN)) {
    boolean[] is_single_quoted=new boolean[1];
    String enclosedText=scanner.getStringTokenText(match(STRINGLITERAL_TOKEN),is_single_quoted);
    result=nodeFactory.literalString(enclosedText,ctx.input.positionOfMark(),is_single_quoted[0]);
  }
 else   if (HAS_NONIDENTFIELDNAMES && lookahead(NUMBERLITERAL_TOKEN)) {
    result=nodeFactory.literalNumber(scanner.getTokenText(match(NUMBERLITERAL_TOKEN)),ctx.input.positionOfMark());
  }
 else   if (HAS_NONIDENTFIELDNAMES && lookahead(LEFTPAREN_TOKEN)) {
    result=parseParenExpression();
  }
 else {
    IdentifierNode ident=parseIdentifier();
    if (config_namespaces.last().contains(ident.name) && lookahead(DOUBLECOLON_TOKEN)) {
      match(DOUBLECOLON_TOKEN);
      QualifiedIdentifierNode qualid=nodeFactory.qualifiedIdentifier(ident,parseIdentifier());
      qualid.is_config_name=true;
      result=qualid;
    }
 else {
      result=ident;
    }
  }
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  return result;
}","public Node parseFieldOrConfigName(){
}",0.0643564356435643
45403,"public PackageDefinitionNode parsePackageDefinition(){
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  if (within_package)   error(kError_NestedPackage);
  within_package=true;
  PackageDefinitionNode result;
  nodeFactory.dxns=null;
  block_kind_stack.add(PACKAGE_TOKEN);
  match(PACKAGE_TOKEN);
  HashSet<String> conf_ns=new HashSet<String>(config_namespaces.last().size());
  conf_ns.addAll(config_namespaces.last());
  config_namespaces.push_back(conf_ns);
  if (lookahead(LEFTBRACE_TOKEN)) {
    result=nodeFactory.startPackage(ctx,null,null);
    Node udn=generateAs3UseDirective(ctx);
    ObjectList<UseDirectiveNode> udns=null;
    if (!ctx.statics.use_namespaces.isEmpty()) {
      udns=new ObjectList<UseDirectiveNode>();
      for (      String useName : ctx.statics.use_namespaces) {
        udns.add(nodeFactory.useDirective(null,nodeFactory.memberExpression(null,nodeFactory.getExpression(nodeFactory.identifier(useName)))));
      }
    }
    Node idn=null;
    if (ctx.statics.es4_vectors) {
      PackageIdentifiersNode pin=nodeFactory.packageIdentifiers(null,nodeFactory.identifier(__AS3__,false),true);
      pin=nodeFactory.packageIdentifiers(pin,nodeFactory.identifier(VEC,false),true);
      pin=nodeFactory.packageIdentifiers(pin,nodeFactory.identifier(VECTOR,false),true);
      idn=nodeFactory.importDirective(null,nodeFactory.packageName(pin),null,ctx);
    }
    result=nodeFactory.finishPackage(ctx,parseBlock());
    if ((ctx.dialect(10)) && result != null) {
      result.statements.items.add(1,udn);
    }
    if (ctx.statics.es4_vectors && result != null) {
      result.statements.items.add(1,idn);
    }
    if (udns != null && result != null) {
      for (      UseDirectiveNode usenode : udns) {
        result.statements.items.add(1,usenode);
      }
    }
  }
 else {
    PackageNameNode first=parsePackageName(false);
    result=nodeFactory.startPackage(ctx,null,first);
    Node udn=generateAs3UseDirective(ctx);
    ObjectList<UseDirectiveNode> udns=null;
    if (!ctx.statics.use_namespaces.isEmpty()) {
      udns=new ObjectList<UseDirectiveNode>();
      for (      String useName : ctx.statics.use_namespaces) {
        udns.add(nodeFactory.useDirective(null,nodeFactory.memberExpression(null,nodeFactory.getExpression(nodeFactory.identifier(useName)))));
      }
    }
    Node idn=null;
    if (ctx.statics.es4_vectors) {
      PackageIdentifiersNode pin=nodeFactory.packageIdentifiers(null,nodeFactory.identifier(__AS3__,false),true);
      pin=nodeFactory.packageIdentifiers(pin,nodeFactory.identifier(VEC,false),true);
      pin=nodeFactory.packageIdentifiers(pin,nodeFactory.identifier(VECTOR,false),true);
      idn=nodeFactory.importDirective(null,nodeFactory.packageName(pin),null,ctx);
    }
    result=nodeFactory.finishPackage(ctx,parseBlock());
    if ((ctx.dialect(10)) && result != null) {
      result.statements.items.add(1,udn);
    }
    if (udns != null && result != null) {
      for (      UseDirectiveNode usenode : udns) {
        result.statements.items.add(1,usenode);
      }
    }
    if (ctx.statics.es4_vectors && result != null) {
      result.statements.items.add(1,idn);
    }
  }
  block_kind_stack.removeLast();
  config_namespaces.pop_back();
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  within_package=false;
  return result;
}","public PackageDefinitionNode parsePackageDefinition(){
}",0.0329411764705882
45404,"public StringBuffer emit(Context cx,StringBuffer buf){
  String tagname=""String_Node_Str"";
  StatementListNode metaData=null;
  String debug_name=""String_Node_Str"";
  if (this.def instanceof FunctionDefinitionNode) {
    FunctionDefinitionNode fd=(FunctionDefinitionNode)this.def;
    debug_name=fd.fexpr.debug_name;
    metaData=fd.metaData;
    tagname=""String_Node_Str"";
    buf.append(""String_Node_Str"");
    buf.append(fd.name.identifier.name);
    buf.append(""String_Node_Str"");
    buf.append(fd.fexpr.debug_name);
    buf.append(""String_Node_Str"");
    AttributeListNode attrs=fd.attrs;
    if (attrs != null) {
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasStatic ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasFinal ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasOverride ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
    fd.fexpr.signature.toCanonicalString(cx,buf);
    buf.append(""String_Node_Str"");
  }
  if (this.def instanceof VariableDefinitionNode) {
    VariableDefinitionNode vd=(VariableDefinitionNode)this.def;
    VariableBindingNode vb=(VariableBindingNode)(vd.list.items.get(0));
    debug_name=vb.debug_name;
    metaData=vd.metaData;
    tagname=""String_Node_Str"";
    buf.append(""String_Node_Str"");
    buf.append(tagname);
    buf.append(""String_Node_Str"");
    buf.append(vb.variable.identifier.name);
    buf.append(""String_Node_Str"");
    buf.append(vb.debug_name);
    buf.append(""String_Node_Str"");
    if (vb.typeref != null) {
      Slot s=vb.typeref.getSlot(cx,GET_TOKEN);
      buf.append((s == null || s.getDebugName().length() == 0) ? vb.typeref.name : s.getDebugName());
    }
    buf.append(""String_Node_Str"");
    AttributeListNode attrs=vd.attrs;
    if (attrs != null) {
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasStatic ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
    }
    Slot s=vb.ref.getSlot(cx);
    if (s != null) {
      buf.append(""String_Node_Str"");
      buf.append(s.isConst() ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
    if (vb.initializer != null) {
      buf.append(""String_Node_Str"");
      if (vb.initializer instanceof LiteralNumberNode) {
        buf.append(((LiteralNumberNode)(vb.initializer)).value);
      }
 else       if (vb.initializer instanceof LiteralStringNode) {
        buf.append(escapeXml(((LiteralStringNode)(vb.initializer)).value));
      }
 else       if (vb.initializer instanceof LiteralNullNode) {
        buf.append(""String_Node_Str"");
      }
 else       if (vb.initializer instanceof LiteralBooleanNode) {
        buf.append((((LiteralBooleanNode)(vb.initializer)).value) ? ""String_Node_Str"" : ""String_Node_Str"");
      }
 else       if (vb.initializer instanceof MemberExpressionNode) {
        MemberExpressionNode mb=(MemberExpressionNode)(vb.initializer);
        Slot vs=(mb.ref != null ? mb.ref.getSlot(cx,GET_TOKEN) : null);
        Value v=(vs != null ? vs.getValue() : null);
        ObjectValue ov=((v instanceof ObjectValue) ? (ObjectValue)(v) : null);
        buf.append((ov != null) ? ov.getValue() : ""String_Node_Str"");
      }
 else {
        Slot vs=vb.ref.getSlot(cx,GET_TOKEN);
        Value v=(vs != null ? vs.getValue() : null);
        ObjectValue ov=((v instanceof ObjectValue) ? (ObjectValue)(v) : null);
        buf.append((ov != null) ? ov.getValue() : ""String_Node_Str"");
      }
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
  }
  if (this.def instanceof PackageDefinitionNode) {
    PackageDefinitionNode pd=(PackageDefinitionNode)(this.def);
    tagname=""String_Node_Str"";
    debug_name=""String_Node_Str"";
    metaData=null;
    buf.append(""String_Node_Str"");
    buf.append(tagname);
    buf.append(""String_Node_Str"");
    buf.append((pd.name.id != null ? pd.name.id.pkg_part : ""String_Node_Str""));
    buf.append(""String_Node_Str"");
    buf.append((pd.name.id != null ? pd.name.id.def_part : ""String_Node_Str""));
    buf.append(""String_Node_Str"");
    buf.append((pd.name.id != null ? pd.name.id.pkg_part : ""String_Node_Str""));
    buf.append(""String_Node_Str"");
    buf.append((pd.name.id != null ? pd.name.id.def_part : ""String_Node_Str""));
    buf.append(""String_Node_Str"");
  }
  if (this.def instanceof ClassDefinitionNode) {
    ClassDefinitionNode cd=(ClassDefinitionNode)this.def;
    if (cd.metaData.items.at(0) != this)     return buf;
    debug_name=cd.debug_name;
    metaData=cd.metaData;
    InterfaceDefinitionNode id=null;
    if (this.def instanceof InterfaceDefinitionNode) {
      tagname=""String_Node_Str"";
      id=(InterfaceDefinitionNode)(this.def);
    }
 else {
      tagname=""String_Node_Str"";
    }
    buf.append(""String_Node_Str"");
    buf.append(tagname);
    buf.append(""String_Node_Str"");
    buf.append(cd.name.name);
    buf.append(""String_Node_Str"");
    buf.append(cd.debug_name);
    if (cd.cx.input != null && cd.cx.input.origin.length() != 0) {
      buf.append(""String_Node_Str"");
      buf.append(cd.cx.input.origin);
    }
    buf.append(""String_Node_Str"");
    buf.append(cd.cframe.builder.classname.ns.name);
    buf.append(""String_Node_Str"");
    buf.append(getAccessKindFromNS(cd.cframe.builder.classname.ns));
    if (id != null) {
      buf.append(""String_Node_Str"");
      if (id.interfaces != null) {
        Value firstV=id.interfaces.values.get(0);
        for (        Value v : id.interfaces.values) {
          ReferenceValue rv=(ReferenceValue)v;
          if (v != firstV) {
            buf.append(""String_Node_Str"");
          }
          Slot s=rv.getSlot(cx,GET_TOKEN);
          buf.append((s == null || s.getDebugName().length() == 0) ? rv.name : s.getDebugName());
        }
      }
 else {
        buf.append(""String_Node_Str"");
      }
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
      if (cd.baseref != null) {
        Slot s=cd.baseref.getSlot(cx,GET_TOKEN);
        buf.append((s == null || s.getDebugName().length() == 0) ? ""String_Node_Str"" : s.getDebugName());
      }
 else {
        buf.append(""String_Node_Str"");
      }
      buf.append(""String_Node_Str"");
      if (cd.interfaces != null) {
        buf.append(""String_Node_Str"");
        Value firstV=cd.interfaces.values.get(0);
        for (        Value v : cd.interfaces.values) {
          ReferenceValue rv=(ReferenceValue)v;
          if (v != firstV) {
            buf.append(""String_Node_Str"");
          }
          Slot s=rv.getSlot(cx,GET_TOKEN);
          buf.append((s == null || s.getDebugName().length() == 0) ? rv.name : s.getDebugName());
        }
        buf.append(""String_Node_Str"");
      }
    }
    AttributeListNode attrs=cd.attrs;
    if (attrs != null) {
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasFinal ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasDynamic ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
  }
  if (values != null) {
    for (    Value v : values) {
      if (v instanceof MetaDataEvaluator.KeylessValue) {
        MetaDataEvaluator.KeylessValue ov=(MetaDataEvaluator.KeylessValue)v;
        buf.append(ov.obj);
        continue;
      }
      if (v instanceof MetaDataEvaluator.KeyValuePair) {
        MetaDataEvaluator.KeyValuePair kv=(MetaDataEvaluator.KeyValuePair)v;
        buf.append(""String_Node_Str"").append(kv.key).append(""String_Node_Str"").append(kv.obj).append(""String_Node_Str"").append(kv.key).append(""String_Node_Str"");
        continue;
      }
    }
  }
 else   if (id != null) {
    buf.append(id);
  }
  if (this.def != null && this.def.metaData != null) {
    int numItems=this.def.metaData.items.size();
    for (int x=0; x < numItems; x++) {
      Node md=this.def.metaData.items.at(x);
      MetaDataNode mdi=(md instanceof MetaDataNode) ? (MetaDataNode)(md) : null;
      if (mdi != null && mdi.id != null) {
        if (mdi.id.equals(""String_Node_Str"") || mdi.id.equals(""String_Node_Str"") || mdi.id.equals(""String_Node_Str"")) {
          if (x + 1 < numItems) {
            Node next=this.def.metaData.items.at(x + 1);
            DocCommentNode metaDataComment=(next instanceof DocCommentNode) ? (DocCommentNode)next : null;
            if ((metaDataComment != null) && (metaDataComment.metaData != mdi))             metaDataComment=null;
            if (metaDataComment != null) {
              metaDataComment.emitMetaDataComment(buf,debug_name,mdi,false);
              x++;
            }
 else {
              emitMetaDataComment(buf,debug_name,mdi,true);
            }
          }
 else {
            emitMetaDataComment(buf,debug_name,mdi,true);
          }
        }
 else         if (mdi.id.equals(""String_Node_Str"") || mdi.id.equals(""String_Node_Str"") || mdi.id.equals(""String_Node_Str"")|| mdi.id.equals(""String_Node_Str"")) {
          emitMetaDataComment(buf,debug_name,mdi,true);
        }
      }
    }
  }
  if (!""String_Node_Str"".equals(tagname)) {
    buf.append(""String_Node_Str"");
    buf.append(tagname);
    buf.append(""String_Node_Str"");
  }
 else {
    if (this.def instanceof NamespaceDefinitionNode) {
      NamespaceDefinitionNode nd=(NamespaceDefinitionNode)(this.def);
      if (nd != null)       buf.append(""String_Node_Str"").append(nd.debug_name).append(""String_Node_Str"");
    }
  }
  return buf;
}","public StringBuffer emit(Context cx,StringBuffer buf){
  String tagname=""String_Node_Str"";
  StatementListNode metaData=null;
  String debug_name=""String_Node_Str"";
  if (this.def instanceof FunctionDefinitionNode) {
    FunctionDefinitionNode fd=(FunctionDefinitionNode)this.def;
    debug_name=fd.fexpr.debug_name;
    metaData=fd.metaData;
    tagname=""String_Node_Str"";
    buf.append(""String_Node_Str"");
    buf.append(fd.name.identifier.name);
    buf.append(""String_Node_Str"");
    buf.append(fd.fexpr.debug_name);
    buf.append(""String_Node_Str"");
    AttributeListNode attrs=fd.attrs;
    if (attrs != null) {
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasStatic ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasFinal ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasOverride ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
    fd.fexpr.signature.toCanonicalString(cx,buf);
    buf.append(""String_Node_Str"");
  }
  if (this.def instanceof VariableDefinitionNode) {
    VariableDefinitionNode vd=(VariableDefinitionNode)this.def;
    VariableBindingNode vb=(VariableBindingNode)(vd.list.items.get(0));
    debug_name=vb.debug_name;
    metaData=vd.metaData;
    tagname=""String_Node_Str"";
    buf.append(""String_Node_Str"");
    buf.append(tagname);
    buf.append(""String_Node_Str"");
    buf.append(vb.variable.identifier.name);
    buf.append(""String_Node_Str"");
    buf.append(vb.debug_name);
    buf.append(""String_Node_Str"");
    if (vb.typeref != null) {
      buf.append(getRefName(cx,vb.typeref));
    }
    buf.append(""String_Node_Str"");
    AttributeListNode attrs=vd.attrs;
    if (attrs != null) {
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasStatic ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
    }
    Slot s=vb.ref.getSlot(cx);
    if (s != null) {
      buf.append(""String_Node_Str"");
      buf.append(s.isConst() ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
    if (vb.initializer != null) {
      buf.append(""String_Node_Str"");
      if (vb.initializer instanceof LiteralNumberNode) {
        buf.append(((LiteralNumberNode)(vb.initializer)).value);
      }
 else       if (vb.initializer instanceof LiteralStringNode) {
        buf.append(escapeXml(((LiteralStringNode)(vb.initializer)).value));
      }
 else       if (vb.initializer instanceof LiteralNullNode) {
        buf.append(""String_Node_Str"");
      }
 else       if (vb.initializer instanceof LiteralBooleanNode) {
        buf.append((((LiteralBooleanNode)(vb.initializer)).value) ? ""String_Node_Str"" : ""String_Node_Str"");
      }
 else       if (vb.initializer instanceof MemberExpressionNode) {
        MemberExpressionNode mb=(MemberExpressionNode)(vb.initializer);
        Slot vs=(mb.ref != null ? mb.ref.getSlot(cx,GET_TOKEN) : null);
        Value v=(vs != null ? vs.getValue() : null);
        ObjectValue ov=((v instanceof ObjectValue) ? (ObjectValue)(v) : null);
        buf.append((ov != null) ? ov.getValue() : ""String_Node_Str"");
      }
 else {
        Slot vs=vb.ref.getSlot(cx,GET_TOKEN);
        Value v=(vs != null ? vs.getValue() : null);
        ObjectValue ov=((v instanceof ObjectValue) ? (ObjectValue)(v) : null);
        buf.append((ov != null) ? ov.getValue() : ""String_Node_Str"");
      }
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
  }
  if (this.def instanceof PackageDefinitionNode) {
    PackageDefinitionNode pd=(PackageDefinitionNode)(this.def);
    tagname=""String_Node_Str"";
    debug_name=""String_Node_Str"";
    metaData=null;
    buf.append(""String_Node_Str"");
    buf.append(tagname);
    buf.append(""String_Node_Str"");
    buf.append((pd.name.id != null ? pd.name.id.pkg_part : ""String_Node_Str""));
    buf.append(""String_Node_Str"");
    buf.append((pd.name.id != null ? pd.name.id.def_part : ""String_Node_Str""));
    buf.append(""String_Node_Str"");
    buf.append((pd.name.id != null ? pd.name.id.pkg_part : ""String_Node_Str""));
    buf.append(""String_Node_Str"");
    buf.append((pd.name.id != null ? pd.name.id.def_part : ""String_Node_Str""));
    buf.append(""String_Node_Str"");
  }
  if (this.def instanceof ClassDefinitionNode) {
    ClassDefinitionNode cd=(ClassDefinitionNode)this.def;
    if (cd.metaData.items.at(0) != this)     return buf;
    debug_name=cd.debug_name;
    metaData=cd.metaData;
    InterfaceDefinitionNode id=null;
    if (this.def instanceof InterfaceDefinitionNode) {
      tagname=""String_Node_Str"";
      id=(InterfaceDefinitionNode)(this.def);
    }
 else {
      tagname=""String_Node_Str"";
    }
    buf.append(""String_Node_Str"");
    buf.append(tagname);
    buf.append(""String_Node_Str"");
    buf.append(cd.name.name);
    buf.append(""String_Node_Str"");
    buf.append(cd.debug_name);
    if (cd.cx.input != null && cd.cx.input.origin.length() != 0) {
      buf.append(""String_Node_Str"");
      buf.append(cd.cx.input.origin);
    }
    buf.append(""String_Node_Str"");
    buf.append(cd.cframe.builder.classname.ns.name);
    buf.append(""String_Node_Str"");
    buf.append(getAccessKindFromNS(cd.cframe.builder.classname.ns));
    if (id != null) {
      buf.append(""String_Node_Str"");
      if (id.interfaces != null) {
        Value firstV=id.interfaces.values.get(0);
        for (        Value v : id.interfaces.values) {
          ReferenceValue rv=(ReferenceValue)v;
          if (v != firstV) {
            buf.append(""String_Node_Str"");
          }
          Slot s=rv.getSlot(cx,GET_TOKEN);
          buf.append((s == null || s.getDebugName().length() == 0) ? rv.name : s.getDebugName());
        }
      }
 else {
        buf.append(""String_Node_Str"");
      }
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
      if (cd.baseref != null) {
        Slot s=cd.baseref.getSlot(cx,GET_TOKEN);
        buf.append((s == null || s.getDebugName().length() == 0) ? ""String_Node_Str"" : s.getDebugName());
      }
 else {
        buf.append(""String_Node_Str"");
      }
      buf.append(""String_Node_Str"");
      if (cd.interfaces != null) {
        buf.append(""String_Node_Str"");
        Value firstV=cd.interfaces.values.get(0);
        for (        Value v : cd.interfaces.values) {
          ReferenceValue rv=(ReferenceValue)v;
          if (v != firstV) {
            buf.append(""String_Node_Str"");
          }
          Slot s=rv.getSlot(cx,GET_TOKEN);
          buf.append((s == null || s.getDebugName().length() == 0) ? rv.name : s.getDebugName());
        }
        buf.append(""String_Node_Str"");
      }
    }
    AttributeListNode attrs=cd.attrs;
    if (attrs != null) {
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasFinal ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
      buf.append(attrs.hasDynamic ? ""String_Node_Str"" : ""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"");
      buf.append(""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
  }
  if (values != null) {
    for (    Value v : values) {
      if (v instanceof MetaDataEvaluator.KeylessValue) {
        MetaDataEvaluator.KeylessValue ov=(MetaDataEvaluator.KeylessValue)v;
        buf.append(ov.obj);
        continue;
      }
      if (v instanceof MetaDataEvaluator.KeyValuePair) {
        MetaDataEvaluator.KeyValuePair kv=(MetaDataEvaluator.KeyValuePair)v;
        buf.append(""String_Node_Str"").append(kv.key).append(""String_Node_Str"").append(kv.obj).append(""String_Node_Str"").append(kv.key).append(""String_Node_Str"");
        continue;
      }
    }
  }
 else   if (id != null) {
    buf.append(id);
  }
  if (this.def != null && this.def.metaData != null) {
    int numItems=this.def.metaData.items.size();
    for (int x=0; x < numItems; x++) {
      Node md=this.def.metaData.items.at(x);
      MetaDataNode mdi=(md instanceof MetaDataNode) ? (MetaDataNode)(md) : null;
      if (mdi != null && mdi.id != null) {
        if (mdi.id.equals(""String_Node_Str"") || mdi.id.equals(""String_Node_Str"") || mdi.id.equals(""String_Node_Str"")) {
          if (x + 1 < numItems) {
            Node next=this.def.metaData.items.at(x + 1);
            DocCommentNode metaDataComment=(next instanceof DocCommentNode) ? (DocCommentNode)next : null;
            if ((metaDataComment != null) && (metaDataComment.metaData != mdi))             metaDataComment=null;
            if (metaDataComment != null) {
              metaDataComment.emitMetaDataComment(buf,debug_name,mdi,false);
              x++;
            }
 else {
              emitMetaDataComment(buf,debug_name,mdi,true);
            }
          }
 else {
            emitMetaDataComment(buf,debug_name,mdi,true);
          }
        }
 else         if (mdi.id.equals(""String_Node_Str"") || mdi.id.equals(""String_Node_Str"") || mdi.id.equals(""String_Node_Str"")|| mdi.id.equals(""String_Node_Str"")) {
          emitMetaDataComment(buf,debug_name,mdi,true);
        }
      }
    }
  }
  if (!""String_Node_Str"".equals(tagname)) {
    buf.append(""String_Node_Str"");
    buf.append(tagname);
    buf.append(""String_Node_Str"");
  }
 else {
    if (this.def instanceof NamespaceDefinitionNode) {
      NamespaceDefinitionNode nd=(NamespaceDefinitionNode)(this.def);
      if (nd != null)       buf.append(""String_Node_Str"").append(nd.debug_name).append(""String_Node_Str"");
    }
  }
  return buf;
}",0.551545869234668
45405,"public StringBuffer toCanonicalString(Context cx,StringBuffer buf){
  Slot s=ref.getSlot(cx,GET_TOKEN);
  buf.append((s == null || s.getDebugName().length() == 0) ? ref.name : s.getDebugName());
  return buf;
}","public StringBuffer toCanonicalString(Context cx,StringBuffer buf){
  buf.append(DocCommentNode.getRefName(cx,ref));
  return buf;
}",0.6666666666666666
45406,"public StringBuffer toCanonicalString(Context cx,StringBuffer buf){
{
    buf.append(""String_Node_Str"");
    ParameterNode firstItem=items.get(0);
    for (    ParameterNode item : items) {
      if (item != firstItem)       buf.append(""String_Node_Str"");
      buf.append(item.ref != null ? item.ref.name : ""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
  }
{
    buf.append(""String_Node_Str"");
    ParameterNode firstItem=items.get(0);
    for (    ParameterNode item : items) {
      if (item != firstItem)       buf.append(""String_Node_Str"");
      if (item instanceof RestParameterNode)       buf.append(""String_Node_Str"");
 else       if (item.typeref != null) {
        Slot s=item.typeref.getSlot(cx,GET_TOKEN);
        buf.append((s == null || s.getDebugName().length() == 0) ? item.typeref.name : s.getDebugName());
      }
    }
    buf.append(""String_Node_Str"");
  }
{
    buf.append(""String_Node_Str"");
    ParameterNode firstItem=items.get(0);
    for (    ParameterNode item : items) {
      if (item != firstItem)       buf.append(""String_Node_Str"");
      if (item.init == null)       buf.append(""String_Node_Str"");
 else {
        if (item.init instanceof LiteralNumberNode) {
          buf.append(((LiteralNumberNode)(item.init)).value);
        }
 else         if (item.init instanceof LiteralStringNode) {
          buf.append(DocCommentNode.escapeXml(((LiteralStringNode)(item.init)).value));
        }
 else         if (item.init instanceof LiteralNullNode) {
          buf.append(""String_Node_Str"");
        }
 else         if (item.init instanceof LiteralBooleanNode) {
          buf.append((((LiteralBooleanNode)(item.init)).value) ? ""String_Node_Str"" : ""String_Node_Str"");
        }
 else {
          buf.append(""String_Node_Str"");
        }
      }
    }
    buf.append(""String_Node_Str"");
  }
  return buf;
}","public StringBuffer toCanonicalString(Context cx,StringBuffer buf){
{
    buf.append(""String_Node_Str"");
    ParameterNode firstItem=items.get(0);
    for (    ParameterNode item : items) {
      if (item != firstItem)       buf.append(""String_Node_Str"");
      buf.append(item.ref != null ? item.ref.name : ""String_Node_Str"");
    }
    buf.append(""String_Node_Str"");
  }
{
    buf.append(""String_Node_Str"");
    ParameterNode firstItem=items.get(0);
    for (    ParameterNode item : items) {
      if (item != firstItem)       buf.append(""String_Node_Str"");
      if (item instanceof RestParameterNode)       buf.append(""String_Node_Str"");
 else       if (item.typeref != null) {
        buf.append(DocCommentNode.getRefName(cx,item.typeref));
      }
    }
    buf.append(""String_Node_Str"");
  }
{
    buf.append(""String_Node_Str"");
    ParameterNode firstItem=items.get(0);
    for (    ParameterNode item : items) {
      if (item != firstItem)       buf.append(""String_Node_Str"");
      if (item.init == null)       buf.append(""String_Node_Str"");
 else {
        if (item.init instanceof LiteralNumberNode) {
          buf.append(((LiteralNumberNode)(item.init)).value);
        }
 else         if (item.init instanceof LiteralStringNode) {
          buf.append(DocCommentNode.escapeXml(((LiteralStringNode)(item.init)).value));
        }
 else         if (item.init instanceof LiteralNullNode) {
          buf.append(""String_Node_Str"");
        }
 else         if (item.init instanceof LiteralBooleanNode) {
          buf.append((((LiteralBooleanNode)(item.init)).value) ? ""String_Node_Str"" : ""String_Node_Str"");
        }
 else {
          buf.append(""String_Node_Str"");
        }
      }
    }
    buf.append(""String_Node_Str"");
  }
  return buf;
}",0.801330008312552
45407,"static void compile(Context cx,ObjectValue global,InputStream in,String filename,String file_encoding,ObjectList<IncludeInfo> includes,String swf_options,String avmplus_exe,ObjectList<CompilerPlug> plugs,boolean emit_doc_info,boolean show_parsetrees,boolean show_bytes,boolean show_flow,boolean lint_mode,boolean emit_metadata,boolean save_comment_nodes,boolean emit_debug_info,ObjectList<String> import_filespecs){
  ProgramNode second=null;
  ObjectList<ImportNode> imports=new ObjectList<ImportNode>();
  for (  String filespec : import_filespecs) {
    Context cx2=new Context(cx.statics);
    BufferedInputStream import_in=null;
    try {
      if (filespec.endsWith(""String_Node_Str"")) {
        second=(new AbcParser(cx2,filespec)).parseAbc();
        if (second == null) {
          cx.error(-1,kError_InvalidAbcFile,filespec);
        }
      }
 else {
        import_in=new BufferedInputStream(new FileInputStream(filespec));
        cx2.setPath(new File(filespec).getAbsoluteFile().getParent());
        second=(new Parser(cx2,import_in,filespec,null,emit_doc_info,save_comment_nodes)).parseProgram();
      }
    }
 catch (    IOException ex) {
      cx.error(-1,kError_UnableToOpenFile,filespec);
    }
 finally {
      if (import_in != null) {
        try {
          import_in.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    NodeFactory nodeFactory=cx2.getNodeFactory();
    imports.push_back(nodeFactory.Import(cx2,nodeFactory.literalString(filespec,0),second));
    cx2.getNodeFactory().pkg_defs.clear();
  }
  cx.setPath(new File(filename).getAbsoluteFile().getParent());
  ProgramNode node=(new Parser(cx,in,filename,file_encoding,emit_doc_info,save_comment_nodes)).parseProgram();
  node.imports=imports;
  ObjectList<ProgramNode> nodes=new ObjectList<ProgramNode>();
{
    ProgramNode node2;
{
      if (includes != null) {
        Iterator<IncludeInfo> in_it=includes.iterator();
        for (; in_it.hasNext(); ) {
          IncludeInfo iinfo=in_it.next();
          Context cx2=new Context(cx.statics);
          node2=(new Parser(cx2,iinfo.script,iinfo.name,iinfo.encoding,emit_doc_info,save_comment_nodes)).parseProgram();
          nodes.add(node2);
        }
      }
    }
  }
  cx.pushScope(global);
  if (includes != null && includes.size() > 0) {
    ObjectList<Node> stmts=node.statements.items;
    for (int i=nodes.size() - 1; i >= 0; --i) {
      Context cx2=nodes.get(i).cx;
      NodeFactory nodeFactory=cx2.getNodeFactory();
      String name=includes.get(i).name;
      LiteralStringNode first=nodeFactory.literalString(name,0);
      IncludeDirectiveNode idn=nodeFactory.includeDirective(cx2,first,nodes.get(i));
      StatementListNode istmts=nodeFactory.statementList(null,idn);
      ObjectList<Node> items=istmts.items;
      stmts.addAll(0,items);
    }
  }
  node.pkgdefs.clear();
  node.pkgdefs.addAll(cx.getNodeFactory().pkg_defs);
  if (show_parsetrees && cx.errorCount() == 0) {
    printParseTrees(cx.scriptName(),node,cx,""String_Node_Str"");
    return;
  }
  if (cx.errorCount() == 0) {
    ConfigurationEvaluator ce=new ConfigurationEvaluator();
    node.evaluate(cx,ce);
  }
  if (cx.errorCount() == 0) {
    FlowGraphEmitter flowem=new FlowGraphEmitter(cx,filename,show_flow);
    FlowAnalyzer flower=new FlowAnalyzer(flowem);
    node.evaluate(cx,flower);
    node.evaluate(cx,flower);
  }
  if (cx.errorCount() == 0) {
    if (emit_metadata) {
      MetaDataEvaluator printer=new MetaDataEvaluator(emit_debug_info);
      node.evaluate(cx,printer);
    }
  }
  if (cx.errorCount() == 0) {
    ConstantEvaluator analyzer=new ConstantEvaluator(cx);
    node.evaluate(cx,analyzer);
  }
  if (cx.errorCount() == 0 && emit_doc_info) {
    MetaDataEvaluator printer=new MetaDataEvaluator();
    node.evaluate(cx,printer);
    StringBuilder out=new StringBuilder();
    out.append(""String_Node_Str"").append(newline);
    ObjectList<DocCommentNode> comments=printer.doccomments;
    int numComments=comments.size();
    for (int x=0; x < numComments; x++) {
      comments.get(x).emit(cx,out);
    }
    out.append(newline).append(""String_Node_Str"").append(newline);
    BufferedOutputStream warningOut=null;
    try {
      String outName=cx.scriptName() + ""String_Node_Str"";
      warningOut=new BufferedOutputStream(new FileOutputStream(new File(cx.path(),outName)));
      warningOut.write(out.toString().getBytes());
      warningOut.flush();
    }
 catch (    IOException ex) {
      ex.printStackTrace();
    }
 finally {
      if (warningOut != null) {
        try {
          warningOut.close();
          System.err.println(""String_Node_Str"" + cx.path() + ""String_Node_Str""+ cx.scriptName()+ ""String_Node_Str"");
        }
 catch (        IOException ex) {
        }
      }
    }
    return;
  }
  if (lint_mode && cx.errorCount() == 0) {
    LintEvaluator evaluator=new LintEvaluator(cx,filename,(String)null);
    node.evaluate(cx,evaluator);
    evaluator.logWarnings(cx);
    evaluator.clear();
  }
  if (cx.errorCount() == 0) {
    Emitter emitter=cx.getEmitter();
    CodeGenerator generator=new CodeGenerator(emitter);
    node.evaluate(cx,generator);
  }
  cx.popScope();
}","static void compile(Context cx,ObjectValue global,InputStream in,String filename,String file_encoding,ObjectList<IncludeInfo> includes,String swf_options,String avmplus_exe,ObjectList<CompilerPlug> plugs,boolean emit_doc_info,boolean show_parsetrees,boolean show_bytes,boolean show_flow,boolean lint_mode,boolean emit_metadata,boolean save_comment_nodes,boolean emit_debug_info,ObjectList<String> import_filespecs){
  ProgramNode second=null;
  ObjectList<ImportNode> imports=new ObjectList<ImportNode>();
  for (  String filespec : import_filespecs) {
    Context cx2=new Context(cx.statics);
    BufferedInputStream import_in=null;
    try {
      if (filespec.endsWith(""String_Node_Str"")) {
        second=(new AbcParser(cx2,filespec)).parseAbc();
        if (second == null) {
          cx.error(-1,kError_InvalidAbcFile,filespec);
        }
      }
 else {
        import_in=new BufferedInputStream(new FileInputStream(filespec));
        cx2.setPath(new File(filespec).getAbsoluteFile().getParent());
        second=(new Parser(cx2,import_in,filespec,null,emit_doc_info,save_comment_nodes)).parseProgram();
      }
    }
 catch (    IOException ex) {
      cx.error(-1,kError_UnableToOpenFile,filespec);
    }
 finally {
      if (import_in != null) {
        try {
          import_in.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    NodeFactory nodeFactory=cx2.getNodeFactory();
    imports.push_back(nodeFactory.Import(cx2,nodeFactory.literalString(filespec,0),second));
    cx2.getNodeFactory().pkg_defs.clear();
  }
  cx.setPath(new File(filename).getAbsoluteFile().getParent());
  ProgramNode node=(new Parser(cx,in,filename,file_encoding,emit_doc_info,save_comment_nodes)).parseProgram();
  node.imports=imports;
  ObjectList<ProgramNode> nodes=new ObjectList<ProgramNode>();
{
    ProgramNode node2;
{
      if (includes != null) {
        Iterator<IncludeInfo> in_it=includes.iterator();
        for (; in_it.hasNext(); ) {
          IncludeInfo iinfo=in_it.next();
          Context cx2=new Context(cx.statics);
          node2=(new Parser(cx2,iinfo.script,iinfo.name,iinfo.encoding,emit_doc_info,save_comment_nodes)).parseProgram();
          nodes.add(node2);
        }
      }
    }
  }
  cx.pushScope(global);
  if (includes != null && includes.size() > 0) {
    ObjectList<Node> stmts=node.statements.items;
    for (int i=nodes.size() - 1; i >= 0; --i) {
      Context cx2=nodes.get(i).cx;
      NodeFactory nodeFactory=cx2.getNodeFactory();
      String name=includes.get(i).name;
      LiteralStringNode first=nodeFactory.literalString(name,0);
      IncludeDirectiveNode idn=nodeFactory.includeDirective(cx2,first,nodes.get(i));
      StatementListNode istmts=nodeFactory.statementList(null,idn);
      ObjectList<Node> items=istmts.items;
      stmts.addAll(0,items);
    }
  }
  node.pkgdefs.clear();
  node.pkgdefs.addAll(cx.getNodeFactory().pkg_defs);
  if (show_parsetrees && cx.errorCount() == 0) {
    printParseTrees(cx.scriptName(),node,cx,""String_Node_Str"");
    return;
  }
  if (cx.errorCount() == 0) {
    ConfigurationEvaluator ce=new ConfigurationEvaluator();
    node.evaluate(cx,ce);
  }
  if (cx.errorCount() == 0) {
    FlowGraphEmitter flowem=new FlowGraphEmitter(cx,filename,show_flow);
    FlowAnalyzer flower=new FlowAnalyzer(flowem);
    node.evaluate(cx,flower);
    node.evaluate(cx,flower);
  }
  if (cx.errorCount() == 0) {
    if (emit_metadata) {
      MetaDataEvaluator printer=new MetaDataEvaluator(emit_debug_info);
      node.evaluate(cx,printer);
    }
  }
  if (cx.errorCount() == 0) {
    ConstantEvaluator analyzer=new ConstantEvaluator(cx);
    node.evaluate(cx,analyzer);
  }
  if (cx.errorCount() == 0 && emit_doc_info) {
    MetaDataEvaluator printer=new MetaDataEvaluator();
    node.evaluate(cx,printer);
    StringBuilder out=new StringBuilder();
    out.append(""String_Node_Str"").append(newline);
    ObjectList<DocCommentNode> comments=printer.doccomments;
    int numComments=comments.size();
    Node prev=null;
    for (int x=0; x < numComments; x++) {
      DocCommentNode d=comments.get(x);
      if (d.def == prev && d.values == null && d.id == null)       continue;
      d.emit(cx,out);
      prev=d.def;
    }
    out.append(newline).append(""String_Node_Str"").append(newline);
    BufferedOutputStream warningOut=null;
    try {
      String outName=cx.scriptName() + ""String_Node_Str"";
      warningOut=new BufferedOutputStream(new FileOutputStream(new File(cx.path(),outName)));
      warningOut.write(out.toString().getBytes());
      warningOut.flush();
    }
 catch (    IOException ex) {
      ex.printStackTrace();
    }
 finally {
      if (warningOut != null) {
        try {
          warningOut.close();
          System.err.println(""String_Node_Str"" + cx.path() + ""String_Node_Str""+ cx.scriptName()+ ""String_Node_Str"");
        }
 catch (        IOException ex) {
        }
      }
    }
    return;
  }
  if (lint_mode && cx.errorCount() == 0) {
    LintEvaluator evaluator=new LintEvaluator(cx,filename,(String)null);
    node.evaluate(cx,evaluator);
    evaluator.logWarnings(cx);
    evaluator.clear();
  }
  if (cx.errorCount() == 0) {
    Emitter emitter=cx.getEmitter();
    CodeGenerator generator=new CodeGenerator(emitter);
    node.evaluate(cx,generator);
  }
  cx.popScope();
}",0.9812148374177552
45408,"public Value computeBinaryExpr(Context cx,int op,ObjectValue lv,ObjectValue rv,NumberUsage numberUsage){
  ObjectValue val=null;
  TypeInfo lt=lv.getType(cx);
  TypeInfo rt=rv.getType(cx);
  TypeValue ltval=lt.getTypeValue();
  TypeValue rtval=rt.getTypeValue();
switch (op) {
case MINUS_TOKEN:
case MULT_TOKEN:
case DIV_TOKEN:
case PLUS_TOKEN:
case MODULUS_TOKEN:
{
      if ((ltval != null) && ltval.isNumeric(cx) && rtval.isNumeric(cx)) {
        TypeValue[] ltype=new TypeValue[1];
        TypeValue[] rtype=new TypeValue[1];
        NumberConstant lval=cx.getEmitter().getValueOfNumberLiteral(lv.getValue(),ltype,numberUsage);
        NumberConstant rval=cx.getEmitter().getValueOfNumberLiteral(rv.getValue(),rtype,numberUsage);
        boolean forceType=true;
        int usage=numberUsage.get_usage();
        if (usage == NumberUsage.use_Number) {
          forceType=false;
          if (cx.statics.es4_numerics && ((ltype[0] == cx.decimalType()) || (rtype[0] == cx.decimalType()))) {
            usage=NumberUsage.use_decimal;
          }
 else           if ((ltype[0] == cx.doubleType()) || (rtype[0] == cx.doubleType()) || (ltype[0] == cx.numberType())|| (rtype[0] == cx.numberType())) {
            usage=NumberUsage.use_double;
          }
 else           if ((ltype[0] == cx.intType()) || (rtype[0] == cx.uintType())) {
            if (lval.intValue() >= 0)             usage=NumberUsage.use_uint;
 else             usage=NumberUsage.use_double;
          }
 else           if ((ltype[0] == cx.uintType()) || (rtype[0] == cx.intType())) {
            if (rval.intValue() >= 0)             usage=NumberUsage.use_uint;
 else             usage=NumberUsage.use_double;
          }
 else           usage=NumberUsage.use_int;
        }
switch (usage) {
case NumberUsage.use_decimal:
{
            Decimal128 d=Decimal128.NaN;
            Decimal128 ld=lval.decimalValue();
            Decimal128 rd=rval.decimalValue();
            currentDecimalContext.setPrecision(numberUsage.get_precision());
            currentDecimalContext.setRoundingMode(numberUsage.get_java_roundingMode());
switch (op) {
case MINUS_TOKEN:
              d=ld.subtract(rd,currentDecimalContext);
            break;
case PLUS_TOKEN:
          d=ld.add(rd,currentDecimalContext);
        break;
case MULT_TOKEN:
      d=ld.multiply(rd,currentDecimalContext);
    break;
case DIV_TOKEN:
  d=ld.divide(rd,currentDecimalContext);
break;
case MODULUS_TOKEN:
d=ld.remainder(rd,currentDecimalContext);
break;
default :
}
val=new ObjectValue(d.toString() + ""String_Node_Str"",cx.decimalType());
break;
}
case NumberUsage.use_double:
{
double d=Double.NaN;
double ld=lval.doubleValue();
double rd=rval.doubleValue();
switch (op) {
case MINUS_TOKEN:
d=ld - rd;
break;
case PLUS_TOKEN:
d=ld + rd;
break;
case MULT_TOKEN:
d=ld * rd;
break;
case DIV_TOKEN:
d=ld / rd;
break;
case MODULUS_TOKEN:
d=ld % rd;
break;
default :
}
val=new ObjectValue(Double.toString(d),cx.doubleType());
break;
}
case NumberUsage.use_int:
{
int i=0;
int li=lval.intValue();
int ri=rval.intValue();
double d=0;
double ld=lval.doubleValue();
double rd=rval.doubleValue();
switch (op) {
case MINUS_TOKEN:
i=li - ri;
d=ld - rd;
break;
case PLUS_TOKEN:
i=li + ri;
d=ld + rd;
break;
case MULT_TOKEN:
i=li * ri;
d=ld * rd;
break;
case DIV_TOKEN:
i=li / ri;
d=ld / rd;
break;
case MODULUS_TOKEN:
if (ri == 0) {
return new ObjectValue(""String_Node_Str"",cx.doubleType());
}
i=li % ri;
d=ld % rd;
break;
default :
}
if (forceType || (((int)d) == i)) val=new ObjectValue(Integer.toString(i),cx.intType());
 else val=new ObjectValue(Double.toString(d),cx.doubleType());
break;
}
case NumberUsage.use_uint:
{
long d=0;
long ld=lval.uintValue();
long rd=rval.uintValue();
switch (op) {
case MINUS_TOKEN:
d=ld - rd;
break;
case PLUS_TOKEN:
d=ld + rd;
break;
case MULT_TOKEN:
d=ld * rd;
break;
case DIV_TOKEN:
if (rd == 0) {
String sval;
if (ld == 0) sval=""String_Node_Str"";
 else if (ld < 0) sval=""String_Node_Str"";
 else sval=""String_Node_Str"";
return new ObjectValue(sval,cx.doubleType());
}
d=ld / rd;
break;
case MODULUS_TOKEN:
if (rd == 0) {
return new ObjectValue(""String_Node_Str"",cx.doubleType());
}
d=ld % rd;
break;
default :
}
if (forceType || ((d >= 0) && (d <= 0xFFFFFFFFL))) {
d&=0xFFFFFFFFL;
val=new ObjectValue(Long.toString(d),cx.uintType());
}
 else {
double dval;
if ((op == MULT_TOKEN) && (d > 0xFFFFFFFFL || (d < 0))) {
dval=lval.doubleValue() * rval.doubleValue();
}
 else dval=d;
val=new ObjectValue(Double.toString(dval),cx.doubleType());
}
break;
}
default :
}
}
 else {
if (op == PLUS_TOKEN) {
val=cx.noType().prototype;
}
}
break;
}
default :
val=cx.noType().prototype;
break;
}
return val;
}","public Value computeBinaryExpr(Context cx,int op,ObjectValue lv,ObjectValue rv,NumberUsage numberUsage){
  ObjectValue val=null;
  TypeInfo lt=lv.getType(cx);
  TypeInfo rt=rv.getType(cx);
  TypeValue ltval=lt.getTypeValue();
  TypeValue rtval=rt.getTypeValue();
switch (op) {
case MINUS_TOKEN:
case MULT_TOKEN:
case DIV_TOKEN:
case PLUS_TOKEN:
case MODULUS_TOKEN:
{
      if ((ltval != null) && ltval.isNumeric(cx) && rtval.isNumeric(cx)) {
        TypeValue[] ltype=new TypeValue[1];
        TypeValue[] rtype=new TypeValue[1];
        NumberConstant lval=cx.getEmitter().getValueOfNumberLiteral(lv.getValue(),ltype,numberUsage);
        NumberConstant rval=cx.getEmitter().getValueOfNumberLiteral(rv.getValue(),rtype,numberUsage);
        boolean forceType=true;
        int usage=numberUsage.get_usage();
        if (usage == NumberUsage.use_Number) {
          forceType=false;
          if (cx.statics.es4_numerics && ((ltype[0] == cx.decimalType()) || (rtype[0] == cx.decimalType()))) {
            usage=NumberUsage.use_decimal;
          }
 else           if ((ltype[0] == cx.doubleType()) || (rtype[0] == cx.doubleType()) || (ltype[0] == cx.numberType())|| (rtype[0] == cx.numberType())) {
            usage=NumberUsage.use_double;
          }
 else           if ((ltype[0] == cx.intType()) || (rtype[0] == cx.uintType())) {
            if (lval.intValue() >= 0)             usage=NumberUsage.use_uint;
 else             usage=NumberUsage.use_double;
          }
 else           if ((ltype[0] == cx.uintType()) || (rtype[0] == cx.intType())) {
            if (rval.intValue() >= 0)             usage=NumberUsage.use_uint;
 else             usage=NumberUsage.use_double;
          }
 else           usage=NumberUsage.use_int;
          if (!cx.statics.es4_numerics)           usage=NumberUsage.use_double;
        }
switch (usage) {
case NumberUsage.use_decimal:
{
            Decimal128 d=Decimal128.NaN;
            Decimal128 ld=lval.decimalValue();
            Decimal128 rd=rval.decimalValue();
            currentDecimalContext.setPrecision(numberUsage.get_precision());
            currentDecimalContext.setRoundingMode(numberUsage.get_java_roundingMode());
switch (op) {
case MINUS_TOKEN:
              d=ld.subtract(rd,currentDecimalContext);
            break;
case PLUS_TOKEN:
          d=ld.add(rd,currentDecimalContext);
        break;
case MULT_TOKEN:
      d=ld.multiply(rd,currentDecimalContext);
    break;
case DIV_TOKEN:
  d=ld.divide(rd,currentDecimalContext);
break;
case MODULUS_TOKEN:
d=ld.remainder(rd,currentDecimalContext);
break;
default :
}
val=new ObjectValue(d.toString() + ""String_Node_Str"",cx.decimalType());
break;
}
case NumberUsage.use_double:
{
double d=Double.NaN;
double ld=lval.doubleValue();
double rd=rval.doubleValue();
switch (op) {
case MINUS_TOKEN:
d=ld - rd;
break;
case PLUS_TOKEN:
d=ld + rd;
break;
case MULT_TOKEN:
d=ld * rd;
break;
case DIV_TOKEN:
d=ld / rd;
break;
case MODULUS_TOKEN:
d=ld % rd;
break;
default :
}
val=new ObjectValue(Double.toString(d),cx.doubleType());
break;
}
case NumberUsage.use_int:
{
int i=0;
int li=lval.intValue();
int ri=rval.intValue();
double d=0;
double ld=lval.doubleValue();
double rd=rval.doubleValue();
switch (op) {
case MINUS_TOKEN:
i=li - ri;
d=ld - rd;
break;
case PLUS_TOKEN:
i=li + ri;
d=ld + rd;
break;
case MULT_TOKEN:
i=li * ri;
d=ld * rd;
break;
case DIV_TOKEN:
i=li / ri;
d=ld / rd;
break;
case MODULUS_TOKEN:
if (ri == 0) {
return new ObjectValue(""String_Node_Str"",cx.doubleType());
}
i=li % ri;
d=ld % rd;
break;
default :
}
if (forceType || (((int)d) == i)) val=new ObjectValue(Integer.toString(i),cx.intType());
 else val=new ObjectValue(Double.toString(d),cx.doubleType());
break;
}
case NumberUsage.use_uint:
{
long d=0;
long ld=lval.uintValue();
long rd=rval.uintValue();
switch (op) {
case MINUS_TOKEN:
d=ld - rd;
break;
case PLUS_TOKEN:
d=ld + rd;
break;
case MULT_TOKEN:
d=ld * rd;
break;
case DIV_TOKEN:
if (rd == 0) {
String sval;
if (ld == 0) sval=""String_Node_Str"";
 else if (ld < 0) sval=""String_Node_Str"";
 else sval=""String_Node_Str"";
return new ObjectValue(sval,cx.doubleType());
}
d=ld / rd;
break;
case MODULUS_TOKEN:
if (rd == 0) {
return new ObjectValue(""String_Node_Str"",cx.doubleType());
}
d=ld % rd;
break;
default :
}
if (forceType || ((d >= 0) && (d <= 0xFFFFFFFFL))) {
d&=0xFFFFFFFFL;
val=new ObjectValue(Long.toString(d),cx.uintType());
}
 else {
double dval;
if ((op == MULT_TOKEN) && (d > 0xFFFFFFFFL || (d < 0))) {
dval=lval.doubleValue() * rval.doubleValue();
}
 else dval=d;
val=new ObjectValue(Double.toString(dval),cx.doubleType());
}
break;
}
default :
}
}
 else {
if (op == PLUS_TOKEN) {
val=cx.noType().prototype;
}
}
break;
}
default :
val=cx.noType().prototype;
break;
}
return val;
}",0.9914730334683436
45409,"/** 
 * <PRE> Program Directives PackageDefinition Program <B>CLEARS unused buffers before returning</B></PRE>
 */
public ProgramNode parseProgram(){
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  StatementListNode first=null;
  StatementListNode second=null;
  StatementListNode configs=null;
  if (!parsing_include) {
    config_namespaces.push_back(new HashSet<String>());
    config_namespaces.last().add(""String_Node_Str"");
    configs=parseConfigValues();
  }
  while (lookahead(PACKAGE_TOKEN) || lookahead(DOCCOMMENT_TOKEN)) {
    MetaDataNode meta=null;
    if (lookahead(DOCCOMMENT_TOKEN) || lookahead(LEFTBRACKET_TOKEN) || lookahead(XMLLITERAL_TOKEN)) {
      meta=parseMetaData();
      second=nodeFactory.statementList(second,meta);
    }
    if (lookahead(PACKAGE_TOKEN)) {
      PackageDefinitionNode pkgdef=parsePackageDefinition();
      first=nodeFactory.statementList(first,pkgdef);
      if (meta != null) {
        meta.def=pkgdef;
        pkgdef.addMetaDataNode(meta);
      }
      if (pkgdef != null) {
        second=nodeFactory.statementList(second,pkgdef.statements);
      }
    }
  }
  second=parseDirectives(null,second);
  if ((ctx.dialect(10)) && !parsing_include && second != null) {
    Node udn=nodeFactory.useDirective(null,nodeFactory.memberExpression(null,nodeFactory.getExpression(nodeFactory.identifier(""String_Node_Str""))));
    second.items.add(0,udn);
  }
  if (ctx.statics.es4_vectors) {
    PackageIdentifiersNode pin=nodeFactory.packageIdentifiers(null,nodeFactory.identifier(""String_Node_Str""),true);
    pin=nodeFactory.packageIdentifiers(pin,nodeFactory.identifier(""String_Node_Str""),true);
    pin=nodeFactory.packageIdentifiers(pin,nodeFactory.identifier(""String_Node_Str""),true);
    Node idn=nodeFactory.importDirective(null,nodeFactory.packageName(pin),null,ctx);
    if (second != null)     second.items.add(0,idn);
  }
  ProgramNode result=nodeFactory.program(ctx,second,ctx.input.positionOfMark());
  match(EOS_TOKEN);
  if (ctx.scriptAssistParsing) {
    for (ListIterator<Node> it=comments.listIterator(); it.hasNext(); ) {
      ctx.comments.add(it.next());
    }
  }
  clearUnusedBuffers();
  if (!parsing_include) {
    if (result != null) {
      if (configs != null)       result.statements.items.addAll(0,configs.items);
      NamespaceDefinitionNode configdef=nodeFactory.configNamespaceDefinition(null,nodeFactory.identifier(""String_Node_Str""),-1);
      result.statements.items.add(0,configdef);
    }
    config_namespaces.pop_back();
  }
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  return result;
}","/** 
 * <PRE> Program Directives PackageDefinition Program <B>CLEARS unused buffers before returning</B></PRE>
 */
public ProgramNode parseProgram(){
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  StatementListNode first=null;
  StatementListNode second=null;
  StatementListNode configs=null;
  if (!parsing_include) {
    config_namespaces.push_back(new HashSet<String>());
    config_namespaces.last().add(""String_Node_Str"");
    configs=parseConfigValues();
  }
  while (lookahead(PACKAGE_TOKEN) || lookahead(DOCCOMMENT_TOKEN)) {
    MetaDataNode meta=null;
    if (lookahead(DOCCOMMENT_TOKEN) || lookahead(LEFTBRACKET_TOKEN) || lookahead(XMLLITERAL_TOKEN)) {
      meta=parseMetaData();
      second=nodeFactory.statementList(second,meta);
    }
    if (lookahead(PACKAGE_TOKEN)) {
      PackageDefinitionNode pkgdef=parsePackageDefinition();
      first=nodeFactory.statementList(first,pkgdef);
      if (meta != null) {
        meta.def=pkgdef;
        pkgdef.addMetaDataNode(meta);
      }
      if (pkgdef != null) {
        second=nodeFactory.statementList(second,pkgdef.statements);
      }
    }
  }
  second=parseDirectives(null,second);
  if ((ctx.dialect(10)) && !parsing_include && second != null) {
    Node udn=nodeFactory.useDirective(null,nodeFactory.memberExpression(null,nodeFactory.getExpression(nodeFactory.identifier(""String_Node_Str""))));
    second.items.add(0,udn);
  }
  if (ctx.statics.es4_vectors && !parsing_include && second != null) {
    PackageIdentifiersNode pin=nodeFactory.packageIdentifiers(null,nodeFactory.identifier(""String_Node_Str""),true);
    pin=nodeFactory.packageIdentifiers(pin,nodeFactory.identifier(""String_Node_Str""),true);
    pin=nodeFactory.packageIdentifiers(pin,nodeFactory.identifier(""String_Node_Str""),true);
    Node idn=nodeFactory.importDirective(null,nodeFactory.packageName(pin),null,ctx);
    second.items.add(0,idn);
  }
  ProgramNode result=nodeFactory.program(ctx,second,ctx.input.positionOfMark());
  match(EOS_TOKEN);
  if (ctx.scriptAssistParsing) {
    for (ListIterator<Node> it=comments.listIterator(); it.hasNext(); ) {
      ctx.comments.add(it.next());
    }
  }
  clearUnusedBuffers();
  if (!parsing_include) {
    if (result != null) {
      if (configs != null)       result.statements.items.addAll(0,configs.items);
      NamespaceDefinitionNode configdef=nodeFactory.configNamespaceDefinition(null,nodeFactory.identifier(""String_Node_Str""),-1);
      result.statements.items.add(0,configdef);
    }
    config_namespaces.pop_back();
  }
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  return result;
}",0.9881271543469936
45410,"public PackageDefinitionNode parsePackageDefinition(){
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  if (within_package)   error(kError_NestedPackage);
  within_package=true;
  PackageDefinitionNode result;
  nodeFactory.dxns=null;
  block_kind_stack.add(PACKAGE_TOKEN);
  match(PACKAGE_TOKEN);
  HashSet<String> conf_ns=new HashSet<String>(config_namespaces.last().size());
  conf_ns.addAll(config_namespaces.last());
  config_namespaces.push_back(conf_ns);
  if (lookahead(LEFTBRACE_TOKEN)) {
    result=nodeFactory.startPackage(ctx,null,null);
    Node udn=nodeFactory.useDirective(null,nodeFactory.memberExpression(null,nodeFactory.getExpression(nodeFactory.identifier(""String_Node_Str""))));
    Node idn=null;
    if (ctx.statics.es4_vectors) {
      PackageIdentifiersNode pin=nodeFactory.packageIdentifiers(null,nodeFactory.identifier(""String_Node_Str""),true);
      pin=nodeFactory.packageIdentifiers(pin,nodeFactory.identifier(""String_Node_Str""),true);
      pin=nodeFactory.packageIdentifiers(pin,nodeFactory.identifier(""String_Node_Str""),true);
      idn=nodeFactory.importDirective(null,nodeFactory.packageName(pin),null,ctx);
    }
    result=nodeFactory.finishPackage(ctx,parseBlock());
    if ((ctx.dialect(10)) && result != null) {
      result.statements.items.add(1,udn);
    }
    if (!ctx.statics.use_namespaces.isEmpty() && result != null) {
      for (      String useName : ctx.statics.use_namespaces) {
        Node udn2=nodeFactory.useDirective(null,nodeFactory.memberExpression(null,nodeFactory.getExpression(nodeFactory.identifier(useName))));
        result.statements.items.add(1,udn2);
      }
    }
    if (ctx.statics.es4_vectors && result != null) {
      result.statements.items.add(1,idn);
    }
  }
 else {
    PackageNameNode first=parsePackageName(false);
    result=nodeFactory.startPackage(ctx,null,first);
    Node udn=nodeFactory.useDirective(null,nodeFactory.memberExpression(null,nodeFactory.getExpression(nodeFactory.identifier(""String_Node_Str""))));
    Node idn=null;
    if (ctx.statics.es4_vectors) {
      PackageIdentifiersNode pin=nodeFactory.packageIdentifiers(null,nodeFactory.identifier(""String_Node_Str""),true);
      pin=nodeFactory.packageIdentifiers(pin,nodeFactory.identifier(""String_Node_Str""),true);
      pin=nodeFactory.packageIdentifiers(pin,nodeFactory.identifier(""String_Node_Str""),true);
      idn=nodeFactory.importDirective(null,nodeFactory.packageName(pin),null,ctx);
    }
    result=nodeFactory.finishPackage(ctx,parseBlock());
    if ((ctx.dialect(10)) && result != null) {
      result.statements.items.add(1,udn);
    }
    if (!ctx.statics.use_namespaces.isEmpty() && result != null) {
      for (      String useName : ctx.statics.use_namespaces) {
        Node udn2=nodeFactory.useDirective(null,nodeFactory.memberExpression(null,nodeFactory.getExpression(nodeFactory.identifier(useName))));
        result.statements.items.add(1,udn2);
      }
    }
    if (ctx.statics.es4_vectors && result != null) {
      result.statements.items.add(1,idn);
    }
  }
  block_kind_stack.removeLast();
  config_namespaces.pop_back();
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  within_package=false;
  return result;
}","public PackageDefinitionNode parsePackageDefinition(){
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  if (within_package)   error(kError_NestedPackage);
  within_package=true;
  PackageDefinitionNode result;
  nodeFactory.dxns=null;
  block_kind_stack.add(PACKAGE_TOKEN);
  match(PACKAGE_TOKEN);
  HashSet<String> conf_ns=new HashSet<String>(config_namespaces.last().size());
  conf_ns.addAll(config_namespaces.last());
  config_namespaces.push_back(conf_ns);
  if (lookahead(LEFTBRACE_TOKEN)) {
    result=nodeFactory.startPackage(ctx,null,null);
    Node udn=nodeFactory.useDirective(null,nodeFactory.memberExpression(null,nodeFactory.getExpression(nodeFactory.identifier(""String_Node_Str""))));
    ObjectList<UseDirectiveNode> udns=null;
    if (!ctx.statics.use_namespaces.isEmpty()) {
      udns=new ObjectList<UseDirectiveNode>();
      for (      String useName : ctx.statics.use_namespaces) {
        udns.add(nodeFactory.useDirective(null,nodeFactory.memberExpression(null,nodeFactory.getExpression(nodeFactory.identifier(useName)))));
      }
    }
    Node idn=null;
    if (ctx.statics.es4_vectors) {
      PackageIdentifiersNode pin=nodeFactory.packageIdentifiers(null,nodeFactory.identifier(""String_Node_Str""),true);
      pin=nodeFactory.packageIdentifiers(pin,nodeFactory.identifier(""String_Node_Str""),true);
      pin=nodeFactory.packageIdentifiers(pin,nodeFactory.identifier(""String_Node_Str""),true);
      idn=nodeFactory.importDirective(null,nodeFactory.packageName(pin),null,ctx);
    }
    result=nodeFactory.finishPackage(ctx,parseBlock());
    if ((ctx.dialect(10)) && result != null) {
      result.statements.items.add(1,udn);
    }
    if (ctx.statics.es4_vectors && result != null) {
      result.statements.items.add(1,idn);
    }
    if (udns != null && result != null) {
      for (      UseDirectiveNode usenode : udns) {
        result.statements.items.add(1,usenode);
      }
    }
  }
 else {
    PackageNameNode first=parsePackageName(false);
    result=nodeFactory.startPackage(ctx,null,first);
    Node udn=nodeFactory.useDirective(null,nodeFactory.memberExpression(null,nodeFactory.getExpression(nodeFactory.identifier(""String_Node_Str""))));
    ObjectList<UseDirectiveNode> udns=null;
    if (!ctx.statics.use_namespaces.isEmpty()) {
      udns=new ObjectList<UseDirectiveNode>();
      for (      String useName : ctx.statics.use_namespaces) {
        udns.add(nodeFactory.useDirective(null,nodeFactory.memberExpression(null,nodeFactory.getExpression(nodeFactory.identifier(useName)))));
      }
    }
    Node idn=null;
    if (ctx.statics.es4_vectors) {
      PackageIdentifiersNode pin=nodeFactory.packageIdentifiers(null,nodeFactory.identifier(""String_Node_Str""),true);
      pin=nodeFactory.packageIdentifiers(pin,nodeFactory.identifier(""String_Node_Str""),true);
      pin=nodeFactory.packageIdentifiers(pin,nodeFactory.identifier(""String_Node_Str""),true);
      idn=nodeFactory.importDirective(null,nodeFactory.packageName(pin),null,ctx);
    }
    result=nodeFactory.finishPackage(ctx,parseBlock());
    if ((ctx.dialect(10)) && result != null) {
      result.statements.items.add(1,udn);
    }
    if (udns != null && result != null) {
      for (      UseDirectiveNode usenode : udns) {
        result.statements.items.add(1,usenode);
      }
    }
    if (ctx.statics.es4_vectors && result != null) {
      result.statements.items.add(1,idn);
    }
  }
  block_kind_stack.removeLast();
  config_namespaces.pop_back();
  if (debug) {
    System.err.println(""String_Node_Str"");
  }
  within_package=false;
  return result;
}",0.4685848502642395
45411,"private void bindToTypeParamSlot(Context cx,ObjectValue obj,ObjectValue qualifier,Slot s){
  if (s.getValue() instanceof TypeValue) {
    TypeValue factory=(TypeValue)s.getValue();
    ObjectList<TypeValue> types=new ObjectList<TypeValue>(type_params.size());
    for (int i=0, limit=type_params.size(); i < limit; ++i) {
      ReferenceValue r=type_params.at(i);
      Slot type_slot=r.getSlot(cx);
      if (type_slot != null) {
        Value v=type_slot.getValue();
        if (v instanceof TypeValue) {
          types.add((TypeValue)v);
        }
      }
 else       if (""String_Node_Str"".equals(r.name) && r.namespaces.contains(cx.publicNamespace())) {
        types.add(cx.noType());
      }
      if (types.size() != i + 1) {
        this.slot=null;
        return;
      }
    }
    Slot slot;
    if (factory.is_parameterized) {
      ParameterizedName fullname=new ParameterizedName(qualifier,name,types);
      String name=fullname.getNamePart();
      int slot_id;
      if (!obj.hasName(cx,Tokens.GET_TOKEN,name,qualifier)) {
        slot_id=obj.builder.ImplicitVar(cx,obj,name,qualifier,cx.typeType(),-1,-1,-1);
        ObjectValue prot_ns=cx.getNamespace(fullname.toString(),Context.NS_PROTECTED);
        ObjectValue static_prot_ns=cx.getNamespace(fullname.toString(),Context.NS_STATIC_PROTECTED);
        TypeValue cframe=new TypeValue(cx,new ClassBuilder(fullname,prot_ns,static_prot_ns),fullname,TYPE_object);
        ObjectValue iframe=new ObjectValue(cx,new InstanceBuilder(fullname),cframe);
        cframe.prototype=iframe;
        slot=obj.getSlot(cx,slot_id);
        slot.setValue(cframe);
        slot.setConst(true);
        slot.declaredBy=null;
        obj.builder.ImplicitCall(cx,obj,slot_id,cframe,CALL_Method,-1,-1);
        obj.builder.ImplicitConstruct(cx,obj,slot_id,cframe,CALL_Method,-1,-1);
        factory.addParameterizedTypeSlot(cx,slot);
        FlowAnalyzer.inheritClassSlotsStatic(cframe,iframe,cx.vectorObjType(),cx);
        if (factory == cx.vectorType()) {
          cframe.indexed_type=types.at(0);
        }
      }
 else {
        slot_id=obj.getSlotIndex(cx,Tokens.GET_TOKEN,name,qualifier);
        slot=obj.getSlot(cx,slot_id);
      }
      bindToSlot(cx,name,obj,fullname.ns);
    }
 else {
      cx.internalError(""String_Node_Str"");
    }
  }
}","private void bindToTypeParamSlot(Context cx,ObjectValue obj,ObjectValue qualifier,Slot s){
  if (s.getValue() instanceof TypeValue) {
    TypeValue factory=(TypeValue)s.getValue();
    ObjectList<TypeValue> types=new ObjectList<TypeValue>(type_params.size());
    for (int i=0, limit=type_params.size(); i < limit; ++i) {
      ReferenceValue r=type_params.at(i);
      Slot type_slot=r.getSlot(cx);
      if (type_slot != null) {
        Value v=type_slot.getValue();
        if (v instanceof TypeValue) {
          types.add((TypeValue)v);
        }
      }
 else       if (""String_Node_Str"".equals(r.name) && r.namespaces.contains(cx.publicNamespace())) {
        types.add(cx.noType());
      }
      if (types.size() != i + 1) {
        this.slot=null;
        return;
      }
    }
    Slot slot;
    if (factory.is_parameterized) {
      ParameterizedName fullname=new ParameterizedName(qualifier,name,types);
      String name=fullname.getNamePart();
      int slot_id;
      if (!obj.hasName(cx,Tokens.GET_TOKEN,name,qualifier)) {
        slot_id=obj.builder.ImplicitVar(cx,obj,name,qualifier,cx.typeType(),-1,-1,-1);
        TypeValue cframe=null;
        if (factory.types != null && factory.types.containsKey(name)) {
          Slot instaniated=factory.types.get(name);
          cframe=(TypeValue)instaniated.getValue();
        }
 else {
          ObjectValue prot_ns=cx.getNamespace(fullname.toString(),Context.NS_PROTECTED);
          ObjectValue static_prot_ns=cx.getNamespace(fullname.toString(),Context.NS_STATIC_PROTECTED);
          cframe=new TypeValue(cx,new ClassBuilder(fullname,prot_ns,static_prot_ns),fullname,TYPE_object);
          ObjectValue iframe=new ObjectValue(cx,new InstanceBuilder(fullname),cframe);
          cframe.prototype=iframe;
          FlowAnalyzer.inheritClassSlotsStatic(cframe,iframe,cx.vectorObjType(),cx);
        }
        slot=obj.getSlot(cx,slot_id);
        slot.setValue(cframe);
        slot.setConst(true);
        slot.declaredBy=null;
        obj.builder.ImplicitCall(cx,obj,slot_id,cframe,CALL_Method,-1,-1);
        obj.builder.ImplicitConstruct(cx,obj,slot_id,cframe,CALL_Method,-1,-1);
        factory.addParameterizedTypeSlot(cx,name,slot);
        if (factory == cx.vectorType()) {
          cframe.indexed_type=types.at(0);
        }
      }
 else {
        slot_id=obj.getSlotIndex(cx,Tokens.GET_TOKEN,name,qualifier);
        slot=obj.getSlot(cx,slot_id);
      }
      bindToSlot(cx,name,obj,fullname.ns);
    }
 else {
      cx.internalError(""String_Node_Str"");
    }
  }
}",0.9005775577557755
45412,"public void addParameterizedTypeSlot(Context cx,Slot s){
  if (types == null)   types=new ObjectList<Slot>();
  types.add(s);
}","public void addParameterizedTypeSlot(Context cx,String name,Slot s){
  if (types == null)   types=new HashMap<String,Slot>();
  types.put(name,s);
}",0.8363636363636363
45413,"public long insert_garden(String name,int previewId,String bounds,String city,String state,int serverId,int is_public,String images){
  this.insertStmt_garden.clearBindings();
  this.insertStmt_garden.bindString(1,name);
  this.insertStmt_garden.bindLong(2,(long)previewId);
  this.insertStmt_garden.bindString(3,bounds);
  this.insertStmt_garden.bindString(4,city);
  this.insertStmt_garden.bindString(5,state);
  this.insertStmt_garden.bindLong(6,(long)serverId);
  this.insertStmt_garden.bindLong(7,(long)is_public);
  this.insertStmt_garden.bindString(8,images);
  return this.insertStmt_garden.executeInsert();
}","public long insert_garden(String name,int previewId,String bounds,String city,String state,int serverId,int is_public,String images){
  this.insertStmt_garden.clearBindings();
  this.insertStmt_garden.bindString(1,name);
  this.insertStmt_garden.bindLong(2,(long)previewId);
  this.insertStmt_garden.bindString(3,bounds);
  if (city == null)   city=""String_Node_Str"";
  if (state == null)   state=""String_Node_Str"";
  this.insertStmt_garden.bindString(4,city);
  this.insertStmt_garden.bindString(5,state);
  this.insertStmt_garden.bindLong(6,(long)serverId);
  this.insertStmt_garden.bindLong(7,(long)is_public);
  this.insertStmt_garden.bindString(8,images);
  return this.insertStmt_garden.executeInsert();
}",0.9292168674698796
45414,"/** 
 * downloads entire garden and adds it to the local database 
 */
public Garden getGarden(String serverId){
  HttpClient httpclient=new DefaultHttpClient();
  HttpGet httpget=new HttpGet(getString(R.string.server_url) + ""String_Node_Str"" + serverId+ ""String_Node_Str"");
  String result=""String_Node_Str"";
  try {
    HttpResponse response=httpclient.execute(httpget);
    HttpEntity entity=response.getEntity();
    result=EntityUtils.toString(entity);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  System.out.println(""String_Node_Str"" + result);
  Garden garden=gson.fromJson(result,Garden.class);
  GardenGnome.addGarden(garden);
  getPlots(garden);
  getImages(garden);
  return garden;
}","/** 
 * downloads entire garden and adds it to the local database 
 */
public Garden getGarden(String serverId){
  HttpClient httpclient=new DefaultHttpClient();
  HttpGet httpget=new HttpGet(getString(R.string.server_url) + ""String_Node_Str"" + serverId+ ""String_Node_Str"");
  String result=""String_Node_Str"";
  try {
    HttpResponse response=httpclient.execute(httpget);
    HttpEntity entity=response.getEntity();
    result=EntityUtils.toString(entity);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  System.out.println(""String_Node_Str"" + result);
  Garden garden=gson.fromJson(result,Garden.class);
  GardenGnome.addGardenServer(garden);
  getPlots(garden);
  getImages(garden);
  return garden;
}",0.995890410958904
45415,"public void onClick(DialogInterface dialog,int whichButton){
  EditText textEntry=((EditText)textEntryView.findViewById(R.id.dialog_text_entry));
  String gardenName=textEntry.getText().toString().trim();
  if (gardenName.length() == 0)   gardenName=""String_Node_Str"";
  Intent intent=new Intent(this,GardenScreen.class);
  intent.putExtra(""String_Node_Str"",gardens.size());
  Garden garden=new Garden(gardenName);
  GardenGnome.addGarden(garden);
  adapter.notifyDataSetChanged();
  startActivityForResult(intent,0);
  new Thread(setLocation).start();
  removeDialog(0);
}","public void onClick(DialogInterface dialog,int whichButton){
  EditText textEntry=((EditText)textEntryView.findViewById(R.id.dialog_text_entry));
  String gardenName=textEntry.getText().toString().trim();
  if (gardenName.length() == 0)   gardenName=""String_Node_Str"";
  Intent intent=new Intent(this,GardenScreen.class);
  intent.putExtra(""String_Node_Str"",gardens.size());
  Garden garden=new Garden(gardenName);
  GardenGnome.addGardenServer(garden);
  adapter.notifyDataSetChanged();
  startActivityForResult(intent,0);
  new Thread(setLocation).start();
  removeDialog(0);
}",0.9947916666666666
45416,"/** 
 * TODO: should manually set the id of the garden 
 */
public static void addGarden(Garden garden){
  gardens.add(garden);
  garden.setGardenNum(dh.count_garden());
  System.out.println(""String_Node_Str"" + dh.count_garden());
  dh.insert_garden(garden.getName(),R.drawable.preview,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,-1,""String_Node_Str"");
}","/** 
 * TODO: should manually set the id of the garden 
 */
public static void addGarden(Garden garden){
  dh.insert_garden(garden.getName(),R.drawable.preview,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",0,-1,""String_Node_Str"");
  garden.setGardenNum(dh.count_garden());
  gardens.add(garden);
  System.out.println(""String_Node_Str"" + dh.count_garden());
}",0.6557377049180327
45417,"public static void addEntry(int pa_pk,Plant plant,Entry entry){
  plant.addEntry(entry);
  entry.setEntryNum(dh.count_entry());
  System.out.println(""String_Node_Str"" + dh.count_entry());
  dh.insert_entry(entry.getName(),entry.getDate() + ""String_Node_Str"",entry.getServerId());
  dh.insert_map_pe(pa_pk,dh.count_entry());
}","public static void addEntry(int pa_pk,Plant plant,Entry entry){
  dh.insert_entry(entry.getName(),entry.getDate() + ""String_Node_Str"",entry.getServerId());
  dh.insert_map_pe(pa_pk,dh.count_entry());
  entry.setEntryNum(dh.count_entry());
  plant.addEntry(entry);
  System.out.println(""String_Node_Str"" + dh.count_entry());
}",0.3107692307692307
45418,"public static void addPlant(int po_pk,String name,Plot plot){
  Plant temp=new Plant(name);
  plot.addPlant(temp);
  temp.setPlantNum(dh.count_plant());
  System.out.println(""String_Node_Str"" + dh.count_plant());
  dh.insert_plant(name,0);
  dh.insert_map_pp(po_pk,dh.count_plant());
}","public static void addPlant(int po_pk,String name,Plot plot){
  dh.insert_plant(name,0);
  dh.insert_map_pp(po_pk,dh.count_plant());
  Plant temp=new Plant(name);
  temp.setPlantNum(dh.count_plant());
  plot.addPlant(temp);
  System.out.println(""String_Node_Str"" + dh.count_plant());
}",0.6701754385964912
45419,"public void createPolyPlot(){
  float[] pts=toFloatArray(editView.polyPts);
  plot.set(new Plot(plot.getName(),pts));
  plot.getPaint().setStrokeWidth(getResources().getDimension(R.dimen.strokesize_edit));
  oldPlot.set(plot);
  ((Button)findViewById(R.id.save_btn)).setText(R.string.btn_save_edit);
  if (hintsOn) {
    TextView hint=(TextView)findViewById(R.id.edit_hint);
    hint.setText(R.string.hint_editscreen);
  }
  String polyPoints_s=""String_Node_Str"";
  for (int i=0; i < pts.length; i++)   polyPoints_s+=pts[i];
  createPoly=false;
  editView.invalidate();
}","public void createPolyPlot(){
  float[] pts=toFloatArray(editView.polyPts);
  plot.set(new Plot(plot.getName(),pts));
  plot.getPaint().setStrokeWidth(getResources().getDimension(R.dimen.strokesize_edit));
  oldPlot.set(plot);
  ((Button)findViewById(R.id.save_btn)).setText(R.string.btn_save_edit);
  if (hintsOn) {
    TextView hint=(TextView)findViewById(R.id.edit_hint);
    hint.setText(R.string.hint_editscreen);
  }
  createPoly=false;
  editView.invalidate();
}",0.9019230769230768
45420,"public void createPlot(){
  RectF gBounds=garden.getRawBounds();
  if (garden.isEmpty()) {
    int width=getWindowManager().getDefaultDisplay().getWidth();
    int height=getWindowManager().getDefaultDisplay().getHeight();
    gBounds=new RectF(0,0,width,height);
  }
  int type=extras.getInt(""String_Node_Str"");
  String name=extras.getString(""String_Node_Str"");
  Rect bounds=new Rect((int)gBounds.left,(int)gBounds.top,(int)gBounds.right,(int)gBounds.bottom);
  bounds.inset((int)gBounds.width() / 3,(int)gBounds.height() / 3);
  if (type == Plot.POLY)   plot=new Plot(name,bounds,new float[]{0,0});
 else   plot=new Plot(name,bounds,type);
  GardenGnome.addPlot(garden,plot);
  garden.refreshBounds();
  String bounds_s=""String_Node_Str"" + garden.getBounds().left + ""String_Node_Str""+ garden.getBounds().top+ ""String_Node_Str""+ garden.getBounds().right+ ""String_Node_Str""+ garden.getBounds().bottom;
  GardenGnome.tmpupdateGarden(extras.getInt(""String_Node_Str""),bounds_s);
}","public void createPlot(){
  RectF gBounds=garden.getRawBounds();
  if (garden.isEmpty()) {
    int width=getWindowManager().getDefaultDisplay().getWidth();
    int height=getWindowManager().getDefaultDisplay().getHeight();
    gBounds=new RectF(0,0,width,height);
  }
  int type=extras.getInt(""String_Node_Str"");
  String name=extras.getString(""String_Node_Str"");
  Rect bounds=new Rect((int)gBounds.left,(int)gBounds.top,(int)gBounds.right,(int)gBounds.bottom);
  bounds.inset((int)gBounds.width() / 3,(int)gBounds.height() / 3);
  if (type == Plot.POLY)   plot=new Plot(name,bounds,new float[]{0,0});
 else   plot=new Plot(name,bounds,type);
  GardenGnome.addPlot(garden,plot);
  if (garden.getPlots().size() == 1) {
    garden.refreshBounds();
    String bounds_s=""String_Node_Str"" + garden.getBounds().left + ""String_Node_Str""+ garden.getBounds().top+ ""String_Node_Str""+ garden.getBounds().right+ ""String_Node_Str""+ garden.getBounds().bottom;
    GardenGnome.tmpupdateGarden(extras.getInt(""String_Node_Str""),bounds_s);
  }
}",0.9526656701544594
45421,"@Override public void onBackPressed(){
  if (createPoly && editView.polyPts.size() >= 6) {
    createPolyPlot();
    return;
  }
  if (createPoly)   garden.remove(plot);
  garden.remove(oldPlot);
  plot.getPaint().setStrokeWidth(getResources().getDimension(R.dimen.strokesize_default));
  Intent intent=new Intent().putExtra(""String_Node_Str"",editView.zoomScale);
  float[] values=new float[9], bgvalues=new float[9];
  editView.dragMatrix.getValues(values);
  editView.bgDragMatrix.getValues(bgvalues);
  intent.putExtra(""String_Node_Str"",values);
  intent.putExtra(""String_Node_Str"",bgvalues);
  setResult(RESULT_OK,intent);
  GardenGnome.updatePlot(extras.getInt(""String_Node_Str""),plot);
  finish();
  overridePendingTransition(0,0);
}","@Override public void onBackPressed(){
  if (createPoly && editView.polyPts.size() >= 6) {
    createPolyPlot();
    return;
  }
  if (createPoly)   garden.remove(plot);
  System.out.println(""String_Node_Str"" + garden.getBounds().toString());
  garden.remove(oldPlot);
  plot.getPaint().setStrokeWidth(getResources().getDimension(R.dimen.strokesize_default));
  Intent intent=new Intent().putExtra(""String_Node_Str"",editView.zoomScale);
  float[] values=new float[9], bgvalues=new float[9];
  editView.dragMatrix.getValues(values);
  editView.bgDragMatrix.getValues(bgvalues);
  intent.putExtra(""String_Node_Str"",values);
  intent.putExtra(""String_Node_Str"",bgvalues);
  setResult(RESULT_OK,intent);
  GardenGnome.updatePlot(extras.getInt(""String_Node_Str""),plot);
  finish();
  overridePendingTransition(0,0);
}",0.9529335912314636
45422,"public void getImages(Garden garden){
  HttpClient httpclient=new DefaultHttpClient();
  HttpGet httpget=new HttpGet(getString(R.string.server_url) + ""String_Node_Str"" + garden.getServerId()+ ""String_Node_Str"");
  String result=""String_Node_Str"";
  try {
    HttpResponse response=httpclient.execute(httpget);
    HttpEntity entity=response.getEntity();
    result=EntityUtils.toString(entity);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
  System.out.println(""String_Node_Str"" + result);
  Photo[] photos=gson.fromJson(result,Photo[].class);
  try {
    digester=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    return;
  }
  String accessKey=""String_Node_Str"";
  String secretKey=""String_Node_Str"";
  if (s3 == null) {
    BasicAWSCredentials credentials=new BasicAWSCredentials(accessKey,secretKey);
    s3=new AmazonS3Client(credentials);
  }
  for (  Photo photo : photos) {
    String code=garden.getServerId() + ""String_Node_Str"" + photo.getServerId()+ ""String_Node_Str""+ accessKey;
    String fileName=hexCode(code) + ""String_Node_Str"";
    Uri imageUri=writeBitmap2(fileName);
    photo.setUri(imageUri);
    garden.addImage(photo);
  }
}","public void getImages(Garden garden){
  String state=Environment.getExternalStorageState();
  System.out.println(""String_Node_Str"" + state);
  if (!state.equals(Environment.MEDIA_MOUNTED))   return;
  HttpClient httpclient=new DefaultHttpClient();
  HttpGet httpget=new HttpGet(getString(R.string.server_url) + ""String_Node_Str"" + garden.getServerId()+ ""String_Node_Str"");
  String result=""String_Node_Str"";
  try {
    HttpResponse response=httpclient.execute(httpget);
    HttpEntity entity=response.getEntity();
    result=EntityUtils.toString(entity);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return;
  }
  System.out.println(""String_Node_Str"" + result);
  Photo[] photos=gson.fromJson(result,Photo[].class);
  try {
    digester=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    return;
  }
  String accessKey=""String_Node_Str"";
  String secretKey=""String_Node_Str"";
  if (s3 == null) {
    BasicAWSCredentials credentials=new BasicAWSCredentials(accessKey,secretKey);
    s3=new AmazonS3Client(credentials);
  }
  for (  Photo photo : photos) {
    String code=garden.getServerId() + ""String_Node_Str"" + photo.getServerId()+ ""String_Node_Str""+ accessKey;
    String fileName=hexCode(code) + ""String_Node_Str"";
    Uri imageUri=writeBitmap2(fileName);
    photo.setUri(imageUri);
    garden.addImage(photo);
  }
}",0.9380053908355797
45423,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
switch (requestCode) {
case EDIT_GARDEN:
    setTitle(garden.getName());
  break;
case USE_CAMERA:
if (resultCode == RESULT_OK) {
  System.out.print(""String_Node_Str"" + imageUri.toString() + ""String_Node_Str"");
  android.database.Cursor cursor=managedQuery(imageUri,new String[]{MediaStore.Images.Media.DATA},null,null,null);
  int column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
  cursor.moveToFirst();
  System.out.println(cursor.getString(column_index));
  if (data != null && data.getData() != null)   imageUri=data.getData();
  System.out.print(""String_Node_Str"" + imageUri.toString() + ""String_Node_Str"");
  cursor=managedQuery(imageUri,new String[]{MediaStore.Images.Media.DATA},null,null,null);
  column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
  cursor.moveToFirst();
  System.out.println(cursor.getString(column_index));
  GardenGnome.addPhoto(garden,new Photo(imageUri));
}
break;
case ADD_PLOT:
if (data != null) {
data.putExtra(""String_Node_Str"",gardenId);
data.putExtra(""String_Node_Str"",gardenView.zoomScale);
float[] values=new float[9], bgvalues=new float[9];
gardenView.dragMatrix.getValues(values);
gardenView.bgDragMatrix.getValues(bgvalues);
data.putExtra(""String_Node_Str"",values);
data.putExtra(""String_Node_Str"",bgvalues);
startActivityForResult(data,0);
overridePendingTransition(0,0);
}
break;
case EDIT_PLOT:
gardenView.zoomScale=data.getFloatExtra(""String_Node_Str"",1);
gardenView.dragMatrix.setValues(data.getFloatArrayExtra(""String_Node_Str""));
gardenView.bgDragMatrix.setValues(data.getFloatArrayExtra(""String_Node_Str""));
gardenView.onAnimationEnd();
if (zoomAutoHidden) zoomControls.setVisibility(View.GONE);
break;
case VIEW_PLOT:
if (zoomAutoHidden) zoomControls.hide();
break;
}
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case EDIT_GARDEN:
    setTitle(garden.getName());
  break;
case USE_CAMERA:
if (resultCode == RESULT_OK) {
  System.out.print(""String_Node_Str"" + imageUri.toString() + ""String_Node_Str"");
  android.database.Cursor cursor=managedQuery(imageUri,new String[]{MediaStore.Images.Media.DATA},null,null,null);
  int column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
  cursor.moveToFirst();
  System.out.println(cursor.getString(column_index));
  if (data != null && data.getData() != null)   imageUri=data.getData();
  System.out.print(""String_Node_Str"" + imageUri.toString() + ""String_Node_Str"");
  cursor=managedQuery(imageUri,new String[]{MediaStore.Images.Media.DATA},null,null,null);
  column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
  cursor.moveToFirst();
  System.out.println(cursor.getString(column_index));
  GardenGnome.addPhoto(garden,new Photo(imageUri));
}
break;
case ADD_PLOT:
if (data != null) {
data.putExtra(""String_Node_Str"",gardenId);
data.putExtra(""String_Node_Str"",gardenView.zoomScale);
float[] values=new float[9], bgvalues=new float[9];
gardenView.dragMatrix.getValues(values);
gardenView.bgDragMatrix.getValues(bgvalues);
data.putExtra(""String_Node_Str"",values);
data.putExtra(""String_Node_Str"",bgvalues);
startActivityForResult(data,EDIT_PLOT);
overridePendingTransition(0,0);
}
break;
case EDIT_PLOT:
gardenView.zoomScale=data.getFloatExtra(""String_Node_Str"",1);
gardenView.dragMatrix.setValues(data.getFloatArrayExtra(""String_Node_Str""));
gardenView.bgDragMatrix.setValues(data.getFloatArrayExtra(""String_Node_Str""));
System.out.println(""String_Node_Str"" + garden.getBounds().toString());
gardenView.onAnimationEnd();
if (zoomAutoHidden) zoomControls.setVisibility(View.GONE);
break;
case VIEW_PLOT:
if (zoomAutoHidden) zoomControls.hide();
break;
}
}",0.96452790818988
45424,"public boolean uploadImages(){
  boolean success=true;
  String accessKey=""String_Node_Str"";
  String secretKey=""String_Node_Str"";
  BasicAWSCredentials credentials=new BasicAWSCredentials(accessKey,secretKey);
  AmazonS3Client s3=new AmazonS3Client(credentials);
  String bucketName=""String_Node_Str"";
  HttpClient httpclient=new DefaultHttpClient();
  for (  Photo photo : garden.getImages()) {
    HttpPost httppost=new HttpPost(getString(R.string.server_url) + ""String_Node_Str"" + garden.getServerId()+ ""String_Node_Str"");
    String json=""String_Node_Str"" + gson.toJson(photo) + ""String_Node_Str"";
    try {
      StringEntity entity=new StringEntity(json);
      entity.setContentType(""String_Node_Str"");
      httppost.setEntity(entity);
      HttpResponse response=httpclient.execute(httppost);
      String result=EntityUtils.toString(response.getEntity());
      photo.setServerId(gson.fromJson(result,int.class));
      GardenGnome.setPhotoId(photo.getPhotoNum(),gson.fromJson(result,int.class));
    }
 catch (    Exception e) {
      success=false;
      e.printStackTrace();
    }
    if (!success || photo.getServerId() == 0)     return false;
    String code=garden.getServerId() + ""String_Node_Str"" + photo.getServerId()+ ""String_Node_Str""+ accessKey;
    String fileName=hexCode(code) + ""String_Node_Str"";
    Uri imageUri=photo.getUri();
    try {
      InputStream stream=getContentResolver().openInputStream(imageUri);
      long fileSize=getContentResolver().openFileDescriptor(imageUri,""String_Node_Str"").getStatSize();
      ObjectMetadata metadata=new ObjectMetadata();
      metadata.setContentLength(fileSize);
      s3.putObject(bucketName,fileName,stream,metadata);
      stream.close();
    }
 catch (    Exception e) {
      success=false;
      e.printStackTrace();
    }
  }
  return success;
}","public boolean uploadImages(){
  String state=Environment.getExternalStorageState();
  System.out.println(""String_Node_Str"" + state);
  if (!state.equals(Environment.MEDIA_MOUNTED) && !state.equals(Environment.MEDIA_MOUNTED_READ_ONLY))   return false;
  boolean success=true;
  String accessKey=""String_Node_Str"";
  String secretKey=""String_Node_Str"";
  BasicAWSCredentials credentials=new BasicAWSCredentials(accessKey,secretKey);
  AmazonS3Client s3=new AmazonS3Client(credentials);
  String bucketName=""String_Node_Str"";
  HttpClient httpclient=new DefaultHttpClient();
  for (  Photo photo : garden.getImages()) {
    HttpPost httppost=new HttpPost(getString(R.string.server_url) + ""String_Node_Str"" + garden.getServerId()+ ""String_Node_Str"");
    String json=""String_Node_Str"" + gson.toJson(photo) + ""String_Node_Str"";
    try {
      StringEntity entity=new StringEntity(json);
      entity.setContentType(""String_Node_Str"");
      httppost.setEntity(entity);
      HttpResponse response=httpclient.execute(httppost);
      String result=EntityUtils.toString(response.getEntity());
      photo.setServerId(gson.fromJson(result,int.class));
      GardenGnome.setPhotoId(photo.getPhotoNum(),gson.fromJson(result,int.class));
    }
 catch (    Exception e) {
      success=false;
      e.printStackTrace();
    }
    if (!success || photo.getServerId() == 0)     return false;
    String code=garden.getServerId() + ""String_Node_Str"" + photo.getServerId()+ ""String_Node_Str""+ accessKey;
    String fileName=hexCode(code) + ""String_Node_Str"";
    Uri imageUri=photo.getUri();
    try {
      InputStream stream=getContentResolver().openInputStream(imageUri);
      long fileSize=getContentResolver().openFileDescriptor(imageUri,""String_Node_Str"").getStatSize();
      ObjectMetadata metadata=new ObjectMetadata();
      metadata.setContentLength(fileSize);
      s3.putObject(bucketName,fileName,stream,metadata);
      stream.close();
    }
 catch (    Exception e) {
      success=false;
      e.printStackTrace();
    }
  }
  return success;
}",0.9429677419354838
45425,"public static void initAll(){
  gardens.clear();
  List<Integer> existing_garden=dh.select_all_garden_pk();
  for (int i=0; i < existing_garden.size(); i++) {
    Garden temp1=dh.select_garden(existing_garden.get(i));
    temp1.setGardenNum(existing_garden.get(i));
    System.out.println(""String_Node_Str"" + existing_garden.get(i));
    gardens.add(temp1);
    List<Integer> existing_photo=dh.select_map_gp2_ph(existing_garden.get(i));
    for (int m=0; m < existing_photo.size(); m++) {
      Photo temp2=dh.select_photo(existing_photo.get(m));
      temp2.setPhotoNum(existing_photo.get(m));
      gardens.get(i).addImage(temp2);
      System.out.println(""String_Node_Str"" + existing_photo.get(m));
    }
    List<Integer> existing_plot=dh.select_map_gp_po(existing_garden.get(i));
    for (int j=0; j < existing_plot.size(); j++) {
      Plot temp2=dh.select_plot(existing_plot.get(j));
      temp2.setPlotNum(existing_plot.get(j));
      gardens.get(i).addPlot(temp2);
      System.out.println(""String_Node_Str"" + existing_plot.get(j));
      List<Integer> existing_plant=dh.select_map_pp_pa(existing_plot.get(j));
      for (int k=0; k < existing_plant.size(); k++) {
        Plant temp3=dh.select_plant(existing_plant.get(k));
        temp3.setPlantNum(existing_plant.get(k));
        gardens.get(i).getPlot(j).addPlant(temp3);
        System.out.println(""String_Node_Str"" + existing_plant.get(k));
        List<Integer> existing_entry=dh.select_map_pe_e(existing_plant.get(k));
        for (int l=0; l < existing_entry.size(); l++) {
          Entry temp4=dh.select_entry(existing_entry.get(l));
          temp4.setEntryNum(existing_entry.get(l));
          gardens.get(i).getPlot(j).getPlant(k).addEntry(temp4);
          System.out.println(""String_Node_Str"" + existing_entry.get(l));
        }
      }
    }
  }
}","public static void initAll(){
  gardens.clear();
  List<Integer> existing_garden=dh.select_all_garden_pk();
  for (int i=0; i < existing_garden.size(); i++) {
    Garden temp1=dh.select_garden(existing_garden.get(i));
    temp1.setGardenNum(existing_garden.get(i));
    System.out.println(""String_Node_Str"" + existing_garden.get(i));
    gardens.add(temp1);
    List<Integer> existing_photo=dh.select_map_gp2_ph(existing_garden.get(i));
    for (int m=0; m < existing_photo.size(); m++) {
      Photo temp2=dh.select_photo(existing_photo.get(m));
      temp2.setPhotoNum(existing_photo.get(m));
      gardens.get(i).addImage(temp2);
      System.out.println(""String_Node_Str"" + existing_photo.get(m));
    }
    List<Integer> existing_plot=dh.select_map_gp_po(existing_garden.get(i));
    for (int j=0; j < existing_plot.size(); j++) {
      Plot temp2=dh.select_plot(existing_plot.get(j));
      temp2.setPlotNum(existing_plot.get(j));
      gardens.get(i).addPlot(temp2);
      System.out.println(""String_Node_Str"" + i);
      System.out.println(temp2.getName() + ""String_Node_Str"" + temp2.getType()+ ""String_Node_Str""+ temp2.getBounds().toString()+ ""String_Node_Str""+ Arrays.toString(temp2.getPoints()));
      System.out.println(""String_Node_Str"" + existing_plot.get(j));
      List<Integer> existing_plant=dh.select_map_pp_pa(existing_plot.get(j));
      for (int k=0; k < existing_plant.size(); k++) {
        Plant temp3=dh.select_plant(existing_plant.get(k));
        temp3.setPlantNum(existing_plant.get(k));
        gardens.get(i).getPlot(j).addPlant(temp3);
        System.out.println(""String_Node_Str"" + existing_plant.get(k));
        List<Integer> existing_entry=dh.select_map_pe_e(existing_plant.get(k));
        for (int l=0; l < existing_entry.size(); l++) {
          Entry temp4=dh.select_entry(existing_entry.get(l));
          temp4.setEntryNum(existing_entry.get(l));
          gardens.get(i).getPlot(j).getPlant(k).addEntry(temp4);
          System.out.println(""String_Node_Str"" + existing_entry.get(l));
        }
      }
    }
  }
}",0.9396907216494844
45426,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  Intent intent=new Intent(this,GardenScreen.class);
  intent.putExtra(""String_Node_Str"",gardens.get(position).getId());
  startActivityForResult(intent,0);
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  Intent intent=new Intent(this,GardenScreen.class);
  System.out.println(""String_Node_Str"" + gardens.get(position).getId());
  intent.putExtra(""String_Node_Str"",gardens.get(position).getId());
  startActivityForResult(intent,0);
}",0.8712522045855379
45427,"public void createPlot(){
  RectF gBounds=mockGarden.getRawBounds();
  int type=extras.getInt(""String_Node_Str"");
  String name=extras.getString(""String_Node_Str"");
  Rect bounds=new Rect((int)gBounds.left,(int)gBounds.top,(int)gBounds.right,(int)gBounds.bottom);
  bounds.inset((int)gBounds.width() / 3,(int)gBounds.height() / 3);
  if (type == Plot.POLY)   plot=new Plot(name,bounds,new float[]{0,0});
 else   plot=new Plot(name,bounds,type);
  mockGarden.addPlot(plot);
}","public void createPlot(){
  RectF gBounds=mockGarden.getRawBounds();
  if (mockGarden.isEmpty()) {
    int width=getWindowManager().getDefaultDisplay().getWidth();
    int height=getWindowManager().getDefaultDisplay().getHeight();
    gBounds=new RectF(0,0,width,height);
  }
  int type=extras.getInt(""String_Node_Str"");
  String name=extras.getString(""String_Node_Str"");
  Rect bounds=new Rect((int)gBounds.left,(int)gBounds.top,(int)gBounds.right,(int)gBounds.bottom);
  bounds.inset((int)gBounds.width() / 3,(int)gBounds.height() / 3);
  System.out.println(bounds);
  if (type == Plot.POLY)   plot=new Plot(name,bounds,new float[]{0,0});
 else   plot=new Plot(name,bounds,type);
  mockGarden.addPlot(plot);
  mockGarden.refreshBounds();
}",0.7802469135802469
45428,"Garden(int resId,String gardenName){
  name=gardenName;
  previewId=resId;
}","Garden(int resId,String gardenName){
  bounds=new RectF(0,0,800,480);
  name=gardenName;
  previewId=resId;
}",0.8216216216216217
45429,"@Override public void onClick(View view){
  EditText et_plot_name=(EditText)findViewById(R.id.et_plot_name);
  if (view.getId() == R.id.b_add_cancel) {
    getIntent().putExtras(new Bundle());
    setResult(RESULT_CANCELED,getIntent());
    finish();
  }
 else   if (et_plot_name.getText().length() == 0)   Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
 else {
    Intent intent=new Intent(this,EditScreen.class);
    Bundle bundle=new Bundle();
    int radioId=((RadioGroup)findViewById(R.id.rg_shape)).getCheckedRadioButtonId();
    int shapeType;
switch (radioId) {
case R.id.rb_rectangle:
      shapeType=Plot.RECT;
    break;
case R.id.rb_ellipse:
  shapeType=Plot.OVAL;
break;
default :
shapeType=Plot.POLY;
break;
}
bundle.putString(""String_Node_Str"",et_plot_name.getText().toString());
bundle.putInt(""String_Node_Str"",shapeType);
intent.putExtras(bundle);
setResult(RESULT_OK,intent);
finish();
}
}","@Override public void onClick(View view){
  EditText et_plot_name=(EditText)findViewById(R.id.et_plot_name);
  if (view.getId() == R.id.b_add_cancel)   finish();
 else   if (et_plot_name.getText().length() == 0)   Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
 else {
    Intent intent=new Intent(this,EditScreen.class);
    Bundle bundle=new Bundle();
    int radioId=((RadioGroup)findViewById(R.id.rg_shape)).getCheckedRadioButtonId();
    int shapeType;
switch (radioId) {
case R.id.rb_rectangle:
      shapeType=Plot.RECT;
    break;
case R.id.rb_ellipse:
  shapeType=Plot.OVAL;
break;
default :
shapeType=Plot.POLY;
break;
}
bundle.putString(""String_Node_Str"",et_plot_name.getText().toString());
bundle.putInt(""String_Node_Str"",shapeType);
intent.putExtras(bundle);
setResult(RESULT_OK,intent);
finish();
}
}",0.94712905059693
45430,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  Bundle extras=data.getExtras();
  if (extras.containsKey(""String_Node_Str"")) {
    extras.putInt(""String_Node_Str"",StartScreen.gardens.indexOf(mockGarden));
    extras.putInt(""String_Node_Str"",zoomLevel);
    float[] values=new float[9], bgvalues=new float[9];
    gardenView.dragMatrix.getValues(values);
    gardenView.bgDragMatrix.getValues(bgvalues);
    extras.putFloatArray(""String_Node_Str"",values);
    extras.putFloatArray(""String_Node_Str"",bgvalues);
    data.putExtras(extras);
    startActivityForResult(data,0);
    overridePendingTransition(0,0);
  }
 else   if (extras.containsKey(""String_Node_Str"")) {
    zoomLevel=extras.getInt(""String_Node_Str"");
    gardenView.dragMatrix.setValues(extras.getFloatArray(""String_Node_Str""));
    gardenView.bgDragMatrix.setValues(extras.getFloatArray(""String_Node_Str""));
    gardenView.onAnimationEnd();
    if (zoomAutoHidden)     zoom.setVisibility(View.GONE);
  }
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (data != null) {
    Bundle extras=data.getExtras();
    if (extras.containsKey(""String_Node_Str"")) {
      extras.putInt(""String_Node_Str"",StartScreen.gardens.indexOf(mockGarden));
      extras.putInt(""String_Node_Str"",zoomLevel);
      float[] values=new float[9], bgvalues=new float[9];
      gardenView.dragMatrix.getValues(values);
      gardenView.bgDragMatrix.getValues(bgvalues);
      extras.putFloatArray(""String_Node_Str"",values);
      extras.putFloatArray(""String_Node_Str"",bgvalues);
      data.putExtras(extras);
      startActivityForResult(data,0);
      overridePendingTransition(0,0);
    }
 else     if (extras.containsKey(""String_Node_Str"")) {
      zoomLevel=extras.getInt(""String_Node_Str"");
      gardenView.dragMatrix.setValues(extras.getFloatArray(""String_Node_Str""));
      gardenView.bgDragMatrix.setValues(extras.getFloatArray(""String_Node_Str""));
      gardenView.onAnimationEnd();
      if (zoomAutoHidden)       zoom.setVisibility(View.GONE);
    }
  }
}",0.968978102189781
45431,"@Override public void onClick(View view){
  handleZoom();
  if (zoomPressed == 0) {
    zoomPressed=1;
    float zoomScalar=1 / getResources().getDimension(R.dimen.zoom_scalar);
    ScaleAnimation anim=new ScaleAnimation(1,zoomScalar,1,zoomScalar,editView.getWidth() / 2f,editView.getHeight() / 2f);
    anim.setDuration(getResources().getInteger(R.integer.zoom_duration));
    editView.startAnimation(anim);
  }
}","@Override public void onClick(View view){
  handleZoom();
  if (zoomPressed == 0) {
    zoomPressed=-1;
    float zoomScalar=1 / getResources().getDimension(R.dimen.zoom_scalar);
    ScaleAnimation anim=new ScaleAnimation(1,zoomScalar,1,zoomScalar,editView.getWidth() / 2f,editView.getHeight() / 2f);
    anim.setDuration(getResources().getInteger(R.integer.zoom_duration));
    editView.startAnimation(anim);
  }
}",0.9987937273823884
45432,"@Override public void onRestoreInstanceState(Bundle savedInstanceState){
  super.onRestoreInstanceState(savedInstanceState);
  gardenView.zoomScale=savedInstanceState.getFloat(""String_Node_Str"");
  boolean prevPortraitMode=savedInstanceState.getBoolean(""String_Node_Str"");
  int orien=getResources().getConfiguration().orientation;
  float[] values=savedInstanceState.getFloatArray(""String_Node_Str"");
  float[] bgvalues=savedInstanceState.getFloatArray(""String_Node_Str"");
  if (orien == Configuration.ORIENTATION_PORTRAIT && !prevPortraitMode) {
    float tmp=values[Matrix.MTRANS_X];
    values[Matrix.MTRANS_X]=-values[Matrix.MTRANS_Y];
    values[Matrix.MTRANS_Y]=tmp;
    tmp=bgvalues[Matrix.MTRANS_X];
    bgvalues[Matrix.MTRANS_X]=-bgvalues[Matrix.MTRANS_Y];
    bgvalues[Matrix.MTRANS_Y]=tmp;
  }
 else   if (orien == Configuration.ORIENTATION_LANDSCAPE && prevPortraitMode) {
    float tmp=values[Matrix.MTRANS_X];
    values[Matrix.MTRANS_X]=values[Matrix.MTRANS_Y];
    values[Matrix.MTRANS_Y]=-tmp;
    tmp=bgvalues[Matrix.MTRANS_X];
    bgvalues[Matrix.MTRANS_X]=bgvalues[Matrix.MTRANS_Y];
    bgvalues[Matrix.MTRANS_Y]=-tmp;
  }
  gardenView.dragMatrix.setValues(values);
  gardenView.bgDragMatrix.setValues(savedInstanceState.getFloatArray(""String_Node_Str""));
  gardenView.onAnimationEnd();
}","@Override public void onRestoreInstanceState(Bundle savedInstanceState){
  super.onRestoreInstanceState(savedInstanceState);
  gardenView.zoomScale=savedInstanceState.getFloat(""String_Node_Str"");
  boolean prevPortraitMode=savedInstanceState.getBoolean(""String_Node_Str"");
  int orien=getResources().getConfiguration().orientation;
  float[] values=savedInstanceState.getFloatArray(""String_Node_Str"");
  float[] bgvalues=savedInstanceState.getFloatArray(""String_Node_Str"");
  if (orien == Configuration.ORIENTATION_PORTRAIT && !prevPortraitMode) {
    float tmp=values[Matrix.MTRANS_X];
    values[Matrix.MTRANS_X]=-values[Matrix.MTRANS_Y];
    values[Matrix.MTRANS_Y]=tmp;
    tmp=bgvalues[Matrix.MTRANS_X];
    bgvalues[Matrix.MTRANS_X]=-bgvalues[Matrix.MTRANS_Y];
    bgvalues[Matrix.MTRANS_Y]=tmp;
  }
 else   if (orien == Configuration.ORIENTATION_LANDSCAPE && prevPortraitMode) {
    float tmp=values[Matrix.MTRANS_X];
    values[Matrix.MTRANS_X]=values[Matrix.MTRANS_Y];
    values[Matrix.MTRANS_Y]=-tmp;
    tmp=bgvalues[Matrix.MTRANS_X];
    bgvalues[Matrix.MTRANS_X]=bgvalues[Matrix.MTRANS_Y];
    bgvalues[Matrix.MTRANS_Y]=-tmp;
  }
  gardenView.dragMatrix.setValues(values);
  gardenView.bgDragMatrix.setValues(bgvalues);
  gardenView.onAnimationEnd();
}",0.9770873786407768
45433,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.m_dragmode:
    if (!dragPlot) {
      dragPlot=true;
      mode_drag.setText(""String_Node_Str"");
    }
 else {
      dragPlot=false;
      mockGarden.refreshBounds();
      mode_drag.setText(""String_Node_Str"");
    }
  break;
case R.id.m_rotatemode:
if (!rotateMode) {
  sb_rotation.setVisibility(View.VISIBLE);
  rotateMode=true;
  mode_rotate.setText(""String_Node_Str"");
}
 else {
  sb_rotation.setVisibility(View.INVISIBLE);
  rotateMode=false;
  mode_rotate.setText(""String_Node_Str"");
}
break;
case R.id.m_change_color:
int color=PreferenceManager.getDefaultSharedPreferences(EditScreen.this).getInt(""String_Node_Str"",Color.WHITE);
new ColorPickerDialog(EditScreen.this,EditScreen.this,color).show();
break;
case R.id.m_save:
newPlot.getShape().getPaint().setStrokeWidth(3);
finish();
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.m_dragmode:
    if (!dragPlot) {
      dragPlot=true;
      mode_drag.setText(""String_Node_Str"");
    }
 else {
      dragPlot=false;
      mockGarden.refreshBounds();
      mode_drag.setText(""String_Node_Str"");
    }
  break;
case R.id.m_rotatemode:
if (!rotateMode) {
  sb_rotation.setVisibility(View.VISIBLE);
  rotateMode=true;
  mode_rotate.setText(""String_Node_Str"");
}
 else {
  sb_rotation.setVisibility(View.INVISIBLE);
  rotateMode=false;
  mode_rotate.setText(""String_Node_Str"");
}
break;
case R.id.m_change_color:
int color=PreferenceManager.getDefaultSharedPreferences(EditScreen.this).getInt(""String_Node_Str"",Color.WHITE);
new ColorPickerDialog(EditScreen.this,EditScreen.this,color).show();
break;
case R.id.m_save:
newPlot.getShape().getPaint().setStrokeWidth(3);
mockGarden.refreshBounds();
finish();
}
return super.onOptionsItemSelected(item);
}",0.98527865404837
45434,"public void onBackPressed(){
  Bundle extras=getIntent().getExtras();
  if (extras.containsKey(""String_Node_Str""))   mockGarden.getPlots().remove(mockGarden.getPlots().size() - 1);
 else {
    float[] d={EditView.X,EditView.Y};
    Matrix inverse=new Matrix();
    EditView.m.invert(inverse);
    inverse.mapPoints(d);
    if (EditView.X != 0 && EditView.Y != 0) {
      newPlot.getShape().getBounds().offset((int)(oldPlot.getShape().getBounds().exactCenterX() - d[0]),(int)(oldPlot.getShape().getBounds().exactCenterY() - d[1]));
      EditView.X=0;
      EditView.Y=0;
    }
    newPlot.getShape().getPaint().setStrokeWidth(3);
    newPlot.setColor(newPlot.getColor());
    newPlot.getShape().getPaint().setColor(oldPlot.getColor());
    newPlot.setAngle(oldPlot.getAngle());
  }
  finish();
}","public void onBackPressed(){
  Bundle extras=getIntent().getExtras();
  if (extras.containsKey(""String_Node_Str""))   mockGarden.getPlots().remove(mockGarden.getPlots().size() - 1);
 else {
    newPlot.getShape().setBounds(oldPlot.getShape().getBounds());
    newPlot.getShape().getPaint().setStrokeWidth(3);
    newPlot.setColor(newPlot.getColor());
    newPlot.getShape().getPaint().setColor(oldPlot.getColor());
    newPlot.setAngle(oldPlot.getAngle());
  }
  mockGarden.refreshBounds();
  finish();
}",0.300462249614792
45435,"@Override public boolean onTouch(View view,MotionEvent event){
  context.handleZoom();
  x=event.getX();
  y=event.getY();
  if (context.getDragPlot()) {
switch (event.getAction()) {
case (MotionEvent.ACTION_DOWN):
      Matrix inv=new Matrix();
    m.invert(inv);
  float[] xy={x,y};
inv.mapPoints(xy);
if (context.newPlot.contains(xy[0],xy[1])) {
focusedPlot=context.newPlot;
tempColor=focusedPlot.getShape().getPaint().getColor();
focusedPlot.getShape().getPaint().setColor(0xFF7BB518);
focusedPlot.getShape().getPaint().setStrokeWidth(5);
status=START_DRAGGING;
}
break;
case (MotionEvent.ACTION_UP):
status=STOP_DRAGGING;
if (focusedPlot != null) {
focusedPlot.getShape().getPaint().setColor(tempColor);
focusedPlot.getShape().getPaint().setStrokeWidth(7);
}
break;
case (MotionEvent.ACTION_MOVE):
if (status == START_DRAGGING && focusedPlot != null) {
X=event.getX();
Y=event.getY();
float[] dxy={x,y,prevX,prevY};
Matrix inverse=new Matrix();
m.invert(inverse);
inverse.mapPoints(dxy);
focusedPlot.getShape().getBounds().offset((int)(-dxy[2] + dxy[0]),(int)(-dxy[3] + dxy[1]));
}
break;
}
}
 else {
if (event.getAction() == MotionEvent.ACTION_DOWN) {
dragMode=false;
downX=x;
downY=y;
focusedPlot=garden.plotAt(x,y,m);
if (focusedPlot != null) {
tempColor=focusedPlot.getShape().getPaint().getColor();
focusedPlot.getShape().getPaint().setColor(0xFF7BB518);
focusedPlot.getShape().getPaint().setStrokeWidth(5);
}
}
 else {
float dx=x - prevX, dy=y - prevY;
dragMatrix.postTranslate(dx / zoomScale,dy / zoomScale);
bgDragMatrix.postTranslate(dx,dy);
if (!dragMode) dragMode=Math.abs(downX - x) > 5 || Math.abs(downY - y) > 5;
if (dragMode && focusedPlot != null) {
focusedPlot.getShape().getPaint().setColor(tempColor);
if (focusedPlot != context.newPlot) focusedPlot.getShape().getPaint().setStrokeWidth(3);
 else focusedPlot.getShape().getPaint().setStrokeWidth(7);
}
}
if (event.getAction() == MotionEvent.ACTION_UP && !dragMode) {
if (focusedPlot != null) {
focusedPlot.getShape().getPaint().setColor(tempColor);
if (focusedPlot != context.newPlot) focusedPlot.getShape().getPaint().setStrokeWidth(3);
 else focusedPlot.getShape().getPaint().setStrokeWidth(7);
}
performClick();
}
}
prevX=x;
prevY=y;
invalidate();
return true;
}","@Override public boolean onTouch(View view,MotionEvent event){
  context.handleZoom();
  x=event.getX();
  y=event.getY();
  if (context.getDragPlot()) {
switch (event.getAction()) {
case (MotionEvent.ACTION_DOWN):
      Matrix inv=new Matrix();
    m.invert(inv);
  float[] xy={x,y};
inv.mapPoints(xy);
if (context.newPlot.contains(xy[0],xy[1])) {
focusedPlot=context.newPlot;
tempColor=focusedPlot.getShape().getPaint().getColor();
focusedPlot.getShape().getPaint().setColor(0xFF7BB518);
focusedPlot.getShape().getPaint().setStrokeWidth(5);
status=START_DRAGGING;
}
break;
case (MotionEvent.ACTION_UP):
status=STOP_DRAGGING;
if (focusedPlot != null) {
focusedPlot.getShape().getPaint().setColor(tempColor);
focusedPlot.getShape().getPaint().setStrokeWidth(7);
}
break;
case (MotionEvent.ACTION_MOVE):
if (status == START_DRAGGING && focusedPlot != null) {
float[] dxy={x,y,prevX,prevY};
Matrix inverse=new Matrix();
m.invert(inverse);
inverse.mapPoints(dxy);
focusedPlot.getShape().getBounds().offset((int)(-dxy[2] + dxy[0]),(int)(-dxy[3] + dxy[1]));
}
break;
}
}
 else {
if (event.getAction() == MotionEvent.ACTION_DOWN) {
dragMode=false;
downX=x;
downY=y;
focusedPlot=garden.plotAt(x,y,m);
if (focusedPlot != null) {
tempColor=focusedPlot.getShape().getPaint().getColor();
focusedPlot.getShape().getPaint().setColor(0xFF7BB518);
focusedPlot.getShape().getPaint().setStrokeWidth(5);
}
}
 else {
float dx=x - prevX, dy=y - prevY;
dragMatrix.postTranslate(dx / zoomScale,dy / zoomScale);
bgDragMatrix.postTranslate(dx,dy);
if (!dragMode) dragMode=Math.abs(downX - x) > 5 || Math.abs(downY - y) > 5;
if (dragMode && focusedPlot != null) {
focusedPlot.getShape().getPaint().setColor(tempColor);
if (focusedPlot != context.newPlot) focusedPlot.getShape().getPaint().setStrokeWidth(3);
 else focusedPlot.getShape().getPaint().setStrokeWidth(7);
}
}
if (event.getAction() == MotionEvent.ACTION_UP && !dragMode) {
if (focusedPlot != null) {
focusedPlot.getShape().getPaint().setColor(tempColor);
if (focusedPlot != context.newPlot) focusedPlot.getShape().getPaint().setStrokeWidth(3);
 else focusedPlot.getShape().getPaint().setStrokeWidth(7);
}
performClick();
}
}
prevX=x;
prevY=y;
invalidate();
return true;
}",0.9928025191183086
45436,"@Override public boolean onTouch(View view,MotionEvent event){
  context.handleZoom();
  x=event.getX();
  y=event.getY();
  if (context.getDragPlot()) {
switch (event.getAction()) {
case (MotionEvent.ACTION_DOWN):
      focusedPlot=garden.plotAt(x,y,m);
    if (focusedPlot == context.newPlot) {
      focusedPlot.getShape().getPaint().setColor(0xFF7BB518);
      focusedPlot.getShape().getPaint().setStrokeWidth(5);
      status=START_DRAGGING;
    }
  break;
case (MotionEvent.ACTION_UP):
status=STOP_DRAGGING;
if (focusedPlot != null) {
focusedPlot.getShape().getPaint().setColor(Color.BLACK);
focusedPlot.getShape().getPaint().setStrokeWidth(3);
}
break;
case (MotionEvent.ACTION_MOVE):
if (status == START_DRAGGING && focusedPlot != null) {
float[] dxy={x,y,prevX,prevY};
Matrix inverse=new Matrix();
m.invert(inverse);
inverse.mapPoints(dxy);
focusedPlot.getShape().getBounds().offset((int)(-dxy[2] + dxy[0]),(int)(-dxy[3] + dxy[1]));
}
break;
}
}
 else {
if (event.getAction() == MotionEvent.ACTION_DOWN) {
dragMode=false;
downX=x;
downY=y;
focusedPlot=garden.plotAt(x,y,m);
if (focusedPlot != null) {
focusedPlot.getShape().getPaint().setColor(0xFF7BB518);
focusedPlot.getShape().getPaint().setStrokeWidth(5);
}
}
 else {
float dx=x - prevX, dy=y - prevY;
dragMatrix.postTranslate(dx / zoomScale,dy / zoomScale);
bgDragMatrix.postTranslate(dx,dy);
if (!dragMode) dragMode=Math.abs(downX - x) > 5 || Math.abs(downY - y) > 5;
if (dragMode && focusedPlot != null) {
focusedPlot.getShape().getPaint().setColor(Color.BLACK);
focusedPlot.getShape().getPaint().setStrokeWidth(3);
}
}
if (event.getAction() == MotionEvent.ACTION_UP && !dragMode) {
if (focusedPlot != null) {
focusedPlot.getShape().getPaint().setColor(Color.BLACK);
focusedPlot.getShape().getPaint().setStrokeWidth(3);
}
performClick();
}
}
prevX=x;
prevY=y;
invalidate();
return true;
}","@Override public boolean onTouch(View view,MotionEvent event){
  context.handleZoom();
  x=event.getX();
  y=event.getY();
  if (context.getDragPlot()) {
switch (event.getAction()) {
case (MotionEvent.ACTION_DOWN):
      Matrix inv=new Matrix();
    m.invert(inv);
  float[] xy={x,y};
inv.mapPoints(xy);
if (context.newPlot.contains(xy[0],xy[1])) {
focusedPlot=context.newPlot;
focusedPlot.getShape().getPaint().setColor(0xFF7BB518);
focusedPlot.getShape().getPaint().setStrokeWidth(5);
status=START_DRAGGING;
}
break;
case (MotionEvent.ACTION_UP):
status=STOP_DRAGGING;
if (focusedPlot != null) {
focusedPlot.getShape().getPaint().setColor(Color.BLACK);
focusedPlot.getShape().getPaint().setStrokeWidth(3);
}
break;
case (MotionEvent.ACTION_MOVE):
if (status == START_DRAGGING && focusedPlot != null) {
float[] dxy={x,y,prevX,prevY};
Matrix inverse=new Matrix();
m.invert(inverse);
inverse.mapPoints(dxy);
focusedPlot.getShape().getBounds().offset((int)(-dxy[2] + dxy[0]),(int)(-dxy[3] + dxy[1]));
}
break;
}
}
 else {
if (event.getAction() == MotionEvent.ACTION_DOWN) {
dragMode=false;
downX=x;
downY=y;
focusedPlot=garden.plotAt(x,y,m);
if (focusedPlot != null) {
focusedPlot.getShape().getPaint().setColor(0xFF7BB518);
focusedPlot.getShape().getPaint().setStrokeWidth(5);
}
}
 else {
float dx=x - prevX, dy=y - prevY;
dragMatrix.postTranslate(dx / zoomScale,dy / zoomScale);
bgDragMatrix.postTranslate(dx,dy);
if (!dragMode) dragMode=Math.abs(downX - x) > 5 || Math.abs(downY - y) > 5;
if (dragMode && focusedPlot != null) {
focusedPlot.getShape().getPaint().setColor(Color.BLACK);
focusedPlot.getShape().getPaint().setStrokeWidth(3);
}
}
if (event.getAction() == MotionEvent.ACTION_UP && !dragMode) {
if (focusedPlot != null) {
focusedPlot.getShape().getPaint().setColor(Color.BLACK);
focusedPlot.getShape().getPaint().setStrokeWidth(3);
}
performClick();
}
}
prevX=x;
prevY=y;
invalidate();
return true;
}",0.9418326693227091
45437,"@Override public void onCreate(Bundle savedInstanceState){
  showFullScreen=getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE).getBoolean(""String_Node_Str"",false);
  if (showFullScreen)   setTheme(android.R.style.Theme_Light_NoTitleBar_Fullscreen);
  super.onCreate(savedInstanceState);
  Bundle extras=getIntent().getExtras();
  if (extras != null && extras.containsKey(""String_Node_Str"")) {
    mockGarden=StartScreen.gardens.get(extras.getInt(""String_Node_Str""));
    setTitle(mockGarden.getName());
  }
 else {
    mockGarden=new Garden(""String_Node_Str"");
    showDialog(0);
  }
  setContentView(R.layout.garden);
  gardenView=(GardenView)findViewById(R.id.garden_view);
  zoom=(ZoomControls)findViewById(R.id.zoom_controls);
  zoomAutoHidden=getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE).getBoolean(""String_Node_Str"",false);
  if (zoomAutoHidden)   zoom.setVisibility(View.GONE);
  zoom.setOnZoomInClickListener(zoomIn);
  zoom.setOnZoomOutClickListener(zoomOut);
  boolean hintsOn=getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE).getBoolean(""String_Node_Str"",true);
  if (hintsOn) {
    ((TextView)findViewById(R.id.garden_hint)).setText(R.string.hint_gardenscreen);
    ((TextView)findViewById(R.id.garden_hint)).setVisibility(View.VISIBLE);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  showFullScreen=getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE).getBoolean(""String_Node_Str"",false);
  if (showFullScreen)   setTheme(android.R.style.Theme_Light_NoTitleBar_Fullscreen);
  super.onCreate(savedInstanceState);
  Bundle extras=getIntent().getExtras();
  if (extras != null && extras.containsKey(""String_Node_Str"")) {
    mockGarden=StartScreen.gardens.get(extras.getInt(""String_Node_Str""));
    setTitle(mockGarden.getName());
  }
 else {
    mockGarden=new Garden(R.drawable.preview,""String_Node_Str"");
    showDialog(0);
  }
  setContentView(R.layout.garden);
  gardenView=(GardenView)findViewById(R.id.garden_view);
  zoom=(ZoomControls)findViewById(R.id.zoom_controls);
  zoomAutoHidden=getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE).getBoolean(""String_Node_Str"",false);
  if (zoomAutoHidden)   zoom.setVisibility(View.GONE);
  zoom.setOnZoomInClickListener(zoomIn);
  zoom.setOnZoomOutClickListener(zoomOut);
  boolean hintsOn=getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE).getBoolean(""String_Node_Str"",true);
  if (hintsOn) {
    ((TextView)findViewById(R.id.garden_hint)).setText(R.string.hint_gardenscreen);
    ((TextView)findViewById(R.id.garden_hint)).setVisibility(View.VISIBLE);
  }
}",0.9927007299270072
45438,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  LauncherApplication app=((LauncherApplication)getApplication());
  mModel=app.setLauncher(this);
  mIconCache=app.getIconCache();
  mDragController=new DragController(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(Environment.getExternalStorageDirectory() + ""String_Node_Str"");
  }
  loadHotseats();
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  registerContentObservers();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
  IntentFilter filter=new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  registerReceiver(mCloseSystemDialogsReceiver,filter);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  LauncherApplication app=((LauncherApplication)getApplication());
  mModel=app.setLauncher(this);
  mIconCache=app.getIconCache();
  mDragController=new DragController(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(Environment.getExternalStorageDirectory() + ""String_Node_Str"");
  }
  loadHotseats();
  checkForLocaleChange();
  setWallpaperDimension();
  setNumScreens();
  setupViews();
  registerContentObservers();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
  IntentFilter filter=new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  registerReceiver(mCloseSystemDialogsReceiver,filter);
}",0.983065198983912
45439,"/** 
 * Loads the default set of favorite packages from an xml file.
 * @param db The database to write the values into
 */
private int loadFavorites(SQLiteDatabase db){
  Intent intent=new Intent(Intent.ACTION_MAIN,null);
  intent.addCategory(Intent.CATEGORY_LAUNCHER);
  ContentValues values=new ContentValues();
  PackageManager packageManager=mContext.getPackageManager();
  int i=0;
  try {
    XmlResourceParser parser=mContext.getResources().getXml(R.xml.default_workspace);
    AttributeSet attrs=Xml.asAttributeSet(parser);
    XmlUtils.beginDocument(parser,TAG_FAVORITES);
    final int depth=parser.getDepth();
    int type;
    while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {
      if (type != XmlPullParser.START_TAG) {
        continue;
      }
      boolean added=false;
      final String name=parser.getName();
      TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.Favorite);
      values.clear();
      values.put(LauncherSettings.Favorites.CONTAINER,LauncherSettings.Favorites.CONTAINER_DESKTOP);
      values.put(LauncherSettings.Favorites.SCREEN,a.getString(R.styleable.Favorite_screen));
      values.put(LauncherSettings.Favorites.CELLX,a.getString(R.styleable.Favorite_x));
      values.put(LauncherSettings.Favorites.CELLY,a.getString(R.styleable.Favorite_y));
      if (TAG_FAVORITE.equals(name)) {
        added=addAppShortcut(db,values,a,packageManager,intent);
      }
 else       if (TAG_SEARCH.equals(name)) {
        added=addSearchWidget(db,values);
      }
 else       if (TAG_CLOCK.equals(name)) {
        added=addClockWidget(db,values);
      }
 else       if (TAG_APPWIDGET.equals(name)) {
        added=addAppWidget(db,values,a,packageManager);
      }
 else       if (TAG_SHORTCUT.equals(name)) {
        added=addUriShortcut(db,values,a);
      }
      if (added)       i++;
      a.recycle();
    }
  }
 catch (  XmlPullParserException e) {
    Log.w(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Log.w(TAG,""String_Node_Str"",e);
  }
  return i;
}","/** 
 * Loads the default set of favorite packages from an xml file.
 * @param db The database to write the values into
 */
private int loadFavorites(SQLiteDatabase db){
  Intent intent=new Intent(Intent.ACTION_MAIN,null);
  intent.addCategory(Intent.CATEGORY_LAUNCHER);
  ContentValues values=new ContentValues();
  PackageManager packageManager=mContext.getPackageManager();
  int i=0;
  try {
    XmlResourceParser parser=getDefaultWorkspace();
    AttributeSet attrs=Xml.asAttributeSet(parser);
    XmlUtils.beginDocument(parser,TAG_FAVORITES);
    final int depth=parser.getDepth();
    int type;
    while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {
      if (type != XmlPullParser.START_TAG) {
        continue;
      }
      boolean added=false;
      final String name=parser.getName();
      TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.Favorite);
      values.clear();
      values.put(LauncherSettings.Favorites.CONTAINER,LauncherSettings.Favorites.CONTAINER_DESKTOP);
      values.put(LauncherSettings.Favorites.SCREEN,a.getString(R.styleable.Favorite_screen));
      values.put(LauncherSettings.Favorites.CELLX,a.getString(R.styleable.Favorite_x));
      values.put(LauncherSettings.Favorites.CELLY,a.getString(R.styleable.Favorite_y));
      if (TAG_FAVORITE.equals(name)) {
        added=addAppShortcut(db,values,a,packageManager,intent);
      }
 else       if (TAG_SEARCH.equals(name)) {
        added=addSearchWidget(db,values);
      }
 else       if (TAG_CLOCK.equals(name)) {
        added=addClockWidget(db,values);
      }
 else       if (TAG_APPWIDGET.equals(name)) {
        added=addAppWidget(db,values,a,packageManager);
      }
 else       if (TAG_SHORTCUT.equals(name)) {
        added=addUriShortcut(db,values,a);
      }
      if (added)       i++;
      a.recycle();
    }
  }
 catch (  XmlPullParserException e) {
    Log.w(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Log.w(TAG,""String_Node_Str"",e);
  }
  return i;
}",0.9889263360616274
45440,"private boolean checkItemPlacement(ItemInfo occupied[][][],ItemInfo item){
  for (int x=item.cellX; x < (item.cellX + item.spanX); x++) {
    for (int y=item.cellY; y < (item.cellY + item.spanY); y++) {
      if (occupied[item.screen][x][y] != null) {
        Log.e(TAG,""String_Node_Str"" + item + ""String_Node_Str""+ item.screen+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ occupied[item.screen][x][y]);
        return false;
      }
    }
  }
  for (int x=item.cellX; x < (item.cellX + item.spanX); x++) {
    for (int y=item.cellY; y < (item.cellY + item.spanY); y++) {
      occupied[item.screen][x][y]=item;
    }
  }
  return true;
}","private boolean checkItemPlacement(ItemInfo occupied[][][],ItemInfo item){
  if (item.container != LauncherSettings.Favorites.CONTAINER_DESKTOP) {
    return true;
  }
  for (int x=item.cellX; x < (item.cellX + item.spanX); x++) {
    for (int y=item.cellY; y < (item.cellY + item.spanY); y++) {
      if (occupied[item.screen][x][y] != null) {
        Log.e(TAG,""String_Node_Str"" + item + ""String_Node_Str""+ item.screen+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ occupied[item.screen][x][y]);
        return false;
      }
    }
  }
  for (int x=item.cellX; x < (item.cellX + item.spanX); x++) {
    for (int y=item.cellY; y < (item.cellY + item.spanY); y++) {
      occupied[item.screen][x][y]=item;
    }
  }
  return true;
}",0.9338078291814946
45441,"@Override protected void setChildrenDrawingCacheEnabled(boolean enabled){
  final int count=getChildCount();
  for (int i=0; i < count; i++) {
    final View view=getChildAt(i);
    view.setDrawingCacheEnabled(enabled);
    view.buildDrawingCache(false);
  }
}","@Override protected void setChildrenDrawingCacheEnabled(boolean enabled){
  final int count=getChildCount();
  for (int i=0; i < count; i++) {
    final View view=getChildAt(i);
    view.setDrawingCacheEnabled(enabled);
    view.buildDrawingCache(true);
  }
}",0.9865125240847784
45442,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLauncher.isWorkspaceLocked()) {
    return false;
  }
  if (mLauncher.isAllAppsVisible()) {
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
    snapToScreen(mCurrentScreen);
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
  mLastMotionX=ev.getX();
mActivePointerId=ev.getPointerId(0);
break;
case MotionEvent.ACTION_MOVE:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final int pointerIndex=ev.findPointerIndex(mActivePointerId);
final float x=filterX(ev.getX(pointerIndex));
final float deltaX=mLastMotionX - x;
mLastMotionX=x;
if (deltaX < 0) {
if (mScrollX > 0) {
  scrollBy(Math.round(Math.max(-mScrollX,deltaX)),0);
  updateWallpaperOffset();
}
}
 else if (deltaX > 0) {
final int availableToScroll=getChildAt(getChildCount() - 1).getRight() - mScrollX - getWidth();
if (availableToScroll > 0) {
  scrollBy(Math.round(Math.min(availableToScroll,deltaX)),0);
  updateWallpaperOffset();
}
}
 else {
awakenScrollBars();
}
}
break;
case MotionEvent.ACTION_UP:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
final int velocityX=(int)velocityTracker.getXVelocity(mActivePointerId);
final int screenWidth=getWidth();
final int whichScreen=(mScrollX + (screenWidth / 2)) / screenWidth;
final float scrolledPos=(float)mScrollX / screenWidth;
if (velocityX > SNAP_VELOCITY && mCurrentScreen > 0) {
final int bound=scrolledPos < whichScreen ? mCurrentScreen - 1 : mCurrentScreen;
snapToScreen(Math.min(whichScreen,bound),velocityX,true);
}
 else if (velocityX < -SNAP_VELOCITY && mCurrentScreen < getChildCount() - 1) {
final int bound=scrolledPos > whichScreen ? mCurrentScreen + 1 : mCurrentScreen;
snapToScreen(Math.max(whichScreen,bound),velocityX,true);
}
 else {
snapToScreen(whichScreen,0,true);
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
resetFilter();
}
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
break;
case MotionEvent.ACTION_CANCEL:
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
resetFilter();
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLauncher.isWorkspaceLocked()) {
    return false;
  }
  if (mLauncher.isAllAppsVisible()) {
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
    snapToScreen(mCurrentScreen);
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
  mLastMotionX=ev.getX();
mActivePointerId=ev.getPointerId(0);
if (mTouchState == TOUCH_STATE_SCROLLING) {
enableChildrenCache(mCurrentScreen - 1,mCurrentScreen + 1);
}
break;
case MotionEvent.ACTION_MOVE:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final int pointerIndex=ev.findPointerIndex(mActivePointerId);
final float x=filterX(ev.getX(pointerIndex));
final float deltaX=mLastMotionX - x;
mLastMotionX=x;
if (deltaX < 0) {
if (mScrollX > 0) {
scrollBy(Math.round(Math.max(-mScrollX,deltaX)),0);
updateWallpaperOffset();
}
}
 else if (deltaX > 0) {
final int availableToScroll=getChildAt(getChildCount() - 1).getRight() - mScrollX - getWidth();
if (availableToScroll > 0) {
scrollBy(Math.round(Math.min(availableToScroll,deltaX)),0);
updateWallpaperOffset();
}
}
 else {
awakenScrollBars();
}
}
break;
case MotionEvent.ACTION_UP:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
final int velocityX=(int)velocityTracker.getXVelocity(mActivePointerId);
final int screenWidth=getWidth();
final int whichScreen=(mScrollX + (screenWidth / 2)) / screenWidth;
final float scrolledPos=(float)mScrollX / screenWidth;
if (velocityX > SNAP_VELOCITY && mCurrentScreen > 0) {
final int bound=scrolledPos < whichScreen ? mCurrentScreen - 1 : mCurrentScreen;
snapToScreen(Math.min(whichScreen,bound),velocityX,true);
}
 else if (velocityX < -SNAP_VELOCITY && mCurrentScreen < getChildCount() - 1) {
final int bound=scrolledPos > whichScreen ? mCurrentScreen + 1 : mCurrentScreen;
snapToScreen(Math.max(whichScreen,bound),velocityX,true);
}
 else {
snapToScreen(whichScreen,0,true);
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
resetFilter();
}
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
break;
case MotionEvent.ACTION_CANCEL:
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
resetFilter();
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}",0.9781273983115888
45443,"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  final boolean workspaceLocked=mLauncher.isWorkspaceLocked();
  final boolean allAppsVisible=mLauncher.isAllAppsVisible();
  if (workspaceLocked || allAppsVisible) {
    return false;
  }
  final int action=ev.getAction();
  if ((action == MotionEvent.ACTION_MOVE) && (mTouchState != TOUCH_STATE_REST)) {
    return true;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_MOVE:
{
      final int pointerIndex=ev.findPointerIndex(mActivePointerId);
      final float x=ev.getX(pointerIndex);
      final float y=ev.getY(pointerIndex);
      final int xDiff=(int)Math.abs(x - mLastMotionX);
      final int yDiff=(int)Math.abs(y - mLastMotionY);
      final int touchSlop=mTouchSlop;
      boolean xPaged=xDiff > mPagingTouchSlop;
      boolean xMoved=xDiff > touchSlop;
      boolean yMoved=yDiff > touchSlop;
      if (xMoved || yMoved) {
        if (xPaged) {
          mTouchState=TOUCH_STATE_SCROLLING;
          mLastMotionX=x;
          enableChildrenCache(0,getChildCount());
        }
        if (mAllowLongPress) {
          mAllowLongPress=false;
          final View currentScreen=getChildAt(mCurrentScreen);
          currentScreen.cancelLongPress();
        }
      }
      break;
    }
case MotionEvent.ACTION_DOWN:
{
    final float x=ev.getX();
    final float y=ev.getY();
    mLastMotionX=x;
    mLastMotionY=y;
    mActivePointerId=ev.getPointerId(0);
    mAllowLongPress=true;
    mTouchState=mScroller.isFinished() ? TOUCH_STATE_REST : TOUCH_STATE_SCROLLING;
    break;
  }
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mTouchState != TOUCH_STATE_SCROLLING) {
  final CellLayout currentScreen=(CellLayout)getChildAt(mCurrentScreen);
  if (!currentScreen.lastDownOnOccupiedCell()) {
    getLocationOnScreen(mTempCell);
    final int pointerIndex=ev.findPointerIndex(mActivePointerId);
    mWallpaperManager.sendWallpaperCommand(getWindowToken(),""String_Node_Str"",mTempCell[0] + (int)ev.getX(pointerIndex),mTempCell[1] + (int)ev.getY(pointerIndex),0,null);
  }
}
clearChildrenCache();
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
mAllowLongPress=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return mTouchState != TOUCH_STATE_REST;
}","@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  final boolean workspaceLocked=mLauncher.isWorkspaceLocked();
  final boolean allAppsVisible=mLauncher.isAllAppsVisible();
  if (workspaceLocked || allAppsVisible) {
    return false;
  }
  final int action=ev.getAction();
  if ((action == MotionEvent.ACTION_MOVE) && (mTouchState != TOUCH_STATE_REST)) {
    return true;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_MOVE:
{
      final int pointerIndex=ev.findPointerIndex(mActivePointerId);
      final float x=ev.getX(pointerIndex);
      final float y=ev.getY(pointerIndex);
      final int xDiff=(int)Math.abs(x - mLastMotionX);
      final int yDiff=(int)Math.abs(y - mLastMotionY);
      final int touchSlop=mTouchSlop;
      boolean xPaged=xDiff > mPagingTouchSlop;
      boolean xMoved=xDiff > touchSlop;
      boolean yMoved=yDiff > touchSlop;
      if (xMoved || yMoved) {
        if (xPaged) {
          mTouchState=TOUCH_STATE_SCROLLING;
          mLastMotionX=x;
          enableChildrenCache(mCurrentScreen - 1,mCurrentScreen + 1);
        }
        if (mAllowLongPress) {
          mAllowLongPress=false;
          final View currentScreen=getChildAt(mCurrentScreen);
          currentScreen.cancelLongPress();
        }
      }
      break;
    }
case MotionEvent.ACTION_DOWN:
{
    final float x=ev.getX();
    final float y=ev.getY();
    mLastMotionX=x;
    mLastMotionY=y;
    mActivePointerId=ev.getPointerId(0);
    mAllowLongPress=true;
    mTouchState=mScroller.isFinished() ? TOUCH_STATE_REST : TOUCH_STATE_SCROLLING;
    break;
  }
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mTouchState != TOUCH_STATE_SCROLLING) {
  final CellLayout currentScreen=(CellLayout)getChildAt(mCurrentScreen);
  if (!currentScreen.lastDownOnOccupiedCell()) {
    getLocationOnScreen(mTempCell);
    final int pointerIndex=ev.findPointerIndex(mActivePointerId);
    mWallpaperManager.sendWallpaperCommand(getWindowToken(),""String_Node_Str"",mTempCell[0] + (int)ev.getX(pointerIndex),mTempCell[1] + (int)ev.getY(pointerIndex),0,null);
  }
}
clearChildrenCache();
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
mAllowLongPress=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return mTouchState != TOUCH_STATE_REST;
}",0.9897233201581028
45444,"/** 
 * Initializes various states for this workspace.
 */
private void initWorkspace(){
  Context context=getContext();
  mScroller=new Scroller(context,new OvershootInterpolator());
  mCurrentScreen=mDefaultScreen;
  Launcher.setScreen(mCurrentScreen);
  LauncherApplication app=(LauncherApplication)context.getApplicationContext();
  mIconCache=app.getIconCache();
  final ViewConfiguration configuration=ViewConfiguration.get(getContext());
  mTouchSlop=configuration.getScaledTouchSlop();
  mPagingTouchSlop=configuration.getScaledPagingTouchSlop();
  mMaximumVelocity=configuration.getScaledMaximumFlingVelocity();
}","/** 
 * Initializes various states for this workspace.
 */
private void initWorkspace(){
  Context context=getContext();
  mScrollInterpolator=new WorkspaceOvershootInterpolator();
  mScroller=new Scroller(context,mScrollInterpolator);
  mCurrentScreen=mDefaultScreen;
  Launcher.setScreen(mCurrentScreen);
  LauncherApplication app=(LauncherApplication)context.getApplicationContext();
  mIconCache=app.getIconCache();
  final ViewConfiguration configuration=ViewConfiguration.get(getContext());
  mTouchSlop=configuration.getScaledTouchSlop();
  mPagingTouchSlop=configuration.getScaledPagingTouchSlop();
  mMaximumVelocity=configuration.getScaledMaximumFlingVelocity();
}",0.925925925925926
45445,"void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta != 0 ? screenDelta * 300 : 300;
  awakenScrollBars(duration);
  if (!mScroller.isFinished())   mScroller.abortAnimation();
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}","void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta != 0 ? 200 + screenDelta * 100 : 300;
  awakenScrollBars(duration);
  if (!mScroller.isFinished())   mScroller.abortAnimation();
  mScrollInterpolator.setDistance(screenDelta);
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}",0.9614035087719298
45446,"public void run(){
  mPosX=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
  mZoomDirty=false;
}","public void run(){
  mRollo.mScrollPos=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
  mZoomDirty=false;
}",0.9580838323353292
45447,"private boolean checkClickOK(){
  return (Math.abs(mAllApps.mVelocity) < 0.4f) && (Math.abs(mAllApps.mPosX - Math.round(mAllApps.mPosX)) < 0.4f);
}","private boolean checkClickOK(){
  return (Math.abs(mAllApps.mVelocity) < 0.4f) && (Math.abs(mScrollPos - Math.round(mScrollPos)) < 0.4f);
}",0.916083916083916
45448,"private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mPosX) * mColumnsPerPage,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}","private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mRollo.mScrollPos) * mColumnsPerPage,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}",0.9688888888888888
45449,"@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  final boolean isPortrait=getWidth() < getHeight();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if ((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1])) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mPosX,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocityTracker=VelocityTracker.obtain();
      mVelocityTracker.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1]) ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mPosX);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocityTracker.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if ((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1])) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocityTracker.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocityTracker.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  final boolean isPortrait=getWidth() < getHeight();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if ((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1])) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocityTracker=VelocityTracker.obtain();
      mVelocityTracker.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1]) ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocityTracker.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if ((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1])) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocityTracker.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocityTracker.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}",0.9981965734896304
45450,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mPosX);
    final int currentPageCol=currentSelection % mColumnsPerPage;
    final int currentPageRow=(currentSelection - (currentTopRow * mColumnsPerPage)) / mRowsPerPage;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        mRollo.setHomeSelected(SELECTED_NONE);
        int lastRowCount=iconCount % mColumnsPerPage;
        if (lastRowCount == 0) {
          lastRowCount=mColumnsPerPage;
        }
        newSelection=iconCount - lastRowCount + (mColumnsPerPage / 2);
        if (newSelection >= iconCount) {
          newSelection=iconCount - 1;
        }
        int target=(newSelection / mColumnsPerPage) - (mRowsPerPage - 1);
        if (target < 0) {
          target=0;
        }
        if (currentTopRow != target) {
          mRollo.moveTo(target);
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - mColumnsPerPage;
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - mColumnsPerPage;
          mRollo.moveTo(newSelection / mColumnsPerPage);
        }
 else         if (currentPageRow != 0) {
          newSelection=currentTopRow * mRowsPerPage;
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / mColumnsPerPage + (iconCount % mColumnsPerPage == 0 ? 0 : 1);
  final int currentRow=currentSelection / mColumnsPerPage;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      if (currentSelection < 0) {
        newSelection=0;
      }
 else {
        newSelection=currentSelection + mColumnsPerPage;
      }
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= mRowsPerPage - 1) {
        mRollo.moveTo((newSelection / mColumnsPerPage) - mRowsPerPage + 1);
      }
    }
 else {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (mLastSelection != SELECTION_HOME) {
if (currentPageCol > 0) {
  newSelection=currentSelection - 1;
}
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if (mLastSelection != SELECTION_HOME) {
if ((currentPageCol < mColumnsPerPage - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (iconCount > 0) {
    final boolean isPortrait=getWidth() < getHeight();
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mRollo.mScrollPos);
    final int currentPageCol=currentSelection % mColumnsPerPage;
    final int currentPageRow=(currentSelection - (currentTopRow * mColumnsPerPage)) / mRowsPerPage;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        if (isPortrait) {
          mRollo.setHomeSelected(SELECTED_NONE);
          int lastRowCount=iconCount % mColumnsPerPage;
          if (lastRowCount == 0) {
            lastRowCount=mColumnsPerPage;
          }
          newSelection=iconCount - lastRowCount + (mColumnsPerPage / 2);
          if (newSelection >= iconCount) {
            newSelection=iconCount - 1;
          }
          int target=(newSelection / mColumnsPerPage) - (mRowsPerPage - 1);
          if (target < 0) {
            target=0;
          }
          if (currentTopRow != target) {
            mRollo.moveTo(target);
          }
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - mColumnsPerPage;
          if (currentTopRow > newSelection / mColumnsPerPage) {
            mRollo.moveTo(newSelection / mColumnsPerPage);
          }
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - mColumnsPerPage;
          mRollo.moveTo(newSelection / mColumnsPerPage);
        }
 else         if (currentPageRow != 0) {
          newSelection=currentTopRow * mRowsPerPage;
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / mColumnsPerPage + (iconCount % mColumnsPerPage == 0 ? 0 : 1);
  final int currentRow=currentSelection / mColumnsPerPage;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      if (currentSelection < 0) {
        newSelection=0;
      }
 else {
        newSelection=currentSelection + mColumnsPerPage;
      }
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= mRowsPerPage - 1) {
        mRollo.moveTo((newSelection / mColumnsPerPage) - mRowsPerPage + 1);
      }
    }
 else     if (isPortrait) {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (mLastSelection != SELECTION_HOME) {
if (currentPageCol > 0) {
  newSelection=currentSelection - 1;
}
}
 else if (!isPortrait) {
newSelection=((int)(mRollo.mScrollPos) * mColumnsPerPage) + (mRowsPerPage / 2 * mColumnsPerPage) + mColumnsPerPage - 1;
mRollo.setHomeSelected(SELECTED_NONE);
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if (mLastSelection != SELECTION_HOME) {
if (!isPortrait && (currentPageCol == mColumnsPerPage - 1 || currentSelection == iconCount - 1)) {
newSelection=-1;
mRollo.setHomeSelected(SELECTED_FOCUSED);
}
 else if ((currentPageCol < mColumnsPerPage - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}",0.8651026392961877
45451,"int chooseTappedIcon(int x,int y,float pos){
  y+=(pos - ((int)pos)) * (mTouchYBorders[1] - mTouchYBorders[0]);
  int col=-1;
  int row=-1;
  final int columnsCount=mAllApps.mColumnsPerPage;
  for (int i=0; i < columnsCount; i++) {
    if (x >= mTouchXBorders[i] && x < mTouchXBorders[i + 1]) {
      col=i;
      break;
    }
  }
  final int rowsCount=mAllApps.mRowsPerPage;
  for (int i=0; i < rowsCount; i++) {
    if (y >= mTouchYBorders[i] && y < mTouchYBorders[i + 1]) {
      row=i;
      break;
    }
  }
  if (row < 0 || col < 0) {
    return -1;
  }
  int index=(((int)pos) * columnsCount) + (row * columnsCount) + col;
  if (index >= mState.iconCount) {
    return -1;
  }
 else {
    return index;
  }
}","int chooseTappedIcon(int x,int y){
  float pos=mScrollPos;
  y+=(pos - ((int)pos)) * (mTouchYBorders[1] - mTouchYBorders[0]);
  int col=-1;
  int row=-1;
  final int columnsCount=mAllApps.mColumnsPerPage;
  for (int i=0; i < columnsCount; i++) {
    if (x >= mTouchXBorders[i] && x < mTouchXBorders[i + 1]) {
      col=i;
      break;
    }
  }
  final int rowsCount=mAllApps.mRowsPerPage;
  for (int i=0; i < rowsCount; i++) {
    if (y >= mTouchYBorders[i] && y < mTouchYBorders[i + 1]) {
      row=i;
      break;
    }
  }
  if (row < 0 || col < 0) {
    return -1;
  }
  int index=(((int)pos) * columnsCount) + (row * columnsCount) + col;
  if (index >= mState.iconCount) {
    return -1;
  }
 else {
    return index;
  }
}",0.9764542936288088
45452,"@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mSurrendered)   return;
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mPosX) * mColumnsPerPage;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (mColumnsPerPage * mRowsPerPage)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}","@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mSurrendered)   return;
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mRollo.mScrollPos) * mColumnsPerPage;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (mColumnsPerPage * mRowsPerPage)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}",0.9933269780743564
45453,"public void dumpState(){
  Log.d(TAG,""String_Node_Str"" + mRS);
  Log.d(TAG,""String_Node_Str"" + mRollo);
  ApplicationInfo.dumpApplicationInfoList(TAG,""String_Node_Str"",mAllAppsList);
  Log.d(TAG,""String_Node_Str"" + mArrowNavigation);
  Log.d(TAG,""String_Node_Str"" + mStartedScrolling);
  Log.d(TAG,""String_Node_Str"" + mLastSelection);
  Log.d(TAG,""String_Node_Str"" + mLastSelectedIcon);
  Log.d(TAG,""String_Node_Str"" + mVelocityTracker);
  Log.d(TAG,""String_Node_Str"" + mTouchTracking);
  Log.d(TAG,""String_Node_Str"" + mShouldGainFocus);
  Log.d(TAG,""String_Node_Str"" + mZoomDirty);
  Log.d(TAG,""String_Node_Str"" + mAnimateNextZoom);
  Log.d(TAG,""String_Node_Str"" + mZoom);
  Log.d(TAG,""String_Node_Str"" + mPosX);
  Log.d(TAG,""String_Node_Str"" + mVelocity);
  Log.d(TAG,""String_Node_Str"" + mMessageProc);
  if (mRollo != null) {
    mRollo.dumpState();
  }
  if (mRS != null) {
    mRS.contextDump(0);
  }
}","public void dumpState(){
  Log.d(TAG,""String_Node_Str"" + mRS);
  Log.d(TAG,""String_Node_Str"" + mRollo);
  ApplicationInfo.dumpApplicationInfoList(TAG,""String_Node_Str"",mAllAppsList);
  Log.d(TAG,""String_Node_Str"" + mArrowNavigation);
  Log.d(TAG,""String_Node_Str"" + mStartedScrolling);
  Log.d(TAG,""String_Node_Str"" + mLastSelection);
  Log.d(TAG,""String_Node_Str"" + mLastSelectedIcon);
  Log.d(TAG,""String_Node_Str"" + mVelocityTracker);
  Log.d(TAG,""String_Node_Str"" + mTouchTracking);
  Log.d(TAG,""String_Node_Str"" + mShouldGainFocus);
  Log.d(TAG,""String_Node_Str"" + mZoomDirty);
  Log.d(TAG,""String_Node_Str"" + mAnimateNextZoom);
  Log.d(TAG,""String_Node_Str"" + mZoom);
  Log.d(TAG,""String_Node_Str"" + mRollo.mScrollPos);
  Log.d(TAG,""String_Node_Str"" + mVelocity);
  Log.d(TAG,""String_Node_Str"" + mMessageProc);
  if (mRollo != null) {
    mRollo.dumpState();
  }
  if (mRS != null) {
    mRS.contextDump(0);
  }
}",0.9923329682365828
45454,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRS.mMessageCallback=null;
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRS.mMessageCallback=null;
  mZoomDirty=true;
  mHaveSurface=false;
}",0.8600682593856656
45455,"void dirtyCheck(){
  if (mZoomDirty) {
    setZoom(mZoom,mAnimateNextZoom);
  }
}","void dirtyCheck(){
  if (mZoomDirty) {
    setZoom(mNextZoom,mAnimateNextZoom);
  }
}",0.9759036144578314
45456,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  if (mRollo == null) {
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
  }
  mRollo.dirtyCheck();
  mRollo.resize(w,h);
  mRS.mMessageCallback=mMessageProc=new AAMessage();
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  mHaveSurface=true;
  if (mRollo == null) {
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
  }
  mRollo.dirtyCheck();
  mRollo.resize(w,h);
  mRS.mMessageCallback=mMessageProc=new AAMessage();
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}",0.9823380992430614
45457,"/** 
 * Zoom to the specifed level.
 * @param zoom [0..1] 0 is hidden, 1 is open
 */
public void zoom(float zoom,boolean animate){
  cancelLongPress();
  if (mRollo == null) {
    mZoomDirty=true;
    mZoom=zoom;
    mAnimateNextZoom=animate;
    return;
  }
 else {
    mRollo.setZoom(zoom,animate);
  }
}","/** 
 * Zoom to the specifed level.
 * @param zoom [0..1] 0 is hidden, 1 is open
 */
public void zoom(float zoom,boolean animate){
  cancelLongPress();
  mNextZoom=zoom;
  mAnimateNextZoom=animate;
  if (mRollo == null || !mHaveSurface) {
    mZoomDirty=true;
    mZoom=zoom;
    return;
  }
 else {
    mRollo.setZoom(zoom,animate);
  }
}",0.8558139534883721
45458,"/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount - 1;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}","/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}",0.9965337954939342
45459,"public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null && mRollo.mHasSurface) {
      mRollo.addApp(index,item);
      mRollo.mState.iconCount++;
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null) {
      mRollo.addApp(index,item);
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}",0.9227166276346604
45460,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  mState.iconCount=count;
  for (int i=0; i < mState.iconCount; i++) {
    createAppIconAllocations(i,list.get(i));
    uploadAppIcon(i,list.get(i));
  }
  saveAppsList();
}",0.8036529680365296
45461,"private void uploadAppIcon(int index,ApplicationInfo item){
  mIcons[index]=Allocation.createFromBitmap(mRS,item.iconBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mIcons[index],item.iconBitmap.getWidth(),item.iconBitmap.getHeight());
  mLabels[index]=Allocation.createFromBitmap(mRS,item.titleBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mLabels[index],item.titleBitmap.getWidth(),item.titleBitmap.getHeight());
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
  mIconIds[index]=mIcons[index].getID();
  mLabelIds[index]=mLabels[index].getID();
}","private void uploadAppIcon(int index,ApplicationInfo item){
  if (mIconIds[index] != mIcons[index].getID()) {
    throw new IllegalStateException(""String_Node_Str"" + index + ""String_Node_Str""+ mIcons[index].getID()+ ""String_Node_Str""+ mIconIds[index]+ ""String_Node_Str""+ item);
  }
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
}",0.1591623036649214
45462,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}",0.8441814595660749
45463,"public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null && mRollo.mHasSurface) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}",0.9523026315789472
45464,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  createAppIconAllocations(index,item);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
  mRollo.mState.iconCount++;
}",0.9389920424403184
45465,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null && mRollo.mHasSurface) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}",0.982484076433121
45466,"/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount - 1;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}","/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}",0.9965337954939342
45467,"public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null && mRollo.mHasSurface) {
      mRollo.addApp(index,item);
      mRollo.mState.iconCount++;
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null) {
      mRollo.addApp(index,item);
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}",0.9227166276346604
45468,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  mState.iconCount=count;
  for (int i=0; i < mState.iconCount; i++) {
    createAppIconAllocations(i,list.get(i));
    uploadAppIcon(i,list.get(i));
  }
  saveAppsList();
}",0.8036529680365296
45469,"private void uploadAppIcon(int index,ApplicationInfo item){
  mIcons[index]=Allocation.createFromBitmap(mRS,item.iconBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mIcons[index],item.iconBitmap.getWidth(),item.iconBitmap.getHeight());
  mLabels[index]=Allocation.createFromBitmap(mRS,item.titleBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mLabels[index],item.titleBitmap.getWidth(),item.titleBitmap.getHeight());
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
  mIconIds[index]=mIcons[index].getID();
  mLabelIds[index]=mLabels[index].getID();
}","private void uploadAppIcon(int index,ApplicationInfo item){
  if (mIconIds[index] != mIcons[index].getID()) {
    throw new IllegalStateException(""String_Node_Str"" + index + ""String_Node_Str""+ mIcons[index].getID()+ ""String_Node_Str""+ mIconIds[index]+ ""String_Node_Str""+ item);
  }
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
}",0.1591623036649214
45470,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}",0.8441814595660749
45471,"public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null && mRollo.mHasSurface) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}",0.9523026315789472
45472,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  createAppIconAllocations(index,item);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
  mRollo.mState.iconCount++;
}",0.9389920424403184
45473,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null && mRollo.mHasSurface) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}",0.982484076433121
45474,"@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
  String reason=intent.getStringExtra(""String_Node_Str"");
  if (!""String_Node_Str"".equals(reason)) {
    boolean animate=true;
    closeAllApps(animate);
  }
}","@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
  String reason=intent.getStringExtra(""String_Node_Str"");
  if (!""String_Node_Str"".equals(reason)) {
    boolean animate=true;
    if (mPaused || ""String_Node_Str"".equals(reason)) {
      animate=false;
    }
    closeAllApps(animate);
  }
}",0.8576388888888888
45475,"@Override protected void onPause(){
  super.onPause();
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  mDragController.cancelDrag();
  unregisterReceiver(mCloseSystemDialogsReceiver);
}","@Override protected void onPause(){
  super.onPause();
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  mDragController.cancelDrag();
}",0.8547008547008547
45476,"@Override public void onDestroy(){
  super.onDestroy();
  try {
    mAppWidgetHost.stopListening();
  }
 catch (  NullPointerException ex) {
    Log.w(TAG,""String_Node_Str"",ex);
  }
  TextKeyListener.getInstance().release();
  mModel.stopLoader();
  unbindDesktopItems();
  AppInfoCache.unbindDrawables();
  getContentResolver().unregisterContentObserver(mWidgetObserver);
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
}","@Override public void onDestroy(){
  super.onDestroy();
  try {
    mAppWidgetHost.stopListening();
  }
 catch (  NullPointerException ex) {
    Log.w(TAG,""String_Node_Str"",ex);
  }
  TextKeyListener.getInstance().release();
  mModel.stopLoader();
  unbindDesktopItems();
  AppInfoCache.unbindDrawables();
  getContentResolver().unregisterContentObserver(mWidgetObserver);
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  unregisterReceiver(mCloseSystemDialogsReceiver);
}",0.9447453954496208
45477,"@Override protected void onResume(){
  super.onResume();
  IntentFilter filter=new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  registerReceiver(mCloseSystemDialogsReceiver,filter);
  if (mRestoring) {
    mWorkspaceLoading=true;
    mModel.startLoader(this,true);
    mRestoring=false;
  }
  if (mIsNewIntent) {
    mWorkspace.post(new Runnable(){
      public void run(){
        stopSearch();
      }
    }
);
  }
  mIsNewIntent=false;
}","@Override protected void onResume(){
  super.onResume();
  mPaused=false;
  if (mRestoring) {
    mWorkspaceLoading=true;
    mModel.startLoader(this,true);
    mRestoring=false;
  }
  if (mIsNewIntent) {
    mWorkspace.post(new Runnable(){
      public void run(){
        stopSearch();
      }
    }
);
  }
  mIsNewIntent=false;
}",0.8215661103979461
45478,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mDragController=new DragController(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  registerContentObservers();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mDragController=new DragController(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  registerContentObservers();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
  IntentFilter filter=new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  registerReceiver(mCloseSystemDialogsReceiver,filter);
}",0.9375
45479,"/** 
 * Things to test when changing this code. - Home from workspace - from center screen - from other screens - Home from all apps - Back from all apps - Launch app from workspace and quit - with back - with home - Launch app from all apps and quit - with back - with home - Go to a screen that's not the default, then all apps, and launch and app, and go back - with back -with home - On workspace, long press power and go back - with back - with home - On all apps, long press power and go back - with back - with home - On workspace, power off - On all apps, power off - Launch an app and turn off the screen while in that app - Go back with home key - Go back with back key - From all apps - From workspace
 */
void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
    mWorkspace.startFading(true);
  }
}","/** 
 * Things to test when changing this code. - Home from workspace - from center screen - from other screens - Home from all apps - from center screen - from other screens - Back from all apps - from center screen - from other screens - Launch app from workspace and quit - with back - with home - Launch app from all apps and quit - with back - with home - Go to a screen that's not the default, then all apps, and launch and app, and go back - with back -with home - On workspace, long press power and go back - with back - with home - On all apps, long press power and go back - with back - with home - On workspace, power off - On all apps, power off - Launch an app and turn off the screen while in that app - Go back with home key - Go back with back key  TODO: make this not go to workspace - From all apps - From workspace
 */
void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
    mWorkspace.startFading(true);
  }
}",0.9416304872165944
45480,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty && mAllAppsList != null) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}",0.9601328903654484
45481,"/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount - 1;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}","/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}",0.9965337954939342
45482,"public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null && mRollo.mHasSurface) {
      mRollo.addApp(index,item);
      mRollo.mState.iconCount++;
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null) {
      mRollo.addApp(index,item);
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}",0.9227166276346604
45483,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  mState.iconCount=count;
  for (int i=0; i < mState.iconCount; i++) {
    createAppIconAllocations(i,list.get(i));
    uploadAppIcon(i,list.get(i));
  }
  saveAppsList();
}",0.8036529680365296
45484,"private void uploadAppIcon(int index,ApplicationInfo item){
  mIcons[index]=Allocation.createFromBitmap(mRS,item.iconBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mIcons[index],item.iconBitmap.getWidth(),item.iconBitmap.getHeight());
  mLabels[index]=Allocation.createFromBitmap(mRS,item.titleBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mLabels[index],item.titleBitmap.getWidth(),item.titleBitmap.getHeight());
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
  mIconIds[index]=mIcons[index].getID();
  mLabelIds[index]=mLabels[index].getID();
}","private void uploadAppIcon(int index,ApplicationInfo item){
  if (mIconIds[index] != mIcons[index].getID()) {
    throw new IllegalStateException(""String_Node_Str"" + index + ""String_Node_Str""+ mIcons[index].getID()+ ""String_Node_Str""+ mIconIds[index]+ ""String_Node_Str""+ item);
  }
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
}",0.1591623036649214
45485,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}",0.8441814595660749
45486,"public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null && mRollo.mHasSurface) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}",0.9523026315789472
45487,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  createAppIconAllocations(index,item);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
  mRollo.mState.iconCount++;
}",0.9389920424403184
45488,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null && mRollo.mHasSurface) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}",0.982484076433121
45489,"@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
  String reason=intent.getStringExtra(""String_Node_Str"");
  if (!""String_Node_Str"".equals(reason)) {
    boolean animate=true;
    closeAllApps(animate);
  }
}","@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
  String reason=intent.getStringExtra(""String_Node_Str"");
  if (!""String_Node_Str"".equals(reason)) {
    boolean animate=true;
    if (mPaused || ""String_Node_Str"".equals(reason)) {
      animate=false;
    }
    closeAllApps(animate);
  }
}",0.8576388888888888
45490,"@Override protected void onPause(){
  super.onPause();
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  mDragController.cancelDrag();
  unregisterReceiver(mCloseSystemDialogsReceiver);
}","@Override protected void onPause(){
  super.onPause();
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  mDragController.cancelDrag();
}",0.8547008547008547
45491,"@Override public void onDestroy(){
  super.onDestroy();
  try {
    mAppWidgetHost.stopListening();
  }
 catch (  NullPointerException ex) {
    Log.w(TAG,""String_Node_Str"",ex);
  }
  TextKeyListener.getInstance().release();
  mModel.stopLoader();
  unbindDesktopItems();
  AppInfoCache.unbindDrawables();
  getContentResolver().unregisterContentObserver(mWidgetObserver);
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
}","@Override public void onDestroy(){
  super.onDestroy();
  try {
    mAppWidgetHost.stopListening();
  }
 catch (  NullPointerException ex) {
    Log.w(TAG,""String_Node_Str"",ex);
  }
  TextKeyListener.getInstance().release();
  mModel.stopLoader();
  unbindDesktopItems();
  AppInfoCache.unbindDrawables();
  getContentResolver().unregisterContentObserver(mWidgetObserver);
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  unregisterReceiver(mCloseSystemDialogsReceiver);
}",0.9447453954496208
45492,"@Override protected void onResume(){
  super.onResume();
  IntentFilter filter=new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  registerReceiver(mCloseSystemDialogsReceiver,filter);
  if (mRestoring) {
    mWorkspaceLoading=true;
    mModel.startLoader(this,true);
    mRestoring=false;
  }
}","@Override protected void onResume(){
  super.onResume();
  mPaused=false;
  if (mRestoring) {
    mWorkspaceLoading=true;
    mModel.startLoader(this,true);
    mRestoring=false;
  }
}",0.7370600414078675
45493,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mDragController=new DragController(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  registerContentObservers();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mDragController=new DragController(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  registerContentObservers();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
  IntentFilter filter=new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  registerReceiver(mCloseSystemDialogsReceiver,filter);
}",0.9375
45494,"/** 
 * Things to test when changing this code. - Home from workspace - from center screen - from other screens - Home from all apps - Back from all apps - Launch app from workspace and quit - with back - with home - Launch app from all apps and quit - with back - with home - Go to a screen that's not the default, then all apps, and launch and app, and go back - with back -with home - On workspace, long press power and go back - with back - with home - On all apps, long press power and go back - with back - with home - On workspace, power off - On all apps, power off - Launch an app and turn off the screen while in that app - Go back with home key - Go back with back key - From all apps - From workspace
 */
void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
  }
}","/** 
 * Things to test when changing this code. - Home from workspace - from center screen - from other screens - Home from all apps - from center screen - from other screens - Back from all apps - from center screen - from other screens - Launch app from workspace and quit - with back - with home - Launch app from all apps and quit - with back - with home - Go to a screen that's not the default, then all apps, and launch and app, and go back - with back -with home - On workspace, long press power and go back - with back - with home - On all apps, long press power and go back - with back - with home - On workspace, power off - On all apps, power off - Launch an app and turn off the screen while in that app - Go back with home key - Go back with back key  TODO: make this not go to workspace - From all apps - From workspace
 */
void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
  }
}",0.9396508728179552
45495,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty && mAllAppsList != null) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}",0.9601328903654484
45496,"/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount - 1;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}","/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}",0.9965337954939342
45497,"public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null && mRollo.mHasSurface) {
      mRollo.addApp(index,item);
      mRollo.mState.iconCount++;
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null) {
      mRollo.addApp(index,item);
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}",0.9227166276346604
45498,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  mState.iconCount=count;
  for (int i=0; i < mState.iconCount; i++) {
    createAppIconAllocations(i,list.get(i));
    uploadAppIcon(i,list.get(i));
  }
  saveAppsList();
}",0.8036529680365296
45499,"private void uploadAppIcon(int index,ApplicationInfo item){
  mIcons[index]=Allocation.createFromBitmap(mRS,item.iconBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mIcons[index],item.iconBitmap.getWidth(),item.iconBitmap.getHeight());
  mLabels[index]=Allocation.createFromBitmap(mRS,item.titleBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mLabels[index],item.titleBitmap.getWidth(),item.titleBitmap.getHeight());
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
  mIconIds[index]=mIcons[index].getID();
  mLabelIds[index]=mLabels[index].getID();
}","private void uploadAppIcon(int index,ApplicationInfo item){
  if (mIconIds[index] != mIcons[index].getID()) {
    throw new IllegalStateException(""String_Node_Str"" + index + ""String_Node_Str""+ mIcons[index].getID()+ ""String_Node_Str""+ mIconIds[index]+ ""String_Node_Str""+ item);
  }
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
}",0.1591623036649214
45500,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}",0.8441814595660749
45501,"public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null && mRollo.mHasSurface) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}",0.9523026315789472
45502,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  createAppIconAllocations(index,item);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
  mRollo.mState.iconCount++;
}",0.9389920424403184
45503,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null && mRollo.mHasSurface) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}",0.982484076433121
45504,"/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
  boolean update=false;
  boolean remove=false;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
      update=true;
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
        remove=true;
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
        update=true;
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (update || modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (remove || removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}","/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}",0.9750820938767626
45505,"/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
  boolean update=false;
  boolean remove=false;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
      update=true;
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
        remove=true;
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
        update=true;
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (update || modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (remove || removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}","/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}",0.9750820938767626
45506,"/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
  boolean update=false;
  boolean remove=false;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
      update=true;
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
        remove=true;
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
        update=true;
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (update || modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (remove || removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}","/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}",0.9750820938767626
45507,"/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
  boolean update=false;
  boolean remove=false;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
      update=true;
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
        remove=true;
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
        update=true;
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (update || modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (remove || removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}","/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}",0.9750820938767626
45508,"@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
}","@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
  String reason=intent.getStringExtra(""String_Node_Str"");
  if (!""String_Node_Str"".equals(reason)) {
    boolean animate=true;
    closeAllApps(animate);
  }
}",0.5297619047619048
45509,"void closeSystemDialogs(){
  closeAllApps(true);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}","void closeSystemDialogs(){
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9583333333333334
45510,"void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
    mWorkspace.startFading(true);
  }
}","/** 
 * Things to test when changing this code: - Home from workspace - from center screen - from other screens - Home from all apps - Back from all apps - Launch app from workspace and quit - with back - with home - Launch app from all apps and quit - with back - with home - On workspace, long press power and go back - with back - with home - On all apps, long press power and go back - with back - with home - On workspace, power off - On all apps, power off
 */
void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
    mWorkspace.startFading(true);
  }
}",0.5258883248730964
45511,"private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=mAllAppsList.added;
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}","private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=(ArrayList<ApplicationInfo>)mAllAppsList.data.clone();
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}",0.9462528387585164
45512,"private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=mAllAppsList.added;
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}","private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=(ArrayList<ApplicationInfo>)mAllAppsList.data.clone();
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}",0.9462528387585164
45513,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    boolean alreadyOnHome=((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
    boolean allAppsVisible=isAllAppsVisible();
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen(alreadyOnHome && !allAppsVisible);
    }
    closeAllApps(alreadyOnHome && allAppsVisible);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}",0.8203991130820399
45514,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}","void closeSystemDialogs(){
  closeAllApps(true);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9872958257713248
45515,"void moveToDefaultScreen(){
  snapToScreen(mDefaultScreen);
  getChildAt(mDefaultScreen).requestFocus();
}","void moveToDefaultScreen(boolean animate){
  snapToScreen(mDefaultScreen,animate);
  getChildAt(mDefaultScreen).requestFocus();
}",0.902127659574468
45516,"void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}","void snapToScreen(int whichScreen,boolean animate){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,animate ? duration : 1);
  invalidate();
}",0.9696169088507266
45517,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    boolean alreadyOnHome=((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
    boolean allAppsVisible=isAllAppsVisible();
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen(alreadyOnHome && !allAppsVisible);
    }
    closeAllApps(alreadyOnHome && allAppsVisible);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}",0.8203991130820399
45518,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}","void closeSystemDialogs(){
  closeAllApps(true);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9872958257713248
45519,"void moveToDefaultScreen(){
  snapToScreen(mDefaultScreen);
  getChildAt(mDefaultScreen).requestFocus();
}","void moveToDefaultScreen(boolean animate){
  snapToScreen(mDefaultScreen,animate);
  getChildAt(mDefaultScreen).requestFocus();
}",0.902127659574468
45520,"void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}","void snapToScreen(int whichScreen,boolean animate){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,animate ? duration : 1);
  invalidate();
}",0.9696169088507266
45521,"@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (!event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}","@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (event.isTracking() && !event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}",0.986146095717884
45522,"private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=mAllAppsList.added;
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}","private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=(ArrayList<ApplicationInfo>)mAllAppsList.data.clone();
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}",0.9462528387585164
45523,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mWaitingForResult=false;
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}",0.974716652136007
45524,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
}","void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9447619047619048
45525,"@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (!event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}","@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (event.isTracking() && !event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}",0.986146095717884
45526,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mWaitingForResult=false;
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}",0.974716652136007
45527,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
}","void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9447619047619048
45528,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mWaitingForResult=false;
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}",0.974716652136007
45529,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
}","void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9447619047619048
45530,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mWaitingForResult=false;
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}",0.974716652136007
45531,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
}","void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9447619047619048
45532,"@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (!event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}","@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (event.isTracking() && !event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}",0.986146095717884
45533,"private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=mAllAppsList.added;
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}","private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=(ArrayList<ApplicationInfo>)mAllAppsList.data.clone();
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}",0.9462528387585164
45534,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    boolean alreadyOnHome=((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
    boolean allAppsVisible=isAllAppsVisible();
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen(alreadyOnHome && !allAppsVisible);
    }
    closeAllApps(alreadyOnHome && allAppsVisible);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}",0.8203991130820399
45535,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}","void closeSystemDialogs(){
  closeAllApps(true);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9872958257713248
45536,"void moveToDefaultScreen(){
  snapToScreen(mDefaultScreen);
  getChildAt(mDefaultScreen).requestFocus();
}","void moveToDefaultScreen(boolean animate){
  snapToScreen(mDefaultScreen,animate);
  getChildAt(mDefaultScreen).requestFocus();
}",0.902127659574468
45537,"void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}","void snapToScreen(int whichScreen,boolean animate){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,animate ? duration : 1);
  invalidate();
}",0.9696169088507266
45538,"@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (!event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}","@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (event.isTracking() && !event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}",0.986146095717884
45539,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    boolean alreadyOnHome=((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
    boolean allAppsVisible=isAllAppsVisible();
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen(alreadyOnHome && !allAppsVisible);
    }
    closeAllApps(alreadyOnHome && allAppsVisible);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}",0.8203991130820399
45540,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}","void closeSystemDialogs(){
  closeAllApps(true);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}",0.9872958257713248
45541,"void moveToDefaultScreen(){
  snapToScreen(mDefaultScreen);
  getChildAt(mDefaultScreen).requestFocus();
}","void moveToDefaultScreen(boolean animate){
  snapToScreen(mDefaultScreen,animate);
  getChildAt(mDefaultScreen).requestFocus();
}",0.902127659574468
45542,"void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}","void snapToScreen(int whichScreen,boolean animate){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,animate ? duration : 1);
  invalidate();
}",0.9696169088507266
45543,"public boolean onLongClick(View v){
switch (v.getId()) {
case R.id.previous_screen:
    showPreviousPreview(v);
  return true;
case R.id.next_screen:
showNextPreview(v);
return true;
}
if (isWorkspaceLocked()) {
return false;
}
if (!(v instanceof CellLayout)) {
v=(View)v.getParent();
}
CellLayout.CellInfo cellInfo=(CellLayout.CellInfo)v.getTag();
if (cellInfo == null) {
return true;
}
if (mWorkspace.allowLongPress()) {
if (cellInfo.cell == null) {
if (cellInfo.valid) {
mWorkspace.setAllowLongPress(false);
showAddDialog(cellInfo);
}
}
 else {
if (!(cellInfo.cell instanceof Folder)) {
mWorkspace.startDrag(cellInfo);
}
}
}
return true;
}","public boolean onLongClick(View v){
switch (v.getId()) {
case R.id.previous_screen:
    if (!isAllAppsVisible()) {
      mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
      showPreviousPreview(v);
    }
  return true;
case R.id.next_screen:
if (!isAllAppsVisible()) {
  mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
  showNextPreview(v);
}
return true;
}
if (isWorkspaceLocked()) {
return false;
}
if (!(v instanceof CellLayout)) {
v=(View)v.getParent();
}
CellLayout.CellInfo cellInfo=(CellLayout.CellInfo)v.getTag();
if (cellInfo == null) {
return true;
}
if (mWorkspace.allowLongPress()) {
if (cellInfo.cell == null) {
if (cellInfo.valid) {
mWorkspace.setAllowLongPress(false);
showAddDialog(cellInfo);
}
}
 else {
if (!(cellInfo.cell instanceof Folder)) {
mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
mWorkspace.startDrag(cellInfo);
}
}
}
return true;
}",0.7469458987783595
45544,"/** 
 * Finds all the views we need and configure them properly.
 */
private void setupViews(){
  DragController dragController=mDragController;
  DragLayer dragLayer=(DragLayer)findViewById(R.id.drag_layer);
  dragLayer.setDragController(dragController);
  mAllAppsGrid=(AllAppsView)dragLayer.findViewById(R.id.all_apps_view);
  mAllAppsGrid.setLauncher(this);
  mAllAppsGrid.setDragController(dragController);
  mAllAppsGrid.setWillNotDraw(false);
  mAllAppsGrid.setFocusable(false);
  mWorkspace=(Workspace)dragLayer.findViewById(R.id.workspace);
  final Workspace workspace=mWorkspace;
  DeleteZone deleteZone=(DeleteZone)dragLayer.findViewById(R.id.delete_zone);
  mDeleteZone=deleteZone;
  mHandleView=(HandleView)findViewById(R.id.all_apps_button);
  mHandleView.setLauncher(this);
  mHandleView.setOnClickListener(this);
  mPreviousView=(ImageView)dragLayer.findViewById(R.id.previous_screen);
  mNextView=(ImageView)dragLayer.findViewById(R.id.next_screen);
  Drawable previous=mPreviousView.getDrawable();
  Drawable next=mNextView.getDrawable();
  mWorkspace.setIndicators(previous,next);
  mPreviousView.setOnLongClickListener(this);
  mNextView.setOnLongClickListener(this);
  workspace.setOnLongClickListener(this);
  workspace.setDragController(dragController);
  workspace.setLauncher(this);
  deleteZone.setLauncher(this);
  deleteZone.setDragController(dragController);
  deleteZone.setHandle(mHandleView);
  dragController.setDragScoller(workspace);
  dragController.setDragListener(deleteZone);
  dragController.setScrollView(dragLayer);
  dragController.addDropTarget(workspace);
  dragController.addDropTarget(deleteZone);
}","/** 
 * Finds all the views we need and configure them properly.
 */
private void setupViews(){
  DragController dragController=mDragController;
  DragLayer dragLayer=(DragLayer)findViewById(R.id.drag_layer);
  dragLayer.setDragController(dragController);
  mAllAppsGrid=(AllAppsView)dragLayer.findViewById(R.id.all_apps_view);
  mAllAppsGrid.setLauncher(this);
  mAllAppsGrid.setDragController(dragController);
  mAllAppsGrid.setWillNotDraw(false);
  mAllAppsGrid.setFocusable(false);
  mWorkspace=(Workspace)dragLayer.findViewById(R.id.workspace);
  final Workspace workspace=mWorkspace;
  DeleteZone deleteZone=(DeleteZone)dragLayer.findViewById(R.id.delete_zone);
  mDeleteZone=deleteZone;
  mHandleView=(HandleView)findViewById(R.id.all_apps_button);
  mHandleView.setLauncher(this);
  mHandleView.setOnClickListener(this);
  mPreviousView=(ImageView)dragLayer.findViewById(R.id.previous_screen);
  mNextView=(ImageView)dragLayer.findViewById(R.id.next_screen);
  Drawable previous=mPreviousView.getDrawable();
  Drawable next=mNextView.getDrawable();
  mWorkspace.setIndicators(previous,next);
  mPreviousView.setHapticFeedbackEnabled(false);
  mPreviousView.setOnLongClickListener(this);
  mNextView.setHapticFeedbackEnabled(false);
  mNextView.setOnLongClickListener(this);
  workspace.setOnLongClickListener(this);
  workspace.setDragController(dragController);
  workspace.setLauncher(this);
  deleteZone.setLauncher(this);
  deleteZone.setDragController(dragController);
  deleteZone.setHandle(mHandleView);
  dragController.setDragScoller(workspace);
  dragController.setDragListener(deleteZone);
  dragController.setScrollView(dragLayer);
  dragController.addDropTarget(workspace);
  dragController.addDropTarget(deleteZone);
}",0.9722386296515062
45545,"/** 
 * Adds the specified child in the specified screen. The position and dimension of the child are defined by x, y, spanX and spanY.
 * @param child The child to add in one of the workspace's screens.
 * @param screen The screen in which to add the child.
 * @param spanX The number of cells spanned horizontally by the child.
 * @param spanY The number of cells spanned vertically by the child.
 */
void fitInScreen(View child,int screen,int spanX,int spanY){
  if (screen < 0 || screen >= getChildCount()) {
    throw new IllegalStateException(""String_Node_Str"" + getChildCount());
  }
  final CellLayout group=(CellLayout)getChildAt(screen);
  boolean vacant=group.getVacantCell(mTempCell,spanX,spanY);
  if (vacant) {
    group.addView(child,new CellLayout.LayoutParams(mTempCell[0],mTempCell[1],spanX,spanY));
    child.setOnLongClickListener(mLongClickListener);
    if (!(child instanceof Folder)) {
      child.setOnLongClickListener(mLongClickListener);
    }
    if (child instanceof DropTarget) {
      mDragController.addDropTarget((DropTarget)child);
    }
  }
}","/** 
 * Adds the specified child in the specified screen. The position and dimension of the child are defined by x, y, spanX and spanY.
 * @param child The child to add in one of the workspace's screens.
 * @param screen The screen in which to add the child.
 * @param spanX The number of cells spanned horizontally by the child.
 * @param spanY The number of cells spanned vertically by the child.
 */
void fitInScreen(View child,int screen,int spanX,int spanY){
  if (screen < 0 || screen >= getChildCount()) {
    throw new IllegalStateException(""String_Node_Str"" + getChildCount());
  }
  final CellLayout group=(CellLayout)getChildAt(screen);
  boolean vacant=group.getVacantCell(mTempCell,spanX,spanY);
  if (vacant) {
    group.addView(child,new CellLayout.LayoutParams(mTempCell[0],mTempCell[1],spanX,spanY));
    child.setHapticFeedbackEnabled(false);
    child.setOnLongClickListener(mLongClickListener);
    if (child instanceof DropTarget) {
      mDragController.addDropTarget((DropTarget)child);
    }
  }
}",0.8613625535969509
45546,"/** 
 * Adds the specified child in the specified screen. The position and dimension of the child are defined by x, y, spanX and spanY.
 * @param child The child to add in one of the workspace's screens.
 * @param screen The screen in which to add the child.
 * @param x The X position of the child in the screen's grid.
 * @param y The Y position of the child in the screen's grid.
 * @param spanX The number of cells spanned horizontally by the child.
 * @param spanY The number of cells spanned vertically by the child.
 * @param insert When true, the child is inserted at the beginning of the children list.
 */
void addInScreen(View child,int screen,int x,int y,int spanX,int spanY,boolean insert){
  if (screen < 0 || screen >= getChildCount()) {
    throw new IllegalStateException(""String_Node_Str"" + getChildCount());
  }
  clearVacantCache();
  final CellLayout group=(CellLayout)getChildAt(screen);
  CellLayout.LayoutParams lp=(CellLayout.LayoutParams)child.getLayoutParams();
  if (lp == null) {
    lp=new CellLayout.LayoutParams(x,y,spanX,spanY);
  }
 else {
    lp.cellX=x;
    lp.cellY=y;
    lp.cellHSpan=spanX;
    lp.cellVSpan=spanY;
  }
  group.addView(child,insert ? 0 : -1,lp);
  if (!(child instanceof Folder)) {
    child.setOnLongClickListener(mLongClickListener);
  }
  if (child instanceof DropTarget) {
    mDragController.addDropTarget((DropTarget)child);
  }
}","/** 
 * Adds the specified child in the specified screen. The position and dimension of the child are defined by x, y, spanX and spanY.
 * @param child The child to add in one of the workspace's screens.
 * @param screen The screen in which to add the child.
 * @param x The X position of the child in the screen's grid.
 * @param y The Y position of the child in the screen's grid.
 * @param spanX The number of cells spanned horizontally by the child.
 * @param spanY The number of cells spanned vertically by the child.
 * @param insert When true, the child is inserted at the beginning of the children list.
 */
void addInScreen(View child,int screen,int x,int y,int spanX,int spanY,boolean insert){
  if (screen < 0 || screen >= getChildCount()) {
    throw new IllegalStateException(""String_Node_Str"" + getChildCount());
  }
  clearVacantCache();
  final CellLayout group=(CellLayout)getChildAt(screen);
  CellLayout.LayoutParams lp=(CellLayout.LayoutParams)child.getLayoutParams();
  if (lp == null) {
    lp=new CellLayout.LayoutParams(x,y,spanX,spanY);
  }
 else {
    lp.cellX=x;
    lp.cellY=y;
    lp.cellHSpan=spanX;
    lp.cellVSpan=spanY;
  }
  group.addView(child,insert ? 0 : -1,lp);
  if (!(child instanceof Folder)) {
    child.setHapticFeedbackEnabled(false);
    child.setOnLongClickListener(mLongClickListener);
  }
  if (child instanceof DropTarget) {
    mDragController.addDropTarget((DropTarget)child);
  }
}",0.984778761061947
45547,"private void onDropExternal(int x,int y,Object dragInfo,CellLayout cellLayout,boolean insertAtFirst){
  ItemInfo info=(ItemInfo)dragInfo;
  View view;
switch (info.itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
    if (info.container == NO_ID) {
      info=new ApplicationInfo((ApplicationInfo)info);
    }
  view=mLauncher.createShortcut(R.layout.application,cellLayout,(ApplicationInfo)info);
break;
case LauncherSettings.Favorites.ITEM_TYPE_USER_FOLDER:
view=FolderIcon.fromXml(R.layout.folder_icon,mLauncher,(ViewGroup)getChildAt(mCurrentScreen),((UserFolderInfo)info));
break;
default :
throw new IllegalStateException(""String_Node_Str"" + info.itemType);
}
cellLayout.addView(view,insertAtFirst ? 0 : -1);
view.setOnLongClickListener(mLongClickListener);
if (view instanceof DropTarget) {
mDragController.addDropTarget((DropTarget)view);
}
mTargetCell=estimateDropCell(x,y,1,1,view,cellLayout,mTargetCell);
cellLayout.onDropChild(view,mTargetCell);
CellLayout.LayoutParams lp=(CellLayout.LayoutParams)view.getLayoutParams();
LauncherModel.addOrMoveItemInDatabase(mLauncher,info,LauncherSettings.Favorites.CONTAINER_DESKTOP,mCurrentScreen,lp.cellX,lp.cellY);
}","private void onDropExternal(int x,int y,Object dragInfo,CellLayout cellLayout,boolean insertAtFirst){
  ItemInfo info=(ItemInfo)dragInfo;
  View view;
switch (info.itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
    if (info.container == NO_ID) {
      info=new ApplicationInfo((ApplicationInfo)info);
    }
  view=mLauncher.createShortcut(R.layout.application,cellLayout,(ApplicationInfo)info);
break;
case LauncherSettings.Favorites.ITEM_TYPE_USER_FOLDER:
view=FolderIcon.fromXml(R.layout.folder_icon,mLauncher,(ViewGroup)getChildAt(mCurrentScreen),((UserFolderInfo)info));
break;
default :
throw new IllegalStateException(""String_Node_Str"" + info.itemType);
}
cellLayout.addView(view,insertAtFirst ? 0 : -1);
view.setHapticFeedbackEnabled(false);
view.setOnLongClickListener(mLongClickListener);
if (view instanceof DropTarget) {
mDragController.addDropTarget((DropTarget)view);
}
mTargetCell=estimateDropCell(x,y,1,1,view,cellLayout,mTargetCell);
cellLayout.onDropChild(view,mTargetCell);
CellLayout.LayoutParams lp=(CellLayout.LayoutParams)view.getLayoutParams();
LauncherModel.addOrMoveItemInDatabase(mLauncher,info,LauncherSettings.Favorites.CONTAINER_DESKTOP,mCurrentScreen,lp.cellX,lp.cellY);
}",0.9848605577689244
45548,"/** 
 * Used to inflate the Workspace from XML.
 * @param context The application's context.
 * @param attrs The attribtues set containing the Workspace's customization values.
 * @param defStyle Unused.
 */
public Workspace(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  mWallpaperManager=WallpaperManager.getInstance(context);
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.Workspace,defStyle,0);
  mDefaultScreen=a.getInt(R.styleable.Workspace_defaultScreen,1);
  a.recycle();
  initWorkspace();
}","/** 
 * Used to inflate the Workspace from XML.
 * @param context The application's context.
 * @param attrs The attribtues set containing the Workspace's customization values.
 * @param defStyle Unused.
 */
public Workspace(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  mWallpaperManager=WallpaperManager.getInstance(context);
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.Workspace,defStyle,0);
  mDefaultScreen=a.getInt(R.styleable.Workspace_defaultScreen,1);
  a.recycle();
  setHapticFeedbackEnabled(false);
  initWorkspace();
}",0.9694323144104804
45549,"public boolean isOpaque(){
  if (mZoomDirty) {
    return mNextZoom > 0.999f;
  }
 else {
    if (mRollo == null) {
      return false;
    }
 else {
      return mRollo.mMessageProc.mZoom > 0.999f;
    }
  }
}","public boolean isOpaque(){
  if (mZoomDirty) {
    return mNextZoom > 0.999f;
  }
 else {
    if (mMessageProc == null) {
      return false;
    }
 else {
      return mMessageProc.mZoom > 0.999f;
    }
  }
}",0.9451073985680192
45550,"public void run(){
  mPosX=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
}","public void run(){
  mPosX=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
  mZoomDirty=false;
}",0.933774834437086
45551,"private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}","private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}",0.985685071574642
45552,"private void initRs(){
  ScriptC.Builder sb=new ScriptC.Builder(mRS);
  sb.setScript(mRes,R.raw.rollo3);
  sb.setRoot(true);
  sb.addDefines(mDefines);
  sb.setType(mParams.mType,""String_Node_Str"",Defines.ALLOC_PARAMS);
  sb.setType(mState.mType,""String_Node_Str"",Defines.ALLOC_STATE);
  mInvokeMove=sb.addInvokable(""String_Node_Str"");
  mInvokeFling=sb.addInvokable(""String_Node_Str"");
  mInvokeMoveTo=sb.addInvokable(""String_Node_Str"");
  mInvokeResetWAR=sb.addInvokable(""String_Node_Str"");
  mInvokeSetZoom=sb.addInvokable(""String_Node_Str"");
  mScript=sb.create();
  mScript.setClearColor(0.0f,0.0f,0.0f,0.0f);
  mScript.bindAllocation(mParams.mAlloc,Defines.ALLOC_PARAMS);
  mScript.bindAllocation(mState.mAlloc,Defines.ALLOC_STATE);
  mScript.bindAllocation(mAllocIconIds,Defines.ALLOC_ICON_IDS);
  mScript.bindAllocation(mAllocLabelIds,Defines.ALLOC_LABEL_IDS);
  mMessageProc=new AAMessage();
  mRS.mMessageCallback=mMessageProc;
  mRS.contextBindRootScript(mScript);
}","private void initRs(){
  ScriptC.Builder sb=new ScriptC.Builder(mRS);
  sb.setScript(mRes,R.raw.rollo3);
  sb.setRoot(true);
  sb.addDefines(mDefines);
  sb.setType(mParams.mType,""String_Node_Str"",Defines.ALLOC_PARAMS);
  sb.setType(mState.mType,""String_Node_Str"",Defines.ALLOC_STATE);
  mInvokeMove=sb.addInvokable(""String_Node_Str"");
  mInvokeFling=sb.addInvokable(""String_Node_Str"");
  mInvokeMoveTo=sb.addInvokable(""String_Node_Str"");
  mInvokeResetWAR=sb.addInvokable(""String_Node_Str"");
  mInvokeSetZoom=sb.addInvokable(""String_Node_Str"");
  mScript=sb.create();
  mScript.setClearColor(0.0f,0.0f,0.0f,0.0f);
  mScript.bindAllocation(mParams.mAlloc,Defines.ALLOC_PARAMS);
  mScript.bindAllocation(mState.mAlloc,Defines.ALLOC_STATE);
  mScript.bindAllocation(mAllocIconIds,Defines.ALLOC_ICON_IDS);
  mScript.bindAllocation(mAllocLabelIds,Defines.ALLOC_LABEL_IDS);
  mRS.contextBindRootScript(mScript);
}",0.963395225464191
45553,"@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocity=VelocityTracker.obtain();
      mVelocity.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected(y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1] ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawX=(int)ev.getRawX();
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocity.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocity.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mMessageProc.mPosX,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocity=VelocityTracker.obtain();
      mVelocity.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected(y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1] ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawX=(int)ev.getRawX();
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mMessageProc.mPosX);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocity.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocity.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}",0.9976658886295432
45554,"public boolean isVisible(){
  if (mZoomDirty) {
    return mNextZoom > 0.001f;
  }
 else {
    if (mRollo == null) {
      return false;
    }
 else {
      return mRollo.mMessageProc.mZoom > 0.001f;
    }
  }
}","public boolean isVisible(){
  if (mZoomDirty) {
    return mNextZoom > 0.001f;
  }
 else {
    if (mMessageProc == null) {
      return false;
    }
 else {
      return mMessageProc.mZoom > 0.001f;
    }
  }
}",0.9453681710213776
45555,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (mArrowNavigation && iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mRollo.mMessageProc.mPosX);
    final int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    final int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        mRollo.setHomeSelected(SELECTED_NONE);
        int lastRowCount=iconCount % Defines.COLUMNS_PER_PAGE;
        if (lastRowCount == 0) {
          lastRowCount=Defines.COLUMNS_PER_PAGE;
        }
        newSelection=iconCount - lastRowCount + (Defines.COLUMNS_PER_PAGE / 2);
        if (newSelection >= iconCount) {
          newSelection=iconCount - 1;
        }
        int target=(newSelection / Defines.COLUMNS_PER_PAGE) - (Defines.ROWS_PER_PAGE - 1);
        if (target < 0) {
          target=0;
        }
        if (currentTopRow != target) {
          mRollo.moveTo(target);
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
          mRollo.moveTo(newSelection / Defines.COLUMNS_PER_PAGE);
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / Defines.COLUMNS_PER_PAGE + (iconCount % Defines.COLUMNS_PER_PAGE == 0 ? 0 : 1);
  final int currentRow=currentSelection / Defines.COLUMNS_PER_PAGE;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= Defines.ROWS_PER_PAGE - 1) {
        mRollo.moveTo((newSelection / Defines.COLUMNS_PER_PAGE) - Defines.ROWS_PER_PAGE + 1);
      }
    }
 else {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (mArrowNavigation && iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mMessageProc.mPosX);
    final int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    final int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        mRollo.setHomeSelected(SELECTED_NONE);
        int lastRowCount=iconCount % Defines.COLUMNS_PER_PAGE;
        if (lastRowCount == 0) {
          lastRowCount=Defines.COLUMNS_PER_PAGE;
        }
        newSelection=iconCount - lastRowCount + (Defines.COLUMNS_PER_PAGE / 2);
        if (newSelection >= iconCount) {
          newSelection=iconCount - 1;
        }
        int target=(newSelection / Defines.COLUMNS_PER_PAGE) - (Defines.ROWS_PER_PAGE - 1);
        if (target < 0) {
          target=0;
        }
        if (currentTopRow != target) {
          mRollo.moveTo(target);
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
          mRollo.moveTo(newSelection / Defines.COLUMNS_PER_PAGE);
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / Defines.COLUMNS_PER_PAGE + (iconCount % Defines.COLUMNS_PER_PAGE == 0 ? 0 : 1);
  final int currentRow=currentSelection / Defines.COLUMNS_PER_PAGE;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= Defines.ROWS_PER_PAGE - 1) {
        mRollo.moveTo((newSelection / Defines.COLUMNS_PER_PAGE) - Defines.ROWS_PER_PAGE + 1);
      }
    }
 else {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}",0.9989594172736732
45556,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mNextZoom,mNextAnimate);
      mZoomDirty=false;
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mNextZoom,mNextAnimate);
    }
  }
}",0.917391304347826
45557,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
    mRollo.dirtyCheck();
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
    mRollo.dirtyCheck();
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  mRS.mMessageCallback=mMessageProc=new AAMessage();
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}",0.960060286360211
45558,"@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else     if (hasWindowFocus) {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (Defines.COLUMNS_PER_PAGE * Defines.ROWS_PER_PAGE)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}","@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else     if (hasWindowFocus) {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (Defines.COLUMNS_PER_PAGE * Defines.ROWS_PER_PAGE)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}",0.996760758907913
45559,"public boolean isOpaque(){
  if (mZoomDirty) {
    return mNextZoom > 0.999f;
  }
 else {
    if (mRollo == null) {
      return false;
    }
 else {
      return mRollo.mMessageProc.mZoom > 0.999f;
    }
  }
}","public boolean isOpaque(){
  if (mZoomDirty) {
    return mNextZoom > 0.999f;
  }
 else {
    if (mMessageProc == null) {
      return false;
    }
 else {
      return mMessageProc.mZoom > 0.999f;
    }
  }
}",0.9451073985680192
45560,"public void run(){
  mPosX=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
}","public void run(){
  mPosX=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
  mZoomDirty=false;
}",0.933774834437086
45561,"private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}","private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}",0.985685071574642
45562,"private void initRs(){
  ScriptC.Builder sb=new ScriptC.Builder(mRS);
  sb.setScript(mRes,R.raw.rollo3);
  sb.setRoot(true);
  sb.addDefines(mDefines);
  sb.setType(mParams.mType,""String_Node_Str"",Defines.ALLOC_PARAMS);
  sb.setType(mState.mType,""String_Node_Str"",Defines.ALLOC_STATE);
  mInvokeMove=sb.addInvokable(""String_Node_Str"");
  mInvokeFling=sb.addInvokable(""String_Node_Str"");
  mInvokeMoveTo=sb.addInvokable(""String_Node_Str"");
  mInvokeResetWAR=sb.addInvokable(""String_Node_Str"");
  mInvokeSetZoom=sb.addInvokable(""String_Node_Str"");
  mScript=sb.create();
  mScript.setClearColor(0.0f,0.0f,0.0f,0.0f);
  mScript.bindAllocation(mParams.mAlloc,Defines.ALLOC_PARAMS);
  mScript.bindAllocation(mState.mAlloc,Defines.ALLOC_STATE);
  mScript.bindAllocation(mAllocIconIds,Defines.ALLOC_ICON_IDS);
  mScript.bindAllocation(mAllocLabelIds,Defines.ALLOC_LABEL_IDS);
  mMessageProc=new AAMessage();
  mRS.mMessageCallback=mMessageProc;
  mRS.contextBindRootScript(mScript);
}","private void initRs(){
  ScriptC.Builder sb=new ScriptC.Builder(mRS);
  sb.setScript(mRes,R.raw.rollo3);
  sb.setRoot(true);
  sb.addDefines(mDefines);
  sb.setType(mParams.mType,""String_Node_Str"",Defines.ALLOC_PARAMS);
  sb.setType(mState.mType,""String_Node_Str"",Defines.ALLOC_STATE);
  mInvokeMove=sb.addInvokable(""String_Node_Str"");
  mInvokeFling=sb.addInvokable(""String_Node_Str"");
  mInvokeMoveTo=sb.addInvokable(""String_Node_Str"");
  mInvokeResetWAR=sb.addInvokable(""String_Node_Str"");
  mInvokeSetZoom=sb.addInvokable(""String_Node_Str"");
  mScript=sb.create();
  mScript.setClearColor(0.0f,0.0f,0.0f,0.0f);
  mScript.bindAllocation(mParams.mAlloc,Defines.ALLOC_PARAMS);
  mScript.bindAllocation(mState.mAlloc,Defines.ALLOC_STATE);
  mScript.bindAllocation(mAllocIconIds,Defines.ALLOC_ICON_IDS);
  mScript.bindAllocation(mAllocLabelIds,Defines.ALLOC_LABEL_IDS);
  mRS.contextBindRootScript(mScript);
}",0.963395225464191
45563,"@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocity=VelocityTracker.obtain();
      mVelocity.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected(y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1] ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawX=(int)ev.getRawX();
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocity.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocity.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mMessageProc.mPosX,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocity=VelocityTracker.obtain();
      mVelocity.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected(y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1] ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawX=(int)ev.getRawX();
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mMessageProc.mPosX);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocity.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocity.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}",0.9976658886295432
45564,"public boolean isVisible(){
  if (mZoomDirty) {
    return mNextZoom > 0.001f;
  }
 else {
    if (mRollo == null) {
      return false;
    }
 else {
      return mRollo.mMessageProc.mZoom > 0.001f;
    }
  }
}","public boolean isVisible(){
  if (mZoomDirty) {
    return mNextZoom > 0.001f;
  }
 else {
    if (mMessageProc == null) {
      return false;
    }
 else {
      return mMessageProc.mZoom > 0.001f;
    }
  }
}",0.9453681710213776
45565,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (mArrowNavigation && iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mRollo.mMessageProc.mPosX);
    final int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    final int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        mRollo.setHomeSelected(SELECTED_NONE);
        int lastRowCount=iconCount % Defines.COLUMNS_PER_PAGE;
        if (lastRowCount == 0) {
          lastRowCount=Defines.COLUMNS_PER_PAGE;
        }
        newSelection=iconCount - lastRowCount + (Defines.COLUMNS_PER_PAGE / 2);
        if (newSelection >= iconCount) {
          newSelection=iconCount - 1;
        }
        int target=(newSelection / Defines.COLUMNS_PER_PAGE) - (Defines.ROWS_PER_PAGE - 1);
        if (target < 0) {
          target=0;
        }
        if (currentTopRow != target) {
          mRollo.moveTo(target);
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
          mRollo.moveTo(newSelection / Defines.COLUMNS_PER_PAGE);
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / Defines.COLUMNS_PER_PAGE + (iconCount % Defines.COLUMNS_PER_PAGE == 0 ? 0 : 1);
  final int currentRow=currentSelection / Defines.COLUMNS_PER_PAGE;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= Defines.ROWS_PER_PAGE - 1) {
        mRollo.moveTo((newSelection / Defines.COLUMNS_PER_PAGE) - Defines.ROWS_PER_PAGE + 1);
      }
    }
 else {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (mArrowNavigation && iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mMessageProc.mPosX);
    final int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    final int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        mRollo.setHomeSelected(SELECTED_NONE);
        int lastRowCount=iconCount % Defines.COLUMNS_PER_PAGE;
        if (lastRowCount == 0) {
          lastRowCount=Defines.COLUMNS_PER_PAGE;
        }
        newSelection=iconCount - lastRowCount + (Defines.COLUMNS_PER_PAGE / 2);
        if (newSelection >= iconCount) {
          newSelection=iconCount - 1;
        }
        int target=(newSelection / Defines.COLUMNS_PER_PAGE) - (Defines.ROWS_PER_PAGE - 1);
        if (target < 0) {
          target=0;
        }
        if (currentTopRow != target) {
          mRollo.moveTo(target);
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
          mRollo.moveTo(newSelection / Defines.COLUMNS_PER_PAGE);
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / Defines.COLUMNS_PER_PAGE + (iconCount % Defines.COLUMNS_PER_PAGE == 0 ? 0 : 1);
  final int currentRow=currentSelection / Defines.COLUMNS_PER_PAGE;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= Defines.ROWS_PER_PAGE - 1) {
        mRollo.moveTo((newSelection / Defines.COLUMNS_PER_PAGE) - Defines.ROWS_PER_PAGE + 1);
      }
    }
 else {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}",0.9989594172736732
45566,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mNextZoom,mNextAnimate);
      mZoomDirty=false;
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mNextZoom,mNextAnimate);
    }
  }
}",0.917391304347826
45567,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
    mRollo.dirtyCheck();
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
    mRollo.dirtyCheck();
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  mRS.mMessageCallback=mMessageProc=new AAMessage();
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}",0.960060286360211
45568,"@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else     if (hasWindowFocus) {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (Defines.COLUMNS_PER_PAGE * Defines.ROWS_PER_PAGE)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}","@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else     if (hasWindowFocus) {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (Defines.COLUMNS_PER_PAGE * Defines.ROWS_PER_PAGE)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}",0.996760758907913
45569,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
  mRS.mMessageCallback=null;
}",0.8960573476702509
45570,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
  mRS.mMessageCallback=null;
}",0.8960573476702509
45571,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
  mRS.mMessageCallback=null;
}",0.8960573476702509
45572,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
  mRS.mMessageCallback=null;
}",0.8960573476702509
45573,"private void startWallpaper(){
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}","private void startWallpaper(){
  closeAllApps(true);
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}",0.9836552748885586
45574,"private void addItems(){
  showAddDialog(mMenuAddInfo);
}","private void addItems(){
  closeAllApps(true);
  showAddDialog(mMenuAddInfo);
}",0.8382352941176471
45575,"private void startWallpaper(){
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}","private void startWallpaper(){
  closeAllApps(true);
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}",0.9836552748885586
45576,"private void addItems(){
  showAddDialog(mMenuAddInfo);
}","private void addItems(){
  closeAllApps(true);
  showAddDialog(mMenuAddInfo);
}",0.8382352941176471
45577,"private void startWallpaper(){
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}","private void startWallpaper(){
  closeAllApps(true);
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}",0.9836552748885586
45578,"private void addItems(){
  showAddDialog(mMenuAddInfo);
}","private void addItems(){
  closeAllApps(true);
  showAddDialog(mMenuAddInfo);
}",0.8382352941176471
45579,"/** 
 * Implementation of the method from LauncherModel.Callbacks.
 */
void bindFolders(HashMap<Long,FolderInfo> folders){
  mFolders.putAll(folders);
}","/** 
 * Implementation of the method from LauncherModel.Callbacks.
 */
public void bindFolders(HashMap<Long,FolderInfo> folders){
  mFolders.clear();
  mFolders.putAll(folders);
}",0.918429003021148
45580,"/** 
 * Read everything out of our database.
 */
private void bindWorkspace(){
  final long t=SystemClock.uptimeMillis();
  Callbacks callbacks=mCallbacks.get();
  if (callbacks == null) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  int N;
  mHandler.post(new Runnable(){
    public void run(){
      Callbacks callbacks=tryGetCallbacks();
      if (callbacks != null) {
        callbacks.startBinding();
      }
    }
  }
);
  N=mItems.size();
  for (int i=0; i < N; i+=ITEMS_CHUNK) {
    final int start=i;
    final int chunkSize=(i + ITEMS_CHUNK <= N) ? ITEMS_CHUNK : (N - i);
    mHandler.post(new Runnable(){
      public void run(){
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindItems(mItems,start,start + chunkSize);
        }
      }
    }
);
  }
  mHandler.postIdle(new Runnable(){
    public void run(){
      Log.d(TAG,""String_Node_Str"");
    }
  }
);
  final int currentScreen=callbacks.getCurrentWorkspaceScreen();
  N=mAppWidgets.size();
  for (int i=0; i < N; i++) {
    final LauncherAppWidgetInfo widget=mAppWidgets.get(i);
    if (widget.screen == currentScreen) {
      mHandler.post(new Runnable(){
        public void run(){
          Callbacks callbacks=tryGetCallbacks();
          if (callbacks != null) {
            callbacks.bindAppWidget(widget);
          }
        }
      }
);
    }
  }
  for (int i=0; i < N; i++) {
    final LauncherAppWidgetInfo widget=mAppWidgets.get(i);
    if (widget.screen != currentScreen) {
      mHandler.post(new Runnable(){
        public void run(){
          Callbacks callbacks=tryGetCallbacks();
          if (callbacks != null) {
            callbacks.bindAppWidget(widget);
          }
        }
      }
);
    }
  }
  mHandler.post(new Runnable(){
    public void run(){
      Callbacks callbacks=tryGetCallbacks();
      if (callbacks != null) {
        callbacks.finishBindingItems();
      }
    }
  }
);
  mHandler.post(new Runnable(){
    public void run(){
      Log.d(TAG,""String_Node_Str"" + (SystemClock.uptimeMillis() - t) + ""String_Node_Str"");
      if (Launcher.PROFILE_ROTATE) {
        android.os.Debug.stopMethodTracing();
      }
    }
  }
);
}","/** 
 * Read everything out of our database.
 */
private void bindWorkspace(){
  final long t=SystemClock.uptimeMillis();
  Callbacks callbacks=mCallbacks.get();
  if (callbacks == null) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  int N;
  mHandler.post(new Runnable(){
    public void run(){
      Callbacks callbacks=tryGetCallbacks();
      if (callbacks != null) {
        callbacks.startBinding();
      }
    }
  }
);
  N=mItems.size();
  for (int i=0; i < N; i+=ITEMS_CHUNK) {
    final int start=i;
    final int chunkSize=(i + ITEMS_CHUNK <= N) ? ITEMS_CHUNK : (N - i);
    mHandler.post(new Runnable(){
      public void run(){
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindItems(mItems,start,start + chunkSize);
        }
      }
    }
);
  }
  mHandler.post(new Runnable(){
    public void run(){
      Callbacks callbacks=tryGetCallbacks();
      if (callbacks != null) {
        callbacks.bindFolders(mFolders);
      }
    }
  }
);
  mHandler.postIdle(new Runnable(){
    public void run(){
      Log.d(TAG,""String_Node_Str"");
    }
  }
);
  final int currentScreen=callbacks.getCurrentWorkspaceScreen();
  N=mAppWidgets.size();
  for (int i=0; i < N; i++) {
    final LauncherAppWidgetInfo widget=mAppWidgets.get(i);
    if (widget.screen == currentScreen) {
      mHandler.post(new Runnable(){
        public void run(){
          Callbacks callbacks=tryGetCallbacks();
          if (callbacks != null) {
            callbacks.bindAppWidget(widget);
          }
        }
      }
);
    }
  }
  for (int i=0; i < N; i++) {
    final LauncherAppWidgetInfo widget=mAppWidgets.get(i);
    if (widget.screen != currentScreen) {
      mHandler.post(new Runnable(){
        public void run(){
          Callbacks callbacks=tryGetCallbacks();
          if (callbacks != null) {
            callbacks.bindAppWidget(widget);
          }
        }
      }
);
    }
  }
  mHandler.post(new Runnable(){
    public void run(){
      Callbacks callbacks=tryGetCallbacks();
      if (callbacks != null) {
        callbacks.finishBindingItems();
      }
    }
  }
);
  mHandler.post(new Runnable(){
    public void run(){
      Log.d(TAG,""String_Node_Str"" + (SystemClock.uptimeMillis() - t) + ""String_Node_Str"");
      if (Launcher.PROFILE_ROTATE) {
        android.os.Debug.stopMethodTracing();
      }
    }
  }
);
}",0.9578694608164156
45581,"private void loadWorkspace(){
  long t=SystemClock.uptimeMillis();
  final Context context=mContext;
  final ContentResolver contentResolver=context.getContentResolver();
  final PackageManager manager=context.getPackageManager();
  mItems.clear();
  final Cursor c=contentResolver.query(LauncherSettings.Favorites.CONTENT_URI,null,null,null,null);
  try {
    final int idIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites._ID);
    final int intentIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.INTENT);
    final int titleIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.TITLE);
    final int iconTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_TYPE);
    final int iconIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON);
    final int iconPackageIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_PACKAGE);
    final int iconResourceIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_RESOURCE);
    final int containerIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CONTAINER);
    final int itemTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ITEM_TYPE);
    final int appWidgetIdIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.APPWIDGET_ID);
    final int screenIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SCREEN);
    final int cellXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLX);
    final int cellYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLY);
    final int spanXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANX);
    final int spanYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANY);
    final int uriIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.URI);
    final int displayModeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.DISPLAY_MODE);
    ApplicationInfo info;
    String intentDescription;
    Widget widgetInfo;
    LauncherAppWidgetInfo appWidgetInfo;
    int container;
    long id;
    Intent intent;
    while (!mStopped && c.moveToNext()) {
      try {
        int itemType=c.getInt(itemTypeIndex);
switch (itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
          intentDescription=c.getString(intentIndex);
        try {
          intent=Intent.parseUri(intentDescription,0);
        }
 catch (        URISyntaxException e) {
          continue;
        }
      if (itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION) {
        info=getApplicationInfo(manager,intent,context);
      }
 else {
        info=getApplicationInfoShortcut(c,context,iconTypeIndex,iconPackageIndex,iconResourceIndex,iconIndex);
      }
    if (info == null) {
      info=new ApplicationInfo();
      info.icon=manager.getDefaultActivityIcon();
    }
  if (info != null) {
    info.title=c.getString(titleIndex);
    info.intent=intent;
    info.id=c.getLong(idIndex);
    container=c.getInt(containerIndex);
    info.container=container;
    info.screen=c.getInt(screenIndex);
    info.cellX=c.getInt(cellXIndex);
    info.cellY=c.getInt(cellYIndex);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
      mItems.add(info);
    break;
default :
  UserFolderInfo folderInfo=findOrMakeUserFolder(folders,container);
folderInfo.add(info);
break;
}
}
break;
case LauncherSettings.Favorites.ITEM_TYPE_USER_FOLDER:
id=c.getLong(idIndex);
UserFolderInfo folderInfo=findOrMakeUserFolder(folders,id);
folderInfo.title=c.getString(titleIndex);
folderInfo.id=id;
container=c.getInt(containerIndex);
folderInfo.container=container;
folderInfo.screen=c.getInt(screenIndex);
folderInfo.cellX=c.getInt(cellXIndex);
folderInfo.cellY=c.getInt(cellYIndex);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
mItems.add(folderInfo);
break;
}
break;
case LauncherSettings.Favorites.ITEM_TYPE_LIVE_FOLDER:
id=c.getLong(idIndex);
LiveFolderInfo liveFolderInfo=findOrMakeLiveFolder(folders,id);
intentDescription=c.getString(intentIndex);
intent=null;
if (intentDescription != null) {
try {
intent=Intent.parseUri(intentDescription,0);
}
 catch (URISyntaxException e) {
}
}
liveFolderInfo.title=c.getString(titleIndex);
liveFolderInfo.id=id;
container=c.getInt(containerIndex);
liveFolderInfo.container=container;
liveFolderInfo.screen=c.getInt(screenIndex);
liveFolderInfo.cellX=c.getInt(cellXIndex);
liveFolderInfo.cellY=c.getInt(cellYIndex);
liveFolderInfo.uri=Uri.parse(c.getString(uriIndex));
liveFolderInfo.baseIntent=intent;
liveFolderInfo.displayMode=c.getInt(displayModeIndex);
loadLiveFolderIcon(context,c,iconTypeIndex,iconPackageIndex,iconResourceIndex,liveFolderInfo);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
mItems.add(liveFolderInfo);
break;
}
break;
case LauncherSettings.Favorites.ITEM_TYPE_WIDGET_SEARCH:
widgetInfo=Widget.makeSearch();
container=c.getInt(containerIndex);
if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP) {
Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
continue;
}
widgetInfo.id=c.getLong(idIndex);
widgetInfo.screen=c.getInt(screenIndex);
widgetInfo.container=container;
widgetInfo.cellX=c.getInt(cellXIndex);
widgetInfo.cellY=c.getInt(cellYIndex);
mItems.add(widgetInfo);
break;
case LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:
int appWidgetId=c.getInt(appWidgetIdIndex);
appWidgetInfo=new LauncherAppWidgetInfo(appWidgetId);
appWidgetInfo.id=c.getLong(idIndex);
appWidgetInfo.screen=c.getInt(screenIndex);
appWidgetInfo.cellX=c.getInt(cellXIndex);
appWidgetInfo.cellY=c.getInt(cellYIndex);
appWidgetInfo.spanX=c.getInt(spanXIndex);
appWidgetInfo.spanY=c.getInt(spanYIndex);
container=c.getInt(containerIndex);
if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP) {
Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
continue;
}
appWidgetInfo.container=c.getInt(containerIndex);
mAppWidgets.add(appWidgetInfo);
break;
}
}
 catch (Exception e) {
Log.w(TAG,""String_Node_Str"",e);
}
}
}
  finally {
c.close();
}
Log.d(TAG,""String_Node_Str"" + (SystemClock.uptimeMillis() - t) + ""String_Node_Str"");
}","private void loadWorkspace(){
  long t=SystemClock.uptimeMillis();
  final Context context=mContext;
  final ContentResolver contentResolver=context.getContentResolver();
  final PackageManager manager=context.getPackageManager();
  mItems.clear();
  final Cursor c=contentResolver.query(LauncherSettings.Favorites.CONTENT_URI,null,null,null,null);
  try {
    final int idIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites._ID);
    final int intentIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.INTENT);
    final int titleIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.TITLE);
    final int iconTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_TYPE);
    final int iconIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON);
    final int iconPackageIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_PACKAGE);
    final int iconResourceIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_RESOURCE);
    final int containerIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CONTAINER);
    final int itemTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ITEM_TYPE);
    final int appWidgetIdIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.APPWIDGET_ID);
    final int screenIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SCREEN);
    final int cellXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLX);
    final int cellYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLY);
    final int spanXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANX);
    final int spanYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANY);
    final int uriIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.URI);
    final int displayModeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.DISPLAY_MODE);
    ApplicationInfo info;
    String intentDescription;
    Widget widgetInfo;
    LauncherAppWidgetInfo appWidgetInfo;
    int container;
    long id;
    Intent intent;
    while (!mStopped && c.moveToNext()) {
      try {
        int itemType=c.getInt(itemTypeIndex);
switch (itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
          intentDescription=c.getString(intentIndex);
        try {
          intent=Intent.parseUri(intentDescription,0);
        }
 catch (        URISyntaxException e) {
          continue;
        }
      if (itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION) {
        info=getApplicationInfo(manager,intent,context);
      }
 else {
        info=getApplicationInfoShortcut(c,context,iconTypeIndex,iconPackageIndex,iconResourceIndex,iconIndex);
      }
    if (info == null) {
      info=new ApplicationInfo();
      info.icon=manager.getDefaultActivityIcon();
    }
  if (info != null) {
    info.title=c.getString(titleIndex);
    info.intent=intent;
    info.id=c.getLong(idIndex);
    container=c.getInt(containerIndex);
    info.container=container;
    info.screen=c.getInt(screenIndex);
    info.cellX=c.getInt(cellXIndex);
    info.cellY=c.getInt(cellYIndex);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
      mItems.add(info);
    break;
default :
  UserFolderInfo folderInfo=findOrMakeUserFolder(mFolders,container);
folderInfo.add(info);
break;
}
}
break;
case LauncherSettings.Favorites.ITEM_TYPE_USER_FOLDER:
id=c.getLong(idIndex);
UserFolderInfo folderInfo=findOrMakeUserFolder(mFolders,id);
folderInfo.title=c.getString(titleIndex);
folderInfo.id=id;
container=c.getInt(containerIndex);
folderInfo.container=container;
folderInfo.screen=c.getInt(screenIndex);
folderInfo.cellX=c.getInt(cellXIndex);
folderInfo.cellY=c.getInt(cellYIndex);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
mItems.add(folderInfo);
break;
}
mFolders.put(folderInfo.id,folderInfo);
break;
case LauncherSettings.Favorites.ITEM_TYPE_LIVE_FOLDER:
id=c.getLong(idIndex);
LiveFolderInfo liveFolderInfo=findOrMakeLiveFolder(mFolders,id);
intentDescription=c.getString(intentIndex);
intent=null;
if (intentDescription != null) {
try {
intent=Intent.parseUri(intentDescription,0);
}
 catch (URISyntaxException e) {
}
}
liveFolderInfo.title=c.getString(titleIndex);
liveFolderInfo.id=id;
container=c.getInt(containerIndex);
liveFolderInfo.container=container;
liveFolderInfo.screen=c.getInt(screenIndex);
liveFolderInfo.cellX=c.getInt(cellXIndex);
liveFolderInfo.cellY=c.getInt(cellYIndex);
liveFolderInfo.uri=Uri.parse(c.getString(uriIndex));
liveFolderInfo.baseIntent=intent;
liveFolderInfo.displayMode=c.getInt(displayModeIndex);
loadLiveFolderIcon(context,c,iconTypeIndex,iconPackageIndex,iconResourceIndex,liveFolderInfo);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
mItems.add(liveFolderInfo);
break;
}
mFolders.put(liveFolderInfo.id,liveFolderInfo);
break;
case LauncherSettings.Favorites.ITEM_TYPE_WIDGET_SEARCH:
widgetInfo=Widget.makeSearch();
container=c.getInt(containerIndex);
if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP) {
Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
continue;
}
widgetInfo.id=c.getLong(idIndex);
widgetInfo.screen=c.getInt(screenIndex);
widgetInfo.container=container;
widgetInfo.cellX=c.getInt(cellXIndex);
widgetInfo.cellY=c.getInt(cellYIndex);
mItems.add(widgetInfo);
break;
case LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:
int appWidgetId=c.getInt(appWidgetIdIndex);
appWidgetInfo=new LauncherAppWidgetInfo(appWidgetId);
appWidgetInfo.id=c.getLong(idIndex);
appWidgetInfo.screen=c.getInt(screenIndex);
appWidgetInfo.cellX=c.getInt(cellXIndex);
appWidgetInfo.cellY=c.getInt(cellYIndex);
appWidgetInfo.spanX=c.getInt(spanXIndex);
appWidgetInfo.spanY=c.getInt(spanYIndex);
container=c.getInt(containerIndex);
if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP) {
Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
continue;
}
appWidgetInfo.container=c.getInt(containerIndex);
mAppWidgets.add(appWidgetInfo);
break;
}
}
 catch (Exception e) {
Log.w(TAG,""String_Node_Str"",e);
}
}
}
  finally {
c.close();
}
Log.d(TAG,""String_Node_Str"" + (SystemClock.uptimeMillis() - t) + ""String_Node_Str"");
}",0.9921080465381172
45582,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}",0.8738738738738738
45583,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  for (int i=0; i < count; i++) {
    uploadAppIcon(i,list.get(i));
  }
  mState.iconCount=count;
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}",0.8674698795180723
45584,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}",0.933426769446391
45585,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  uploadAppIcon(index,item);
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}",0.940119760479042
45586,"private void startWallpaper(){
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}","private void startWallpaper(){
  closeAllApps(true);
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}",0.9836552748885586
45587,"private void addItems(){
  showAddDialog(mMenuAddInfo);
}","private void addItems(){
  closeAllApps(true);
  showAddDialog(mMenuAddInfo);
}",0.8382352941176471
45588,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}",0.8738738738738738
45589,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  for (int i=0; i < count; i++) {
    uploadAppIcon(i,list.get(i));
  }
  mState.iconCount=count;
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}",0.8674698795180723
45590,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}",0.933426769446391
45591,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  uploadAppIcon(index,item);
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}",0.940119760479042
45592,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=resolveSize(mBitmap.getWidth(),widthMeasureSpec);
  int heightSize=resolveSize(mBitmap.getHeight(),heightMeasureSpec);
  setMeasuredDimension(widthSize,heightSize);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setMeasuredDimension(mBitmap.getWidth(),mBitmap.getHeight());
}",0.5798525798525799
45593,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=resolveSize(mBitmap.getWidth(),widthMeasureSpec);
  int heightSize=resolveSize(mBitmap.getHeight(),heightMeasureSpec);
  setMeasuredDimension(widthSize,heightSize);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setMeasuredDimension(mBitmap.getWidth(),mBitmap.getHeight());
}",0.5798525798525799
45594,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=resolveSize(mBitmap.getWidth(),widthMeasureSpec);
  int heightSize=resolveSize(mBitmap.getHeight(),heightMeasureSpec);
  setMeasuredDimension(widthSize,heightSize);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setMeasuredDimension(mBitmap.getWidth(),mBitmap.getHeight());
}",0.5798525798525799
45595,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}",0.8738738738738738
45596,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  for (int i=0; i < count; i++) {
    uploadAppIcon(i,list.get(i));
  }
  mState.iconCount=count;
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}",0.8674698795180723
45597,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}",0.933426769446391
45598,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  uploadAppIcon(index,item);
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}",0.940119760479042
45599,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}",0.8738738738738738
45600,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  for (int i=0; i < count; i++) {
    uploadAppIcon(i,list.get(i));
  }
  mState.iconCount=count;
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}",0.8674698795180723
45601,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}",0.933426769446391
45602,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  uploadAppIcon(index,item);
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}",0.940119760479042
45603,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=resolveSize(mBitmap.getWidth(),widthMeasureSpec);
  int heightSize=resolveSize(mBitmap.getHeight(),heightMeasureSpec);
  setMeasuredDimension(widthSize,heightSize);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setMeasuredDimension(mBitmap.getWidth(),mBitmap.getHeight());
}",0.5798525798525799
45604,"/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.filtered=true;
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}","/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}",0.8744939271255061
45605,"public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mInflater=LayoutInflater.from(context);
}","public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mPackageManager=context.getPackageManager();
  mInflater=LayoutInflater.from(context);
}",0.8605341246290801
45606,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (info.icon == null) {
    info.icon=AppInfoCache.getIconDrawable(mPackageManager,info);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}",0.9174468085106384
45607,"/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.filtered=true;
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}","/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}",0.8744939271255061
45608,"public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mInflater=LayoutInflater.from(context);
}","public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mPackageManager=context.getPackageManager();
  mInflater=LayoutInflater.from(context);
}",0.8605341246290801
45609,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (info.icon == null) {
    info.icon=AppInfoCache.getIconDrawable(mPackageManager,info);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}",0.9174468085106384
45610,"/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.filtered=true;
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}","/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}",0.8744939271255061
45611,"public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mInflater=LayoutInflater.from(context);
}","public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mPackageManager=context.getPackageManager();
  mInflater=LayoutInflater.from(context);
}",0.8605341246290801
45612,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (info.icon == null) {
    info.icon=AppInfoCache.getIconDrawable(mPackageManager,info);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}",0.9174468085106384
45613,"/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.filtered=true;
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}","/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}",0.8744939271255061
45614,"public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mInflater=LayoutInflater.from(context);
}","public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mPackageManager=context.getPackageManager();
  mInflater=LayoutInflater.from(context);
}",0.8605341246290801
45615,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (info.icon == null) {
    info.icon=AppInfoCache.getIconDrawable(mPackageManager,info);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}",0.9174468085106384
45616,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (!isVisible()) {
    return false;
  }
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}",0.988463555322496
45617,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}",0.966252220248668
45618,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (!isVisible()) {
    return false;
  }
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}",0.988463555322496
45619,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}",0.966252220248668
45620,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (!isVisible()) {
    return false;
  }
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}",0.988463555322496
45621,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}",0.966252220248668
45622,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (!isVisible()) {
    return false;
  }
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}",0.988463555322496
45623,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}",0.966252220248668
45624,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}",0.9673055242390078
45625,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}",0.9673055242390078
45626,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}",0.9673055242390078
45627,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else if (mTouchTracking == TRACKING_FLING) {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}",0.977587343441002
45628,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else if (mTouchTracking == TRACKING_FLING) {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}",0.977587343441002
45629,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else if (mTouchTracking == TRACKING_FLING) {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}",0.977587343441002
45630,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}",0.9673055242390078
45631,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else if (mTouchTracking == TRACKING_FLING) {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}",0.977587343441002
45632,"public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    mLauncher.startActivitySafely(app.intent);
  }
}","public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    mLauncher.startActivitySafely(app.intent);
  }
}",0.8025078369905956
45633,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    mLastMotionX=x;
    mLastMotionY=y;
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int slopX;
if (mRotateMove) {
  slopX=Math.abs(y - mLastMotionY);
}
 else {
  slopX=Math.abs(x - mLastMotionX);
}
if (!mStartedScrolling && slopX < mSlopX) {
}
 else {
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
  mLastMotionX=x;
  mLastMotionY=y;
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
mLastMotionX=-10000;
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}",0.86651302960468
45634,"void selectIcon(int index){
  int iconCount=mAllAppsList.size();
  if (index < 0 || index >= iconCount) {
    mState.selectedIconIndex=-1;
    return;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}","void selectIcon(int index){
  if (index < 0) {
    mState.selectedIconIndex=-1;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}",0.9356300997280144
45635,"public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}","public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}",0.9128738621586476
45636,"public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    mLauncher.startActivitySafely(app.intent);
  }
}","public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    mLauncher.startActivitySafely(app.intent);
  }
}",0.8025078369905956
45637,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    mLastMotionX=x;
    mLastMotionY=y;
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int slopX;
if (mRotateMove) {
  slopX=Math.abs(y - mLastMotionY);
}
 else {
  slopX=Math.abs(x - mLastMotionX);
}
if (!mStartedScrolling && slopX < mSlopX) {
}
 else {
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
  mLastMotionX=x;
  mLastMotionY=y;
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
mLastMotionX=-10000;
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}",0.86651302960468
45638,"void selectIcon(int index){
  int iconCount=mAllAppsList.size();
  if (index < 0 || index >= iconCount) {
    mState.selectedIconIndex=-1;
    return;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}","void selectIcon(int index){
  if (index < 0) {
    mState.selectedIconIndex=-1;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}",0.9356300997280144
45639,"public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}","public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}",0.9128738621586476
45640,"public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    mLauncher.startActivitySafely(app.intent);
  }
}","public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    mLauncher.startActivitySafely(app.intent);
  }
}",0.8025078369905956
45641,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    mLastMotionX=x;
    mLastMotionY=y;
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int slopX;
if (mRotateMove) {
  slopX=Math.abs(y - mLastMotionY);
}
 else {
  slopX=Math.abs(x - mLastMotionX);
}
if (!mStartedScrolling && slopX < mSlopX) {
}
 else {
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
  mLastMotionX=x;
  mLastMotionY=y;
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
mLastMotionX=-10000;
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}",0.86651302960468
45642,"void selectIcon(int index){
  int iconCount=mAllAppsList.size();
  if (index < 0 || index >= iconCount) {
    mState.selectedIconIndex=-1;
    return;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}","void selectIcon(int index){
  if (index < 0) {
    mState.selectedIconIndex=-1;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}",0.9356300997280144
45643,"public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}","public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}",0.9128738621586476
45644,"public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    mLauncher.startActivitySafely(app.intent);
  }
}","public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    mLauncher.startActivitySafely(app.intent);
  }
}",0.8025078369905956
45645,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    mLastMotionX=x;
    mLastMotionY=y;
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int slopX;
if (mRotateMove) {
  slopX=Math.abs(y - mLastMotionY);
}
 else {
  slopX=Math.abs(x - mLastMotionX);
}
if (!mStartedScrolling && slopX < mSlopX) {
}
 else {
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
  mLastMotionX=x;
  mLastMotionY=y;
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
mLastMotionX=-10000;
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}",0.86651302960468
45646,"void selectIcon(int index){
  int iconCount=mAllAppsList.size();
  if (index < 0 || index >= iconCount) {
    mState.selectedIconIndex=-1;
    return;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}","void selectIcon(int index){
  if (index < 0) {
    mState.selectedIconIndex=-1;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}",0.9356300997280144
45647,"public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}","public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}",0.9128738621586476
45648,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int deltaX;
switch (ev.getAction()) {
case MotionEvent.ACTION_DOWN:
    mMotionDownRawX=(int)ev.getRawX();
  mMotionDownRawY=(int)ev.getRawY();
mLastMotionX=x;
mRollo.mReadback.read();
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
if (!mRollo.checkClickOK()) {
mRollo.clearSelectedIcon();
}
 else {
mRollo.selectIcon(x,(int)ev.getY(),mRollo.mReadback.posX);
}
mRollo.mState.save();
mRollo.mInvokeMove.execute();
mVelocity=VelocityTracker.obtain();
mVelocity.addMovement(ev);
mStartedScrolling=false;
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
int slop=Math.abs(x - mLastMotionX);
if (!mStartedScrolling && slop < mConfig.getScaledTouchSlop()) {
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
mRollo.mInvokeMove.execute();
mStartedScrolling=true;
mRollo.clearSelectedIcon();
deltaX=x - mLastMotionX;
mVelocity.addMovement(ev);
mRollo.mState.save();
mLastMotionX=x;
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
if (!mZoomSwipeInProgress) {
mVelocity.computeCurrentVelocity(1000,mConfig.getScaledMaximumFlingVelocity());
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / Defines.SCREEN_WIDTH_PX;
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.mInvokeFling.execute();
}
 else {
mRollo.mState.save();
mRollo.mInvokeMove.execute();
}
mLastMotionX=-10000;
mVelocity.recycle();
mVelocity=null;
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int deltaX;
switch (ev.getAction()) {
case MotionEvent.ACTION_DOWN:
    mMotionDownRawX=(int)ev.getRawX();
  mMotionDownRawY=(int)ev.getRawY();
mLastMotionX=x;
mRollo.mReadback.read();
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
if (!mRollo.checkClickOK()) {
mRollo.clearSelectedIcon();
}
 else {
mRollo.selectIcon(x,(int)ev.getY(),mRollo.mReadback.posX);
}
mRollo.mState.save();
mRollo.mInvokeMove.execute();
mVelocity=VelocityTracker.obtain();
mVelocity.addMovement(ev);
mStartedScrolling=false;
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
int slopX=Math.abs(x - mLastMotionX);
if (!mStartedScrolling && slopX < mSlopX) {
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
mRollo.mInvokeMove.execute();
mStartedScrolling=true;
mRollo.clearSelectedIcon();
deltaX=x - mLastMotionX;
mVelocity.addMovement(ev);
mRollo.mState.save();
mLastMotionX=x;
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
if (!mZoomSwipeInProgress) {
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / Defines.SCREEN_WIDTH_PX;
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.mInvokeFling.execute();
}
 else {
mRollo.mState.save();
mRollo.mInvokeMove.execute();
}
mLastMotionX=-10000;
mVelocity.recycle();
mVelocity=null;
break;
}
return true;
}",0.9863247863247864
45649,"public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int screenX=(int)ev.getRawX();
  final int screenY=(int)ev.getRawY();
  final int deltaX=screenX - mDownX;
  final int deltaY=screenY - mDownY;
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    mCanceled=false;
  mTracking=false;
mDownX=screenX;
mDownY=screenY;
mAllAppsView.setZoomSwipeInProgress(true,true);
break;
case MotionEvent.ACTION_MOVE:
if (!mCanceled && !mTracking) {
if (Math.abs(deltaX) > mSlop) {
mCanceled=true;
mTracking=false;
mAllAppsView.setZoomSwipeInProgress(false,true);
}
if (Math.abs(deltaY) > mSlop) {
mTracking=true;
}
}
if (mTracking && !mCanceled) {
track(screenY);
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mTracking && !mCanceled) {
fling(screenY);
mAllAppsView.setZoomSwipeInProgress(false,false);
}
mVelocityTracker.recycle();
mVelocityTracker=null;
break;
}
return mTracking || mCanceled;
}","public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int screenX=(int)ev.getRawX();
  final int screenY=(int)ev.getRawY();
  final int deltaX=screenX - mDownX;
  final int deltaY=screenY - mDownY;
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    mCanceled=false;
  mTracking=false;
mDownX=screenX;
mDownY=screenY;
mAllAppsView.setZoomSwipeInProgress(true,true);
break;
case MotionEvent.ACTION_MOVE:
if (!mCanceled && !mTracking) {
if (Math.abs(deltaX) > mSlopX) {
mCanceled=true;
mTracking=false;
mAllAppsView.setZoomSwipeInProgress(false,true);
}
 else if (Math.abs(deltaY) > mSlopY) {
mTracking=true;
}
}
if (mTracking && !mCanceled) {
track(screenY);
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mTracking && !mCanceled) {
fling(screenY);
mAllAppsView.setZoomSwipeInProgress(false,false);
}
mVelocityTracker.recycle();
mVelocityTracker=null;
break;
}
return mTracking || mCanceled;
}",0.9962581852198316
45650,"public SwipeController(Context context){
  ViewConfiguration config=ViewConfiguration.get(context);
  mSlop=config.getScaledTouchSlop();
  DisplayMetrics display=context.getResources().getDisplayMetrics();
  mSwipeDistance=display.heightPixels / 2;
  setMode(MODE_WORKSPACE,false);
}","public SwipeController(Context context){
  ViewConfiguration config=ViewConfiguration.get(context);
  mSlopX=config.getScaledTouchSlop();
  mSlopY=3 * mSlopX / 2;
  DisplayMetrics display=context.getResources().getDisplayMetrics();
  mSwipeDistance=display.heightPixels / 2;
  setMode(MODE_WORKSPACE,false);
}",0.956081081081081
45651,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLauncher.isWorkspaceLocked() || mLauncher.isAllAppsVisible()) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
  final float x=ev.getX();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
  mLastMotionX=x;
break;
case MotionEvent.ACTION_MOVE:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final int deltaX=(int)(mLastMotionX - x);
mLastMotionX=x;
if (deltaX < 0) {
  if (mScrollX > 0) {
    scrollBy(Math.max(-mScrollX,deltaX),0);
    updateWallpaperOffset();
  }
}
 else if (deltaX > 0) {
  final int availableToScroll=getChildAt(getChildCount() - 1).getRight() - mScrollX - getWidth();
  if (availableToScroll > 0) {
    scrollBy(Math.min(availableToScroll,deltaX),0);
    updateWallpaperOffset();
  }
}
}
break;
case MotionEvent.ACTION_UP:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int velocityX=(int)velocityTracker.getXVelocity();
if (velocityX > SNAP_VELOCITY && mCurrentScreen > 0) {
snapToScreen(mCurrentScreen - 1);
}
 else if (velocityX < -SNAP_VELOCITY && mCurrentScreen < getChildCount() - 1) {
snapToScreen(mCurrentScreen + 1);
}
 else {
snapToDestination();
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
mTouchState=TOUCH_STATE_REST;
break;
case MotionEvent.ACTION_CANCEL:
mTouchState=TOUCH_STATE_REST;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLauncher.isWorkspaceLocked()) {
    return false;
  }
  if (mLauncher.isAllAppsVisible()) {
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
    snapToScreen(mCurrentScreen);
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
  final float x=ev.getX();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
  mLastMotionX=x;
break;
case MotionEvent.ACTION_MOVE:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final int deltaX=(int)(mLastMotionX - x);
mLastMotionX=x;
if (deltaX < 0) {
  if (mScrollX > 0) {
    scrollBy(Math.max(-mScrollX,deltaX),0);
    updateWallpaperOffset();
  }
}
 else if (deltaX > 0) {
  final int availableToScroll=getChildAt(getChildCount() - 1).getRight() - mScrollX - getWidth();
  if (availableToScroll > 0) {
    scrollBy(Math.min(availableToScroll,deltaX),0);
    updateWallpaperOffset();
  }
}
}
break;
case MotionEvent.ACTION_UP:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int velocityX=(int)velocityTracker.getXVelocity();
if (velocityX > SNAP_VELOCITY && mCurrentScreen > 0) {
snapToScreen(mCurrentScreen - 1);
}
 else if (velocityX < -SNAP_VELOCITY && mCurrentScreen < getChildCount() - 1) {
snapToScreen(mCurrentScreen + 1);
}
 else {
snapToDestination();
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
mTouchState=TOUCH_STATE_REST;
break;
case MotionEvent.ACTION_CANCEL:
mTouchState=TOUCH_STATE_REST;
}
return true;
}",0.9580803700491471
45652,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int deltaX;
switch (ev.getAction()) {
case MotionEvent.ACTION_DOWN:
    mMotionDownRawX=(int)ev.getRawX();
  mMotionDownRawY=(int)ev.getRawY();
mLastMotionX=x;
mRollo.mReadback.read();
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
if (!mRollo.checkClickOK()) {
mRollo.clearSelectedIcon();
}
 else {
mRollo.selectIcon(x,(int)ev.getY(),mRollo.mReadback.posX);
}
mRollo.mState.save();
mRollo.mInvokeMove.execute();
mVelocity=VelocityTracker.obtain();
mVelocity.addMovement(ev);
mStartedScrolling=false;
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
int slop=Math.abs(x - mLastMotionX);
if (!mStartedScrolling && slop < mConfig.getScaledTouchSlop()) {
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
mRollo.mInvokeMove.execute();
mStartedScrolling=true;
mRollo.clearSelectedIcon();
deltaX=x - mLastMotionX;
mVelocity.addMovement(ev);
mRollo.mState.save();
mLastMotionX=x;
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
if (!mZoomSwipeInProgress) {
mVelocity.computeCurrentVelocity(1000,mConfig.getScaledMaximumFlingVelocity());
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / Defines.SCREEN_WIDTH_PX;
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.mInvokeFling.execute();
}
 else {
mRollo.mState.save();
mRollo.mInvokeMove.execute();
}
mLastMotionX=-10000;
mVelocity.recycle();
mVelocity=null;
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int deltaX;
switch (ev.getAction()) {
case MotionEvent.ACTION_DOWN:
    mMotionDownRawX=(int)ev.getRawX();
  mMotionDownRawY=(int)ev.getRawY();
mLastMotionX=x;
mRollo.mReadback.read();
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
if (!mRollo.checkClickOK()) {
mRollo.clearSelectedIcon();
}
 else {
mRollo.selectIcon(x,(int)ev.getY(),mRollo.mReadback.posX);
}
mRollo.mState.save();
mRollo.mInvokeMove.execute();
mVelocity=VelocityTracker.obtain();
mVelocity.addMovement(ev);
mStartedScrolling=false;
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
int slopX=Math.abs(x - mLastMotionX);
if (!mStartedScrolling && slopX < mSlopX) {
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
mRollo.mInvokeMove.execute();
mStartedScrolling=true;
mRollo.clearSelectedIcon();
deltaX=x - mLastMotionX;
mVelocity.addMovement(ev);
mRollo.mState.save();
mLastMotionX=x;
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
if (!mZoomSwipeInProgress) {
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / Defines.SCREEN_WIDTH_PX;
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.mInvokeFling.execute();
}
 else {
mRollo.mState.save();
mRollo.mInvokeMove.execute();
}
mLastMotionX=-10000;
mVelocity.recycle();
mVelocity=null;
break;
}
return true;
}",0.9863247863247864
45653,"public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int screenX=(int)ev.getRawX();
  final int screenY=(int)ev.getRawY();
  final int deltaX=screenX - mDownX;
  final int deltaY=screenY - mDownY;
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    mCanceled=false;
  mTracking=false;
mDownX=screenX;
mDownY=screenY;
mAllAppsView.setZoomSwipeInProgress(true,true);
break;
case MotionEvent.ACTION_MOVE:
if (!mCanceled && !mTracking) {
if (Math.abs(deltaX) > mSlop) {
mCanceled=true;
mTracking=false;
mAllAppsView.setZoomSwipeInProgress(false,true);
}
if (Math.abs(deltaY) > mSlop) {
mTracking=true;
}
}
if (mTracking && !mCanceled) {
track(screenY);
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mTracking && !mCanceled) {
fling(screenY);
mAllAppsView.setZoomSwipeInProgress(false,false);
}
mVelocityTracker.recycle();
mVelocityTracker=null;
break;
}
return mTracking || mCanceled;
}","public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int screenX=(int)ev.getRawX();
  final int screenY=(int)ev.getRawY();
  final int deltaX=screenX - mDownX;
  final int deltaY=screenY - mDownY;
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    mCanceled=false;
  mTracking=false;
mDownX=screenX;
mDownY=screenY;
mAllAppsView.setZoomSwipeInProgress(true,true);
break;
case MotionEvent.ACTION_MOVE:
if (!mCanceled && !mTracking) {
if (Math.abs(deltaX) > mSlopX) {
mCanceled=true;
mTracking=false;
mAllAppsView.setZoomSwipeInProgress(false,true);
}
 else if (Math.abs(deltaY) > mSlopY) {
mTracking=true;
}
}
if (mTracking && !mCanceled) {
track(screenY);
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mTracking && !mCanceled) {
fling(screenY);
mAllAppsView.setZoomSwipeInProgress(false,false);
}
mVelocityTracker.recycle();
mVelocityTracker=null;
break;
}
return mTracking || mCanceled;
}",0.9962581852198316
45654,"public SwipeController(Context context){
  ViewConfiguration config=ViewConfiguration.get(context);
  mSlop=config.getScaledTouchSlop();
  DisplayMetrics display=context.getResources().getDisplayMetrics();
  mSwipeDistance=display.heightPixels / 2;
  setMode(MODE_WORKSPACE,false);
}","public SwipeController(Context context){
  ViewConfiguration config=ViewConfiguration.get(context);
  mSlopX=config.getScaledTouchSlop();
  mSlopY=3 * mSlopX / 2;
  DisplayMetrics display=context.getResources().getDisplayMetrics();
  mSwipeDistance=display.heightPixels / 2;
  setMode(MODE_WORKSPACE,false);
}",0.956081081081081
45655,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLauncher.isWorkspaceLocked() || mLauncher.isAllAppsVisible()) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
  final float x=ev.getX();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
  mLastMotionX=x;
break;
case MotionEvent.ACTION_MOVE:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final int deltaX=(int)(mLastMotionX - x);
mLastMotionX=x;
if (deltaX < 0) {
  if (mScrollX > 0) {
    scrollBy(Math.max(-mScrollX,deltaX),0);
    updateWallpaperOffset();
  }
}
 else if (deltaX > 0) {
  final int availableToScroll=getChildAt(getChildCount() - 1).getRight() - mScrollX - getWidth();
  if (availableToScroll > 0) {
    scrollBy(Math.min(availableToScroll,deltaX),0);
    updateWallpaperOffset();
  }
}
}
break;
case MotionEvent.ACTION_UP:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int velocityX=(int)velocityTracker.getXVelocity();
if (velocityX > SNAP_VELOCITY && mCurrentScreen > 0) {
snapToScreen(mCurrentScreen - 1);
}
 else if (velocityX < -SNAP_VELOCITY && mCurrentScreen < getChildCount() - 1) {
snapToScreen(mCurrentScreen + 1);
}
 else {
snapToDestination();
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
mTouchState=TOUCH_STATE_REST;
break;
case MotionEvent.ACTION_CANCEL:
mTouchState=TOUCH_STATE_REST;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLauncher.isWorkspaceLocked()) {
    return false;
  }
  if (mLauncher.isAllAppsVisible()) {
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
    snapToScreen(mCurrentScreen);
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
  final float x=ev.getX();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
  mLastMotionX=x;
break;
case MotionEvent.ACTION_MOVE:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final int deltaX=(int)(mLastMotionX - x);
mLastMotionX=x;
if (deltaX < 0) {
  if (mScrollX > 0) {
    scrollBy(Math.max(-mScrollX,deltaX),0);
    updateWallpaperOffset();
  }
}
 else if (deltaX > 0) {
  final int availableToScroll=getChildAt(getChildCount() - 1).getRight() - mScrollX - getWidth();
  if (availableToScroll > 0) {
    scrollBy(Math.min(availableToScroll,deltaX),0);
    updateWallpaperOffset();
  }
}
}
break;
case MotionEvent.ACTION_UP:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int velocityX=(int)velocityTracker.getXVelocity();
if (velocityX > SNAP_VELOCITY && mCurrentScreen > 0) {
snapToScreen(mCurrentScreen - 1);
}
 else if (velocityX < -SNAP_VELOCITY && mCurrentScreen < getChildCount() - 1) {
snapToScreen(mCurrentScreen + 1);
}
 else {
snapToDestination();
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
mTouchState=TOUCH_STATE_REST;
break;
case MotionEvent.ACTION_CANCEL:
mTouchState=TOUCH_STATE_REST;
}
return true;
}",0.9580803700491471
45656,"public void onDrop(DragSource source,int x,int y,int xOffset,int yOffset,DragView dragView,Object dragInfo){
  final CellLayout cellLayout=getCurrentDropLayout();
  if (source != this) {
    onDropExternal(x - xOffset,y - yOffset,dragInfo,cellLayout);
  }
 else {
    if (mDragInfo != null) {
      final View cell=mDragInfo.cell;
      if (mCurrentScreen != mDragInfo.screen) {
        final CellLayout originalCellLayout=(CellLayout)getChildAt(mDragInfo.screen);
        originalCellLayout.removeView(cell);
        cellLayout.addView(cell);
      }
      mTargetCell=estimateDropCell(x - xOffset,y - yOffset,mDragInfo.spanX,mDragInfo.spanY,cell,cellLayout,mTargetCell);
      cellLayout.onDropChild(cell,mTargetCell);
      final ItemInfo info=(ItemInfo)cell.getTag();
      CellLayout.LayoutParams lp=(CellLayout.LayoutParams)cell.getLayoutParams();
      LauncherModel.moveItemInDatabase(mLauncher,info,LauncherSettings.Favorites.CONTAINER_DESKTOP,mCurrentScreen,lp.cellX,lp.cellY);
    }
  }
}","public void onDrop(DragSource source,int x,int y,int xOffset,int yOffset,DragView dragView,Object dragInfo){
  final CellLayout cellLayout=getCurrentDropLayout();
  if (source != this) {
    onDropExternal(x - xOffset,y - yOffset,dragInfo,cellLayout);
  }
 else {
    if (mDragInfo != null) {
      final View cell=mDragInfo.cell;
      int index=mScroller.isFinished() ? mCurrentScreen : mNextScreen;
      if (index != mDragInfo.screen) {
        final CellLayout originalCellLayout=(CellLayout)getChildAt(mDragInfo.screen);
        originalCellLayout.removeView(cell);
        cellLayout.addView(cell);
      }
      mTargetCell=estimateDropCell(x - xOffset,y - yOffset,mDragInfo.spanX,mDragInfo.spanY,cell,cellLayout,mTargetCell);
      cellLayout.onDropChild(cell,mTargetCell);
      final ItemInfo info=(ItemInfo)cell.getTag();
      CellLayout.LayoutParams lp=(CellLayout.LayoutParams)cell.getLayoutParams();
      LauncherModel.moveItemInDatabase(mLauncher,info,LauncherSettings.Favorites.CONTAINER_DESKTOP,index,lp.cellX,lp.cellY);
    }
  }
}",0.946855192588981
45657,"private static void cmdDecode(CommandLine cli) throws AndrolibException {
  ApkDecoder decoder=new ApkDecoder();
  int paraCount=cli.getArgList().size();
  String apkName=(String)cli.getArgList().get(paraCount - 1);
  File outDir=null;
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugMode(true);
  }
  if (cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugLinePrefix(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setBaksmaliDebugMode(false);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkTag(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setForceDelete(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeResources(ApkDecoder.DECODE_RESOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setKeepBrokenResources(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkDir(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setAnalysisMode(true,false);
  }
  if (cli.hasOption(""String_Node_Str"")) {
    decoder.setApi(Integer.parseInt(cli.getOptionValue(""String_Node_Str"")));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    outDir=new File(cli.getOptionValue(""String_Node_Str""));
    decoder.setOutDir(outDir);
  }
 else {
    String outName=apkName;
    outName=outName.endsWith(""String_Node_Str"") ? outName.substring(0,outName.length() - 4) : outName + ""String_Node_Str"";
    outName=new File(outName).getName();
    outDir=new File(outName);
    decoder.setOutDir(outDir);
  }
  decoder.setApkFile(new File(apkName));
  try {
    decoder.decode();
  }
 catch (  OutDirExistsException ex) {
    System.err.println(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  InFileNotFoundException ex) {
    System.err.println(""String_Node_Str"" + apkName + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  CantFindFrameworkResException ex) {
    System.err.println(""String_Node_Str"" + String.valueOf(ex.getPkgId()) + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException ex) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
catch (  DirectoryException ex) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
}","private static void cmdDecode(CommandLine cli) throws AndrolibException {
  ApkDecoder decoder=new ApkDecoder();
  int paraCount=cli.getArgList().size();
  String apkName=(String)cli.getArgList().get(paraCount - 1);
  File outDir=null;
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugMode(true);
  }
  if (cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugLinePrefix(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setBaksmaliDebugMode(false);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkTag(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setForceDelete(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeResources(ApkDecoder.DECODE_RESOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setKeepBrokenResources(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkDir(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setAnalysisMode(true,false);
  }
  if (cli.hasOption(""String_Node_Str"")) {
    decoder.setApi(Integer.parseInt(cli.getOptionValue(""String_Node_Str"")));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    outDir=new File(cli.getOptionValue(""String_Node_Str""));
    decoder.setOutDir(outDir);
  }
 else {
    String outName=apkName;
    outName=outName.endsWith(""String_Node_Str"") ? outName.substring(0,outName.length() - 4).trim() : outName + ""String_Node_Str"";
    outName=new File(outName).getName();
    outDir=new File(outName);
    decoder.setOutDir(outDir);
  }
  decoder.setApkFile(new File(apkName));
  try {
    decoder.decode();
  }
 catch (  OutDirExistsException ex) {
    System.err.println(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  InFileNotFoundException ex) {
    System.err.println(""String_Node_Str"" + apkName + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  CantFindFrameworkResException ex) {
    System.err.println(""String_Node_Str"" + String.valueOf(ex.getPkgId()) + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException ex) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
catch (  DirectoryException ex) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
}",0.9987887177712408
45658,"private void addMissingResSpecs() throws AndrolibException {
  int resId=mResId & 0xffff0000;
  for (int i=0; i < mMissingResSpecs.length; i++) {
    if (!mMissingResSpecs[i]) {
      continue;
    }
    ResResSpec spec=new ResResSpec(new ResID(resId | i),String.format(""String_Node_Str"",i),mPkg,mTypeSpec);
    if (!mPkg.hasResSpec(new ResID(resId | i))) {
      mPkg.addResSpec(spec);
      mTypeSpec.addResSpec(spec);
      if (mType == null) {
        mType=mPkg.getOrCreateConfig(new ResConfigFlags());
      }
      ResValue value=new ResBoolValue(false,0,null);
      ResResource res=new ResResource(mType,spec,value);
      mPkg.addResource(res);
      mType.addResource(res);
      spec.addResource(res);
    }
  }
}","private void addMissingResSpecs() throws AndrolibException {
  int resId=mResId & 0xffff0000;
  for (int i=0; i < mMissingResSpecs.length; i++) {
    if (!mMissingResSpecs[i]) {
      continue;
    }
    ResResSpec spec=new ResResSpec(new ResID(resId | i),""String_Node_Str"" + Integer.toHexString(i),mPkg,mTypeSpec);
    if (!mPkg.hasResSpec(new ResID(resId | i))) {
      mPkg.addResSpec(spec);
      mTypeSpec.addResSpec(spec);
      if (mType == null) {
        mType=mPkg.getOrCreateConfig(new ResConfigFlags());
      }
      ResValue value=new ResBoolValue(false,0,null);
      ResResource res=new ResResource(mType,spec,value);
      mPkg.addResource(res);
      mType.addResource(res);
      spec.addResource(res);
    }
  }
}",0.9739368998628258
45659,"public void recordUncompressedFiles(ExtFile apkFile,Collection<String> uncompressedExtensions) throws AndrolibException {
  try {
    Directory unk=apkFile.getDirectory();
    Set<String> files=unk.getFiles(true);
    String ext;
    for (    String file : files) {
      if (isAPKFileNames(file) && !NO_COMPRESS_PATTERN.matcher(file).find()) {
        if (unk.getCompressionLevel(file) == 0) {
          ext=FilenameUtils.getExtension(file);
          if (!uncompressedExtensions.contains(ext)) {
            uncompressedExtensions.add(FilenameUtils.getExtension(file));
          }
        }
      }
    }
  }
 catch (  DirectoryException ex) {
    throw new AndrolibException(ex);
  }
}","public void recordUncompressedFiles(ExtFile apkFile,Collection<String> uncompressedExtensions) throws AndrolibException {
  try {
    Directory unk=apkFile.getDirectory();
    Set<String> files=unk.getFiles(true);
    String ext;
    for (    String file : files) {
      if (isAPKFileNames(file) && !NO_COMPRESS_PATTERN.matcher(file).find()) {
        if (unk.getCompressionLevel(file) == 0) {
          ext=FilenameUtils.getExtension(file);
          if (ext.isEmpty()) {
            ext=file;
          }
          if (!uncompressedExtensions.contains(ext)) {
            uncompressedExtensions.add(ext);
          }
        }
      }
    }
  }
 catch (  DirectoryException ex) {
    throw new AndrolibException(ex);
  }
}",0.7722772277227723
45660,"@Override public void write(String str,int start,int len) throws IOException {
  final int end=start + len;
  int pos=start;
  while (pos < end) {
    pos=str.indexOf('\n',start);
    if (pos == -1) {
      writeLine(str,start,end - start);
      return;
    }
 else {
      writeLine(str,start,pos - start);
      writer.write(newLine);
      beginningOfLine=true;
      start=pos + 1;
    }
  }
}","@Override public void write(String str,int start,int len) throws IOException {
  final int end=start + len;
  int pos=start;
  while (pos < end) {
    pos=str.indexOf('\n',start);
    if (pos == -1 || pos >= end) {
      writeLine(str,start,end - start);
      return;
    }
 else {
      writeLine(str,start,pos - start);
      writer.write(newLine);
      beginningOfLine=true;
      start=pos + 1;
    }
  }
}",0.982716049382716
45661,"/** 
 * {@inheritDoc} 
 */
public int readSleb128(){
  int end=offset;
  int currentByteValue;
  int result;
  byte[] buf=dexBuf.buf;
  result=buf[end++] & 0xff;
  if (result <= 0x7f) {
    result=(result << 25) >> 25;
  }
 else {
    currentByteValue=buf[end++] & 0xff;
    result=(result & 0x7f) | ((currentByteValue & 0x7f) << 7);
    if (currentByteValue <= 0x7f) {
      result=(result << 18) >> 18;
    }
 else {
      currentByteValue=buf[end++] & 0xff;
      result|=(currentByteValue & 0x7f) << 14;
      if (currentByteValue <= 0x7f) {
        result=(result << 11) >> 11;
      }
 else {
        currentByteValue=buf[end++] & 0xff;
        result|=(currentByteValue & 0x7f) << 21;
        if (currentByteValue <= 0x7f) {
          result=(result << 4) >> 4;
        }
 else {
          currentByteValue=buf[end++] & 0xff;
          if (currentByteValue > 0x7f) {
            throw new ExceptionWithContext(""String_Node_Str"",offset);
          }
          result|=currentByteValue << 28;
        }
      }
    }
  }
  offset=end;
  return result;
}","public int readSleb128(){
  int end=offset;
  int currentByteValue;
  int result;
  byte[] buf=dexBuf.buf;
  result=buf[end++] & 0xff;
  if (result <= 0x7f) {
    result=(result << 25) >> 25;
  }
 else {
    currentByteValue=buf[end++] & 0xff;
    result=(result & 0x7f) | ((currentByteValue & 0x7f) << 7);
    if (currentByteValue <= 0x7f) {
      result=(result << 18) >> 18;
    }
 else {
      currentByteValue=buf[end++] & 0xff;
      result|=(currentByteValue & 0x7f) << 14;
      if (currentByteValue <= 0x7f) {
        result=(result << 11) >> 11;
      }
 else {
        currentByteValue=buf[end++] & 0xff;
        result|=(currentByteValue & 0x7f) << 21;
        if (currentByteValue <= 0x7f) {
          result=(result << 4) >> 4;
        }
 else {
          currentByteValue=buf[end++] & 0xff;
          if (currentByteValue > 0x7f) {
            throw new ExceptionWithContext(""String_Node_Str"",offset);
          }
          result|=currentByteValue << 28;
        }
      }
    }
  }
  offset=end;
  return result;
}",0.987075155576831
45662,"/** 
 * The code address
 * @return
 */
int getCodeAddress();","/** 
 * @return The code address
 */
int getCodeAddress();",0.8403361344537815
45663,"/** 
 * Gets the width of the right side containing the annotations
 * @return
 */
public int getAnnotationWidth(){
  int leftWidth=8 + (hexCols * 2) + (hexCols / 2);
  return outputWidth - leftWidth;
}","/** 
 * @return The width of the right side containing the annotations
 */
public int getAnnotationWidth(){
  int leftWidth=8 + (hexCols * 2) + (hexCols / 2);
  return outputWidth - leftWidth;
}",0.9494949494949496
45664,"/** 
 * Delete a key and its associated value from the tree.
 * @param key The key of the node that need to be deleted
 * @return
 */
public boolean delete(String key);","/** 
 * Delete a key and its associated value from the tree.
 * @param key The key of the node that need to be deleted
 * @return True if the key was deleted, false if not found
 */
public boolean delete(String key);",0.875
45665,"/** 
 * Attempt to find the width of the console. If it can't get the width, return a default of 80
 * @return
 */
public static int getConsoleWidth(){
  if (System.getProperty(""String_Node_Str"").toLowerCase().contains(""String_Node_Str"")) {
    try {
      return attemptMode();
    }
 catch (    Exception ex) {
    }
  }
 else {
    try {
      return attemptStty();
    }
 catch (    Exception ex) {
    }
  }
  return 80;
}","/** 
 * Attempt to find the width of the console. If it can't get the width, return a default of 80
 * @return The current console width
 */
public static int getConsoleWidth(){
  if (System.getProperty(""String_Node_Str"").toLowerCase().contains(""String_Node_Str"")) {
    try {
      return attemptMode();
    }
 catch (    Exception ex) {
    }
  }
 else {
    try {
      return attemptStty();
    }
 catch (    Exception ex) {
    }
  }
  return 80;
}",0.9704545454545456
45666,"BuilderClassDef(@Nonnull BuilderTypeReference type,int accessFlags,@Nullable BuilderTypeReference superclass,@Nonnull BuilderTypeList interfaces,@Nullable BuilderStringReference sourceFile,@Nonnull BuilderAnnotationSet annotations,@Nullable Iterable<? extends BuilderField> fields,@Nullable Iterable<? extends BuilderMethod> methods){
  if (fields == null) {
    fields=ImmutableList.of();
  }
  if (methods == null) {
    methods=ImmutableList.of();
  }
  this.type=type;
  this.accessFlags=accessFlags;
  this.superclass=superclass;
  this.interfaces=interfaces;
  this.sourceFile=sourceFile;
  this.annotations=annotations;
  this.staticFields=ImmutableSortedSet.copyOf(Iterables.filter(fields,FieldUtil.FIELD_IS_STATIC));
  this.instanceFields=ImmutableSortedSet.copyOf(Iterables.filter(fields,FieldUtil.FIELD_IS_INSTANCE));
  this.directMethods=ImmutableSortedSet.copyOf(Iterables.filter(methods,MethodUtil.METHOD_IS_DIRECT));
  this.virtualMethods=ImmutableSortedSet.copyOf(Iterables.filter(methods,MethodUtil.METHOD_IS_VIRTUAL));
}","BuilderClassDef(@Nonnull BuilderTypeReference type,int accessFlags,@Nullable BuilderTypeReference superclass,@Nonnull BuilderTypeList interfaces,@Nullable BuilderStringReference sourceFile,@Nonnull BuilderAnnotationSet annotations,@Nullable Iterable<? extends BuilderField> fields,@Nullable Iterable<? extends BuilderMethod> methods){
  if (fields == null) {
    fields=ImmutableList.of();
  }
  if (methods == null) {
    methods=ImmutableList.of();
  }
  this.type=type;
  this.accessFlags=accessFlags;
  this.superclass=superclass;
  this.interfaces=interfaces;
  this.sourceFile=sourceFile;
  this.annotations=annotations;
  this.staticFields=ImmutableSortedSet.copyOf((Iterable<? extends BuilderField>)Iterables.filter(fields,FieldUtil.FIELD_IS_STATIC));
  this.instanceFields=ImmutableSortedSet.copyOf((Iterable<? extends BuilderField>)Iterables.filter(fields,FieldUtil.FIELD_IS_INSTANCE));
  this.directMethods=ImmutableSortedSet.copyOf((Iterable<? extends BuilderMethod>)Iterables.filter(methods,MethodUtil.METHOD_IS_DIRECT));
  this.virtualMethods=ImmutableSortedSet.copyOf((Iterable<? extends BuilderMethod>)Iterables.filter(methods,MethodUtil.METHOD_IS_VIRTUAL));
}",0.9376693766937668
45667,"private void insertFile(URI apkFileSystem,Map<String,String> zip_properties,File insert,String method,Path location) throws AndrolibException, IOException {
  try (FileSystem fs=FileSystems.newFileSystem(apkFileSystem,zip_properties)){
    Path root=fs.getPath(""String_Node_Str"");
    Path dest=fs.getPath(root.toString() + insert.getAbsolutePath().replace(location.toString(),""String_Node_Str""));
    Path newFile=Paths.get(insert.getAbsolutePath());
    Files.copy(newFile,dest,StandardCopyOption.REPLACE_EXISTING);
    fs.close();
  }
 }","private void insertFile(URI apkFileSystem,Map<String,String> zip_properties,File insert,String method,Path location) throws AndrolibException, IOException {
  try (FileSystem fs=FileSystems.newFileSystem(apkFileSystem,zip_properties)){
    Path root=fs.getPath(""String_Node_Str"");
    Path dest=fs.getPath(root.toString(),insert.getAbsolutePath().replace(location.toString(),""String_Node_Str""));
    Path newFile=Paths.get(insert.getAbsolutePath());
    Files.copy(newFile,dest,StandardCopyOption.REPLACE_EXISTING);
    fs.close();
  }
 }",0.9962894248608536
45668,"private void insertFolder(URI apkFileSystem,Map<String,String> zip_properties,File insert,String method,Path location) throws AndrolibException, IOException {
  try (FileSystem fs=FileSystems.newFileSystem(apkFileSystem,zip_properties)){
    Path root=fs.getPath(""String_Node_Str"");
    Path dest=fs.getPath(root.toString() + insert.getAbsolutePath().replace(location.toString(),""String_Node_Str""));
    Path parent=dest.normalize();
    if (parent != null && Files.notExists(parent)) {
      if (!Files.isDirectory(parent,LinkOption.NOFOLLOW_LINKS)) {
        Files.createDirectories(parent);
      }
    }
    fs.close();
  }
 }","private void insertFolder(URI apkFileSystem,Map<String,String> zip_properties,File insert,String method,Path location) throws AndrolibException, IOException {
  try (FileSystem fs=FileSystems.newFileSystem(apkFileSystem,zip_properties)){
    Path root=fs.getPath(""String_Node_Str"");
    Path dest=fs.getPath(root.toString(),insert.getAbsolutePath().replace(location.toString(),""String_Node_Str""));
    Path parent=dest.normalize();
    if (parent != null && Files.notExists(parent)) {
      if (!Files.isDirectory(parent,LinkOption.NOFOLLOW_LINKS)) {
        Files.createDirectories(parent);
      }
    }
    fs.close();
  }
 }",0.9968203497615262
45669,"@Nonnull public ClassDef getClassDef(String type){
  if (dontLoadClassPath) {
    return null;
  }
  ClassDef ret=availableClasses.get(type);
  if (ret == null) {
    throw new UnresolvedClassException(""String_Node_Str"",type);
  }
  return ret;
}","@Nonnull public ClassDef getClassDef(String type){
  if (dontLoadClassPath) {
    throw new UnresolvedClassException(""String_Node_Str"",type);
  }
  ClassDef ret=availableClasses.get(type);
  if (ret == null) {
    throw new UnresolvedClassException(""String_Node_Str"",type);
  }
  return ret;
}",0.5528756957328386
45670,"private void buildFile(String fileName,DexBuilder dexBuilder) throws AndrolibException, IOException {
  File inFile=new File(mSmaliDir,fileName);
  InputStream inStream=new FileInputStream(inFile);
  if (fileName.endsWith(""String_Node_Str"")) {
    try {
      if (!SmaliMod.assembleSmaliFile(inFile,dexBuilder,false,false)) {
        throw new AndrolibException(""String_Node_Str"" + fileName);
      }
    }
 catch (    IOException|RecognitionException ex) {
      throw new AndrolibException(ex);
    }
    return;
  }
  if (!fileName.endsWith(""String_Node_Str"")) {
    LOGGER.warning(""String_Node_Str"" + inFile);
    return;
  }
  StringBuilder out=new StringBuilder();
  List<String> lines=IOUtils.readLines(inStream);
  if (!mFlags.get(""String_Node_Str"")) {
    final String[] linesArray=lines.toArray(new String[0]);
    for (int i=1; i < linesArray.length - 1; i++) {
      out.append(linesArray[i].split(""String_Node_Str"",2)[1]).append('\n');
    }
  }
 else {
    lines.remove(lines.size() - 1);
    ListIterator<String> it=lines.listIterator(1);
    out.append(""String_Node_Str"").append(inFile.getName()).append(""String_Node_Str"");
    while (it.hasNext()) {
      String line=it.next().split(""String_Node_Str"",2)[1].trim();
      if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(""String_Node_Str"")) {
        continue;
      }
      if (line.startsWith(""String_Node_Str"")) {
        it.previous();
        DebugInjector.inject(it,out);
        continue;
      }
      out.append(line).append('\n');
    }
  }
}","private void buildFile(String fileName,DexBuilder dexBuilder) throws AndrolibException, IOException {
  File inFile=new File(mSmaliDir,fileName);
  InputStream inStream=new FileInputStream(inFile);
  if (fileName.endsWith(""String_Node_Str"")) {
    try {
      if (!SmaliMod.assembleSmaliFile(inFile,dexBuilder,false,false)) {
        throw new AndrolibException(""String_Node_Str"" + fileName);
      }
    }
 catch (    IOException|RecognitionException ex) {
      throw new AndrolibException(ex);
    }
    return;
  }
  if (!fileName.endsWith(""String_Node_Str"")) {
    LOGGER.warning(""String_Node_Str"" + inFile);
    return;
  }
  StringBuilder out=new StringBuilder();
  List<String> lines=IOUtils.readLines(inStream);
  if (!mFlags.get(""String_Node_Str"")) {
    final String[] linesArray=lines.toArray(new String[0]);
    for (int i=1; i < linesArray.length - 1; i++) {
      out.append(linesArray[i].split(""String_Node_Str"",2)[1]).append('\n');
    }
  }
 else {
    lines.remove(lines.size() - 1);
    ListIterator<String> it=lines.listIterator(1);
    out.append(""String_Node_Str"").append(inFile.getName()).append(""String_Node_Str"");
    while (it.hasNext()) {
      String line=it.next().split(""String_Node_Str"",2)[1].trim();
      if (line.isEmpty() || line.charAt(0) == '#' || line.startsWith(""String_Node_Str"")) {
        continue;
      }
      if (line.startsWith(""String_Node_Str"")) {
        it.previous();
        DebugInjector.inject(it,out);
        continue;
      }
      out.append(line).append('\n');
    }
  }
  try {
    if (!SmaliMod.assembleSmaliFile(out.toString(),dexBuilder,false,false,inFile)) {
      throw new AndrolibException(""String_Node_Str"" + fileName);
    }
  }
 catch (  IOException|RecognitionException ex) {
    throw new AndrolibException(ex);
  }
}",0.9223826714801444
45671,"private void decode() throws AndrolibException {
  try {
    ClassPath.dontLoadClassPath=mDebug;
    baksmaliOptions options=new baksmaliOptions();
    options.deodex=false;
    options.outputDirectory=mOutDir.toAbsolutePath().toString();
    options.noParameterRegisters=false;
    options.useLocalsDirective=true;
    options.useSequentialLabels=true;
    options.outputDebugInfo=mBakDeb;
    options.addCodeOffsets=false;
    options.jobs=-1;
    options.noAccessorComments=false;
    options.registerInfo=(mDebug ? baksmaliOptions.DIFFPRE : 0);
    options.ignoreErrors=false;
    options.inlineResolver=null;
    options.checkPackagePrivateAccess=false;
    if (options.jobs <= 0) {
      if (mDebug) {
        options.jobs=1;
      }
 else {
        options.jobs=Runtime.getRuntime().availableProcessors();
        if (options.jobs > 6) {
          options.jobs=6;
        }
      }
    }
    DexBackedDexFile dexFile=DexFileFactory.loadDexFile(mApkFile,mApi);
    if (dexFile.isOdexFile()) {
      throw new AndrolibException(""String_Node_Str"");
    }
    if (options.inlineResolver == null && dexFile instanceof DexBackedOdexFile) {
      options.inlineResolver=InlineMethodResolver.createInlineMethodResolver(((DexBackedOdexFile)dexFile).getOdexVersion());
    }
    baksmali.disassembleDexFile(dexFile,options);
    if (mDebug) {
      Files.walkFileTree(mOutDir,new SmaliFileVisitor());
    }
  }
 catch (  IOException ex) {
    throw new AndrolibException(ex);
  }
}","private void decode() throws AndrolibException {
  try {
    ClassPath.dontLoadClassPath=mDebug;
    baksmaliOptions options=new baksmaliOptions();
    options.deodex=false;
    options.outputDirectory=mOutDir.toAbsolutePath().toString();
    options.noParameterRegisters=false;
    options.useLocalsDirective=true;
    options.useSequentialLabels=true;
    options.outputDebugInfo=mBakDeb;
    options.addCodeOffsets=false;
    options.jobs=-1;
    options.noAccessorComments=false;
    options.registerInfo=(mDebug ? baksmaliOptions.DIFFPRE : 0);
    options.ignoreErrors=false;
    options.inlineResolver=null;
    options.checkPackagePrivateAccess=false;
    if (options.jobs <= 0) {
      if (mDebug) {
        options.jobs=1;
      }
 else {
        options.jobs=Runtime.getRuntime().availableProcessors();
        if (options.jobs > 6) {
          options.jobs=6;
        }
      }
    }
    DexBackedDexFile dexFile=DexFileFactory.loadDexFile(mApkFile,mApi);
    if (dexFile.isOdexFile()) {
      throw new AndrolibException(""String_Node_Str"");
    }
    if (dexFile instanceof DexBackedOdexFile) {
      options.inlineResolver=InlineMethodResolver.createInlineMethodResolver(((DexBackedOdexFile)dexFile).getOdexVersion());
    }
    baksmali.disassembleDexFile(dexFile,options);
    if (mDebug) {
      Files.walkFileTree(mOutDir,new SmaliFileVisitor());
    }
  }
 catch (  IOException ex) {
    throw new AndrolibException(ex);
  }
}",0.9883641341546886
45672,"private static void cmdDecode(CommandLine cli) throws AndrolibException {
  ApkDecoder decoder=new ApkDecoder();
  int paraCount=cli.getArgList().size();
  String apkName=(String)cli.getArgList().get(paraCount - 1);
  File outDir=null;
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugMode(true);
  }
  if (cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugLinePrefix(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setBaksmaliDebugMode(false);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkTag(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setForceDelete(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeResources(ApkDecoder.DECODE_RESOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setKeepBrokenResources(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkDir(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setOutDir(new File(cli.getOptionValue(""String_Node_Str"")));
  }
 else {
    String outName=apkName;
    outName=outName.endsWith(""String_Node_Str"") ? outName.substring(0,outName.length() - 4) : outName + ""String_Node_Str"";
    outName=new File(outName).getName();
    outDir=new File(outName);
    decoder.setOutDir(outDir);
  }
  decoder.setApkFile(new File(apkName));
  try {
    decoder.decode();
  }
 catch (  OutDirExistsException ex) {
    System.out.println(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  InFileNotFoundException ex) {
    System.out.println(""String_Node_Str"" + apkName + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  CantFindFrameworkResException ex) {
    System.out.println(""String_Node_Str"" + String.valueOf(ex.getPkgId()) + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException ex) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
}","private static void cmdDecode(CommandLine cli) throws AndrolibException {
  ApkDecoder decoder=new ApkDecoder();
  int paraCount=cli.getArgList().size();
  String apkName=(String)cli.getArgList().get(paraCount - 1);
  File outDir=null;
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugMode(true);
  }
  if (cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugLinePrefix(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setBaksmaliDebugMode(false);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkTag(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setForceDelete(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeResources(ApkDecoder.DECODE_RESOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setKeepBrokenResources(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkDir(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setAnalysisMode(true,false);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setOutDir(new File(cli.getOptionValue(""String_Node_Str"")));
  }
 else {
    String outName=apkName;
    outName=outName.endsWith(""String_Node_Str"") ? outName.substring(0,outName.length() - 4) : outName + ""String_Node_Str"";
    outName=new File(outName).getName();
    outDir=new File(outName);
    decoder.setOutDir(outDir);
  }
  decoder.setApkFile(new File(apkName));
  try {
    decoder.decode();
  }
 catch (  OutDirExistsException ex) {
    System.out.println(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  InFileNotFoundException ex) {
    System.out.println(""String_Node_Str"" + apkName + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  CantFindFrameworkResException ex) {
    System.out.println(""String_Node_Str"" + String.valueOf(ex.getPkgId()) + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException ex) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
}",0.9761766414875072
45673,"@SuppressWarnings(""String_Node_Str"") private static void _Options(){
  Option versionOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option advanceOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noSrcOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugLinePrefix=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create();
  Option debugBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noDbgOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option forceDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option frameTagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameIfDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option keepResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").create(""String_Node_Str"");
  Option forceBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option aaptOption=OptionBuilder.withLongOpt(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option originalOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option tagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option quietOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  Option verboseOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  if (isAdvanceMode()) {
    DecodeOptions.addOption(debugLinePrefix);
    DecodeOptions.addOption(debugDecOption);
    DecodeOptions.addOption(noDbgOption);
    DecodeOptions.addOption(keepResOption);
    BuildOptions.addOption(debugBuiOption);
    BuildOptions.addOption(aaptOption);
    BuildOptions.addOption(originalOption);
  }
  normalOptions.addOption(versionOption);
  normalOptions.addOption(advanceOption);
  DecodeOptions.addOption(frameTagOption);
  DecodeOptions.addOption(outputDecOption);
  DecodeOptions.addOption(frameDirOption);
  DecodeOptions.addOption(forceDecOption);
  DecodeOptions.addOption(noSrcOption);
  DecodeOptions.addOption(noResOption);
  BuildOptions.addOption(outputBuiOption);
  BuildOptions.addOption(frameDirOption);
  BuildOptions.addOption(forceBuiOption);
  frameOptions.addOption(tagOption);
  frameOptions.addOption(frameIfDirOption);
  for (  Object op : normalOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : DecodeOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : BuildOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : frameOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  allOptions.addOption(debugLinePrefix);
  allOptions.addOption(debugDecOption);
  allOptions.addOption(noDbgOption);
  allOptions.addOption(keepResOption);
  allOptions.addOption(debugBuiOption);
  allOptions.addOption(aaptOption);
  allOptions.addOption(originalOption);
  allOptions.addOption(verboseOption);
  allOptions.addOption(quietOption);
}","@SuppressWarnings(""String_Node_Str"") private static void _Options(){
  Option versionOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option advanceOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noSrcOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option analysisOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugLinePrefix=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create();
  Option debugBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noDbgOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option forceDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option frameTagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameIfDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option keepResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").create(""String_Node_Str"");
  Option forceBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option aaptOption=OptionBuilder.withLongOpt(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option originalOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option tagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option quietOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  Option verboseOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  if (isAdvanceMode()) {
    DecodeOptions.addOption(debugLinePrefix);
    DecodeOptions.addOption(debugDecOption);
    DecodeOptions.addOption(noDbgOption);
    DecodeOptions.addOption(keepResOption);
    DecodeOptions.addOption(analysisOption);
    BuildOptions.addOption(debugBuiOption);
    BuildOptions.addOption(aaptOption);
    BuildOptions.addOption(originalOption);
  }
  normalOptions.addOption(versionOption);
  normalOptions.addOption(advanceOption);
  DecodeOptions.addOption(frameTagOption);
  DecodeOptions.addOption(outputDecOption);
  DecodeOptions.addOption(frameDirOption);
  DecodeOptions.addOption(forceDecOption);
  DecodeOptions.addOption(noSrcOption);
  DecodeOptions.addOption(noResOption);
  BuildOptions.addOption(outputBuiOption);
  BuildOptions.addOption(frameDirOption);
  BuildOptions.addOption(forceBuiOption);
  frameOptions.addOption(tagOption);
  frameOptions.addOption(frameIfDirOption);
  for (  Object op : normalOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : DecodeOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : BuildOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : frameOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  allOptions.addOption(analysisOption);
  allOptions.addOption(debugLinePrefix);
  allOptions.addOption(debugDecOption);
  allOptions.addOption(noDbgOption);
  allOptions.addOption(keepResOption);
  allOptions.addOption(debugBuiOption);
  allOptions.addOption(aaptOption);
  allOptions.addOption(originalOption);
  allOptions.addOption(verboseOption);
  allOptions.addOption(quietOption);
}",0.9776443800455392
45674,"public void decode() throws AndrolibException, IOException {
  File outDir=getOutDir();
  if (!mForceDelete && outDir.exists()) {
    throw new OutDirExistsException();
  }
  if (!mApkFile.isFile() || !mApkFile.canRead()) {
    throw new InFileNotFoundException();
  }
  try {
    OS.rmdir(outDir);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
  outDir.mkdirs();
  if (hasSources()) {
switch (mDecodeSources) {
case DECODE_SOURCES_NONE:
      mAndrolib.decodeSourcesRaw(mApkFile,outDir,mDebug);
    break;
case DECODE_SOURCES_SMALI:
  mAndrolib.decodeSourcesSmali(mApkFile,outDir,mDebug,mDebugLinePrefix,mBakDeb);
break;
case DECODE_SOURCES_JAVA:
mAndrolib.decodeSourcesJava(mApkFile,outDir,mDebug);
break;
}
}
if (hasResources()) {
ZipExtFile zef=new ZipExtFile(mApkFile.getAbsolutePath());
ZipArchiveEntry ze=zef.getEntry(""String_Node_Str"");
if (ze != null) {
int compression=ze.getMethod();
mCompressResources=(compression != ZipEntry.STORED) && (compression == ZipEntry.DEFLATED);
}
zef.close();
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeResourcesRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeResourcesFull(mApkFile,outDir,getResTable());
break;
}
}
 else {
if (hasManifest()) {
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeManifestRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeManifestFull(mApkFile,outDir,getResTable());
break;
}
}
}
mAndrolib.decodeRawFiles(mApkFile,outDir);
mAndrolib.decodeUnknownFiles(mApkFile,outDir,mResTable);
mAndrolib.writeOriginalFiles(mApkFile,outDir);
writeMetaFile();
}","public void decode() throws AndrolibException, IOException {
  File outDir=getOutDir();
  setAnalysisMode(mAnalysisMode,true);
  if (!mForceDelete && outDir.exists()) {
    throw new OutDirExistsException();
  }
  if (!mApkFile.isFile() || !mApkFile.canRead()) {
    throw new InFileNotFoundException();
  }
  try {
    OS.rmdir(outDir);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
  outDir.mkdirs();
  if (hasSources()) {
switch (mDecodeSources) {
case DECODE_SOURCES_NONE:
      mAndrolib.decodeSourcesRaw(mApkFile,outDir,mDebug);
    break;
case DECODE_SOURCES_SMALI:
  mAndrolib.decodeSourcesSmali(mApkFile,outDir,mDebug,mDebugLinePrefix,mBakDeb);
break;
case DECODE_SOURCES_JAVA:
mAndrolib.decodeSourcesJava(mApkFile,outDir,mDebug);
break;
}
}
if (hasResources()) {
ZipExtFile zef=new ZipExtFile(mApkFile.getAbsolutePath());
ZipArchiveEntry ze=zef.getEntry(""String_Node_Str"");
if (ze != null) {
int compression=ze.getMethod();
mCompressResources=(compression != ZipEntry.STORED) && (compression == ZipEntry.DEFLATED);
}
zef.close();
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeResourcesRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeResourcesFull(mApkFile,outDir,getResTable());
break;
}
}
 else {
if (hasManifest()) {
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeManifestRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeManifestFull(mApkFile,outDir,getResTable());
break;
}
}
}
mAndrolib.decodeRawFiles(mApkFile,outDir);
mAndrolib.decodeUnknownFiles(mApkFile,outDir,mResTable);
mAndrolib.writeOriginalFiles(mApkFile,outDir);
writeMetaFile();
}",0.988291804262984
45675,"public void adjust_package_manifest(ResTable resTable,String filePath) throws AndrolibException {
  Map<String,String> packageInfo=resTable.getPackageInfo();
  if ((packageInfo.get(""String_Node_Str"").equalsIgnoreCase(packageInfo.get(""String_Node_Str"")) || (""String_Node_Str"".equalsIgnoreCase(packageInfo.get(""String_Node_Str"")) || (""String_Node_Str"".equalsIgnoreCase(packageInfo.get(""String_Node_Str"")))))) {
    LOGGER.info(""String_Node_Str"");
  }
 else {
    try {
      LOGGER.info(""String_Node_Str"");
      DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
      DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
      Document doc=docBuilder.parse(filePath.toString());
      Node manifest=doc.getFirstChild();
      NamedNodeMap attr=manifest.getAttributes();
      Node nodeAttr=attr.getNamedItem(""String_Node_Str"");
      mPackageRenamed=nodeAttr.getNodeValue();
      nodeAttr.setNodeValue(packageInfo.get(""String_Node_Str""));
      TransformerFactory transformerFactory=TransformerFactory.newInstance();
      Transformer transformer=transformerFactory.newTransformer();
      DOMSource source=new DOMSource(doc);
      StreamResult result=new StreamResult(new File(filePath));
      transformer.transform(source,result);
    }
 catch (    SAXException|ParserConfigurationException|IOException|TransformerException ex) {
      throw new AndrolibException(ex);
    }
  }
}","public void adjust_package_manifest(ResTable resTable,String filePath) throws AndrolibException {
  Map<String,String> packageInfo=resTable.getPackageInfo();
  if ((packageInfo.get(""String_Node_Str"").equalsIgnoreCase(packageInfo.get(""String_Node_Str"")) || (""String_Node_Str"".equalsIgnoreCase(packageInfo.get(""String_Node_Str"")) || (""String_Node_Str"".equalsIgnoreCase(packageInfo.get(""String_Node_Str"")))))) {
    LOGGER.info(""String_Node_Str"");
  }
 else {
    try {
      LOGGER.info(""String_Node_Str"");
      DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
      DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
      Document doc=docBuilder.parse(filePath.toString());
      Node manifest=doc.getFirstChild();
      NamedNodeMap attr=manifest.getAttributes();
      Node nodeAttr=attr.getNamedItem(""String_Node_Str"");
      mPackageRenamed=nodeAttr.getNodeValue();
      nodeAttr.setNodeValue(packageInfo.get(""String_Node_Str""));
      TransformerFactory transformerFactory=TransformerFactory.newInstance();
      Transformer transformer=transformerFactory.newTransformer();
      transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
      transformer.setOutputProperty(OutputKeys.STANDALONE,""String_Node_Str"");
      DOMSource source=new DOMSource(doc);
      StreamResult result=new StreamResult(new File(filePath));
      transformer.transform(source,result);
    }
 catch (    SAXException|ParserConfigurationException|IOException|TransformerException ex) {
      throw new AndrolibException(ex);
    }
  }
}",0.948959032907992
45676,"public void remove_manifest_versions(String filePath) throws AndrolibException {
  File f=new File(filePath);
  if (f.exists()) {
    try {
      DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
      DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
      Document doc=docBuilder.parse(filePath.toString());
      Node manifest=doc.getFirstChild();
      NamedNodeMap attr=manifest.getAttributes();
      Node vCode=attr.getNamedItem(""String_Node_Str"");
      Node vName=attr.getNamedItem(""String_Node_Str"");
      if (vCode != null) {
        attr.removeNamedItem(""String_Node_Str"");
      }
      if (vName != null) {
        attr.removeNamedItem(""String_Node_Str"");
      }
      TransformerFactory transformerFactory=TransformerFactory.newInstance();
      Transformer transformer=transformerFactory.newTransformer();
      DOMSource source=new DOMSource(doc);
      StreamResult result=new StreamResult(new File(filePath));
      transformer.transform(source,result);
    }
 catch (    SAXException|ParserConfigurationException|IOException|TransformerException ex) {
      throw new AndrolibException(ex);
    }
  }
}","public void remove_manifest_versions(String filePath) throws AndrolibException {
  File f=new File(filePath);
  if (f.exists()) {
    try {
      DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
      DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
      Document doc=docBuilder.parse(filePath.toString());
      Node manifest=doc.getFirstChild();
      NamedNodeMap attr=manifest.getAttributes();
      Node vCode=attr.getNamedItem(""String_Node_Str"");
      Node vName=attr.getNamedItem(""String_Node_Str"");
      if (vCode != null) {
        attr.removeNamedItem(""String_Node_Str"");
      }
      if (vName != null) {
        attr.removeNamedItem(""String_Node_Str"");
      }
      TransformerFactory transformerFactory=TransformerFactory.newInstance();
      Transformer transformer=transformerFactory.newTransformer();
      transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
      transformer.setOutputProperty(OutputKeys.STANDALONE,""String_Node_Str"");
      DOMSource source=new DOMSource(doc);
      StreamResult result=new StreamResult(new File(filePath));
      transformer.transform(source,result);
    }
 catch (    SAXException|ParserConfigurationException|IOException|TransformerException ex) {
      throw new AndrolibException(ex);
    }
  }
}",0.9383116883116884
45677,"public void decode(ResTable resTable,ExtFile apkFile,File outDir) throws AndrolibException {
  Duo<ResFileDecoder,AXmlResourceParser> duo=getResFileDecoder();
  ResFileDecoder fileDecoder=duo.m1;
  ResAttrDecoder attrDecoder=duo.m2.getAttrDecoder();
  attrDecoder.setCurrentPackage(resTable.listMainPackages().iterator().next());
  Directory inApk, in=null, out;
  try {
    inApk=apkFile.getDirectory();
    out=new FileDirectory(outDir);
    LOGGER.info(""String_Node_Str"");
    fileDecoder.decodeManifest(inApk,""String_Node_Str"",out,""String_Node_Str"");
    adjust_package_manifest(resTable,outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
    remove_manifest_versions(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
    if (inApk.containsDir(""String_Node_Str"")) {
      in=inApk.getDir(""String_Node_Str"");
    }
    out=out.createDir(""String_Node_Str"");
  }
 catch (  DirectoryException ex) {
    throw new AndrolibException(ex);
  }
  ExtMXSerializer xmlSerializer=getResXmlSerializer();
  for (  ResPackage pkg : resTable.listMainPackages()) {
    attrDecoder.setCurrentPackage(pkg);
    LOGGER.info(""String_Node_Str"");
    for (    ResResource res : pkg.listFiles()) {
      fileDecoder.decode(res,in,out);
    }
    LOGGER.info(""String_Node_Str"");
    for (    ResValuesFile valuesFile : pkg.listValuesFiles()) {
      generateValuesFile(valuesFile,out,xmlSerializer);
    }
    generatePublicXml(pkg,out,xmlSerializer);
    LOGGER.info(""String_Node_Str"");
  }
  AndrolibException decodeError=duo.m2.getFirstError();
  if (decodeError != null) {
    throw decodeError;
  }
}","public void decode(ResTable resTable,ExtFile apkFile,File outDir) throws AndrolibException {
  Duo<ResFileDecoder,AXmlResourceParser> duo=getResFileDecoder();
  ResFileDecoder fileDecoder=duo.m1;
  ResAttrDecoder attrDecoder=duo.m2.getAttrDecoder();
  attrDecoder.setCurrentPackage(resTable.listMainPackages().iterator().next());
  Directory inApk, in=null, out;
  try {
    inApk=apkFile.getDirectory();
    out=new FileDirectory(outDir);
    LOGGER.info(""String_Node_Str"");
    fileDecoder.decodeManifest(inApk,""String_Node_Str"",out,""String_Node_Str"");
    adjust_package_manifest(resTable,outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
    if (resTable.getAnalysisMode() == false) {
      remove_manifest_versions(outDir.getAbsolutePath() + File.separator + ""String_Node_Str"");
    }
    if (inApk.containsDir(""String_Node_Str"")) {
      in=inApk.getDir(""String_Node_Str"");
    }
    out=out.createDir(""String_Node_Str"");
  }
 catch (  DirectoryException ex) {
    throw new AndrolibException(ex);
  }
  ExtMXSerializer xmlSerializer=getResXmlSerializer();
  for (  ResPackage pkg : resTable.listMainPackages()) {
    attrDecoder.setCurrentPackage(pkg);
    LOGGER.info(""String_Node_Str"");
    for (    ResResource res : pkg.listFiles()) {
      fileDecoder.decode(res,in,out);
    }
    LOGGER.info(""String_Node_Str"");
    for (    ResValuesFile valuesFile : pkg.listValuesFiles()) {
      generateValuesFile(valuesFile,out,xmlSerializer);
    }
    generatePublicXml(pkg,out,xmlSerializer);
    LOGGER.info(""String_Node_Str"");
  }
  AndrolibException decodeError=duo.m2.getFirstError();
  if (decodeError != null) {
    throw decodeError;
  }
}",0.983216356423558
45678,"public void remove_application_debug(String filePath) throws AndrolibException {
  try {
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    Document doc=docBuilder.parse(filePath.toString());
    Node application=doc.getElementById(""String_Node_Str"");
    NamedNodeMap attr=application.getAttributes();
    Node debugAttr=attr.getNamedItem(""String_Node_Str"");
    if (debugAttr != null) {
      attr.removeNamedItem(""String_Node_Str"");
    }
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    DOMSource source=new DOMSource(doc);
    StreamResult result=new StreamResult(new File(filePath));
    transformer.transform(source,result);
  }
 catch (  SAXException|ParserConfigurationException|IOException|TransformerException ex) {
    throw new AndrolibException(ex);
  }
}","public void remove_application_debug(String filePath) throws AndrolibException {
  try {
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    Document doc=docBuilder.parse(filePath.toString());
    Node application=doc.getElementById(""String_Node_Str"");
    NamedNodeMap attr=application.getAttributes();
    Node debugAttr=attr.getNamedItem(""String_Node_Str"");
    if (debugAttr != null) {
      attr.removeNamedItem(""String_Node_Str"");
    }
    TransformerFactory transformerFactory=TransformerFactory.newInstance();
    Transformer transformer=transformerFactory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    transformer.setOutputProperty(OutputKeys.STANDALONE,""String_Node_Str"");
    DOMSource source=new DOMSource(doc);
    StreamResult result=new StreamResult(new File(filePath));
    transformer.transform(source,result);
  }
 catch (  SAXException|ParserConfigurationException|IOException|TransformerException ex) {
    throw new AndrolibException(ex);
  }
}",0.9282945736434108
45679,"private boolean parseAttr(XmlPullParser pp) throws AndrolibException {
  ResTable restable=resTable;
  for (int i=0; i < pp.getAttributeCount(); i++) {
    final String a_ns=""String_Node_Str"";
    String ns=pp.getAttributeNamespace(i);
    if (a_ns.equalsIgnoreCase(ns)) {
      String name=pp.getAttributeName(i);
      String value=pp.getAttributeValue(i);
      if (name != null && value != null) {
        if (name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str"")) {
          restable.addSdkInfo(name,value);
        }
 else {
          restable.clearSdkInfo();
          return false;
        }
      }
    }
 else {
      resTable.clearSdkInfo();
      if (i >= pp.getAttributeCount()) {
        return false;
      }
    }
  }
  return true;
}","private boolean parseAttr(XmlPullParser pp) throws AndrolibException {
  ResTable restable=resTable;
  for (int i=0; i < pp.getAttributeCount(); i++) {
    final String a_ns=""String_Node_Str"";
    String ns=pp.getAttributeNamespace(i);
    if (a_ns.equalsIgnoreCase(ns)) {
      String name=pp.getAttributeName(i);
      String value=pp.getAttributeValue(i);
      if (name != null && value != null) {
        if (name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str"")) {
          restable.addSdkInfo(name,value);
        }
 else {
          restable.clearSdkInfo();
          return false;
        }
      }
    }
 else {
      resTable.clearSdkInfo();
      if (i >= pp.getAttributeCount()) {
        return false;
      }
    }
  }
  if (resTable.getAnalysisMode() == true) {
    return false;
  }
 else {
    return true;
  }
}",0.9387990762124712
45680,"@Override public void decode(InputStream in,OutputStream out) throws AndrolibException {
  try {
    XmlPullWrapperFactory factory=XmlPullWrapperFactory.newInstance();
    XmlPullParserWrapper par=factory.newPullParserWrapper(mParser);
    final ResTable resTable=((AXmlResourceParser)mParser).getAttrDecoder().getCurrentPackage().getResTable();
    XmlSerializerWrapper ser=new StaticXmlSerializerWrapper(mSerial,factory){
      boolean hideSdkInfo=false;
      boolean hidePackageInfo=false;
      @Override public void event(      XmlPullParser pp) throws XmlPullParserException, IOException {
        int type=pp.getEventType();
        if (type == XmlPullParser.START_TAG) {
          if (""String_Node_Str"".equalsIgnoreCase(pp.getName())) {
            try {
              hidePackageInfo=parseManifest(pp);
            }
 catch (            AndrolibException e) {
            }
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(pp.getName())) {
            try {
              hideSdkInfo=parseAttr(pp);
              if (hideSdkInfo) {
                return;
              }
            }
 catch (            AndrolibException e) {
            }
          }
        }
 else         if (hideSdkInfo && type == XmlPullParser.END_TAG && ""String_Node_Str"".equalsIgnoreCase(pp.getName())) {
          return;
        }
 else         if (hidePackageInfo && type == XmlPullParser.END_TAG && ""String_Node_Str"".equalsIgnoreCase(pp.getName())) {
          super.event(pp);
          return;
        }
        super.event(pp);
      }
      private boolean parseManifest(      XmlPullParser pp) throws AndrolibException {
        ResTable restable=resTable;
        for (int i=0; i < pp.getAttributeCount(); i++) {
          if (pp.getAttributeName(i).equalsIgnoreCase((""String_Node_Str""))) {
            restable.addPackageInfo(""String_Node_Str"",pp.getAttributeValue(i));
          }
 else           if (pp.getAttributeName(i).equalsIgnoreCase(""String_Node_Str"")) {
            restable.addVersionInfo(""String_Node_Str"",pp.getAttributeValue(i).toString());
          }
 else           if (pp.getAttributeName(i).equalsIgnoreCase(""String_Node_Str"")) {
            restable.addVersionInfo(""String_Node_Str"",pp.getAttributeValue(i).toString());
          }
        }
        return true;
      }
      private boolean parseAttr(      XmlPullParser pp) throws AndrolibException {
        ResTable restable=resTable;
        for (int i=0; i < pp.getAttributeCount(); i++) {
          final String a_ns=""String_Node_Str"";
          String ns=pp.getAttributeNamespace(i);
          if (a_ns.equalsIgnoreCase(ns)) {
            String name=pp.getAttributeName(i);
            String value=pp.getAttributeValue(i);
            if (name != null && value != null) {
              if (name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str"")) {
                restable.addSdkInfo(name,value);
              }
 else {
                restable.clearSdkInfo();
                return false;
              }
            }
          }
 else {
            resTable.clearSdkInfo();
            if (i >= pp.getAttributeCount()) {
              return false;
            }
          }
        }
        return true;
      }
    }
;
    par.setInput(in,null);
    ser.setOutput(out,null);
    while (par.nextToken() != XmlPullParser.END_DOCUMENT) {
      ser.event(par);
    }
    ser.flush();
  }
 catch (  XmlPullParserException ex) {
    throw new AndrolibException(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    throw new AndrolibException(""String_Node_Str"",ex);
  }
}","@Override public void decode(InputStream in,OutputStream out) throws AndrolibException {
  try {
    XmlPullWrapperFactory factory=XmlPullWrapperFactory.newInstance();
    XmlPullParserWrapper par=factory.newPullParserWrapper(mParser);
    final ResTable resTable=((AXmlResourceParser)mParser).getAttrDecoder().getCurrentPackage().getResTable();
    XmlSerializerWrapper ser=new StaticXmlSerializerWrapper(mSerial,factory){
      boolean hideSdkInfo=false;
      boolean hidePackageInfo=false;
      @Override public void event(      XmlPullParser pp) throws XmlPullParserException, IOException {
        int type=pp.getEventType();
        if (type == XmlPullParser.START_TAG) {
          if (""String_Node_Str"".equalsIgnoreCase(pp.getName())) {
            try {
              hidePackageInfo=parseManifest(pp);
            }
 catch (            AndrolibException e) {
            }
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(pp.getName())) {
            try {
              hideSdkInfo=parseAttr(pp);
              if (hideSdkInfo) {
                return;
              }
            }
 catch (            AndrolibException e) {
            }
          }
        }
 else         if (hideSdkInfo && type == XmlPullParser.END_TAG && ""String_Node_Str"".equalsIgnoreCase(pp.getName())) {
          return;
        }
 else         if (hidePackageInfo && type == XmlPullParser.END_TAG && ""String_Node_Str"".equalsIgnoreCase(pp.getName())) {
          super.event(pp);
          return;
        }
        super.event(pp);
      }
      private boolean parseManifest(      XmlPullParser pp) throws AndrolibException {
        ResTable restable=resTable;
        for (int i=0; i < pp.getAttributeCount(); i++) {
          if (pp.getAttributeName(i).equalsIgnoreCase((""String_Node_Str""))) {
            restable.addPackageInfo(""String_Node_Str"",pp.getAttributeValue(i));
          }
 else           if (pp.getAttributeName(i).equalsIgnoreCase(""String_Node_Str"")) {
            restable.addVersionInfo(""String_Node_Str"",pp.getAttributeValue(i).toString());
          }
 else           if (pp.getAttributeName(i).equalsIgnoreCase(""String_Node_Str"")) {
            restable.addVersionInfo(""String_Node_Str"",pp.getAttributeValue(i).toString());
          }
        }
        return true;
      }
      private boolean parseAttr(      XmlPullParser pp) throws AndrolibException {
        ResTable restable=resTable;
        for (int i=0; i < pp.getAttributeCount(); i++) {
          final String a_ns=""String_Node_Str"";
          String ns=pp.getAttributeNamespace(i);
          if (a_ns.equalsIgnoreCase(ns)) {
            String name=pp.getAttributeName(i);
            String value=pp.getAttributeValue(i);
            if (name != null && value != null) {
              if (name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str"")) {
                restable.addSdkInfo(name,value);
              }
 else {
                restable.clearSdkInfo();
                return false;
              }
            }
          }
 else {
            resTable.clearSdkInfo();
            if (i >= pp.getAttributeCount()) {
              return false;
            }
          }
        }
        if (resTable.getAnalysisMode() == true) {
          return false;
        }
 else {
          return true;
        }
      }
    }
;
    par.setInput(in,null);
    ser.setOutput(out,null);
    while (par.nextToken() != XmlPullParser.END_DOCUMENT) {
      ser.event(par);
    }
    ser.flush();
  }
 catch (  XmlPullParserException ex) {
    throw new AndrolibException(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    throw new AndrolibException(""String_Node_Str"",ex);
  }
}",0.9827073763847608
45681,"@Override public void serializeToResValuesXml(XmlSerializer serializer,ResResource res) throws IOException, AndrolibException {
  String type=res.getResSpec().getType().getName();
  boolean item=!""String_Node_Str"".equals(mType) && !type.equals(mType);
  String body=encodeAsResXmlValue();
  if (body.contains(""String_Node_Str"")) {
    if (!res.getFilePath().contains(""String_Node_Str"")) {
      item=true;
    }
  }
  String tagName=item ? ""String_Node_Str"" : type;
  serializer.startTag(null,tagName);
  if (item) {
    serializer.attribute(null,""String_Node_Str"",type);
  }
  serializer.attribute(null,""String_Node_Str"",res.getResSpec().getName());
  serializeExtraXmlAttrs(serializer,res);
  if (!body.isEmpty()) {
    serializer.ignorableWhitespace(body);
  }
  serializer.endTag(null,tagName);
}","@Override public void serializeToResValuesXml(XmlSerializer serializer,ResResource res) throws IOException, AndrolibException {
  String type=res.getResSpec().getType().getName();
  boolean item=!""String_Node_Str"".equals(mType) && !type.equals(mType);
  String body=encodeAsResXmlValue();
  if (!type.equalsIgnoreCase(""String_Node_Str"")) {
    if (body.contains(""String_Node_Str"")) {
      if (!res.getFilePath().contains(""String_Node_Str"")) {
        item=true;
      }
    }
  }
  String tagName=item ? ""String_Node_Str"" : type;
  serializer.startTag(null,tagName);
  if (item) {
    serializer.attribute(null,""String_Node_Str"",type);
  }
  serializer.attribute(null,""String_Node_Str"",res.getResSpec().getName());
  serializeExtraXmlAttrs(serializer,res);
  if (!body.isEmpty()) {
    serializer.ignorableWhitespace(body);
  }
  serializer.endTag(null,tagName);
}",0.9453453453453452
45682,"private static void cmdDecode(CommandLine cli) throws AndrolibException {
  ApkDecoder decoder=new ApkDecoder();
  int paraCount=cli.getArgList().size();
  String apkName=(String)cli.getArgList().get(paraCount - 1);
  File outDir=null;
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugMode(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setBaksmaliDebugMode(false);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkTag(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setForceDelete(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeResources(ApkDecoder.DECODE_RESOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setKeepBrokenResources(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkDir(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setOutDir(new File(cli.getOptionValue(""String_Node_Str"")));
  }
 else {
    String outName=apkName;
    outName=outName.endsWith(""String_Node_Str"") ? outName.substring(0,outName.length() - 4) : outName + ""String_Node_Str"";
    outName=new File(outName).getName();
    outDir=new File(outName);
    decoder.setOutDir(outDir);
  }
  decoder.setApkFile(new File(apkName));
  try {
    decoder.decode();
  }
 catch (  OutDirExistsException ex) {
    System.out.println(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  InFileNotFoundException ex) {
    System.out.println(""String_Node_Str"" + apkName + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  CantFindFrameworkResException ex) {
    System.out.println(""String_Node_Str"" + String.valueOf(ex.getPkgId()) + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException ex) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
}","private static void cmdDecode(CommandLine cli) throws AndrolibException {
  ApkDecoder decoder=new ApkDecoder();
  int paraCount=cli.getArgList().size();
  String apkName=(String)cli.getArgList().get(paraCount - 1);
  File outDir=null;
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugMode(true);
  }
  if (cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugLinePrefix(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setBaksmaliDebugMode(false);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkTag(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setForceDelete(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeResources(ApkDecoder.DECODE_RESOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setKeepBrokenResources(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkDir(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setOutDir(new File(cli.getOptionValue(""String_Node_Str"")));
  }
 else {
    String outName=apkName;
    outName=outName.endsWith(""String_Node_Str"") ? outName.substring(0,outName.length() - 4) : outName + ""String_Node_Str"";
    outName=new File(outName).getName();
    outDir=new File(outName);
    decoder.setOutDir(outDir);
  }
  decoder.setApkFile(new File(apkName));
  try {
    decoder.decode();
  }
 catch (  OutDirExistsException ex) {
    System.out.println(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  InFileNotFoundException ex) {
    System.out.println(""String_Node_Str"" + apkName + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  CantFindFrameworkResException ex) {
    System.out.println(""String_Node_Str"" + String.valueOf(ex.getPkgId()) + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException ex) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
}",0.9762340036563072
45683,"@SuppressWarnings(""String_Node_Str"") private static void _Options(){
  Option versionOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option advanceOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noSrcOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noDbgOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option forceDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option frameTagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameIfDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option keepResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").create(""String_Node_Str"");
  Option forceBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option aaptOption=OptionBuilder.withLongOpt(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option originalOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option tagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option quietOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  Option verboseOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  if (isAdvanceMode()) {
    DecodeOptions.addOption(debugDecOption);
    DecodeOptions.addOption(noDbgOption);
    DecodeOptions.addOption(keepResOption);
    BuildOptions.addOption(debugBuiOption);
    BuildOptions.addOption(aaptOption);
    BuildOptions.addOption(originalOption);
  }
  normalOptions.addOption(versionOption);
  normalOptions.addOption(advanceOption);
  DecodeOptions.addOption(frameTagOption);
  DecodeOptions.addOption(outputDecOption);
  DecodeOptions.addOption(frameDirOption);
  DecodeOptions.addOption(forceDecOption);
  DecodeOptions.addOption(noSrcOption);
  DecodeOptions.addOption(noResOption);
  BuildOptions.addOption(outputBuiOption);
  BuildOptions.addOption(frameDirOption);
  BuildOptions.addOption(forceBuiOption);
  frameOptions.addOption(tagOption);
  frameOptions.addOption(frameIfDirOption);
  for (  Object op : normalOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : DecodeOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : BuildOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : frameOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  allOptions.addOption(debugDecOption);
  allOptions.addOption(noDbgOption);
  allOptions.addOption(keepResOption);
  allOptions.addOption(debugBuiOption);
  allOptions.addOption(aaptOption);
  allOptions.addOption(originalOption);
  allOptions.addOption(verboseOption);
  allOptions.addOption(quietOption);
}","@SuppressWarnings(""String_Node_Str"") private static void _Options(){
  Option versionOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option advanceOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noSrcOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugLinePrefix=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create();
  Option debugBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noDbgOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option forceDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option frameTagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameIfDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option keepResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").create(""String_Node_Str"");
  Option forceBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option aaptOption=OptionBuilder.withLongOpt(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option originalOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option tagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option quietOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  Option verboseOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  if (isAdvanceMode()) {
    DecodeOptions.addOption(debugLinePrefix);
    DecodeOptions.addOption(debugDecOption);
    DecodeOptions.addOption(noDbgOption);
    DecodeOptions.addOption(keepResOption);
    BuildOptions.addOption(debugBuiOption);
    BuildOptions.addOption(aaptOption);
    BuildOptions.addOption(originalOption);
  }
  normalOptions.addOption(versionOption);
  normalOptions.addOption(advanceOption);
  DecodeOptions.addOption(frameTagOption);
  DecodeOptions.addOption(outputDecOption);
  DecodeOptions.addOption(frameDirOption);
  DecodeOptions.addOption(forceDecOption);
  DecodeOptions.addOption(noSrcOption);
  DecodeOptions.addOption(noResOption);
  BuildOptions.addOption(outputBuiOption);
  BuildOptions.addOption(frameDirOption);
  BuildOptions.addOption(forceBuiOption);
  frameOptions.addOption(tagOption);
  frameOptions.addOption(frameIfDirOption);
  for (  Object op : normalOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : DecodeOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : BuildOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : frameOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  allOptions.addOption(debugLinePrefix);
  allOptions.addOption(debugDecOption);
  allOptions.addOption(noDbgOption);
  allOptions.addOption(keepResOption);
  allOptions.addOption(debugBuiOption);
  allOptions.addOption(aaptOption);
  allOptions.addOption(originalOption);
  allOptions.addOption(verboseOption);
  allOptions.addOption(quietOption);
}",0.9732608695652174
45684,"public void decodeSourcesSmali(File apkFile,File outDir,boolean debug,boolean bakdeb) throws AndrolibException {
  try {
    File smaliDir=new File(outDir,SMALI_DIRNAME);
    OS.rmdir(smaliDir);
    smaliDir.mkdirs();
    LOGGER.info(""String_Node_Str"");
    SmaliDecoder.decode(apkFile,smaliDir,debug,bakdeb);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
}","public void decodeSourcesSmali(File apkFile,File outDir,boolean debug,String debugLinePrefix,boolean bakdeb) throws AndrolibException {
  try {
    File smaliDir=new File(outDir,SMALI_DIRNAME);
    OS.rmdir(smaliDir);
    smaliDir.mkdirs();
    LOGGER.info(""String_Node_Str"");
    SmaliDecoder.decode(apkFile,smaliDir,debug,debugLinePrefix,bakdeb);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
}",0.9519112207151664
45685,"public void decode() throws AndrolibException, IOException {
  File outDir=getOutDir();
  if (!mForceDelete && outDir.exists()) {
    throw new OutDirExistsException();
  }
  if (!mApkFile.isFile() || !mApkFile.canRead()) {
    throw new InFileNotFoundException();
  }
  try {
    OS.rmdir(outDir);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
  outDir.mkdirs();
  if (hasSources()) {
switch (mDecodeSources) {
case DECODE_SOURCES_NONE:
      mAndrolib.decodeSourcesRaw(mApkFile,outDir,mDebug);
    break;
case DECODE_SOURCES_SMALI:
  mAndrolib.decodeSourcesSmali(mApkFile,outDir,mDebug,mBakDeb);
break;
case DECODE_SOURCES_JAVA:
mAndrolib.decodeSourcesJava(mApkFile,outDir,mDebug);
break;
}
}
if (hasResources()) {
ZipExtFile zef=new ZipExtFile(mApkFile.getAbsolutePath());
ZipArchiveEntry ze=zef.getEntry(""String_Node_Str"");
if (ze != null) {
int compression=ze.getMethod();
mCompressResources=(compression != ZipEntry.STORED) && (compression == ZipEntry.DEFLATED);
}
zef.close();
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeResourcesRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeResourcesFull(mApkFile,outDir,getResTable());
break;
}
}
 else {
if (hasManifest()) {
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeManifestRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeManifestFull(mApkFile,outDir,getResTable());
break;
}
}
}
mAndrolib.decodeRawFiles(mApkFile,outDir);
mAndrolib.decodeUnknownFiles(mApkFile,outDir,mResTable);
mAndrolib.writeOriginalFiles(mApkFile,outDir);
writeMetaFile();
}","public void decode() throws AndrolibException, IOException {
  File outDir=getOutDir();
  if (!mForceDelete && outDir.exists()) {
    throw new OutDirExistsException();
  }
  if (!mApkFile.isFile() || !mApkFile.canRead()) {
    throw new InFileNotFoundException();
  }
  try {
    OS.rmdir(outDir);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
  outDir.mkdirs();
  if (hasSources()) {
switch (mDecodeSources) {
case DECODE_SOURCES_NONE:
      mAndrolib.decodeSourcesRaw(mApkFile,outDir,mDebug);
    break;
case DECODE_SOURCES_SMALI:
  mAndrolib.decodeSourcesSmali(mApkFile,outDir,mDebug,mDebugLinePrefix,mBakDeb);
break;
case DECODE_SOURCES_JAVA:
mAndrolib.decodeSourcesJava(mApkFile,outDir,mDebug);
break;
}
}
if (hasResources()) {
ZipExtFile zef=new ZipExtFile(mApkFile.getAbsolutePath());
ZipArchiveEntry ze=zef.getEntry(""String_Node_Str"");
if (ze != null) {
int compression=ze.getMethod();
mCompressResources=(compression != ZipEntry.STORED) && (compression == ZipEntry.DEFLATED);
}
zef.close();
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeResourcesRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeResourcesFull(mApkFile,outDir,getResTable());
break;
}
}
 else {
if (hasManifest()) {
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeManifestRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeManifestFull(mApkFile,outDir,getResTable());
break;
}
}
}
mAndrolib.decodeRawFiles(mApkFile,outDir);
mAndrolib.decodeUnknownFiles(mApkFile,outDir,mResTable);
mAndrolib.writeOriginalFiles(mApkFile,outDir);
writeMetaFile();
}",0.9948091603053436
45686,"@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  String fileName=file.getFileName().toString();
  if (!fileName.endsWith(""String_Node_Str"")) {
    return FileVisitResult.CONTINUE;
  }
  fileName=fileName.substring(0,fileName.length() - 6);
  try (BufferedReader in=Files.newBufferedReader(file,Charset.defaultCharset());BufferedWriter out=Files.newBufferedWriter(file.resolveSibling(fileName + ""String_Node_Str""),Charset.defaultCharset())){
    TypeName type=TypeName.fromPath(mOutDir.relativize(file.resolveSibling(fileName)));
    out.write(""String_Node_Str"" + type.package_ + ""String_Node_Str""+ type.getName(true,true)+ ""String_Node_Str"");
    out.newLine();
    String line;
    while ((line=in.readLine()) != null) {
      out.write(""String_Node_Str"");
      out.write(line);
      out.newLine();
    }
    out.write(""String_Node_Str"");
    out.newLine();
  }
   Files.delete(file);
  return FileVisitResult.CONTINUE;
}","@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  String fileName=file.getFileName().toString();
  if (!fileName.endsWith(""String_Node_Str"")) {
    return FileVisitResult.CONTINUE;
  }
  fileName=fileName.substring(0,fileName.length() - 6);
  try (BufferedReader in=Files.newBufferedReader(file,Charset.defaultCharset());BufferedWriter out=Files.newBufferedWriter(file.resolveSibling(fileName + ""String_Node_Str""),Charset.defaultCharset())){
    TypeName type=TypeName.fromPath(mOutDir.relativize(file.resolveSibling(fileName)));
    out.write(""String_Node_Str"" + type.package_ + ""String_Node_Str""+ type.getName(true,true)+ ""String_Node_Str"");
    out.newLine();
    String line;
    final String debugLinePrefix=mDebugLinePrefix;
    while ((line=in.readLine()) != null) {
      out.write(debugLinePrefix);
      out.write(line);
      out.newLine();
    }
    out.write(""String_Node_Str"");
    out.newLine();
  }
   Files.delete(file);
  return FileVisitResult.CONTINUE;
}",0.9586034912718204
45687,"private SmaliDecoder(File apkFile,File outDir,boolean debug,boolean bakdeb){
  mApkFile=apkFile;
  mOutDir=outDir.toPath();
  mDebug=debug;
  mBakDeb=bakdeb;
}","private SmaliDecoder(File apkFile,File outDir,boolean debug,String debugLinePrefix,boolean bakdeb){
  mApkFile=apkFile;
  mOutDir=outDir.toPath();
  mDebug=debug;
  mDebugLinePrefix=debugLinePrefix;
  mBakDeb=bakdeb;
}",0.843501326259947
45688,"private static void cmdDecode(CommandLine cli) throws AndrolibException {
  ApkDecoder decoder=new ApkDecoder();
  int paraCount=cli.getArgList().size();
  String apkName=(String)cli.getArgList().get(paraCount - 1);
  File outDir=null;
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugMode(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setBaksmaliDebugMode(false);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkTag(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setForceDelete(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeResources(ApkDecoder.DECODE_RESOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setKeepBrokenResources(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkDir(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setOutDir(new File(cli.getOptionValue(""String_Node_Str"")));
  }
 else {
    String outName=apkName;
    outName=outName.endsWith(""String_Node_Str"") ? outName.substring(0,outName.length() - 4) : outName + ""String_Node_Str"";
    outName=new File(outName).getName();
    outDir=new File(outName);
    decoder.setOutDir(outDir);
  }
  decoder.setApkFile(new File(apkName));
  try {
    decoder.decode();
  }
 catch (  OutDirExistsException ex) {
    System.out.println(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  InFileNotFoundException ex) {
    System.out.println(""String_Node_Str"" + apkName + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  CantFindFrameworkResException ex) {
    System.out.println(""String_Node_Str"" + String.valueOf(ex.getPkgId()) + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException ex) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
}","private static void cmdDecode(CommandLine cli) throws AndrolibException {
  ApkDecoder decoder=new ApkDecoder();
  int paraCount=cli.getArgList().size();
  String apkName=(String)cli.getArgList().get(paraCount - 1);
  File outDir=null;
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugMode(true);
  }
  if (cli.hasOption(""String_Node_Str"")) {
    decoder.setDebugLinePrefix(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setBaksmaliDebugMode(false);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkTag(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setForceDelete(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setDecodeResources(ApkDecoder.DECODE_RESOURCES_NONE);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setKeepBrokenResources(true);
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setFrameworkDir(cli.getOptionValue(""String_Node_Str""));
  }
  if (cli.hasOption(""String_Node_Str"") || cli.hasOption(""String_Node_Str"")) {
    decoder.setOutDir(new File(cli.getOptionValue(""String_Node_Str"")));
  }
 else {
    String outName=apkName;
    outName=outName.endsWith(""String_Node_Str"") ? outName.substring(0,outName.length() - 4) : outName + ""String_Node_Str"";
    outName=new File(outName).getName();
    outDir=new File(outName);
    decoder.setOutDir(outDir);
  }
  decoder.setApkFile(new File(apkName));
  try {
    decoder.decode();
  }
 catch (  OutDirExistsException ex) {
    System.out.println(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  InFileNotFoundException ex) {
    System.out.println(""String_Node_Str"" + apkName + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  CantFindFrameworkResException ex) {
    System.out.println(""String_Node_Str"" + String.valueOf(ex.getPkgId()) + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException ex) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
}",0.9762340036563072
45689,"@SuppressWarnings(""String_Node_Str"") private static void _Options(){
  Option versionOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option advanceOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noSrcOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noDbgOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option forceDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option frameTagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameIfDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option keepResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").create(""String_Node_Str"");
  Option forceBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option aaptOption=OptionBuilder.withLongOpt(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option originalOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option tagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option quietOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  Option verboseOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  if (isAdvanceMode()) {
    DecodeOptions.addOption(debugDecOption);
    DecodeOptions.addOption(noDbgOption);
    DecodeOptions.addOption(keepResOption);
    BuildOptions.addOption(debugBuiOption);
    BuildOptions.addOption(aaptOption);
    BuildOptions.addOption(originalOption);
  }
  normalOptions.addOption(versionOption);
  normalOptions.addOption(advanceOption);
  DecodeOptions.addOption(frameTagOption);
  DecodeOptions.addOption(outputDecOption);
  DecodeOptions.addOption(frameDirOption);
  DecodeOptions.addOption(forceDecOption);
  DecodeOptions.addOption(noSrcOption);
  DecodeOptions.addOption(noResOption);
  BuildOptions.addOption(outputBuiOption);
  BuildOptions.addOption(frameDirOption);
  BuildOptions.addOption(forceBuiOption);
  frameOptions.addOption(tagOption);
  frameOptions.addOption(frameIfDirOption);
  for (  Object op : normalOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : DecodeOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : BuildOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : frameOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  allOptions.addOption(debugDecOption);
  allOptions.addOption(noDbgOption);
  allOptions.addOption(keepResOption);
  allOptions.addOption(debugBuiOption);
  allOptions.addOption(aaptOption);
  allOptions.addOption(originalOption);
  allOptions.addOption(verboseOption);
  allOptions.addOption(quietOption);
}","@SuppressWarnings(""String_Node_Str"") private static void _Options(){
  Option versionOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option advanceOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noSrcOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option debugLinePrefix=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create();
  Option debugBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option noDbgOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option forceDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option frameTagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option frameIfDirOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option keepResOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").create(""String_Node_Str"");
  Option forceBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option aaptOption=OptionBuilder.withLongOpt(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option originalOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").create(""String_Node_Str"");
  Option tagOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputBuiOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option outputDecOption=OptionBuilder.withLongOpt(""String_Node_Str"").withDescription(""String_Node_Str"").hasArg(true).withArgName(""String_Node_Str"").create(""String_Node_Str"");
  Option quietOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  Option verboseOption=OptionBuilder.withLongOpt(""String_Node_Str"").create(""String_Node_Str"");
  if (isAdvanceMode()) {
    DecodeOptions.addOption(debugLinePrefix);
    DecodeOptions.addOption(debugDecOption);
    DecodeOptions.addOption(noDbgOption);
    DecodeOptions.addOption(keepResOption);
    BuildOptions.addOption(debugBuiOption);
    BuildOptions.addOption(aaptOption);
    BuildOptions.addOption(originalOption);
  }
  normalOptions.addOption(versionOption);
  normalOptions.addOption(advanceOption);
  DecodeOptions.addOption(frameTagOption);
  DecodeOptions.addOption(outputDecOption);
  DecodeOptions.addOption(frameDirOption);
  DecodeOptions.addOption(forceDecOption);
  DecodeOptions.addOption(noSrcOption);
  DecodeOptions.addOption(noResOption);
  BuildOptions.addOption(outputBuiOption);
  BuildOptions.addOption(frameDirOption);
  BuildOptions.addOption(forceBuiOption);
  frameOptions.addOption(tagOption);
  frameOptions.addOption(frameIfDirOption);
  for (  Object op : normalOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : DecodeOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : BuildOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  for (  Object op : frameOptions.getOptions()) {
    allOptions.addOption((Option)op);
  }
  allOptions.addOption(debugLinePrefix);
  allOptions.addOption(debugDecOption);
  allOptions.addOption(noDbgOption);
  allOptions.addOption(keepResOption);
  allOptions.addOption(debugBuiOption);
  allOptions.addOption(aaptOption);
  allOptions.addOption(originalOption);
  allOptions.addOption(verboseOption);
  allOptions.addOption(quietOption);
}",0.9732608695652174
45690,"public void decodeSourcesSmali(File apkFile,File outDir,boolean debug,boolean bakdeb) throws AndrolibException {
  try {
    File smaliDir=new File(outDir,SMALI_DIRNAME);
    OS.rmdir(smaliDir);
    smaliDir.mkdirs();
    LOGGER.info(""String_Node_Str"");
    SmaliDecoder.decode(apkFile,smaliDir,debug,bakdeb);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
}","public void decodeSourcesSmali(File apkFile,File outDir,boolean debug,String debugLinePrefix,boolean bakdeb) throws AndrolibException {
  try {
    File smaliDir=new File(outDir,SMALI_DIRNAME);
    OS.rmdir(smaliDir);
    smaliDir.mkdirs();
    LOGGER.info(""String_Node_Str"");
    SmaliDecoder.decode(apkFile,smaliDir,debug,debugLinePrefix,bakdeb);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
}",0.9519112207151664
45691,"public void decode() throws AndrolibException, IOException {
  File outDir=getOutDir();
  if (!mForceDelete && outDir.exists()) {
    throw new OutDirExistsException();
  }
  if (!mApkFile.isFile() || !mApkFile.canRead()) {
    throw new InFileNotFoundException();
  }
  try {
    OS.rmdir(outDir);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
  outDir.mkdirs();
  if (hasSources()) {
switch (mDecodeSources) {
case DECODE_SOURCES_NONE:
      mAndrolib.decodeSourcesRaw(mApkFile,outDir,mDebug);
    break;
case DECODE_SOURCES_SMALI:
  mAndrolib.decodeSourcesSmali(mApkFile,outDir,mDebug,mBakDeb);
break;
case DECODE_SOURCES_JAVA:
mAndrolib.decodeSourcesJava(mApkFile,outDir,mDebug);
break;
}
}
if (hasResources()) {
ZipExtFile zef=new ZipExtFile(mApkFile.getAbsolutePath());
ZipArchiveEntry ze=zef.getEntry(""String_Node_Str"");
if (ze != null) {
int compression=ze.getMethod();
mCompressResources=(compression != ZipEntry.STORED) && (compression == ZipEntry.DEFLATED);
}
zef.close();
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeResourcesRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeResourcesFull(mApkFile,outDir,getResTable());
break;
}
}
 else {
if (hasManifest()) {
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeManifestRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeManifestFull(mApkFile,outDir,getResTable());
break;
}
}
}
mAndrolib.decodeRawFiles(mApkFile,outDir);
mAndrolib.decodeUnknownFiles(mApkFile,outDir,mResTable);
mAndrolib.writeOriginalFiles(mApkFile,outDir);
writeMetaFile();
}","public void decode() throws AndrolibException, IOException {
  File outDir=getOutDir();
  if (!mForceDelete && outDir.exists()) {
    throw new OutDirExistsException();
  }
  if (!mApkFile.isFile() || !mApkFile.canRead()) {
    throw new InFileNotFoundException();
  }
  try {
    OS.rmdir(outDir);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
  outDir.mkdirs();
  if (hasSources()) {
switch (mDecodeSources) {
case DECODE_SOURCES_NONE:
      mAndrolib.decodeSourcesRaw(mApkFile,outDir,mDebug);
    break;
case DECODE_SOURCES_SMALI:
  mAndrolib.decodeSourcesSmali(mApkFile,outDir,mDebug,mDebugLinePrefix,mBakDeb);
break;
case DECODE_SOURCES_JAVA:
mAndrolib.decodeSourcesJava(mApkFile,outDir,mDebug);
break;
}
}
if (hasResources()) {
ZipExtFile zef=new ZipExtFile(mApkFile.getAbsolutePath());
ZipArchiveEntry ze=zef.getEntry(""String_Node_Str"");
if (ze != null) {
int compression=ze.getMethod();
mCompressResources=(compression != ZipEntry.STORED) && (compression == ZipEntry.DEFLATED);
}
zef.close();
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeResourcesRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeResourcesFull(mApkFile,outDir,getResTable());
break;
}
}
 else {
if (hasManifest()) {
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeManifestRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeManifestFull(mApkFile,outDir,getResTable());
break;
}
}
}
mAndrolib.decodeRawFiles(mApkFile,outDir);
mAndrolib.decodeUnknownFiles(mApkFile,outDir,mResTable);
mAndrolib.writeOriginalFiles(mApkFile,outDir);
writeMetaFile();
}",0.9948091603053436
45692,"@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  String fileName=file.getFileName().toString();
  if (!fileName.endsWith(""String_Node_Str"")) {
    return FileVisitResult.CONTINUE;
  }
  fileName=fileName.substring(0,fileName.length() - 6);
  try (BufferedReader in=Files.newBufferedReader(file,Charset.defaultCharset());BufferedWriter out=Files.newBufferedWriter(file.resolveSibling(fileName + ""String_Node_Str""),Charset.defaultCharset())){
    TypeName type=TypeName.fromPath(mOutDir.relativize(file.resolveSibling(fileName)));
    out.write(""String_Node_Str"" + type.package_ + ""String_Node_Str""+ type.getName(true,true)+ ""String_Node_Str"");
    out.newLine();
    String line;
    while ((line=in.readLine()) != null) {
      out.write(""String_Node_Str"");
      out.write(line);
      out.newLine();
    }
    out.write(""String_Node_Str"");
    out.newLine();
  }
   Files.delete(file);
  return FileVisitResult.CONTINUE;
}","@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  String fileName=file.getFileName().toString();
  if (!fileName.endsWith(""String_Node_Str"")) {
    return FileVisitResult.CONTINUE;
  }
  fileName=fileName.substring(0,fileName.length() - 6);
  try (BufferedReader in=Files.newBufferedReader(file,Charset.defaultCharset());BufferedWriter out=Files.newBufferedWriter(file.resolveSibling(fileName + ""String_Node_Str""),Charset.defaultCharset())){
    TypeName type=TypeName.fromPath(mOutDir.relativize(file.resolveSibling(fileName)));
    out.write(""String_Node_Str"" + type.package_ + ""String_Node_Str""+ type.getName(true,true)+ ""String_Node_Str"");
    out.newLine();
    String line;
    final String debugLinePrefix=mDebugLinePrefix;
    while ((line=in.readLine()) != null) {
      out.write(debugLinePrefix);
      out.write(line);
      out.newLine();
    }
    out.write(""String_Node_Str"");
    out.newLine();
  }
   Files.delete(file);
  return FileVisitResult.CONTINUE;
}",0.9586034912718204
45693,"private SmaliDecoder(File apkFile,File outDir,boolean debug,boolean bakdeb){
  mApkFile=apkFile;
  mOutDir=outDir.toPath();
  mDebug=debug;
  mBakDeb=bakdeb;
}","private SmaliDecoder(File apkFile,File outDir,boolean debug,String debugLinePrefix,boolean bakdeb){
  mApkFile=apkFile;
  mOutDir=outDir.toPath();
  mDebug=debug;
  mDebugLinePrefix=debugLinePrefix;
  mBakDeb=bakdeb;
}",0.843501326259947
45694,"private boolean step(){
  String line=next();
  if (line.isEmpty()) {
    return false;
  }
switch (line.charAt(0)) {
case '#':
    return processComment(line);
case ':':
  append(line);
return false;
case '.':
return processDirective(line);
default :
return processInstruction(line);
}
}","private boolean step(){
  String line=next();
  if (line.isEmpty()) {
    return false;
  }
switch (line.charAt(0)) {
case '#':
    return processComment(line);
case ':':
  append(line);
return false;
case '.':
return processDirective(line);
default :
if (!areParamsInjected) {
injectRemainingParams();
}
return processInstruction(line);
}
}",0.8298887122416534
45695,"private void inject() throws AndrolibException {
  String definition=nextAndAppend();
  if (definition.contains(""String_Node_Str"") || definition.contains(""String_Node_Str"")) {
    nextAndAppend();
    return;
  }
  injectParameters(definition);
  boolean end=false;
  while (!end) {
    end=step();
  }
}","private void inject() throws AndrolibException {
  String definition=nextAndAppend();
  if (definition.contains(""String_Node_Str"") || definition.contains(""String_Node_Str"")) {
    nextAndAppend();
    return;
  }
  parseParamsNumber(definition);
  boolean end=false;
  while (!end) {
    end=step();
  }
}",0.9622331691297208
45696,"private boolean processDirective(String line){
  String line2=line.substring(1);
  if (line2.startsWith(""String_Node_Str"") || line2.equals(""String_Node_Str"") || line2.startsWith(""String_Node_Str"")|| line2.startsWith(""String_Node_Str"")|| line2.startsWith(""String_Node_Str"")) {
    return false;
  }
  append(line);
  if (line2.equals(""String_Node_Str"")) {
    return true;
  }
  if (line2.startsWith(""String_Node_Str"") || line2.equals(""String_Node_Str"") || line2.startsWith(""String_Node_Str"")|| line2.startsWith(""String_Node_Str"")) {
    while (true) {
      line2=nextAndAppend();
      if (line2.startsWith(""String_Node_Str"")) {
        break;
      }
    }
  }
  return false;
}","private boolean processDirective(String line){
  String line2=line.substring(1);
  if (line2.startsWith(""String_Node_Str"") || line2.startsWith(""String_Node_Str"") || line2.startsWith(""String_Node_Str"")) {
    return false;
  }
  if (line2.equals(""String_Node_Str"")) {
    if (!areParamsInjected) {
      injectRemainingParams();
    }
    return false;
  }
  if (line2.equals(""String_Node_Str"")) {
    mOut.append(""String_Node_Str"").append(currParam++).append(""String_Node_Str"");
    return false;
  }
  append(line);
  if (line2.equals(""String_Node_Str"")) {
    return true;
  }
  if (line2.startsWith(""String_Node_Str"") || line2.equals(""String_Node_Str"") || line2.startsWith(""String_Node_Str"")|| line2.startsWith(""String_Node_Str"")) {
    while (true) {
      line2=nextAndAppend();
      if (line2.startsWith(""String_Node_Str"")) {
        break;
      }
    }
  }
  return false;
}",0.7229686500319897
45697,"private static void cmdDecode(String[] args) throws InvalidArgsError, AndrolibException {
  ApkDecoder decoder=new ApkDecoder();
  int i;
  for (i=0; i < args.length; i++) {
    String opt=args[i];
    if (!opt.startsWith(""String_Node_Str"")) {
      break;
    }
    if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_NONE);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setDebugMode(true);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setBaksmaliDebugMode(false);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      i++;
      if (i >= args.length) {
        throw new InvalidArgsError();
      }
      decoder.setFrameworkTag(args[i]);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setForceDelete(true);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setDecodeResources(ApkDecoder.DECODE_RESOURCES_NONE);
    }
 else     if (""String_Node_Str"".equals(opt)) {
      decoder.setKeepBrokenResources(true);
    }
 else     if (""String_Node_Str"".equals(opt)) {
      i++;
      System.out.println(""String_Node_Str"" + args[i]);
      decoder.setFrameworkDir(args[i]);
    }
 else {
      throw new InvalidArgsError();
    }
  }
  String outName=null;
  if (args.length == i + 2) {
    outName=args[i + 1];
  }
 else   if (args.length == i + 1) {
    outName=args[i];
    outName=outName.endsWith(""String_Node_Str"") ? outName.substring(0,outName.length() - 4) : outName + ""String_Node_Str"";
    outName=new File(outName).getName();
  }
 else {
    throw new InvalidArgsError();
  }
  File outDir=new File(outName);
  decoder.setOutDir(outDir);
  decoder.setApkFile(new File(args[i]));
  try {
    decoder.decode();
  }
 catch (  OutDirExistsException ex) {
    System.out.println(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  InFileNotFoundException ex) {
    System.out.println(""String_Node_Str"" + args[i] + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  CantFindFrameworkResException ex) {
    System.out.println(""String_Node_Str"" + String.valueOf(ex.getPkgId()) + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
}","private static void cmdDecode(String[] args) throws InvalidArgsError, AndrolibException {
  ApkDecoder decoder=new ApkDecoder();
  int i;
  for (i=0; i < args.length; i++) {
    String opt=args[i];
    if (!opt.startsWith(""String_Node_Str"")) {
      break;
    }
    if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setDecodeSources(ApkDecoder.DECODE_SOURCES_NONE);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setDebugMode(true);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setBaksmaliDebugMode(false);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      i++;
      if (i >= args.length) {
        throw new InvalidArgsError();
      }
      decoder.setFrameworkTag(args[i]);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setForceDelete(true);
    }
 else     if (""String_Node_Str"".equals(opt) || ""String_Node_Str"".equals(opt)) {
      decoder.setDecodeResources(ApkDecoder.DECODE_RESOURCES_NONE);
    }
 else     if (""String_Node_Str"".equals(opt)) {
      decoder.setKeepBrokenResources(true);
    }
 else     if (""String_Node_Str"".equals(opt)) {
      i++;
      System.out.println(""String_Node_Str"" + args[i]);
      decoder.setFrameworkDir(args[i]);
    }
 else {
      throw new InvalidArgsError();
    }
  }
  String outName=null;
  if (args.length == i + 2) {
    outName=args[i + 1];
  }
 else   if (args.length == i + 1) {
    outName=args[i];
    outName=outName.endsWith(""String_Node_Str"") ? outName.substring(0,outName.length() - 4) : outName + ""String_Node_Str"";
    outName=new File(outName).getName();
  }
 else {
    throw new InvalidArgsError();
  }
  File outDir=new File(outName);
  decoder.setOutDir(outDir);
  decoder.setApkFile(new File(args[i]));
  try {
    decoder.decode();
  }
 catch (  OutDirExistsException ex) {
    System.out.println(""String_Node_Str"" + outDir.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  InFileNotFoundException ex) {
    System.out.println(""String_Node_Str"" + args[i] + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  CantFindFrameworkResException ex) {
    System.out.println(""String_Node_Str"" + String.valueOf(ex.getPkgId()) + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException ex) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
}",0.981215027977618
45698,"public void build(ExtFile appDir,File outFile,HashMap<String,Boolean> flags,ExtFile origApk,String aaptPath) throws BrutException {
  mAaptPath=aaptPath;
  Map<String,Object> meta=readMetaFile(appDir);
  Object t1=meta.get(""String_Node_Str"");
  flags.put(""String_Node_Str"",t1 == null ? false : (Boolean)t1);
  mAndRes.setSdkInfo((Map<String,String>)meta.get(""String_Node_Str""));
  if (flags.get(""String_Node_Str"")) {
    if (!origApk.isFile() || !origApk.canRead()) {
      throw new InFileNotFoundException();
    }
 else {
      mOrigApkFile=origApk;
    }
  }
  if (outFile == null) {
    String outFileName=(String)meta.get(""String_Node_Str"");
    outFile=new File(appDir,""String_Node_Str"" + File.separator + (outFileName == null ? ""String_Node_Str"" : outFileName));
  }
  new File(appDir,APK_DIRNAME).mkdirs();
  buildSources(appDir,flags);
  buildResources(appDir,flags,(Map<String,Object>)meta.get(""String_Node_Str""));
  buildLib(appDir,flags);
  buildApk(appDir,outFile,flags);
}","public void build(ExtFile appDir,File outFile,HashMap<String,Boolean> flags,ExtFile origApk,String aaptPath) throws BrutException {
  mAaptPath=aaptPath;
  Map<String,Object> meta=readMetaFile(appDir);
  Object t1=meta.get(""String_Node_Str"");
  flags.put(""String_Node_Str"",t1 == null ? false : (Boolean)t1);
  flags.put(""String_Node_Str"",meta.get(""String_Node_Str"") == null ? false : (Boolean)meta.get(""String_Node_Str""));
  mAndRes.setSdkInfo((Map<String,String>)meta.get(""String_Node_Str""));
  if (flags.get(""String_Node_Str"")) {
    if (!origApk.isFile() || !origApk.canRead()) {
      throw new InFileNotFoundException();
    }
 else {
      mOrigApkFile=origApk;
    }
  }
  if (outFile == null) {
    String outFileName=(String)meta.get(""String_Node_Str"");
    outFile=new File(appDir,""String_Node_Str"" + File.separator + (outFileName == null ? ""String_Node_Str"" : outFileName));
  }
  new File(appDir,APK_DIRNAME).mkdirs();
  buildSources(appDir,flags);
  buildResources(appDir,flags,(Map<String,Object>)meta.get(""String_Node_Str""));
  buildLib(appDir,flags);
  buildApk(appDir,outFile,flags);
}",0.944949736716132
45699,"public void decode() throws AndrolibException {
  File outDir=getOutDir();
  if (!mForceDelete && outDir.exists()) {
    throw new OutDirExistsException();
  }
  if (!mApkFile.isFile() || !mApkFile.canRead()) {
    throw new InFileNotFoundException();
  }
  try {
    OS.rmdir(outDir);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
  outDir.mkdirs();
  if (hasSources()) {
switch (mDecodeSources) {
case DECODE_SOURCES_NONE:
      mAndrolib.decodeSourcesRaw(mApkFile,outDir,mDebug);
    break;
case DECODE_SOURCES_SMALI:
  mAndrolib.decodeSourcesSmali(mApkFile,outDir,mDebug,mBakDeb);
break;
case DECODE_SOURCES_JAVA:
mAndrolib.decodeSourcesJava(mApkFile,outDir,mDebug);
break;
}
}
if (hasResources()) {
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeResourcesRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeResourcesFull(mApkFile,outDir,getResTable());
break;
}
}
 else {
if (hasManifest()) {
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeManifestRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeManifestFull(mApkFile,outDir,getResTable());
break;
}
}
}
mAndrolib.decodeRawFiles(mApkFile,outDir);
writeMetaFile();
}","public void decode() throws AndrolibException, IOException {
  File outDir=getOutDir();
  if (!mForceDelete && outDir.exists()) {
    throw new OutDirExistsException();
  }
  if (!mApkFile.isFile() || !mApkFile.canRead()) {
    throw new InFileNotFoundException();
  }
  try {
    OS.rmdir(outDir);
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
  outDir.mkdirs();
  if (hasSources()) {
switch (mDecodeSources) {
case DECODE_SOURCES_NONE:
      mAndrolib.decodeSourcesRaw(mApkFile,outDir,mDebug);
    break;
case DECODE_SOURCES_SMALI:
  mAndrolib.decodeSourcesSmali(mApkFile,outDir,mDebug,mBakDeb);
break;
case DECODE_SOURCES_JAVA:
mAndrolib.decodeSourcesJava(mApkFile,outDir,mDebug);
break;
}
}
if (hasResources()) {
JarFile jf=new JarFile(mApkFile.getAbsoluteFile());
Enumeration<?> e=jf.entries();
while (e.hasMoreElements()) {
JarEntry je=(JarEntry)e.nextElement();
if (je.getName().equalsIgnoreCase(""String_Node_Str"")) {
setCompressionType(je.getMethod());
continue;
}
}
jf.close();
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeResourcesRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeResourcesFull(mApkFile,outDir,getResTable());
break;
}
}
 else {
if (hasManifest()) {
switch (mDecodeResources) {
case DECODE_RESOURCES_NONE:
mAndrolib.decodeManifestRaw(mApkFile,outDir);
break;
case DECODE_RESOURCES_FULL:
mAndrolib.decodeManifestFull(mApkFile,outDir,getResTable());
break;
}
}
}
mAndrolib.decodeRawFiles(mApkFile,outDir);
writeMetaFile();
}",0.8979444644789037
45700,"private void writeMetaFile() throws AndrolibException {
  Map<String,Object> meta=new LinkedHashMap<String,Object>();
  meta.put(""String_Node_Str"",Androlib.getVersion());
  meta.put(""String_Node_Str"",mApkFile.getName());
  if (mDecodeResources != DECODE_RESOURCES_NONE && (hasManifest() || hasResources())) {
    meta.put(""String_Node_Str"",Boolean.valueOf(mAndrolib.isFrameworkApk(getResTable())));
    putUsesFramework(meta);
    putSdkInfo(meta);
    putPackageInfo(meta);
  }
  mAndrolib.writeMetaFile(mOutDir,meta);
}","private void writeMetaFile() throws AndrolibException {
  Map<String,Object> meta=new LinkedHashMap<String,Object>();
  meta.put(""String_Node_Str"",Androlib.getVersion());
  meta.put(""String_Node_Str"",mApkFile.getName());
  if (mDecodeResources != DECODE_RESOURCES_NONE && (hasManifest() || hasResources())) {
    meta.put(""String_Node_Str"",Boolean.valueOf(mAndrolib.isFrameworkApk(getResTable())));
    putUsesFramework(meta);
    putSdkInfo(meta);
    putPackageInfo(meta);
    putCompressionInfo(meta);
  }
  mAndrolib.writeMetaFile(mOutDir,meta);
}",0.9720149253731344
45701,"public void aaptPackage(File apkFile,File manifest,File resDir,File rawDir,File assetDir,File[] include,HashMap<String,Boolean> flags,String aaptPath) throws AndrolibException {
  List<String> cmd=new ArrayList<String>();
  if (!aaptPath.isEmpty()) {
    File aaptFile=new File(aaptPath);
    if (aaptFile.canRead() && aaptFile.exists()) {
      aaptFile.setExecutable(true);
      cmd.add(aaptFile.getPath());
      if (flags.get(""String_Node_Str"")) {
        LOGGER.info(aaptFile.getPath() + ""String_Node_Str"");
      }
    }
 else {
      LOGGER.warning(""String_Node_Str"");
      cmd.add(""String_Node_Str"");
    }
  }
 else {
    cmd.add(""String_Node_Str"");
  }
  cmd.add(""String_Node_Str"");
  if (flags.get(""String_Node_Str"")) {
    cmd.add(""String_Node_Str"");
  }
  if (flags.get(""String_Node_Str"")) {
    cmd.add(""String_Node_Str"");
  }
  if (flags.get(""String_Node_Str"")) {
    cmd.add(""String_Node_Str"");
  }
  if (mMinSdkVersion != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(mMinSdkVersion);
  }
  if (mTargetSdkVersion != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(mTargetSdkVersion);
  }
  if (mMaxSdkVersion != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(mMaxSdkVersion);
  }
  if (mPackageRenamed != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(mPackageRenamed);
  }
  cmd.add(""String_Node_Str"");
  cmd.add(apkFile.getAbsolutePath());
  if (flags.get(""String_Node_Str"")) {
    cmd.add(""String_Node_Str"");
  }
  if (include != null) {
    for (    File file : include) {
      cmd.add(""String_Node_Str"");
      cmd.add(file.getPath());
    }
  }
  if (resDir != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(resDir.getAbsolutePath());
  }
  if (manifest != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(manifest.getAbsolutePath());
  }
  if (assetDir != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(assetDir.getAbsolutePath());
  }
  if (rawDir != null) {
    cmd.add(rawDir.getAbsolutePath());
  }
  try {
    OS.exec(cmd.toArray(new String[0]));
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
}","public void aaptPackage(File apkFile,File manifest,File resDir,File rawDir,File assetDir,File[] include,HashMap<String,Boolean> flags,String aaptPath) throws AndrolibException {
  List<String> cmd=new ArrayList<String>();
  if (!aaptPath.isEmpty()) {
    File aaptFile=new File(aaptPath);
    if (aaptFile.canRead() && aaptFile.exists()) {
      aaptFile.setExecutable(true);
      cmd.add(aaptFile.getPath());
      if (flags.get(""String_Node_Str"")) {
        LOGGER.info(aaptFile.getPath() + ""String_Node_Str"");
      }
    }
 else {
      LOGGER.warning(""String_Node_Str"");
      cmd.add(""String_Node_Str"");
    }
  }
 else {
    cmd.add(""String_Node_Str"");
  }
  cmd.add(""String_Node_Str"");
  if (flags.get(""String_Node_Str"")) {
    cmd.add(""String_Node_Str"");
  }
  if (flags.get(""String_Node_Str"")) {
    cmd.add(""String_Node_Str"");
  }
  if (flags.get(""String_Node_Str"")) {
    cmd.add(""String_Node_Str"");
  }
  if (mMinSdkVersion != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(mMinSdkVersion);
  }
  if (mTargetSdkVersion != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(mTargetSdkVersion);
  }
  if (mMaxSdkVersion != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(mMaxSdkVersion);
  }
  if (mPackageRenamed != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(mPackageRenamed);
  }
  cmd.add(""String_Node_Str"");
  cmd.add(apkFile.getAbsolutePath());
  if (flags.get(""String_Node_Str"")) {
    cmd.add(""String_Node_Str"");
  }
  if (!(flags.get(""String_Node_Str""))) {
    cmd.add(""String_Node_Str"");
    cmd.add(""String_Node_Str"");
  }
  if (include != null) {
    for (    File file : include) {
      cmd.add(""String_Node_Str"");
      cmd.add(file.getPath());
    }
  }
  if (resDir != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(resDir.getAbsolutePath());
  }
  if (manifest != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(manifest.getAbsolutePath());
  }
  if (assetDir != null) {
    cmd.add(""String_Node_Str"");
    cmd.add(assetDir.getAbsolutePath());
  }
  if (rawDir != null) {
    cmd.add(rawDir.getAbsolutePath());
  }
  try {
    OS.exec(cmd.toArray(new String[0]));
  }
 catch (  BrutException ex) {
    throw new AndrolibException(ex);
  }
}",0.9745624270711786
45702,"@BeforeClass public static void beforeClass() throws BrutException {
  sTmpDir=new ExtFile(OS.createTempDirectory());
  sTestOrigDir=new ExtFile(sTmpDir,""String_Node_Str"");
  sTestNewDir=new ExtFile(sTmpDir,""String_Node_Str"");
  File testApk=new File(sTmpDir,""String_Node_Str"");
  LOGGER.info(""String_Node_Str"");
  TestUtils.copyResourceDir(BuildAndDecodeTest.class,""String_Node_Str"",sTestOrigDir);
  LOGGER.info(""String_Node_Str"");
  ExtFile blank=null;
  new Androlib().build(sTestOrigDir,testApk,BuildAndDecodeTest.returnStock(),blank,""String_Node_Str"");
  LOGGER.info(""String_Node_Str"");
  ApkDecoder apkDecoder=new ApkDecoder(testApk);
  apkDecoder.setOutDir(sTestNewDir);
  apkDecoder.decode();
}","@BeforeClass public static void beforeClass() throws BrutException, IOException {
  sTmpDir=new ExtFile(OS.createTempDirectory());
  sTestOrigDir=new ExtFile(sTmpDir,""String_Node_Str"");
  sTestNewDir=new ExtFile(sTmpDir,""String_Node_Str"");
  File testApk=new File(sTmpDir,""String_Node_Str"");
  LOGGER.info(""String_Node_Str"");
  TestUtils.copyResourceDir(BuildAndDecodeTest.class,""String_Node_Str"",sTestOrigDir);
  LOGGER.info(""String_Node_Str"");
  ExtFile blank=null;
  new Androlib().build(sTestOrigDir,testApk,BuildAndDecodeTest.returnStock(),blank,""String_Node_Str"");
  LOGGER.info(""String_Node_Str"");
  ApkDecoder apkDecoder=new ApkDecoder(testApk);
  apkDecoder.setOutDir(sTestNewDir);
  apkDecoder.decode();
}",0.9908256880733946
45703,"public void buildApk(File appDir,File outApk,HashMap<String,Boolean> flags) throws AndrolibException {
  LOGGER.info(""String_Node_Str"");
  if (outApk.exists()) {
    outApk.delete();
  }
 else {
    File outDir=outApk.getParentFile();
    if (outDir != null && !outDir.exists()) {
      outDir.mkdirs();
    }
  }
  File assetDir=new File(appDir,""String_Node_Str"");
  if (!assetDir.exists()) {
    assetDir=null;
  }
  mAndRes.aaptPackage(outApk,null,null,new File(appDir,APK_DIRNAME),assetDir,null,flags);
  if (flags.get(""String_Node_Str"")) {
    try {
      LOGGER.info(""String_Node_Str"");
      ZipFile editOrig=new ZipFile(mOrigApkFile.getAbsoluteFile());
      ZipParameters parameters=new ZipParameters();
      parameters.setCompressionMethod(Zip4jConstants.COMP_STORE);
      parameters.setCompressionLevel(0);
      parameters.setIncludeRootFolder(true);
      parameters.setRootFolderInZip(""String_Node_Str"");
      editOrig.addFolder(new File(appDir,APK_DIRNAME + ""String_Node_Str"").getAbsolutePath(),parameters);
      if (assetDir.exists()) {
      }
      parameters.setFileNameInZip(""String_Node_Str"");
    }
 catch (    ZipException e) {
      LOGGER.warning(e.getMessage());
    }
  }
}","public void buildApk(File appDir,File outApk,HashMap<String,Boolean> flags) throws AndrolibException {
  LOGGER.info(""String_Node_Str"");
  if (outApk.exists()) {
    outApk.delete();
  }
 else {
    File outDir=outApk.getParentFile();
    if (outDir != null && !outDir.exists()) {
      outDir.mkdirs();
    }
  }
  File assetDir=new File(appDir,""String_Node_Str"");
  if (!assetDir.exists()) {
    assetDir=null;
  }
  mAndRes.aaptPackage(outApk,null,null,new File(appDir,APK_DIRNAME),assetDir,null,flags);
  if (flags.get(""String_Node_Str"")) {
    try {
      LOGGER.info(""String_Node_Str"");
      ZipFile editOrig=new ZipFile(mOrigApkFile.getAbsoluteFile());
      ZipParameters parameters=new ZipParameters();
      parameters.setCompressionMethod(Zip4jConstants.COMP_STORE);
      parameters.setCompressionLevel(0);
      parameters.setIncludeRootFolder(true);
      parameters.setRootFolderInZip(""String_Node_Str"");
      editOrig.addFolder(new File(appDir,APK_DIRNAME + ""String_Node_Str"").getAbsolutePath(),parameters);
      if (assetDir != null) {
      }
      parameters.setFileNameInZip(""String_Node_Str"");
    }
 catch (    ZipException ex) {
      throw new AndrolibException(ex);
    }
  }
}",0.9688667496886676
45704,"private void decode() throws AndrolibException {
  try {
    baksmali.disassembleDexFile(mApkFile.getAbsolutePath(),new DexFile(mApkFile),false,mOutDir.getAbsolutePath(),null,null,null,false,true,true,true,false,false,mDebug ? main.FULLMERGE : 0,false,mDebug ? true : false,null);
  }
 catch (  IOException ex) {
    throw new AndrolibException(ex);
  }
}","private void decode() throws AndrolibException {
  if (mDebug) {
    ClassPath.dontLoadClassPath=true;
  }
  try {
    baksmali.disassembleDexFile(mApkFile.getAbsolutePath(),new DexFile(mApkFile),false,mOutDir.getAbsolutePath(),null,null,null,false,true,true,true,false,false,mDebug ? main.DIFFPRE : 0,false,false,null);
  }
 catch (  IOException ex) {
    throw new AndrolibException(ex);
  }
}",0.8826666666666667
45705,"public String getType() throws AndrolibException {
  if (mItems.length == 0) {
    return null;
  }
  String type=mItems[0].getType();
  if (!""String_Node_Str"".equals(type) && !""String_Node_Str"".equals(type)) {
    return null;
  }
  for (int i=1; i < mItems.length; i++) {
    if (StringUtils.containsIgnoreCase(""String_Node_Str"",mItems[i].encodeAsResXmlItemValue()) || mItems[i].getType().equalsIgnoreCase(""String_Node_Str"")) {
      return ""String_Node_Str"";
    }
    if (!type.equals(mItems[i].getType())) {
      return null;
    }
  }
  return type;
}","public String getType() throws AndrolibException {
  if (mItems.length == 0) {
    return null;
  }
  String type=mItems[0].getType();
  if (!""String_Node_Str"".equals(type) && !""String_Node_Str"".equals(type)) {
    return null;
  }
  for (int i=1; i < mItems.length; i++) {
    if (!type.equals(mItems[i].getType())) {
      return null;
    }
  }
  return type;
}",0.6529284164859002
45706,"@Test public void valuesArraysTest() throws BrutException {
  compareValuesFiles(""String_Node_Str"");
}","@Test public void valuesArraysTest() throws BrutException {
  compareValuesFiles(""String_Node_Str"");
  compareValuesFiles(""String_Node_Str"");
}",0.8326530612244898
45707,"private String generateQualifiers(){
  StringBuilder ret=new StringBuilder();
  if (mcc != 0) {
    ret.append(""String_Node_Str"").append(String.format(""String_Node_Str"",mcc));
    if (mnc != 0) {
      ret.append(""String_Node_Str"").append(mnc);
    }
  }
  if (language[0] != '\00') {
    ret.append('-').append(language);
    if (country[0] != '\00') {
      ret.append(""String_Node_Str"").append(country);
    }
  }
  if (smallestScreenWidthDp != 0) {
    ret.append(""String_Node_Str"").append(smallestScreenWidthDp).append(""String_Node_Str"");
  }
  if (screenWidthDp != 0) {
    ret.append(""String_Node_Str"").append(screenWidthDp).append(""String_Node_Str"");
  }
  if (screenHeightDp != 0) {
    ret.append(""String_Node_Str"").append(screenHeightDp).append(""String_Node_Str"");
  }
switch (screenLayout & MASK_SCREENSIZE) {
case SCREENSIZE_SMALL:
    ret.append(""String_Node_Str"");
  break;
case SCREENSIZE_NORMAL:
ret.append(""String_Node_Str"");
break;
case SCREENSIZE_LARGE:
ret.append(""String_Node_Str"");
break;
case SCREENSIZE_XLARGE:
ret.append(""String_Node_Str"");
break;
}
switch (screenLayout & MASK_SCREENLONG) {
case SCREENLONG_YES:
ret.append(""String_Node_Str"");
break;
case SCREENLONG_NO:
ret.append(""String_Node_Str"");
break;
}
switch (orientation) {
case ORIENTATION_PORT:
ret.append(""String_Node_Str"");
break;
case ORIENTATION_LAND:
ret.append(""String_Node_Str"");
break;
case ORIENTATION_SQUARE:
ret.append(""String_Node_Str"");
break;
}
switch (uiMode & MASK_UI_MODE_TYPE) {
case UI_MODE_TYPE_CAR:
ret.append(""String_Node_Str"");
break;
case UI_MODE_TYPE_DESK:
ret.append(""String_Node_Str"");
break;
}
switch (uiMode & MASK_UI_MODE_NIGHT) {
case UI_MODE_NIGHT_YES:
ret.append(""String_Node_Str"");
break;
case UI_MODE_NIGHT_NO:
ret.append(""String_Node_Str"");
break;
}
switch (density) {
case DENSITY_DEFAULT:
break;
case DENSITY_LOW:
ret.append(""String_Node_Str"");
break;
case DENSITY_TV:
ret.append(""String_Node_Str"");
break;
case DENSITY_HIGH:
ret.append(""String_Node_Str"");
break;
case DENSITY_XHIGH:
ret.append(""String_Node_Str"");
break;
case DENSITY_NONE:
ret.append(""String_Node_Str"");
break;
default :
ret.append('-').append(density).append(""String_Node_Str"");
}
switch (touchscreen) {
case TOUCHSCREEN_NOTOUCH:
ret.append(""String_Node_Str"");
break;
case TOUCHSCREEN_STYLUS:
ret.append(""String_Node_Str"");
break;
case TOUCHSCREEN_FINGER:
ret.append(""String_Node_Str"");
break;
}
switch (inputFlags & MASK_KEYSHIDDEN) {
case KEYSHIDDEN_NO:
ret.append(""String_Node_Str"");
break;
case KEYSHIDDEN_YES:
ret.append(""String_Node_Str"");
break;
case KEYSHIDDEN_SOFT:
ret.append(""String_Node_Str"");
break;
}
switch (keyboard) {
case KEYBOARD_NOKEYS:
ret.append(""String_Node_Str"");
break;
case KEYBOARD_QWERTY:
ret.append(""String_Node_Str"");
break;
case KEYBOARD_12KEY:
ret.append(""String_Node_Str"");
break;
}
switch (inputFlags & MASK_NAVHIDDEN) {
case NAVHIDDEN_NO:
ret.append(""String_Node_Str"");
break;
case NAVHIDDEN_YES:
ret.append(""String_Node_Str"");
break;
}
switch (navigation) {
case NAVIGATION_NONAV:
ret.append(""String_Node_Str"");
break;
case NAVIGATION_DPAD:
ret.append(""String_Node_Str"");
break;
case NAVIGATION_TRACKBALL:
ret.append(""String_Node_Str"");
break;
case NAVIGATION_WHEEL:
ret.append(""String_Node_Str"");
break;
}
if (screenWidth != 0 && screenHeight != 0) {
if (screenWidth > screenHeight) {
ret.append(String.format(""String_Node_Str"",screenWidth,screenHeight));
}
 else {
ret.append(String.format(""String_Node_Str"",screenHeight,screenWidth));
}
}
if (sdkVersion > getNaturalSdkVersionRequirement()) {
ret.append(""String_Node_Str"").append(sdkVersion);
}
if (isInvalid) {
ret.append(""String_Node_Str"" + sErrCounter++);
}
return ret.toString();
}","private String generateQualifiers(){
  StringBuilder ret=new StringBuilder();
  if (mcc != 0) {
    ret.append(""String_Node_Str"").append(String.format(""String_Node_Str"",mcc));
    if (mnc != 0) {
      ret.append(""String_Node_Str"").append(mnc);
    }
  }
  if (language[0] != '\00') {
    ret.append('-').append(language);
    if (country[0] != '\00') {
      ret.append(""String_Node_Str"").append(country);
    }
  }
  if (smallestScreenWidthDp != 0) {
    ret.append(""String_Node_Str"").append(smallestScreenWidthDp).append(""String_Node_Str"");
  }
  if (screenWidthDp != 0) {
    ret.append(""String_Node_Str"").append(screenWidthDp).append(""String_Node_Str"");
  }
  if (screenHeightDp != 0) {
    ret.append(""String_Node_Str"").append(screenHeightDp).append(""String_Node_Str"");
  }
switch (screenLayout & MASK_SCREENSIZE) {
case SCREENSIZE_SMALL:
    ret.append(""String_Node_Str"");
  break;
case SCREENSIZE_NORMAL:
ret.append(""String_Node_Str"");
break;
case SCREENSIZE_LARGE:
ret.append(""String_Node_Str"");
break;
case SCREENSIZE_XLARGE:
ret.append(""String_Node_Str"");
break;
}
switch (screenLayout & MASK_SCREENLONG) {
case SCREENLONG_YES:
ret.append(""String_Node_Str"");
break;
case SCREENLONG_NO:
ret.append(""String_Node_Str"");
break;
}
switch (orientation) {
case ORIENTATION_PORT:
ret.append(""String_Node_Str"");
break;
case ORIENTATION_LAND:
ret.append(""String_Node_Str"");
break;
case ORIENTATION_SQUARE:
ret.append(""String_Node_Str"");
break;
}
switch (uiMode & MASK_UI_MODE_TYPE) {
case UI_MODE_TYPE_CAR:
ret.append(""String_Node_Str"");
break;
case UI_MODE_TYPE_DESK:
ret.append(""String_Node_Str"");
break;
case UI_MODE_TYPE_TELEVISION:
ret.append(""String_Node_Str"");
break;
}
switch (uiMode & MASK_UI_MODE_NIGHT) {
case UI_MODE_NIGHT_YES:
ret.append(""String_Node_Str"");
break;
case UI_MODE_NIGHT_NO:
ret.append(""String_Node_Str"");
break;
}
switch (density) {
case DENSITY_DEFAULT:
break;
case DENSITY_LOW:
ret.append(""String_Node_Str"");
break;
case DENSITY_MEDIUM:
ret.append(""String_Node_Str"");
break;
case DENSITY_HIGH:
ret.append(""String_Node_Str"");
break;
case DENSITY_XHIGH:
ret.append(""String_Node_Str"");
break;
case DENSITY_NONE:
ret.append(""String_Node_Str"");
break;
default :
ret.append('-').append(density).append(""String_Node_Str"");
}
switch (touchscreen) {
case TOUCHSCREEN_NOTOUCH:
ret.append(""String_Node_Str"");
break;
case TOUCHSCREEN_STYLUS:
ret.append(""String_Node_Str"");
break;
case TOUCHSCREEN_FINGER:
ret.append(""String_Node_Str"");
break;
}
switch (inputFlags & MASK_KEYSHIDDEN) {
case KEYSHIDDEN_NO:
ret.append(""String_Node_Str"");
break;
case KEYSHIDDEN_YES:
ret.append(""String_Node_Str"");
break;
case KEYSHIDDEN_SOFT:
ret.append(""String_Node_Str"");
break;
}
switch (keyboard) {
case KEYBOARD_NOKEYS:
ret.append(""String_Node_Str"");
break;
case KEYBOARD_QWERTY:
ret.append(""String_Node_Str"");
break;
case KEYBOARD_12KEY:
ret.append(""String_Node_Str"");
break;
}
switch (inputFlags & MASK_NAVHIDDEN) {
case NAVHIDDEN_NO:
ret.append(""String_Node_Str"");
break;
case NAVHIDDEN_YES:
ret.append(""String_Node_Str"");
break;
}
switch (navigation) {
case NAVIGATION_NONAV:
ret.append(""String_Node_Str"");
break;
case NAVIGATION_DPAD:
ret.append(""String_Node_Str"");
break;
case NAVIGATION_TRACKBALL:
ret.append(""String_Node_Str"");
break;
case NAVIGATION_WHEEL:
ret.append(""String_Node_Str"");
break;
}
if (screenWidth != 0 && screenHeight != 0) {
if (screenWidth > screenHeight) {
ret.append(String.format(""String_Node_Str"",screenWidth,screenHeight));
}
 else {
ret.append(String.format(""String_Node_Str"",screenHeight,screenWidth));
}
}
if (sdkVersion > getNaturalSdkVersionRequirement()) {
ret.append(""String_Node_Str"").append(sdkVersion);
}
if (isInvalid) {
ret.append(""String_Node_Str"" + sErrCounter++);
}
return ret.toString();
}",0.9897435897435898
45708,"public ResConfigFlags(short mcc,short mnc,char[] language,char[] country,byte orientation,byte touchscreen,short density,byte keyboard,byte navigation,byte inputFlags,short screenWidth,short screenHeight,short sdkVersion,byte screenLayout,byte uiMode,short smallestScreenWidthDp,short screenWidthDp,short screenHeightDp,boolean isInvalid){
  if (orientation < 0 || orientation > 3) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",orientation);
    orientation=0;
    isInvalid=true;
  }
  if (touchscreen < 0 || touchscreen > 3) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",touchscreen);
    touchscreen=0;
    isInvalid=true;
  }
  if (density < -1) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",density);
    density=0;
    isInvalid=true;
  }
  if (keyboard < 0 || keyboard > 3) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",keyboard);
    keyboard=0;
    isInvalid=true;
  }
  if (navigation < 0 || navigation > 4) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",navigation);
    navigation=0;
    isInvalid=true;
  }
  this.mcc=mcc;
  this.mnc=mnc;
  this.language=language;
  this.country=country;
  this.orientation=orientation;
  this.touchscreen=touchscreen;
  this.density=density;
  this.keyboard=keyboard;
  this.navigation=navigation;
  this.inputFlags=inputFlags;
  this.screenWidth=screenWidth;
  this.screenHeight=screenHeight;
  this.sdkVersion=sdkVersion;
  this.screenLayout=screenLayout;
  this.uiMode=uiMode;
  this.smallestScreenWidthDp=smallestScreenWidthDp;
  this.screenWidthDp=screenWidthDp;
  this.screenHeightDp=screenHeightDp;
  this.isInvalid=isInvalid;
  mQualifiers=generateQualifiers();
}","public ResConfigFlags(short mcc,short mnc,char[] language,char[] country,byte orientation,byte touchscreen,short density,byte keyboard,byte navigation,byte inputFlags,short screenWidth,short screenHeight,short sdkVersion,byte screenLayout,byte uiMode,short smallestScreenWidthDp,short screenWidthDp,short screenHeightDp,boolean isInvalid){
  if (orientation < 0 || orientation > 3) {
    LOGGER.warning(""String_Node_Str"" + orientation);
    orientation=0;
    isInvalid=true;
  }
  if (touchscreen < 0 || touchscreen > 3) {
    LOGGER.warning(""String_Node_Str"" + touchscreen);
    touchscreen=0;
    isInvalid=true;
  }
  if (density < -1) {
    LOGGER.warning(""String_Node_Str"" + density);
    density=0;
    isInvalid=true;
  }
  if (keyboard < 0 || keyboard > 3) {
    LOGGER.warning(""String_Node_Str"" + keyboard);
    keyboard=0;
    isInvalid=true;
  }
  if (navigation < 0 || navigation > 4) {
    LOGGER.warning(""String_Node_Str"" + navigation);
    navigation=0;
    isInvalid=true;
  }
  this.mcc=mcc;
  this.mnc=mnc;
  this.language=language;
  this.country=country;
  this.orientation=orientation;
  this.touchscreen=touchscreen;
  this.density=density;
  this.keyboard=keyboard;
  this.navigation=navigation;
  this.inputFlags=inputFlags;
  this.screenWidth=screenWidth;
  this.screenHeight=screenHeight;
  this.sdkVersion=sdkVersion;
  this.screenLayout=screenLayout;
  this.uiMode=uiMode;
  this.smallestScreenWidthDp=smallestScreenWidthDp;
  this.screenWidthDp=screenWidthDp;
  this.screenHeightDp=screenHeightDp;
  this.isInvalid=isInvalid;
  mQualifiers=generateQualifiers();
}",0.9597024178549288
45709,"private static List<Integer> findNonPositionalSubstitutions(String str,int max){
  int pos=0;
  int count=0;
  int length=str.length();
  List<Integer> ret=new ArrayList<Integer>();
  while ((pos=str.indexOf('%',pos)) != -1) {
    if (pos + 1 == length) {
      break;
    }
    char c=str.charAt(pos + 1);
    if (c >= 'a' && c <= 'z') {
      ret.add(pos);
      if (max != -1 && ++count >= max) {
        break;
      }
    }
    pos+=2;
  }
  return ret;
}","/** 
 * It searches for ""%"", but not ""%%"" nor ""%(\d)+\$""
 */
private static List<Integer> findNonPositionalSubstitutions(String str,int max){
  int pos=0;
  int pos2=0;
  int count=0;
  int length=str.length();
  List<Integer> ret=new ArrayList<Integer>();
  while ((pos2=(pos=str.indexOf('%',pos2)) + 1) != 0) {
    if (pos2 == length) {
      break;
    }
    char c=str.charAt(pos2++);
    if (c == '%') {
      continue;
    }
    if (c >= '0' && c <= '9' && pos2 < length) {
      do {
        c=str.charAt(pos2++);
      }
 while (c >= '0' && c <= '9' && pos2 < length);
      if (c == '$') {
        continue;
      }
    }
    ret.add(pos);
    if (max != -1 && ++count >= max) {
      break;
    }
  }
  return ret;
}",0.4536256323777403
45710,"public void serializeToResValuesXml(XmlSerializer serializer,ResResource res) throws IOException, AndrolibException {
  String type=res.getResSpec().getType().getName();
  boolean item=!""String_Node_Str"".equals(mType) && !type.equals(mType);
  String tagName=item ? ""String_Node_Str"" : type;
  serializer.startTag(null,tagName);
  if (item) {
    serializer.attribute(null,""String_Node_Str"",type);
  }
  serializer.attribute(null,""String_Node_Str"",res.getResSpec().getName());
  serializeExtraXmlAttrs(serializer,res);
  String body=encodeAsResXmlValue();
  if (!body.isEmpty()) {
    serializer.ignorableWhitespace(body);
  }
  serializer.endTag(null,tagName);
}","public void serializeToResValuesXml(XmlSerializer serializer,ResResource res) throws IOException, AndrolibException {
  String type=res.getResSpec().getType().getName();
  boolean item=!""String_Node_Str"".equals(mType) && !type.equals(mType);
  String body=encodeAsResXmlValue();
  if (body.contains(""String_Node_Str"")) {
    item=true;
  }
  String tagName=item ? ""String_Node_Str"" : type;
  serializer.startTag(null,tagName);
  if (item) {
    serializer.attribute(null,""String_Node_Str"",type);
  }
  serializer.attribute(null,""String_Node_Str"",res.getResSpec().getName());
  serializeExtraXmlAttrs(serializer,res);
  if (!body.isEmpty()) {
    serializer.ignorableWhitespace(body);
  }
  serializer.endTag(null,tagName);
}",0.9026676279740448
45711,"private static List<Integer> findNonPositionalSubstitutions(String str,int max){
  int pos=0;
  int count=0;
  List<Integer> ret=new ArrayList<Integer>();
  while ((pos=str.indexOf('%',pos)) != -1) {
    if (str.charAt(pos + 1) != '%') {
      ret.add(pos);
      if (max != -1 && ++count >= max) {
        break;
      }
    }
    pos+=2;
  }
  return ret;
}","private static List<Integer> findNonPositionalSubstitutions(String str,int max){
  int pos=0;
  int count=0;
  int length=str.length();
  List<Integer> ret=new ArrayList<Integer>();
  while ((pos=str.indexOf('%',pos)) != -1) {
    if (pos + 1 == length) {
      break;
    }
    if (str.charAt(pos + 1) != '%') {
      ret.add(pos);
      if (max != -1 && ++count >= max) {
        break;
      }
    }
    pos+=2;
  }
  return ret;
}",0.905422446406053
45712,"private void find9patchChunk(DataInput di) throws AndrolibException, IOException {
  di.skipBytes(8);
  while (true) {
    int size;
    try {
      size=di.readInt();
    }
 catch (    IOException ex) {
      throw new AndrolibException(""String_Node_Str"",ex);
    }
    if (di.readInt() == NP_CHUNK_TYPE) {
      return;
    }
    di.skipBytes(size + 4);
  }
}","private void find9patchChunk(DataInput di) throws AndrolibException, IOException {
  di.skipBytes(8);
  while (true) {
    int size;
    try {
      size=di.readInt();
    }
 catch (    IOException ex) {
      throw new CantFind9PatchChunk(""String_Node_Str"",ex);
    }
    if (di.readInt() == NP_CHUNK_TYPE) {
      return;
    }
    di.skipBytes(size + 4);
  }
}",0.9502762430939228
45713,"private void addMissingResSpecs() throws AndrolibException {
  int resId=mResId & 0xffff0000;
  for (int i=0; i < mMissingResSpecs.length; i++) {
    if (!mMissingResSpecs[i]) {
      continue;
    }
    ResResSpec spec=new ResResSpec(new ResID(resId | i),String.format(""String_Node_Str"",i),mPkg,mType);
    mPkg.addResSpec(spec);
    mType.addResSpec(spec);
    ResValue value=new ResBoolValue(false);
    ResResource res=new ResResource(mPkg.getConfig(new ResConfigFlags()),spec,value);
    mPkg.addResource(res);
    mConfig.addResource(res);
    spec.addResource(res);
  }
}","private void addMissingResSpecs() throws AndrolibException {
  int resId=mResId & 0xffff0000;
  for (int i=0; i < mMissingResSpecs.length; i++) {
    if (!mMissingResSpecs[i]) {
      continue;
    }
    ResResSpec spec=new ResResSpec(new ResID(resId | i),String.format(""String_Node_Str"",i),mPkg,mType);
    mPkg.addResSpec(spec);
    mType.addResSpec(spec);
    ResValue value=new ResBoolValue(false);
    ResResource res=new ResResource(mPkg.getOrCreateConfig(new ResConfigFlags()),spec,value);
    mPkg.addResource(res);
    mConfig.addResource(res);
    spec.addResource(res);
  }
}",0.993127147766323
45714,"public boolean buildResourcesFull(File appDir,boolean forceBuildAll,boolean framework,Map<String,Object> usesFramework) throws AndrolibException {
  try {
    if (!new File(appDir,""String_Node_Str"").exists()) {
      return false;
    }
    if (!forceBuildAll) {
      LOGGER.info(""String_Node_Str"");
    }
    File apkDir=new File(appDir,APK_DIRNAME);
    if (forceBuildAll || isModified(newFiles(APP_RESOURCES_FILENAMES,appDir),newFiles(APK_RESOURCES_FILENAMES,apkDir))) {
      LOGGER.info(""String_Node_Str"");
      File apkFile=File.createTempFile(""String_Node_Str"",null);
      apkFile.delete();
      File ninePatch=new File(appDir,""String_Node_Str"");
      if (!ninePatch.exists()) {
        ninePatch=null;
      }
      mAndRes.aaptPackage(apkFile,new File(appDir,""String_Node_Str""),new File(appDir,""String_Node_Str""),ninePatch,null,parseUsesFramework(usesFramework),false,framework);
      new ExtFile(apkFile).getDirectory().copyToDir(apkDir,APK_RESOURCES_FILENAMES);
    }
    return true;
  }
 catch (  IOException ex) {
    throw new AndrolibException(ex);
  }
catch (  DirectoryException ex) {
    throw new AndrolibException(ex);
  }
}","public boolean buildResourcesFull(File appDir,boolean forceBuildAll,boolean framework,Map<String,Object> usesFramework) throws AndrolibException {
  try {
    if (!new File(appDir,""String_Node_Str"").exists()) {
      return false;
    }
    if (!forceBuildAll) {
      LOGGER.info(""String_Node_Str"");
    }
    File apkDir=new File(appDir,APK_DIRNAME);
    if (forceBuildAll || isModified(newFiles(APP_RESOURCES_FILENAMES,appDir),newFiles(APK_RESOURCES_FILENAMES,apkDir))) {
      LOGGER.info(""String_Node_Str"");
      File apkFile=File.createTempFile(""String_Node_Str"",null);
      apkFile.delete();
      File ninePatch=new File(appDir,""String_Node_Str"");
      if (!ninePatch.exists()) {
        ninePatch=null;
      }
      mAndRes.aaptPackage(apkFile,new File(appDir,""String_Node_Str""),new File(appDir,""String_Node_Str""),ninePatch,null,parseUsesFramework(usesFramework),false,framework);
      Directory tmpDir=new ExtFile(apkFile).getDirectory();
      tmpDir.copyToDir(apkDir,tmpDir.containsDir(""String_Node_Str"") ? APK_RESOURCES_FILENAMES : APK_RESOURCES_WITHOUT_RES_FILENAMES);
    }
    return true;
  }
 catch (  IOException ex) {
    throw new AndrolibException(ex);
  }
catch (  DirectoryException ex) {
    throw new AndrolibException(ex);
  }
}",0.9547905433430112
45715,"public void decode(ResTable resTable,ExtFile apkFile,File outDir) throws AndrolibException {
  Duo<ResFileDecoder,ResAttrDecoder> duo=getResFileDecoder();
  ResFileDecoder fileDecoder=duo.m1;
  ResAttrDecoder attrDecoder=duo.m2;
  attrDecoder.setCurrentPackage(resTable.listMainPackages().iterator().next());
  Directory in, out;
  try {
    in=apkFile.getDirectory();
    out=new FileDirectory(outDir);
    fileDecoder.decode(in,""String_Node_Str"",out,""String_Node_Str"",""String_Node_Str"");
    in=in.getDir(""String_Node_Str"");
    out=out.createDir(""String_Node_Str"");
  }
 catch (  DirectoryException ex) {
    throw new AndrolibException(ex);
  }
  ExtMXSerializer xmlSerializer=getResXmlSerializer();
  for (  ResPackage pkg : resTable.listMainPackages()) {
    attrDecoder.setCurrentPackage(pkg);
    for (    ResResource res : pkg.listFiles()) {
      fileDecoder.decode(res,in,out);
    }
    for (    ResValuesFile valuesFile : pkg.listValuesFiles()) {
      generateValuesFile(valuesFile,out,xmlSerializer);
    }
    generatePublicXml(pkg,out,xmlSerializer);
  }
}","public void decode(ResTable resTable,ExtFile apkFile,File outDir) throws AndrolibException {
  Duo<ResFileDecoder,ResAttrDecoder> duo=getResFileDecoder();
  ResFileDecoder fileDecoder=duo.m1;
  ResAttrDecoder attrDecoder=duo.m2;
  attrDecoder.setCurrentPackage(resTable.listMainPackages().iterator().next());
  Directory inApk, in=null, out;
  try {
    inApk=apkFile.getDirectory();
    out=new FileDirectory(outDir);
    fileDecoder.decode(inApk,""String_Node_Str"",out,""String_Node_Str"",""String_Node_Str"");
    if (inApk.containsDir(""String_Node_Str"")) {
      in=inApk.getDir(""String_Node_Str"");
    }
    out=out.createDir(""String_Node_Str"");
  }
 catch (  DirectoryException ex) {
    throw new AndrolibException(ex);
  }
  ExtMXSerializer xmlSerializer=getResXmlSerializer();
  for (  ResPackage pkg : resTable.listMainPackages()) {
    attrDecoder.setCurrentPackage(pkg);
    for (    ResResource res : pkg.listFiles()) {
      fileDecoder.decode(res,in,out);
    }
    for (    ResValuesFile valuesFile : pkg.listValuesFiles()) {
      generateValuesFile(valuesFile,out,xmlSerializer);
    }
    generatePublicXml(pkg,out,xmlSerializer);
  }
}",0.9572649572649572
45716,"private File getFrameworkApk(int id,String frameTag) throws AndrolibException {
  File dir=getFrameworkDir();
  File apk=new File(dir,String.valueOf(id) + '-' + frameTag+ ""String_Node_Str"");
  if (apk.exists()) {
    return apk;
  }
  apk=new File(dir,String.valueOf(id) + ""String_Node_Str"");
  if (apk.exists()) {
    return apk;
  }
  if (id == 1) {
    InputStream in=null;
    OutputStream out=null;
    try {
      in=AndrolibResources.class.getResourceAsStream(""String_Node_Str"");
      out=new FileOutputStream(apk);
      IOUtils.copy(in,out);
      return apk;
    }
 catch (    IOException ex) {
      throw new AndrolibException(ex);
    }
 finally {
      if (in != null) {
        try {
          in.close();
        }
 catch (        IOException ex) {
        }
      }
      if (out != null) {
        try {
          out.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  throw new CantFindFrameworkResException(id);
}","private File getFrameworkApk(int id,String frameTag) throws AndrolibException {
  File dir=getFrameworkDir();
  File apk;
  if (frameTag != null) {
    apk=new File(dir,String.valueOf(id) + '-' + frameTag+ ""String_Node_Str"");
    if (apk.exists()) {
      return apk;
    }
  }
  apk=new File(dir,String.valueOf(id) + ""String_Node_Str"");
  if (apk.exists()) {
    return apk;
  }
  if (id == 1) {
    InputStream in=null;
    OutputStream out=null;
    try {
      in=AndrolibResources.class.getResourceAsStream(""String_Node_Str"");
      out=new FileOutputStream(apk);
      IOUtils.copy(in,out);
      return apk;
    }
 catch (    IOException ex) {
      throw new AndrolibException(ex);
    }
 finally {
      if (in != null) {
        try {
          in.close();
        }
 catch (        IOException ex) {
        }
      }
      if (out != null) {
        try {
          out.close();
        }
 catch (        IOException ex) {
        }
      }
    }
  }
  throw new CantFindFrameworkResException(id);
}",0.966110268082954
45717,"private void inject() throws AndrolibException {
  String definition=nextAndAppend();
  if (definition.contains(""String_Node_Str"")) {
    nextAndAppend();
    return;
  }
  injectParameters(definition);
  boolean end=false;
  while (!end) {
    end=step();
  }
}","private void inject() throws AndrolibException {
  String definition=nextAndAppend();
  if (definition.contains(""String_Node_Str"") || definition.contains(""String_Node_Str"")) {
    nextAndAppend();
    return;
  }
  injectParameters(definition);
  boolean end=false;
  while (!end) {
    end=step();
  }
}",0.9257950530035336
45718,"public static Duo<TypeName,Integer> fetchFromInternalName(String internal) throws AndrolibException {
  String origInternal=internal;
  int array=0;
  boolean isArray=false;
  do {
    if (internal.isEmpty()) {
      throw new AndrolibException(""String_Node_Str"" + origInternal);
    }
    isArray=internal.charAt(0) == '[';
    if (isArray) {
      array++;
      internal=internal.substring(1);
    }
  }
 while (isArray);
  int length=array + 1;
  String package_=null;
  String type=null;
  String innerType=null;
switch (internal.charAt(0)) {
case 'B':
    type=""String_Node_Str"";
  break;
case 'C':
type=""String_Node_Str"";
break;
case 'D':
type=""String_Node_Str"";
break;
case 'F':
type=""String_Node_Str"";
break;
case 'I':
type=""String_Node_Str"";
break;
case 'J':
type=""String_Node_Str"";
break;
case 'S':
type=""String_Node_Str"";
break;
case 'Z':
type=""String_Node_Str"";
break;
case 'V':
type=""String_Node_Str"";
break;
case 'L':
int pos=internal.indexOf(';');
if (pos == -1) {
throw new AndrolibException(""String_Node_Str"" + origInternal);
}
length+=pos;
internal=internal.substring(1,pos);
pos=internal.lastIndexOf('/');
package_=internal.substring(0,pos).replace('/','.');
type=internal.substring(pos + 1);
pos=type.indexOf('$');
if (pos != -1) {
innerType=type.substring(pos + 1);
type=type.substring(0,pos);
}
break;
default :
throw new AndrolibException(""String_Node_Str"" + origInternal);
}
return new Duo<TypeName,Integer>(new TypeName(package_,type,innerType,array),length);
}","public static Duo<TypeName,Integer> fetchFromInternalName(String internal) throws AndrolibException {
  String origInternal=internal;
  int array=0;
  boolean isArray=false;
  do {
    if (internal.isEmpty()) {
      throw new AndrolibException(""String_Node_Str"" + origInternal);
    }
    isArray=internal.charAt(0) == '[';
    if (isArray) {
      array++;
      internal=internal.substring(1);
    }
  }
 while (isArray);
  int length=array + 1;
  String package_=null;
  String type=null;
  String innerType=null;
switch (internal.charAt(0)) {
case 'B':
    type=""String_Node_Str"";
  break;
case 'C':
type=""String_Node_Str"";
break;
case 'D':
type=""String_Node_Str"";
break;
case 'F':
type=""String_Node_Str"";
break;
case 'I':
type=""String_Node_Str"";
break;
case 'J':
type=""String_Node_Str"";
break;
case 'S':
type=""String_Node_Str"";
break;
case 'Z':
type=""String_Node_Str"";
break;
case 'V':
type=""String_Node_Str"";
break;
case 'L':
int pos=internal.indexOf(';');
if (pos == -1) {
throw new AndrolibException(""String_Node_Str"" + origInternal);
}
length+=pos;
internal=internal.substring(1,pos);
pos=internal.lastIndexOf('/');
if (pos == -1) {
package_=""String_Node_Str"";
type=internal;
}
 else {
package_=internal.substring(0,pos).replace('/','.');
type=internal.substring(pos + 1);
}
pos=type.indexOf('$');
if (pos != -1) {
innerType=type.substring(pos + 1);
type=type.substring(0,pos);
}
break;
default :
throw new AndrolibException(""String_Node_Str"" + origInternal);
}
return new Duo<TypeName,Integer>(new TypeName(package_,type,innerType,array),length);
}",0.9763624425476034
45719,"public static String escapeForResXml(String value){
  if (value.isEmpty()) {
    return value;
  }
  StringBuilder out=new StringBuilder(value.length() + 10);
  char[] chars=value.toCharArray();
switch (chars[0]) {
case '@':
case '#':
case '?':
    out.append('\\');
}
boolean space=true;
for (int i=0; i < chars.length; i++) {
  char c=chars[i];
  if (c == ' ') {
    if (space) {
      out.append(""String_Node_Str"");
    }
 else {
      out.append(c);
      space=true;
    }
    continue;
  }
  space=false;
switch (c) {
case '\\':
case '\'':
case '""':
    out.append('\\');
  break;
case '\n':
out.append(""String_Node_Str"");
continue;
}
out.append(c);
}
if (space) {
out.deleteCharAt(out.length() - 1);
out.append(""String_Node_Str"");
}
return out.toString();
}","public static String escapeForResXml(String value){
  if (value.isEmpty()) {
    return value;
  }
  StringBuilder out=new StringBuilder(value.length() + 10);
  char[] chars=value.toCharArray();
switch (chars[0]) {
case '@':
case '#':
case '?':
    out.append('\\');
}
boolean space=true;
for (int i=0; i < chars.length; i++) {
  char c=chars[i];
  if (c == ' ') {
    if (space) {
      out.append(""String_Node_Str"");
    }
 else {
      out.append(c);
      space=true;
    }
    continue;
  }
  space=false;
switch (c) {
case '\\':
case '\'':
case '""':
    out.append('\\');
  break;
case '\n':
out.append(""String_Node_Str"");
continue;
}
out.append(c);
}
if (space && out.charAt(out.length() - 1) == ' ') {
out.deleteCharAt(out.length() - 1);
out.append(""String_Node_Str"");
}
return out.toString();
}",0.9751116783663052
45720,"public static String escapeForResXml(String value){
  value=value.replace(""String_Node_Str"",""String_Node_Str"");
  value=value.replace(""String_Node_Str"",""String_Node_Str"");
  char c=value.charAt(0);
  if (c == '@' || c == '#' || c == '?') {
    return '\\' + value;
  }
  return value;
}","public static String escapeForResXml(String value){
  if (value.isEmpty()) {
    return value;
  }
  value=value.replace(""String_Node_Str"",""String_Node_Str"");
  value=value.replace(""String_Node_Str"",""String_Node_Str"");
  char c=value.charAt(0);
  if (c == '@' || c == '#' || c == '?') {
    return '\\' + value;
  }
  return value;
}",0.9240710823909531
45721,"@Override public void setProperty(String name,Object value) throws IllegalArgumentException, IllegalStateException {
  if (PROPERTY_DEFAULT_ENCODING.equals(name)) {
    mDefaultEncoding=(String)value;
  }
  super.setProperty(name,value);
}","@Override public void setProperty(String name,Object value) throws IllegalArgumentException, IllegalStateException {
  if (PROPERTY_DEFAULT_ENCODING.equals(name)) {
    mDefaultEncoding=(String)value;
  }
 else {
    super.setProperty(name,value);
  }
}",0.9715447154471544
45722,"public void smali(String dir,String dexFile) throws AndrolibException {
  main.main(new String[]{""String_Node_Str"",dir,""String_Node_Str"",dexFile});
}","public void smali(String dir,String dexFile) throws AndrolibException {
  main.main(new String[]{dir,""String_Node_Str"",dexFile});
}",0.9357142857142856
45723,"/** 
 * Returns the last set time to live second.
 * @return the last set time to live second
 */
long getTtl();","/** 
 * Returns the last set time to live in milliseconds.
 * @return the last set time to live in milliseconds.
 */
long getTtl();",0.9218106995884774
45724,"@Test public void testMapService(){
  Node node=HazelcastStarter.getNode(hz);
  NodeEngineImpl nodeEngine=node.getNodeEngine();
  SerializationService serializationService=nodeEngine.getSerializationService();
  String key=randomString();
  Data keyData=serializationService.toData(key);
  int partitionId=hz.getPartitionService().getPartition(key).getPartitionId();
  MapService mapService=nodeEngine.getService(MapService.SERVICE_NAME);
  MapServiceContext mapServiceContext=mapService.getMapServiceContext();
  assertNotNull(""String_Node_Str"",mapServiceContext);
  PartitionContainer partitionContainer=mapServiceContext.getPartitionContainer(partitionId);
  assertNotNull(""String_Node_Str"",partitionContainer);
  RecordStore recordStore=partitionContainer.getExistingRecordStore(""String_Node_Str"");
  assertNull(""String_Node_Str"",recordStore);
  IMap<Object,Object> map=hz.getMap(""String_Node_Str"");
  map.put(key,23);
  recordStore=partitionContainer.getExistingRecordStore(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",recordStore);
  assertEquals(""String_Node_Str"",1,recordStore.size());
  Object dataValue=recordStore.get(keyData,true,null);
  assertNotNull(""String_Node_Str"",dataValue);
  int value=serializationService.toObject(dataValue);
  assertEquals(""String_Node_Str"",23,value);
  assertTrue(""String_Node_Str"",map.containsKey(key));
  map.clear();
  assertFalse(""String_Node_Str"",map.containsKey(key));
  map.destroy();
}","@Test public void testMapService(){
  Node node=HazelcastStarter.getNode(hz);
  NodeEngineImpl nodeEngine=node.getNodeEngine();
  SerializationService serializationService=nodeEngine.getSerializationService();
  String key=randomString();
  Data keyData=serializationService.toData(key);
  int partitionId=hz.getPartitionService().getPartition(key).getPartitionId();
  MapService mapService=nodeEngine.getService(MapService.SERVICE_NAME);
  MapServiceContext mapServiceContext=mapService.getMapServiceContext();
  assertNotNull(""String_Node_Str"",mapServiceContext);
  PartitionContainer partitionContainer=mapServiceContext.getPartitionContainer(partitionId);
  assertNotNull(""String_Node_Str"",partitionContainer);
  RecordStore recordStore=partitionContainer.getExistingRecordStore(""String_Node_Str"");
  assertNull(""String_Node_Str"",recordStore);
  IMap<Object,Object> map=hz.getMap(""String_Node_Str"");
  map.put(key,23);
  recordStore=partitionContainer.getExistingRecordStore(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",recordStore);
  assertEquals(""String_Node_Str"",1,recordStore.size());
  Object dataValue=recordStore.get(keyData,true,null);
  assertNotNull(""String_Node_Str"",dataValue);
  Integer value=serializationService.toObject(dataValue);
  assertNotNull(""String_Node_Str"",value);
  assertEquals(""String_Node_Str"",23,(int)value);
  assertTrue(""String_Node_Str"",map.containsKey(key));
  map.clear();
  assertFalse(""String_Node_Str"",map.containsKey(key));
  map.destroy();
}",0.9806056481796528
45725,"@Test public void testCacheService(){
  Node node=HazelcastStarter.getNode(hz);
  NodeEngineImpl nodeEngine=node.getNodeEngine();
  HazelcastInstanceImpl hazelcastInstance=HazelcastStarter.getHazelcastInstanceImpl(hz);
  SerializationService serializationService=nodeEngine.getSerializationService();
  String key=randomString();
  Data keyData=serializationService.toData(key);
  int partitionId=hz.getPartitionService().getPartition(key).getPartitionId();
  CachingProvider provider=HazelcastServerCachingProvider.createCachingProvider(hazelcastInstance);
  HazelcastCacheManager cacheManager=(HazelcastServerCacheManager)provider.getCacheManager();
  Cache<String,Integer> cache=cacheManager.getCache(""String_Node_Str"");
  assertNull(""String_Node_Str"",cache);
  CacheConfig<String,Integer> cacheConfig=new CacheConfig<String,Integer>(""String_Node_Str"");
  cache=cacheManager.createCache(""String_Node_Str"",cacheConfig);
  assertNotNull(""String_Node_Str"",cache);
  cacheManager.getCache(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",cache);
  cache.put(key,23);
  CacheService cacheService=nodeEngine.getService(CacheService.SERVICE_NAME);
  String cacheNameWithPrefix=cacheManager.getCacheNameWithPrefix(""String_Node_Str"");
  ICacheRecordStore recordStore=cacheService.getRecordStore(cacheNameWithPrefix,partitionId);
  assertNotNull(""String_Node_Str"",recordStore);
  assertEquals(""String_Node_Str"",1,recordStore.size());
  Object dataValue=recordStore.get(keyData,null);
  assertNotNull(""String_Node_Str"",dataValue);
  int value=serializationService.toObject(dataValue);
  assertEquals(""String_Node_Str"",23,value);
  Map<String,EntryProcessorResult<Integer>> resultMap;
  int result;
  result=cache.invoke(key,new IntegerValueEntryProcessor());
  assertEquals(""String_Node_Str"",-23,result);
  result=cache.invoke(key,new IntegerValueEntryProcessor(),42);
  assertEquals(""String_Node_Str"",42,result);
  resultMap=cache.invokeAll(Collections.singleton(key),new IntegerValueEntryProcessor());
  result=resultMap.get(key).get();
  assertEquals(""String_Node_Str"",-23,result);
  resultMap=cache.invokeAll(Collections.singleton(key),new IntegerValueEntryProcessor(),42);
  result=resultMap.get(key).get();
  assertEquals(""String_Node_Str"",42,result);
  assertTrue(""String_Node_Str"",cache.containsKey(key));
  cache.clear();
  assertFalse(""String_Node_Str"",cache.containsKey(key));
  cacheManager.destroyCache(""String_Node_Str"");
}","@Test public void testCacheService(){
  Node node=HazelcastStarter.getNode(hz);
  NodeEngineImpl nodeEngine=node.getNodeEngine();
  HazelcastInstanceImpl hazelcastInstance=HazelcastStarter.getHazelcastInstanceImpl(hz);
  SerializationService serializationService=nodeEngine.getSerializationService();
  String key=randomString();
  Data keyData=serializationService.toData(key);
  int partitionId=hz.getPartitionService().getPartition(key).getPartitionId();
  CachingProvider provider=HazelcastServerCachingProvider.createCachingProvider(hazelcastInstance);
  HazelcastCacheManager cacheManager=(HazelcastServerCacheManager)provider.getCacheManager();
  Cache<String,Integer> cache=cacheManager.getCache(""String_Node_Str"");
  assertNull(""String_Node_Str"",cache);
  CacheConfig<String,Integer> cacheConfig=new CacheConfig<String,Integer>(""String_Node_Str"");
  cache=cacheManager.createCache(""String_Node_Str"",cacheConfig);
  assertNotNull(""String_Node_Str"",cache);
  cacheManager.getCache(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",cache);
  cache.put(key,23);
  CacheService cacheService=nodeEngine.getService(CacheService.SERVICE_NAME);
  String cacheNameWithPrefix=cacheManager.getCacheNameWithPrefix(""String_Node_Str"");
  ICacheRecordStore recordStore=cacheService.getRecordStore(cacheNameWithPrefix,partitionId);
  assertNotNull(""String_Node_Str"",recordStore);
  assertEquals(""String_Node_Str"",1,recordStore.size());
  Object dataValue=recordStore.get(keyData,null);
  assertNotNull(""String_Node_Str"",dataValue);
  Integer value=serializationService.toObject(dataValue);
  assertNotNull(""String_Node_Str"",value);
  assertEquals(""String_Node_Str"",23,(int)value);
  Map<String,EntryProcessorResult<Integer>> resultMap;
  int result;
  result=cache.invoke(key,new IntegerValueEntryProcessor());
  assertEquals(""String_Node_Str"",-23,result);
  result=cache.invoke(key,new IntegerValueEntryProcessor(),42);
  assertEquals(""String_Node_Str"",42,result);
  resultMap=cache.invokeAll(Collections.singleton(key),new IntegerValueEntryProcessor());
  result=resultMap.get(key).get();
  assertEquals(""String_Node_Str"",-23,result);
  resultMap=cache.invokeAll(Collections.singleton(key),new IntegerValueEntryProcessor(),42);
  result=resultMap.get(key).get();
  assertEquals(""String_Node_Str"",42,result);
  assertTrue(""String_Node_Str"",cache.containsKey(key));
  cache.clear();
  assertFalse(""String_Node_Str"",cache.containsKey(key));
  cacheManager.destroyCache(""String_Node_Str"");
}",0.9884122789184794
45726,"@Test public void array_float(){
  assertEquals(new JsonArray().add(3.14f),Json.array(3.14f));
  assertEquals(new JsonArray().add(3.14f).add(1.41f),Json.array(3.14f,1.41f));
}","@Test public void array_float(){
  assertEquals(new JsonArray().add(3.14f),Json.array(new float[]{3.14f}));
  assertEquals(new JsonArray().add(3.14f).add(1.41f),Json.array(new float[]{3.14f,1.41f}));
}",0.9042553191489362
45727,"@Test public void array_long(){
  assertEquals(new JsonArray().add(23l),Json.array(23l));
  assertEquals(new JsonArray().add(23l).add(42l),Json.array(23l,42l));
}","@Test public void array_long(){
  assertEquals(new JsonArray().add(23l),Json.array(new long[]{23l}));
  assertEquals(new JsonArray().add(23l).add(42l),Json.array(new long[]{23l,42l}));
}",0.9310344827586208
45728,"@Test public void array_int(){
  assertEquals(new JsonArray().add(23),Json.array(23));
  assertEquals(new JsonArray().add(23).add(42),Json.array(23,42));
}","@Test public void array_int(){
  assertEquals(new JsonArray().add(23),Json.array(new int[]{23}));
  assertEquals(new JsonArray().add(23).add(42),Json.array(new int[]{23,42}));
}",0.933734939759036
45729,"@Override public boolean hasNext(){
  while (iterator.hasNext()) {
    nextEntry=iterator.next();
    if (testEntry(nextEntry)) {
      return true;
    }
  }
  return false;
}","@Override public boolean hasNext(){
  while (iterator.hasNext()) {
    Map.Entry<K,ReplicatedRecord<K,V>> entry=iterator.next();
    if (testEntry(entry)) {
      nextEntry=entry;
      return true;
    }
  }
  return false;
}",0.835820895522388
45730,"@Override protected void processMessage() throws Exception {
  ClientEndpoint endpoint=getEndpoint();
  OperationFactory operationFactory=new OperationFactoryWrapper(createOperationFactory(),endpoint.getUuid());
  final InternalOperationService operationService=nodeEngine.getOperationService();
  Map<Integer,Object> map=operationService.invokeOnAllPartitions(getServiceName(),operationFactory);
  sendResponse(reduce(map));
}","@Override protected void processMessage() throws Exception {
  OperationFactory operationFactory=new OperationFactoryWrapper(createOperationFactory(),endpoint.getUuid());
  final InternalOperationService operationService=nodeEngine.getOperationService();
  Map<Integer,Object> map=operationService.invokeOnAllPartitions(getServiceName(),operationFactory);
  sendResponse(reduce(map));
}",0.949569495694957
45731,"@Override protected void processMessage(){
  final ClientEndpoint endpoint=getEndpoint();
  Operation op=prepareOperation();
  op.setCallerUuid(endpoint.getUuid());
  InvocationBuilder builder=getInvocationBuilder(op).setExecutionCallback(this).setResultDeserialized(false);
  builder.invoke();
}","@Override protected void processMessage(){
  Operation op=prepareOperation();
  op.setCallerUuid(endpoint.getUuid());
  InvocationBuilder builder=getInvocationBuilder(op).setExecutionCallback(this).setResultDeserialized(false);
  builder.invoke();
}",0.5504587155963303
45732,"protected AbstractMessageTask(ClientMessage clientMessage,Node node,Connection connection){
  this.clientMessage=clientMessage;
  this.logger=node.getLogger(getClass());
  this.node=node;
  this.nodeEngine=node.nodeEngine;
  this.serializationService=node.getSerializationService();
  this.connection=connection;
  this.clientEngine=node.clientEngine;
  this.endpointManager=clientEngine.getEndpointManager();
  this.endpoint=getEndpoint();
}","protected AbstractMessageTask(ClientMessage clientMessage,Node node,Connection connection){
  this.clientMessage=clientMessage;
  this.logger=node.getLogger(getClass());
  this.node=node;
  this.nodeEngine=node.nodeEngine;
  this.serializationService=node.getSerializationService();
  this.connection=connection;
  this.clientEngine=node.clientEngine;
  this.endpointManager=clientEngine.getEndpointManager();
  this.endpoint=initEndpoint();
}",0.9943502824858758
45733,"@Override public void run(){
  try {
    if (isAuthenticationMessage()) {
      initializeAndProcessMessage();
    }
 else {
      ClientEndpoint endpoint=getEndpoint();
      if (endpoint == null) {
        handleMissingEndpoint();
      }
 else       if (!endpoint.isAuthenticated()) {
        handleAuthenticationFailure();
      }
 else {
        initializeAndProcessMessage();
      }
    }
  }
 catch (  Throwable e) {
    handleProcessingFailure(e);
  }
}","@Override public final void run(){
  try {
    doRun();
  }
 catch (  Throwable e) {
    handleProcessingFailure(e);
  }
}",0.386986301369863
45734,"private void initializeAndProcessMessage() throws Throwable {
  if (!node.getNodeExtension().isStartCompleted()) {
    throw new HazelcastInstanceNotActiveException(""String_Node_Str"");
  }
  parameters=decodeClientMessage(clientMessage);
  Credentials credentials=endpoint.getCredentials();
  interceptBefore(credentials);
  checkPermissions(endpoint);
  processMessage();
  interceptAfter(credentials);
}","void initializeAndProcessMessage() throws Throwable {
  if (!node.getNodeExtension().isStartCompleted()) {
    throw new HazelcastInstanceNotActiveException(""String_Node_Str"");
  }
  parameters=decodeClientMessage(clientMessage);
  Credentials credentials=endpoint.getCredentials();
  interceptBefore(credentials);
  checkPermissions(endpoint);
  processMessage();
  interceptAfter(credentials);
}",0.9900249376558604
45735,"@Override protected Object call() throws Exception {
  ClientEndpoint endpoint=getEndpoint();
  OperationFactory operationFactory=new OperationFactoryWrapper(createOperationFactory(),endpoint.getUuid());
  final InternalOperationService operationService=nodeEngine.getOperationService();
  Map<Integer,Object> map=operationService.invokeOnPartitions(getServiceName(),operationFactory,getPartitions());
  return reduce(map);
}","@Override protected Object call() throws Exception {
  OperationFactory operationFactory=new OperationFactoryWrapper(createOperationFactory(),endpoint.getUuid());
  final InternalOperationService operationService=nodeEngine.getOperationService();
  Map<Integer,Object> map=operationService.invokeOnPartitions(getServiceName(),operationFactory,getPartitions());
  return reduce(map);
}",0.9493201483312732
45736,"@Override protected Object call(){
  String serviceName=ClusterServiceImpl.SERVICE_NAME;
  ClusterServiceImpl service=getService(serviceName);
  ClientEndpoint endpoint=getEndpoint();
  String registrationId=service.addMembershipListener(new MembershipListenerImpl(endpoint));
  endpoint.addListenerDestroyAction(serviceName,serviceName,registrationId);
  return registrationId;
}","@Override protected Object call(){
  String serviceName=ClusterServiceImpl.SERVICE_NAME;
  ClusterServiceImpl service=getService(serviceName);
  String registrationId=service.addMembershipListener(new MembershipListenerImpl(endpoint));
  endpoint.addListenerDestroyAction(serviceName,serviceName,registrationId);
  return registrationId;
}",0.9429763560500696
45737,"public AuthenticationBaseMessageTask(ClientMessage clientMessage,Node node,Connection connection){
  super(clientMessage,node,connection);
}","AuthenticationBaseMessageTask(ClientMessage clientMessage,Node node,Connection connection){
  super(clientMessage,node,connection);
}",0.9743589743589745
45738,"@Override protected Object call() throws Exception {
  getEndpoint().setClientStatistics(parameters.stats);
  return null;
}","@Override protected Object call() throws Exception {
  endpoint.setClientStatistics(parameters.stats);
  return null;
}",0.9794238683127572
45739,"@Override protected Object call(){
  ClientEndpoint endpoint=getEndpoint();
  CacheService cacheService=getService(CacheService.SERVICE_NAME);
  CacheContext cacheContext=cacheService.getOrCreateCacheContext(parameters.name);
  NearCacheInvalidationListener listener=new NearCacheInvalidationListener(endpoint,cacheContext,nodeEngine.getLocalMember().getUuid(),clientMessage.getCorrelationId());
  String registrationId=cacheService.addInvalidationListener(parameters.name,listener,parameters.localOnly);
  endpoint.addListenerDestroyAction(CacheService.SERVICE_NAME,parameters.name,registrationId);
  return registrationId;
}","@Override protected Object call(){
  CacheService cacheService=getService(CacheService.SERVICE_NAME);
  CacheContext cacheContext=cacheService.getOrCreateCacheContext(parameters.name);
  NearCacheInvalidationListener listener=new NearCacheInvalidationListener(endpoint,cacheContext,nodeEngine.getLocalMember().getUuid(),clientMessage.getCorrelationId());
  String registrationId=cacheService.addInvalidationListener(parameters.name,listener,parameters.localOnly);
  endpoint.addListenerDestroyAction(CacheService.SERVICE_NAME,parameters.name,registrationId);
  return registrationId;
}",0.9661436829066888
45740,"@Override protected Object call(){
  final ClientEndpoint endpoint=getEndpoint();
  CachePartitionLostListener listener=new CachePartitionLostListener(){
    @Override public void partitionLost(    CachePartitionLostEvent event){
      if (endpoint.isAlive()) {
        ClientMessage eventMessage=CacheAddPartitionLostListenerCodec.encodeCachePartitionLostEvent(event.getPartitionId(),event.getMember().getUuid());
        sendClientMessage(null,eventMessage);
      }
    }
  }
;
  InternalCachePartitionLostListenerAdapter listenerAdapter=new InternalCachePartitionLostListenerAdapter(listener);
  EventFilter filter=new CachePartitionLostEventFilter();
  CacheService service=getService(CacheService.SERVICE_NAME);
  EventService eventService=service.getNodeEngine().getEventService();
  EventRegistration registration;
  if (parameters.localOnly) {
    registration=eventService.registerLocalListener(ICacheService.SERVICE_NAME,parameters.name,filter,listenerAdapter);
  }
 else {
    registration=eventService.registerListener(ICacheService.SERVICE_NAME,parameters.name,filter,listenerAdapter);
  }
  String registrationId=registration.getId();
  endpoint.addListenerDestroyAction(CacheService.SERVICE_NAME,parameters.name,registrationId);
  return registrationId;
}","@Override protected Object call(){
  CachePartitionLostListener listener=new CachePartitionLostListener(){
    @Override public void partitionLost(    CachePartitionLostEvent event){
      if (endpoint.isAlive()) {
        ClientMessage eventMessage=CacheAddPartitionLostListenerCodec.encodeCachePartitionLostEvent(event.getPartitionId(),event.getMember().getUuid());
        sendClientMessage(null,eventMessage);
      }
    }
  }
;
  InternalCachePartitionLostListenerAdapter listenerAdapter=new InternalCachePartitionLostListenerAdapter(listener);
  EventFilter filter=new CachePartitionLostEventFilter();
  CacheService service=getService(CacheService.SERVICE_NAME);
  EventService eventService=service.getNodeEngine().getEventService();
  EventRegistration registration;
  if (parameters.localOnly) {
    registration=eventService.registerLocalListener(ICacheService.SERVICE_NAME,parameters.name,filter,listenerAdapter);
  }
 else {
    registration=eventService.registerListener(ICacheService.SERVICE_NAME,parameters.name,filter,listenerAdapter);
  }
  String registrationId=registration.getId();
  endpoint.addListenerDestroyAction(CacheService.SERVICE_NAME,parameters.name,registrationId);
  return registrationId;
}",0.9811623246492986
45741,"private CacheConfig extractCacheConfigFromMessage(){
  int clientVersion=getClientVersion();
  if (BuildInfo.UNKNOWN_HAZELCAST_VERSION == clientVersion) {
    boolean compatibilityEnabled=nodeEngine.getProperties().getBoolean(GroupProperty.COMPATIBILITY_3_6_CLIENT_ENABLED);
    if (compatibilityEnabled) {
      LegacyCacheConfig legacyCacheConfig=nodeEngine.toObject(parameters.cacheConfig,LegacyCacheConfig.class);
      if (null == legacyCacheConfig) {
        return null;
      }
      return legacyCacheConfig.getConfigAndReset();
    }
  }
  return (CacheConfig)nodeEngine.toObject(parameters.cacheConfig);
}","private CacheConfig extractCacheConfigFromMessage(){
  int clientVersion=endpoint.getClientVersion();
  if (BuildInfo.UNKNOWN_HAZELCAST_VERSION == clientVersion) {
    boolean compatibilityEnabled=nodeEngine.getProperties().getBoolean(GroupProperty.COMPATIBILITY_3_6_CLIENT_ENABLED);
    if (compatibilityEnabled) {
      LegacyCacheConfig legacyCacheConfig=nodeEngine.toObject(parameters.cacheConfig,LegacyCacheConfig.class);
      if (null == legacyCacheConfig) {
        return null;
      }
      return legacyCacheConfig.getConfigAndReset();
    }
  }
  return (CacheConfig)nodeEngine.toObject(parameters.cacheConfig);
}",0.9927477840451248
45742,"private Data serializeCacheConfig(Object response){
  Data responseData=null;
  if (BuildInfo.UNKNOWN_HAZELCAST_VERSION == getClientVersion()) {
    boolean compatibilityEnabled=nodeEngine.getProperties().getBoolean(GroupProperty.COMPATIBILITY_3_6_CLIENT_ENABLED);
    if (compatibilityEnabled) {
      responseData=nodeEngine.toData(response == null ? null : new LegacyCacheConfig((CacheConfig)response));
    }
  }
  if (null == responseData) {
    responseData=nodeEngine.toData(response);
  }
  return responseData;
}","private Data serializeCacheConfig(Object response){
  Data responseData=null;
  if (BuildInfo.UNKNOWN_HAZELCAST_VERSION == endpoint.getClientVersion()) {
    boolean compatibilityEnabled=nodeEngine.getProperties().getBoolean(GroupProperty.COMPATIBILITY_3_6_CLIENT_ENABLED);
    if (compatibilityEnabled) {
      responseData=nodeEngine.toData(response == null ? null : new LegacyCacheConfig((CacheConfig)response));
    }
  }
  if (null == responseData) {
    responseData=nodeEngine.toData(response);
  }
  return responseData;
}",0.9914367269267363
45743,"private Data serializeCacheConfig(Object response){
  Data responseData=null;
  if (BuildInfo.UNKNOWN_HAZELCAST_VERSION == getClientVersion()) {
    boolean compatibilityEnabled=nodeEngine.getProperties().getBoolean(GroupProperty.COMPATIBILITY_3_6_CLIENT_ENABLED);
    if (compatibilityEnabled) {
      responseData=nodeEngine.toData(response == null ? null : new LegacyCacheConfig((CacheConfig)response));
    }
  }
  if (null == responseData) {
    responseData=nodeEngine.toData(response);
  }
  return responseData;
}","private Data serializeCacheConfig(Object response){
  Data responseData=null;
  if (BuildInfo.UNKNOWN_HAZELCAST_VERSION == endpoint.getClientVersion()) {
    boolean compatibilityEnabled=nodeEngine.getProperties().getBoolean(GroupProperty.COMPATIBILITY_3_6_CLIENT_ENABLED);
    if (compatibilityEnabled) {
      responseData=nodeEngine.toData(response == null ? null : new LegacyCacheConfig((CacheConfig)response));
    }
  }
  if (null == responseData) {
    responseData=nodeEngine.toData(response);
  }
  return responseData;
}",0.9914367269267363
45744,"@Override protected Object call(){
  ClientEndpoint endpoint=getEndpoint();
  CacheService cacheService=getService(CacheService.SERVICE_NAME);
  CacheContext cacheContext=cacheService.getOrCreateCacheContext(parameters.name);
  String uuid=nodeEngine.getLocalMember().getUuid();
  long correlationId=clientMessage.getCorrelationId();
  Pre38NearCacheInvalidationListener listener=new Pre38NearCacheInvalidationListener(endpoint,cacheContext,uuid,correlationId);
  String registrationId=cacheService.addInvalidationListener(parameters.name,listener,parameters.localOnly);
  endpoint.addListenerDestroyAction(CacheService.SERVICE_NAME,parameters.name,registrationId);
  return registrationId;
}","@Override protected Object call(){
  CacheService cacheService=getService(CacheService.SERVICE_NAME);
  CacheContext cacheContext=cacheService.getOrCreateCacheContext(parameters.name);
  String uuid=nodeEngine.getLocalMember().getUuid();
  long correlationId=clientMessage.getCorrelationId();
  Pre38NearCacheInvalidationListener listener=new Pre38NearCacheInvalidationListener(endpoint,cacheContext,uuid,correlationId);
  String registrationId=cacheService.addInvalidationListener(parameters.name,listener,parameters.localOnly);
  endpoint.addListenerDestroyAction(CacheService.SERVICE_NAME,parameters.name,registrationId);
  return registrationId;
}",0.9694713328369322
45745,"@Override protected Operation prepareOperation(){
  SecurityContext securityContext=clientEngine.getSecurityContext();
  Data callableData=parameters.callable;
  if (securityContext != null) {
    Callable callable=serializationService.toObject(parameters.callable);
    Subject subject=getEndpoint().getSubject();
    callable=securityContext.createSecureCallable(subject,callable);
    callableData=serializationService.toData(callable);
  }
  MemberCallableTaskOperation op=new MemberCallableTaskOperation(parameters.name,parameters.uuid,callableData);
  op.setCallerUuid(endpoint.getUuid());
  return op;
}","@Override protected Operation prepareOperation(){
  SecurityContext securityContext=clientEngine.getSecurityContext();
  Data callableData=parameters.callable;
  if (securityContext != null) {
    Callable callable=serializationService.toObject(parameters.callable);
    Subject subject=endpoint.getSubject();
    callable=securityContext.createSecureCallable(subject,callable);
    callableData=serializationService.toData(callable);
  }
  MemberCallableTaskOperation op=new MemberCallableTaskOperation(parameters.name,parameters.uuid,callableData);
  op.setCallerUuid(endpoint.getUuid());
  return op;
}",0.994238683127572
45746,"@Override protected Operation prepareOperation(){
  SecurityContext securityContext=clientEngine.getSecurityContext();
  Data callableData=parameters.callable;
  if (securityContext != null) {
    Subject subject=getEndpoint().getSubject();
    Callable callable=serializationService.toObject(parameters.callable);
    callable=securityContext.createSecureCallable(subject,callable);
    callableData=serializationService.toData(callable);
  }
  return new CallableTaskOperation(parameters.name,parameters.uuid,callableData);
}","@Override protected Operation prepareOperation(){
  SecurityContext securityContext=clientEngine.getSecurityContext();
  Data callableData=parameters.callable;
  if (securityContext != null) {
    Subject subject=endpoint.getSubject();
    Callable callable=serializationService.toObject(parameters.callable);
    callable=securityContext.createSecureCallable(subject,callable);
    callableData=serializationService.toData(callable);
  }
  return new CallableTaskOperation(parameters.name,parameters.uuid,callableData);
}",0.9933269780743564
45747,"@Override protected Operation prepareOperation(){
  SecurityContext securityContext=clientEngine.getSecurityContext();
  Data callableData=parameters.callable;
  if (securityContext != null) {
    Subject subject=getEndpoint().getSubject();
    Callable callable=serializationService.toObject(parameters.callable);
    callable=securityContext.createSecureCallable(subject,callable);
    callableData=serializationService.toData(callable);
  }
  return new TaskOperation(parameters.name,callableData);
}","@Override protected Operation prepareOperation(){
  SecurityContext securityContext=clientEngine.getSecurityContext();
  Data callableData=parameters.callable;
  if (securityContext != null) {
    Subject subject=endpoint.getSubject();
    Callable callable=serializationService.toObject(parameters.callable);
    callable=securityContext.createSecureCallable(subject,callable);
    callableData=serializationService.toData(callable);
  }
  return new TaskOperation(parameters.name,callableData);
}",0.993006993006993
45748,"@Override protected Object call(){
  ClientEndpoint endpoint=getEndpoint();
  Data partitionKey=serializationService.toData(parameters.name);
  ItemListener listener=createItemListener(endpoint,partitionKey);
  EventService eventService=clientEngine.getEventService();
  CollectionEventFilter filter=new CollectionEventFilter(parameters.includeValue);
  EventRegistration registration;
  if (parameters.localOnly) {
    registration=eventService.registerLocalListener(getServiceName(),parameters.name,filter,listener);
  }
 else {
    registration=eventService.registerListener(getServiceName(),parameters.name,filter,listener);
  }
  String registrationId=registration.getId();
  endpoint.addListenerDestroyAction(getServiceName(),parameters.name,registrationId);
  return registrationId;
}","@Override protected Object call(){
  Data partitionKey=serializationService.toData(parameters.name);
  ItemListener listener=createItemListener(endpoint,partitionKey);
  EventService eventService=clientEngine.getEventService();
  CollectionEventFilter filter=new CollectionEventFilter(parameters.includeValue);
  EventRegistration registration;
  if (parameters.localOnly) {
    registration=eventService.registerLocalListener(getServiceName(),parameters.name,filter,listener);
  }
 else {
    registration=eventService.registerListener(getServiceName(),parameters.name,filter,listener);
  }
  String registrationId=registration.getId();
  endpoint.addListenerDestroyAction(getServiceName(),parameters.name,registrationId);
  return registrationId;
}",0.9733939000648928
45749,"@Override protected Object call(){
  final ClientEndpoint endpoint=getEndpoint();
  final MapService mapService=getService(MapService.SERVICE_NAME);
  Object listener=newMapListener();
  MapServiceContext mapServiceContext=mapService.getMapServiceContext();
  String name=getDistributedObjectName();
  EventFilter eventFilter=getEventFilter();
  String registrationId;
  if (isLocalOnly()) {
    registrationId=mapServiceContext.addLocalEventListener(listener,eventFilter,name);
  }
 else {
    registrationId=mapServiceContext.addEventListener(listener,eventFilter,name);
  }
  endpoint.addListenerDestroyAction(MapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}","@Override protected Object call(){
  final MapService mapService=getService(MapService.SERVICE_NAME);
  Object listener=newMapListener();
  MapServiceContext mapServiceContext=mapService.getMapServiceContext();
  String name=getDistributedObjectName();
  EventFilter eventFilter=getEventFilter();
  String registrationId;
  if (isLocalOnly()) {
    registrationId=mapServiceContext.addLocalEventListener(listener,eventFilter,name);
  }
 else {
    registrationId=mapServiceContext.addEventListener(listener,eventFilter,name);
  }
  endpoint.addListenerDestroyAction(MapService.SERVICE_NAME,name,registrationId);
  return registrationId;
}",0.9644746787603932
45750,"@Override protected Object call() throws Exception {
  ClientEndpoint endpoint=getEndpoint();
  return registerListener(endpoint,this);
}","@Override protected Object call() throws Exception {
  return registerListener(endpoint,this);
}",0.8240343347639485
45751,"@Override protected Object call(){
  final ClientEndpoint endpoint=getEndpoint();
  final MapService mapService=getService(MapService.SERVICE_NAME);
  final MapPartitionLostListener listener=new MapPartitionLostListener(){
    @Override public void partitionLost(    MapPartitionLostEvent event){
      if (endpoint.isAlive()) {
        ClientMessage eventMessage=MapAddPartitionLostListenerCodec.encodeMapPartitionLostEvent(event.getPartitionId(),event.getMember().getUuid());
        sendClientMessage(null,eventMessage);
      }
    }
  }
;
  MapServiceContext mapServiceContext=mapService.getMapServiceContext();
  String registrationId;
  if (parameters.localOnly) {
    registrationId=mapServiceContext.addLocalPartitionLostListener(listener,parameters.name);
  }
 else {
    registrationId=mapServiceContext.addPartitionLostListener(listener,parameters.name);
  }
  endpoint.addListenerDestroyAction(MapService.SERVICE_NAME,parameters.name,registrationId);
  return registrationId;
}","@Override protected Object call(){
  final MapService mapService=getService(MapService.SERVICE_NAME);
  final MapPartitionLostListener listener=new MapPartitionLostListener(){
    @Override public void partitionLost(    MapPartitionLostEvent event){
      if (endpoint.isAlive()) {
        ClientMessage eventMessage=MapAddPartitionLostListenerCodec.encodeMapPartitionLostEvent(event.getPartitionId(),event.getMember().getUuid());
        sendClientMessage(null,eventMessage);
      }
    }
  }
;
  MapServiceContext mapServiceContext=mapService.getMapServiceContext();
  String registrationId;
  if (parameters.localOnly) {
    registrationId=mapServiceContext.addLocalPartitionLostListener(listener,parameters.name);
  }
 else {
    registrationId=mapServiceContext.addPartitionLostListener(listener,parameters.name);
  }
  endpoint.addListenerDestroyAction(MapService.SERVICE_NAME,parameters.name,registrationId);
  return registrationId;
}",0.975685463010864
45752,"@Override protected Object call() throws Exception {
  ClientEndpoint endpoint=getEndpoint();
  InternalOperationService operationService=nodeEngine.getOperationService();
  Predicate predicate=serializationService.toObject(parameters.predicate);
  if (predicate instanceof PartitionPredicate) {
    return invokeOnPartition((PartitionPredicate)predicate,operationService);
  }
  OperationFactory operationFactory=new OperationFactoryWrapper(createOperationFactory(predicate),endpoint.getUuid());
  Map<Integer,Object> map=operationService.invokeOnAllPartitions(getServiceName(),operationFactory);
  return reduce(map);
}","@Override protected Object call() throws Exception {
  InternalOperationService operationService=nodeEngine.getOperationService();
  Predicate predicate=serializationService.toObject(parameters.predicate);
  if (predicate instanceof PartitionPredicate) {
    return invokeOnPartition((PartitionPredicate)predicate,operationService);
  }
  OperationFactory operationFactory=new OperationFactoryWrapper(createOperationFactory(predicate),endpoint.getUuid());
  Map<Integer,Object> map=operationService.invokeOnAllPartitions(getServiceName(),operationFactory);
  return reduce(map);
}",0.9658617818484596
45753,"private void createInvocations(Collection<MemberImpl> members,List<Future> futures){
  final InternalOperationService operationService=nodeEngine.getOperationService();
  final ClientEndpoint endpoint=getEndpoint();
  for (  MemberImpl member : members) {
    Predicate predicate=serializationService.toObject(parameters.predicate);
    AccumulatorInfo accumulatorInfo=AccumulatorInfo.createAccumulatorInfo(parameters.mapName,parameters.cacheName,predicate,parameters.batchSize,parameters.bufferSize,parameters.delaySeconds,false,parameters.populate,parameters.coalesce);
    PublisherCreateOperation operation=new PublisherCreateOperation(accumulatorInfo);
    operation.setCallerUuid(endpoint.getUuid());
    Address address=member.getAddress();
    InvocationBuilder invocationBuilder=operationService.createInvocationBuilder(SERVICE_NAME,operation,address);
    Future future=invocationBuilder.invoke();
    futures.add(future);
  }
}","private void createInvocations(Collection<MemberImpl> members,List<Future> futures){
  final InternalOperationService operationService=nodeEngine.getOperationService();
  for (  MemberImpl member : members) {
    Predicate predicate=serializationService.toObject(parameters.predicate);
    AccumulatorInfo accumulatorInfo=AccumulatorInfo.createAccumulatorInfo(parameters.mapName,parameters.cacheName,predicate,parameters.batchSize,parameters.bufferSize,parameters.delaySeconds,false,parameters.populate,parameters.coalesce);
    PublisherCreateOperation operation=new PublisherCreateOperation(accumulatorInfo);
    operation.setCallerUuid(endpoint.getUuid());
    Address address=member.getAddress();
    InvocationBuilder invocationBuilder=operationService.createInvocationBuilder(SERVICE_NAME,operation,address);
    Future future=invocationBuilder.invoke();
    futures.add(future);
  }
}",0.974302897758338
45754,"private Queue<OutboundFrame> getOutboundQueue(TcpIpConnection connection,boolean priority){
  if (connection.getChannel() instanceof NioChannel) {
    NioChannel nioChannel=(NioChannel)connection.getChannel();
    NioOutboundPipeline outboundPipeline=nioChannel.outboundPipeline();
    return priority ? outboundPipeline.urgentWriteQueue : outboundPipeline.writeQueue;
  }
 else {
    return EMPTY_QUEUE;
  }
}","private Queue<OutboundFrame> getOutboundQueue(TcpIpConnection connection,boolean priority){
  if (connection.getChannel() instanceof NioChannel) {
    NioChannel nioChannel=(NioChannel)connection.getChannel();
    NioOutboundPipeline outboundPipeline=nioChannel.outboundPipeline();
    return priority ? outboundPipeline.priorityWriteQueue : outboundPipeline.writeQueue;
  }
 else {
    return EMPTY_QUEUE;
  }
}",0.9829683698296836
45755,"private OutboundFrame poll(){
  OutboundFrame frame=urgentWriteQueue.poll();
  if (frame == null) {
    frame=writeQueue.poll();
    if (frame == null) {
      return null;
    }
    normalFramesWritten.inc();
  }
 else {
    priorityFramesWritten.inc();
  }
  return frame;
}","private OutboundFrame poll(){
  OutboundFrame frame=priorityWriteQueue.poll();
  if (frame == null) {
    frame=writeQueue.poll();
    if (frame == null) {
      return null;
    }
    normalFramesWritten.inc();
  }
 else {
    priorityFramesWritten.inc();
  }
  return frame;
}",0.9747292418772564
45756,"/** 
 * Tries to unschedule this ChannelOutboundHandler. <p/> It will only be unscheduled if: - the outputBuffer is empty - there are no pending frames. <p/> If the outputBuffer is dirty then it will register itself for an OP_WRITE since we are interested in knowing if there is more space in the socket output buffer. If the outputBuffer is not dirty, then it will unregister itself from an OP_WRITE since it isn't interested in space in the socket outputBuffer. <p/> This call is only made by the owning IO thread.
 */
private void unschedule() throws IOException {
  if (dirtyOutputBuffer() || currentFrame != null) {
    registerOp(OP_WRITE);
    return;
  }
  unregisterOp(OP_WRITE);
  scheduled.set(false);
  if (writeQueue.isEmpty() && urgentWriteQueue.isEmpty()) {
    return;
  }
  if (!scheduled.compareAndSet(false,true)) {
    return;
  }
  owner.addTask(this);
}","/** 
 * Tries to unschedule this ChannelOutboundHandler. <p/> It will only be unscheduled if: - the outputBuffer is empty - there are no pending frames. <p/> If the outputBuffer is dirty then it will register itself for an OP_WRITE since we are interested in knowing if there is more space in the socket output buffer. If the outputBuffer is not dirty, then it will unregister itself from an OP_WRITE since it isn't interested in space in the socket outputBuffer. <p/> This call is only made by the owning IO thread.
 */
private void unschedule() throws IOException {
  if (dirtyOutputBuffer() || currentFrame != null) {
    registerOp(OP_WRITE);
    return;
  }
  unregisterOp(OP_WRITE);
  scheduled.set(false);
  if (writeQueue.isEmpty() && priorityWriteQueue.isEmpty()) {
    return;
  }
  if (!scheduled.compareAndSet(false,true)) {
    return;
  }
  owner.addTask(this);
}",0.9920091324200914
45757,"@Override public long load(){
switch (loadType) {
case LOAD_BALANCING_HANDLE:
    return processCount.get();
case LOAD_BALANCING_BYTE:
  return bytesWritten.get() + priorityFramesWritten.get();
case LOAD_BALANCING_FRAME:
return normalFramesWritten.get() + priorityFramesWritten.get();
default :
throw new RuntimeException();
}
}","@Override public long load(){
switch (loadType) {
case LOAD_BALANCING_HANDLE:
    return processCount.get();
case LOAD_BALANCING_BYTE:
  return bytesWritten.get();
case LOAD_BALANCING_FRAME:
return normalFramesWritten.get() + priorityFramesWritten.get();
default :
throw new RuntimeException();
}
}",0.6932907348242812
45758,"public int totalFramesPending(){
  return writeQueue.size() + urgentWriteQueue.size();
}","public int totalFramesPending(){
  return writeQueue.size() + priorityWriteQueue.size();
}",0.9438202247191012
45759,"@Probe(name=""String_Node_Str"",level=DEBUG) public long priorityBytesPending(){
  return bytesPending(urgentWriteQueue);
}","@Probe(name=""String_Node_Str"",level=DEBUG) public long priorityBytesPending(){
  return bytesPending(priorityWriteQueue);
}",0.9590163934426228
45760,"@Override void publishMetrics(){
  if (currentThread() != owner) {
    return;
  }
  owner.bytesTransceived+=bytesWritten.get() - bytesReadLastPublish;
  owner.framesTransceived+=normalFramesWritten.get() - normalFramesReadLastPublish;
  owner.priorityFramesTransceived+=priorityFramesWritten.get() - priorityFramesReadLastPublish;
  owner.processCount+=processCount.get() - processCountLastPublish;
  bytesReadLastPublish=bytesWritten.get();
  normalFramesReadLastPublish=normalFramesWritten.get();
  priorityFramesReadLastPublish=priorityFramesWritten.get();
  processCountLastPublish=processCount.get();
}","@Override void publishMetrics(){
  if (currentThread() != owner) {
    return;
  }
  owner.bytesTransceived+=bytesWritten.get() - bytesWrittenLastPublish;
  owner.framesTransceived+=normalFramesWritten.get() - normalFramesWrittenLastPublish;
  owner.priorityFramesTransceived+=priorityFramesWritten.get() - priorityFramesWrittenLastPublish;
  owner.processCount+=processCount.get() - processCountLastPublish;
  bytesWrittenLastPublish=bytesWritten.get();
  normalFramesWrittenLastPublish=normalFramesWritten.get();
  priorityFramesWrittenLastPublish=priorityFramesWritten.get();
  processCountLastPublish=processCount.get();
}",0.7828200972447326
45761,"public void write(OutboundFrame frame){
  if (frame.isUrgent()) {
    urgentWriteQueue.offer(frame);
  }
 else {
    writeQueue.offer(frame);
  }
  schedule();
}","public void write(OutboundFrame frame){
  if (frame.isUrgent()) {
    priorityWriteQueue.offer(frame);
  }
 else {
    writeQueue.offer(frame);
  }
  schedule();
}",0.9691358024691358
45762,"@Override public void close(){
  writeQueue.clear();
  urgentWriteQueue.clear();
  CloseTask closeTask=new CloseTask();
  addTaskAndWakeup(closeTask);
  closeTask.awaitCompletion();
}","@Override public void close(){
  writeQueue.clear();
  priorityWriteQueue.clear();
  CloseTask closeTask=new CloseTask();
  addTaskAndWakeup(closeTask);
  closeTask.awaitCompletion();
}",0.9728260869565216
45763,"/** 
 * Checks the DatagramSocket as well if the port is available in UDP and TCP.
 * @param port the port to check
 * @return {@code true} if the port is available in UDP and TCP, {@code false} otherwise
 */
public static boolean isPortAvailable(int port){
  ServerSocket ss=null;
  DatagramSocket ds=null;
  try {
    ss=new ServerSocket(port);
    ss.setReuseAddress(true);
    ds=new DatagramSocket(port);
    ds.setReuseAddress(true);
    return true;
  }
 catch (  IOException e) {
    return false;
  }
 finally {
    closeResource(ds);
    closeResource(ss);
  }
}","/** 
 * Checks the DatagramSocket as well if the port is available in UDP and TCP.
 * @param port the port to check
 * @return {@code true} if the port is available in UDP and TCP, {@code false} otherwise
 */
public static boolean isPortAvailable(int port){
  ServerSocket ss=null;
  DatagramSocket ds=null;
  try {
    ss=new ServerSocket(port);
    ss.setReuseAddress(true);
    ds=new DatagramSocket(port);
    ds.setReuseAddress(true);
    return true;
  }
 catch (  IOException e) {
    return false;
  }
 finally {
    if (ds != null) {
      ds.close();
    }
    try {
      if (ss != null) {
        ss.close();
      }
    }
 catch (    IOException e) {
      ignore(e);
    }
  }
}",0.8306962025316456
45764,"/** 
 * Notifies services that migration started, invokes all sent migration tasks and updates the replica versions. 
 */
private void doRun() throws Exception {
  if (migrationInfo.startProcessing()) {
    try {
      if (firstFragment) {
        executeBeforeMigrations();
      }
      for (      Operation migrationOperation : fragmentMigrationState.getMigrationOperations()) {
        runMigrationOperation(migrationOperation);
      }
      success=true;
    }
 catch (    Throwable e) {
      success=false;
      failureReason=e;
      getLogger().severe(""String_Node_Str"" + migrationInfo,e);
    }
 finally {
      afterMigrate();
    }
  }
 else {
    success=false;
    logMigrationCancelled();
  }
}","/** 
 * Notifies services that migration started, invokes all sent migration tasks and updates the replica versions. 
 */
private void doRun(){
  if (migrationInfo.startProcessing()) {
    try {
      if (firstFragment) {
        executeBeforeMigrations();
      }
      for (      Operation migrationOperation : fragmentMigrationState.getMigrationOperations()) {
        runMigrationOperation(migrationOperation);
      }
      success=true;
    }
 catch (    Throwable e) {
      success=false;
      failureReason=e;
      getLogger().severe(""String_Node_Str"" + migrationInfo,e);
    }
 finally {
      afterMigrate();
    }
  }
 else {
    success=false;
    logMigrationCancelled();
  }
}",0.9871794871794872
45765,"public MigrationOperation(MigrationInfo migrationInfo,int partitionStateVersion,ReplicaFragmentMigrationState fragmentMigrationState,boolean firstFragment,boolean lastFragment){
  super(migrationInfo,partitionStateVersion);
  this.fragmentMigrationState=fragmentMigrationState;
  this.firstFragment=firstFragment;
  this.lastFragment=lastFragment;
}","public MigrationOperation(MigrationInfo migrationInfo,int partitionStateVersion,ReplicaFragmentMigrationState fragmentMigrationState,boolean firstFragment,boolean lastFragment){
  super(migrationInfo,partitionStateVersion);
  this.fragmentMigrationState=fragmentMigrationState;
  this.firstFragment=firstFragment;
  this.lastFragment=lastFragment;
  setReplicaIndex(migrationInfo.getDestinationNewReplicaIndex());
}",0.9136125654450262
45766,"/** 
 * Causes the partition table to be arranged and published to members if : <ul> <li>the instance has started</li> <li>the cluster is   {@link ClusterState#ACTIVE}</li> <li>if it has not already been arranged</li> <li>if there is no cluster membership change</li> </ul> If this node is not the master, it will trigger the master to assign the partitions.
 * @throws HazelcastException if the partition state generator failed to arrange the partitions
 * @see PartitionStateManager#initializePartitionAssignments(java.util.Set)
 */
void firstArrangement();","/** 
 * Causes the partition table to be arranged and published to members if : <ul> <li>this instance has started</li> <li>this instance is the master</li> <li>the cluster is   {@link ClusterState#ACTIVE}</li> <li>if the partition table has not already been arranged</li> <li>if there is no cluster membership change</li> </ul> If this instance is not the master, it will trigger the master to assign the partitions.
 * @throws HazelcastException if the partition state generator failed to arrange the partitions
 * @return {@link PartitionRuntimeState} if this node is the master and the partition table is initialized
 * @see PartitionStateManager#initializePartitionAssignments(java.util.Set)
 */
PartitionRuntimeState firstArrangement();",0.8439661798616449
45767,"/** 
 * Called on the master node to send the partition tables to other cluster members. It will not publish the partition state if the partitions have not yet been initialized. Waits for   {@value PTABLE_SYNC_TIMEOUT_SECONDS} for the members to respond to the partition state operation.
 * @return {@code true} if all cluster members have synced their partition tables, {@code false} otherwise.
 */
@SuppressWarnings(""String_Node_Str"") boolean syncPartitionRuntimeState(){
  if (!partitionStateManager.isInitialized()) {
    return false;
  }
  if (!node.isMaster()) {
    return false;
  }
  PartitionRuntimeState partitionState=createPartitionStateInternal();
  if (partitionState == null) {
    return false;
  }
  if (logger.isFineEnabled()) {
    logger.fine(""String_Node_Str"" + partitionState.getVersion());
  }
  OperationService operationService=nodeEngine.getOperationService();
  Collection<MemberImpl> members=node.clusterService.getMemberImpls();
  List<Future<Boolean>> calls=firePartitionStateOperation(members,partitionState,operationService);
  Collection<Boolean> results=returnWithDeadline(calls,PTABLE_SYNC_TIMEOUT_SECONDS,TimeUnit.SECONDS,partitionStateSyncTimeoutHandler);
  if (calls.size() != results.size()) {
    return false;
  }
  for (  Boolean result : results) {
    if (!result) {
      if (logger.isFineEnabled()) {
        logger.fine(""String_Node_Str"" + partitionState.getVersion() + ""String_Node_Str"");
      }
      return false;
    }
  }
  return true;
}","/** 
 * Called on the master node to send the partition tables to other cluster members. It will not publish the partition state if the partitions have not yet been initialized. Waits for   {@value PTABLE_SYNC_TIMEOUT_SECONDS} for the members to respond to the partition state operation.
 * @return {@code true} if all cluster members have synced their partition tables, {@code false} otherwise.
 */
@SuppressWarnings(""String_Node_Str"") boolean syncPartitionRuntimeState(){
  if (!partitionStateManager.isInitialized()) {
    return false;
  }
  if (!node.isMaster()) {
    return false;
  }
  PartitionRuntimeState partitionState=createPartitionStateInternal();
  if (partitionState == null) {
    return false;
  }
  if (logger.isFineEnabled()) {
    logger.fine(""String_Node_Str"" + partitionState.getVersion());
  }
  OperationService operationService=nodeEngine.getOperationService();
  Collection<MemberImpl> members=node.clusterService.getMemberImpls();
  List<Future<Boolean>> calls=firePartitionStateOperation(members,partitionState,operationService);
  Collection<Boolean> results=returnWithDeadline(calls,PTABLE_SYNC_TIMEOUT_SECONDS,SECONDS,partitionStateSyncTimeoutHandler);
  if (calls.size() != results.size()) {
    return false;
  }
  for (  Boolean result : results) {
    if (!result) {
      if (logger.isFineEnabled()) {
        logger.fine(""String_Node_Str"" + partitionState.getVersion() + ""String_Node_Str"");
      }
      return false;
    }
  }
  return true;
}",0.9969768223043332
45768,"@Override public void firstArrangement(){
  if (partitionStateManager.isInitialized()) {
    return;
  }
  if (!node.isMaster()) {
    triggerMasterToAssignPartitions();
    return;
  }
  lock.lock();
  try {
    if (partitionStateManager.isInitialized()) {
      return;
    }
    Set<Address> excludedAddresses=migrationManager.getShutdownRequestedAddresses();
    if (!partitionStateManager.initializePartitionAssignments(excludedAddresses)) {
      return;
    }
    publishPartitionRuntimeState();
  }
  finally {
    lock.unlock();
  }
}","@Override public PartitionRuntimeState firstArrangement(){
  if (!node.isMaster()) {
    triggerMasterToAssignPartitions();
    return null;
  }
  lock.lock();
  try {
    if (!partitionStateManager.isInitialized()) {
      Set<Address> excludedAddresses=migrationManager.getShutdownRequestedAddresses();
      if (partitionStateManager.initializePartitionAssignments(excludedAddresses)) {
        publishPartitionRuntimeState();
      }
    }
    return createPartitionStateInternal();
  }
  finally {
    lock.unlock();
  }
}",0.788785046728972
45769,"@Override public void init(NodeEngine nodeEngine,Properties properties){
  int partitionTableSendInterval=node.getProperties().getSeconds(GroupProperty.PARTITION_TABLE_SEND_INTERVAL);
  if (partitionTableSendInterval <= 0) {
    partitionTableSendInterval=1;
  }
  ExecutionService executionService=nodeEngine.getExecutionService();
  executionService.scheduleWithRepetition(new PublishPartitionRuntimeStateTask(node,this),partitionTableSendInterval,partitionTableSendInterval,TimeUnit.SECONDS);
  migrationManager.start();
  replicaManager.scheduleReplicaVersionSync(executionService);
}","@Override public void init(NodeEngine nodeEngine,Properties properties){
  int partitionTableSendInterval=node.getProperties().getSeconds(GroupProperty.PARTITION_TABLE_SEND_INTERVAL);
  if (partitionTableSendInterval <= 0) {
    partitionTableSendInterval=1;
  }
  ExecutionService executionService=nodeEngine.getExecutionService();
  executionService.scheduleWithRepetition(new PublishPartitionRuntimeStateTask(node,this),partitionTableSendInterval,partitionTableSendInterval,SECONDS);
  migrationManager.start();
  replicaManager.scheduleReplicaVersionSync(executionService);
}",0.9922879177377892
45770,"public InternalPartitionServiceImpl(Node node){
  HazelcastProperties properties=node.getProperties();
  this.partitionCount=properties.getInteger(GroupProperty.PARTITION_COUNT);
  this.node=node;
  this.nodeEngine=node.nodeEngine;
  this.logger=node.getLogger(InternalPartitionService.class);
  partitionListener=new InternalPartitionListener(node,this);
  partitionStateManager=new PartitionStateManager(node,this,partitionListener);
  migrationManager=new MigrationManager(node,this,lock);
  replicaManager=new PartitionReplicaManager(node,this);
  partitionReplicaStateChecker=new PartitionReplicaStateChecker(node,this);
  partitionEventManager=new PartitionEventManager(node);
  partitionStateSyncTimeoutHandler=logAllExceptions(logger,EXCEPTION_MSG_PARTITION_STATE_SYNC_TIMEOUT,Level.FINEST);
  partitionMigrationTimeout=properties.getMillis(GroupProperty.PARTITION_MIGRATION_TIMEOUT);
  proxy=new PartitionServiceProxy(nodeEngine,this);
  MetricsRegistry metricsRegistry=nodeEngine.getMetricsRegistry();
  metricsRegistry.scanAndRegister(this,""String_Node_Str"");
  metricsRegistry.scanAndRegister(partitionStateManager,""String_Node_Str"");
  metricsRegistry.scanAndRegister(migrationManager,""String_Node_Str"");
  metricsRegistry.scanAndRegister(replicaManager,""String_Node_Str"");
}","public InternalPartitionServiceImpl(Node node){
  HazelcastProperties properties=node.getProperties();
  this.partitionCount=properties.getInteger(GroupProperty.PARTITION_COUNT);
  this.node=node;
  this.nodeEngine=node.nodeEngine;
  this.logger=node.getLogger(InternalPartitionService.class);
  partitionListener=new InternalPartitionListener(node,this);
  partitionStateManager=new PartitionStateManager(node,this,partitionListener);
  migrationManager=new MigrationManager(node,this,lock);
  replicaManager=new PartitionReplicaManager(node,this);
  partitionReplicaStateChecker=new PartitionReplicaStateChecker(node,this);
  partitionEventManager=new PartitionEventManager(node);
  masterTrigger=new CoalescingDelayedTrigger(nodeEngine.getExecutionService(),TRIGGER_MASTER_DELAY_MILLIS,2 * TRIGGER_MASTER_DELAY_MILLIS,new Runnable(){
    @Override public void run(){
      resetMasterTriggeredFlag();
    }
  }
);
  partitionStateSyncTimeoutHandler=logAllExceptions(logger,EXCEPTION_MSG_PARTITION_STATE_SYNC_TIMEOUT,Level.FINEST);
  partitionMigrationTimeout=properties.getMillis(GroupProperty.PARTITION_MIGRATION_TIMEOUT);
  proxy=new PartitionServiceProxy(nodeEngine,this);
  MetricsRegistry metricsRegistry=nodeEngine.getMetricsRegistry();
  metricsRegistry.scanAndRegister(this,""String_Node_Str"");
  metricsRegistry.scanAndRegister(partitionStateManager,""String_Node_Str"");
  metricsRegistry.scanAndRegister(migrationManager,""String_Node_Str"");
  metricsRegistry.scanAndRegister(replicaManager,""String_Node_Str"");
}",0.9167259786476868
45771,"/** 
 * Applies the   {@code partitionState} sent by the {@code sender} if the new state is newer than the current oneand finalizes the migrations. This method does not validate the sender. It is caller method's responsibility. This method will acquire the partition service lock.
 * @param partitionState the new partition state
 * @param sender         the sender of the new partition state
 * @return {@code true} if the partition state version is higher than the current one and was applied orif the partition state version is same as the current one
 */
private boolean applyNewState(PartitionRuntimeState partitionState,Address sender){
  try {
    if (!lock.tryLock(PTABLE_SYNC_TIMEOUT_SECONDS,TimeUnit.SECONDS)) {
      return false;
    }
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    return false;
  }
  try {
    final int newVersion=partitionState.getVersion();
    final int currentVersion=partitionStateManager.getVersion();
    if (newVersion < currentVersion) {
      logger.warning(""String_Node_Str"" + currentVersion + ""String_Node_Str""+ newVersion+ ""String_Node_Str""+ sender);
      return false;
    }
 else     if (newVersion == currentVersion) {
      if (logger.isFineEnabled()) {
        logger.fine(""String_Node_Str"" + currentVersion + ""String_Node_Str""+ newVersion+ ""String_Node_Str""+ sender);
      }
      return true;
    }
    filterAndLogUnknownAddressesInPartitionTable(sender,partitionState.getPartitionTable());
    updatePartitionsAndFinalizeMigrations(partitionState);
    return true;
  }
  finally {
    lock.unlock();
  }
}","/** 
 * Applies the   {@code partitionState} sent by the {@code sender} if the new state is newer than the current oneand finalizes the migrations. This method does not validate the sender. It is caller method's responsibility. This method will acquire the partition service lock.
 * @param partitionState the new partition state
 * @param sender         the sender of the new partition state
 * @return {@code true} if the partition state version is higher than the current one and was applied orif the partition state version is same as the current one
 */
private boolean applyNewState(PartitionRuntimeState partitionState,Address sender){
  try {
    if (!lock.tryLock(PTABLE_SYNC_TIMEOUT_SECONDS,SECONDS)) {
      return false;
    }
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    return false;
  }
  try {
    final int newVersion=partitionState.getVersion();
    final int currentVersion=partitionStateManager.getVersion();
    if (newVersion < currentVersion) {
      logger.warning(""String_Node_Str"" + currentVersion + ""String_Node_Str""+ newVersion+ ""String_Node_Str""+ sender);
      return false;
    }
 else     if (newVersion == currentVersion) {
      if (logger.isFineEnabled()) {
        logger.fine(""String_Node_Str"" + currentVersion + ""String_Node_Str""+ newVersion+ ""String_Node_Str""+ sender);
      }
      return true;
    }
    filterAndLogUnknownAddressesInPartitionTable(sender,partitionState.getPartitionTable());
    updatePartitionsAndFinalizeMigrations(partitionState);
    return true;
  }
  finally {
    lock.unlock();
  }
}",0.9971777986829728
45772,"/** 
 * Fetches known partition state from next member and returns null if target member is left and/or not a member of this cluster anymore. If future timeouts, then fetch operation is retried until we learn target member's partition state or it leaves the cluster.
 */
private PartitionRuntimeState collectNextPartitionState(Iterator<Map.Entry<Member,Future<PartitionRuntimeState>>> iter){
  Map.Entry<Member,Future<PartitionRuntimeState>> next=iter.next();
  Member member=next.getKey();
  Future<PartitionRuntimeState> future=next.getValue();
  boolean collectedState=true;
  try {
    PartitionRuntimeState state=future.get(FETCH_PARTITION_STATE_SECONDS,TimeUnit.SECONDS);
    if (state == null) {
      logger.fine(""String_Node_Str"" + member);
    }
 else {
      logger.fine(""String_Node_Str"" + state.getVersion() + ""String_Node_Str""+ member);
    }
    return state;
  }
 catch (  InterruptedException e) {
    logger.fine(""String_Node_Str"");
    Thread.currentThread().interrupt();
  }
catch (  TimeoutException e) {
    collectedState=false;
    next.setValue(fetchPartitionState(member));
  }
catch (  Exception e) {
    Level level=Level.SEVERE;
    if ((e instanceof MemberLeftException) || (e.getCause() instanceof TargetNotMemberException)) {
      level=Level.FINE;
    }
    logger.log(level,""String_Node_Str"" + member,e);
  }
 finally {
    if (collectedState) {
      iter.remove();
    }
  }
  return null;
}","/** 
 * Fetches known partition state from next member and returns null if target member is left and/or not a member of this cluster anymore. If future timeouts, then fetch operation is retried until we learn target member's partition state or it leaves the cluster.
 */
private PartitionRuntimeState collectNextPartitionState(Iterator<Map.Entry<Member,Future<PartitionRuntimeState>>> iter){
  Map.Entry<Member,Future<PartitionRuntimeState>> next=iter.next();
  Member member=next.getKey();
  Future<PartitionRuntimeState> future=next.getValue();
  boolean collectedState=true;
  try {
    PartitionRuntimeState state=future.get(FETCH_PARTITION_STATE_SECONDS,SECONDS);
    if (state == null) {
      logger.fine(""String_Node_Str"" + member);
    }
 else {
      logger.fine(""String_Node_Str"" + state.getVersion() + ""String_Node_Str""+ member);
    }
    return state;
  }
 catch (  InterruptedException e) {
    logger.fine(""String_Node_Str"");
    Thread.currentThread().interrupt();
  }
catch (  TimeoutException e) {
    collectedState=false;
    next.setValue(fetchPartitionState(member));
  }
catch (  Exception e) {
    Level level=Level.SEVERE;
    if ((e instanceof MemberLeftException) || (e.getCause() instanceof TargetNotMemberException)) {
      level=Level.FINE;
    }
    logger.log(level,""String_Node_Str"" + member,e);
  }
 finally {
    if (collectedState) {
      iter.remove();
    }
  }
  return null;
}",0.9968387776606956
45773,"/** 
 * Sends a   {@link AssignPartitions} to the master to assign partitions. 
 */
private void triggerMasterToAssignPartitions(){
  if (partitionStateManager.isInitialized()) {
    return;
  }
  ClusterServiceImpl clusterService=node.getClusterService();
  if (!clusterService.isJoined()) {
    return;
  }
  ClusterState clusterState=clusterService.getClusterState();
  if (!clusterState.isMigrationAllowed()) {
    logger.warning(""String_Node_Str"" + clusterState);
    return;
  }
  if (!triggerMasterFlag.compareAndSet(false,true)) {
    return;
  }
  try {
    final Address masterAddress=clusterService.getMasterAddress();
    if (masterAddress != null && !masterAddress.equals(node.getThisAddress())) {
      Future f=nodeEngine.getOperationService().createInvocationBuilder(SERVICE_NAME,new AssignPartitions(),masterAddress).setTryCount(1).invoke();
      f.get(1,TimeUnit.SECONDS);
    }
  }
 catch (  Exception e) {
    logger.finest(e);
  }
 finally {
    triggerMasterFlag.set(false);
  }
}","/** 
 * Sends a   {@link AssignPartitions} to the master to assign partitions. 
 */
private void triggerMasterToAssignPartitions(){
  if (partitionStateManager.isInitialized()) {
    return;
  }
  ClusterServiceImpl clusterService=node.getClusterService();
  if (!clusterService.isJoined()) {
    return;
  }
  ClusterState clusterState=clusterService.getClusterState();
  if (!clusterState.isMigrationAllowed()) {
    logger.warning(""String_Node_Str"" + clusterState);
    return;
  }
  final Address masterAddress=clusterService.getMasterAddress();
  if (masterAddress == null || masterAddress.equals(node.getThisAddress())) {
    return;
  }
  if (masterTriggered.compareAndSet(false,true)) {
    InternalOperationService operationService=nodeEngine.getOperationService();
    operationService.createInvocationBuilder(SERVICE_NAME,new AssignPartitions(),masterAddress).invoke().andThen(new ExecutionCallback<Object>(){
      @Override public void onResponse(      Object response){
        resetMasterTriggeredFlag();
        if (response instanceof PartitionRuntimeState) {
          PartitionRuntimeState partitionState=(PartitionRuntimeState)response;
          partitionState.setEndpoint(masterAddress);
          processPartitionRuntimeState(partitionState);
        }
      }
      @Override public void onFailure(      Throwable t){
        resetMasterTriggeredFlag();
        logger.severe(t);
      }
    }
);
    masterTrigger.executeWithDelay();
  }
}",0.5601945683015809
45774,"@Override public Object getResponse(){
  return Boolean.TRUE;
}","@Override public Object getResponse(){
  return partitionState;
}",0.828125
45775,"@Override public void run(){
  InternalPartitionServiceImpl service=getService();
  service.firstArrangement();
}","@Override public void run(){
  InternalPartitionServiceImpl service=getService();
  partitionState=service.firstArrangement();
}",0.9377593360995852
45776,"@Override public void handle(Packet packet){
  int threadIndex=INT_HOLDER.get().getAndInc() % responseThreads.length;
  responseThreads[threadIndex].responseQueue.add(packet);
}","@Override public void handle(Packet packet){
  int threadIndex=hashToIndex(INT_HOLDER.get().getAndInc(),responseThreads.length);
  responseThreads[threadIndex].responseQueue.add(packet);
}",0.9534246575342464
45777,"@Override public void handle(Packet packet){
  int threadIndex=INT_HOLDER.get().getAndInc() % responseThreads.length;
  responseThreads[threadIndex].responseQueue.add(packet);
}","@Override public void handle(Packet packet){
  int threadIndex=hashToIndex(INT_HOLDER.get().getAndInc(),responseThreads.length);
  responseThreads[threadIndex].responseQueue.add(packet);
}",0.9534246575342464
45778,"@Override public void handle(ClientMessage message,ClientConnection connection){
  int threadIndex=INT_HOLDER.get().getAndInc() % responseThreads.length;
  responseThreads[threadIndex].responseQueue.add(new ClientPacket(connection,message));
}","@Override public void handle(ClientMessage message,ClientConnection connection){
  int threadIndex=hashToIndex(INT_HOLDER.get().getAndInc(),responseThreads.length);
  responseThreads[threadIndex].responseQueue.add(new ClientPacket(connection,message));
}",0.8772635814889336
45779,"@SuppressFBWarnings(""String_Node_Str"") private void handleAt(String first){
  if (first.length() == 1) {
    println(""String_Node_Str"");
    return;
  }
  File f=new File(first.substring(1));
  println(""String_Node_Str"" + f.getAbsolutePath());
  if (f.exists()) {
    try {
      BufferedReader br=new BufferedReader(new FileReader(f));
      String l=br.readLine();
      while (l != null) {
        handleCommand(l);
        l=br.readLine();
      }
      br.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else {
    println(""String_Node_Str"" + f.getAbsolutePath());
  }
}","@SuppressFBWarnings(""String_Node_Str"") private void handleAt(String first){
  if (first.length() == 1) {
    println(""String_Node_Str"");
    return;
  }
  File f=new File(first.substring(1));
  println(""String_Node_Str"" + f.getAbsolutePath());
  if (f.exists()) {
    BufferedReader br=null;
    try {
      br=new BufferedReader(new FileReader(f));
      String l=br.readLine();
      while (l != null) {
        handleCommand(l);
        l=br.readLine();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
 finally {
      IOUtil.closeResource(br);
    }
  }
 else {
    println(""String_Node_Str"" + f.getAbsolutePath());
  }
}",0.91283676703645
45780,"private void handleAt(String first){
  if (first.length() == 1) {
    println(""String_Node_Str"");
    return;
  }
  File f=new File(first.substring(1));
  println(""String_Node_Str"" + f.getAbsolutePath());
  if (f.exists()) {
    try {
      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(f),""String_Node_Str""));
      String l=br.readLine();
      while (l != null) {
        handleCommand(l);
        l=br.readLine();
      }
      br.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else {
    println(""String_Node_Str"" + f.getAbsolutePath());
  }
}","private void handleAt(String first){
  if (first.length() == 1) {
    println(""String_Node_Str"");
    return;
  }
  File f=new File(first.substring(1));
  println(""String_Node_Str"" + f.getAbsolutePath());
  if (f.exists()) {
    BufferedReader br=null;
    try {
      br=new BufferedReader(new InputStreamReader(new FileInputStream(f),""String_Node_Str""));
      String l=br.readLine();
      while (l != null) {
        handleCommand(l);
        l=br.readLine();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
 finally {
      IOUtil.closeResource(br);
    }
  }
 else {
    println(""String_Node_Str"" + f.getAbsolutePath());
  }
}",0.913793103448276
45781,"/** 
 * Starts the test application. Loads the config from classpath hazelcast.xml, if it fails to load, will use default config.
 */
public static void main(String[] args) throws Exception {
  Config config;
  try {
    config=new FileSystemXmlConfig(""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    config=new Config();
  }
  for (int i=1; i <= LOAD_EXECUTORS_COUNT; i++) {
    config.addExecutorConfig(new ExecutorConfig(EXECUTOR_NAMESPACE + ""String_Node_Str"" + i).setPoolSize(i));
  }
  ConsoleApp consoleApp=new ConsoleApp(Hazelcast.newHazelcastInstance(config));
  consoleApp.start();
}","/** 
 * Starts the test application. <p> Loads the config from classpath hazelcast.xml, if it fails to load, will use default config.
 */
public static void main(String[] args) throws Exception {
  Config config;
  try {
    config=new FileSystemXmlConfig(""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    config=new Config();
  }
  for (int i=1; i <= LOAD_EXECUTORS_COUNT; i++) {
    config.addExecutorConfig(new ExecutorConfig(EXECUTOR_NAMESPACE + ""String_Node_Str"" + i).setPoolSize(i));
  }
  ConsoleApp consoleApp=new ConsoleApp(Hazelcast.newHazelcastInstance(config));
  consoleApp.start();
}",0.99672131147541
45782,"/** 
 * Iterates through all bundles to get the available   {@link ScriptEngineFactory} classes
 * @return the names of the available ScriptEngineFactory classes
 * @throws IOException
 */
private List<String> findFactoryCandidates(BundleContext context) throws IOException {
  Bundle[] bundles=context.getBundles();
  List<String> factoryCandidates=new ArrayList<String>();
  for (  Bundle bundle : bundles) {
    if (bundle == null) {
      continue;
    }
    if (""String_Node_Str"".equals(bundle.getSymbolicName())) {
      continue;
    }
    Enumeration urls=bundle.findEntries(""String_Node_Str"",""String_Node_Str"",false);
    if (urls == null) {
      continue;
    }
    while (urls.hasMoreElements()) {
      URL u=(URL)urls.nextElement();
      BufferedReader reader=new BufferedReader(new InputStreamReader(u.openStream(),""String_Node_Str""));
      String line;
      while ((line=reader.readLine()) != null) {
        line=line.trim();
        if (!line.startsWith(""String_Node_Str"") && line.length() > 0) {
          factoryCandidates.add(line);
        }
      }
      reader.close();
    }
  }
  addJavaScriptEngine(factoryCandidates);
  return factoryCandidates;
}","/** 
 * Iterates through all bundles to get the available   {@link ScriptEngineFactory} classes
 * @return the names of the available ScriptEngineFactory classes
 * @throws IOException
 */
private List<String> findFactoryCandidates(BundleContext context) throws IOException {
  Bundle[] bundles=context.getBundles();
  List<String> factoryCandidates=new ArrayList<String>();
  for (  Bundle bundle : bundles) {
    if (bundle == null) {
      continue;
    }
    if (""String_Node_Str"".equals(bundle.getSymbolicName())) {
      continue;
    }
    Enumeration urls=bundle.findEntries(""String_Node_Str"",""String_Node_Str"",false);
    if (urls == null) {
      continue;
    }
    while (urls.hasMoreElements()) {
      URL u=(URL)urls.nextElement();
      BufferedReader reader=null;
      try {
        reader=new BufferedReader(new InputStreamReader(u.openStream(),""String_Node_Str""));
        String line;
        while ((line=reader.readLine()) != null) {
          line=line.trim();
          if (!line.startsWith(""String_Node_Str"") && line.length() > 0) {
            factoryCandidates.add(line);
          }
        }
      }
  finally {
        IOUtil.closeResource(reader);
      }
    }
  }
  addJavaScriptEngine(factoryCandidates);
  return factoryCandidates;
}",0.9448304045770332
45783,"@Override public Collection<DistributedObject> getDistributedObjects(){
  try {
    ClientMessage request=ClientGetDistributedObjectsCodec.encodeRequest();
    final Future<ClientMessage> future=new ClientInvocation(this,request,getName()).invoke();
    ClientMessage response=future.get();
    ClientGetDistributedObjectsCodec.ResponseParameters resultParameters=ClientGetDistributedObjectsCodec.decodeResponse(response);
    Collection<? extends DistributedObject> distributedObjects=proxyManager.getDistributedObjects();
    Set<DistributedObjectInfo> localDistributedObjects=new HashSet<DistributedObjectInfo>();
    for (    DistributedObject localInfo : distributedObjects) {
      localDistributedObjects.add(new DistributedObjectInfo(localInfo.getServiceName(),localInfo.getName()));
    }
    Collection<DistributedObjectInfo> newDistributedObjectInfo=resultParameters.response;
    for (    DistributedObjectInfo distributedObjectInfo : newDistributedObjectInfo) {
      localDistributedObjects.remove(distributedObjectInfo);
      getDistributedObject(distributedObjectInfo.getServiceName(),distributedObjectInfo.getName());
    }
    for (    DistributedObjectInfo distributedObjectInfo : localDistributedObjects) {
      proxyManager.removeProxy(distributedObjectInfo.getServiceName(),distributedObjectInfo.getName());
    }
    return (Collection<DistributedObject>)proxyManager.getDistributedObjects();
  }
 catch (  Exception e) {
    throw rethrow(e);
  }
}","@Override public Collection<DistributedObject> getDistributedObjects(){
  try {
    ClientMessage request=ClientGetDistributedObjectsCodec.encodeRequest();
    final Future<ClientMessage> future=new ClientInvocation(this,request,getName()).invoke();
    ClientMessage response=future.get();
    ClientGetDistributedObjectsCodec.ResponseParameters resultParameters=ClientGetDistributedObjectsCodec.decodeResponse(response);
    Collection<? extends DistributedObject> distributedObjects=proxyManager.getDistributedObjects();
    Set<DistributedObjectInfo> localDistributedObjects=new HashSet<DistributedObjectInfo>();
    for (    DistributedObject localInfo : distributedObjects) {
      localDistributedObjects.add(new DistributedObjectInfo(localInfo.getServiceName(),localInfo.getName()));
    }
    Collection<DistributedObjectInfo> newDistributedObjectInfo=resultParameters.response;
    for (    DistributedObjectInfo distributedObjectInfo : newDistributedObjectInfo) {
      localDistributedObjects.remove(distributedObjectInfo);
      getDistributedObject(distributedObjectInfo.getServiceName(),distributedObjectInfo.getName());
    }
    for (    DistributedObjectInfo distributedObjectInfo : localDistributedObjects) {
      proxyManager.destroyProxyLocally(distributedObjectInfo.getServiceName(),distributedObjectInfo.getName());
    }
    return (Collection<DistributedObject>)proxyManager.getDistributedObjects();
  }
 catch (  Exception e) {
    throw rethrow(e);
  }
}",0.993234100135318
45784,"@Override public final void destroy(){
  if (preDestroy()) {
    onDestroy();
    ClientMessage clientMessage=ClientDestroyProxyCodec.encodeRequest(getDistributedObjectName(),getServiceName());
    getContext().getProxyManager().removeProxy(getServiceName(),getDistributedObjectName());
    try {
      new ClientInvocation(getClient(),clientMessage,getName()).invoke().get();
      postDestroy();
    }
 catch (    Exception e) {
      throw rethrow(e);
    }
  }
}","@Override public final void destroy(){
  getContext().getProxyManager().destroyProxy(this);
}",0.3112701252236136
45785,"@Test public void testWithMultipleNodes_clientReconnectsToNewNode(){
  ClientConfig clientConfig=createClientConfig();
  Config config=createNodeConfig();
  HazelcastInstance firstInstance=factory.newHazelcastInstance(config);
  HazelcastInstance client=factory.newHazelcastClient(clientConfig);
  factory.newHazelcastInstance(config);
  firstInstance.getLifecycleService().shutdown();
  assertCodeDeploymentWorking(client,new IncrementingEntryProcessor());
}","@Test public void testWithMultipleNodes_clientReconnectsToNewNode(){
  ClientConfig clientConfig=createClientConfig();
  Config config=createNodeConfig();
  HazelcastInstance firstInstance=factory.newHazelcastInstance(config);
  HazelcastInstance client=factory.newHazelcastClient(clientConfig);
  factory.newHazelcastInstance(config);
  final CountDownLatch clientReconnectedLatch=new CountDownLatch(1);
  client.getLifecycleService().addLifecycleListener(new ClientReconnectionListener(clientReconnectedLatch));
  firstInstance.getLifecycleService().shutdown();
  assertOpenEventually(clientReconnectedLatch);
  assertCodeDeploymentWorking(client,new IncrementingEntryProcessor());
}",0.8024475524475524
45786,"void addMembersRemovedInNotJoinableState(Collection<MemberImpl> members){
  clusterServiceLock.lock();
  try {
    members.remove(clusterService.getLocalMember());
    MemberMap membersRemovedInNotJoinableState=membersRemovedInNotJoinableStateRef.get();
    membersRemovedInNotJoinableStateRef.set(MemberMap.cloneAdding(membersRemovedInNotJoinableState,members.toArray(new MemberImpl[0])));
  }
  finally {
    clusterServiceLock.unlock();
  }
}","void addMembersRemovedInNotJoinableState(Collection<MemberImpl> members){
  clusterServiceLock.lock();
  try {
    MemberMap m=membersRemovedInNotJoinableStateRef.get();
    m=MemberMap.cloneAdding(m,members.toArray(new MemberImpl[0]));
    m=MemberMap.cloneExcluding(m,clusterService.getLocalMember());
    membersRemovedInNotJoinableStateRef.set(m);
  }
  finally {
    clusterServiceLock.unlock();
  }
}",0.5217391304347826
45787,"void addMembersRemovedInNotJoinableState(Collection<MemberImpl> members){
  clusterServiceLock.lock();
  try {
    members.remove(clusterService.getLocalMember());
    MemberMap membersRemovedInNotJoinableState=membersRemovedInNotJoinableStateRef.get();
    membersRemovedInNotJoinableStateRef.set(MemberMap.cloneAdding(membersRemovedInNotJoinableState,members.toArray(new MemberImpl[0])));
  }
  finally {
    clusterServiceLock.unlock();
  }
}","void addMembersRemovedInNotJoinableState(Collection<MemberImpl> members){
  clusterServiceLock.lock();
  try {
    MemberMap m=membersRemovedInNotJoinableStateRef.get();
    m=MemberMap.cloneAdding(m,members.toArray(new MemberImpl[0]));
    m=MemberMap.cloneExcluding(m,clusterService.getLocalMember());
    membersRemovedInNotJoinableStateRef.set(m);
  }
  finally {
    clusterServiceLock.unlock();
  }
}",0.5217391304347826
45788,"/** 
 * Calculates and returns the expected maximum size of an evicted record-store when   {@link com.hazelcast.config.MaxSizeConfig.MaxSizePolicy#PER_NODE PER_NODE} max-size-policy is used.
 */
public double translatePerNodeSizeToRecordStoreSize(RecordStore recordStore){
}","/** 
 * Calculates and returns the expected maximum size of an evicted record-store when   {@link com.hazelcast.config.MaxSizeConfig.MaxSizePolicy#PER_NODE PER_NODE} max-size-policy is used.
 */
public double translatePerNodeSizeToRecordStoreSize(RecordStore recordStore){
  MapConfig mapConfig=recordStore.getMapContainer().getMapConfig();
  MaxSizeConfig maxSizeConfig=mapConfig.getMaxSizeConfig();
  NodeEngine nodeEngine=mapServiceContext.getNodeEngine();
  int configuredMaxSize=maxSizeConfig.getSize();
  int memberCount=nodeEngine.getClusterService().getSize(DATA_MEMBER_SELECTOR);
  int partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  double perNodeMaxRecordStoreSize=(1D * configuredMaxSize * memberCount / partitionCount);
  if (perNodeMaxRecordStoreSize < 1) {
    perNodeMaxRecordStoreSize=MIN_SANE_PER_PARTITION_SIZE;
    if (misconfiguredPerNodeMaxSizeWarningLogged.compareAndSet(false,true)) {
      int minMaxSize=(int)Math.ceil((1D * partitionCount / memberCount));
      int newSize=MIN_SANE_PER_PARTITION_SIZE * partitionCount / memberCount;
      logger.warning(format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",mapConfig.getName(),memberCount,partitionCount,minMaxSize,newSize));
    }
  }
  return perNodeMaxRecordStoreSize;
}",0.3512820512820512
45789,"@Test public void testWithMultipleNodes_clientReconnectsToNewNode(){
  ClientConfig clientConfig=createClientConfig();
  Config config=createNodeConfig();
  HazelcastInstance firstInstance=factory.newHazelcastInstance(config);
  HazelcastInstance client=factory.newHazelcastClient(clientConfig);
  factory.newHazelcastInstance(config);
  firstInstance.getLifecycleService().shutdown();
  assertCodeDeploymentWorking(client,new IncrementingEntryProcessor());
}","@Test public void testWithMultipleNodes_clientReconnectsToNewNode(){
  ClientConfig clientConfig=createClientConfig();
  Config config=createNodeConfig();
  HazelcastInstance firstInstance=factory.newHazelcastInstance(config);
  HazelcastInstance client=factory.newHazelcastClient(clientConfig);
  factory.newHazelcastInstance(config);
  final CountDownLatch clientReconnectedLatch=new CountDownLatch(1);
  client.getLifecycleService().addLifecycleListener(new ClientReconnectionListener(clientReconnectedLatch));
  firstInstance.getLifecycleService().shutdown();
  assertOpenEventually(clientReconnectedLatch);
  assertCodeDeploymentWorking(client,new IncrementingEntryProcessor());
}",0.8024475524475524
45790,"public void delete(Data dataKey){
  multiMapValues.remove(dataKey);
}","public boolean delete(Data dataKey){
  return multiMapValues.remove(dataKey) != null;
}",0.8461538461538461
45791,"public MultiMapContainer getOrCreateMultiMapContainer(String name){
  MultiMapContainer container=ConcurrencyUtil.getOrPutIfAbsent(containerMap,name,containerConstructor);
  container.access();
  return container;
}","public MultiMapContainer getOrCreateMultiMapContainer(String name,boolean isAccess){
  MultiMapContainer container=ConcurrencyUtil.getOrPutIfAbsent(containerMap,name,containerConstructor);
  if (isAccess) {
    container.access();
  }
  return container;
}",0.9129511677282378
45792,"@Override public void beforeRun() throws Exception {
  MultiMapContainer container=getOrCreateContainer();
  shouldBackup=container.size() > 0;
}","@Override public void beforeRun() throws Exception {
  container=getOrCreateContainer();
  shouldBackup=container.size() > 0;
}",0.9338235294117648
45793,"@Override public void run() throws Exception {
  MultiMapContainer container=getOrCreateContainer();
  response=container.clear();
}","@Override public void run() throws Exception {
  container=getOrCreateContainer();
  response=container.clear();
}",0.926829268292683
45794,"@Override public void afterRun() throws Exception {
  ((MultiMapService)getService()).getLocalMultiMapStatsImpl(name).incrementOtherOperations();
}","@Override public void afterRun() throws Exception {
  ((MultiMapService)getService()).getLocalMultiMapStatsImpl(name).incrementOtherOperations();
  if (shouldBackup) {
    container.update();
  }
}",0.8546511627906976
45795,"@Override public void run() throws Exception {
  delete();
  shouldBackup=true;
}","@Override public void run() throws Exception {
  if (delete()) {
    getOrCreateContainer().update();
  }
  shouldBackup=true;
}",0.7751196172248804
45796,"@Override public boolean shouldWait(){
  MultiMapContainer container=getOrCreateContainer();
  if (container.isTransactionallyLocked(dataKey)) {
    return !container.canAcquireLock(dataKey,getCallerUuid(),getThreadId());
  }
  return false;
}","@Override public boolean shouldWait(){
  MultiMapContainer container=getOrCreateContainer();
  if (container.isTransactionallyLocked(dataKey)) {
    return !container.canAcquireLock(dataKey,getCallerUuid(),threadId);
  }
  return false;
}",0.9854469854469856
45797,"@Override public void run() throws Exception {
  MultiMapContainer container=getOrCreateContainer();
  resultMap=createHashMap(mergeContainers.size());
  for (  MultiMapMergeContainer mergeContainer : mergeContainers) {
    Data key=mergeContainer.getKey();
    if (!container.canAcquireLock(key,getCallerUuid(),-1)) {
      Object valueKey=getNodeEngine().getSerializationService().toObject(key);
      getLogger().info(""String_Node_Str"" + valueKey + ""String_Node_Str""+ name+ ""String_Node_Str"");
      continue;
    }
    MergingEntry<Data,MultiMapMergeContainer> mergingEntry=createMergingEntry(getNodeEngine().getSerializationService(),key,mergeContainer);
    MultiMapValue result=container.merge(mergingEntry,mergePolicy);
    if (result != null) {
      resultMap.put(key,result.getCollection(false));
      publishEvent(EntryEventType.MERGED,key,result,null);
    }
  }
  response=!resultMap.isEmpty();
}","@Override public void run() throws Exception {
  MultiMapContainer container=getOrCreateContainerWithoutAccess();
  resultMap=createHashMap(mergeContainers.size());
  for (  MultiMapMergeContainer mergeContainer : mergeContainers) {
    Data key=mergeContainer.getKey();
    if (!container.canAcquireLock(key,getCallerUuid(),-1)) {
      Object valueKey=getNodeEngine().getSerializationService().toObject(key);
      getLogger().info(""String_Node_Str"" + valueKey + ""String_Node_Str""+ name+ ""String_Node_Str"");
      continue;
    }
    MergingEntry<Data,MultiMapMergeContainer> mergingEntry=createMergingEntry(getNodeEngine().getSerializationService(),key,mergeContainer);
    MultiMapValue result=container.merge(mergingEntry,mergePolicy);
    if (result != null) {
      resultMap.put(key,result.getCollection(false));
      publishEvent(EntryEventType.MERGED,key,result,null);
    }
  }
  response=!resultMap.isEmpty();
}",0.99291553133515
45798,"@Override public void afterRun() throws Exception {
  if (Boolean.TRUE.equals(response)) {
    publishEvent(EntryEventType.ADDED,dataKey,value,null);
  }
}","@Override public void afterRun() throws Exception {
  if (Boolean.TRUE.equals(response)) {
    getOrCreateContainer().update();
    publishEvent(EntryEventType.ADDED,dataKey,value,null);
  }
}",0.8933717579250721
45799,"@Override public Operation newPrepareOperation(){
  return new TxnPrepareOperation(partitionId,name,key,ttl,threadId);
}","@Override public Operation newPrepareOperation(){
  return new TxnPrepareOperation(partitionId,name,key,threadId);
}",0.9830508474576272
45800,"@Test(timeout=60000) public void testSignalWithMultipleWaiters() throws InterruptedException {
  ILock lock=callerInstance.getLock(newName());
  ICondition condition=lock.newCondition(newName());
  CountDownLatch allAwaited=new CountDownLatch(3);
  CountDownLatch allSignalled=new CountDownLatch(10);
  startThreadWaitingOnCondition(lock,condition,allAwaited,allSignalled);
  startThreadWaitingOnCondition(lock,condition,allAwaited,allSignalled);
  startThreadWaitingOnCondition(lock,condition,allAwaited,allSignalled);
  assertOpenEventually(""String_Node_Str"",allAwaited);
  signal(lock,condition);
  assertCountEventually(""String_Node_Str"",9,allSignalled,THIRTY_SECONDS);
  assertFalse(lock.isLocked());
}","@Test public void testSignalWithMultipleWaiters(){
  final ILock lock=callerInstance.getLock(newName());
  ICondition condition=lock.newCondition(newName());
  CountDownLatch allAwaited=new CountDownLatch(3);
  CountDownLatch allSignalled=new CountDownLatch(10);
  startThreadWaitingOnCondition(lock,condition,allAwaited,allSignalled);
  startThreadWaitingOnCondition(lock,condition,allAwaited,allSignalled);
  startThreadWaitingOnCondition(lock,condition,allAwaited,allSignalled);
  assertOpenEventually(""String_Node_Str"",allAwaited);
  signal(lock,condition);
  assertCountEventually(""String_Node_Str"",9,allSignalled,THIRTY_SECONDS);
  assertTrueEventually(new AssertTask(){
    @Override public void run(){
      assertFalse(lock.isLocked());
    }
  }
);
}",0.9038854805725972
45801,"@Test(timeout=60000) public void testSignalWithMultipleWaiters() throws InterruptedException {
  ILock lock=callerInstance.getLock(newName());
  ICondition condition=lock.newCondition(newName());
  CountDownLatch allAwaited=new CountDownLatch(3);
  CountDownLatch allSignalled=new CountDownLatch(10);
  startThreadWaitingOnCondition(lock,condition,allAwaited,allSignalled);
  startThreadWaitingOnCondition(lock,condition,allAwaited,allSignalled);
  startThreadWaitingOnCondition(lock,condition,allAwaited,allSignalled);
  assertOpenEventually(""String_Node_Str"",allAwaited);
  signal(lock,condition);
  assertCountEventually(""String_Node_Str"",9,allSignalled,THIRTY_SECONDS);
  assertFalse(lock.isLocked());
}","@Test public void testSignalWithMultipleWaiters(){
  final ILock lock=callerInstance.getLock(newName());
  ICondition condition=lock.newCondition(newName());
  CountDownLatch allAwaited=new CountDownLatch(3);
  CountDownLatch allSignalled=new CountDownLatch(10);
  startThreadWaitingOnCondition(lock,condition,allAwaited,allSignalled);
  startThreadWaitingOnCondition(lock,condition,allAwaited,allSignalled);
  startThreadWaitingOnCondition(lock,condition,allAwaited,allSignalled);
  assertOpenEventually(""String_Node_Str"",allAwaited);
  signal(lock,condition);
  assertCountEventually(""String_Node_Str"",9,allSignalled,THIRTY_SECONDS);
  assertTrueEventually(new AssertTask(){
    @Override public void run(){
      assertFalse(lock.isLocked());
    }
  }
);
}",0.9038854805725972
45802,"private boolean trySetRemoveOnCancelPolicy(){
  try {
    Method method=ScheduledThreadPoolExecutor.class.getMethod(""String_Node_Str"",Boolean.TYPE);
    method.invoke(this,true);
    return true;
  }
 catch (  Exception e) {
    return false;
  }
}","@SuppressFBWarnings(""String_Node_Str"") private boolean trySetRemoveOnCancelPolicy(){
  try {
    Method method=ScheduledThreadPoolExecutor.class.getMethod(""String_Node_Str"",Boolean.TYPE);
    method.invoke(this,true);
    return true;
  }
 catch (  Exception e) {
    return false;
  }
}",0.9271028037383178
45803,"@Test(expected=HazelcastClientNotActiveException.class) public void testExceptionAfterClientShutdown() throws Exception {
  hazelcastFactory.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(1);
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  IMap<Object,Object> test=client.getMap(""String_Node_Str"");
  test.put(""String_Node_Str"",""String_Node_Str"");
  client.shutdown();
  System.gc();
  test.get(""String_Node_Str"");
}","@Test(expected=HazelcastClientNotActiveException.class) public void testExceptionAfterClientShutdown() throws Exception {
  hazelcastFactory.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  IMap<Object,Object> test=client.getMap(""String_Node_Str"");
  test.put(""String_Node_Str"",""String_Node_Str"");
  client.shutdown();
  System.gc();
  test.get(""String_Node_Str"");
}",0.936127744510978
45804,"@Test public void testClientConnected_withFirstAuthenticationRetried() throws InterruptedException {
  SerializationConfig serializationConfig=new SerializationConfig();
  serializationConfig.addPortableFactory(1,new PortableFactory(){
    @Override public Portable create(    int classId){
      return new CustomCredentials_retried();
    }
  }
);
  Config config=new Config();
  config.setSerializationConfig(serializationConfig);
  hazelcastFactory.newHazelcastInstance(config);
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(1);
  clientConfig.setCredentials(new CustomCredentials_retried(""String_Node_Str"",""String_Node_Str""));
  clientConfig.setSerializationConfig(serializationConfig);
  hazelcastFactory.newHazelcastClient(clientConfig);
}","@Test public void testClientConnected_withFirstAuthenticationRetried() throws InterruptedException {
  SerializationConfig serializationConfig=new SerializationConfig();
  serializationConfig.addPortableFactory(1,new PortableFactory(){
    @Override public Portable create(    int classId){
      return new CustomCredentials_retried();
    }
  }
);
  Config config=new Config();
  config.setSerializationConfig(serializationConfig);
  hazelcastFactory.newHazelcastInstance(config);
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setConnectionTimeout(30000);
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(1);
  clientConfig.setCredentials(new CustomCredentials_retried(""String_Node_Str"",""String_Node_Str""));
  clientConfig.setSerializationConfig(serializationConfig);
  hazelcastFactory.newHazelcastClient(clientConfig);
}",0.9624776652769506
45805,"@Override public void run(){
  responses=new MapEntries(recordStore.size());
  EntryOperator operator=operator(this,backupProcessor,getPredicate());
  Iterator<Record> iterator=recordStore.iterator(Clock.currentTimeMillis(),true);
  while (iterator.hasNext()) {
    Record record=iterator.next();
    operator.operateOnKey(record.getKey()).doPostOperateOps();
  }
}","@Override public void run(){
  EntryOperator operator=operator(this,backupProcessor,getPredicate());
  Iterator<Record> iterator=recordStore.iterator(Clock.currentTimeMillis(),true);
  while (iterator.hasNext()) {
    Record record=iterator.next();
    operator.operateOnKey(record.getKey()).doPostOperateOps();
  }
}",0.9296187683284456
45806,"@Test(expected=HazelcastClientNotActiveException.class) public void testExceptionAfterClientShutdown() throws Exception {
  hazelcastFactory.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(1);
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  IMap<Object,Object> test=client.getMap(""String_Node_Str"");
  test.put(""String_Node_Str"",""String_Node_Str"");
  client.shutdown();
  System.gc();
  test.get(""String_Node_Str"");
}","@Test(expected=HazelcastClientNotActiveException.class) public void testExceptionAfterClientShutdown() throws Exception {
  hazelcastFactory.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  IMap<Object,Object> test=client.getMap(""String_Node_Str"");
  test.put(""String_Node_Str"",""String_Node_Str"");
  client.shutdown();
  System.gc();
  test.get(""String_Node_Str"");
}",0.936127744510978
45807,"@Test public void testClientConnected_withFirstAuthenticationRetried() throws InterruptedException {
  SerializationConfig serializationConfig=new SerializationConfig();
  serializationConfig.addPortableFactory(1,new PortableFactory(){
    @Override public Portable create(    int classId){
      return new CustomCredentials_retried();
    }
  }
);
  Config config=new Config();
  config.setSerializationConfig(serializationConfig);
  hazelcastFactory.newHazelcastInstance(config);
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(1);
  clientConfig.setCredentials(new CustomCredentials_retried(""String_Node_Str"",""String_Node_Str""));
  clientConfig.setSerializationConfig(serializationConfig);
  hazelcastFactory.newHazelcastClient(clientConfig);
}","@Test public void testClientConnected_withFirstAuthenticationRetried() throws InterruptedException {
  SerializationConfig serializationConfig=new SerializationConfig();
  serializationConfig.addPortableFactory(1,new PortableFactory(){
    @Override public Portable create(    int classId){
      return new CustomCredentials_retried();
    }
  }
);
  Config config=new Config();
  config.setSerializationConfig(serializationConfig);
  hazelcastFactory.newHazelcastInstance(config);
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setConnectionTimeout(30000);
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(1);
  clientConfig.setCredentials(new CustomCredentials_retried(""String_Node_Str"",""String_Node_Str""));
  clientConfig.setSerializationConfig(serializationConfig);
  hazelcastFactory.newHazelcastClient(clientConfig);
}",0.9624776652769506
45808,"@Override public boolean cancel(boolean mayInterruptIfRunning){
  boolean removeOnCancel=!executor.isShutdown() && this.removeOnCancel;
  boolean cancelled=delegate.cancel(mayInterruptIfRunning);
  if (cancelled && removeOnCancel) {
    executor.remove(this);
  }
  return cancelled;
}","@Override public boolean cancel(boolean mayInterruptIfRunning){
  boolean removeOnCancel=!executor.isShutdown();
  boolean cancelled=delegate.cancel(mayInterruptIfRunning);
  if (cancelled && removeOnCancel) {
    executor.remove(this);
  }
  return cancelled;
}",0.5374771480804388
45809,"public LoggingScheduledExecutor(ILogger logger,int corePoolSize,ThreadFactory threadFactory,boolean removeOnCancel,RejectedExecutionHandler handler){
  super(corePoolSize,threadFactory,handler);
  this.logger=checkNotNull(logger,""String_Node_Str"");
  this.removeOnCancel=removeOnCancel;
}","public LoggingScheduledExecutor(ILogger logger,int corePoolSize,ThreadFactory threadFactory,boolean removeOnCancel,RejectedExecutionHandler handler){
  super(corePoolSize,threadFactory,handler);
  this.logger=checkNotNull(logger,""String_Node_Str"");
  this.manualRemoveOnCancel=manualRemoveOnCancel(removeOnCancel);
}",0.9470198675496688
45810,"@Override protected <V>RunnableScheduledFuture<V> decorateTask(Callable<V> callable,RunnableScheduledFuture<V> task){
  return new LoggingDelegatingFuture<V>(callable,task,this,removeOnCancel);
}","@Override protected <V>RunnableScheduledFuture<V> decorateTask(Callable<V> callable,RunnableScheduledFuture<V> task){
  if (!manualRemoveOnCancel) {
    return super.decorateTask(callable,task);
  }
  return new RemoveOnCancelFuture<V>(callable,task,this);
}",0.7196467991169978
45811,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof LoggingDelegatingFuture)) {
    return false;
  }
  LoggingDelegatingFuture<?> that=(LoggingDelegatingFuture<?>)o;
  return delegate.equals(that.delegate);
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof RemoveOnCancelFuture)) {
    return false;
  }
  RemoveOnCancelFuture<?> that=(RemoveOnCancelFuture<?>)o;
  return delegate.equals(that.delegate);
}",0.8187134502923976
45812,"@Test public void logsExecutionException_withRunnable(){
  executor=new LoggingScheduledExecutor(logger,1,factory);
  executor.submit(new FailedRunnable());
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertInstanceOf(RuntimeException.class,logger.getThrowable());
      String message=logger.getMessage();
      assertTrue(""String_Node_Str"" + message + ""String_Node_Str"",message.contains(""String_Node_Str""));
      Level level=logger.getLevel();
      assertEquals(SEVERE,level);
    }
  }
);
}","@Test public void logsExecutionException_withRunnable(){
  executor=new LoggingScheduledExecutor(logger,1,factory);
  executor.manualRemoveOnCancel=true;
  executor.submit(new FailedRunnable());
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      assertInstanceOf(RuntimeException.class,logger.getThrowable());
      String message=logger.getMessage();
      assertTrue(""String_Node_Str"" + message + ""String_Node_Str"",message.contains(""String_Node_Str""));
      Level level=logger.getLevel();
      assertEquals(SEVERE,level);
    }
  }
);
}",0.966549295774648
45813,"private boolean checkIfJoinRequestFromAnExistingMember(JoinMessage joinMessage,Connection connection){
  Address target=joinMessage.getAddress();
  MemberImpl member=clusterService.getMember(target);
  if (member == null) {
    return checkIfUsingAnExistingMemberUuid(joinMessage);
  }
  if (joinMessage.getUuid().equals(member.getUuid())) {
    sendMasterAnswer(target);
    if (clusterService.isMaster() && !isMastershipClaimInProgress()) {
      if (logger.isFineEnabled()) {
        logger.fine(format(""String_Node_Str"",joinMessage));
      }
      OnJoinOp preJoinOp=preparePreJoinOps();
      OnJoinOp postJoinOp=preparePostJoinOp();
      PartitionRuntimeState partitionRuntimeState=node.getPartitionService().createPartitionState();
      Operation op=new FinalizeJoinOp(member.getUuid(),clusterService.getMembershipManager().getMembersView(),preJoinOp,postJoinOp,clusterClock.getClusterTime(),clusterService.getClusterId(),clusterClock.getClusterStartTime(),clusterStateManager.getState(),clusterService.getClusterVersion(),partitionRuntimeState,false);
      op.setCallerUuid(clusterService.getThisUuid());
      nodeEngine.getOperationService().send(op,target);
    }
    return true;
  }
  if (clusterService.isMaster() || target.equals(clusterService.getMasterAddress())) {
    String msg=format(""String_Node_Str"" + ""String_Node_Str"",member);
    logger.warning(msg);
    clusterService.suspectMember(member,msg,false);
    Connection existing=node.connectionManager.getConnection(target);
    if (existing != connection) {
      if (existing != null) {
        existing.close(msg,null);
      }
      node.connectionManager.registerConnection(target,connection);
    }
  }
  return true;
}","private boolean checkIfJoinRequestFromAnExistingMember(JoinMessage joinMessage,Connection connection){
  Address target=joinMessage.getAddress();
  MemberImpl member=clusterService.getMember(target);
  if (member == null) {
    return checkIfUsingAnExistingMemberUuid(joinMessage);
  }
  if (joinMessage.getUuid().equals(member.getUuid())) {
    sendMasterAnswer(target);
    if (clusterService.isMaster() && !isMastershipClaimInProgress()) {
      if (logger.isFineEnabled()) {
        logger.fine(format(""String_Node_Str"",joinMessage));
      }
      OnJoinOp preJoinOp=preparePreJoinOps();
      OnJoinOp postJoinOp=preparePostJoinOp();
      PartitionRuntimeState partitionRuntimeState=node.getPartitionService().createPartitionState();
      Operation op=new FinalizeJoinOp(member.getUuid(),clusterService.getMembershipManager().getMembersView(),preJoinOp,postJoinOp,clusterClock.getClusterTime(),clusterService.getClusterId(),clusterClock.getClusterStartTime(),clusterStateManager.getState(),clusterService.getClusterVersion(),partitionRuntimeState,false);
      op.setCallerUuid(clusterService.getThisUuid());
      invokeClusterOp(op,target);
    }
    return true;
  }
  if (clusterService.isMaster() || target.equals(clusterService.getMasterAddress())) {
    String msg=format(""String_Node_Str"" + ""String_Node_Str"",member);
    logger.warning(msg);
    clusterService.suspectMember(member,msg,false);
    Connection existing=node.connectionManager.getConnection(target);
    if (existing != connection) {
      if (existing != null) {
        existing.close(msg,null);
      }
      node.connectionManager.registerConnection(target,connection);
    }
  }
  return true;
}",0.9858156028368794
45814,"/** 
 * Returns a   {@link MapService} object by populating it with requiredauxiliary services.
 * @return {@link MapService} object
 */
@Override public MapService createMapService(){
  NodeEngine nodeEngine=getNodeEngine();
  MapServiceContext mapServiceContext=getMapServiceContext();
  ManagedService managedService=createManagedService();
  CountingMigrationAwareService migrationAwareService=createMigrationAwareService();
  TransactionalService transactionalService=createTransactionalService();
  RemoteService remoteService=createRemoteService();
  EventPublishingService eventPublishingService=createEventPublishingService();
  PostJoinAwareService postJoinAwareService=createPostJoinAwareService();
  SplitBrainHandlerService splitBrainHandlerService=createSplitBrainHandlerService();
  ReplicationSupportingService replicationSupportingService=createReplicationSupportingService();
  StatisticsAwareService statisticsAwareService=createStatisticsAwareService();
  PartitionAwareService partitionAwareService=createPartitionAwareService();
  MapQuorumAwareService quorumAwareService=createQuorumAwareService();
  ClientAwareService clientAwareService=createClientAwareService();
  checkNotNull(nodeEngine,""String_Node_Str"");
  checkNotNull(mapServiceContext,""String_Node_Str"");
  checkNotNull(managedService,""String_Node_Str"");
  checkNotNull(migrationAwareService,""String_Node_Str"");
  checkNotNull(transactionalService,""String_Node_Str"");
  checkNotNull(remoteService,""String_Node_Str"");
  checkNotNull(eventPublishingService,""String_Node_Str"");
  checkNotNull(postJoinAwareService,""String_Node_Str"");
  checkNotNull(splitBrainHandlerService,""String_Node_Str"");
  checkNotNull(replicationSupportingService,""String_Node_Str"");
  checkNotNull(statisticsAwareService,""String_Node_Str"");
  checkNotNull(partitionAwareService,""String_Node_Str"");
  checkNotNull(quorumAwareService,""String_Node_Str"");
  checkNotNull(clientAwareService,""String_Node_Str"");
  MapService mapService=new MapService();
  mapService.managedService=managedService;
  mapService.migrationAwareService=migrationAwareService;
  mapService.transactionalService=transactionalService;
  mapService.remoteService=remoteService;
  mapService.eventPublishingService=eventPublishingService;
  mapService.postJoinAwareService=postJoinAwareService;
  mapService.splitBrainHandlerService=splitBrainHandlerService;
  mapService.replicationSupportingService=replicationSupportingService;
  mapService.statisticsAwareService=statisticsAwareService;
  mapService.mapServiceContext=mapServiceContext;
  mapService.partitionAwareService=partitionAwareService;
  mapService.quorumAwareService=quorumAwareService;
  mapService.clientAwareService=clientAwareService;
  mapServiceContext.setService(mapService);
  return mapService;
}","/** 
 * Returns a   {@link MapService} object by populating it with requiredauxiliary services.
 * @return {@link MapService} object
 */
@Override public MapService createMapService(){
  NodeEngine nodeEngine=getNodeEngine();
  MapServiceContext mapServiceContext=getMapServiceContext();
  ManagedService managedService=createManagedService();
  CountingMigrationAwareService migrationAwareService=createMigrationAwareService();
  TransactionalService transactionalService=createTransactionalService();
  RemoteService remoteService=createRemoteService();
  EventPublishingService eventPublishingService=createEventPublishingService();
  PostJoinAwareService postJoinAwareService=createPostJoinAwareService();
  SplitBrainHandlerService splitBrainHandlerService=createSplitBrainHandlerService();
  ReplicationSupportingService replicationSupportingService=createReplicationSupportingService();
  StatisticsAwareService statisticsAwareService=createStatisticsAwareService();
  PartitionAwareService partitionAwareService=createPartitionAwareService();
  MapQuorumAwareService quorumAwareService=createQuorumAwareService();
  ClientAwareService clientAwareService=createClientAwareService();
  checkNotNull(nodeEngine,""String_Node_Str"");
  checkNotNull(mapServiceContext,""String_Node_Str"");
  checkNotNull(managedService,""String_Node_Str"");
  checkNotNull(migrationAwareService,""String_Node_Str"");
  checkNotNull(transactionalService,""String_Node_Str"");
  checkNotNull(remoteService,""String_Node_Str"");
  checkNotNull(eventPublishingService,""String_Node_Str"");
  checkNotNull(postJoinAwareService,""String_Node_Str"");
  checkNotNull(splitBrainHandlerService,""String_Node_Str"");
  checkNotNull(replicationSupportingService,""String_Node_Str"");
  checkNotNull(statisticsAwareService,""String_Node_Str"");
  checkNotNull(partitionAwareService,""String_Node_Str"");
  checkNotNull(quorumAwareService,""String_Node_Str"");
  checkNotNull(clientAwareService,""String_Node_Str"");
  MapService mapService=new MapService();
  mapService.managedService=managedService;
  mapService.migrationAwareService=migrationAwareService;
  mapService.transactionalService=transactionalService;
  mapService.remoteService=remoteService;
  mapService.eventPublishingService=eventPublishingService;
  mapService.postJoinAwareService=postJoinAwareService;
  mapService.splitBrainHandlerService=splitBrainHandlerService;
  mapService.replicationSupportingService=replicationSupportingService;
  mapService.statisticsAwareService=statisticsAwareService;
  mapService.mapServiceContext=mapServiceContext;
  mapService.partitionAwareService=partitionAwareService;
  mapService.quorumAwareService=quorumAwareService;
  mapService.clientAwareService=clientAwareService;
  mapService.mapIndexSynchronizer=new MapIndexSynchronizer(mapServiceContext,nodeEngine);
  mapServiceContext.setService(mapService);
  return mapService;
}",0.9841493483620992
45815,"public void onDestroy(){
}","public void onDestroy(){
  partitionIndexesToAdd.clear();
}",0.611764705882353
45816,"private static Long get(OperatingSystemMXBean mbean,String methodName,Long defaultValue){
  try {
    Method method=mbean.getClass().getMethod(methodName);
    method.setAccessible(true);
    Object value=method.invoke(mbean);
    if (value instanceof Integer) {
      return (long)(Integer)value;
    }
    if (value instanceof Double) {
      double v=(Double)value;
      return Math.round(v * PERCENT_MULTIPLIER);
    }
    if (value instanceof Long) {
      return (Long)value;
    }
    return defaultValue;
  }
 catch (  Exception e) {
    return defaultValue;
  }
}","private static Long get(OperatingSystemMXBean mbean,String methodName,Long defaultValue){
  try {
    Method method=mbean.getClass().getMethod(methodName);
    method.setAccessible(true);
    Object value=method.invoke(mbean);
    if (value instanceof Integer) {
      return (long)(Integer)value;
    }
    if (value instanceof Double) {
      double v=(Double)value;
      return Math.round(v * PERCENT_MULTIPLIER);
    }
    if (value instanceof Long) {
      return (Long)value;
    }
    return defaultValue;
  }
 catch (  RuntimeException e) {
    return defaultValue;
  }
catch (  Exception e) {
    return defaultValue;
  }
}",0.9502487562189056
45817,"@Override public void init(NodeEngine nodeEngine,Properties properties){
  this.nodeEngine=nodeEngine;
  this.mergePolicyProvider=nodeEngine.getSplitBrainMergePolicyProvider();
}","@Override public void init(NodeEngine nodeEngine,Properties properties){
  this.nodeEngine=nodeEngine;
}",0.7375886524822695
45818,"Merger(Map<String,CardinalityEstimatorContainer> snapshot){
  this.snapshot=snapshot;
}","Merger(CardinalityEstimatorContainerCollector collector){
  super(collector,nodeEngine);
}",0.5649717514124294
45819,"@Override public Runnable prepareMergeRunnable(){
  Map<String,CardinalityEstimatorContainer> state=new HashMap<String,CardinalityEstimatorContainer>();
  for (  Map.Entry<String,CardinalityEstimatorContainer> entry : containers.entrySet()) {
    SplitBrainMergePolicy mergePolicy=getMergePolicy(entry.getKey());
    int partition=getPartitionId(entry.getKey());
    if (nodeEngine.getPartitionService().isPartitionOwner(partition) && !(mergePolicy instanceof DiscardMergePolicy)) {
      state.put(entry.getKey(),entry.getValue());
    }
  }
  return new Merger(state);
}","@Override public Runnable prepareMergeRunnable(){
  CardinalityEstimatorContainerCollector collector=new CardinalityEstimatorContainerCollector(nodeEngine,containers);
  collector.run();
  return new Merger(collector);
}",0.3207070707070707
45820,"private void addOSInfo(PhoneHomeParameterCreator parameterCreator){
  OperatingSystemMXBean osMxBean=ManagementFactory.getOperatingSystemMXBean();
  try {
    parameterCreator.addParam(""String_Node_Str"",osMxBean.getName());
    parameterCreator.addParam(""String_Node_Str"",osMxBean.getArch());
    parameterCreator.addParam(""String_Node_Str"",osMxBean.getVersion());
  }
 catch (  SecurityException e) {
    parameterCreator.addParam(""String_Node_Str"",""String_Node_Str"");
    parameterCreator.addParam(""String_Node_Str"",""String_Node_Str"");
    parameterCreator.addParam(""String_Node_Str"",""String_Node_Str"");
  }
}","private void addOSInfo(PhoneHomeParameterCreator parameterCreator){
  OperatingSystemMXBean osMxBean=ManagementFactory.getOperatingSystemMXBean();
  try {
    parameterCreator.addParam(""String_Node_Str"",osMxBean.getName()).addParam(""String_Node_Str"",osMxBean.getArch()).addParam(""String_Node_Str"",osMxBean.getVersion());
  }
 catch (  SecurityException e) {
    parameterCreator.addParam(""String_Node_Str"",""String_Node_Str"").addParam(""String_Node_Str"",""String_Node_Str"").addParam(""String_Node_Str"",""String_Node_Str"");
  }
}",0.7601410934744268
45821,"public Map<String,String> phoneHome(Node hazelcastNode,String version,boolean isEnterprise){
  String downloadId=""String_Node_Str"";
  InputStream is=null;
  try {
    is=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
    if (is != null) {
      final Properties properties=new Properties();
      properties.load(is);
      downloadId=properties.getProperty(""String_Node_Str"");
    }
  }
 catch (  IOException ignored) {
    ignore(ignored);
  }
 finally {
    closeResource(is);
  }
  NativeMemoryConfig memoryConfig=hazelcastNode.getConfig().getNativeMemoryConfig();
  final ClusterServiceImpl clusterService=hazelcastNode.getClusterService();
  long totalNativeMemorySize=clusterService.getSize(DATA_MEMBER_SELECTOR) * memoryConfig.getSize().bytes();
  String nativeMemoryParameter=(isEnterprise) ? Long.toString(MemoryUnit.BYTES.toGigaBytes(totalNativeMemorySize)) : ""String_Node_Str"";
  RuntimeMXBean runtimeMxBean=ManagementFactory.getRuntimeMXBean();
  Long clusterUpTime=clusterService.getClusterClock().getClusterUpTime();
  int clusterSize=clusterService.getMembers().size();
  PhoneHomeParameterCreator parameterCreator=new PhoneHomeParameterCreator();
  parameterCreator.addParam(""String_Node_Str"",version);
  parameterCreator.addParam(""String_Node_Str"",hazelcastNode.getThisUuid());
  parameterCreator.addParam(""String_Node_Str"",Boolean.toString(isEnterprise));
  String licenseKey=hazelcastNode.getConfig().getLicenseKey();
  parameterCreator.addParam(""String_Node_Str"",licenseKey == null ? ""String_Node_Str"" : MD5Util.toMD5String(licenseKey));
  parameterCreator.addParam(""String_Node_Str"",downloadId);
  parameterCreator.addParam(""String_Node_Str"",clusterService.getClusterId());
  parameterCreator.addParam(""String_Node_Str"",convertToLetter(clusterSize));
  parameterCreator.addParam(""String_Node_Str"",convertToLetter(hazelcastNode.clientEngine.getClientEndpointCount()));
  parameterCreator.addParam(""String_Node_Str"",nativeMemoryParameter);
  parameterCreator.addParam(""String_Node_Str"",Long.toString(clusterUpTime));
  parameterCreator.addParam(""String_Node_Str"",Long.toString(runtimeMxBean.getUptime()));
  parameterCreator.addParam(""String_Node_Str"",runtimeMxBean.getVmName());
  parameterCreator.addParam(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  JetBuildInfo jetBuildInfo=hazelcastNode.getBuildInfo().getJetBuildInfo();
  parameterCreator.addParam(""String_Node_Str"",jetBuildInfo == null ? ""String_Node_Str"" : jetBuildInfo.getVersion());
  addClientInfo(hazelcastNode,parameterCreator);
  addOSInfo(parameterCreator);
  boolean isManagementCenterConfigEnabled=hazelcastNode.config.getManagementCenterConfig().isEnabled();
  if (isManagementCenterConfigEnabled) {
    addManCenterInfo(hazelcastNode,clusterSize,parameterCreator);
  }
 else {
    parameterCreator.addParam(""String_Node_Str"",""String_Node_Str"");
    parameterCreator.addParam(""String_Node_Str"",""String_Node_Str"");
  }
  String urlStr=BASE_PHONE_HOME_URL + parameterCreator.build();
  fetchWebService(urlStr);
  return parameterCreator.getParameters();
}","public Map<String,String> phoneHome(Node hazelcastNode,String version,boolean isEnterprise){
  String downloadId=""String_Node_Str"";
  InputStream is=null;
  try {
    is=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
    if (is != null) {
      final Properties properties=new Properties();
      properties.load(is);
      downloadId=properties.getProperty(""String_Node_Str"");
    }
  }
 catch (  IOException ignored) {
    ignore(ignored);
  }
 finally {
    closeResource(is);
  }
  NativeMemoryConfig memoryConfig=hazelcastNode.getConfig().getNativeMemoryConfig();
  ClusterServiceImpl clusterService=hazelcastNode.getClusterService();
  long totalNativeMemorySize=clusterService.getSize(DATA_MEMBER_SELECTOR) * memoryConfig.getSize().bytes();
  String nativeMemoryParameter=(isEnterprise) ? Long.toString(MemoryUnit.BYTES.toGigaBytes(totalNativeMemorySize)) : ""String_Node_Str"";
  int clusterSize=clusterService.getMembers().size();
  Long clusterUpTime=clusterService.getClusterClock().getClusterUpTime();
  RuntimeMXBean runtimeMxBean=ManagementFactory.getRuntimeMXBean();
  String licenseKey=hazelcastNode.getConfig().getLicenseKey();
  JetBuildInfo jetBuildInfo=hazelcastNode.getBuildInfo().getJetBuildInfo();
  PhoneHomeParameterCreator parameterCreator=new PhoneHomeParameterCreator().addParam(""String_Node_Str"",version).addParam(""String_Node_Str"",hazelcastNode.getThisUuid()).addParam(""String_Node_Str"",Boolean.toString(isEnterprise)).addParam(""String_Node_Str"",licenseKey == null ? ""String_Node_Str"" : MD5Util.toMD5String(licenseKey)).addParam(""String_Node_Str"",downloadId).addParam(""String_Node_Str"",clusterService.getClusterId()).addParam(""String_Node_Str"",convertToLetter(clusterSize)).addParam(""String_Node_Str"",convertToLetter(hazelcastNode.clientEngine.getClientEndpointCount())).addParam(""String_Node_Str"",nativeMemoryParameter).addParam(""String_Node_Str"",Long.toString(clusterUpTime)).addParam(""String_Node_Str"",Long.toString(runtimeMxBean.getUptime())).addParam(""String_Node_Str"",runtimeMxBean.getVmName()).addParam(""String_Node_Str"",System.getProperty(""String_Node_Str"")).addParam(""String_Node_Str"",jetBuildInfo == null ? ""String_Node_Str"" : jetBuildInfo.getVersion());
  addClientInfo(hazelcastNode,parameterCreator);
  addOSInfo(parameterCreator);
  boolean isManagementCenterConfigEnabled=hazelcastNode.config.getManagementCenterConfig().isEnabled();
  if (isManagementCenterConfigEnabled) {
    addManCenterInfo(hazelcastNode,clusterSize,parameterCreator);
  }
 else {
    parameterCreator.addParam(""String_Node_Str"",""String_Node_Str"");
    parameterCreator.addParam(""String_Node_Str"",""String_Node_Str"");
  }
  String urlStr=BASE_PHONE_HOME_URL + parameterCreator.build();
  fetchWebService(urlStr);
  return parameterCreator.getParameters();
}",0.8051107325383305
45822,"public void check(final Node hazelcastNode,final String version,final boolean isEnterprise){
  ILogger logger=hazelcastNode.getLogger(PhoneHome.class);
  if (!hazelcastNode.getProperties().getBoolean(GroupProperty.VERSION_CHECK_ENABLED)) {
    logger.warning(GroupProperty.VERSION_CHECK_ENABLED.getName() + ""String_Node_Str"" + GroupProperty.PHONE_HOME_ENABLED.getName()+ ""String_Node_Str"");
    return;
  }
  if (!hazelcastNode.getProperties().getBoolean(GroupProperty.PHONE_HOME_ENABLED)) {
    return;
  }
  if (FALSE.equals(getenv(""String_Node_Str""))) {
    return;
  }
  try {
    hazelcastNode.nodeEngine.getExecutionService().scheduleWithRepetition(new Runnable(){
      public void run(){
        phoneHome(hazelcastNode,version,isEnterprise);
      }
    }
,0,1,TimeUnit.DAYS);
  }
 catch (  RejectedExecutionException e) {
    logger.warning(""String_Node_Str"");
  }
}","@SuppressWarnings(""String_Node_Str"") public void check(final Node hazelcastNode,final String version,final boolean isEnterprise){
  ILogger logger=hazelcastNode.getLogger(PhoneHome.class);
  if (!hazelcastNode.getProperties().getBoolean(GroupProperty.VERSION_CHECK_ENABLED)) {
    logger.warning(GroupProperty.VERSION_CHECK_ENABLED.getName() + ""String_Node_Str"" + GroupProperty.PHONE_HOME_ENABLED.getName()+ ""String_Node_Str"");
    return;
  }
  if (!hazelcastNode.getProperties().getBoolean(GroupProperty.PHONE_HOME_ENABLED)) {
    return;
  }
  if (FALSE.equals(getenv(""String_Node_Str""))) {
    return;
  }
  try {
    phoneHomeFuture=hazelcastNode.nodeEngine.getExecutionService().scheduleWithRepetition(""String_Node_Str"",new Runnable(){
      public void run(){
        phoneHome(hazelcastNode,version,isEnterprise);
      }
    }
,0,1,TimeUnit.DAYS);
  }
 catch (  RejectedExecutionException e) {
    logger.warning(""String_Node_Str"");
  }
}",0.9610532089961602
45823,"public PhoneHomeParameterCreator(){
  builder=new StringBuilder();
  builder.append(""String_Node_Str"");
}","PhoneHomeParameterCreator(){
  builder=new StringBuilder();
  builder.append(""String_Node_Str"");
}",0.9655172413793104
45824,"public String build(){
  return builder.toString();
}","String build(){
  return builder.toString();
}",0.9292929292929292
45825,"private void addManCenterInfo(Node hazelcastNode,int clusterSize,PhoneHomeParameterCreator parameterCreator){
  InputStreamReader reader=null;
  InputStream inputStream=null;
  int responseCode;
  String version;
  String license;
  try {
    ManagementCenterConfig managementCenterConfig=hazelcastNode.config.getManagementCenterConfig();
    String manCenterURL=managementCenterConfig.getUrl();
    manCenterURL=manCenterURL.endsWith(""String_Node_Str"") ? manCenterURL : manCenterURL + '/';
    URL manCenterPhoneHomeURL=new URL(manCenterURL + ""String_Node_Str"");
    ManagementCenterConnectionFactory connectionFactory=hazelcastNode.getNodeExtension().getManagementCenterConnectionFactory();
    HttpURLConnection connection;
    if (connectionFactory != null) {
      connectionFactory.init(managementCenterConfig.getMutualAuthConfig());
      connection=(HttpURLConnection)connectionFactory.openConnection(manCenterPhoneHomeURL);
    }
 else {
      connection=(HttpURLConnection)manCenterPhoneHomeURL.openConnection();
    }
    connection.setConnectTimeout(CONNECTION_TIMEOUT_MILLIS);
    connection.setReadTimeout(CONNECTION_TIMEOUT_MILLIS);
    inputStream=connection.getInputStream();
    responseCode=connection.getResponseCode();
    reader=new InputStreamReader(inputStream,""String_Node_Str"");
    JsonObject mcPhoneHomeInfoJson=JsonValue.readFrom(reader).asObject();
    version=JsonUtil.getString(mcPhoneHomeInfoJson,""String_Node_Str"");
    license=JsonUtil.getString(mcPhoneHomeInfoJson,""String_Node_Str"",null);
  }
 catch (  Exception ignored) {
    parameterCreator.addParam(""String_Node_Str"",""String_Node_Str"");
    parameterCreator.addParam(""String_Node_Str"",""String_Node_Str"");
    return;
  }
 finally {
    closeResource(reader);
    closeResource(inputStream);
  }
  if (responseCode == HttpURLConnection.HTTP_OK) {
    if (license == null) {
      checkClusterSizeAndSetLicense(clusterSize,parameterCreator);
    }
 else {
      parameterCreator.addParam(""String_Node_Str"",license);
    }
    parameterCreator.addParam(""String_Node_Str"",version);
  }
 else {
    parameterCreator.addParam(""String_Node_Str"",""String_Node_Str"" + responseCode);
    parameterCreator.addParam(""String_Node_Str"",""String_Node_Str"" + responseCode);
  }
}","private void addManCenterInfo(Node hazelcastNode,int clusterSize,PhoneHomeParameterCreator parameterCreator){
  int responseCode;
  String version;
  String license;
  InputStream inputStream=null;
  InputStreamReader reader=null;
  try {
    ManagementCenterConfig managementCenterConfig=hazelcastNode.config.getManagementCenterConfig();
    String manCenterURL=managementCenterConfig.getUrl();
    manCenterURL=manCenterURL.endsWith(""String_Node_Str"") ? manCenterURL : manCenterURL + '/';
    URL manCenterPhoneHomeURL=new URL(manCenterURL + ""String_Node_Str"");
    ManagementCenterConnectionFactory connectionFactory=hazelcastNode.getNodeExtension().getManagementCenterConnectionFactory();
    HttpURLConnection connection;
    if (connectionFactory != null) {
      connectionFactory.init(managementCenterConfig.getMutualAuthConfig());
      connection=(HttpURLConnection)connectionFactory.openConnection(manCenterPhoneHomeURL);
    }
 else {
      connection=(HttpURLConnection)manCenterPhoneHomeURL.openConnection();
    }
    connection.setConnectTimeout(CONNECTION_TIMEOUT_MILLIS);
    connection.setReadTimeout(CONNECTION_TIMEOUT_MILLIS);
    inputStream=connection.getInputStream();
    responseCode=connection.getResponseCode();
    reader=new InputStreamReader(inputStream,""String_Node_Str"");
    JsonObject mcPhoneHomeInfoJson=Json.parse(reader).asObject();
    version=getString(mcPhoneHomeInfoJson,""String_Node_Str"");
    license=getString(mcPhoneHomeInfoJson,""String_Node_Str"",null);
  }
 catch (  Exception ignored) {
    ignore(ignored);
    parameterCreator.addParam(""String_Node_Str"",""String_Node_Str"");
    parameterCreator.addParam(""String_Node_Str"",""String_Node_Str"");
    return;
  }
 finally {
    closeResource(reader);
    closeResource(inputStream);
  }
  if (responseCode == HttpURLConnection.HTTP_OK) {
    if (license == null) {
      checkClusterSizeAndSetLicense(clusterSize,parameterCreator);
    }
 else {
      parameterCreator.addParam(""String_Node_Str"",license);
    }
    parameterCreator.addParam(""String_Node_Str"",version);
  }
 else {
    parameterCreator.addParam(""String_Node_Str"",""String_Node_Str"" + responseCode);
    parameterCreator.addParam(""String_Node_Str"",""String_Node_Str"" + responseCode);
  }
}",0.9482337258387024
45826,"public PhoneHomeParameterCreator addParam(String key,String value){
  if (hasParameterBefore) {
    builder.append(""String_Node_Str"");
  }
 else {
    hasParameterBefore=true;
  }
  try {
    builder.append(key).append(""String_Node_Str"").append(URLEncoder.encode(value,""String_Node_Str""));
  }
 catch (  UnsupportedEncodingException e) {
    ExceptionUtil.rethrow(e);
  }
  parameters.put(key,value);
  return this;
}","PhoneHomeParameterCreator addParam(String key,String value){
  if (hasParameterBefore) {
    builder.append(""String_Node_Str"");
  }
 else {
    hasParameterBefore=true;
  }
  try {
    builder.append(key).append(""String_Node_Str"").append(URLEncoder.encode(value,""String_Node_Str""));
  }
 catch (  UnsupportedEncodingException e) {
    throw rethrow(e);
  }
  parameters.put(key,value);
  return this;
}",0.967032967032967
45827,"private void addClientInfo(Node hazelcastNode,PhoneHomeParameterCreator parameterCreator){
  Map<ClientType,Integer> clusterClientStats=hazelcastNode.clientEngine.getConnectedClientStats();
  parameterCreator.addParam(""String_Node_Str"",Integer.toString(clusterClientStats.get(ClientType.CPP)));
  parameterCreator.addParam(""String_Node_Str"",Integer.toString(clusterClientStats.get(ClientType.CSHARP)));
  parameterCreator.addParam(""String_Node_Str"",Integer.toString(clusterClientStats.get(ClientType.JAVA)));
  parameterCreator.addParam(""String_Node_Str"",Integer.toString(clusterClientStats.get(ClientType.NODEJS)));
  parameterCreator.addParam(""String_Node_Str"",Integer.toString(clusterClientStats.get(ClientType.PYTHON)));
}","private void addClientInfo(Node hazelcastNode,PhoneHomeParameterCreator parameterCreator){
  Map<ClientType,Integer> clusterClientStats=hazelcastNode.clientEngine.getConnectedClientStats();
  parameterCreator.addParam(""String_Node_Str"",Integer.toString(clusterClientStats.get(ClientType.CPP))).addParam(""String_Node_Str"",Integer.toString(clusterClientStats.get(ClientType.CSHARP))).addParam(""String_Node_Str"",Integer.toString(clusterClientStats.get(ClientType.JAVA))).addParam(""String_Node_Str"",Integer.toString(clusterClientStats.get(ClientType.NODEJS))).addParam(""String_Node_Str"",Integer.toString(clusterClientStats.get(ClientType.PYTHON)));
}",0.9416909620991254
45828,"public Map<String,String> getParameters(){
  return parameters;
}","Map<String,String> getParameters(){
  return parameters;
}",0.943089430894309
45829,"public void shutdown(){
}","public void shutdown(){
  if (phoneHomeFuture != null) {
    phoneHomeFuture.cancel(true);
  }
}",0.4132231404958678
45830,"@Test public void testPhoneHomeParameters() throws Exception {
  Node node1=TestUtil.getNode(hz1);
  PhoneHome phoneHome=new PhoneHome();
  sleepAtLeastMillis(1);
  Map<String,String> parameters=phoneHome.phoneHome(node1,""String_Node_Str"",false);
  RuntimeMXBean runtimeMxBean=ManagementFactory.getRuntimeMXBean();
  OperatingSystemMXBean osMxBean=ManagementFactory.getOperatingSystemMXBean();
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),node1.getLocalMember().getUuid());
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertFalse(Integer.parseInt(parameters.get(""String_Node_Str"")) < 0);
  assertNotEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertNotEquals(parameters.get(""String_Node_Str""),parameters.get(""String_Node_Str""));
  assertEquals(parameters.get(""String_Node_Str""),osMxBean.getName());
  assertEquals(parameters.get(""String_Node_Str""),osMxBean.getArch());
  assertEquals(parameters.get(""String_Node_Str""),osMxBean.getVersion());
  assertEquals(parameters.get(""String_Node_Str""),runtimeMxBean.getVmName());
  assertEquals(parameters.get(""String_Node_Str""),System.getProperty(""String_Node_Str""));
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
}","@Test public void testPhoneHomeParameters(){
  HazelcastInstance hz=createHazelcastInstance();
  Node node=getNode(hz);
  PhoneHome phoneHome=new PhoneHome();
  sleepAtLeastMillis(1);
  Map<String,String> parameters=phoneHome.phoneHome(node,""String_Node_Str"",false);
  RuntimeMXBean runtimeMxBean=ManagementFactory.getRuntimeMXBean();
  OperatingSystemMXBean osMxBean=ManagementFactory.getOperatingSystemMXBean();
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),node.getLocalMember().getUuid());
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertFalse(Integer.parseInt(parameters.get(""String_Node_Str"")) < 0);
  assertNotEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertNotEquals(parameters.get(""String_Node_Str""),parameters.get(""String_Node_Str""));
  assertEquals(parameters.get(""String_Node_Str""),osMxBean.getName());
  assertEquals(parameters.get(""String_Node_Str""),osMxBean.getArch());
  assertEquals(parameters.get(""String_Node_Str""),osMxBean.getVersion());
  assertEquals(parameters.get(""String_Node_Str""),runtimeMxBean.getVmName());
  assertEquals(parameters.get(""String_Node_Str""),System.getProperty(""String_Node_Str""));
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
  assertEquals(parameters.get(""String_Node_Str""),""String_Node_Str"");
}",0.9711876317638792
45831,"@Test public void testConvertToLetter() throws Exception {
  PhoneHome phoneHome=new PhoneHome();
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(4));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(9));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(19));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(39));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(59));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(99));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(149));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(299));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(599));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(1000));
}","@Test public void testConvertToLetter(){
  PhoneHome phoneHome=new PhoneHome();
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(4));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(9));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(19));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(39));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(59));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(99));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(149));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(299));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(599));
  assertEquals(""String_Node_Str"",phoneHome.convertToLetter(1000));
}",0.9878869448183042
45832,"@Override public void afterRun() throws Exception {
  LocalQueueStatsImpl queueStats=getQueueService().getLocalQueueStatsImpl(name);
  if (response == null) {
    queueStats.incrementEmptyPolls();
  }
 else {
    queueStats.incrementPolls();
    publishEvent(ItemEventType.REMOVED,data);
  }
}","@Override public void afterRun() throws Exception {
  LocalQueueStatsImpl queueStats=getQueueService().getLocalQueueStatsImpl(name);
  if (data == null) {
    queueStats.incrementEmptyPolls();
  }
 else {
    queueStats.incrementPolls();
    publishEvent(ItemEventType.REMOVED,data);
  }
}",0.979381443298969
45833,"@Override public void run(){
  while (!Thread.currentThread().isInterrupted()) {
    try {
      TransactionContext transactionContext=hazelcastInstance.newTransactionContext();
      transactionContext.beginTransaction();
      try {
        final Object item=transactionContext.getQueue(inQueueName).poll();
        if (item != null && !transactionContext.getQueue(outQueueName).offer(item)) {
          throw new RuntimeException(""String_Node_Str"");
        }
        transactionContext.commitTransaction();
        if (item != null) {
          counter.incrementAndGet();
        }
      }
 catch (      HazelcastInstanceNotActiveException e) {
        throw e;
      }
catch (      Exception e) {
        try {
          transactionContext.rollbackTransaction();
        }
 catch (        HazelcastInstanceNotActiveException ignored) {
        }
      }
    }
 catch (    HazelcastInstanceNotActiveException e) {
      break;
    }
  }
}","@Override public void run(){
  assertEquals(0,listener.removes.get());
}",0.0927021696252465
45834,"@Override public Object execute(TransactionalTaskContext context) throws TransactionException {
  TransactionalQueue<String> queue=context.getQueue(queueName);
  queue.offer(""String_Node_Str"");
  return null;
}","@Override public Object execute(TransactionalTaskContext ctx) throws TransactionException {
  TransactionalQueue<Object> queue=ctx.getQueue(name);
  return queue.poll();
}",0.8188976377952756
45835,"Set<QueryableEntry<K,V>> filter(QueryContext queryContext);","/** 
 * Produces a filtered entry set by utilizing the indexes available while executing the query in the given query context. <p> The query engine assumes this method produces the result set faster than a simple evaluation of the predicate on every entry.
 * @param queryContext the query context to access the indexes.
 * @return the produced filtered entry set.
 */
Set<QueryableEntry<K,V>> filter(QueryContext queryContext);",0.2422997946611909
45836,boolean isIndexed(QueryContext queryContext);,"/** 
 * Signals to the query engine that this predicate is able to utilize the indexes available while executing the query in the given query context.
 * @param queryContext the query context to consult for the availableindexes.
 * @return {@code true} if this predicate is able to use the indexes tospeed up the processing,  {@code false} otherwise.
 */
boolean isIndexed(QueryContext queryContext);",0.2022471910112359
45837,"boolean apply(Map.Entry<K,V> mapEntry);","/** 
 * Applies this predicate to the given map entry. <p> Implementations <i>must</i> be thread-safe, since this method may be called by multiple threads concurrently.
 * @param mapEntry the map entry to apply this predicate to.
 * @return {@code true} if the given map entry matches this predicate,{@code false} otherwise.
 */
boolean apply(Map.Entry<K,V> mapEntry);",0.1916461916461916
45838,"Set<QueryableEntry> getSubRecords(ComparisonType comparisonType,Comparable searchedValue);","/** 
 * Produces a result set containing entries whose attribute values are satisfy the comparison of the given type with the given value.
 * @param comparisonType the type of the comparison to perform.
 * @param searchedValue  the value to compare against.
 * @return the produced result set.
 */
Set<QueryableEntry> getSubRecords(ComparisonType comparisonType,Comparable searchedValue);",0.3765690376569037
45839,"void removeEntryIndex(Data key,Object value);","/** 
 * Removes the entry having the given key and the value from this index.
 * @param key   the key of the entry to remove.
 * @param value the value of the entry to remove.
 * @throws QueryException if there were errors while extracting theattribute value from the entry.
 */
void removeEntryIndex(Data key,Object value);",0.2439024390243902
45840,"/** 
 * Add entry to this index.
 * @param e entry
 * @param oldValue or null if there is no old value
 * @throws QueryException
 */
void saveEntryIndex(QueryableEntry e,Object oldValue) throws QueryException ;","/** 
 * Saves the given entry into this index.
 * @param entry    the entry to save.
 * @param oldValue the previous old value associated with the entry or{@code null} if the entry is new.
 * @throws QueryException if there were errors while extracting theattribute value from the entry.
 */
void saveEntryIndex(QueryableEntry entry,Object oldValue);",0.5214285714285715
45841,"/** 
 * Clear out entries from the index
 */
void clear();","/** 
 * Clears out all entries from this index.
 */
void clear();",0.926829268292683
45842,Set<QueryableEntry> getRecords(Comparable value);,"/** 
 * Produces a result set containing entries whose attribute values are equal to at least one of the given values.
 * @param values the values to compare against.
 * @return the produced result set.
 */
Set<QueryableEntry> getRecords(Comparable[] values);",0.2792207792207792
45843,"/** 
 * Release all resources hold by the index. (ie. Native memory for HD)
 */
void destroy();","/** 
 * Releases all resources hold by this index, e.g. the allocated native memory for the HD index.
 */
void destroy();",0.8240740740740741
45844,"Set<QueryableEntry> getSubRecordsBetween(Comparable from,Comparable to);","/** 
 * Produces a result set by performing a range query on this index. <p> More precisely, this method produces a result set containing entries whose attribute values are greater than or equal to the given  {@code from} value and less than or equal to the given {@code to} value.
 * @param from the beginning of the range (inclusive).
 * @param to   the end of the range (inclusive).
 * @return the produced result set.
 */
Set<QueryableEntry> getSubRecordsBetween(Comparable from,Comparable to);",0.2526315789473684
45845,String getAttributeName();,"/** 
 * @return the name of the attribute for which this index is built.
 */
String getAttributeName();",0.4031007751937984
45846,boolean isOrdered();,"/** 
 * Tells whether this index is ordered or not. <p> Ordered indexes support the fast evaluation of range queries. Unordered indexes are still capable to execute range queries, but the performance would be about the same as the full scan performance.
 * @return {@code true} if this index is ordered, {@code false} otherwise.
 * @see #getSubRecords
 * @see #getSubRecordsBetween
 */
boolean isOrdered();",0.0938967136150234
45847,"/** 
 * Return converter associated with this Index. It can return <code>null</code> if no entry has been saved yet.
 * @return
 */
TypeConverter getConverter();","/** 
 * @return the converter associated with this index; or {@code null} if theconverter is not known because there were no saves to this index and the attribute type is not inferred yet.
 */
TypeConverter getConverter();",0.4908616187989556
45848,"public Index getIndex(String attributeName){
  if (indexes == null) {
    return null;
  }
 else {
    return indexes.getIndex(attributeName);
  }
}","/** 
 * Obtains the index available for the given attribute in this query context.
 * @param attributeName the name of the attribute to obtain the index for.
 * @return the obtained index or {@code null} if there is no index availablefor the given attribute.
 */
public Index getIndex(String attributeName){
  if (indexes == null) {
    return null;
  }
 else {
    return indexes.getIndex(attributeName);
  }
}",0.5295169946332737
45849,"public QueryContext(Indexes indexes){
  this.indexes=indexes;
}","/** 
 * Creates a new query context with the given available indexes.
 * @param indexes the indexes available for the query context.
 */
public QueryContext(Indexes indexes){
  this.indexes=indexes;
}",0.4790874524714829
45850,"public ConfigCheck createConfigCheck(){
  String joinerType=joiner == null ? ""String_Node_Str"" : joiner.getType();
  return new ConfigCheck(config,joinerType,clusterService.getClusterVersion());
}","public ConfigCheck createConfigCheck(){
  String joinerType=joiner == null ? ""String_Node_Str"" : joiner.getType();
  return new ConfigCheck(config,joinerType);
}",0.9019607843137256
45851,"public ConfigCheck(Config config,String joinerType,Version clusterVersion){
  this.joinerType=joinerType;
  this.clusterVersion=clusterVersion;
  properties.put(PARTITION_COUNT.getName(),config.getProperty(PARTITION_COUNT.getName()));
  properties.put(APPLICATION_VALIDATION_TOKEN.getName(),config.getProperty(APPLICATION_VALIDATION_TOKEN.getName()));
  GroupConfig groupConfig=config.getGroupConfig();
  if (groupConfig != null) {
    this.groupName=groupConfig.getName();
    this.groupPassword=config.getGroupConfig().getPassword();
  }
  final PartitionGroupConfig partitionGroupConfig=config.getPartitionGroupConfig();
  if (partitionGroupConfig != null) {
    partitionGroupEnabled=partitionGroupConfig.isEnabled();
    if (partitionGroupEnabled) {
      memberGroupType=partitionGroupConfig.getGroupType();
    }
 else {
      memberGroupType=PartitionGroupConfig.MemberGroupType.PER_MEMBER;
    }
  }
}","public ConfigCheck(Config config,String joinerType){
  this.joinerType=joinerType;
  properties.put(PARTITION_COUNT.getName(),config.getProperty(PARTITION_COUNT.getName()));
  properties.put(APPLICATION_VALIDATION_TOKEN.getName(),config.getProperty(APPLICATION_VALIDATION_TOKEN.getName()));
  GroupConfig groupConfig=config.getGroupConfig();
  if (groupConfig != null) {
    this.groupName=groupConfig.getName();
  }
  final PartitionGroupConfig partitionGroupConfig=config.getPartitionGroupConfig();
  if (partitionGroupConfig != null) {
    partitionGroupEnabled=partitionGroupConfig.isEnabled();
    if (partitionGroupEnabled) {
      memberGroupType=partitionGroupConfig.getGroupType();
    }
 else {
      memberGroupType=PartitionGroupConfig.MemberGroupType.PER_MEMBER;
    }
  }
}",0.9180907483794932
45852,"@Test public void testGroupPasswordNotLeak_whenVersionAboveThreeNine(){
  final Config config=new Config();
  config.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(true).setMulticastTimeoutSeconds(3);
  config.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(false);
  final AtomicBoolean leaked=new AtomicBoolean(false);
  ObjectDataOutput odo=mock(ObjectDataOutput.class);
  try {
    ConfigCheck configCheck=new ConfigCheck(config,""String_Node_Str"",Versions.CURRENT_CLUSTER_VERSION);
    configCheck.writeData(odo);
  }
 catch (  IOException e) {
    fail(e.getMessage());
  }
  try {
    ArgumentCaptor<String> captor=ArgumentCaptor.forClass(String.class);
    verify(odo,times(7)).writeUTF(captor.capture());
    List<String> values=captor.getAllValues();
    if (values.contains(config.getGroupConfig().getPassword())) {
      leaked.set(true);
    }
  }
 catch (  IOException e) {
    fail(e.getMessage());
  }
  assertEquals(""String_Node_Str"",false,leaked.get());
}","@Test public void testGroupPasswordNotLeak_whenVersionAboveThreeNine(){
  final Config config=new Config();
  config.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(true).setMulticastTimeoutSeconds(3);
  config.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(false);
  final AtomicBoolean leaked=new AtomicBoolean(false);
  ObjectDataOutput odo=mock(ObjectDataOutput.class);
  try {
    ConfigCheck configCheck=new ConfigCheck(config,""String_Node_Str"");
    configCheck.writeData(odo);
  }
 catch (  IOException e) {
    fail(e.getMessage());
  }
  try {
    ArgumentCaptor<String> captor=ArgumentCaptor.forClass(String.class);
    verify(odo,times(7)).writeUTF(captor.capture());
    List<String> values=captor.getAllValues();
    if (values.contains(config.getGroupConfig().getPassword())) {
      leaked.set(true);
    }
  }
 catch (  IOException e) {
    fail(e.getMessage());
  }
  assertEquals(""String_Node_Str"",false,leaked.get());
}",0.9831374552887072
45853,"@Test public void testDestroyAndCreateProxyWithNearCache(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.addNearCacheConfig(getNearCacheConfig(""String_Node_Str""));
  final HazelcastInstance client=factory.newHazelcastClient(clientConfig);
  int createPutGetThreadCount=2;
  int destroyThreadCount=2;
  ExecutorService pool=Executors.newFixedThreadPool(createPutGetThreadCount + destroyThreadCount);
  final AtomicBoolean isRunning=new AtomicBoolean(true);
  final AtomicReference<Exception> exception=new AtomicReference<Exception>();
  for (int i=0; i < destroyThreadCount; i++) {
    pool.execute(new Runnable(){
      @Override public void run(){
        while (isRunning.get()) {
          for (          DistributedObject distributedObject : client.getDistributedObjects())           distributedObject.destroy();
        }
      }
    }
);
  }
  for (int i=0; i < createPutGetThreadCount; i++) {
    pool.execute(new Runnable(){
      @Override public void run(){
        try {
          while (isRunning.get()) {
            IMap<Object,Object> map=client.getMap(""String_Node_Str"");
            map.put(1,1);
            map.get(1);
          }
        }
 catch (        Exception e) {
          isRunning.set(false);
          e.printStackTrace(System.out);
          exception.set(e);
        }
      }
    }
);
  }
  sleepSeconds(5);
  isRunning.set(false);
  pool.shutdown();
  assertNull(exception.get());
}","@Test public void testDestroyAndCreateProxyWithNearCache(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.addNearCacheConfig(getNearCacheConfig(""String_Node_Str""));
  final HazelcastInstance client=factory.newHazelcastClient(clientConfig);
  int createPutGetThreadCount=2;
  int destroyThreadCount=2;
  ExecutorService pool=Executors.newFixedThreadPool(createPutGetThreadCount + destroyThreadCount);
  final AtomicBoolean isRunning=new AtomicBoolean(true);
  final AtomicReference<Exception> exception=new AtomicReference<Exception>();
  for (int i=0; i < destroyThreadCount; i++) {
    pool.execute(new Runnable(){
      @Override public void run(){
        while (isRunning.get()) {
          for (          DistributedObject distributedObject : client.getDistributedObjects()) {
            distributedObject.destroy();
          }
        }
      }
    }
);
  }
  for (int i=0; i < createPutGetThreadCount; i++) {
    pool.execute(new Runnable(){
      @Override public void run(){
        try {
          while (isRunning.get()) {
            IMap<Object,Object> map=client.getMap(""String_Node_Str"");
            map.put(1,1);
            map.get(1);
          }
        }
 catch (        Exception e) {
          isRunning.set(false);
          e.printStackTrace(System.out);
          exception.set(e);
        }
      }
    }
);
  }
  sleepSeconds(5);
  isRunning.set(false);
  pool.shutdown();
  assertNull(exception.get());
}",0.9945872801082544
45854,"@Test public void testBigIntegerConvert_whenPassedDoubleValue_thenConvertToBigInteger() throws Exception {
  Double doubleValue=3.141593;
  Comparable expectedBigIntValue=BigInteger.valueOf(doubleValue.longValue());
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(doubleValue);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(expectedBigIntValue))));
}","@Test public void testBigIntegerConvert_whenPassedDoubleValue_thenConvertToBigInteger(){
  Double doubleValue=3.141593;
  Comparable expectedBigIntValue=BigInteger.valueOf(doubleValue.longValue());
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(doubleValue);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(expectedBigIntValue))));
}",0.9769230769230768
45855,"@Test public void testBigIntegerConvert_whenPassedLongValue_thenConvertToBigInteger() throws Exception {
  Long longValue=3141593L;
  Comparable expectedBigIntValue=BigInteger.valueOf(longValue.longValue());
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(longValue);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(expectedBigIntValue))));
}","@Test public void testBigIntegerConvert_whenPassedLongValue_thenConvertToBigInteger(){
  Long longValue=3141593L;
  Comparable expectedBigIntValue=BigInteger.valueOf(longValue);
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(longValue);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(expectedBigIntValue))));
}",0.9598930481283422
45856,"@Test public void testBigDecimalConvert_whenPassedHugeBigIntegerValue_thenConvertToBigDecimal() throws Exception {
  BigInteger value=BigInteger.ONE.add(BigInteger.valueOf(Long.MAX_VALUE));
  Comparable expectedDecimal=BigDecimal.valueOf(Long.MAX_VALUE).add(BigDecimal.ONE);
  Comparable comparable=TypeConverters.BIG_DECIMAL_CONVERTER.convert(value);
  assertThat(comparable,allOf(is(instanceOf(BigDecimal.class)),is(equalTo(expectedDecimal))));
}","@Test public void testBigDecimalConvert_whenPassedHugeBigIntegerValue_thenConvertToBigDecimal(){
  BigInteger value=BigInteger.ONE.add(BigInteger.valueOf(Long.MAX_VALUE));
  Comparable expectedDecimal=BigDecimal.valueOf(Long.MAX_VALUE).add(BigDecimal.ONE);
  Comparable comparable=TypeConverters.BIG_DECIMAL_CONVERTER.convert(value);
  assertThat(comparable,allOf(is(instanceOf(BigDecimal.class)),is(equalTo(expectedDecimal))));
}",0.979498861047836
45857,"@Test public void testCharConvert_whenPassedString_thenConvertToChar(){
  final Comparable value=""String_Node_Str"";
  final Comparable expectedCharacter='f';
  final Comparable actualCharacter=TypeConverters.CHAR_CONVERTER.convert(value);
  assertThat(actualCharacter,allOf(is(instanceOf(Character.class)),is(equalTo(expectedCharacter))));
}","@Test public void testCharConvert_whenPassedString_thenConvertToChar(){
  Comparable value=""String_Node_Str"";
  Comparable expectedCharacter='f';
  Comparable actualCharacter=TypeConverters.CHAR_CONVERTER.convert(value);
  assertThat(actualCharacter,allOf(is(instanceOf(Character.class)),is(equalTo(expectedCharacter))));
}",0.9728915662650602
45858,"@Test public void testBigDecimalConvert_whenPassedLongValue_thenConvertToBigDecimal() throws Exception {
  Long longValue=3141593L;
  Comparable expectedDecimal=BigDecimal.valueOf(longValue.longValue());
  Comparable comparable=TypeConverters.BIG_DECIMAL_CONVERTER.convert(longValue);
  assertThat(comparable,allOf(is(instanceOf(BigDecimal.class)),is(equalTo(expectedDecimal))));
}","@Test public void testBigDecimalConvert_whenPassedLongValue_thenConvertToBigDecimal(){
  Long longValue=3141593L;
  Comparable expectedDecimal=BigDecimal.valueOf(longValue);
  Comparable comparable=TypeConverters.BIG_DECIMAL_CONVERTER.convert(longValue);
  assertThat(comparable,allOf(is(instanceOf(BigDecimal.class)),is(equalTo(expectedDecimal))));
}",0.9590163934426228
45859,"@Test public void testBigDecimalConvert_whenPassedDoubleValue_thenConvertToBigDecimal() throws Exception {
  Double doubleValue=3.141593;
  Comparable expectedDecimal=new BigDecimal(doubleValue);
  Comparable comparable=TypeConverters.BIG_DECIMAL_CONVERTER.convert(doubleValue);
  assertThat(comparable,allOf(is(instanceOf(BigDecimal.class)),is(equalTo(expectedDecimal))));
}","/** 
 * Checks that the   {@link TypeConverters#BIG_DECIMAL_CONVERTER} doesn't return a rounded {@link BigDecimal}.
 */
@Test public void testBigDecimalConvert_whenPassedDoubleValue_thenConvertToBigDecimal(){
  Double doubleValue=3.141593;
  Comparable expectedDecimal=BigDecimal.valueOf(doubleValue);
  Comparable unexpectedDecimal=new BigDecimal(doubleValue);
  Comparable comparable=TypeConverters.BIG_DECIMAL_CONVERTER.convert(doubleValue);
  assertThat(comparable,allOf(is(instanceOf(BigDecimal.class)),is(equalTo(expectedDecimal)),not(equalTo(unexpectedDecimal))));
}",0.7531645569620253
45860,"@Test public void testBigIntegerConvert_whenPassedNullValue_thenConvertToBigInteger() throws Exception {
  Comparable value=""String_Node_Str"";
  thrown.expect(NumberFormatException.class);
  thrown.expectMessage(startsWith(""String_Node_Str""));
  TypeConverters.BIG_INTEGER_CONVERTER.convert(value);
}","@Test public void testBigIntegerConvert_whenPassedNullValue_thenConvertToBigInteger(){
  Comparable value=""String_Node_Str"";
  thrown.expect(NumberFormatException.class);
  thrown.expectMessage(startsWith(""String_Node_Str""));
  TypeConverters.BIG_INTEGER_CONVERTER.convert(value);
}",0.9690721649484536
45861,"@Test public void testBigIntegerConvert_whenPassedBigDecimalValue_thenConvertToBigInteger() throws Exception {
  BigDecimal value=BigDecimal.valueOf(4.9999);
  Comparable expectedBigIntValue=BigInteger.valueOf(value.longValue());
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(value);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(expectedBigIntValue))));
}","@Test public void testBigIntegerConvert_whenPassedBigDecimalValue_thenConvertToBigInteger(){
  BigDecimal value=BigDecimal.valueOf(4.9999);
  Comparable expectedBigIntValue=BigInteger.valueOf(value.longValue());
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(value);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(expectedBigIntValue))));
}",0.9773869346733668
45862,"@Test public void testBigDecimalConvert_whenPassedFloatValue_thenConvertToBigDecimal() throws Exception {
  Float floatValue=3.141593F;
  Comparable expectedDecimal=new BigDecimal(floatValue);
  Comparable comparable=TypeConverters.BIG_DECIMAL_CONVERTER.convert(floatValue);
  assertThat(comparable,allOf(is(instanceOf(BigDecimal.class)),is(equalTo(expectedDecimal))));
}","/** 
 * Checks that the   {@link TypeConverters#BIG_DECIMAL_CONVERTER} doesn't return a rounded {@link BigDecimal}.
 */
@Test public void testBigDecimalConvert_whenPassedFloatValue_thenConvertToBigDecimal(){
  Float floatValue=3.141593F;
  Comparable expectedDecimal=BigDecimal.valueOf(floatValue);
  Comparable unexpectedDecimal=new BigDecimal(floatValue);
  Comparable comparable=TypeConverters.BIG_DECIMAL_CONVERTER.convert(floatValue);
  assertThat(comparable,allOf(is(instanceOf(BigDecimal.class)),is(equalTo(expectedDecimal)),not(equalTo(unexpectedDecimal))));
}",0.751863684771033
45863,"@Test public void testBigDecimalConvert_whenPassedIntegerValue_thenConvertToBigDecimal() throws Exception {
  Integer integerValue=3141593;
  Comparable expectedDecimal=new BigDecimal(integerValue.toString());
  Comparable comparable=TypeConverters.BIG_DECIMAL_CONVERTER.convert(integerValue);
  assertThat(comparable,allOf(is(instanceOf(BigDecimal.class)),is(equalTo(expectedDecimal))));
}","@Test public void testBigDecimalConvert_whenPassedIntegerValue_thenConvertToBigDecimal(){
  Integer integerValue=3141593;
  Comparable expectedDecimal=new BigDecimal(integerValue.toString());
  Comparable comparable=TypeConverters.BIG_DECIMAL_CONVERTER.convert(integerValue);
  assertThat(comparable,allOf(is(instanceOf(BigDecimal.class)),is(equalTo(expectedDecimal))));
}",0.9763779527559056
45864,"@Test public void testBigDecimalConvert_whenPassedNullValue_thenConvertToBigDecimal() throws Exception {
  Comparable value=""String_Node_Str"";
  thrown.expect(NumberFormatException.class);
  TypeConverters.BIG_DECIMAL_CONVERTER.convert(value);
}","@Test public void testBigDecimalConvert_whenPassedNullValue_thenConvertToBigDecimal(){
  Comparable value=""String_Node_Str"";
  thrown.expect(NumberFormatException.class);
  TypeConverters.BIG_DECIMAL_CONVERTER.convert(value);
}",0.961864406779661
45865,"@Test public void testBigDecimalConvert_whenPassedBigIntegerValue_thenConvertToBigDecimal() throws Exception {
  BigInteger value=BigInteger.ONE;
  Comparable expectedDecimal=BigDecimal.valueOf(value.longValue());
  Comparable comparable=TypeConverters.BIG_DECIMAL_CONVERTER.convert(value);
  assertThat(comparable,allOf(is(instanceOf(BigDecimal.class)),is(equalTo(expectedDecimal))));
}","@Test public void testBigDecimalConvert_whenPassedBigIntegerValue_thenConvertToBigDecimal(){
  BigInteger value=BigInteger.ONE;
  Comparable expectedDecimal=BigDecimal.valueOf(value.longValue());
  Comparable comparable=TypeConverters.BIG_DECIMAL_CONVERTER.convert(value);
  assertThat(comparable,allOf(is(instanceOf(BigDecimal.class)),is(equalTo(expectedDecimal))));
}",0.9761904761904762
45866,"@Test public void testBigIntegerConvert_whenPassedFloatValue_thenConvertToBigInteger() throws Exception {
  Float doubleValue=3.141593F;
  Comparable expectedBigIntValue=BigInteger.valueOf(3);
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(doubleValue);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(expectedBigIntValue))));
}","@Test public void testBigIntegerConvert_whenPassedFloatValue_thenConvertToBigInteger(){
  Float doubleValue=3.141593F;
  Comparable expectedBigIntValue=BigInteger.valueOf(3);
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(doubleValue);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(expectedBigIntValue))));
}",0.9754768392370572
45867,"@Test public void testBigIntegerConvert_whenPassedBigIntegerValue_thenConvertToBigInteger() throws Exception {
  BigInteger value=BigInteger.ONE;
  Comparable expectedBigIntValue=BigInteger.valueOf(value.longValue());
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(value);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(expectedBigIntValue))));
}","@Test public void testBigIntegerConvert_whenPassedBigIntegerValue_thenConvertToBigInteger(){
  BigInteger value=BigInteger.ONE;
  Comparable expectedBigIntValue=BigInteger.valueOf(value.longValue());
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(value);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(expectedBigIntValue))));
}",0.9766839378238342
45868,"@Test public void testBigDecimalConvert_whenPassedBooleanValue_thenConvertToBigDecimal() throws Exception {
  Boolean value=Boolean.TRUE;
  Comparable trueAsDecimal=BigDecimal.ONE;
  Comparable comparable=TypeConverters.BIG_DECIMAL_CONVERTER.convert(value);
  assertThat(comparable,allOf(is(instanceOf(BigDecimal.class)),is(equalTo(trueAsDecimal))));
}","@Test @SuppressWarnings(""String_Node_Str"") public void testBigDecimalConvert_whenPassedBooleanValue_thenConvertToBigDecimal(){
  Boolean value=Boolean.TRUE;
  Comparable trueAsDecimal=BigDecimal.ONE;
  Comparable comparable=TypeConverters.BIG_DECIMAL_CONVERTER.convert(value);
  assertThat(comparable,allOf(is(instanceOf(BigDecimal.class)),is(equalTo(trueAsDecimal))));
}",0.9239280774550483
45869,"@Test public void testCharConvert_whenPassedNumeric_thenConvertToChar(){
  final Comparable value=1;
  final Comparable expectedCharacter=(char)1;
  final Comparable actualCharacter=TypeConverters.CHAR_CONVERTER.convert(value);
  assertThat(actualCharacter,allOf(is(instanceOf(Character.class)),is(equalTo(expectedCharacter))));
}","@Test public void testCharConvert_whenPassedNumeric_thenConvertToChar(){
  Comparable value=1;
  Comparable expectedCharacter=(char)1;
  Comparable actualCharacter=TypeConverters.CHAR_CONVERTER.convert(value);
  assertThat(actualCharacter,allOf(is(instanceOf(Character.class)),is(equalTo(expectedCharacter))));
}",0.97196261682243
45870,"@Test public void testCharConvert_whenPassedEmptyString_thenConvertToChar(){
  final Comparable value=""String_Node_Str"";
  thrown.expect(IllegalArgumentException.class);
  TypeConverters.CHAR_CONVERTER.convert(value);
}","@Test public void testCharConvert_whenPassedEmptyString_thenConvertToChar(){
  Comparable value=""String_Node_Str"";
  thrown.expect(IllegalArgumentException.class);
  TypeConverters.CHAR_CONVERTER.convert(value);
}",0.9861111111111112
45871,"@Test public void testBigIntegerConvert_whenPassedIntegerValue_thenConvertToBigInteger() throws Exception {
  Integer integerValue=3141593;
  Comparable expectedBigIntValue=BigInteger.valueOf(integerValue.longValue());
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(integerValue);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(expectedBigIntValue))));
}","@Test public void testBigIntegerConvert_whenPassedIntegerValue_thenConvertToBigInteger(){
  Integer integerValue=3141593;
  Comparable expectedBigIntValue=BigInteger.valueOf(integerValue.longValue());
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(integerValue);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(expectedBigIntValue))));
}",0.9771573604060914
45872,"@Test public void testBigDecimalConvert_whenPassedStringValue_thenConvertToBigDecimal() throws Exception {
  String stringValue=""String_Node_Str"";
  Comparable expectedDecimal=new BigDecimal(stringValue);
  Comparable comparable=TypeConverters.BIG_DECIMAL_CONVERTER.convert(stringValue);
  assertThat(comparable,allOf(is(instanceOf(BigDecimal.class)),is(equalTo(expectedDecimal))));
}","@Test public void testBigDecimalConvert_whenPassedStringValue_thenConvertToBigDecimal(){
  String stringValue=""String_Node_Str"";
  Comparable expectedDecimal=new BigDecimal(stringValue);
  Comparable comparable=TypeConverters.BIG_DECIMAL_CONVERTER.convert(stringValue);
  assertThat(comparable,allOf(is(instanceOf(BigDecimal.class)),is(equalTo(expectedDecimal))));
}",0.976
45873,"@Test public void testBigIntegerConvert_whenPassedStringValue_thenConvertToBigInteger() throws Exception {
  String stringValue=""String_Node_Str"";
  Comparable expectedBigIntValue=new BigInteger(stringValue);
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(stringValue);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(expectedBigIntValue))));
}","@Test public void testBigIntegerConvert_whenPassedStringValue_thenConvertToBigInteger(){
  String stringValue=""String_Node_Str"";
  Comparable expectedBigIntValue=new BigInteger(stringValue);
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(stringValue);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(expectedBigIntValue))));
}",0.9765013054830288
45874,"@Test public void testBigIntegerConvert_whenPassedHugeBigDecimalValue_thenConvertToBigInteger() throws Exception {
  BigDecimal value=BigDecimal.ONE.add(BigDecimal.valueOf(Long.MAX_VALUE));
  Comparable expectedBigIntValue=BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(value);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(expectedBigIntValue))));
}","@Test public void testBigIntegerConvert_whenPassedHugeBigDecimalValue_thenConvertToBigInteger(){
  BigDecimal value=BigDecimal.ONE.add(BigDecimal.valueOf(Long.MAX_VALUE));
  Comparable expectedBigIntValue=BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(value);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(expectedBigIntValue))));
}",0.9798657718120806
45875,"@Test public void testBigIntegerConvert_whenPassedBooleanValue_thenConvertToBigInteger() throws Exception {
  Boolean value=Boolean.TRUE;
  Comparable trueAsNumber=BigInteger.ONE;
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(value);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(trueAsNumber))));
}","@Test @SuppressWarnings(""String_Node_Str"") public void testBigIntegerConvert_whenPassedBooleanValue_thenConvertToBigInteger(){
  Boolean value=Boolean.TRUE;
  Comparable trueAsNumber=BigInteger.ONE;
  Comparable comparable=TypeConverters.BIG_INTEGER_CONVERTER.convert(value);
  assertThat(comparable,allOf(is(instanceOf(BigInteger.class)),is(equalTo(trueAsNumber))));
}",0.9235048678720446
45876,"@Test public void shutdownMasterMember_withoutPartitionInitialization(){
  HazelcastInstance hz1=factory.newHazelcastInstance();
  HazelcastInstance hz2=factory.newHazelcastInstance();
  HazelcastInstance hz3=factory.newHazelcastInstance();
  hz1.shutdown();
}","@Test @SuppressWarnings(""String_Node_Str"") public void shutdownMasterMember_withoutPartitionInitialization(){
  HazelcastInstance hz1=factory.newHazelcastInstance();
  HazelcastInstance hz2=factory.newHazelcastInstance();
  HazelcastInstance hz3=factory.newHazelcastInstance();
  hz1.shutdown();
}",0.933572710951526
45877,"@Test public void shutdownSlaveMember_whilePartitionsMigrating(){
  Config config=new Config();
  config.setProperty(GroupProperty.PARTITION_COUNT.getName(),""String_Node_Str"");
  config.setProperty(GroupProperty.PARTITION_MIGRATION_INTERVAL.getName(),""String_Node_Str"");
  HazelcastInstance hz1=factory.newHazelcastInstance(config);
  warmUpPartitions(hz1);
  HazelcastInstance hz2=factory.newHazelcastInstance(config);
  HazelcastInstance hz3=factory.newHazelcastInstance(config);
  hz2.shutdown();
  assertPartitionAssignments();
}","@Test @SuppressWarnings(""String_Node_Str"") public void shutdownSlaveMember_whilePartitionsMigrating(){
  Config config=new Config().setProperty(GroupProperty.PARTITION_COUNT.getName(),""String_Node_Str"").setProperty(GroupProperty.PARTITION_MIGRATION_INTERVAL.getName(),""String_Node_Str"");
  HazelcastInstance hz1=factory.newHazelcastInstance(config);
  warmUpPartitions(hz1);
  HazelcastInstance hz2=factory.newHazelcastInstance(config);
  HazelcastInstance hz3=factory.newHazelcastInstance(config);
  hz2.shutdown();
  assertPartitionAssignments();
}",0.9473684210526316
45878,"@Test public void shutdownMemberAndCluster_withoutPartitionInitialization() throws Exception {
  shutdownMemberAndCluster(false);
}","@Test public void shutdownMemberAndCluster_withoutPartitionInitialization(){
  shutdownMemberAndCluster(false);
}",0.9262295081967212
45879,"@Test public void shutdownMemberAndCluster_withPartitionInitialization() throws Exception {
  shutdownMemberAndCluster(true);
}","@Test public void shutdownMemberAndCluster_withPartitionInitialization(){
  shutdownMemberAndCluster(true);
}",0.923728813559322
45880,"@Test public void shutdownMasterMember_whenClusterPassive_withoutPartitionInitialization() throws Exception {
  shutdownMember_whenClusterNotActive(true,false,ClusterState.PASSIVE);
}","@Test public void shutdownMasterMember_whenClusterPassive_withoutPartitionInitialization(){
  shutdownMember_whenClusterNotActive(true,false,ClusterState.PASSIVE);
}",0.9482758620689656
45881,"private void shutdownMemberAndCluster(boolean initializePartitions) throws Exception {
  Config config=new Config();
  HazelcastInstance master=factory.newHazelcastInstance(config);
  HazelcastInstance[] slaves=factory.newInstances(config,3);
  if (initializePartitions) {
    warmUpPartitions(master);
  }
  master.shutdown();
  changeClusterStateEventually(slaves[0],ClusterState.PASSIVE);
  slaves[0].getCluster().shutdown();
}","private void shutdownMemberAndCluster(boolean initializePartitions){
  Config config=new Config();
  HazelcastInstance master=factory.newHazelcastInstance(config);
  HazelcastInstance[] slaves=factory.newInstances(config,3);
  if (initializePartitions) {
    warmUpPartitions(master);
  }
  master.shutdown();
  changeClusterStateEventually(slaves[0],ClusterState.PASSIVE);
  slaves[0].getCluster().shutdown();
}",0.978622327790974
45882,"@Test public void shutdownMasterMember_whilePartitionsMigrating(){
  Config config=newConfig();
  HazelcastInstance hz1=factory.newHazelcastInstance(config);
  warmUpPartitions(hz1);
  HazelcastInstance hz2=factory.newHazelcastInstance(config);
  HazelcastInstance hz3=factory.newHazelcastInstance(config);
  hz1.shutdown();
  assertPartitionAssignments();
}","@Test @SuppressWarnings(""String_Node_Str"") public void shutdownMasterMember_whilePartitionsMigrating(){
  Config config=newConfig();
  HazelcastInstance hz1=factory.newHazelcastInstance(config);
  warmUpPartitions(hz1);
  HazelcastInstance hz2=factory.newHazelcastInstance(config);
  HazelcastInstance hz3=factory.newHazelcastInstance(config);
  hz1.shutdown();
  assertPartitionAssignments();
}",0.950863213811421
45883,"@Test public void shutdownSlaveMember_whenClusterFrozen_withPartitionInitialization() throws Exception {
  shutdownMember_whenClusterNotActive(false,true,ClusterState.FROZEN);
}","@Test public void shutdownSlaveMember_whenClusterFrozen_withPartitionInitialization(){
  shutdownMember_whenClusterNotActive(false,true,ClusterState.FROZEN);
}",0.9464285714285714
45884,"@Test public void shutdownMasterMember_whenClusterFrozen_withPartitionInitialization() throws Exception {
  shutdownMember_whenClusterNotActive(true,true,ClusterState.FROZEN);
}","@Test public void shutdownMasterMember_whenClusterFrozen_withPartitionInitialization(){
  shutdownMember_whenClusterNotActive(true,true,ClusterState.FROZEN);
}",0.9464285714285714
45885,"@Test public void shutdownMasterMember_whenClusterFrozen_withoutPartitionInitialization() throws Exception {
  shutdownMember_whenClusterNotActive(true,false,ClusterState.FROZEN);
}","@Test public void shutdownMasterMember_whenClusterFrozen_withoutPartitionInitialization(){
  shutdownMember_whenClusterNotActive(true,false,ClusterState.FROZEN);
}",0.9476744186046512
45886,"@Test public void shutdownSlaveMember_whenClusterPassive_withPartitionInitialization() throws Exception {
  shutdownMember_whenClusterNotActive(false,true,ClusterState.PASSIVE);
}","@Test public void shutdownSlaveMember_whenClusterPassive_withPartitionInitialization(){
  shutdownMember_whenClusterNotActive(false,true,ClusterState.PASSIVE);
}",0.9470588235294116
45887,"private void shutdownMember_whenClusterNotActive(boolean shutdownMaster,boolean initializePartitions,ClusterState state) throws Exception {
  Config config=new Config();
  HazelcastInstance master=factory.newHazelcastInstance(config);
  HazelcastInstance[] slaves=factory.newInstances(config,3);
  if (initializePartitions) {
    warmUpPartitions(slaves);
  }
  changeClusterStateEventually(slaves[0],state);
  InternalPartition[] partitionsBefore=getPartitionTable(master);
  if (shutdownMaster) {
    master.shutdown();
  }
 else {
    slaves[0].shutdown();
  }
  InternalPartition[] partitionsAfter=getPartitionTable(slaves[slaves.length - 1]);
  assertPartitionTableEquals(partitionsBefore,partitionsAfter);
}","private void shutdownMember_whenClusterNotActive(boolean shutdownMaster,boolean initializePartitions,ClusterState state){
  Config config=new Config();
  HazelcastInstance master=factory.newHazelcastInstance(config);
  HazelcastInstance[] slaves=factory.newInstances(config,3);
  if (initializePartitions) {
    warmUpPartitions(slaves);
  }
  changeClusterStateEventually(slaves[0],state);
  InternalPartition[] partitionsBefore=getPartitionTable(master);
  if (shutdownMaster) {
    master.shutdown();
  }
 else {
    slaves[0].shutdown();
  }
  InternalPartition[] partitionsAfter=getPartitionTable(slaves[slaves.length - 1]);
  assertPartitionTableEquals(partitionsBefore,partitionsAfter);
}",0.9872159090909092
45888,"private void assertPartitionTableEquals(InternalPartition[] partitions1,InternalPartition[] partitions2){
  assertEquals(partitions1.length,partitions2.length);
  for (int i=0; i < partitions1.length; i++) {
    assertPartitionEquals(partitions1[i],partitions2[i]);
  }
}","private static void assertPartitionTableEquals(InternalPartition[] partitions1,InternalPartition[] partitions2){
  assertEquals(partitions1.length,partitions2.length);
  for (int i=0; i < partitions1.length; i++) {
    assertPartitionEquals(partitions1[i],partitions2[i]);
  }
}",0.9872495446265938
45889,"private Config newConfig(){
  Config config=new Config();
  config.setProperty(GroupProperty.PARTITION_COUNT.getName(),""String_Node_Str"");
  config.setProperty(GroupProperty.PARTITION_MIGRATION_INTERVAL.getName(),""String_Node_Str"");
  return config;
}","private static Config newConfig(){
  return new Config().setProperty(GroupProperty.PARTITION_COUNT.getName(),""String_Node_Str"").setProperty(GroupProperty.PARTITION_MIGRATION_INTERVAL.getName(),""String_Node_Str"");
}",0.8344086021505376
45890,"@Test public void shutdownMasterMember_whenClusterPassive_withPartitionInitialization() throws Exception {
  shutdownMember_whenClusterNotActive(true,true,ClusterState.PASSIVE);
}","@Test public void shutdownMasterMember_whenClusterPassive_withPartitionInitialization(){
  shutdownMember_whenClusterNotActive(true,true,ClusterState.PASSIVE);
}",0.9470588235294116
45891,"private InternalPartition[] getPartitionTable(HazelcastInstance instance){
  InternalPartitionServiceImpl partitionService=getNode(instance).partitionService;
  return partitionService.getPartitionStateManager().getPartitionsCopy();
}","private static InternalPartition[] getPartitionTable(HazelcastInstance instance){
  InternalPartitionServiceImpl partitionService=getNode(instance).partitionService;
  return partitionService.getPartitionStateManager().getPartitionsCopy();
}",0.9852631578947368
45892,"private void assertPartitionEquals(InternalPartition partition1,InternalPartition partition2){
  for (int i=0; i < MAX_REPLICA_COUNT; i++) {
    Address address1=partition1.getReplicaAddress(i);
    Address address2=partition2.getReplicaAddress(i);
    if (address1 == null) {
      assertNull(address2);
    }
 else {
      assertEquals(address1,address2);
    }
  }
}","private static void assertPartitionEquals(InternalPartition partition1,InternalPartition partition2){
  for (int i=0; i < MAX_REPLICA_COUNT; i++) {
    Address address1=partition1.getReplicaAddress(i);
    Address address2=partition2.getReplicaAddress(i);
    if (address1 == null) {
      assertNull(address2);
    }
 else {
      assertEquals(address1,address2);
    }
  }
}",0.9906040268456376
45893,"@Test public void shutdownSlaveMember_whenClusterPassive_withoutPartitionInitialization() throws Exception {
  shutdownMember_whenClusterNotActive(false,false,ClusterState.PASSIVE);
}","@Test public void shutdownSlaveMember_whenClusterPassive_withoutPartitionInitialization(){
  shutdownMember_whenClusterNotActive(false,false,ClusterState.PASSIVE);
}",0.9482758620689656
45894,"@Test public void shutdownSlaveMember_withoutPartitionInitialization(){
  HazelcastInstance hz1=factory.newHazelcastInstance();
  HazelcastInstance hz2=factory.newHazelcastInstance();
  HazelcastInstance hz3=factory.newHazelcastInstance();
  hz2.shutdown();
}","@Test @SuppressWarnings(""String_Node_Str"") public void shutdownSlaveMember_withoutPartitionInitialization(){
  HazelcastInstance hz1=factory.newHazelcastInstance();
  HazelcastInstance hz2=factory.newHazelcastInstance();
  HazelcastInstance hz3=factory.newHazelcastInstance();
  hz2.shutdown();
}",0.9333333333333332
45895,"@Test public void shutdownSlaveMember_whenClusterFrozen_withoutPartitionInitialization() throws Exception {
  shutdownMember_whenClusterNotActive(false,false,ClusterState.FROZEN);
}","@Test public void shutdownSlaveMember_whenClusterFrozen_withoutPartitionInitialization(){
  shutdownMember_whenClusterNotActive(false,false,ClusterState.FROZEN);
}",0.9476744186046512
45896,"private void shutdownAndTerminateMembers_concurrently(HazelcastInstance[] instances,int shutdownIndex,int terminateIndex){
  warmUpPartitions(instances);
  final HazelcastInstance shuttingDownInstance=instances[shutdownIndex];
  final CountDownLatch latch=new CountDownLatch(1);
  new Thread(){
    public void run(){
      shuttingDownInstance.shutdown();
      latch.countDown();
    }
  }
.start();
  Node shuttingDownNode=getNode(shuttingDownInstance);
  while (shuttingDownNode.isRunning()) {
    ;
  }
  terminateInstance(instances[terminateIndex]);
  assertOpenEventually(latch);
  assertPartitionAssignments();
}","private void shutdownAndTerminateMembers_concurrently(HazelcastInstance[] instances,int shutdownIndex,int terminateIndex){
  warmUpPartitions(instances);
  final HazelcastInstance shuttingDownInstance=instances[shutdownIndex];
  final CountDownLatch latch=new CountDownLatch(1);
  new Thread(){
    public void run(){
      shuttingDownInstance.shutdown();
      latch.countDown();
    }
  }
.start();
  Node shuttingDownNode=getNode(shuttingDownInstance);
  while (shuttingDownNode.isRunning()) {
    Thread.yield();
  }
  terminateInstance(instances[terminateIndex]);
  assertOpenEventually(latch);
  assertPartitionAssignments();
}",0.988835725677831
45897,"static void registerMethod(MetricsRegistry metricsRegistry,Object osBean,String methodName,String name){
  final Method method=getMethod(osBean,methodName);
  if (method == null) {
    return;
  }
  if (long.class.equals(method.getReturnType())) {
    metricsRegistry.register(osBean,name,MANDATORY,new LongProbeFunction(){
      @Override public long get(      Object bean) throws Exception {
        return (Long)method.invoke(bean,EMPTY_ARGS);
      }
    }
);
  }
 else {
    metricsRegistry.register(osBean,name,MANDATORY,new DoubleProbeFunction(){
      @Override public double get(      Object bean) throws Exception {
        return (Double)method.invoke(bean,EMPTY_ARGS);
      }
    }
);
  }
}","private static void registerMethod(MetricsRegistry metricsRegistry,Object osBean,String methodName,String name,final long multiplier){
  final Method method=getMethod(osBean,methodName);
  if (method == null) {
    return;
  }
  if (long.class.equals(method.getReturnType())) {
    metricsRegistry.register(osBean,name,MANDATORY,new LongProbeFunction(){
      @Override public long get(      Object bean) throws Exception {
        return (Long)method.invoke(bean,EMPTY_ARGS) * multiplier;
      }
    }
);
  }
 else {
    metricsRegistry.register(osBean,name,MANDATORY,new DoubleProbeFunction(){
      @Override public double get(      Object bean) throws Exception {
        return (Double)method.invoke(bean,EMPTY_ARGS) * multiplier;
      }
    }
);
  }
}",0.9521203830369356
45898,"@Override public double get(Object bean) throws Exception {
  return (Double)method.invoke(bean,EMPTY_ARGS);
}","@Override public double get(Object bean) throws Exception {
  return (Double)method.invoke(bean,EMPTY_ARGS) * multiplier;
}",0.944206008583691
45899,"/** 
 * Registers all the metrics in this metrics pack.
 * @param metricsRegistry the MetricsRegistry upon which the metrics are registered.
 */
public static void register(MetricsRegistry metricsRegistry){
  checkNotNull(metricsRegistry,""String_Node_Str"");
  OperatingSystemMXBean mxBean=ManagementFactory.getOperatingSystemMXBean();
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  metricsRegistry.register(mxBean,""String_Node_Str"",MANDATORY,new DoubleProbeFunction<OperatingSystemMXBean>(){
    @Override public double get(    OperatingSystemMXBean bean){
      return PERCENTAGE_MULTIPLIER * bean.getSystemLoadAverage();
    }
  }
);
}","/** 
 * Registers all the metrics in this metrics pack.
 * @param metricsRegistry the MetricsRegistry upon which the metrics are registered.
 */
public static void register(MetricsRegistry metricsRegistry){
  checkNotNull(metricsRegistry,""String_Node_Str"");
  OperatingSystemMXBean mxBean=ManagementFactory.getOperatingSystemMXBean();
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"",PERCENTAGE_MULTIPLIER);
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"",PERCENTAGE_MULTIPLIER);
  metricsRegistry.register(mxBean,""String_Node_Str"",MANDATORY,new DoubleProbeFunction<OperatingSystemMXBean>(){
    @Override public double get(    OperatingSystemMXBean bean){
      return bean.getSystemLoadAverage();
    }
  }
);
}",0.7952243125904487
45900,"static void registerMethod(MetricsRegistry metricsRegistry,Object osBean,String methodName,String name){
  final Method method=getMethod(osBean,methodName);
  if (method == null) {
    return;
  }
  if (long.class.equals(method.getReturnType())) {
    metricsRegistry.register(osBean,name,MANDATORY,new LongProbeFunction(){
      @Override public long get(      Object bean) throws Exception {
        return (Long)method.invoke(bean,EMPTY_ARGS);
      }
    }
);
  }
 else {
    metricsRegistry.register(osBean,name,MANDATORY,new DoubleProbeFunction(){
      @Override public double get(      Object bean) throws Exception {
        return (Double)method.invoke(bean,EMPTY_ARGS);
      }
    }
);
  }
}","private static void registerMethod(MetricsRegistry metricsRegistry,Object osBean,String methodName,String name,final long multiplier){
  final Method method=getMethod(osBean,methodName);
  if (method == null) {
    return;
  }
  if (long.class.equals(method.getReturnType())) {
    metricsRegistry.register(osBean,name,MANDATORY,new LongProbeFunction(){
      @Override public long get(      Object bean) throws Exception {
        return (Long)method.invoke(bean,EMPTY_ARGS) * multiplier;
      }
    }
);
  }
 else {
    metricsRegistry.register(osBean,name,MANDATORY,new DoubleProbeFunction(){
      @Override public double get(      Object bean) throws Exception {
        return (Double)method.invoke(bean,EMPTY_ARGS) * multiplier;
      }
    }
);
  }
}",0.9521203830369356
45901,"@Override public double get(Object bean) throws Exception {
  return (Double)method.invoke(bean,EMPTY_ARGS);
}","@Override public double get(Object bean) throws Exception {
  return (Double)method.invoke(bean,EMPTY_ARGS) * multiplier;
}",0.944206008583691
45902,"/** 
 * Registers all the metrics in this metrics pack.
 * @param metricsRegistry the MetricsRegistry upon which the metrics are registered.
 */
public static void register(MetricsRegistry metricsRegistry){
  checkNotNull(metricsRegistry,""String_Node_Str"");
  OperatingSystemMXBean mxBean=ManagementFactory.getOperatingSystemMXBean();
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  metricsRegistry.register(mxBean,""String_Node_Str"",MANDATORY,new DoubleProbeFunction<OperatingSystemMXBean>(){
    @Override public double get(    OperatingSystemMXBean bean){
      return PERCENTAGE_MULTIPLIER * bean.getSystemLoadAverage();
    }
  }
);
}","/** 
 * Registers all the metrics in this metrics pack.
 * @param metricsRegistry the MetricsRegistry upon which the metrics are registered.
 */
public static void register(MetricsRegistry metricsRegistry){
  checkNotNull(metricsRegistry,""String_Node_Str"");
  OperatingSystemMXBean mxBean=ManagementFactory.getOperatingSystemMXBean();
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"");
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"",PERCENTAGE_MULTIPLIER);
  registerMethod(metricsRegistry,mxBean,""String_Node_Str"",""String_Node_Str"",PERCENTAGE_MULTIPLIER);
  metricsRegistry.register(mxBean,""String_Node_Str"",MANDATORY,new DoubleProbeFunction<OperatingSystemMXBean>(){
    @Override public double get(    OperatingSystemMXBean bean){
      return bean.getSystemLoadAverage();
    }
  }
);
}",0.7952243125904487
45903,"/** 
 * Calculates and returns the expected maximum size of an evicted record-store when   {@link com.hazelcast.config.MaxSizeConfig.MaxSizePolicy#PER_NODE PER_NODE} max-size-policy is used.
 */
public double calculatePerNodeMaxRecordStoreSize(RecordStore recordStore){
  MapConfig mapConfig=recordStore.getMapContainer().getMapConfig();
  MaxSizeConfig maxSizeConfig=mapConfig.getMaxSizeConfig();
  NodeEngine nodeEngine=mapServiceContext.getNodeEngine();
  int configuredMaxSize=maxSizeConfig.getSize();
  int memberCount=nodeEngine.getClusterService().getSize(DATA_MEMBER_SELECTOR);
  int partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  final double perNodeMaxRecordStoreSize=(1D * configuredMaxSize * memberCount / partitionCount);
  if (perNodeMaxRecordStoreSize < 1 && misconfiguredPerNodeMaxSizeWarningLogged.compareAndSet(false,true)) {
    int minMaxSize=(int)Math.ceil((1D * partitionCount / memberCount));
    logger.warning(format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",mapConfig.getName(),memberCount,partitionCount,minMaxSize));
  }
  return perNodeMaxRecordStoreSize;
}","/** 
 * Calculates and returns the expected maximum size of an evicted record-store when   {@link com.hazelcast.config.MaxSizeConfig.MaxSizePolicy#PER_NODE PER_NODE} max-size-policy is used.
 */
public double calculatePerNodeMaxRecordStoreSize(RecordStore recordStore){
  MapConfig mapConfig=recordStore.getMapContainer().getMapConfig();
  MaxSizeConfig maxSizeConfig=mapConfig.getMaxSizeConfig();
  NodeEngine nodeEngine=mapServiceContext.getNodeEngine();
  int configuredMaxSize=maxSizeConfig.getSize();
  int memberCount=nodeEngine.getClusterService().getSize(DATA_MEMBER_SELECTOR);
  int partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  double perNodeMaxRecordStoreSize=(1D * configuredMaxSize * memberCount / partitionCount);
  if (perNodeMaxRecordStoreSize < 1) {
    perNodeMaxRecordStoreSize=MIN_SANE_PER_PARTITION_SIZE;
    if (misconfiguredPerNodeMaxSizeWarningLogged.compareAndSet(false,true)) {
      int minMaxSize=(int)Math.ceil((1D * partitionCount / memberCount));
      int newSize=MIN_SANE_PER_PARTITION_SIZE * partitionCount / memberCount;
      logger.warning(format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",mapConfig.getName(),memberCount,partitionCount,minMaxSize,newSize));
    }
  }
  return perNodeMaxRecordStoreSize;
}",0.9265255292652552
45904,"public void run(){
  try {
    Address address=connection.getEndPoint();
    logger.fine(format(""String_Node_Str"",address));
    if (doPing(address,Level.FINE)) {
      icmpFailureDetector.heartbeat(connection);
      return;
    }
    icmpFailureDetector.logAttempt(connection);
    String reason=format(""String_Node_Str"",address);
    logger.warning(reason);
    if (!icmpFailureDetector.isAlive(connection)) {
      connection.onHeartbeatFailed();
      heartbeatManager.fireHeartbeatStopped(connection);
    }
  }
 catch (  Throwable ignored) {
    EmptyStatement.ignore(ignored);
  }
}","public void run(){
  try {
    Address address=connection.getEndPoint();
    logger.fine(format(""String_Node_Str"",address));
    if (doPing(address,Level.FINE)) {
      icmpFailureDetector.heartbeat(connection);
      return;
    }
    icmpFailureDetector.logAttempt(connection);
    String reason=format(""String_Node_Str"",address);
    logger.warning(reason);
    if (!icmpFailureDetector.isAlive(connection)) {
      connection.onHeartbeatFailed();
      heartbeatManager.fireHeartbeatStopped(connection);
    }
  }
 catch (  Throwable ignored) {
    EmptyStatement.ignore(ignored);
  }
 finally {
    if (!connection.isAlive()) {
      icmpFailureDetector.remove(connection);
    }
  }
}",0.921875
45905,"public void run(){
  try {
    Address address=connection.getEndPoint();
    logger.fine(format(""String_Node_Str"",address));
    if (doPing(address,Level.FINE)) {
      icmpFailureDetector.heartbeat(connection);
      return;
    }
    icmpFailureDetector.logAttempt(connection);
    String reason=format(""String_Node_Str"",address);
    logger.warning(reason);
    if (!icmpFailureDetector.isAlive(connection)) {
      connection.onHeartbeatFailed();
      heartbeatManager.fireHeartbeatStopped(connection);
    }
  }
 catch (  Throwable ignored) {
    EmptyStatement.ignore(ignored);
  }
}","public void run(){
  try {
    Address address=connection.getEndPoint();
    logger.fine(format(""String_Node_Str"",address));
    if (doPing(address,Level.FINE)) {
      icmpFailureDetector.heartbeat(connection);
      return;
    }
    icmpFailureDetector.logAttempt(connection);
    String reason=format(""String_Node_Str"",address);
    logger.warning(reason);
    if (!icmpFailureDetector.isAlive(connection)) {
      connection.onHeartbeatFailed();
      heartbeatManager.fireHeartbeatStopped(connection);
    }
  }
 catch (  Throwable ignored) {
    EmptyStatement.ignore(ignored);
  }
 finally {
    if (!connection.isAlive()) {
      icmpFailureDetector.remove(connection);
    }
  }
}",0.921875
45906,"@Override public void shutdown(){
  Collection<Member> members=getContext().getClusterService().getMemberList();
  Collection<Future> calls=new LinkedList<Future>();
  for (  Member member : members) {
    ClientMessage request=ScheduledExecutorShutdownCodec.encodeRequest(getName(),member.getAddress());
    calls.add(doSubmitOnAddress(request,SUBMIT_DECODER,member.getAddress()));
  }
  waitWithDeadline(calls,SHUTDOWN_TIMEOUT,TimeUnit.SECONDS,WHILE_SHUTDOWN_EXCEPTION_HANDLER);
}","@Override public void shutdown(){
  Collection<Member> members=getContext().getClusterService().getMemberList();
  Collection<Future> calls=new LinkedList<Future>();
  for (  Member member : members) {
    ClientMessage request=ScheduledExecutorShutdownCodec.encodeRequest(getName(),member.getAddress());
    calls.add(doSubmitOnAddress(request,SUBMIT_DECODER,member.getAddress()));
  }
  waitWithDeadline(calls,SHUTDOWN_TIMEOUT,TimeUnit.SECONDS,shutdownExceptionHandler);
}",0.9435146443514644
45907,"protected IExecutorService exec(int index,QuorumType quorumType){
  return clients.client(index).getExecutorService(EXEC_NAME + quorumType.name());
}","@Override protected IExecutorService exec(int index,QuorumType quorumType){
  return clients.client(index).getExecutorService(EXEC_NAME + quorumType.name());
}",0.9675324675324676
45908,"protected IExecutorService exec(int index,QuorumType quorumType,String postfix){
  return clients.client(index).getExecutorService(EXEC_NAME + quorumType.name() + postfix);
}","@Override protected IExecutorService exec(int index,QuorumType quorumType,String postfix){
  return clients.client(index).getExecutorService(EXEC_NAME + quorumType.name() + postfix);
}",0.9720670391061452
45909,"protected IMap map(int index){
  return clients.client(index).getMap(MAP_NAME + quorumType.name());
}","@Override protected IMap map(int index){
  return clients.client(index).getMap(MAP_NAME + quorumType.name());
}",0.9528301886792452
45910,"protected IMap map(int index){
  return clients.client(index).getMap(MAP_NAME + quorumType.name());
}","@Override protected IMap map(int index){
  return clients.client(index).getMap(MAP_NAME + quorumType.name());
}",0.9528301886792452
45911,"public TransactionContext newTransactionContext(int index){
  return clients.client(index).newTransactionContext(options);
}","@Override public TransactionContext newTransactionContext(int index){
  return clients.client(index).newTransactionContext(options);
}",0.9612403100775194
45912,"public TransactionContext newTransactionContext(int index){
  return clients.client(index).newTransactionContext(options);
}","@Override public TransactionContext newTransactionContext(int index){
  return clients.client(index).newTransactionContext(options);
}",0.9612403100775194
45913,"protected MultiMap map(int index){
  return clients.client(index).getMultiMap(MAP_NAME + quorumType.name());
}","@Override protected MultiMap map(int index){
  return clients.client(index).getMultiMap(MULTI_MAP_NAME + quorumType.name());
}",0.9322033898305084
45914,"protected MultiMap map(int index){
  return clients.client(index).getMultiMap(MAP_NAME + quorumType.name());
}","@Override protected MultiMap map(int index){
  return clients.client(index).getMultiMap(MULTI_MAP_NAME + quorumType.name());
}",0.9322033898305084
45915,"protected IQueue queue(int index){
  return clients.client(index).getQueue(QUEUE_NAME + quorumType.name());
}","@Override protected IQueue queue(int index){
  return clients.client(index).getQueue(QUEUE_NAME + quorumType.name());
}",0.956140350877193
45916,"protected IQueue queue(int index){
  return clients.client(index).getQueue(QUEUE_NAME + quorumType.name());
}","@Override protected IQueue queue(int index){
  return clients.client(index).getQueue(QUEUE_NAME + quorumType.name());
}",0.956140350877193
45917,"public TransactionContext newTransactionContext(int index){
  return clients.client(index).newTransactionContext(options);
}","@Override public TransactionContext newTransactionContext(int index){
  return clients.client(index).newTransactionContext(options);
}",0.9612403100775194
45918,"public TransactionContext newTransactionContext(int index){
  return clients.client(index).newTransactionContext(options);
}","@Override public TransactionContext newTransactionContext(int index){
  return clients.client(index).newTransactionContext(options);
}",0.9612403100775194
45919,"protected ReplicatedMap map(int index){
  return clients.client(index).getReplicatedMap(MAP_NAME + quorumType.name());
}","@Override protected ReplicatedMap map(int index){
  return clients.client(index).getReplicatedMap(REPLICATED_MAP_NAME + quorumType.name());
}",0.9195402298850576
45920,"protected ReplicatedMap map(int index){
  return clients.client(index).getReplicatedMap(MAP_NAME + quorumType.name());
}","@Override protected ReplicatedMap map(int index){
  return clients.client(index).getReplicatedMap(REPLICATED_MAP_NAME + quorumType.name());
}",0.9195402298850576
45921,"protected IScheduledExecutorService exec(int index){
  return exec(index,quorumType);
}","@Override protected IScheduledExecutorService exec(int index){
  return clients.client(index).getScheduledExecutorService(SCHEDULED_EXEC_NAME + quorumType.name());
}",0.6666666666666666
45922,"protected IScheduledExecutorService exec(int index,String postfix){
  return exec(index,quorumType,postfix);
}","@Override protected IScheduledExecutorService exec(int index,String postfix){
  return clients.client(index).getScheduledExecutorService(SCHEDULED_EXEC_NAME + quorumType.name() + postfix);
}",0.7066666666666667
45923,"protected ISemaphore semaphore(int index){
  return clients.client(index).getSemaphore(SEMAPHORE + quorumType.name());
}","@Override protected ISemaphore semaphore(int index){
  return clients.client(index).getSemaphore(SEMAPHORE + quorumType.name());
}",0.96
45924,"protected ISemaphore semaphore(int index){
  return clients.client(index).getSemaphore(SEMAPHORE + quorumType.name());
}","@Override protected ISemaphore semaphore(int index){
  return clients.client(index).getSemaphore(SEMAPHORE + quorumType.name());
}",0.96
45925,"@Override public void onFailure(Throwable t){
}","@Override public void onFailure(Throwable t){
  multiExecutionCallbackWrapper.onResponse(member,t);
}",0.6351351351351351
45926,"@Test public void testAwsClient_MemberNonDefaultPortConfig(){
  Map<String,Comparable> props=new HashMap<String,Comparable>();
  props.put(PORT.getDefinition().key(),""String_Node_Str"");
  props.put(ACCESS_KEY,System.getenv(""String_Node_Str""));
  props.put(SECRET_KEY,System.getenv(""String_Node_Str""));
  props.put(TAG_KEY.getDefinition().key(),AWS_TEST_TAG);
  props.put(TAG_VALUE.getDefinition().key(),AWS_TEST_TAG_VALUE);
  props.put(CONNECTION_TIMEOUT_SECONDS.getDefinition().key(),""String_Node_Str"");
  if (isOnJenkins()) {
    assertNotNull(""String_Node_Str"",props.get(ACCESS_KEY));
    assertNotNull(""String_Node_Str"",props.get(SECRET_KEY));
  }
 else {
    assumeThat(""String_Node_Str"",props.get(ACCESS_KEY),Matchers.<Comparable>notNullValue());
    assumeThat(""String_Node_Str"",props.get(SECRET_KEY),Matchers.<Comparable>notNullValue());
  }
  ClientConfig config=new ClientConfig();
  config.getNetworkConfig().getDiscoveryConfig().addDiscoveryStrategyConfig(new DiscoveryStrategyConfig(new AwsDiscoveryStrategyFactory(),props));
  config.setProperty(ClientProperty.DISCOVERY_SPI_ENABLED.getName(),""String_Node_Str"");
  config.setProperty(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED.getName(),""String_Node_Str"");
  HazelcastInstance client=HazelcastClient.newHazelcastClient(config);
  IMap<Object,Object> map=client.getMap(""String_Node_Str"");
  map.put(1,5);
  assertEquals(5,map.get(1));
}","@Test public void testAwsClient_MemberNonDefaultPortConfig(){
  Map<String,Comparable> props=new HashMap<String,Comparable>();
  props.put(PORT.getDefinition().key(),""String_Node_Str"");
  props.put(ACCESS_KEY,System.getenv(""String_Node_Str""));
  props.put(SECRET_KEY,System.getenv(""String_Node_Str""));
  props.put(TAG_KEY.getDefinition().key(),AWS_TEST_TAG);
  props.put(TAG_VALUE.getDefinition().key(),AWS_TEST_TAG_VALUE);
  props.put(CONNECTION_TIMEOUT_SECONDS.getDefinition().key(),""String_Node_Str"");
  if (isOnJenkins()) {
    assertNotNull(""String_Node_Str"",props.get(ACCESS_KEY));
    assertNotNull(""String_Node_Str"",props.get(SECRET_KEY));
  }
 else {
    assumeThat(""String_Node_Str"",props.get(ACCESS_KEY),is(notNullValue()));
    assumeThat(""String_Node_Str"",props.get(SECRET_KEY),is(notNullValue()));
  }
  ClientConfig config=new ClientConfig();
  config.getNetworkConfig().getDiscoveryConfig().addDiscoveryStrategyConfig(new DiscoveryStrategyConfig(new AwsDiscoveryStrategyFactory(),props));
  config.setProperty(ClientProperty.DISCOVERY_SPI_ENABLED.getName(),""String_Node_Str"");
  config.setProperty(ClientProperty.DISCOVERY_SPI_PUBLIC_IP_ENABLED.getName(),""String_Node_Str"");
  HazelcastInstance client=HazelcastClient.newHazelcastClient(config);
  IMap<Object,Object> map=client.getMap(""String_Node_Str"");
  map.put(1,5);
  assertEquals(5,map.get(1));
}",0.9314574314574314
45927,"@Test public void testAwsAddressProvider(){
  String awsAccessKeyId=System.getenv(""String_Node_Str"");
  String awsSecretAccessKey=System.getenv(""String_Node_Str"");
  String instancePrivateIp=System.getenv(""String_Node_Str"");
  ClientAwsConfig clientAwsConfig=new ClientAwsConfig();
  if (isOnJenkins()) {
    assertNotNull(""String_Node_Str"",awsAccessKeyId);
    assertNotNull(""String_Node_Str"",awsSecretAccessKey);
    assertNotNull(""String_Node_Str"",instancePrivateIp);
    clientAwsConfig.setInsideAws(true);
  }
 else {
    assumeThat(""String_Node_Str"",awsAccessKeyId,Matchers.<String>notNullValue());
    assumeThat(""String_Node_Str"",awsSecretAccessKey,Matchers.<String>notNullValue());
    assumeThat(""String_Node_Str"",instancePrivateIp,Matchers.<String>notNullValue());
    clientAwsConfig.setInsideAws(false);
  }
  clientAwsConfig.setEnabled(true).setAccessKey(awsAccessKeyId).setSecretKey(awsSecretAccessKey).setTagKey(AWS_TEST_TAG).setTagValue(AWS_TEST_TAG_VALUE);
  ClientConfig clientConfig=new ClientConfig();
  String instanceName;
  if (clientConfig.getInstanceName() != null) {
    instanceName=clientConfig.getInstanceName();
  }
 else {
    instanceName=""String_Node_Str"";
  }
  GroupConfig groupConfig=clientConfig.getGroupConfig();
  String loggingType=clientConfig.getProperty(GroupProperty.LOGGING_TYPE.getName());
  LoggingService loggingService=new ClientLoggingService(groupConfig.getName(),loggingType,BuildInfoProvider.getBuildInfo(),instanceName);
  AwsAddressProvider awsAddressProvider=new AwsAddressProvider(clientAwsConfig,loggingService);
  Collection<Address> addresses=awsAddressProvider.loadAddresses();
  assertTrue(""String_Node_Str"",isNotEmpty(addresses));
  assertEquals(instancePrivateIp,addresses.iterator().next().getHost());
}","@Test public void testAwsAddressProvider(){
  String awsAccessKeyId=System.getenv(""String_Node_Str"");
  String awsSecretAccessKey=System.getenv(""String_Node_Str"");
  String instancePrivateIp=System.getenv(""String_Node_Str"");
  ClientAwsConfig clientAwsConfig=new ClientAwsConfig();
  if (isOnJenkins()) {
    assertNotNull(""String_Node_Str"",awsAccessKeyId);
    assertNotNull(""String_Node_Str"",awsSecretAccessKey);
    assertNotNull(""String_Node_Str"",instancePrivateIp);
    clientAwsConfig.setInsideAws(true);
  }
 else {
    assumeThat(""String_Node_Str"",awsAccessKeyId,is(notNullValue()));
    assumeThat(""String_Node_Str"",awsSecretAccessKey,is(notNullValue()));
    assumeThat(""String_Node_Str"",instancePrivateIp,is(notNullValue()));
    clientAwsConfig.setInsideAws(false);
  }
  clientAwsConfig.setEnabled(true).setAccessKey(awsAccessKeyId).setSecretKey(awsSecretAccessKey).setTagKey(AWS_TEST_TAG).setTagValue(AWS_TEST_TAG_VALUE);
  ClientConfig clientConfig=new ClientConfig();
  String instanceName;
  if (clientConfig.getInstanceName() != null) {
    instanceName=clientConfig.getInstanceName();
  }
 else {
    instanceName=""String_Node_Str"";
  }
  GroupConfig groupConfig=clientConfig.getGroupConfig();
  String loggingType=clientConfig.getProperty(GroupProperty.LOGGING_TYPE.getName());
  LoggingService loggingService=new ClientLoggingService(groupConfig.getName(),loggingType,BuildInfoProvider.getBuildInfo(),instanceName);
  AwsAddressProvider awsAddressProvider=new AwsAddressProvider(clientAwsConfig,loggingService);
  Collection<Address> addresses=awsAddressProvider.loadAddresses();
  assertTrue(""String_Node_Str"",isNotEmpty(addresses));
  assertEquals(instancePrivateIp,addresses.iterator().next().getHost());
}",0.9819948556730494
45928,"private static void boundsCheck(final byte[] buffer,final int index,final int length){
  if (SHOULD_BOUNDS_CHECK) {
    final int capacity=buffer.length;
    if (index < 0 || length < 0 || (index + length) > capacity) {
      throw new IndexOutOfBoundsException(String.format(""String_Node_Str"",index,length,capacity));
    }
  }
}","private static void boundsCheck(final byte[] buffer,final int index,final int length){
  if (SHOULD_BOUNDS_CHECK) {
    ArrayUtils.boundsCheck(buffer.length,index,length);
  }
}",0.6193293885601578
45929,"@Override public final int read(byte[] b,int off,int len) throws EOFException {
  if (b == null) {
    throw new NullPointerException();
  }
 else   if (off < 0 || len < 0 || len > b.length - off) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
  if (pos >= size) {
    return -1;
  }
  if (pos + len > size) {
    len=size - pos;
  }
  System.arraycopy(data,pos,b,off,len);
  pos+=len;
  return len;
}","@Override public final int read(byte[] b,int off,int len) throws EOFException {
  if (b == null) {
    throw new NullPointerException();
  }
 else {
    ArrayUtils.boundsCheck(b.length,off,len);
  }
  if (len == 0) {
    return 0;
  }
  if (pos >= size) {
    return -1;
  }
  if (pos + len > size) {
    len=size - pos;
  }
  System.arraycopy(data,pos,b,off,len);
  pos+=len;
  return len;
}",0.8291517323775388
45930,"@Override public void write(byte[] b,int off,int len){
  if ((off < 0) || (len < 0) || ((off + len) > b.length)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return;
  }
  ensureAvailable(len);
  System.arraycopy(b,off,buffer,pos,len);
  pos+=len;
}","@Override public void write(byte[] b,int off,int len){
  if (b == null) {
    throw new NullPointerException();
  }
 else {
    ArrayUtils.boundsCheck(b.length,off,len);
  }
  if (len == 0) {
    return;
  }
  ensureAvailable(len);
  System.arraycopy(b,off,buffer,pos,len);
  pos+=len;
}",0.7288732394366197
45931,"private static void boundsCheck(final byte[] buffer,final int index,final int length){
  if (SHOULD_BOUNDS_CHECK) {
    final int capacity=buffer.length;
    if (index < 0 || length < 0 || (index + length) > capacity) {
      throw new IndexOutOfBoundsException(String.format(""String_Node_Str"",index,length,capacity));
    }
  }
}","private static void boundsCheck(final byte[] buffer,final int index,final int length){
  if (SHOULD_BOUNDS_CHECK) {
    ArrayUtils.boundsCheck(buffer.length,index,length);
  }
}",0.6193293885601578
45932,"@Override public final int read(byte[] b,int off,int len) throws EOFException {
  if (b == null) {
    throw new NullPointerException();
  }
 else   if (off < 0 || len < 0 || len > b.length - off) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
  if (pos >= size) {
    return -1;
  }
  if (pos + len > size) {
    len=size - pos;
  }
  System.arraycopy(data,pos,b,off,len);
  pos+=len;
  return len;
}","@Override public final int read(byte[] b,int off,int len) throws EOFException {
  if (b == null) {
    throw new NullPointerException();
  }
 else {
    ArrayUtils.boundsCheck(b.length,off,len);
  }
  if (len == 0) {
    return 0;
  }
  if (pos >= size) {
    return -1;
  }
  if (pos + len > size) {
    len=size - pos;
  }
  System.arraycopy(data,pos,b,off,len);
  pos+=len;
  return len;
}",0.8291517323775388
45933,"@Override public void write(byte[] b,int off,int len){
  if ((off < 0) || (len < 0) || ((off + len) > b.length)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return;
  }
  ensureAvailable(len);
  System.arraycopy(b,off,buffer,pos,len);
  pos+=len;
}","@Override public void write(byte[] b,int off,int len){
  if (b == null) {
    throw new NullPointerException();
  }
 else {
    ArrayUtils.boundsCheck(b.length,off,len);
  }
  if (len == 0) {
    return;
  }
  ensureAvailable(len);
  System.arraycopy(b,off,buffer,pos,len);
  pos+=len;
}",0.7288732394366197
45934,"@Override public void readData(ObjectDataInput in) throws IOException {
  attributeName=in.readUTF();
  expression=in.readUTF();
}","@Override public void readData(ObjectDataInput in) throws IOException {
  super.readData(in);
  expression=in.readUTF();
}",0.8888888888888888
45935,"public LikePredicate(String attributeName,String expression){
  this.attributeName=attributeName;
  this.expression=expression;
}","public LikePredicate(String attributeName,String expression){
  super(attributeName);
  this.expression=expression;
}",0.902439024390244
45936,"@Override public void writeData(ObjectDataOutput out) throws IOException {
  out.writeUTF(attributeName);
  out.writeUTF(expression);
}","@Override public void writeData(ObjectDataOutput out) throws IOException {
  super.writeData(out);
  out.writeUTF(expression);
}",0.9125475285171104
45937,"@Override public void readData(ObjectDataInput in) throws IOException {
  attributeName=in.readUTF();
  regex=in.readUTF();
}","@Override public void readData(ObjectDataInput in) throws IOException {
  super.readData(in);
  regex=in.readUTF();
}",0.8842975206611571
45938,"public RegexPredicate(String attributeName,String regex){
  this.attributeName=attributeName;
  this.regex=regex;
}","public RegexPredicate(String attributeName,String regex){
  super(attributeName);
  this.regex=regex;
}",0.8899082568807339
45939,"@Override public void writeData(ObjectDataOutput out) throws IOException {
  out.writeUTF(attributeName);
  out.writeUTF(regex);
}","@Override public void writeData(ObjectDataOutput out) throws IOException {
  super.writeData(out);
  out.writeUTF(regex);
}",0.9090909090909092
45940,"/** 
 * Returns the number of registered   {@link javax.cache.spi.CachingProvider} from the static registry in {@link Caching}.
 */
public static int getCachingProviderRegistrySize(){
  try {
    Field providerRegistryField=getProviderRegistryField();
    Map<ClassLoader,Map<String,CachingProvider>> providerMap=getProviderMap(providerRegistryField);
    int count=0;
    for (    Map<String,CachingProvider> providers : providerMap.values()) {
      count+=providers.values().size();
    }
    return count;
  }
 catch (  Exception e) {
    return -1;
  }
}","/** 
 * Returns the number of registered   {@link javax.cache.spi.CachingProvider} from the static registry in {@link Caching}.
 */
public static int getCachingProviderRegistrySize(){
  try {
    Field providerRegistryField=getProviderRegistryField();
    Map<ClassLoader,Map<String,CachingProvider>> providerMap=getProviderMap(providerRegistryField);
    int count=0;
    for (    Map<String,CachingProvider> providers : providerMap.values()) {
      count+=providers.values().size();
    }
    return count;
  }
 catch (  NoClassDefFoundError e) {
    return -1;
  }
catch (  Exception e) {
    return -1;
  }
}",0.940273037542662
45941,"private void invokeOnAllMembers(Operation operation){
  NodeEngineImpl nodeEngine=instance.node.nodeEngine;
  OperationService os=nodeEngine.getOperationService();
  String uuid=nodeEngine.getLocalMember().getUuid();
  operation.setCallerUuid(uuid).setNodeEngine(nodeEngine);
  try {
    for (    Member member : nodeEngine.getClusterService().getMembers()) {
      if (!member.localMember()) {
        os.send(operation,member.getAddress());
      }
 else {
        os.execute(operation);
      }
    }
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
}","private void invokeOnAllMembers(Operation operation){
  NodeEngineImpl nodeEngine=instance.node.nodeEngine;
  OperationService os=nodeEngine.getOperationService();
  String uuid=nodeEngine.getLocalMember().getUuid();
  operation.setCallerUuid(uuid).setNodeEngine(nodeEngine);
  try {
    for (    Member member : nodeEngine.getClusterService().getMembers()) {
      if (!member.localMember()) {
        os.invokeOnTarget(ClusterServiceImpl.SERVICE_NAME,operation,member.getAddress());
      }
 else {
        os.execute(operation);
      }
    }
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
}",0.9563025210084034
45942,"@Override public void promoteLocalLiteMember(){
  MemberImpl member=getLocalMember();
  if (!member.isLiteMember()) {
    throw new IllegalStateException(member + ""String_Node_Str"");
  }
  MemberImpl master=getMasterMember();
  PromoteLiteMemberOp op=new PromoteLiteMemberOp();
  op.setCallerUuid(member.getUuid());
  InternalCompletableFuture<MembersView> future=nodeEngine.getOperationService().invokeOnTarget(SERVICE_NAME,op,master.getAddress());
  MembersView view=future.join();
  lock.lock();
  try {
    if (!member.getAddress().equals(master.getAddress())) {
      updateMembers(view,master.getAddress(),master.getUuid());
    }
    MemberImpl localMemberInMemberList=membershipManager.getMember(member.getAddress());
    if (localMemberInMemberList.isLiteMember()) {
      throw new IllegalStateException(""String_Node_Str"" + master.getAddress() + ""String_Node_Str""+ getMasterAddress());
    }
    localMember=new MemberImpl(member.getAddress(),member.getVersion(),true,member.getUuid(),member.getAttributes(),false,member.getMemberListJoinVersion(),node.hazelcastInstance);
  }
  finally {
    lock.unlock();
  }
}","@Override public void promoteLocalLiteMember(){
  MemberImpl member=getLocalMember();
  if (!member.isLiteMember()) {
    throw new IllegalStateException(member + ""String_Node_Str"");
  }
  MemberImpl master=getMasterMember();
  PromoteLiteMemberOp op=new PromoteLiteMemberOp();
  op.setCallerUuid(member.getUuid());
  InternalCompletableFuture<MembersView> future=nodeEngine.getOperationService().invokeOnTarget(SERVICE_NAME,op,master.getAddress());
  MembersView view=future.join();
  lock.lock();
  try {
    if (!member.getAddress().equals(master.getAddress())) {
      updateMembers(view,master.getAddress(),master.getUuid());
    }
    MemberImpl localMemberInMemberList=membershipManager.getMember(member.getAddress());
    if (localMemberInMemberList.isLiteMember()) {
      throw new IllegalStateException(""String_Node_Str"" + master.getAddress() + ""String_Node_Str""+ getMasterAddress());
    }
  }
  finally {
    lock.unlock();
  }
}",0.8842615012106537
45943,"public void updateMemberAttribute(String uuid,MemberAttributeOperationType operationType,String key,Object value){
  lock.lock();
  try {
    for (    MemberImpl member : membershipManager.getMembers()) {
      if (member.getUuid().equals(uuid)) {
        if (!member.equals(getLocalMember())) {
          member.updateAttribute(operationType,key,value);
        }
        sendMemberAttributeEvent(member,operationType,key,value);
        break;
      }
    }
  }
  finally {
    lock.unlock();
  }
}","public void updateMemberAttribute(String uuid,MemberAttributeOperationType operationType,String key,Object value){
  lock.lock();
  try {
    MemberImpl member=membershipManager.getMember(uuid);
    if (!member.equals(getLocalMember())) {
      member.updateAttribute(operationType,key,value);
    }
    sendMemberAttributeEvent(member,operationType,key,value);
  }
  finally {
    lock.unlock();
  }
}",0.720620842572062
45944,"private MemberImpl createNewMemberImplIfChanged(MemberInfo newMemberInfo,MemberImpl member){
  if (member.isLiteMember() && !newMemberInfo.isLiteMember()) {
    logger.info(member + ""String_Node_Str"");
    member=createMember(newMemberInfo);
  }
 else   if (member.getMemberListJoinVersion() != newMemberInfo.getMemberListJoinVersion()) {
    if (member.getMemberListJoinVersion() != NA_MEMBER_LIST_JOIN_VERSION) {
      logger.fine(""String_Node_Str"" + member + ""String_Node_Str""+ newMemberInfo.getMemberListJoinVersion()+ ""String_Node_Str""+ member.getMemberListJoinVersion());
    }
    member=createMember(newMemberInfo);
  }
  return member;
}","private MemberImpl createNewMemberImplIfChanged(MemberInfo newMemberInfo,MemberImpl member){
  if (member.isLiteMember() && !newMemberInfo.isLiteMember()) {
    logger.info(member + ""String_Node_Str"");
    if (member.localMember()) {
      member=clusterService.promoteAndGetLocalMember();
    }
 else {
      member=createMember(newMemberInfo,member.getAttributes());
    }
  }
 else   if (member.getMemberListJoinVersion() != newMemberInfo.getMemberListJoinVersion()) {
    if (member.getMemberListJoinVersion() != NA_MEMBER_LIST_JOIN_VERSION) {
      logger.fine(""String_Node_Str"" + member + ""String_Node_Str""+ newMemberInfo.getMemberListJoinVersion()+ ""String_Node_Str""+ member.getMemberListJoinVersion());
    }
    if (member.localMember()) {
      setLocalMemberListJoinVersion(newMemberInfo.getMemberListJoinVersion());
      member=clusterService.getLocalMember();
    }
 else {
      member=createMember(newMemberInfo,member.getAttributes());
    }
  }
  return member;
}",0.7891825445605408
45945,"private MemberImpl createMember(MemberInfo memberInfo){
  Address address=memberInfo.getAddress();
  Address thisAddress=node.getThisAddress();
  String ipV6ScopeId=thisAddress.getScopeId();
  address.setScopeId(ipV6ScopeId);
  boolean localMember=thisAddress.equals(address);
  return new MemberImpl(address,memberInfo.getVersion(),localMember,memberInfo.getUuid(),memberInfo.getAttributes(),memberInfo.isLiteMember(),memberInfo.getMemberListJoinVersion(),node.hazelcastInstance);
}","private MemberImpl createMember(MemberInfo memberInfo,Map<String,Object> attributes){
  Address address=memberInfo.getAddress();
  Address thisAddress=node.getThisAddress();
  String ipV6ScopeId=thisAddress.getScopeId();
  address.setScopeId(ipV6ScopeId);
  boolean localMember=thisAddress.equals(address);
  return new MemberImpl(address,memberInfo.getVersion(),localMember,memberInfo.getUuid(),attributes,memberInfo.isLiteMember(),memberInfo.getMemberListJoinVersion(),node.hazelcastInstance);
}",0.9510204081632652
45946,"public MembersView promoteToNormalMember(Address address,String uuid){
  clusterServiceLock.lock();
  try {
    ensureLiteMemberPromotionIsAllowed();
    MemberMap memberMap=getMemberMap();
    MemberImpl member=memberMap.getMember(address,uuid);
    if (member == null) {
      throw new IllegalStateException(uuid + ""String_Node_Str"" + address+ ""String_Node_Str"");
    }
    if (!member.isLiteMember()) {
      logger.fine(member + ""String_Node_Str"");
      return memberMap.toMembersView();
    }
    logger.info(""String_Node_Str"" + member + ""String_Node_Str"");
    MemberImpl[] members=memberMap.getMembers().toArray(new MemberImpl[0]);
    for (int i=0; i < members.length; i++) {
      if (member.equals(members[i])) {
        member=new MemberImpl(member.getAddress(),member.getVersion(),member.localMember(),member.getUuid(),member.getAttributes(),false,members[i].getMemberListJoinVersion(),node.hazelcastInstance);
        members[i]=member;
        break;
      }
    }
    MemberMap newMemberMap=MemberMap.createNew(memberMap.getVersion() + 1,members);
    setMembers(newMemberMap);
    sendMemberListToOthers();
    node.partitionService.memberAdded(member);
    clusterService.printMemberList();
    return newMemberMap.toMembersView();
  }
  finally {
    clusterServiceLock.unlock();
  }
}","public MembersView promoteToNormalMember(Address address,String uuid){
  clusterServiceLock.lock();
  try {
    ensureLiteMemberPromotionIsAllowed();
    MemberMap memberMap=getMemberMap();
    MemberImpl member=memberMap.getMember(address,uuid);
    if (member == null) {
      throw new IllegalStateException(uuid + ""String_Node_Str"" + address+ ""String_Node_Str"");
    }
    if (!member.isLiteMember()) {
      logger.fine(member + ""String_Node_Str"");
      return memberMap.toMembersView();
    }
    logger.info(""String_Node_Str"" + member + ""String_Node_Str"");
    MemberImpl[] members=memberMap.getMembers().toArray(new MemberImpl[0]);
    for (int i=0; i < members.length; i++) {
      if (member.equals(members[i])) {
        if (member.localMember()) {
          member=clusterService.promoteAndGetLocalMember();
        }
 else {
          member=new MemberImpl(member.getAddress(),member.getVersion(),member.localMember(),member.getUuid(),member.getAttributes(),false,members[i].getMemberListJoinVersion(),node.hazelcastInstance);
        }
        members[i]=member;
        break;
      }
    }
    MemberMap newMemberMap=MemberMap.createNew(memberMap.getVersion() + 1,members);
    setMembers(newMemberMap);
    sendMemberListToOthers();
    node.partitionService.memberAdded(member);
    clusterService.printMemberList();
    return newMemberMap.toMembersView();
  }
  finally {
    clusterServiceLock.unlock();
  }
}",0.9539473684210528
45947,"private void invokeOnAllMembers(Operation operation){
  NodeEngineImpl nodeEngine=instance.node.nodeEngine;
  OperationService os=nodeEngine.getOperationService();
  String uuid=nodeEngine.getLocalMember().getUuid();
  operation.setCallerUuid(uuid).setNodeEngine(nodeEngine);
  try {
    for (    Member member : nodeEngine.getClusterService().getMembers()) {
      if (!member.localMember()) {
        os.send(operation,member.getAddress());
      }
 else {
        os.execute(operation);
      }
    }
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
}","private void invokeOnAllMembers(Operation operation){
  NodeEngineImpl nodeEngine=instance.node.nodeEngine;
  OperationService os=nodeEngine.getOperationService();
  String uuid=nodeEngine.getLocalMember().getUuid();
  operation.setCallerUuid(uuid).setNodeEngine(nodeEngine);
  try {
    for (    Member member : nodeEngine.getClusterService().getMembers()) {
      if (!member.localMember()) {
        os.invokeOnTarget(ClusterServiceImpl.SERVICE_NAME,operation,member.getAddress());
      }
 else {
        os.execute(operation);
      }
    }
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
}",0.9563025210084034
45948,"@Override public void promoteLocalLiteMember(){
  if (getClusterVersion().isLessThan(Versions.V3_9)) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  MemberImpl member=getLocalMember();
  if (!member.isLiteMember()) {
    throw new IllegalStateException(member + ""String_Node_Str"");
  }
  MemberImpl master=getMasterMember();
  PromoteLiteMemberOp op=new PromoteLiteMemberOp();
  op.setCallerUuid(member.getUuid());
  InternalCompletableFuture<MembersView> future=nodeEngine.getOperationService().invokeOnTarget(SERVICE_NAME,op,master.getAddress());
  MembersView view=future.join();
  lock.lock();
  try {
    if (!member.getAddress().equals(master.getAddress())) {
      updateMembers(view,master.getAddress(),master.getUuid());
    }
    MemberImpl localMemberInMemberList=membershipManager.getMember(member.getAddress());
    if (localMemberInMemberList.isLiteMember()) {
      throw new IllegalStateException(""String_Node_Str"" + master.getAddress() + ""String_Node_Str""+ getMasterAddress());
    }
    localMember=new MemberImpl(member.getAddress(),member.getVersion(),true,member.getUuid(),member.getAttributes(),false,node.hazelcastInstance);
  }
  finally {
    lock.unlock();
  }
}","@Override public void promoteLocalLiteMember(){
  if (getClusterVersion().isLessThan(Versions.V3_9)) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  MemberImpl member=getLocalMember();
  if (!member.isLiteMember()) {
    throw new IllegalStateException(member + ""String_Node_Str"");
  }
  MemberImpl master=getMasterMember();
  PromoteLiteMemberOp op=new PromoteLiteMemberOp();
  op.setCallerUuid(member.getUuid());
  InternalCompletableFuture<MembersView> future=nodeEngine.getOperationService().invokeOnTarget(SERVICE_NAME,op,master.getAddress());
  MembersView view=future.join();
  lock.lock();
  try {
    if (!member.getAddress().equals(master.getAddress())) {
      updateMembers(view,master.getAddress(),master.getUuid());
    }
    MemberImpl localMemberInMemberList=membershipManager.getMember(member.getAddress());
    if (localMemberInMemberList.isLiteMember()) {
      throw new IllegalStateException(""String_Node_Str"" + master.getAddress() + ""String_Node_Str""+ getMasterAddress());
    }
  }
  finally {
    lock.unlock();
  }
}",0.9099692577953448
45949,"public void updateMemberAttribute(String uuid,MemberAttributeOperationType operationType,String key,Object value){
  lock.lock();
  try {
    for (    MemberImpl member : membershipManager.getMembers()) {
      if (member.getUuid().equals(uuid)) {
        if (!member.equals(getLocalMember())) {
          member.updateAttribute(operationType,key,value);
        }
        sendMemberAttributeEvent(member,operationType,key,value);
        break;
      }
    }
  }
  finally {
    lock.unlock();
  }
}","public void updateMemberAttribute(String uuid,MemberAttributeOperationType operationType,String key,Object value){
  lock.lock();
  try {
    MemberImpl member=membershipManager.getMember(uuid);
    if (!member.equals(getLocalMember())) {
      member.updateAttribute(operationType,key,value);
    }
    sendMemberAttributeEvent(member,operationType,key,value);
  }
  finally {
    lock.unlock();
  }
}",0.720620842572062
45950,"private MemberImpl createMember(MemberInfo memberInfo){
  Address address=memberInfo.getAddress();
  Address thisAddress=node.getThisAddress();
  String ipV6ScopeId=thisAddress.getScopeId();
  address.setScopeId(ipV6ScopeId);
  boolean localMember=thisAddress.equals(address);
  return new MemberImpl(address,memberInfo.getVersion(),localMember,memberInfo.getUuid(),memberInfo.getAttributes(),memberInfo.isLiteMember(),node.hazelcastInstance);
}","private MemberImpl createMember(MemberInfo memberInfo,Map<String,Object> attributes){
  Address address=memberInfo.getAddress();
  Address thisAddress=node.getThisAddress();
  String ipV6ScopeId=thisAddress.getScopeId();
  address.setScopeId(ipV6ScopeId);
  boolean localMember=thisAddress.equals(address);
  return new MemberImpl(address,memberInfo.getVersion(),localMember,memberInfo.getUuid(),attributes,memberInfo.isLiteMember(),node.hazelcastInstance);
}",0.9469026548672568
45951,"public MembersView promoteToNormalMember(Address address,String uuid){
  clusterServiceLock.lock();
  try {
    ensureLiteMemberPromotionIsAllowed();
    MemberMap memberMap=memberMapRef.get();
    MemberImpl member=memberMap.getMember(address,uuid);
    if (member == null) {
      throw new IllegalStateException(uuid + ""String_Node_Str"" + address+ ""String_Node_Str"");
    }
    if (!member.isLiteMember()) {
      logger.fine(member + ""String_Node_Str"");
      return memberMap.toMembersView();
    }
    logger.info(""String_Node_Str"" + member + ""String_Node_Str"");
    MemberImpl[] members=memberMap.getMembers().toArray(new MemberImpl[0]);
    for (int i=0; i < members.length; i++) {
      if (member.equals(members[i])) {
        member=new MemberImpl(member.getAddress(),member.getVersion(),member.localMember(),member.getUuid(),member.getAttributes(),false,node.hazelcastInstance);
        members[i]=member;
        break;
      }
    }
    MemberMap newMemberMap=MemberMap.createNew(memberMap.getVersion() + 1,members);
    setMembers(newMemberMap);
    sendMemberListToOthers();
    node.partitionService.memberAdded(member);
    clusterService.printMemberList();
    return newMemberMap.toMembersView();
  }
  finally {
    clusterServiceLock.unlock();
  }
}","public MembersView promoteToNormalMember(Address address,String uuid){
  clusterServiceLock.lock();
  try {
    ensureLiteMemberPromotionIsAllowed();
    MemberMap memberMap=memberMapRef.get();
    MemberImpl member=memberMap.getMember(address,uuid);
    if (member == null) {
      throw new IllegalStateException(uuid + ""String_Node_Str"" + address+ ""String_Node_Str"");
    }
    if (!member.isLiteMember()) {
      logger.fine(member + ""String_Node_Str"");
      return memberMap.toMembersView();
    }
    logger.info(""String_Node_Str"" + member + ""String_Node_Str"");
    MemberImpl[] members=memberMap.getMembers().toArray(new MemberImpl[0]);
    for (int i=0; i < members.length; i++) {
      if (member.equals(members[i])) {
        if (member.localMember()) {
          member=clusterService.promoteAndGetLocalMember();
        }
 else {
          member=new MemberImpl(member.getAddress(),member.getVersion(),member.localMember(),member.getUuid(),member.getAttributes(),false,node.hazelcastInstance);
        }
        members[i]=member;
        break;
      }
    }
    MemberMap newMemberMap=MemberMap.createNew(memberMap.getVersion() + 1,members);
    setMembers(newMemberMap);
    sendMemberListToOthers();
    node.partitionService.memberAdded(member);
    clusterService.printMemberList();
    return newMemberMap.toMembersView();
  }
  finally {
    clusterServiceLock.unlock();
  }
}",0.9527736131934031
45952,"@Test public void testConstructor(){
  assertUtilityConstructor(BitSetUtils.class);
}","@Test public void testConstructor(){
  assertUtilityConstructor(SetUtil.class);
}",0.9759036144578314
45953,"BaseIndexStore(IndexCopyBehavior copyOn){
  if (copyOn == IndexCopyBehavior.COPY_ON_WRITE || copyOn == IndexCopyBehavior.NEVER) {
    resultCopyFunctor=new PassThroughFunctor();
  }
 else {
    resultCopyFunctor=new CopyInputFunctor();
  }
}","BaseIndexStore(IndexCopyBehavior copyOn){
  this.copyOn=copyOn;
  if (copyOn == IndexCopyBehavior.COPY_ON_WRITE || copyOn == IndexCopyBehavior.NEVER) {
    resultCopyFunctor=new PassThroughFunctor();
  }
 else {
    resultCopyFunctor=new CopyInputFunctor();
  }
}",0.9563492063492064
45954,"@Override public void clear(){
  takeWriteLock();
  try {
    recordsWithNullValue.clear();
    recordMap.clear();
  }
  finally {
    releaseWriteLock();
  }
}","@Override public void clear(){
  takeWriteLock();
  try {
    if (copyOn == IndexCopyBehavior.COPY_ON_WRITE) {
      recordsWithNullValue=Collections.emptyMap();
    }
 else {
      recordsWithNullValue.clear();
    }
    recordMap.clear();
  }
  finally {
    releaseWriteLock();
  }
}",0.6278026905829597
45955,"@Override public void clear(){
  takeWriteLock();
  try {
    recordsWithNullValue.clear();
    recordMap.clear();
  }
  finally {
    releaseWriteLock();
  }
}","@Override public void clear(){
  takeWriteLock();
  try {
    if (copyOn == IndexCopyBehavior.COPY_ON_WRITE) {
      recordsWithNullValue=Collections.emptyMap();
    }
 else {
      recordsWithNullValue.clear();
    }
    recordMap.clear();
  }
  finally {
    releaseWriteLock();
  }
}",0.6278026905829597
45956,"@Override public final void afterRun() throws Exception {
  if (cache != null) {
    afterRunInternal();
  }
}","@Override public final void afterRun() throws Exception {
  if (cache != null) {
    afterRunInternal();
  }
  super.afterRun();
}",0.9166666666666666
45957,"@Override public void afterRun() throws Exception {
  if (cache.isWanReplicationEnabled()) {
    CacheRecord record=cache.getRecord(key);
    if (record != null) {
      CacheEntryView<Data,Data> entryView=CacheEntryViews.createDefaultEntryView(key,getNodeEngine().getSerializationService().toData(backupRecord.getValue()),backupRecord);
      wanEventPublisher.publishWanReplicationUpdate(name,entryView);
    }
 else {
      wanEventPublisher.publishWanReplicationRemove(name,key);
    }
  }
}","@Override public void afterRun() throws Exception {
  if (cache.isWanReplicationEnabled()) {
    CacheRecord record=cache.getRecord(key);
    if (record != null) {
      CacheEntryView<Data,Data> entryView=CacheEntryViews.createDefaultEntryView(key,getNodeEngine().getSerializationService().toData(backupRecord.getValue()),backupRecord);
      wanEventPublisher.publishWanReplicationUpdate(name,entryView);
    }
 else {
      wanEventPublisher.publishWanReplicationRemove(name,key);
    }
  }
  super.afterRun();
}",0.9801980198019802
45958,"@Override public void afterRun() throws Exception {
  if (response != null) {
    if (cache.isWanReplicationEnabled()) {
      wanEventPublisher.publishWanReplicationRemove(name,key);
    }
  }
}","@Override public void afterRun() throws Exception {
  if (response != null) {
    if (cache.isWanReplicationEnabled()) {
      wanEventPublisher.publishWanReplicationRemove(name,key);
    }
  }
  super.afterRun();
}",0.951219512195122
45959,"@Override public void afterRun() throws Exception {
  if (cache.isWanReplicationEnabled()) {
    CacheEntryView<Data,Data> entryView=CacheEntryViews.createDefaultEntryView(key,getNodeEngine().getSerializationService().toData(backupRecord.getValue()),backupRecord);
    wanEventPublisher.publishWanReplicationUpdate(name,entryView);
  }
}","@Override public void afterRun() throws Exception {
  if (cache.isWanReplicationEnabled()) {
    CacheEntryView<Data,Data> entryView=CacheEntryViews.createDefaultEntryView(key,getNodeEngine().getSerializationService().toData(backupRecord.getValue()),backupRecord);
    wanEventPublisher.publishWanReplicationUpdate(name,entryView);
  }
  super.afterRun();
}",0.9711815561959656
45960,"@Override public void afterRun() throws Exception {
  if (Boolean.TRUE.equals(response)) {
    if (cache.isWanReplicationEnabled()) {
      CacheEntryView<Data,Data> entryView=CacheEntryViews.createDefaultEntryView(key,value,backupRecord);
      wanEventPublisher.publishWanReplicationUpdate(name,entryView);
    }
  }
}","@Override public void afterRun() throws Exception {
  if (Boolean.TRUE.equals(response)) {
    if (cache.isWanReplicationEnabled()) {
      CacheEntryView<Data,Data> entryView=CacheEntryViews.createDefaultEntryView(key,value,backupRecord);
      wanEventPublisher.publishWanReplicationUpdate(name,entryView);
    }
  }
  super.afterRun();
}",0.9696969696969696
45961,"@Override public void afterRun() throws Exception {
  if (cache.isWanReplicationEnabled()) {
    CacheEntryView<Data,Data> entryView=CacheEntryViews.createDefaultEntryView(key,value,backupRecord);
    CacheWanEventPublisher publisher=cacheService.getCacheWanEventPublisher();
    publisher.publishWanReplicationUpdate(name,entryView);
  }
}","@Override public void afterRun() throws Exception {
  if (cache.isWanReplicationEnabled()) {
    CacheEntryView<Data,Data> entryView=CacheEntryViews.createDefaultEntryView(key,value,backupRecord);
    CacheWanEventPublisher publisher=cacheService.getCacheWanEventPublisher();
    publisher.publishWanReplicationUpdate(name,entryView);
  }
  super.afterRun();
}",0.9714285714285714
45962,"@Override public void afterRun() throws Exception {
  if (Boolean.TRUE.equals(response)) {
    if (cache.isWanReplicationEnabled()) {
      wanEventPublisher.publishWanReplicationRemove(name,key);
    }
  }
}","@Override public void afterRun() throws Exception {
  if (Boolean.TRUE.equals(response)) {
    if (cache.isWanReplicationEnabled()) {
      wanEventPublisher.publishWanReplicationRemove(name,key);
    }
  }
  super.afterRun();
}",0.9541284403669724
45963,"@Override public void afterRun() throws Exception {
  if (Boolean.TRUE.equals(response)) {
    if (cache.isWanReplicationEnabled()) {
      CacheEntryView<Data,Data> entryView=CacheEntryViews.createDefaultEntryView(key,newValue,backupRecord);
      wanEventPublisher.publishWanReplicationUpdate(name,entryView);
    }
  }
}","@Override public void afterRun() throws Exception {
  if (Boolean.TRUE.equals(response)) {
    if (cache.isWanReplicationEnabled()) {
      CacheEntryView<Data,Data> entryView=CacheEntryViews.createDefaultEntryView(key,newValue,backupRecord);
      wanEventPublisher.publishWanReplicationUpdate(name,entryView);
    }
  }
  super.afterRun();
}",0.96996996996997
45964,"protected ResultFuture(NodeEngine nodeEngine,ILogger logger){
  super(nodeEngine,logger);
}","ResultFuture(NodeEngine nodeEngine,ILogger logger){
  super(nodeEngine,logger);
}",0.9418604651162792
45965,"protected ResultFuture(NodeEngine nodeEngine,ILogger logger){
  super(nodeEngine,logger);
}","ResultFuture(NodeEngine nodeEngine,ILogger logger){
  super(nodeEngine,logger);
}",0.9418604651162792
45966,"private void invoke(ClientMessage request){
  try {
    ClientInvocation invocation=new ClientInvocation(instance,request,null);
    ClientInvocationFuture future=invocation.invoke();
    ClientMessage response=future.get();
  }
 catch (  Exception e) {
    throw rethrow(e);
  }
}","private void invoke(ClientMessage request){
  try {
    ClientInvocation invocation=new ClientInvocation(instance,request,null);
    ClientInvocationFuture future=invocation.invoke();
    future.get();
  }
 catch (  Exception e) {
    throw rethrow(e);
  }
}",0.9573283858998144
45967,"@Test public void serverRestartWhenReliableTopicListenerRegistered(){
  HazelcastInstance server=hazelcastFactory.newHazelcastInstance();
  HazelcastInstance hazelcastClient=hazelcastFactory.newHazelcastClient();
  HazelcastInstance hazelcastClient2=hazelcastFactory.newHazelcastClient();
  ITopic<Integer> topic=hazelcastClient.getReliableTopic(topicName);
  final ITopic<Integer> topic2=hazelcastClient2.getReliableTopic(topicName);
  final CountDownLatch listenerLatch=new CountDownLatch(1);
  topic.addMessageListener(new MessageListener<Integer>(){
    @Override public void onMessage(    Message<Integer> message){
      listenerLatch.countDown();
    }
  }
);
  server.getLifecycleService().terminate();
  hazelcastFactory.newHazelcastInstance();
  topic2.publish(5);
  assertOpenEventually(listenerLatch);
}","@Test public void serverRestartWhenReliableTopicListenerRegistered(){
  HazelcastInstance server=hazelcastFactory.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(Integer.MAX_VALUE);
  HazelcastInstance hazelcastClient=hazelcastFactory.newHazelcastClient(clientConfig);
  HazelcastInstance hazelcastClient2=hazelcastFactory.newHazelcastClient(clientConfig);
  ITopic<Integer> topic=hazelcastClient.getReliableTopic(topicName);
  final ITopic<Integer> topic2=hazelcastClient2.getReliableTopic(topicName);
  final CountDownLatch listenerLatch=new CountDownLatch(1);
  topic.addMessageListener(new MessageListener<Integer>(){
    @Override public void onMessage(    Message<Integer> message){
      listenerLatch.countDown();
    }
  }
);
  server.getLifecycleService().terminate();
  hazelcastFactory.newHazelcastInstance();
  topic2.publish(5);
  assertOpenEventually(listenerLatch);
}",0.914702581369248
45968,"@Test public void serverRestartWhenReliableTopicListenerRegistered(){
  HazelcastInstance server=hazelcastFactory.newHazelcastInstance();
  HazelcastInstance hazelcastClient=hazelcastFactory.newHazelcastClient();
  HazelcastInstance hazelcastClient2=hazelcastFactory.newHazelcastClient();
  ITopic<Integer> topic=hazelcastClient.getReliableTopic(topicName);
  final ITopic<Integer> topic2=hazelcastClient2.getReliableTopic(topicName);
  final CountDownLatch listenerLatch=new CountDownLatch(1);
  topic.addMessageListener(new MessageListener<Integer>(){
    @Override public void onMessage(    Message<Integer> message){
      listenerLatch.countDown();
    }
  }
);
  server.getLifecycleService().terminate();
  hazelcastFactory.newHazelcastInstance();
  topic2.publish(5);
  assertOpenEventually(listenerLatch);
}","@Test public void serverRestartWhenReliableTopicListenerRegistered(){
  HazelcastInstance server=hazelcastFactory.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(Integer.MAX_VALUE);
  HazelcastInstance hazelcastClient=hazelcastFactory.newHazelcastClient(clientConfig);
  HazelcastInstance hazelcastClient2=hazelcastFactory.newHazelcastClient(clientConfig);
  ITopic<Integer> topic=hazelcastClient.getReliableTopic(topicName);
  final ITopic<Integer> topic2=hazelcastClient2.getReliableTopic(topicName);
  final CountDownLatch listenerLatch=new CountDownLatch(1);
  topic.addMessageListener(new MessageListener<Integer>(){
    @Override public void onMessage(    Message<Integer> message){
      listenerLatch.countDown();
    }
  }
);
  server.getLifecycleService().terminate();
  hazelcastFactory.newHazelcastInstance();
  topic2.publish(5);
  assertOpenEventually(listenerLatch);
}",0.914702581369248
45969,"private void invokeOnSelection(){
  invokeCount++;
  try {
    if (isBindToSingleConnection()) {
      invocationService.invokeOnConnection(this,(ClientConnection)connection);
    }
 else     if (partitionId != -1) {
      invocationService.invokeOnPartitionOwner(this,partitionId);
    }
 else     if (address != null) {
      invocationService.invokeOnTarget(this,address);
    }
 else {
      invocationService.invokeOnRandomTarget(this);
    }
  }
 catch (  Exception e) {
    if (e instanceof HazelcastOverloadException) {
      throw (HazelcastOverloadException)e;
    }
    notifyException(e);
  }
}","private void invokeOnSelection(){
  INVOKE_COUNT.incrementAndGet(this);
  try {
    if (isBindToSingleConnection()) {
      invocationService.invokeOnConnection(this,(ClientConnection)connection);
    }
 else     if (partitionId != -1) {
      invocationService.invokeOnPartitionOwner(this,partitionId);
    }
 else     if (address != null) {
      invocationService.invokeOnTarget(this,address);
    }
 else {
      invocationService.invokeOnRandomTarget(this);
    }
  }
 catch (  Exception e) {
    if (e instanceof HazelcastOverloadException) {
      throw (HazelcastOverloadException)e;
    }
    notifyException(e);
  }
}",0.9635036496350364
45970,"/** 
 * @param operationFactory operation factory to use
 * @param partitions       partitions to invoke on
 */
public PartitionIteratingOperation(OperationFactory operationFactory,int[] partitions){
  this.operationFactory=operationFactory;
  this.partitions=partitions;
}","/** 
 * @param operationFactory operation factory to use
 * @param partitions       partitions to invoke on
 */
@SuppressFBWarnings(""String_Node_Str"") public PartitionIteratingOperation(OperationFactory operationFactory,int[] partitions){
  this.operationFactory=operationFactory;
  this.partitions=partitions;
}",0.9333333333333332
45971,"/** 
 * UnRegisters the mxbean if registered already.
 * @param cacheManagerName name generated by URI and classloader.
 * @param name cache name.
 * @param stats is mxbean, a statistics mxbean.
 */
public static void unregisterCacheObject(String cacheManagerName,String name,boolean stats){
synchronized (mBeanServer) {
    ObjectName objectName=calculateObjectName(cacheManagerName,name,stats);
    Set<ObjectName> registeredObjectNames=mBeanServer.queryNames(objectName,null);
    if (isRegistered(cacheManagerName,name,stats)) {
      for (      ObjectName registeredObjectName : registeredObjectNames) {
        try {
          mBeanServer.unregisterMBean(registeredObjectName);
        }
 catch (        Exception e) {
          throw new CacheException(""String_Node_Str"" + registeredObjectName + ""String_Node_Str""+ e.getMessage(),e);
        }
      }
    }
  }
}","/** 
 * UnRegisters the mxbean if registered already.
 * @param cacheManagerName name generated by URI and classloader.
 * @param name             cache name.
 * @param stats            is mxbean, a statistics mxbean.
 */
public static void unregisterCacheObject(String cacheManagerName,String name,boolean stats){
synchronized (mBeanServer) {
    ObjectName objectName=calculateObjectName(cacheManagerName,name,stats);
    Set<ObjectName> registeredObjectNames=mBeanServer.queryNames(objectName,null);
    if (isRegistered(cacheManagerName,name,stats)) {
      for (      ObjectName registeredObjectName : registeredObjectNames) {
        try {
          mBeanServer.unregisterMBean(registeredObjectName);
        }
 catch (        InstanceNotFoundException e) {
          ignore(e);
        }
catch (        Exception e) {
          throw new CacheException(""String_Node_Str"" + registeredObjectName + ""String_Node_Str""+ e.getMessage(),e);
        }
      }
    }
  }
}",0.9293478260869564
45972,"/** 
 * Registers the provided   {@link javax.cache.management.CacheMXBean} or{@link javax.cache.management.CacheStatisticsMXBean} implementations if not registered yet.
 * @param mxbean {@link javax.cache.management.CacheMXBean} or {@link javax.cache.management.CacheStatisticsMXBean}.
 * @param cacheManagerName name generated by URI and classloader.
 * @param name cache name.
 * @param stats is mxbean parameter, a statistics mxbean.
 */
public static void registerCacheObject(Object mxbean,String cacheManagerName,String name,boolean stats){
synchronized (mBeanServer) {
    ObjectName registeredObjectName=calculateObjectName(cacheManagerName,name,stats);
    try {
      if (!isRegistered(cacheManagerName,name,stats)) {
        mBeanServer.registerMBean(mxbean,registeredObjectName);
      }
    }
 catch (    Exception e) {
      throw new CacheException(""String_Node_Str"" + registeredObjectName + ""String_Node_Str""+ e.getMessage(),e);
    }
  }
}","/** 
 * Registers the provided   {@link javax.cache.management.CacheMXBean} or{@link javax.cache.management.CacheStatisticsMXBean} implementations if not registered yet.
 * @param mxbean           {@link javax.cache.management.CacheMXBean} or {@link javax.cache.management.CacheStatisticsMXBean}.
 * @param cacheManagerName name generated by URI and classloader.
 * @param name             cache name.
 * @param stats            is mxbean parameter, a statistics mxbean.
 */
public static void registerCacheObject(Object mxbean,String cacheManagerName,String name,boolean stats){
synchronized (mBeanServer) {
    ObjectName registeredObjectName=calculateObjectName(cacheManagerName,name,stats);
    try {
      if (!isRegistered(cacheManagerName,name,stats)) {
        mBeanServer.registerMBean(mxbean,registeredObjectName);
      }
    }
 catch (    Exception e) {
      throw new CacheException(""String_Node_Str"" + registeredObjectName + ""String_Node_Str""+ e.getMessage(),e);
    }
  }
}",0.9830334190231362
45973,"@Override public SecurityService getSecurityService(){
  return new NoOpSecurityService(node.getConfig().getSecurityConfig().getClientPermissionConfigs());
}","@Override public SecurityService getSecurityService(){
  return null;
}",0.6140350877192983
45974,"private void doHandleUpdatePermissions(HttpPostCommand command) throws UnsupportedEncodingException {
  if (!checkCredentials(command)) {
    String res=response(ResponseType.FORBIDDEN);
    command.setResponse(HttpCommand.CONTENT_TYPE_JSON,stringToBytes(res));
    return;
  }
  SecurityService securityService=textCommandService.getNode().getSecurityService();
  if (securityService instanceof NoOpSecurityService) {
    String res=response(ResponseType.FAIL,""String_Node_Str"",""String_Node_Str"");
    command.setResponse(HttpCommand.CONTENT_TYPE_JSON,stringToBytes(res));
    return;
  }
  String res;
  byte[] data=command.getData();
  String[] strList=bytesToString(data).split(""String_Node_Str"");
  String permConfigsJSON=URLDecoder.decode(strList[2],""String_Node_Str"");
  try {
    UpdatePermissionConfigRequest request=new UpdatePermissionConfigRequest();
    request.fromJson(Json.parse(permConfigsJSON).asObject());
    securityService.refreshClientPermissions(request.getPermissionConfigs());
    res=response(ResponseType.SUCCESS,""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception ex) {
    logger.warning(""String_Node_Str"",ex);
    res=exceptionResponse(ex);
  }
  command.setResponse(HttpCommand.CONTENT_TYPE_JSON,stringToBytes(res));
}","private void doHandleUpdatePermissions(HttpPostCommand command) throws UnsupportedEncodingException {
  if (!checkCredentials(command)) {
    String res=response(ResponseType.FORBIDDEN);
    command.setResponse(HttpCommand.CONTENT_TYPE_JSON,stringToBytes(res));
    return;
  }
  SecurityService securityService=textCommandService.getNode().getSecurityService();
  if (securityService == null) {
    String res=response(ResponseType.FAIL,""String_Node_Str"",""String_Node_Str"");
    command.setResponse(HttpCommand.CONTENT_TYPE_JSON,stringToBytes(res));
    return;
  }
  String res;
  byte[] data=command.getData();
  String[] strList=bytesToString(data).split(""String_Node_Str"");
  String permConfigsJSON=URLDecoder.decode(strList[2],""String_Node_Str"");
  try {
    UpdatePermissionConfigRequest request=new UpdatePermissionConfigRequest();
    request.fromJson(Json.parse(permConfigsJSON).asObject());
    securityService.refreshClientPermissions(request.getPermissionConfigs());
    res=response(ResponseType.SUCCESS,""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception ex) {
    logger.warning(""String_Node_Str"",ex);
    res=exceptionResponse(ex);
  }
  command.setResponse(HttpCommand.CONTENT_TYPE_JSON,stringToBytes(res));
}",0.9851822186623947
45975,"@Override public List<SecurityInterceptorConfig> getSecurityInterceptorConfigs(){
  return securityConfig.getSecurityInterceptorConfigs();
}","@Override public List<SecurityInterceptorConfig> getSecurityInterceptorConfigs(){
  return staticSecurityConfig.getSecurityInterceptorConfigs();
}",0.9790209790209792
45976,"/** 
 * Returns existing client permissions as an unmodifiable   {@link Set}. You may use this set to create your client permissions set and pass it   {@link #setClientPermissionConfigs(Set)} to update client permissions.
 */
@Override public Set<PermissionConfig> getClientPermissionConfigs(){
  return Collections.unmodifiableSet(securityService.getClientPermissionConfigs());
}","/** 
 * Returns existing client permissions as an unmodifiable   {@link Set}. You may use this set to create your client permissions set and pass it   {@link #setClientPermissionConfigs(Set)} to update client permissions.
 */
@Override public Set<PermissionConfig> getClientPermissionConfigs(){
  Set<PermissionConfig> permissionConfigs=securityService != null ? securityService.getClientPermissionConfigs() : staticSecurityConfig.getClientPermissionConfigs();
  return Collections.unmodifiableSet(permissionConfigs);
}",0.7675194660734149
45977,"/** 
 * Updates client permission configuration cluster-wide.
 */
@Override public SecurityConfig setClientPermissionConfigs(Set<PermissionConfig> permissions){
  securityService.refreshClientPermissions(permissions);
  securityConfig.setClientPermissionConfigs(permissions);
  return securityConfig;
}","/** 
 * Updates client permission configuration cluster-wide.
 */
@Override public SecurityConfig setClientPermissionConfigs(Set<PermissionConfig> permissions){
  if (securityService == null) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  securityService.refreshClientPermissions(permissions);
  return this;
}",0.7472527472527473
45978,"@Override public CredentialsFactoryConfig getMemberCredentialsConfig(){
  return securityConfig.getMemberCredentialsConfig();
}","@Override public CredentialsFactoryConfig getMemberCredentialsConfig(){
  return staticSecurityConfig.getMemberCredentialsConfig();
}",0.9769230769230768
45979,"@Override public List<LoginModuleConfig> getMemberLoginModuleConfigs(){
  return securityConfig.getMemberLoginModuleConfigs();
}","@Override public List<LoginModuleConfig> getMemberLoginModuleConfigs(){
  return staticSecurityConfig.getMemberLoginModuleConfigs();
}",0.9770992366412212
45980,"@Override public PermissionPolicyConfig getClientPolicyConfig(){
  return securityConfig.getClientPolicyConfig();
}","@Override public PermissionPolicyConfig getClientPolicyConfig(){
  return staticSecurityConfig.getClientPolicyConfig();
}",0.9745762711864406
45981,"public DynamicSecurityConfig(SecurityConfig securityConfig,SecurityService securityService){
  this.securityConfig=securityConfig;
  this.securityService=securityService;
}","public DynamicSecurityConfig(SecurityConfig staticSecurityConfig,SecurityService securityService){
  this.staticSecurityConfig=staticSecurityConfig;
  this.securityService=securityService;
}",0.9502762430939228
45982,"@Override public List<LoginModuleConfig> getClientLoginModuleConfigs(){
  return securityConfig.getClientLoginModuleConfigs();
}","@Override public List<LoginModuleConfig> getClientLoginModuleConfigs(){
  return staticSecurityConfig.getClientLoginModuleConfigs();
}",0.9770992366412212
45983,"@Override public boolean isEnabled(){
  return securityConfig.isEnabled();
}","@Override public boolean isEnabled(){
  return staticSecurityConfig.isEnabled();
}",0.9620253164556962
45984,"@Override public void run() throws Exception {
  HazelcastInstanceImpl instance=(HazelcastInstanceImpl)getNodeEngine().getHazelcastInstance();
  instance.node.securityContext.refreshPermissions(permissionConfigs);
}","@Override public void run() throws Exception {
  Node node=((NodeEngineImpl)getNodeEngine()).getNode();
  node.securityContext.refreshPermissions(permissionConfigs);
}",0.7853403141361257
45985,"private void disconnectFromCluster(final ClientConnection connection){
  clusterConnectionExecutor.submit(new Callable<Void>(){
    @Override public Void call() throws Exception {
      Address endpoint=connection.getEndPoint();
      if (endpoint == null || !endpoint.equals(ownerConnectionAddress)) {
        return null;
      }
      setOwnerConnectionAddress(null);
      connectionStrategy.onDisconnectFromCluster();
      if (client.getLifecycleService().isRunning()) {
        fireConnectionEvent(LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED);
      }
      return null;
    }
  }
);
}","private void disconnectFromCluster(final ClientConnection connection){
  clusterConnectionExecutor.execute(new Runnable(){
    @Override public void run(){
      Address endpoint=connection.getEndPoint();
      if (endpoint == null || !endpoint.equals(ownerConnectionAddress)) {
        return;
      }
      setOwnerConnectionAddress(null);
      connectionStrategy.onDisconnectFromCluster();
      if (client.getLifecycleService().isRunning()) {
        fireConnectionEvent(LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED);
      }
    }
  }
);
}",0.9094076655052264
45986,"private static int getReconciliationIntervalSeconds(HazelcastProperties properties){
  int reconciliationIntervalSeconds=properties.getInteger(RECONCILIATION_INTERVAL_SECONDS);
  int minReconciliationIntervalSeconds=properties.getInteger(MIN_RECONCILIATION_INTERVAL_SECONDS);
  if (reconciliationIntervalSeconds < 0 || reconciliationIntervalSeconds > 0L && reconciliationIntervalSeconds < minReconciliationIntervalSeconds) {
    String msg=format(""String_Node_Str"" + ""String_Node_Str"",MIN_RECONCILIATION_INTERVAL_SECONDS,reconciliationIntervalSeconds);
    throw new IllegalArgumentException(msg);
  }
  return reconciliationIntervalSeconds;
}","private static int getReconciliationIntervalSeconds(HazelcastProperties properties){
  int reconciliationIntervalSeconds=properties.getInteger(RECONCILIATION_INTERVAL_SECONDS);
  int minReconciliationIntervalSeconds=properties.getInteger(MIN_RECONCILIATION_INTERVAL_SECONDS);
  if (reconciliationIntervalSeconds < 0 || reconciliationIntervalSeconds > 0 && reconciliationIntervalSeconds < minReconciliationIntervalSeconds) {
    String msg=format(""String_Node_Str"" + ""String_Node_Str"",MIN_RECONCILIATION_INTERVAL_SECONDS.getDefaultValue(),reconciliationIntervalSeconds);
    throw new IllegalArgumentException(msg);
  }
  return reconciliationIntervalSeconds;
}",0.985418265541059
45987,"private int getReconciliationIntervalSeconds(HazelcastProperties properties){
  int reconciliationIntervalSeconds=properties.getInteger(RECONCILIATION_INTERVAL_SECONDS);
  int minReconciliationIntervalSeconds=properties.getInteger(MIN_RECONCILIATION_INTERVAL_SECONDS);
  if (reconciliationIntervalSeconds < 0 || reconciliationIntervalSeconds > 0L && reconciliationIntervalSeconds < minReconciliationIntervalSeconds) {
    String msg=format(""String_Node_Str"" + ""String_Node_Str"",MIN_RECONCILIATION_INTERVAL_SECONDS,reconciliationIntervalSeconds);
    throw new IllegalArgumentException(msg);
  }
  return reconciliationIntervalSeconds;
}","private int getReconciliationIntervalSeconds(HazelcastProperties properties){
  int reconciliationIntervalSeconds=properties.getInteger(RECONCILIATION_INTERVAL_SECONDS);
  int minReconciliationIntervalSeconds=properties.getInteger(MIN_RECONCILIATION_INTERVAL_SECONDS);
  if (reconciliationIntervalSeconds < 0 || reconciliationIntervalSeconds > 0 && reconciliationIntervalSeconds < minReconciliationIntervalSeconds) {
    String msg=format(""String_Node_Str"" + ""String_Node_Str"",MIN_RECONCILIATION_INTERVAL_SECONDS.getDefaultValue(),reconciliationIntervalSeconds);
    throw new IllegalArgumentException(msg);
  }
  return reconciliationIntervalSeconds;
}",0.9852598913886734
45988,"@Override public void run() throws Exception {
  getOperationServiceImpl().onStartAsyncOperation(this);
  PartitionAwareOperationFactory partitionAwareFactory=extractPartitionAware(operationFactory);
  if (partitionAwareFactory != null) {
    executePartitionAwareOperations(partitionAwareFactory);
  }
 else {
    executeOperations();
  }
}","@Override public void run() throws Exception {
  if (partitions.length == 0) {
    this.sendResponse(EMPTY_RESPONSE);
    return;
  }
  getOperationServiceImpl().onStartAsyncOperation(this);
  PartitionAwareOperationFactory partitionAwareFactory=extractPartitionAware(operationFactory);
  if (partitionAwareFactory != null) {
    executePartitionAwareOperations(partitionAwareFactory);
  }
 else {
    executeOperations();
  }
}",0.8868660598179454
45989,"public PartitionIteratingOperation(OperationFactory operationFactory,List<Integer> partitions){
  this.operationFactory=operationFactory;
  this.partitions=toIntArray(partitions);
}","/** 
 * @param operationFactory operation factory to use
 * @param partitions       partitions to invoke on
 */
public PartitionIteratingOperation(OperationFactory operationFactory,List<Integer> partitions){
  this.operationFactory=operationFactory;
  this.partitions=toIntArray(partitions);
}",0.7637130801687764
45990,"@Override public void onExecutionFailure(Throwable cause){
  getOperationServiceImpl().onCompletionAsyncOperation(this);
  sendResponse(new ErrorResponse(cause,getCallId(),isUrgent()));
  getLogger().severe(cause);
}","@Override public void onExecutionFailure(Throwable cause){
  try {
    sendResponse(new ErrorResponse(cause,getCallId(),isUrgent()));
  }
  finally {
    getOperationServiceImpl().onCompletionAsyncOperation(this);
  }
  getLogger().severe(cause);
}",0.5474137931034483
45991,"@Override public Set<Entry<K,V>> entrySet(){
  HashSet<Entry<K,V>> entrySet=new HashSet<Entry<K,V>>(map1.entrySet());
  entrySet.addAll(map2.entrySet());
  return unmodifiableSet(entrySet);
}","@Override public Set<Entry<K,V>> entrySet(){
  Set<Entry<K,V>> entrySet1=map1.entrySet();
  Set<Entry<K,V>> entrySet2=map2.entrySet();
  HashSet<Entry<K,V>> aggregatedEntrySet=new HashSet<Entry<K,V>>();
  copyEntries(entrySet1,aggregatedEntrySet);
  copyEntries(entrySet2,aggregatedEntrySet);
  return unmodifiableSet(aggregatedEntrySet);
}",0.527306967984934
45992,"@Override public Map<K,V> getAll(Set<? extends K> keys,ExpiryPolicy expiryPolicy){
  long startNanos=nowInNanosOrDefault();
  ensureOpen();
  checkNotNull(keys,NULL_KEY_IS_NOT_ALLOWED);
  if (keys.isEmpty()) {
    return emptyMap();
  }
  int keysSize=keys.size();
  List<Data> dataKeys=new ArrayList<Data>(keys.size());
  List<Object> resultingKeyValuePairs=new ArrayList<Object>(keysSize * 2);
  getAllInternal(keys,dataKeys,expiryPolicy,resultingKeyValuePairs,startNanos);
  Map<K,V> result=createHashMap(keys.size());
  for (int i=0; i < resultingKeyValuePairs.size(); ) {
    K key=toObject(resultingKeyValuePairs.get(i++));
    V value=toObject(resultingKeyValuePairs.get(i++));
    result.put(key,value);
  }
  return result;
}","@Override public Map<K,V> getAll(Set<? extends K> keys,ExpiryPolicy expiryPolicy){
  long startNanos=nowInNanosOrDefault();
  ensureOpen();
  checkNotNull(keys,NULL_KEY_IS_NOT_ALLOWED);
  if (keys.isEmpty()) {
    return emptyMap();
  }
  int keysSize=keys.size();
  List<Data> dataKeys=new LinkedList<Data>();
  List<Object> resultingKeyValuePairs=new ArrayList<Object>(keysSize * 2);
  getAllInternal(keys,dataKeys,expiryPolicy,resultingKeyValuePairs,startNanos);
  Map<K,V> result=createHashMap(keysSize);
  for (int i=0; i < resultingKeyValuePairs.size(); ) {
    K key=toObject(resultingKeyValuePairs.get(i++));
    V value=toObject(resultingKeyValuePairs.get(i++));
    result.put(key,value);
  }
  return result;
}",0.981443298969072
45993,"private void populateResultFromRemote(int currentSize,List<Object> resultingKeyValuePairs,Map<Object,Long> reservations){
  for (int i=currentSize; i < resultingKeyValuePairs.size(); i+=2) {
    Data keyData=(Data)resultingKeyValuePairs.get(i);
    Data valueData=(Data)resultingKeyValuePairs.get(i + 1);
    Object ncKey=serializeKeys ? keyData : toObject(keyData);
    if (!serializeKeys) {
      resultingKeyValuePairs.set(i,ncKey);
    }
    Long reservationId=reservations.get(ncKey);
    if (reservationId != null) {
      Object cachedValue=tryPublishReserved(ncKey,valueData,reservationId);
      resultingKeyValuePairs.set(i + 1,cachedValue);
      reservations.remove(ncKey);
    }
  }
}","private void populateResultFromRemote(int currentSize,List<Object> resultingKeyValuePairs,Map<Object,Long> reservations,Map<Data,Object> reverseKeyMap){
  for (int i=currentSize; i < resultingKeyValuePairs.size(); i+=2) {
    Data keyData=(Data)resultingKeyValuePairs.get(i);
    Data valueData=(Data)resultingKeyValuePairs.get(i + 1);
    Object ncKey=serializeKeys ? keyData : reverseKeyMap.get(keyData);
    if (!serializeKeys) {
      resultingKeyValuePairs.set(i,ncKey);
    }
    Long reservationId=reservations.get(ncKey);
    if (reservationId != null) {
      Object cachedValue=tryPublishReserved(ncKey,valueData,reservationId);
      resultingKeyValuePairs.set(i + 1,cachedValue);
      reservations.remove(ncKey);
    }
  }
}",0.5774058577405857
45994,"@Override protected void getAllInternal(Set<? extends K> keys,Collection<Data> dataKeys,ExpiryPolicy expiryPolicy,List<Object> resultingKeyValuePairs,long startNanos){
  Map<Object,Data> keyMap=null;
  if (serializeKeys) {
    keyMap=toDataKeys(keys,dataKeys);
  }
  Collection<?> ncKeys=serializeKeys ? dataKeys : new ArrayList<Object>(keys);
  populateResultFromNearCache(ncKeys,resultingKeyValuePairs);
  if (ncKeys.isEmpty()) {
    return;
  }
  if (!serializeKeys) {
    keyMap=toDataKeys(ncKeys,dataKeys);
  }
  Map<Object,Long> reservations=getNearCacheReservations(ncKeys,keyMap);
  try {
    int currentSize=resultingKeyValuePairs.size();
    super.getAllInternal(keys,dataKeys,expiryPolicy,resultingKeyValuePairs,startNanos);
    populateResultFromRemote(currentSize,resultingKeyValuePairs,reservations);
  }
  finally {
    releaseRemainingReservedKeys(reservations);
  }
}","@Override protected void getAllInternal(Set<? extends K> keys,Collection<Data> dataKeys,ExpiryPolicy expiryPolicy,List<Object> resultingKeyValuePairs,long startNanos){
  if (serializeKeys) {
    toDataKeysWithReservations(keys,dataKeys,null,null);
  }
  Collection<?> ncKeys=serializeKeys ? dataKeys : new LinkedList<K>(keys);
  populateResultFromNearCache(ncKeys,resultingKeyValuePairs);
  if (ncKeys.isEmpty()) {
    return;
  }
  Map<Object,Long> reservations=createHashMap(ncKeys.size());
  Map<Data,Object> reverseKeyMap=null;
  if (!serializeKeys) {
    reverseKeyMap=createHashMap(ncKeys.size());
    toDataKeysWithReservations(ncKeys,dataKeys,reservations,reverseKeyMap);
  }
 else {
    createNearCacheReservations((Collection<Data>)ncKeys,reservations);
  }
  try {
    int currentSize=resultingKeyValuePairs.size();
    super.getAllInternal(keys,dataKeys,expiryPolicy,resultingKeyValuePairs,startNanos);
    populateResultFromRemote(currentSize,resultingKeyValuePairs,reservations,reverseKeyMap);
  }
  finally {
    releaseRemainingReservedKeys(reservations);
  }
}",0.5150433452320244
45995,"protected void getAllInternal(Set<K> keys,Map<Integer,List<Data>> partitionToKeyData,List<Object> resultingKeyValuePairs){
  if (partitionToKeyData.isEmpty()) {
    fillPartitionToKeyData(keys,partitionToKeyData,null);
  }
  List<Future<ClientMessage>> futures=new ArrayList<Future<ClientMessage>>(partitionToKeyData.size());
  for (  Map.Entry<Integer,List<Data>> entry : partitionToKeyData.entrySet()) {
    int partitionId=entry.getKey();
    List<Data> keyList=entry.getValue();
    if (!keyList.isEmpty()) {
      ClientMessage request=MapGetAllCodec.encodeRequest(name,keyList);
      futures.add(new ClientInvocation(getClient(),request,partitionId).invoke());
    }
  }
  for (  Future<ClientMessage> future : futures) {
    try {
      ClientMessage response=future.get();
      MapGetAllCodec.ResponseParameters resultParameters=MapGetAllCodec.decodeResponse(response);
      for (      Entry<Data,Data> entry : resultParameters.response) {
        resultingKeyValuePairs.add(entry.getKey());
        resultingKeyValuePairs.add(entry.getValue());
      }
    }
 catch (    Exception e) {
      throw rethrow(e);
    }
  }
}","protected void getAllInternal(Set<K> keys,Map<Integer,List<Data>> partitionToKeyData,List<Object> resultingKeyValuePairs){
  if (partitionToKeyData.isEmpty()) {
    fillPartitionToKeyData(keys,partitionToKeyData,null,null);
  }
  List<Future<ClientMessage>> futures=new ArrayList<Future<ClientMessage>>(partitionToKeyData.size());
  for (  Map.Entry<Integer,List<Data>> entry : partitionToKeyData.entrySet()) {
    int partitionId=entry.getKey();
    List<Data> keyList=entry.getValue();
    if (!keyList.isEmpty()) {
      ClientMessage request=MapGetAllCodec.encodeRequest(name,keyList);
      futures.add(new ClientInvocation(getClient(),request,partitionId).invoke());
    }
  }
  for (  Future<ClientMessage> future : futures) {
    try {
      ClientMessage response=future.get();
      MapGetAllCodec.ResponseParameters resultParameters=MapGetAllCodec.decodeResponse(response);
      for (      Entry<Data,Data> entry : resultParameters.response) {
        resultingKeyValuePairs.add(entry.getKey());
        resultingKeyValuePairs.add(entry.getValue());
      }
    }
 catch (    Exception e) {
      throw rethrow(e);
    }
  }
}",0.9977983267283136
45996,"protected void fillPartitionToKeyData(Set<K> keys,Map<Integer,List<Data>> partitionToKeyData,Map<Object,Data> keyMap){
  ClientPartitionService partitionService=getContext().getPartitionService();
  for (  K key : keys) {
    Data keyData=toData(key);
    int partitionId=partitionService.getPartitionId(keyData);
    List<Data> keyList=partitionToKeyData.get(partitionId);
    if (keyList == null) {
      keyList=new ArrayList<Data>();
      partitionToKeyData.put(partitionId,keyList);
    }
    keyList.add(keyData);
    if (keyMap != null) {
      keyMap.put(key,keyData);
    }
  }
}","protected void fillPartitionToKeyData(Set<K> keys,Map<Integer,List<Data>> partitionToKeyData,Map<Object,Data> keyMap,Map<Data,Object> reverseKeyMap){
  ClientPartitionService partitionService=getContext().getPartitionService();
  for (  K key : keys) {
    Data keyData=toData(key);
    int partitionId=partitionService.getPartitionId(keyData);
    List<Data> keyList=partitionToKeyData.get(partitionId);
    if (keyList == null) {
      keyList=new ArrayList<Data>();
      partitionToKeyData.put(partitionId,keyList);
    }
    keyList.add(keyData);
    if (keyMap != null) {
      keyMap.put(key,keyData);
    }
    if (reverseKeyMap != null) {
      reverseKeyMap.put(keyData,key);
    }
  }
}",0.91601866251944
45997,"private void populateResultFromRemote(int currentSize,List<Object> resultingKeyValuePairs,Map<Object,Long> reservations){
  for (int i=currentSize; i < resultingKeyValuePairs.size(); i+=2) {
    Data keyData=(Data)resultingKeyValuePairs.get(i);
    Data valueData=(Data)resultingKeyValuePairs.get(i + 1);
    Object ncKey=serializeKeys ? keyData : toObject(keyData);
    if (!serializeKeys) {
      resultingKeyValuePairs.set(i,ncKey);
    }
    Long reservationId=reservations.get(ncKey);
    if (reservationId != null) {
      Object cachedValue=tryPublishReserved(ncKey,valueData,reservationId);
      resultingKeyValuePairs.set(i + 1,cachedValue);
      reservations.remove(ncKey);
    }
  }
}","private void populateResultFromRemote(int currentSize,List<Object> resultingKeyValuePairs,Map<Object,Long> reservations,Map<Data,Object> reverseKeyMap){
  for (int i=currentSize; i < resultingKeyValuePairs.size(); i+=2) {
    Data keyData=(Data)resultingKeyValuePairs.get(i);
    Data valueData=(Data)resultingKeyValuePairs.get(i + 1);
    Object ncKey=serializeKeys ? keyData : reverseKeyMap.get(keyData);
    if (!serializeKeys) {
      resultingKeyValuePairs.set(i,ncKey);
    }
    Long reservationId=reservations.get(ncKey);
    if (reservationId != null) {
      Object cachedValue=tryPublishReserved(ncKey,valueData,reservationId);
      resultingKeyValuePairs.set(i + 1,cachedValue);
      reservations.remove(ncKey);
    }
  }
}",0.5774058577405857
45998,"@Override protected void getAllInternal(Set<K> keys,Map<Integer,List<Data>> partitionToKeyData,List<Object> resultingKeyValuePairs){
  Map<Object,Data> keyMap=createHashMap(keys.size());
  if (serializeKeys) {
    fillPartitionToKeyData(keys,partitionToKeyData,keyMap);
  }
  Collection<?> ncKeys=serializeKeys ? keyMap.values() : new ArrayList<K>(keys);
  populateResultFromNearCache(ncKeys,resultingKeyValuePairs);
  if (ncKeys.isEmpty()) {
    return;
  }
  if (!serializeKeys) {
    fillPartitionToKeyData(keys,partitionToKeyData,keyMap);
  }
  Map<Object,Long> reservations=getNearCacheReservations(ncKeys,keyMap);
  try {
    int currentSize=resultingKeyValuePairs.size();
    super.getAllInternal(keys,partitionToKeyData,resultingKeyValuePairs);
    populateResultFromRemote(currentSize,resultingKeyValuePairs,reservations);
  }
  finally {
    releaseRemainingReservedKeys(reservations);
  }
}","@Override protected void getAllInternal(Set<K> keys,Map<Integer,List<Data>> partitionToKeyData,List<Object> resultingKeyValuePairs){
  Map<Object,Data> keyMap=createHashMap(keys.size());
  if (serializeKeys) {
    fillPartitionToKeyData(keys,partitionToKeyData,keyMap,null);
  }
  Collection<?> ncKeys=serializeKeys ? keyMap.values() : new LinkedList<K>(keys);
  populateResultFromNearCache(ncKeys,resultingKeyValuePairs);
  if (ncKeys.isEmpty()) {
    return;
  }
  Map<Data,Object> reverseKeyMap=null;
  if (!serializeKeys) {
    reverseKeyMap=createHashMap(ncKeys.size());
    fillPartitionToKeyData(keys,partitionToKeyData,keyMap,reverseKeyMap);
  }
  Map<Object,Long> reservations=getNearCacheReservations(ncKeys,keyMap);
  try {
    int currentSize=resultingKeyValuePairs.size();
    super.getAllInternal(keys,partitionToKeyData,resultingKeyValuePairs);
    populateResultFromRemote(currentSize,resultingKeyValuePairs,reservations,reverseKeyMap);
  }
  finally {
    releaseRemainingReservedKeys(reservations);
  }
}",0.9318772750910036
45999,"@Parameters(name=""String_Node_Str"") public static Collection<Object[]> parameters(){
  return asList(new Object[][]{{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,null,null,null,null},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,true,INVALIDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,true,CACHE_ON_UPDATE},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,false,INVALIDATE},{GET,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,false,CACHE_ON_UPDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,false,true,INVALIDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,false,true,CACHE_ON_UPDATE},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,false,false,INVALIDATE},{GET,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,false,false,CACHE_ON_UPDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,true,true,INVALIDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,0,0),BINARY,OBJECT,true,true,CACHE_ON_UPDATE},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,true,false,INVALIDATE},{GET,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(0,0,0),BINARY,OBJECT,true,false,CACHE_ON_UPDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,false,true,INVALIDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,0,0),BINARY,OBJECT,false,true,CACHE_ON_UPDATE},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,false,false,INVALIDATE},{GET,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(0,0,0),BINARY,OBJECT,false,false,CACHE_ON_UPDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,1),newInt(1,1,1),OBJECT,null,null,null,null},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,1),OBJECT,BINARY,true,true,INVALIDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(1,1,1),OBJECT,BINARY,true,true,CACHE_ON_UPDATE},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,1,0),newInt(1,1,1),OBJECT,BINARY,true,false,INVALIDATE},{GET,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(1,1,1),OBJECT,BINARY,true,false,CACHE_ON_UPDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,1),OBJECT,BINARY,false,true,INVALIDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(1,1,1),OBJECT,BINARY,false,true,CACHE_ON_UPDATE},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,1,0),newInt(1,1,1),OBJECT,BINARY,false,false,INVALIDATE},{GET,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(1,1,1),OBJECT,BINARY,false,false,CACHE_ON_UPDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,true,true,INVALIDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(1,0,0),OBJECT,OBJECT,true,true,CACHE_ON_UPDATE},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,true,false,INVALIDATE},{GET,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(1,0,0),OBJECT,OBJECT,true,false,CACHE_ON_UPDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,false,true,INVALIDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(1,0,0),OBJECT,OBJECT,false,true,CACHE_ON_UPDATE},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,false,false,INVALIDATE},{GET,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(1,0,0),OBJECT,OBJECT,false,false,CACHE_ON_UPDATE},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,0,0),newInt(0,1,1),BINARY,null,null,null,null},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,true,INVALIDATE},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,true,CACHE_ON_UPDATE},{GET_ALL,newInt(1,1,0),newInt(0,1,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,false,INVALIDATE},{GET_ALL,newInt(1,0,0),newInt(0,0,0),newInt(2,0,0),newInt(0,1,1),BINARY,BINARY,true,false,CACHE_ON_UPDATE},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,1,1),newInt(1,1,1),OBJECT,null,null,null,null},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,false,true,INVALIDATE},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,0,0),newInt(2,0,0),OBJECT,OBJECT,false,true,CACHE_ON_UPDATE},{GET_ALL,newInt(1,1,0),newInt(0,1,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,false,false,INVALIDATE},{GET_ALL,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(1,0,0),OBJECT,OBJECT,false,false,CACHE_ON_UPDATE}});
}","@Parameters(name=""String_Node_Str"") public static Collection<Object[]> parameters(){
  return asList(new Object[][]{{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,null,null,null,null},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,true,INVALIDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,true,CACHE_ON_UPDATE},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,false,INVALIDATE},{GET,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,false,CACHE_ON_UPDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,false,true,INVALIDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,false,true,CACHE_ON_UPDATE},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,false,false,INVALIDATE},{GET,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,false,false,CACHE_ON_UPDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,true,true,INVALIDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,0,0),BINARY,OBJECT,true,true,CACHE_ON_UPDATE},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,true,false,INVALIDATE},{GET,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(0,0,0),BINARY,OBJECT,true,false,CACHE_ON_UPDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,false,true,INVALIDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,0,0),BINARY,OBJECT,false,true,CACHE_ON_UPDATE},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,false,false,INVALIDATE},{GET,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(0,0,0),BINARY,OBJECT,false,false,CACHE_ON_UPDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,1),newInt(1,1,1),OBJECT,null,null,null,null},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,1),OBJECT,BINARY,true,true,INVALIDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(1,1,1),OBJECT,BINARY,true,true,CACHE_ON_UPDATE},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,1,0),newInt(1,1,1),OBJECT,BINARY,true,false,INVALIDATE},{GET,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(1,1,1),OBJECT,BINARY,true,false,CACHE_ON_UPDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,1),OBJECT,BINARY,false,true,INVALIDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(1,1,1),OBJECT,BINARY,false,true,CACHE_ON_UPDATE},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,1,0),newInt(1,1,1),OBJECT,BINARY,false,false,INVALIDATE},{GET,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(1,1,1),OBJECT,BINARY,false,false,CACHE_ON_UPDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,true,true,INVALIDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(1,0,0),OBJECT,OBJECT,true,true,CACHE_ON_UPDATE},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,true,false,INVALIDATE},{GET,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(1,0,0),OBJECT,OBJECT,true,false,CACHE_ON_UPDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,false,true,INVALIDATE},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(1,0,0),OBJECT,OBJECT,false,true,CACHE_ON_UPDATE},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,false,false,INVALIDATE},{GET,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(1,0,0),OBJECT,OBJECT,false,false,CACHE_ON_UPDATE},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,0,0),newInt(0,1,1),BINARY,null,null,null,null},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,true,INVALIDATE},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,true,CACHE_ON_UPDATE},{GET_ALL,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,false,INVALIDATE},{GET_ALL,newInt(1,0,0),newInt(0,0,0),newInt(2,0,0),newInt(0,1,1),BINARY,BINARY,true,false,CACHE_ON_UPDATE},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,1,1),newInt(1,1,1),OBJECT,null,null,null,null},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,false,true,INVALIDATE},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,0,0),newInt(2,0,0),OBJECT,OBJECT,false,true,CACHE_ON_UPDATE},{GET_ALL,newInt(1,1,0),newInt(0,0,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,false,false,INVALIDATE},{GET_ALL,newInt(1,0,0),newInt(0,0,0),newInt(1,0,0),newInt(1,0,0),OBJECT,OBJECT,false,false,CACHE_ON_UPDATE}});
}",0.9995590828924162
46000,"@Parameters(name=""String_Node_Str"") public static Collection<Object[]> parameters(){
  return asList(new Object[][]{{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,null,null,null},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,true},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,false},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,false,true},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,false,false},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,true,true},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,true,false},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,false,true},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,false,false},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,1),newInt(1,1,1),OBJECT,null,null,null},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,1),OBJECT,BINARY,true,true},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,1),OBJECT,BINARY,true,true},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,1),OBJECT,BINARY,false,true},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,1),OBJECT,BINARY,false,true},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,true,true},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,true,true},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,false,true},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,false,true},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,0,0),newInt(0,1,1),BINARY,null,null,null},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,true},{GET_ALL,newInt(1,1,0),newInt(0,1,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,false},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,1,1),newInt(1,1,1),OBJECT,null,null,null},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,false,true},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,false,true}});
}","@Parameters(name=""String_Node_Str"") public static Collection<Object[]> parameters(){
  return asList(new Object[][]{{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,null,null,null},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,true},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,false},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,false,true},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,false,false},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,true,true},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,true,false},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,false,true},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,false,false},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,1),newInt(1,1,1),OBJECT,null,null,null},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,1),OBJECT,BINARY,true,true},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,1),OBJECT,BINARY,true,true},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,1),OBJECT,BINARY,false,true},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,1),OBJECT,BINARY,false,true},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,true,true},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,true,true},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,false,true},{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,false,true},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,0,0),newInt(0,1,1),BINARY,null,null,null},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,true},{GET_ALL,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,BINARY,true,false},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,1,1),newInt(1,1,1),OBJECT,null,null,null},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,false,true},{GET_ALL,newInt(1,1,1),newInt(0,1,1),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,false,true}});
}",0.999548532731377
