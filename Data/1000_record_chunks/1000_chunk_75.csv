record_number,buggy_code,fixed_code,code_similarity
74001,"public List getReferableMeasureBindings(String measureName,ICubeQueryDefinition cubeDefn) throws DataException {
  List result=new ArrayList();
  List bindings=cubeDefn.getBindings();
  for (int i=0; i < bindings.size(); i++) {
    IBinding binding=(IBinding)bindings.get(i);
    final String referencedMeasureName=getReferencedMeasureName(binding.getExpression());
    if (measureName.equals(referencedMeasureName)) {
      List aggrOns=binding.getAggregatOns();
      if (aggrOns.size() == 0 && !isGrandTotal(binding)) {
        result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.MEASURE_TYPE));
      }
 else {
        if (fromSameEdge(aggrOns,cubeDefn)) {
          result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
        }
 else         result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
      }
    }
  }
  return result;
}","public List getReferableMeasureBindings(String measureName,ICubeQueryDefinition cubeDefn) throws DataException {
  List result=new ArrayList();
  List bindings=cubeDefn.getBindings();
  for (int i=0; i < bindings.size(); i++) {
    IBinding binding=(IBinding)bindings.get(i);
    final String referencedMeasureName=getReferencedMeasureName(binding.getExpression());
    if (measureName.equals(referencedMeasureName)) {
      List aggrOns=binding.getAggregatOns();
      if (this.isMeasureBinding(cubeDefn,binding)) {
        result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.MEASURE_TYPE));
      }
 else {
        if (fromSameEdge(aggrOns,cubeDefn)) {
          result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
        }
 else         result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
      }
    }
  }
  return result;
}",0.9635584137191854
74002,"/** 
 * Indicate whether the binding stands for an OVERALL grand total.
 * @param binding
 * @return
 * @throws DataException
 */
private boolean isGrandTotal(IBinding binding) throws DataException {
  return binding.getAggrFunction() != null;
}","/** 
 * Indicate whether the binding stands for an OVERALL grand total.
 * @param binding
 * @return
 * @throws DataException
 */
private boolean isGrandTotal(IBinding binding) throws DataException {
  return binding.getAggregatOns().size() == 0;
}",0.9330628803245437
74003,"public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (isGrandTotal(binding) && isSort)           continue;
          if (this.getReferencedMeasureName(binding.getExpression()) != null) {
            if (this.isLeafLevel(cubeDefn,target) && binding.getAggrFunction() == null) {
              result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.MEASURE_TYPE));
              continue;
            }
 else             if (isGrandTotal(binding)) {
              result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
              continue;
            }
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1) {
              if (fromSameEdge(aggrOns,cubeDefn))               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
 else               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
            }
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              int candidateEdge=getAxisQualifierEdgeType(dimLevel,cubeDefn);
              if (candidateEdge != -1) {
                if (getAxisQualifierLevel(next,cubeDefn.getEdge(candidateEdge)) != null)                 result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
              }
            }
            break;
          }
        }
        continue;
      }
      result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.DIMENSION_TYPE));
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (isGrandTotal(binding) && isSort)         continue;
        if (this.getReferencedMeasureName(binding.getExpression()) != null) {
          if (this.isLeafLevel(cubeDefn,target) && this.isMeasureBinding(cubeDefn,binding)) {
            result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.MEASURE_TYPE));
            continue;
          }
 else           if (isGrandTotal(binding)) {
            result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
            continue;
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1) {
              if (fromSameEdge(aggrOns,cubeDefn))               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
 else               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
            }
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              int candidateEdge=getAxisQualifierEdgeType(dimLevel,cubeDefn);
              if (candidateEdge != -1) {
                if (getAxisQualifierLevel(next,cubeDefn.getEdge(candidateEdge)) != null)                 result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
              }
            }
            break;
          }
        }
        continue;
      }
      result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.DIMENSION_TYPE));
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9723712979526932
74004,"/** 
 * Render report content from design file
 * @param out
 * @throws Exception
 */
private void __renderReport(OutputStream out) throws Exception {
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  Locale locale=(Locale)this.options.getOption(InputOptions.OPT_LOCALE);
  Boolean isMasterPageContent=(Boolean)this.options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Boolean svgFlag=(Boolean)this.options.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)this.options.getOption(InputOptions.OPT_FORMAT);
  Boolean isRtl=(Boolean)this.options.getOption(InputOptions.OPT_RTL);
  String servletPath=(String)this.options.getOption(InputOptions.OPT_SERVLET_PATH);
  IReportRunnable runnable=(IReportRunnable)this.reportDesignHandle.getDesignObject();
  String reportTitle=ParameterAccessor.htmlDecode(BirtUtility.getTitleFromDesign(reportDesignHandle));
  Map params=__handleParameters(reportDesignHandle,null);
  Collection parameterDefList=getReportService().getParameterDefinitions(reportDesignHandle,options,false);
  Map displayTexts=BirtUtility.getDisplayTexts(parameterDefList,null,(HttpServletRequest)pageContext.getRequest());
  String realReportletId=viewer.getReportletId();
  if (realReportletId == null) {
    if (viewer.getBookmark() != null && ""String_Node_Str"".equalsIgnoreCase(viewer.getIsReportlet())) {
      realReportletId=viewer.getBookmark();
    }
  }
  if (realReportletId != null) {
    String documentName=ParameterAccessor.getReportDocument(request,viewer.getReportDesign(),viewer.getId());
    ReportEngineService.getInstance().runReport(request,runnable,documentName,locale,parameters,displayTexts);
    IReportDocument doc=ReportEngineService.getInstance().openReportDocument(null,documentName,BirtTagUtil.getModuleOptions(viewer));
    ReportEngineService.getInstance().renderReportlet(out,request,doc,realReportletId,format,isMasterPageContent,svgFlag,null,locale,isRtl.booleanValue(),servletPath);
  }
 else {
    ReportEngineService.getInstance().runAndRenderReport(request,runnable,out,format,locale,isRtl.booleanValue(),params,isMasterPageContent.booleanValue(),svgFlag.booleanValue(),Boolean.TRUE,null,null,displayTexts,servletPath,reportTitle);
  }
}","/** 
 * Render report content from design file
 * @param out
 * @throws Exception
 */
private void __renderReport(OutputStream out) throws Exception {
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  Locale locale=(Locale)this.options.getOption(InputOptions.OPT_LOCALE);
  Boolean isMasterPageContent=(Boolean)this.options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Boolean svgFlag=(Boolean)this.options.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)this.options.getOption(InputOptions.OPT_FORMAT);
  Boolean isRtl=(Boolean)this.options.getOption(InputOptions.OPT_RTL);
  String servletPath=(String)this.options.getOption(InputOptions.OPT_SERVLET_PATH);
  IReportRunnable runnable=(IReportRunnable)this.reportDesignHandle.getDesignObject();
  String reportTitle=ParameterAccessor.htmlDecode(BirtUtility.getTitleFromDesign(reportDesignHandle));
  Map params=__handleParameters(reportDesignHandle,null);
  Collection parameterDefList=getReportService().getParameterDefinitions(reportDesignHandle,options,false);
  Map displayTexts=BirtUtility.getDisplayTexts(parameterDefList,null,(HttpServletRequest)pageContext.getRequest());
  String realReportletId=viewer.getReportletId();
  if (realReportletId == null) {
    if (viewer.getBookmark() != null && ""String_Node_Str"".equalsIgnoreCase(viewer.getIsReportlet())) {
      realReportletId=viewer.getBookmark();
    }
  }
  if (realReportletId != null) {
    String documentName=ParameterAccessor.getReportDocument(request,viewer.getReportDesign(),viewer.getId());
    ReportEngineService.getInstance().runReport(request,runnable,documentName,locale,parameters,displayTexts);
    IReportDocument doc=ReportEngineService.getInstance().openReportDocument(null,documentName,BirtTagUtil.getModuleOptions(viewer));
    ReportEngineService.getInstance().renderReportlet(out,request,doc,realReportletId,format,isMasterPageContent.booleanValue(),svgFlag.booleanValue(),null,locale,isRtl.booleanValue(),servletPath);
  }
 else {
    ReportEngineService.getInstance().runAndRenderReport(request,runnable,out,format,locale,isRtl.booleanValue(),params,isMasterPageContent.booleanValue(),svgFlag.booleanValue(),Boolean.TRUE,null,null,displayTexts,servletPath,reportTitle);
  }
}",0.9933303690529124
74005,"/** 
 * IV request is applied here
 * @return query definition for interactive viewing
 */
private QueryDefinition newPreIVReportQuery(int filterNeeded,boolean sortNeeded,int groupNeeded,int mode){
  QueryDefinition qd=new QueryDefinition();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  for (int i=0; i < totalBeArray.length; i++)   qd.addResultSetExpression(this.totalExprName[i],totalBeArray[i]);
  if (this.updateNewBindingName != null && this.updateNewBindingName.trim().length() > 0) {
    qd.addResultSetExpression(this.updateNewBindingName,this.updateNewBindingExpr);
  }
  if (mode == UPDATE) {
    qd.getFilters().addAll(this.GEN_filterDefn);
  }
 else   if (mode == PRESENTATION) {
    if (PRE_basedon_genfilter == false)     qd.getFilters().addAll(UPDATE_filterDefn);
 else     qd.getFilters().addAll(GEN_filterDefn);
  }
  if (filterNeeded == 0) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 1) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 2) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 3) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 4) {
    BaseExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"" + TimeZone.getDefault().getRawOffset() / 3600000 + ""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 5) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  UPDATE_filterDefn=qd.getFilters();
  if (sortNeeded) {
    SortDefinition sd=new SortDefinition();
    sd.setExpression(""String_Node_Str"");
    sd.setSortDirection(ISortDefinition.SORT_ASC);
    qd.addSort(sd);
  }
  if (groupNeeded == 1 || groupNeeded == 0) {
    GroupDefinition gd=null;
    if (groupNeeded == 1) {
      gd=new GroupDefinition(""String_Node_Str"");
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
 else     if (groupNeeded == 0) {
      gd=new GroupDefinition();
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
    if (this.UPDATE_add_subquery == 1) {
      SubqueryDefinition subqueryDefn=new SubqueryDefinition(subQueryName1,qd);
      subRowExprName1=new String[3];
      subRowExprName1[0]=""String_Node_Str"";
      subRowExprName1[1]=""String_Node_Str"";
      subRowExprName1[2]=""String_Node_Str"";
      ScriptExpression[] exprs=new ScriptExpression[3];
      exprs[0]=new ScriptExpression(""String_Node_Str"");
      exprs[1]=new ScriptExpression(""String_Node_Str"");
      exprs[2]=new ScriptExpression(""String_Node_Str"");
      for (int i=0; i < subRowExprName1.length; i++)       subqueryDefn.addResultSetExpression(subRowExprName1[i],exprs[i]);
      if (this.USE_DATE_IN_SUBQUERY)       subqueryDefn.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
      subqueryDefn.setApplyOnGroupFlag(true);
      gd.addSubquery(subqueryDefn);
    }
    if (this.UPDATE_add_subquery == 2) {
      SubqueryDefinition subqueryDefn=new SubqueryDefinition(subQueryName2,qd);
      subRowExprName2=new String[2];
      subRowExprName2[0]=""String_Node_Str"";
      subRowExprName2[1]=""String_Node_Str"";
      ScriptExpression[] exprs=new ScriptExpression[2];
      exprs[0]=new ScriptExpression(""String_Node_Str"");
      exprs[1]=new ScriptExpression(""String_Node_Str"");
      for (int i=0; i < subRowExprName2.length; i++)       subqueryDefn.addResultSetExpression(subRowExprName2[i],exprs[i]);
      subqueryDefn.setApplyOnGroupFlag(true);
      gd.addSubquery(subqueryDefn);
    }
  }
  return qd;
}","/** 
 * IV request is applied here
 * @return query definition for interactive viewing
 */
private QueryDefinition newPreIVReportQuery(int filterNeeded,boolean sortNeeded,int groupNeeded,int mode){
  QueryDefinition qd=new QueryDefinition();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  for (int i=0; i < totalBeArray.length; i++)   qd.addResultSetExpression(this.totalExprName[i],totalBeArray[i]);
  if (this.updateNewBindingName != null && this.updateNewBindingName.trim().length() > 0) {
    qd.addResultSetExpression(this.updateNewBindingName,this.updateNewBindingExpr);
  }
  if (mode == UPDATE) {
    qd.getFilters().addAll(this.GEN_filterDefn);
  }
 else   if (mode == PRESENTATION) {
    if (PRE_basedon_genfilter == false)     qd.getFilters().addAll(UPDATE_filterDefn);
 else     qd.getFilters().addAll(GEN_filterDefn);
  }
  if (filterNeeded == 0) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 1) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 2) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 3) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
    filterExpr=new ScriptExpression(""String_Node_Str"");
    fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 4) {
    BaseExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str"" + TimeZone.getDefault().getRawOffset() / 3600000 + ""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 5) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  if (filterNeeded == 6) {
    ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
    FilterDefinition fd=new FilterDefinition(filterExpr);
    qd.addFilter(fd);
  }
  UPDATE_filterDefn=qd.getFilters();
  if (sortNeeded) {
    SortDefinition sd=new SortDefinition();
    sd.setExpression(""String_Node_Str"");
    sd.setSortDirection(ISortDefinition.SORT_ASC);
    qd.addSort(sd);
  }
  if (groupNeeded == 1 || groupNeeded == 0) {
    GroupDefinition gd=null;
    if (groupNeeded == 1) {
      gd=new GroupDefinition(""String_Node_Str"");
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
 else     if (groupNeeded == 0) {
      gd=new GroupDefinition();
      gd.setKeyColumn(""String_Node_Str"");
      qd.addGroup(gd);
    }
    if (this.UPDATE_add_subquery == 1) {
      SubqueryDefinition subqueryDefn=getSubQueryDefn(qd);
      gd.addSubquery(subqueryDefn);
    }
    if (this.UPDATE_add_subquery == 2) {
      SubqueryDefinition subqueryDefn=new SubqueryDefinition(subQueryName2,qd);
      subRowExprName2=new String[2];
      subRowExprName2[0]=""String_Node_Str"";
      subRowExprName2[1]=""String_Node_Str"";
      ScriptExpression[] exprs=new ScriptExpression[2];
      exprs[0]=new ScriptExpression(""String_Node_Str"");
      exprs[1]=new ScriptExpression(""String_Node_Str"");
      for (int i=0; i < subRowExprName2.length; i++)       subqueryDefn.addResultSetExpression(subRowExprName2[i],exprs[i]);
      subqueryDefn.setApplyOnGroupFlag(true);
      gd.addSubquery(subqueryDefn);
    }
  }
  if (add_subquery_on_query) {
    qd.addSubquery(getSubQueryDefn(qd));
  }
  return qd;
}",0.8854468464452864
74006,"/** 
 * @throws BirtException
 */
private void displayPreResult(IQueryResults qr,boolean printGroupInfo,boolean useSkipTo) throws BirtException {
  assertTrue(qr.getResultMetaData() != null);
  IResultIterator ri=qr.getResultIterator();
  if (useSkipTo) {
    if (this.PRE_use_skipto_num == -1)     ri.moveTo(0);
 else     ri.moveTo(this.PRE_use_skipto_num);
  }
 else {
    ri.next();
  }
  do {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri.getValue(totalExprName[i]) + ""String_Node_Str"";
    if (this.updateNewBindingName != null && this.updateNewBindingExpr != null)     abc+=ri.getValue(this.updateNewBindingName) + ""String_Node_Str"";
    if (printGroupInfo)     abc+=ri.getStartingGroupLevel() + ""String_Node_Str"";
    this.testPrintln(abc + ri.getRowId());
    if (this.UPDATE_add_subquery == 1) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName1.length; i++)         abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
        if (this.USE_DATE_IN_SUBQUERY)         abc+=subRi.getValue(""String_Node_Str"");
        this.testPrintln(abc);
      }
    }
    if (this.UPDATE_add_subquery == 2) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName2,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName2.length; i++)         abc+=subRi.getValue(subRowExprName2[i]) + ""String_Node_Str"";
        this.testPrintln(abc);
      }
    }
  }
 while (ri.next());
  if (this.TEST_ISEMPTY)   assertTrue(ri.isEmpty());
 else   assertFalse(ri.isEmpty());
  this.testPrintln(""String_Node_Str"");
  ri.close();
  myPreDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void displayPreResult(IQueryResults qr,boolean printGroupInfo,boolean useSkipTo) throws BirtException {
  assertTrue(qr.getResultMetaData() != null);
  IResultIterator ri=qr.getResultIterator();
  if (useSkipTo) {
    if (this.PRE_use_skipto_num == -1)     ri.moveTo(0);
 else     ri.moveTo(this.PRE_use_skipto_num);
  }
 else {
    ri.next();
  }
  do {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(rowExprName[i]) + ""String_Node_Str"";
    if (!this.notIncludeAggr) {
      for (int i=0; i < totalExprName.length; i++)       abc+=ri.getValue(totalExprName[i]) + ""String_Node_Str"";
    }
    if (this.updateNewBindingName != null && this.updateNewBindingExpr != null)     abc+=ri.getValue(this.updateNewBindingName) + ""String_Node_Str"";
    if (printGroupInfo)     abc+=ri.getStartingGroupLevel() + ""String_Node_Str"";
    this.testPrintln(abc + ri.getRowId());
    if (this.UPDATE_add_subquery == 1) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName1.length; i++)         abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
        if (this.USE_DATE_IN_SUBQUERY)         abc+=subRi.getValue(""String_Node_Str"");
        this.testPrintln(abc);
      }
    }
    if (this.UPDATE_add_subquery == 2) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName2,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName2.length; i++)         abc+=subRi.getValue(subRowExprName2[i]) + ""String_Node_Str"";
        this.testPrintln(abc);
      }
    }
    if (this.add_subquery_on_query) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
      abc=""String_Node_Str"";
      for (int i=0; i < subRowExprName1.length; i++)       abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
      this.testPrintln(abc);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName1.length; i++)         abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
        this.testPrintln(abc);
      }
    }
  }
 while (ri.next());
  if (this.TEST_ISEMPTY)   assertTrue(ri.isEmpty());
 else   assertFalse(ri.isEmpty());
  this.testPrintln(""String_Node_Str"");
  ri.close();
  myPreDataEngine.shutdown();
}",0.8707075362986864
74007,"public void setUp() throws Exception {
  super.setUp();
  this.USE_ROW_IN_AGGREGATION=false;
  this.GEN_queryResultID=null;
  this.UPDATE_queryResultID=null;
  this.USE_DATE_IN_COLUMNBINDING=true;
  this.GEN_add_subquery=false;
  this.GEN_add_filter=false;
  this.GEN_add_group=false;
  this.GEN_print=false;
  this.GEN_use_invalid_column=false;
  this.UPDATE_add_filter=-1;
  this.UPDATE_add_sort=false;
  this.UPDATE_add_diff_group=false;
  this.UPDATE_add_same_group=false;
  this.UPDATE_add_subquery=0;
  this.USE_DATE_IN_SUBQUERY=false;
  this.PRE_add_filter=-1;
  this.PRE_add_sort=false;
  this.PRE_execute_query=false;
  this.PRE_print_groupinfo=false;
  this.PRE_use_skipto=false;
  this.PRE_use_skipto_num=-1;
  this.PRE_add_group=-1;
  this.PRE_basedon_genfilter=false;
  this.GEN_filterDefn=new ArrayList();
  this.UPDATE_filterDefn=new ArrayList();
  this.TEST_ISEMPTY=false;
  TimeZone.setDefault(TimeZone.getTimeZone(""String_Node_Str""));
}","public void setUp() throws Exception {
  super.setUp();
  this.notIncludeAggr=false;
  this.add_subquery_on_query=false;
  this.USE_ROW_IN_AGGREGATION=false;
  this.GEN_queryResultID=null;
  this.UPDATE_queryResultID=null;
  this.USE_DATE_IN_COLUMNBINDING=true;
  this.GEN_add_subquery=false;
  this.GEN_add_sort=true;
  this.GEN_add_filter=false;
  this.GEN_add_group=false;
  this.GEN_print=false;
  this.GEN_use_invalid_column=false;
  this.UPDATE_add_filter=-1;
  this.UPDATE_add_sort=false;
  this.UPDATE_add_diff_group=false;
  this.UPDATE_add_same_group=false;
  this.UPDATE_add_subquery=0;
  this.USE_DATE_IN_SUBQUERY=false;
  this.PRE_add_filter=-1;
  this.PRE_add_sort=false;
  this.PRE_execute_query=false;
  this.PRE_print_groupinfo=false;
  this.PRE_use_skipto=false;
  this.PRE_use_skipto_num=-1;
  this.PRE_add_group=-1;
  this.PRE_basedon_genfilter=false;
  this.GEN_filterDefn=new ArrayList();
  this.UPDATE_filterDefn=new ArrayList();
  this.TEST_ISEMPTY=false;
  TimeZone.setDefault(TimeZone.getTimeZone(""String_Node_Str""));
}",0.9544772386193096
74008,"/** 
 * @throws BirtException
 */
private void genBasicIV() throws BirtException {
  QueryDefinition qd=newGenIVReportQuery();
  if (!this.usesDetails) {
    qd.setUsesDetails(false);
  }
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  GEN_queryResultID=qr.getID();
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(this.rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri.getValue(this.totalExprName[i]) + ""String_Node_Str"";
    if (this.GEN_print == true)     this.testPrintln(abc);
    if (this.GEN_add_subquery == true) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName1.length; i++) {
          abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
        }
        if (this.USE_DATE_IN_SUBQUERY)         abc+=subRi.getValue(""String_Node_Str"");
      }
      subRi.close();
    }
  }
  if (this.GEN_print == true)   this.testPrintln(""String_Node_Str"");
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void genBasicIV() throws BirtException {
  QueryDefinition qd=newGenIVReportQuery();
  if (!this.usesDetails) {
    qd.setUsesDetails(false);
  }
  IQueryResults qr=myGenDataEngine.prepare(qd).execute(scope);
  GEN_queryResultID=qr.getID();
  IResultIterator ri=qr.getResultIterator();
  while (ri.next()) {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(this.rowExprName[i]) + ""String_Node_Str"";
    if (!this.notIncludeAggr) {
      for (int i=0; i < totalExprName.length; i++)       abc+=ri.getValue(this.totalExprName[i]) + ""String_Node_Str"";
    }
    if (this.GEN_print == true)     this.testPrintln(abc);
    if (this.GEN_add_subquery == true) {
      IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
      while (subRi.next()) {
        abc=""String_Node_Str"";
        for (int i=0; i < subRowExprName1.length; i++) {
          abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
        }
        if (this.USE_DATE_IN_SUBQUERY)         abc+=subRi.getValue(""String_Node_Str"");
      }
      subRi.close();
    }
  }
  if (this.add_subquery_on_query) {
    IResultIterator subRi=ri.getSecondaryIterator(subQueryName1,scope);
    String abc=""String_Node_Str"";
    for (int i=0; i < subRowExprName1.length; i++)     abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
    if (this.GEN_print)     this.testPrintln(abc);
    while (subRi.next()) {
      abc=""String_Node_Str"";
      for (int i=0; i < subRowExprName1.length; i++)       abc+=subRi.getValue(subRowExprName1[i]) + ""String_Node_Str"";
      this.testPrintln(abc);
    }
  }
  if (this.GEN_print == true)   this.testPrintln(""String_Node_Str"");
  ri.close();
  qr.close();
  myGenDataEngine.shutdown();
}",0.8134475939353988
74009,"/** 
 * @return aggregation expression array
 */
private IBaseExpression[] getAggrExpr(){
  int num2=2;
  IBaseExpression[] totalBeArray=new IBaseExpression[num2];
  totalBeArray[0]=new ScriptExpression(""String_Node_Str"");
  if (this.USE_ROW_IN_AGGREGATION)   totalBeArray[1]=new ScriptExpression(""String_Node_Str"");
 else   totalBeArray[1]=new ScriptExpression(""String_Node_Str"");
  totalExprName=new String[totalBeArray.length];
  this.totalExprName[0]=""String_Node_Str"";
  this.totalExprName[1]=""String_Node_Str"";
  return totalBeArray;
}","/** 
 * @return aggregation expression array
 */
private IBaseExpression[] getAggrExpr(){
  if (this.notIncludeAggr)   return new IBaseExpression[0];
  int num2=2;
  IBaseExpression[] totalBeArray=new IBaseExpression[num2];
  totalBeArray[0]=new ScriptExpression(""String_Node_Str"");
  if (this.USE_ROW_IN_AGGREGATION)   totalBeArray[1]=new ScriptExpression(""String_Node_Str"");
 else   totalBeArray[1]=new ScriptExpression(""String_Node_Str"");
  totalExprName=new String[totalBeArray.length];
  this.totalExprName[0]=""String_Node_Str"";
  this.totalExprName[1]=""String_Node_Str"";
  return totalBeArray;
}",0.9474605954465848
74010,"/** 
 * @return
 */
private QueryDefinition newGenIVReportQuery(){
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  if (this.GEN_use_invalid_column)   qd.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  for (int i=0; i < totalBeArray.length; i++)   qd.addResultSetExpression(this.totalExprName[i],totalBeArray[i]);
  if (this.GEN_add_filter == true) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.TEST_ISEMPTY) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  SortDefinition sortDefn=new SortDefinition();
  sortDefn.setColumn(""String_Node_Str"");
  qd.addSort(sortDefn);
  if (this.GEN_add_group == true) {
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
    if (this.GEN_add_subquery == true) {
      SubqueryDefinition subqueryDefn=new SubqueryDefinition(subQueryName1,qd);
      subRowExprName1=new String[3];
      subRowExprName1[0]=""String_Node_Str"";
      subRowExprName1[1]=""String_Node_Str"";
      subRowExprName1[2]=""String_Node_Str"";
      ScriptExpression[] exprs=new ScriptExpression[3];
      exprs[0]=new ScriptExpression(""String_Node_Str"");
      exprs[1]=new ScriptExpression(""String_Node_Str"");
      exprs[2]=new ScriptExpression(""String_Node_Str"");
      for (int i=0; i < subRowExprName1.length; i++)       subqueryDefn.addResultSetExpression(subRowExprName1[i],exprs[i]);
      if (this.USE_DATE_IN_SUBQUERY)       subqueryDefn.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
      subqueryDefn.setApplyOnGroupFlag(true);
      gd.addSubquery(subqueryDefn);
    }
  }
  return qd;
}","/** 
 * @return
 */
private QueryDefinition newGenIVReportQuery(){
  QueryDefinition qd=newReportQuery();
  IBaseExpression[] rowBeArray=getRowExpr();
  IBaseExpression[] totalBeArray=getAggrExpr();
  for (int i=0; i < rowBeArray.length; i++)   qd.addResultSetExpression(this.rowExprName[i],rowBeArray[i]);
  if (this.GEN_use_invalid_column)   qd.addResultSetExpression(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  if (!this.notIncludeAggr) {
    for (int i=0; i < totalBeArray.length; i++)     qd.addResultSetExpression(this.totalExprName[i],totalBeArray[i]);
  }
  if (this.GEN_add_filter == true) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.TEST_ISEMPTY) {
    ConditionalExpression filterExpr=new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GT,""String_Node_Str"");
    FilterDefinition filterDefn=new FilterDefinition(filterExpr);
    qd.addFilter(filterDefn);
    this.GEN_filterDefn.add(filterDefn);
  }
  if (this.GEN_add_sort) {
    SortDefinition sortDefn=new SortDefinition();
    sortDefn.setColumn(""String_Node_Str"");
    qd.addSort(sortDefn);
  }
  if (this.GEN_add_group == true) {
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyColumn(""String_Node_Str"");
    qd.addGroup(gd);
    if (this.GEN_add_subquery == true) {
      SubqueryDefinition subqueryDefn=getSubQueryDefn(qd);
      gd.addSubquery(subqueryDefn);
    }
  }
  if (add_subquery_on_query) {
    qd.addSubquery(getSubQueryDefn(qd));
  }
  return qd;
}",0.7441976541053157
74011,"void shutdownDerby(){
  try {
    getDerbyDriver().connect(""String_Node_Str"",null);
  }
 catch (  SQLException e) {
  }
}","void shutdownDerby(){
  try {
    if (derbyClassLoader == null || !derbyClassLoader.isGood()) {
      initClassLoaders();
    }
    getDerbyDriver().connect(""String_Node_Str"",null);
  }
 catch (  SQLException e) {
  }
}",0.711764705882353
74012,"/** 
 * Render report content from design file
 * @param out
 * @throws Exception
 */
private void __renderReport(OutputStream out) throws Exception {
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  Locale locale=(Locale)this.options.getOption(InputOptions.OPT_LOCALE);
  Boolean isMasterPageContent=(Boolean)this.options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Boolean svgFlag=(Boolean)this.options.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)this.options.getOption(InputOptions.OPT_FORMAT);
  Boolean isRtl=(Boolean)this.options.getOption(InputOptions.OPT_RTL);
  String servletPath=(String)this.options.getOption(InputOptions.OPT_SERVLET_PATH);
  IReportRunnable runnable=(IReportRunnable)this.reportDesignHandle.getDesignObject();
  String reportTitle=ParameterAccessor.htmlDecode(BirtUtility.getTitleFromDesign(reportDesignHandle));
  Map params=__handleParameters(reportDesignHandle,null);
  Collection parameterDefList=getReportService().getParameterDefinitions(reportDesignHandle,options,false);
  Map displayTexts=BirtUtility.getDisplayTexts(parameterDefList,null,(HttpServletRequest)pageContext.getRequest());
  ReportEngineService.getInstance().runAndRenderReport(request,runnable,out,format,locale,isRtl.booleanValue(),params,isMasterPageContent.booleanValue(),svgFlag.booleanValue(),Boolean.TRUE,null,null,displayTexts,servletPath,reportTitle);
}","/** 
 * Render report content from design file
 * @param out
 * @throws Exception
 */
private void __renderReport(OutputStream out) throws Exception {
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  Locale locale=(Locale)this.options.getOption(InputOptions.OPT_LOCALE);
  Boolean isMasterPageContent=(Boolean)this.options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  Boolean svgFlag=(Boolean)this.options.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)this.options.getOption(InputOptions.OPT_FORMAT);
  Boolean isRtl=(Boolean)this.options.getOption(InputOptions.OPT_RTL);
  String servletPath=(String)this.options.getOption(InputOptions.OPT_SERVLET_PATH);
  IReportRunnable runnable=(IReportRunnable)this.reportDesignHandle.getDesignObject();
  String reportTitle=ParameterAccessor.htmlDecode(BirtUtility.getTitleFromDesign(reportDesignHandle));
  Map params=__handleParameters(reportDesignHandle,null);
  Collection parameterDefList=getReportService().getParameterDefinitions(reportDesignHandle,options,false);
  Map displayTexts=BirtUtility.getDisplayTexts(parameterDefList,null,(HttpServletRequest)pageContext.getRequest());
  String realReportletId=viewer.getReportletId();
  if (realReportletId == null) {
    if (viewer.getBookmark() != null && ""String_Node_Str"".equalsIgnoreCase(viewer.getIsReportlet())) {
      realReportletId=viewer.getBookmark();
    }
  }
  if (realReportletId != null) {
    String documentName=ParameterAccessor.getReportDocument(request,viewer.getReportDesign(),viewer.getId());
    ReportEngineService.getInstance().runReport(request,runnable,documentName,locale,parameters,displayTexts);
    IReportDocument doc=ReportEngineService.getInstance().openReportDocument(null,documentName,BirtTagUtil.getModuleOptions(viewer));
    ReportEngineService.getInstance().renderReportlet(out,request,doc,realReportletId,format,isMasterPageContent,svgFlag,null,locale,isRtl.booleanValue(),servletPath);
  }
 else {
    ReportEngineService.getInstance().runAndRenderReport(request,runnable,out,format,locale,isRtl.booleanValue(),params,isMasterPageContent.booleanValue(),svgFlag.booleanValue(),Boolean.TRUE,null,null,displayTexts,servletPath,reportTitle);
  }
}",0.7772304324028462
74013,"/** 
 * Generate document name according to report name.
 * @param request
 * @return document name.
 */
protected static String generateDocumentFromReport(HttpServletRequest request){
  String fileName=getReport(request,null);
  if (fileName.indexOf('.') >= 0) {
    fileName=fileName.substring(0,fileName.lastIndexOf('.'));
  }
  String id=getParameter(request,PARAM_ID);
  if (id != null && id.length() > 0) {
    fileName=fileName + id + SUFFIX_REPORT_DOCUMENT;
  }
 else {
    fileName=fileName + SUFFIX_REPORT_DOCUMENT;
  }
  return fileName;
}","/** 
 * Generate document name according to report name.
 * @param reportName
 * @param id
 * @return document name.
 */
protected static String generateDocumentFromReport(String reportName,String id){
  if (reportName == null)   return null;
  String documentFile=""String_Node_Str"";
  if (reportName.indexOf('.') >= 0) {
    documentFile=reportName.substring(0,reportName.lastIndexOf('.'));
  }
  if (id != null && id.length() > 0) {
    documentFile=documentFile + id + SUFFIX_REPORT_DOCUMENT;
  }
 else {
    documentFile=documentFile + SUFFIX_REPORT_DOCUMENT;
  }
  return documentFile;
}",0.5884413309982487
74014,"/** 
 * Get report document name. If passed file path is null, get document file from request. If isCreated is true, try to create the document file when file path is null.
 * @param request
 * @param filePath
 * @param isCreated
 * @return
 */
public static String getReportDocument(HttpServletRequest request,String filePath,boolean isCreated){
  if (filePath == null)   filePath=DataUtil.trimString(getParameter(request,PARAM_REPORT_DOCUMENT));
  if (filePath.length() <= 0 && !isCreated)   return null;
  if (filePath.length() <= 0) {
    filePath=generateDocumentFromReport(request);
    filePath=createDocumentPath(filePath,request);
  }
 else {
    filePath=getRealPathOnWorkingFolder(filePath,request);
  }
  return filePath;
}","/** 
 * Return the document file according to report name
 * @param request
 * @param reportFile
 * @param id
 * @return
 */
public static String getReportDocument(HttpServletRequest request,String reportFile,String id){
  if (reportFile == null)   return null;
  String documentFile=generateDocumentFromReport(reportFile,id);
  documentFile=createDocumentPath(documentFile,request);
  return documentFile;
}",0.3079615048118985
74015,"/** 
 * load map from query id to result set id from report document.
 */
private void loadResultSetMetaData() throws EngineException {
  try {
    HashMap query2ResultMetaData=report.getResultMetaData();
    IDocArchiveReader reader=reportDocReader.getArchive();
    HashMap queryCounts=new HashMap();
    ArrayList result=DteMetaInfoIOUtil.loadDteMetaInfo(reader);
    if (result != null) {
      Set dteMetaInfoSet=new HashSet();
      for (int i=0; i < result.size(); i++) {
        String[] rsetRelation=(String[])result.get(i);
        String dteMetaInfoString=getDteMetaInfoString(rsetRelation);
        if (dteMetaInfoSet.contains(dteMetaInfoString)) {
          continue;
        }
        dteMetaInfoSet.add(dteMetaInfoString);
        String queryId=rsetRelation[2];
        String rsetId=rsetRelation[3];
        IQueryDefinition query=getQuery(queryId);
        rsetId2queryIdMapping.put(rsetId,queryId);
        int count=-1;
        Integer countObj=(Integer)queryCounts.get(queryId);
        if (countObj != null) {
          count=countObj.intValue();
        }
        count++;
        String rsetName=getQueryName(queryId);
        if (count > 0) {
          rsetName=rsetName + ""String_Node_Str"" + count;
        }
        queryCounts.put(queryId,new Integer(count));
        rsetName2IdMapping.put(rsetName,rsetId);
        if (null != query2ResultMetaData) {
          ResultMetaData metaData=(ResultMetaData)query2ResultMetaData.get(query);
          if (metaData != null && metaData.getColumnCount() > 0) {
            IResultSetItem resultItem=new ResultSetItem(rsetName,metaData);
            resultMetaList.add(resultItem);
          }
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.SEVERE,ioe.getMessage(),ioe);
  }
}","/** 
 * load map from query id to result set id from report document.
 */
private void loadResultSetMetaData(){
  try {
    HashMap query2ResultMetaData=report.getResultMetaData();
    IDocArchiveReader reader=reportDocReader.getArchive();
    HashMap queryCounts=new HashMap();
    ArrayList result=DteMetaInfoIOUtil.loadDteMetaInfo(reader);
    if (result != null) {
      Set dteMetaInfoSet=new HashSet();
      for (int i=0; i < result.size(); i++) {
        String[] rsetRelation=(String[])result.get(i);
        String dteMetaInfoString=getDteMetaInfoString(rsetRelation);
        if (dteMetaInfoSet.contains(dteMetaInfoString)) {
          continue;
        }
        dteMetaInfoSet.add(dteMetaInfoString);
        String queryId=rsetRelation[2];
        String rsetId=rsetRelation[3];
        IQueryDefinition query=getQuery(queryId);
        rsetId2queryIdMapping.put(rsetId,queryId);
        int count=-1;
        Integer countObj=(Integer)queryCounts.get(queryId);
        if (countObj != null) {
          count=countObj.intValue();
        }
        count++;
        String rsetName=getQueryName(queryId);
        if (count > 0) {
          rsetName=rsetName + ""String_Node_Str"" + count;
        }
        queryCounts.put(queryId,new Integer(count));
        rsetName2IdMapping.put(rsetName,rsetId);
        if (null != query2ResultMetaData) {
          ResultMetaData metaData=(ResultMetaData)query2ResultMetaData.get(query);
          if (metaData != null && metaData.getColumnCount() > 0) {
            IResultSetItem resultItem=new ResultSetItem(rsetName,metaData);
            resultMetaList.add(resultItem);
          }
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.SEVERE,ioe.getMessage(),ioe);
  }
}",0.9931972789115646
74016,"private void prepareMetaData(){
  if (isMetaDataPrepared == true)   return;
  HashMap queryIds=report.getQueryIDs();
  HashMap query2itemMapping=report.getReportItemToQueryMap();
  Iterator iter=queryIds.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    IDataQueryDefinition baseQuery=(IDataQueryDefinition)entry.getKey();
    if (baseQuery instanceof IQueryDefinition) {
      IQueryDefinition query=(IQueryDefinition)baseQuery;
      String queryId=(String)entry.getValue();
      ReportItemDesign item=(ReportItemDesign)query2itemMapping.get(query);
      String queryName=item.getName();
      if (queryName == null) {
        queryName=""String_Node_Str"" + item.getID();
      }
      queryId2NameMapping.put(queryId,queryName);
      queryId2QueryMapping.put(queryId,query);
      ;
    }
  }
  try {
    loadResultSetMetaData();
  }
 catch (  EngineException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
    executionContext.addException(e);
  }
  isMetaDataPrepared=true;
}","private void prepareMetaData(){
  if (isMetaDataPrepared == true)   return;
  HashMap queryIds=report.getQueryIDs();
  HashMap query2itemMapping=report.getReportItemToQueryMap();
  Iterator iter=queryIds.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    IDataQueryDefinition baseQuery=(IDataQueryDefinition)entry.getKey();
    if (baseQuery instanceof IQueryDefinition) {
      IQueryDefinition query=(IQueryDefinition)baseQuery;
      String queryId=(String)entry.getValue();
      ReportItemDesign item=(ReportItemDesign)query2itemMapping.get(query);
      String queryName=item.getName();
      if (queryName == null) {
        queryName=""String_Node_Str"" + item.getID();
      }
      queryId2NameMapping.put(queryId,queryName);
      queryId2QueryMapping.put(queryId,query);
      ;
    }
  }
  try {
    loadResultSetMetaData();
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  isMetaDataPrepared=true;
}",0.9783037475345168
74017,"private Collection populateToList(IResultIterator iterator,ScalarParameterHandle parameter,SelectionFilter filter){
  ParameterHelper parameterHelper=new ParameterHelper(parameter,locale);
  Collection choices=parameterHelper.createSelectionCollection();
  int limit=parameter.getListlimit();
  try {
    while (iterator.next() && (limit <= 0 || choices.size() < limit)) {
      if (filter != null && !filter.accept(iterator)) {
        continue;
      }
      String label=parameterHelper.getLabel(iterator);
      Object value=parameterHelper.getValue(iterator);
      choices.add(new SelectionChoice(label,value));
    }
  }
 catch (  BirtException ex) {
    log.log(Level.WARNING,ex.getMessage(),ex);
    executionContext.addException(ex);
  }
  return choices;
}","private Collection populateToList(IResultIterator iterator,ScalarParameterHandle parameter,SelectionFilter filter){
  ParameterHelper parameterHelper=new ParameterHelper(parameter,locale);
  Collection choices=parameterHelper.createSelectionCollection();
  int limit=parameter.getListlimit();
  try {
    while (iterator.next() && (limit <= 0 || choices.size() < limit)) {
      if (filter != null && !filter.accept(iterator)) {
        continue;
      }
      String label=parameterHelper.getLabel(iterator);
      Object value=parameterHelper.getValue(iterator);
      choices.add(new SelectionChoice(label,value));
    }
  }
 catch (  BirtException ex) {
    log.log(Level.WARNING,ex.getMessage(),ex);
    executionContext.addException(parameter,ex);
  }
  return choices;
}",0.993523316062176
74018,"private IResultIterator getResultSetForParameter(ScalarParameterHandle parameter){
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  DataSetHandle dataSet=report.findDataSet(parameter.getDataSetName());
  IResultIterator iterator=null;
  if (dataSet != null) {
    try {
      QueryDefinition queryDefn=createQueryDefinition(dataSet);
      ParameterHelper.addParameterBinding(queryDefn,parameter);
      DataRequestSession dteSession=createDataSession(dataSet);
      iterator=executeQuery(dteSession,queryDefn);
    }
 catch (    BirtException ex) {
      log.log(Level.WARNING,ex.getMessage(),ex);
      executionContext.addException(ex);
    }
  }
  return iterator;
}","private IResultIterator getResultSetForParameter(ScalarParameterHandle parameter){
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  DataSetHandle dataSet=report.findDataSet(parameter.getDataSetName());
  IResultIterator iterator=null;
  if (dataSet != null) {
    try {
      QueryDefinition queryDefn=createQueryDefinition(dataSet);
      ParameterHelper.addParameterBinding(queryDefn,parameter);
      DataRequestSession dteSession=createDataSession(dataSet);
      iterator=executeQuery(dteSession,queryDefn);
    }
 catch (    BirtException ex) {
      log.log(Level.WARNING,ex.getMessage(),ex);
      executionContext.addException(dataSet,ex);
    }
  }
  return iterator;
}",0.994358251057828
74019,"private IResultIterator getResultSetOfCascadingGroup(CascadingParameterGroupHandle parameterGroup){
  if (parameterGroup == null)   return null;
  DataSetHandle dataSet=parameterGroup.getDataSet();
  if (dataSet != null) {
    try {
      QueryDefinition queryDefn=createQueryDefinition(dataSet);
      Iterator iter=parameterGroup.getParameters().iterator();
      while (iter.hasNext()) {
        Object parameter=iter.next();
        if (parameter instanceof ScalarParameterHandle) {
          ParameterHelper.addParameterBinding(queryDefn,(ScalarParameterHandle)parameter);
        }
      }
      DataRequestSession dteSession=createDataSession(dataSet);
      return executeQuery(dteSession,queryDefn);
    }
 catch (    BirtException ex) {
      log.log(Level.WARNING,ex.getMessage(),ex);
      executionContext.addException(ex);
    }
  }
  return null;
}","private IResultIterator getResultSetOfCascadingGroup(CascadingParameterGroupHandle parameterGroup){
  if (parameterGroup == null)   return null;
  DataSetHandle dataSet=parameterGroup.getDataSet();
  if (dataSet != null) {
    try {
      QueryDefinition queryDefn=createQueryDefinition(dataSet);
      Iterator iter=parameterGroup.getParameters().iterator();
      while (iter.hasNext()) {
        Object parameter=iter.next();
        if (parameter instanceof ScalarParameterHandle) {
          ParameterHelper.addParameterBinding(queryDefn,(ScalarParameterHandle)parameter);
        }
      }
      DataRequestSession dteSession=createDataSession(dataSet);
      return executeQuery(dteSession,queryDefn);
    }
 catch (    BirtException ex) {
      log.log(Level.WARNING,ex.getMessage(),ex);
      executionContext.addException(dataSet,ex);
    }
  }
  return null;
}",0.9953863898500576
74020,"private void handleOnPrepare(RowHandle handle){
  boolean hasJavaScript=(handle.getOnPrepare() != null) && (handle.getOnPrepare().length() != 0);
  boolean hasJavaCode=(handle.getEventHandlerClass() != null) && (handle.getEventHandlerClass().length() != 0);
  if (!hasJavaScript && !hasJavaCode)   return;
  executionContext.pushHandle(handle);
  if (hasJavaScript) {
    IDesignElement element=SimpleElementFactory.getInstance().getElement(handle);
    try {
      if (element != null) {
        executionContext.newScope(element);
      }
      if (handle.getOnPrepare() != null) {
        String scriptText=handle.getOnPrepare();
        if (null != scriptText) {
          String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ITableRowModel.ON_PREPARE_METHOD));
          ScriptExpression expr=new ScriptExpression(scriptText,id);
          executionContext.evaluate(expr);
        }
      }
      return;
    }
  finally {
      if (element != null) {
        executionContext.exitScope();
      }
    }
  }
  try {
    RowScriptExecutor.handleOnPrepare(handle,executionContext);
  }
  finally {
    executionContext.popHandle();
  }
}","private void handleOnPrepare(RowHandle handle){
  boolean hasJavaScript=(handle.getOnPrepare() != null) && (handle.getOnPrepare().length() != 0);
  boolean hasJavaCode=(handle.getEventHandlerClass() != null) && (handle.getEventHandlerClass().length() != 0);
  if (!hasJavaScript && !hasJavaCode)   return;
  executionContext.pushHandle(handle);
  if (hasJavaScript) {
    IDesignElement element=SimpleElementFactory.getInstance().getElement(handle);
    try {
      if (element != null) {
        executionContext.newScope(element);
      }
      if (handle.getOnPrepare() != null) {
        String scriptText=handle.getOnPrepare();
        if (null != scriptText) {
          String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ITableRowModel.ON_PREPARE_METHOD));
          ScriptExpression expr=new ScriptExpression(scriptText,id);
          executionContext.evaluate(expr);
        }
      }
      return;
    }
 catch (    BirtException ex) {
      executionContext.addException(handle,ex);
      return;
    }
 finally {
      if (element != null) {
        executionContext.exitScope();
      }
    }
  }
  try {
    RowScriptExecutor.handleOnPrepare(handle,executionContext);
  }
  finally {
    executionContext.popHandle();
  }
}",0.958594730238394
74021,"abstract protected IBaseResultSet doExecuteQuery(IBaseResultSet parent,IQueryDefinition query,boolean useCache);","abstract protected IBaseResultSet doExecuteQuery(IBaseResultSet parent,IQueryDefinition query,boolean useCache) throws BirtException ;",0.9105691056910568
74022,"/** 
 * @param report
 * @param appContext
 */
protected void doPrepareQuery(Report report,Map appContext){
  this.appContext=appContext;
  List queries=report.getQueries();
  for (int i=0; i < queries.size(); i++) {
    IDataQueryDefinition query=(IDataQueryDefinition)queries.get(i);
    try {
      IBasePreparedQuery preparedQuery=dteSession.prepare(query,appContext);
      queryMap.put(query,preparedQuery);
    }
 catch (    BirtException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
      context.addException(e);
    }
  }
}","/** 
 * @param report
 * @param appContext
 */
protected void doPrepareQuery(Report report,Map appContext){
  this.appContext=appContext;
  List queries=report.getQueries();
  for (int i=0; i < queries.size(); i++) {
    IDataQueryDefinition query=(IDataQueryDefinition)queries.get(i);
    try {
      IBasePreparedQuery preparedQuery=dteSession.prepare(query,appContext);
      queryMap.put(query,preparedQuery);
    }
 catch (    BirtException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
      context.addException(report.getReportDesign(),e);
    }
  }
}",0.9774571686203788
74023,"abstract protected IBaseResultSet doExecuteCube(IBaseResultSet parent,ICubeQueryDefinition query,boolean useCache);","abstract protected IBaseResultSet doExecuteCube(IBaseResultSet parent,ICubeQueryDefinition query,boolean useCache) throws BirtException ;",0.9126984126984128
74024,"public IBaseResultSet execute(IBaseResultSet parent,IDataQueryDefinition query,boolean useCache) throws BirtException {
  if (query instanceof ISubqueryDefinition) {
    if (parent == null) {
      return null;
    }
 else     if (parent instanceof ICubeResultSet) {
      context.addException(new EngineException(""String_Node_Str"" + ((ISubqueryDefinition)query).getName()));
    }
    return doExecuteSubQuery((IQueryResultSet)parent,(ISubqueryDefinition)query);
  }
 else   if (query instanceof IQueryDefinition) {
    return doExecuteQuery(parent,(IQueryDefinition)query,useCache);
  }
 else   if (query instanceof ICubeQueryDefinition) {
    return doExecuteCube(parent,(ICubeQueryDefinition)query,useCache);
  }
  throw new EngineException(""String_Node_Str"" + query.getClass().getName());
}","public IBaseResultSet execute(IBaseResultSet parent,IDataQueryDefinition query,boolean useCache) throws BirtException {
  if (query instanceof ISubqueryDefinition) {
    if (parent == null) {
      return null;
    }
 else     if (parent instanceof ICubeResultSet) {
      throw new EngineException(""String_Node_Str"" + ((ISubqueryDefinition)query).getName());
    }
    return doExecuteSubQuery((IQueryResultSet)parent,(ISubqueryDefinition)query);
  }
 else   if (query instanceof IQueryDefinition) {
    return doExecuteQuery(parent,(IQueryDefinition)query,useCache);
  }
 else   if (query instanceof ICubeQueryDefinition) {
    return doExecuteCube(parent,(ICubeQueryDefinition)query,useCache);
  }
  throw new EngineException(""String_Node_Str"" + query.getClass().getName());
}",0.9822109275730624
74025,"public void skipTo(String cellIndex){
  try {
    CubeUtil.positionCursor(cube,cellIndex);
  }
 catch (  Exception e) {
    context.addException(new EngineException(""String_Node_Str""));
  }
}","public void skipTo(String cellIndex) throws BirtException {
  try {
    CubeUtil.positionCursor(cube,cellIndex);
  }
 catch (  OLAPException e) {
    throw new EngineException(""String_Node_Str"",e);
  }
}",0.8578680203045685
74026,"/** 
 * save the meta information
 * @param parentResultSet
 * @param query
 * @param resultSet
 */
protected void storeMetaInfo(IBaseResultSet parentResultSet,IDataQueryDefinition query,IBaseResultSet resultSet){
  String pRsetId=null;
  String rowId=""String_Node_Str"";
  if (parentResultSet != null) {
    if (parentResultSet instanceof QueryResultSet) {
      pRsetId=((QueryResultSet)parentResultSet).getQueryResultsID();
    }
 else {
      pRsetId=((CubeResultSet)parentResultSet).getQueryResultsID();
    }
    try {
      rowId=parentResultSet.getRawID();
    }
 catch (    BirtException be) {
      logger.log(Level.SEVERE,be.getMessage());
      context.addException(be);
    }
  }
  String queryID=(String)queryIDMap.get(query);
  storeDteMetaInfo(pRsetId,rowId,queryID,resultSet.getQueryResults().getID());
}","/** 
 * save the meta information
 * @param parentResultSet
 * @param query
 * @param resultSet
 */
protected void storeMetaInfo(IBaseResultSet parentResultSet,IDataQueryDefinition query,IBaseResultSet resultSet) throws BirtException {
  String pRsetId=null;
  String rowId=""String_Node_Str"";
  if (parentResultSet != null) {
    if (parentResultSet instanceof QueryResultSet) {
      pRsetId=((QueryResultSet)parentResultSet).getQueryResultsID();
    }
 else {
      pRsetId=((CubeResultSet)parentResultSet).getQueryResultsID();
    }
    rowId=parentResultSet.getRawID();
  }
  String queryID=(String)queryIDMap.get(query);
  storeDteMetaInfo(pRsetId,rowId,queryID,resultSet.getQueryResults().getID());
}",0.4836173001310616
74027,"protected IBaseResultSet doExecuteQuery(IBaseResultSet parentResultSet,IQueryDefinition query,boolean useCache){
  IBaseResultSet resultSet=super.doExecuteQuery(parentResultSet,query,useCache);
  if (resultSet != null) {
    storeMetaInfo(parentResultSet,query,resultSet);
  }
  return resultSet;
}","protected IBaseResultSet doExecuteQuery(IBaseResultSet parentResultSet,IQueryDefinition query,boolean useCache) throws BirtException {
  IBaseResultSet resultSet=super.doExecuteQuery(parentResultSet,query,useCache);
  if (resultSet != null) {
    storeMetaInfo(parentResultSet,query,resultSet);
  }
  return resultSet;
}",0.964401294498382
74028,"protected IBaseResultSet doExecuteCube(IBaseResultSet parentResultSet,ICubeQueryDefinition query,boolean useCache){
  IBaseResultSet resultSet=super.doExecuteCube(parentResultSet,query,useCache);
  if (resultSet != null) {
    storeMetaInfo(parentResultSet,query,resultSet);
  }
  return resultSet;
}","protected IBaseResultSet doExecuteCube(IBaseResultSet parentResultSet,ICubeQueryDefinition query,boolean useCache) throws BirtException {
  IBaseResultSet resultSet=super.doExecuteCube(parentResultSet,query,useCache);
  if (resultSet != null) {
    storeMetaInfo(parentResultSet,query,resultSet);
  }
  return resultSet;
}",0.964630225080386
74029,"/** 
 * @param rowExprsRAIs
 * @param rowLenRAIs
 * @param version
 */
ExprDataReader1(RAInputStream rowExprsRAIs,RAInputStream rowLenRAIs,int version,DataSetResultSet dataSetData) throws DataException {
  this.INT_LENGTH=IOUtil.INT_LENGTH;
  try {
    this.rowCount=IOUtil.readInt(rowExprsRAIs);
    int exprCount=IOUtil.readInt(rowExprsRAIs);
    this.exprKeys=new ArrayList();
    this.dataSetExprKeys=new HashMap();
    this.rowExprsDis=new DataInputStream(rowExprsRAIs);
    this.bindingNameTypeMap=new HashMap();
    for (int i=0; i < exprCount; i++) {
      String key=IOUtil.readString(this.rowExprsDis);
      this.exprKeys.add(key);
      if (version >= VersionManager.VERSION_2_2_1_3) {
        this.bindingNameTypeMap.put(key,new Integer(IOUtil.readInt(this.rowExprsDis)));
      }
    }
    if (version >= VersionManager.VERSION_2_2_1_3) {
      int dataSetColumnExprCount=IOUtil.readInt(this.rowExprsDis);
      for (int i=0; i < dataSetColumnExprCount; i++) {
        String key=IOUtil.readObject(this.rowExprsDis).toString();
        this.dataSetExprKeys.put(key,IOUtil.readObject(this.rowExprsDis));
        this.bindingNameTypeMap.put(key,new Integer(IOUtil.readInt(this.rowExprsDis)));
      }
    }
    this.metaOffset=INT_LENGTH + IOUtil.readInt(this.rowExprsDis) + INT_LENGTH;
    this.dataSetData=dataSetData;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  this.rowExprsRAIs=rowExprsRAIs;
  this.rowLenRAIs=rowLenRAIs;
  this.rowLenDis=new DataInputStream(rowLenRAIs);
  this.version=version;
  this.currReadIndex=0;
  this.currRowIndex=-1;
}","/** 
 * @param rowExprsRAIs
 * @param rowLenRAIs
 * @param version
 */
ExprDataReader1(RAInputStream rowExprsRAIs,RAInputStream rowLenRAIs,int version,DataSetResultSet dataSetData) throws DataException {
  this.INT_LENGTH=IOUtil.INT_LENGTH;
  try {
    this.rowCount=IOUtil.readInt(rowExprsRAIs);
    int exprCount=IOUtil.readInt(rowExprsRAIs);
    this.exprKeys=new ArrayList();
    this.dataSetExprKeys=new HashMap();
    this.rowExprsDis=new DataInputStream(rowExprsRAIs);
    this.bindingNameTypeMap=new HashMap();
    for (int i=0; i < exprCount; i++) {
      String key=IOUtil.readString(this.rowExprsDis);
      this.exprKeys.add(key);
      if (version >= VersionManager.VERSION_2_2_1_3) {
        this.bindingNameTypeMap.put(key,new Integer(IOUtil.readInt(this.rowExprsDis)));
      }
    }
    if (version >= VersionManager.VERSION_2_2_1_3) {
      int dataSetColumnExprCount=IOUtil.readInt(this.rowExprsDis);
      for (int i=0; i < dataSetColumnExprCount; i++) {
        String key=IOUtil.readObject(this.rowExprsDis).toString();
        this.dataSetExprKeys.put(key,IOUtil.readObject(this.rowExprsDis));
        this.bindingNameTypeMap.put(key,new Integer(IOUtil.readInt(this.rowExprsDis)));
      }
    }
    this.metaOffset=INT_LENGTH + IOUtil.readInt(this.rowExprsDis) + INT_LENGTH;
    if (this.dataSetExprKeys.size() > 0)     this.dataSetData=dataSetData;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  this.rowExprsRAIs=rowExprsRAIs;
  this.rowLenRAIs=rowLenRAIs;
  this.rowLenDis=new DataInputStream(rowLenRAIs);
  this.version=version;
  this.currReadIndex=0;
  this.currRowIndex=-1;
}",0.98763197586727
74030,"/** 
 * @param rowExprsIs
 * @param rowLenIs
 * @throws DataException
 */
private void initialize(String tempDir,RAInputStream rowExprsIs,RAInputStream rowLenIs,int rowCount,DataSetResultSet dataSetResultSet) throws DataException {
  try {
    IOUtil.readInt(rowExprsIs);
    int exprCount=IOUtil.readInt(rowExprsIs);
    this.exprKeys=new ArrayList();
    this.dataSetExprKeys=new HashMap();
    this.dataSetResultSet=dataSetResultSet;
    this.rowExprsDis=new DataInputStream(rowExprsIs);
    this.rowLenDis=new DataInputStream(rowLenIs);
    this.bindingNameTypeMap=new HashMap();
    for (int i=0; i < exprCount; i++) {
      String key=IOUtil.readString(this.rowExprsDis);
      this.exprKeys.add(key);
      if (version >= VersionManager.VERSION_2_2_1_3) {
        this.bindingNameTypeMap.put(key,new Integer(IOUtil.readInt(this.rowExprsDis)));
      }
    }
    if (version >= VersionManager.VERSION_2_2_1_3) {
      int dataSetColumnExprCount=IOUtil.readInt(this.rowExprsDis);
      for (int i=0; i < dataSetColumnExprCount; i++) {
        String key=IOUtil.readObject(this.rowExprsDis).toString();
        this.dataSetExprKeys.put(key,IOUtil.readObject(this.rowExprsDis));
        this.bindingNameTypeMap.put(key,new Integer(IOUtil.readInt(this.rowExprsDis)));
      }
    }
    this.metaOffset=IOUtil.INT_LENGTH + IOUtil.readInt(this.rowExprsDis) + IOUtil.INT_LENGTH;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  this.rowExprsIs=rowExprsIs;
  this.rowLenIs=rowLenIs;
  this.currRowIndex=-1;
  this.lastRowIndex=-1;
  this.currRowLenReadIndex=0;
  this.rowCount=rowCount;
  this.rowIDMap=new BasicCachedArray(tempDir,rowCount);
}","/** 
 * @param rowExprsIs
 * @param rowLenIs
 * @throws DataException
 */
private void initialize(String tempDir,RAInputStream rowExprsIs,RAInputStream rowLenIs,int rowCount,DataSetResultSet dataSetResultSet) throws DataException {
  try {
    IOUtil.readInt(rowExprsIs);
    int exprCount=IOUtil.readInt(rowExprsIs);
    this.exprKeys=new ArrayList();
    this.dataSetExprKeys=new HashMap();
    this.rowExprsDis=new DataInputStream(rowExprsIs);
    this.rowLenDis=new DataInputStream(rowLenIs);
    this.bindingNameTypeMap=new HashMap();
    for (int i=0; i < exprCount; i++) {
      String key=IOUtil.readString(this.rowExprsDis);
      this.exprKeys.add(key);
      if (version >= VersionManager.VERSION_2_2_1_3) {
        this.bindingNameTypeMap.put(key,new Integer(IOUtil.readInt(this.rowExprsDis)));
      }
    }
    if (version >= VersionManager.VERSION_2_2_1_3) {
      int dataSetColumnExprCount=IOUtil.readInt(this.rowExprsDis);
      for (int i=0; i < dataSetColumnExprCount; i++) {
        String key=IOUtil.readObject(this.rowExprsDis).toString();
        this.dataSetExprKeys.put(key,IOUtil.readObject(this.rowExprsDis));
        this.bindingNameTypeMap.put(key,new Integer(IOUtil.readInt(this.rowExprsDis)));
      }
    }
    if (this.dataSetExprKeys.size() > 0)     this.dataSetResultSet=dataSetResultSet;
    this.metaOffset=IOUtil.INT_LENGTH + IOUtil.readInt(this.rowExprsDis) + IOUtil.INT_LENGTH;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  this.rowExprsIs=rowExprsIs;
  this.rowLenIs=rowLenIs;
  this.currRowIndex=-1;
  this.lastRowIndex=-1;
  this.currRowLenReadIndex=0;
  this.rowCount=rowCount;
  this.rowIDMap=new BasicCachedArray(tempDir,rowCount);
}",0.9627705627705628
74031,"/** 
 * @param expr
 * @param bindings
 * @param onlyFromDirectReferenceExpr
 * @return
 * @throws DataException
 */
private static Set getReferencedDimLevel(IScriptExpression expr,List bindings,boolean onlyFromDirectReferenceExpr) throws DataException {
  if (expr == null)   return new HashSet();
  if (expr.getText() == null || expr.getText().length() == 0)   throw new DataException(ResourceConstants.DATA_BINDING_EXPRESSION_EMPTY);
  try {
    Set result=new HashSet();
    Context cx=Context.enter();
    CompilerEnvirons ce=new CompilerEnvirons();
    Parser p=new Parser(ce,cx.getErrorReporter());
    ScriptOrFnNode tree=p.parse(expr.getText(),null,0);
    populateDimLevels(null,tree,result,bindings,onlyFromDirectReferenceExpr);
    return result;
  }
  finally {
    Context.exit();
  }
}","/** 
 * @param expr
 * @param bindings
 * @param onlyFromDirectReferenceExpr
 * @return
 * @throws DataException
 */
private static Set getReferencedDimLevel(IScriptExpression expr,List bindings,boolean onlyFromDirectReferenceExpr) throws DataException {
  if (expr == null || expr.getText() == null || expr.getText().length() == 0)   return new HashSet();
  try {
    Set result=new HashSet();
    Context cx=Context.enter();
    CompilerEnvirons ce=new CompilerEnvirons();
    Parser p=new Parser(ce,cx.getErrorReporter());
    ScriptOrFnNode tree=p.parse(expr.getText(),null,0);
    populateDimLevels(null,tree,result,bindings,onlyFromDirectReferenceExpr);
    return result;
  }
  finally {
    Context.exit();
  }
}",0.8710526315789474
74032,"private void addColumn(ColumnEvent event,IReportContent report,ITableContent table){
  Column col=new Column(report);
  DimensionHandle handle=null;
  try {
switch (event.type) {
case ColumnEvent.ROW_EDGE_CHANGE:
      handle=crosstabItem.getColumnWidth(crosstabItem.getDimension(ROW_AXIS_TYPE,event.dimensionIndex).getLevel(event.levelIndex).getCell());
    break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
  for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
    MeasureViewHandle mv=crosstabItem.getMeasure(i);
    if (mv.getHeader() != null) {
      handle=crosstabItem.getColumnWidth(mv.getHeader());
      break;
    }
  }
break;
case ColumnEvent.COLUMN_EDGE_CHANGE:
if (crosstabItem.getMeasureCount() > 0) {
int mx=event.measureIndex >= 0 ? event.measureIndex : 0;
handle=crosstabItem.getColumnWidth(crosstabItem.getMeasure(mx).getCell());
}
 else {
DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) - 1);
handle=crosstabItem.getColumnWidth(dv.getLevel(dv.getLevelCount() - 1).getCell());
}
break;
case ColumnEvent.COLUMN_TOTAL_CHANGE:
if (crosstabItem.getMeasureCount() > 0) {
int mx=event.measureIndex >= 0 ? event.measureIndex : 0;
DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,event.dimensionIndex);
LevelViewHandle lv=dv.getLevel(event.levelIndex);
handle=crosstabItem.getColumnWidth(crosstabItem.getMeasure(mx).getAggregationCell(rowDimension,rowLevel,dv.getCubeDimensionName(),lv.getCubeLevelName()));
}
 else {
DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,event.dimensionIndex);
handle=crosstabItem.getColumnWidth(dv.getLevel(event.levelIndex).getAggregationHeader());
}
break;
case ColumnEvent.GRAND_TOTAL_CHANGE:
if (crosstabItem.getMeasureCount() > 0) {
int mx=event.measureIndex >= 0 ? event.measureIndex : 0;
handle=crosstabItem.getColumnWidth(crosstabItem.getMeasure(mx).getAggregationCell(rowDimension,rowLevel,null,null));
}
 else {
handle=crosstabItem.getColumnWidth(crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE));
}
break;
case ColumnEvent.MEASURE_CHANGE:
int mx=event.measureIndex >= 0 ? event.measureIndex : 0;
handle=crosstabItem.getColumnWidth(crosstabItem.getMeasure(mx).getCell());
break;
}
}
 catch (CrosstabException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (handle != null) {
DimensionType width=ContentUtil.createDimension(handle);
if (width != null) {
col.setWidth(width);
}
}
table.addColumn(col);
}","private void addColumn(ColumnEvent event,IReportContent report,ITableContent table){
  Column col=new Column(report);
  DimensionHandle handle=null;
  try {
switch (event.type) {
case ColumnEvent.ROW_EDGE_CHANGE:
      col.setColumnHeaderState(true);
    handle=crosstabItem.getColumnWidth(crosstabItem.getDimension(ROW_AXIS_TYPE,event.dimensionIndex).getLevel(event.levelIndex).getCell());
  break;
case ColumnEvent.MEASURE_HEADER_CHANGE:
col.setColumnHeaderState(true);
for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
MeasureViewHandle mv=crosstabItem.getMeasure(i);
if (mv.getHeader() != null) {
  handle=crosstabItem.getColumnWidth(mv.getHeader());
  break;
}
}
break;
case ColumnEvent.COLUMN_EDGE_CHANGE:
if (crosstabItem.getMeasureCount() > 0) {
int mx=event.measureIndex >= 0 ? event.measureIndex : 0;
handle=crosstabItem.getColumnWidth(crosstabItem.getMeasure(mx).getCell());
}
 else {
DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) - 1);
handle=crosstabItem.getColumnWidth(dv.getLevel(dv.getLevelCount() - 1).getCell());
}
break;
case ColumnEvent.COLUMN_TOTAL_CHANGE:
if (crosstabItem.getMeasureCount() > 0) {
int mx=event.measureIndex >= 0 ? event.measureIndex : 0;
DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,event.dimensionIndex);
LevelViewHandle lv=dv.getLevel(event.levelIndex);
handle=crosstabItem.getColumnWidth(crosstabItem.getMeasure(mx).getAggregationCell(rowDimension,rowLevel,dv.getCubeDimensionName(),lv.getCubeLevelName()));
}
 else {
DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,event.dimensionIndex);
handle=crosstabItem.getColumnWidth(dv.getLevel(event.levelIndex).getAggregationHeader());
}
break;
case ColumnEvent.GRAND_TOTAL_CHANGE:
if (crosstabItem.getMeasureCount() > 0) {
int mx=event.measureIndex >= 0 ? event.measureIndex : 0;
handle=crosstabItem.getColumnWidth(crosstabItem.getMeasure(mx).getAggregationCell(rowDimension,rowLevel,null,null));
}
 else {
handle=crosstabItem.getColumnWidth(crosstabItem.getGrandTotal(COLUMN_AXIS_TYPE));
}
break;
case ColumnEvent.MEASURE_CHANGE:
int mx=event.measureIndex >= 0 ? event.measureIndex : 0;
handle=crosstabItem.getColumnWidth(crosstabItem.getMeasure(mx).getCell());
break;
}
}
 catch (CrosstabException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (handle != null) {
DimensionType width=ContentUtil.createDimension(handle);
if (width != null) {
col.setWidth(width);
}
}
table.addColumn(col);
}",0.9812075169932029
74033,"public IReportItemExecutor getNextChild(){
  IReportItemExecutor nextExecutor=null;
  if (currentGroupIndex < columnGroups.size()) {
    EdgeGroup eg=(EdgeGroup)columnGroups.get(currentGroupIndex++);
    DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,eg.dimensionIndex);
    LevelViewHandle lv=dv.getLevel(eg.levelIndex);
    nextExecutor=new CrosstabHeaderRowExecutor(this,lv);
  }
 else   if (hasMeasureHeader) {
    nextExecutor=new CrosstabMeasureHeaderRowExecutor(this);
    hasMeasureHeader=false;
  }
  return nextExecutor;
}","public IReportItemExecutor getNextChild(){
  IReportItemExecutor nextExecutor=null;
  if (currentGroupIndex < columnGroups.size()) {
    EdgeGroup eg=(EdgeGroup)columnGroups.get(currentGroupIndex++);
    DimensionViewHandle dv=crosstabItem.getDimension(COLUMN_AXIS_TYPE,eg.dimensionIndex);
    LevelViewHandle lv=dv.getLevel(eg.levelIndex);
    nextExecutor=new CrosstabHeaderRowExecutor(this,lv);
  }
 else   if (hasMeasureHeader) {
    nextExecutor=new CrosstabMeasureHeaderRowExecutor(this);
    hasMeasureHeader=false;
  }
 else   if (useCornerHeader) {
    nextExecutor=new CrosstabCornerHeaderRowExecutor(this);
    useCornerHeader=false;
  }
  return nextExecutor;
}",0.8643790849673203
74034,"private void prepareChildren(){
  currentGroupIndex=0;
  hasMeasureHeader=GroupUtil.hasMeasureHeader(crosstabItem,COLUMN_AXIS_TYPE);
}","private void prepareChildren(){
  currentGroupIndex=0;
  hasMeasureHeader=GroupUtil.hasMeasureHeader(crosstabItem,COLUMN_AXIS_TYPE);
  useCornerHeader=columnGroups.size() == 0 && !hasMeasureHeader && crosstabItem.getHeader() != null;
}",0.7262872628726287
74035,"public boolean hasNextChild(){
  if (currentGroupIndex < columnGroups.size()) {
    return true;
  }
  if (hasMeasureHeader) {
    return true;
  }
  return false;
}","public boolean hasNextChild(){
  if (currentGroupIndex < columnGroups.size()) {
    return true;
  }
  if (hasMeasureHeader) {
    return true;
  }
  if (useCornerHeader) {
    return true;
  }
  return false;
}",0.7978723404255319
74036,"private void collectExecutable() throws OLAPException {
  endOfGroups=false;
  currentChild=0;
  children=new ArrayList();
  int startingGroupIndex=getStartingGroupLevel(rowCursor,groupCursors);
  if (startingGroupIndex <= 0) {
    if (columnGroups.size() > 0 || GroupUtil.hasMeasureHeader(crosstabItem,COLUMN_AXIS_TYPE)) {
      CrosstabHeaderExecutor headerExecutor=new CrosstabHeaderExecutor(this);
      children.add(headerExecutor);
    }
  }
{
    CrosstabGroupExecutor groupExecutor=new CrosstabGroupExecutor(this,0,rowCursor);
    children.add(groupExecutor);
  }
  int endingGroupIndex=getEndingGroupLevel(rowCursor,groupCursors);
  if (endingGroupIndex <= 0) {
    if (crosstabItem.getGrandTotal(ROW_AXIS_TYPE) != null && (measureCount > 0 || !IColumnWalker.IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE)) {
      CrosstabFooterExecutor totalExecutor=new CrosstabFooterExecutor(this);
      children.add(totalExecutor);
    }
    endOfGroups=true;
  }
}","private void collectExecutable() throws OLAPException {
  endOfGroups=false;
  currentChild=0;
  children=new ArrayList();
  int startingGroupIndex=getStartingGroupLevel(rowCursor,groupCursors);
  if (startingGroupIndex <= 0) {
    if (columnGroups.size() > 0 || GroupUtil.hasMeasureHeader(crosstabItem,COLUMN_AXIS_TYPE) || crosstabItem.getHeader() != null) {
      CrosstabHeaderExecutor headerExecutor=new CrosstabHeaderExecutor(this);
      children.add(headerExecutor);
    }
  }
{
    CrosstabGroupExecutor groupExecutor=new CrosstabGroupExecutor(this,0,rowCursor);
    children.add(groupExecutor);
  }
  int endingGroupIndex=getEndingGroupLevel(rowCursor,groupCursors);
  if (endingGroupIndex <= 0) {
    if (crosstabItem.getGrandTotal(ROW_AXIS_TYPE) != null && (measureCount > 0 || !IColumnWalker.IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE)) {
      CrosstabFooterExecutor totalExecutor=new CrosstabFooterExecutor(this);
      children.add(totalExecutor);
    }
    endOfGroups=true;
  }
}",0.9814624098867148
74037,"public IStructure createInstance(Object[] fields){
  Object[][] objectArrays=ObjectArrayUtil.convert(fields);
  Row4Aggregation result=new Row4Aggregation();
  result.setLevelMembers(new Member[objectArrays.length - 1]);
  for (int i=0; i < result.getLevelMembers().length; i++) {
    result.getLevelMembers()[i]=(Member)levelMemberCreator.createInstance(objectArrays[i]);
  }
  result.setMeasures(objectArrays[objectArrays.length - 2]);
  result.setParameterValues(objectArrays[objectArrays.length - 1]);
  return result;
}","public IStructure createInstance(Object[] fields){
  Object[][] objectArrays=ObjectArrayUtil.convert(fields);
  Row4Aggregation result=new Row4Aggregation();
  result.setLevelMembers(new Member[objectArrays.length - 2]);
  for (int i=0; i < result.getLevelMembers().length; i++) {
    result.getLevelMembers()[i]=(Member)levelMemberCreator.createInstance(objectArrays[i]);
  }
  result.setMeasures(objectArrays[objectArrays.length - 2]);
  result.setParameterValues(objectArrays[objectArrays.length - 1]);
  return result;
}",0.9980916030534353
74038,"/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByNumberRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByPositionRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByStringRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.filter.CubePosFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}","/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.TestDteLevelDataSetCache.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByNumberRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByPositionRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByStringRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.filter.CubePosFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}",0.9942887152891748
74039,"/** 
 * When mode is MODE_GENERATION, the writer stream of archive will be used. When mode is MODE_PRESENTATION, the reader stream of archive will be used. When mode is DIRECT_PRESENTATION, the archive will not be used. When mode is PRESENTATION_AND_GENERATION, both the write stream and the read  steram of archive will be used. 
 * @param mode
 * @param scope
 * @param reader
 * @param writer
 * @return an instance of DataEngineContext
 */
public static DataEngineContext newInstance(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer) throws BirtException {
  return new DataEngineContext(mode,scope,reader,writer);
}","/** 
 * @param mode
 * @param scope
 * @param reader
 * @param writer
 * @param useDatasetCache
 * @return
 * @throws BirtException
 */
public static DataEngineContext newInstance(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer,boolean useDteLevelDatasetCache) throws BirtException {
  return new DataEngineContext(mode,scope,reader,writer,useDteLevelDatasetCache);
}",0.1727447216890595
74040,"/** 
 * construction
 */
CacheMapManager(String tempDir){
  this.tempDir=tempDir;
}","/** 
 * construction
 */
CacheMapManager(String tempDir,boolean useJVMLevelCache){
  this.tempDir=tempDir;
  if (useJVMLevelCache) {
    this.cacheMap=jvmCacheMap;
  }
 else {
    this.cacheMap=new HashMap();
  }
}",0.5589225589225589
74041,"/** 
 * Reset for test case
 */
void resetForTest(){
synchronized (this) {
    cacheMap=new HashMap();
  }
}","/** 
 * Reset for test case
 */
void resetForTest(){
synchronized (this) {
    cacheMap.clear();
  }
}",0.9333333333333332
74042,"/** 
 * Construction
 */
public DataSetCacheManager(String tempDir,DataEngine dataEngine){
  this.tempDir=tempDir;
  this.dataSourceDesign=null;
  this.dataSetDesign=null;
  this.cacheOption=DataEngineContext.CACHE_USE_DEFAULT;
  this.alwaysCacheRowCount=0;
  this.cacheMapManager=new CacheMapManager(tempDir);
  this.mode=DataEngineContext.CACHE_MODE_IN_DISK;
}","/** 
 * Construction
 */
public DataSetCacheManager(String tempDir,DataEngine dataEngine,boolean useJVMLevelCache){
  this.tempDir=tempDir;
  this.dataSourceDesign=null;
  this.dataSetDesign=null;
  this.cacheOption=DataEngineContext.CACHE_USE_DEFAULT;
  this.alwaysCacheRowCount=0;
  this.cacheMapManager=new CacheMapManager(tempDir,useJVMLevelCache);
  this.mode=DataEngineContext.CACHE_MODE_IN_DISK;
}",0.9451697127937336
74043,"/** 
 * Constructor.
 * @param engine
 */
public DataEngineSession(DataEngineImpl engine){
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  Context cx=Context.enter();
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(cx);
  }
  new CoreJavaScriptInitializer().initialize(cx,scope);
  Context.exit();
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode();
  File f=new File(tempDir);
  if (!f.exists() || !f.isDirectory()) {
    f.mkdir();
  }
  tempDir+=File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(tempDir,engine);
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}","/** 
 * Constructor.
 * @param engine
 */
public DataEngineSession(DataEngineImpl engine){
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  Context cx=Context.enter();
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(cx);
  }
  new CoreJavaScriptInitializer().initialize(cx,scope);
  Context.exit();
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode();
  File f=new File(tempDir);
  if (!f.exists() || !f.isDirectory()) {
    f.mkdir();
  }
  tempDir+=File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(tempDir,engine,!engine.getContext().useDatasetCache());
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}",0.9767718880285884
74044,"/** 
 * @param outerResults
 * @param scope
 * @return
 * @throws DataException
 */
public IQueryResults execute(IBaseQueryResults outerResults,Scriptable scope) throws DataException {
  this.configureDataSetCache(queryDefn,appContext,scope != null ? scope : dataEngine.getSession().getSharedScope());
  return preparedQuery.doPrepare(outerResults,scope,newExecutor(),this);
}","/** 
 * @param outerResults
 * @param scope
 * @return
 * @throws DataException
 */
public IQueryResults execute(IBaseQueryResults outerResults,Scriptable scope) throws DataException {
  this.configureDataSetCache(queryDefn,appContext,scope != null ? scope : dataEngine.getSession().getSharedScope());
  initializeExecution(outerResults,scope);
  return preparedQuery.doPrepare(outerResults,scope,newExecutor(),this);
}",0.9459119496855346
74045,"public IQueryResults execute(IQueryResults outerResults,Scriptable scope) throws DataException {
  this.configureParameterHints(queryDefn,appContext,scope);
  return super.execute(outerResults,scope);
}","public IQueryResults execute(IBaseQueryResults outerResults,Scriptable scope) throws DataException {
  this.initializeExecution(outerResults,scope);
  return super.execute(outerResults,scope);
}",0.8434343434343434
74046,"protected IBaseResultSet doExecuteCube(IBaseResultSet parentResult,ICubeQueryDefinition query,boolean useCache){
  String queryID=(String)queryIDMap.get(query);
  try {
    IBaseQueryResults parentQueryResults=null;
    if (parentResult != null) {
      parentQueryResults=parentResult.getQueryResults();
    }
    String resultSetID=loadResultSetID(parentResult,queryID);
    if (resultSetID == null) {
      logger.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
    if (useCache) {
      String rsetId=String.valueOf(cachedQueryToResults.get(query));
      query.setQueryResultsID(rsetId);
    }
 else {
      query.setQueryResultsID(null);
    }
    query.setQueryResultsID(resultSetID);
    IBasePreparedQuery pQuery=dteSession.prepare(query,appContext);
    Scriptable scope=context.getSharedScope();
    String pRsetId=null;
    String rowId=""String_Node_Str"";
    IBaseQueryResults dteResults;
    CubeResultSet resultSet=null;
    if (parentQueryResults == null) {
      dteResults=dteSession.execute(pQuery,null,scope);
      resultSet=new CubeResultSet(this,context,query,(ICubeQueryResults)dteResults);
    }
 else {
      pRsetId=parentResult.getQueryResults().getID();
      rowId=parentResult.getRawID();
      dteResults=dteSession.execute(pQuery,parentQueryResults,scope);
      resultSet=new CubeResultSet(this,context,resultSet,query,(ICubeQueryResults)dteResults);
    }
    storeDteMetaInfo(pRsetId,rowId,queryID,dteResults.getID());
    if (query.cacheQueryResults()) {
      cachedQueryToResults.put(query,dteResults.getID());
    }
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
    return null;
  }
}","protected IBaseResultSet doExecuteCube(IBaseResultSet parentResult,ICubeQueryDefinition query,boolean useCache){
  String queryID=(String)queryIDMap.get(query);
  try {
    IBaseQueryResults parentQueryResults=null;
    if (parentResult != null) {
      parentQueryResults=parentResult.getQueryResults();
    }
    String resultSetID=loadResultSetID(parentResult,queryID);
    if (resultSetID == null) {
      logger.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
    if (useCache) {
      String rsetId=String.valueOf(cachedQueryToResults.get(query));
      query.setQueryResultsID(rsetId);
    }
 else {
      query.setQueryResultsID(null);
    }
    query.setQueryResultsID(resultSetID);
    IBasePreparedQuery pQuery=dteSession.prepare(query,appContext);
    Scriptable scope=context.getSharedScope();
    String pRsetId=null;
    String rowId=""String_Node_Str"";
    IBaseQueryResults dteResults;
    CubeResultSet resultSet=null;
    if (parentQueryResults == null) {
      dteResults=dteSession.execute(pQuery,null,scope);
      resultSet=new CubeResultSet(this,context,query,(ICubeQueryResults)dteResults);
    }
 else {
      pRsetId=parentResult.getQueryResults().getID();
      rowId=parentResult.getRawID();
      dteResults=dteSession.execute(pQuery,parentQueryResults,scope);
      resultSet=new CubeResultSet(this,context,parentResult,query,(ICubeQueryResults)dteResults);
    }
    storeDteMetaInfo(pRsetId,rowId,queryID,dteResults.getID());
    if (query.cacheQueryResults()) {
      cachedQueryToResults.put(query,dteResults.getID());
    }
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
    return null;
  }
}",0.9944943494639236
74047,"protected IBaseResultSet doExecuteCube(IBaseResultSet parentResult,ICubeQueryDefinition query,boolean useCache){
  String queryID=(String)queryIDMap.get(query);
  try {
    String resultSetID=loadResultSetID(parentResult,queryID);
    IBaseQueryResults queryResults=null;
    query.setQueryResultsID(resultSetID);
    IBasePreparedQuery pQuery=dteSession.prepare(query,context.getAppContext());
    if (parentResult != null) {
      queryResults=dteSession.execute(pQuery,parentResult.getQueryResults(),context.getSharedScope());
    }
 else {
      queryResults=dteSession.execute(pQuery,null,context.getSharedScope());
    }
    CubeResultSet resultSet=null;
    if (parentResult == null) {
      resultSet=new CubeResultSet(this,context,query,(ICubeQueryResults)queryResults);
    }
 else {
      resultSet=new CubeResultSet(this,context,resultSet,query,(ICubeQueryResults)queryResults);
    }
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
    return null;
  }
}","protected IBaseResultSet doExecuteCube(IBaseResultSet parentResult,ICubeQueryDefinition query,boolean useCache){
  String queryID=(String)queryIDMap.get(query);
  try {
    String resultSetID=loadResultSetID(parentResult,queryID);
    IBaseQueryResults queryResults=null;
    query.setQueryResultsID(resultSetID);
    IBasePreparedQuery pQuery=dteSession.prepare(query,context.getAppContext());
    if (parentResult != null) {
      queryResults=dteSession.execute(pQuery,parentResult.getQueryResults(),context.getSharedScope());
    }
 else {
      queryResults=dteSession.execute(pQuery,null,context.getSharedScope());
    }
    CubeResultSet resultSet=null;
    if (parentResult == null) {
      resultSet=new CubeResultSet(this,context,query,(ICubeQueryResults)queryResults);
    }
 else {
      resultSet=new CubeResultSet(this,context,parentResult,query,(ICubeQueryResults)queryResults);
    }
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
    return null;
  }
}",0.9909738717339668
74048,"public void doSaveAs(){
  final IReportProvider provider=getProvider();
  if (provider != null) {
    IPath path=provider.getSaveAsPath(getEditorInput());
    if (path == null) {
      return;
    }
    final IEditorInput input=provider.createNewEditorInput(path);
    setInput(input);
    IRunnableWithProgress op=new IRunnableWithProgress(){
      public synchronized final void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        final InvocationTargetException[] iteHolder=new InvocationTargetException[1];
        try {
          IWorkspaceRunnable workspaceRunnable=new IWorkspaceRunnable(){
            public void run(            IProgressMonitor pm) throws CoreException {
              try {
                execute(pm);
              }
 catch (              InvocationTargetException e) {
                iteHolder[0]=e;
              }
catch (              InterruptedException e) {
                throw new OperationCanceledException(e.getMessage());
              }
            }
          }
;
          ResourcesPlugin.getWorkspace().run(workspaceRunnable,ResourcesPlugin.getWorkspace().getRoot(),IResource.NONE,monitor);
        }
 catch (        CoreException e) {
          throw new InvocationTargetException(e);
        }
catch (        OperationCanceledException e) {
          throw new InterruptedException(e.getMessage());
        }
        if (iteHolder[0] != null) {
          throw iteHolder[0];
        }
      }
      public void execute(      final IProgressMonitor monitor) throws CoreException, InvocationTargetException, InterruptedException {
        try {
          if (!input.exists()) {
          }
          doSave(monitor);
        }
 catch (        Exception e) {
          ExceptionHandler.handle(e);
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(getSite().getWorkbenchWindow().getShell()).run(false,true,op);
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
    }
  }
}","public void doSaveAs(){
  final IReportProvider provider=getProvider();
  if (provider != null) {
    IPath path=provider.getSaveAsPath(getEditorInput());
    if (path == null) {
      return;
    }
    final IPath origReportPath=provider.getInputPath(getEditorInput());
    final IEditorInput input=provider.createNewEditorInput(path);
    setInput(input);
    IRunnableWithProgress op=new IRunnableWithProgress(){
      public synchronized final void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        final InvocationTargetException[] iteHolder=new InvocationTargetException[1];
        try {
          IWorkspaceRunnable workspaceRunnable=new IWorkspaceRunnable(){
            public void run(            IProgressMonitor pm) throws CoreException {
              try {
                execute(pm);
              }
 catch (              InvocationTargetException e) {
                iteHolder[0]=e;
              }
catch (              InterruptedException e) {
                throw new OperationCanceledException(e.getMessage());
              }
            }
          }
;
          ResourcesPlugin.getWorkspace().run(workspaceRunnable,ResourcesPlugin.getWorkspace().getRoot(),IResource.NONE,monitor);
        }
 catch (        CoreException e) {
          throw new InvocationTargetException(e);
        }
catch (        OperationCanceledException e) {
          throw new InterruptedException(e.getMessage());
        }
        if (iteHolder[0] != null) {
          throw iteHolder[0];
        }
      }
      public void execute(      final IProgressMonitor monitor) throws CoreException, InvocationTargetException, InterruptedException {
        try {
          if (!input.exists()) {
          }
          IReportProvider provider=getProvider();
          if (provider != null) {
            provider.saveReport(getModel(),getEditorInput(),origReportPath,monitor);
            firePropertyChange(PROP_DIRTY);
          }
        }
 catch (        Exception e) {
          ExceptionHandler.handle(e);
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(getSite().getWorkbenchWindow().getShell()).run(false,true,op);
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
    }
  }
}",0.9335205992509364
74049,"public void execute(final IProgressMonitor monitor) throws CoreException, InvocationTargetException, InterruptedException {
  try {
    if (!input.exists()) {
    }
    doSave(monitor);
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}","public void execute(final IProgressMonitor monitor) throws CoreException, InvocationTargetException, InterruptedException {
  try {
    if (!input.exists()) {
    }
    IReportProvider provider=getProvider();
    if (provider != null) {
      provider.saveReport(getModel(),getEditorInput(),origReportPath,monitor);
      firePropertyChange(PROP_DIRTY);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}",0.7227138643067846
74050,"private void saveFile(final ModuleHandle moduleHandle,final File file,IProgressMonitor monitor){
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public synchronized final void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      try {
        IWorkspaceRunnable workspaceRunnable=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor pm) throws CoreException {
            try {
              execute(pm);
            }
 catch (            CoreException e) {
              throw e;
            }
catch (            IOException e) {
              ExceptionHandler.handle(e);
            }
          }
        }
;
        ResourcesPlugin.getWorkspace().run(workspaceRunnable,ResourcesPlugin.getWorkspace().getRoot(),IResource.NONE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
catch (      OperationCanceledException e) {
        throw new InterruptedException(e.getMessage());
      }
    }
    public void execute(    final IProgressMonitor monitor) throws CoreException, IOException {
      if (file.exists() || file.createNewFile()) {
        FileOutputStream out=new FileOutputStream(file);
        moduleHandle.serialize(out);
        out.close();
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(UIUtil.getDefaultShell()).run(false,true,op);
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}","private void saveFile(final ModuleHandle moduleHandle,final File file,final IPath oldReportPath,IProgressMonitor monitor){
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public synchronized final void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      try {
        IWorkspaceRunnable workspaceRunnable=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor pm) throws CoreException {
            try {
              execute(pm);
            }
 catch (            CoreException e) {
              throw e;
            }
catch (            IOException e) {
              ExceptionHandler.handle(e);
            }
          }
        }
;
        ResourcesPlugin.getWorkspace().run(workspaceRunnable,ResourcesPlugin.getWorkspace().getRoot(),IResource.NONE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
catch (      OperationCanceledException e) {
        throw new InterruptedException(e.getMessage());
      }
    }
    public void execute(    final IProgressMonitor monitor) throws CoreException, IOException {
      if (file.exists() || file.createNewFile()) {
        FileOutputStream out=new FileOutputStream(file);
        moduleHandle.serialize(out);
        out.close();
        if (oldReportPath != null) {
          copyReportConfigFile(new Path(file.getAbsolutePath()),oldReportPath);
        }
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(UIUtil.getDefaultShell()).run(false,true,op);
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}",0.9503407984420644
74051,"public void saveReport(ModuleHandle moduleHandle,Object element,IProgressMonitor monitor){
  if (element instanceof IPathEditorInput) {
    IPathEditorInput input=(IPathEditorInput)element;
    saveFile(moduleHandle,input.getPath().toFile(),monitor);
  }
}","public void saveReport(ModuleHandle moduleHandle,Object element,IPath origReportPath,IProgressMonitor monitor){
  if (element instanceof IPathEditorInput) {
    IPathEditorInput input=(IPathEditorInput)element;
    saveFile(moduleHandle,input.getPath().toFile(),origReportPath,monitor);
  }
}",0.9343065693430656
74052,"public void execute(final IProgressMonitor monitor) throws CoreException, IOException {
  if (file.exists() || file.createNewFile()) {
    FileOutputStream out=new FileOutputStream(file);
    moduleHandle.serialize(out);
    out.close();
  }
}","public void execute(final IProgressMonitor monitor) throws CoreException, IOException {
  if (file.exists() || file.createNewFile()) {
    FileOutputStream out=new FileOutputStream(file);
    moduleHandle.serialize(out);
    out.close();
    if (oldReportPath != null) {
      copyReportConfigFile(new Path(file.getAbsolutePath()),oldReportPath);
    }
  }
}",0.8086522462562395
74053,"/** 
 * Save moduleHandle to the orginal input.
 * @param moduleHandle
 * @param element input element.
 * @param monitor
 */
void saveReport(ModuleHandle moduleHandle,Object element,IProgressMonitor monitor);","/** 
 * Saves moduleHandle to the current input.
 * @param moduleHandle The specified module handle which provides the common functionalities of report design and library.
 * @param element input element.
 * @param origReportPath The path of original report.
 * @param monitor the progress monitor to use to display progress and receive requests for cancelation.
 */
void saveReport(ModuleHandle moduleHandle,Object element,IPath origReportPath,IProgressMonitor monitor);",0.5735294117647058
74054,"public void startLabel(ILabelContent label){
  Object design=label.getGenerateBy();
  IContent container=label;
  while (design == null) {
    container=(IContent)container.getParent();
    design=((IContent)container).getGenerateBy();
  }
  HyperlinkDef url=parseHyperLink(label);
  if (!(""String_Node_Str"".equalsIgnoreCase(label.getText()) && container instanceof IForeignContent)) {
    engine.addData(label.getText(),label.getComputedStyle(),url);
  }
}","public void startLabel(ILabelContent label){
  Object design=label.getGenerateBy();
  IContent container=label;
  while (design == null) {
    container=(IContent)container.getParent();
    design=((IContent)container).getGenerateBy();
  }
  HyperlinkDef url=parseHyperLink(label);
  BookmarkDef bookmark=getBookmark(label);
  if (!(""String_Node_Str"".equalsIgnoreCase(label.getText()) && container instanceof IForeignContent)) {
    engine.addData(label.getText(),label.getComputedStyle(),url,bookmark);
  }
}",0.9461697722567288
74055,"public void end(IReportContent report){
  engine.complete();
  ExcelWriter writer=new ExcelWriter(out);
  writer.writeDeclarations();
  writer.declareStyles(engine.getStyleMap());
  writer.startSheet();
  writer.startTable(engine.getCoordinates());
  int count=0;
  while (count < engine.getRowCount()) {
    outputData(engine.getRow(count),writer);
    count++;
  }
  writer.endTable();
  writer.closeSheet();
  for (int i=0; i < charts.size(); i++) {
    File temp=(File)charts.get(i);
    writer.insertSheet(temp);
    temp.delete();
  }
  writer.close(true);
}","public void end(IReportContent report){
  engine.complete();
  ExcelWriter writer=new ExcelWriter(out);
  writer.writeDeclarations();
  writer.declareStyles(engine.getStyleMap());
  writer.defineNames(engine.getNamesRefer());
  writer.startSheet();
  writer.startTable(engine.getCoordinates());
  int count=0;
  while (count < engine.getRowCount()) {
    outputData(engine.getRow(count),writer);
    count++;
  }
  writer.endTable();
  writer.closeSheet();
  writer.close(true);
}",0.7931034482758621
74056,"public void startImage(IImageContent image){
  if (image.getGenerateBy() instanceof ExtendedItemDesign) {
    ExtendedItemDesign eitem=(ExtendedItemDesign)image.getGenerateBy();
    ExtendedItemHandle handle=(ExtendedItemHandle)eitem.getHandle();
    String tagName=handle.getExtensionName();
    if (""String_Node_Str"".equalsIgnoreCase(tagName)) {
      File res=chartConverter.convert(eitem,handle);
      if (res != null) {
        charts.add(res);
      }
    }
  }
}","public void startImage(IImageContent image){
}",0.1782945736434108
74057,"public void startData(IDataContent data){
  super.startData(data);
  HyperlinkDef url=parseHyperLink(data);
  if (((StyledElementDesign)data.getGenerateBy()).getMap() != null && ((StyledElementDesign)data.getGenerateBy()).getMap().getRuleCount() > 0) {
    engine.addData(data.getText().trim(),data.getComputedStyle(),url);
  }
 else   if (!ExcelUtil.getType(data.getValue()).equals(Data.NUMBER) && !ExcelUtil.getType(data.getValue()).equals(Data.DATE)) {
    engine.addData(data.getText(),data.getComputedStyle(),url);
  }
 else {
    engine.addData(data.getValue(),data.getComputedStyle(),url);
  }
}","public void startData(IDataContent data){
  super.startData(data);
  HyperlinkDef url=parseHyperLink(data);
  BookmarkDef bookmark=getBookmark(data);
  if (((StyledElementDesign)data.getGenerateBy()).getMap() != null && ((StyledElementDesign)data.getGenerateBy()).getMap().getRuleCount() > 0) {
    engine.addData(data.getText().trim(),data.getComputedStyle(),url,bookmark);
  }
 else   if (!ExcelUtil.getType(data.getValue()).equals(Data.NUMBER) && !ExcelUtil.getType(data.getValue()).equals(Data.DATE)) {
    engine.addData(data.getText(),data.getComputedStyle(),url,bookmark);
  }
 else {
    engine.addData(data.getValue(),data.getComputedStyle(),url,bookmark);
  }
}",0.9457973291437548
74058,"public void startAutoText(IAutoTextContent autoText){
  HyperlinkDef link=parseHyperLink(autoText);
  engine.addData(autoText.getText(),autoText.getComputedStyle(),link);
}","public void startAutoText(IAutoTextContent autoText){
  HyperlinkDef link=parseHyperLink(autoText);
  BookmarkDef bookmark=getBookmark(autoText);
  engine.addData(autoText.getText(),autoText.getComputedStyle(),link,bookmark);
}",0.8621553884711779
74059,"public void startList(IListContent list){
  Rule rule=engine.getCurrentContainer().getRule();
  TableInfo table=LayoutUtil.createTable(list,rule.getWidth());
  engine.addTable(table,list.getComputedStyle());
  if (list.getChildren() == null) {
    HyperlinkDef link=parseHyperLink(list);
    engine.addData(ExcelLayoutEngine.EMPTY,list.getComputedStyle(),link);
  }
}","public void startList(IListContent list){
  Rule rule=engine.getCurrentContainer().getRule();
  TableInfo table=LayoutUtil.createTable(list,rule.getWidth());
  engine.addTable(table,list.getComputedStyle());
  if (list.getChildren() == null) {
    HyperlinkDef link=parseHyperLink(list);
    BookmarkDef bookmark=getBookmark(list);
    engine.addData(ExcelLayoutEngine.EMPTY,list.getComputedStyle(),link,bookmark);
  }
}",0.9326556543837357
74060,"private HyperlinkDef parseHyperLink(IContent content){
  IHyperlinkAction linkaction=content.getHyperlinkAction();
  if (linkaction != null) {
    if (linkaction.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      return new HyperlinkDef(linkaction.getBookmark().replaceAll(""String_Node_Str"",""String_Node_Str""),IHyperlinkAction.ACTION_BOOKMARK,null);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_HYPERLINK) {
      return new HyperlinkDef(linkaction.getHyperlink(),IHyperlinkAction.ACTION_HYPERLINK,null);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_DRILLTHROUGH) {
      Action act=new Action(linkaction);
      IHTMLActionHandler actionHandler=null;
      Object ac=service.getOption(IRenderOption.ACTION_HANDLER);
      if (ac != null && ac instanceof IHTMLActionHandler) {
        actionHandler=(IHTMLActionHandler)ac;
        return new HyperlinkDef(actionHandler.getURL(act,service.getReportContext()),IHyperlinkAction.ACTION_DRILLTHROUGH,null);
      }
    }
  }
 else   if (getBookMark(content) != null) {
    return getBookMark(content);
  }
  return null;
}","private HyperlinkDef parseHyperLink(IContent content){
  IHyperlinkAction linkaction=content.getHyperlinkAction();
  if (linkaction != null) {
    if (linkaction.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      return new HyperlinkDef(linkaction.getBookmark().replaceAll(""String_Node_Str"",""String_Node_Str""),IHyperlinkAction.ACTION_BOOKMARK,null);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_HYPERLINK) {
      return new HyperlinkDef(linkaction.getHyperlink(),IHyperlinkAction.ACTION_HYPERLINK,null);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_DRILLTHROUGH) {
      Action act=new Action(linkaction);
      IHTMLActionHandler actionHandler=null;
      Object ac=service.getOption(IRenderOption.ACTION_HANDLER);
      if (ac != null && ac instanceof IHTMLActionHandler) {
        actionHandler=(IHTMLActionHandler)ac;
        return new HyperlinkDef(actionHandler.getURL(act,service.getReportContext()),IHyperlinkAction.ACTION_DRILLTHROUGH,null);
      }
    }
  }
  return null;
}",0.9530887134231304
74061,"public static boolean isNumber(String val){
  NumberFormat nf=NumberFormat.getInstance();
  try {
    Number num=nf.parse(val);
    return true;
  }
 catch (  Exception e) {
    return false;
  }
}","public static boolean isNumber(String val){
  NumberFormat nf=NumberFormat.getInstance();
  try {
    nf.parse(val);
    return true;
  }
 catch (  Exception e) {
    return false;
  }
}",0.9712793733681462
74062,"/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.TestDteLevelDataSetCache.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByNumberRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByPositionRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByStringRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.filter.CubePosFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}","/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByNumberRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByPositionRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByStringRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.filter.CubePosFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}",0.9942887152891748
74063,"/** 
 * @param mode
 * @param scope
 * @param reader
 * @param writer
 * @param useDatasetCache
 * @return
 * @throws BirtException
 */
public static DataEngineContext newInstance(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer,boolean useDteLevelDatasetCache) throws BirtException {
  return new DataEngineContext(mode,scope,reader,writer,useDteLevelDatasetCache);
}","/** 
 * When mode is MODE_GENERATION, the writer stream of archive will be used. When mode is MODE_PRESENTATION, the reader stream of archive will be used. When mode is DIRECT_PRESENTATION, the archive will not be used. When mode is PRESENTATION_AND_GENERATION, both the write stream and the read  steram of archive will be used. 
 * @param mode
 * @param scope
 * @param reader
 * @param writer
 * @return an instance of DataEngineContext
 */
public static DataEngineContext newInstance(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer) throws BirtException {
  return new DataEngineContext(mode,scope,reader,writer);
}",0.4491362763915547
74064,"/** 
 * construction
 */
CacheMapManager(String tempDir,boolean useJVMLevelCache){
  this.tempDir=tempDir;
  if (useJVMLevelCache) {
    this.cacheMap=jvmCacheMap;
  }
 else {
    this.cacheMap=new HashMap();
  }
}","/** 
 * construction
 */
CacheMapManager(String tempDir){
  this.tempDir=tempDir;
}",0.5589225589225589
74065,"/** 
 * Reset for test case
 */
void resetForTest(){
synchronized (this) {
    cacheMap.clear();
  }
}","/** 
 * Reset for test case
 */
void resetForTest(){
synchronized (this) {
    cacheMap=new HashMap();
  }
}",0.9333333333333332
74066,"/** 
 * Construction
 */
public DataSetCacheManager(String tempDir,DataEngine dataEngine,boolean useJVMLevelCache){
  this.tempDir=tempDir;
  this.dataSourceDesign=null;
  this.dataSetDesign=null;
  this.cacheOption=DataEngineContext.CACHE_USE_DEFAULT;
  this.alwaysCacheRowCount=0;
  this.cacheMapManager=new CacheMapManager(tempDir,useJVMLevelCache);
  this.mode=DataEngineContext.CACHE_MODE_IN_DISK;
}","/** 
 * Construction
 */
public DataSetCacheManager(String tempDir,DataEngine dataEngine){
  this.tempDir=tempDir;
  this.dataSourceDesign=null;
  this.dataSetDesign=null;
  this.cacheOption=DataEngineContext.CACHE_USE_DEFAULT;
  this.alwaysCacheRowCount=0;
  this.cacheMapManager=new CacheMapManager(tempDir);
  this.mode=DataEngineContext.CACHE_MODE_IN_DISK;
}",0.9451697127937336
74067,"/** 
 * Constructor.
 * @param engine
 */
public DataEngineSession(DataEngineImpl engine){
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  Context cx=Context.enter();
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(cx);
  }
  new CoreJavaScriptInitializer().initialize(cx,scope);
  Context.exit();
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode();
  File f=new File(tempDir);
  if (!f.exists() || !f.isDirectory()) {
    f.mkdir();
  }
  tempDir+=File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(tempDir,engine,!engine.getContext().useDatasetCache());
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}","/** 
 * Constructor.
 * @param engine
 */
public DataEngineSession(DataEngineImpl engine){
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  Context cx=Context.enter();
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(cx);
  }
  new CoreJavaScriptInitializer().initialize(cx,scope);
  Context.exit();
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode();
  File f=new File(tempDir);
  if (!f.exists() || !f.isDirectory()) {
    f.mkdir();
  }
  tempDir+=File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(tempDir,engine);
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}",0.9767718880285884
74068,"/** 
 * Open the vertical-align box tag if the element needs implementing the vertical-align.
 */
public void handleVerticalAlignBegin(IContent element){
  IStyle style=element.getStyle();
  CSSValue vAlign=style.getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  CSSValue canShrink=style.getProperty(IStyle.STYLE_CAN_SHRINK);
  DimensionType height=element.getHeight();
  if (vAlign != null && vAlign != IStyle.BASELINE_VALUE && height != null && canShrink != IStyle.TRUE_VALUE) {
    writer.openTag(HTMLTags.TAG_TABLE);
    StringBuffer nestingTableStyleBuffer=new StringBuffer();
    nestingTableStyleBuffer.append(""String_Node_Str"");
    nestingTableStyleBuffer.append(height.toString());
    writer.attribute(HTMLTags.ATTR_STYLE,nestingTableStyleBuffer);
    writer.openTag(HTMLTags.TAG_TR);
    writer.openTag(HTMLTags.TAG_TD);
    StringBuffer textStyleBuffer=new StringBuffer();
    textStyleBuffer.append(""String_Node_Str"");
    textStyleBuffer.append(vAlign.getCssText());
    textStyleBuffer.append(""String_Node_Str"");
    writer.attribute(HTMLTags.ATTR_STYLE,textStyleBuffer);
  }
}","/** 
 * Open the vertical-align box tag if the element needs implementing the vertical-align.
 */
public void handleVerticalAlignBegin(IContent element){
  IStyle style=element.getStyle();
  CSSValue vAlign=style.getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  CSSValue canShrink=style.getProperty(IStyle.STYLE_CAN_SHRINK);
  DimensionType height=element.getHeight();
  if (vAlign != null && vAlign != IStyle.BASELINE_VALUE && height != null && canShrink != IStyle.TRUE_VALUE) {
    writer.openTag(HTMLTags.TAG_TABLE);
    StringBuffer nestingTableStyleBuffer=new StringBuffer();
    nestingTableStyleBuffer.append(""String_Node_Str"");
    nestingTableStyleBuffer.append(height.toString());
    writer.attribute(HTMLTags.ATTR_STYLE,nestingTableStyleBuffer.toString());
    writer.openTag(HTMLTags.TAG_TR);
    writer.openTag(HTMLTags.TAG_TD);
    StringBuffer textStyleBuffer=new StringBuffer();
    textStyleBuffer.append(""String_Node_Str"");
    textStyleBuffer.append(vAlign.getCssText());
    textStyleBuffer.append(""String_Node_Str"");
    writer.attribute(HTMLTags.ATTR_STYLE,textStyleBuffer.toString());
  }
}",0.9899817850637522
74069,"/** 
 * top/bottom dimension filter.
 * @throws Exception
 */
public void testAggrFilter2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_N,""String_Node_Str""));
  filter1.setTargetLevel(level21);
  CubeFilterDefinition filter2=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str""));
  filter2.setTargetLevel(level12);
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * top/bottom dimension filter.
 * @throws Exception
 */
public void testAggrFilter2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_N,""String_Node_Str""));
  filter1.setTargetLevel(level21);
  CubeFilterDefinition filter2=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str""));
  filter2.setTargetLevel(level12);
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9951243295953194
74070,"public void testAggrFilter1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter1.setAxisQualifierLevels(null);
  filter1.setAxisQualifierValues(null);
  filter1.setTargetLevel(level21);
  CubeFilterDefinition filter2=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  filter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  filter2.setTargetLevel(level11);
  CubeFilterDefinition filter3=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_PERCENT,""String_Node_Str""));
  filter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  filter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  filter3.setTargetLevel(level11);
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  cqd.addFilter(filter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","public void testAggrFilter1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter1.setAxisQualifierLevels(null);
  filter1.setAxisQualifierValues(null);
  filter1.setTargetLevel(level21);
  CubeFilterDefinition filter2=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  filter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  filter2.setTargetLevel(level11);
  CubeFilterDefinition filter3=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_PERCENT,""String_Node_Str""));
  filter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  filter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  filter3.setTargetLevel(level11);
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  cqd.addFilter(filter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9959083469721768
74071,"/** 
 * @throws Exception
 */
public void testMeasureFilter() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  CubeFilterDefinition filter2=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * @throws Exception
 */
public void testMeasureFilter() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  CubeFilterDefinition filter2=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9947033898305084
74072,"/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.995697074010327
74073,"/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter2Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  IFilterDefinition filter2=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GE,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter2Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  IFilterDefinition filter2=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GE,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.995943204868154
74074,"/** 
 * Test binding ""row"" reference
 * @throws Exception
 */
public void testBindingRowReferenceCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding12);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test binding ""row"" reference
 * @throws Exception
 */
public void testBindingRowReferenceCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding12);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9976453967506476
74075,"/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotalCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotalCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9972444199503996
74076,"/** 
 * Test use aggregation with one more arguments, referenced using ""data""
 * @throws Exception
 */
public void testBasic4() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addArgument(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding7);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",null);
}","/** 
 * Test use aggregation with one more arguments, referenced using ""data""
 * @throws Exception
 */
public void testBasic4() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addArgument(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding7);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",null);
}",0.9962811454072146
74077,"/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotal1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  binding6.setFilter(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.setFilter(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding8.setFilter(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotal1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  binding6.setFilter(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.setFilter(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding8.setFilter(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9972436604189636
74078,"/** 
 * Test use part of dimension levels.
 * @throws Exception
 */
public void testBasic1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test use part of dimension levels.
 * @throws Exception
 */
public void testBasic1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9947726084683742
74079,"/** 
 * Test use aggregation with one more arguments, referenced using ""dimension"".
 * @throws Exception
 */
public void testBasic3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  binding6.addArgument(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding6);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",null);
}","/** 
 * Test use aggregation with one more arguments, referenced using ""dimension"".
 * @throws Exception
 */
public void testBasic3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  binding6.addArgument(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding6);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",null);
}",0.9960753532182104
74080,"/** 
 * Filter1, filter out all level11 == CN.
 * @throws Exception
 */
public void testFilter1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Filter1, filter out all level11 == CN.
 * @throws Exception
 */
public void testFilter1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9956063268892794
74081,"/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1() throws Exception {
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1() throws Exception {
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9953117674636662
74082,"/** 
 * Test Nested total
 * @throws Exception
 */
public void testNestedCrossTab() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter1.setAxisQualifierLevels(null);
  filter1.setAxisQualifierValues(null);
  filter1.setTargetLevel(level21);
  CubeFilterDefinition filter2=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  filter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  filter2.setTargetLevel(level12);
  CubeFilterDefinition filter3=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  filter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  filter3.setTargetLevel(level11);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevels(null);
  sorter4.setAxisQualifierValues(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevels(null);
  sorter5.setAxisQualifierValues(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  cqd.addFilter(filter3);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  this.defineDataSourceDataSet(engine);
  IQueryDefinition query=this.createScriptDataSetQuery();
  IPreparedQuery pq=engine.prepare(query);
  IQueryResults queryResults=pq.execute(null);
  IResultIterator it=queryResults.getResultIterator();
  while (it.next()) {
    if (""String_Node_Str"".equals(it.getValue(""String_Node_Str"").toString()) || ""String_Node_Str"".equals(it.getValue(""String_Node_Str"").toString())) {
      this.testPrintln(""String_Node_Str"" + it.getValue(""String_Node_Str"").toString());
      IPreparedCubeQuery pcq=engine.prepare(cqd,null);
      ICubeQueryResults cqResults=(ICubeQueryResults)pcq.execute(queryResults,null);
      CubeCursor cursor=cqResults.getCubeCursor();
      List columnEdgeBindingNames=new ArrayList();
      columnEdgeBindingNames.add(""String_Node_Str"");
      columnEdgeBindingNames.add(""String_Node_Str"");
      columnEdgeBindingNames.add(""String_Node_Str"");
      printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"",false);
    }
  }
  this.checkOutputFile();
}","/** 
 * Test Nested total
 * @throws Exception
 */
public void testNestedCrossTab() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter1.setAxisQualifierLevels(null);
  filter1.setAxisQualifierValues(null);
  filter1.setTargetLevel(level21);
  CubeFilterDefinition filter2=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  filter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  filter2.setTargetLevel(level12);
  CubeFilterDefinition filter3=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  filter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  filter3.setTargetLevel(level11);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevels(null);
  sorter4.setAxisQualifierValues(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevels(null);
  sorter5.setAxisQualifierValues(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  cqd.addFilter(filter3);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  this.defineDataSourceDataSet(engine);
  IQueryDefinition query=this.createScriptDataSetQuery();
  IPreparedQuery pq=engine.prepare(query);
  IQueryResults queryResults=pq.execute(null);
  IResultIterator it=queryResults.getResultIterator();
  while (it.next()) {
    if (""String_Node_Str"".equals(it.getValue(""String_Node_Str"").toString()) || ""String_Node_Str"".equals(it.getValue(""String_Node_Str"").toString())) {
      this.testPrintln(""String_Node_Str"" + it.getValue(""String_Node_Str"").toString());
      IPreparedCubeQuery pcq=engine.prepare(cqd,null);
      ICubeQueryResults cqResults=(ICubeQueryResults)pcq.execute(queryResults,null);
      CubeCursor cursor=cqResults.getCubeCursor();
      List columnEdgeBindingNames=new ArrayList();
      columnEdgeBindingNames.add(""String_Node_Str"");
      columnEdgeBindingNames.add(""String_Node_Str"");
      columnEdgeBindingNames.add(""String_Node_Str"");
      printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"",false);
    }
  }
  this.checkOutputFile();
}",0.997278911564626
74083,"/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9961875714830348
74084,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort2Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort2Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9958965941731636
74085,"/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9961875714830348
74086,"/** 
 * Test use part of dimension levels.
 * @throws Exception
 */
public void testBasic1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test use part of dimension levels.
 * @throws Exception
 */
public void testBasic1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9952471482889734
74087,"/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort2Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort2Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9964463397299218
74088,"/** 
 * Test use aggregation with one more arguments
 * @throws Exception
 */
public void testInvalidBinding() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.addAggregateOn(""String_Node_Str"");
  binding6.addArgument(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding6);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  try {
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults queryResults=pcq.execute(null);
    queryResults.getCubeCursor();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}","/** 
 * Test use aggregation with one more arguments
 * @throws Exception
 */
public void testInvalidBinding() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.addAggregateOn(""String_Node_Str"");
  binding6.addArgument(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding6);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  try {
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults queryResults=pcq.execute(null);
    queryResults.getCubeCursor();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}",0.9954627949183305
74089,"/** 
 * expression sort on 2 level: one with expression sort and the other with traditional sort.
 * @throws Exception
 */
public void testSortWithExpr() throws Exception {
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level12);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * expression sort on 2 level: one with expression sort and the other with traditional sort.
 * @throws Exception
 */
public void testSortWithExpr() throws Exception {
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level12);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9959116925592804
74090,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9961802902979372
74091,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9946638207043756
74092,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9955476402493322
74093,"/** 
 * Test computed measure.
 * @throws Exception
 */
public void testComputedMeasure() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test computed measure.
 * @throws Exception
 */
public void testComputedMeasure() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9954853273137696
74094,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort3Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort3Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.996440014239943
74095,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSortCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevels(null);
  sorter4.setAxisQualifierValues(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevels(null);
  sorter5.setAxisQualifierValues(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSortCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevels(null);
  sorter4.setAxisQualifierValues(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevels(null);
  sorter5.setAxisQualifierValues(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9970751681778298
74096,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort5() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter1.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter1.setTargetLevel(level13);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort5() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter1.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter1.setTargetLevel(level13);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9948796722990272
74097,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort6() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level11);
  sorter2.setSortDirection(ISortDefinition.SORT_ASC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_ASC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort6() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level11);
  sorter2.setSortDirection(ISortDefinition.SORT_ASC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_ASC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9961404862987264
74098,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevels(null);
  sorter4.setAxisQualifierValues(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevels(null);
  sorter5.setAxisQualifierValues(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevels(null);
  sorter4.setAxisQualifierValues(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevels(null);
  sorter5.setAxisQualifierValues(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.996902106567534
74099,"/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testBasic() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testBasic() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9953358208955224
74100,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort5Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter1.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter1.setTargetLevel(level13);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort5Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter1.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter1.setTargetLevel(level13);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9953358208955224
74101,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrFilter() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter1.setAxisQualifierLevels(null);
  filter1.setAxisQualifierValues(null);
  filter1.setTargetLevel(level21);
  CubeFilterDefinition filter2=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  filter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  filter2.setTargetLevel(level12);
  CubeFilterDefinition filter3=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  filter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  filter3.setTargetLevel(level11);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevels(null);
  sorter4.setAxisQualifierValues(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevels(null);
  sorter5.setAxisQualifierValues(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  cqd.addFilter(filter3);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrFilter() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter1.setAxisQualifierLevels(null);
  filter1.setAxisQualifierValues(null);
  filter1.setTargetLevel(level21);
  CubeFilterDefinition filter2=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  filter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  filter2.setTargetLevel(level12);
  CubeFilterDefinition filter3=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  filter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  filter3.setTargetLevel(level11);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevels(null);
  sorter4.setAxisQualifierValues(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevels(null);
  sorter5.setAxisQualifierValues(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  cqd.addFilter(filter3);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9967405475880052
74102,"/** 
 * Test binding ""row"" reference
 * @throws Exception
 */
public void testBindingRowReference() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding12);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test binding ""row"" reference
 * @throws Exception
 */
public void testBindingRowReference() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding12);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.997534516765286
74103,"private void createCube(DataEngine engine) throws BirtException, IOException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(documentPath + engine.hashCode(),cubeName);
  DocManagerMap.getDocManagerMap().set(String.valueOf(engine.hashCode()),documentPath + engine.hashCode() + cubeName,documentManager);
  engine.addShutdownListener(new DocManagerReleaser(engine));
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[]{""String_Node_Str"",""String_Node_Str""};
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  iterator.setLevelMember(1,TestFactTable.ATTRIBUTE_Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
}","private void createCube(org.eclipse.birt.data.engine.impl.DataEngineImpl engine) throws BirtException, IOException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(engine.getSession().getTempDir(),cubeName);
  DocManagerMap.getDocManagerMap().set(String.valueOf(engine.hashCode()),engine.getSession().getTempDir() + cubeName,documentManager);
  engine.addShutdownListener(new DocManagerReleaser(engine));
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[]{""String_Node_Str"",""String_Node_Str""};
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  iterator.setLevelMember(1,TestFactTable.ATTRIBUTE_Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
}",0.9381529460927706
74104,"/** 
 * Test use Nested Computed Measure.
 * @throws Exception
 */
public void testNestedComputedMeasure() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test use Nested Computed Measure.
 * @throws Exception
 */
public void testNestedComputedMeasure() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9957283212302436
74105,"/** 
 * Test computed measure.
 * @throws Exception
 */
public void testComputedMeasureCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test computed measure.
 * @throws Exception
 */
public void testComputedMeasureCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9958437240232751
74106,"/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter4() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter1);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  try {
    this.createCube(engine);
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults queryResults=pcq.execute(null);
    queryResults.getCubeCursor();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter4() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter1);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  try {
    this.createCube(engine);
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults queryResults=pcq.execute(null);
    queryResults.getCubeCursor();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9948320413436692
74107,"/** 
 * @throws Exception
 */
public void testGrandTotalWithComputedMeasure() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * @throws Exception
 */
public void testGrandTotalWithComputedMeasure() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9972337482710928
74108,"/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  IFilterDefinition filter2=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GE,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  IFilterDefinition filter2=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GE,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9956024626209324
74109,"/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  IFilterDefinition filter2=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GE,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  IFilterDefinition filter2=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GE,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9956024626209324
74110,"/** 
 * expression sort on attribute
 */
public void testSortWithExpr1() throws Exception {
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_ASC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * expression sort on attribute
 */
public void testSortWithExpr1() throws Exception {
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_ASC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9957698815566836
74111,"/** 
 * Test grand total
 * @throws Exception
 */
public void testSortWithExpr2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter1.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter1.setTargetLevel(level11);
  sorter1.setSortDirection(ISortDefinition.SORT_ASC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setTargetLevel(level21);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testSortWithExpr2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter1.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter1.setTargetLevel(level11);
  sorter1.setSortDirection(ISortDefinition.SORT_ASC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setTargetLevel(level21);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9958881578947368
74112,"/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotal() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotal() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9970913321698662
74113,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9951573849878934
74114,"/** 
 * Filter1, filter out all level11 == CN.
 * @throws Exception
 */
public void testFilter1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Filter1, filter out all level11 == CN.
 * @throws Exception
 */
public void testFilter1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9952038369304556
74115,"/** 
 * Test crosstab + crosstab
 * @throws Exception
 */
public void testNestedCrossTab2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevels(null);
  sorter4.setAxisQualifierValues(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevels(null);
  sorter5.setAxisQualifierValues(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults cqResults=pcq.execute(null);
  CubeCursor outerCursor=cqResults.getCubeCursor();
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  filter1.setTargetLevel(level13);
  cqd.addFilter(filter1);
  IBinding out=new Binding(""String_Node_Str"");
  out.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(out);
  int depth=0;
  EdgeCursor edge1=(EdgeCursor)(outerCursor.getOrdinateEdge().get(0));
  EdgeCursor edge2=(EdgeCursor)(outerCursor.getOrdinateEdge().get(1));
  edge1.beforeFirst();
  while (edge2.next()) {
    if (depth > 5)     break;
    edge1.beforeFirst();
    while (edge1.next()) {
      depth++;
      if (depth > 5)       break;
      this.testPrintln(""String_Node_Str"" + outerCursor.getObject(""String_Node_Str"").toString());
      IPreparedCubeQuery pcq1=engine.prepare(cqd,null);
      ICubeQueryResults cqResults1=(ICubeQueryResults)pcq1.execute(cqResults,null);
      CubeCursor cursor=cqResults1.getCubeCursor();
      printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"",false);
      this.testPrintln(""String_Node_Str"" + cursor.getObject(""String_Node_Str""));
    }
  }
  this.checkOutputFile();
}","/** 
 * Test crosstab + crosstab
 * @throws Exception
 */
public void testNestedCrossTab2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevels(null);
  sorter4.setAxisQualifierValues(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevels(null);
  sorter5.setAxisQualifierValues(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults cqResults=pcq.execute(null);
  CubeCursor outerCursor=cqResults.getCubeCursor();
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  filter1.setTargetLevel(level13);
  cqd.addFilter(filter1);
  IBinding out=new Binding(""String_Node_Str"");
  out.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(out);
  int depth=0;
  EdgeCursor edge1=(EdgeCursor)(outerCursor.getOrdinateEdge().get(0));
  EdgeCursor edge2=(EdgeCursor)(outerCursor.getOrdinateEdge().get(1));
  edge1.beforeFirst();
  while (edge2.next()) {
    if (depth > 5)     break;
    edge1.beforeFirst();
    while (edge1.next()) {
      depth++;
      if (depth > 5)       break;
      this.testPrintln(""String_Node_Str"" + outerCursor.getObject(""String_Node_Str"").toString());
      IPreparedCubeQuery pcq1=engine.prepare(cqd,null);
      ICubeQueryResults cqResults1=(ICubeQueryResults)pcq1.execute(cqResults,null);
      CubeCursor cursor=cqResults1.getCubeCursor();
      printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"",false);
      this.testPrintln(""String_Node_Str"" + cursor.getObject(""String_Node_Str""));
    }
  }
  this.checkOutputFile();
}",0.9968314321926488
74116,"/** 
 * Test crosstab + table
 * @throws Exception
 */
public void testNestedCrossTab3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevels(null);
  sorter4.setAxisQualifierValues(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevels(null);
  sorter5.setAxisQualifierValues(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults cqResults=pcq.execute(null);
  CubeCursor outerCursor=cqResults.getCubeCursor();
  this.defineDataSourceDataSet(engine);
  IQueryDefinition query=this.createScriptDataSetQuery();
  query.getFilters().add(new FilterDefinition(new ScriptExpression(""String_Node_Str"")));
  IPreparedQuery pq=engine.prepare(query);
  int depth=0;
  EdgeCursor edge1=(EdgeCursor)(outerCursor.getOrdinateEdge().get(0));
  EdgeCursor edge2=(EdgeCursor)(outerCursor.getOrdinateEdge().get(1));
  edge1.beforeFirst();
  while (edge2.next()) {
    edge1.beforeFirst();
    while (edge1.next()) {
      depth++;
      this.testPrintln(""String_Node_Str"" + outerCursor.getObject(""String_Node_Str"").toString());
      IResultIterator it=((IQueryResults)pq.execute(cqResults,null)).getResultIterator();
      while (it.next()) {
        this.testPrintln(""String_Node_Str"" + it.getString(""String_Node_Str""));
      }
    }
  }
  this.checkOutputFile();
}","/** 
 * Test crosstab + table
 * @throws Exception
 */
public void testNestedCrossTab3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevels(null);
  sorter4.setAxisQualifierValues(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevels(null);
  sorter5.setAxisQualifierValues(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults cqResults=pcq.execute(null);
  CubeCursor outerCursor=cqResults.getCubeCursor();
  this.defineDataSourceDataSet(engine);
  IQueryDefinition query=this.createScriptDataSetQuery();
  query.getFilters().add(new FilterDefinition(new ScriptExpression(""String_Node_Str"")));
  IPreparedQuery pq=engine.prepare(query);
  int depth=0;
  EdgeCursor edge1=(EdgeCursor)(outerCursor.getOrdinateEdge().get(0));
  EdgeCursor edge2=(EdgeCursor)(outerCursor.getOrdinateEdge().get(1));
  edge1.beforeFirst();
  while (edge2.next()) {
    edge1.beforeFirst();
    while (edge1.next()) {
      depth++;
      this.testPrintln(""String_Node_Str"" + outerCursor.getObject(""String_Node_Str"").toString());
      IResultIterator it=((IQueryResults)pq.execute(cqResults,null)).getResultIterator();
      while (it.next()) {
        this.testPrintln(""String_Node_Str"" + it.getString(""String_Node_Str""));
      }
    }
  }
  this.checkOutputFile();
}",0.996219281663516
74117,"/** 
 * Test Table + crosstab
 * @throws Exception
 */
public void testNestedCrossTab1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevels(null);
  sorter4.setAxisQualifierValues(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevels(null);
  sorter5.setAxisQualifierValues(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addFilter(filter1);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  this.defineDataSourceDataSet(engine);
  IQueryDefinition query=this.createScriptDataSetQuery();
  IPreparedQuery pq=engine.prepare(query);
  IQueryResults queryResults=pq.execute(null);
  IResultIterator it=queryResults.getResultIterator();
  while (it.next()) {
    if (""String_Node_Str"".equals(it.getValue(""String_Node_Str"").toString()) || ""String_Node_Str"".equals(it.getValue(""String_Node_Str"").toString())) {
      this.testPrintln(""String_Node_Str"" + it.getValue(""String_Node_Str"").toString());
      IPreparedCubeQuery pcq=engine.prepare(cqd,null);
      ICubeQueryResults cqResults=(ICubeQueryResults)pcq.execute(queryResults,null);
      CubeCursor cursor=cqResults.getCubeCursor();
      List columnEdgeBindingNames=new ArrayList();
      columnEdgeBindingNames.add(""String_Node_Str"");
      columnEdgeBindingNames.add(""String_Node_Str"");
      columnEdgeBindingNames.add(""String_Node_Str"");
      printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"",false);
    }
  }
  this.checkOutputFile();
}","/** 
 * Test Table + crosstab
 * @throws Exception
 */
public void testNestedCrossTab1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevels(null);
  sorter4.setAxisQualifierValues(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevels(null);
  sorter5.setAxisQualifierValues(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addFilter(filter1);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  this.defineDataSourceDataSet(engine);
  IQueryDefinition query=this.createScriptDataSetQuery();
  IPreparedQuery pq=engine.prepare(query);
  IQueryResults queryResults=pq.execute(null);
  IResultIterator it=queryResults.getResultIterator();
  while (it.next()) {
    if (""String_Node_Str"".equals(it.getValue(""String_Node_Str"").toString()) || ""String_Node_Str"".equals(it.getValue(""String_Node_Str"").toString())) {
      this.testPrintln(""String_Node_Str"" + it.getValue(""String_Node_Str"").toString());
      IPreparedCubeQuery pcq=engine.prepare(cqd,null);
      ICubeQueryResults cqResults=(ICubeQueryResults)pcq.execute(queryResults,null);
      CubeCursor cursor=cqResults.getCubeCursor();
      List columnEdgeBindingNames=new ArrayList();
      columnEdgeBindingNames.add(""String_Node_Str"");
      columnEdgeBindingNames.add(""String_Node_Str"");
      columnEdgeBindingNames.add(""String_Node_Str"");
      printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"",false);
    }
  }
  this.checkOutputFile();
}",0.9966431688486068
74118,"/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testBasicCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testBasicCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9957173447537472
74119,"/** 
 * Test computed measure name conflict.
 * @throws Exception
 */
public void testInvalidComputedMeasure1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  try {
    queryResults.getCubeCursor();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}","/** 
 * Test computed measure name conflict.
 * @throws Exception
 */
public void testInvalidComputedMeasure1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createComputedMeasure(""String_Node_Str"",DataType.DOUBLE_TYPE,new ScriptExpression(""String_Node_Str""));
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  try {
    queryResults.getCubeCursor();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}",0.9950298210735586
74120,"private void createCube(IDocArchiveWriter writter,DataEngine engine) throws BirtException, IOException {
  CubeMaterializer cubeMaterializer=new CubeMaterializer(engine,documentPath + engine.hashCode(),""String_Node_Str"");
  IDocumentManager documentManager=cubeMaterializer.getDocumentManager();
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
  cubeMaterializer.saveCubeToReportDocument(""String_Node_Str"",writter,null);
  cubeMaterializer.close();
}","private void createCube(IDocArchiveWriter writter,DataEngineImpl engine) throws BirtException, IOException {
  CubeMaterializer cubeMaterializer=new CubeMaterializer(engine,""String_Node_Str"");
  IDocumentManager documentManager=cubeMaterializer.getDocumentManager();
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
  cubeMaterializer.saveCubeToReportDocument(""String_Node_Str"",writter,null);
  cubeMaterializer.close();
}",0.991894852135816
74121,"/** 
 * Test use part of dimension levels.
 * @throws Exception
 */
public void testBasic1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter));
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test use part of dimension levels.
 * @throws Exception
 */
public void testBasic1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter));
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.99306625577812
74122,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevels(null);
  sorter4.setAxisQualifierValues(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevels(null);
  sorter5.setAxisQualifierValues(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter));
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevels(null);
  sorter4.setAxisQualifierValues(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevels(null);
  sorter5.setAxisQualifierValues(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter));
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9953975965226284
74123,"/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testBasic() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter));
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
  engine.shutdown();
}","/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testBasic() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter));
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
  engine.shutdown();
}",0.9936797752808988
74124,"/** 
 * Filter1, filter out all level11 == CN.
 * @throws Exception
 */
public void testFilter1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter));
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Filter1, filter out all level11 == CN.
 * @throws Exception
 */
public void testFilter1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter));
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9934971098265896
74125,"void createCube(DataEngine engine) throws IOException, BirtException, OLAPException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(documentPath + engine.hashCode(),cubeName);
  DocManagerMap.getDocManagerMap().set(String.valueOf(engine.hashCode()),documentPath + engine.hashCode() + cubeName,documentManager);
  engine.addShutdownListener(new DocManagerReleaser(engine));
  Dimension[] dimensions=new Dimension[6];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L1Col);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  IDiskArray allRow=dimensions[0].getAllRows(new StopSign());
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L2Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  allRow=dimensions[1].getAllRows(new StopSign());
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  allRow=dimensions[2].getAllRows(new StopSign());
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L4Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[3]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[3].getHierarchy();
  allRow=dimensions[3].getAllRows(new StopSign());
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM1_L1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[4]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[4].getHierarchy();
  allRow=dimensions[4].getAllRows(new StopSign());
  levelNames=new String[]{""String_Node_Str"",""String_Node_Str""};
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM1_L2Col);
  iterator.setLevelMember(1,TestFactTable1.ATTRIBUTE_Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  dimensions[5]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[5].getHierarchy();
  allRow=dimensions[5].getAllRows(new StopSign());
  TestFactTable1 factTable2=new TestFactTable1();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
}","void createCube(DataEngineImpl engine) throws IOException, BirtException, OLAPException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(engine.getSession().getTempDir(),cubeName);
  DocManagerMap.getDocManagerMap().set(String.valueOf(engine.hashCode()),engine.getSession().getTempDir() + cubeName,documentManager);
  engine.addShutdownListener(new DocManagerReleaser(engine));
  Dimension[] dimensions=new Dimension[6];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L1Col);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  IDiskArray allRow=dimensions[0].getAllRows(new StopSign());
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L2Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  allRow=dimensions[1].getAllRows(new StopSign());
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  allRow=dimensions[2].getAllRows(new StopSign());
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L4Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[3]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[3].getHierarchy();
  allRow=dimensions[3].getAllRows(new StopSign());
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM1_L1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[4]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[4].getHierarchy();
  allRow=dimensions[4].getAllRows(new StopSign());
  levelNames=new String[]{""String_Node_Str"",""String_Node_Str""};
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM1_L2Col);
  iterator.setLevelMember(1,TestFactTable1.ATTRIBUTE_Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  dimensions[5]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[5].getHierarchy();
  allRow=dimensions[5].getAllRows(new StopSign());
  TestFactTable1 factTable2=new TestFactTable1();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
}",0.9672256097560976
74126,"/** 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube1() throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] colNames=new String[3];
  colNames[0]=""String_Node_Str"";
  colNames[1]=""String_Node_Str"";
  colNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(colNames);
  iterator.setLevelMember(0,TestFactTable.L1Col);
  iterator.setLevelMember(1,TestFactTable.L2Col);
  iterator.setLevelMember(2,TestFactTable.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),TestFactTable.L1Col.length);
  colNames=new String[1];
  colNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(colNames);
  iterator.setLevelMember(0,distinct(TestFactTable.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  colNames=new String[1];
  colNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(colNames);
  iterator.setLevelMember(0,TestFactTable.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  Cube cube=new Cube(""String_Node_Str"",documentManager);
  cube.create(CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  documentManager.flush();
}","/** 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube1(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] colNames=new String[3];
  colNames[0]=""String_Node_Str"";
  colNames[1]=""String_Node_Str"";
  colNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(colNames);
  iterator.setLevelMember(0,TestFactTable.L1Col);
  iterator.setLevelMember(1,TestFactTable.L2Col);
  iterator.setLevelMember(2,TestFactTable.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),TestFactTable.L1Col.length);
  colNames=new String[1];
  colNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(colNames);
  iterator.setLevelMember(0,distinct(TestFactTable.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  colNames=new String[1];
  colNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(colNames);
  iterator.setLevelMember(0,TestFactTable.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  Cube cube=new Cube(""String_Node_Str"",documentManager);
  cube.create(CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  documentManager.flush();
}",0.9939186621056632
74127,"public CubeAggregationTest(){
  pathName=System.getProperty(""String_Node_Str"");
  try {
    documentManager=DocumentManagerFactory.createFileDocumentManager();
    createCube1();
    this.baseScope=new ImporterTopLevel();
  }
 catch (  DataException e) {
    fail();
  }
catch (  IOException e) {
    fail();
  }
catch (  BirtException e) {
    fail();
  }
}","public CubeAggregationTest(){
  pathName=System.getProperty(""String_Node_Str"");
  this.baseScope=new ImporterTopLevel();
}",0.5083333333333333
74128,"public void setUp() throws Exception {
  Context.enter();
  createCube1QueryDefn();
  super.setUp();
}","public void setUp() throws Exception {
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  materializer=new CubeMaterializer(engine);
  documentManager=materializer.getDocumentManager();
  createCube1(documentManager);
  Context.enter();
  createCube1QueryDefn();
  super.setUp();
}",0.4206185567010309
74129,"/** 
 * test aggregation using random access document manager. 
 * @throws IOException
 * @throws BirtException
 */
public void testRAAggregation1() throws IOException, BirtException {
  CubeMaterializer materializer=new CubeMaterializer(null);
  IDocumentManager localDocManager=materializer.getDocumentManager();
  IDocumentManager oldManager=documentManager;
  documentManager=localDocManager;
  createCube1();
  testCube1Aggregation();
  IDocArchiveWriter writer=createRAWriter();
  materializer.saveCubeToReportDocument(""String_Node_Str"",writer,new StopSign());
  writer.flush();
  writer.finish();
  documentManager=createRADocumentManager();
  testCube1Aggregation();
  documentManager.close();
  documentManager=oldManager;
}","/** 
 * test aggregation using random access document manager. 
 * @throws IOException
 * @throws BirtException
 */
public void testRAAggregation1() throws IOException, BirtException {
  IDocArchiveWriter writer=createRAWriter();
  materializer.saveCubeToReportDocument(""String_Node_Str"",writer,new StopSign());
  writer.flush();
  writer.finish();
  documentManager=createRADocumentManager();
  testCube1Aggregation();
  documentManager.close();
}",0.7586790855207451
74130,"protected void tearDown() throws Exception {
  Context.exit();
  super.tearDown();
}","protected void tearDown() throws Exception {
  Context.exit();
  documentManager.close();
  super.tearDown();
}",0.8615384615384616
74131,"/** 
 * @param initialCapacity
 */
public BasicCachedArray(int initialCapacity){
  if (initialCapacity < 0)   throw new IllegalArgumentException(""String_Node_Str"" + initialCapacity);
  this.cachedList=new BasicCachedList();
  this.initialCapacity=initialCapacity;
}","/** 
 * @param initialCapacity
 */
public BasicCachedArray(String tempDir,int initialCapacity){
  if (initialCapacity < 0)   throw new IllegalArgumentException(""String_Node_Str"" + initialCapacity);
  this.cachedList=new BasicCachedList(tempDir);
  this.initialCapacity=initialCapacity;
}",0.960144927536232
74132,"/** 
 * @param list
 */
public BasicCachedList(List list){
  this();
  if (list == null)   return;
  for (int i=0; i < list.size(); i++) {
    this.add(list.get(i));
  }
}","/** 
 * @param list
 */
public BasicCachedList(String tempDir,List list){
  this(tempDir);
  if (list == null)   return;
  for (int i=0; i < list.size(); i++) {
    this.add(list.get(i));
  }
}",0.9395604395604396
74133,"/** 
 * Create a file for caching objects.
 * @param cacheIndex
 * @return
 */
private File getCacheFile(int cacheIndex){
  String tempDirStr=DataEngineContextExt.getInstance().getTmpdir() + File.separatorChar + this.fileNamePrefix;
  if (dir == null) {
    dir=new File(tempDirStr);
    dir.mkdir();
  }
  return new File(tempDirStr + File.separatorChar + cacheIndex+ ""String_Node_Str"");
}","/** 
 * Create a file for caching objects.
 * @param cacheIndex
 * @return
 */
private File getCacheFile(int cacheIndex){
  String tempDirStr=tempDir + this.fileNamePrefix;
  if (dir == null) {
    dir=new File(tempDirStr);
    dir.mkdir();
  }
  return new File(tempDirStr + File.separatorChar + cacheIndex+ ""String_Node_Str"");
}",0.9027777777777778
74134,"/** 
 * @param list
 */
public CachedList(ICachedObjectCreator creator,List list){
  super(list);
  this.creator=creator;
}","/** 
 * @param list
 */
public CachedList(String tempDir,ICachedObjectCreator creator,List list){
  super(tempDir,list);
  this.creator=creator;
}",0.9144981412639404
74135,"/** 
 * @param columnName
 * @return
 * @throws DataException
 */
private Object getValue(String columnName) throws DataException {
  return ri.getCurrentResult().getFieldValue(columnName);
}","/** 
 * @param columnName
 * @return
 * @throws DataException
 */
private Object getValue(String columnName) throws DataException {
  if (ri.getCurrentResult() == null)   return null;
  return ri.getCurrentResult().getFieldValue(columnName);
}",0.880184331797235
74136,"public boolean next() throws BirtException {
  checkStarted();
  clear();
  boolean hasNext=false;
  if (state == BEFORE_FIRST_ROW) {
    state=ON_ROW;
    hasNext=odiResult.getCurrentResult() != null;
  }
 else {
    hasNext=hasNextRow();
  }
  if (hasNext)   this.prepareCurrentRow();
  if (!hasNext)   state=AFTER_LAST_ROW;
  return hasNext;
}","public boolean next() throws BirtException {
  checkStarted();
  clear();
  if (this.isEmpty()) {
    if (this.isFirstRowPepared) {
      this.lastRowIndex=odiResult.getCurrentResultIndex() - 1;
      this.prepareCurrentRow();
      this.isFirstRowPepared=false;
    }
    return false;
  }
  boolean hasNext=false;
  if (state == BEFORE_FIRST_ROW) {
    state=ON_ROW;
    hasNext=odiResult.getCurrentResult() != null;
  }
 else {
    hasNext=hasNextRow();
  }
  if (hasNext)   this.prepareCurrentRow();
  if (!hasNext)   state=AFTER_LAST_ROW;
  return hasNext;
}",0.7612761276127613
74137,"public void close() throws BirtException {
  if (state == CLOSED)   return;
  if (this.getRdSaveHelper().needsSaveToDoc()) {
    if (this.isEmpty()) {
      lastRowIndex=odiResult.getCurrentResultIndex() - 1;
      this.prepareCurrentRow();
    }
 else {
      while (this.next())       ;
    }
    this.getRdSaveHelper().doSaveFinish();
  }
  if (needCache()) {
    while (this.next()) {
    }
    closeCacheOutputStream();
  }
  if (odiResult != null)   odiResult.close();
  odiResult=null;
  resultService=null;
  state=CLOSED;
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
}","public void close() throws BirtException {
  if (state == CLOSED)   return;
  if (this.getRdSaveHelper().needsSaveToDoc()) {
    while (this.next())     ;
    this.getRdSaveHelper().doSaveFinish();
  }
  if (needCache()) {
    while (this.next()) {
    }
    closeCacheOutputStream();
  }
  if (odiResult != null)   odiResult.close();
  odiResult=null;
  resultService=null;
  state=CLOSED;
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
}",0.8345323741007195
74138,"public void close() throws BirtException {
  if (state == CLOSED)   return;
  if (this.getRdSaveHelper().needsSaveToDoc()) {
    if (this.isEmpty()) {
      lastRowIndex=-1;
      this.prepareCurrentRow();
    }
 else {
      while (this.next())       ;
    }
    this.getRdSaveHelper().doSaveFinish();
  }
  if (needCache()) {
    while (this.next()) {
    }
    closeCacheOutputStream();
  }
  if (odiResult != null)   odiResult.close();
  odiResult=null;
  resultService=null;
  state=CLOSED;
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
}","public void close() throws BirtException {
  if (state == CLOSED)   return;
  if (this.getRdSaveHelper().needsSaveToDoc()) {
    if (this.isEmpty()) {
      lastRowIndex=odiResult.getCurrentResultIndex() - 1;
      this.prepareCurrentRow();
    }
 else {
      while (this.next())       ;
    }
    this.getRdSaveHelper().doSaveFinish();
  }
  if (needCache()) {
    while (this.next()) {
    }
    closeCacheOutputStream();
  }
  if (odiResult != null)   odiResult.close();
  odiResult=null;
  resultService=null;
  state=CLOSED;
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
}",0.971240755957272
74139,"/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DataItemHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  dataHandle.setResultSetColumn(model.getColumnName());
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    bindingColumn.setExpression(DEUtil.getExpression(model));
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    DataSetHandle containerDataSet=DEUtil.getFirstDataSet(container);
    container=DEUtil.getListingContainer(container);
    if (containerDataSet == null && container != null) {
      container.setDataSet(dataSet);
      containerDataSet=dataSet;
    }
    if (dataSet.equals(containerDataSet) && container != null) {
      container.addColumnBinding(bindingColumn,false);
    }
 else {
      dataHandle.setDataSet(dataSet);
      dataHandle.addColumnBinding(bindingColumn,false);
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    bindingColumn.setExpression(DEUtil.getExpression(model));
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getColumnDisplayName(model));
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}","/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DataItemHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  dataHandle.setResultSetColumn(model.getColumnName());
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    bindingColumn.setExpression(DEUtil.getExpression(model));
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    DataSetHandle containerDataSet=DEUtil.getFirstDataSet(container);
    container=DEUtil.getListingContainer(container);
    if (containerDataSet == null && container != null) {
      container.setDataSet(dataSet);
      containerDataSet=dataSet;
    }
    if (dataSet.equals(containerDataSet) && container != null) {
      if (container.getDataBindingReference() != null)       container.getDataBindingReference().addColumnBinding(bindingColumn,false);
 else       container.addColumnBinding(bindingColumn,false);
    }
 else {
      dataHandle.setDataSet(dataSet);
      dataHandle.addColumnBinding(bindingColumn,false);
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    bindingColumn.setExpression(DEUtil.getExpression(model));
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getColumnDisplayName(model));
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}",0.9778816199376948
74140,"public void prepare(String command) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"" + command + ""String_Node_Str"");
  try {
    if (command == null) {
      logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
      throw new OdaException(""String_Node_Str"");
    }
    procedureName=getProcedureName(command);
    this.callStat=conn.prepareCall(command);
    this.cachedResultMetaData=null;
    this.cachedResultSet=null;
    this.cachedParameterMetaData=null;
    paramUtil=new SPParameterPositionUtil(command,'@');
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.STATEMENT_CANNOT_PREPARE,e);
  }
}","public void prepare(String command) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"" + command + ""String_Node_Str"");
  try {
    if (command == null) {
      logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
      throw new OdaException(""String_Node_Str"");
    }
    paramUtil=new SPParameterPositionUtil(command,'@');
    this.callStat=conn.prepareCall(command);
    this.cachedResultMetaData=null;
    this.cachedResultSet=null;
    this.cachedParameterMetaData=null;
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.STATEMENT_CANNOT_PREPARE,e);
  }
}",0.7672702883970489
74141,"/** 
 * get parameter metadata from database matadata
 */
private java.util.List getCallableParamMetaData(){
  java.util.List paramMetaDataList=new ArrayList();
  try {
    DatabaseMetaData metaData=conn.getMetaData();
    String cataLog=conn.getCatalog();
    String schemaPattern=null;
    ArrayList schemaList=null;
    String columnNamePattern=null;
    String procedureNamePattern=procedureName;
    String packagePattern=""String_Node_Str"";
    if (procedureName.indexOf(""String_Node_Str"") > 0) {
      schemaPattern=procedureName.substring(0,procedureName.lastIndexOf(""String_Node_Str""));
      procedureNamePattern=procedureName.substring(procedureName.lastIndexOf(""String_Node_Str"") + 1);
    }
    if (!metaData.supportsCatalogsInProcedureCalls() && schemaPattern != null && schemaPattern.indexOf(""String_Node_Str"") != -1) {
      packagePattern=schemaPattern.substring(schemaPattern.lastIndexOf(""String_Node_Str"") + 1);
      schemaPattern=schemaPattern.substring(0,schemaPattern.lastIndexOf(""String_Node_Str""));
    }
    if (schemaPattern != null) {
      schemaList=new ArrayList();
      schemaList.add(schemaPattern);
    }
 else {
      java.sql.ResultSet rs=metaData.getSchemas();
      schemaList=createSchemaList(rs);
      rs.close();
    }
    if (schemaList == null || schemaList.size() == 0) {
      if (schemaList == null)       schemaList=new ArrayList();
      schemaList.add(""String_Node_Str"");
      columnNamePattern=""String_Node_Str"";
    }
    for (int i=0; i < schemaList.size(); i++) {
      java.sql.ResultSet rs=null;
      if (packagePattern.trim().length() > 0)       rs=metaData.getProcedureColumns(packagePattern,schemaList.get(i).toString(),procedureNamePattern,columnNamePattern);
 else       rs=metaData.getProcedureColumns(cataLog,schemaList.get(i).toString(),procedureNamePattern,columnNamePattern);
      while (rs.next()) {
        ParameterDefn p=new ParameterDefn();
        p.setParamName(rs.getString(""String_Node_Str""));
        p.setParamInOutType(rs.getInt(""String_Node_Str""));
        p.setParamType(rs.getInt(""String_Node_Str""));
        p.setParamTypeName(rs.getString(""String_Node_Str""));
        p.setPrecision(rs.getInt(""String_Node_Str""));
        p.setScale(rs.getInt(""String_Node_Str""));
        p.setIsNullable(rs.getInt(""String_Node_Str""));
        if (p.getParamType() == Types.OTHER)         correctParamType(p);
        if (p.getParamInOutType() != 5)         paramMetaDataList.add(p);
      }
      rs.close();
    }
  }
 catch (  SQLException e) {
  }
  return paramMetaDataList;
}","/** 
 * get parameter metadata from database matadata
 */
private java.util.List getCallableParamMetaData(){
  java.util.List paramMetaDataList=new ArrayList();
  try {
    DatabaseMetaData metaData=conn.getMetaData();
    String cataLog=conn.getCatalog();
    ArrayList schemaList=null;
    String columnNamePattern=null;
    String procedureNamePattern=this.paramUtil.getProcedureName();
    String packagePattern=""String_Node_Str"";
    String schemaPattern=this.paramUtil.getSchemaName();
    if (!metaData.supportsCatalogsInProcedureCalls()) {
      packagePattern=this.paramUtil.getPackageName();
    }
    if (schemaPattern != null) {
      schemaList=new ArrayList();
      schemaList.add(schemaPattern);
    }
 else {
      java.sql.ResultSet rs=metaData.getSchemas();
      schemaList=createSchemaList(rs);
      rs.close();
    }
    if (schemaList == null || schemaList.size() == 0) {
      if (schemaList == null)       schemaList=new ArrayList();
      schemaList.add(""String_Node_Str"");
      columnNamePattern=""String_Node_Str"";
    }
    for (int i=0; i < schemaList.size(); i++) {
      java.sql.ResultSet rs=null;
      if (packagePattern.trim().length() > 0)       rs=metaData.getProcedureColumns(packagePattern,schemaList.get(i).toString(),procedureNamePattern,columnNamePattern);
 else       rs=metaData.getProcedureColumns(cataLog,schemaList.get(i).toString(),procedureNamePattern,columnNamePattern);
      while (rs.next()) {
        ParameterDefn p=new ParameterDefn();
        p.setParamName(rs.getString(""String_Node_Str""));
        p.setParamInOutType(rs.getInt(""String_Node_Str""));
        p.setParamType(rs.getInt(""String_Node_Str""));
        p.setParamTypeName(rs.getString(""String_Node_Str""));
        p.setPrecision(rs.getInt(""String_Node_Str""));
        p.setScale(rs.getInt(""String_Node_Str""));
        p.setIsNullable(rs.getInt(""String_Node_Str""));
        if (p.getParamType() == Types.OTHER)         correctParamType(p);
        if (p.getParamInOutType() != 5)         paramMetaDataList.add(p);
      }
      rs.close();
    }
  }
 catch (  SQLException e) {
  }
catch (  JDBCException ex) {
  }
  return paramMetaDataList;
}",0.8340407470288624
74142,"/** 
 * put sqlText to char array
 * @param sqlTxt
 * @param escaper
 * @return
 * @throws OdaException
 */
private String getParameterDefinitionChars(String sqlTxt) throws OdaException {
  char[] temp=sqlTxt.toCharArray();
  int startPoint=-1;
  int endPoint=-1;
  boolean validBracket=true;
  for (int i=0; i < temp.length; i++) {
    if (i > 0 && temp[i - 1] == escaper)     continue;
    if (validBracket) {
      if ('(' == temp[i]) {
        startPoint=i;
        break;
      }
    }
    if ('""' == temp[i]) {
      validBracket=!validBracket;
    }
  }
  for (int i=temp.length - 1; i >= 0; i--) {
    if (i > 0 && temp[i - 1] == escaper)     continue;
    if (validBracket) {
      if (')' == temp[i]) {
        endPoint=i;
        break;
      }
    }
    if ('""' == temp[i]) {
      validBracket=!validBracket;
    }
  }
  if (startPoint == -1 && endPoint == -1)   return ""String_Node_Str"";
 else   if (startPoint >= endPoint || startPoint == -1)   throw new JDBCException(ResourceConstants.INVALID_STORED_PRECEDURE,ResourceConstants.ERROR_INVALID_STATEMENT);
  return sqlTxt.substring(startPoint + 1,endPoint);
}","/** 
 * put sqlText to char array
 * @param sqlTxt
 * @param escaper
 * @return
 * @throws OdaException
 */
private String getParameterDefinitionChars(String sqlTxt,int[] point) throws OdaException {
  int startPoint=point[0];
  int endPoint=point[1];
  if (startPoint == -1 && endPoint == -1)   return ""String_Node_Str"";
 else   if (startPoint >= endPoint || startPoint == -1)   throw new JDBCException(ResourceConstants.INVALID_STORED_PRECEDURE,ResourceConstants.ERROR_INVALID_STATEMENT);
  return sqlTxt.substring(startPoint + 1,endPoint);
}",0.5671462829736211
74143,"/** 
 * @param sqlTxt
 * @param escaper
 * @throws OdaException
 */
public SPParameterPositionUtil(String sqlTxt,char escaper) throws OdaException {
  try {
    this.escaper=escaper;
    String paramTxt=getParameterDefinitionChars(sqlTxt);
    parseQueryText(paramTxt);
  }
 catch (  IOException e) {
  }
}","/** 
 * @param sqlTxt
 * @param escaper
 * @throws OdaException
 */
public SPParameterPositionUtil(String sqlTxt,char escaper) throws OdaException {
}",0.6578947368421053
74144,"public boolean test(Object receiver,String property,Object[] args,Object expectedValue){
  if (""String_Node_Str"".equals(property)) {
    if (receiver instanceof ExtendedItemHandle) {
      String extensionName=expectedValue.toString();
      return extensionName.equals(((ExtendedItemHandle)receiver).getExtensionName());
    }
  }
 else   if (""String_Node_Str"".equals(property)) {
    if (receiver instanceof ExtendedItemHandle) {
      DesignElementHandle container=((ExtendedItemHandle)receiver).getContainer();
      String containerName=expectedValue.toString();
      return container.getDefn().getName().equals(containerName);
    }
  }
 else   if (""String_Node_Str"".equals(property)) {
    if (receiver instanceof ExtendedItemHandle) {
      PropertyHandle container=((ExtendedItemHandle)receiver).getContainerPropertyHandle();
      if (container == null)       return false;
      String containerName=expectedValue.toString();
      return container.getDefn().getName().equals(containerName);
    }
  }
  return false;
}","public boolean test(Object receiver,String property,Object[] args,Object expectedValue){
  if (""String_Node_Str"".equals(property)) {
    if (receiver instanceof ExtendedItemHandle) {
      String extensionName=expectedValue.toString();
      return extensionName.equals(((ExtendedItemHandle)receiver).getExtensionName());
    }
  }
 else   if (""String_Node_Str"".equals(property)) {
    if (receiver instanceof ExtendedItemHandle) {
      DesignElementHandle container=((ExtendedItemHandle)receiver).getContainer();
      if (container == null)       return false;
      String containerName=expectedValue.toString();
      return container.getDefn().getName().equals(containerName);
    }
  }
 else   if (""String_Node_Str"".equals(property)) {
    if (receiver instanceof ExtendedItemHandle) {
      PropertyHandle container=((ExtendedItemHandle)receiver).getContainerPropertyHandle();
      if (container == null)       return false;
      String containerName=expectedValue.toString();
      return container.getDefn().getName().equals(containerName);
    }
  }
  return false;
}",0.9767882520132638
74145,"public BlankResultSet(){
}","public BlankResultSet(IQueryResultSet rset){
  this.rset=rset;
}",0.5777777777777777
74146,"public void close(){
}","public void close(){
  if (rset != null) {
    rset.close();
  }
}",0.5
74147,"/** 
 * Execute a listint and create the contents. List create a serials of contents. The execution process is: <li> create an container which will contain all the contents it creates. <li> push it into the stack <li> open query <li> process action, bookmark, style and visibility <li> call the onCreate if necessary <li> call emitter to start the list <li> access the query <li> call emitter to end the list <li> close the query. <li> pop up the container.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExecutor#load(org.eclipse.birt.report.engine.ir.ReportItemDesign,org.eclipse.birt.report.engine.emitter.IReportEmitter)
 */
public IContent execute(){
  ListItemDesign listDesign=(ListItemDesign)getDesign();
  IListContent listContent=report.createListContent();
  setContent(listContent);
  executeQuery();
  initializeContent(listDesign,listContent);
  processAction(listDesign,listContent);
  processBookmark(listDesign,listContent);
  processStyle(listDesign,listContent);
  processVisibility(listDesign,listContent);
  if (context.isInFactory()) {
    handleOnCreate(listContent);
  }
  startTOCEntry(listContent);
  if (rsetEmpty) {
    processEmptyQuery();
  }
  prepareToExecuteChildren();
  return listContent;
}","/** 
 * Execute a listint and create the contents. List create a serials of contents. The execution process is: <li> create an container which will contain all the contents it creates. <li> push it into the stack <li> open query <li> process action, bookmark, style and visibility <li> call the onCreate if necessary <li> call emitter to start the list <li> access the query <li> call emitter to end the list <li> close the query. <li> pop up the container.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExecutor#load(org.eclipse.birt.report.engine.ir.ReportItemDesign,org.eclipse.birt.report.engine.emitter.IReportEmitter)
 */
public IContent execute(){
  ListItemDesign listDesign=(ListItemDesign)getDesign();
  IListContent listContent=report.createListContent();
  setContent(listContent);
  executeQuery();
  initializeContent(listDesign,listContent);
  processAction(listDesign,listContent);
  processBookmark(listDesign,listContent);
  processStyle(listDesign,listContent);
  processVisibility(listDesign,listContent);
  if (context.isInFactory()) {
    handleOnCreate(listContent);
  }
  startTOCEntry(listContent);
  boolean showIfBlank=""String_Node_Str"".equalsIgnoreCase(content.getStyle().getShowIfBlank());
  if (showIfBlank && rsetEmpty) {
    createQueryForShowIfBlank();
  }
  prepareToExecuteChildren();
  return listContent;
}",0.9398148148148148
74148,"protected void createQueryForShowIfBlank(){
  IQueryResultSet blankRset=new BlankResultSet();
  rset=blankRset;
  context.setResultSet(rset);
  rsetEmpty=false;
}","protected void createQueryForShowIfBlank(){
  IQueryResultSet blankRset=new BlankResultSet(rset);
  rset=blankRset;
  context.setResultSet(rset);
  rsetEmpty=false;
}",0.9878048780487804
74149,"public IContent execute(){
  TableItemDesign tableDesign=(TableItemDesign)getDesign();
  ITableContent tableContent=report.createTableContent();
  setContent(tableContent);
  executeQuery();
  initializeContent(tableDesign,tableContent);
  processStyle(tableDesign,tableContent);
  processVisibility(tableDesign,tableContent);
  processBookmark(tableDesign,tableContent);
  processAction(tableDesign,tableContent);
  for (int i=0; i < tableDesign.getColumnCount(); i++) {
    ColumnDesign columnDesign=tableDesign.getColumn(i);
    Column column=new Column(report);
    column.setGenerateBy(columnDesign);
    InstanceID iid=new InstanceID(null,columnDesign.getID(),null);
    column.setInstanceID(iid);
    processColumnVisibility(columnDesign,column);
    tableContent.addColumn(column);
  }
  if (context.isInFactory()) {
    handleOnCreate(tableContent);
  }
  startTOCEntry(tableContent);
  if (rsetEmpty) {
    processEmptyQuery();
  }
  prepareToExecuteChildren();
  return tableContent;
}","public IContent execute(){
  TableItemDesign tableDesign=(TableItemDesign)getDesign();
  ITableContent tableContent=report.createTableContent();
  setContent(tableContent);
  executeQuery();
  initializeContent(tableDesign,tableContent);
  processStyle(tableDesign,tableContent);
  processVisibility(tableDesign,tableContent);
  processBookmark(tableDesign,tableContent);
  processAction(tableDesign,tableContent);
  for (int i=0; i < tableDesign.getColumnCount(); i++) {
    ColumnDesign columnDesign=tableDesign.getColumn(i);
    Column column=new Column(report);
    column.setGenerateBy(columnDesign);
    InstanceID iid=new InstanceID(null,columnDesign.getID(),null);
    column.setInstanceID(iid);
    processColumnVisibility(columnDesign,column);
    tableContent.addColumn(column);
  }
  if (context.isInFactory()) {
    handleOnCreate(tableContent);
  }
  startTOCEntry(tableContent);
  boolean showIfBlank=""String_Node_Str"".equalsIgnoreCase(content.getStyle().getShowIfBlank());
  if (showIfBlank && rsetEmpty) {
    createQueryForShowIfBlank();
  }
  prepareToExecuteChildren();
  return tableContent;
}",0.9260663507109004
74150,"protected void doExecute() throws Exception {
  executeQuery();
  if (rsetEmpty) {
    processEmptyQuery();
  }
}","protected void doExecute() throws Exception {
  executeQuery();
  boolean showIfBlank=""String_Node_Str"".equalsIgnoreCase(content.getStyle().getShowIfBlank());
  if (showIfBlank && rsetEmpty) {
    createQueryForShowIfBlank();
  }
}",0.563953488372093
74151,"protected void createQueryForShowIfBlank(){
  IBaseResultSet[] blankRsets=new IBaseResultSet[1];
  blankRsets[0]=new BlankResultSet();
  rsets=blankRsets;
  context.setResultSets(rsets);
  rsetEmpty=false;
}","protected void createQueryForShowIfBlank(){
  IBaseResultSet[] blankRsets=new IBaseResultSet[1];
  blankRsets[0]=new BlankResultSet((IQueryResultSet)rsets[0]);
  rsets=blankRsets;
  context.setResultSets(rsets);
  rsetEmpty=false;
}",0.9430523917995444
74152,"protected void doExecute() throws Exception {
  TableItemDesign tableDesign=(TableItemDesign)design;
  ITableContent tableContent=(ITableContent)content;
  executeQuery();
  if (tableContent.getColumnCount() == 0) {
    for (int i=0; i < tableDesign.getColumnCount(); i++) {
      ColumnDesign columnDesign=tableDesign.getColumn(i);
      Column column=new Column(report);
      column.setGenerateBy(columnDesign);
      InstanceID iid=new InstanceID(null,columnDesign.getID(),null);
      column.setInstanceID(iid);
      tableContent.addColumn(column);
    }
  }
 else {
    int columnCount=tableContent.getColumnCount();
    for (int i=0; i < columnCount; i++) {
      Column column=(Column)tableContent.getColumn(i);
      InstanceID iid=column.getInstanceID();
      if (iid != null) {
        long componentId=iid.getComponentID();
        ReportElementDesign element=report.getDesign().getReportItemByID(componentId);
        column.setGenerateBy(element);
      }
    }
  }
  if (rsetEmpty) {
    processEmptyQuery();
  }
}","protected void doExecute() throws Exception {
  TableItemDesign tableDesign=(TableItemDesign)design;
  ITableContent tableContent=(ITableContent)content;
  executeQuery();
  if (tableContent.getColumnCount() == 0) {
    for (int i=0; i < tableDesign.getColumnCount(); i++) {
      ColumnDesign columnDesign=tableDesign.getColumn(i);
      Column column=new Column(report);
      column.setGenerateBy(columnDesign);
      InstanceID iid=new InstanceID(null,columnDesign.getID(),null);
      column.setInstanceID(iid);
      tableContent.addColumn(column);
    }
  }
 else {
    int columnCount=tableContent.getColumnCount();
    for (int i=0; i < columnCount; i++) {
      Column column=(Column)tableContent.getColumn(i);
      InstanceID iid=column.getInstanceID();
      if (iid != null) {
        long componentId=iid.getComponentID();
        ReportElementDesign element=report.getDesign().getReportItemByID(componentId);
        column.setGenerateBy(element);
      }
    }
  }
  boolean showIfBlank=""String_Node_Str"".equalsIgnoreCase(content.getStyle().getShowIfBlank());
  if (showIfBlank && rsetEmpty) {
    createQueryForShowIfBlank();
  }
}",0.9284403669724772
74153,"/** 
 * Only check the result of the expectedValue of the result set
 * @param it
 * @param ri
 * @throws DataException
 * @throws BirtException
 */
private void checkResult(IResultIterator ri) throws BirtException {
  Iterator it=this.expectedValue.iterator();
  while (ri.next()) {
    String str=""String_Node_Str"";
    for (int i=0; i < rowBeArray.length; i++) {
      Object ob1=it.next();
      Object ob2=ri.getValue(rowBeNames[i]);
      assertEquals(ob1,ob2);
      str+=""String_Node_Str"" + ob2.toString();
    }
    if (totalBeArray != null) {
      for (int i=0; i < totalBeArray.length; i++) {
        Object ob1=it.next();
        Object ob2=ri.getValue(totalBeNames[i]);
        assertEquals(ob1,ob2);
        str+=""String_Node_Str"" + ob2.toString();
      }
    }
    System.out.println(""String_Node_Str"" + str);
  }
}","/** 
 * Only check the result of the expectedValue of the result set
 * @param data.it
 * @param ri
 * @throws DataException
 * @throws BirtException
 */
private void checkResult(IResultIterator ri) throws BirtException {
  Iterator it=this.expectedValue.iterator();
  while (ri.next()) {
    String str=""String_Node_Str"";
    for (int i=0; i < rowBeArray.length; i++) {
      Object ob1=it.next();
      Object ob2=ri.getValue(rowBeNames[i]);
      assertEquals(ob1,ob2);
      str+=""String_Node_Str"" + ob2.toString();
    }
    if (totalBeArray != null) {
      for (int i=0; i < totalBeArray.length; i++) {
        Object ob1=it.next();
        Object ob2=ri.getValue(totalBeNames[i]);
        assertEquals(ob1,ob2);
        str+=""String_Node_Str"" + ob2.toString();
      }
    }
    System.out.println(""String_Node_Str"" + str);
  }
}",0.9970041941282204
74154,"/** 
 * Only check the result of the expectedValue of the result set
 * @param it
 * @param ri
 * @throws DataException
 * @throws BirtException
 */
private void checkResult1(IResultIterator ri) throws BirtException {
  Iterator it=this.expectedValue.iterator();
  while (ri.next()) {
    String str=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++) {
      Object ob1=it.next();
      Object ob2=ri.getValue(this.rowExprName[i]);
      assertEquals(ob1,ob2);
      str+=""String_Node_Str"" + ob2.toString();
    }
    if (totalExprName != null) {
      for (int i=0; i < totalExprName.length; i++) {
        Object ob1=it.next();
        Object ob2=ri.getValue(this.totalExprName[i]);
        assertEquals(ob1,ob2);
        str+=""String_Node_Str"" + ob2.toString();
      }
    }
    System.out.println(""String_Node_Str"" + str);
  }
}","/** 
 * Only check the result of the expectedValue of the result set
 * @param data.it
 * @param ri
 * @throws DataException
 * @throws BirtException
 */
private void checkResult1(IResultIterator ri) throws BirtException {
  Iterator it=this.expectedValue.iterator();
  while (ri.next()) {
    String str=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++) {
      Object ob1=it.next();
      Object ob2=ri.getValue(this.rowExprName[i]);
      assertEquals(ob1,ob2);
      str+=""String_Node_Str"" + ob2.toString();
    }
    if (totalExprName != null) {
      for (int i=0; i < totalExprName.length; i++) {
        Object ob1=it.next();
        Object ob2=ri.getValue(this.totalExprName[i]);
        assertEquals(ob1,ob2);
        str+=""String_Node_Str"" + ob2.toString();
      }
    }
    System.out.println(""String_Node_Str"" + str);
  }
}",0.9970605526161082
74155,"/** 
 * Only check the result of the expectedValue of the result set
 * @param it
 * @param ri
 * @throws DataException
 * @throws BirtException
 */
private void checkResult(IResultIterator ri) throws BirtException {
  Iterator it=this.expectedValue.iterator();
  while (ri.next()) {
    String str=""String_Node_Str"";
    for (int i=0; i < bindingNameRow.length; i++) {
      Object ob1=it.next();
      Object ob2=ri.getValue(bindingNameRow[i]);
      assertEquals(ob1,ob2);
      str+=""String_Node_Str"" + ob2.toString();
    }
    if (totalBeArray != null) {
      for (int i=0; i < bindingExprRow.length; i++) {
        Object ob1=it.next();
        Object ob2=ri.getValue(bindingExprRow[i]);
        assertEquals(ob1,ob2);
        str+=""String_Node_Str"" + ob2.toString();
      }
    }
    System.out.println(""String_Node_Str"" + str);
  }
}","/** 
 * Only check the result of the expectedValue of the result set
 * @param data.it
 * @param ri
 * @throws DataException
 * @throws BirtException
 */
private void checkResult(IResultIterator ri) throws BirtException {
  Iterator it=this.expectedValue.iterator();
  while (ri.next()) {
    String str=""String_Node_Str"";
    for (int i=0; i < bindingNameRow.length; i++) {
      Object ob1=it.next();
      Object ob2=ri.getValue(bindingNameRow[i]);
      assertEquals(ob1,ob2);
      str+=""String_Node_Str"" + ob2.toString();
    }
    if (totalBeArray != null) {
      for (int i=0; i < bindingExprRow.length; i++) {
        Object ob1=it.next();
        Object ob2=ri.getValue(bindingExprRow[i]);
        assertEquals(ob1,ob2);
        str+=""String_Node_Str"" + ob2.toString();
      }
    }
    System.out.println(""String_Node_Str"" + str);
  }
}",0.9970466627288836
74156,"/** 
 * Only check the result of the expectedValue of the result set
 * @param it
 * @param ri
 * @throws DataException
 * @throws BirtException
 */
private void checkResult1(IResultIterator ri) throws BirtException {
  Iterator it=this.expectedValue.iterator();
  while (ri.next()) {
    String str=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++) {
      Object ob1=it.next();
      Object ob2=ri.getValue(this.rowExprName[i]);
      assertEquals(ob1,ob2);
      str+=""String_Node_Str"" + ob2.toString();
    }
    if (totalExprName != null) {
      for (int i=0; i < totalExprName.length; i++) {
        Object ob1=it.next();
        Object ob2=ri.getValue(this.totalExprName[i]);
        assertEquals(ob1,ob2);
        str+=""String_Node_Str"" + ob2.toString();
      }
    }
    System.out.println(""String_Node_Str"" + str);
  }
}","/** 
 * Only check the result of the expectedValue of the result set
 * @param data.it
 * @param ri
 * @throws DataException
 * @throws BirtException
 */
private void checkResult1(IResultIterator ri) throws BirtException {
  Iterator it=this.expectedValue.iterator();
  while (ri.next()) {
    String str=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++) {
      Object ob1=it.next();
      Object ob2=ri.getValue(this.rowExprName[i]);
      assertEquals(ob1,ob2);
      str+=""String_Node_Str"" + ob2.toString();
    }
    if (totalExprName != null) {
      for (int i=0; i < totalExprName.length; i++) {
        Object ob1=it.next();
        Object ob2=ri.getValue(this.totalExprName[i]);
        assertEquals(ob1,ob2);
        str+=""String_Node_Str"" + ob2.toString();
      }
    }
    System.out.println(""String_Node_Str"" + str);
  }
}",0.9970605526161082
74157,"public void close() throws BirtException {
  if (state == NOT_STARTED || state == CLOSED)   return;
  if (this.getRdSaveHelper().needsSaveToDoc()) {
    while (this.next())     ;
    this.getRdSaveHelper().doSaveFinish();
  }
  if (needCache()) {
    while (this.next()) {
    }
    closeCacheOutputStream();
  }
  if (odiResult != null)   odiResult.close();
  odiResult=null;
  resultService=null;
  state=CLOSED;
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
}","public void close() throws BirtException {
  if (state == CLOSED)   return;
  if (this.getRdSaveHelper().needsSaveToDoc()) {
    if (this.isEmpty()) {
      lastRowIndex=-1;
      this.prepareCurrentRow();
    }
 else {
      while (this.next())       ;
    }
    this.getRdSaveHelper().doSaveFinish();
  }
  if (needCache()) {
    while (this.next()) {
    }
    closeCacheOutputStream();
  }
  if (odiResult != null)   odiResult.close();
  odiResult=null;
  resultService=null;
  state=CLOSED;
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
}",0.8428701180744778
74158,"private QueryDefinition createQueryDefinition(DataSetHandle dataSet){
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(dataSet.getName());
  queryDefn.setAutoBinding(true);
  return queryDefn;
}","private QueryDefinition createQueryDefinition(DataSetHandle dataSet){
  QueryDefinition queryDefn=new QueryDefinition();
  queryDefn.setDataSetName(dataSet.getQualifiedName());
  queryDefn.setAutoBinding(true);
  return queryDefn;
}",0.9802197802197802
74159,"/** 
 * @param filterComboViewer
 */
private void setFilterComboContents(ComboViewer filterComboViewer){
  if (filterComboViewer == null) {
    return;
  }
  ArrayList dbTypeList=new ArrayList();
  DbType tableType=new DbType(DbType.TABLE_TYPE,JdbcPlugin.getResourceString(""String_Node_Str""));
  DbType viewType=new DbType(DbType.VIEW_TYPE,JdbcPlugin.getResourceString(""String_Node_Str""));
  DbType allType=new DbType(DbType.ALL_TYPE,JdbcPlugin.getResourceString(""String_Node_Str""));
  DbType procedureType=new DbType(DbType.PROCEDURE_TYPE,JdbcPlugin.getResourceString(""String_Node_Str""));
  dbTypeList.add(allType);
  dbTypeList.add(tableType);
  dbTypeList.add(viewType);
  if (metaDataProvider.isProcedureSupported())   dbTypeList.add(procedureType);
  filterComboViewer.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((ArrayList)inputElement).toArray();
      }
      return new DbType[]{};
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  filterComboViewer.setLabelProvider(new LabelProvider(){
    public String getText(    Object inputElement){
      DbType dbType=(DbType)inputElement;
      return dbType.getName();
    }
  }
);
  filterComboViewer.setInput(dbTypeList);
  filterComboViewer.getCombo().select(0);
}","/** 
 * @param filterComboViewer
 */
private void setFilterComboContents(ComboViewer filterComboViewer){
  if (filterComboViewer == null) {
    return;
  }
  ArrayList dbTypeList=new ArrayList();
  DbType tableType=new DbType(DbType.TABLE_TYPE,JdbcPlugin.getResourceString(""String_Node_Str""));
  DbType viewType=new DbType(DbType.VIEW_TYPE,JdbcPlugin.getResourceString(""String_Node_Str""));
  DbType allType=new DbType(DbType.ALL_TYPE,JdbcPlugin.getResourceString(""String_Node_Str""));
  DbType procedureType=new DbType(DbType.PROCEDURE_TYPE,JdbcPlugin.getResourceString(""String_Node_Str""));
  dbTypeList.add(allType);
  dbTypeList.add(tableType);
  dbTypeList.add(viewType);
  if (metaDataProvider.isProcedureSupported())   dbTypeList.add(procedureType);
  filterComboViewer.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((ArrayList)inputElement).toArray();
      }
      return new DbType[]{};
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  filterComboViewer.setLabelProvider(new LabelProvider(){
    public String getText(    Object inputElement){
      DbType dbType=(DbType)inputElement;
      return dbType.getName();
    }
  }
);
  filterComboViewer.setInput(dbTypeList);
  filterComboViewer.getCombo().select(0);
  filterComboViewer.getCombo().addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (getSelectedDbType().equals(DbType.ALL_STRING) || getSelectedDbType().equals(DbType.TABLE_STRING)) {
        showSystemTableCheckBox.setEnabled(true);
      }
 else {
        showSystemTableCheckBox.setEnabled(false);
      }
    }
  }
);
}",0.8832612723903644
74160,"/** 
 * if the schema is not support, populate the table list
 */
protected void populateTableList(){
  if (rootNode != null) {
    removeTreeItem(rootNode);
  }
  ResultSet tablesRs=null;
  ArrayList procedureRs=null;
  String catalogName=metaDataProvider.getCatalog();
  tableList=new ArrayList();
  String namePattern=null;
  String[] tableType=null;
  cachedSearchTxt=searchTxt.getText();
  namePattern=SQLUtility.getTailoredSearchText(searchTxt.getText());
  String dbtype=getSelectedDbType();
  cachedDbType=dbtype;
  if (dbtype != null) {
    if (DbType.TABLE_STRING.equalsIgnoreCase(dbtype) || DbType.VIEW_STRING.equalsIgnoreCase(dbtype)) {
      tableType=new String[]{dbtype};
    }
  }
  if (metaDataProvider.isProcedureSupported())   procedureRs=metaDataProvider.getAllProcedure(catalogName,null,namePattern);
  if (!DbType.PROCEDURE_STRING.equalsIgnoreCase(dbtype))   tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
  if (tablesRs == null && procedureRs == null) {
    return;
  }
  try {
    Image image=tableImage;
    if (tablesRs != null) {
      int numberOfTable;
      Preferences preferences=JdbcPlugin.getDefault().getPluginPreferences();
      if (preferences.contains(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA)) {
        numberOfTable=preferences.getInt(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA);
      }
 else {
        numberOfTable=DateSetPreferencePage.DEFAULT_MAX_NUM_OF_TABLE_EACH_SCHEMA;
        preferences.setValue(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA,numberOfTable);
      }
      int count=0;
      while (tablesRs.next() && count < numberOfTable) {
        String tableName=tablesRs.getString(""String_Node_Str"");
        String type=tablesRs.getString(""String_Node_Str"");
        if (type.equalsIgnoreCase(""String_Node_Str""))         continue;
        int dbType=DbObject.TABLE_TYPE;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=tableImage;
          dbType=DbObject.TABLE_TYPE;
        }
 else         if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=viewImage;
          dbType=DbObject.VIEW_TYPE;
        }
        DbObject dbObject=new DbObject(getTableNameWithSchema(null,tableName),tableName,dbType,image);
        tableList.add(dbObject);
        count++;
      }
    }
    if (needToCreateProcedureNode(dbtype,procedureRs)) {
      String fullyQualifiedTableName=""String_Node_Str"";
      DbObject dbObject=new DbObject(fullyQualifiedTableName,""String_Node_Str"",DbObject.PROCEDURE_TYPE,tableImage);
      tableList.add(dbObject);
    }
    TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
    if (item != null && item.length > 0)     availableDbObjectsTree.showItem(item[0]);
  }
 catch (  Exception e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
}","/** 
 * if the schema is not support, populate the table list
 */
protected void populateTableList(){
  if (rootNode != null) {
    removeTreeItem(rootNode);
  }
  ResultSet tablesRs=null;
  ArrayList procedureRs=null;
  String catalogName=metaDataProvider.getCatalog();
  tableList=new ArrayList();
  String namePattern=null;
  String[] tableType=null;
  cachedSearchTxt=searchTxt.getText();
  namePattern=SQLUtility.getTailoredSearchText(searchTxt.getText());
  String dbtype=getSelectedDbType();
  cachedDbType=dbtype;
  if (dbtype != null) {
    if (showSystemTableCheckBox.isEnabled() && showSystemTableCheckBox.getSelection()) {
      tableType=new String[]{""String_Node_Str"",""String_Node_Str""};
    }
 else     if (DbType.TABLE_STRING.equalsIgnoreCase(dbtype) || DbType.VIEW_STRING.equalsIgnoreCase(dbtype)) {
      tableType=new String[]{dbtype};
    }
  }
  if (metaDataProvider.isProcedureSupported())   procedureRs=metaDataProvider.getAllProcedure(catalogName,null,namePattern);
  if (!DbType.PROCEDURE_STRING.equalsIgnoreCase(dbtype))   tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
  if (tablesRs == null && procedureRs == null) {
    return;
  }
  try {
    Image image=tableImage;
    if (tablesRs != null) {
      int numberOfTable;
      Preferences preferences=JdbcPlugin.getDefault().getPluginPreferences();
      if (preferences.contains(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA)) {
        numberOfTable=preferences.getInt(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA);
      }
 else {
        numberOfTable=DateSetPreferencePage.DEFAULT_MAX_NUM_OF_TABLE_EACH_SCHEMA;
        preferences.setValue(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA,numberOfTable);
      }
      int count=0;
      while (tablesRs.next() && count < numberOfTable) {
        String tableName=tablesRs.getString(""String_Node_Str"");
        String type=tablesRs.getString(""String_Node_Str"");
        int dbType=DbObject.TABLE_TYPE;
        if (showSystemTableCheckBox.isEnabled() && showSystemTableCheckBox.getSelection() && type.equalsIgnoreCase(""String_Node_Str"")) {
          image=tableImage;
          dbType=DbObject.TABLE_TYPE;
        }
 else         if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=tableImage;
          dbType=DbObject.TABLE_TYPE;
        }
 else         if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=viewImage;
          dbType=DbObject.VIEW_TYPE;
        }
        DbObject dbObject=new DbObject(getTableNameWithSchema(null,tableName),tableName,dbType,image);
        tableList.add(dbObject);
        count++;
      }
    }
    if (needToCreateProcedureNode(dbtype,procedureRs)) {
      String fullyQualifiedTableName=""String_Node_Str"";
      DbObject dbObject=new DbObject(fullyQualifiedTableName,""String_Node_Str"",DbObject.PROCEDURE_TYPE,tableImage);
      tableList.add(dbObject);
    }
    TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
    if (item != null && item.length > 0)     availableDbObjectsTree.showItem(item[0]);
  }
 catch (  Exception e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
}",0.9236145781328008
74161,"/** 
 * @param schemaName
 */
private void getSpecificSchema(String schemaName){
  if (!isPageInitialization) {
    if (schemaName.equals(JdbcPlugin.getResourceString(""String_Node_Str"")) || schemaName.trim().length() == 0) {
      getAvailableSchema();
      setMessage(DEFAULT_MESSAGE);
      return;
    }
    if (containsTableInSchema(schemaName)) {
      schemaList=new ArrayList();
      schemaList.add(schemaName);
      setMessage(DEFAULT_MESSAGE);
    }
 else {
      schemaList=null;
      setMessage(JdbcPlugin.getResourceString(""String_Node_Str""),WARNING);
    }
  }
 else {
    isPageInitialization=!isPageInitialization;
  }
}","/** 
 * @param schemaName
 */
private void getSpecificSchema(String schemaName){
  if (!isPageInitialization) {
    if (schemaName.equals(JdbcPlugin.getResourceString(""String_Node_Str"")) || schemaName.trim().length() == 0) {
      getAvailableSchema();
      setMessage(DEFAULT_MESSAGE);
      return;
    }
    if (containsTableInSchema(schemaName,false)) {
      schemaList=new ArrayList();
      schemaList.add(schemaName);
      setMessage(DEFAULT_MESSAGE);
    }
 else {
      schemaList=null;
      setMessage(JdbcPlugin.getResourceString(""String_Node_Str""),WARNING);
    }
  }
 else {
    isPageInitialization=!isPageInitialization;
  }
}",0.9953271028037384
74162,"/** 
 * @param schemaName
 * @return
 */
private boolean containsTableInSchema(String schemaName){
  ResultSet rs=metaDataProvider.getAlltables(metaDataProvider.getCatalog(),schemaName,""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  boolean hasNonSystemTable=false;
  if (rs != null) {
    try {
      while (rs.next()) {
        if (!""String_Node_Str"".equalsIgnoreCase(rs.getString(""String_Node_Str""))) {
          hasNonSystemTable=true;
          break;
        }
      }
    }
 catch (    SQLException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
  }
  if (hasNonSystemTable) {
    return true;
  }
 else {
    return false;
  }
}","/** 
 * @param schemaName
 * @return
 */
private boolean containsTableInSchema(String schemaName,boolean showSystemTable){
  String[] tableTypes=showSystemTable ? new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""} : new String[]{""String_Node_Str"",""String_Node_Str""};
  ResultSet rs=metaDataProvider.getAlltables(metaDataProvider.getCatalog(),schemaName,""String_Node_Str"",tableTypes);
  if (rs != null) {
    try {
      while (rs.next()) {
        return true;
      }
    }
 catch (    SQLException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
  }
  return false;
}",0.4593528018942384
74163,"/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private Control createTableSelectionComposite(Composite parent){
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
{
    GridData data=new GridData(GridData.FILL_VERTICAL);
    data.grabExcessVerticalSpace=true;
    tablescomposite.setLayoutData(data);
  }
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
{
    GridData data=new GridData();
    dataSourceLabel.setLayoutData(data);
  }
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace=true;
    data.grabExcessVerticalSpace=true;
    data.heightHint=150;
    availableDbObjectsTree.setLayoutData(data);
  }
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      populateEventData(e);
      insertText((String)e.data);
    }
  }
);
  availableDbObjectsTree.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (event.widget.getClass() != null)       handleAvailabeTreeSelection();
    }
    private void handleAvailabeTreeSelection(){
      TreeItem items[]=availableDbObjectsTree.getSelection();
      for (int i=0; i < items.length; i++) {
        if (items[i].getGrayed()) {
          availableDbObjectsTree.setRedraw(false);
          availableDbObjectsTree.deselectAll();
          availableDbObjectsTree.setRedraw(true);
          availableDbObjectsTree.redraw();
        }
      }
    }
  }
);
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
{
    GridLayout groupLayout=new GridLayout();
    groupLayout.numColumns=3;
    groupLayout.verticalSpacing=10;
    selectTableGroup.setLayout(groupLayout);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    selectTableGroup.setLayoutData(data);
  }
  schemaLabel=new Label(selectTableGroup,SWT.LEFT);
  schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  schemaCombo=new Combo(selectTableGroup,(JdbcPlugin.getDefault().getPluginPreferences().getString(DateSetPreferencePage.SCHEMAS_PREFETCH_CONFIG).equals(ENABLED)) ? SWT.READ_ONLY : SWT.DROP_DOWN);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  schemaCombo.setLayoutData(gd);
  enableSchemaComponent(isSchemaSupported);
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
{
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    data.horizontalSpan=2;
    searchTxt.setLayoutData(data);
  }
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer);
  filterComboViewer.getControl().setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          populateAvailableDbObjects();
        }
      }
);
    }
  }
);
  setupIdentifierQuoteStringCheckBox(selectTableGroup);
  setRootElement();
  addDragSupportToTree();
  return tablescomposite;
}","/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private Control createTableSelectionComposite(Composite parent){
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
{
    GridData data=new GridData(GridData.FILL_VERTICAL);
    data.grabExcessVerticalSpace=true;
    tablescomposite.setLayoutData(data);
  }
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
{
    GridData data=new GridData();
    dataSourceLabel.setLayoutData(data);
  }
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace=true;
    data.grabExcessVerticalSpace=true;
    data.heightHint=150;
    availableDbObjectsTree.setLayoutData(data);
  }
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      populateEventData(e);
      insertText((String)e.data);
    }
  }
);
  availableDbObjectsTree.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (event.widget.getClass() != null)       handleAvailabeTreeSelection();
    }
    private void handleAvailabeTreeSelection(){
      TreeItem items[]=availableDbObjectsTree.getSelection();
      for (int i=0; i < items.length; i++) {
        if (items[i].getGrayed()) {
          availableDbObjectsTree.setRedraw(false);
          availableDbObjectsTree.deselectAll();
          availableDbObjectsTree.setRedraw(true);
          availableDbObjectsTree.redraw();
        }
      }
    }
  }
);
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
{
    GridLayout groupLayout=new GridLayout();
    groupLayout.numColumns=3;
    groupLayout.verticalSpacing=10;
    selectTableGroup.setLayout(groupLayout);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    selectTableGroup.setLayoutData(data);
  }
  schemaLabel=new Label(selectTableGroup,SWT.LEFT);
  schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  schemaCombo=new Combo(selectTableGroup,(JdbcPlugin.getDefault().getPluginPreferences().getString(DateSetPreferencePage.SCHEMAS_PREFETCH_CONFIG).equals(ENABLED)) ? SWT.READ_ONLY : SWT.DROP_DOWN);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  schemaCombo.setLayoutData(gd);
  enableSchemaComponent(isSchemaSupported);
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
{
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    data.horizontalSpan=2;
    searchTxt.setLayoutData(data);
  }
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer);
  filterComboViewer.getControl().setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          populateAvailableDbObjects();
        }
      }
);
    }
  }
);
  setupIdentifierQuoteStringCheckBox(selectTableGroup);
  setupShowSystemTableCheckBox(selectTableGroup);
  setRootElement();
  addDragSupportToTree();
  return tablescomposite;
}",0.9933879925945516
74164,"public void widgetSelected(SelectionEvent event){
  PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
    public void run(){
      populateAvailableDbObjects();
    }
  }
);
}","public void widgetSelected(SelectionEvent e){
  if (getSelectedDbType().equals(DbType.ALL_STRING) || getSelectedDbType().equals(DbType.TABLE_STRING)) {
    showSystemTableCheckBox.setEnabled(true);
  }
 else {
    showSystemTableCheckBox.setEnabled(false);
  }
}",0.2699115044247787
74165,"/** 
 * populate shema list if the schema is supported
 */
protected void populateSchemaList(){
  if (rootNode != null) {
    removeTreeItem(rootNode);
  }
  if (JdbcPlugin.getDefault().getPluginPreferences().getString(DateSetPreferencePage.SCHEMAS_PREFETCH_CONFIG).equals(ENABLED)) {
    getAvailableSchema();
  }
 else {
    getSpecificSchema(schemaCombo.getText().trim());
  }
  if (schemaCombo.getItemCount() < 1) {
    schemaCombo.add(JdbcPlugin.getResourceString(""String_Node_Str""));
    schemaCombo.select(0);
    if (schemaList != null) {
      Iterator it=schemaList.iterator();
      while (it.hasNext())       schemaCombo.add(it.next().toString());
    }
  }
  ArrayList schemaObjectList=new ArrayList();
  if (schemaList != null) {
    int numberOfSchema=0;
    Preferences preferences=JdbcPlugin.getDefault().getPluginPreferences();
    if (preferences.contains(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA)) {
      numberOfSchema=preferences.getInt(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA);
    }
 else {
      numberOfSchema=DateSetPreferencePage.DEFAULT_MAX_NUM_OF_SCHEMA;
      preferences.setValue(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA,numberOfSchema);
    }
    cachedSchemaComboIndex=schemaCombo.getSelectionIndex();
    if (schemaCombo.getSelectionIndex() < 0) {
      String schemaName=schemaCombo.getText().trim();
      if (schemaName.length() != 0) {
        DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
        schemaObjectList.add(schemaObj);
      }
 else       schemaCombo.select(0);
    }
    if (schemaCombo.getSelectionIndex() == 0) {
      for (int i=0, count=0; i < schemaList.size() && count < numberOfSchema; i++) {
        String schemaName=(String)schemaList.get(i);
        if (containsTableInSchema(schemaName)) {
          DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
          schemaObjectList.add(schemaObj);
          count++;
        }
      }
    }
 else     if (schemaCombo.getSelectionIndex() > 0) {
      String schemaName=schemaCombo.getItem(schemaCombo.getSelectionIndex());
      DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
      schemaObjectList.add(schemaObj);
    }
  }
  TreeItem[] items=Utility.createTreeItems(rootNode,schemaObjectList,SWT.NONE,schemaImage);
  if (items != null && items.length > 0) {
    availableDbObjectsTree.showItem(items[0]);
  }
}","/** 
 * populate shema list if the schema is supported
 */
protected void populateSchemaList(){
  if (rootNode != null) {
    removeTreeItem(rootNode);
  }
  if (JdbcPlugin.getDefault().getPluginPreferences().getString(DateSetPreferencePage.SCHEMAS_PREFETCH_CONFIG).equals(ENABLED)) {
    getAvailableSchema();
  }
 else {
    getSpecificSchema(schemaCombo.getText().trim());
  }
  if (schemaCombo.getItemCount() < 1) {
    schemaCombo.add(JdbcPlugin.getResourceString(""String_Node_Str""));
    schemaCombo.select(0);
    if (schemaList != null) {
      Iterator it=schemaList.iterator();
      while (it.hasNext())       schemaCombo.add(it.next().toString());
    }
  }
  ArrayList schemaObjectList=new ArrayList();
  if (schemaList != null) {
    int numberOfSchema=0;
    Preferences preferences=JdbcPlugin.getDefault().getPluginPreferences();
    if (preferences.contains(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA)) {
      numberOfSchema=preferences.getInt(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA);
    }
 else {
      numberOfSchema=DateSetPreferencePage.DEFAULT_MAX_NUM_OF_SCHEMA;
      preferences.setValue(DateSetPreferencePage.USER_MAX_NUM_OF_SCHEMA,numberOfSchema);
    }
    cachedSchemaComboIndex=schemaCombo.getSelectionIndex();
    if (schemaCombo.getSelectionIndex() < 0) {
      String schemaName=schemaCombo.getText().trim();
      if (schemaName.length() != 0) {
        DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
        schemaObjectList.add(schemaObj);
      }
 else       schemaCombo.select(0);
    }
    if (schemaCombo.getSelectionIndex() == 0) {
      for (int i=0, count=0; i < schemaList.size() && count < numberOfSchema; i++) {
        String schemaName=(String)schemaList.get(i);
        if (showSystemTableCheckBox.isEnabled() && showSystemTableCheckBox.getSelection()) {
          if (containsTableInSchema(schemaName,true)) {
            DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
            schemaObjectList.add(schemaObj);
            count++;
          }
        }
 else         if (containsTableInSchema(schemaName,false)) {
          DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
          schemaObjectList.add(schemaObj);
          count++;
        }
      }
    }
 else     if (schemaCombo.getSelectionIndex() > 0) {
      String schemaName=schemaCombo.getItem(schemaCombo.getSelectionIndex());
      DbObject schemaObj=new DbObject(schemaName,schemaName,DbObject.SCHEMA_TYPE,schemaImage);
      schemaObjectList.add(schemaObj);
    }
  }
  TreeItem[] items=Utility.createTreeItems(rootNode,schemaObjectList,SWT.NONE,schemaImage);
  if (items != null && items.length > 0) {
    availableDbObjectsTree.showItem(items[0]);
  }
}",0.8826433725788074
74166,"private List getPages(boolean fitToPage,boolean pagebreakPaginationOnly) throws EngineException {
  String designFile=""String_Node_Str"";
  IReportRunnable report=openReportDesign(designFile);
  List pageAreas=new ArrayList();
  IEmitterMonitor monitor=new PageMonitor(pageAreas);
  IRunAndRenderTask runAndRenderTask=new TestRunAndRenderTask(engine,report,monitor);
  PDFRenderOption options=createRenderOption();
  options.setOption(IPDFRenderOption.FIT_TO_PAGE,new Boolean(fitToPage));
  options.setOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY,new Boolean(pagebreakPaginationOnly));
  runAndRenderTask.setRenderOption(options);
  runAndRenderTask.run();
  runAndRenderTask.close();
  return pageAreas;
}","private List getPages(boolean fitToPage,boolean pagebreakPaginationOnly) throws EngineException {
  String designFile=""String_Node_Str"";
  IReportRunnable report=openReportDesign(designFile);
  List pageAreas=new ArrayList();
  IEmitterMonitor monitor=new PageMonitor(pageAreas);
  IRunAndRenderTask runAndRenderTask=new TestRunAndRenderTask(engine,report,monitor);
  PDFRenderOption options=createRenderOption();
  if (fitToPage) {
    options.setOption(IPDFRenderOption.PAGE_OVERFLOW,new Integer(IPDFRenderOption.FIT_TO_PAGE_SIZE));
  }
  options.setOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY,new Boolean(pagebreakPaginationOnly));
  runAndRenderTask.setRenderOption(options);
  runAndRenderTask.run();
  runAndRenderTask.close();
  return pageAreas;
}",0.9313392250169952
74167,"/** 
 * @return if font is embeded
 */
public boolean isEmbededFont(){
  return isEmbededFont;
}","/** 
 * @return true if font is embedded
 */
public boolean isEmbededFont(){
  return isEmbededFont;
}",0.9696969696969696
74168,"/** 
 * sets the base url for action handling
 * @param baseURL sets the base URL used for action handling
 */
public void setBaseURL(String baseURL){
  this.baseURL=baseURL;
}","/** 
 * sets the base URL for action handling
 * @param baseURL sets the base URL used for action handling
 */
public void setBaseURL(String baseURL){
  this.baseURL=baseURL;
}",0.9829545454545454
74169,"/** 
 * dummy constrictor 
 */
public PDFRenderContext(){
}","/** 
 * dummy constructor 
 */
public PDFRenderContext(){
}",0.9830508474576272
74170,"/** 
 * @return if font is embeded
 */
public boolean isEmbededFont(){
  return getBooleanOption(IS_EMBEDDED_FONT,false);
}","/** 
 * @return true if font is embedded
 */
public boolean isEmbededFont(){
  return getBooleanOption(IS_EMBEDDED_FONT,false);
}",0.9761904761904762
74171,"protected IReportLayoutEngine createReportLayoutEngine(String pagination,IRenderOption options){
  IReportLayoutEngine layoutEngine=LayoutEngineFactory.createLayoutEngine(pagination);
  if (options != null) {
    Object fitToPage=renderOptions.getOption(IPDFRenderOption.FIT_TO_PAGE);
    if (fitToPage != null) {
      layoutEngine.setOption(IPDFRenderOption.FIT_TO_PAGE,fitToPage);
    }
    Object pagebreakOnly=renderOptions.getOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY);
    if (pagebreakOnly != null) {
      layoutEngine.setOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY,pagebreakOnly);
    }
    Object outputDisplayNone=renderOptions.getOption(IPDFRenderOption.OUTPUT_DISPLAY_NONE);
    if (outputDisplayNone != null) {
      layoutEngine.setOption(IPDFRenderOption.OUTPUT_DISPLAY_NONE,outputDisplayNone);
    }
    Object pdfTextWrapping=renderOptions.getOption(IPDFRenderOption.PDF_TEXT_WRAPPING);
    if (pdfTextWrapping != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_TEXT_WRAPPING,pdfTextWrapping);
    }
    Object pdfFontSubstitution=renderOptions.getOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
    if (pdfFontSubstitution != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION,pdfFontSubstitution);
    }
    Object pdfBidiProcessing=renderOptions.getOption(IPDFRenderOption.PDF_BIDI_PROCESSING);
    if (pdfBidiProcessing != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_BIDI_PROCESSING,pdfBidiProcessing);
    }
  }
  layoutEngine.setOption(TASK_TYPE,new Integer(taskType));
  return layoutEngine;
}","protected IReportLayoutEngine createReportLayoutEngine(String pagination,IRenderOption options){
  IReportLayoutEngine layoutEngine=LayoutEngineFactory.createLayoutEngine(pagination);
  if (options != null) {
    Object fitToPage=renderOptions.getOption(IPDFRenderOption.FIT_TO_PAGE);
    if (fitToPage != null) {
      layoutEngine.setOption(IPDFRenderOption.FIT_TO_PAGE,fitToPage);
    }
    Object pagebreakOnly=renderOptions.getOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY);
    if (pagebreakOnly != null) {
      layoutEngine.setOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY,pagebreakOnly);
    }
    Object pageOverflow=renderOptions.getOption(IPDFRenderOption.PAGE_OVERFLOW);
    if (pageOverflow != null) {
      layoutEngine.setOption(IPDFRenderOption.PAGE_OVERFLOW,pageOverflow);
    }
    Object outputDisplayNone=renderOptions.getOption(IPDFRenderOption.OUTPUT_DISPLAY_NONE);
    if (outputDisplayNone != null) {
      layoutEngine.setOption(IPDFRenderOption.OUTPUT_DISPLAY_NONE,outputDisplayNone);
    }
    Object pdfTextWrapping=renderOptions.getOption(IPDFRenderOption.PDF_TEXT_WRAPPING);
    if (pdfTextWrapping != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_TEXT_WRAPPING,pdfTextWrapping);
    }
    Object pdfFontSubstitution=renderOptions.getOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
    if (pdfFontSubstitution != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_FONT_SUBSTITUTION,pdfFontSubstitution);
    }
    Object pdfBidiProcessing=renderOptions.getOption(IPDFRenderOption.PDF_BIDI_PROCESSING);
    if (pdfBidiProcessing != null) {
      layoutEngine.setOption(IPDFRenderOption.PDF_BIDI_PROCESSING,pdfBidiProcessing);
    }
  }
  layoutEngine.setOption(TASK_TYPE,new Integer(taskType));
  return layoutEngine;
}",0.9422275163787968
74172,int getX();,"/** 
 * Gets the x coordinate of the area's top-left border corner.
 * @return the x coordinate.
 */
int getX();",0.1788617886178861
74173,int getHeight();,"/** 
 * Gets the height of the area, ignoring margin.
 * @return the height of the area without margin.
 */
int getHeight();",0.2285714285714285
74174,IStyle getStyle();,"/** 
 * Gets the content's computed style.
 * @return the computed style.
 */
IStyle getStyle();",0.3157894736842105
74175,int getY();,"/** 
 * Gets the y coordinate of the area's top-left border corner.
 * @return the y coordinate.
 */
int getY();",0.1788617886178861
74176,float getScale();,"/** 
 * Gets the scale of the area. The <i>scale</i> property is normally used  in render time to determine the zoom ratio of the content in this area.
 * @return the scale.
 */
float getScale();",0.160377358490566
74177,"/** 
 * get content object.
 * @return
 */
IContent getContent();","/** 
 * Gets the content object of the area.
 * @return the content object.
 */
IContent getContent();",0.6347305389221557
74178,int getWidth();,"/** 
 * Gets the width of the area, ignoring margin.
 * @return the width of the area without margin.
 */
int getWidth();",0.2205882352941176
74179,boolean needClip();,public boolean needClip();,0.8444444444444444
74180,"/** 
 * get X possition of this area
 */
public int getX(){
  return x;
}","/** 
 * get X position of this area
 */
public int getX(){
  return x;
}",0.993103448275862
74181,"public static IContainerArea createInlineContainer(IContent content){
  return new InlineContainerArea(content);
}","/** 
 * create inline container area by content
 * @param content the content object
 * @param isFirst if this area is the first area of the content
 * @param isLast if this area is the last area of the content
 * @return
 */
public static IContainerArea createInlineContainer(IContent content,boolean isFirst,boolean isLast){
  IContainerArea containerArea=AreaFactory.createInlineContainer(content);
  IStyle style=containerArea.getStyle();
  if (!isFirst) {
    style.setProperty(IStyle.STYLE_BORDER_LEFT_WIDTH,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_LEFT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_MARGIN_LEFT,IStyle.NUMBER_0);
  }
  if (!isLast) {
    style.setProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_RIGHT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_MARGIN_RIGHT,IStyle.NUMBER_0);
  }
  return containerArea;
}",0.1821705426356589
74182,"CellArea(ICellContent cell){
  super(cell);
  removeBorder();
  setDefaultPadding();
  isClippingContainer=true;
}","CellArea(ICellContent cell){
  super(cell);
  removeBorder();
  setDefaultPadding();
}",0.86
74183,"public boolean needClip(){
  return isClippingContainer && needClip;
}","public boolean needClip(){
  return needClip;
}",0.8034188034188035
74184,"public void addChild(IArea area){
  if (area.getX() < 0 || area.getX() + area.getWidth() > width || area.getY() < 0 || area.getY() + area.getHeight() > height) {
    needClip=true;
  }
  children.add(area);
}","public void addChild(IArea area){
  children.add(area);
}",0.430188679245283
74185,"InlineContainerArea(IContent content){
  super(content);
  needClip=true;
  isClippingContainer=true;
}","InlineContainerArea(IContent content){
  super(content);
}",0.7204968944099379
74186,"/** 
 * @param aggregationDef
 * @param facttableRowIterator
 * @throws DataException 
 */
AggregationCalculator(AggregationDefinition aggregationDef,DimColumn[] paramterColNames,IFactTableRowIterator facttableRowIterator) throws DataException {
  Object[] params={aggregationDef,facttableRowIterator};
  logger.entering(AggregationCalculator.class.getName(),""String_Node_Str"",params);
  this.aggregation=aggregationDef;
  AggregationFunctionDefinition[] aggregationFunction=aggregationDef.getAggregationFunctions();
  if (aggregationDef.getLevels() == null)   this.levelCount=0;
 else   this.levelCount=aggregationDef.getLevels().length;
  if (aggregationFunction != null) {
    this.accumulators=new Accumulator[aggregationFunction.length];
    this.measureIndex=new int[aggregationFunction.length];
    this.parameterColIndex=new int[aggregationFunction.length];
    for (int i=0; i < aggregationFunction.length; i++) {
      IAggregation aggregation=BuiltInAggregationFactory.getInstance().getAggregation(aggregationFunction[i].getFunctionName());
      if (aggregation.getParameterDefn() != null && aggregation.getParameterDefn().length > 1) {
        this.parameterColIndex[i]=find(paramterColNames,aggregationFunction[i].getParaCol());
      }
 else {
        this.parameterColIndex[i]=-1;
      }
      this.accumulators[i]=aggregation.newAccumulator();
      this.accumulators[i].start();
      this.measureIndex[i]=facttableRowIterator.getMeasureIndex(aggregationFunction[i].getMeasureName());
      if (this.measureIndex[i] == -1) {
        throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,aggregationFunction[i].getMeasureName());
      }
    }
  }
  result=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  measureInfo=facttableRowIterator.getMeasureInfo();
  facttableRow=new FacttableRow(measureInfo);
  logger.exiting(AggregationCalculator.class.getName(),""String_Node_Str"");
}","/** 
 * @param aggregationDef
 * @param facttableRowIterator
 * @throws DataException 
 */
AggregationCalculator(AggregationDefinition aggregationDef,DimColumn[] paramterColNames,IFactTableRowIterator facttableRowIterator) throws DataException {
  Object[] params={aggregationDef,facttableRowIterator};
  logger.entering(AggregationCalculator.class.getName(),""String_Node_Str"",params);
  this.aggregation=aggregationDef;
  AggregationFunctionDefinition[] aggregationFunction=aggregationDef.getAggregationFunctions();
  if (aggregationDef.getLevels() == null)   this.levelCount=0;
 else   this.levelCount=aggregationDef.getLevels().length;
  if (aggregationFunction != null) {
    this.accumulators=new Accumulator[aggregationFunction.length];
    this.measureIndex=new int[aggregationFunction.length];
    this.parameterColIndex=new int[aggregationFunction.length];
    for (int i=0; i < aggregationFunction.length; i++) {
      IAggregation aggregation=BuiltInAggregationFactory.getInstance().getAggregation(aggregationFunction[i].getFunctionName());
      if (aggregation.getParameterDefn() != null && aggregation.getParameterDefn().length > 1) {
        this.parameterColIndex[i]=find(paramterColNames,aggregationFunction[i].getParaCol());
      }
 else {
        this.parameterColIndex[i]=-1;
      }
      this.accumulators[i]=aggregation.newAccumulator();
      this.accumulators[i].start();
      this.measureIndex[i]=facttableRowIterator.getMeasureIndex(aggregationFunction[i].getMeasureName());
      if (AggregationFactory.getInstance().getAggrInfo(aggregation.getName()) == null || (this.measureIndex[i] == -1 && AggregationFactory.getInstance().getAggrInfo(aggregation.getName()).needDataField())) {
        throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,aggregationFunction[i].getMeasureName());
      }
    }
  }
  result=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  measureInfo=facttableRowIterator.getMeasureInfo();
  facttableRow=new FacttableRow(measureInfo);
  logger.exiting(AggregationCalculator.class.getName(),""String_Node_Str"");
}",0.9587223587223588
74187,"private Object[] getAccumulatorParameter(Row4Aggregation row,int funcIndex){
  Object[] parameters=null;
  if (parameterColIndex[funcIndex] == -1) {
    parameters=new Object[1];
    parameters[0]=row.getMeasures()[measureIndex[funcIndex]];
  }
 else {
    parameters=new Object[2];
    parameters[0]=row.getMeasures()[measureIndex[funcIndex]];
    parameters[1]=row.getParameterValues()[parameterColIndex[funcIndex]];
  }
  return parameters;
}","private Object[] getAccumulatorParameter(Row4Aggregation row,int funcIndex){
  Object[] parameters=null;
  if (parameterColIndex[funcIndex] == -1) {
    parameters=new Object[1];
    if (measureIndex[funcIndex] < 0) {
      parameters[0]=null;
    }
 else {
      parameters[0]=row.getMeasures()[measureIndex[funcIndex]];
    }
  }
 else {
    parameters=new Object[2];
    if (measureIndex[funcIndex] < 0) {
      parameters[0]=null;
    }
 else {
      parameters[0]=row.getMeasures()[measureIndex[funcIndex]];
    }
    parameters[1]=row.getParameterValues()[parameterColIndex[funcIndex]];
  }
  return parameters;
}",0.8364661654135338
74188,"/** 
 * validate on calculated member to verify whether the measure reference exist.
 * @param cube
 * @param measureDefn
 * @throws DataException
 */
static void validateCalculatedMember(ICubeQueryDefinition defn,ICube cube,CalculatedMember[] calculatedMember) throws DataException {
  boolean findMeasure=false;
  for (int i=0; i < calculatedMember.length; i++) {
    findMeasure=false;
    String measureName=calculatedMember[i].getMeasureName();
    String[] names=cube.getMeasureNames();
    if (names != null && names.length > 0) {
      for (int k=0; k < names.length; k++) {
        if (names[k].equals(measureName)) {
          findMeasure=true;
          break;
        }
      }
    }
    if (!findMeasure) {
      List computedMeasures=defn.getComputedMeasures();
      for (int k=0; k < computedMeasures.size(); k++) {
        if (((ComputedMeasureDefinition)computedMeasures.get(k)).getName().equals(measureName)) {
          findMeasure=true;
          break;
        }
      }
      if (!findMeasure)       throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,new Object[]{measureName});
    }
  }
}","/** 
 * validate on calculated member to verify whether the measure reference exist.
 * @param cube
 * @param measureDefn
 * @throws DataException
 */
static void validateCalculatedMember(ICubeQueryDefinition defn,ICube cube,CalculatedMember[] calculatedMember) throws DataException {
  boolean findMeasure=false;
  for (int i=0; i < calculatedMember.length; i++) {
    findMeasure=false;
    String measureName=calculatedMember[i].getMeasureName();
    String[] names=cube.getMeasureNames();
    if (names != null && names.length > 0) {
      for (int k=0; k < names.length; k++) {
        if (names[k].equals(measureName)) {
          findMeasure=true;
          break;
        }
      }
    }
    if (!findMeasure) {
      List computedMeasures=defn.getComputedMeasures();
      for (int k=0; k < computedMeasures.size(); k++) {
        if (((ComputedMeasureDefinition)computedMeasures.get(k)).getName().equals(measureName)) {
          findMeasure=true;
          break;
        }
      }
      if (!findMeasure && (AggregationFactory.getInstance().getAggrInfo(calculatedMember[i].getAggrFunction()) != null && AggregationFactory.getInstance().getAggrInfo(calculatedMember[i].getAggrFunction()).needDataField()))       throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,new Object[]{measureName});
    }
  }
}",0.9185004074979624
74189,"/** 
 * Valid bindings, return a list of invalid binding.
 * @param queryDefn
 * @param suppressException
 * @return
 * @throws DataException
 */
public static List validateBinding(ICubeQueryDefinition queryDefn,boolean suppressException) throws DataException {
  List result=new ArrayList();
  Set validMeasures=new HashSet();
  for (int i=0; i < queryDefn.getMeasures().size(); i++) {
    IMeasureDefinition measure=(IMeasureDefinition)queryDefn.getMeasures().get(i);
    validMeasures.add(measure.getName());
  }
  Set validDimLevels=new HashSet();
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.COLUMN_EDGE);
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.ROW_EDGE);
  for (int i=0; i < queryDefn.getBindings().size(); i++) {
    boolean isValid=true;
    IBinding binding=(IBinding)queryDefn.getBindings().get(i);
    Set levels=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),queryDefn.getBindings());
    if (!validDimLevels.containsAll(levels)) {
      isValid=false;
      if (!suppressException)       throw new DataException(ResourceConstants.INVALID_BINDING_REFER_TO_INEXIST_DIMENSION,binding.getBindingName());
    }
    String measureName=OlapExpressionCompiler.getReferencedScriptObject(binding.getExpression(),""String_Node_Str"");
    if (measureName != null && !validMeasures.contains(measureName)) {
      isValid=false;
      if (!suppressException)       throw new DataException(ResourceConstants.INVALID_BINDING_REFER_TO_INEXIST_MEASURE,binding.getBindingName());
    }
    if ((binding.getAggregatOns().size() > 0 && binding.getAggrFunction() == null)) {
      isValid=false;
      if (!suppressException)       throw new DataException(ResourceConstants.INVALID_BINDING_MISSING_AGGR_FUNC,binding.getBindingName());
    }
    if (!isValid)     result.add(binding);
  }
  return result;
}","/** 
 * Valid bindings, return a list of invalid binding.
 * @param queryDefn
 * @param suppressException
 * @return
 * @throws DataException
 */
public static List validateBinding(ICubeQueryDefinition queryDefn,boolean suppressException) throws DataException {
  List result=new ArrayList();
  Set validMeasures=new HashSet();
  for (int i=0; i < queryDefn.getMeasures().size(); i++) {
    IMeasureDefinition measure=(IMeasureDefinition)queryDefn.getMeasures().get(i);
    validMeasures.add(measure.getName());
  }
  Set validDimLevels=new HashSet();
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.COLUMN_EDGE);
  populateLevel(queryDefn,validDimLevels,ICubeQueryDefinition.ROW_EDGE);
  for (int i=0; i < queryDefn.getBindings().size(); i++) {
    boolean isValid=true;
    IBinding binding=(IBinding)queryDefn.getBindings().get(i);
    if (binding.getAggrFunction() != null && binding.getExpression() instanceof IScriptExpression) {
      String expr=((IScriptExpression)binding.getExpression()).getText();
      if (expr == null && (AggregationFactory.getInstance().getAggrInfo(binding.getAggrFunction()) != null && !AggregationFactory.getInstance().getAggrInfo(binding.getAggrFunction()).needDataField()))       continue;
    }
    Set levels=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),queryDefn.getBindings());
    if (!validDimLevels.containsAll(levels)) {
      isValid=false;
      if (!suppressException)       throw new DataException(ResourceConstants.INVALID_BINDING_REFER_TO_INEXIST_DIMENSION,binding.getBindingName());
    }
    String measureName=OlapExpressionCompiler.getReferencedScriptObject(binding.getExpression(),""String_Node_Str"");
    if (measureName != null && !validMeasures.contains(measureName)) {
      isValid=false;
      if (!suppressException)       throw new DataException(ResourceConstants.INVALID_BINDING_REFER_TO_INEXIST_MEASURE,binding.getBindingName());
    }
    if ((binding.getAggregatOns().size() > 0 && binding.getAggrFunction() == null)) {
      isValid=false;
      if (!suppressException)       throw new DataException(ResourceConstants.INVALID_BINDING_MISSING_AGGR_FUNC,binding.getBindingName());
    }
    if (!isValid)     result.add(binding);
  }
  return result;
}",0.9032571706368496
74190,"/** 
 * Tests extension allowed units.
 * @throws Exception
 */
public void testExtensionAllowedUnits() throws Exception {
  MetaDataDictionary dd=MetaDataDictionary.getInstance();
  ExtensionElementDefn extDefn=(ExtensionElementDefn)dd.getExtension(TESTING_TABLE);
  IPropertyDefn defn=extDefn.getProperty(""String_Node_Str"");
  IChoiceSet set=defn.getAllowedChoices();
  assertNotNull(set.findChoice(""String_Node_Str""));
  assertNotNull(set.findChoice(""String_Node_Str""));
  assertNull(set.findChoice(""String_Node_Str""));
  assertNull(set.findChoice(""String_Node_Str""));
  set=dd.getElement(TABLE).findProperty(""String_Node_Str"").getAllowedChoices();
  assertNotNull(set.findChoice(""String_Node_Str""));
  assertNotNull(set.findChoice(""String_Node_Str""));
  assertNotNull(set.findChoice(""String_Node_Str""));
  assertNotNull(set.findChoice(""String_Node_Str""));
  openDesign(FILE_NAME_4);
  ExtendedItemHandle extendedItem=(ExtendedItemHandle)designHandle.findElement(""String_Node_Str"");
  defn=extendedItem.getPropertyDefn(""String_Node_Str"");
  set=defn.getAllowedChoices();
  assertNotNull(set.findChoice(""String_Node_Str""));
  assertNotNull(set.findChoice(""String_Node_Str""));
  assertNull(set.findChoice(""String_Node_Str""));
  assertNull(set.findChoice(""String_Node_Str""));
}","/** 
 * Tests extension allowed units.
 * @throws Exception
 */
public void testExtensionAllowedUnits() throws Exception {
  MetaDataDictionary dd=MetaDataDictionary.getInstance();
  ExtensionElementDefn extDefn=(ExtensionElementDefn)dd.getExtension(TESTING_TABLE);
  IPropertyDefn defn=extDefn.getProperty(""String_Node_Str"");
  IChoiceSet set=defn.getAllowedUnits();
  assertNotNull(set.findChoice(""String_Node_Str""));
  assertNotNull(set.findChoice(""String_Node_Str""));
  assertNull(set.findChoice(""String_Node_Str""));
  assertNull(set.findChoice(""String_Node_Str""));
  set=dd.getElement(TABLE).findProperty(""String_Node_Str"").getAllowedUnits();
  assertNotNull(set.findChoice(""String_Node_Str""));
  assertNotNull(set.findChoice(""String_Node_Str""));
  assertNotNull(set.findChoice(""String_Node_Str""));
  assertNotNull(set.findChoice(""String_Node_Str""));
  openDesign(FILE_NAME_4);
  ExtendedItemHandle extendedItem=(ExtendedItemHandle)designHandle.findElement(""String_Node_Str"");
  defn=extendedItem.getPropertyDefn(""String_Node_Str"");
  set=defn.getAllowedUnits();
  assertNotNull(set.findChoice(""String_Node_Str""));
  assertNotNull(set.findChoice(""String_Node_Str""));
  assertNull(set.findChoice(""String_Node_Str""));
  assertNull(set.findChoice(""String_Node_Str""));
}",0.9505494505494504
74191,"/** 
 * Tests getting allowed units.
 * @throws MetaDataParserException if any exception
 */
public void testGetAllowedUnits() throws MetaDataParserException {
  loadMetaData(this.getClass().getResourceAsStream(""String_Node_Str""));
  IElementDefn styleDefn=MetaDataDictionary.getInstance().getElement(ReportDesignConstants.STYLE_ELEMENT);
  PropertyDefn propDefn=(ElementPropertyDefn)styleDefn.getProperty(Style.FONT_STYLE_PROP);
  IChoiceSet choices=propDefn.getAllowedChoices();
  assertEquals(2,choices.getChoices().length);
  assertEquals(""String_Node_Str"",choices.getChoices()[0].getName());
  assertEquals(""String_Node_Str"",choices.getChoices()[1].getName());
  propDefn=(ElementPropertyDefn)styleDefn.getProperty(Style.FONT_SIZE_PROP);
  choices=propDefn.getAllowedChoices();
  assertEquals(2,choices.getChoices().length);
  assertEquals(""String_Node_Str"",choices.getChoices()[0].getName());
  assertEquals(""String_Node_Str"",choices.getChoices()[1].getName());
  propDefn=(ElementPropertyDefn)styleDefn.getProperty(Style.BACKGROUND_POSITION_X_PROP);
  choices=propDefn.getAllowedChoices();
  assertEquals(9,choices.getChoices().length);
}","/** 
 * Tests getting allowed units.
 * @throws MetaDataParserException if any exception
 */
public void testGetAllowedUnits() throws MetaDataParserException {
  loadMetaData(this.getClass().getResourceAsStream(""String_Node_Str""));
  IElementDefn styleDefn=MetaDataDictionary.getInstance().getElement(ReportDesignConstants.STYLE_ELEMENT);
  PropertyDefn propDefn=(ElementPropertyDefn)styleDefn.getProperty(Style.FONT_STYLE_PROP);
  IChoiceSet choices=propDefn.getAllowedChoices();
  assertEquals(2,choices.getChoices().length);
  assertEquals(""String_Node_Str"",choices.getChoices()[0].getName());
  assertEquals(""String_Node_Str"",choices.getChoices()[1].getName());
  propDefn=(ElementPropertyDefn)styleDefn.getProperty(Style.FONT_SIZE_PROP);
  choices=propDefn.getAllowedUnits();
  assertEquals(2,choices.getChoices().length);
  assertEquals(""String_Node_Str"",choices.getChoices()[0].getName());
  assertEquals(""String_Node_Str"",choices.getChoices()[1].getName());
  propDefn=(ElementPropertyDefn)styleDefn.getProperty(Style.BACKGROUND_POSITION_X_PROP);
  choices=propDefn.getAllowedUnits();
  assertEquals(9,choices.getChoices().length);
}",0.9912510936132984
74192,"/** 
 * Constructor of MetaDataRetriever
 * @param metaDataProvider
 * @param queryText
 * @throws OdaException
 */
MetaDataRetriever(IMetaDataProvider metaDataProvider,String queryText){
  this.metaDataProvider=metaDataProvider;
  if (this.metaDataProvider != null) {
    try {
      statement=this.metaDataProvider.getConnection().prepareStatement(queryText);
    }
 catch (    SQLException e) {
      logger.log(Level.INFO,e.getMessage(),e);
      return;
    }
    if (statement != null) {
      try {
        this.paramMeta=new ParameterMetaData(statement.getParameterMetaData());
      }
 catch (      SQLException e) {
        try {
          resultset=statement.executeQuery();
        }
 catch (        SQLException e2) {
          logger.log(Level.INFO,e2.getMessage(),e2);
          return;
        }
        try {
          this.paramMeta=new ParameterMetaData(statement.getParameterMetaData());
        }
 catch (        OdaException e2) {
        }
catch (        SQLException e2) {
          logger.log(Level.INFO,e2.getMessage(),e2);
          this.paramMeta=null;
        }
        try {
          this.resultMeta=new ResultSetMetaData(resultset.getMetaData());
        }
 catch (        SQLException e1) {
          logger.log(Level.INFO,e1.getMessage(),e1);
          return;
        }
catch (        OdaException e3) {
        }
      }
catch (      OdaException e) {
      }
      if (this.resultMeta == null) {
        try {
          resultset=statement.executeQuery();
        }
 catch (        SQLException e1) {
          logger.log(Level.INFO,e1.getMessage(),e1);
          return;
        }
        try {
          this.resultMeta=new ResultSetMetaData(resultset.getMetaData());
        }
 catch (        SQLException e) {
          logger.log(Level.INFO,e.getMessage(),e);
          return;
        }
catch (        OdaException e) {
        }
      }
    }
  }
}","/** 
 * @param odaMetaDataProvider
 * @param queryText
 * @param dataSetType
 */
MetaDataRetriever(OdaConnectionProvider odaMetaDataProvider,String queryText,String dataSetType){
  if (odaMetaDataProvider != null) {
    try {
      IConnection con=odaMetaDataProvider.getConnection();
      if (con != null && con.isOpen()) {
        query=con.newQuery(dataSetType);
        try {
          query.prepare(queryText);
          this.paramMeta=query.getParameterMetaData();
        }
 catch (        OdaException ex) {
          this.paramMeta=null;
        }
        this.resultMeta=query.getMetaData();
      }
    }
 catch (    OdaException e) {
      this.resultMeta=null;
      logger.log(Level.INFO,e.getMessage(),e);
      return;
    }
  }
}",0.1098901098901098
74193,"/** 
 * Release all the connection resources
 */
void close(){
  if (this.resultset != null) {
    try {
      this.resultset.close();
    }
 catch (    SQLException e) {
      logger.log(Level.FINER,e.getMessage(),e);
      this.resultset=null;
    }
  }
  if (this.statement != null) {
    try {
      this.statement.close();
    }
 catch (    SQLException e) {
      logger.log(Level.FINER,e.getMessage(),e);
      this.statement=null;
    }
  }
}","/** 
 * Release IQuery object
 */
void close(){
  if (query != null) {
    try {
      query.close();
      query=null;
    }
 catch (    OdaException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
}",0.4017991004497751
74194,"/** 
 * Create Metadata Provider
 */
protected void createMetaDataProvider(){
  if (metaDataProvider == null) {
    metaDataProvider=new JdbcMetaDataProvider(null);
  }
}","/** 
 * Create Metadata Provider
 */
protected void createMetaDataProvider(){
  if (metaDataProvider == null) {
    metaDataProvider=new JdbcMetaDataProvider(null);
  }
  if (this.odaConnectionProvider == null) {
    this.odaConnectionProvider=new OdaConnectionProvider(this.getInitializationDesign().getDataSourceDesign());
  }
}",0.68
74195,"protected void cleanup(){
  if (metaDataProvider != null) {
    metaDataProvider.closeConnection();
  }
}","protected void cleanup(){
  if (metaDataProvider != null) {
    metaDataProvider.closeConnection();
  }
  if (this.odaConnectionProvider != null) {
    this.odaConnectionProvider.closeConnection();
  }
}",0.6818181818181818
74196,"/** 
 * set the page's layout
 */
private void setPageLayout(){
  removeAllAvailableDbObjects();
  enableSchemaComponent(isSchemaSupported);
  setRootElement();
  sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(this.getDataSetDesign().getDataSourceDesign());
  populateAvailableDbObjects();
  try {
    if (metaDataProvider.getConnection() == null || this.getDataSetDesign().getQueryText() == null || this.getDataSetDesign().getQueryText().trim().length() == 0)     return;
    MetaDataRetriever retriever=new MetaDataRetriever(this.metaDataProvider,this.getDataSetDesign().getQueryText());
    IResultSetMetaData rsMeta=retriever.getResultSetMetaData();
    if (rsMeta == null) {
      retriever.close();
      return;
    }
    if (this.getDataSetDesign().getPrimaryResultSet() == null) {
      this.shouldUpdateDataSetDesign=true;
      retriever.close();
      return;
    }
    ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
    if (rsMeta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
      this.shouldUpdateDataSetDesign=true;
      retriever.close();
      return;
    }
    for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
      ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
      if (!(cd.getAttributes().getName().equals(rsMeta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == rsMeta.getColumnType(i + 1))) {
        this.shouldUpdateDataSetDesign=true;
        retriever.close();
        return;
      }
    }
    retriever.close();
  }
 catch (  OdaException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
}","/** 
 * set the page's layout
 */
private void setPageLayout(){
  removeAllAvailableDbObjects();
  enableSchemaComponent(isSchemaSupported);
  setRootElement();
  sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(this.getDataSetDesign().getDataSourceDesign());
  populateAvailableDbObjects();
  try {
    if (metaDataProvider.getConnection() == null || this.getDataSetDesign().getQueryText() == null || this.getDataSetDesign().getQueryText().trim().length() == 0)     return;
    MetaDataRetriever retriever=new MetaDataRetriever(this.odaConnectionProvider,this.getDataSetDesign().getQueryText(),this.getDataSetDesign().getOdaExtensionDataSetId());
    IResultSetMetaData rsMeta=retriever.getResultSetMetaData();
    if (rsMeta == null) {
      retriever.close();
      return;
    }
    if (this.getDataSetDesign().getPrimaryResultSet() == null) {
      this.shouldUpdateDataSetDesign=true;
      retriever.close();
      return;
    }
    ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
    if (rsMeta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
      this.shouldUpdateDataSetDesign=true;
      retriever.close();
      return;
    }
    for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
      ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
      if (!(cd.getAttributes().getName().equals(rsMeta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == rsMeta.getColumnType(i + 1))) {
        this.shouldUpdateDataSetDesign=true;
        retriever.close();
        return;
      }
    }
    retriever.close();
  }
 catch (  OdaException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
}",0.978984238178634
74197,"/** 
 * Initializes the Jdbc related information , used  by this page ( such as the Jdbc Connection , Catalog Name etc )
 * @param curDataSourceHandle
 */
protected void resetJdbcInfo(DataSourceDesign curDataSourceDesign){
  try {
    if (metaDataProvider != null) {
      metaDataProvider.closeConnection();
      metaDataProvider=null;
      createMetaDataProvider();
      if (jdbcConnection != null) {
        jdbcConnection.close();
        jdbcConnection=null;
      }
      jdbcConnection=connectMetadataProvider(metaDataProvider,curDataSourceDesign);
      tableList=null;
      schemaList=null;
      schemaCombo.removeAll();
    }
    if (jdbcConnection != null) {
      isSchemaSupported=metaDataProvider.isSchemaSupported();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.showException(this.getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
}","/** 
 * Initializes the Jdbc related information , used  by this page ( such as the Jdbc Connection , Catalog Name etc )
 * @param curDataSourceHandle
 */
protected void resetJdbcInfo(DataSourceDesign curDataSourceDesign){
  try {
    if (metaDataProvider != null) {
      metaDataProvider.closeConnection();
      metaDataProvider=null;
      createMetaDataProvider();
      if (jdbcConnection != null) {
        jdbcConnection.close();
        jdbcConnection=null;
      }
      jdbcConnection=connectMetadataProvider(metaDataProvider,curDataSourceDesign);
      tableList=null;
      schemaList=null;
      schemaCombo.removeAll();
    }
    if (this.odaConnectionProvider != null) {
      odaConnectionProvider.closeConnection();
      odaConnectionProvider=new OdaConnectionProvider(curDataSourceDesign);
      odaConnectionProvider.connect();
    }
    if (jdbcConnection != null) {
      isSchemaSupported=metaDataProvider.isSchemaSupported();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.showException(this.getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
}",0.8941641938674579
74198,"protected DataSetDesign collectDataSetDesign(DataSetDesign design){
  if (this.getControl() == null || this.getControl().isDisposed())   return design;
  if (design != null && doc != null)   design.setQueryText(doc.get());
  if (this.shouldUpdateDataSetDesign || !formerQueryTxt.equals(design.getQueryText())) {
    MetaDataRetriever retriever=new MetaDataRetriever(this.metaDataProvider,design.getQueryText());
    IResultSetMetaData resultsetMeta=retriever.getResultSetMetaData();
    IParameterMetaData paramMeta=retriever.getParameterMetaData();
    SQLUtility.saveDataSetDesign(design,resultsetMeta,paramMeta);
    formerQueryTxt=design.getQueryText();
    this.shouldUpdateDataSetDesign=false;
    retriever.close();
  }
  return design;
}","protected DataSetDesign collectDataSetDesign(DataSetDesign design){
  if (this.getControl() == null || this.getControl().isDisposed())   return design;
  if (design != null && doc != null)   design.setQueryText(doc.get());
  if (this.shouldUpdateDataSetDesign || !formerQueryTxt.equals(design.getQueryText())) {
    MetaDataRetriever retriever=new MetaDataRetriever(this.odaConnectionProvider,design.getQueryText(),design.getOdaExtensionDataSetId());
    IResultSetMetaData resultsetMeta=retriever.getResultSetMetaData();
    IParameterMetaData paramMeta=retriever.getParameterMetaData();
    SQLUtility.saveDataSetDesign(design,resultsetMeta,paramMeta);
    formerQueryTxt=design.getQueryText();
    this.shouldUpdateDataSetDesign=false;
    retriever.close();
  }
  return design;
}",0.9640287769784172
74199,"/** 
 * Initializes the Jdbc related information , used  by this page ( such as the Jdbc Connection , Catalog Name etc )
 */
protected void initialJdbcInfo(){
  createMetaDataProvider();
  jdbcConnection=connectMetadataProvider(metaDataProvider,this.getDataSetDesign().getDataSourceDesign());
  try {
    if (jdbcConnection != null) {
      isSchemaSupported=metaDataProvider.isSchemaSupported();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.showException(this.getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
}","/** 
 * Initializes the Jdbc related information , used  by this page ( such as the Jdbc Connection , Catalog Name etc )
 */
protected void initialJdbcInfo(){
  createMetaDataProvider();
  jdbcConnection=connectMetadataProvider(metaDataProvider,this.getDataSetDesign().getDataSourceDesign());
  this.odaConnectionProvider.connect();
  try {
    if (jdbcConnection != null) {
      isSchemaSupported=metaDataProvider.isSchemaSupported();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.showException(this.getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
}",0.9657534246575342
74200,"public IParameterMetaData getParameterMetaData() throws OdaException {
  assertNotNull(callStat);
  if (this.cachedParameterMetaData != null)   return this.cachedParameterMetaData;
  int[] positionArray=paramUtil.getParameterPositions();
  List paramMetaList1=this.getCallableParamMetaData();
  List paramMetaList2=new ArrayList();
  for (int i=0; i < positionArray.length; i++) {
    int index=positionArray[i];
    paramMetaList2.add(paramMetaList1.get(index - 1));
  }
  cachedParameterMetaData=new SPParameterMetaData(paramMetaList2);
  return cachedParameterMetaData;
}","public IParameterMetaData getParameterMetaData() throws OdaException {
  assertNotNull(callStat);
  if (this.cachedParameterMetaData != null)   return this.cachedParameterMetaData;
  int[] positionArray=paramUtil.getParameterPositions();
  List paramMetaList1=this.getCallableParamMetaData();
  List paramMetaList2=new ArrayList();
  for (int i=0; i < positionArray.length; i++) {
    int index=positionArray[i];
    if (paramMetaList1.size() >= index)     paramMetaList2.add(paramMetaList1.get(index - 1));
  }
  cachedParameterMetaData=new SPParameterMetaData(paramMetaList2);
  return cachedParameterMetaData;
}",0.9663299663299664
74201,"/** 
 * test setInstanceID in DataExtractionTask with subquery structure
 * @throws Exception 
 */
public void testDataExtractionFromIID_subquery() throws Exception {
  report_design=INPUT_subquery;
  report_document=OUTPUT_subquery;
  try {
    report_document=createReportDocument(report_design,report_document);
    reportDoc=engine.openReportDocument(report_document);
    IDataExtractionTask extractTask=engine.createDataExtractionTask(reportDoc);
    ArrayList iids=findIID(report_document,""String_Node_Str"");
    assertEquals(1,iids.size());
    extractTask.setInstanceID((InstanceID)iids.get(0));
    IExtractionResults result=extractTask.extract();
    if (result != null) {
      String name=null;
      IDataIterator data=result.nextResultIterator();
      if (data != null) {
        data.next();
        name=data.getValue(""String_Node_Str"").toString();
        assertTrue(name.equalsIgnoreCase(""String_Node_Str""));
        if (data.next()) {
          name=data.getValue(""String_Node_Str"").toString();
          assertTrue(name.equalsIgnoreCase(""String_Node_Str""));
        }
      }
      data.close();
    }
 else {
      fail();
    }
    IFilterDefinition[] filterExpression=new IFilterDefinition[1];
    filterExpression[0]=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_EQ,""String_Node_Str"",null));
    extractTask.setFilters(filterExpression);
    result=extractTask.extract();
    if (result != null) {
      String name=null;
      IDataIterator data=result.nextResultIterator();
      if (data != null) {
        data.next();
        name=data.getValue(""String_Node_Str"").toString();
        assertTrue(name.equalsIgnoreCase(""String_Node_Str""));
      }
      data.close();
    }
 else {
      fail();
    }
    iids=findIID(report_document,""String_Node_Str"");
    assertEquals(2,iids.size());
    extractTask.setInstanceID((InstanceID)iids.get(0));
    result=extractTask.extract();
    if (result != null) {
      int num=0;
      IDataIterator data=result.nextResultIterator();
      if (data != null) {
        data.next();
        num=Integer.parseInt(data.getValue(""String_Node_Str"").toString());
        assertEquals(103,num);
        if (data.next()) {
          num=Integer.parseInt(data.getValue(""String_Node_Str"").toString());
          assertEquals(112,num);
        }
      }
      data.close();
    }
 else {
      fail();
    }
    filterExpression=new IFilterDefinition[1];
    filterExpression[0]=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_EQ,""String_Node_Str"",null));
    extractTask.setFilters(filterExpression);
    result=extractTask.extract();
    if (result != null) {
      IDataIterator data=result.nextResultIterator();
      if (data != null) {
        data.next();
        assertEquals(112,data.getValue(""String_Node_Str""));
      }
      data.close();
    }
 else {
      fail();
    }
    extractTask.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}","/** 
 * test setInstanceID in DataExtractionTask with subquery structure
 * @throws Exception 
 */
public void testDataExtractionFromIID_subquery() throws Exception {
  report_design=INPUT_subquery;
  report_document=OUTPUT_subquery;
  try {
    report_document=createReportDocument(report_design,report_document);
    reportDoc=engine.openReportDocument(report_document);
    IDataExtractionTask extractTask=engine.createDataExtractionTask(reportDoc);
    ArrayList iids=findIID(report_document,""String_Node_Str"");
    assertEquals(1,iids.size());
    extractTask.setInstanceID((InstanceID)iids.get(0));
    IExtractionResults result=extractTask.extract();
    if (result != null) {
      String name=null;
      IDataIterator data=result.nextResultIterator();
      if (data != null) {
        data.next();
        name=data.getValue(""String_Node_Str"").toString();
        assertTrue(name.equalsIgnoreCase(""String_Node_Str""));
        if (data.next()) {
          name=data.getValue(""String_Node_Str"").toString();
          assertTrue(name.equalsIgnoreCase(""String_Node_Str""));
        }
      }
      data.close();
    }
 else {
      fail();
    }
    IFilterDefinition[] filterExpression=new IFilterDefinition[1];
    filterExpression[0]=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_EQ,""String_Node_Str"",null));
    extractTask.setFilters(filterExpression);
    result=extractTask.extract();
    if (result != null) {
      String name=null;
      IDataIterator data=result.nextResultIterator();
      if (data != null) {
        data.next();
        name=data.getValue(""String_Node_Str"").toString();
        assertTrue(name.equalsIgnoreCase(""String_Node_Str""));
      }
      data.close();
    }
 else {
      fail();
    }
    iids=findIID(report_document,""String_Node_Str"");
    assertEquals(2,iids.size());
    extractTask.setInstanceID((InstanceID)iids.get(0));
    result=extractTask.extract();
    if (result != null) {
      int num=0;
      IDataIterator data=result.nextResultIterator();
      if (data != null) {
        data.next();
        num=Integer.parseInt(data.getValue(""String_Node_Str"").toString());
        assertEquals(103,num);
        if (data.next()) {
          num=Integer.parseInt(data.getValue(""String_Node_Str"").toString());
          assertEquals(112,num);
        }
      }
      data.close();
    }
 else {
      fail();
    }
    filterExpression=new IFilterDefinition[1];
    filterExpression[0]=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_EQ,""String_Node_Str"",null));
    extractTask.setFilters(filterExpression);
    result=extractTask.extract();
    if (result != null) {
      IDataIterator data=result.nextResultIterator();
      if (data != null) {
        data.next();
        assertEquals(""String_Node_Str"",data.getValue(""String_Node_Str"").toString());
      }
      data.close();
    }
 else {
      fail();
    }
    extractTask.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"");
  }
}",0.994925519724996
74202,"protected CompiledExpression compileDirectColRefExpr(Node parent,Node refNode,Node grandfather,boolean customerChecked,Context context) throws DataException {
  if ((refNode.getType() == Token.GETPROP || refNode.getType() == Token.GETELEM) && (!this.getDataSetMode())) {
    String columnBindingName;
    if (refNode.getFirstChild().getType() == Token.NAME && refNode.getLastChild().getType() == Token.STRING && refNode.getFirstChild().getString().equals(this.ROW_INDICATOR)) {
{
        columnBindingName=refNode.getLastChild().getString();
        if (columnBindingName != null && !columnBindingName.equals(""String_Node_Str"") && !columnBindingName.equals(""String_Node_Str"") && !columnBindingName.equals(""String_Node_Str"")) {
          IBinding binding=this.rsPopulator.getEventHandler().getBinding(columnBindingName);
          if (binding == null)           throw new DataException(ResourceConstants.BAD_DATA_EXPRESSION);
          if (binding.getAggrFunction() == null) {
            IScriptExpression expression=(IScriptExpression)binding.getExpression();
            currentGroupLevelList.add(expression.getGroupName());
            ScriptOrFnNode tree=parse(expression.getText(),context);
            CompiledExpression expr=null;
            if (grandfather != null) {
              if (tree.getFirstChild() == tree.getLastChild()) {
                grandfather.replaceChild(parent,tree.getFirstChild());
                expr=processChild(context,false,tree.getFirstChild(),tree.getFirstChild().getFirstChild(),grandfather);
              }
 else {
                grandfather.replaceChild(grandfather.getFirstChild(),tree.getFirstChild());
                grandfather.replaceChild(grandfather.getLastChild(),tree.getLastChild());
                expr=this.compileComplexExpr(context,tree,false);
              }
            }
 else {
              if (tree.getFirstChild() == tree.getLastChild()) {
                parent.replaceChild(refNode,tree.getFirstChild().getFirstChild());
                expr=processChild(context,false,parent,tree.getFirstChild().getFirstChild(),grandfather);
              }
 else {
                expr=this.compileComplexExpr(context,tree,false);
              }
            }
            currentGroupLevelList.remove(currentGroupLevelList.size() - 1);
            if (expr != null) {
              if ((expr instanceof ColumnReferenceExpression)) {
                ((ColumnReferenceExpression)expr).setDataType(expression.getDataType());
                return expr;
              }
              return expr;
            }
          }
        }
      }
    }
  }
  ColumnReferenceExpression expr=super.compileColRefExpr(refNode,customerChecked);
  if (customerChecked && expr != null) {
    if (expr.getColumnName() != null && expr.getColumnName().trim().length() > 0)     checkAvailableCmpColumn(expr.getColumnName());
  }
  return expr;
}","protected CompiledExpression compileDirectColRefExpr(Node parent,Node refNode,Node grandfather,boolean customerChecked,Context context) throws DataException {
  if ((refNode.getType() == Token.GETPROP || refNode.getType() == Token.GETELEM) && (!this.getDataSetMode())) {
    String columnBindingName;
    if (refNode.getFirstChild().getType() == Token.NAME && refNode.getLastChild().getType() == Token.STRING && refNode.getFirstChild().getString().equals(this.ROW_INDICATOR)) {
{
        columnBindingName=refNode.getLastChild().getString();
        if (columnBindingName != null && !columnBindingName.equals(""String_Node_Str"") && !columnBindingName.equals(""String_Node_Str"") && !columnBindingName.equals(""String_Node_Str"")) {
          IBinding binding=this.rsPopulator.getEventHandler().getBinding(columnBindingName);
          if (binding == null)           throw new DataException(ResourceConstants.BAD_DATA_EXPRESSION);
          if (binding.getAggrFunction() == null) {
            IScriptExpression expression=(IScriptExpression)binding.getExpression();
            currentGroupLevelList.add(expression.getGroupName());
            ScriptOrFnNode tree=parse(expression.getText(),context);
            if (tree.getFirstChild() != null && tree.getFirstChild().getFirstChild() != null && tree.getFirstChild().getFirstChild().getType() != Token.IFNE && tree.getFirstChild().getFirstChild().getType() != Token.IFEQ) {
              CompiledExpression expr=null;
              if (grandfather != null) {
                if (tree.getFirstChild() == tree.getLastChild()) {
                  grandfather.replaceChild(parent,tree.getFirstChild());
                  expr=processChild(context,false,tree.getFirstChild(),tree.getFirstChild().getFirstChild(),grandfather);
                }
 else {
                  grandfather.replaceChild(grandfather.getFirstChild(),tree.getFirstChild());
                  grandfather.replaceChild(grandfather.getLastChild(),tree.getLastChild());
                  expr=this.compileComplexExpr(context,tree,false);
                }
              }
 else {
                if (tree.getFirstChild() == tree.getLastChild()) {
                  parent.replaceChild(refNode,tree.getFirstChild().getFirstChild());
                  expr=processChild(context,false,parent,tree.getFirstChild().getFirstChild(),grandfather);
                }
 else {
                  expr=this.compileComplexExpr(context,tree,false);
                }
              }
              currentGroupLevelList.remove(currentGroupLevelList.size() - 1);
              if (expr != null) {
                if ((expr instanceof ColumnReferenceExpression)) {
                  ((ColumnReferenceExpression)expr).setDataType(expression.getDataType());
                  return expr;
                }
                return expr;
              }
            }
          }
        }
      }
    }
  }
  ColumnReferenceExpression expr=super.compileColRefExpr(refNode,customerChecked);
  if (customerChecked && expr != null) {
    if (expr.getColumnName() != null && expr.getColumnName().trim().length() > 0)     checkAvailableCmpColumn(expr.getColumnName());
  }
  return expr;
}",0.5520317145688801
74203,"/** 
 * Locates the cell which controls the row height for given cell
 * @param crosstabItem
 * @param cell
 * @return
 */
public static CrosstabCellHandle locateRowHeightCell(CrosstabReportItemHandle crosstabItem,CrosstabCellHandle cell){
  if (crosstabItem != null && cell != null && cell.getCrosstab() == crosstabItem) {
    boolean isMeasureHorizontal=MEASURE_DIRECTION_HORIZONTAL.equals(crosstabItem.getMeasureDirection());
    if (cell instanceof AggregationCellHandle) {
      AggregationCellHandle aggCell=(AggregationCellHandle)cell;
      MeasureViewHandle mv=null;
      if (IMeasureViewConstants.DETAIL_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        if (!isMeasureHorizontal) {
          return ((MeasureViewHandle)cell.getContainer()).getCell();
        }
 else {
          return crosstabItem.getMeasure(0).getCell();
        }
      }
      if (!isMeasureHorizontal) {
        mv=(MeasureViewHandle)aggCell.getContainer();
      }
 else {
        mv=crosstabItem.getMeasure(0);
      }
      String rowDimension=aggCell.getDimensionName(ROW_AXIS_TYPE);
      String rowLevel=aggCell.getLevelName(ROW_AXIS_TYPE);
      LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
      DimensionViewHandle rowDimHandle=(DimensionViewHandle)rowLevelHandle.getContainer();
      if (rowLevelHandle.getCubeLevelName().equals(rowLevel) && rowDimHandle.getCubeDimensionName().equals(rowDimension)) {
        return mv.getCell();
      }
      String colDimension=null;
      String colLevel=null;
      LevelViewHandle colLevelHandle=getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE);
      if (colLevelHandle != null) {
        colDimension=((DimensionViewHandle)colLevelHandle.getContainer()).getCubeDimensionName();
        colLevel=colLevelHandle.getCubeLevelName();
      }
      return mv.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
    }
 else     if (cell.getContainer() instanceof MeasureViewHandle) {
      if (!isMeasureHorizontal) {
        return ((MeasureViewHandle)cell.getContainer()).getCell();
      }
 else       if (IMeasureViewConstants.HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
          MeasureViewHandle mv=crosstabItem.getMeasure(i);
          if (mv.getHeader() != null) {
            return mv.getHeader();
          }
        }
      }
 else {
        return crosstabItem.getMeasure(0).getCell();
      }
    }
 else     if (cell.getContainer() instanceof LevelViewHandle) {
      LevelViewHandle lv=(LevelViewHandle)cell.getContainer();
      boolean isRowLevl=ICrosstabReportItemConstants.ROWS_PROP.equals(lv.getContainer().getContainer().getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName());
      if (!isRowLevl) {
        if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
          return getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE).getCell();
        }
        return cell;
      }
      if (crosstabItem.getMeasureCount() == 0) {
        if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
          return cell;
        }
        return getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE).getCell();
      }
      if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        String colDimension=null;
        String colLevel=null;
        String rowDimension=((DimensionViewHandle)lv.getContainer()).getCubeDimensionName();
        String rowLevel=lv.getCubeLevelName();
        LevelViewHandle colLevelHandle=getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE);
        if (colLevelHandle != null) {
          colDimension=((DimensionViewHandle)colLevelHandle.getContainer()).getCubeDimensionName();
          colLevel=colLevelHandle.getCubeLevelName();
        }
        if (isMeasureHorizontal) {
          return crosstabItem.getMeasure(0).getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
        }
 else {
          for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
            CrosstabCellHandle aggCell=crosstabItem.getMeasure(i).getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
            if (aggCell != null) {
              return aggCell;
            }
          }
        }
      }
      return crosstabItem.getMeasure(0).getCell();
    }
 else     if (cell.getContainer() instanceof CrosstabViewHandle) {
      boolean isRowGrandTotal=ICrosstabReportItemConstants.ROWS_PROP.equals(cell.getContainer().getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName());
      if (!isRowGrandTotal) {
        LevelViewHandle colLevelHandle=getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE);
        if (colLevelHandle != null) {
          return colLevelHandle.getCell();
        }
        return cell;
      }
      if (crosstabItem.getMeasureCount() == 0) {
        return cell;
      }
      String colDimension=null;
      String colLevel=null;
      LevelViewHandle colLevelHandle=getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE);
      if (colLevelHandle != null) {
        colDimension=((DimensionViewHandle)colLevelHandle.getContainer()).getCubeDimensionName();
        colLevel=colLevelHandle.getCubeLevelName();
      }
      if (isMeasureHorizontal) {
        return crosstabItem.getMeasure(0).getAggregationCell(null,null,colDimension,colLevel);
      }
 else {
        for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
          CrosstabCellHandle aggCell=crosstabItem.getMeasure(i).getAggregationCell(null,null,colDimension,colLevel);
          if (aggCell != null) {
            return aggCell;
          }
        }
      }
    }
  }
  return null;
}","/** 
 * Locates the cell which controls the row height for given cell
 * @param crosstabItem
 * @param cell
 * @return
 */
public static CrosstabCellHandle locateRowHeightCell(CrosstabReportItemHandle crosstabItem,CrosstabCellHandle cell){
  if (crosstabItem != null && cell != null && cell.getCrosstab() == crosstabItem) {
    boolean isMeasureHorizontal=MEASURE_DIRECTION_HORIZONTAL.equals(crosstabItem.getMeasureDirection());
    if (cell instanceof AggregationCellHandle) {
      AggregationCellHandle aggCell=(AggregationCellHandle)cell;
      MeasureViewHandle mv=null;
      if (IMeasureViewConstants.DETAIL_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        if (!isMeasureHorizontal) {
          return ((MeasureViewHandle)cell.getContainer()).getCell();
        }
 else {
          return crosstabItem.getMeasure(0).getCell();
        }
      }
      if (!isMeasureHorizontal) {
        mv=(MeasureViewHandle)aggCell.getContainer();
      }
 else {
        mv=crosstabItem.getMeasure(0);
      }
      String rowDimension=aggCell.getDimensionName(ROW_AXIS_TYPE);
      String rowLevel=aggCell.getLevelName(ROW_AXIS_TYPE);
      LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
      DimensionViewHandle rowDimHandle=(DimensionViewHandle)rowLevelHandle.getContainer();
      if (rowLevelHandle.getCubeLevelName().equals(rowLevel) && rowDimHandle.getCubeDimensionName().equals(rowDimension)) {
        return mv.getCell();
      }
      String colDimension=null;
      String colLevel=null;
      LevelViewHandle colLevelHandle=getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE);
      if (colLevelHandle != null) {
        colDimension=((DimensionViewHandle)colLevelHandle.getContainer()).getCubeDimensionName();
        colLevel=colLevelHandle.getCubeLevelName();
      }
      return mv.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
    }
 else     if (cell.getContainer() instanceof MeasureViewHandle) {
      if (!isMeasureHorizontal) {
        return ((MeasureViewHandle)cell.getContainer()).getCell();
      }
 else       if (IMeasureViewConstants.HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
          MeasureViewHandle mv=crosstabItem.getMeasure(i);
          if (mv.getHeader() != null) {
            return mv.getHeader();
          }
        }
      }
 else {
        return crosstabItem.getMeasure(0).getCell();
      }
    }
 else     if (cell.getContainer() instanceof LevelViewHandle) {
      LevelViewHandle lv=(LevelViewHandle)cell.getContainer();
      boolean isRowLevl=ICrosstabReportItemConstants.ROWS_PROP.equals(lv.getContainer().getContainer().getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName());
      if (!isRowLevl) {
        if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
          return getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE).getCell();
        }
        return cell;
      }
      if (crosstabItem.getMeasureCount() == 0) {
        if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
          return cell;
        }
        return getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE).getCell();
      }
      if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        String colDimension=null;
        String colLevel=null;
        String rowDimension=((DimensionViewHandle)lv.getContainer()).getCubeDimensionName();
        String rowLevel=lv.getCubeLevelName();
        LevelViewHandle colLevelHandle=getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE);
        if (colLevelHandle != null) {
          colDimension=((DimensionViewHandle)colLevelHandle.getContainer()).getCubeDimensionName();
          colLevel=colLevelHandle.getCubeLevelName();
        }
        if (isMeasureHorizontal) {
          return crosstabItem.getMeasure(0).getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
        }
 else {
          for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
            CrosstabCellHandle aggCell=crosstabItem.getMeasure(i).getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
            if (aggCell != null) {
              return aggCell;
            }
          }
        }
      }
      return crosstabItem.getMeasure(0).getCell();
    }
 else     if (cell.getContainer() instanceof CrosstabViewHandle) {
      boolean isRowGrandTotal=ICrosstabReportItemConstants.ROWS_PROP.equals(cell.getContainer().getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName());
      if (!isRowGrandTotal) {
        LevelViewHandle colLevelHandle=getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE);
        if (colLevelHandle != null) {
          return colLevelHandle.getCell();
        }
        return cell;
      }
      if (crosstabItem.getMeasureCount() == 0) {
        return cell;
      }
      String colDimension=null;
      String colLevel=null;
      LevelViewHandle colLevelHandle=getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE);
      if (colLevelHandle != null) {
        colDimension=((DimensionViewHandle)colLevelHandle.getContainer()).getCubeDimensionName();
        colLevel=colLevelHandle.getCubeLevelName();
      }
      if (isMeasureHorizontal) {
        return crosstabItem.getMeasure(0).getAggregationCell(null,null,colDimension,colLevel);
      }
 else {
        for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
          CrosstabCellHandle aggCell=crosstabItem.getMeasure(i).getAggregationCell(null,null,colDimension,colLevel);
          if (aggCell != null) {
            return aggCell;
          }
        }
      }
    }
 else     if (cell.getContainer() instanceof CrosstabReportItemHandle) {
      LevelViewHandle colLevelHandle=getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE);
      if (colLevelHandle != null) {
        return colLevelHandle.getCell();
      }
      if (isMeasureHorizontal) {
        for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
          MeasureViewHandle mv=crosstabItem.getMeasure(i);
          if (mv.getHeader() != null) {
            return mv.getHeader();
          }
        }
      }
      return cell;
    }
  }
  return null;
}",0.955427288760622
74204,"/** 
 * Locates the cell which controls the column with for given cell
 * @param crosstabItem
 * @param cell
 * @return
 */
public static CrosstabCellHandle locateColumnWidthCell(CrosstabReportItemHandle crosstabItem,CrosstabCellHandle cell){
  if (crosstabItem != null && cell != null && cell.getCrosstab() == crosstabItem) {
    boolean isMeasureHorizontal=MEASURE_DIRECTION_HORIZONTAL.equals(crosstabItem.getMeasureDirection());
    if (cell instanceof AggregationCellHandle) {
      AggregationCellHandle aggCell=(AggregationCellHandle)cell;
      MeasureViewHandle mv=null;
      if (IMeasureViewConstants.DETAIL_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        if (isMeasureHorizontal) {
          return ((MeasureViewHandle)cell.getContainer()).getCell();
        }
 else {
          return crosstabItem.getMeasure(0).getCell();
        }
      }
      if (isMeasureHorizontal) {
        mv=(MeasureViewHandle)aggCell.getContainer();
      }
 else {
        mv=crosstabItem.getMeasure(0);
      }
      String colDimension=aggCell.getDimensionName(COLUMN_AXIS_TYPE);
      String colLevel=aggCell.getLevelName(COLUMN_AXIS_TYPE);
      LevelViewHandle colLevelHandle=getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE);
      DimensionViewHandle colDimHandle=(DimensionViewHandle)colLevelHandle.getContainer();
      if (colLevelHandle.getCubeLevelName().equals(colLevel) && colDimHandle.getCubeDimensionName().equals(colDimension)) {
        return mv.getCell();
      }
      String rowDimension=null;
      String rowLevel=null;
      LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
      if (rowLevelHandle != null) {
        rowDimension=((DimensionViewHandle)rowLevelHandle.getContainer()).getCubeDimensionName();
        rowLevel=rowLevelHandle.getCubeLevelName();
      }
      return mv.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
    }
 else     if (cell.getContainer() instanceof MeasureViewHandle) {
      if (isMeasureHorizontal) {
        return ((MeasureViewHandle)cell.getContainer()).getCell();
      }
 else       if (IMeasureViewConstants.HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
          MeasureViewHandle mv=crosstabItem.getMeasure(i);
          if (mv.getHeader() != null) {
            return mv.getHeader();
          }
        }
      }
 else {
        return crosstabItem.getMeasure(0).getCell();
      }
    }
 else     if (cell.getContainer() instanceof LevelViewHandle) {
      LevelViewHandle lv=(LevelViewHandle)cell.getContainer();
      boolean isRowLevl=ICrosstabReportItemConstants.ROWS_PROP.equals(lv.getContainer().getContainer().getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName());
      if (isRowLevl) {
        if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
          return getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE).getCell();
        }
        return cell;
      }
      if (crosstabItem.getMeasureCount() == 0) {
        if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
          return cell;
        }
        return getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE).getCell();
      }
      if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        String rowDimension=null;
        String rowLevel=null;
        String colDimension=((DimensionViewHandle)lv.getContainer()).getCubeDimensionName();
        String colLevel=lv.getCubeLevelName();
        LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
        if (rowLevelHandle != null) {
          rowDimension=((DimensionViewHandle)rowLevelHandle.getContainer()).getCubeDimensionName();
          rowLevel=rowLevelHandle.getCubeLevelName();
        }
        if (isMeasureHorizontal) {
          for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
            CrosstabCellHandle aggCell=crosstabItem.getMeasure(i).getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
            if (aggCell != null) {
              return aggCell;
            }
          }
        }
 else {
          return crosstabItem.getMeasure(0).getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
        }
      }
      return crosstabItem.getMeasure(0).getCell();
    }
 else     if (cell.getContainer() instanceof CrosstabViewHandle) {
      boolean isRowGrandTotal=ICrosstabReportItemConstants.ROWS_PROP.equals(cell.getContainer().getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName());
      if (isRowGrandTotal) {
        LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
        if (rowLevelHandle != null) {
          return rowLevelHandle.getCell();
        }
        return cell;
      }
      if (crosstabItem.getMeasureCount() == 0) {
        return cell;
      }
      String rowDimension=null;
      String rowLevel=null;
      LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
      if (rowLevelHandle != null) {
        rowDimension=((DimensionViewHandle)rowLevelHandle.getContainer()).getCubeDimensionName();
        rowLevel=rowLevelHandle.getCubeLevelName();
      }
      if (isMeasureHorizontal) {
        for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
          CrosstabCellHandle aggCell=crosstabItem.getMeasure(i).getAggregationCell(rowDimension,rowLevel,null,null);
          if (aggCell != null) {
            return aggCell;
          }
        }
      }
 else {
        return crosstabItem.getMeasure(0).getAggregationCell(rowDimension,rowLevel,null,null);
      }
    }
  }
  return null;
}","/** 
 * Locates the cell which controls the column with for given cell
 * @param crosstabItem
 * @param cell
 * @return
 */
public static CrosstabCellHandle locateColumnWidthCell(CrosstabReportItemHandle crosstabItem,CrosstabCellHandle cell){
  if (crosstabItem != null && cell != null && cell.getCrosstab() == crosstabItem) {
    boolean isMeasureHorizontal=MEASURE_DIRECTION_HORIZONTAL.equals(crosstabItem.getMeasureDirection());
    if (cell instanceof AggregationCellHandle) {
      AggregationCellHandle aggCell=(AggregationCellHandle)cell;
      MeasureViewHandle mv=null;
      if (IMeasureViewConstants.DETAIL_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        if (isMeasureHorizontal) {
          return ((MeasureViewHandle)cell.getContainer()).getCell();
        }
 else {
          return crosstabItem.getMeasure(0).getCell();
        }
      }
      if (isMeasureHorizontal) {
        mv=(MeasureViewHandle)aggCell.getContainer();
      }
 else {
        mv=crosstabItem.getMeasure(0);
      }
      String colDimension=aggCell.getDimensionName(COLUMN_AXIS_TYPE);
      String colLevel=aggCell.getLevelName(COLUMN_AXIS_TYPE);
      LevelViewHandle colLevelHandle=getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE);
      DimensionViewHandle colDimHandle=(DimensionViewHandle)colLevelHandle.getContainer();
      if (colLevelHandle.getCubeLevelName().equals(colLevel) && colDimHandle.getCubeDimensionName().equals(colDimension)) {
        return mv.getCell();
      }
      String rowDimension=null;
      String rowLevel=null;
      LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
      if (rowLevelHandle != null) {
        rowDimension=((DimensionViewHandle)rowLevelHandle.getContainer()).getCubeDimensionName();
        rowLevel=rowLevelHandle.getCubeLevelName();
      }
      return mv.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
    }
 else     if (cell.getContainer() instanceof MeasureViewHandle) {
      if (isMeasureHorizontal) {
        return ((MeasureViewHandle)cell.getContainer()).getCell();
      }
 else       if (IMeasureViewConstants.HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
          MeasureViewHandle mv=crosstabItem.getMeasure(i);
          if (mv.getHeader() != null) {
            return mv.getHeader();
          }
        }
      }
 else {
        return crosstabItem.getMeasure(0).getCell();
      }
    }
 else     if (cell.getContainer() instanceof LevelViewHandle) {
      LevelViewHandle lv=(LevelViewHandle)cell.getContainer();
      boolean isRowLevl=ICrosstabReportItemConstants.ROWS_PROP.equals(lv.getContainer().getContainer().getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName());
      if (isRowLevl) {
        if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
          return getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE).getCell();
        }
        return cell;
      }
      if (crosstabItem.getMeasureCount() == 0) {
        if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
          return cell;
        }
        return getInnerMostLevel(crosstabItem,COLUMN_AXIS_TYPE).getCell();
      }
      if (ILevelViewConstants.AGGREGATION_HEADER_PROP.equals(cell.getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName())) {
        String rowDimension=null;
        String rowLevel=null;
        String colDimension=((DimensionViewHandle)lv.getContainer()).getCubeDimensionName();
        String colLevel=lv.getCubeLevelName();
        LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
        if (rowLevelHandle != null) {
          rowDimension=((DimensionViewHandle)rowLevelHandle.getContainer()).getCubeDimensionName();
          rowLevel=rowLevelHandle.getCubeLevelName();
        }
        if (isMeasureHorizontal) {
          for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
            CrosstabCellHandle aggCell=crosstabItem.getMeasure(i).getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
            if (aggCell != null) {
              return aggCell;
            }
          }
        }
 else {
          return crosstabItem.getMeasure(0).getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
        }
      }
      return crosstabItem.getMeasure(0).getCell();
    }
 else     if (cell.getContainer() instanceof CrosstabViewHandle) {
      boolean isRowGrandTotal=ICrosstabReportItemConstants.ROWS_PROP.equals(cell.getContainer().getModelHandle().getContainerPropertyHandle().getPropertyDefn().getName());
      if (isRowGrandTotal) {
        LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
        if (rowLevelHandle != null) {
          return rowLevelHandle.getCell();
        }
        return cell;
      }
      if (crosstabItem.getMeasureCount() == 0) {
        return cell;
      }
      String rowDimension=null;
      String rowLevel=null;
      LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
      if (rowLevelHandle != null) {
        rowDimension=((DimensionViewHandle)rowLevelHandle.getContainer()).getCubeDimensionName();
        rowLevel=rowLevelHandle.getCubeLevelName();
      }
      if (isMeasureHorizontal) {
        for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
          CrosstabCellHandle aggCell=crosstabItem.getMeasure(i).getAggregationCell(rowDimension,rowLevel,null,null);
          if (aggCell != null) {
            return aggCell;
          }
        }
      }
 else {
        return crosstabItem.getMeasure(0).getAggregationCell(rowDimension,rowLevel,null,null);
      }
    }
 else     if (cell.getContainer() instanceof CrosstabReportItemHandle) {
      LevelViewHandle rowLevelHandle=getInnerMostLevel(crosstabItem,ROW_AXIS_TYPE);
      if (rowLevelHandle != null) {
        return rowLevelHandle.getCell();
      }
      if (!isMeasureHorizontal) {
        for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
          MeasureViewHandle mv=crosstabItem.getMeasure(i);
          if (mv.getHeader() != null) {
            return mv.getHeader();
          }
        }
      }
      return cell;
    }
  }
  return null;
}",0.9553843684801796
74205,"public String getUnitName(String key){
  IChoice choice=ChoiceSetFactory.getElementChoiceSet(getElement(),getProperty()).findChoiceByDisplayName(key);
  if (choice == null) {
    return null;
  }
  return choice.getName();
}","public String getUnitName(String key){
  IChoice choice=ChoiceSetFactory.getDimensionChoiceSet(getElement(),getProperty()).findChoiceByDisplayName(key);
  if (choice == null) {
    return null;
  }
  return choice.getName();
}",0.9644444444444444
74206,"public boolean validateDimensionValue(String value,String unit){
  String unitValue=ChoiceSetFactory.getElementChoiceSet(getElement(),getProperty()).findChoiceByDisplayName(unit).getName();
  boolean val=true;
  try {
    DimensionValue dimensionValue=DimensionValue.parse(value + unitValue);
    if (dimensionValue == null) {
      return true;
    }
    int size=DEUtil.getFontSizeIntValue((DesignElementHandle)DEUtil.getInputFirstElement(input));
    double pointValue=CSSUtil.convertToPoint(dimensionValue,size);
    return pointValue < 1000000;
  }
 catch (  PropertyValueException e1) {
  }
  return val;
}","public boolean validateDimensionValue(String value,String unit){
  String unitValue=ChoiceSetFactory.getDimensionChoiceSet(getElement(),getProperty()).findChoiceByDisplayName(unit).getName();
  boolean val=true;
  try {
    DimensionValue dimensionValue=DimensionValue.parse(value + unitValue);
    if (dimensionValue == null) {
      return true;
    }
    int size=DEUtil.getFontSizeIntValue((DesignElementHandle)DEUtil.getInputFirstElement(input));
    double pointValue=CSSUtil.convertToPoint(dimensionValue,size);
    return pointValue < 1000000;
  }
 catch (  PropertyValueException e1) {
  }
  return val;
}",0.9869494290375204
74207,"public String getDefaultUnit(){
  if (DEUtil.getInputElements(input) == null || DEUtil.getInputSize(input) == 0) {
    return null;
  }
  String unit=null;
  if (!DEUtil.getGroupElementHandle(DEUtil.getInputElements(input)).isSameType()) {
    return null;
  }
  DesignElementHandle handle=(DesignElementHandle)DEUtil.getInputFirstElement(input);
  unit=handle.getPropertyHandle(getProperty()).getDefaultUnit();
  if (unit != null) {
    if (!StringUtil.isBlank(unit)) {
      unit=ChoiceSetFactory.getElementChoiceSet(getElement(),getProperty()).findChoice(unit).getDisplayName();
    }
    return unit;
  }
  return null;
}","public String getDefaultUnit(){
  if (DEUtil.getInputElements(input) == null || DEUtil.getInputSize(input) == 0) {
    return null;
  }
  String unit=null;
  if (!DEUtil.getGroupElementHandle(DEUtil.getInputElements(input)).isSameType()) {
    return null;
  }
  DesignElementHandle handle=(DesignElementHandle)DEUtil.getInputFirstElement(input);
  unit=handle.getPropertyHandle(getProperty()).getDefaultUnit();
  if (unit != null) {
    if (!StringUtil.isBlank(unit)) {
      unit=ChoiceSetFactory.getDimensionChoiceSet(getElement(),getProperty()).findChoice(unit).getDisplayName();
    }
    return unit;
  }
  return null;
}",0.987220447284345
74208,"public String[] getUnitItems(){
  return ChoiceSetFactory.getDisplayNamefromChoiceSet(ChoiceSetFactory.getElementChoiceSet(getElement(),getProperty()));
}","public String[] getUnitItems(){
  return ChoiceSetFactory.getDisplayNamefromChoiceSet(ChoiceSetFactory.getDimensionChoiceSet(getElement(),getProperty()));
}",0.967741935483871
74209,"public String getUnitDisplayName(String key){
  IChoice choice=ChoiceSetFactory.getElementChoiceSet(getElement(),getProperty()).findChoice(key);
  if (choice == null) {
    return null;
  }
  return choice.getDisplayName();
}","public String getUnitDisplayName(String key){
  IChoice choice=ChoiceSetFactory.getDimensionChoiceSet(getElement(),getProperty()).findChoice(key);
  if (choice == null) {
    return null;
  }
  return choice.getDisplayName();
}",0.9646017699115044
74210,"/** 
 * Gets the dimension collection that given property value can selected from them.
 * @param elementName The name of the element.
 * @param property DE Property key.
 * @return The ChoiceSet instance contains all the allowed values.
 */
public static IChoiceSet getDimensionChoiceSet(String elementName,String property){
  IElementPropertyDefn propertyDefn=DEUtil.getMetaDataDictionary().getElement(elementName).getProperty(property);
  if (propertyDefn.getTypeCode() == IPropertyType.DIMENSION_TYPE) {
    return propertyDefn.getAllowedChoices();
  }
  return null;
}","/** 
 * Gets the dimension collection that given property value can selected from them.
 * @param elementName The name of the element.
 * @param property DE Property key.
 * @return The ChoiceSet instance contains all the allowed values.
 */
public static IChoiceSet getDimensionChoiceSet(String elementName,String property){
  IElementPropertyDefn propertyDefn=DEUtil.getMetaDataDictionary().getElement(elementName).getProperty(property);
  if (propertyDefn.getTypeCode() == IPropertyType.DIMENSION_TYPE) {
    return propertyDefn.getAllowedUnits();
  }
  return null;
}",0.9912587412587412
74211,"/** 
 * execute the query in the parent result
 * @param parent parent result set.
 * @param query query to be executed
 * @return result.
 */
IBaseResultSet execute(IBaseResultSet parent,IDataQueryDefinition query,boolean useCache);","/** 
 * execute the query in the parent result
 * @param parent parent result set.
 * @param query query to be executed
 * @return result.
 */
IBaseResultSet execute(IBaseResultSet parent,IDataQueryDefinition query,boolean useCache) throws BirtException ;",0.9549180327868853
74212,"/** 
 * get the sub query result from the current query.
 * @param query
 * @return
 */
protected IBaseResultSet doExecuteSubQuery(IQueryResultSet parent,ISubqueryDefinition subQuery){
}","/** 
 * get the sub query result from the current query.
 * @param query
 * @return
 */
protected IBaseResultSet doExecuteSubQuery(IQueryResultSet parent,ISubqueryDefinition subQuery) throws BirtException {
}",0.9441624365482234
74213,"public IBaseResultSet execute(IBaseResultSet parent,IDataQueryDefinition query,boolean useCache){
  if (query instanceof ISubqueryDefinition) {
    if (parent == null) {
      return null;
    }
 else     if (parent instanceof ICubeResultSet) {
      context.addException(new EngineException(""String_Node_Str"" + ((ISubqueryDefinition)query).getName()));
    }
    return doExecuteSubQuery((IQueryResultSet)parent,(ISubqueryDefinition)query);
  }
 else   if (query instanceof IQueryDefinition) {
    return doExecuteQuery(parent,(IQueryDefinition)query,useCache);
  }
 else   if (query instanceof ICubeQueryDefinition) {
    return doExecuteCube(parent,(ICubeQueryDefinition)query,useCache);
  }
  return null;
}","public IBaseResultSet execute(IBaseResultSet parent,IDataQueryDefinition query,boolean useCache) throws BirtException {
  if (query instanceof ISubqueryDefinition) {
    if (parent == null) {
      return null;
    }
 else     if (parent instanceof ICubeResultSet) {
      context.addException(new EngineException(""String_Node_Str"" + ((ISubqueryDefinition)query).getName()));
    }
    return doExecuteSubQuery((IQueryResultSet)parent,(ISubqueryDefinition)query);
  }
 else   if (query instanceof IQueryDefinition) {
    return doExecuteQuery(parent,(IQueryDefinition)query,useCache);
  }
 else   if (query instanceof ICubeQueryDefinition) {
    return doExecuteCube(parent,(ICubeQueryDefinition)query,useCache);
  }
  throw new EngineException(""String_Node_Str"" + query.getClass().getName());
}",0.9296148738379814
74214,"public IBaseResultSet executeQuery(IBaseResultSet parent,IDataQueryDefinition query,Object handle){
  IDataEngine dataEngine=context.getDataEngine();
  if (query != null) {
    boolean useCache=false;
    if (handle instanceof ReportItemHandle) {
      ReportItemHandle referenceHandle=((ReportItemHandle)handle).getDataBindingReference();
      if (referenceHandle != null) {
        useCache=true;
      }
    }
    IBaseResultSet rset=dataEngine.execute(parent,query,useCache);
    context.setResultSet(rset);
    return rset;
  }
  return null;
}","public IBaseResultSet executeQuery(IBaseResultSet parent,IDataQueryDefinition query,Object handle){
  IDataEngine dataEngine=context.getDataEngine();
  if (query != null) {
    boolean useCache=false;
    if (handle instanceof ReportItemHandle) {
      ReportItemHandle referenceHandle=((ReportItemHandle)handle).getDataBindingReference();
      if (referenceHandle != null) {
        useCache=true;
      }
    }
    try {
      IBaseResultSet rset=dataEngine.execute(parent,query,useCache);
      context.setResultSet(rset);
      return rset;
    }
 catch (    BirtException ex) {
      log.log(Level.SEVERE,ex.getMessage(),ex);
      context.addException(new EngineException(ex.getLocalizedMessage(),ex));
      return null;
    }
  }
  return null;
}",0.8015325670498085
74215,"protected void executeQueries(){
  ExtendedItemDesign extItem=(ExtendedItemDesign)design;
  IDataEngine dataEngine=context.getDataEngine();
  boolean useCache=extItem.useCachedResult();
  IDataQueryDefinition[] queries=extItem.getQueries();
  if (queries != null) {
    IBaseResultSet parent=getParentResultSet();
    rsets=new IBaseResultSet[queries.length];
    for (int i=0; i < rsets.length; i++) {
      rsets[i]=dataEngine.execute(parent,queries[i],useCache);
    }
    context.setResultSets(rsets);
  }
}","protected void executeQueries() throws BirtException {
  ExtendedItemDesign extItem=(ExtendedItemDesign)design;
  IDataEngine dataEngine=context.getDataEngine();
  boolean useCache=extItem.useCachedResult();
  IDataQueryDefinition[] queries=extItem.getQueries();
  if (queries != null) {
    IBaseResultSet parent=getParentResultSet();
    rsets=new IBaseResultSet[queries.length];
    for (int i=0; i < rsets.length; i++) {
      rsets[i]=dataEngine.execute(parent,queries[i],useCache);
    }
    context.setResultSets(rsets);
  }
}",0.978927203065134
74216,"public IContent execute(){
  ExtendedItemDesign extDesign=(ExtendedItemDesign)design;
  IForeignContent extContent=report.createForeignContent();
  setContent(extContent);
  executeQueries();
  initializeContent(extDesign,extContent);
  processAction(extDesign,extContent);
  processBookmark(extDesign,extContent);
  processStyle(extDesign,extContent);
  processVisibility(extDesign,extContent);
  generateContent(extDesign,extContent);
  return extContent;
}","public IContent execute(){
  ExtendedItemDesign extDesign=(ExtendedItemDesign)design;
  IForeignContent extContent=report.createForeignContent();
  setContent(extContent);
  try {
    executeQueries();
  }
 catch (  BirtException ex) {
    logger.log(Level.SEVERE,ex.getMessage(),ex);
    context.addException(design.getHandle(),new EngineException(ex.getLocalizedMessage(),ex));
    return null;
  }
  initializeContent(extDesign,extContent);
  processAction(extDesign,extContent);
  processBookmark(extDesign,extContent);
  processStyle(extDesign,extContent);
  processVisibility(extDesign,extContent);
  generateContent(extDesign,extContent);
  return extContent;
}",0.8145519077196096
74217,"public void doSaveAs(){
  final IReportProvider provider=getProvider();
  if (provider != null) {
    IPath path=provider.getSaveAsPath(getEditorInput());
    if (path == null) {
      return;
    }
    final IEditorInput input=provider.createNewEditorInput(path);
    setInput(input);
    IRunnableWithProgress op=new IRunnableWithProgress(){
      public synchronized final void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        final InvocationTargetException[] iteHolder=new InvocationTargetException[1];
        try {
          IWorkspaceRunnable workspaceRunnable=new IWorkspaceRunnable(){
            public void run(            IProgressMonitor pm) throws CoreException {
              try {
                execute(pm);
              }
 catch (              InvocationTargetException e) {
                iteHolder[0]=e;
              }
catch (              InterruptedException e) {
                throw new OperationCanceledException(e.getMessage());
              }
            }
          }
;
          ResourcesPlugin.getWorkspace().run(workspaceRunnable,ResourcesPlugin.getWorkspace().getRoot(),IResource.NONE,monitor);
        }
 catch (        CoreException e) {
          throw new InvocationTargetException(e);
        }
catch (        OperationCanceledException e) {
          throw new InterruptedException(e.getMessage());
        }
        if (iteHolder[0] != null) {
          throw iteHolder[0];
        }
      }
      public void execute(      final IProgressMonitor monitor) throws CoreException, InvocationTargetException, InterruptedException {
        try {
          if (!input.exists()) {
          }
          doSave(monitor);
        }
 catch (        Exception e) {
          ExceptionHandler.handle(e);
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(getSite().getWorkbenchWindow().getShell()).run(false,true,op);
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
    }
  }
}","public void doSaveAs(){
  final IReportProvider provider=getProvider();
  ModuleHandle model=getModel();
  if (provider != null && model != null) {
    if (model.getUserPropertyDefnHandle(IReportGraphicConstants.REPORT_CONFIG_FILE_NAME) == null) {
      UserPropertyDefn uDefn=new UserPropertyDefn();
      uDefn.setName(IReportGraphicConstants.REPORT_CONFIG_FILE_NAME);
      try {
        model.addUserPropertyDefn(uDefn);
      }
 catch (      UserPropertyException e) {
        if (!UserPropertyException.DESIGN_EXCEPTION_DUPLICATE_NAME.equals(e.getPropertyName())) {
          ExceptionHandler.handle(e);
        }
      }
    }
    IPath path=provider.getSaveAsPath(getEditorInput());
    if (path == null) {
      return;
    }
    final IEditorInput input=provider.createNewEditorInput(path);
    setInput(input);
    IRunnableWithProgress op=new IRunnableWithProgress(){
      public synchronized final void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        final InvocationTargetException[] iteHolder=new InvocationTargetException[1];
        try {
          IWorkspaceRunnable workspaceRunnable=new IWorkspaceRunnable(){
            public void run(            IProgressMonitor pm) throws CoreException {
              try {
                execute(pm);
              }
 catch (              InvocationTargetException e) {
                iteHolder[0]=e;
              }
catch (              InterruptedException e) {
                throw new OperationCanceledException(e.getMessage());
              }
            }
          }
;
          ResourcesPlugin.getWorkspace().run(workspaceRunnable,ResourcesPlugin.getWorkspace().getRoot(),IResource.NONE,monitor);
        }
 catch (        CoreException e) {
          throw new InvocationTargetException(e);
        }
catch (        OperationCanceledException e) {
          throw new InterruptedException(e.getMessage());
        }
        if (iteHolder[0] != null) {
          throw iteHolder[0];
        }
      }
      public void execute(      final IProgressMonitor monitor) throws CoreException, InvocationTargetException, InterruptedException {
        try {
          if (!input.exists()) {
          }
          doSave(monitor);
        }
 catch (        Exception e) {
          ExceptionHandler.handle(e);
        }
      }
    }
;
    try {
      new ProgressMonitorDialog(getSite().getWorkbenchWindow().getShell()).run(false,true,op);
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
    }
  }
}",0.881886293521375
74218,"private void saveFile(final ModuleHandle moduleHandle,final File file,IProgressMonitor monitor){
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public synchronized final void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      try {
        IWorkspaceRunnable workspaceRunnable=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor pm) throws CoreException {
            try {
              execute(pm);
            }
 catch (            CoreException e) {
              throw e;
            }
catch (            IOException e) {
              ExceptionHandler.handle(e);
            }
          }
        }
;
        ResourcesPlugin.getWorkspace().run(workspaceRunnable,ResourcesPlugin.getWorkspace().getRoot(),IResource.NONE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
catch (      OperationCanceledException e) {
        throw new InterruptedException(e.getMessage());
      }
    }
    public void execute(    final IProgressMonitor monitor) throws CoreException, IOException {
      if (file.exists() || file.createNewFile()) {
        FileOutputStream out=new FileOutputStream(file);
        moduleHandle.serialize(out);
        out.close();
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(UIUtil.getDefaultShell()).run(false,true,op);
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}","private void saveFile(final ModuleHandle moduleHandle,final File file,IProgressMonitor monitor){
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public synchronized final void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      try {
        IWorkspaceRunnable workspaceRunnable=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor pm) throws CoreException {
            try {
              execute(pm);
            }
 catch (            CoreException e) {
              throw e;
            }
catch (            IOException e) {
              ExceptionHandler.handle(e);
            }
          }
        }
;
        ResourcesPlugin.getWorkspace().run(workspaceRunnable,ResourcesPlugin.getWorkspace().getRoot(),IResource.NONE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
catch (      OperationCanceledException e) {
        throw new InterruptedException(e.getMessage());
      }
    }
    public void execute(    final IProgressMonitor monitor) throws CoreException, IOException {
      if (file.exists() || file.createNewFile()) {
        String oldConfigName=moduleHandle.getStringProperty(IReportGraphicConstants.REPORT_CONFIG_FILE_NAME);
        String newConfigName=getConfigFileName(file.getAbsolutePath());
        File oldConfigFile=oldConfigName == null ? null : new File(oldConfigName);
        if (newConfigName != null && oldConfigFile != null && oldConfigFile.exists()) {
          copyFile(oldConfigFile,new File(newConfigName));
          try {
            moduleHandle.setStringProperty(IReportGraphicConstants.REPORT_CONFIG_FILE_NAME,newConfigName);
          }
 catch (          SemanticException e) {
            ExceptionHandler.handle(e,true);
          }
        }
        FileOutputStream out=new FileOutputStream(file);
        moduleHandle.serialize(out);
        out.close();
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(UIUtil.getDefaultShell()).run(false,true,op);
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}",0.8171922969578566
74219,"public void execute(final IProgressMonitor monitor) throws CoreException, IOException {
  if (file.exists() || file.createNewFile()) {
    FileOutputStream out=new FileOutputStream(file);
    moduleHandle.serialize(out);
    out.close();
  }
}","public void execute(final IProgressMonitor monitor) throws CoreException, IOException {
  if (file.exists() || file.createNewFile()) {
    String oldConfigName=moduleHandle.getStringProperty(IReportGraphicConstants.REPORT_CONFIG_FILE_NAME);
    String newConfigName=getConfigFileName(file.getAbsolutePath());
    File oldConfigFile=oldConfigName == null ? null : new File(oldConfigName);
    if (newConfigName != null && oldConfigFile != null && oldConfigFile.exists()) {
      copyFile(oldConfigFile,new File(newConfigName));
      try {
        moduleHandle.setStringProperty(IReportGraphicConstants.REPORT_CONFIG_FILE_NAME,newConfigName);
      }
 catch (      SemanticException e) {
        ExceptionHandler.handle(e,true);
      }
    }
    FileOutputStream out=new FileOutputStream(file);
    moduleHandle.serialize(out);
    out.close();
  }
}",0.3897529734675206
74220,"public boolean performFinish(){
  saveAsPath=saveAsPage.getResult();
  if (saveAsPath != null && model instanceof ReportDesignHandle) {
    ReportDesignHandle reportHandle=(ReportDesignHandle)model;
    try {
      reportHandle.setDisplayName(settingPage.getDisplayName());
      reportHandle.setDescription(settingPage.getDescription());
      reportHandle.setIconFile(settingPage.getPreviewImagePath());
      reportHandle.setFileName(saveAsPath.toOSString());
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
  return true;
}","public boolean performFinish(){
  saveAsPath=saveAsPage.getResult();
  if (saveAsPath != null && model instanceof ReportDesignHandle) {
    ReportDesignHandle reportHandle=(ReportDesignHandle)model;
    try {
      String configFileName=FileReportProvider.getConfigFileName(reportHandle.getFileName());
      if (configFileName != null && new File(configFileName).exists()) {
        reportHandle.setStringProperty(IReportGraphicConstants.REPORT_CONFIG_FILE_NAME,configFileName);
      }
      reportHandle.setDisplayName(settingPage.getDisplayName());
      reportHandle.setDescription(settingPage.getDescription());
      reportHandle.setIconFile(settingPage.getPreviewImagePath());
      reportHandle.setFileName(saveAsPath.toOSString());
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
  return true;
}",0.8017057569296375
74221,"/** 
 * To get all the sub expressions' text list of the given expression
 * @param queryDefn, expression
 * @return List
 */
private static List getExprTextList(IBaseExpression expression){
  List textList=new ArrayList();
  if (expression instanceof IScriptExpression) {
    textList.add(((IScriptExpression)expression).getText());
  }
 else   if (expression instanceof IExpressionCollection) {
    List exprList=(List)((IExpressionCollection)expression).getExpressions();
    for (int i=0; i < exprList.size(); i++) {
      IBaseExpression baseExpr=(IBaseExpression)exprList.get(i);
      textList.addAll(getExprTextList(expression));
    }
  }
 else   if (expression instanceof IConditionalExpression) {
    textList.add(((IScriptExpression)((IConditionalExpression)expression).getExpression()).getText());
    textList.addAll(getExprTextList(((IConditionalExpression)expression).getOperand1()));
    textList.addAll(getExprTextList(((IConditionalExpression)expression).getOperand2()));
  }
  return textList;
}","/** 
 * To get all the sub expressions' text list of the given expression
 * @param queryDefn, expression
 * @return List
 */
private static List getExprTextList(IBaseExpression expression){
  List textList=new ArrayList();
  if (expression instanceof IScriptExpression) {
    textList.add(((IScriptExpression)expression).getText());
  }
 else   if (expression instanceof IExpressionCollection) {
    List exprList=(List)((IExpressionCollection)expression).getExpressions();
    for (int i=0; i < exprList.size(); i++) {
      IBaseExpression baseExpr=(IBaseExpression)exprList.get(i);
      textList.addAll(getExprTextList(baseExpr));
    }
  }
 else   if (expression instanceof IConditionalExpression) {
    textList.add(((IScriptExpression)((IConditionalExpression)expression).getExpression()).getText());
    textList.addAll(getExprTextList(((IConditionalExpression)expression).getOperand1()));
    textList.addAll(getExprTextList(((IConditionalExpression)expression).getOperand2()));
  }
  return textList;
}",0.9911242603550297
74222,"/** 
 * Searches extension registry for connection factory defined for driverClass. Returns an  instance of the factory if there is a connection factory for the driver class. Returns null otherwise.
 */
private IConnectionFactory getDriverConnectionFactory(String driverClass) throws OdaException {
}","/** 
 * Searches extension registry for connection factory defined for driverClass. Returns an  instance of the factory if there is a connection factory for the driver class. Returns null otherwise.
 */
public IConnectionFactory getDriverConnectionFactory(String driverClass) throws OdaException {
}",0.9816360601001668
74223,"private void cleanUp() throws Exception {
  shutDownDatabase();
  removeDatabase();
  dbDir=null;
}","private void cleanUp() throws Exception {
  shutdownDerby();
  removeDatabase();
  dbDir=null;
}",0.9435897435897436
74224,"/** 
 * Gets Derby connection URL
 * @param shutdown if true, generate a URL for shutting down DB
 */
public static String getDBUrl(boolean shutdown){
  String url=""String_Node_Str"" + dbDir + ""String_Node_Str""+ SAMPLE_DB_NAME;
  if (shutdown)   url+=""String_Node_Str"";
  return url;
}","/** 
 * Gets Derby connection URL
 */
public static String getDBUrl(){
  return ""String_Node_Str"" + dbDir + ""String_Node_Str""+ SAMPLE_DB_NAME;
}",0.6542056074766355
74225,"protected DataID getDataID(){
  if (parent != null) {
    IQueryResultSet prset=parent.rset;
    if (prset != null) {
      DataSetID dataSetID=prset.getID();
      long position=prset.getRowIndex();
      return new DataID(dataSetID,position);
    }
    IBaseResultSet[] rsets=parent.getQueryResults();
    if ((rsets != null) && (rsets.length > 0) && (rsets[0] != null)) {
      if (rsets[0] instanceof IQueryResultSet) {
        IQueryResultSet rset=(IQueryResultSet)rsets[0];
        DataSetID dataSetID=rset.getID();
        long position=rset.getRowIndex();
        return new DataID(dataSetID,position);
      }
      if (rsets[0] instanceof ICubeResultSet) {
        ICubeResultSet rset=(ICubeResultSet)rsets[0];
        DataSetID dataSetID=rset.getID();
        String cellId=rset.getCellIndex();
        return new DataID(dataSetID,cellId);
      }
    }
  }
  return null;
}","protected DataID getDataID(){
  if (parent != null) {
    IQueryResultSet prset=parent.rset;
    if (prset != null) {
      DataSetID dataSetID=prset.getID();
      long position=prset.getRowIndex();
      if (dataSetID == null) {
        return null;
      }
      return new DataID(dataSetID,position);
    }
    IBaseResultSet[] rsets=parent.getQueryResults();
    if ((rsets != null) && (rsets.length > 0) && (rsets[0] != null)) {
      if (rsets[0] instanceof IQueryResultSet) {
        IQueryResultSet rset=(IQueryResultSet)rsets[0];
        DataSetID dataSetID=rset.getID();
        long position=rset.getRowIndex();
        return new DataID(dataSetID,position);
      }
      if (rsets[0] instanceof ICubeResultSet) {
        ICubeResultSet rset=(ICubeResultSet)rsets[0];
        DataSetID dataSetID=rset.getID();
        String cellId=rset.getCellIndex();
        return new DataID(dataSetID,cellId);
      }
    }
  }
  return null;
}",0.9672131147540984
74226,"protected void generateContent(ExtendedItemDesign item,IForeignContent content){
  ExtendedItemHandle handle=(ExtendedItemHandle)item.getHandle();
  String name=item.getName();
  byte[] generationStatus=null;
  if (itemGeneration != null) {
    itemGeneration.setModelObject(handle);
    itemGeneration.setApplicationClassLoader(context.getApplicationClassLoader());
    itemGeneration.setScriptContext(context.getReportContext());
    IBaseQueryDefinition[] queries=(IBaseQueryDefinition[])((ExtendedItemDesign)item).getQueries();
    itemGeneration.setReportQueries(queries);
    itemGeneration.setExtendedItemContent(content);
    try {
      IBaseResultSet[] resultSets=rsets;
      if (resultSets == null) {
        IBaseResultSet prset=getParentResultSet();
        if (prset != null) {
          int rsetType=prset.getType();
          if (rsetType == IBaseResultSet.QUERY_RESULTSET) {
            resultSets=new IBaseResultSet[1];
            resultSets[0]=new SingleQueryResultSet((IQueryResultSet)prset);
          }
 else           if (rsetType == IBaseResultSet.CUBE_RESULTSET) {
            resultSets=new IBaseResultSet[1];
            resultSets[0]=new SingleCubeResultSet((ICubeResultSet)prset);
          }
        }
      }
      itemGeneration.onRowSets(resultSets);
      if (itemGeneration.needSerialization()) {
        ByteArrayOutputStream out=new ByteArrayOutputStream();
        itemGeneration.serialize(out);
        generationStatus=out.toByteArray();
      }
      itemGeneration.finish();
    }
 catch (    BirtException ex) {
      logger.log(Level.SEVERE,ex.getMessage(),ex);
      context.addException(new EngineException(MessageConstants.EXTENDED_ITEM_GENERATION_ERROR,handle.getExtensionName() + (name != null ? ""String_Node_Str"" + name : ""String_Node_Str""),ex));
    }
  }
 else {
  }
  content.setRawType(IForeignContent.EXTERNAL_TYPE);
  content.setRawValue(generationStatus);
}","protected void generateContent(ExtendedItemDesign item,IForeignContent content){
  ExtendedItemHandle handle=(ExtendedItemHandle)item.getHandle();
  String name=item.getName();
  byte[] generationStatus=null;
  if (itemGeneration != null) {
    IBaseQueryDefinition[] queries=(IBaseQueryDefinition[])((ExtendedItemDesign)item).getQueries();
    ReportItemGenerationInfo info=new ReportItemGenerationInfo();
    info.setModelObject(handle);
    info.setReportContext(context.getReportContext());
    info.setReportQueries(queries);
    info.setExtendedItemContent(content);
    itemGeneration.init(info);
    try {
      IBaseResultSet[] resultSets=rsets;
      if (resultSets == null) {
        IBaseResultSet prset=getParentResultSet();
        if (prset != null) {
          int rsetType=prset.getType();
          if (rsetType == IBaseResultSet.QUERY_RESULTSET) {
            resultSets=new IBaseResultSet[1];
            resultSets[0]=new SingleQueryResultSet((IQueryResultSet)prset);
          }
 else           if (rsetType == IBaseResultSet.CUBE_RESULTSET) {
            resultSets=new IBaseResultSet[1];
            resultSets[0]=new SingleCubeResultSet((ICubeResultSet)prset);
          }
        }
      }
      itemGeneration.onRowSets(resultSets);
      if (itemGeneration.needSerialization()) {
        ByteArrayOutputStream out=new ByteArrayOutputStream();
        itemGeneration.serialize(out);
        generationStatus=out.toByteArray();
      }
      itemGeneration.finish();
    }
 catch (    BirtException ex) {
      logger.log(Level.SEVERE,ex.getMessage(),ex);
      context.addException(new EngineException(MessageConstants.EXTENDED_ITEM_GENERATION_ERROR,handle.getExtensionName() + (name != null ? ""String_Node_Str"" + name : ""String_Node_Str""),ex));
    }
  }
 else {
  }
  content.setRawType(IForeignContent.EXTERNAL_TYPE);
  content.setRawValue(generationStatus);
}",0.836573830793484
74227,"/** 
 * pass the prepared query definition to extended item implementation, so that it can access data.
 */
public void setReportQueries(IBaseQueryDefinition[] queries);","/** 
 * pass the prepared query definition to extended item implementation, so that it can access data.
 * @deprecated implement #init(IReportItemGenerationInfo) instead
 */
public void setReportQueries(IBaseQueryDefinition[] queries);",0.8366336633663366
74228,"/** 
 * passes the class loader used to load user defined classes.
 * @param loader class loader used to load the classes
 */
public abstract void setApplicationClassLoader(ClassLoader loader);","/** 
 * passes the class loader used to load user defined classes.
 * @deprecated implement #init(IReportItemGenerationInfo) instead
 * @param loader class loader used to load the classes
 */
public abstract void setApplicationClassLoader(ClassLoader loader);",0.8539823008849557
74229,"/** 
 * pass the script context to the report item.
 * @param context report context used by java-based script
 */
public abstract void setScriptContext(IReportContext context);","/** 
 * pass the script context to the report item.
 * @deprecated implement #init(IReportItemGenerationInfo) instead
 * @param context report context used by java-based script
 */
public abstract void setScriptContext(IReportContext context);",0.8428571428571429
74230,"/** 
 * Set the content which is transformed from extended item. Extended item can process some properties itself, such as bookmark, style etc.
 * @param content content which is transformed from extended item.
 */
public void setExtendedItemContent(IContent content);","/** 
 * Set the content which is transformed from extended item. Extended item can process some properties itself, such as bookmark, style etc.
 * @deprecated implement #init(IReportItemGenerationInfo) instead
 * @param content content which is transformed from extended item.
 */
public void setExtendedItemContent(IContent content);",0.8903654485049833
74231,"/** 
 * passes a handle to the extended report item model to the extension
 * @param modelHandle a handle to the extended item model object
 */
public abstract void setModelObject(ExtendedItemHandle modelHandle);","/** 
 * passes a handle to the extended report item model to the extension
 * @deprecated implement #init(IReportItemGenerationInfo) instead
 * @param modelHandle a handle to the extended item model object
 */
public abstract void setModelObject(ExtendedItemHandle modelHandle);",0.8653061224489796
74232,"/** 
 * pass the prepared query definition to extended item implementation, so that it can access data.
 */
public void setReportQueries(IBaseQueryDefinition[] queries);","/** 
 * @deprecated implement #init(IReportItemPresentationInfo) instead.pass the prepared query definition to extended item implementation, so that it can access data.
 */
public void setReportQueries(IBaseQueryDefinition[] queries);",0.8387096774193549
74233,"/** 
 * passes the class loader used to load user defined classes.
 * @param loader class loader used to load the classes
 */
public abstract void setApplicationClassLoader(ClassLoader loader);","/** 
 * passes the class loader used to load user defined classes.
 * @deprecated implement #init(IReportItemPresentationInfo) instead.
 * @param loader class loader used to load the classes
 */
public abstract void setApplicationClassLoader(ClassLoader loader);",0.8483516483516483
74234,"/** 
 * pass the script context to the report item.
 * @param context report context used by java-based script
 */
public abstract void setScriptContext(IReportContext context);","/** 
 * pass the script context to the report item.
 * @deprecated implement #init(IReportItemPresentationInfo) instead.
 * @param context report context used by java-based script
 */
public abstract void setScriptContext(IReportContext context);",0.8368794326241135
74235,"/** 
 * passes the dpi (dot per inch) from the rendering environment to the extension. Mostly used for printing.
 * @param dpi the dpi of the rendering environment
 */
public abstract void setResolution(int dpi);","/** 
 * passes the dpi (dot per inch) from the rendering environment to the extension. Mostly used for printing.
 * @deprecated implement #init(IReportItemPresentationInfo) instead.
 * @param dpi the dpi of the rendering environment
 */
public abstract void setResolution(int dpi);",0.8600405679513184
74236,"/** 
 * Set the content which is transformed from extended item. Extended item can process some properties itself, such as bookmark, style etc.
 * @param content content which is transformed from extended item.
 */
public void setExtendedItemContent(IContent content);","/** 
 * Set the content which is transformed from extended item. Extended item can process some properties itself, such as bookmark, style etc.
 * @deprecated implement #init(IReportItemPresentationInfo) instead.
 * @param content content which is transformed from extended item.
 */
public void setExtendedItemContent(IContent content);",0.8859504132231405
74237,"/** 
 * passes a handle to the extended report item model to the extension
 * @param modelHandle a handle to the extended item model object
 */
public abstract void setModelObject(ExtendedItemHandle modelHandle);","/** 
 * passes a handle to the extended report item model to the extension
 * @deprecated implement #init(IReportItemPresentationInfo) instead
 * @param modelHandle a handle to the extended item model object
 */
public abstract void setModelObject(ExtendedItemHandle modelHandle);",0.8617886178861789
74238,"/** 
 * Set dynamic style.
 */
public void setDynamicStyle(IStyle style);","/** 
 * @deprecated implement #init(IReportItemPresentationInfo) instead.Set dynamic style.
 */
public void setDynamicStyle(IStyle style);",0.6919431279620853
74239,"/** 
 * @param ah the HTML action handler used to create a URL based on an action
 */
public abstract void setActionHandler(IHTMLActionHandler ah);","/** 
 * @deprecated implement #init(IReportItemPresentationInfo) instead.
 * @param ah the HTML action handler used to create a URL based on an action
 */
public abstract void setActionHandler(IHTMLActionHandler ah);",0.8099173553719008
74240,"/** 
 * sets the output format, i.e., HTML, PDF, etc.
 * @param outputFormat the output format, i.e., html, pdf, etc.
 */
public abstract void setOutputFormat(String outputFormat);","/** 
 * sets the output format, i.e., HTML, PDF, etc.
 * @deprecated implement #init(IReportItemPresentationInfo) instead.
 * @param outputFormat the output format, i.e., html, pdf, etc.
 */
public abstract void setOutputFormat(String outputFormat);",0.8391608391608392
74241,"/** 
 * passes the locale used in the presentation.
 * @param locale locale
 */
public void setLocale(Locale locale);","/** 
 * passes the locale used in the presentation.
 * @deprecated implement #init(IReportItemPresentationInfo) instead.
 * @param locale locale
 */
public void setLocale(Locale locale);",0.7722772277227723
74242,"/** 
 * sets the image formats that are supported for this output format. Formats are separated by semi-colon. For example, the argument could be JPG;PNG;BMP;SVG
 * @param supportedImageFormats the image formats that the presentation engine could support.
 */
public abstract void setSupportedImageFormats(String supportedImageFormats);","/** 
 * sets the image formats that are supported for this output format. Formats are separated by semi-colon. For example, the argument could be JPG;PNG;BMP;SVG
 * @deprecated implement #init(IReportItemPresentationInfo) instead.
 * @param supportedImageFormats the image formats that the presentation engine could support.
 */
public abstract void setSupportedImageFormats(String supportedImageFormats);",0.6747638326585695
74243,"public void setReportQueries(IBaseQueryDefinition[] queries){
}","public void setReportQueries(IDataQueryDefinition[] queries){
}",0.9523809523809524
74244,"public void setReportQueries(IBaseQueryDefinition[] queries){
}","public void setReportQueries(IDataQueryDefinition[] queries){
}",0.9523809523809524
74245,"protected void generateContent(ExtendedItemDesign item,IForeignContent content){
  ExtendedItemHandle handle=(ExtendedItemHandle)item.getHandle();
  String name=item.getName();
  byte[] generationStatus=null;
  if (itemGeneration != null) {
    IBaseQueryDefinition[] queries=(IBaseQueryDefinition[])((ExtendedItemDesign)item).getQueries();
    ReportItemGenerationInfo info=new ReportItemGenerationInfo();
    info.setModelObject(handle);
    info.setApplicationClassLoader(context.getApplicationClassLoader());
    info.setReportContext(context.getReportContext());
    info.setReportQueries(queries);
    info.setExtendedItemContent(content);
    itemGeneration.init(info);
    try {
      IBaseResultSet[] resultSets=rsets;
      if (resultSets == null) {
        IBaseResultSet prset=getParentResultSet();
        if (prset != null) {
          int rsetType=prset.getType();
          if (rsetType == IBaseResultSet.QUERY_RESULTSET) {
            resultSets=new IBaseResultSet[1];
            resultSets[0]=new SingleQueryResultSet((IQueryResultSet)prset);
          }
 else           if (rsetType == IBaseResultSet.CUBE_RESULTSET) {
            resultSets=new IBaseResultSet[1];
            resultSets[0]=new SingleCubeResultSet((ICubeResultSet)prset);
          }
        }
      }
      itemGeneration.onRowSets(resultSets);
      if (itemGeneration.needSerialization()) {
        ByteArrayOutputStream out=new ByteArrayOutputStream();
        itemGeneration.serialize(out);
        generationStatus=out.toByteArray();
      }
      itemGeneration.finish();
    }
 catch (    BirtException ex) {
      logger.log(Level.SEVERE,ex.getMessage(),ex);
      context.addException(new EngineException(MessageConstants.EXTENDED_ITEM_GENERATION_ERROR,handle.getExtensionName() + (name != null ? ""String_Node_Str"" + name : ""String_Node_Str""),ex));
    }
  }
 else {
  }
  content.setRawType(IForeignContent.EXTERNAL_TYPE);
  content.setRawValue(generationStatus);
}","protected void generateContent(ExtendedItemDesign item,IForeignContent content){
  ExtendedItemHandle handle=(ExtendedItemHandle)item.getHandle();
  String name=item.getName();
  byte[] generationStatus=null;
  if (itemGeneration != null) {
    IDataQueryDefinition[] queries=((ExtendedItemDesign)item).getQueries();
    ReportItemGenerationInfo info=new ReportItemGenerationInfo();
    info.setModelObject(handle);
    info.setApplicationClassLoader(context.getApplicationClassLoader());
    info.setReportContext(context.getReportContext());
    info.setReportQueries(queries);
    info.setExtendedItemContent(content);
    itemGeneration.init(info);
    try {
      IBaseResultSet[] resultSets=rsets;
      if (resultSets == null) {
        IBaseResultSet prset=getParentResultSet();
        if (prset != null) {
          int rsetType=prset.getType();
          if (rsetType == IBaseResultSet.QUERY_RESULTSET) {
            resultSets=new IBaseResultSet[1];
            resultSets[0]=new SingleQueryResultSet((IQueryResultSet)prset);
          }
 else           if (rsetType == IBaseResultSet.CUBE_RESULTSET) {
            resultSets=new IBaseResultSet[1];
            resultSets[0]=new SingleCubeResultSet((ICubeResultSet)prset);
          }
        }
      }
      itemGeneration.onRowSets(resultSets);
      if (itemGeneration.needSerialization()) {
        ByteArrayOutputStream out=new ByteArrayOutputStream();
        itemGeneration.serialize(out);
        generationStatus=out.toByteArray();
      }
      itemGeneration.finish();
    }
 catch (    BirtException ex) {
      logger.log(Level.SEVERE,ex.getMessage(),ex);
      context.addException(new EngineException(MessageConstants.EXTENDED_ITEM_GENERATION_ERROR,handle.getExtensionName() + (name != null ? ""String_Node_Str"" + name : ""String_Node_Str""),ex));
    }
  }
 else {
  }
  content.setRawType(IForeignContent.EXTERNAL_TYPE);
  content.setRawValue(generationStatus);
}",0.9917990773962072
74246,"/** 
 * pass the prepared query definition to extended item implementation, so that it can access data.
 * @deprecated implement #init(IReportItemGenerationInfo) instead
 */
public void setReportQueries(IBaseQueryDefinition[] queries);","/** 
 * pass the prepared query definition to extended item implementation, so that it can access data.
 * @deprecated implement #init(IReportItemGenerationInfo) instead
 */
public void setReportQueries(IDataQueryDefinition[] queries);",0.9829787234042552
74247,public IBaseQueryDefinition[] getReportQueries();,public IDataQueryDefinition[] getReportQueries();,0.9387755102040816
74248,"/** 
 * @deprecated implement #init(IReportItemPresentationInfo) instead.pass the prepared query definition to extended item implementation, so that it can access data.
 */
public void setReportQueries(IBaseQueryDefinition[] queries);","/** 
 * @deprecated implement #init(IReportItemPresentationInfo) instead.pass the prepared query definition to extended item implementation, so that it can access data.
 */
public void setReportQueries(IDataQueryDefinition[] queries);",0.9829059829059827
74249,public IBaseQueryDefinition[] getReportQueries();,public IDataQueryDefinition[] getReportQueries();,0.9387755102040816
74250,"public void setReportQueries(IBaseQueryDefinition[] queries){
  this.queries=queries;
}","public void setReportQueries(IDataQueryDefinition[] queries){
  this.queries=queries;
}",0.9655172413793104
74251,"public void setReportQueries(IBaseQueryDefinition[] queries){
  this.queries=queries;
}","public void setReportQueries(IDataQueryDefinition[] queries){
  this.queries=queries;
}",0.9655172413793104
74252,"public void setReportQueries(IBaseQueryDefinition[] queries){
  this.queries=queries;
}","public void setReportQueries(IDataQueryDefinition[] queries){
  this.queries=queries;
}",0.9655172413793104
74253,"public IBaseQueryDefinition[] getReportQueries(){
  return queries;
}","public IDataQueryDefinition[] getReportQueries(){
  return queries;
}",0.9565217391304348
74254,"public void setReportQueries(IBaseQueryDefinition[] queries){
  this.queries=queries;
}","public void setReportQueries(IDataQueryDefinition[] queries){
  this.queries=queries;
}",0.9655172413793104
74255,"public IBaseQueryDefinition[] getReportQueries(){
  return queries;
}","public IDataQueryDefinition[] getReportQueries(){
  return queries;
}",0.9565217391304348
74256,"/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format,new Boolean(svgFlag));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag));
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    BirtUtility.error(request,renderTask.getErrors());
    renderTask.close();
  }
}","/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    BirtUtility.error(request,renderTask.getErrors());
    renderTask.close();
  }
}",0.9823244552058112
74257,"/** 
 * Render reportlet page.
 * @param out
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format,new Boolean(svgFlag));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag));
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    BirtUtility.error(request,renderTask.getErrors());
    renderTask.close();
  }
}","/** 
 * Render reportlet page.
 * @param out
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag),ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_DESIGNER));
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    BirtUtility.error(request,renderTask.getErrors());
    renderTask.close();
  }
}",0.9828316086547508
74258,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            Object[] values;
            if (valueObj instanceof Object[]) {
              values=(Object[])valueObj;
            }
 else {
              values=new Object[1];
              values[0]=valueObj;
            }
            for (int i=0; i < values.length; i++) {
              String value=DataUtil.getDisplayValue(values[i]);
              if (value != null) {
                link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
              }
 else {
                link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISNULL,URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE)));
              }
            }
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    if (svg != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
          link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
        }
 else {
          bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
          link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
          if (!action.isBookmark())           link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
        }
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            Object[] values;
            if (valueObj instanceof Object[]) {
              values=(Object[])valueObj;
            }
 else {
              values=new Object[1];
              values[0]=valueObj;
            }
            for (int i=0; i < values.length; i++) {
              String value=DataUtil.getDisplayValue(values[i]);
              if (value != null) {
                link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
              }
 else {
                link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISNULL,URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE)));
              }
            }
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    if (svg != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
    }
    if (isDesigner != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
          link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
        }
 else {
          bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
          link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
          if (!action.isBookmark())           link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
        }
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.9840633456950988
74259,"/** 
 * Constructor. This is for runAndRender task.
 * @param locale
 * @param isEmbeddable
 * @param isRtl
 * @param isMasterPageContent
 * @param format
 * @param svg
 */
public ViewerHTMLActionHandler(Locale locale,boolean isRtl,boolean isMasterPageContent,String format,Boolean svg){
  this.locale=locale;
  this.isRtl=isRtl;
  this.isMasterPageContent=isMasterPageContent;
  this.hostFormat=format;
  this.svg=svg;
}","/** 
 * Constructor. This is for runAndRender task.
 * @param locale
 * @param isEmbeddable
 * @param isRtl
 * @param isMasterPageContent
 * @param format
 * @param svg
 * @param isDesigner
 */
public ViewerHTMLActionHandler(Locale locale,boolean isRtl,boolean isMasterPageContent,String format,Boolean svg,String isDesigner){
  this.locale=locale;
  this.isRtl=isRtl;
  this.isMasterPageContent=isMasterPageContent;
  this.hostFormat=format;
  this.svg=svg;
  this.isDesigner=isDesigner;
}",0.9242590559824369
74260,"/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
    String func=""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
 else   if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    String func=""String_Node_Str"" + bookmark + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null) {
      String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
    }
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
    if (!action.isBookmark())     link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
  }
  return link.toString();
}","/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
    String func=""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
 else   if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    String func=""String_Node_Str"" + bookmark + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  if (svg != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
  }
  if (isDesigner != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null) {
      String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
    }
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
    if (!action.isBookmark())     link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
  }
  return link.toString();
}",0.9580439010836344
74261,"/** 
 * Log engine error message in problem view
 * @param request
 * @param errors
 */
public static void error(HttpServletRequest request,List errors){
  boolean isDesigner=ParameterAccessor.isDesigner(request);
  if (!isDesigner)   return;
  String systemId=getSystemId(request);
  if (systemId == null)   return;
  clearErrors(systemId);
  if (errors == null || errors.size() <= 0)   return;
  Iterator it=errors.iterator();
  while (it.hasNext()) {
    Exception e=(Exception)it.next();
    if (e != null) {
      error(systemId,getDetailMessage(e),IBirtConstants.UNKNOWN_POSITION);
    }
  }
}","/** 
 * Log engine error message in problem view
 * @param request
 * @param errors
 */
public static void error(HttpServletRequest request,List errors){
  boolean isDesigner=ParameterAccessor.isDesigner(request);
  if (!isDesigner)   return;
  String systemId=getSystemId(request);
  if (systemId == null)   return;
  String isCleared=(String)request.getAttribute(VIEWER_MARKER_CLEARED);
  if (isCleared == null) {
    clearErrors(systemId);
    request.setAttribute(VIEWER_MARKER_CLEARED,""String_Node_Str"");
  }
  if (errors == null || errors.size() <= 0)   return;
  Iterator it=errors.iterator();
  while (it.hasNext()) {
    Exception e=(Exception)it.next();
    if (e != null) {
      error(systemId,getDetailMessage(e),IBirtConstants.UNKNOWN_POSITION);
    }
  }
}",0.8744525547445255
74262,"/** 
 * @throws Exception
 */
private void preBasic() throws Exception {
  IQueryResults qr=myPreDataEngine.getQueryResults(queryResultID);
  assert(qr.getResultMetaData() != null);
  IResultIterator ri=qr.getResultIterator();
  assert(ri.getResultMetaData() != null);
  checkResult1(ri);
  ri.close();
  myPreDataEngine.shutdown();
}","/** 
 * @throws Exception
 */
private void preBasic() throws Exception {
  IQueryResults qr=myPreDataEngine.getQueryResults(queryResultID);
  assertTrue(qr.getResultMetaData() != null);
  assertTrue(qr.getPreparedQuery() != null);
  IResultIterator ri=qr.getResultIterator();
  assertTrue(ri.getResultMetaData() != null);
  checkResult1(ri);
  ri.close();
  myPreDataEngine.shutdown();
}",0.7850208044382802
74263,"public IPreparedQuery getPreparedQuery(){
  return null;
}","public IPreparedQuery getPreparedQuery(){
  if (this.dummyPreparedQuery == null)   this.dummyPreparedQuery=this.populateDummyPreparedQuery();
  return this.dummyPreparedQuery;
}",0.4680851063829787
74264,"/** 
 * Evaluate a BIRT expression
 * @param expr the expression to be evaluated
 * @param name the file name
 * @param lineNo the line number
 * @return the result if no error exists, otherwise null.
 */
public Object evaluate(String expr,String name,int lineNo){
  if (expr != null) {
    try {
      return scriptContext.eval(expr,name,lineNo);
    }
 catch (    Throwable e) {
      log.log(Level.SEVERE,e.getMessage(),e);
      addException(new EngineException(MessageConstants.SCRIPT_EVALUATION_ERROR,expr,e));
    }
  }
  return null;
}","/** 
 * Evaluate a BIRT expression
 * @param expr the expression to be evaluated
 * @param name the file name
 * @param lineNo the line number
 * @return the result if no error exists, otherwise null.
 */
public Object evaluate(String expr,String name,int lineNo){
  if (expr != null) {
    try {
      return scriptContext.eval(expr,name,lineNo);
    }
 catch (    Throwable e) {
      log.log(Level.SEVERE,e.getMessage(),e);
      addException(new EngineException(MessageConstants.SCRIPT_EVALUATION_ERROR,new String[]{expr,e.getMessage()},e));
    }
  }
  return null;
}",0.9668161434977578
74265,"public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (isGrandTotal(binding) && isSort)           continue;
          if (this.getReferencedMeasureName(binding.getExpression()) != null) {
            if (this.isLeafLevel(cubeDefn,target) && binding.getAggrFunction() == null) {
              result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.MEASURE_TYPE));
              continue;
            }
 else             if (isGrandTotal(binding)) {
              result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
              continue;
            }
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1) {
              if (fromSameEdge(aggrOns,cubeDefn))               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
 else               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
            }
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              int candidateEdge=getAxisQualifierEdgeType(dimLevel,cubeDefn);
              if (candidateEdge != -1) {
                if (getAxisQualifierLevel(next,cubeDefn.getEdge(candidateEdge)) != null)                 result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
              }
            }
            break;
          }
        }
        continue;
      }
      result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.DIMENSION_TYPE));
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","/** 
 * @param cubeDefn
 * @return
 * @throws DataException
 */
private List getReferableBindings(ICubeQueryDefinition cubeDefn) throws DataException {
  List result=new ArrayList();
  List bindings=cubeDefn.getBindings();
  for (int i=0; i < bindings.size(); i++) {
    IBinding binding=(IBinding)bindings.get(i);
    if (getReferencedMeasureName(binding.getExpression()) != null) {
      List aggrOns=binding.getAggregatOns();
      if (aggrOns.size() == 0 && !isGrandTotal(binding)) {
        result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.MEASURE_TYPE));
      }
 else {
        if (fromSameEdge(aggrOns,cubeDefn)) {
          result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
        }
 else         result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
      }
    }
  }
  return result;
}",0.2140371229698376
74266,"public BlankResultSet(IQueryResultSet rset){
  this.rset=rset;
}","public BlankResultSet(){
}",0.5777777777777777
74267,"public void close(){
  if (rset != null) {
    rset.close();
  }
}","public void close(){
}",0.5
74268,"/** 
 * Execute a listint and create the contents. List create a serials of contents. The execution process is: <li> create an container which will contain all the contents it creates. <li> push it into the stack <li> open query <li> process action, bookmark, style and visibility <li> call the onCreate if necessary <li> call emitter to start the list <li> access the query <li> call emitter to end the list <li> close the query. <li> pop up the container.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExecutor#load(org.eclipse.birt.report.engine.ir.ReportItemDesign,org.eclipse.birt.report.engine.emitter.IReportEmitter)
 */
public IContent execute(){
  ListItemDesign listDesign=(ListItemDesign)getDesign();
  IListContent listContent=report.createListContent();
  setContent(listContent);
  executeQuery();
  initializeContent(listDesign,listContent);
  processAction(listDesign,listContent);
  processBookmark(listDesign,listContent);
  processStyle(listDesign,listContent);
  processVisibility(listDesign,listContent);
  if (context.isInFactory()) {
    handleOnCreate(listContent);
  }
  startTOCEntry(listContent);
  boolean showIfBlank=""String_Node_Str"".equalsIgnoreCase(content.getStyle().getShowIfBlank());
  if (showIfBlank && rsetEmpty) {
    createQueryForShowIfBlank();
  }
  prepareToExecuteChildren();
  return listContent;
}","/** 
 * Execute a listint and create the contents. List create a serials of contents. The execution process is: <li> create an container which will contain all the contents it creates. <li> push it into the stack <li> open query <li> process action, bookmark, style and visibility <li> call the onCreate if necessary <li> call emitter to start the list <li> access the query <li> call emitter to end the list <li> close the query. <li> pop up the container.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExecutor#load(org.eclipse.birt.report.engine.ir.ReportItemDesign,org.eclipse.birt.report.engine.emitter.IReportEmitter)
 */
public IContent execute(){
  ListItemDesign listDesign=(ListItemDesign)getDesign();
  IListContent listContent=report.createListContent();
  setContent(listContent);
  executeQuery();
  initializeContent(listDesign,listContent);
  processAction(listDesign,listContent);
  processBookmark(listDesign,listContent);
  processStyle(listDesign,listContent);
  processVisibility(listDesign,listContent);
  if (context.isInFactory()) {
    handleOnCreate(listContent);
  }
  startTOCEntry(listContent);
  if (rsetEmpty) {
    processEmptyQuery();
  }
  prepareToExecuteChildren();
  return listContent;
}",0.9429012345679012
74269,"protected void createQueryForShowIfBlank(){
  IQueryResultSet blankRset=new BlankResultSet(rset);
  rset=blankRset;
  context.setResultSet(rset);
  rsetEmpty=false;
}","protected void createQueryForShowIfBlank(){
  IQueryResultSet blankRset=new BlankResultSet();
  rset=blankRset;
  context.setResultSet(rset);
  rsetEmpty=false;
}",0.9878048780487804
74270,"public IContent execute(){
  TableItemDesign tableDesign=(TableItemDesign)getDesign();
  ITableContent tableContent=report.createTableContent();
  setContent(tableContent);
  executeQuery();
  initializeContent(tableDesign,tableContent);
  processStyle(tableDesign,tableContent);
  processVisibility(tableDesign,tableContent);
  processBookmark(tableDesign,tableContent);
  processAction(tableDesign,tableContent);
  for (int i=0; i < tableDesign.getColumnCount(); i++) {
    ColumnDesign columnDesign=tableDesign.getColumn(i);
    Column column=new Column(report);
    column.setGenerateBy(columnDesign);
    InstanceID iid=new InstanceID(null,columnDesign.getID(),null);
    column.setInstanceID(iid);
    processColumnVisibility(columnDesign,column);
    tableContent.addColumn(column);
  }
  if (context.isInFactory()) {
    handleOnCreate(tableContent);
  }
  startTOCEntry(tableContent);
  boolean showIfBlank=""String_Node_Str"".equalsIgnoreCase(content.getStyle().getShowIfBlank());
  if (showIfBlank && rsetEmpty) {
    createQueryForShowIfBlank();
  }
  prepareToExecuteChildren();
  return tableContent;
}","public IContent execute(){
  TableItemDesign tableDesign=(TableItemDesign)getDesign();
  ITableContent tableContent=report.createTableContent();
  setContent(tableContent);
  executeQuery();
  initializeContent(tableDesign,tableContent);
  processStyle(tableDesign,tableContent);
  processVisibility(tableDesign,tableContent);
  processBookmark(tableDesign,tableContent);
  processAction(tableDesign,tableContent);
  for (int i=0; i < tableDesign.getColumnCount(); i++) {
    ColumnDesign columnDesign=tableDesign.getColumn(i);
    Column column=new Column(report);
    column.setGenerateBy(columnDesign);
    InstanceID iid=new InstanceID(null,columnDesign.getID(),null);
    column.setInstanceID(iid);
    processColumnVisibility(columnDesign,column);
    tableContent.addColumn(column);
  }
  if (context.isInFactory()) {
    handleOnCreate(tableContent);
  }
  startTOCEntry(tableContent);
  if (rsetEmpty) {
    processEmptyQuery();
  }
  prepareToExecuteChildren();
  return tableContent;
}",0.9203791469194312
74271,"protected void doExecute() throws Exception {
  executeQuery();
  boolean showIfBlank=""String_Node_Str"".equalsIgnoreCase(content.getStyle().getShowIfBlank());
  if (showIfBlank && rsetEmpty) {
    createQueryForShowIfBlank();
  }
}","protected void doExecute() throws Exception {
  executeQuery();
  if (rsetEmpty) {
    processEmptyQuery();
  }
}",0.6046511627906976
74272,"protected void createQueryForShowIfBlank(){
  IBaseResultSet[] blankRsets=new IBaseResultSet[1];
  blankRsets[0]=new BlankResultSet((IQueryResultSet)rsets[0]);
  rsets=blankRsets;
  context.setResultSets(rsets);
  rsetEmpty=false;
}","protected void createQueryForShowIfBlank(){
  IBaseResultSet[] blankRsets=new IBaseResultSet[1];
  blankRsets[0]=new BlankResultSet();
  rsets=blankRsets;
  context.setResultSets(rsets);
  rsetEmpty=false;
}",0.9430523917995444
74273,"protected void doExecute() throws Exception {
  TableItemDesign tableDesign=(TableItemDesign)design;
  ITableContent tableContent=(ITableContent)content;
  executeQuery();
  if (tableContent.getColumnCount() == 0) {
    for (int i=0; i < tableDesign.getColumnCount(); i++) {
      ColumnDesign columnDesign=tableDesign.getColumn(i);
      Column column=new Column(report);
      column.setGenerateBy(columnDesign);
      InstanceID iid=new InstanceID(null,columnDesign.getID(),null);
      column.setInstanceID(iid);
      tableContent.addColumn(column);
    }
  }
 else {
    int columnCount=tableContent.getColumnCount();
    for (int i=0; i < columnCount; i++) {
      Column column=(Column)tableContent.getColumn(i);
      InstanceID iid=column.getInstanceID();
      if (iid != null) {
        long componentId=iid.getComponentID();
        ReportElementDesign element=report.getDesign().getReportItemByID(componentId);
        column.setGenerateBy(element);
      }
    }
  }
  boolean showIfBlank=""String_Node_Str"".equalsIgnoreCase(content.getStyle().getShowIfBlank());
  if (showIfBlank && rsetEmpty) {
    createQueryForShowIfBlank();
  }
}","protected void doExecute() throws Exception {
  TableItemDesign tableDesign=(TableItemDesign)design;
  ITableContent tableContent=(ITableContent)content;
  executeQuery();
  if (tableContent.getColumnCount() == 0) {
    for (int i=0; i < tableDesign.getColumnCount(); i++) {
      ColumnDesign columnDesign=tableDesign.getColumn(i);
      Column column=new Column(report);
      column.setGenerateBy(columnDesign);
      InstanceID iid=new InstanceID(null,columnDesign.getID(),null);
      column.setInstanceID(iid);
      tableContent.addColumn(column);
    }
  }
 else {
    int columnCount=tableContent.getColumnCount();
    for (int i=0; i < columnCount; i++) {
      Column column=(Column)tableContent.getColumn(i);
      InstanceID iid=column.getInstanceID();
      if (iid != null) {
        long componentId=iid.getComponentID();
        ReportElementDesign element=report.getDesign().getReportItemByID(componentId);
        column.setGenerateBy(element);
      }
    }
  }
  if (rsetEmpty) {
    processEmptyQuery();
  }
}",0.9229357798165138
74274,"/** 
 * exit the scripting context
 */
public void exit(){
  if (context != null) {
    Context.exit();
    context=null;
    compiledScripts.clear();
  }
}","/** 
 * exit the scripting context
 */
public void exit(){
  if (context != null) {
    Context.exit();
    context=null;
  }
}",0.8975265017667845
74275,"/** 
 * evaluates a script
 */
public Object eval(String source,String name,int lineNo){
  assert(this.context != null);
  Script script=(Script)compiledScripts.get(source);
  if (script == null) {
    script=context.compileString(source,name,lineNo,null);
    compiledScripts.put(source,script);
  }
  Object value=script.exec(context,scope);
  return jsToJava(value);
}","/** 
 * evaluates a script
 */
public Object eval(ScriptExpression expr){
  assert(this.context != null);
  if (null == expr) {
    return null;
  }
  Script script=expr.getCompiledScript();
  if (script == null) {
    script=context.compileString(expr.getScriptText(),expr.getId(),expr.getLineNumber(),null);
    expr.setCompiledScript(script);
  }
  Object value=script.exec(context,scope);
  return jsToJava(value);
}",0.3843236409608091
74276,"private void handleOnPrepare(RowHandle handle){
  boolean hasJavaScript=(handle.getOnPrepare() != null) && (handle.getOnPrepare().length() != 0);
  boolean hasJavaCode=(handle.getEventHandlerClass() != null) && (handle.getEventHandlerClass().length() != 0);
  if (!hasJavaScript && !hasJavaCode)   return;
  executionContext.pushHandle(handle);
  if (hasJavaScript) {
    IDesignElement element=SimpleElementFactory.getInstance().getElement(handle);
    try {
      if (element != null) {
        executionContext.newScope(element);
      }
      if (handle.getOnPrepare() != null) {
        executionContext.evaluate((String)handle.getOnPrepare());
      }
      return;
    }
  finally {
      if (element != null) {
        executionContext.exitScope();
      }
    }
  }
  try {
    RowScriptExecutor.handleOnPrepare(handle,executionContext);
  }
  finally {
    executionContext.popHandle();
  }
}","private void handleOnPrepare(RowHandle handle){
  boolean hasJavaScript=(handle.getOnPrepare() != null) && (handle.getOnPrepare().length() != 0);
  boolean hasJavaCode=(handle.getEventHandlerClass() != null) && (handle.getEventHandlerClass().length() != 0);
  if (!hasJavaScript && !hasJavaCode)   return;
  executionContext.pushHandle(handle);
  if (hasJavaScript) {
    IDesignElement element=SimpleElementFactory.getInstance().getElement(handle);
    try {
      if (element != null) {
        executionContext.newScope(element);
      }
      if (handle.getOnPrepare() != null) {
        String scriptText=handle.getOnPrepare();
        if (null != scriptText) {
          String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ITableRowModel.ON_PREPARE_METHOD));
          ScriptExpression expr=new ScriptExpression(scriptText,id);
          executionContext.evaluate(expr);
        }
      }
      return;
    }
  finally {
      if (element != null) {
        executionContext.exitScope();
      }
    }
  }
  try {
    RowScriptExecutor.handleOnPrepare(handle,executionContext);
  }
  finally {
    executionContext.popHandle();
  }
}",0.8505859375
74277,"/** 
 * @param cubeDefn
 * @return
 * @throws DataException
 */
private List getReferableBindings(ICubeQueryDefinition cubeDefn) throws DataException {
  List result=new ArrayList();
  List bindings=cubeDefn.getBindings();
  for (int i=0; i < bindings.size(); i++) {
    IBinding binding=(IBinding)bindings.get(i);
    if (getReferencedMeasureName(binding.getExpression()) != null) {
      List aggrOns=binding.getAggregatOns();
      if (aggrOns.size() == 0 && !isGrandTotal(binding)) {
        result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.MEASURE_TYPE));
      }
 else {
        if (fromSameEdge(aggrOns,cubeDefn)) {
          result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
        }
 else         result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
      }
    }
  }
  return result;
}","public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (isGrandTotal(binding) && isSort)           continue;
          if (this.getReferencedMeasureName(binding.getExpression()) != null) {
            if (this.isLeafLevel(cubeDefn,target) && binding.getAggrFunction() == null) {
              result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.MEASURE_TYPE));
              continue;
            }
 else             if (isGrandTotal(binding)) {
              result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
              continue;
            }
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1) {
              if (fromSameEdge(aggrOns,cubeDefn))               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
 else               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
            }
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              int candidateEdge=getAxisQualifierEdgeType(dimLevel,cubeDefn);
              if (candidateEdge != -1) {
                if (getAxisQualifierLevel(next,cubeDefn.getEdge(candidateEdge)) != null)                 result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
              }
            }
            break;
          }
        }
        continue;
      }
      result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.DIMENSION_TYPE));
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.2790023201856148
74278,"protected void writeColumns(ITableContent table){
  for (int i=0; i < table.getColumnCount(); i++) {
    IColumn column=table.getColumn(i);
    if (isColumnHidden(column)) {
      continue;
    }
    writer.openTag(HTMLTags.TAG_COL);
    if (enableAgentStyleEngine) {
      String styleClass=column.getStyleClass();
      setStyleName(styleClass);
    }
    StringBuffer styleBuffer=new StringBuffer();
    htmlEmitter.buildColumnStyle(column,styleBuffer);
    writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    htmlEmitter.handleColumnAlign(column);
    if (enableMetadata) {
      InstanceID iid=column.getInstanceID();
      if (iid != null) {
        writer.attribute(""String_Node_Str"",iid.toString());
      }
    }
    writer.closeNoEndTag();
  }
}","protected void writeColumns(ITableContent table){
  for (int i=0; i < table.getColumnCount(); i++) {
    IColumn column=table.getColumn(i);
    writer.openTag(HTMLTags.TAG_COL);
    if (enableAgentStyleEngine) {
      String styleClass=column.getStyleClass();
      setStyleName(styleClass);
    }
    StringBuffer styleBuffer=new StringBuffer();
    htmlEmitter.buildColumnStyle(column,styleBuffer);
    writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    htmlEmitter.handleColumnAlign(column);
    if (enableMetadata) {
      InstanceID iid=column.getInstanceID();
      if (iid != null) {
        writer.attribute(""String_Node_Str"",iid.toString());
      }
    }
    writer.closeNoEndTag();
  }
}",0.96221322537112
74279,"public TableContentLayout(ITableContent tableContent,String format,HTMLLayoutContext context){
  this.format=format;
  this.context=context;
  this.colCount=tableContent.getColumnCount();
  for (int i=0; i < colCount; i++) {
    IColumn column=tableContent.getColumn(i);
    if (isColumnHidden(column)) {
      hiddenList.add(new Integer(i));
    }
  }
  this.realColCount=colCount - hiddenList.size();
}","public TableContentLayout(ITableContent tableContent,String format,HTMLLayoutContext context){
  this.format=format;
  this.context=context;
  this.tableContent=tableContent;
  this.colCount=tableContent.getColumnCount();
  this.adjustedColumnIds=new int[colCount];
  for (int i=0; i < colCount; i++) {
    int hiddenColumnCount=hiddenColumnIds.size();
    IColumn column=tableContent.getColumn(i);
    if (isColumnHidden(column)) {
      if (hiddenColumnCount == 0) {
        leastColumnIdToBeAjusted=i;
        hasHiddenColumns=true;
      }
      hiddenColumnIds.add(new Integer(i));
    }
 else {
      visibleColumns.add(column);
    }
    adjustedColumnIds[i]=i - hiddenColumnCount;
  }
  if (hasHiddenColumns) {
    this.wrappedTable=new TableContentWrapper(tableContent,visibleColumns);
  }
  this.realColCount=visibleColumns.size();
}",0.5838011226944667
74280,"private boolean isColumnHidden(IColumn column){
  String formats=column.getVisibleFormat();
  if (formats != null && (formats.indexOf(this.format) >= 0 || formats.indexOf(BIRTConstants.BIRT_ALL_VALUE) >= 0)) {
    return true;
  }
  return false;
}","private boolean isColumnHidden(IColumn column){
  return LayoutUtil.isHiddenByVisibility(column,format);
}",0.4011299435028249
74281,"public int getColumnCount(){
  return tableContent.getColumnCount();
}","public int getColumnCount(){
  return columns.size();
}",0.768
74282,"/** 
 * constructor
 * @param item the table deign
 */
public TableContentWrapper(ITableContent content){
  super(content);
  tableContent=content;
}","/** 
 * constructor
 * @param item the table deign
 */
public TableContentWrapper(ITableContent content,List columns){
  super(content);
  this.tableContent=content;
  this.columns=columns;
}",0.8764705882352941
74283,"public IColumn getColumn(int index){
  return tableContent.getColumn(index);
}","public IColumn getColumn(int index){
  return (IColumn)columns.get(index);
}",0.8051948051948052
74284,"static private boolean isHiddenByVisibility(IColumn column,String format){
  String columnFormats=column.getVisibleFormat();
  if (columnFormats != null) {
    if (contains(columnFormats,EngineIRConstants.FORMAT_TYPE_VIEWER) || contains(columnFormats,BIRTConstants.BIRT_ALL_VALUE) || contains(columnFormats,format)) {
      return true;
    }
  }
  return false;
}","public static boolean isHiddenByVisibility(IColumn column,String format){
  String columnFormats=column.getVisibleFormat();
  if (columnFormats != null) {
    if (contains(columnFormats,EngineIRConstants.FORMAT_TYPE_VIEWER) || contains(columnFormats,BIRTConstants.BIRT_ALL_VALUE) || contains(columnFormats,format)) {
      return true;
    }
  }
  return false;
}",0.9656121045392022
74285,"protected boolean handleVisibility(){
  boolean ret=super.handleVisibility();
  if (ret && ((HTMLTableLayoutNoNestEmitter)emitter).isLayoutStarted()) {
    emitter.startRow((IRowContent)content);
    emitter.endRow((IRowContent)content);
  }
  return ret;
}","protected boolean handleVisibility(){
  boolean ret=super.handleVisibility();
  if (ret && ((HTMLTableLayoutEmitter)emitter).isLayoutStarted()) {
    emitter.startRow((IRowContent)content);
    emitter.endRow((IRowContent)content);
  }
  return ret;
}",0.9881889763779528
74286,"public void initialize(HTMLAbstractLM parent,IContent content,IReportItemExecutor executor,IContentEmitter emitter){
  tableEmitter=new HTMLTableLayoutNoNestEmitter(emitter,context);
  super.initialize(parent,content,executor,tableEmitter);
  isFirstLayout=true;
}","public void initialize(HTMLAbstractLM parent,IContent content,IReportItemExecutor executor,IContentEmitter emitter){
  tableEmitter=new HTMLTableLayoutEmitter(emitter,context);
  super.initialize(parent,content,executor,tableEmitter);
  isFirstLayout=true;
}",0.9885057471264368
74287,"public static Object getAdapter(Object adaptableObject,Class adatperType){
  Set adapters=getAdapters(adaptableObject);
  if (adapters == null)   return null;
  List adapterObjects=new ArrayList();
  l:   for (Iterator iter=adapters.iterator(); iter.hasNext(); ) {
    ElementAdapter adapter=(ElementAdapter)iter.next();
    if (adapter.getExpression() != null) {
      EvaluationContext context=new EvaluationContext(null,adaptableObject);
      context.setAllowPluginActivation(true);
      try {
        if (adapter.getExpression().evaluate(context) != EvaluationResult.TRUE)         continue l;
      }
 catch (      CoreException e) {
      }
    }
    Object obj=adapter.getAdater(adaptableObject);
    if (obj != null && adatperType.isAssignableFrom(obj.getClass())) {
      adapterObjects.add(obj);
    }
  }
  return adapterObjects.size() > 0 ? Proxy.newProxyInstance(adatperType.getClassLoader(),new Class[]{adatperType},new ElementAdapterInvocationHandler(adapterObjects)) : null;
}","public static Object getAdapter(Object adaptableObject,Class adatperType){
  List adapterObjects=getAdapterList(adaptableObject,adatperType);
  return (adapterObjects != null && adapterObjects.size() > 0) ? Proxy.newProxyInstance(adatperType.getClassLoader(),new Class[]{adatperType},new ElementAdapterInvocationHandler(adapterObjects)) : null;
}",0.3928304705003734
74288,"/** 
 * get the sub query result from the current query.
 * @param query
 * @return
 */
protected IBaseResultSet doExecuteSubQuery(QueryResultSet parent,ISubqueryDefinition subQuery){
}","/** 
 * get the sub query result from the current query.
 * @param query
 * @return
 */
protected IBaseResultSet doExecuteSubQuery(IQueryResultSet parent,ISubqueryDefinition subQuery){
}",0.9973045822102424
74289,"public IBaseResultSet execute(IBaseResultSet parent,IDataQueryDefinition query,boolean useCache){
  if (query instanceof ISubqueryDefinition) {
    if (parent == null) {
      return null;
    }
 else     if (parent instanceof ICubeResultSet) {
      context.addException(new EngineException(""String_Node_Str"" + ((ISubqueryDefinition)query).getName()));
    }
    return doExecuteSubQuery((QueryResultSet)parent,(ISubqueryDefinition)query);
  }
 else   if (query instanceof IQueryDefinition) {
    return doExecuteQuery(parent,(IQueryDefinition)query,useCache);
  }
 else   if (query instanceof ICubeQueryDefinition) {
    return doExecuteCube(parent,(ICubeQueryDefinition)query,useCache);
  }
  return null;
}","public IBaseResultSet execute(IBaseResultSet parent,IDataQueryDefinition query,boolean useCache){
  if (query instanceof ISubqueryDefinition) {
    if (parent == null) {
      return null;
    }
 else     if (parent instanceof ICubeResultSet) {
      context.addException(new EngineException(""String_Node_Str"" + ((ISubqueryDefinition)query).getName()));
    }
    return doExecuteSubQuery((IQueryResultSet)parent,(ISubqueryDefinition)query);
  }
 else   if (query instanceof IQueryDefinition) {
    return doExecuteQuery(parent,(IQueryDefinition)query,useCache);
  }
 else   if (query instanceof ICubeQueryDefinition) {
    return doExecuteCube(parent,(ICubeQueryDefinition)query,useCache);
  }
  return null;
}",0.9992962702322308
74290,"/** 
 * Delete folder
 * @param dirStr
 */
private void deleteDir(String dirStr){
  File curDir=new File(dirStr);
  if (!curDir.exists())   return;
  File[] files=curDir.listFiles();
  for (int i=0; i < files.length; i++)   files[i].delete();
  curDir.delete();
}","/** 
 * Delete folder
 * @param dirStr
 */
private void deleteDir(String dirStr){
  File curDir=new File(dirStr);
  if (!curDir.exists())   return;
  File[] files=curDir.listFiles();
  for (int i=0; i < files.length; i++)   files[i].delete();
  File parentDir=curDir.getParentFile();
  curDir.delete();
  parentDir.delete();
}",0.8828522920203735
74291,"private void setState(boolean enabled){
  lblTitle.setEnabled(enabled);
  txtTitle.setEnabled(enabled && btnTitleVisible.getSelection());
  btnTitleVisible.setEnabled(enabled);
  if (isShowValueEnabled()) {
    lblShowValue.setEnabled(enabled);
    btnShowValue.setEnabled(enabled);
  }
  Iterator buttons=getToggleButtons().iterator();
  while (buttons.hasNext()) {
    Button toggle=(Button)buttons.next();
    toggle.setEnabled(enabled && getContext().isEnabled(toggle.getData().toString()));
  }
  setToggleButtonEnabled(BUTTON_TITLE,btnTitleVisible.getSelection() && enabled);
  setToggleButtonEnabled(BUTTON_INTERACTIVITY,getChart().getInteractivity().isEnable() && enabled);
}","private void setState(boolean enabled){
  lblTitle.setEnabled(enabled);
  txtTitle.setEnabled(enabled && btnTitleVisible.getSelection());
  btnTitleVisible.setEnabled(enabled);
  if (isShowValueEnabled()) {
    lblShowValue.setEnabled(enabled);
    btnShowValue.setEnabled(enabled);
  }
  Iterator buttons=getToggleButtons().iterator();
  while (buttons.hasNext()) {
    Button toggle=(Button)buttons.next();
    toggle.setEnabled(enabled && getContext().isEnabled(SUBTASK_LEGEND + toggle.getData()));
  }
  setToggleButtonEnabled(BUTTON_TITLE,btnTitleVisible.getSelection() && enabled);
  setToggleButtonEnabled(BUTTON_INTERACTIVITY,getChart().getInteractivity().isEnable() && enabled);
}",0.9606413994169096
74292,"/** 
 * @return the test
 */
public static Test suite(){
  TestSuite test=new TestSuite();
  test.addTestSuite(CrosstabItemFactoryTest.class);
  return test;
}","/** 
 * @return the test
 */
public static Test suite(){
  TestSuite test=new TestSuite();
  test.addTestSuite(CrosstabItemFactoryTest.class);
  test.addTestSuite(CrosstabViewHandleTest.class);
  test.addTestSuite(MeasureViewHandleTest.class);
  return test;
}",0.7589498806682577
74293,"/** 
 * Get background position.
 * @param handle The handle of design element.
 * @return background position
 */
public Object getBackgroundPosition(DesignElementHandle handle){
  int x=0;
  int y=0;
  Object px=handle.getProperty(StyleHandle.BACKGROUND_POSITION_X_PROP);
  Object py=handle.getProperty(StyleHandle.BACKGROUND_POSITION_Y_PROP);
  if (px instanceof String && py instanceof String) {
    return new int[]{getPosition((String)px),getPosition((String)py)};
  }
  if (px instanceof DimensionValue && py instanceof DimensionValue) {
    if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(((DimensionValue)px).getUnits())) {
      if (!(DesignChoiceConstants.UNITS_PERCENTAGE.equals(((DimensionValue)py).getUnits()))) {
        return new int[]{PositionConstants.CENTER,PositionConstants.CENTER};
      }
      return new DimensionValue[]{(DimensionValue)px,(DimensionValue)py};
    }
    x=(int)DEUtil.convertoToPixel(px);
    y=(int)DEUtil.convertoToPixel(py);
    return new Point(x,y);
  }
  return new int[]{PositionConstants.CENTER,PositionConstants.CENTER};
}","/** 
 * Get background position.
 * @param handle The handle of design element.
 * @return background position
 */
public Object[] getBackgroundPosition(DesignElementHandle handle){
  Object x=null;
  Object y=null;
  if (handle != null) {
    Object px=handle.getProperty(StyleHandle.BACKGROUND_POSITION_X_PROP);
    Object py=handle.getProperty(StyleHandle.BACKGROUND_POSITION_Y_PROP);
    if (px instanceof String) {
      x=px;
    }
 else     if (px instanceof DimensionValue) {
      if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(((DimensionValue)px).getUnits())) {
        x=px;
      }
 else {
        x=new Integer((int)DEUtil.convertoToPixel(px));
      }
    }
    if (py instanceof String) {
      y=py;
    }
 else     if (py instanceof DimensionValue) {
      if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(((DimensionValue)py).getUnits())) {
        y=py;
      }
 else {
        y=new Integer((int)DEUtil.convertoToPixel(py));
      }
    }
  }
  return new Object[]{x,y};
}",0.5508924264351182
74294,"/** 
 * Get the position from string
 * @param position The given string
 * @return The position
 */
private int getPosition(String position){
  if (DesignChoiceConstants.BACKGROUND_POSITION_LEFT.equals(position)) {
    return PositionConstants.WEST;
  }
  if (DesignChoiceConstants.BACKGROUND_POSITION_RIGHT.equals(position)) {
    return PositionConstants.EAST;
  }
  if (DesignChoiceConstants.BACKGROUND_POSITION_TOP.equals(position)) {
    return PositionConstants.NORTH;
  }
  if (DesignChoiceConstants.BACKGROUND_POSITION_BOTTOM.equals(position)) {
    return PositionConstants.SOUTH;
  }
  return PositionConstants.CENTER;
}","/** 
 * Get the position from string
 * @param position The given string
 * @return The position
 */
public static int getPosition(String position){
  if (DesignChoiceConstants.BACKGROUND_POSITION_LEFT.equals(position)) {
    return PositionConstants.WEST;
  }
  if (DesignChoiceConstants.BACKGROUND_POSITION_RIGHT.equals(position)) {
    return PositionConstants.EAST;
  }
  if (DesignChoiceConstants.BACKGROUND_POSITION_TOP.equals(position)) {
    return PositionConstants.NORTH;
  }
  if (DesignChoiceConstants.BACKGROUND_POSITION_BOTTOM.equals(position)) {
    return PositionConstants.SOUTH;
  }
  return PositionConstants.CENTER;
}",0.9858044164037856
74295,"protected void refreshBackgroundImage(DesignElementHandle handle){
  IReportElementFigure figure=(IReportElementFigure)getFigure();
  String backGroundImage=getBackgroundImage(handle);
  Object backGroundPosition=getBackgroundPosition(handle);
  int backGroundRepeat=getBackgroundRepeat(handle);
  if (backGroundImage == null) {
    figure.setImage(null);
  }
 else {
    Image image=null;
    try {
      image=ImageManager.getInstance().getImage(backGroundImage);
    }
 catch (    SWTException e) {
      image=null;
    }
    if (image == null) {
      figure.setImage(null);
      return;
    }
    figure.setImage(image);
    figure.setRepeat(backGroundRepeat);
    if (backGroundPosition instanceof int[]) {
      figure.setAlignment(((int[])backGroundPosition)[0] | ((int[])backGroundPosition)[1]);
      figure.setPosition(new Point(-1,-1));
    }
 else     if (backGroundPosition instanceof Point) {
      figure.setPosition((Point)backGroundPosition);
    }
 else     if (backGroundPosition instanceof DimensionValue[]) {
      int percentX=(int)((DimensionValue[])backGroundPosition)[0].getMeasure();
      int percentY=(int)((DimensionValue[])backGroundPosition)[1].getMeasure();
      Rectangle area=getFigure().getClientArea();
      org.eclipse.swt.graphics.Rectangle imageArea=image.getBounds();
      int x=(area.width - imageArea.width) * percentX / 100;
      int y=(area.height - imageArea.height) * percentY / 100;
      figure.setPosition(new Point(x,y));
    }
  }
}","protected void refreshBackgroundImage(DesignElementHandle handle){
  IReportElementFigure figure=(IReportElementFigure)getFigure();
  String backGroundImage=getBackgroundImage(handle);
  Object[] backGroundPosition=getBackgroundPosition(handle);
  int backGroundRepeat=getBackgroundRepeat(handle);
  if (backGroundImage == null) {
    figure.setImage(null);
  }
 else {
    Image image=null;
    try {
      image=ImageManager.getInstance().getImage(backGroundImage);
    }
 catch (    SWTException e) {
      image=null;
    }
    if (image == null) {
      figure.setImage(null);
      return;
    }
    figure.setImage(image);
    figure.setRepeat(backGroundRepeat);
    Object xPosition=backGroundPosition[0];
    Object yPosition=backGroundPosition[1];
    Rectangle area=getFigure().getClientArea();
    org.eclipse.swt.graphics.Rectangle imageArea=image.getBounds();
    Point position=new Point(-1,-1);
    int alignment=0;
    if (xPosition instanceof Integer) {
      position.x=((Integer)xPosition).intValue();
    }
 else     if (xPosition instanceof DimensionValue) {
      int percentX=(int)((DimensionValue)xPosition).getMeasure();
      position.x=(area.width - imageArea.width) * percentX / 100;
    }
 else     if (xPosition instanceof String) {
      alignment|=DesignElementHandleAdapter.getPosition((String)xPosition);
    }
    if (yPosition instanceof Integer) {
      position.y=((Integer)yPosition).intValue();
    }
 else     if (yPosition instanceof DimensionValue) {
      int percentY=(int)((DimensionValue)yPosition).getMeasure();
      position.y=(area.width - imageArea.width) * percentY / 100;
    }
 else     if (yPosition instanceof String) {
      alignment|=DesignElementHandleAdapter.getPosition((String)yPosition);
    }
    figure.setAlignment(alignment);
    figure.setPosition(position);
  }
}",0.5383458646616541
74296,"protected Object getBackgroundPosition(DesignElementHandle handle){
  return getModelAdapter().getBackgroundPosition(handle);
}","protected Object[] getBackgroundPosition(DesignElementHandle handle){
  return getModelAdapter().getBackgroundPosition(handle);
}",0.9921875
74297,"/** 
 * @see org.eclipse.draw2d.Figure#paintFigure(Graphics)
 */
protected void paintFigure(Graphics graphics){
  if (isOpaque()) {
    if (getBorder() instanceof BaseBorder) {
      graphics.fillRectangle(getBounds().getCopy().crop(((BaseBorder)getBorder()).getBorderInsets()));
    }
 else {
      graphics.fillRectangle(getBounds());
    }
  }
  Image image=getImage();
  if (image == null) {
    return;
  }
  int x, y;
  Rectangle area=getClientArea();
  graphics.getClip(PRIVATE_RECT);
  if (!(position.x == -1 && position.y == -1)) {
    x=area.x + position.x;
    y=area.y + position.y;
  }
 else {
switch (alignment & PositionConstants.NORTH_SOUTH) {
case PositionConstants.NORTH:
      y=area.y;
    break;
case PositionConstants.SOUTH:
  y=area.y + area.height - size.height;
break;
default :
y=(area.height - size.height) / 2 + area.y;
break;
}
switch (alignment & PositionConstants.EAST_WEST) {
case PositionConstants.EAST:
x=area.x + area.width - size.width;
break;
case PositionConstants.WEST:
x=area.x;
break;
default :
x=(area.width - size.width) / 2 + area.x;
break;
}
}
ArrayList xyList=createImageList(x,y);
Iterator iter=xyList.iterator();
while (iter.hasNext()) {
Point point=(Point)iter.next();
graphics.drawImage(image,point);
}
xyList.clear();
graphics.setClip(PRIVATE_RECT);
}","/** 
 * @see org.eclipse.draw2d.Figure#paintFigure(Graphics)
 */
protected void paintFigure(Graphics graphics){
  if (isOpaque()) {
    if (getBorder() instanceof BaseBorder) {
      graphics.fillRectangle(getBounds().getCopy().crop(((BaseBorder)getBorder()).getBorderInsets()));
    }
 else {
      graphics.fillRectangle(getBounds());
    }
  }
  Image image=getImage();
  if (image == null) {
    return;
  }
  int x, y;
  Rectangle area=getClientArea();
  graphics.getClip(PRIVATE_RECT);
  if (position != null && position.x != -1) {
    x=area.x + position.x;
  }
 else {
switch (alignment & PositionConstants.EAST_WEST) {
case PositionConstants.EAST:
      x=area.x + area.width - size.width;
    break;
case PositionConstants.WEST:
  x=area.x;
break;
default :
x=(area.width - size.width) / 2 + area.x;
break;
}
}
if (position != null && position.y != -1) {
y=area.y + position.y;
}
 else {
switch (alignment & PositionConstants.NORTH_SOUTH) {
case PositionConstants.NORTH:
y=area.y;
break;
case PositionConstants.SOUTH:
y=area.y + area.height - size.height;
break;
default :
y=(area.height - size.height) / 2 + area.y;
break;
}
}
ArrayList xyList=createImageList(x,y);
Iterator iter=xyList.iterator();
while (iter.hasNext()) {
Point point=(Point)iter.next();
graphics.drawImage(image,point);
}
xyList.clear();
graphics.setClip(PRIVATE_RECT);
}",0.7470787787410479
74298,"/** 
 * @see org.eclipse.draw2d.Figure#paintFigure(Graphics)
 */
protected void paintFigure(Graphics graphics){
  if (isOpaque()) {
    if (getBorder() instanceof BaseBorder) {
      graphics.fillRectangle(getBounds().getCopy().crop(((BaseBorder)getBorder()).getBorderInsets()));
    }
 else {
      graphics.fillRectangle(getBounds());
    }
  }
  Image image=getImage();
  if (image == null) {
    return;
  }
  int x, y;
  Rectangle area=getBounds();
  if (!(position.x == -1 && position.y == -1)) {
    x=area.x + position.x;
    y=area.y + position.y;
  }
 else {
switch (alignment & PositionConstants.NORTH_SOUTH) {
case PositionConstants.NORTH:
      y=area.y;
    break;
case PositionConstants.SOUTH:
  y=area.y + area.height - size.height;
break;
default :
y=(area.height - size.height) / 2 + area.y;
break;
}
switch (alignment & PositionConstants.EAST_WEST) {
case PositionConstants.EAST:
x=area.x + area.width - size.width;
break;
case PositionConstants.WEST:
x=area.x;
break;
default :
x=(area.width - size.width) / 2 + area.x;
break;
}
}
ArrayList xyList=createImageList(x,y);
Iterator iter=xyList.iterator();
while (iter.hasNext()) {
Point point=(Point)iter.next();
graphics.drawImage(image,point);
}
xyList.clear();
}","/** 
 * @see org.eclipse.draw2d.Figure#paintFigure(Graphics)
 */
protected void paintFigure(Graphics graphics){
  if (isOpaque()) {
    if (getBorder() instanceof BaseBorder) {
      graphics.fillRectangle(getBounds().getCopy().crop(((BaseBorder)getBorder()).getBorderInsets()));
    }
 else {
      graphics.fillRectangle(getBounds());
    }
  }
  Image image=getImage();
  if (image == null) {
    return;
  }
  int x, y;
  Rectangle area=getBounds();
  if (position != null && position.x != -1) {
    x=area.x + position.x;
  }
 else {
switch (alignment & PositionConstants.EAST_WEST) {
case PositionConstants.EAST:
      x=area.x + area.width - size.width;
    break;
case PositionConstants.WEST:
  x=area.x;
break;
default :
x=(area.width - size.width) / 2 + area.x;
break;
}
}
if (position != null && position.y != -1) {
y=area.y + position.y;
}
 else {
switch (alignment & PositionConstants.NORTH_SOUTH) {
case PositionConstants.NORTH:
y=area.y;
break;
case PositionConstants.SOUTH:
y=area.y + area.height - size.height;
break;
default :
y=(area.height - size.height) / 2 + area.y;
break;
}
}
ArrayList xyList=createImageList(x,y);
Iterator iter=xyList.iterator();
while (iter.hasNext()) {
Point point=(Point)iter.next();
graphics.drawImage(image,point);
}
xyList.clear();
}",0.7329884600079586
74299,"/** 
 * get count of clients of one <code>DataSetHandle</code> 
 * @param dsHandle
 * @return the size of the clients
 */
private int countNum(DataSetHandle dsHandle){
  DataSet ds=(DataSet)dsHandle.getElement();
  return ds.getClientList().size();
}","/** 
 * get count of clients of one <code>DataSetHandle</code>
 * @param dsHandle
 * @return the size of the clients
 */
private int countNum(DataSetHandle dsHandle){
  DataSet ds=(DataSet)dsHandle.getElement();
  return ds.getClientList().size();
}",0.997995991983968
74300,"/** 
 * Test sematic check.
 * @throws DesignFileException
 */
public void testSematicCheck() throws DesignFileException {
  openDesign(semanticfileName);
  dataSet=(JointDataSetHandle)designHandle.findJointDataSet(""String_Node_Str"");
  List errors=design.getErrorList();
  assertEquals(2,errors.size());
  ErrorDetail detail=(ErrorDetail)errors.get(0);
  assertSame(dataSet.getElement(),detail.getElement());
  assertEquals(SemanticError.DESIGN_EXCEPTION_DATA_SET_MISSED_IN_JOINT_DATA_SET,detail.getErrorCode());
  detail=(ErrorDetail)errors.get(1);
  assertSame(dataSet.getElement(),detail.getElement());
  assertEquals(SemanticError.DESIGN_EXCEPTION_DATA_SET_MISSED_IN_JOINT_DATA_SET,detail.getErrorCode());
}","/** 
 * Test sematic check.
 * @throws DesignFileException
 */
public void testSematicCheck() throws DesignFileException {
  openDesign(semanticfileName);
  dataSet=designHandle.findJointDataSet(""String_Node_Str"");
  List errors=design.getErrorList();
  assertEquals(2,errors.size());
  ErrorDetail detail=(ErrorDetail)errors.get(0);
  assertSame(dataSet.getElement(),detail.getElement());
  assertEquals(SemanticError.DESIGN_EXCEPTION_DATA_SET_MISSED_IN_JOINT_DATA_SET,detail.getErrorCode());
  detail=(ErrorDetail)errors.get(1);
  assertSame(dataSet.getElement(),detail.getElement());
  assertEquals(SemanticError.DESIGN_EXCEPTION_DATA_SET_MISSED_IN_JOINT_DATA_SET,detail.getErrorCode());
}",0.9857549857549858
74301,"/** 
 * Creates a joint data set.
 */
public void setUp() throws DesignFileException {
  openDesign(fileName);
  dataSet=(JointDataSetHandle)designHandle.findJointDataSet(""String_Node_Str"");
}","/** 
 * Creates a joint data set.
 */
public void setUp() throws DesignFileException {
  openDesign(fileName);
  dataSet=designHandle.findJointDataSet(""String_Node_Str"");
}",0.945054945054945
74302,"/** 
 * test if count of clients of <code>DataSet</code> is right or not 
 * @throws Exception
 */
public void testReference() throws Exception {
  openDesign(fileNameForRelation);
  JointDataSetHandle jdsHandle=(JointDataSetHandle)designHandle.findJointDataSet(""String_Node_Str"");
  assertEquals(0,countNum(jdsHandle));
  DataSetHandle dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  assertEquals(1,countNum(dsHandle));
  dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  assertEquals(1,countNum(dsHandle));
  dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  assertEquals(0,countNum(dsHandle));
  jdsHandle.addDataSet(""String_Node_Str"");
  assertEquals(0,countNum(jdsHandle));
  dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  assertEquals(1,countNum(dsHandle));
  designHandle.getCommandStack().undo();
  assertEquals(0,countNum(dsHandle));
  designHandle.getCommandStack().redo();
  assertEquals(1,countNum(dsHandle));
  designHandle.getCommandStack().undo();
  assertEquals(0,countNum(dsHandle));
  jdsHandle.removeDataSet(""String_Node_Str"");
  dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  assertEquals(0,countNum(dsHandle));
  designHandle.getCommandStack().undo();
  assertEquals(1,countNum(dsHandle));
  designHandle.getCommandStack().redo();
  assertEquals(0,countNum(dsHandle));
  designHandle.getCommandStack().undo();
  assertEquals(1,countNum(dsHandle));
  jdsHandle.drop();
  dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  assertEquals(0,countNum(dsHandle));
  dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  assertEquals(0,countNum(dsHandle));
  designHandle.getCommandStack().undo();
  dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  assertEquals(1,countNum(dsHandle));
  dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  dsHandle.drop();
  assertNull(design.findDataSet(""String_Node_Str""));
  designHandle.getCommandStack().undo();
  assertNotNull(design.findDataSet(""String_Node_Str""));
}","/** 
 * test if count of clients of <code>DataSet</code> is right or not
 * @throws Exception
 */
public void testReference() throws Exception {
  openDesign(fileNameForRelation);
  JointDataSetHandle jdsHandle=designHandle.findJointDataSet(""String_Node_Str"");
  assertEquals(0,countNum(jdsHandle));
  DataSetHandle dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  assertEquals(1,countNum(dsHandle));
  dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  assertEquals(1,countNum(dsHandle));
  dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  assertEquals(0,countNum(dsHandle));
  jdsHandle.addDataSet(""String_Node_Str"");
  assertEquals(0,countNum(jdsHandle));
  dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  assertEquals(1,countNum(dsHandle));
  designHandle.getCommandStack().undo();
  assertEquals(0,countNum(dsHandle));
  designHandle.getCommandStack().redo();
  assertEquals(1,countNum(dsHandle));
  designHandle.getCommandStack().undo();
  assertEquals(0,countNum(dsHandle));
  jdsHandle.removeDataSet(""String_Node_Str"");
  dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  assertEquals(0,countNum(dsHandle));
  designHandle.getCommandStack().undo();
  assertEquals(1,countNum(dsHandle));
  designHandle.getCommandStack().redo();
  assertEquals(0,countNum(dsHandle));
  designHandle.getCommandStack().undo();
  assertEquals(1,countNum(dsHandle));
  jdsHandle.drop();
  dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  assertEquals(0,countNum(dsHandle));
  dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  assertEquals(0,countNum(dsHandle));
  designHandle.getCommandStack().undo();
  dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  assertEquals(1,countNum(dsHandle));
  dsHandle=(DataSetHandle)design.findDataSet(""String_Node_Str"").getHandle(design.getRoot());
  dsHandle.drop();
  assertNull(design.findDataSet(""String_Node_Str""));
  designHandle.getCommandStack().undo();
  assertNotNull(design.findDataSet(""String_Node_Str""));
}",0.9954318033500108
74303,"/** 
 * @param resultSet
 * @param rowIndexArray
 * @param dimensionNames
 * @param levelListArray
 * @return
 * @throws IOException
 * @throws DataException
 */
private CubePosFilter getValidPosFilter(IAggregationResultSet resultSet,IDiskArray rowIndexArray,String[] dimensionNames,List[] levelListArray) throws IOException, DataException {
  CubePosFilter cubePosFilter=new ValidCubePosFilter(dimensionNames);
  for (int i=0; i < rowIndexArray.size(); i++) {
    Integer rowIndex=(Integer)rowIndexArray.get(i);
    resultSet.seek(rowIndex.intValue());
    IDiskArray[] dimPositions=new IDiskArray[dimensionNames.length];
    for (int j=0; j < levelListArray.length; j++) {
      for (int k=0; k < levelListArray[j].size(); k++) {
        DimLevel level=(DimLevel)levelListArray[j].get(k);
        int levelIndex=resultSet.getLevelIndex(level);
        Object[] value=resultSet.getLevelKeyValue(levelIndex);
        IDiskArray positions=find(dimensionNames[j],level,value);
        if (dimPositions[j] == null) {
          dimPositions[j]=positions;
        }
 else {
          dimPositions[j]=SetUtil.getIntersection(dimPositions[j],positions);
        }
      }
    }
    cubePosFilter.addDimPositions(dimPositions);
  }
  return cubePosFilter;
}","/** 
 * @param resultSet
 * @param rowIndexArray
 * @param dimensionNames
 * @param levelListArray
 * @return
 * @throws IOException
 * @throws DataException
 */
private CubePosFilter getValidPosFilter(IAggregationResultSet resultSet,IDiskArray rowIndexArray,String[] dimensionNames,List[] levelListArray) throws IOException, DataException {
  CubePosFilter cubePosFilter=new ValidCubePosFilter(dimensionNames);
  for (int i=0; i < rowIndexArray.size(); i++) {
    Integer rowIndex=(Integer)rowIndexArray.get(i);
    resultSet.seek(rowIndex.intValue());
    IDiskArray[] dimPositions=new IDiskArray[dimensionNames.length];
    for (int j=0; j < levelListArray.length; j++) {
      for (int k=0; k < levelListArray[j].size(); k++) {
        DimLevel level=(DimLevel)levelListArray[j].get(k);
        int levelIndex=resultSet.getLevelIndex(level);
        Object[] value=resultSet.getLevelKeyValue(levelIndex);
        IDiskArray positions=find(dimensionNames[j],level,value);
        if (dimPositions[j] == null) {
          dimPositions[j]=positions;
        }
 else {
          dimPositions[j]=SetUtil.getIntersection(dimPositions[j],positions);
        }
      }
    }
    cubePosFilter.addDimPositions(dimPositions);
    for (int n=0; n < dimPositions.length; n++) {
      dimPositions[n].close();
    }
  }
  return cubePosFilter;
}",0.9663442940038685
74304,"/** 
 * @param resultSet
 * @param rowIndexArray
 * @param dimensionNames
 * @param levelListArray
 * @return
 * @throws IOException
 * @throws DataException
 */
private CubePosFilter getInvalidPosFilter(IAggregationResultSet resultSet,IDiskArray rowIndexArray,String[] dimensionNames,List[] levelListArray) throws IOException, DataException {
  CubePosFilter cubePosFilter=new InvalidCubePosFilter(dimensionNames);
  int rowIndex=0;
  for (int i=0; i < resultSet.length(); i++) {
    if (rowIndex < rowIndexArray.size()) {
      Integer index=(Integer)rowIndexArray.get(rowIndex);
      if (i == index.intValue()) {
        rowIndex++;
        continue;
      }
    }
    resultSet.seek(i);
    IDiskArray[] dimPositions=new IDiskArray[dimensionNames.length];
    for (int j=0; j < levelListArray.length; j++) {
      for (int k=0; k < levelListArray[j].size(); k++) {
        DimLevel level=(DimLevel)levelListArray[j].get(k);
        int levelIndex=resultSet.getLevelIndex(level);
        Object[] value=resultSet.getLevelKeyValue(levelIndex);
        IDiskArray positions=find(dimensionNames[j],level,value);
        if (dimPositions[j] == null) {
          dimPositions[j]=positions;
        }
 else {
          dimPositions[j]=SetUtil.getIntersection(dimPositions[j],positions);
        }
      }
    }
    cubePosFilter.addDimPositions(dimPositions);
  }
  return cubePosFilter;
}","/** 
 * @param resultSet
 * @param rowIndexArray
 * @param dimensionNames
 * @param levelListArray
 * @return
 * @throws IOException
 * @throws DataException
 */
private CubePosFilter getInvalidPosFilter(IAggregationResultSet resultSet,IDiskArray rowIndexArray,String[] dimensionNames,List[] levelListArray) throws IOException, DataException {
  CubePosFilter cubePosFilter=new InvalidCubePosFilter(dimensionNames);
  int rowIndex=0;
  for (int i=0; i < resultSet.length(); i++) {
    if (rowIndex < rowIndexArray.size()) {
      Integer index=(Integer)rowIndexArray.get(rowIndex);
      if (i == index.intValue()) {
        rowIndex++;
        continue;
      }
    }
    resultSet.seek(i);
    IDiskArray[] dimPositions=new IDiskArray[dimensionNames.length];
    for (int j=0; j < levelListArray.length; j++) {
      for (int k=0; k < levelListArray[j].size(); k++) {
        DimLevel level=(DimLevel)levelListArray[j].get(k);
        int levelIndex=resultSet.getLevelIndex(level);
        Object[] value=resultSet.getLevelKeyValue(levelIndex);
        IDiskArray positions=find(dimensionNames[j],level,value);
        if (dimPositions[j] == null) {
          dimPositions[j]=positions;
        }
 else {
          dimPositions[j]=SetUtil.getIntersection(dimPositions[j],positions);
        }
      }
    }
    cubePosFilter.addDimPositions(dimPositions);
    for (int n=0; n < dimPositions.length; n++) {
      dimPositions[n].close();
    }
  }
  return cubePosFilter;
}",0.9695910520796924
74305,"/** 
 * Create a parameter hint based on Parameter definition and value
 * @param paramDefn
 * @param evaValue
 */
private ParameterHint createParameterHint(IParameterDefinition paramDefn,Object paramValue) throws DataException {
  ParameterHint parameterHint=new ParameterHint(paramDefn.getName(),paramDefn.isInputMode(),paramDefn.isOutputMode());
  if (paramDefn.getPosition() > 0)   parameterHint.setPosition(paramDefn.getPosition());
  parameterHint.setNativeName(paramDefn.getNativeName());
  Class dataTypeClass=DataType.getClass(paramDefn.getType());
  if (dataTypeClass == DataType.AnyType.class || dataTypeClass == Blob.class) {
    dataTypeClass=String.class;
  }
  parameterHint.setDataType(dataTypeClass);
  parameterHint.setNativeDataType(paramDefn.getNativeType());
  parameterHint.setIsInputOptional(paramDefn.isInputOptional());
  if (parameterHint.isInputMode())   parameterHint.setDefaultInputValue(getParameterValueString(dataTypeClass,paramValue));
  parameterHint.setIsNullable(paramDefn.isNullable());
  return parameterHint;
}","/** 
 * Create a parameter hint based on Parameter definition and value
 * @param paramDefn
 * @param evaValue
 */
private ParameterHint createParameterHint(IParameterDefinition paramDefn,Object paramValue) throws DataException {
  ParameterHint parameterHint=new ParameterHint(paramDefn.getName(),paramDefn.isInputMode(),paramDefn.isOutputMode());
  if (paramDefn.getPosition() > 0)   parameterHint.setPosition(paramDefn.getPosition());
  parameterHint.setNativeName(paramDefn.getNativeName());
  Class dataTypeClass=DataType.getClass(paramDefn.getType());
  parameterHint.setNativeDataType(paramDefn.getNativeType());
  parameterHint.setIsInputOptional(paramDefn.isInputOptional());
  if (parameterHint.isInputMode())   parameterHint.setDefaultInputValue(getParameterValueString(dataTypeClass,paramValue));
  parameterHint.setIsNullable(paramDefn.isNullable());
  if (dataTypeClass != AnyType.class) {
    if (dataTypeClass == Blob.class)     parameterHint.setDataType(IBlob.class);
 else     if (dataTypeClass == Clob.class)     parameterHint.setDataType(IClob.class);
 else     parameterHint.setDataType(dataTypeClass);
  }
  return parameterHint;
}",0.5803814713896458
74306,"static private boolean contains(String formats,String format){
  int index=formats.indexOf(format);
  if (index != -1) {
    if (index > 0) {
      if (formats.charAt(index - 1) != ';') {
        return false;
      }
    }
    int lastIndex=index + format.length();
    if (lastIndex < formats.length()) {
      if (formats.charAt(lastIndex) != ';') {
        return false;
      }
    }
    return true;
  }
  return false;
}","static private boolean contains(String formats,String format){
  int index=formats.indexOf(format);
  if (index != -1) {
    if (index > 0) {
      if (formats.charAt(index - 1) != ',') {
        return false;
      }
    }
    int lastIndex=index + format.length();
    if (lastIndex < formats.length()) {
      if (formats.charAt(lastIndex) != ',') {
        return false;
      }
    }
    return true;
  }
  return false;
}",0.9953161592505856
74307,"public void visitScalarParameter(ScalarParameterHandle handle){
  assert(handle.getName() != null);
  ScalarParameterDefn scalarParameter=new ScalarParameterDefn();
  scalarParameter.setHandle(handle);
  scalarParameter.setLocale(locale);
  scalarParameter.setParameterType(IParameterDefnBase.SCALAR_PARAMETER);
  scalarParameter.setName(handle.getName());
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    scalarParameter.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  String align=handle.getAlignment();
  if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_CENTER.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.CENTER);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.LEFT);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.RIGHT);
 else   scalarParameter.setAlignment(IScalarParameterDefn.AUTO);
  scalarParameter.setAllowBlank(handle.allowBlank());
  scalarParameter.setAllowNull(handle.allowNull());
  scalarParameter.setIsRequired(handle.isRequired());
  String controlType=handle.getControlType();
  if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.CHECK_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.LIST_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.RADIO_BUTTON);
 else   scalarParameter.setControlType(IScalarParameterDefn.TEXT_BOX);
  scalarParameter.setDefaultValue(handle.getDefaultValue());
  scalarParameter.setDisplayName(handle.getDisplayName());
  scalarParameter.setDisplayNameKey(handle.getDisplayNameKey());
  scalarParameter.setFormat(handle.getPattern());
  scalarParameter.setHelpText(handle.getHelpText());
  scalarParameter.setHelpTextKey(handle.getHelpTextKey());
  scalarParameter.setPromptText(handle.getPromptText());
  scalarParameter.setPromptTextKey(handle.getPromptTextID());
  scalarParameter.setIsHidden(handle.isHidden());
  scalarParameter.setName(handle.getName());
  String valueType=handle.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_BOOLEAN);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE);
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DECIMAL);
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_FLOAT);
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_STRING);
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_INTEGER);
 else   scalarParameter.setDataType(IScalarParameterDefn.TYPE_ANY);
  ArrayList values=new ArrayList();
  Iterator selectionIter=handle.choiceIterator();
  while (selectionIter.hasNext()) {
    SelectionChoiceHandle selection=(SelectionChoiceHandle)selectionIter.next();
    ParameterSelectionChoice selectionChoice=new ParameterSelectionChoice(this.handle);
    selectionChoice.setLabel(selection.getLabelKey(),selection.getLabel());
    selectionChoice.setValue(selection.getValue(),scalarParameter.getDataType());
    values.add(selectionChoice);
  }
  scalarParameter.setSelectionList(values);
  scalarParameter.setAllowNewValues(!handle.isMustMatch());
  scalarParameter.setFixedOrder(handle.isFixedOrder());
  String paramType=handle.getValueType();
  if (IScalarParameterDefn.SELECTION_LIST_TYPE_STATIC.equals(paramType) && scalarParameter.getSelectionList() != null && scalarParameter.getSelectionList().size() > 0) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_STATIC);
  }
 else   if (IScalarParameterDefn.SELECTION_LIST_TYPE_DYNAMIC.equals(paramType)) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_DYNAMIC);
  }
 else {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_NONE);
  }
  scalarParameter.setValueConcealed(handle.isConcealValue());
  currentElement=scalarParameter;
}","public void visitScalarParameter(ScalarParameterHandle handle){
  assert(handle.getName() != null);
  ScalarParameterDefn scalarParameter=new ScalarParameterDefn();
  scalarParameter.setHandle(handle);
  scalarParameter.setLocale(locale);
  scalarParameter.setParameterType(IParameterDefnBase.SCALAR_PARAMETER);
  scalarParameter.setName(handle.getName());
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    scalarParameter.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  String align=handle.getAlignment();
  if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_CENTER.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.CENTER);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.LEFT);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.RIGHT);
 else   scalarParameter.setAlignment(IScalarParameterDefn.AUTO);
  scalarParameter.setAllowBlank(handle.allowBlank());
  scalarParameter.setAllowNull(handle.allowNull());
  scalarParameter.setIsRequired(handle.isRequired());
  scalarParameter.setScalarParameterType(handle.getParamType());
  String controlType=handle.getControlType();
  if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.CHECK_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.LIST_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.RADIO_BUTTON);
 else   scalarParameter.setControlType(IScalarParameterDefn.TEXT_BOX);
  scalarParameter.setDefaultValue(handle.getDefaultValue());
  scalarParameter.setDisplayName(handle.getDisplayName());
  scalarParameter.setDisplayNameKey(handle.getDisplayNameKey());
  scalarParameter.setFormat(handle.getPattern());
  scalarParameter.setHelpText(handle.getHelpText());
  scalarParameter.setHelpTextKey(handle.getHelpTextKey());
  scalarParameter.setPromptText(handle.getPromptText());
  scalarParameter.setPromptTextKey(handle.getPromptTextID());
  scalarParameter.setIsHidden(handle.isHidden());
  scalarParameter.setName(handle.getName());
  String valueType=handle.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_BOOLEAN);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE);
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DECIMAL);
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_FLOAT);
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_STRING);
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_INTEGER);
 else   scalarParameter.setDataType(IScalarParameterDefn.TYPE_ANY);
  ArrayList values=new ArrayList();
  Iterator selectionIter=handle.choiceIterator();
  while (selectionIter.hasNext()) {
    SelectionChoiceHandle selection=(SelectionChoiceHandle)selectionIter.next();
    ParameterSelectionChoice selectionChoice=new ParameterSelectionChoice(this.handle);
    selectionChoice.setLabel(selection.getLabelKey(),selection.getLabel());
    selectionChoice.setValue(selection.getValue(),scalarParameter.getDataType());
    values.add(selectionChoice);
  }
  scalarParameter.setSelectionList(values);
  scalarParameter.setAllowNewValues(!handle.isMustMatch());
  scalarParameter.setFixedOrder(handle.isFixedOrder());
  String paramType=handle.getValueType();
  if (IScalarParameterDefn.SELECTION_LIST_TYPE_STATIC.equals(paramType) && scalarParameter.getSelectionList() != null && scalarParameter.getSelectionList().size() > 0) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_STATIC);
  }
 else   if (IScalarParameterDefn.SELECTION_LIST_TYPE_DYNAMIC.equals(paramType)) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_DYNAMIC);
  }
 else {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_NONE);
  }
  scalarParameter.setValueConcealed(handle.isConcealValue());
  currentElement=scalarParameter;
}",0.9933720811665138
74308,"/** 
 * top/bottom dimension filter.
 * @throws Exception
 */
public void testAggrFilter2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_N,""String_Node_Str""));
  CubeFilterDefinition filter2=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * top/bottom dimension filter.
 * @throws Exception
 */
public void testAggrFilter2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_N,""String_Node_Str""));
  filter1.setTargetLevel(level21);
  CubeFilterDefinition filter2=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str""));
  filter2.setTargetLevel(level12);
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9697122665320546
74309,"/** 
 * expression sort on attribute 
 */
public void testSortWithExpr1() throws Exception {
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_ASC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * expression sort on attribute
 */
public void testSortWithExpr1() throws Exception {
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_ASC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9997876406880442
74310,"protected void updateLine(){
  if (root == null) {
    return;
  }
  Iterator iter=root.getChildren();
  int height=root.getHeight();
  int lineHeight=((PDFBlockStackingLM)parent).getLineHeight();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    int childHeight=child.getAllocatedHeight();
    height=Math.max(height,childHeight);
  }
  if (parent.isPageEmpty()) {
    height=Math.min(maxAvaHeight,Math.max(height,lineHeight));
  }
 else {
    height=Math.max(height,lineHeight);
  }
  root.setContentHeight(height);
}","protected void updateLine(){
  if (root == null) {
    return;
  }
  Iterator iter=root.getChildren();
  int height=root.getHeight();
  int lineHeight=((PDFBlockStackingLM)parent).getLineHeight();
  if (lineHeight > maxAvaHeight) {
    lineHeight=0;
  }
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    int childHeight=child.getAllocatedHeight();
    height=Math.max(height,childHeight);
  }
  if (parent.isPageEmpty()) {
    height=Math.min(maxAvaHeight,Math.max(height,lineHeight));
  }
 else {
    height=Math.max(height,lineHeight);
  }
  root.setContentHeight(height);
}",0.9507346585998272
74311,"/** 
 * Sets the UI instance of the element
 * @param reportItemUI the UI instance to set.It cannot be null
 */
void setReportItemUI(IReportItemFigureProvider reportItemUI){
  Assert.isLegal(reportItemUI != null);
  this.reportItemUI=reportItemUI;
}","/** 
 * Sets the UI instance of the element
 * @param reportItemUI the UI instance to set.It cannot be null
 */
void setReportItemUI(IReportItemFigureProvider reportItemUI){
}",0.8254716981132075
74312,"/** 
 * Sets the corresponding attribute of the key of the extended element
 * @param key the key of the attribute.It cannot be null
 */
void setAttribute(String key,Object value){
  Assert.isLegal(key != null);
  attributesMap.put(key,value);
}","/** 
 * Sets the corresponding attribute of the key of the extended element
 * @param key the key of the attribute.It cannot be null
 */
void setAttribute(String key,Object value){
}",0.8524590163934426
74313,"/** 
 * Gets the corresponding attribute of the key of the extended element
 * @param key the key of the attribute. It cannot be null. One of the constants defined in IExtensionConstants
 * @return Returns the corresponding attribute, or null if the key isinvalid or the corresponding attribute hasn't been set
 */
public Object getAttribute(String key){
  Assert.isLegal(key != null);
  return attributesMap.get(key);
}","/** 
 * Gets the corresponding attribute of the key of the extended element
 * @param key the key of the attribute. It cannot be null. One of the constants defined in IExtensionConstants
 * @return Returns the corresponding attribute, or null if the key isinvalid or the corresponding attribute hasn't been set
 */
public Object getAttribute(String key){
}",0.9175257731958762
74314,"private ImageDescriptor getImageDescriptor(IConfigurationElement element){
  Assert.isLegal(element != null);
  IExtension extension=element.getDeclaringExtension();
  String iconPath=element.getAttribute(IExtensionConstants.ATTRIBUTE_ICON);
  if (iconPath == null) {
    return null;
  }
  URL path=Platform.getBundle(extension.getNamespace()).getEntry(""String_Node_Str"");
  try {
    return ImageDescriptor.createFromURL(new URL(path,iconPath));
  }
 catch (  MalformedURLException e) {
  }
  return null;
}","private ImageDescriptor getImageDescriptor(IConfigurationElement element){
}",0.2598290598290598
74315,"/** 
 * Gets the extended element point with the specified extension name.
 * @param extensionName the extension name of the extended element
 * @return Returns the extended element point, or null if any problem exists
 */
public ExtendedElementUIPoint getExtendedElementPoint(String extensionName){
  Assert.isLegal(extensionName != null);
  return (ExtendedElementUIPoint)getReportItemUIMap().get(extensionName);
}","/** 
 * Gets the extended element point with the specified extension name.
 * @param extensionName the extension name of the extended element
 * @return Returns the extended element point, or null if any problem exists
 */
public ExtendedElementUIPoint getExtendedElementPoint(String extensionName){
}",0.8396094839609484
74316,"/** 
 * createGetParameterDefinitionTask.
 * @param runnable
 * @return the get parameter definition task
 */
public IGetParameterDefinitionTask createGetParameterDefinitionTask(IReportRunnable runnable,InputOptions options){
  IGetParameterDefinitionTask task=null;
  try {
    HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
    task=engine.createGetParameterDefinitionTask(runnable);
    Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
    task.setAppContext(context);
  }
 catch (  Exception e) {
  }
  return task;
}","/** 
 * createGetParameterDefinitionTask.
 * @param runnable
 * @return the get parameter definition task
 */
public IGetParameterDefinitionTask createGetParameterDefinitionTask(IReportRunnable runnable,InputOptions options){
  IGetParameterDefinitionTask task=null;
  try {
    HttpServletRequest request=(HttpServletRequest)options.getOption(InputOptions.OPT_REQUEST);
    Locale locale=(Locale)options.getOption(InputOptions.OPT_LOCALE);
    task=engine.createGetParameterDefinitionTask(runnable);
    task.setLocale(locale);
    Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
    task.setAppContext(context);
  }
 catch (  Exception e) {
  }
  return task;
}",0.9162861491628614
74317,"public void visitScalarParameter(ScalarParameterHandle handle){
  assert(handle.getName() != null);
  ScalarParameterDefn scalarParameter=new ScalarParameterDefn();
  scalarParameter.setHandle(handle);
  scalarParameter.setParameterType(IParameterDefnBase.SCALAR_PARAMETER);
  scalarParameter.setName(handle.getName());
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    scalarParameter.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  String align=handle.getAlignment();
  if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_CENTER.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.CENTER);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.LEFT);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.RIGHT);
 else   scalarParameter.setAlignment(IScalarParameterDefn.AUTO);
  scalarParameter.setAllowBlank(handle.allowBlank());
  scalarParameter.setAllowNull(handle.allowNull());
  scalarParameter.setIsRequired(handle.isRequired());
  String controlType=handle.getControlType();
  if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.CHECK_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.LIST_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.RADIO_BUTTON);
 else   scalarParameter.setControlType(IScalarParameterDefn.TEXT_BOX);
  scalarParameter.setDefaultValue(handle.getDefaultValue());
  scalarParameter.setDisplayName(handle.getDisplayName());
  scalarParameter.setDisplayNameKey(handle.getDisplayNameKey());
  scalarParameter.setFormat(handle.getPattern());
  scalarParameter.setHelpText(handle.getHelpText());
  scalarParameter.setHelpTextKey(handle.getHelpTextKey());
  scalarParameter.setPromptText(handle.getPromptText());
  scalarParameter.setPromptTextKey(handle.getPromptTextID());
  scalarParameter.setIsHidden(handle.isHidden());
  scalarParameter.setName(handle.getName());
  String valueType=handle.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_BOOLEAN);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE);
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DECIMAL);
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_FLOAT);
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_STRING);
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_INTEGER);
 else   scalarParameter.setDataType(IScalarParameterDefn.TYPE_ANY);
  ArrayList values=new ArrayList();
  Iterator selectionIter=handle.choiceIterator();
  while (selectionIter.hasNext()) {
    SelectionChoiceHandle selection=(SelectionChoiceHandle)selectionIter.next();
    ParameterSelectionChoice selectionChoice=new ParameterSelectionChoice(this.handle);
    selectionChoice.setLabel(selection.getLabelKey(),selection.getLabel());
    selectionChoice.setValue(selection.getValue(),scalarParameter.getDataType());
    values.add(selectionChoice);
  }
  scalarParameter.setSelectionList(values);
  scalarParameter.setAllowNewValues(!handle.isMustMatch());
  scalarParameter.setFixedOrder(handle.isFixedOrder());
  String paramType=handle.getValueType();
  if (IScalarParameterDefn.SELECTION_LIST_TYPE_STATIC.equals(paramType) && scalarParameter.getSelectionList() != null && scalarParameter.getSelectionList().size() > 0) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_STATIC);
  }
 else   if (IScalarParameterDefn.SELECTION_LIST_TYPE_DYNAMIC.equals(paramType)) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_DYNAMIC);
  }
 else {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_NONE);
  }
  scalarParameter.setValueConcealed(handle.isConcealValue());
  currentElement=scalarParameter;
}","public void visitScalarParameter(ScalarParameterHandle handle){
  assert(handle.getName() != null);
  ScalarParameterDefn scalarParameter=new ScalarParameterDefn();
  scalarParameter.setHandle(handle);
  scalarParameter.setLocale(locale);
  scalarParameter.setParameterType(IParameterDefnBase.SCALAR_PARAMETER);
  scalarParameter.setName(handle.getName());
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    scalarParameter.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  String align=handle.getAlignment();
  if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_CENTER.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.CENTER);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.LEFT);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.RIGHT);
 else   scalarParameter.setAlignment(IScalarParameterDefn.AUTO);
  scalarParameter.setAllowBlank(handle.allowBlank());
  scalarParameter.setAllowNull(handle.allowNull());
  scalarParameter.setIsRequired(handle.isRequired());
  String controlType=handle.getControlType();
  if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.CHECK_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.LIST_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.RADIO_BUTTON);
 else   scalarParameter.setControlType(IScalarParameterDefn.TEXT_BOX);
  scalarParameter.setDefaultValue(handle.getDefaultValue());
  scalarParameter.setDisplayName(handle.getDisplayName());
  scalarParameter.setDisplayNameKey(handle.getDisplayNameKey());
  scalarParameter.setFormat(handle.getPattern());
  scalarParameter.setHelpText(handle.getHelpText());
  scalarParameter.setHelpTextKey(handle.getHelpTextKey());
  scalarParameter.setPromptText(handle.getPromptText());
  scalarParameter.setPromptTextKey(handle.getPromptTextID());
  scalarParameter.setIsHidden(handle.isHidden());
  scalarParameter.setName(handle.getName());
  String valueType=handle.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_BOOLEAN);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE);
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DECIMAL);
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_FLOAT);
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_STRING);
 else   if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_INTEGER);
 else   scalarParameter.setDataType(IScalarParameterDefn.TYPE_ANY);
  ArrayList values=new ArrayList();
  Iterator selectionIter=handle.choiceIterator();
  while (selectionIter.hasNext()) {
    SelectionChoiceHandle selection=(SelectionChoiceHandle)selectionIter.next();
    ParameterSelectionChoice selectionChoice=new ParameterSelectionChoice(this.handle);
    selectionChoice.setLabel(selection.getLabelKey(),selection.getLabel());
    selectionChoice.setValue(selection.getValue(),scalarParameter.getDataType());
    values.add(selectionChoice);
  }
  scalarParameter.setSelectionList(values);
  scalarParameter.setAllowNewValues(!handle.isMustMatch());
  scalarParameter.setFixedOrder(handle.isFixedOrder());
  String paramType=handle.getValueType();
  if (IScalarParameterDefn.SELECTION_LIST_TYPE_STATIC.equals(paramType) && scalarParameter.getSelectionList() != null && scalarParameter.getSelectionList().size() > 0) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_STATIC);
  }
 else   if (IScalarParameterDefn.SELECTION_LIST_TYPE_DYNAMIC.equals(paramType)) {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_DYNAMIC);
  }
 else {
    scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_NONE);
  }
  scalarParameter.setValueConcealed(handle.isConcealValue());
  currentElement=scalarParameter;
}",0.996187532199897
74318,"public void handleOnFetch(IDataSetInstanceHandle dataSet,IDataRow row){
  if (reportContext == null)   return;
  try {
    JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),ON_FETCH,dataSetHandle.getOnFetch());
    if (status.didRun())     return;
    if (eventHandler != null)     eventHandler.onFetch(new DataSetInstance(dataSet),new DataSetRow(row),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleOnFetch(IDataSetInstanceHandle dataSet,IDataRow row){
  if (reportContext == null)   return;
  try {
    if (!this.useOnFetchEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),ON_FETCH,dataSetHandle.getOnFetch());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.onFetch(new DataSetInstance(dataSet),new DataSetRow(row),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.945945945945946
74319,"public void handleBeforeOpen(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),BEFORE_OPEN,dataSetHandle.getBeforeOpen());
    if (status.didRun())     return;
    if (eventHandler != null)     eventHandler.beforeOpen(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleBeforeOpen(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useBeforeOpenEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),BEFORE_OPEN,dataSetHandle.getBeforeOpen());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.beforeOpen(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9404117009750812
74320,"public void handleBeforeClose(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),BEFORE_CLOSE,dataSetHandle.getBeforeClose());
    if (status.didRun())     return;
    if (eventHandler != null)     eventHandler.beforeClose(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleBeforeClose(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useBeforeCloseEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),BEFORE_CLOSE,dataSetHandle.getBeforeClose());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.beforeClose(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9399141630901288
74321,"public void handleAfterClose(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),AFTER_CLOSE,dataSetHandle.getAfterClose());
    if (status.didRun())     return;
    if (eventHandler != null)     eventHandler.afterClose(reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleAfterClose(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useAfterCloseEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),AFTER_CLOSE,dataSetHandle.getAfterClose());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.afterClose(reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9364161849710982
74322,"public DataSetScriptExecutor(DataSetHandle dataSetHandle,ExecutionContext context){
  super(context);
  this.dataSetHandle=dataSetHandle;
  String className=dataSetHandle.getEventHandlerClass();
  initEventHandler(className);
}","public DataSetScriptExecutor(DataSetHandle dataSetHandle,ExecutionContext context){
  super(context);
  this.dataSetHandle=dataSetHandle;
  String className=dataSetHandle.getEventHandlerClass();
  initEventHandler(className);
  useOnFetchEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getOnFetch());
  useAfterCloseEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getAfterClose());
  useAfterOpenEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getAfterOpen());
  useBeforeOpenEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getBeforeOpen());
  useBeforeCloseEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getBeforeClose());
}",0.5
74323,"public void handleAfterOpen(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),AFTER_OPEN,dataSetHandle.getAfterOpen());
    if (status.didRun())     return;
    if (eventHandler != null)     eventHandler.afterOpen(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleAfterOpen(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useAfterOpenEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),AFTER_OPEN,dataSetHandle.getAfterOpen());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.afterOpen(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9409190371991248
74324,"public DataSourceScriptExecutor(DataSourceHandle dataSourceHandle,ExecutionContext context){
  super(context);
  this.dataSourceHandle=dataSourceHandle;
  String className=dataSourceHandle.getEventHandlerClass();
  initEventHandler(className);
}","public DataSourceScriptExecutor(DataSourceHandle dataSourceHandle,ExecutionContext context){
  super(context);
  this.dataSourceHandle=dataSourceHandle;
  String className=dataSourceHandle.getEventHandlerClass();
  initEventHandler(className);
  this.useBeforeOpenEventHandler=ScriptTextUtil.isNullOrComments(dataSourceHandle.getBeforeOpen());
  this.useBeforeCloseEventHandler=ScriptTextUtil.isNullOrComments(dataSourceHandle.getBeforeClose());
  this.useAfterOpenEventHandler=ScriptTextUtil.isNullOrComments(dataSourceHandle.getAfterOpen());
  this.useAfterCloseEventHandler=ScriptTextUtil.isNullOrComments(dataSourceHandle.getAfterClose());
}",0.550561797752809
74325,"public void handleBeforeOpen(IDataSourceInstanceHandle dataSource){
  if (reportContext == null)   return;
  try {
    JSScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),BEFORE_OPEN,dataSourceHandle.getBeforeOpen());
    if (status.didRun())     return;
    if (eventHandler != null)     eventHandler.beforeOpen(new DataSourceInstance(dataSource),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleBeforeOpen(IDataSourceInstanceHandle dataSource){
  if (reportContext == null)   return;
  try {
    if (!this.useBeforeOpenEventHandler) {
      JSScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),BEFORE_OPEN,dataSourceHandle.getBeforeOpen());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.beforeOpen(new DataSourceInstance(dataSource),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9430051813471504
74326,"public void handleBeforeClose(IDataSourceInstanceHandle dataSource){
  if (reportContext == null)   return;
  try {
    JSScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),BEFORE_CLOSE,dataSourceHandle.getBeforeClose());
    if (status.didRun())     return;
    if (eventHandler != null)     eventHandler.beforeClose(new DataSourceInstance(dataSource),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleBeforeClose(IDataSourceInstanceHandle dataSource){
  if (reportContext == null)   return;
  try {
    if (!this.useBeforeCloseEventHandler) {
      JSScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),BEFORE_CLOSE,dataSourceHandle.getBeforeClose());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.beforeClose(new DataSourceInstance(dataSource),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.942505133470226
74327,"public void handleAfterClose(IDataSourceInstanceHandle dataSource){
  if (reportContext == null)   return;
  try {
    JSScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),AFTER_CLOSE,dataSourceHandle.getAfterClose());
    if (status.didRun())     return;
    if (eventHandler != null)     eventHandler.afterClose(reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleAfterClose(IDataSourceInstanceHandle dataSource){
  if (reportContext == null)   return;
  try {
    if (!this.useAfterCloseEventHandler) {
      JSScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),AFTER_CLOSE,dataSourceHandle.getAfterClose());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.afterClose(reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9385474860335196
74328,"public void handleAfterOpen(IDataSourceInstanceHandle dataSource){
  if (reportContext == null)   return;
  try {
    JSScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),AFTER_OPEN,dataSourceHandle.getAfterOpen());
    if (status.didRun())     return;
    if (eventHandler != null)     eventHandler.afterOpen(new DataSourceInstance(dataSource),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleAfterOpen(IDataSourceInstanceHandle dataSource){
  if (reportContext == null)   return;
  try {
    if (!this.useAfterOpenEventHandler) {
      JSScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),AFTER_OPEN,dataSourceHandle.getAfterOpen());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.afterOpen(new DataSourceInstance(dataSource),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9435146443514644
74329,"public boolean handleDescribe(IDataSetInstanceHandle dataSet,IScriptDataSetMetaDataDefinition metaData) throws BirtException {
  try {
    JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),DESCRIBE,((ScriptDataSetHandle)dataSetHandle).getDescribe());
    if (status.didRun()) {
      Object result=status.result();
      if (result instanceof Boolean)       return ((Boolean)result).booleanValue();
 else       throw new DataException(ResourceConstants.EXPECT_BOOLEAN_RETURN_TYPE,""String_Node_Str"");
    }
    if (scriptedEventHandler != null)     return scriptedEventHandler.describe(new DataSetInstance(dataSet),new ScriptedDataSetMetaData(metaData));
  }
 catch (  Exception e) {
    addException(context,e);
  }
  return false;
}","public boolean handleDescribe(IDataSetInstanceHandle dataSet,IScriptDataSetMetaDataDefinition metaData) throws BirtException {
  try {
    if (!this.useDescribeEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),DESCRIBE,((ScriptDataSetHandle)dataSetHandle).getDescribe());
      if (status.didRun()) {
        Object result=status.result();
        if (result instanceof Boolean)         return ((Boolean)result).booleanValue();
 else         throw new DataException(ResourceConstants.EXPECT_BOOLEAN_RETURN_TYPE,""String_Node_Str"");
      }
    }
    if (scriptedEventHandler != null)     return scriptedEventHandler.describe(new DataSetInstance(dataSet),new ScriptedDataSetMetaData(metaData));
  }
 catch (  Exception e) {
    addException(context,e);
  }
  return false;
}",0.9612698412698412
74330,"public void handleOpen(IDataSetInstanceHandle dataSet) throws BirtException {
  try {
    JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),OPEN,((ScriptDataSetHandle)dataSetHandle).getOpen());
    if (status.didRun())     return;
    if (scriptedEventHandler != null)     scriptedEventHandler.open(new DataSetInstance(dataSet));
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleOpen(IDataSetInstanceHandle dataSet) throws BirtException {
  try {
    if (!this.useOpenEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),OPEN,((ScriptDataSetHandle)dataSetHandle).getOpen());
      if (status.didRun())       return;
    }
    if (scriptedEventHandler != null)     scriptedEventHandler.open(new DataSetInstance(dataSet));
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9445073612684032
74331,"public void handleClose(IDataSetInstanceHandle dataSet){
  try {
    JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),CLOSE,((ScriptDataSetHandle)dataSetHandle).getClose());
    if (status.didRun())     return;
    if (scriptedEventHandler != null)     scriptedEventHandler.close(new DataSetInstance(dataSet));
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleClose(IDataSetInstanceHandle dataSet){
  try {
    if (!this.useCloseEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),CLOSE,((ScriptDataSetHandle)dataSetHandle).getClose());
      if (status.didRun())       return;
    }
    if (scriptedEventHandler != null)     scriptedEventHandler.close(new DataSetInstance(dataSet));
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9410377358490566
74332,"public ScriptDataSetScriptExecutor(ScriptDataSetHandle dataSetHandle,ExecutionContext context){
  super(dataSetHandle,context);
}","public ScriptDataSetScriptExecutor(ScriptDataSetHandle dataSetHandle,ExecutionContext context){
  super(dataSetHandle,context);
  useOpenEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getOpen());
  useFetchEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getFetch());
  useCloseEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getClose());
  useDescribeEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getDescribe());
}",0.4372881355932203
74333,"public boolean handleFetch(IDataSetInstanceHandle dataSet,IDataRow row){
  try {
    JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),FETCH,((ScriptDataSetHandle)dataSetHandle).getFetch());
    if (status.didRun()) {
      Object result=status.result();
      if (result instanceof Boolean)       return ((Boolean)result).booleanValue();
 else       throw new DataException(ResourceConstants.EXPECT_BOOLEAN_RETURN_TYPE,""String_Node_Str"");
    }
    if (scriptedEventHandler != null)     return scriptedEventHandler.fetch(new DataSetInstance(dataSet),new UpdatableDataSetRow(row));
  }
 catch (  Exception e) {
    addException(context,e);
  }
  return false;
}","public boolean handleFetch(IDataSetInstanceHandle dataSet,IDataRow row){
  try {
    if (!useFetchEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),FETCH,((ScriptDataSetHandle)dataSetHandle).getFetch());
      if (status.didRun()) {
        Object result=status.result();
        if (result instanceof Boolean)         return ((Boolean)result).booleanValue();
 else         throw new DataException(ResourceConstants.EXPECT_BOOLEAN_RETURN_TYPE,""String_Node_Str"");
      }
    }
    if (scriptedEventHandler != null)     return scriptedEventHandler.fetch(new DataSetInstance(dataSet),new UpdatableDataSetRow(row));
  }
 catch (  Exception e) {
    addException(context,e);
  }
  return false;
}",0.9627547434996486
74334,"/** 
 * @return the test
 */
public static Test suite(){
  TestSuite test=new TestSuite();
  test.addTestSuite(CellOverlappingValidatorTest.class);
  test.addTestSuite(DataSetRequiredValidatorTest.class);
  test.addTestSuite(GroupNameValidatorTest.class);
  test.addTestSuite(InconsistentColumnsValidatorTest.class);
  test.addTestSuite(MasterPageMultiColumnValidatorTest.class);
  test.addTestSuite(MasterPageRequiredValidatorTest.class);
  test.addTestSuite(MasterPageSizeValidatorTest.class);
  test.addTestSuite(MasterPageTypeValidatorTest.class);
  test.addTestSuite(StructureListValidatorTest.class);
  test.addTestSuite(ValidationPerformanceTest.class);
  test.addTestSuite(ValueRequiredValidatorTest.class);
  return test;
}","/** 
 * @return the test
 */
public static Test suite(){
  TestSuite test=new TestSuite();
  test.addTestSuite(CellOverlappingValidatorTest.class);
  test.addTestSuite(DataSetRequiredValidatorTest.class);
  test.addTestSuite(GroupNameValidatorTest.class);
  test.addTestSuite(InconsistentColumnsValidatorTest.class);
  test.addTestSuite(MasterPageMultiColumnValidatorTest.class);
  test.addTestSuite(MasterPageRequiredValidatorTest.class);
  test.addTestSuite(MasterPageSizeValidatorTest.class);
  test.addTestSuite(MasterPageTypeValidatorTest.class);
  test.addTestSuite(StructureListValidatorTest.class);
  test.addTestSuite(ValidationPerformanceTest.class);
  test.addTestSuite(ValueRequiredValidatorTest.class);
  test.addTestSuite(DataColumnNameValidatorTest.class);
  return test;
}",0.963157894736842
74335,"public Object getValue(IResultIterator resultIterator) throws BirtException {
  Object value=resultIterator.getString(valueColumnName);
  return EngineTask.convertParameterType(value,valueType);
}","public Object getValue(IResultIterator resultIterator) throws BirtException {
  Object value=resultIterator.getValue(valueColumnName);
  return EngineTask.convertParameterType(value,valueType);
}",0.9718670076726342
74336,"/** 
 * @param cubeView
 * @param result
 * @param relationMap
 * @param manager
 * @param appContext
 * @throws OLAPException
 */
public CubeCursorImpl(BirtCubeView cubeView,IResultSet result,Map relationMap,MeasureNameManager manager,Map appContext) throws OLAPException {
  super(null,new AggregationAccessor(cubeView,result,relationMap,manager));
  if (result == null)   return;
  EdgeAxis[] calculatedMemberAxis=result.getMeasureResult();
  BirtEdgeView[] calculatedMemberView=cubeView.getMeasureEdgeView();
  if (calculatedMemberAxis != null) {
    for (int i=0; i < calculatedMemberAxis.length; i++) {
      pageEdge.add(new EdgeCursorImpl(calculatedMemberView[i],true,calculatedMemberAxis[i],this));
    }
  }
  if (cubeView.getColumnEdgeView() != null) {
    EdgeCursor columnEdgeCursor=new EdgeCursorImpl(cubeView.getColumnEdgeView(),false,result.getColumnEdgeResult(),this);
    if (appContext != null)     columnEdgeCursor.setFetchSize(populateFetchLimitSize(appContext.get(""String_Node_Str"")));
    result.getColumnEdgeResult().populateEdgeInfo();
    ordinateEdge.add(columnEdgeCursor);
  }
  if (cubeView.getRowEdgeView() != null) {
    EdgeCursor rowEdgeCursor=new EdgeCursorImpl(cubeView.getRowEdgeView(),false,result.getRowEdgeResult(),this);
    if (appContext != null)     rowEdgeCursor.setFetchSize(populateFetchLimitSize(appContext.get(""String_Node_Str"")));
    result.getRowEdgeResult().populateEdgeInfo();
    ordinateEdge.add(rowEdgeCursor);
  }
}","/** 
 * @param cubeView
 * @param result
 * @param relationMap
 * @param manager
 * @param appContext
 * @throws OLAPException
 */
public CubeCursorImpl(BirtCubeView cubeView,IResultSet result,Map relationMap,MeasureNameManager manager,Map appContext) throws OLAPException {
  super(null,new AggregationAccessor(cubeView,result,relationMap,manager));
  if (result == null)   return;
  EdgeAxis[] calculatedMemberAxis=result.getMeasureResult();
  BirtEdgeView[] calculatedMemberView=cubeView.getMeasureEdgeView();
  if (calculatedMemberAxis != null) {
    for (int i=0; i < calculatedMemberAxis.length; i++) {
      pageEdge.add(new EdgeCursorImpl(calculatedMemberView[i],true,calculatedMemberAxis[i],this));
    }
  }
  if (cubeView.getColumnEdgeView() != null) {
    EdgeCursor columnEdgeCursor=new EdgeCursorImpl(cubeView.getColumnEdgeView(),false,result.getColumnEdgeResult(),this);
    if (appContext != null)     columnEdgeCursor.setFetchSize(populateFetchLimitSize(appContext.get(DataEngine.CUBECURSOR_FETCH_LIMIT_ON_COLUMN_EDGE)));
    result.getColumnEdgeResult().populateEdgeInfo();
    ordinateEdge.add(columnEdgeCursor);
  }
  if (cubeView.getRowEdgeView() != null) {
    EdgeCursor rowEdgeCursor=new EdgeCursorImpl(cubeView.getRowEdgeView(),false,result.getRowEdgeResult(),this);
    if (appContext != null)     rowEdgeCursor.setFetchSize(populateFetchLimitSize(appContext.get(DataEngine.CUBECUSROR_FETCH_LIMIT_ON_ROW_EDGE)));
    result.getRowEdgeResult().populateEdgeInfo();
    ordinateEdge.add(rowEdgeCursor);
  }
}",0.9630369630369632
74337,"public IPreparedCubeQuery prepare(ICubeQueryDefinition query,Map appContext) throws BirtException {
  if (stopSign != null)   stopSign.start();
  if (this.cubeHandleMap.get(query.getName()) != null) {
    this.materializeCube((CubeHandle)this.cubeHandleMap.get(query.getName()),appContext,stopSign);
    this.cubeHandleMap.remove(query.getName());
  }
  ICubeQueryDefinition cubeQueryDefn=new CubeQueryDefinitionAdapter(query);
  if (this.sessionContext.getDataEngineContext().getMode() == DataEngineContext.DIRECT_PRESENTATION) {
    int size=0;
    if (appContext != null) {
      size=populateFetchLimitSize(appContext.get(DataEngine.CUBECURSOR_FETCH_LIMIT_ON_LEVEL));
      if (size > 0) {
        cubeQueryDefn.getFilters().addAll(fetchFilterList(cubeQueryDefn.getEdge(ICubeQueryDefinition.COLUMN_EDGE),size));
        cubeQueryDefn.getFilters().addAll(fetchFilterList(cubeQueryDefn.getEdge(ICubeQueryDefinition.ROW_EDGE),size));
      }
    }
  }
  return this.dataEngine.prepare(cubeQueryDefn,appContext);
}","public IPreparedCubeQuery prepare(ICubeQueryDefinition query,Map appContext) throws BirtException {
  if (stopSign != null)   stopSign.start();
  if (this.cubeHandleMap.get(query.getName()) != null) {
    this.materializeCube((CubeHandle)this.cubeHandleMap.get(query.getName()),appContext,stopSign);
    this.cubeHandleMap.remove(query.getName());
  }
  return this.dataEngine.prepare(query,appContext);
}",0.5130373502466525
74338,"protected MapDesign readMap(DataInputStream in) throws IOException {
  MapDesign map=new MapDesign();
  int ruleCount=IOUtil.readInt(in);
  for (int i=0; i < ruleCount; i++) {
    MapRuleDesign rule=new MapRuleDesign();
    ;
    String testExpr=IOUtil.readString(in);
    String oper=IOUtil.readString(in);
    boolean valuseIsList=IOUtil.readBool(in);
    if (valuseIsList) {
      List valueList=IOUtil.readList(in);
      rule.setExpression(oper,valueList);
    }
 else {
      String value1=IOUtil.readString(in);
      String value2=IOUtil.readString(in);
      rule.setExpression(oper,value1,value2);
    }
    String displayText=IOUtil.readString(in);
    String displayKey=IOUtil.readString(in);
    rule.setValueIsList(valuseIsList);
    rule.setTestExpression(testExpr);
    rule.setDisplayText(displayKey,displayText);
    map.addRule(rule);
  }
  return map;
}","protected MapDesign readMap(DataInputStream in) throws IOException {
  MapDesign map=new MapDesign();
  int ruleCount=IOUtil.readInt(in);
  for (int i=0; i < ruleCount; i++) {
    MapRuleDesign rule=new MapRuleDesign();
    ;
    String testExpr=IOUtil.readString(in);
    String oper=IOUtil.readString(in);
    Object object1=IOUtil.readObject(in);
    Object object2=IOUtil.readObject(in);
    if (object1 instanceof List) {
      rule.setExpression(oper,(List)object1);
      rule.setValueIsList(true);
    }
 else {
      rule.setExpression(oper,(String)object1,(String)object2);
      rule.setValueIsList(false);
    }
    String displayText=IOUtil.readString(in);
    String displayKey=IOUtil.readString(in);
    rule.setTestExpression(testExpr);
    rule.setDisplayText(displayKey,displayText);
    map.addRule(rule);
  }
  return map;
}",0.7373325567850902
74339,"protected HighlightDesign readHighlight(DataInputStream in) throws IOException {
  HighlightDesign highlight=new HighlightDesign();
  int ruleCount=IOUtil.readInt(in);
  for (int i=0; i < ruleCount; i++) {
    HighlightRuleDesign rule=new HighlightRuleDesign();
    String testExpr=IOUtil.readString(in);
    String oper=IOUtil.readString(in);
    boolean valuseIsList=IOUtil.readBool(in);
    if (valuseIsList) {
      List valueList=IOUtil.readList(in);
      rule.setExpression(oper,valueList);
    }
 else {
      String value1=IOUtil.readString(in);
      String value2=IOUtil.readString(in);
      rule.setExpression(oper,value1,value2);
    }
    IStyle style=readStyle(in);
    rule.setValueIsList(valuseIsList);
    rule.setTestExpression(testExpr);
    rule.setStyle(style);
    highlight.addRule(rule);
  }
  return highlight;
}","protected HighlightDesign readHighlight(DataInputStream in) throws IOException {
  HighlightDesign highlight=new HighlightDesign();
  int ruleCount=IOUtil.readInt(in);
  for (int i=0; i < ruleCount; i++) {
    HighlightRuleDesign rule=new HighlightRuleDesign();
    String testExpr=IOUtil.readString(in);
    String oper=IOUtil.readString(in);
    Object object1=IOUtil.readObject(in);
    Object object2=IOUtil.readObject(in);
    if (object1 instanceof List) {
      rule.setExpression(oper,(List)object1);
      rule.setValueIsList(true);
    }
 else {
      rule.setExpression(oper,(String)object1,(String)object2);
      rule.setValueIsList(false);
    }
    IStyle style=readStyle(in);
    rule.setTestExpression(testExpr);
    rule.setStyle(style);
    highlight.addRule(rule);
  }
  return highlight;
}",0.7265009096422074
74340,"protected void writeMap(DataOutputStream out,MapDesign map) throws IOException {
  int ruleCount=map.getRuleCount();
  IOUtil.writeInt(out,ruleCount);
  for (int i=0; i < ruleCount; i++) {
    MapRuleDesign rule=map.getRule(i);
    IOUtil.writeString(out,rule.getTestExpression());
    IOUtil.writeString(out,rule.getOperator());
    IOUtil.writeBool(out,rule.ifValueIsList());
    if (rule.ifValueIsList()) {
      IOUtil.writeList(out,rule.getValue1List());
    }
 else {
      IOUtil.writeString(out,rule.getValue1());
      IOUtil.writeString(out,rule.getValue2());
    }
    IOUtil.writeString(out,rule.getDisplayText());
    IOUtil.writeString(out,rule.getDisplayKey());
  }
}","protected void writeMap(DataOutputStream out,MapDesign map) throws IOException {
  int ruleCount=map.getRuleCount();
  IOUtil.writeInt(out,ruleCount);
  for (int i=0; i < ruleCount; i++) {
    MapRuleDesign rule=map.getRule(i);
    IOUtil.writeString(out,rule.getTestExpression());
    IOUtil.writeString(out,rule.getOperator());
    if (rule.ifValueIsList()) {
      IOUtil.writeObject(out,rule.getValue1List());
      IOUtil.writeObject(out,null);
    }
 else {
      IOUtil.writeObject(out,rule.getValue1());
      IOUtil.writeObject(out,rule.getValue2());
    }
    IOUtil.writeString(out,rule.getDisplayText());
    IOUtil.writeString(out,rule.getDisplayKey());
  }
}",0.9084194977843428
74341,"protected void writeHighlight(DataOutputStream out,HighlightDesign highlight) throws IOException {
  int ruleCount=highlight.getRuleCount();
  IOUtil.writeInt(out,ruleCount);
  for (int i=0; i < ruleCount; i++) {
    HighlightRuleDesign rule=highlight.getRule(i);
    IOUtil.writeString(out,rule.getTestExpression());
    IOUtil.writeString(out,rule.getOperator());
    IOUtil.writeBool(out,rule.ifValueIsList());
    if (rule.ifValueIsList()) {
      IOUtil.writeList(out,rule.getValue1List());
    }
 else {
      IOUtil.writeString(out,rule.getValue1());
      IOUtil.writeString(out,rule.getValue2());
    }
    writeStyle(out,rule.getStyle());
  }
}","protected void writeHighlight(DataOutputStream out,HighlightDesign highlight) throws IOException {
  int ruleCount=highlight.getRuleCount();
  IOUtil.writeInt(out,ruleCount);
  for (int i=0; i < ruleCount; i++) {
    HighlightRuleDesign rule=highlight.getRule(i);
    IOUtil.writeString(out,rule.getTestExpression());
    IOUtil.writeString(out,rule.getOperator());
    if (rule.ifValueIsList()) {
      IOUtil.writeObject(out,rule.getValue1List());
      IOUtil.writeObject(out,null);
    }
 else {
      IOUtil.writeObject(out,rule.getValue1());
      IOUtil.writeObject(out,rule.getValue2());
    }
    writeStyle(out,rule.getStyle());
  }
}",0.7426810477657936
74342,"/** 
 * Test all get/set accessors in base class set values of the rule then get the values one by one to test if they work correctly
 */
public void testBaseRule(){
  String[] operator={EngineIRConstants.MAP_OPERATOR_ANY,EngineIRConstants.MAP_OPERATOR_BETWEEN,EngineIRConstants.MAP_OPERATOR_EQ,EngineIRConstants.MAP_OPERATOR_FALSE,EngineIRConstants.MAP_OPERATOR_GE,EngineIRConstants.MAP_OPERATOR_GT,EngineIRConstants.MAP_OPERATOR_LE,EngineIRConstants.MAP_OPERATOR_LIKE,EngineIRConstants.MAP_OPERATOR_LT,EngineIRConstants.MAP_OPERATOR_NE,EngineIRConstants.MAP_OPERATOR_NOT_BETWEEN,EngineIRConstants.MAP_OPERATOR_NOT_NULL,EngineIRConstants.MAP_OPERATOR_NULL,EngineIRConstants.MAP_OPERATOR_TRUE};
  for (int i=0; i < operator.length; i++) {
    rule.setExpression(operator[i],""String_Node_Str"",""String_Node_Str"");
    assertEquals(rule.getOperator(),operator[i]);
    assertEquals(rule.getValue1(),""String_Node_Str"");
    assertEquals(rule.getValue2(),""String_Node_Str"");
  }
}","/** 
 * Test all get/set accessors in base class set values of the rule then get the values one by one to test if they work correctly
 */
public void testBaseRule(){
  String[] operator={EngineIRConstants.MAP_OPERATOR_ANY,EngineIRConstants.MAP_OPERATOR_BETWEEN,EngineIRConstants.MAP_OPERATOR_EQ,EngineIRConstants.MAP_OPERATOR_FALSE,EngineIRConstants.MAP_OPERATOR_GE,EngineIRConstants.MAP_OPERATOR_GT,EngineIRConstants.MAP_OPERATOR_LE,EngineIRConstants.MAP_OPERATOR_LIKE,EngineIRConstants.MAP_OPERATOR_LT,EngineIRConstants.MAP_OPERATOR_NE,EngineIRConstants.MAP_OPERATOR_NOT_BETWEEN,EngineIRConstants.MAP_OPERATOR_NOT_NULL,EngineIRConstants.MAP_OPERATOR_NULL,EngineIRConstants.MAP_OPERATOR_TRUE};
  for (int i=0; i < operator.length; i++) {
    rule.setExpression(operator[i],""String_Node_Str"",""String_Node_Str"");
    assertEquals(rule.getOperator(),operator[i]);
    assertEquals(rule.getValue1(),""String_Node_Str"");
    assertEquals(rule.getValue2(),""String_Node_Str"");
  }
  String operator1=EngineIRConstants.MAP_OPERATOR_IN;
  ArrayList values=new ArrayList();
  values.add(""String_Node_Str"");
  values.add(""String_Node_Str"");
  values.add(""String_Node_Str"");
  values.add(""String_Node_Str"");
  rule.setExpression(operator1,values);
  List vs=rule.getValue1List();
  assertEquals(rule.getOperator(),operator1);
  assertEquals(values.size(),vs.size());
  assertEquals(values.get(0),vs.get(0));
  assertEquals(values.get(1),vs.get(1));
  assertEquals(values.get(2),vs.get(2));
  assertEquals(values.get(3),vs.get(3));
}",0.781563126252505
74343,"/** 
 * Get the highlight style.
 * @param style The style with highlight.
 * @param defaultTestExp the test expression
 * @return The highlight style.
 */
private StyleDeclaration createHighlightStyle(HighlightDesign highlight){
  StyleDeclaration style=(StyleDeclaration)report.createStyle();
  for (int i=0; i < highlight.getRuleCount(); i++) {
    HighlightRuleDesign rule=highlight.getRule(i);
    if (rule != null) {
      Object value=null;
      Object expression=rule.getConditionExpr();
      if (expression != null) {
        if (expression instanceof String) {
          value=evaluate((String)expression);
        }
 else {
          value=evaluate((IConditionalExpression)expression);
        }
      }
 else {
        IConditionalExpression newExpression=expressionUtil.createConditionalExpression(rule.getTestExpression(),rule.getOperator(),rule.getValue1(),rule.getValue2());
        value=evaluate(newExpression);
      }
      if ((value != null) && (value instanceof Boolean) && (((Boolean)value).booleanValue())) {
        style.setProperties(rule.getStyle());
      }
    }
  }
  return style;
}","/** 
 * Get the highlight style.
 * @param style The style with highlight.
 * @param defaultTestExp the test expression
 * @return The highlight style.
 */
private StyleDeclaration createHighlightStyle(HighlightDesign highlight){
  StyleDeclaration style=(StyleDeclaration)report.createStyle();
  for (int i=0; i < highlight.getRuleCount(); i++) {
    HighlightRuleDesign rule=highlight.getRule(i);
    if (rule != null) {
      Object value=null;
      Object expression=rule.getConditionExpr();
      if (expression != null) {
        if (expression instanceof String) {
          value=evaluate((String)expression);
        }
 else {
          value=evaluate((IConditionalExpression)expression);
        }
      }
 else {
        IConditionalExpression newExpression=null;
        if (rule.ifValueIsList()) {
          newExpression=expressionUtil.createConditionExpression(rule.getTestExpression(),rule.getOperator(),rule.getValue1List());
        }
 else {
          newExpression=expressionUtil.createConditionalExpression(rule.getTestExpression(),rule.getOperator(),rule.getValue1(),rule.getValue2());
        }
        value=evaluate(newExpression);
      }
      if ((value != null) && (value instanceof Boolean) && (((Boolean)value).booleanValue())) {
        style.setProperties(rule.getStyle());
      }
    }
  }
  return style;
}",0.7934959349593496
74344,"/** 
 * process the mapped rules.
 * @param item the design element used to create the data obj.
 * @param dataObj Data object.
 */
protected void processMappingValue(StyledElementDesign item,IDataContent dataObj){
  MapDesign map=item.getMap();
  if (item instanceof DataItemDesign) {
    if (((DataItemDesign)item).needRefreshMapping()) {
      DataItemHandle dataHandle=(DataItemHandle)item.getHandle();
      FactoryPropertyHandle fph=dataHandle.getFactoryPropertyHandle(StyleHandle.MAP_RULES_PROP);
      if (fph != null) {
        Object val=fph.getValue();
        if (val instanceof List && ((List)val).size() > 0) {
          String testExpr=org.eclipse.birt.core.data.ExpressionUtil.createJSDataExpression(dataHandle.getResultSetColumn());
          for (Iterator itr=((List)val).iterator(); itr.hasNext(); ) {
            MapRule mrh=(MapRule)itr.next();
            if (testExpr.equals(mrh.getTestExpression()) && DesignChoiceConstants.MAP_OPERATOR_NULL.equals(mrh.getOperator())) {
              Object value=null;
              IConditionalExpression newExpression=expressionUtil.createConditionalExpression(mrh.getTestExpression(),mrh.getOperator(),mrh.getValue1(),mrh.getValue2());
              value=evaluate(newExpression);
              if ((value != null) && (value instanceof Boolean) && (((Boolean)value).booleanValue())) {
                dataObj.setLabelText(mrh.getDisplay());
                dataObj.setLabelKey(mrh.getDisplayKey());
              }
              break;
            }
          }
        }
      }
    }
  }
  if (map != null) {
    for (int i=0; i < map.getRuleCount(); i++) {
      MapRuleDesign rule=map.getRule(i);
      if (rule != null) {
        Object value=null;
        Object expression=rule.getConditionExpr();
        if (expression != null) {
          if (expression instanceof String) {
            value=evaluate((String)expression);
          }
 else {
            value=evaluate((IConditionalExpression)expression);
          }
        }
 else {
          IConditionalExpression newExpression=expressionUtil.createConditionalExpression(rule.getTestExpression(),rule.getOperator(),rule.getValue1(),rule.getValue2());
          value=evaluate(newExpression);
        }
        if ((value != null) && (value instanceof Boolean) && (((Boolean)value).booleanValue())) {
          dataObj.setLabelText(rule.getDisplayText());
          dataObj.setLabelKey(rule.getDisplayKey());
        }
      }
    }
  }
}","/** 
 * process the mapped rules.
 * @param item the design element used to create the data obj.
 * @param dataObj Data object.
 */
protected void processMappingValue(StyledElementDesign item,IDataContent dataObj){
  MapDesign map=item.getMap();
  if (item instanceof DataItemDesign) {
    if (((DataItemDesign)item).needRefreshMapping()) {
      DataItemHandle dataHandle=(DataItemHandle)item.getHandle();
      FactoryPropertyHandle fph=dataHandle.getFactoryPropertyHandle(StyleHandle.MAP_RULES_PROP);
      if (fph != null) {
        Object val=fph.getValue();
        if (val instanceof List && ((List)val).size() > 0) {
          String testExpr=org.eclipse.birt.core.data.ExpressionUtil.createJSDataExpression(dataHandle.getResultSetColumn());
          for (Iterator itr=((List)val).iterator(); itr.hasNext(); ) {
            MapRule mrh=(MapRule)itr.next();
            if (testExpr.equals(mrh.getTestExpression()) && DesignChoiceConstants.MAP_OPERATOR_NULL.equals(mrh.getOperator())) {
              Object value=null;
              IConditionalExpression newExpression=expressionUtil.createConditionalExpression(mrh.getTestExpression(),mrh.getOperator(),mrh.getValue1(),mrh.getValue2());
              value=evaluate(newExpression);
              if ((value != null) && (value instanceof Boolean) && (((Boolean)value).booleanValue())) {
                dataObj.setLabelText(mrh.getDisplay());
                dataObj.setLabelKey(mrh.getDisplayKey());
              }
              break;
            }
          }
        }
      }
    }
  }
  if (map != null) {
    for (int i=0; i < map.getRuleCount(); i++) {
      MapRuleDesign rule=map.getRule(i);
      if (rule != null) {
        Object value=null;
        Object expression=rule.getConditionExpr();
        if (expression != null) {
          if (expression instanceof String) {
            value=evaluate((String)expression);
          }
 else {
            value=evaluate((IConditionalExpression)expression);
          }
        }
 else {
          IConditionalExpression newExpression=null;
          if (rule.ifValueIsList()) {
            newExpression=expressionUtil.createConditionExpression(rule.getTestExpression(),rule.getOperator(),rule.getValue1List());
          }
 else {
            newExpression=expressionUtil.createConditionalExpression(rule.getTestExpression(),rule.getOperator(),rule.getValue1(),rule.getValue2());
          }
          value=evaluate(newExpression);
        }
        if ((value != null) && (value instanceof Boolean) && (((Boolean)value).booleanValue())) {
          dataObj.setLabelText(rule.getDisplayText());
          dataObj.setLabelKey(rule.getDisplayKey());
        }
      }
    }
  }
}",0.9535423925667827
74345,"protected MapDesign readMap(DataInputStream in) throws IOException {
  MapDesign map=new MapDesign();
  int ruleCount=IOUtil.readInt(in);
  for (int i=0; i < ruleCount; i++) {
    MapRuleDesign rule=new MapRuleDesign();
    ;
    String testExpr=IOUtil.readString(in);
    String oper=IOUtil.readString(in);
    String value1=IOUtil.readString(in);
    String value2=IOUtil.readString(in);
    String displayText=IOUtil.readString(in);
    String displayKey=IOUtil.readString(in);
    rule.setTestExpression(testExpr);
    rule.setExpression(oper,value1,value2);
    rule.setDisplayText(displayKey,displayText);
    map.addRule(rule);
  }
  return map;
}","protected MapDesign readMap(DataInputStream in) throws IOException {
  MapDesign map=new MapDesign();
  int ruleCount=IOUtil.readInt(in);
  for (int i=0; i < ruleCount; i++) {
    MapRuleDesign rule=new MapRuleDesign();
    ;
    String testExpr=IOUtil.readString(in);
    String oper=IOUtil.readString(in);
    boolean valuseIsList=IOUtil.readBool(in);
    if (valuseIsList) {
      List valueList=IOUtil.readList(in);
      rule.setExpression(oper,valueList);
    }
 else {
      String value1=IOUtil.readString(in);
      String value2=IOUtil.readString(in);
      rule.setExpression(oper,value1,value2);
    }
    String displayText=IOUtil.readString(in);
    String displayKey=IOUtil.readString(in);
    rule.setValueIsList(valuseIsList);
    rule.setTestExpression(testExpr);
    rule.setDisplayText(displayKey,displayText);
    map.addRule(rule);
  }
  return map;
}",0.6286836935166994
74346,"protected HighlightDesign readHighlight(DataInputStream in) throws IOException {
  HighlightDesign highlight=new HighlightDesign();
  int ruleCount=IOUtil.readInt(in);
  for (int i=0; i < ruleCount; i++) {
    HighlightRuleDesign rule=new HighlightRuleDesign();
    String testExpr=IOUtil.readString(in);
    String oper=IOUtil.readString(in);
    String value1=IOUtil.readString(in);
    String value2=IOUtil.readString(in);
    IStyle style=readStyle(in);
    rule.setTestExpression(testExpr);
    rule.setExpression(oper,value1,value2);
    rule.setStyle(style);
    highlight.addRule(rule);
  }
  return highlight;
}","protected HighlightDesign readHighlight(DataInputStream in) throws IOException {
  HighlightDesign highlight=new HighlightDesign();
  int ruleCount=IOUtil.readInt(in);
  for (int i=0; i < ruleCount; i++) {
    HighlightRuleDesign rule=new HighlightRuleDesign();
    String testExpr=IOUtil.readString(in);
    String oper=IOUtil.readString(in);
    boolean valuseIsList=IOUtil.readBool(in);
    if (valuseIsList) {
      List valueList=IOUtil.readList(in);
      rule.setExpression(oper,valueList);
    }
 else {
      String value1=IOUtil.readString(in);
      String value2=IOUtil.readString(in);
      rule.setExpression(oper,value1,value2);
    }
    IStyle style=readStyle(in);
    rule.setValueIsList(valuseIsList);
    rule.setTestExpression(testExpr);
    rule.setStyle(style);
    highlight.addRule(rule);
  }
  return highlight;
}",0.6963673749143249
74347,"protected void writeMap(DataOutputStream out,MapDesign map) throws IOException {
  int ruleCount=map.getRuleCount();
  IOUtil.writeInt(out,ruleCount);
  for (int i=0; i < ruleCount; i++) {
    MapRuleDesign rule=map.getRule(i);
    IOUtil.writeString(out,rule.getTestExpression());
    IOUtil.writeString(out,rule.getOperator());
    IOUtil.writeString(out,rule.getValue1());
    IOUtil.writeString(out,rule.getValue2());
    IOUtil.writeString(out,rule.getDisplayText());
    IOUtil.writeString(out,rule.getDisplayKey());
  }
}","protected void writeMap(DataOutputStream out,MapDesign map) throws IOException {
  int ruleCount=map.getRuleCount();
  IOUtil.writeInt(out,ruleCount);
  for (int i=0; i < ruleCount; i++) {
    MapRuleDesign rule=map.getRule(i);
    IOUtil.writeString(out,rule.getTestExpression());
    IOUtil.writeString(out,rule.getOperator());
    IOUtil.writeBool(out,rule.ifValueIsList());
    if (rule.ifValueIsList()) {
      IOUtil.writeList(out,rule.getValue1List());
    }
 else {
      IOUtil.writeString(out,rule.getValue1());
      IOUtil.writeString(out,rule.getValue2());
    }
    IOUtil.writeString(out,rule.getDisplayText());
    IOUtil.writeString(out,rule.getDisplayKey());
  }
}",0.8727272727272727
74348,"protected void writeHighlight(DataOutputStream out,HighlightDesign highlight) throws IOException {
  int ruleCount=highlight.getRuleCount();
  IOUtil.writeInt(out,ruleCount);
  for (int i=0; i < ruleCount; i++) {
    HighlightRuleDesign rule=highlight.getRule(i);
    IOUtil.writeString(out,rule.getTestExpression());
    IOUtil.writeString(out,rule.getOperator());
    IOUtil.writeString(out,rule.getValue1());
    IOUtil.writeString(out,rule.getValue2());
    writeStyle(out,rule.getStyle());
  }
}","protected void writeHighlight(DataOutputStream out,HighlightDesign highlight) throws IOException {
  int ruleCount=highlight.getRuleCount();
  IOUtil.writeInt(out,ruleCount);
  for (int i=0; i < ruleCount; i++) {
    HighlightRuleDesign rule=highlight.getRule(i);
    IOUtil.writeString(out,rule.getTestExpression());
    IOUtil.writeString(out,rule.getOperator());
    IOUtil.writeBool(out,rule.ifValueIsList());
    if (rule.ifValueIsList()) {
      IOUtil.writeList(out,rule.getValue1List());
    }
 else {
      IOUtil.writeString(out,rule.getValue1());
      IOUtil.writeString(out,rule.getValue2());
    }
    writeStyle(out,rule.getStyle());
  }
}",0.8665511265164645
74349,"public void setExpression(String operator,String value1,String value2){
  this.operator=operator;
  this.value1=value1;
  this.value2=value2;
}","public void setExpression(String operator,String value1,String value2){
  this.operator=operator;
  this.value1=value1;
  this.value2=value2;
  this.valueIsList=false;
}",0.9166666666666666
74350,"/** 
 * create a map rule.
 * @param obj map rule in DE.
 * @return map rule in ENGINE.
 */
protected MapRuleDesign createMapRule(MapRuleHandle handle,String defaultStr){
  MapRuleDesign rule=new MapRuleDesign();
  rule.setExpression(handle.getOperator(),handle.getValue1(),handle.getValue2());
  String displayText=handle.getDisplay();
  rule.setDisplayText(handle.getDisplayKey(),displayText == null ? ""String_Node_Str"" : displayText);
  String testExpr=handle.getTestExpression();
  if (testExpr != null && testExpr.length() > 0) {
    rule.setTestExpression(testExpr);
  }
 else   if ((defaultStr != null) && defaultStr.length() > 0) {
    rule.setTestExpression(defaultStr);
  }
 else {
    return null;
  }
  return rule;
}","/** 
 * create a map rule.
 * @param obj map rule in DE.
 * @return map rule in ENGINE.
 */
protected MapRuleDesign createMapRule(MapRuleHandle handle,String defaultStr){
  boolean isListStyle=ModuleUtil.isListStyleRuleValue(handle);
  MapRuleDesign rule=new MapRuleDesign();
  if (isListStyle) {
    rule.setExpression(handle.getOperator(),handle.getValue1List());
  }
 else {
    rule.setExpression(handle.getOperator(),handle.getValue1(),handle.getValue2());
  }
  String displayText=handle.getDisplay();
  rule.setDisplayText(handle.getDisplayKey(),displayText == null ? ""String_Node_Str"" : displayText);
  String testExpr=handle.getTestExpression();
  if (testExpr != null && testExpr.length() > 0) {
    rule.setTestExpression(testExpr);
  }
 else   if ((defaultStr != null) && defaultStr.length() > 0) {
    rule.setTestExpression(defaultStr);
  }
 else {
    return null;
  }
  return rule;
}",0.892572130141191
74351,"/** 
 * create a highlight rule from a structure handle.
 * @param ruleHandle rule in the MODEL.
 * @return rule design, null if exist any error.
 */
protected HighlightRuleDesign createHighlightRule(StructureHandle ruleHandle,String defaultStr){
  HighlightRuleDesign rule=new HighlightRuleDesign();
  MemberHandle hOperator=ruleHandle.getMember(HighlightRule.OPERATOR_MEMBER);
  MemberHandle hValue1=ruleHandle.getMember(HighlightRule.VALUE1_MEMBER);
  MemberHandle hValue2=ruleHandle.getMember(HighlightRule.VALUE2_MEMBER);
  MemberHandle hTestExpr=ruleHandle.getMember(HighlightRule.TEST_EXPR_MEMBER);
  String oper=hOperator.getStringValue();
  String value1=hValue1.getStringValue();
  String value2=hValue2.getStringValue();
  String testExpr=hTestExpr.getStringValue();
  rule.setExpression(oper,value1,value2);
  if (testExpr != null && testExpr.length() > 0) {
    rule.setTestExpression(testExpr);
  }
 else   if ((defaultStr != null) && defaultStr.length() > 0) {
    rule.setTestExpression(defaultStr);
  }
 else {
    return null;
  }
  StyleDeclaration style=new StyleDeclaration(cssEngine);
  setupStyle(ruleHandle,style);
  if (style.isEmpty()) {
    return null;
  }
  rule.setStyle(style);
  return rule;
}","/** 
 * create a highlight rule from a structure handle.
 * @param ruleHandle rule in the MODEL.
 * @return rule design, null if exist any error.
 */
protected HighlightRuleDesign createHighlightRule(HighlightRuleHandle ruleHandle,String defaultStr){
  boolean isListStyle=ModuleUtil.isListStyleRuleValue(ruleHandle);
  HighlightRuleDesign rule=new HighlightRuleDesign();
  if (isListStyle) {
    rule.setExpression(ruleHandle.getOperator(),ruleHandle.getValue1List());
  }
 else {
    rule.setExpression(ruleHandle.getOperator(),ruleHandle.getValue1(),ruleHandle.getValue2());
  }
  String testExpr=ruleHandle.getTestExpression();
  if (testExpr != null && testExpr.length() > 0) {
    rule.setTestExpression(testExpr);
  }
 else   if ((defaultStr != null) && defaultStr.length() > 0) {
    rule.setTestExpression(defaultStr);
  }
 else {
    return null;
  }
  StyleDeclaration style=new StyleDeclaration(cssEngine);
  setupStyle(ruleHandle,style);
  if (style.isEmpty()) {
    return null;
  }
  rule.setStyle(style);
  return rule;
}",0.6410256410256411
74352,"private Collection populateToList(IResultIterator iterator,ScalarParameterHandle parameter,SelectionFilter filter){
  ParameterHelper parameterHelper=new ParameterHelper(parameter,locale);
  Collection choices=parameterHelper.createSelectionCollection();
  int limit=parameter.getListlimit();
  try {
    while (iterator.next() && (limit <= 0 || choices.size() <= limit)) {
      if (filter != null && !filter.accept(iterator)) {
        continue;
      }
      String label=parameterHelper.getLabel(iterator);
      Object value=parameterHelper.getValue(iterator);
      choices.add(new SelectionChoice(label,value));
    }
  }
 catch (  BirtException ex) {
    log.log(Level.WARNING,ex.getMessage(),ex);
    executionContext.addException(ex);
  }
  return choices;
}","private Collection populateToList(IResultIterator iterator,ScalarParameterHandle parameter,SelectionFilter filter){
  ParameterHelper parameterHelper=new ParameterHelper(parameter,locale);
  Collection choices=parameterHelper.createSelectionCollection();
  int limit=parameter.getListlimit();
  try {
    while (iterator.next() && (limit <= 0 || choices.size() < limit)) {
      if (filter != null && !filter.accept(iterator)) {
        continue;
      }
      String label=parameterHelper.getLabel(iterator);
      Object value=parameterHelper.getValue(iterator);
      choices.add(new SelectionChoice(label,value));
    }
  }
 catch (  BirtException ex) {
    log.log(Level.WARNING,ex.getMessage(),ex);
    executionContext.addException(ex);
  }
  return choices;
}",0.9993485342019544
74353,"public ParameterHelper(ScalarParameterHandle parameter,Locale locale){
  this.parameter=parameter;
  this.distinct=parameter.distinct();
  this.labelColumnName=getLabelColumnName(parameter);
  this.valueColumnName=getValueColumnName(parameter);
  this.valueType=parameter.getDataType();
  if (parameter.isFixedOrder()) {
    this.comparator=new FixInOrderComparator(distinct);
  }
 else {
    this.comparator=createComparator(parameter,locale,distinct);
  }
}","public ParameterHelper(ScalarParameterHandle parameter,Locale locale){
  this.distinct=parameter.distinct();
  this.labelColumnName=getLabelColumnName(parameter);
  this.valueColumnName=getValueColumnName(parameter);
  this.valueType=parameter.getDataType();
  this.fixedOrder=parameter.isFixedOrder();
  if (!fixedOrder) {
    boolean sortDirectionValue=""String_Node_Str"".equalsIgnoreCase(parameter.getSortDirection());
    boolean sortByLabel=""String_Node_Str"".equalsIgnoreCase(parameter.getSortBy());
    String pattern=parameter.getPattern();
    Comparator choiceComparator=new SelectionChoiceComparator(sortByLabel,pattern,sortDirectionValue,ULocale.forLocale(locale));
    this.comparator=new DistinctComparatorDecorator(choiceComparator,distinct);
  }
}",0.5311475409836065
74354,"public Collection createSelectionCollection(){
  return new TreeSet(comparator);
}","public Collection createSelectionCollection(){
  if (fixedOrder) {
    if (!distinct) {
      return new ArrayList();
    }
    return new ArrayList(){
      private static final long serialVersionUID=1L;
      private Set values=new HashSet();
      public boolean add(      Object arg0){
        if (!values.contains(arg0)) {
          values.add(arg0);
          return super.add(arg0);
        }
        return false;
      }
    }
;
  }
  return new TreeSet(comparator);
}",0.293381037567084
74355,"/** 
 * Provides the definition of a data source to Data Engine. A data source must be defined using this method prior to preparing any report query that uses such data source. <br> Data sources are uniquely identified name. If specified data source has already been defined, its definition will be updated with the content of the provided DataSourceDesign
 */
public void defineDataSource(IBaseDataSourceDesign dataSource) throws DataException {
  logger.entering(DataEngineImpl.class.getName(),""String_Node_Str"",dataSource == null ? null : dataSource.getName());
  if (dataSource == null) {
    NullPointerException e=new NullPointerException(""String_Node_Str"");
    logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  if (dataSources == null) {
    IllegalStateException e=new IllegalStateException(""String_Node_Str"");
    logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  String name=dataSource.getName();
  if (name == null || name.length() == 0) {
    IllegalArgumentException e=new IllegalArgumentException(""String_Node_Str"");
    logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  if (logger.isLoggable(Level.FINE))   logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(dataSource));
  Object existingDefn=dataSources.get(dataSource.getName());
  if (existingDefn != null)   this.dataSourceManager.addDataSource((DataSourceRuntime)existingDefn);
  DataSourceRuntime newDefn=DataSourceRuntime.newInstance(dataSource,this);
  dataSources.put(newDefn.getName(),newDefn);
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}","/** 
 * Provides the definition of a data source to Data Engine. A data source must be defined using this method prior to preparing any report query that uses such data source. <br> Data sources are uniquely identified name. If specified data source has already been defined, its definition will be updated with the content of the provided DataSourceDesign
 */
public void defineDataSource(IBaseDataSourceDesign dataSource) throws DataException {
  logger.entering(DataEngineImpl.class.getName(),""String_Node_Str"",dataSource == null ? ""String_Node_Str"" : dataSource.getName());
  if (dataSource == null) {
    NullPointerException e=new NullPointerException(""String_Node_Str"");
    logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  if (dataSources == null) {
    IllegalStateException e=new IllegalStateException(""String_Node_Str"");
    logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  String name=dataSource.getName();
  if (name == null || name.length() == 0) {
    IllegalArgumentException e=new IllegalArgumentException(""String_Node_Str"");
    logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  if (logger.isLoggable(Level.FINE))   logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(dataSource));
  Object existingDefn=dataSources.get(dataSource.getName());
  if (existingDefn != null)   this.dataSourceManager.addDataSource((DataSourceRuntime)existingDefn);
  DataSourceRuntime newDefn=DataSourceRuntime.newInstance(dataSource,this);
  dataSources.put(newDefn.getName(),newDefn);
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}",0.9941779872470196
74356,"/** 
 * Provides the definition of a data set to Data Engine. A data set must be defined using this method prior to preparing any report query that uses such data set. <br> Data sets are uniquely identified name. If specified data set has already been defined, its definition will be updated with the content of the provided DataSetDesign
 */
public void defineDataSet(IBaseDataSetDesign dataSet) throws DataException {
  logger.entering(DataEngineImpl.class.getName(),""String_Node_Str"",dataSet == null ? null : dataSet.getName());
  if (dataSet == null) {
    NullPointerException e=new NullPointerException(""String_Node_Str"");
    logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  if (dataSources == null) {
    IllegalStateException e=new IllegalStateException(""String_Node_Str"");
    logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  String name=dataSet.getName();
  if (name == null || name.length() == 0) {
    IllegalArgumentException e=new IllegalArgumentException(""String_Node_Str"");
    logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  if (logger.isLoggable(Level.FINE))   logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(dataSet));
  if (!(dataSet instanceof IJointDataSetDesign)) {
    String dataSourceName=dataSet.getDataSourceName();
    DataSourceRuntime dsource=this.getDataSourceRuntime(dataSourceName);
    if (dsource == null) {
      DataException e=new DataException(ResourceConstants.UNDEFINED_DATA_SOURCE,dataSourceName);
      logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"" + dataSourceName + ""String_Node_Str"",e);
      throw e;
    }
    Class dSourceClass;
    if (dataSet instanceof IOdaDataSetDesign)     dSourceClass=IOdaDataSourceDesign.class;
 else     if (dataSet instanceof IScriptDataSetDesign)     dSourceClass=IScriptDataSourceDesign.class;
 else {
      DataException e=new DataException(ResourceConstants.UNSUPPORTED_DATASET_TYPE);
      logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"" + dataSet.getName(),e);
      throw e;
    }
    if (!dSourceClass.isInstance(dsource.getDesign())) {
      DataException e=new DataException(ResourceConstants.UNSUPPORTED_DATASOURCE_TYPE,dsource.getName());
      logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"" + dsource.getName(),e);
      throw e;
    }
  }
  dataSetDesigns.put(name,dataSet);
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}","/** 
 * Provides the definition of a data set to Data Engine. A data set must be defined using this method prior to preparing any report query that uses such data set. <br> Data sets are uniquely identified name. If specified data set has already been defined, its definition will be updated with the content of the provided DataSetDesign
 */
public void defineDataSet(IBaseDataSetDesign dataSet) throws DataException {
  logger.entering(DataEngineImpl.class.getName(),""String_Node_Str"",dataSet == null ? ""String_Node_Str"" : dataSet.getName());
  if (dataSet == null) {
    NullPointerException e=new NullPointerException(""String_Node_Str"");
    logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  if (dataSources == null) {
    IllegalStateException e=new IllegalStateException(""String_Node_Str"");
    logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  String name=dataSet.getName();
  if (name == null || name.length() == 0) {
    IllegalArgumentException e=new IllegalArgumentException(""String_Node_Str"");
    logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  if (logger.isLoggable(Level.FINE))   logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(dataSet));
  if (!(dataSet instanceof IJointDataSetDesign)) {
    String dataSourceName=dataSet.getDataSourceName();
    DataSourceRuntime dsource=this.getDataSourceRuntime(dataSourceName);
    if (dsource == null) {
      DataException e=new DataException(ResourceConstants.UNDEFINED_DATA_SOURCE,dataSourceName);
      logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"" + dataSourceName + ""String_Node_Str"",e);
      throw e;
    }
    Class dSourceClass;
    if (dataSet instanceof IOdaDataSetDesign)     dSourceClass=IOdaDataSourceDesign.class;
 else     if (dataSet instanceof IScriptDataSetDesign)     dSourceClass=IScriptDataSourceDesign.class;
 else {
      DataException e=new DataException(ResourceConstants.UNSUPPORTED_DATASET_TYPE);
      logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"" + dataSet.getName(),e);
      throw e;
    }
    if (!dSourceClass.isInstance(dsource.getDesign())) {
      DataException e=new DataException(ResourceConstants.UNSUPPORTED_DATASOURCE_TYPE,dsource.getName());
      logger.logp(Level.WARNING,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"" + dsource.getName(),e);
      throw e;
    }
  }
  dataSetDesigns.put(name,dataSet);
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}",0.996172772006561
74357,"public void close() throws OLAPException {
  if (this.resultSet.getMeasureResult() == null)   return;
  List errorList=new ArrayList();
  for (int i=0; i < this.resultSet.getMeasureResult().length; i++) {
    try {
      this.resultSet.getMeasureResult()[i].getQueryResultSet().close();
    }
 catch (    IOException e) {
      errorList.add(e);
    }
  }
  if (!errorList.isEmpty()) {
    throw new OLAPException(((IOException)errorList.get(0)).getLocalizedMessage());
  }
}","public void close() throws OLAPException {
  if (this.resultSet == null || this.resultSet.getMeasureResult() == null)   return;
  List errorList=new ArrayList();
  for (int i=0; i < this.resultSet.getMeasureResult().length; i++) {
    try {
      this.resultSet.getMeasureResult()[i].getQueryResultSet().close();
    }
 catch (    IOException e) {
      errorList.add(e);
    }
  }
  if (!errorList.isEmpty()) {
    throw new OLAPException(((IOException)errorList.get(0)).getLocalizedMessage());
  }
}",0.9733606557377048
74358,"/** 
 * Adds the given structures to the corresponding property values. For example, adds result set columns to DataSet.resultSets.
 * @param propHandle the property handle
 * @param structures the list containing structures
 * @throws SemanticException if any structure in the list has invalid values.
 */
public static void addStructures(PropertyHandle propHandle,List structures) throws SemanticException {
  if (structures == null || structures.isEmpty())   return;
  if (propHandle == null)   return;
  DesignElementHandle element=propHandle.getElementHandle();
  IPropertyDefn propDefn=propHandle.getDefn();
  PropertyValueValidationUtil.validateProperty(element,propDefn.getName(),structures);
  List oldList=element.getListProperty(propDefn.getName());
  List newList=null;
  if (!propHandle.isLocal()) {
    if (oldList != null)     newList=(List)ModelUtil.copyValue(propDefn,structures);
 else     newList=new ArrayList();
    element.getElement().setProperty((ElementPropertyDefn)propDefn,newList);
  }
 else   newList=oldList;
  newList.addAll(structures);
}","/** 
 * Adds the given structures to the corresponding property values. For example, adds result set columns to DataSet.resultSets.
 * @param propHandle the property handle
 * @param structures the list containing structures
 * @throws SemanticException if any structure in the list has invalid values.
 */
public static void addStructures(PropertyHandle propHandle,List structures) throws SemanticException {
  if (structures == null || structures.isEmpty())   return;
  if (propHandle == null)   return;
  DesignElementHandle element=propHandle.getElementHandle();
  IPropertyDefn propDefn=propHandle.getDefn();
  PropertyValueValidationUtil.validateProperty(element,propDefn.getName(),structures);
  List oldList=element.getListProperty(propDefn.getName());
  List newList=null;
  if (!propHandle.isLocal()) {
    if (oldList != null)     newList=(List)ModelUtil.copyValue(propDefn,oldList);
 else     newList=new ArrayList();
    element.getElement().setProperty((ElementPropertyDefn)propDefn,newList);
  }
 else   newList=oldList;
  newList.addAll(structures);
}",0.9920449227889564
74359,"/** 
 * Render context from document file
 * @param out
 * @throws Exception
 */
private void __renderDocument(OutputStream out) throws Exception {
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  String documentFile=ParameterAccessor.getReportDocument(request,viewer.getReportDocument(),false);
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(null,documentFile,BirtTagUtil.getModuleOptions(viewer));
  try {
    Locale locale=(Locale)this.options.getOption(InputOptions.OPT_LOCALE);
    String format=(String)this.options.getOption(InputOptions.OPT_FORMAT);
    Boolean isMasterPageContent=(Boolean)this.options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
    boolean isMasterPage=isMasterPageContent == null ? false : isMasterPageContent.booleanValue();
    Boolean svgFlag=(Boolean)this.options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
    boolean isSvg=svgFlag == null ? false : svgFlag.booleanValue();
    Boolean isRtl=(Boolean)this.options.getOption(InputOptions.OPT_RTL);
    String servletPath=(String)this.options.getOption(InputOptions.OPT_SERVLET_PATH);
    if (viewer.getReportletId() != null) {
      ReportEngineService.getInstance().renderReportlet(out,request,doc,viewer.getReportletId(),format,isMasterPage,isSvg,null,locale,isRtl.booleanValue(),servletPath);
    }
 else {
      ReportEngineService.getInstance().renderReport(out,request,doc,format,viewer.getPageNum(),viewer.getPageRange(),isMasterPage,isSvg,null,locale,isRtl.booleanValue(),servletPath);
    }
  }
  finally {
    if (doc != null)     doc.close();
  }
}","/** 
 * Render context from document file
 * @param out
 * @throws Exception
 */
private void __renderDocument(OutputStream out) throws Exception {
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  String documentFile=ParameterAccessor.getReportDocument(request,viewer.getReportDocument(),false);
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(null,documentFile,BirtTagUtil.getModuleOptions(viewer));
  try {
    Locale locale=(Locale)this.options.getOption(InputOptions.OPT_LOCALE);
    String format=(String)this.options.getOption(InputOptions.OPT_FORMAT);
    Boolean isMasterPageContent=(Boolean)this.options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
    boolean isMasterPage=isMasterPageContent == null ? false : isMasterPageContent.booleanValue();
    Boolean svgFlag=(Boolean)this.options.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
    boolean isSvg=svgFlag == null ? false : svgFlag.booleanValue();
    Boolean isRtl=(Boolean)this.options.getOption(InputOptions.OPT_RTL);
    String servletPath=(String)this.options.getOption(InputOptions.OPT_SERVLET_PATH);
    String realReportletId=viewer.getReportletId();
    if (realReportletId == null) {
      if (viewer.getBookmark() != null && ""String_Node_Str"".equalsIgnoreCase(viewer.getIsReportlet())) {
        realReportletId=viewer.getBookmark();
      }
    }
    if (realReportletId != null) {
      ReportEngineService.getInstance().renderReportlet(out,request,doc,realReportletId,format,isMasterPage,isSvg,null,locale,isRtl.booleanValue(),servletPath);
    }
 else {
      ReportEngineService.getInstance().renderReport(out,request,doc,format,viewer.getPageNum(),viewer.getPageRange(),isMasterPage,isSvg,null,locale,isRtl.booleanValue(),servletPath);
    }
  }
  finally {
    if (doc != null)     doc.close();
  }
}",0.7287939988459319
74360,"/** 
 * Create the final URI string to preview report
 * @param iPattern
 * @return
 */
public String createURI(String iPattern){
  String uri=iPattern;
  if (uri == null)   uri=this.pattern;
  if (uri == null) {
    uri=IBirtConstants.VIEWER_FRAMESET;
    if (reportDocument != null && reportletId != null) {
      uri=IBirtConstants.VIEWER_RUN;
    }
  }
  boolean usingFrameset=IBirtConstants.VIEWER_FRAMESET.equalsIgnoreCase(uri);
  boolean usingParameter=IBirtConstants.VIEWER_PARAMETER.equalsIgnoreCase(uri);
  if (baseURL != null)   uri=baseURL + ""String_Node_Str"" + uri;
  if (format != null) {
    uri+=""String_Node_Str"" + ParameterAccessor.PARAM_FORMAT + ""String_Node_Str""+ urlParamValueEncode(format);
  }
 else {
    uri+=""String_Node_Str"" + ParameterAccessor.PARAM_FORMAT + ""String_Node_Str""+ ParameterAccessor.PARAM_FORMAT_HTML;
  }
  if (reportDesign != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_REPORT + ""String_Node_Str""+ urlParamValueEncode(reportDesign);
  if (reportDocument != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_REPORT_DOCUMENT + ""String_Node_Str""+ urlParamValueEncode(reportDocument);
  if (reportletId != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_INSTANCEID + ""String_Node_Str""+ urlParamValueEncode(reportletId);
  if (usingFrameset && id != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_ID + ""String_Node_Str""+ urlParamValueEncode(id);
  if (usingFrameset && title != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TITLE + ""String_Node_Str""+ urlParamValueEncode(title);
  if (usingFrameset && showTitle != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SHOW_TITLE + ""String_Node_Str""+ urlParamValueEncode(showTitle);
  if (usingParameter && !isCustom && pattern != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SERVLET_PATTERN + ""String_Node_Str""+ urlParamValueEncode(pattern);
  if (usingParameter && !isCustom && target != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TARGET + ""String_Node_Str""+ urlParamValueEncode(target);
  if (locale != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_LOCALE + ""String_Node_Str""+ urlParamValueEncode(locale);
  if (svg != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SVG + ""String_Node_Str""+ urlParamValueEncode(svg);
  if (rtl != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_RTL + ""String_Node_Str""+ urlParamValueEncode(rtl);
  if (pageNum > 0)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_PAGE + ""String_Node_Str""+ pageNum;
  if (pageRange != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_PAGE_RANGE + ""String_Node_Str""+ pageRange;
  if (allowMasterPage != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_MASTERPAGE + ""String_Node_Str""+ urlParamValueEncode(allowMasterPage);
  if (resourceFolder != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_RESOURCE_FOLDER + ""String_Node_Str""+ urlParamValueEncode(resourceFolder);
  if (maxRowsOfRecords >= 0)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_MAXROWS + ""String_Node_Str""+ maxRowsOfRecords;
  if (forceOverwriteDocument != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_OVERWRITE + ""String_Node_Str""+ urlParamValueEncode(forceOverwriteDocument);
  if (usingFrameset && showToolBar != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TOOLBAR + ""String_Node_Str""+ urlParamValueEncode(showToolBar);
  if (usingFrameset && showNavigationBar != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_NAVIGATIONBAR + ""String_Node_Str""+ urlParamValueEncode(showNavigationBar);
  if (showParameterPage != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_PARAMETER_PAGE + ""String_Node_Str""+ urlParamValueEncode(showParameterPage);
  if (bookmark != null) {
    if (IBirtConstants.VIEWER_PREVIEW.equalsIgnoreCase(iPattern)) {
      uri+=""String_Node_Str"" + urlParamValueEncode(bookmark);
    }
 else {
      uri+=""String_Node_Str"" + ParameterAccessor.PARAM_BOOKMARK + ""String_Node_Str""+ urlParamValueEncode(bookmark);
    }
  }
  return uri;
}","/** 
 * Create the final URI string to preview report
 * @param iPattern
 * @return
 */
public String createURI(String iPattern){
  String uri=iPattern;
  if (uri == null)   uri=this.pattern;
  boolean renderReportlet=false;
  if (reportDocument != null && (reportletId != null || (bookmark != null && ""String_Node_Str"".equalsIgnoreCase(isReportlet))))   renderReportlet=true;
  if (uri == null) {
    uri=IBirtConstants.VIEWER_FRAMESET;
    if (renderReportlet)     uri=IBirtConstants.VIEWER_RUN;
  }
  boolean usingFrameset=IBirtConstants.VIEWER_FRAMESET.equalsIgnoreCase(uri);
  boolean usingParameter=IBirtConstants.VIEWER_PARAMETER.equalsIgnoreCase(uri);
  if (baseURL != null)   uri=baseURL + ""String_Node_Str"" + uri;
  if (format != null) {
    uri+=""String_Node_Str"" + ParameterAccessor.PARAM_FORMAT + ""String_Node_Str""+ urlParamValueEncode(format);
  }
 else {
    uri+=""String_Node_Str"" + ParameterAccessor.PARAM_FORMAT + ""String_Node_Str""+ ParameterAccessor.PARAM_FORMAT_HTML;
  }
  if (reportDesign != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_REPORT + ""String_Node_Str""+ urlParamValueEncode(reportDesign);
  if (reportDocument != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_REPORT_DOCUMENT + ""String_Node_Str""+ urlParamValueEncode(reportDocument);
  if (reportletId != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_INSTANCEID + ""String_Node_Str""+ urlParamValueEncode(reportletId);
  if (usingFrameset && id != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_ID + ""String_Node_Str""+ urlParamValueEncode(id);
  if (usingFrameset && title != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TITLE + ""String_Node_Str""+ urlParamValueEncode(title);
  if (usingFrameset && showTitle != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SHOW_TITLE + ""String_Node_Str""+ urlParamValueEncode(showTitle);
  if (usingParameter && !isCustom && pattern != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SERVLET_PATTERN + ""String_Node_Str""+ urlParamValueEncode(pattern);
  if (usingParameter && !isCustom && target != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TARGET + ""String_Node_Str""+ urlParamValueEncode(target);
  if (locale != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_LOCALE + ""String_Node_Str""+ urlParamValueEncode(locale);
  if (svg != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_SVG + ""String_Node_Str""+ urlParamValueEncode(svg);
  if (rtl != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_RTL + ""String_Node_Str""+ urlParamValueEncode(rtl);
  if (pageNum > 0)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_PAGE + ""String_Node_Str""+ pageNum;
  if (pageRange != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_PAGE_RANGE + ""String_Node_Str""+ pageRange;
  if (allowMasterPage != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_MASTERPAGE + ""String_Node_Str""+ urlParamValueEncode(allowMasterPage);
  if (resourceFolder != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_RESOURCE_FOLDER + ""String_Node_Str""+ urlParamValueEncode(resourceFolder);
  if (maxRowsOfRecords >= 0)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_MAXROWS + ""String_Node_Str""+ maxRowsOfRecords;
  if (forceOverwriteDocument != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_OVERWRITE + ""String_Node_Str""+ urlParamValueEncode(forceOverwriteDocument);
  if (usingFrameset && showToolBar != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_TOOLBAR + ""String_Node_Str""+ urlParamValueEncode(showToolBar);
  if (usingFrameset && showNavigationBar != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_NAVIGATIONBAR + ""String_Node_Str""+ urlParamValueEncode(showNavigationBar);
  if (showParameterPage != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_PARAMETER_PAGE + ""String_Node_Str""+ urlParamValueEncode(showParameterPage);
  if (bookmark != null) {
    if (IBirtConstants.VIEWER_PREVIEW.equalsIgnoreCase(iPattern) && !""String_Node_Str"".equalsIgnoreCase(isReportlet)) {
      uri+=""String_Node_Str"" + urlParamValueEncode(bookmark);
    }
 else {
      uri+=""String_Node_Str"" + ParameterAccessor.PARAM_BOOKMARK + ""String_Node_Str""+ urlParamValueEncode(bookmark);
    }
  }
  if (isReportlet != null)   uri+=""String_Node_Str"" + ParameterAccessor.PARAM_ISREPORTLET + ""String_Node_Str""+ isReportlet;
  return uri;
}",0.9477178423236514
74361,"/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByNumberRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByPositionRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByStringRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}","/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByNumberRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByPositionRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByStringRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.filter.CubePosFilterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}",0.9938218295356408
74362,"/** 
 * This method is responsible for computing the aggregation result according to the specified aggregation definitions.
 * @param aggregations
 * @param stopSign
 * @return
 * @throws DataException
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet[] onePassExecute(AggregationDefinition[] aggregations,StopSign stopSign) throws DataException, IOException, BirtException {
  IDiskArray[] dimPosition=getFilterResult();
  int count=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      count++;
    }
  }
  IDimension[] dimensions=cube.getDimesions();
  String[] validDimensionName=new String[count];
  IDiskArray[] validDimPosition=new IDiskArray[count];
  int pos=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      validDimPosition[pos]=dimPosition[i];
      validDimensionName[pos]=dimensions[i].getName();
      pos++;
    }
  }
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(cube.getFactTable(),validDimensionName,validDimPosition,computedMeasureHelper,stopSign);
  DimensionResultIterator[] dimensionResultIterator=populateDimensionResultIterator(dimPosition,stopSign);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(dimensionResultIterator,facttableRowIterator,aggregations);
  return aggregationCalculatorExecutor.execute(stopSign);
}","/** 
 * This method is responsible for computing the aggregation result according to the specified aggregation definitions.
 * @param aggregations
 * @param stopSign
 * @return
 * @throws DataException
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet[] onePassExecute(AggregationDefinition[] aggregations,StopSign stopSign) throws DataException, IOException, BirtException {
  IDiskArray[] dimPosition=getFilterResult();
  int count=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      count++;
    }
  }
  IDimension[] dimensions=cube.getDimesions();
  String[] validDimensionName=new String[count];
  IDiskArray[] validDimPosition=new IDiskArray[count];
  int pos=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      validDimPosition[pos]=dimPosition[i];
      validDimensionName[pos]=dimensions[i].getName();
      pos++;
    }
  }
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(cube.getFactTable(),validDimensionName,validDimPosition,computedMeasureHelper,stopSign);
  for (int i=0; i < measureFilters.size(); i++) {
    facttableRowIterator.addMeasureFilter((IJSMeasureFilterEvalHelper)measureFilters.get(i));
  }
  DimensionResultIterator[] dimensionResultIterator=populateDimensionResultIterator(dimPosition,stopSign);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(dimensionResultIterator,facttableRowIterator,aggregations);
  return aggregationCalculatorExecutor.execute(stopSign);
}",0.9498644986449865
74363,"/** 
 * @param cube
 */
public CubeQueryExecutorHelper(ICube cube,IComputedMeasureHelper computedMeasureHelper) throws DataException {
  Object[] params={cube,computedMeasureHelper};
  logger.entering(CubeQueryExecutorHelper.class.getName(),""String_Node_Str"",params);
  this.cube=(Cube)cube;
  this.computedMeasureHelper=computedMeasureHelper;
  if (this.computedMeasureHelper != null) {
    validateComputedMeasureNames();
  }
  this.simpleLevelFilters=new ArrayList();
  this.levelFilters=new ArrayList();
  this.aggrFilterHelpers=new ArrayList();
  this.dimJSFilterMap=new HashMap();
  this.dimRowForFilterMap=new HashMap();
  this.rowSort=new ArrayList();
  this.columnSort=new ArrayList();
  dimLevelsMap=new HashMap();
  IDimension[] dimension=this.cube.getDimesions();
  for (int i=0; i < dimension.length; i++) {
    ILevel[] levels=dimension[i].getHierarchy().getLevels();
    dimLevelsMap.put(dimension[i].getName(),levels);
  }
  logger.exiting(CubeQueryExecutorHelper.class.getName(),""String_Node_Str"");
}","/** 
 * @param cube
 */
public CubeQueryExecutorHelper(ICube cube,IComputedMeasureHelper computedMeasureHelper) throws DataException {
  Object[] params={cube,computedMeasureHelper};
  logger.entering(CubeQueryExecutorHelper.class.getName(),""String_Node_Str"",params);
  this.cube=(Cube)cube;
  this.computedMeasureHelper=computedMeasureHelper;
  if (this.computedMeasureHelper != null) {
    validateComputedMeasureNames();
  }
  this.simpleLevelFilters=new ArrayList();
  this.levelFilters=new ArrayList();
  this.measureFilters=new ArrayList();
  this.aggrFilterHelpers=new ArrayList();
  this.dimJSFilterMap=new HashMap();
  this.dimRowForFilterMap=new HashMap();
  this.rowSort=new ArrayList();
  this.columnSort=new ArrayList();
  dimLevelsMap=new HashMap();
  IDimension[] dimension=this.cube.getDimesions();
  for (int i=0; i < dimension.length; i++) {
    ILevel[] levels=dimension[i].getHierarchy().getLevels();
    dimLevelsMap.put(dimension[i].getName(),levels);
  }
  logger.exiting(CubeQueryExecutorHelper.class.getName(),""String_Node_Str"");
}",0.9811866859623734
74364,"/** 
 * @return
 * @throws IOException
 */
private boolean isSelectedRow() throws IOException {
  for (int i=0; i < currentPos.length; i++) {
    if (dimensionIndex[i] != -1) {
      if (Arrays.binarySearch(selectedPosOfCurSegment[i],currentPos[i]) < 0)       return false;
    }
  }
  return true;
}","/** 
 * @return
 * @throws IOException
 * @throws DataException 
 */
private boolean isSelectedRow() throws IOException, DataException {
  for (int i=0; i < currentPos.length; i++) {
    if (dimensionIndex[i] != -1) {
      if (Arrays.binarySearch(selectedPosOfCurSegment[i],currentPos[i]) < 0)       return false;
    }
  }
  for (int i=0; i < cubePosFilters.size(); i++) {
    if (!((CubePosFilterHelper)cubePosFilters.get(i)).getFilterResult(currentPos)) {
      return false;
    }
  }
  if (measureFilters != null) {
    for (int i=0; i < measureFilters.size(); i++) {
      IJSMeasureFilterEvalHelper measureFilter=(IJSMeasureFilterEvalHelper)measureFilters.get(i);
      if (!measureFilter.evaluateFilter(currentMeasureMap))       return false;
    }
  }
  return true;
}",0.5324675324675324
74365,"protected IBaseResultSet doExecuteCube(IBaseResultSet parentResultSet,ICubeQueryDefinition query,boolean useCache){
  if (useCache) {
    String rsetId=String.valueOf(cachedQueryToResults.get(query));
    query.setQueryResultsID(rsetId);
  }
 else {
    query.setQueryResultsID(null);
  }
  IBasePreparedQuery pQuery=null;
  try {
    pQuery=dteSession.prepare(query,appContext);
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
  }
  if (pQuery == null) {
    return null;
  }
  try {
    Scriptable scope=context.getSharedScope();
    IBaseResultSet resultSet;
    ICubeQueryResults dteResults;
    if (parentResultSet == null) {
      dteResults=(ICubeQueryResults)dteSession.execute(pQuery,null,scope);
      resultSet=new CubeResultSet(this,context,query,dteResults);
    }
 else {
      dteResults=(ICubeQueryResults)dteSession.execute(pQuery,parentResultSet.getQueryResults(),scope);
      resultSet=new CubeResultSet(this,context,parentResultSet,query,(ICubeQueryResults)dteResults);
    }
    if (query.cacheQueryResults()) {
      cachedQueryToResults.put(query,dteResults.getID());
    }
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
  }
  return null;
}","protected IBaseResultSet doExecuteCube(IBaseResultSet parentResultSet,ICubeQueryDefinition query,boolean useCache){
  if (useCache) {
    String rsetId=String.valueOf(cachedQueryToResults.get(query));
    query.setQueryResultsID(rsetId);
  }
 else {
    query.setQueryResultsID(null);
  }
  IBasePreparedQuery pQuery=(IBasePreparedQuery)queryMap.get(query);
  if (pQuery == null) {
    return null;
  }
  try {
    Scriptable scope=context.getSharedScope();
    IBaseResultSet resultSet;
    ICubeQueryResults dteResults;
    if (parentResultSet == null) {
      dteResults=(ICubeQueryResults)dteSession.execute(pQuery,null,scope);
      resultSet=new CubeResultSet(this,context,query,dteResults);
    }
 else {
      dteResults=(ICubeQueryResults)dteSession.execute(pQuery,parentResultSet.getQueryResults(),scope);
      resultSet=new CubeResultSet(this,context,parentResultSet,query,(ICubeQueryResults)dteResults);
    }
    if (query.cacheQueryResults()) {
      cachedQueryToResults.put(query,dteResults.getID());
    }
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
  }
  return null;
}",0.3641479099678457
74366,"/** 
 * Constructs the data request session with the provided session context information.
 * @param context
 * @throws BirtException
 */
public DataRequestSessionImpl(DataSessionContext context) throws BirtException {
  if (context == null)   throw new AdapterException(ResourceConstants.CONEXT_NULL_ERROR);
  dataEngine=DataEngine.newDataEngine(context.getDataEngineContext());
  modelAdaptor=new ModelAdapter(context);
  sessionContext=context;
  cubeHandleMap=new HashMap();
}","/** 
 * Constructs the data request session with the provided session context information.
 * @param context
 * @throws BirtException
 */
public DataRequestSessionImpl(DataSessionContext context) throws BirtException {
  if (context == null)   throw new AdapterException(ResourceConstants.CONEXT_NULL_ERROR);
  dataEngine=DataEngine.newDataEngine(context.getDataEngineContext());
  modelAdaptor=new ModelAdapter(context);
  sessionContext=context;
  cubeHandleMap=new HashMap();
  dataSetCache=new HashSet();
}",0.9696969696969696
74367,"/** 
 * @param cubeHandle
 * @return
 */
private boolean needCachedDataSetToEnhancePerformance(TabularCubeHandle cubeHandle){
  DataSetHandle dsHandle=cubeHandle.getDataSet();
  List dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  for (int i=0; i < dimHandles.size(); i++) {
    DimensionHandle dimHandle=(DimensionHandle)dimHandles.get(i);
    List hiers=dimHandle.getContents(DimensionHandle.HIERARCHIES_PROP);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)hiers.get(0);
    if (hierHandle.getDataSet() != null)     return false;
  }
  return true;
}","/** 
 * @param cubeHandle
 * @return
 */
private Set needCachedDataSetToEnhancePerformance(TabularCubeHandle cubeHandle){
  Set set=new HashSet();
  set.add(cubeHandle.getDataSet());
  List dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  for (int i=0; i < dimHandles.size(); i++) {
    DimensionHandle dimHandle=(DimensionHandle)dimHandles.get(i);
    List hiers=dimHandle.getContents(DimensionHandle.HIERARCHIES_PROP);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)hiers.get(0);
    if (hierHandle.getDataSet() != null)     set.add(hierHandle.getDataSet());
  }
  return set;
}",0.903010033444816
74368,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext,StopSign stopSign) throws IOException, BirtException, DataException {
  boolean doPerfTuning=this.needCachedDataSetToEnhancePerformance(cubeHandle) && (appContext == null || (appContext != null && appContext.get(DataEngine.DATA_SET_CACHE_ROW_LIMIT) == null && appContext.get(DataEngine.MEMORY_DATA_SET_CACHE) == null));
  Map candidateAppContext=new HashMap();
  if (appContext != null)   candidateAppContext.putAll(appContext);
  if (doPerfTuning) {
    candidateAppContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(-1));
  }
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,candidateAppContext,stopSign);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hier)) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeHandle,candidateAppContext),this.toStringArray(measureNames),stopSign);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext,StopSign stopSign) throws IOException, BirtException, DataException {
  Set involvedDataSet=this.needCachedDataSetToEnhancePerformance(cubeHandle);
  boolean doPerfTuning=involvedDataSet.size() > 1 && (appContext == null || (appContext != null && appContext.get(DataEngine.DATA_SET_CACHE_ROW_LIMIT) == null && appContext.get(DataEngine.MEMORY_DATA_SET_CACHE) == null));
  Map candidateAppContext=new HashMap();
  if (appContext != null)   candidateAppContext.putAll(appContext);
  if (doPerfTuning) {
    candidateAppContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(-1));
    this.dataSetCache.addAll(involvedDataSet);
  }
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,candidateAppContext,stopSign);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hier)) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeHandle,candidateAppContext),this.toStringArray(measureNames),stopSign);
}",0.9774562989752864
74369,"public void clearCache(IBaseDataSourceDesign dataSource,IBaseDataSetDesign dataSet) throws BirtException {
  dataEngine.clearCache(dataSource,dataSet);
}","/** 
 * Clear the data set caches that are used in cube creation.
 * @param dataSetHandles
 * @throws BirtException
 */
private void clearCache(Set dataSetHandles){
  Iterator it=dataSetHandles.iterator();
  while (it.hasNext()) {
    try {
      DataSetHandle dsHandle=(DataSetHandle)it.next();
      BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
      BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
      this.dataEngine.clearCache(baseDataSource,baseDataSet);
      if (dsHandle instanceof JointDataSetHandle) {
        Set parentSet=new HashSet();
        Iterator parentIt=((JointDataSetHandle)dsHandle).dataSetsIterator();
        while (parentIt != null && parentIt.hasNext()) {
          parentSet.add(parentIt.next());
        }
        clearCache(parentSet);
      }
    }
 catch (    Exception e) {
    }
  }
}",0.1295238095238095
74370,"public void shutdown(){
  dataEngine.shutdown();
  dataEngine=null;
}","public void shutdown(){
  this.clearCache(this.dataSetCache);
  dataEngine.shutdown();
  dataEngine=null;
}",0.7840909090909091
74371,"/** 
 * Update column cache with clean the resultset property
 * @param dataSetHandle
 * @throws SemanticException
 */
public static void updateColumnCacheAfterCleanRs(DataSetHandle dataSetHandle) throws SemanticException {
  if (dataSetHandle instanceof OdaDataSetHandle)   dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP).clearValue();
  updateColumnCache(dataSetHandle);
}","/** 
 * Update column cache with clean the resultset property
 * @param dataSetHandle
 * @throws SemanticException
 */
public static void updateColumnCacheAfterCleanRs(DataSetHandle dataSetHandle) throws SemanticException {
  if (dataSetHandle instanceof OdaDataSetHandle) {
    if (dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP).isLocal())     dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP).setValue(new ArrayList());
  }
  updateColumnCache(dataSetHandle);
}",0.8651685393258427
74372,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP);
    if (handle.isLocal())     resultSetList=handle.getListValue();
  }
 else   if (dataSetHandle instanceof ScriptDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
    if (handle.isLocal())     resultSetList=handle.getListValue();
  }
 else {
    return null;
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int count=0;
  if (resultSetList != null && !resultSetList.isEmpty()) {
    ResultSetColumn resultSetColumn;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    for (int n=0; n < resultSetList.size(); n++) {
      orgColumnNameSet.add(((ResultSetColumn)resultSetList.get(n)).getColumnName());
    }
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      String columnName=resultSetColumn.getColumnName();
      String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i);
      uniqueColumnNameSet.add(uniqueColumnName);
      if (!uniqueColumnName.equals(columnName)) {
        updateModelColumn(dataSetHandle,uniqueColumnName,i + 1);
      }
      columnDef=new ResultSetColumnDefinition(uniqueColumnName);
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(DataAdapterUtil.adaptModelDataType(resultSetColumn.getDataType()));
      if (resultSetColumn.getPosition() != null)       columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      if (resultSetColumn.getNativeDataType() != null)       columnDef.setNativeDataType(resultSetColumn.getNativeDataType().intValue());
      if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
        ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
        columnDef.setAlias(columnHint.getAlias());
        columnDef.setLableName(columnHint.getDisplayName());
      }
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
    }
    count+=resultSetList.size();
    if (computedList != null) {
      for (int n=0; n < computedList.size(); n++) {
        orgColumnNameSet.add(((ComputedColumn)computedList.get(n)).getName());
      }
      ComputedColumn computedColumn;
      for (int i=0; i < computedList.size(); i++) {
        computedColumn=(ComputedColumn)computedList.get(i);
        String columnName=computedColumn.getName();
        String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i + count);
        uniqueColumnNameSet.add(uniqueColumnName);
        if (!uniqueColumnName.equals(columnName)) {
          updateComputedColumn(dataSetHandle,uniqueColumnName,columnName);
        }
        columnDef=new ResultSetColumnDefinition(uniqueColumnName);
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP);
    resultSetList=handle.getListValue();
  }
 else   if (dataSetHandle instanceof ScriptDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
    resultSetList=handle.getListValue();
  }
 else {
    return null;
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int count=0;
  if (resultSetList != null && !resultSetList.isEmpty()) {
    ResultSetColumn resultSetColumn;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    for (int n=0; n < resultSetList.size(); n++) {
      orgColumnNameSet.add(((ResultSetColumn)resultSetList.get(n)).getColumnName());
    }
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      String columnName=resultSetColumn.getColumnName();
      String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i);
      uniqueColumnNameSet.add(uniqueColumnName);
      if (!uniqueColumnName.equals(columnName)) {
        updateModelColumn(dataSetHandle,uniqueColumnName,i + 1);
      }
      columnDef=new ResultSetColumnDefinition(uniqueColumnName);
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(DataAdapterUtil.adaptModelDataType(resultSetColumn.getDataType()));
      if (resultSetColumn.getPosition() != null)       columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      if (resultSetColumn.getNativeDataType() != null)       columnDef.setNativeDataType(resultSetColumn.getNativeDataType().intValue());
      if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
        ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
        columnDef.setAlias(columnHint.getAlias());
        columnDef.setLableName(columnHint.getDisplayName());
      }
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
    }
    count+=resultSetList.size();
    if (computedList != null) {
      for (int n=0; n < computedList.size(); n++) {
        orgColumnNameSet.add(((ComputedColumn)computedList.get(n)).getName());
      }
      ComputedColumn computedColumn;
      for (int i=0; i < computedList.size(); i++) {
        computedColumn=(ComputedColumn)computedList.get(i);
        String columnName=computedColumn.getName();
        String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i + count);
        uniqueColumnNameSet.add(uniqueColumnName);
        if (!uniqueColumnName.equals(columnName)) {
          updateComputedColumn(dataSetHandle,uniqueColumnName,columnName);
        }
        columnDef=new ResultSetColumnDefinition(uniqueColumnName);
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}",0.9934343434343434
74373,"public static String getPattern(Object data,String val){
  if (val != null && data instanceof Date) {
    if (val.indexOf(""String_Node_Str"") >= 0) {
      return ""String_Node_Str"";
    }
 else     if (val.startsWith(""String_Node_Str"")) {
      return ""String_Node_Str"";
    }
 else     if (!val.startsWith(""String_Node_Str"") && val.indexOf(""String_Node_Str"") >= 0) {
      return ""String_Node_Str"";
    }
    return new DateFormatter(val).getPattern();
  }
 else   if (val == null && data instanceof Time) {
    return ""String_Node_Str"";
  }
 else   if (val == null && data instanceof java.sql.Date) {
    return ""String_Node_Str"";
  }
 else   if (val == null && data instanceof java.util.Date) {
    return ""String_Node_Str"";
  }
 else   if (val != null && data instanceof Number) {
    if (val.indexOf(""String_Node_Str"") >= 0) {
      return ""String_Node_Str"";
    }
    return new NumberFormatter(val).getPattern();
  }
 else   if (val != null && data instanceof String) {
    return new StringFormatter(val).getPattern();
  }
  return null;
}","public static String getPattern(Object data,String val){
  if (val != null && data instanceof Date) {
    return replaceDateFormat(val);
  }
 else   if (val == null && data instanceof Time) {
    return ""String_Node_Str"";
  }
 else   if (val == null && data instanceof java.sql.Date) {
    return ""String_Node_Str"";
  }
 else   if (val == null && data instanceof java.util.Date) {
    return ""String_Node_Str"";
  }
 else   if (val != null && data instanceof Number) {
    if (val.indexOf(""String_Node_Str"") >= 0) {
      return ""String_Node_Str"";
    }
    return new NumberFormatter(val).getPattern();
  }
 else   if (val != null && data instanceof String) {
    return new StringFormatter(val).getPattern();
  }
  return null;
}",0.2567567567567567
74374,"public void dispose(){
  super.dispose();
  bParameter=null;
  browser=null;
  model=null;
}","public void dispose(){
  super.dispose();
  if (browser != null) {
    WebViewer.cancel(browser);
  }
  bParameter=null;
  browser=null;
  model=null;
}",0.7540983606557377
74375,"/** 
 * handle something when try to leave the page
 */
public void handleLeaveThePage(){
  if (browser != null)   browser.setUrl(""String_Node_Str"");
}","/** 
 * handle something when try to leave the page
 */
public void handleLeaveThePage(){
  if (browser != null) {
    WebViewer.cancel(browser);
    browser.setUrl(""String_Node_Str"");
  }
}",0.8856304985337243
74376,"public void createRightBindingArea(Composite parent){
  EList[] seriesDefnArray=null;
  EList axisList=null;
  if (getChartModel() instanceof ChartWithAxes) {
    int axisNum=ChartUIUtil.getOrthogonalAxisNumber(getChartModel());
    seriesDefnArray=new EList[axisNum];
    axisList=getYAxisListForProcessing();
  }
 else {
    axisList=getValueSeriesDefinitionForProcessing();
  }
  if (axisList != null && !axisList.isEmpty()) {
    for (int i=0; i < axisList.size(); i++) {
      seriesDefnArray[i]=((Axis)axisList.get(i)).getSeriesDefinitions();
    }
  }
  ISelectDataComponent component=new ValueSeriesGroupingComponent((SeriesDefinition)seriesDefnArray[0].get(0),getContext(),""String_Node_Str"");
  subRightAreas.add(component);
  cmpRightArea=component.createArea(parent);
}","public void createRightBindingArea(Composite parent){
  EList[] seriesDefnArray=null;
  EList axisList=null;
  ISelectDataComponent component=null;
  if (getChartModel() instanceof ChartWithAxes) {
    int axisNum=ChartUIUtil.getOrthogonalAxisNumber(getChartModel());
    seriesDefnArray=new EList[axisNum];
    axisList=getYAxisListForProcessing();
    if (axisList != null && !axisList.isEmpty()) {
      for (int i=0; i < axisList.size(); i++) {
        seriesDefnArray[i]=((Axis)axisList.get(i)).getSeriesDefinitions();
      }
    }
    component=new ValueSeriesGroupingComponent((SeriesDefinition)seriesDefnArray[0].get(0),getContext(),""String_Node_Str"");
  }
 else {
    EList sdList=getValueSeriesDefinitionForProcessing();
    component=new ValueSeriesGroupingComponent((SeriesDefinition)sdList.get(0),getContext(),""String_Node_Str"");
  }
  subRightAreas.add(component);
  cmpRightArea=component.createArea(parent);
}",0.8112543962485346
74377,"public void testGetSelectionTree() throws EngineException {
  destroy();
  initialize(""String_Node_Str"");
  Map parentToChildren=new HashMap();
  parentToChildren.put(""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str"",null});
  parentToChildren.put(""String_Node_Str"",new Object[]{""String_Node_Str""});
  String[] parent=new String[]{""String_Node_Str"",""String_Node_Str""};
  checkTree(""String_Node_Str"",parent,parentToChildren);
  checkTree(""String_Node_Str"",parent,parentToChildren);
  parent=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  checkTree(""String_Node_Str"",parent,parentToChildren);
  checkTree(""String_Node_Str"",parent,parentToChildren);
  parent=new String[]{""String_Node_Str"",""String_Node_Str""};
  checkTree(""String_Node_Str"",parent,parentToChildren);
  checkTree(""String_Node_Str"",parent,parentToChildren);
  parent=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  checkTree(""String_Node_Str"",parent,parentToChildren);
  checkTree(""String_Node_Str"",parent,parentToChildren);
}","public void testGetSelectionTree() throws EngineException {
  destroy();
  initialize(""String_Node_Str"");
  Map parentToChildren=new HashMap();
  parentToChildren.put(""String_Node_Str"",new Object[]{new Integer(1621),new Integer(1612),null});
  parentToChildren.put(""String_Node_Str"",new Object[]{new Integer(1621)});
  String[] parent=new String[]{""String_Node_Str"",""String_Node_Str""};
  checkTree(""String_Node_Str"",parent,parentToChildren);
  checkTree(""String_Node_Str"",parent,parentToChildren);
  parent=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  checkTree(""String_Node_Str"",parent,parentToChildren);
  checkTree(""String_Node_Str"",parent,parentToChildren);
  parent=new String[]{""String_Node_Str"",""String_Node_Str""};
  checkTree(""String_Node_Str"",parent,parentToChildren);
  checkTree(""String_Node_Str"",parent,parentToChildren);
  parent=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  checkTree(""String_Node_Str"",parent,parentToChildren);
  checkTree(""String_Node_Str"",parent,parentToChildren);
}",0.952161913523459
74378,"public ParameterHelper(ScalarParameterHandle parameter,Locale locale){
  this.parameter=parameter;
  this.distinct=parameter.distinct();
  this.labelColumnName=getLabelColumnName(parameter);
  this.valueColumnName=getValueColumnName(parameter);
  this.valueType=parameter.getValueType();
  if (parameter.isFixedOrder()) {
    this.comparator=new FixInOrderComparator(distinct);
  }
 else {
    this.comparator=createComparator(parameter,locale,distinct);
  }
}","public ParameterHelper(ScalarParameterHandle parameter,Locale locale){
  this.parameter=parameter;
  this.distinct=parameter.distinct();
  this.labelColumnName=getLabelColumnName(parameter);
  this.valueColumnName=getValueColumnName(parameter);
  this.valueType=parameter.getDataType();
  if (parameter.isFixedOrder()) {
    this.comparator=new FixInOrderComparator(distinct);
  }
 else {
    this.comparator=createComparator(parameter,locale,distinct);
  }
}",0.9902067464635472
74379,"public void testDateFormat(){
  String golden=""String_Node_Str"";
  DateFormatter sample=new DateFormatter(""String_Node_Str"",ULocale.ENGLISH);
  Locale locDef=Locale.getDefault();
  Calendar dateCal=Calendar.getInstance(locDef);
  dateCal.set(8,8,13,20,1,44);
  Date date=dateCal.getTime();
  String fmtDate=sample.format(date);
  assertEquals(golden,fmtDate);
}","public void testDateFormat(){
  String golden=""String_Node_Str"";
  DateFormatter sample=new DateFormatter(""String_Node_Str"",ULocale.ENGLISH);
  Locale locDef=Locale.getDefault();
  Calendar dateCal=Calendar.getInstance(locDef);
  dateCal.set(1998,8,13,20,1,44);
  Date date=dateCal.getTime();
  String fmtDate=sample.format(date);
  assertEquals(golden,fmtDate);
}",0.9958620689655172
74380,"public void testDateFormatString(){
  DateFormatter sample=new DateFormatter(""String_Node_Str"");
  Locale locDef=Locale.getDefault();
  Calendar dateCal=Calendar.getInstance(locDef);
  dateCal.set(8,8,13,20,1,44);
  Date date=dateCal.getTime();
  SimpleDateFormat sampleJava=new SimpleDateFormat(""String_Node_Str"",locDef);
  assertEquals(sampleJava.format(date),sample.format(date));
}","public void testDateFormatString(){
  DateFormatter sample=new DateFormatter(""String_Node_Str"");
  Locale locDef=Locale.getDefault();
  Calendar dateCal=Calendar.getInstance(locDef);
  dateCal.set(1998,8,13,20,1,44);
  Date date=dateCal.getTime();
  SimpleDateFormat sampleJava=new SimpleDateFormat(""String_Node_Str"",locDef);
  assertEquals(sampleJava.format(date),sample.format(date));
}",0.9961190168175936
74381,"/** 
 * Process BIRT deployment configuration. <p> Save user-defined settings into web.xml file.
 * @param monitor
 * @throws CoreException
 */
protected void processConfiguration(IProgressMonitor monitor) throws CoreException {
  IProject project=fproj.getProject();
  SimpleImportOverwriteQuery query=new SimpleImportOverwriteQuery();
  WebArtifactUtil.configureWebApp((WebAppBean)properties.get(EXT_WEBAPP),project,query,monitor);
  WebArtifactUtil.configureContextParam((Map)properties.get(EXT_CONTEXT_PARAM),project,query,monitor);
  WebArtifactUtil.configureListener((Map)properties.get(EXT_LISTENER),project,query,monitor);
  WebArtifactUtil.configureServlet((Map)properties.get(EXT_SERVLET),project,query,monitor);
  WebArtifactUtil.configureServletMapping((Map)properties.get(EXT_SERVLET_MAPPING),project,query,monitor);
  WebArtifactUtil.configureFilter((Map)properties.get(EXT_FILTER),project,query,monitor);
  WebArtifactUtil.configureFilterMapping((Map)properties.get(EXT_FILTER_MAPPING),project,query,monitor);
  WebArtifactUtil.configureTaglib((Map)properties.get(EXT_TAGLIB),project,query,monitor);
}","/** 
 * Process BIRT deployment configuration. <p> Save user-defined settings into web.xml file.
 * @param monitor
 * @throws CoreException
 */
protected void processConfiguration(IProgressMonitor monitor) throws CoreException {
  IProject project=this.getFacetedProject().getProject();
  SimpleImportOverwriteQuery query=new SimpleImportOverwriteQuery();
  WebArtifactUtil.configureWebApp((WebAppBean)properties.get(EXT_WEBAPP),project,query,monitor);
  WebArtifactUtil.configureContextParam((Map)properties.get(EXT_CONTEXT_PARAM),project,query,monitor);
  WebArtifactUtil.configureListener((Map)properties.get(EXT_LISTENER),project,query,monitor);
  WebArtifactUtil.configureServlet((Map)properties.get(EXT_SERVLET),project,query,monitor);
  WebArtifactUtil.configureServletMapping((Map)properties.get(EXT_SERVLET_MAPPING),project,query,monitor);
  WebArtifactUtil.configureFilter((Map)properties.get(EXT_FILTER),project,query,monitor);
  WebArtifactUtil.configureFilterMapping((Map)properties.get(EXT_FILTER_MAPPING),project,query,monitor);
  WebArtifactUtil.configureTaglib((Map)properties.get(EXT_TAGLIB),project,query,monitor);
}",0.989782318969347
74382,"/** 
 * Action before process configuration
 * @param monitor
 * @throws CoreException
 */
protected void preConfiguration(IProgressMonitor monitor) throws CoreException {
  BirtWizardUtil.processCheckFolder(properties,this.fproj.getProject(),configFolder,monitor);
}","/** 
 * Action before process configuration
 * @param monitor
 * @throws CoreException
 */
protected void preConfiguration(IProgressMonitor monitor) throws CoreException {
  BirtWizardUtil.processCheckFolder(properties,this.getFacetedProject().getProject(),configFolder,monitor);
}",0.9671532846715328
74383,"/** 
 * Gets size of label item.
 * @return the size of label item.
 */
public Dimension getSize(){
  DimensionHandle handle=((ReportItemHandle)getHandle()).getWidth();
  int px=(int)DEUtil.convertoToPixel(handle);
  handle=((ReportItemHandle)getHandle()).getHeight();
  int py=(int)DEUtil.convertoToPixel(handle);
  px=Math.max(0,px);
  py=Math.max(0,py);
  return new Dimension(px,py);
}","/** 
 * Gets size of label item.
 * @return the size of label item.
 */
public Dimension getSize(){
  DimensionHandle handle=((ReportItemHandle)getHandle()).getWidth();
  int px=0;
  int py=0;
  if (!DesignChoiceConstants.UNITS_PERCENTAGE.equals(handle.getUnits())) {
    px=(int)DEUtil.convertoToPixel(handle);
  }
  handle=((ReportItemHandle)getHandle()).getHeight();
  if (!DesignChoiceConstants.UNITS_PERCENTAGE.equals(handle.getUnits())) {
    py=(int)DEUtil.convertoToPixel(handle);
  }
  px=Math.max(0,px);
  py=Math.max(0,py);
  return new Dimension(px,py);
}",0.7949790794979079
74384,"/** 
 * @return The constraint
 */
protected Object getConstraint(){
  ReportItemHandle handle=(ReportItemHandle)getModel();
  ReportItemConstraint constraint=new ReportItemConstraint();
  constraint.setDisplay(handle.getPrivateStyle().getDisplay());
  return constraint;
}","/** 
 * @return The constraint
 */
protected Object getConstraint(){
  ReportItemHandle handle=(ReportItemHandle)getModel();
  ReportItemConstraint constraint=new ReportItemConstraint();
  constraint.setDisplay(handle.getPrivateStyle().getDisplay());
  DimensionHandle value=handle.getWidth();
  constraint.setMeasure(value.getMeasure());
  constraint.setUnits(value.getUnits());
  return constraint;
}",0.8088888888888889
74385,"/** 
 * Determines if the property has choice type value.
 * @param o the property model to inspect
 * @return if a property has choice type value
 */
public boolean isChoiceProperty(Object o){
  boolean choice=false;
  if (isColorProperty(o)) {
    return false;
  }
  if (o instanceof GroupPropertyHandle) {
    if (((GroupPropertyHandle)o).getPropertyDefn().getChoices() != null) {
      IChoice[] choices=((GroupPropertyHandle)o).getPropertyDefn().getChoices().getChoices();
      if (choices.length > 0) {
        choice=true;
      }
    }
  }
  return choice;
}","/** 
 * Determines if the property has choice type value.
 * @param o the property model to inspect
 * @return if a property has choice type value
 */
public boolean isChoiceProperty(Object o){
  boolean choice=false;
  if (isColorProperty(o)) {
    return false;
  }
  if (o instanceof GroupPropertyHandle) {
    if (((GroupPropertyHandle)o).getPropertyDefn().getAllowedChoices() != null) {
      IChoice[] choices=((GroupPropertyHandle)o).getPropertyDefn().getAllowedChoices().getChoices();
      if (choices.length > 0) {
        choice=true;
      }
    }
  }
  return choice;
}",0.9878260869565216
74386,"/** 
 * Gets the set of choices for the property; return null if the property doesn't have choice list.
 * @param o the property model to inspect
 * @return the array holds choice values
 */
private Object[] getChoiceValues(Object o){
  Object[] values=null;
  if (o instanceof GroupPropertyHandle) {
    if (((GroupPropertyHandle)o).getPropertyDefn().getChoices() != null) {
      IChoice[] choices=((GroupPropertyHandle)o).getPropertyDefn().getChoices().getChoices();
      if (choices.length > 0) {
        values=new Object[choices.length];
        for (int i=0; i < choices.length; i++) {
          values[i]=choices[i].getName();
        }
      }
    }
  }
  return values;
}","/** 
 * Gets the set of choices for the property; return null if the property doesn't have choice list.
 * @param o the property model to inspect
 * @return the array holds choice values
 */
private Object[] getChoiceValues(Object o){
  Object[] values=null;
  if (o instanceof GroupPropertyHandle) {
    if (((GroupPropertyHandle)o).getPropertyDefn().getAllowedChoices() != null) {
      IChoice[] choices=((GroupPropertyHandle)o).getPropertyDefn().getAllowedChoices().getChoices();
      if (choices.length > 0) {
        values=new Object[choices.length];
        for (int i=0; i < choices.length; i++) {
          values[i]=choices[i].getName();
        }
      }
    }
  }
  return values;
}",0.9898403483309144
74387,"/** 
 * Returns the array of choice names if the property has a choice list;or null otherwise.
 * @return the list of available choice names.
 */
private String[] getChoiceNames(Object o){
  String[] values=null;
  if (o instanceof GroupPropertyHandle) {
    if (((GroupPropertyHandle)o).getPropertyDefn().getChoices() != null) {
      IChoice[] choices=((GroupPropertyHandle)o).getPropertyDefn().getChoices().getChoices();
      if (choices.length > 0) {
        values=new String[choices.length];
        for (int i=0; i < choices.length; i++) {
          values[i]=choices[i].getName();
        }
      }
    }
  }
  if (values == null)   return new String[]{};
  return values;
}","/** 
 * Returns the array of choice names if the property has a choice list;or null otherwise.
 * @return the list of available choice names.
 */
private String[] getChoiceNames(Object o){
  String[] values=null;
  if (o instanceof GroupPropertyHandle) {
    if (((GroupPropertyHandle)o).getPropertyDefn().getAllowedChoices() != null) {
      IChoice[] choices=((GroupPropertyHandle)o).getPropertyDefn().getAllowedChoices().getChoices();
      if (choices.length > 0) {
        values=new String[choices.length];
        for (int i=0; i < choices.length; i++) {
          values[i]=choices[i].getName();
        }
      }
    }
  }
  if (values == null)   return new String[]{};
  return values;
}",0.989855072463768
74388,"/** 
 * Determines if the property has choice type value.
 * @param o the property model to inspect
 * @return if a property has choice type value
 */
public boolean isChoiceProperty(Object o){
  boolean choice=false;
  if (isColorProperty(o)) {
    return false;
  }
  if (o instanceof GroupPropertyHandle) {
    if (((GroupPropertyHandle)o).getPropertyDefn().getChoices() != null) {
      IChoice[] choices=((GroupPropertyHandle)o).getPropertyDefn().getChoices().getChoices();
      if (choices.length > 0) {
        choice=true;
      }
    }
  }
  return choice;
}","/** 
 * Determines if the property has choice type value.
 * @param o the property model to inspect
 * @return if a property has choice type value
 */
public boolean isChoiceProperty(Object o){
  boolean choice=false;
  if (isColorProperty(o)) {
    return false;
  }
  if (o instanceof GroupPropertyHandle) {
    if (((GroupPropertyHandle)o).getPropertyDefn().getAllowedChoices() != null) {
      IChoice[] choices=((GroupPropertyHandle)o).getPropertyDefn().getAllowedChoices().getChoices();
      if (choices.length > 0) {
        choice=true;
      }
    }
  }
  return choice;
}",0.9878260869565216
74389,"/** 
 * Gets the set of choices for the property; return null if the property doesn't have choice list.
 * @param o the property model to inspect
 * @return the array holds choice values
 */
private Object[] getChoiceValues(Object o){
  Object[] values=null;
  if (o instanceof GroupPropertyHandle) {
    if (((GroupPropertyHandle)o).getPropertyDefn().getChoices() != null) {
      IChoice[] choices=((GroupPropertyHandle)o).getPropertyDefn().getChoices().getChoices();
      if (choices.length > 0) {
        values=new Object[choices.length];
        for (int i=0; i < choices.length; i++) {
          values[i]=choices[i].getName();
        }
      }
    }
  }
  return values;
}","/** 
 * Gets the set of choices for the property; return null if the property doesn't have choice list.
 * @param o the property model to inspect
 * @return the array holds choice values
 */
private Object[] getChoiceValues(Object o){
  Object[] values=null;
  if (o instanceof GroupPropertyHandle) {
    if (((GroupPropertyHandle)o).getPropertyDefn().getAllowedChoices() != null) {
      IChoice[] choices=((GroupPropertyHandle)o).getPropertyDefn().getAllowedChoices().getChoices();
      if (choices.length > 0) {
        values=new Object[choices.length];
        for (int i=0; i < choices.length; i++) {
          values[i]=choices[i].getName();
        }
      }
    }
  }
  return values;
}",0.9898403483309144
74390,"/** 
 * Returns the array of choice names if the property has a choice list;or null otherwise.
 * @return the list of available choice names.
 */
private String[] getChoiceNames(Object o){
  String[] values=null;
  if (o instanceof GroupPropertyHandle) {
    if (((GroupPropertyHandle)o).getPropertyDefn().getChoices() != null) {
      IChoice[] choices=((GroupPropertyHandle)o).getPropertyDefn().getChoices().getChoices();
      if (choices.length > 0) {
        values=new String[choices.length];
        for (int i=0; i < choices.length; i++) {
          values[i]=choices[i].getName();
        }
      }
    }
  }
  if (values == null)   return new String[]{};
  return values;
}","/** 
 * Returns the array of choice names if the property has a choice list;or null otherwise.
 * @return the list of available choice names.
 */
private String[] getChoiceNames(Object o){
  String[] values=null;
  if (o instanceof GroupPropertyHandle) {
    if (((GroupPropertyHandle)o).getPropertyDefn().getAllowedChoices() != null) {
      IChoice[] choices=((GroupPropertyHandle)o).getPropertyDefn().getAllowedChoices().getChoices();
      if (choices.length > 0) {
        values=new String[choices.length];
        for (int i=0; i < choices.length; i++) {
          values[i]=choices[i].getName();
        }
      }
    }
  }
  if (values == null)   return new String[]{};
  return values;
}",0.989855072463768
74391,"/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}","/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format,new Boolean(svgFlag));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag));
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.9947249434815372
74392,"/** 
 * Render reportlet page.
 * @param out
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}","/** 
 * Render reportlet page.
 * @param out
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format,new Boolean(svgFlag));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag));
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.9948817938094078
74393,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            Object[] values;
            if (valueObj instanceof Object[]) {
              values=(Object[])valueObj;
            }
 else {
              values=new Object[1];
              values[0]=valueObj;
            }
            for (int i=0; i < values.length; i++) {
              String value=DataUtil.getDisplayValue(values[i]);
              if (value != null) {
                link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
              }
 else {
                link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISNULL,URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE)));
              }
            }
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
          link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
        }
 else {
          bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
          link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
          if (!action.isBookmark())           link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
        }
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            Object[] values;
            if (valueObj instanceof Object[]) {
              values=(Object[])valueObj;
            }
 else {
              values=new Object[1];
              values[0]=valueObj;
            }
            for (int i=0; i < values.length; i++) {
              String value=DataUtil.getDisplayValue(values[i]);
              if (value != null) {
                link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
              }
 else {
                link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISNULL,URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE)));
              }
            }
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    if (svg != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
          link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
        }
 else {
          bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
          link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
          if (!action.isBookmark())           link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
        }
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.983959432888337
74394,"/** 
 * Constructor. This is for runAndRender task.
 * @param locale
 * @param isEmbeddable
 * @param isRtl
 * @param isMasterPageContent
 * @param format
 */
public ViewerHTMLActionHandler(Locale locale,boolean isRtl,boolean isMasterPageContent,String format){
  this.locale=locale;
  this.isRtl=isRtl;
  this.isMasterPageContent=isMasterPageContent;
  this.hostFormat=format;
}","/** 
 * Constructor. This is for runAndRender task.
 * @param locale
 * @param isEmbeddable
 * @param isRtl
 * @param isMasterPageContent
 * @param format
 * @param svg
 */
public ViewerHTMLActionHandler(Locale locale,boolean isRtl,boolean isMasterPageContent,String format,Boolean svg){
  this.locale=locale;
  this.isRtl=isRtl;
  this.isMasterPageContent=isMasterPageContent;
  this.hostFormat=format;
  this.svg=svg;
}",0.9475
74395,"public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (this.getReferencedMeasureName(binding.getExpression()) != null) {
            if (this.isLeafLevel(cubeDefn,target) && binding.getAggrFunction() == null) {
              result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.MEASURE_TYPE));
              continue;
            }
 else             if (binding.getAggrFunction() != null) {
              result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
              continue;
            }
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1) {
              if (fromSameEdge(aggrOns,cubeDefn))               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
 else               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
            }
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              int candidateEdge=getAxisQualifierEdgeType(dimLevel,cubeDefn);
              if (candidateEdge != -1) {
                if (getAxisQualifierLevel(next,cubeDefn.getEdge(candidateEdge)) != null)                 result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
              }
            }
            break;
          }
        }
        continue;
      }
      result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.DIMENSION_TYPE));
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (isGrandTotal(binding) && isSort)           continue;
          if (this.getReferencedMeasureName(binding.getExpression()) != null) {
            if (this.isLeafLevel(cubeDefn,target) && binding.getAggrFunction() == null) {
              result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.MEASURE_TYPE));
              continue;
            }
 else             if (isGrandTotal(binding)) {
              result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
              continue;
            }
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1) {
              if (fromSameEdge(aggrOns,cubeDefn))               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
 else               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
            }
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              int candidateEdge=getAxisQualifierEdgeType(dimLevel,cubeDefn);
              if (candidateEdge != -1) {
                if (getAxisQualifierLevel(next,cubeDefn.getEdge(candidateEdge)) != null)                 result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
              }
            }
            break;
          }
        }
        continue;
      }
      result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.DIMENSION_TYPE));
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9759872990672752
74396,"/** 
 * Process BIRT deployment configuration. <p> Save user-defined settings into web.xml file.
 * @param monitor
 * @throws CoreException
 */
protected void processConfiguration(IProgressMonitor monitor) throws CoreException {
  IProject project=fproj.getProject();
  SimpleImportOverwriteQuery query=new SimpleImportOverwriteQuery();
  WebArtifactUtil.configureWebApp((WebAppBean)properties.get(EXT_WEBAPP),project,query,monitor);
  WebArtifactUtil.configureContextParam((Map)properties.get(EXT_CONTEXT_PARAM),project,query,monitor);
  WebArtifactUtil.configureListener((Map)properties.get(EXT_LISTENER),project,query,monitor);
  WebArtifactUtil.configureServlet((Map)properties.get(EXT_SERVLET),project,query,monitor);
  WebArtifactUtil.configureServletMapping((Map)properties.get(EXT_SERVLET_MAPPING),project,query,monitor);
  WebArtifactUtil.configureTaglib((Map)properties.get(EXT_TAGLIB),project,query,monitor);
}","/** 
 * Process BIRT deployment configuration. <p> Save user-defined settings into web.xml file.
 * @param monitor
 * @throws CoreException
 */
protected void processConfiguration(IProgressMonitor monitor) throws CoreException {
  IProject project=this.getFacetedProject().getProject();
  SimpleImportOverwriteQuery query=new SimpleImportOverwriteQuery();
  WebArtifactUtil.configureWebApp((WebAppBean)properties.get(EXT_WEBAPP),project,query,monitor);
  WebArtifactUtil.configureContextParam((Map)properties.get(EXT_CONTEXT_PARAM),project,query,monitor);
  WebArtifactUtil.configureListener((Map)properties.get(EXT_LISTENER),project,query,monitor);
  WebArtifactUtil.configureServlet((Map)properties.get(EXT_SERVLET),project,query,monitor);
  WebArtifactUtil.configureServletMapping((Map)properties.get(EXT_SERVLET_MAPPING),project,query,monitor);
  WebArtifactUtil.configureTaglib((Map)properties.get(EXT_TAGLIB),project,query,monitor);
}",0.987641053197206
74397,"/** 
 * Action before process configuration
 * @param monitor
 * @throws CoreException
 */
protected void preConfiguration(IProgressMonitor monitor) throws CoreException {
  BirtWizardUtil.processCheckFolder(properties,this.fproj.getProject(),configFolder,monitor);
}","/** 
 * Action before process configuration
 * @param monitor
 * @throws CoreException
 */
protected void preConfiguration(IProgressMonitor monitor) throws CoreException {
  BirtWizardUtil.processCheckFolder(properties,this.getFacetedProject().getProject(),configFolder,monitor);
}",0.9671532846715328
74398,"public void testAddYear() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2015,10,15);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1805,10,15);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1910,10,15);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  Date[] values=new Date[]{d1,d2,d3};
  for (int i=0; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}","public void testAddYear() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Calendar c=Calendar.getInstance();
  c.clear();
  c.set(2015,10,15);
  Date d1=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1805,10,15,0,0,0);
  Date d2=new Date(c.getTimeInMillis());
  c.clear();
  c.set(1920,10,15);
  Date d3=new Date(c.getTimeInMillis());
  c.clear();
  Date[] values=new Date[]{d1,d2,d3};
  for (int i=1; i < values.length; i++) {
    assertEquals(cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null),values[i]);
  }
}",0.9915254237288136
74399,"public void testDiffMinute() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  int[] values=new int[]{1,-1 * 24 * 60,2 * 24 * 60,37 * 24 * 60,(65 * 24 + 11) * 60 + 2,(66 * 24 + 22) * 60 + 3,((66 + 365) * 24) * 60};
  for (int i=0; i < values.length; i++) {
    assertEquals(((Number)cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null)).intValue(),values[i]);
  }
}","public void testDiffMinute() throws BirtException {
  String[] scripts=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  int[] values=new int[]{1,-1 * 24 * 60,2 * 24 * 60,37 * 24 * 60,(65 * 24 + 11) * 60 + 2,(66 * 24 + 22) * 60 + 3,((66 + 365) * 24) * 60};
  for (int i=0; i < values.length; i++) {
    System.out.println(i);
    assertEquals(((Number)cx.evaluateString(scope,scripts[i],""String_Node_Str"",1,null)).intValue(),values[i]);
  }
}",0.9741131351869609
74400,"protected void setUp() throws Exception {
  super.setUp();
  testObject=new Object[]{new Integer(1),new Integer(0),BigDecimal.valueOf(Integer.MAX_VALUE),BigDecimal.valueOf(Integer.MAX_VALUE + 1),BigDecimal.valueOf(Integer.MIN_VALUE),BigDecimal.valueOf(Integer.MIN_VALUE - 1),BigDecimal.valueOf(0l),Boolean.valueOf(true),Boolean.valueOf(false),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),Double.valueOf(""String_Node_Str""),Double.valueOf(""String_Node_Str""),null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueInputObject=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),String.valueOf(0l),""String_Node_Str"",""String_Node_Str"",((new GregorianCalendar(2004 + 1900,1,1)).getTime()).toString(),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  resultDate=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),null,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  resultInteger=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),new Integer(1),new Integer(0),new Integer((int)((Date)resultDate[9]).getTime()),new Integer((int)1.1),new Integer(0),null,new Exception(""String_Node_Str""),new Integer(""String_Node_Str""),new Integer(10),new Integer(10),new Integer(10)};
  resultBigDecimal=new Object[]{new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(Integer.MAX_VALUE),new BigDecimal(Integer.MAX_VALUE + 1),new BigDecimal(Integer.MIN_VALUE),new BigDecimal(Integer.MIN_VALUE - 1),new BigDecimal(0),new BigDecimal(1),new BigDecimal(0),new BigDecimal(((Date)resultDate[9]).getTime()),new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),null,new Exception(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(10),new BigDecimal(10),new BigDecimal(10)};
  resultBoolean=new Object[]{new Boolean(true),new Boolean(false),new Boolean(true),new Boolean(true),new Boolean(true),new Boolean(true),new Boolean(false),new Boolean(true),new Boolean(false),new Exception(""String_Node_Str""),new Boolean(true),new Boolean(false),null,new Exception(""String_Node_Str""),new Boolean(true),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str"")};
  resultDouble=new Object[]{new Double(1),new Double(0),new Double(Integer.MAX_VALUE),new Double(Integer.MAX_VALUE + 1),new Double(Integer.MIN_VALUE),new Double(Integer.MIN_VALUE - 1),new Double(0),new Double(1),new Double(0),new Double(((Date)resultDate[9]).getTime()),new Double(1.1),new Double(0),null,new Exception(""String_Node_Str""),new Double(""String_Node_Str""),new Double(10),new Double(10),new Double(10)};
  resultString=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",df.format(resultDate[9]),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueExpectedResult=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),""String_Node_Str"",""String_Node_Str"",((Date)resultDate[9]).toString(),new Double(1.1),new Integer(0),null,new Integer(1),""String_Node_Str"",new Integer(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  testObjectDecimal=new Object[]{new Double(Double.NaN),new Double(Double.POSITIVE_INFINITY),new Double(Double.NEGATIVE_INFINITY),new Double(Double.MAX_VALUE),new Double(Double.MIN_VALUE)};
  resultObjectDecimal=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new BigDecimal(new Double(Double.MAX_VALUE).toString()),new BigDecimal(new Double(Double.MIN_VALUE).toString())};
  testObjectDouble=new Object[]{new Float(1)};
  resultObjectDouble=new Object[]{new Double(1)};
}","protected void setUp() throws Exception {
  super.setUp();
  testObject=new Object[]{new Integer(1),new Integer(0),BigDecimal.valueOf(Integer.MAX_VALUE),BigDecimal.valueOf(Integer.MAX_VALUE + 1),BigDecimal.valueOf(Integer.MIN_VALUE),BigDecimal.valueOf(Integer.MIN_VALUE - 1),BigDecimal.valueOf(0l),Boolean.valueOf(true),Boolean.valueOf(false),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),Double.valueOf(""String_Node_Str""),Double.valueOf(""String_Node_Str""),null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueInputObject=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),String.valueOf(0l),""String_Node_Str"",""String_Node_Str"",((new GregorianCalendar(2004 + 1900,1,1)).getTime()).toString(),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  resultDate=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),null,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  resultInteger=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),new Integer(1),new Integer(0),new Integer((int)((Date)resultDate[9]).getTime()),new Integer((int)1.1),new Integer(0),null,new Exception(""String_Node_Str""),new Integer(""String_Node_Str""),new Integer(10),new Integer(10),new Integer(10)};
  resultBigDecimal=new Object[]{new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(Integer.MAX_VALUE),new BigDecimal(Integer.MAX_VALUE + 1),new BigDecimal(Integer.MIN_VALUE),new BigDecimal(Integer.MIN_VALUE - 1),new BigDecimal(0),new BigDecimal(1),new BigDecimal(0),new BigDecimal(((Date)resultDate[9]).getTime()),new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),null,new Exception(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(10),new BigDecimal(10),new BigDecimal(10)};
  resultBoolean=new Object[]{Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.FALSE,new Exception(""String_Node_Str""),Boolean.TRUE,Boolean.FALSE,Boolean.FALSE,new Exception(""String_Node_Str""),Boolean.TRUE,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str"")};
  resultDouble=new Object[]{new Double(1),new Double(0),new Double(Integer.MAX_VALUE),new Double(Integer.MAX_VALUE + 1),new Double(Integer.MIN_VALUE),new Double(Integer.MIN_VALUE - 1),new Double(0),new Double(1),new Double(0),new Double(((Date)resultDate[9]).getTime()),new Double(1.1),new Double(0),null,new Exception(""String_Node_Str""),new Double(""String_Node_Str""),new Double(10),new Double(10),new Double(10)};
  resultString=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",df.format(resultDate[9]),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueExpectedResult=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),""String_Node_Str"",""String_Node_Str"",((Date)resultDate[9]).toString(),new Double(1.1),new Integer(0),null,new Integer(1),""String_Node_Str"",new Integer(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  testObjectDecimal=new Object[]{new Double(Double.NaN),new Double(Double.POSITIVE_INFINITY),new Double(Double.NEGATIVE_INFINITY),new Double(Double.MAX_VALUE),new Double(Double.MIN_VALUE)};
  resultObjectDecimal=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new BigDecimal(new Double(Double.MAX_VALUE).toString()),new BigDecimal(new Double(Double.MIN_VALUE).toString())};
  testObjectDouble=new Object[]{new Float(1)};
  resultObjectDouble=new Object[]{new Double(1)};
}",0.9776186213070726
74401,"public int getOutputType(){
  if (""String_Node_Str"".equals(sExtension)) {
    return OUTPUT_AS_IMAGE;
  }
 else {
    return OUTPUT_AS_IMAGE_WITH_MAP;
  }
}","public int getOutputType(){
  if (outputType == -1) {
    if (""String_Node_Str"".equals(sExtension) || ""String_Node_Str"".equals(sExtension)) {
      outputType=OUTPUT_AS_IMAGE;
    }
 else {
      outputType=OUTPUT_AS_IMAGE_WITH_MAP;
    }
  }
  return outputType;
}",0.5558194774346793
74402,"public Object onRowSets(IRowSet[] irsa) throws BirtException {
  if (irsa == null || irsa.length < 1 || irsa[0] == null || irsa[0].isEmpty()) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    return null;
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
  if (handle == null) {
    return null;
  }
  try {
    String javaHandlerClass=handle.getEventHandlerClass();
    if (javaHandlerClass != null && javaHandlerClass.length() > 0) {
      cm.setScript(javaHandlerClass);
    }
    IRowSet rowSet=irsa[0];
    if (rowSet == null || rowSet.isEmpty()) {
      return null;
    }
    rtc.setScriptClassLoader(new BIRTScriptClassLoader(appClassLoader));
    ScriptHandler sh=rtc.getScriptHandler();
    BIRTExternalContext externalContext=new BIRTExternalContext(context);
    if (sh == null) {
      sh=new ScriptHandler();
      rtc.setScriptHandler(sh);
      sh.setScriptClassLoader(rtc.getScriptClassLoader());
      sh.setScriptContext(rtc.getScriptContext());
      final String sScriptContent=cm.getScript();
      if (externalContext != null && externalContext.getScriptable() != null) {
        sh.init(externalContext.getScriptable());
      }
 else {
        sh.init(null);
      }
      sh.setRunTimeModel(cm);
      if (sScriptContent != null && sScriptContent.length() > 0 && rtc.isScriptingEnabled()) {
        sh.register(sScriptContent);
      }
    }
    BIRTDataRowEvaluator rowAdapter=new BIRTDataRowEvaluator(rowSet);
    Generator.instance().bindData(rowAdapter,new BIRTActionEvaluator(),cm,rtc);
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    idr=ChartEngine.instance().getRenderer(""String_Node_Str"" + sExtension.toUpperCase(Locale.US));
    idr.setProperty(IDeviceRenderer.DPI_RESOLUTION,new Integer(dpi));
    if (""String_Node_Str"".equalsIgnoreCase(sExtension)) {
      idr.setProperty(""String_Node_Str"",Boolean.TRUE);
    }
    final Bounds originalBounds=cm.getBlock().getBounds();
    final Bounds bo=(Bounds)EcoreUtil.copy(originalBounds);
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",bo));
    final Generator gr=Generator.instance();
    GeneratedChartState gcs=null;
    rtc.setActionRenderer(new BIRTActionRenderer(this.handle,this.ah,rowAdapter,this.context));
    rtc.setMessageLookup(new BIRTMessageLookup(context));
    Object renderContext=context.getAppContext().get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext instanceof HTMLRenderContext) {
      IRenderOption renderOption=((HTMLRenderContext)renderContext).getRenderOption();
      if (renderOption instanceof HTMLRenderOption) {
        if (((HTMLRenderOption)renderOption).getHtmlRtLFlag()) {
          rtc.setRightToLeft(true);
        }
      }
    }
    gcs=gr.build(idr.getDisplayServer(),cm,bo,externalContext,rtc,new ChartReportStyleProcessor(handle,this.style));
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    BufferedOutputStream bos=new BufferedOutputStream(baos);
    idr.setProperty(IDeviceRenderer.FILE_IDENTIFIER,bos);
    idr.setProperty(IDeviceRenderer.UPDATE_NOTIFIER,new EmptyUpdateNotifier(cm,gcs.getChartModel()));
    gr.render(idr,gcs);
    rowAdapter.close();
    try {
      bos.close();
      fis=new ByteArrayInputStream(baos.toByteArray());
    }
 catch (    Exception ioex) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ioex);
    }
    if (!""String_Node_Str"".equals(sExtension) && idr instanceof IImageMapEmitter) {
      imageMap=((IImageMapEmitter)idr).getImageMap();
    }
  }
 catch (  BirtException birtException) {
    Throwable ex=birtException;
    while (ex.getCause() != null) {
      ex=ex.getCause();
    }
    if (ex instanceof ChartException && ((ChartException)ex).getType() == ChartException.ZERO_DATASET) {
      return null;
    }
    if (ex instanceof ChartException && ((ChartException)ex).getType() == ChartException.ALL_NULL_DATASET) {
      return null;
    }
    if ((ex instanceof ChartException && ((ChartException)ex).getType() == ChartException.INVALID_IMAGE_SIZE)) {
      logger.log(birtException);
      return null;
    }
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(birtException);
    throw birtException;
  }
catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
  if (""String_Node_Str"".equals(sExtension)) {
    return fis;
  }
 else {
    return new Object[]{fis,imageMap};
  }
}","public Object onRowSets(IRowSet[] irsa) throws BirtException {
  if (irsa == null || irsa.length < 1 || irsa[0] == null || irsa[0].isEmpty()) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    return null;
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
  if (handle == null) {
    return null;
  }
  try {
    String javaHandlerClass=handle.getEventHandlerClass();
    if (javaHandlerClass != null && javaHandlerClass.length() > 0) {
      cm.setScript(javaHandlerClass);
    }
    IRowSet rowSet=irsa[0];
    if (rowSet == null || rowSet.isEmpty()) {
      return null;
    }
    rtc.setScriptClassLoader(new BIRTScriptClassLoader(appClassLoader));
    ScriptHandler sh=rtc.getScriptHandler();
    BIRTExternalContext externalContext=new BIRTExternalContext(context);
    if (sh == null) {
      sh=new ScriptHandler();
      rtc.setScriptHandler(sh);
      sh.setScriptClassLoader(rtc.getScriptClassLoader());
      sh.setScriptContext(rtc.getScriptContext());
      final String sScriptContent=cm.getScript();
      if (externalContext != null && externalContext.getScriptable() != null) {
        sh.init(externalContext.getScriptable());
      }
 else {
        sh.init(null);
      }
      sh.setRunTimeModel(cm);
      if (sScriptContent != null && sScriptContent.length() > 0 && rtc.isScriptingEnabled()) {
        sh.register(sScriptContent);
      }
    }
    idr=ChartEngine.instance().getRenderer(""String_Node_Str"" + sExtension.toUpperCase(Locale.US));
    idr.setProperty(IDeviceRenderer.DPI_RESOLUTION,new Integer(dpi));
    if (""String_Node_Str"".equalsIgnoreCase(sExtension)) {
      idr.setProperty(""String_Node_Str"",Boolean.TRUE);
    }
    BIRTDataRowEvaluator rowAdapter=new BIRTDataRowEvaluator(rowSet);
    Generator.instance().bindData(rowAdapter,new BIRTActionEvaluator(),cm,rtc);
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    final Bounds originalBounds=cm.getBlock().getBounds();
    final Bounds bo=(Bounds)EcoreUtil.copy(originalBounds);
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",bo));
    final Generator gr=Generator.instance();
    GeneratedChartState gcs=null;
    rtc.setActionRenderer(new BIRTActionRenderer(this.handle,this.ah,rowAdapter,this.context));
    rtc.setMessageLookup(new BIRTMessageLookup(context));
    Object renderContext=context.getAppContext().get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext instanceof HTMLRenderContext) {
      IRenderOption renderOption=((HTMLRenderContext)renderContext).getRenderOption();
      if (renderOption instanceof HTMLRenderOption) {
        if (((HTMLRenderOption)renderOption).getHtmlRtLFlag()) {
          rtc.setRightToLeft(true);
        }
      }
    }
    gcs=gr.build(idr.getDisplayServer(),cm,bo,externalContext,rtc,new ChartReportStyleProcessor(handle,this.style));
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    BufferedOutputStream bos=new BufferedOutputStream(baos);
    idr.setProperty(IDeviceRenderer.FILE_IDENTIFIER,bos);
    idr.setProperty(IDeviceRenderer.UPDATE_NOTIFIER,new EmptyUpdateNotifier(cm,gcs.getChartModel()));
    gr.render(idr,gcs);
    rowAdapter.close();
    try {
      bos.close();
      fis=new ByteArrayInputStream(baos.toByteArray());
    }
 catch (    Exception ioex) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ioex);
    }
    if (getOutputType() == OUTPUT_AS_IMAGE_WITH_MAP && idr instanceof IImageMapEmitter) {
      imageMap=((IImageMapEmitter)idr).getImageMap();
    }
  }
 catch (  BirtException birtException) {
    Throwable ex=birtException;
    while (ex.getCause() != null) {
      ex=ex.getCause();
    }
    if (ex instanceof ChartException && ((ChartException)ex).getType() == ChartException.ZERO_DATASET) {
      return null;
    }
    if (ex instanceof ChartException && ((ChartException)ex).getType() == ChartException.ALL_NULL_DATASET) {
      return null;
    }
    if ((ex instanceof ChartException && ((ChartException)ex).getType() == ChartException.INVALID_IMAGE_SIZE)) {
      logger.log(birtException);
      return null;
    }
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(birtException);
    throw birtException;
  }
catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
  if (getOutputType() == OUTPUT_AS_IMAGE) {
    return fis;
  }
 else {
    return new Object[]{fis,imageMap};
  }
}",0.9249268088665832
74403,"public String getImageMIMEType(){
  if (idr instanceof IImageMapEmitter) {
    return ((IImageMapEmitter)idr).getMimeType();
  }
 else   if (""String_Node_Str"".equals(sExtension)) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","public String getImageMIMEType(){
  return idr.getMimeType();
}",0.3925233644859813
74404,"/** 
 * Saves input code to model
 */
public void saveModel(){
  if (isCodeModified() && editObject instanceof DesignElementHandle) {
    saveEditorContentsDE((DesignElementHandle)editObject);
  }
  setIsModified(false);
}","/** 
 * Saves input code to model
 */
public void saveModel(){
  if (isCodeModified() && editObject instanceof DesignElementHandle) {
    saveEditorContentsDE((DesignElementHandle)editObject);
  }
  setIsModified(false);
  ((IFormPage)editingDomainEditor).getEditor().editorDirtyStateChanged();
  firePropertyChange(PROP_DIRTY);
}",0.8043478260869565
74405,"/** 
 * Number -> Boolean 0 		-> false others 	-> true String -> Boolean ""true"" 	-> true (ignore case) ""false"" -> false (ignore case) other string will throw an exception Date -> Boolean throw exception
 * @param source
 * @return
 * @throws BirtException
 */
public static Boolean toBoolean(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Boolean) {
    return (Boolean)source;
  }
 else   if (source instanceof Number) {
    if (((Number)source).doubleValue() == 0)     return new Boolean(false);
    return new Boolean(true);
  }
 else   if (source instanceof String) {
    if (((String)source).equalsIgnoreCase(""String_Node_Str""))     return Boolean.TRUE;
 else     if (((String)source).equalsIgnoreCase(""String_Node_Str""))     return Boolean.FALSE;
 else {
      try {
        if (Integer.parseInt((String)source) == 0)         return Boolean.FALSE;
 else         return Boolean.TRUE;
      }
 catch (      NumberFormatException e) {
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}","/** 
 * Number -> Boolean 0 		-> false others 	-> true String -> Boolean ""true"" 	-> true (ignore case) ""false"" -> false (ignore case) other string will throw an exception Date -> Boolean throw exception
 * @param source
 * @return
 * @throws BirtException
 */
public static Boolean toBoolean(Object source) throws BirtException {
  if (source == null)   return Boolean.FALSE;
  if (source instanceof Boolean) {
    return (Boolean)source;
  }
 else   if (source instanceof Number) {
    if (((Number)source).doubleValue() == 0)     return new Boolean(false);
    return new Boolean(true);
  }
 else   if (source instanceof String) {
    if (((String)source).equalsIgnoreCase(""String_Node_Str""))     return Boolean.TRUE;
 else     if (((String)source).equalsIgnoreCase(""String_Node_Str""))     return Boolean.FALSE;
 else {
      try {
        if (Integer.parseInt((String)source) == 0)         return Boolean.FALSE;
 else         return Boolean.TRUE;
      }
 catch (      NumberFormatException e) {
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}",0.9932189868368568
74406,"private void applyTimeZone(){
  if (this.dateFormat != null) {
    this.dateFormat.setTimeZone(timeZone);
  }
  if (this.dateTimeFormat != null) {
    this.dateTimeFormat.setTimeZone(timeZone);
  }
  if (this.timeFormat != null) {
    this.timeFormat.setTimeZone(timeZone);
  }
}","private void applyTimeZone(){
  if (this.timeZone != null) {
    if (this.dateFormat != null) {
      this.dateFormat.setTimeZone(timeZone);
    }
    if (this.dateTimeFormat != null) {
      this.dateTimeFormat.setTimeZone(timeZone);
    }
    if (this.timeFormat != null) {
      this.timeFormat.setTimeZone(timeZone);
    }
  }
}",0.6415711947626841
74407,"public void setUp() throws Exception {
  TimeZone.setDefault(TimeZone.getTimeZone(""String_Node_Str""));
  cx=Context.enter();
  scope=cx.initStandardObjects();
  ScriptableObject.putProperty(scope,""String_Node_Str"",new BirtDateTime());
}","public void setUp() throws Exception {
  cx=Context.enter();
  scope=cx.initStandardObjects();
  ScriptableObject.putProperty(scope,""String_Node_Str"",new BirtDateTime());
}",0.8431372549019608
74408,"public void tearDown(){
  Context.exit();
  TimeZone.setDefault(this.currentTimeZone);
}","public void tearDown(){
  Context.exit();
}",0.6564885496183206
74409,"protected void init(){
  assert(content instanceof IImageContent);
  image=(IImageContent)content;
  maxWidth=parent.getCurrentMaxContentWidth();
  Dimension contentDimension=getSpecifiedDimension(image);
  root=(ContainerArea)createInlineContainer(image,true,true);
  validateBoxProperty(root.getStyle(),maxWidth,context.getMaxHeight());
  root.setAllocatedWidth(maxWidth);
  ImageArea imageArea=(ImageArea)AreaFactory.createImageArea(image);
  imageArea.setWidth(contentDimension.getWidth());
  imageArea.setHeight(contentDimension.getHeight());
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  processChartLegend(image,imageArea);
  root.setContentWidth(contentDimension.getWidth());
  root.setContentHeight(Math.min(context.getMaxHeight(),contentDimension.getHeight()));
}","protected void init(){
  assert(content instanceof IImageContent);
  image=(IImageContent)content;
  maxWidth=parent.getCurrentMaxContentWidth();
  Dimension contentDimension=getSpecifiedDimension(image);
  root=(ContainerArea)createInlineContainer(image,true,true);
  validateBoxProperty(root.getStyle(),maxWidth,context.getMaxHeight());
  root.setAllocatedWidth(maxWidth);
  ImageArea imageArea=(ImageArea)AreaFactory.createImageArea(image);
  imageArea.setWidth(contentDimension.getWidth());
  imageArea.setHeight(contentDimension.getHeight());
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  processChartLegend(image,imageArea);
  root.setContentWidth(Math.min(parent.getCurrentMaxContentWidth(),contentDimension.getWidth()));
  root.setContentHeight(Math.min(parent.getCurrentMaxContentHeight(),contentDimension.getHeight()));
}",0.9505882352941176
74410,"public void testDateFormat(){
  String golden=""String_Node_Str"";
  DateFormatter sample=new DateFormatter(""String_Node_Str"",ULocale.ENGLISH);
  Locale locDef=Locale.getDefault();
  Calendar dateCal=Calendar.getInstance(locDef);
  dateCal.set(8,8,13,20,1,44);
  Date date=dateCal.getTime();
  String fmtDate=sample.format(date);
  assertEquals(golden,fmtDate);
}","public void testDateFormat(){
  String golden=""String_Node_Str"";
  DateFormatter sample=new DateFormatter(""String_Node_Str"",ULocale.ENGLISH,TimeZone.getTimeZone(""String_Node_Str""));
  Locale locDef=Locale.getDefault();
  Calendar dateCal=Calendar.getInstance(locDef);
  dateCal.set(8,8,13,20,1,44);
  Date date=dateCal.getTime();
  String fmtDate=sample.format(date);
  assertEquals(golden,fmtDate);
}",0.94750656167979
74411,"public void testDateFormatString(){
  DateFormatter sample=new DateFormatter(""String_Node_Str"");
  Locale locDef=Locale.getDefault();
  Calendar dateCal=Calendar.getInstance(locDef);
  dateCal.set(8,8,13,20,1,44);
  Date date=dateCal.getTime();
  SimpleDateFormat sampleJava=new SimpleDateFormat(""String_Node_Str"",locDef);
  assertEquals(sampleJava.format(date),sample.format(date));
}","public void testDateFormatString(){
  DateFormatter sample=new DateFormatter(""String_Node_Str"",ULocale.ENGLISH,TimeZone.getTimeZone(""String_Node_Str""));
  Locale locDef=Locale.getDefault();
  Calendar dateCal=Calendar.getInstance(locDef);
  dateCal.set(8,8,13,20,1,44);
  Date date=dateCal.getTime();
  SimpleDateFormat sampleJava=new SimpleDateFormat(""String_Node_Str"",locDef);
  assertEquals(sampleJava.format(date),sample.format(date));
}",0.9322033898305084
74412,"private List getSelectValueList() throws BirtException {
  List selectValueList=new ArrayList();
  ReportItemHandle reportItem=DEUtil.getBindingHolder(currentItem);
  if (bindingName != null && reportItem != null) {
    DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,reportItem.getModuleHandle()));
    selectValueList.addAll(session.getColumnValueSet(reportItem.getDataSet(),reportItem.paramBindingsIterator(),reportItem.columnBindingsIterator(),bindingName));
    session.shutdown();
  }
 else {
    ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  return selectValueList;
}","private List getSelectValueList() throws BirtException {
  List selectValueList=new ArrayList();
  ReportItemHandle reportItem=DEUtil.getBindingHolder(currentItem);
  if (bindingName != null && reportItem != null) {
    selectValueList=SelectValueFetcher.getSelectValueList(expression.getText(),reportItem.getDataSet(),false);
  }
 else {
    ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  return selectValueList;
}",0.642504118616145
74413,"/** 
 * Returns the cascading parameter selection list
 * @param paramName
 * @param design
 * @param groupName
 * @param groupKeys
 * @param options
 * @param attrBean
 * @param keepDefValue
 * @return
 * @throws RemoteException
 * @throws ReportServiceException
 */
private List doQueryCascadeParameterSelectionList(String paramName,IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options,ViewerAttributeBean attrBean,boolean keepDefValue) throws RemoteException, ReportServiceException {
  ParameterDefinition parameter=attrBean.findParameterDefinition(paramName);
  String defaultValue=null;
  String defaultLabel=null;
  if (keepDefValue) {
    Object obj=attrBean.getDefaultValues().get(parameter.getName());
    if (obj != null) {
      defaultValue=DataUtil.getDisplayValue(obj);
      defaultLabel=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),obj,attrBean.getLocale());
    }
  }
  List selectionList=preHandleCascadeParameterSelectionList(parameter,defaultValue,defaultLabel);
  int index=selectionList.size();
  Collection list=getReportService().getSelectionListForCascadingGroup(design,groupName,groupKeys,options);
  if (list != null && list.size() > 0) {
    Iterator iList=list.iterator();
    while (iList != null && iList.hasNext()) {
      ParameterSelectionChoice item=(ParameterSelectionChoice)iList.next();
      if (item == null)       continue;
      Object value=item.getValue();
      try {
        value=DataUtil.convert(value,parameter.getDataType());
      }
 catch (      Exception e) {
        value=null;
      }
      String displayValue=DataUtil.getDisplayValue(value);
      if (displayValue == null)       continue;
      String label=item.getLabel();
      if (label == null || label.length() <= 0) {
        label=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),value,attrBean.getLocale());
      }
      if (label != null) {
        if (keepDefValue) {
          if (displayValue.equals(defaultValue) && (label.equals(defaultLabel) || parameter.isDistinct()))           continue;
        }
        SelectItemChoice selectItemChoice=new SelectItemChoice();
        selectItemChoice.setLabel(label);
        selectItemChoice.setValue(displayValue);
        selectionList.add(index++,selectItemChoice);
      }
    }
  }
  return selectionList;
}","/** 
 * Returns the cascading parameter selection list
 * @param paramName
 * @param design
 * @param groupName
 * @param groupKeys
 * @param options
 * @param attrBean
 * @param keepDefValue
 * @return
 * @throws RemoteException
 * @throws ReportServiceException
 */
private List doQueryCascadeParameterSelectionList(String paramName,IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options,ViewerAttributeBean attrBean,boolean keepDefValue) throws RemoteException, ReportServiceException {
  ParameterDefinition parameter=attrBean.findParameterDefinition(paramName);
  String defaultValue=null;
  String defaultLabel=null;
  if (keepDefValue) {
    Object obj=attrBean.getDefaultValues().get(parameter.getName());
    if (obj != null) {
      defaultValue=DataUtil.getDisplayValue(obj);
      defaultLabel=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),obj,attrBean.getLocale());
    }
  }
  List selectionList=preHandleCascadeParameterSelectionList(parameter,defaultValue,defaultLabel);
  int index=selectionList.size();
  Collection list=getReportService().getSelectionListForCascadingGroup(design,groupName,groupKeys,options);
  if (list != null && list.size() > 0) {
    Iterator iList=list.iterator();
    while (iList != null && iList.hasNext()) {
      ParameterSelectionChoice item=(ParameterSelectionChoice)iList.next();
      if (item == null)       continue;
      Object value=item.getValue();
      try {
        value=DataUtil.convert(value,parameter.getDataType());
      }
 catch (      Exception e) {
        value=null;
      }
      String displayValue=DataUtil.getDisplayValue(value);
      if (displayValue == null)       continue;
      String label=item.getLabel();
      if (label == null || label.length() <= 0) {
        label=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),value,attrBean.getLocale());
      }
      if (label != null) {
        SelectItemChoice selectItemChoice=new SelectItemChoice();
        selectItemChoice.setLabel(label);
        selectItemChoice.setValue(displayValue);
        selectionList.add(index++,selectItemChoice);
      }
    }
  }
  return selectionList;
}",0.9637601581374916
74414,"private boolean compareFiles(String src,String golden){
  boolean result=false;
  try {
    InputStream goldenInputStream=new FileInputStream(new File(golden));
    assert(goldenInputStream != null);
    StringBuffer goldenBuffer=new StringBuffer();
    byte[] buffer=new byte[5120];
    int readCount=-1;
    while ((readCount=goldenInputStream.read(buffer)) != -1) {
      goldenBuffer.append(new String(buffer));
    }
    InputStream srcInputStream=new FileInputStream(new File(golden));
    assert(srcInputStream != null);
    StringBuffer srcBuffer=new StringBuffer();
    buffer=new byte[5120];
    readCount=-1;
    while ((readCount=srcInputStream.read(buffer)) != -1) {
      srcBuffer.append(new String(buffer));
    }
    result=(srcBuffer.toString()).equals(goldenBuffer.toString());
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return false;
  }
  return result;
}","private boolean compareFiles(String src,String golden){
  boolean result=false;
  try {
    InputStream goldenInputStream=new FileInputStream(new File(golden));
    assert(goldenInputStream != null);
    StringBuffer goldenBuffer=new StringBuffer();
    byte[] buffer=new byte[5120];
    int readCount=-1;
    while ((readCount=goldenInputStream.read(buffer)) != -1) {
      goldenBuffer.append(new String(buffer,0,readCount));
    }
    InputStream srcInputStream=new FileInputStream(new File(golden));
    assert(srcInputStream != null);
    StringBuffer srcBuffer=new StringBuffer();
    buffer=new byte[5120];
    readCount=-1;
    while ((readCount=srcInputStream.read(buffer)) != -1) {
      srcBuffer.append(new String(buffer,0,readCount));
    }
    result=(srcBuffer.toString()).equals(goldenBuffer.toString());
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return false;
  }
  return result;
}",0.9867403314917128
74415,"/** 
 * Execute a listint and create the contents. List create a serials of contents. The execution process is: <li> create an container which will contain all the contents it creates. <li> push it into the stack <li> open query <li> process action, bookmark, style and visibility <li> call the onCreate if necessary <li> call emitter to start the list <li> access the query <li> call emitter to end the list <li> close the query. <li> pop up the container.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExecutor#load(org.eclipse.birt.report.engine.ir.ReportItemDesign,org.eclipse.birt.report.engine.emitter.IReportEmitter)
 */
public IContent execute(){
  ListItemDesign listDesign=(ListItemDesign)getDesign();
  IListContent listContent=report.createListContent();
  setContent(listContent);
  executeQuery();
  initializeContent(listDesign,listContent);
  processAction(listDesign,listContent);
  processBookmark(listDesign,listContent);
  processStyle(listDesign,listContent);
  processVisibility(listDesign,listContent);
  if (context.isInFactory()) {
    handleOnCreate(listContent);
  }
  startTOCEntry(listContent);
  prepareToExecuteChildren();
  return listContent;
}","/** 
 * Execute a listint and create the contents. List create a serials of contents. The execution process is: <li> create an container which will contain all the contents it creates. <li> push it into the stack <li> open query <li> process action, bookmark, style and visibility <li> call the onCreate if necessary <li> call emitter to start the list <li> access the query <li> call emitter to end the list <li> close the query. <li> pop up the container.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExecutor#load(org.eclipse.birt.report.engine.ir.ReportItemDesign,org.eclipse.birt.report.engine.emitter.IReportEmitter)
 */
public IContent execute(){
  ListItemDesign listDesign=(ListItemDesign)getDesign();
  IListContent listContent=report.createListContent();
  setContent(listContent);
  executeQuery();
  initializeContent(listDesign,listContent);
  processAction(listDesign,listContent);
  processBookmark(listDesign,listContent);
  processStyle(listDesign,listContent);
  processVisibility(listDesign,listContent);
  if (context.isInFactory()) {
    handleOnCreate(listContent);
  }
  startTOCEntry(listContent);
  boolean showIfBlank=""String_Node_Str"".equalsIgnoreCase(content.getStyle().getShowIfBlank());
  if (showIfBlank && rsetEmpty) {
    createQueryForShowIfBlank();
  }
  prepareToExecuteChildren();
  return listContent;
}",0.934748427672956
74416,"public IContent execute(){
  TableItemDesign tableDesign=(TableItemDesign)getDesign();
  ITableContent tableContent=report.createTableContent();
  setContent(tableContent);
  executeQuery();
  initializeContent(tableDesign,tableContent);
  processStyle(tableDesign,tableContent);
  processVisibility(tableDesign,tableContent);
  processBookmark(tableDesign,tableContent);
  processAction(tableDesign,tableContent);
  for (int i=0; i < tableDesign.getColumnCount(); i++) {
    ColumnDesign columnDesign=tableDesign.getColumn(i);
    Column column=new Column(report);
    column.setGenerateBy(columnDesign);
    InstanceID iid=new InstanceID(null,columnDesign.getID(),null);
    column.setInstanceID(iid);
    processColumnVisibility(columnDesign,column);
    tableContent.addColumn(column);
  }
  if (context.isInFactory()) {
    handleOnCreate(tableContent);
  }
  startTOCEntry(tableContent);
  prepareToExecuteChildren();
  return tableContent;
}","public IContent execute(){
  TableItemDesign tableDesign=(TableItemDesign)getDesign();
  ITableContent tableContent=report.createTableContent();
  setContent(tableContent);
  executeQuery();
  initializeContent(tableDesign,tableContent);
  processStyle(tableDesign,tableContent);
  processVisibility(tableDesign,tableContent);
  processBookmark(tableDesign,tableContent);
  processAction(tableDesign,tableContent);
  for (int i=0; i < tableDesign.getColumnCount(); i++) {
    ColumnDesign columnDesign=tableDesign.getColumn(i);
    Column column=new Column(report);
    column.setGenerateBy(columnDesign);
    InstanceID iid=new InstanceID(null,columnDesign.getID(),null);
    column.setInstanceID(iid);
    processColumnVisibility(columnDesign,column);
    tableContent.addColumn(column);
  }
  if (context.isInFactory()) {
    handleOnCreate(tableContent);
  }
  startTOCEntry(tableContent);
  boolean showIfBlank=""String_Node_Str"".equalsIgnoreCase(content.getStyle().getShowIfBlank());
  if (showIfBlank && rsetEmpty) {
    createQueryForShowIfBlank();
  }
  prepareToExecuteChildren();
  return tableContent;
}",0.9194956353055286
74417,"protected void doExecute() throws Exception {
  executeQuery();
}","protected void doExecute() throws Exception {
  executeQuery();
  boolean showIfBlank=""String_Node_Str"".equalsIgnoreCase(content.getStyle().getShowIfBlank());
  if (showIfBlank && rsetEmpty) {
    createQueryForShowIfBlank();
  }
}",0.4391891891891892
74418,"public IContent execute(){
  if (!executed) {
    executed=true;
    try {
      InstanceID instanceId=getInstanceID();
      if (offset != -1) {
        content=reader.loadContent(offset);
        InstanceID id=content.getInstanceID();
        if (!isSameInstance(instanceId,id)) {
          content=doCreateContent();
          content.setInstanceID(instanceId);
        }
      }
 else {
        content=doCreateContent();
      }
      content.setGenerateBy(design);
      content.setInstanceID(instanceId);
      IContent pContent=getParentContent();
      if (pContent != null) {
        content.setParent(pContent);
      }
      doExecute();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,ex.getMessage(),ex);
      context.addException(new EngineException(ex.getLocalizedMessage()));
    }
  }
  return content;
}","public IContent execute(){
  if (!executed) {
    executed=true;
    try {
      InstanceID instanceId=getInstanceID();
      if (offset != -1) {
        content=reader.loadContent(offset);
        InstanceID id=content.getInstanceID();
        if (!isSameInstance(instanceId,id)) {
          content=doCreateContent();
          content.setInstanceID(instanceId);
        }
      }
 else {
        content=doCreateContent();
      }
      content.setGenerateBy(design);
      content.setInstanceID(instanceId);
      IContent pContent=getParentContent();
      if (pContent != null) {
        content.setParent(pContent);
      }
      doExecute();
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,ex.getMessage(),ex);
      context.addException(new EngineException(ex.getLocalizedMessage(),ex));
    }
  }
  return content;
}",0.998217468805704
74419,"protected void doExecute() throws Exception {
  TableItemDesign tableDesign=(TableItemDesign)design;
  ITableContent tableContent=(ITableContent)content;
  executeQuery();
  if (tableContent.getColumnCount() == 0) {
    for (int i=0; i < tableDesign.getColumnCount(); i++) {
      ColumnDesign columnDesign=tableDesign.getColumn(i);
      Column column=new Column(report);
      column.setGenerateBy(columnDesign);
      InstanceID iid=new InstanceID(null,columnDesign.getID(),null);
      column.setInstanceID(iid);
      tableContent.addColumn(column);
    }
  }
 else {
    int columnCount=tableContent.getColumnCount();
    for (int i=0; i < columnCount; i++) {
      Column column=(Column)tableContent.getColumn(i);
      InstanceID iid=column.getInstanceID();
      if (iid != null) {
        long componentId=iid.getComponentID();
        ReportElementDesign element=report.getDesign().getReportItemByID(componentId);
        column.setGenerateBy(element);
      }
    }
  }
}","protected void doExecute() throws Exception {
  TableItemDesign tableDesign=(TableItemDesign)design;
  ITableContent tableContent=(ITableContent)content;
  executeQuery();
  if (tableContent.getColumnCount() == 0) {
    for (int i=0; i < tableDesign.getColumnCount(); i++) {
      ColumnDesign columnDesign=tableDesign.getColumn(i);
      Column column=new Column(report);
      column.setGenerateBy(columnDesign);
      InstanceID iid=new InstanceID(null,columnDesign.getID(),null);
      column.setInstanceID(iid);
      tableContent.addColumn(column);
    }
  }
 else {
    int columnCount=tableContent.getColumnCount();
    for (int i=0; i < columnCount; i++) {
      Column column=(Column)tableContent.getColumn(i);
      InstanceID iid=column.getInstanceID();
      if (iid != null) {
        long componentId=iid.getComponentID();
        ReportElementDesign element=report.getDesign().getReportItemByID(componentId);
        column.setGenerateBy(element);
      }
    }
  }
  boolean showIfBlank=""String_Node_Str"".equalsIgnoreCase(content.getStyle().getShowIfBlank());
  if (showIfBlank && rsetEmpty) {
    createQueryForShowIfBlank();
  }
}",0.9221388367729833
74420,"/** 
 * @throws DataException
 */
private void validateComputedMeasureNames() throws DataException {
  Set existNames=new HashSet();
  String[] measureNames=cube.getMeasureNames();
  for (int i=0; i < measureNames.length; i++) {
    existNames.add(measureNames[i]);
  }
  MeasureInfo[] mis=computedMeasureHelper.getAllComputedMeasureInfos();
  for (int i=0; i < mis.length; i++) {
    String name=mis[i].getMeasureName();
    if (existNames.contains(name)) {
      throw new DataException(ResourceConstants.DUPLICATE_MEASURE_NAME,name);
    }
    existNames.add(name);
  }
}","/** 
 * @throws DataException
 */
private void validateComputedMeasureNames() throws DataException {
  Set existNames=new HashSet(Arrays.asList(cube.getMeasureNames()));
  MeasureInfo[] mis=computedMeasureHelper.getAllComputedMeasureInfos();
  for (int i=0; i < mis.length; i++) {
    String name=mis[i].getMeasureName();
    if (existNames.contains(name)) {
      throw new DataException(ResourceConstants.DUPLICATE_MEASURE_NAME,name);
    }
    existNames.add(name);
  }
}",0.8320610687022901
74421,"/** 
 * set the page's layout
 */
private void setPageLayout(){
  removeAllAvailableDbObjects();
  enableSchemaComponent(isSchemaSupported);
  setRootElement();
  sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(this.getDataSetDesign().getDataSourceDesign());
  populateAvailableDbObjects();
  try {
    if (metaDataProvider.getConnection() == null || this.getDataSetDesign().getQueryText() == null || this.getDataSetDesign().getQueryText().trim().length() == 0)     return;
    ResultSetMetaData meta=null;
    try {
      meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).getMetaData();
    }
 catch (    SQLException e) {
      try {
        meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).executeQuery().getMetaData();
      }
 catch (      Exception ex) {
        meta=null;
      }
    }
    if (meta == null)     return;
    if (this.getDataSetDesign().getPrimaryResultSet() == null) {
      this.shouldUpdateDataSetDesign=true;
      return;
    }
    ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
    if (meta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
      this.shouldUpdateDataSetDesign=true;
      return;
    }
    for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
      ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
      if (!(cd.getAttributes().getName().equals(meta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == meta.getColumnType(i + 1))) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
    }
  }
 catch (  SQLException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
}","/** 
 * set the page's layout
 */
private void setPageLayout(){
  removeAllAvailableDbObjects();
  enableSchemaComponent(isSchemaSupported);
  setRootElement();
  sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(this.getDataSetDesign().getDataSourceDesign());
  populateAvailableDbObjects();
  try {
    if (metaDataProvider.getConnection() == null || this.getDataSetDesign().getQueryText() == null || this.getDataSetDesign().getQueryText().trim().length() == 0)     return;
    MetaDataRetriever retriever=new MetaDataRetriever(this.metaDataProvider,this.getDataSetDesign().getQueryText());
    IResultSetMetaData rsMeta=retriever.getResultSetMetaData();
    if (rsMeta == null) {
      retriever.close();
      return;
    }
    if (this.getDataSetDesign().getPrimaryResultSet() == null) {
      this.shouldUpdateDataSetDesign=true;
      retriever.close();
      return;
    }
    ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
    if (rsMeta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
      this.shouldUpdateDataSetDesign=true;
      retriever.close();
      return;
    }
    for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
      ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
      if (!(cd.getAttributes().getName().equals(rsMeta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == rsMeta.getColumnType(i + 1))) {
        this.shouldUpdateDataSetDesign=true;
        retriever.close();
        return;
      }
    }
    retriever.close();
  }
 catch (  OdaException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
}",0.8151139313527546
74422,"protected DataSetDesign collectDataSetDesign(DataSetDesign design){
  if (this.getControl() == null || this.getControl().isDisposed())   return design;
  if (design != null && doc != null)   design.setQueryText(doc.get());
  if (this.shouldUpdateDataSetDesign || !formerQueryTxt.equals(design.getQueryText())) {
    SQLUtility.saveDataSetDesign(design);
    formerQueryTxt=design.getQueryText();
    this.shouldUpdateDataSetDesign=false;
  }
  return design;
}","protected DataSetDesign collectDataSetDesign(DataSetDesign design){
  if (this.getControl() == null || this.getControl().isDisposed())   return design;
  if (design != null && doc != null)   design.setQueryText(doc.get());
  if (this.shouldUpdateDataSetDesign || !formerQueryTxt.equals(design.getQueryText())) {
    MetaDataRetriever retriever=new MetaDataRetriever(this.metaDataProvider,design.getQueryText());
    IResultSetMetaData resultsetMeta=retriever.getResultSetMetaData();
    IParameterMetaData paramMeta=retriever.getParameterMetaData();
    SQLUtility.saveDataSetDesign(design,resultsetMeta,paramMeta);
    formerQueryTxt=design.getQueryText();
    this.shouldUpdateDataSetDesign=false;
    retriever.close();
  }
  return design;
}",0.7634854771784232
74423,"public static int in_word_set(String str){
  int len=str.length();
  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
    int key=hash(str);
    if (key <= MAX_HASH_VALUE && key >= 0) {
      int index=lookup[key];
      if (index >= 0) {
        if (len == lengthtable[index]) {
          String s=wordlist[index];
          if (s.equals(str))           return index;
        }
      }
 else       if (index < -TOTAL_KEYWORDS) {
        int offset=-1 - TOTAL_KEYWORDS - index;
        int lengthptr=TOTAL_KEYWORDS + lookup[offset];
        int wordptr=TOTAL_KEYWORDS + lookup[offset];
        int wordendptr=wordptr + -lookup[offset + 1];
        while (wordptr < wordendptr) {
          if (len == lengthtable[lengthptr]) {
            String s=wordlist[wordptr];
            if (s.equals(str))             return wordptr;
          }
          lengthptr++;
          wordptr++;
        }
      }
    }
  }
  return -1;
}","public static int in_word_set(String str){
  int len=str.length();
  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
    int key=hash(str);
    if (key <= MAX_HASH_VALUE && key >= 0) {
      int index=lookup[key];
      if (index >= 0) {
        if (len == lengthtable[index]) {
          String s=wordlist[index];
          if (s.equals(str))           return index;
        }
      }
    }
  }
  return -1;
}",0.5905044510385756
74424,"public static int hash(String str){
  int len=str.length();
  return len + asso_values[str.charAt(len - 1)] + asso_values[str.charAt(0)];
}","public static int hash(String str){
  int hashValue=str.length();
switch (hashValue) {
default :
    hashValue+=asso_values[str.charAt(11)];
case 11:
case 10:
case 9:
case 8:
case 7:
case 6:
case 5:
case 4:
case 3:
  hashValue+=asso_values[str.charAt(2)];
case 2:
case 1:
hashValue+=asso_values[str.charAt(0)];
break;
}
return hashValue + asso_values[str.charAt(str.length() - 1)];
}",0.4367816091954023
74425,"private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  IFactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  facttableRowIterator=new FactTableRowIteratorWithFilter(dimensions,facttableRowIterator,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  IFactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  facttableRowIterator=new FactTableRowIteratorWithFilter(dimensions,facttableRowIterator,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
  facttableRowIterator.close();
}",0.9969975605179208
74426,"/** 
 * This method is responsible for computing the aggregation result according to the specified aggregation definitions.
 * @param aggregations
 * @param stopSign
 * @return
 * @throws DataException
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet[] onePassExecute(AggregationDefinition[] aggregations,StopSign stopSign) throws DataException, IOException, BirtException {
  IDiskArray[] dimPosition=getFilterResult();
  int count=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      count++;
    }
  }
  IDimension[] dimensions=cube.getDimesions();
  String[] validDimensionName=new String[count];
  IDiskArray[] validDimPosition=new IDiskArray[count];
  int pos=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      validDimPosition[pos]=dimPosition[i];
      validDimensionName[pos]=dimensions[i].getName();
      pos++;
    }
  }
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(cube.getFactTable(),validDimensionName,validDimPosition,computedMeasureHelper,stopSign);
  DimensionResultIterator[] dimensionResultIterator=populateDimensionResultIterator(dimPosition,stopSign);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(dimensionResultIterator,facttableRowIterator,aggregations);
  return aggregationCalculatorExecutor.execute(stopSign);
}","/** 
 * This method is responsible for computing the aggregation result according to the specified aggregation definitions.
 * @param aggregations
 * @param stopSign
 * @return
 * @throws DataException
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet[] onePassExecute(AggregationDefinition[] aggregations,StopSign stopSign) throws DataException, IOException, BirtException {
  IDiskArray[] dimPosition=getFilterResult();
  int count=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      count++;
    }
  }
  IDimension[] dimensions=cube.getDimesions();
  String[] validDimensionName=new String[count];
  IDiskArray[] validDimPosition=new IDiskArray[count];
  int pos=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      validDimPosition[pos]=dimPosition[i];
      validDimensionName[pos]=dimensions[i].getName();
      pos++;
    }
  }
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(cube.getFactTable(),validDimensionName,validDimPosition,computedMeasureHelper,stopSign);
  DimensionResultIterator[] dimensionResultIterator=populateDimensionResultIterator(dimPosition,stopSign);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(dimensionResultIterator,facttableRowIterator,aggregations);
  try {
    return aggregationCalculatorExecutor.execute(stopSign);
  }
  finally {
    facttableRowIterator.close();
  }
}",0.9776847977684798
74427,"public boolean next() throws IOException, DataException {
  while (!stopSign.isStopped()) {
    try {
      if (currentSegment == null) {
        this.close();
        return false;
      }
      Bytes combinedDimensionPosition=currentSegment.readBytes();
      currentPos=factTable.getCombinedPositionCalculator().calculateDimensionPosition(getSubDimensionIndex(),combinedDimensionPosition.bytesValue());
      for (int i=0; i < this.currentMeasureValues.length; i++) {
        currentMeasureValues[i]=DocumentObjectUtil.readValue(currentSegment,factTable.getMeasureInfo()[i].getDataType());
      }
      currentMeasureMap.setMeasureValue(currentMeasureValues);
      if (computedMeasureHelper != null) {
        try {
          currentComputedMeasureValues=computedMeasureHelper.computeMeasureValues(currentMeasureMap);
        }
 catch (        DataException e) {
          throw new DataException(ResourceConstants.FAIL_COMPUTE_COMPUTED_MEASURE_VALUE,e);
        }
      }
      if (!isSelectedRow()) {
        continue;
      }
 else {
        return true;
      }
    }
 catch (    EOFException e) {
      break;
    }
  }
  if (stopSign.isStopped() || !nextSegment()) {
    this.close();
    return false;
  }
  return next();
}","public boolean next() throws IOException, DataException {
  while (!stopSign.isStopped()) {
    try {
      if (currentSegment == null) {
        return false;
      }
      Bytes combinedDimensionPosition=currentSegment.readBytes();
      currentPos=factTable.getCombinedPositionCalculator().calculateDimensionPosition(getSubDimensionIndex(),combinedDimensionPosition.bytesValue());
      for (int i=0; i < this.currentMeasureValues.length; i++) {
        currentMeasureValues[i]=DocumentObjectUtil.readValue(currentSegment,factTable.getMeasureInfo()[i].getDataType());
      }
      currentMeasureMap.setMeasureValue(currentMeasureValues);
      if (computedMeasureHelper != null) {
        try {
          currentComputedMeasureValues=computedMeasureHelper.computeMeasureValues(currentMeasureMap);
        }
 catch (        DataException e) {
          throw new DataException(ResourceConstants.FAIL_COMPUTE_COMPUTED_MEASURE_VALUE,e);
        }
      }
      if (!isSelectedRow()) {
        continue;
      }
 else {
        return true;
      }
    }
 catch (    EOFException e) {
      break;
    }
  }
  if (stopSign.isStopped() || !nextSegment()) {
    return false;
  }
  return next();
}",0.9835526315789472
74428,"/** 
 * @throws DataException
 */
private void close() throws DataException {
  if (this.computedMeasureHelper != null)   this.computedMeasureHelper.cleanUp();
}","/** 
 * @throws DataException
 */
public void close() throws DataException {
  if (this.computedMeasureHelper != null)   this.computedMeasureHelper.cleanUp();
}",0.97196261682243
74429,"/** 
 * top/bottom dimension filter.
 * @throws Exception
 */
public void testAggrFilter2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_N,""String_Node_Str""));
  CubeFilterDefinition filter2=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * top/bottom dimension filter.
 * @throws Exception
 */
public void testAggrFilter2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_N,""String_Node_Str""));
  CubeFilterDefinition filter2=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.8625063419583967
74430,"public void testAggrFilter1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter1.setAxisQualifierLevels(null);
  filter1.setAxisQualifierValues(null);
  filter1.setTargetLevel(level21);
  CubeFilterDefinition filter2=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  filter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  filter2.setTargetLevel(level11);
  CubeFilterDefinition filter3=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_PERCENT,""String_Node_Str""));
  filter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  filter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  filter3.setTargetLevel(level11);
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  cqd.addFilter(filter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","public void testAggrFilter1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter1.setAxisQualifierLevels(null);
  filter1.setAxisQualifierValues(null);
  filter1.setTargetLevel(level21);
  CubeFilterDefinition filter2=new CubeFilterDefinition(new ScriptExpression(""String_Node_Str""));
  filter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  filter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  filter2.setTargetLevel(level11);
  CubeFilterDefinition filter3=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_PERCENT,""String_Node_Str""));
  filter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  filter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  filter3.setTargetLevel(level11);
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  cqd.addFilter(filter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9755998373322488
74431,"/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9743480119709278
74432,"/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1() throws Exception {
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1() throws Exception {
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9720670391061452
74433,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort6() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level11);
  sorter2.setSortDirection(ISortDefinition.SORT_ASC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_ASC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort6() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevels(null);
  sorter1.setAxisQualifierValues(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level11);
  sorter2.setSortDirection(ISortDefinition.SORT_ASC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevels(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValues(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_ASC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9769762087490408
74434,"public Object[] computeMeasureValues(IMeasureMap measureList){
  Object[] result=new Object[1];
  Integer value=new Integer(((Integer)measureList.getMeasureValue(""String_Node_Str"")).intValue() + 1);
  result[0]=value;
  return result;
}","public Object[] computeMeasureValues(IFacttableRow factTableRow) throws DataException {
  Object[] result=new Object[1];
  Integer value=new Integer(((Integer)factTableRow.getMeasureValue(""String_Node_Str"")).intValue() + 1);
  result[0]=value;
  return result;
}",0.8152610441767069
74435,"/** 
 * @return
 */
public Object[] computeMeasureValues(IMeasureMap measureMap) throws DataException ;","/** 
 * @return
 */
public Object[] computeMeasureValues(IFacttableRow factTableRow) throws DataException ;",0.8095238095238095
74436,"public Object[] computeMeasureValues(IMeasureList measureList){
  Object[] result=new Object[1];
  Integer value=new Integer(((Integer)measureList.getMeasureValue(""String_Node_Str"")).intValue() + 1);
  result[0]=value;
  return result;
}","public Object[] computeMeasureValues(IMeasureMap measureList){
  Object[] result=new Object[1];
  Integer value=new Integer(((Integer)measureList.getMeasureValue(""String_Node_Str"")).intValue() + 1);
  result[0]=value;
  return result;
}",0.985200845665962
74437,"public void testCube1Aggregation() throws IOException, DataException, BirtException {
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",documentManager,new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str""},new Object[]{""String_Node_Str""},true,false);
  cubeQueryExcutorHelper.addFilter(new LevelFilter(dimLevel21,filter[0]));
  cubeQueryExcutorHelper.setComputedMeasure(new ComputedMeasureHelper());
  AggregationDefinition[] aggregations=new AggregationDefinition[4];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[2];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  funcitons[1]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  AggregationFunctionDefinition[] funcitonsWithParameterCol=new AggregationFunctionDefinition[3];
  funcitonsWithParameterCol[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  funcitonsWithParameterCol[1]=new AggregationFunctionDefinition(null,""String_Node_Str"",new DimLevel(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  aggregations[2]=new AggregationDefinition(null,null,funcitons);
  aggregations[3]=new AggregationDefinition(levelsForFilter,sortType,null);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  CubeQueryExecutorHelper.saveAggregationResultSet(pathName,""String_Node_Str"",resultSet);
  resultSet=CubeQueryExecutorHelper.loadAggregationResultSet(pathName,""String_Node_Str"");
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  assertEquals(resultSet[0].getAggregationValue(1),new Double(10));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[0].getAggregationValue(1),new Double(26));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
  assertEquals(resultSet[2].length(),1);
  assertEquals(resultSet[2].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[2].getLevelIndex(dimLevel31),-1);
  resultSet[2].seek(0);
  assertEquals(resultSet[2].getLevelKeyValue(0),null);
  assertEquals(resultSet[2].getAggregationValue(0),new Double(28));
  assertEquals(resultSet[3].length(),8);
  assertEquals(resultSet[3].getAggregationDataType(0),DataType.UNKNOWN_TYPE);
  assertEquals(resultSet[3].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[3].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[3].seek(0);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(1);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(2));
  resultSet[3].seek(2);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(3);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(4));
  resultSet[3].seek(4);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(5);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(6));
  resultSet[3].seek(6);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(7));
  resultSet[3].seek(7);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(8));
  for (int i=0; i < resultSet.length; i++) {
    resultSet[i].close();
  }
}","public void testCube1Aggregation() throws IOException, DataException, BirtException {
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",documentManager,new StopSign()),new ComputedMeasureHelper());
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str""},new Object[]{""String_Node_Str""},true,false);
  cubeQueryExcutorHelper.addFilter(new LevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[4];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[2];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  funcitons[1]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  AggregationFunctionDefinition[] funcitonsWithParameterCol=new AggregationFunctionDefinition[3];
  funcitonsWithParameterCol[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  funcitonsWithParameterCol[1]=new AggregationFunctionDefinition(null,""String_Node_Str"",new DimLevel(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  aggregations[2]=new AggregationDefinition(null,null,funcitons);
  aggregations[3]=new AggregationDefinition(levelsForFilter,sortType,null);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  CubeQueryExecutorHelper.saveAggregationResultSet(pathName,""String_Node_Str"",resultSet);
  resultSet=CubeQueryExecutorHelper.loadAggregationResultSet(pathName,""String_Node_Str"");
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  assertEquals(resultSet[0].getAggregationValue(1),new Double(10));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[0].getAggregationValue(1),new Double(26));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
  assertEquals(resultSet[2].length(),1);
  assertEquals(resultSet[2].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[2].getLevelIndex(dimLevel31),-1);
  resultSet[2].seek(0);
  assertEquals(resultSet[2].getLevelKeyValue(0),null);
  assertEquals(resultSet[2].getAggregationValue(0),new Double(28));
  assertEquals(resultSet[3].length(),8);
  assertEquals(resultSet[3].getAggregationDataType(0),DataType.UNKNOWN_TYPE);
  assertEquals(resultSet[3].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[3].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[3].seek(0);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(1);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(2));
  resultSet[3].seek(2);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(3);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(4));
  resultSet[3].seek(4);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(5);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(6));
  resultSet[3].seek(6);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(7));
  resultSet[3].seek(7);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(8));
  for (int i=0; i < resultSet.length; i++) {
    resultSet[i].close();
  }
}",0.9915980230642504
74438,"private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException {
  long startTime=System.currentTimeMillis();
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  int[] data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[0]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[1]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[2]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  IDatasetIterator facttableIterator=new BigLevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  startTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"");
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),facttableIterator,dimensions,measureColumnName,new StopSign());
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  System.out.println(""String_Node_Str"");
  startTime=System.currentTimeMillis();
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(99));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(10));
  dimensionPosition[1].add(new Integer(99));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(9));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  while (facttableRowIterator.next()) {
    System.out.print(facttableRowIterator.getDimensionPosition(0) + ""String_Node_Str"" + facttableRowIterator.getDimensionPosition(1)+ ""String_Node_Str""+ facttableRowIterator.getDimensionPosition(2)+ ""String_Node_Str"");
    System.out.println(facttableRowIterator.getMeasure(0) + ""String_Node_Str"" + facttableRowIterator.getMeasure(1));
  }
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
}","private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException {
  long startTime=System.currentTimeMillis();
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  int[] data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[0]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[1]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[2]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  IDatasetIterator facttableIterator=new BigLevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  startTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"");
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),facttableIterator,dimensions,measureColumnName,new StopSign());
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  System.out.println(""String_Node_Str"");
  startTime=System.currentTimeMillis();
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(99));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(10));
  dimensionPosition[1].add(new Integer(99));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(9));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  while (facttableRowIterator.next()) {
    System.out.print(facttableRowIterator.getDimensionPosition(0) + ""String_Node_Str"" + facttableRowIterator.getDimensionPosition(1)+ ""String_Node_Str""+ facttableRowIterator.getDimensionPosition(2)+ ""String_Node_Str"");
    System.out.println(facttableRowIterator.getMeasure(0) + ""String_Node_Str"" + facttableRowIterator.getMeasure(1));
  }
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
}",0.993849493487699
74439,"private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(6));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(6));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9931931931931932
74440,"private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9934552454282964
74441,"private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,FactTable2.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,12);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(10));
  dimensionPosition[2].add(new Integer(11));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(10,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(11,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,FactTable2.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,12);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(10));
  dimensionPosition[2].add(new Integer(11));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(10,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(11,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9936066190297104
74442,"private void testFactTableSaveAndLoad(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable1.L1Col);
  iterator.setLevelMember(1,FactTable1.L2Col);
  iterator.setLevelMember(2,FactTable1.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable1.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable1.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  int[] lL1Col={1,2,3};
  iterator.setLevelMember(0,lL1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),3);
  FactTable1 factTable1=new FactTable1();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable1,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,FactTable1.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,3);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable1.L1Col);
  iterator.setLevelMember(1,FactTable1.L2Col);
  iterator.setLevelMember(2,FactTable1.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable1.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable1.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  int[] lL1Col={1,2,3};
  iterator.setLevelMember(0,lL1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),3);
  FactTable1 factTable1=new FactTable1();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable1,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,FactTable1.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,3);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9935077334351728
74443,"private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  IFactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  facttableRowIterator=new FactTableRowIteratorWithFilter(dimensions,facttableRowIterator,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  IFactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  facttableRowIterator=new FactTableRowIteratorWithFilter(dimensions,facttableRowIterator,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9935885347916272
74444,"/** 
 * Get the parameter value from .rptconfig file if it does exist
 * @return Object[] the parameter value
 */
private Object[] getParamValue(ScalarParameterHandle paramHandle){
  String designFileName=designModule.getFileName();
  String reportConfigName=designFileName.substring(0,designFileName.length() - ""String_Node_Str"".length()) + ""String_Node_Str"";
  File file=new File(reportConfigName);
  if (file.exists()) {
    String paraName=paramHandle.getName();
    ScalarParameterHandle parameterHandle=(ScalarParameterHandle)designModule.findParameter(paraName);
    paraName=paraName + ""String_Node_Str"" + parameterHandle.getID();
    SessionHandle sessionHandle=new DesignEngine(null).newSessionHandle(ULocale.US);
    ReportDesignHandle rdHandle=null;
    try {
      rdHandle=sessionHandle.openDesign(reportConfigName);
    }
 catch (    DesignFileException e) {
      return null;
    }
    if (rdHandle != null) {
      List values=new ArrayList();
      Iterator configVars=rdHandle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null) {
          String varName=prepareConfigVarName(configVar.getName());
          Object varValue=configVar.getValue();
          if (varName == null || varValue == null) {
            continue;
          }
          if (varName.equals(paraName)) {
            String value=(String)varValue;
            if (isToBeConverted(parameterHandle.getDataType())) {
              value=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(value) + ""String_Node_Str"";
            }
            values.add(value);
          }
          if (isNullValue(varName,(String)varValue,paraName)) {
            return new Object[0];
          }
        }
      }
      return values.toArray();
    }
  }
  return null;
}","/** 
 * Get the parameter value from .rptconfig file if it does exist
 * @return Object[] the parameter value
 */
private Object getParamValue(ScalarParameterHandle paramHandle){
  String designFileName=designModule.getFileName();
  String reportConfigName=designFileName.substring(0,designFileName.length() - ""String_Node_Str"".length()) + ""String_Node_Str"";
  File file=new File(reportConfigName);
  if (file.exists()) {
    String paraName=paramHandle.getName();
    ScalarParameterHandle parameterHandle=(ScalarParameterHandle)designModule.findParameter(paraName);
    paraName=paraName + ""String_Node_Str"" + parameterHandle.getID();
    SessionHandle sessionHandle=new DesignEngine(null).newSessionHandle(ULocale.US);
    ReportDesignHandle rdHandle=null;
    try {
      rdHandle=sessionHandle.openDesign(reportConfigName);
    }
 catch (    DesignFileException e) {
      return null;
    }
    if (rdHandle != null) {
      List values=new ArrayList();
      Iterator configVars=rdHandle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null) {
          String varName=prepareConfigVarName(configVar.getName());
          Object varValue=configVar.getValue();
          if (varName == null || varValue == null) {
            continue;
          }
          if (varName.equals(paraName)) {
            String value=(String)varValue;
            values.add(value);
          }
          if (isNullValue(varName,(String)varValue,paraName)) {
            if (!parameterHandle.getParamType().equals(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE)) {
              return null;
            }
            return new Object[0];
          }
        }
      }
      if (values.size() > 0) {
        if (parameterHandle.getParamType().equals(DesignChoiceConstants.SCALAR_PARAM_TYPE_SIMPLE)) {
          return values.get(0);
        }
        return values.toArray();
      }
    }
  }
  return null;
}",0.8378926038500507
74445,"public void complete(){
  int rowcount=cache.getRowCount();
  for (int i=0; i < rowcount; i++) {
    Object[] row=cache.getRowData(i);
    for (int j=0; j < row.length; j++) {
      if (row[j] == waste) {
        continue;
      }
      Data d=(Data)row[j];
      int styleid=engine.getStyleID(d.getStyleEntry());
      d.setStyleId(styleid);
      Rule rule=d.getRule();
      int start=axis.getCoordinate(rule.getStart());
      int end=axis.getCoordinate(rule.getEnd());
      Span span=new Span(start + 1,end - start - 1);
      HyperlinkDef link=d.getHyperlinkDef();
      if (link != null && link.getBookmark() != null) {
        links.put(link.getBookmark(),getCellName(i + 1,start + 1));
      }
      d.setSpan(span);
    }
  }
}","public void complete(){
  int rowcount=cache.getRowCount();
  for (int i=0; i < rowcount; i++) {
    Object[] row=cache.getRowData(i);
    for (int j=0; j < row.length; j++) {
      if (row[j] == waste) {
        continue;
      }
      Data d=(Data)row[j];
      int styleid=engine.getStyleID(d.getStyleEntry());
      d.setStyleId(styleid);
      Rule rule=d.getRule();
      int start=axis.getCoordinate(rule.getStart());
      int end=axis.getCoordinate(rule.getEnd());
      Span span=new Span(start,end - start - 1);
      HyperlinkDef link=d.getHyperlinkDef();
      if (link != null && link.getBookmark() != null) {
        links.put(link.getBookmark(),getCellName(i + 1,start + 1));
      }
      d.setSpan(span);
    }
  }
}",0.7567934782608695
74446,"public IBaseQueryResults execute(IBasePreparedQuery query,IBaseQueryResults outerResults,Scriptable scope) throws AdapterException {
  try {
    if (query instanceof IPreparedQuery) {
      return ((IPreparedQuery)query).execute((outerResults instanceof IQueryResults) ? ((IQueryResults)outerResults) : null,scope);
    }
 else     if (query instanceof IPreparedCubeQuery) {
      return ((IPreparedCubeQuery)query).execute(scope);
    }
    return null;
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}","public IBaseQueryResults execute(IBasePreparedQuery query,IBaseQueryResults outerResults,Scriptable scope) throws AdapterException {
  try {
    if (query instanceof IPreparedQuery) {
      return ((IPreparedQuery)query).execute((outerResults instanceof IQueryResults) ? ((IQueryResults)outerResults) : null,scope);
    }
 else     if (query instanceof IPreparedCubeQuery) {
      return ((IPreparedCubeQuery)query).execute(scope);
    }
    return null;
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.998185117967332
74447,"/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws AdapterException
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String dimName) throws AdapterException {
  try {
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      ColumnMeta temp=null;
      String exprString=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new ColumnMeta(createLevelName(dimName,level.getName()),new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange())),ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=this.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new ColumnMeta(createLevelName(dimName,level.getName()),processor,ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        IDataProcessor processor=null;
        String bindingExpr=null;
        if (level.getDateTimeLevelType() != null && DATE_TIME_ATTR_NAME.equals(levelAttr.getName())) {
          processor=new DateTimeAttributeProcessor(level.getDateTimeLevelType());
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
        }
 else {
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName());
        }
        ColumnMeta meta=new ColumnMeta(createLevelName(dimName,OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName())),processor,ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(bindingExpr)));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        ColumnMeta meta=new ColumnMeta(createLevelName(dimName,OlapExpressionUtil.getDisplayColumnName(level.getName())),null,ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(level.getDisplayColumnName())));
      }
      String levelName=createLevelName(dimName,level.getName());
      query.addBinding(new Binding(levelName,new ScriptExpression(exprString)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
      gd.setKeyExpression(ExpressionUtil.createJSRowExpression(levelName));
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}","/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws AdapterException
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String dimName) throws AdapterException {
  try {
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      ColumnMeta temp=null;
      String exprString=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new ColumnMeta(createLevelName(dimName,level.getName()),new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange())),ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=this.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new ColumnMeta(createLevelName(dimName,level.getName()),processor,ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        IDataProcessor processor=null;
        String bindingExpr=null;
        if (level.getDateTimeLevelType() != null && DATE_TIME_ATTR_NAME.equals(levelAttr.getName())) {
          processor=new DateTimeAttributeProcessor(level.getDateTimeLevelType());
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
        }
 else {
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName());
        }
        ColumnMeta meta=new ColumnMeta(createLevelName(dimName,OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName())),processor,ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(bindingExpr)));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        ColumnMeta meta=new ColumnMeta(createLevelName(dimName,OlapExpressionUtil.getDisplayColumnName(level.getName())),null,ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(level.getDisplayColumnName())));
      }
      String levelName=createLevelName(dimName,level.getName());
      query.addBinding(new Binding(levelName,new ScriptExpression(exprString,type)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
      gd.setKeyExpression(ExpressionUtil.createJSRowExpression(levelName));
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}",0.9995233101344264
74448,"/** 
 * @param objClass
 * @return
 */
public static int getDataType(Class objClass){
  for (int i=0; i < classes.length; i++) {
    if (classes[i].equals(objClass)) {
      return typeCodes[i];
    }
  }
  return UNKNOWN_TYPE;
}","/** 
 * @param objClass
 * @return
 */
public static int getDataType(Class objClass){
  if (objClass.equals(byte[].class))   return typeCodes[6];
  for (int i=0; i < classes.length; i++) {
    if (classes[i].equals(objClass)) {
      return typeCodes[i];
    }
  }
  return UNKNOWN_TYPE;
}",0.8841698841698842
74449,"public static IObjectWriter getRandomWriter(int dataType){
switch (dataType) {
case DataType.BOOLEAN_TYPE:
    return new BooleanRandomWriter();
case DataType.INTEGER_TYPE:
  return new IntegerRandomWriter();
case DataType.BYTES_TYPE:
return new BytesRandomWriter();
case DataType.DOUBLE_TYPE:
return new DoubleRandomWriter();
case DataType.STRING_TYPE:
return new StringRandomWriter();
case DataType.DATE_TYPE:
return new DateRandomWriter();
case DataType.BIGDECIMAL_TYPE:
return new BigDecimalRandomWriter();
case DataType.SQL_DATE_TYPE:
return new DateRandomWriter();
case DataType.SQL_TIME_TYPE:
return new DateRandomWriter();
default :
return null;
}
}","public static IObjectWriter getRandomWriter(int dataType){
switch (dataType) {
case DataType.BOOLEAN_TYPE:
    return new BooleanRandomWriter();
case DataType.INTEGER_TYPE:
  return new IntegerRandomWriter();
case DataType.BYTES_TYPE:
return new BytesRandomWriter();
case DataType.DOUBLE_TYPE:
return new DoubleRandomWriter();
case DataType.STRING_TYPE:
return new StringRandomWriter();
case DataType.DATE_TYPE:
return new DateRandomWriter();
case DataType.BLOB_TYPE:
return new BlobRandomWriter();
case DataType.BIGDECIMAL_TYPE:
return new BigDecimalRandomWriter();
case DataType.SQL_DATE_TYPE:
return new DateRandomWriter();
case DataType.SQL_TIME_TYPE:
return new DateRandomWriter();
default :
return null;
}
}",0.9591240875912408
74450,"public static IObjectReader getRandomReader(int dataType){
switch (dataType) {
case DataType.BOOLEAN_TYPE:
    return new BooleanRandomReader();
case DataType.INTEGER_TYPE:
  return new IntegerRandomReader();
case DataType.BYTES_TYPE:
return new BytesRandomReader();
case DataType.DOUBLE_TYPE:
return new DoubleRandomReader();
case DataType.STRING_TYPE:
return new StringRandomReader();
case DataType.DATE_TYPE:
return new DateTimeRandomReader();
case DataType.BIGDECIMAL_TYPE:
return new BigDecimalRandomReader();
case DataType.SQL_DATE_TYPE:
return new DateRandomReader();
case DataType.SQL_TIME_TYPE:
return new TimeRandomReader();
default :
return null;
}
}","public static IObjectReader getRandomReader(int dataType){
switch (dataType) {
case DataType.BOOLEAN_TYPE:
    return new BooleanRandomReader();
case DataType.INTEGER_TYPE:
  return new IntegerRandomReader();
case DataType.BYTES_TYPE:
return new BytesRandomReader();
case DataType.DOUBLE_TYPE:
return new DoubleRandomReader();
case DataType.STRING_TYPE:
return new StringRandomReader();
case DataType.DATE_TYPE:
return new DateTimeRandomReader();
case DataType.BLOB_TYPE:
return new BlobRandomReader();
case DataType.BIGDECIMAL_TYPE:
return new BigDecimalRandomReader();
case DataType.SQL_DATE_TYPE:
return new DateRandomReader();
case DataType.SQL_TIME_TYPE:
return new TimeRandomReader();
default :
return null;
}
}",0.9593613933236574
74451,"protected void drawBackgroundColor(Color color,float x,float y,float width,float height){
  if (null == color) {
    return;
  }
  y=transformY(y,height);
  cbUnder.saveState();
  cbUnder.setColorFill(color);
  cbUnder.rectangle(x,y,width,height);
  cbUnder.fill();
  cbUnder.restoreState();
}","protected void drawBackgroundColor(Color color,float x,float y,float width,float height){
  if (null == color) {
    return;
  }
  y=transformY(y,height);
  contentByte.saveState();
  contentByte.setColorFill(color);
  contentByte.rectangle(x,y,width,height);
  contentByte.fill();
  contentByte.restoreState();
}",0.8283828382838284
74452,"public void clipSave(){
  cbUnder.saveState();
  contentByte.saveState();
}","public void clipSave(){
  contentByte.saveState();
}",0.8188976377952756
74453,"protected void drawBackgroundImage(float x,float y,float width,float height,String repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  y=transformY(y);
  cbUnder.saveState();
  Image img=null;
  try {
    img=Image.getInstance(imageUrl);
    if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,img.scaledWidth());
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,img.scaledHeight());
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=cbUnder.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),translationX,translationY);
      cbUnder.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > img.scaledWidth()) {
        if (height - absPosY > img.scaledHeight()) {
          template=cbUnder.createTemplate(img.scaledWidth(),img.scaledHeight());
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
        }
 else {
          template=cbUnder.createTemplate(img.scaledWidth(),height);
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height);
        }
      }
      while (remainX > 0) {
        if (remainX < img.scaledWidth()) {
          if (height - absPosY > img.scaledHeight()) {
            PdfTemplate templateX=cbUnder.createTemplate(remainX,img.scaledHeight());
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
            cbUnder.addTemplate(templateX,x + width - remainX,y - absPosY - img.scaledHeight());
          }
 else {
            PdfTemplate templateX=cbUnder.createTemplate(remainX,height);
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height - absPosY);
            cbUnder.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > img.scaledHeight())           cbUnder.addTemplate(template,x + width - remainX,y - absPosY - img.scaledHeight());
 else           cbUnder.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=img.scaledWidth();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > img.scaledHeight()) {
        template=cbUnder.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        if (remainY < img.scaledHeight()) {
          PdfTemplate templateY=cbUnder.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,remainY);
          templateY.addImage(img,width > img.scaledWidth() ? img.scaledWidth() : width - absPosX,0,0,img.scaledHeight(),0,-(img.scaledHeight() - remainY));
          cbUnder.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          cbUnder.addTemplate(template,x + absPosX,y - height + remainY - img.scaledHeight());
          remainY-=img.scaledHeight();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width > img.scaledWidth() && height > img.scaledHeight()) {
        template=cbUnder.createTemplate(img.scaledWidth(),img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < img.scaledHeight()) {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateXY=cbUnder.createTemplate(remainX,remainY);
              templateXY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              cbUnder.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=cbUnder.createTemplate(img.scaledWidth(),remainY);
              templateY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              cbUnder.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=img.scaledWidth();
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateX=cbUnder.createTemplate(remainX,img.scaledHeight());
              templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
              cbUnder.addTemplate(templateX,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX=0;
            }
 else {
              cbUnder.addTemplate(template,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX-=img.scaledWidth();
            }
          }
          remainY-=img.scaledHeight();
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  cbUnder.restoreState();
}","protected void drawBackgroundImage(float x,float y,float width,float height,String repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  y=transformY(y);
  contentByte.saveState();
  Image img=null;
  try {
    img=Image.getInstance(imageUrl);
    if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,img.scaledWidth());
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,img.scaledHeight());
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=contentByte.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),translationX,translationY);
      contentByte.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > img.scaledWidth()) {
        if (height - absPosY > img.scaledHeight()) {
          template=contentByte.createTemplate(img.scaledWidth(),img.scaledHeight());
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
        }
 else {
          template=contentByte.createTemplate(img.scaledWidth(),height);
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height);
        }
      }
      while (remainX > 0) {
        if (remainX < img.scaledWidth()) {
          if (height - absPosY > img.scaledHeight()) {
            PdfTemplate templateX=contentByte.createTemplate(remainX,img.scaledHeight());
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - img.scaledHeight());
          }
 else {
            PdfTemplate templateX=contentByte.createTemplate(remainX,height);
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height - absPosY);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > img.scaledHeight())           contentByte.addTemplate(template,x + width - remainX,y - absPosY - img.scaledHeight());
 else           contentByte.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=img.scaledWidth();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > img.scaledHeight()) {
        template=contentByte.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        if (remainY < img.scaledHeight()) {
          PdfTemplate templateY=contentByte.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,remainY);
          templateY.addImage(img,width > img.scaledWidth() ? img.scaledWidth() : width - absPosX,0,0,img.scaledHeight(),0,-(img.scaledHeight() - remainY));
          contentByte.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          contentByte.addTemplate(template,x + absPosX,y - height + remainY - img.scaledHeight());
          remainY-=img.scaledHeight();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width > img.scaledWidth() && height > img.scaledHeight()) {
        template=contentByte.createTemplate(img.scaledWidth(),img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < img.scaledHeight()) {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateXY=contentByte.createTemplate(remainX,remainY);
              templateXY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              contentByte.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=contentByte.createTemplate(img.scaledWidth(),remainY);
              templateY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              contentByte.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=img.scaledWidth();
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateX=contentByte.createTemplate(remainX,img.scaledHeight());
              templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
              contentByte.addTemplate(templateX,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX=0;
            }
 else {
              contentByte.addTemplate(template,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX-=img.scaledWidth();
            }
          }
          remainY-=img.scaledHeight();
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  contentByte.restoreState();
}",0.8981574539363484
74454,"public void clipRestore(){
  cbUnder.restoreState();
  contentByte.restoreState();
}","public void clipRestore(){
  contentByte.restoreState();
}",0.8169014084507042
74455,"public PDFPage(int pageWidth,int pageHeight,Document document,PdfWriter writer,PDFPageDevice pageDevice){
  super(pageWidth,pageHeight);
  this.writer=writer;
  this.pageDevice=pageDevice;
  try {
    Rectangle pageSize=new Rectangle(this.pageWidth,this.pageHeight);
    document.setPageSize(pageSize);
    if (!document.isOpen())     document.open();
 else     document.newPage();
    this.contentByte=writer.getDirectContent();
    this.cbUnder=writer.getDirectContentUnder();
  }
 catch (  DocumentException de) {
    logger.log(Level.SEVERE,de.getMessage(),de);
  }
}","public PDFPage(int pageWidth,int pageHeight,Document document,PdfWriter writer,PDFPageDevice pageDevice){
  super(pageWidth,pageHeight);
  this.writer=writer;
  this.pageDevice=pageDevice;
  try {
    Rectangle pageSize=new Rectangle(this.pageWidth,this.pageHeight);
    document.setPageSize(pageSize);
    if (!document.isOpen())     document.open();
 else     document.newPage();
    this.contentByte=writer.getDirectContent();
  }
 catch (  DocumentException de) {
    logger.log(Level.SEVERE,de.getMessage(),de);
  }
}",0.9551692589204026
74456,"protected void clip(float startX,float startY,float width,float height){
  startY=transformY(startY,height);
  contentByte.clip();
  contentByte.rectangle(startX,startY,width,height);
  contentByte.newPath();
  cbUnder.clip();
  cbUnder.rectangle(startX,startY,width,height);
  cbUnder.newPath();
}","protected void clip(float startX,float startY,float width,float height){
  startY=transformY(startY,height);
  contentByte.clip();
  contentByte.rectangle(startX,startY,width,height);
  contentByte.newPath();
}",0.8267716535433071
74457,"CellArea(ICellContent cell){
  super(cell);
  removeBorder();
  setDefaultPadding();
  needClip=true;
}","CellArea(ICellContent cell){
  super(cell);
  removeBorder();
  setDefaultPadding();
  isClippingContainer=true;
}",0.912442396313364
74458,"public boolean needClip(){
  return needClip;
}","public boolean needClip(){
  return isClippingContainer && needClip;
}",0.8034188034188035
74459,"public void addChild(IArea area){
  children.add(area);
}","public void addChild(IArea area){
  if (area.getX() < 0 || area.getX() + area.getWidth() > width || area.getY() < 0 || area.getY() + area.getHeight() > height) {
    needClip=true;
  }
  children.add(area);
}",0.430188679245283
74460,"InlineContainerArea(IContent content){
  super(content);
  needClip=true;
}","InlineContainerArea(IContent content){
  super(content);
  needClip=true;
  isClippingContainer=true;
}",0.8426966292134831
74461,"/** 
 * parse the arguments. -html html-file-name -pdf pdf-file-name -fo fo-file-name -l locale-name -p page-number design-file-name
 * @param args -arguments
 */
protected void parseOptions(){
  source=args[args.length - 1];
  args[args.length - 1]=""String_Node_Str"";
  try {
    Options option=new Options();
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    results=new BasicParser().parse(option,args,true);
    if (results.hasOption('m')) {
      mode=results.getOptionValue('m');
    }
    if (""String_Node_Str"".equalsIgnoreCase(mode)) {
      parseRunOptions();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(mode)) {
      parseRenderOptions();
    }
 else {
      parseRunAndRenderOptions();
    }
    checkTargetFileName();
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,ex.getMessage(),ex);
    printUsage();
  }
}","/** 
 * parse the arguments. -html html-file-name -pdf pdf-file-name -fo fo-file-name -l locale-name -p page-number design-file-name
 * @param args -arguments
 */
protected void parseOptions(){
  source=args[args.length - 1];
  args[args.length - 1]=""String_Node_Str"";
  try {
    Options option=new Options();
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    option.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    results=new BasicParser().parse(option,args,true);
    if (results.hasOption('F')) {
      String fileName=results.getOptionValue('F');
      readConfigurationFile(fileName,params);
    }
    parseConfigurationOptions();
    if (results.hasOption('m')) {
      mode=results.getOptionValue('m');
    }
    if (""String_Node_Str"".equalsIgnoreCase(mode)) {
      parseRunOptions();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(mode)) {
      parseRenderOptions();
    }
 else {
      parseRunAndRenderOptions();
    }
    checkTargetFileName();
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,ex.getMessage(),ex);
    printUsage();
  }
}",0.901937756899589
74462,"protected void parseRunAndRenderOptions() throws Exception {
  assert(mode.equalsIgnoreCase(""String_Node_Str""));
  if (results.hasOption('f')) {
    format=results.getOptionValue('f');
  }
  if (results.hasOption('t')) {
    htmlType=results.getOptionValue('t');
  }
  if (results.hasOption('o')) {
    targetFile=results.getOptionValue('o');
  }
  if (results.hasOption('l')) {
    locale=results.getOptionValue('l');
  }
  if (results.hasOption('e')) {
    encoding=results.getOptionValue('e');
  }
  parseParameterOptions();
}","protected void parseRunAndRenderOptions() throws Exception {
  assert(mode.equalsIgnoreCase(""String_Node_Str""));
  if (params.get(""String_Node_Str"") != null) {
    format=(String)params.get(""String_Node_Str"");
  }
  if (results.hasOption('f')) {
    format=results.getOptionValue('f');
  }
  if (params.get(""String_Node_Str"") != null) {
    htmlType=(String)params.get(""String_Node_Str"");
  }
  if (results.hasOption('t')) {
    htmlType=results.getOptionValue('t');
  }
  if (params.get(""String_Node_Str"") != null) {
    targetFile=(String)params.get(""String_Node_Str"");
  }
  if (results.hasOption('o')) {
    targetFile=results.getOptionValue('o');
  }
  if (params.get(""String_Node_Str"") != null) {
    locale=(String)params.get(""String_Node_Str"");
  }
  if (results.hasOption('l')) {
    locale=results.getOptionValue('l');
  }
  if (params.get(""String_Node_Str"") != null) {
    encoding=(String)params.get(""String_Node_Str"");
  }
  if (results.hasOption('e')) {
    encoding=results.getOptionValue('e');
  }
}",0.6075129533678757
74463,"protected void parseRenderOptions() throws Exception {
  assert(mode.equalsIgnoreCase(""String_Node_Str""));
  if (results.hasOption('f')) {
    format=results.getOptionValue('f');
  }
  if (results.hasOption('t')) {
    htmlType=results.getOptionValue('t');
  }
  if (results.hasOption('o')) {
    targetFile=results.getOptionValue('o');
  }
  if (results.hasOption('l')) {
    locale=results.getOptionValue('l');
  }
  if (results.hasOption('e')) {
    encoding=results.getOptionValue('e');
  }
  if (results.hasOption('p')) {
    String paramPageNumber=results.getOptionValue('p');
    try {
      pageNumber=Long.parseLong(paramPageNumber);
    }
 catch (    NumberFormatException nfe) {
      logger.log(Level.SEVERE,""String_Node_Str"" + paramPageNumber + ""String_Node_Str"");
    }
  }
  parseParameterOptions();
}","protected void parseRenderOptions() throws Exception {
  assert(mode.equalsIgnoreCase(""String_Node_Str""));
  if (params.get(""String_Node_Str"") != null) {
    format=(String)params.get(""String_Node_Str"");
  }
  if (results.hasOption('f')) {
    format=results.getOptionValue('f');
  }
  if (params.get(""String_Node_Str"") != null) {
    htmlType=(String)params.get(""String_Node_Str"");
  }
  if (results.hasOption('t')) {
    htmlType=results.getOptionValue('t');
  }
  if (params.get(""String_Node_Str"") != null) {
    targetFile=(String)params.get(""String_Node_Str"");
  }
  if (results.hasOption('o')) {
    targetFile=results.getOptionValue('o');
  }
  if (params.get(""String_Node_Str"") != null) {
    locale=(String)params.get(""String_Node_Str"");
  }
  if (results.hasOption('l')) {
    locale=results.getOptionValue('l');
  }
  if (params.get(""String_Node_Str"") != null) {
    encoding=(String)params.get(""String_Node_Str"");
  }
  if (results.hasOption('e')) {
    encoding=results.getOptionValue('e');
  }
  String paramPageNumber=(String)params.get(""String_Node_Str"");
  if (results.hasOption('p')) {
    paramPageNumber=results.getOptionValue('p');
  }
  if (paramPageNumber != null) {
    try {
      pageNumber=Long.parseLong(paramPageNumber);
    }
 catch (    NumberFormatException nfe) {
      logger.log(Level.SEVERE,""String_Node_Str"" + paramPageNumber + ""String_Node_Str"");
    }
  }
}",0.6763110307414105
74464,"/** 
 * Check if the arguments are valid. If yes, continue to execuate the report. If no, simply return.
 */
public int execute(){
  if (args.length == 0) {
    printUsage();
    return 0;
  }
  try {
    if (engine == null) {
      EngineConfig config=new EngineConfig();
      Platform.startup(config);
      IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
      engine=factory.createReportEngine(config);
      engine.changeLogLevel(Level.WARNING);
    }
    parseOptions();
    if (""String_Node_Str"".equalsIgnoreCase(mode)) {
      return runReport();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(mode)) {
      return renderReport();
    }
 else {
      return runAndRenderReport();
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return -1;
  }
 finally {
    Platform.shutdown();
  }
}","/** 
 * Check if the arguments are valid. If yes, continue to execuate the report. If no, simply return.
 */
public int execute(){
  if (args.length == 0) {
    printUsage();
    return 0;
  }
  try {
    parseOptions();
    if (engine == null) {
      EngineConfig config=createEngineConfig();
      Platform.startup(config);
      IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
      engine=factory.createReportEngine(config);
      engine.changeLogLevel(Level.WARNING);
    }
    if (""String_Node_Str"".equalsIgnoreCase(mode)) {
      return runReport();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(mode)) {
      return renderReport();
    }
 else {
      return runAndRenderReport();
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return -1;
  }
 finally {
    Platform.shutdown();
  }
}",0.9732047159699893
74465,"/** 
 * print out the command line usage.
 */
protected void printUsage(){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}","/** 
 * print out the command line usage.
 */
protected void printUsage(){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}",0.8762160348876216
74466,"protected void parseRunOptions() throws Exception {
  if (results.hasOption('o')) {
    targetFile=results.getOptionValue('o');
  }
  parseParameterOptions();
}","protected void parseRunOptions() throws Exception {
  assert(mode.equalsIgnoreCase(""String_Node_Str""));
  if (params.get(""String_Node_Str"") != null) {
    targetFile=(String)params.get(""String_Node_Str"");
  }
  if (results.hasOption('o')) {
    targetFile=results.getOptionValue('o');
  }
}",0.5911111111111111
74467,"/** 
 * define pattern and locale here
 * @param formatString
 */
public void applyPattern(String formatString){
  try {
    this.formatPattern=formatString;
    this.dateTimeFormat=null;
    this.dateFormat=null;
    this.timeFormat=null;
    if (formatString == null || UNFORMATTED.equals(formatString)) {
      formatPattern=UNFORMATTED;
      dateTimeFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.MEDIUM,com.ibm.icu.text.DateFormat.SHORT,locale);
      dateFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.MEDIUM,locale);
      timeFormat=com.ibm.icu.text.DateFormat.getTimeInstance(com.ibm.icu.text.DateFormat.MEDIUM,locale);
      return;
    }
 else     if (formatString.equals(DATETIME_UNFORMATTED)) {
      dateTimeFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.MEDIUM,com.ibm.icu.text.DateFormat.SHORT,locale);
      return;
    }
 else     if (formatString.equals(DATE_UNFORMATTED)) {
      dateTimeFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.MEDIUM,locale);
      return;
    }
 else     if (formatString.equals(TIME_UNFORMATTED)) {
      dateTimeFormat=com.ibm.icu.text.DateFormat.getTimeInstance(com.ibm.icu.text.DateFormat.MEDIUM,locale);
      return;
    }
    if (formatString.length() == 1) {
      char patternTemp=formatString.charAt(0);
switch (patternTemp) {
case 'G':
        dateTimeFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.LONG,com.ibm.icu.text.DateFormat.LONG,locale);
      dateFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.LONG,locale);
    timeFormat=com.ibm.icu.text.DateFormat.getTimeInstance(com.ibm.icu.text.DateFormat.LONG,locale);
  return;
case 'D':
dateTimeFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.LONG,locale);
return;
case 'd':
dateTimeFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.SHORT,locale);
return;
case 'T':
dateTimeFormat=com.ibm.icu.text.DateFormat.getTimeInstance(com.ibm.icu.text.DateFormat.LONG,locale);
return;
case 't':
dateTimeFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
case 'f':
dateTimeFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.LONG,com.ibm.icu.text.DateFormat.SHORT,locale);
return;
case 'F':
dateTimeFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.LONG,com.ibm.icu.text.DateFormat.LONG,locale);
return;
case 'i':
case 'I':
int timeForm=(patternTemp == 'i') ? com.ibm.icu.text.DateFormat.MEDIUM : com.ibm.icu.text.DateFormat.LONG;
timeFormat=com.ibm.icu.text.DateFormat.getTimeInstance(timeForm,locale);
com.ibm.icu.text.DateFormat factoryFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.SHORT,locale);
dateFormat=hackYear(factoryFormat);
factoryFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.SHORT,timeForm,locale);
dateTimeFormat=hackYear(factoryFormat);
return;
case 'g':
dateTimeFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.SHORT,com.ibm.icu.text.DateFormat.SHORT,locale);
return;
case 'M':
case 'm':
dateTimeFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
case 'R':
case 'r':
dateTimeFormat=new SimpleDateFormat(""String_Node_Str"",locale);
dateTimeFormat.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
return;
case 's':
dateTimeFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
case 'u':
dateTimeFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
case 'Y':
case 'y':
dateTimeFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
default :
dateTimeFormat=new SimpleDateFormat(formatString,locale);
return;
}
}
if (formatString.equals(""String_Node_Str"")) {
dateTimeFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.LONG,com.ibm.icu.text.DateFormat.LONG,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateTimeFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.LONG,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateTimeFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.MEDIUM,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateTimeFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.SHORT,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateTimeFormat=com.ibm.icu.text.DateFormat.getTimeInstance(com.ibm.icu.text.DateFormat.LONG,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateTimeFormat=com.ibm.icu.text.DateFormat.getTimeInstance(com.ibm.icu.text.DateFormat.MEDIUM,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateTimeFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
}
dateTimeFormat=new SimpleDateFormat(formatString,locale);
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
}","public void applyPattern(String formatString){
  createPattern(formatString);
  applyTimeZone();
}",0.0369506028782574
74468,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.report.engine.adapter.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.CachedImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.CancelOnErrorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSetIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSourceCompareTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineTaskCancelTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngintTaskLoggerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterGroupDefnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLActionHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLCompleteImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLServerImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.InstanceIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.MutipleThreadRenderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.PageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterConverterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ProgressiveViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RelativeHyperlinkInReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RenderTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineFactoryTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportletTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RunTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCNodeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCStyleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.document.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DataExtractionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ParameterPromptTextTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.iv.IVTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.RowDataTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.element.ElementTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.instance.InstanceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.content.ReportContentReaderAndWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.CSSPaserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.dom.StyleDeclarationTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.engine.PerfectHashTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.DataEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.NamedExpressionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.ReportQueryBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.EmbeddedHyperlinkProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.XMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.DataItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ExecutorManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.GridItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ImageItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.LabelItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListingElementExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.MultiLineItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ScriptableParametersTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TableItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TextItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.buffermgr.TableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.CssParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.HTMLProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.template.TemplateExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.i18n.EngineResourceHandleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.impl.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.OffsetIndexReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ContentTreeCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.PageHintTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ReportContentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.FragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.ReportPageReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.SegmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.TreeFragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.load.PageSequenceIteratorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ActionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.CellTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DimensionTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DrillThroughActionDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DynamicTextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.EngineIRIOTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.EngineIRReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.FreeFormItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GraphicMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GridItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ImageItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.LabelItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapRuleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSequenceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ReportTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.RowTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.SimpleMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.BlockStackingExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.ListContainerExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.html.HTMLLayoutTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFImageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFLineAreaLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFPageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableGroupLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTextLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.font.FontConfigReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.hyphen.DefaultWordRecognizerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DataDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DynamicTextItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.FreeFormDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.GridItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ImageItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.LabelItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ListDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.MapDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.StyleDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.SuppressDuplicateDataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TableItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.HtmlPaginateEmitterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.XMLContentReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCBuilderReadV1Test.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.util.FileUtilTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.report.engine.adapter.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.CachedImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.CancelOnErrorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSetIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSourceCompareTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineTaskCancelTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngintTaskLoggerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterGroupDefnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLActionHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLCompleteImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLServerImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.InstanceIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.MutipleThreadRenderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.PageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterConverterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ProgressiveViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RelativeHyperlinkInReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RenderTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineFactoryTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportletTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RunTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCNodeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCStyleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TimeZoneTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.document.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DataExtractionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ParameterPromptTextTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.iv.IVTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.RowDataTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.element.ElementTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.instance.InstanceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.content.ReportContentReaderAndWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.CSSPaserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.dom.StyleDeclarationTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.engine.PerfectHashTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.DataEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.NamedExpressionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.ReportQueryBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.EmbeddedHyperlinkProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.XMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.DataItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ExecutorManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.GridItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ImageItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.LabelItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListingElementExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.MultiLineItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ScriptableParametersTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TableItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TextItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.buffermgr.TableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.CssParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.HTMLProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.template.TemplateExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.i18n.EngineResourceHandleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.impl.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.OffsetIndexReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ContentTreeCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.PageHintTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ReportContentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.FragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.ReportPageReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.SegmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.TreeFragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.load.PageSequenceIteratorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ActionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.CellTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DimensionTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DrillThroughActionDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DynamicTextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.EngineIRIOTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.EngineIRReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.FreeFormItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GraphicMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GridItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ImageItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.LabelItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapRuleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSequenceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ReportTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.RowTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.SimpleMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.BlockStackingExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.ListContainerExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.html.HTMLLayoutTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFImageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFLineAreaLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFPageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableGroupLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTextLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.font.FontConfigReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.hyphen.DefaultWordRecognizerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DataDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DynamicTextItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.FreeFormDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.GridItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ImageItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.LabelItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ListDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.MapDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.StyleDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.SuppressDuplicateDataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TableItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.HtmlPaginateEmitterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.XMLContentReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCBuilderReadV1Test.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.util.FileUtilTest.class);
  return suite;
}",0.9967064459557724
74469,"private void testFactTableSaveAndLoad5(CubeMaterializer cubeMaterializer) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IHierarchy hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs,new StopSign());
  dimensions[0]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=CubeElementFactory.createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs,new StopSign());
  dimensions[1]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs,new StopSign());
  dimensions[2]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  cubeMaterializer.createCube(""String_Node_Str"",CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",cubeMaterializer.getDocumentManager(),new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  cubeQueryExcutorHelper.addFilter(new LevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}","private void testFactTableSaveAndLoad5(CubeMaterializer cubeMaterializer) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IHierarchy hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs,new StopSign());
  dimensions[0]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=CubeElementFactory.createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs,new StopSign());
  dimensions[1]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs,new StopSign());
  dimensions[2]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  cubeMaterializer.createCube(""String_Node_Str"",CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",cubeMaterializer.getDocumentManager(),new StopSign()));
  ISelection[][] filter=new ISelection[1][2];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(2)},true,false);
  filter[0][1]=SelectionFactory.createRangeSelection(new Object[]{new Integer(2)},new Object[]{new Integer(3)},true,false);
  cubeQueryExcutorHelper.addSimpleLevelFilter(new SimpleLevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}",0.9886064855390008
74470,"private void testFactTableSaveAndLoad4(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  Cube cube=new Cube(""String_Node_Str"",documentManager);
  cube.create(CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(cube);
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  cubeQueryExcutorHelper.addFilter(new LevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}","private void testFactTableSaveAndLoad4(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  Cube cube=new Cube(""String_Node_Str"",documentManager);
  cube.create(CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(cube);
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  cubeQueryExcutorHelper.addSimpleLevelFilter(new SimpleLevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}",0.9985388912763214
74471,"/** 
 * @param cube
 */
public CubeQueryExecutorHelper(ICube cube){
  logger.entering(CubeQueryExecutorHelper.class.getName(),""String_Node_Str"",cube);
  this.cube=(Cube)cube;
  this.levelFilters=new ArrayList();
  this.aggrFilterHelpers=new ArrayList();
  this.dimJSFilterMap=new HashMap();
  this.dimRowForFilterMap=new HashMap();
  this.rowSort=new ArrayList();
  this.columnSort=new ArrayList();
  dimLevelsMap=new HashMap();
  IDimension[] dimension=this.cube.getDimesions();
  for (int i=0; i < dimension.length; i++) {
    ILevel[] levels=dimension[i].getHierarchy().getLevels();
    dimLevelsMap.put(dimension[i].getName(),levels);
  }
  logger.exiting(CubeQueryExecutorHelper.class.getName(),""String_Node_Str"");
}","/** 
 * @param cube
 */
public CubeQueryExecutorHelper(ICube cube){
  logger.entering(CubeQueryExecutorHelper.class.getName(),""String_Node_Str"",cube);
  this.cube=(Cube)cube;
  this.simpleLevelFilters=new ArrayList();
  this.levelFilters=new ArrayList();
  this.aggrFilterHelpers=new ArrayList();
  this.dimJSFilterMap=new HashMap();
  this.dimRowForFilterMap=new HashMap();
  this.rowSort=new ArrayList();
  this.columnSort=new ArrayList();
  dimLevelsMap=new HashMap();
  IDimension[] dimension=this.cube.getDimesions();
  for (int i=0; i < dimension.length; i++) {
    ILevel[] levels=dimension[i].getHierarchy().getLevels();
    dimLevelsMap.put(dimension[i].getName(),levels);
  }
  logger.exiting(CubeQueryExecutorHelper.class.getName(),""String_Node_Str"");
}",0.971043771043771
74472,"/** 
 * @return
 * @throws DataException
 * @throws IOException
 */
private IDiskArray[] getFilterResult() throws DataException, IOException {
  IDimension[] dimensions=cube.getDimesions();
  IDiskArray[] dimPosition=new IDiskArray[dimensions.length];
  for (int i=0; i < dimPosition.length; i++) {
    Dimension dimension=(Dimension)dimensions[i];
    List jsFilters=getDimensionJSFilterList(dimension.getName());
    LevelFilterHelper filterHelper=new LevelFilterHelper(dimension,levelFilters);
    dimPosition[i]=filterHelper.getJSFilterResult(jsFilters,isBreakHierarchy);
  }
  return dimPosition;
}","/** 
 * @return
 * @throws DataException
 * @throws IOException
 */
private IDiskArray[] getFilterResult() throws DataException, IOException {
  IDimension[] dimensions=cube.getDimesions();
  IDiskArray[] dimPosition=new IDiskArray[dimensions.length];
  for (int i=0; i < dimPosition.length; i++) {
    Dimension dimension=(Dimension)dimensions[i];
    List jsFilters=getDimensionJSFilterList(dimension.getName());
    LevelFilterHelper filterHelper=new LevelFilterHelper(dimension,simpleLevelFilters,levelFilters);
    dimPosition[i]=filterHelper.getJSFilterResult(jsFilters,isBreakHierarchy);
  }
  return dimPosition;
}",0.9844897959183674
74473,"/** 
 * @param selectedObjects
 * @return
 */
public static ISelection createMutiKeySelection(Object[][] selectedObjects){
  return new MultiKeySelection(selectedObjects);
}","/** 
 * @param selectedObjects
 * @return
 */
public static ISelection createMutiKeySelection(Object[][] keys){
  return new MultiKeySelection(keys);
}",0.9074074074074074
74474,"/** 
 * @return
 * @throws DataException
 * @throws IOException
 */
private void populatePositions() throws DataException, IOException {
  if (levelFilters.isEmpty()) {
    this.dimPosition=dimension.findAll();
  }
  Map validFilterMap=getValidFilterMap();
  if (validFilterMap.isEmpty()) {
    this.dimPosition=dimension.findAll();
  }
  this.dimPosition=populateValidPositions(validFilterMap);
}","/** 
 * @return
 * @throws DataException
 * @throws IOException
 */
private void populatePositions() throws DataException, IOException {
  if (simplelevelFilters != null && simplelevelFilters.size() > 0) {
    getSimpleFilterResult();
  }
 else {
    this.dimPosition=dimension.findAll();
  }
  Map validFilterMap=getValidFilterMap();
  this.dimPosition=populateValidPositions(validFilterMap);
}",0.6767676767676768
74475,"/** 
 * @throws IOException
 * @throws DataException
 */
public LevelFilterHelper(Dimension dimension,List levelFilters) throws DataException, IOException {
  this.dimension=dimension;
  this.levelFilters=levelFilters;
  populatePositions();
}","/** 
 * @throws IOException
 * @throws DataException
 */
public LevelFilterHelper(Dimension dimension,List simpleLevelFilters,List levelFilters) throws DataException, IOException {
  this.dimension=dimension;
  this.simplelevelFilters=simpleLevelFilters;
  this.levelFilters=levelFilters;
  populatePositions();
}",0.8741007194244604
74476,"protected boolean validateTransfer(Object transfer){
  if (transfer instanceof ReportElementHandle || transfer instanceof EmbeddedImageHandle) {
    if (transfer instanceof ScalarParameterHandle && ((ScalarParameterHandle)transfer).getContainer() instanceof CascadingParameterGroupHandle) {
      return false;
    }
 else     if (transfer instanceof StyleHandle && ((StyleHandle)transfer).getContainer() instanceof ThemeHandle) {
      return false;
    }
 else {
      return true;
    }
  }
  return false;
}","protected boolean validateTransfer(Object transfer){
  if (transfer instanceof ReportElementHandle || transfer instanceof EmbeddedImageHandle) {
    if (transfer instanceof ScalarParameterHandle && ((ScalarParameterHandle)transfer).getContainer() instanceof CascadingParameterGroupHandle) {
      return false;
    }
 else     if (transfer instanceof StyleHandle && ((StyleHandle)transfer).getContainer() instanceof ThemeHandle) {
      return false;
    }
 else     if (transfer instanceof DimensionHandle || transfer instanceof LevelHandle || transfer instanceof MeasureHandle|| transfer instanceof MeasureGroupHandle) {
      return false;
    }
 else {
      return true;
    }
  }
  return false;
}",0.8369028006589786
74477,"/** 
 * @throws BirtException
 */
private void _preBasicIVWithSubQuery() throws BirtException {
  QueryDefinition qd=newPreIVReportQuery();
  qd.setQueryResultsID(this.queryResultID);
  SubqueryDefinition subqueryDefn=new SubqueryDefinition(""String_Node_Str"",qd);
  ((GroupDefinition)qd.getGroups().get(0)).addSubquery(subqueryDefn);
  subRowExprName=new String[3];
  subRowExprName[0]=""String_Node_Str"";
  subRowExprName[1]=""String_Node_Str"";
  subRowExprName[2]=""String_Node_Str"";
  ScriptExpression[] exprs=new ScriptExpression[3];
  exprs[0]=new ScriptExpression(""String_Node_Str"");
  exprs[1]=new ScriptExpression(""String_Node_Str"");
  exprs[2]=new ScriptExpression(""String_Node_Str"");
  for (int i=0; i < subRowExprName.length; i++)   subqueryDefn.addResultSetExpression(subRowExprName[i],exprs[i]);
  subqueryDefn.setApplyOnGroupFlag(true);
  IQueryResults qr=myPreDataEngine.prepare(qd).execute(null);
  IResultIterator ri=qr.getResultIterator();
  ri.moveTo(0);
  do {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri.getValue(totalExprName[i]) + ""String_Node_Str"";
    this.testPrintln(abc + ri.getRowId());
    IResultIterator subRi=ri.getSecondaryIterator(""String_Node_Str"",scope);
    while (subRi.next()) {
      abc=""String_Node_Str"" + subRi.getValue(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ subRi.getValue(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ subRi.getValue(""String_Node_Str"")+ ""String_Node_Str"";
      this.testPrintln(abc);
    }
  }
 while (ri.next());
  ri.close();
  myPreDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void _preBasicIVWithSubQuery() throws BirtException {
  QueryDefinition qd=newPreIVReportQuery();
  qd.setQueryResultsID(this.queryResultID);
  SubqueryDefinition subqueryDefn=new SubqueryDefinition(""String_Node_Str"",qd);
  ((GroupDefinition)qd.getGroups().get(0)).addSubquery(subqueryDefn);
  subRowExprName=new String[3];
  subRowExprName[0]=""String_Node_Str"";
  subRowExprName[1]=""String_Node_Str"";
  subRowExprName[2]=""String_Node_Str"";
  ScriptExpression[] exprs=new ScriptExpression[3];
  exprs[0]=new ScriptExpression(""String_Node_Str"");
  exprs[1]=new ScriptExpression(""String_Node_Str"");
  exprs[2]=new ScriptExpression(""String_Node_Str"");
  for (int i=0; i < subRowExprName.length; i++)   subqueryDefn.addResultSetExpression(subRowExprName[i],exprs[i]);
  subqueryDefn.setApplyOnGroupFlag(true);
  IQueryResults qr=myPreDataEngine.prepare(qd).execute(null);
  IResultIterator ri=qr.getResultIterator();
  ri.moveTo(0);
  do {
    String abc=""String_Node_Str"";
    for (int i=0; i < rowExprName.length; i++)     abc+=ri.getValue(rowExprName[i]) + ""String_Node_Str"";
    for (int i=0; i < totalExprName.length; i++)     abc+=ri.getValue(totalExprName[i]) + ""String_Node_Str"";
    this.testPrintln(abc + ri.getRowId());
    IResultIterator subRi=ri.getSecondaryIterator(""String_Node_Str"",scope);
    while (subRi.next()) {
      abc=""String_Node_Str"" + subRi.getValue(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ subRi.getValue(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ subRi.getValue(""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ subRi.getRowId();
      this.testPrintln(abc);
    }
  }
 while (ri.next());
  ri.close();
  myPreDataEngine.shutdown();
}",0.9892784700086932
74478,"private void outputHtmlText(IForeignContent foreign){
  Object rawValue=foreign.getRawValue();
  String text=rawValue == null ? null : rawValue.toString();
  Document doc=new TextParser().parse(text,TextParser.TEXT_TYPE_HTML);
  ReportDesignHandle design=(ReportDesignHandle)runnable.getDesignHandle();
  HTMLProcessor htmlProcessor=new HTMLProcessor(design);
  HashMap styleMap=new HashMap();
  Element body=null;
  if (doc != null) {
    NodeList bodys=doc.getElementsByTagName(""String_Node_Str"");
    if (bodys.getLength() > 0) {
      body=(Element)bodys.item(0);
    }
  }
  if (body != null) {
    htmlProcessor.execute(body,styleMap);
    processNodes(body,styleMap);
  }
}","private void outputHtmlText(IForeignContent foreign){
  boolean bIndent=writer.isIndent();
  writer.setIndent(false);
  Object rawValue=foreign.getRawValue();
  String text=rawValue == null ? null : rawValue.toString();
  Document doc=new TextParser().parse(text,TextParser.TEXT_TYPE_HTML);
  ReportDesignHandle design=(ReportDesignHandle)runnable.getDesignHandle();
  HTMLProcessor htmlProcessor=new HTMLProcessor(design);
  HashMap styleMap=new HashMap();
  Element body=null;
  if (doc != null) {
    NodeList bodys=doc.getElementsByTagName(""String_Node_Str"");
    if (bodys.getLength() > 0) {
      body=(Element)bodys.item(0);
    }
  }
  if (body != null) {
    htmlProcessor.execute(body,styleMap);
    processNodes(body,styleMap);
  }
  writer.setIndent(bIndent);
}",0.9359944941500344
74479,"public boolean next() throws IOException {
  while (!stopSign.isStopped()) {
    try {
      if (currentSegment == null) {
        return false;
      }
      Bytes combinedDimensionPosition=currentSegment.readBytes();
      currentPos=factTable.getCombinedPositionCalculator().calculateDimensionPosition(getSubDimensionIndex(),combinedDimensionPosition.bytesValue());
      for (int i=0; i < this.currentMeasures.length; i++) {
        currentMeasures[i]=DocumentObjectUtil.readValue(currentSegment,measureInfo[i].dataType);
      }
      if (computedMeasureHelper != null) {
        measureList.setMeasureValue(currentMeasures);
        currentComputedMeasures=computedMeasureHelper.computeMeasureValues(measureList);
      }
      if (!isSelectedRow()) {
        continue;
      }
 else {
        return true;
      }
    }
 catch (    EOFException e) {
      break;
    }
  }
  if (stopSign.isStopped() || !nextSegment()) {
    return false;
  }
  return next();
}","public boolean next() throws IOException {
  while (!stopSign.isStopped()) {
    try {
      if (currentSegment == null) {
        return false;
      }
      Bytes combinedDimensionPosition=currentSegment.readBytes();
      currentPos=factTable.getCombinedPositionCalculator().calculateDimensionPosition(getSubDimensionIndex(),combinedDimensionPosition.bytesValue());
      for (int i=0; i < this.currentMeasures.length; i++) {
        currentMeasures[i]=DocumentObjectUtil.readValue(currentSegment,measureInfo[i].dataType);
      }
      if (computedMeasureHelper != null) {
        measureList.setMeasureValue(currentMeasures);
        currentComputedMeasures=computedMeasureHelper.computeMeasureValues(measureList);
        if (isFirtRow) {
          if (computedMeasureInfo == null)           produceComputedMeasureInfo();
 else           setComputedMeasureDataType();
        }
      }
      if (!isSelectedRow()) {
        continue;
      }
 else {
        isFirtRow=false;
        return true;
      }
    }
 catch (    EOFException e) {
      break;
    }
  }
  if (stopSign.isStopped() || !nextSegment()) {
    return false;
  }
  return next();
}",0.9110588235294118
74480,"public MeasureInfo[] getMeasureInfo(){
  return measureInfo;
}","public MeasureInfo[] getMeasureInfo(){
  if (computedMeasureInfo == null)   produceComputedMeasureInfo();
  return computedMeasureInfo;
}",0.6231155778894473
74481,"public void testRenderTask() throws Exception {
  removeFile(TEMP_RESULT);
  removeFile(REPORT_DOCUMENT);
  createReportDocument();
  IReportDocument reportDoc=engine.openReportDocument(REPORT_DOCUMENT);
  IRenderTask task=engine.createRenderTask(reportDoc);
  task.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  IRenderOption option=new HTMLRenderOption();
  option.setOutputFormat(""String_Node_Str"");
  option.setOutputFileName(TEMP_RESULT + ""String_Node_Str"");
  task.setRenderOption(option);
  task.render();
  assertTrue(compareFiles(TEMP_RESULT,""String_Node_Str""));
}","public void testRenderTask() throws Exception {
  createReportDocument();
  IReportDocument reportDoc=engine.openReportDocument(REPORT_DOCUMENT);
  IRenderTask task=engine.createRenderTask(reportDoc);
  task.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  IRenderOption option=new HTMLRenderOption();
  option.setOutputFormat(""String_Node_Str"");
  option.setOutputFileName(TEMP_RESULT);
  task.setRenderOption(option);
  task.render();
  assertTrue(compareFiles(TEMP_RESULT,GOLDEN_RENDER));
}",0.1756007393715342
74482,"private boolean compareFiles(String src,String golden){
  boolean result=false;
  try {
    InputStream in=this.getClass().getResourceAsStream(golden);
    assert(in != null);
    byte[] buffer=new byte[in.available()];
    in.read(buffer);
    String goldenString=new String(buffer);
    File srcFile=new File(src);
    in=new FileInputStream(src);
    assert(in != null);
    buffer=new byte[in.available()];
    in.read(buffer);
    String srcString=new String(buffer);
    result=srcString.equals(goldenString);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return false;
  }
  return result;
}","private boolean compareFiles(String src,String golden){
  boolean result=false;
  try {
    InputStream goldenInputStream=new FileInputStream(new File(golden));
    assert(goldenInputStream != null);
    StringBuffer goldenBuffer=new StringBuffer();
    byte[] buffer=new byte[5120];
    int readCount=-1;
    while ((readCount=goldenInputStream.read(buffer)) != -1) {
      goldenBuffer.append(new String(buffer));
    }
    InputStream srcInputStream=new FileInputStream(new File(golden));
    assert(srcInputStream != null);
    StringBuffer srcBuffer=new StringBuffer();
    buffer=new byte[5120];
    readCount=-1;
    while ((readCount=srcInputStream.read(buffer)) != -1) {
      srcBuffer.append(new String(buffer));
    }
    result=(srcBuffer.toString()).equals(goldenBuffer.toString());
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return false;
  }
  return result;
}",0.3760797342192691
74483,"/** 
 * Create web viewer url to run the report.
 * @param servletName servlet name to viewer report
 * @param report report file name
 * @param format report format
 * @param resourceFolder the resource folder
 * @param maxrows max rows limited
 * @param maxlevels max level member limited
 * @return valid web viewer url
 */
private static String createURL(String servletName,String report,String format,boolean inDesigner,String resourceFolder,String maxrows,String maxlevels){
  String encodedReportName=null;
  try {
    encodedReportName=URLEncoder.encode(report,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
  }
  String locale=ViewerPlugin.getDefault().getPluginPreferences().getString(USER_LOCALE);
  String svgFlag=ViewerPlugin.getDefault().getPluginPreferences().getString(SVG_FLAG);
  boolean bSVGFlag=false;
  String cubeMemorySize=ViewerPlugin.getDefault().getPluginPreferences().getString(PREVIEW_MAXINMEMORYCUBESIZE);
  boolean rtl=false;
  String eclipseCommands=System.getProperty(""String_Node_Str"");
  if (eclipseCommands != null) {
    String[] options=eclipseCommands.split(""String_Node_Str"");
    String regex=""String_Node_Str"";
    Pattern pattern=Pattern.compile(regex);
    for (int i=0; i < options.length; i++) {
      String option=options[i];
      if (pattern.matcher(option).matches()) {
        rtl=true;
        break;
      }
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(svgFlag)) {
    bSVGFlag=true;
  }
  String masterPageContent=ViewerPlugin.getDefault().getPluginPreferences().getString(MASTER_PAGE_CONTENT);
  boolean bMasterPageContent=true;
  if (""String_Node_Str"".equalsIgnoreCase(masterPageContent)) {
    bMasterPageContent=false;
  }
  String encodedResourceFolder=null;
  try {
    if (resourceFolder != null)     encodedResourceFolder=URLEncoder.encode(resourceFolder,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (encodedResourceFolder == null)   encodedResourceFolder=""String_Node_Str"";
  String reportParam=""String_Node_Str"";
  if (isReportDocument(encodedReportName))   reportParam=""String_Node_Str"";
  reportParam+=""String_Node_Str"" + encodedReportName;
  String asattachment=null;
  if (POSTSCRIPT.equalsIgnoreCase(format))   asattachment=""String_Node_Str"";
  return getBaseURL() + servletName + ""String_Node_Str""+ reportParam+ ""String_Node_Str""+ format+ ""String_Node_Str""+ String.valueOf(bSVGFlag)+ (LocaleTable.containsKey(locale) ? ""String_Node_Str"" + LocaleTable.get(locale) : ""String_Node_Str"")+ ""String_Node_Str""+ String.valueOf(inDesigner)+ ""String_Node_Str""+ String.valueOf(bMasterPageContent)+ ""String_Node_Str""+ String.valueOf(rtl)+ (maxrows != null && maxrows.trim().length() > 0 ? ""String_Node_Str"" + maxrows : ""String_Node_Str"")+ (maxlevels != null && maxlevels.trim().length() > 0 ? ""String_Node_Str"" + maxlevels : ""String_Node_Str"")+ (cubeMemorySize != null && cubeMemorySize.trim().length() > 0 ? ""String_Node_Str"" + cubeMemorySize : ""String_Node_Str"")+ ""String_Node_Str""+ encodedResourceFolder+ (asattachment != null ? asattachment : ""String_Node_Str"");
}","/** 
 * Create web viewer url to run the report.
 * @param servletName servlet name to viewer report
 * @param report report file name
 * @param format report format
 * @param resourceFolder the resource folder
 * @param maxrows max rows limited
 * @param maxlevels max level member limited
 * @return valid web viewer url
 */
private static String createURL(String servletName,String report,String format,boolean inDesigner,String resourceFolder,String maxrows,String maxlevels){
  String encodedReportName=null;
  try {
    encodedReportName=URLEncoder.encode(report,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
  }
  String locale=ViewerPlugin.getDefault().getPluginPreferences().getString(USER_LOCALE);
  String svgFlag=ViewerPlugin.getDefault().getPluginPreferences().getString(SVG_FLAG);
  boolean bSVGFlag=false;
  String cubeMemorySize=ViewerPlugin.getDefault().getPluginPreferences().getString(PREVIEW_MAXINMEMORYCUBESIZE);
  boolean rtl=false;
  String eclipseCommands=System.getProperty(""String_Node_Str"");
  if (eclipseCommands != null) {
    String[] options=eclipseCommands.split(""String_Node_Str"");
    String regex=""String_Node_Str"";
    Pattern pattern=Pattern.compile(regex);
    for (int i=0; i < options.length; i++) {
      String option=options[i];
      if (pattern.matcher(option).matches()) {
        rtl=true;
        break;
      }
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(svgFlag)) {
    bSVGFlag=true;
  }
  String masterPageContent=ViewerPlugin.getDefault().getPluginPreferences().getString(MASTER_PAGE_CONTENT);
  boolean bMasterPageContent=true;
  if (""String_Node_Str"".equalsIgnoreCase(masterPageContent)) {
    bMasterPageContent=false;
  }
  String encodedResourceFolder=null;
  try {
    if (resourceFolder != null)     encodedResourceFolder=URLEncoder.encode(resourceFolder,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (encodedResourceFolder == null)   encodedResourceFolder=""String_Node_Str"";
  String reportParam=""String_Node_Str"";
  if (isReportDocument(encodedReportName))   reportParam=""String_Node_Str"";
  reportParam+=""String_Node_Str"" + encodedReportName;
  String asattachment=null;
  if (POSTSCRIPT.equalsIgnoreCase(format))   asattachment=""String_Node_Str"";
  int dpi=Toolkit.getDefaultToolkit().getScreenResolution();
  return getBaseURL() + servletName + ""String_Node_Str""+ reportParam+ ""String_Node_Str""+ format+ ""String_Node_Str""+ String.valueOf(bSVGFlag)+ (LocaleTable.containsKey(locale) ? ""String_Node_Str"" + LocaleTable.get(locale) : ""String_Node_Str"")+ ""String_Node_Str""+ String.valueOf(inDesigner)+ ""String_Node_Str""+ String.valueOf(bMasterPageContent)+ ""String_Node_Str""+ String.valueOf(rtl)+ (maxrows != null && maxrows.trim().length() > 0 ? ""String_Node_Str"" + maxrows : ""String_Node_Str"")+ (maxlevels != null && maxlevels.trim().length() > 0 ? ""String_Node_Str"" + maxlevels : ""String_Node_Str"")+ (cubeMemorySize != null && cubeMemorySize.trim().length() > 0 ? ""String_Node_Str"" + cubeMemorySize : ""String_Node_Str"")+ ""String_Node_Str""+ encodedResourceFolder+ (asattachment != null ? asattachment : ""String_Node_Str"")+ ""String_Node_Str""+ dpi;
}",0.9864108713029576
74484,"/** 
 * @param creator
 */
public Query(org.eclipse.datatools.enablement.oda.xml.util.XMLDataInputStreamCreator creator){
  super(creator);
}","/** 
 * @param creator
 */
public Query(org.eclipse.datatools.enablement.oda.xml.util.XMLCreatorContent creator){
  super(creator);
}",0.9197080291970804
74485,"/** 
 * @param is
 * @param ri
 * @param tableName
 * @param maxRows
 * @throws OdaException
 */
public ResultSet(XMLDataInputStream is,RelationInformation ri,String tableName,int maxRows) throws OdaException {
  super(is,ri,tableName,maxRows);
}","/** 
 * @param is
 * @param ri
 * @param tableName
 * @param maxRows
 * @throws OdaException
 */
public ResultSet(XMLCreatorContent is,RelationInformation ri,String tableName,int maxRows) throws OdaException {
  super(is,ri,tableName,maxRows);
}",0.940936863543788
74486,"/** 
 * @param rs
 * @param rinfo
 * @param is
 * @param tName
 * @throws OdaException
 */
public SaxParserConsumer(ResultSet rs,RelationInformation rinfo,XMLDataInputStream is,String tName) throws OdaException {
  super(rinfo,is,tName);
}","/** 
 * @param rs
 * @param rinfo
 * @param is
 * @param tName
 * @throws OdaException
 */
public SaxParserConsumer(ResultSet rs,RelationInformation rinfo,XMLCreatorContent is,String tName) throws OdaException {
  super(rinfo,is,tName);
}",0.939203354297694
74487,"/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  if (container instanceof PageArea) {
    pageGraphic.dispose();
  }
 else {
    if (container.needClip()) {
      pageGraphic.clipRestore();
    }
  }
  currentX-=container.getX();
  currentY-=container.getY();
}","/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  if (container instanceof PageArea) {
    pageGraphic.dispose();
  }
 else {
    if (container.needClip()) {
      pageGraphic.clipRestore();
    }
  }
  currentX-=getX(container);
  currentY-=getY(container);
}",0.952020202020202
74488,"public void updateRow(RowArea rowArea,int specifiedHeight,boolean finished){
  hasDropCell=!finished;
  Row lastRow=getPreviousRow();
  if (lastRow == null && existDropCells() && (!LayoutUtil.isRepeatableRow((IRowContent)rowArea.getContent()))) {
    lastRow=unresolvedRow;
  }
  Row row=new Row(rowArea,startCol,endCol,finished);
  int height=specifiedHeight;
  for (int i=startCol; i <= endCol; i++) {
    CellArea lastCell=null;
    if (lastRow != null) {
      lastCell=lastRow.getCell(i);
    }
    CellArea cell=row.getCell(i);
    if (lastCell != null && ((lastCell.getRowSpan() > 1) || isDropCell(lastCell))) {
      if (cell != null && (lastCell instanceof DummyCell)) {
        row.remove(i);
      }
      if (lastCell.getRowSpan() == 2) {
        if (lastCell instanceof DummyCell) {
          height=Math.max(height,lastCell.getHeight());
        }
 else {
          height=Math.max(height,lastCell.getHeight() - lastRow.getArea().getHeight());
        }
      }
      i=i + lastCell.getColSpan() - 1;
    }
 else {
      if (cell != null) {
        if (cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
        }
      }
      if (cell == null) {
        ICellContent cellContent=null;
        if (unresolvedRow != null) {
          CellArea ca=unresolvedRow.getCell(i);
          if (ca != null) {
            ICellContent cc=(ICellContent)ca.getContent();
            cellContent=new ClonedCellContent(cc,getRowSpan((IRowContent)rowArea.getContent(),ca,unresolvedRow.row));
          }
        }
        if (cellContent == null) {
          cellContent=tableContent.getReportContent().createCellContent();
          cellContent.setColumn(i);
          cellContent.setColSpan(1);
          cellContent.setRowSpan(1);
          cellContent.setParent(rowArea.getContent());
        }
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        resolveBorderConflict(emptyCell,false);
        IStyle areaStyle=emptyCell.getStyle();
        areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
        areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        rowArea.addChild(emptyCell);
        i=i + emptyCell.getColSpan() - 1;
      }
    }
  }
  if (specifiedHeight == 0 && isEmptyRow(row)) {
    height=Math.max(height,getHeightOfEmptyRow(row));
  }
  if (height >= 0) {
    Iterator iter=rowArea.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      if (cell.getRowSpan() == 1) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    rowArea.setHeight(height);
  }
  if (firstRow && existDropCells() && (!LayoutUtil.isRepeatableRow((IRowContent)rowArea.getContent()))) {
    mergeDropCell(rowArea);
  }
}","public void updateRow(RowArea rowArea,int specifiedHeight,boolean finished){
  hasDropCell=!finished;
  Row lastRow=getPreviousRow();
  if (lastRow == null && existDropCells() && (!LayoutUtil.isRepeatableRow((IRowContent)rowArea.getContent()))) {
    lastRow=unresolvedRow;
  }
  Row row=new Row(rowArea,startCol,endCol,finished);
  int height=specifiedHeight;
  for (int i=startCol; i <= endCol; i++) {
    CellArea lastCell=null;
    if (lastRow != null) {
      lastCell=lastRow.getCell(i);
    }
    CellArea cell=row.getCell(i);
    if (lastCell != null && ((lastCell.getRowSpan() > 1) || isDropCell(lastCell))) {
      if (isDropCell(lastCell)) {
        if (cell != null) {
          row.remove(i);
        }
      }
      if (lastCell.getRowSpan() == 2) {
        if (lastCell instanceof DummyCell) {
          height=Math.max(height,lastCell.getHeight());
        }
 else {
          height=Math.max(height,lastCell.getHeight() - lastRow.getArea().getHeight());
        }
      }
      i=i + lastCell.getColSpan() - 1;
    }
 else {
      if (cell != null) {
        if (cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
        }
      }
      if (cell == null) {
        ICellContent cellContent=null;
        if (unresolvedRow != null) {
          CellArea ca=unresolvedRow.getCell(i);
          if (ca != null) {
            ICellContent cc=(ICellContent)ca.getContent();
            cellContent=new ClonedCellContent(cc,getRowSpan((IRowContent)rowArea.getContent(),ca,unresolvedRow.row));
          }
        }
        if (cellContent == null) {
          cellContent=tableContent.getReportContent().createCellContent();
          cellContent.setColumn(i);
          cellContent.setColSpan(1);
          cellContent.setRowSpan(1);
          cellContent.setParent(rowArea.getContent());
        }
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        resolveBorderConflict(emptyCell,false);
        IStyle areaStyle=emptyCell.getStyle();
        areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
        areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        rowArea.addChild(emptyCell);
        i=i + emptyCell.getColSpan() - 1;
      }
    }
  }
  if (specifiedHeight == 0 && isEmptyRow(row)) {
    height=Math.max(height,getHeightOfEmptyRow(row));
  }
  if (height >= 0) {
    Iterator iter=rowArea.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      if (cell.getRowSpan() == 1) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    rowArea.setHeight(height);
  }
  if (firstRow && existDropCells() && (!LayoutUtil.isRepeatableRow((IRowContent)rowArea.getContent()))) {
    mergeDropCell(rowArea);
  }
}",0.9801633605600932
74489,"/** 
 * get parsed parameters with default value.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ParameterDefinition parameter=(ParameterDefinition)iter.next();
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramObj=this.parametersAsString.get(paramName);
    if (paramObj != null) {
      String format=ParameterAccessor.getFormat(request,paramName);
      if (format == null || format.length() <= 0) {
        format=parameter.getPattern();
      }
      String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
      boolean isLocale=this.locParams.contains(paramName);
      List paramList=null;
      if (paramObj instanceof List) {
        paramList=(List)paramObj;
      }
 else {
        paramList=new ArrayList();
        paramList.add(paramObj);
      }
      for (int i=0; i < paramList.size(); i++) {
        try {
          Object paramValueObj=DataUtil.validate(paramName,dataType,format,(String)paramList.get(i),locale,isLocale);
          paramList.set(i,paramValueObj);
        }
 catch (        ViewerValidationException e) {
          if (IBirtConstants.SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath())) {
            this.exception=e;
            break;
          }
        }
      }
      if (paramObj instanceof List) {
        List list=(List)paramObj;
        if (list.size() == 0 || (list.size() == 1 && list.get(0) == null))         params.put(paramName,null);
 else         params.put(paramName,paramList.toArray());
      }
 else {
        params.put(paramName,paramList.get(0));
      }
    }
 else {
      Object paramValueObj=null;
      if (!this.parametersAsString.containsKey(paramName)) {
        paramValueObj=this.defaultValues.get(paramName);
      }
      if (parameter.isMultiValue()) {
        if (paramValueObj == null)         params.put(paramName,null);
 else         params.put(paramName,new Object[]{paramValueObj});
      }
 else {
        params.put(paramName,paramValueObj);
      }
    }
  }
  return params;
}","/** 
 * get parsed parameters with default value.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ParameterDefinition parameter=(ParameterDefinition)iter.next();
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramObj=this.parametersAsString.get(paramName);
    if (paramObj != null) {
      String format=ParameterAccessor.getFormat(request,paramName);
      if (format == null || format.length() <= 0) {
        format=parameter.getPattern();
      }
      String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
      boolean isLocale=this.locParams.contains(paramName);
      List paramList=null;
      if (paramObj instanceof List) {
        paramList=(List)paramObj;
      }
 else {
        paramList=new ArrayList();
        paramList.add(paramObj);
      }
      for (int i=0; i < paramList.size(); i++) {
        try {
          Object paramValueObj=DataUtil.validate(paramName,dataType,format,(String)paramList.get(i),locale,isLocale);
          paramList.set(i,paramValueObj);
        }
 catch (        ViewerValidationException e) {
          if (IBirtConstants.SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath())) {
            this.exception=e;
            break;
          }
          paramList.set(i,paramList.get(i));
        }
      }
      if (paramObj instanceof List) {
        List list=(List)paramObj;
        if (list.size() == 0 || (list.size() == 1 && list.get(0) == null))         params.put(paramName,null);
 else         params.put(paramName,paramList.toArray());
      }
 else {
        params.put(paramName,paramList.get(0));
      }
    }
 else {
      Object paramValueObj=null;
      if (!this.parametersAsString.containsKey(paramName)) {
        paramValueObj=this.defaultValues.get(paramName);
      }
      if (parameter.isMultiValue()) {
        if (paramValueObj == null)         params.put(paramName,null);
 else         params.put(paramName,new Object[]{paramValueObj});
      }
 else {
        params.put(paramName,paramValueObj);
      }
    }
  }
  return params;
}",0.9911573983100804
74490,"public void testToSqlTime() throws BirtException {
  Time time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  Calendar cal=Calendar.getInstance();
  cal.clear();
  cal.set(0,0,0,12,11,25);
  Time temp=new Time(cal.getTime().getTime());
  assertEquals(time.toString(),temp.toString());
  time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  cal=Calendar.getInstance();
  cal.clear();
  cal.set(0,0,0,18,11,25);
  temp=new Time(cal.getTime().getTime());
  assertEquals(time.toString(),temp.toString());
  try {
    DataTypeUtil.toSqlTime(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
}","public void testToSqlTime() throws BirtException {
  Time temp=getTime(11,11,25);
  Time time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time.toString(),temp.toString());
  time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time.toString(),temp.toString());
  time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time.toString(),temp.toString());
  temp=getTime(18,11,25);
  time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time.toString(),temp.toString());
  time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time,temp);
  time=DataTypeUtil.toSqlTime(""String_Node_Str"");
  assertEquals(time,temp);
  failSqlTimeString(""String_Node_Str"");
  failSqlTimeString(""String_Node_Str"");
  failSqlTimeString(""String_Node_Str"");
  failSqlTimeString(""String_Node_Str"");
  failSqlTimeString(""String_Node_Str"");
  failSqlTimeString(""String_Node_Str"");
}",0.3270846800258565
74491,"/** 
 * Tests set list value when map operator is 'in'.
 * @throws Exception
 */
public void testOperatorIn() throws Exception {
  createDesign();
  StyleHandle style=designHandle.getElementFactory().newStyle(""String_Node_Str"");
  designHandle.getStyles().add(style);
  PropertyHandle propHandle=style.getPropertyHandle(IStyleModel.HIGHLIGHT_RULES_PROP);
  HighlightRule rule=StructureFactory.createHighlightRule();
  propHandle.addItem(rule);
  HighlightRuleHandle ruleHandle=(HighlightRuleHandle)propHandle.get(0);
  ruleHandle.setOperator(DesignChoiceConstants.MAP_OPERATOR_IN);
  List values=new ArrayList();
  values.add(""String_Node_Str"");
  values.add(""String_Node_Str"");
  ruleHandle.setValue1(values);
  ruleHandle.setTestExpression(""String_Node_Str"");
  HighlightRule rule2=StructureFactory.createHighlightRule();
  List values2=new ArrayList();
  values2.add(""String_Node_Str"");
  values2.add(""String_Node_Str"");
  rule2.setValue1(values);
  rule2.setTestExpression(""String_Node_Str"");
  rule2.setOperator(DesignChoiceConstants.MAP_OPERATOR_IN);
  propHandle.addItem(rule2);
}","/** 
 * Tests set list value when map operator is 'in'.
 * @throws Exception
 */
public void testOperatorIn() throws Exception {
  createDesign();
  StyleHandle style=designHandle.getElementFactory().newStyle(""String_Node_Str"");
  designHandle.getStyles().add(style);
  PropertyHandle propHandle=style.getPropertyHandle(IStyleModel.HIGHLIGHT_RULES_PROP);
  HighlightRule rule=StructureFactory.createHighlightRule();
  propHandle.addItem(rule);
  HighlightRuleHandle ruleHandle=(HighlightRuleHandle)propHandle.get(0);
  ruleHandle.setOperator(DesignChoiceConstants.MAP_OPERATOR_IN);
  List values=new ArrayList();
  values.add(""String_Node_Str"");
  values.add(""String_Node_Str"");
  ruleHandle.setValue1(values);
  ruleHandle.setTestExpression(""String_Node_Str"");
  HighlightRule rule2=StructureFactory.createHighlightRule();
  rule2.setProperty(StyleRule.VALUE1_MEMBER,""String_Node_Str"");
  List values2=new ArrayList();
  values2.add(""String_Node_Str"");
  values2.add(""String_Node_Str"");
  rule2.setValue1(values);
  rule2.setTestExpression(""String_Node_Str"");
  rule2.setOperator(DesignChoiceConstants.MAP_OPERATOR_IN);
  propHandle.addItem(rule2);
}",0.9714030384271672
74492,"protected void setIntrinsicProperty(String propName,Object value){
  if (OPERATOR_MEMBER.equals(propName))   operator=(String)value;
 else   if (VALUE1_MEMBER.equals(propName))   value1=(List)value;
 else   if (VALUE2_MEMBER.equals(propName))   value2=(String)value;
 else   if (TEST_EXPR_MEMBER.equals(propName))   testExpression=(String)value;
 else   if (IS_DESIGN_TIME_MEMBER.equals(propName))   isDesignTime=(Boolean)value;
 else   super.setIntrinsicProperty(propName,value);
}","protected void setIntrinsicProperty(String propName,Object value){
  if (OPERATOR_MEMBER.equals(propName))   operator=(String)value;
 else   if (VALUE1_MEMBER.equals(propName)) {
    if (value == null) {
      value1=null;
      return;
    }
    if (value instanceof List) {
      value1=(List)value;
    }
 else {
      value1=new ArrayList();
      value1.add(value);
    }
  }
 else   if (VALUE2_MEMBER.equals(propName))   value2=(String)value;
 else   if (TEST_EXPR_MEMBER.equals(propName))   testExpression=(String)value;
 else   if (IS_DESIGN_TIME_MEMBER.equals(propName))   isDesignTime=(Boolean)value;
 else   super.setIntrinsicProperty(propName,value);
}",0.8289703315881326
74493,"/** 
 * Prepare response
 * @throws ReportServiceException
 * @throws RemoteException
 */
protected void prepareResponse() throws ReportServiceException, RemoteException {
  TOC toc=new TOC();
  List children=__node.getChildren();
  if (children != null && children.size() > 0) {
    TOC[] childTOCNodes=new TOC[children.size()];
    for (int i=0; i < children.size(); i++) {
      ToC child=(ToC)children.get(i);
      childTOCNodes[i]=new TOC();
      childTOCNodes[i].setId(child.getID());
      childTOCNodes[i].setDisplayName(child.getDisplayName());
      childTOCNodes[i].setBookmark(child.getBookmark());
      childTOCNodes[i].setStyle(child.getStyle());
      childTOCNodes[i].setIsLeaf(new Boolean(child.getChildren() == null || child.getChildren().size() <= 0));
    }
    toc.setChild(childTOCNodes);
  }
  Data data=new Data();
  data.setTOC(toc);
  UpdateData updateData=new UpdateData();
  updateData.setTarget(""String_Node_Str"");
  updateData.setData(data);
  Update update=new Update();
  update.setUpdateData(updateData);
  response.setUpdate(new Update[]{update});
}","/** 
 * Prepare response
 * @throws ReportServiceException
 * @throws RemoteException
 */
protected void prepareResponse() throws ReportServiceException, RemoteException {
  TOC toc=new TOC();
  List children=__node.getChildren();
  if (children != null && children.size() > 0) {
    TOC[] childTOCNodes=new TOC[children.size()];
    for (int i=0; i < children.size(); i++) {
      ToC child=(ToC)children.get(i);
      childTOCNodes[i]=new TOC();
      childTOCNodes[i].setId(child.getID());
      childTOCNodes[i].setDisplayName(ParameterAccessor.htmlEncode(child.getDisplayName()));
      childTOCNodes[i].setBookmark(child.getBookmark());
      childTOCNodes[i].setStyle(child.getStyle());
      childTOCNodes[i].setIsLeaf(new Boolean(child.getChildren() == null || child.getChildren().size() <= 0));
    }
    toc.setChild(childTOCNodes);
  }
  Data data=new Data();
  data.setTOC(toc);
  UpdateData updateData=new UpdateData();
  updateData.setTarget(""String_Node_Str"");
  updateData.setData(data);
  Update update=new Update();
  update.setUpdateData(updateData);
  response.setUpdate(new Update[]{update});
}",0.9863760217983653
74494,"protected static Object convertToType(Object value,String type){
  try {
    if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
      return DataTypeUtil.toBoolean(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
      return DataTypeUtil.toDate(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) {
      return DataTypeUtil.toSqlDate(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) {
      return DataTypeUtil.toSqlTime(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type)) {
      return DataTypeUtil.toBigDecimal(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
      return DataTypeUtil.toDouble(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
      return DataTypeUtil.toString(value);
    }
 else     if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) {
      return DataTypeUtil.toInteger(value);
    }
    return value;
  }
 catch (  BirtException e) {
    Logger.getLogger(EngineTask.class.getName()).log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
  return null;
}","protected Object convertToType(Object value,String type){
  try {
    return convertParameterType(value,type);
  }
 catch (  BirtException e) {
    log.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
  return null;
}",0.1506751954513148
74495,"public Object getValue(IResultIterator resultIterator) throws BirtException {
  Object value=resultIterator.getString(valueColumnName);
  return EngineTask.convertToType(value,valueType);
}","public Object getValue(IResultIterator resultIterator) throws BirtException {
  Object value=resultIterator.getString(valueColumnName);
  return EngineTask.convertParameterType(value,valueType);
}",0.9714285714285714
74496,"public void tearDown(){
  if (engine != null) {
    engine.shutdown();
  }
  removeFile(REPORT_DESIGN);
}","public void tearDown(){
  destroy();
}",0.4895104895104895
74497,"public void setUp() throws Exception {
  removeFile(REPORT_DESIGN);
  copyResource(REPORT_DESIGN_RESOURCE,REPORT_DESIGN);
  engine=createReportEngine();
  runnable=engine.openReportDesign(REPORT_DESIGN);
  gpdTask=engine.createGetParameterDefinitionTask(runnable);
}","public void setUp() throws Exception {
  String reportDesign=REPORT_DESIGN_RESOURCE;
  initialize(reportDesign);
}",0.5
74498,"/** 
 * @param dsAndDs
 * @return
 */
private Object getKey(DataSourceAndDataSet dsAndDs){
  for (Iterator it=cacheMap.keySet().iterator(); it.hasNext(); ) {
    DataSourceAndDataSet temp=(DataSourceAndDataSet)it.next();
    if (temp.isDataSourceDataSetEqual(dsAndDs,false)) {
      return temp;
    }
  }
  return null;
}","/** 
 * @param dsAndDs
 * @return
 */
private Object getKey(DataSourceAndDataSet dsAndDs){
synchronized (cacheMap) {
    for (Iterator it=cacheMap.keySet().iterator(); it.hasNext(); ) {
      DataSourceAndDataSet temp=(DataSourceAndDataSet)it.next();
      if (temp.isDataSourceDataSetEqual(dsAndDs,false)) {
        return temp;
      }
    }
    return null;
  }
}",0.936046511627907
74499,"/** 
 * @param appContext 
 * @param collection 
 * @param baseDataSetDesign 
 * @param baseDataSourceDesign 
 * @return
 */
boolean doesSaveToCache(DataSourceAndDataSet dsAndDs,int mode,IBaseDataSourceDesign baseDataSourceDesign,IBaseDataSetDesign baseDataSetDesign,Collection parameterHints,Map appContext){
  Object cacheObject=null;
synchronized (cacheMap) {
    cacheObject=cacheMap.get(dsAndDs);
  }
  if (cacheObject != null) {
    return needSaveToCache(cacheObject);
  }
 else {
synchronized (cacheMap) {
      cacheObject=(String)cacheMap.get(dsAndDs);
      if (cacheObject != null) {
        return needSaveToCache(cacheObject);
      }
      IDataSetCacheObject dsCacheObject=null;
      String cacheDir=(String)cacheDirMap.get(baseDataSetDesign);
      if (baseDataSetDesign instanceof IIncreCacheDataSetDesign) {
        dsCacheObject=(IDataSetCacheObject)new IncreDataSetCacheObject(cacheDir);
      }
 else {
switch (mode) {
case DataEngineContext.CACHE_MODE_IN_MEMORY:
          dsCacheObject=(IDataSetCacheObject)new MemoryDataSetCacheObject();
        break;
case DataEngineContext.CACHE_MODE_IN_DISK:
      String tempRootDir=CacheUtil.createTempRootDir(tempDir);
    String sessionTempDir=CacheUtil.createSessionTempDir(tempRootDir);
  dsCacheObject=(IDataSetCacheObject)new DiskDataSetCacheObject(sessionTempDir);
break;
default :
return false;
}
}
cacheMap.put(dsAndDs,dsCacheObject);
return true;
}
}
}","/** 
 * @param appContext 
 * @param collection 
 * @param baseDataSetDesign 
 * @param baseDataSourceDesign 
 * @return
 * @throws DataException 
 */
boolean doesSaveToCache(DataSourceAndDataSet dsAndDs,int mode,IBaseDataSourceDesign baseDataSourceDesign,IBaseDataSetDesign baseDataSetDesign,Collection parameterHints,Map appContext) throws DataException {
  Object cacheObject=null;
synchronized (cacheMap) {
    cacheObject=cacheMap.get(dsAndDs);
  }
  if (cacheObject != null) {
    return needSaveToCache(cacheObject);
  }
 else {
synchronized (cacheMap) {
      cacheObject=(String)cacheMap.get(dsAndDs);
      if (cacheObject != null) {
        return needSaveToCache(cacheObject);
      }
      IDataSetCacheObject dsCacheObject=null;
      String cacheDir=(String)cacheDirMap.get(baseDataSetDesign);
      if (baseDataSetDesign instanceof IIncreCacheDataSetDesign) {
        dsCacheObject=(IDataSetCacheObject)new IncreDataSetCacheObject(cacheDir);
      }
 else {
switch (mode) {
case DataEngineContext.CACHE_MODE_IN_MEMORY:
          dsCacheObject=(IDataSetCacheObject)new MemoryDataSetCacheObject();
        break;
case DataEngineContext.CACHE_MODE_IN_DISK:
      String tempRootDir=CacheUtil.createTempRootDir(tempDir);
    String sessionTempDir=CacheUtil.createSessionTempDir(tempRootDir);
  dsCacheObject=(IDataSetCacheObject)new DiskDataSetCacheObject(sessionTempDir);
break;
default :
return false;
}
}
cacheMap.put(dsAndDs,dsCacheObject);
return true;
}
}
}",0.983459682977257
74500,"/** 
 * @return
 */
public boolean doesSaveToCache(){
  if (needsToCache(dataSetDesign,cacheOption,alwaysCacheRowCount) == false)   return false;
  return cacheMapManager.doesSaveToCache(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints),this.mode,this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.appContext);
}","/** 
 * @return
 * @throws DataException 
 */
public boolean doesSaveToCache() throws DataException {
  if (needsToCache(dataSetDesign,cacheOption,alwaysCacheRowCount) == false)   return false;
  return cacheMapManager.doesSaveToCache(DataSourceAndDataSet.newInstance(this.dataSourceDesign,this.dataSetDesign,this.parameterHints),this.mode,this.dataSourceDesign,this.dataSetDesign,this.parameterHints,this.appContext);
}",0.9393939393939394
74501,"/** 
 * @return session temp dir
 * @throws IOException 
 */
public static String createSessionTempDir(String tempRootDir){
  final String prefix=""String_Node_Str"";
  File sessionFile=null;
synchronized (cacheCounter2) {
    String sessionTempDir=tempRootDir + File.separator + prefix+ System.currentTimeMillis()+ cacheCounter2.intValue();
    cacheCounter2=new Integer(cacheCounter2.intValue() + 1);
    sessionFile=new File(sessionTempDir);
    int i=0;
    while (sessionFile.exists() || !sessionFile.mkdir()) {
      i++;
      sessionTempDir=sessionTempDir + ""String_Node_Str"" + i;
      sessionFile=new File(sessionTempDir);
    }
    sessionFile.deleteOnExit();
  }
  return getCanonicalPath(sessionFile);
}","/** 
 * @return session temp dir
 * @throws DataException 
 * @throws IOException 
 */
public static String createSessionTempDir(String tempRootDir) throws DataException {
  final String prefix=""String_Node_Str"";
  File sessionFile=null;
synchronized (cacheCounter2) {
    String sessionTempDir=tempRootDir + File.separator + prefix+ System.currentTimeMillis()+ cacheCounter2.intValue();
    cacheCounter2=new Integer(cacheCounter2.intValue() + 1);
    sessionFile=new File(sessionTempDir);
    int i=0;
    while (sessionFile.exists() || !sessionFile.mkdir()) {
      i++;
      sessionTempDir=sessionTempDir + ""String_Node_Str"" + i;
      sessionFile=new File(sessionTempDir);
      if (i > MAX_DIR_CREATION_ATTEMPT)       throw new DataException(ResourceConstants.FAIL_TO_CREATE_TEMP_DIR,sessionFile.getAbsolutePath());
    }
    sessionFile.deleteOnExit();
  }
  return getCanonicalPath(sessionFile);
}",0.8814814814814815
74502,"/** 
 * @return temp directory string, this folder is used to store the temporaryresult in merge sort
 */
private String getTempDirStr(){
  return getSessionTempDirStr() + File.separator + ""String_Node_Str"";
}","/** 
 * @return temp directory string, this folder is used to store the temporaryresult in merge sort
 * @throws DataException 
 */
private String getTempDirStr() throws DataException {
  return getSessionTempDirStr() + File.separator + ""String_Node_Str"";
}",0.8969957081545065
74503,"/** 
 * @return goal file of the end result, 
 */
private String getGoalFileStr(){
  return getSessionTempDirStr() + File.separator + ""String_Node_Str"";
}","/** 
 * @return goal file of the end result, 
 * @throws DataException 
 */
private String getGoalFileStr() throws DataException {
  return getSessionTempDirStr() + File.separator + ""String_Node_Str"";
}",0.8651685393258427
74504,"/** 
 * @return infoMap, including below informationtempDir, to generated temp file in DiskMergeSort goalFile, to generate the end result file dataCountOfUnit, to indicate how many rows can be loaded into memory
 */
private Map getInfoMap(){
  Map infoMap=new HashMap();
  infoMap.put(""String_Node_Str"",getTempDirStr());
  goalFileStr=getGoalFileStr();
  infoMap.put(""String_Node_Str"",goalFileStr);
  infoMap.put(""String_Node_Str"",""String_Node_Str"" + MemoryCacheRowCount);
  return infoMap;
}","/** 
 * @return infoMap, including below informationtempDir, to generated temp file in DiskMergeSort goalFile, to generate the end result file dataCountOfUnit, to indicate how many rows can be loaded into memory
 * @throws DataException 
 */
private Map getInfoMap() throws DataException {
  Map infoMap=new HashMap();
  infoMap.put(""String_Node_Str"",getTempDirStr());
  goalFileStr=getGoalFileStr();
  infoMap.put(""String_Node_Str"",goalFileStr);
  infoMap.put(""String_Node_Str"",""String_Node_Str"" + MemoryCacheRowCount);
  return infoMap;
}",0.9534883720930232
74505,"/** 
 * @return temp directory string, this folder name is unique and thendifferent session will not influence each other, which can support multi-thread
 */
private String getSessionTempDirStr(){
  if (sessionRootDirStr != null)   return sessionRootDirStr;
  if (tempRootDirStr == null)   tempRootDirStr=createTempRootDir();
  sessionRootDirStr=CacheUtil.createSessionTempDir(tempRootDirStr);
  return sessionRootDirStr;
}","/** 
 * @return temp directory string, this folder name is unique and thendifferent session will not influence each other, which can support multi-thread
 * @throws DataException 
 */
private String getSessionTempDirStr() throws DataException {
  if (sessionRootDirStr != null)   return sessionRootDirStr;
  if (tempRootDirStr == null)   tempRootDirStr=createTempRootDir();
  sessionRootDirStr=CacheUtil.createSessionTempDir(tempRootDirStr);
  return sessionRootDirStr;
}",0.9463087248322148
74506,"/** 
 * from object class to its type index value
 * @param obValue
 * @return
 */
private static int getTypeIndex(Object obValue){
  if (obValue == null)   return TYPE_NULL;
  if (obValue instanceof String) {
    if (isLongString((String)obValue)) {
      return TYPE_LONG_STRING;
    }
 else {
      return TYPE_STRING;
    }
  }
  Integer indexOb=(Integer)type2IndexMap.get(obValue.getClass());
  if (indexOb == null) {
    if (obValue instanceof Map) {
      return TYPE_MAP;
    }
    if (obValue instanceof List) {
      return TYPE_LIST;
    }
    if (obValue instanceof Scriptable) {
      return TYPE_JSObject;
    }
    if (obValue.getClass().isAssignableFrom(Timestamp.class)) {
      return TYPE_TIME_STAMP;
    }
    if (obValue.getClass().isAssignableFrom(Time.class)) {
      return TYPE_TIME;
    }
    if (obValue.getClass().isAssignableFrom(Date.class)) {
      return TYPE_DATE;
    }
    if (obValue instanceof Serializable) {
      return TYPE_SERIALIZABLE;
    }
    return -1;
  }
  return indexOb.intValue();
}","/** 
 * from object class to its type index value
 * @param obValue
 * @return
 */
private static int getTypeIndex(Object obValue){
  if (obValue == null)   return TYPE_NULL;
  if (obValue instanceof String) {
    if (isLongString((String)obValue)) {
      return TYPE_LONG_STRING;
    }
 else {
      return TYPE_STRING;
    }
  }
  Integer indexOb=(Integer)type2IndexMap.get(obValue.getClass());
  if (indexOb == null) {
    if (obValue instanceof Map) {
      return TYPE_MAP;
    }
    if (obValue instanceof List) {
      return TYPE_LIST;
    }
    if (obValue instanceof Scriptable) {
      return TYPE_JSObject;
    }
    if (Timestamp.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_TIME_STAMP;
    }
    if (Time.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_TIME;
    }
    if (Date.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_DATE;
    }
    if (obValue instanceof Serializable) {
      return TYPE_SERIALIZABLE;
    }
    return -1;
  }
  return indexOb.intValue();
}",0.9110251450676984
74507,"/** 
 * @param dataSet
 * @param refresh
 * @param useColumnHints Only applicable if the list is refreshed.
 * @return
 */
public DataSetViewData[] getColumns(DataSetHandle dataSet,boolean refresh,boolean useColumnHints,boolean suppressErrorMessage){
  if (dataSet == null) {
    return new DataSetViewData[0];
  }
  DataSetViewData[] columns=null;
  try {
    DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    columns=(DataSetViewData[])htColumns.get(dataSet);
    if (columns == null || refresh) {
      columns=this.populateAllOutputColumns(dataSet,session);
      htColumns.put(dataSet,columns);
    }
    session.shutdown();
  }
 catch (  BirtException e) {
    if (!suppressErrorMessage) {
      ExceptionHandler.handle(e);
    }
    columns=null;
  }
  if (columns == null) {
    columns=new DataSetViewData[]{};
    updateModel(dataSet,columns);
    htColumns.put(dataSet,columns);
  }
  return columns;
}","/** 
 * @param dataSet
 * @param refresh
 * @param useColumnHints Only applicable if the list is refreshed.
 * @return
 */
public DataSetViewData[] getColumns(DataSetHandle dataSet,boolean refresh,boolean useColumnHints,boolean suppressErrorMessage){
  if (dataSet == null) {
    return new DataSetViewData[0];
  }
  DataSetViewData[] columns=null;
  try {
    DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    columns=(DataSetViewData[])htColumns.get(dataSet);
    if (columns == null || refresh) {
      columns=this.populateAllOutputColumns(dataSet,session);
      htColumns.put(dataSet,columns);
    }
    session.shutdown();
  }
 catch (  BirtException e) {
    if (!suppressErrorMessage) {
      ExceptionHandler.handle(e);
    }
    columns=null;
  }
  if (columns == null) {
    columns=new DataSetViewData[]{};
    htColumns.put(dataSet,columns);
  }
  return columns;
}",0.9712368168744008
74508,"/** 
 * register model filter operator with dte's IConditionalExpression operator
 */
private static void registerFilterOperator(){
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_EQ,new Integer(IConditionalExpression.OP_EQ));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NE,new Integer(IConditionalExpression.OP_NE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_LT,new Integer(IConditionalExpression.OP_LT));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_LE,new Integer(IConditionalExpression.OP_LE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_GE,new Integer(IConditionalExpression.OP_GE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_GT,new Integer(IConditionalExpression.OP_GT));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_BETWEEN,new Integer(IConditionalExpression.OP_BETWEEN));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NOT_BETWEEN,new Integer(IConditionalExpression.OP_NOT_BETWEEN));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NULL,new Integer(IConditionalExpression.OP_NULL));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NOT_NULL,new Integer(IConditionalExpression.OP_NOT_NULL));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_TRUE,new Integer(IConditionalExpression.OP_TRUE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_FALSE,new Integer(IConditionalExpression.OP_FALSE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_LIKE,new Integer(IConditionalExpression.OP_LIKE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_TOP_N,new Integer(IConditionalExpression.OP_TOP_N));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_BOTTOM_N,new Integer(IConditionalExpression.OP_BOTTOM_N));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_TOP_PERCENT,new Integer(IConditionalExpression.OP_TOP_PERCENT));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_BOTTOM_PERCENT,new Integer(IConditionalExpression.OP_BOTTOM_PERCENT));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_MATCH,new Integer(IConditionalExpression.OP_MATCH));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NOT_LIKE,new Integer(IConditionalExpression.OP_NOT_LIKE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NOT_MATCH,new Integer(IConditionalExpression.OP_NOT_MATCH));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_IN,new Integer(IConditionalExpression.OP_IN));
}","/** 
 * register model filter operator with dte's IConditionalExpression operator
 */
private static void registerFilterOperator(){
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_EQ,new Integer(IConditionalExpression.OP_EQ));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NE,new Integer(IConditionalExpression.OP_NE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_LT,new Integer(IConditionalExpression.OP_LT));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_LE,new Integer(IConditionalExpression.OP_LE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_GE,new Integer(IConditionalExpression.OP_GE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_GT,new Integer(IConditionalExpression.OP_GT));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_BETWEEN,new Integer(IConditionalExpression.OP_BETWEEN));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NOT_BETWEEN,new Integer(IConditionalExpression.OP_NOT_BETWEEN));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NULL,new Integer(IConditionalExpression.OP_NULL));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NOT_NULL,new Integer(IConditionalExpression.OP_NOT_NULL));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_TRUE,new Integer(IConditionalExpression.OP_TRUE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_FALSE,new Integer(IConditionalExpression.OP_FALSE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_LIKE,new Integer(IConditionalExpression.OP_LIKE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_TOP_N,new Integer(IConditionalExpression.OP_TOP_N));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_BOTTOM_N,new Integer(IConditionalExpression.OP_BOTTOM_N));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_TOP_PERCENT,new Integer(IConditionalExpression.OP_TOP_PERCENT));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_BOTTOM_PERCENT,new Integer(IConditionalExpression.OP_BOTTOM_PERCENT));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_MATCH,new Integer(IConditionalExpression.OP_MATCH));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NOT_LIKE,new Integer(IConditionalExpression.OP_NOT_LIKE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NOT_MATCH,new Integer(IConditionalExpression.OP_NOT_MATCH));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_IN,new Integer(IConditionalExpression.OP_IN));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NOT_IN,new Integer(IConditionalExpression.OP_NOT_IN));
}",0.977804201347602
74509,"public void moveTo(int index) throws DataException {
  if (index < 0 || index >= this.rowCount)   throw new DataException(ResourceConstants.INVALID_ROW_INDEX,new Integer(index));
 else   if (index < currRowIndex)   throw new DataException(ResourceConstants.BACKWARD_SEEK_ERROR);
 else   if (index == currRowIndex)   return;
  this.currRowIndex=index;
}","public void moveTo(int index) throws DataException {
  if (index < 0 || index >= this.rowCount)   throw new DataException(ResourceConstants.INVALID_ROW_INDEX,new Integer(index));
 else   if (index < currRowIndex)   throw new DataException(ResourceConstants.BACKWARD_SEEK_ERROR);
 else   if (index == currRowIndex)   return;
  while (this.currRowIndex < index) {
    this.next();
  }
}",0.8940217391304348
74510,"/** 
 * from object class to its type index value
 * @param obValue
 * @return
 */
private static int getTypeIndex(Object obValue){
  if (obValue == null)   return TYPE_NULL;
  if (obValue instanceof String) {
    if (isLongString((String)obValue)) {
      return TYPE_LONG_STRING;
    }
 else {
      return TYPE_STRING;
    }
  }
  Integer indexOb=(Integer)type2IndexMap.get(obValue.getClass());
  if (indexOb == null) {
    if (obValue instanceof Map) {
      return TYPE_MAP;
    }
    if (obValue instanceof List) {
      return TYPE_LIST;
    }
    if (obValue instanceof Scriptable) {
      return TYPE_JSObject;
    }
    if (obValue instanceof Serializable) {
      return TYPE_SERIALIZABLE;
    }
    return -1;
  }
  return indexOb.intValue();
}","/** 
 * from object class to its type index value
 * @param obValue
 * @return
 */
private static int getTypeIndex(Object obValue){
  if (obValue == null)   return TYPE_NULL;
  if (obValue instanceof String) {
    if (isLongString((String)obValue)) {
      return TYPE_LONG_STRING;
    }
 else {
      return TYPE_STRING;
    }
  }
  Integer indexOb=(Integer)type2IndexMap.get(obValue.getClass());
  if (indexOb == null) {
    if (obValue instanceof Map) {
      return TYPE_MAP;
    }
    if (obValue instanceof List) {
      return TYPE_LIST;
    }
    if (obValue instanceof Scriptable) {
      return TYPE_JSObject;
    }
    if (obValue.getClass().isAssignableFrom(Timestamp.class)) {
      return TYPE_TIME_STAMP;
    }
    if (obValue.getClass().isAssignableFrom(Time.class)) {
      return TYPE_TIME;
    }
    if (obValue.getClass().isAssignableFrom(Date.class)) {
      return TYPE_DATE;
    }
    if (obValue instanceof Serializable) {
      return TYPE_SERIALIZABLE;
    }
    return -1;
  }
  return indexOb.intValue();
}",0.8446927374301676
74511,"/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    Object result=executionContext.evaluate(source);
    if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
      throw new ParameterValidationException(MessageConstants.PARAMETER_SCRIPT_VALIDATION_EXCEPTION,new String[]{paramName,source});
    }
  }
  String paramType=paramHandle.getParamType();
  if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) {
    if (paramValue instanceof Object[]) {
      boolean isValid=true;
      Object[] paramValueList=(Object[])paramValue;
      for (int i=0; i < paramValueList.length; i++) {
        if (paramValueList[i] != null) {
          if (!validateParameterValueType(paramName,paramValueList[i],type,paramHandle)) {
            isValid=false;
          }
        }
      }
      return isValid;
    }
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,""String_Node_Str"",paramValue.getClass().getName()});
  }
 else {
    return validateParameterValueType(paramName,paramValue,type,paramHandle);
  }
}","/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    Object result=executionContext.evaluate(source);
    if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
      throw new ParameterValidationException(MessageConstants.PARAMETER_SCRIPT_VALIDATION_EXCEPTION,new String[]{paramName});
    }
  }
  String paramType=paramHandle.getParamType();
  if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) {
    if (paramValue instanceof Object[]) {
      boolean isValid=true;
      Object[] paramValueList=(Object[])paramValue;
      for (int i=0; i < paramValueList.length; i++) {
        if (paramValueList[i] != null) {
          if (!validateParameterValueType(paramName,paramValueList[i],type,paramHandle)) {
            isValid=false;
          }
        }
      }
      return isValid;
    }
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,""String_Node_Str"",paramValue.getClass().getName()});
  }
 else {
    return validateParameterValueType(paramName,paramValue,type,paramHandle);
  }
}",0.998082717063818
74512,"protected void formalize(DimensionType[] columns,int tableWidth){
  ArrayList percentageList=new ArrayList();
  ArrayList unsetList=new ArrayList();
  double total=0.0f;
  int fixedLength=0;
  for (int i=0; i < columns.length; i++) {
    if (columns[i] == null) {
      unsetList.add(new Integer(i));
    }
 else     if (EngineIRConstants.UNITS_PERCENTAGE.equals(columns[i].getUnits())) {
      percentageList.add(new Integer(i));
      total+=columns[i].getMeasure();
    }
 else {
      int len=PDFTableLM.this.getDimensionValue(columns[i],tableWidth);
      fixedLength+=len;
    }
  }
  if (fixedLength >= tableWidth) {
    for (int i=0; i < unsetList.size(); i++) {
      Integer index=(Integer)unsetList.get(i);
      columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
    }
    for (int i=0; i < percentageList.size(); i++) {
      Integer index=(Integer)percentageList.get(i);
      columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
    }
  }
 else {
    float leftPercentage=(((float)(tableWidth - fixedLength)) / tableWidth) * 100.0f;
    if (unsetList.isEmpty()) {
      double ratio=leftPercentage / total;
      for (int i=0; i < percentageList.size(); i++) {
        Integer index=(Integer)percentageList.get(i);
        columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
      }
    }
 else {
      if (total < leftPercentage) {
        double delta=leftPercentage - total;
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          columns[index.intValue()]=new DimensionType(delta / (double)unsetList.size(),EngineIRConstants.UNITS_PERCENTAGE);
        }
      }
 else {
        double ratio=leftPercentage / total;
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
        }
        for (int i=0; i < percentageList.size(); i++) {
          Integer index=(Integer)percentageList.get(i);
          columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
        }
      }
    }
  }
}","protected void formalize(DimensionType[] columns,int tableWidth){
  ArrayList percentageList=new ArrayList();
  ArrayList unsetList=new ArrayList();
  double total=0.0f;
  int fixedLength=0;
  for (int i=0; i < columns.length; i++) {
    if (columns[i] == null) {
      unsetList.add(new Integer(i));
    }
 else     if (EngineIRConstants.UNITS_PERCENTAGE.equals(columns[i].getUnits())) {
      percentageList.add(new Integer(i));
      total+=columns[i].getMeasure();
    }
 else     if (EngineIRConstants.UNITS_EM.equals(columns[i].getUnits()) || EngineIRConstants.UNITS_EX.equals(columns[i].getUnits())) {
      int len=PDFTableLM.this.getDimensionValue(columns[i],PropertyUtil.getDimensionValue(table.getComputedStyle().getProperty(StyleConstants.STYLE_FONT_SIZE)));
      fixedLength+=len;
    }
 else {
      int len=PDFTableLM.this.getDimensionValue(columns[i],tableWidth);
      fixedLength+=len;
    }
  }
  if (fixedLength >= tableWidth) {
    for (int i=0; i < unsetList.size(); i++) {
      Integer index=(Integer)unsetList.get(i);
      columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
    }
    for (int i=0; i < percentageList.size(); i++) {
      Integer index=(Integer)percentageList.get(i);
      columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
    }
  }
 else {
    float leftPercentage=(((float)(tableWidth - fixedLength)) / tableWidth) * 100.0f;
    if (unsetList.isEmpty()) {
      double ratio=leftPercentage / total;
      for (int i=0; i < percentageList.size(); i++) {
        Integer index=(Integer)percentageList.get(i);
        columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
      }
    }
 else {
      if (total < leftPercentage) {
        double delta=leftPercentage - total;
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          columns[index.intValue()]=new DimensionType(delta / (double)unsetList.size(),EngineIRConstants.UNITS_PERCENTAGE);
        }
      }
 else {
        double ratio=leftPercentage / total;
        for (int i=0; i < unsetList.size(); i++) {
          Integer index=(Integer)unsetList.get(i);
          columns[index.intValue()]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
        }
        for (int i=0; i < percentageList.size(); i++) {
          Integer index=(Integer)percentageList.get(i);
          columns[index.intValue()]=new DimensionType(columns[index.intValue()].getMeasure() * ratio,columns[index.intValue()].getUnits());
        }
      }
    }
  }
}",0.9336859235150528
74513,"/** 
 * process the data content <li> localize the help text <li> format the value <li> handle it as it is an text.
 * @param data data object
 */
protected void processData(IDataContent data){
  String helpText=localize(data,data.getHelpKey(),data.getHelpText());
  data.setHelpText(helpText);
  String text=""String_Node_Str"";
  if (data.getLabelKey() != null || data.getLabelText() != null) {
    text=localize(data,data.getLabelKey(),data.getLabelText());
  }
 else {
    Object value=data.getValue();
    if (value != null) {
      IStyle style=data.getComputedStyle();
      if (value instanceof Number) {
        String format=style.getNumberFormat();
        NumberFormatter fmt=context.getNumberFormatter(format);
        text=fmt.format((Number)value);
        CSSValue align=style.getProperty(IStyle.STYLE_NUMBER_ALIGN);
        if (align != null && align != CSSValueConstants.NONE_VALUE) {
          data.getStyle().setProperty(IStyle.STYLE_TEXT_ALIGN,align);
        }
      }
 else       if (value instanceof String) {
        StringFormatter fmt=context.getStringFormatter(style.getStringFormat());
        text=fmt.format((String)value);
      }
 else       if (value instanceof Date) {
        DateFormatter fmt=context.getDateFormatter(style.getDateFormat());
        text=fmt.format((Date)value);
      }
 else {
        text=value.toString();
      }
    }
  }
  if (text != null) {
    data.setText(text);
  }
 else {
    data.setText(""String_Node_Str"");
  }
}","/** 
 * process the data content <li> localize the help text <li> format the value <li> handle it as it is an text.
 * @param data data object
 */
protected void processData(IDataContent data){
  String helpText=localize(data,data.getHelpKey(),data.getHelpText());
  data.setHelpText(helpText);
  String text=""String_Node_Str"";
  if (data.getLabelKey() != null || data.getLabelText() != null) {
    text=localize(data,data.getLabelKey(),data.getLabelText());
  }
 else {
    Object value=data.getValue();
    if (value instanceof Object[]) {
      Object[] values=(Object[])value;
      if (values.length > 0) {
        value=values[0];
      }
 else {
        value=null;
      }
    }
    if (value != null) {
      IStyle style=data.getComputedStyle();
      if (value instanceof Number) {
        String format=style.getNumberFormat();
        NumberFormatter fmt=context.getNumberFormatter(format);
        text=fmt.format((Number)value);
        CSSValue align=style.getProperty(IStyle.STYLE_NUMBER_ALIGN);
        if (align != null && align != CSSValueConstants.NONE_VALUE) {
          data.getStyle().setProperty(IStyle.STYLE_TEXT_ALIGN,align);
        }
      }
 else       if (value instanceof String) {
        StringFormatter fmt=context.getStringFormatter(style.getStringFormat());
        text=fmt.format((String)value);
      }
 else       if (value instanceof Date) {
        DateFormatter fmt=context.getDateFormatter(style.getDateFormat());
        text=fmt.format((Date)value);
      }
 else {
        text=value.toString();
      }
    }
  }
  if (text != null) {
    data.setText(text);
  }
 else {
    data.setText(""String_Node_Str"");
  }
}",0.9420751113940166
74514,"private boolean layoutChildNode(IReportItemExecutor childExecutor){
  boolean hasNextPage=false;
  IContent childContent=childExecutor.execute();
  PDFAbstractLM childLM=getFactory().createLayoutManager(this,childContent,childExecutor);
  hasNextPage=childLM.layout();
  if (hasNextPage && !childLM.isFinished()) {
    child=childLM;
  }
  return hasNextPage;
}","private boolean layoutChildNode(IReportItemExecutor childExecutor){
  boolean hasNextPage=false;
  IContent childContent=childExecutor.execute();
  PDFAbstractLM childLM=getFactory().createLayoutManager(this,childContent,childExecutor);
  hasNextPage=childLM.layout();
  if (hasNextPage && !childLM.isFinished()) {
    child=childLM;
  }
 else {
    child=null;
  }
  return hasNextPage;
}",0.9066666666666666
74515,int getType();,"/** 
 * Get the type of the AutoText Content.  <p> The return value must be on of the predefines. <li><code>TOTAL_PAGE</code></li> <li><code>PAGE_NUMBER</code></li>
 */
int getType();",0.1421319796954314
74516,void setType(int type);,"/** 
 * Set the type of the AutoText Content. This type must be one of the predefines. <li><code>TOTAL_PAGE</code></li> <li><code>PAGE_NUMBER</code></li>
 * @param type the type of the AutoText Content.
 */
void setType(int type);",0.1818181818181818
74517,void setBandType(int bandType);,"/** 
 * Set the type of the band content. The value of parameter <code>bandType</code> must be one of the following predefined values in class <code>IBandContent</code>: <li><code>BAND_HEADER</code></li> <li><code>BAND_FOOTER</code></li> <li><code>GROUP_HEADER</code></li> <li><code>GROUP_FOOTER</code></li> <li><code>BAND_DETAIL</code></li>
 * @param bandType the type of the band content.
 */
void setBandType(int bandType);",0.1356673960612691
74518,int getBandType();,"/** 
 * Get the type of the band content. The return result of this method is in <code>int</code> format, and the <code>int</code> value must be one of the following predefined values in class <code>IBandContent</code>: <li><code>BAND_HEADER</code></li> <li><code>BAND_FOOTER</code></li> <li><code>GROUP_HEADER</code></li> <li><code>GROUP_FOOTER</code></li> <li><code>BAND_DETAIL</code></li>
 * @return type of the band content.
 */
int getBandType();",0.0767590618336887
74519,String getGroupID();,"/** 
 * Get the group id if the band content is in some group. This method will return <code>null</code> when the band content is not a group header and group footer.
 * @return the group id.
 */
String getGroupID();",0.1694915254237288
74520,Object getValue();,"/** 
 * Get the value of the data content.
 * @return the value of the data content.
 */
Object getValue();",0.288
74521,String getHelpText();,"/** 
 * Get the help text of the data content.
 * @return the help text.
 */
String getHelpText();",0.3529411764705882
74522,String getLabelKey();,"/** 
 * Get the label key of the data content.
 * @return the label key of the data content.
 */
String getLabelKey();",0.302158273381295
74523,void setValue(Object value);,"/** 
 * Set the value of the data content.
 * @param value the value of the data content.
 */
void setValue(Object value);",0.3733333333333333
74524,void setLabelKey(String key);,"/** 
 * Set the label key of the data content.
 * @param key the label key of the data content.
 */
void setLabelKey(String key);",0.3670886075949367
74525,void setLabelText(String text);,"/** 
 * Set the label text of the data content.
 * @param text the label text of the data content.
 */
void setLabelText(String text);",0.3757575757575757
74526,String getHelpKey();,"/** 
 * Get the help key of the data content. 
 * @return the help key.
 */
String getHelpKey();",0.3448275862068966
74527,String getLabelText();,"/** 
 * Get the label text of the data content.
 * @return the label text of the data content.
 */
String getLabelText();",0.3076923076923077
74528,"/** 
 * @return a set of name/value pairs for running the report in adrillthrough link. 
 */
Map getParameterBindings();","/** 
 * Get a set of name/value pairs for running the target report in a drillthrough link.
 * @return a set of name/value pairs for running the target report in adrillthrough link.
 */
Map getParameterBindings();",0.6066066066066066
74529,"/** 
 * If action type is drillthrough, set the report name.
 * @param reportName
 */
void setReportName(String reportName);","/** 
 * Set the target report name if the action type is drillthrough which is predefined.
 * @param reportName the report name
 */
void setReportName(String reportName);",0.7414965986394558
74530,"/** 
 * Set the bookmark of this drillThrough if action type is drillthrough. 
 * @param bookmark
 */
void setBookmark(String bookmark);","/** 
 * Set the bookmark type of this drillthrough action.
 * @param bookmark <code>true</code>, the target element is a bookmark. or <code>false</code>, the target element is indicated to be a toc.
 */
void setBookmark(String bookmark);",0.5576407506702413
74531,void setParameterBindings(Map parameterBindings);,"/** 
 * Set a set of name/value pairs for running the target report in a drillthrough link.
 * @param parameterBindings a set of name/value pairs for running the report in a drillthrough link.
 */
void setParameterBindings(Map parameterBindings);",0.3322033898305084
74532,"/** 
 * @return the type of the target report file.
 */
public String getTargetFileType();","/** 
 * Get the type of the target file.
 * @return the type of the target report file.
 */
public String getTargetFileType();",0.8333333333333334
74533,"/** 
 * @return a set of name/value pairs for searching the report in adrillthrough link.
 */
Map getSearchCriteria();","/** 
 * Get a set of name/value pairs for searching the target report in a drillthrough link.
 * @return a set of name/value pairs for searching the target report in adrillthrough link.
 */
Map getSearchCriteria();",0.7108433734939759
74534,"/** 
 * @return the targetWindow string if action type is drillthrough.
 */
String getTargetWindow();","/** 
 * Get the target window.
 * @return the targetWindow string if action type is drillthrough.
 */
String getTargetWindow();",0.8859649122807017
74535,"/** 
 * @return the report name if action type is drillthrough.
 */
String getReportName();","/** 
 * Get the target report name if the action type is drillthrough which is predefined.
 * @return the report name.
 */
String getReportName();",0.7257383966244726
74536,"/** 
 * @return the bookmark string if the bookmark type is Bookmark and action type is drillthrough.NULL if  the bookmark type is TOC and action type is drillthrough.
 */
String getBookmark();","/** 
 * Get the bookmark.
 * @return the bookmark string if the bookmark type is Bookmark and actiontype is drillthrough. Return <code>null</code> if the bookmark type is TOC and action type is drillthrough.
 */
String getBookmark();",0.8779342723004695
74537,void setFormat(String format);,"/** 
 * set the format of the output report.
 * @param format the format of the output report.
 */
void setFormat(String format);",0.3773584905660377
74538,"/** 
 * Sets target report file type for a drill-through action.
 */
public void setTargetFileType(String targetFileType);","/** 
 * Sets the type of target report file for a drill-through action.
 * @param targetFileType the type of the target file
 */
public void setTargetFileType(String targetFileType);",0.7697368421052632
74539,void setSearchCriteria(Map searchCriteria);,"/** 
 * Set a set of name/value pairs for searching the target report in a drillthrough link.
 * @param searchCriteria a set of name/value pairs for searching the report in a drillthrough link.
 */
void setSearchCriteria(Map searchCriteria);",0.3028169014084507
74540,"/** 
 * @return the format of output report if action type is drillthrough. 
 */
String getFormat();","/** 
 * Get the format of the target report if the action type is drillthrough. This format is used for building the URL when explorer between reports, running the target report and related process.
 * @return the format of output report if action type is drillthrough.
 */
String getFormat();",0.5038167938931297
74541,void setTargetWindow(String target);,"/** 
 * Set the target window in string format.
 * @param target the target window.
 */
void setTargetWindow(String target);",0.45
74542,void setBookmarkType(boolean isBookmark);,"/** 
 * Set the type of bookmark.  <code>true</code>, is a bookmark. <code>false</code>, indicated to be a toc.
 * @param <code>isBookmark</code> the bookmark type is toc or not.
 */
void setBookmarkType(boolean isBookmark);",0.3094339622641509
74543,"/** 
 * @return the bookmark type set in the drillThrough if action type is drillthrough. True, the bookmark is a bookmark. False, the bookmark is indicated to be a toc.  
 */
boolean isBookmark();","/** 
 * Return the bookmark type set in the drillthrough action. The return result indicated the target element is a toc or not.
 * @return <code>true</code>, the target element is a bookmark.<code>false</code>, the target element is indicated to be a toc.
 */
boolean isBookmark();",0.3465553235908142
74544,"/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasAggregationInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getBindings(),queryDefn.getBindings());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return false;
  if (!isBindingReferenceSort(queryDefn.getSorts()))   return false;
  if (hasSubquery(queryDefn)) {
    if (hasSubQueryInDetail(queryDefn.getSubqueries()))     return false;
    if (!QueryDefnUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      for (int i=0; i < groups.size(); i++) {
        List groupFilters=((IGroupDefinition)groups.get(i)).getFilters();
        if (groupFilters != null && groupFilters.size() > 0) {
          runningOnRS=false;
          break;
        }
      }
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return false;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0) {
    if (!isFiltersEquals(filters,queryDefn.getFilters()))     runningOnRS=queryDefn.getBindings().values() == null || !hasAggregationOnRowObjects(queryDefn.getBindings().values().iterator());
  }
  return runningOnRS;
}","/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasAggregationInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getBindings(),queryDefn.getBindings());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return false;
  if (!isBindingReferenceSort(queryDefn.getSorts()))   return false;
  if (hasSubquery(queryDefn)) {
    if (hasSubQueryInDetail(queryDefn.getSubqueries()))     return false;
    if (!QueryDefnUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      if (groups != null && !groups.isEmpty())       runningOnRS=false;
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return false;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0) {
    if (!isFiltersEquals(filters,queryDefn.getFilters()))     runningOnRS=queryDefn.getBindings().values() == null || !hasAggregationOnRowObjects(queryDefn.getBindings().values().iterator());
  }
  return runningOnRS;
}",0.9619732785200412
74545,"public void setDataType(Class dataType){
  assert(dataType == Integer.class || dataType == Double.class || dataType == String.class || dataType == BigDecimal.class || dataType == java.util.Date.class || dataType == java.sql.Date.class || dataType == Time.class || dataType == Timestamp.class || dataType == IBlob.class || dataType == IClob.class || dataType == Boolean.class);
  m_dataType=dataType;
}","public void setDataType(Class dataType){
  m_dataType=dataType;
}",0.278969957081545
74546,"/** 
 * @param originalBindingName
 * @param availableHandles
 * @param referredBindings
 * @return
 */
private static boolean acceptindirectReferredBindings(List originalBindingName,List availableHandles,List referredBindings){
  try {
    List candidateBindings=new ArrayList();
    for (int i=0; i < referredBindings.size(); i++) {
      IColumnBinding cb=(IColumnBinding)referredBindings.get(i);
      for (int j=0; j < availableHandles.size(); j++) {
        IBinding binding=(IBinding)availableHandles.get(j);
        if (originalBindingName.contains(binding.getBindingName()))         continue;
        if (binding.getBindingName().equals(cb.getResultSetColumnName()))         candidateBindings.add(binding);
      }
    }
    for (int i=0; i < candidateBindings.size(); i++) {
      ComputedColumnHandle handle=(ComputedColumnHandle)candidateBindings.get(i);
      if (!acceptBinding(handle,availableHandles,originalBindingName))       return false;
    }
    return true;
  }
 catch (  Exception e) {
    return false;
  }
}","/** 
 * @param originalBindingName
 * @param availableHandles
 * @param referredBindings
 * @return
 */
private static boolean acceptindirectReferredBindings(List originalBindingName,List availableHandles,List referredBindings){
  try {
    List candidateBindings=new ArrayList();
    for (int i=0; i < referredBindings.size(); i++) {
      IColumnBinding cb=(IColumnBinding)referredBindings.get(i);
      for (int j=0; j < availableHandles.size(); j++) {
        ComputedColumnHandle binding=(ComputedColumnHandle)availableHandles.get(j);
        if (originalBindingName.contains(binding.getName()))         continue;
        if (binding.getName().equals(cb.getResultSetColumnName()))         candidateBindings.add(binding);
      }
    }
    for (int i=0; i < candidateBindings.size(); i++) {
      ComputedColumnHandle handle=(ComputedColumnHandle)candidateBindings.get(i);
      if (!acceptBinding(handle,availableHandles,originalBindingName))       return false;
    }
    return true;
  }
 catch (  Exception e) {
    return false;
  }
}",0.966281310211946
74547,"/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    Object result=executionContext.evaluate(source);
    if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
      throw new ParameterValidationException(MessageConstants.PARAMETER_SCRIPT_VALIDATION_EXCEPTION,new String[]{paramName,source});
    }
  }
  String paramType=paramHandle.getParamType();
  if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) {
    if (paramValue instanceof Object[]) {
      boolean isValid=true;
      Object[] paramValueList=(Object[])paramValue;
      for (int i=0; i < paramValueList.length; i++) {
        if (paramValueList[i] != null) {
          if (!validateParameterValueType(paramName,paramValueList[i],type,paramHandle)) {
            isValid=false;
          }
        }
      }
      return isValid;
    }
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,""String_Node_Str"",""String_Node_Str""});
  }
 else {
    return validateParameterValueType(paramName,paramValue,type,paramHandle);
  }
}","/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    Object result=executionContext.evaluate(source);
    if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
      throw new ParameterValidationException(MessageConstants.PARAMETER_SCRIPT_VALIDATION_EXCEPTION,new String[]{paramName,source});
    }
  }
  String paramType=paramHandle.getParamType();
  if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) {
    if (paramValue instanceof Object[]) {
      boolean isValid=true;
      Object[] paramValueList=(Object[])paramValue;
      for (int i=0; i < paramValueList.length; i++) {
        if (paramValueList[i] != null) {
          if (!validateParameterValueType(paramName,paramValueList[i],type,paramHandle)) {
            isValid=false;
          }
        }
      }
      return isValid;
    }
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,""String_Node_Str"",paramValue.getClass().getName()});
  }
 else {
    return validateParameterValueType(paramName,paramValue,type,paramHandle);
  }
}",0.987376509330406
74548,"/** 
 * Get report locale from a given string.
 * @param locale locale string
 * @return report locale
 */
public static Locale getLocaleFromString(String locale){
  if (locale == null || locale.length() <= 0) {
    return null;
  }
  int index=locale.indexOf('_');
  if (index != -1) {
    String language=locale.substring(0,index);
    String country=locale.substring(index + 1);
    return new Locale(language,country);
  }
  return new Locale(locale);
}","/** 
 * Get report locale from a given string.
 * @param locale locale string
 * @return report locale
 */
public static Locale getLocaleFromString(String locale){
  if (locale == null || locale.length() <= 0) {
    return null;
  }
  String[] sp=locale.split(""String_Node_Str"");
  if (sp.length == 1) {
    return new Locale(locale);
  }
 else   if (sp.length == 2) {
    return new Locale(sp[0],sp[1]);
  }
 else {
    return new Locale(sp[0],sp[1],sp[2]);
  }
}",0.5515743756786102
74549,"/** 
 * Notice the return value of this function is IResultObject. The null value indicates the cursor exceeds the end of result set.
 * @return next result data
 * @throws DataException
 */
public IResultObject next() throws DataException {
  IResultObject ro=this.rowResultSet.next();
  if (ro == null)   return null;
  Object[] objs=new Object[this.resultClass.getFieldCount()];
  if (objs.length > 0) {
    int roFieldCount=ro.getResultClass().getFieldCount();
    for (int i=0; i < objs.length; i++) {
      if (i + 1 <= roFieldCount)       objs[i]=ro.getFieldValue(i + 1);
 else       objs[i]=null;
    }
  }
  return new ResultObject(resultClass,objs);
}","/** 
 * Notice the return value of this function is IResultObject. The null value indicates the cursor exceeds the end of result set.
 * @param stopSign
 * @return next result data
 * @throws DataException
 */
public IResultObject next(StopSign stopSign) throws DataException {
  IResultObject ro=this.rowResultSet.next(stopSign);
  if (ro == null)   return null;
  Object[] objs=new Object[this.resultClass.getFieldCount()];
  if (objs.length > 0) {
    int roFieldCount=ro.getResultClass().getFieldCount();
    for (int i=0; i < objs.length; i++) {
      if (i + 1 <= roFieldCount)       objs[i]=ro.getFieldValue(i + 1);
 else       objs[i]=null;
    }
  }
  return new ResultObject(resultClass,objs);
}",0.9677891654465594
74550,"/** 
 * Notice the return value of this function is IResultObject. The null value indicates the cursor exceeds the end of result set.
 * @return next result data
 * @throws DataException
 */
IResultObject next() throws DataException ;","/** 
 * Notice the return value of this function is IResultObject. The null value indicates the cursor exceeds the end of result set.
 * @param stopSign
 * @return next result data
 * @throws DataException
 */
IResultObject next(StopSign stopSign) throws DataException ;",0.9285714285714286
74551,"/** 
 * Fetch data from Oda or Odi. After the fetch is done, the cursor must stay at the row which is fetched.
 * @return IResultObject
 * @throws DataException
 */
IResultObject fetch() throws DataException {
  try {
    if (odaResultSet != null) {
      return odaResultSet.fetch();
    }
    if (datasetCache != null) {
      return datasetCache.fetch();
    }
 else     if (customDataSet != null) {
      return customDataSet.fetch();
    }
 else     if (resultIterator != null) {
      if (!riStarted)       riStarted=true;
 else       this.resultIterator.next();
      return this.resultIterator.getCurrentResult();
    }
 else     if (roReader != null) {
      return roReader.fetch();
    }
 else     if (populator != null) {
      return populator.next();
    }
 else {
      return resultSetCache.fetch();
    }
  }
 catch (  IllegalArgumentException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}","/** 
 * Fetch data from Oda or Odi. After the fetch is done, the cursor must stay at the row which is fetched.
 * @param stopSign
 * @return
 * @throws DataException
 */
IResultObject fetch(StopSign stopSign) throws DataException {
  try {
    if (odaResultSet != null) {
      return odaResultSet.fetch();
    }
    if (datasetCache != null) {
      return datasetCache.fetch(stopSign);
    }
 else     if (customDataSet != null) {
      return customDataSet.fetch();
    }
 else     if (resultIterator != null) {
      if (!riStarted)       riStarted=true;
 else       this.resultIterator.next();
      return this.resultIterator.getCurrentResult();
    }
 else     if (roReader != null) {
      return roReader.fetch();
    }
 else     if (populator != null) {
      return populator.next();
    }
 else {
      return resultSetCache.fetch();
    }
  }
 catch (  IllegalArgumentException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}",0.2276595744680851
74552,"/** 
 * Notice the return value of this function is IResultObject. The null value indicates the cursor exceeds the end of result set.
 * @return next result data
 * @throws DataException
 */
public IResultObject next() throws DataException {
  if (currIndex >= maxRows)   return null;
  IResultObject odaObject=null;
  while (true) {
    odaObject=odiAdpater.fetch();
    if (odaObject == null) {
      break;
    }
 else     if (processFetchEvent(odaObject,currIndex) == true) {
      if (this.distinctValueFlag == true && isDuplicatedObject(odaObject))       continue;
      currIndex++;
      break;
    }
  }
  return odaObject;
}","/** 
 * Notice the return value of this function is IResultObject. The null value indicates the cursor exceeds the end of result set.
 * @param stopSign
 * @return next result data
 * @throws DataException
 */
public IResultObject next(StopSign stopSign) throws DataException {
  if (currIndex >= maxRows)   return null;
  IResultObject odaObject=null;
  while (true) {
    odaObject=odiAdpater.fetch(stopSign);
    if (odaObject == null) {
      break;
    }
 else     if (processFetchEvent(odaObject,currIndex) == true) {
      if (this.distinctValueFlag == true && isDuplicatedObject(odaObject))       continue;
      currIndex++;
      break;
    }
  }
  return odaObject;
}",0.9664634146341464
74553,"/** 
 * Populate the smartCache.
 * @param rsMeta
 * @param rowResultSet
 * @param sortSpec
 * @param stopSign
 * @throws DataException
 */
private void populateData(IRowResultSet rowResultSet,IResultClass rsMeta,SortSpec sortSpec,StopSign stopSign) throws DataException {
  long startTime=System.currentTimeMillis();
  SizeOfUtil sizeOfUtil=new SizeOfUtil(rsMeta);
  long memoryCacheSize=CacheUtil.computeMemoryBufferSize(eventHandler.getAppContext());
  IResultObject odaObject;
  IResultObject[] resultObjects;
  List resultObjectsList=new ArrayList();
  int dataCount=0;
  long usedMemorySize=0;
  while ((odaObject=rowResultSet.next()) != null && !stopSign.isStopped()) {
    if (usedMemorySize < memoryCacheSize) {
      dataCount++;
      int odaObjectFieldCount=odaObject.getResultClass().getFieldCount();
      int metaFieldCount=rsMeta.getFieldCount();
      if (odaObjectFieldCount < metaFieldCount) {
        Object[] obs=new Object[metaFieldCount];
        for (int i=1; i <= odaObjectFieldCount; i++) {
          obs[i - 1]=odaObject.getFieldValue(i);
        }
        ResultObject temp=new ResultObject(rsMeta,obs);
        resultObjectsList.add(temp);
        usedMemorySize+=sizeOfUtil.sizeOf(temp);
      }
 else {
        resultObjectsList.add(odaObject);
        usedMemorySize+=sizeOfUtil.sizeOf(odaObject);
      }
    }
 else {
      logger.fine(""String_Node_Str"");
      resultObjects=(IResultObject[])resultObjectsList.toArray(new IResultObject[0]);
      resultSetCache=new DiskCache(resultObjects,odaObject,rowResultSet,rsMeta,getComparator(sortSpec,eventHandler),dataCount,this.session,stopSign);
      break;
    }
  }
  if (resultSetCache == null) {
    logger.fine(""String_Node_Str"");
    resultObjects=(IResultObject[])resultObjectsList.toArray(new IResultObject[0]);
    resultSetCache=new MemoryCache(resultObjects,rsMeta,getComparator(sortSpec,eventHandler));
  }
  odaObject=null;
  resultObjects=null;
  resultObjectsList=null;
  rowResultSet=null;
  long consumedTime=(System.currentTimeMillis() - startTime) / 1000;
  logger.fine(""String_Node_Str"" + consumedTime + ""String_Node_Str"");
}","/** 
 * Populate the smartCache.
 * @param rsMeta
 * @param rowResultSet
 * @param sortSpec
 * @param stopSign
 * @throws DataException
 */
private void populateData(IRowResultSet rowResultSet,IResultClass rsMeta,SortSpec sortSpec,StopSign stopSign) throws DataException {
  long startTime=System.currentTimeMillis();
  SizeOfUtil sizeOfUtil=new SizeOfUtil(rsMeta);
  long memoryCacheSize=CacheUtil.computeMemoryBufferSize(eventHandler.getAppContext());
  IResultObject odaObject;
  IResultObject[] resultObjects;
  List resultObjectsList=new ArrayList();
  int dataCount=0;
  long usedMemorySize=0;
  while ((odaObject=rowResultSet.next(stopSign)) != null && !stopSign.isStopped()) {
    if (usedMemorySize < memoryCacheSize) {
      dataCount++;
      int odaObjectFieldCount=odaObject.getResultClass().getFieldCount();
      int metaFieldCount=rsMeta.getFieldCount();
      if (odaObjectFieldCount < metaFieldCount) {
        Object[] obs=new Object[metaFieldCount];
        for (int i=1; i <= odaObjectFieldCount; i++) {
          obs[i - 1]=odaObject.getFieldValue(i);
        }
        ResultObject temp=new ResultObject(rsMeta,obs);
        resultObjectsList.add(temp);
        usedMemorySize+=sizeOfUtil.sizeOf(temp);
      }
 else {
        resultObjectsList.add(odaObject);
        usedMemorySize+=sizeOfUtil.sizeOf(odaObject);
      }
    }
 else {
      logger.fine(""String_Node_Str"");
      resultObjects=(IResultObject[])resultObjectsList.toArray(new IResultObject[0]);
      resultSetCache=new DiskCache(resultObjects,odaObject,rowResultSet,rsMeta,getComparator(sortSpec,eventHandler),dataCount,this.session,stopSign);
      break;
    }
  }
  if (resultSetCache == null) {
    logger.fine(""String_Node_Str"");
    resultObjects=(IResultObject[])resultObjectsList.toArray(new IResultObject[0]);
    resultSetCache=new MemoryCache(resultObjects,rsMeta,getComparator(sortSpec,eventHandler));
  }
  odaObject=null;
  resultObjects=null;
  resultObjectsList=null;
  rowResultSet=null;
  long consumedTime=(System.currentTimeMillis() - startTime) / 1000;
  logger.fine(""String_Node_Str"" + consumedTime + ""String_Node_Str"");
}",0.9981220657276996
74554,"public IResultObject next() throws DataException {
  IResultObject result=null;
  if (startNewGroup) {
    currentGroup++;
    if (currentGroup > orderingInfo.getCount() - 1)     return null;
    rsCache.moveTo(orderingInfo.getStartIndex(currentGroup));
    startNewGroup=false;
  }
 else {
    rsCache.next();
  }
  result=rsCache.getCurrentResult();
  if (rsCache.getCurrentIndex() == orderingInfo.getEndIndex(currentGroup))   startNewGroup=true;
  return result;
}","public IResultObject next(StopSign stopSign) throws DataException {
  IResultObject result=null;
  if (startNewGroup) {
    currentGroup++;
    if (currentGroup > orderingInfo.getCount() - 1)     return null;
    rsCache.moveTo(orderingInfo.getStartIndex(currentGroup));
    startNewGroup=false;
  }
 else {
    rsCache.next();
  }
  result=rsCache.getCurrentResult();
  if (rsCache.getCurrentIndex() == orderingInfo.getEndIndex(currentGroup))   startNewGroup=true;
  return result;
}",0.982124079915878
74555,"/** 
 * A util method for sub class
 * @param resultObject
 * @param rs
 * @param dataCountOfUnit
 * @param stopSign
 * @throws DataException , fetch data exception
 * @throws IOException , file writer exception
 * @return how much data is exported
 */
protected int innerExportRestData(IResultObject resultObject,IRowResultSet rs,int dataCountOfUnit,StopSign stopSign) throws DataException, IOException {
  int columnCount=rs.getMetaData().getFieldCount();
  IResultObject[] rowDatas=new IResultObject[dataCountOfUnit];
  rowDatas[0]=resultObject;
  int currDataCount=1;
  int dataIndex=1;
  IResultObject odaObject=null;
  while ((odaObject=rs.next()) != null && !stopSign.isStopped()) {
    Object[] ob=new Object[columnCount];
    for (int i=0; i < columnCount; i++)     ob[i]=odaObject.getFieldValue(i + 1);
    IResultObject rowData=resultObjectUtil.newResultObject(ob);
    if (currDataCount % dataCountOfUnit == 0) {
      int indexOfUnit=currDataCount / dataCountOfUnit - 1;
      if (indexOfUnit >= 0)       outputResultObjects(rowDatas,indexOfUnit + 1,stopSign);
      dataIndex=0;
    }
    rowDatas[dataIndex++]=rowData;
    currDataCount++;
  }
  IResultObject[] rowDatas2=rowDatas;
  int indexOfUnit=currDataCount / dataCountOfUnit - 1;
  if (currDataCount % dataCountOfUnit != 0) {
    indexOfUnit++;
    int length=currDataCount % dataCountOfUnit;
    rowDatas2=new IResultObject[length];
    System.arraycopy(rowDatas,0,rowDatas2,0,length);
  }
  outputResultObjects(rowDatas2,indexOfUnit + 1,stopSign);
  return currDataCount;
}","/** 
 * A util method for sub class
 * @param resultObject
 * @param rs
 * @param dataCountOfUnit
 * @param stopSign
 * @throws DataException , fetch data exception
 * @throws IOException , file writer exception
 * @return how much data is exported
 */
protected int innerExportRestData(IResultObject resultObject,IRowResultSet rs,int dataCountOfUnit,StopSign stopSign) throws DataException, IOException {
  int columnCount=rs.getMetaData().getFieldCount();
  IResultObject[] rowDatas=new IResultObject[dataCountOfUnit];
  rowDatas[0]=resultObject;
  int currDataCount=1;
  int dataIndex=1;
  IResultObject odaObject=null;
  while ((odaObject=rs.next(stopSign)) != null && !stopSign.isStopped()) {
    Object[] ob=new Object[columnCount];
    for (int i=0; i < columnCount; i++)     ob[i]=odaObject.getFieldValue(i + 1);
    IResultObject rowData=resultObjectUtil.newResultObject(ob);
    if (currDataCount % dataCountOfUnit == 0) {
      int indexOfUnit=currDataCount / dataCountOfUnit - 1;
      if (indexOfUnit >= 0)       outputResultObjects(rowDatas,indexOfUnit + 1,stopSign);
      dataIndex=0;
    }
    rowDatas[dataIndex++]=rowData;
    currDataCount++;
  }
  IResultObject[] rowDatas2=rowDatas;
  int indexOfUnit=currDataCount / dataCountOfUnit - 1;
  if (currDataCount % dataCountOfUnit != 0) {
    indexOfUnit++;
    int length=currDataCount % dataCountOfUnit;
    rowDatas2=new IResultObject[length];
    System.arraycopy(rowDatas,0,rowDatas2,0,length);
  }
  outputResultObjects(rowDatas2,indexOfUnit + 1,stopSign);
  return currDataCount;
}",0.9974210186976143
74556,"protected int innerExportRestData(IResultObject resultObject,IRowResultSet rs,int dataCountOfUnit,StopSign stopSign) throws DataException, IOException {
  addNewRow(resultObject);
  int columnCount=rs.getMetaData().getFieldCount();
  int currDataCount=1;
  IResultObject odaObject=null;
  while ((odaObject=rs.next()) != null) {
    if (stopSign.isStopped())     return 0;
    Object[] ob=new Object[columnCount];
    for (int i=0; i < columnCount; i++)     ob[i]=odaObject.getFieldValue(i + 1);
    IResultObject rowData=resultObjectUtil.newResultObject(ob);
    addNewRow(rowData);
    currDataCount++;
  }
  processLastUnit(stopSign);
  return currDataCount;
}","protected int innerExportRestData(IResultObject resultObject,IRowResultSet rs,int dataCountOfUnit,StopSign stopSign) throws DataException, IOException {
  addNewRow(resultObject);
  int columnCount=rs.getMetaData().getFieldCount();
  int currDataCount=1;
  IResultObject odaObject=null;
  while ((odaObject=rs.next(stopSign)) != null) {
    if (stopSign.isStopped())     return 0;
    Object[] ob=new Object[columnCount];
    for (int i=0; i < columnCount; i++)     ob[i]=odaObject.getFieldValue(i + 1);
    IResultObject rowData=resultObjectUtil.newResultObject(ob);
    addNewRow(rowData);
    currDataCount++;
  }
  processLastUnit(stopSign);
  return currDataCount;
}",0.9940029985007496
74557,"/** 
 * @param dataSetHandle
 * @param rsMeta
 * @return
 * @throws BirtException
 */
private boolean needsSetCachedMetaData(DataSetHandle dataSetHandle,IResultMetaData rsMeta) throws BirtException {
  if (dataSetHandle.getCachedMetaDataHandle() == null || rsMeta == null || rsMeta.getColumnCount() == 0)   return true;
  List list=new ArrayList();
  for (Iterator iter=dataSetHandle.getCachedMetaDataHandle().getResultSet().iterator(); iter.hasNext(); ) {
    list.add(iter.next());
  }
  if (list.size() != rsMeta.getColumnCount())   return true;
  for (int i=1; i <= rsMeta.getColumnCount(); i++) {
    ResultSetColumnHandle handle=(ResultSetColumnHandle)list.get(i - 1);
    if (handle.getColumnName() == null || !handle.getColumnName().equals(getColumnName(rsMeta,i)) || !handle.getDataType().equals(toModelDataType(rsMeta.getColumnType(i))))     return true;
  }
  return false;
}","/** 
 * @param dataSetHandle
 * @param rsMeta
 * @return
 * @throws BirtException
 */
private boolean needsSetCachedMetaData(DataSetHandle dataSetHandle,IResultMetaData rsMeta) throws BirtException {
  if (dataSetHandle.getCachedMetaDataHandle() == null || rsMeta == null || rsMeta.getColumnCount() == 0)   return true;
  List list=new ArrayList();
  for (Iterator iter=dataSetHandle.getCachedMetaDataHandle().getResultSet().iterator(); iter.hasNext(); ) {
    list.add(iter.next());
  }
  if (list.size() != rsMeta.getColumnCount())   return true;
  for (int i=1; i <= rsMeta.getColumnCount(); i++) {
    ResultSetColumnHandle handle=(ResultSetColumnHandle)list.get(i - 1);
    if (handle.getColumnName() == null || !handle.getColumnName().equals(getColumnName(rsMeta,i)) || !handle.getDataType().equals(DataAdapterUtil.adapterToModelDataType(rsMeta.getColumnType(i))))     return true;
  }
  return false;
}",0.9860724233983288
74558,"/** 
 * @param meta
 * @throws BirtException 
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  List columnList=new ArrayList();
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    String uniqueName;
    if (!meta.isComputedColumn(i)) {
      uniqueName=MetaDataPopulator.getUniqueName(orgColumnNameSet,uniqueColumnNameSet,meta.getColumnName(i),i - 1);
      rsColumn.setColumnName(uniqueName);
      rsColumn.setDataType(toModelDataType(meta.getColumnType(i)));
      rsColumn.setNativeName(meta.getColumnName(i));
      rsColumn.setPosition(new Integer(i));
      columnList.add(rsColumn);
      uniqueColumnNameSet.add(uniqueName);
    }
  }
  CompatibilityUtil.addResultSetColumn(dataSetHandle,columnList);
}","/** 
 * @param meta
 * @throws BirtException 
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  List columnList=new ArrayList();
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    String uniqueName;
    if (!meta.isComputedColumn(i)) {
      uniqueName=MetaDataPopulator.getUniqueName(orgColumnNameSet,uniqueColumnNameSet,meta.getColumnName(i),i - 1);
      rsColumn.setColumnName(uniqueName);
      rsColumn.setDataType(DataAdapterUtil.adapterToModelDataType(meta.getColumnType(i)));
      rsColumn.setNativeName(meta.getColumnName(i));
      rsColumn.setPosition(new Integer(i));
      columnList.add(rsColumn);
      uniqueColumnNameSet.add(uniqueName);
    }
  }
  CompatibilityUtil.addResultSetColumn(dataSetHandle,columnList);
}",0.987629886194953
74559,"/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  IResultMetaData rsMeta=null;
  BirtException e=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    e=e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    List columnList=new ArrayList();
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        rsc.setDataType(toModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        columnList.add(rsc);
      }
    }
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,columnList);
    }
 else {
      dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
      for (int i=0; i < columnList.size(); i++) {
        dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem((ResultSetColumn)columnList.get(i));
      }
    }
  }
  if (e != null)   throw e;
  return rsMeta;
}","/** 
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
IResultMetaData refreshMetaData(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  IResultMetaData rsMeta=null;
  BirtException e=null;
  try {
    rsMeta=this.getDataSetMetaData(dataSetHandle,false);
  }
 catch (  BirtException e1) {
    e=e1;
  }
  if (needsSetCachedMetaData(dataSetHandle,rsMeta)) {
    List columnList=new ArrayList();
    if (rsMeta != null && rsMeta.getColumnCount() != 0) {
      for (int i=1; i <= rsMeta.getColumnCount(); i++) {
        ResultSetColumn rsc=StructureFactory.createResultSetColumn();
        rsc.setColumnName(getColumnName(rsMeta,i));
        rsc.setDataType(DataAdapterUtil.adapterToModelDataType(rsMeta.getColumnType(i)));
        rsc.setPosition(new Integer(i));
        columnList.add(rsc);
      }
    }
    if (holdEvent || !dataSetHandle.canEdit()) {
      CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle,columnList);
    }
 else {
      dataSetHandle.setCachedMetaData(StructureFactory.createCachedMetaData());
      for (int i=0; i < columnList.size(); i++) {
        dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem((ResultSetColumn)columnList.get(i));
      }
    }
  }
  if (e != null)   throw e;
  return rsMeta;
}",0.9902152641878668
74560,"/** 
 * Handle use IFrame to preview report. Each IFrame should have an unique id.
 * @param src
 * @param target
 * @throws Exception
 */
protected void __handleIFrame(String src,String target) throws Exception {
  JspWriter writer=pageContext.getOut();
  String paramContainerId=""String_Node_Str"" + viewer.getId();
  writer.write(""String_Node_Str"" + paramContainerId + ""String_Node_Str"");
  Iterator it=viewer.getParameters().values().iterator();
  while (it.hasNext()) {
    ParameterField param=(ParameterField)it.next();
    String encParamName=ParameterAccessor.htmlEncode(param.getName());
    Object[] values;
    Object valueObj=param.getValue();
    if (valueObj != null && valueObj instanceof Object[]) {
      values=(Object[])valueObj;
    }
 else {
      values=new Object[1];
      values[0]=valueObj;
    }
    for (int i=0; i < values.length; i++) {
      String paramValue=DataUtil.getDisplayValue(values[i]);
      if (paramValue == null) {
        writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
        writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
        continue;
      }
      writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + paramValue + ""String_Node_Str"");
    }
    if (valueObj != null && param.isLocale() && (valueObj instanceof String || valueObj instanceof String[])) {
      writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    }
    if (param.getPattern() != null) {
      writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + param.getPattern() + ""String_Node_Str"");
    }
    if (param.getDisplayText() != null) {
      writer.write(""String_Node_Str"" + ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName+ ""String_Node_Str"");
      writer.write(""String_Node_Str"" + param.getDisplayText() + ""String_Node_Str"");
    }
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + viewer.getId() + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + paramContainerId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + src + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (target != null)   writer.write(""String_Node_Str"" + target + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(__handleIFrameDefinition());
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + viewer.getId() + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
}","/** 
 * Handle use IFrame to preview report. Each IFrame should have an unique id.
 * @param src
 * @param target
 * @throws Exception
 */
protected void __handleIFrame(String src,String target) throws Exception {
  JspWriter writer=pageContext.getOut();
  String paramContainerId=""String_Node_Str"" + viewer.getId();
  writer.write(""String_Node_Str"" + paramContainerId + ""String_Node_Str"");
  Iterator it=viewer.getParameters().values().iterator();
  while (it.hasNext()) {
    ParameterField param=(ParameterField)it.next();
    String encParamName=ParameterAccessor.htmlEncode(param.getName());
    Object[] values;
    Object valueObj=param.getValue();
    if (valueObj != null && valueObj instanceof Object[]) {
      values=(Object[])valueObj;
    }
 else {
      values=new Object[1];
      values[0]=valueObj;
    }
    for (int i=0; i < values.length; i++) {
      String paramValue=DataUtil.getDisplayValue(values[i]);
      if (paramValue == null) {
        writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
        writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
        continue;
      }
      writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + paramValue + ""String_Node_Str"");
    }
    if (valueObj != null && param.isLocale() && (valueObj instanceof String || valueObj instanceof String[])) {
      writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    }
    if (param.getPattern() != null) {
      writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
      writer.write(""String_Node_Str"" + param.getPattern() + ""String_Node_Str"");
    }
    if (param.getDisplayText() != null) {
      writer.write(""String_Node_Str"" + ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName+ ""String_Node_Str"");
      writer.write(""String_Node_Str"" + param.getDisplayText() + ""String_Node_Str"");
    }
  }
  writer.write(""String_Node_Str"");
  String formId=""String_Node_Str"" + viewer.getId();
  writer.write(""String_Node_Str"" + formId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + viewer.getId() + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + formId + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + paramContainerId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + src + ""String_Node_Str"");
  if (target != null)   writer.write(""String_Node_Str"" + target + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(__handleIFrameDefinition());
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + viewer.getId() + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
}",0.9112531589118478
74561,"public IPreparedCubeQuery prepare(ICubeQueryDefinition query,Map appContext) throws BirtException {
  if (stopSign != null)   stopSign.start();
  if (this.cubeHandleMap.get(query.getName()) != null) {
    this.materializeCube((CubeHandle)this.cubeHandleMap.get(query.getName()),appContext,stopSign);
    this.cubeHandleMap.remove(query.getName());
  }
  if (this.sessionContext.getDataEngineContext().getMode() == DataEngineContext.DIRECT_PRESENTATION) {
    int size=0;
    if (appContext != null) {
      size=populateFetchLimitSize(appContext.get(DataEngine.CUBECURSOR_FETCH_LIMIT_ON_LEVEL));
      if (size >= 0) {
        query.getFilters().addAll(fetchFilterList(query.getEdge(ICubeQueryDefinition.COLUMN_EDGE),size));
        query.getFilters().addAll(fetchFilterList(query.getEdge(ICubeQueryDefinition.ROW_EDGE),size));
      }
    }
  }
  return this.dataEngine.prepare(query,appContext);
}","public IPreparedCubeQuery prepare(ICubeQueryDefinition query,Map appContext) throws BirtException {
  if (stopSign != null)   stopSign.start();
  if (this.cubeHandleMap.get(query.getName()) != null) {
    this.materializeCube((CubeHandle)this.cubeHandleMap.get(query.getName()),appContext,stopSign);
    this.cubeHandleMap.remove(query.getName());
  }
  ICubeQueryDefinition cubeQueryDefn=new CubeQueryDefinitionAdapter(query);
  if (this.sessionContext.getDataEngineContext().getMode() == DataEngineContext.DIRECT_PRESENTATION) {
    int size=0;
    if (appContext != null) {
      size=populateFetchLimitSize(appContext.get(DataEngine.CUBECURSOR_FETCH_LIMIT_ON_LEVEL));
      if (size > 0) {
        cubeQueryDefn.getFilters().addAll(fetchFilterList(cubeQueryDefn.getEdge(ICubeQueryDefinition.COLUMN_EDGE),size));
        cubeQueryDefn.getFilters().addAll(fetchFilterList(cubeQueryDefn.getEdge(ICubeQueryDefinition.ROW_EDGE),size));
      }
    }
  }
  return this.dataEngine.prepare(cubeQueryDefn,appContext);
}",0.9127025614218504
74562,"public IPreparedCubeQuery prepare(ICubeQueryDefinition query,Map appContext) throws BirtException {
  stopSign.start();
  if (this.cubeHandleMap.get(query.getName()) != null) {
    this.materializeCube((CubeHandle)this.cubeHandleMap.get(query.getName()),appContext,stopSign);
    this.cubeHandleMap.remove(query.getName());
  }
  if (this.sessionContext.getDataEngineContext().getMode() == DataEngineContext.DIRECT_PRESENTATION) {
    int size=0;
    if (appContext != null) {
      size=populateFetchLimitSize(appContext.get(DataEngine.CUBECURSOR_FETCH_LIMIT_ON_LEVEL));
      if (size >= 0) {
        query.getFilters().addAll(fetchFilterList(query.getEdge(ICubeQueryDefinition.COLUMN_EDGE),size));
        query.getFilters().addAll(fetchFilterList(query.getEdge(ICubeQueryDefinition.ROW_EDGE),size));
      }
    }
  }
  return this.dataEngine.prepare(query,appContext);
}","public IPreparedCubeQuery prepare(ICubeQueryDefinition query,Map appContext) throws BirtException {
  if (stopSign != null)   stopSign.start();
  if (this.cubeHandleMap.get(query.getName()) != null) {
    this.materializeCube((CubeHandle)this.cubeHandleMap.get(query.getName()),appContext,stopSign);
    this.cubeHandleMap.remove(query.getName());
  }
  if (this.sessionContext.getDataEngineContext().getMode() == DataEngineContext.DIRECT_PRESENTATION) {
    int size=0;
    if (appContext != null) {
      size=populateFetchLimitSize(appContext.get(DataEngine.CUBECURSOR_FETCH_LIMIT_ON_LEVEL));
      if (size >= 0) {
        query.getFilters().addAll(fetchFilterList(query.getEdge(ICubeQueryDefinition.COLUMN_EDGE),size));
        query.getFilters().addAll(fetchFilterList(query.getEdge(ICubeQueryDefinition.ROW_EDGE),size));
      }
    }
  }
  return this.dataEngine.prepare(query,appContext);
}",0.9864712514092446
74563,"/** 
 * @param cubeHandle
 * @param appContext
 * @param stopSign
 * @throws BirtException
 */
private void materializeCube(CubeHandle cubeHandle,Map appContext,StopSign stopSign) throws BirtException {
  int mode=this.sessionContext.getDataEngineContext().getMode();
  try {
    CubeMaterializer cubeMaterializer=null;
    if (appContext == null)     appContext=sessionContext.getAppContext();
    if (mode == DataEngineContext.DIRECT_PRESENTATION) {
      int size=0;
      if (appContext != null) {
        Integer value=DataTypeUtil.toInteger(appContext.get(DataEngine.IN_MEMORY_CUBE_SIZE));
        if (value != null && value.intValue() > 0) {
          size=value.intValue();
        }
      }
      cubeMaterializer=createCubeMaterializer(cubeHandle,size);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer,appContext,stopSign);
      cubeMaterializer.close();
    }
 else     if (mode == DataEngineContext.MODE_GENERATION) {
      cubeMaterializer=createCubeMaterializer(cubeHandle,0);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer,appContext,stopSign);
      cubeMaterializer.saveCubeToReportDocument(cubeHandle.getQualifiedName(),this.sessionContext.getDocumentWriter(),null);
      cubeMaterializer.close();
    }
  }
 catch (  Exception e) {
    throw new DataException(e.getLocalizedMessage());
  }
}","/** 
 * @param cubeHandle
 * @param appContext
 * @param stopSign
 * @throws BirtException
 */
private void materializeCube(CubeHandle cubeHandle,Map appContext,StopSign stopSign) throws BirtException {
  if (stopSign == null)   stopSign=new StopSign();
  int mode=this.sessionContext.getDataEngineContext().getMode();
  try {
    CubeMaterializer cubeMaterializer=null;
    if (appContext == null)     appContext=sessionContext.getAppContext();
    if (mode == DataEngineContext.DIRECT_PRESENTATION) {
      int size=0;
      if (appContext != null) {
        Integer value=DataTypeUtil.toInteger(appContext.get(DataEngine.IN_MEMORY_CUBE_SIZE));
        if (value != null && value.intValue() > 0) {
          size=value.intValue();
        }
      }
      cubeMaterializer=createCubeMaterializer(cubeHandle,size);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer,appContext,stopSign);
      cubeMaterializer.close();
    }
 else     if (mode == DataEngineContext.MODE_GENERATION) {
      cubeMaterializer=createCubeMaterializer(cubeHandle,0);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer,appContext,stopSign);
      cubeMaterializer.saveCubeToReportDocument(cubeHandle.getQualifiedName(),this.sessionContext.getDocumentWriter(),null);
      cubeMaterializer.close();
    }
  }
 catch (  Exception e) {
    throw new DataException(e.getLocalizedMessage());
  }
}",0.9813936519518424
74564,"/** 
 * Inits default toc style value.
 */
private void initDefaultTOCStyle(){
  defaultTOCStyleList=new ArrayList();
  URL url=new DefaultResourceLocator().findResource(null,TOC_DEFAULT_VALUE,IResourceLocator.OTHERS);
  if (url == null)   return;
  ReportDesign tocDesign=null;
  try {
    DesignSession session=new DesignSession(ULocale.ENGLISH);
    tocDesign=session.openDesign(url,url.openStream());
    tocDesign.setReadOnly();
  }
 catch (  DesignFileException e) {
    return;
  }
catch (  IOException e) {
    return;
  }
  ContainerSlot slot=tocDesign.getSlot(IReportDesignModel.STYLE_SLOT);
  Iterator iterator=slot.iterator();
  while (iterator.hasNext()) {
    DesignElement tmpStyle=(DesignElement)iterator.next();
    StyleHandle styleHandle=(StyleHandle)tmpStyle.getHandle(tocDesign);
    defaultTOCStyleList.add(styleHandle);
  }
}","/** 
 * Inits default toc style value.
 */
private void initDefaultTOCStyle(){
  defaultTOCStyleList=new ArrayList();
  URL url=new DefaultResourceLocator().findResource(null,TOC_DEFAULT_VALUE,IResourceLocator.OTHERS);
  if (url == null)   return;
  ReportDesign tocDesign=null;
  try {
    DesignSession session=new DesignSession(locale);
    tocDesign=session.openDesign(url,url.openStream());
    tocDesign.setReadOnly();
  }
 catch (  DesignFileException e) {
    return;
  }
catch (  IOException e) {
    return;
  }
  ContainerSlot slot=tocDesign.getSlot(IReportDesignModel.STYLE_SLOT);
  Iterator iterator=slot.iterator();
  while (iterator.hasNext()) {
    DesignElement tmpStyle=(DesignElement)iterator.next();
    StyleHandle styleHandle=(StyleHandle)tmpStyle.getHandle(tocDesign);
    defaultTOCStyleList.add(styleHandle);
  }
}",0.9875518672199172
74565,"void createCube(DataEngine engine) throws IOException, BirtException, OLAPException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(documentPath + engine.hashCode(),cubeName);
  DocManagerMap.getDocManagerMap().set(String.valueOf(engine.hashCode()),documentPath + engine.hashCode() + cubeName,documentManager);
  engine.addShutdownListener(new DocManagerReleaser(engine));
  Dimension[] dimensions=new Dimension[6];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L1Col);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  IDiskArray allRow=dimensions[0].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L2Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  allRow=dimensions[1].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  allRow=dimensions[2].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L4Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[3]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[3].getHierarchy();
  allRow=dimensions[3].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM1_L1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[4]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[4].getHierarchy();
  allRow=dimensions[4].getAllRows();
  levelNames=new String[]{""String_Node_Str"",""String_Node_Str""};
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM1_L2Col);
  iterator.setLevelMember(1,TestFactTable1.ATTRIBUTE_Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  dimensions[5]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[5].getHierarchy();
  allRow=dimensions[5].getAllRows();
  TestFactTable1 factTable2=new TestFactTable1();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
}","void createCube(DataEngine engine) throws IOException, BirtException, OLAPException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(documentPath + engine.hashCode(),cubeName);
  DocManagerMap.getDocManagerMap().set(String.valueOf(engine.hashCode()),documentPath + engine.hashCode() + cubeName,documentManager);
  engine.addShutdownListener(new DocManagerReleaser(engine));
  Dimension[] dimensions=new Dimension[6];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L1Col);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  IDiskArray allRow=dimensions[0].getAllRows(new StopSign());
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L2Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  allRow=dimensions[1].getAllRows(new StopSign());
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  allRow=dimensions[2].getAllRows(new StopSign());
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L4Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[3]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[3].getHierarchy();
  allRow=dimensions[3].getAllRows(new StopSign());
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM1_L1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[4]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[4].getHierarchy();
  allRow=dimensions[4].getAllRows(new StopSign());
  levelNames=new String[]{""String_Node_Str"",""String_Node_Str""};
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM1_L2Col);
  iterator.setLevelMember(1,TestFactTable1.ATTRIBUTE_Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  dimensions[5]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[5].getHierarchy();
  allRow=dimensions[5].getAllRows(new StopSign());
  TestFactTable1 factTable2=new TestFactTable1();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
}",0.9892086330935252
74566,"/** 
 * without measure
 * @throws Exception 
 */
public void testCursorWithoutMeasure() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition rowdim1=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition rowhier1=rowdim1.createHierarchy(""String_Node_Str"");
  rowhier1.createLevel(""String_Node_Str"");
  IDimensionDefinition rowdim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition rowhier2=rowdim2.createHierarchy(""String_Node_Str"");
  rowhier2.createLevel(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  IDimensionDefinition dim3=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier3=dim3.createHierarchy(""String_Node_Str"");
  hier3.createLevel(""String_Node_Str"");
  IDimensionDefinition dim4=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier4=dim4.createHierarchy(""String_Node_Str"");
  hier4.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,null,null,null,null,null));
  this.checkOutputFile();
  try {
    dataCursor.getObject(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertTrue(e instanceof OLAPException);
  }
}","/** 
 * without measure
 * @throws Exception 
 */
public void testCursorWithoutMeasure() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition rowdim1=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition rowhier1=rowdim1.createHierarchy(""String_Node_Str"");
  rowhier1.createLevel(""String_Node_Str"");
  IDimensionDefinition rowdim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition rowhier2=rowdim2.createHierarchy(""String_Node_Str"");
  rowhier2.createLevel(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  IDimensionDefinition dim3=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier3=dim3.createHierarchy(""String_Node_Str"");
  hier3.createLevel(""String_Node_Str"");
  IDimensionDefinition dim4=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier4=dim4.createHierarchy(""String_Node_Str"");
  hier4.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign());
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,null,null,null,null,null));
  this.checkOutputFile();
  try {
    dataCursor.getObject(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertTrue(e instanceof OLAPException);
  }
}",0.996947230702137
74567,"/** 
 * without row edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel2() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  IDimensionDefinition dim3=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier3=dim3.createHierarchy(""String_Node_Str"");
  hier3.createLevel(""String_Node_Str"");
  IDimensionDefinition dim4=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier4=dim4.createHierarchy(""String_Node_Str"");
  hier4.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor streetCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor timeCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(3);
  testOut.print(creator.printCubeAlongDimension(dataCursor,countryCursor,cityCursor,streetCursor,timeCursor,null,null));
  try {
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * without row edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel2() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  IDimensionDefinition dim3=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier3=dim3.createHierarchy(""String_Node_Str"");
  hier3.createLevel(""String_Node_Str"");
  IDimensionDefinition dim4=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier4=dim4.createHierarchy(""String_Node_Str"");
  hier4.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign());
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor streetCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor timeCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(3);
  testOut.print(creator.printCubeAlongDimension(dataCursor,countryCursor,cityCursor,streetCursor,timeCursor,null,null));
  try {
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.996317727511836
74568,"/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorOnCountry() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=this.creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List grandBindingNames=new ArrayList();
  grandBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,grandBindingNames));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorOnCountry() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=this.creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign());
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List grandBindingNames=new ArrayList();
  grandBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,grandBindingNames));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9955128205128204
74569,"/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel1() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel1() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign());
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9968581687612208
74570,"/** 
 * test populate data along dimension cursor
 * @throws DataException 
 * @throws OLAPException 
 */
public void testCursorModel4() throws DataException, OLAPException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List dimCursorOnColumn=cubeView.getColumnEdgeView().getEdgeCursor().getDimensionCursor();
  List dimCursorOnRow=cubeView.getRowEdgeView().getEdgeCursor().getDimensionCursor();
  testOut.print(creator.printCubeAlongDimension(dataCursor,(DimensionCursor)dimCursorOnColumn.get(0),(DimensionCursor)dimCursorOnColumn.get(1),(DimensionCursor)dimCursorOnColumn.get(2),(DimensionCursor)dimCursorOnColumn.get(3),(DimensionCursor)dimCursorOnRow.get(0),(DimensionCursor)dimCursorOnRow.get(1)));
  try {
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * test populate data along dimension cursor
 * @throws DataException 
 * @throws OLAPException 
 */
public void testCursorModel4() throws DataException, OLAPException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign());
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List dimCursorOnColumn=cubeView.getColumnEdgeView().getEdgeCursor().getDimensionCursor();
  List dimCursorOnRow=cubeView.getRowEdgeView().getEdgeCursor().getDimensionCursor();
  testOut.print(creator.printCubeAlongDimension(dataCursor,(DimensionCursor)dimCursorOnColumn.get(0),(DimensionCursor)dimCursorOnColumn.get(1),(DimensionCursor)dimCursorOnColumn.get(2),(DimensionCursor)dimCursorOnColumn.get(3),(DimensionCursor)dimCursorOnRow.get(0),(DimensionCursor)dimCursorOnRow.get(1)));
  try {
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9968902709906708
74571,"/** 
 * without column edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel3() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  DimensionCursor productCursor1=(DimensionCursor)rowCursor.getDimensionCursor().get(0);
  DimensionCursor productCursor2=(DimensionCursor)rowCursor.getDimensionCursor().get(1);
  testOut.print(creator.printCubeAlongDimension(dataCursor,null,null,null,null,productCursor1,productCursor2));
  try {
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * without column edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel3() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign());
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  DimensionCursor productCursor1=(DimensionCursor)rowCursor.getDimensionCursor().get(0);
  DimensionCursor productCursor2=(DimensionCursor)rowCursor.getDimensionCursor().get(1);
  testOut.print(creator.printCubeAlongDimension(dataCursor,null,null,null,null,productCursor1,productCursor2));
  try {
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9947289156626506
74572,"/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel6() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition dimHier=dim.createHierarchy(""String_Node_Str"");
  dimHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IDimensionDefinition geographyDim3=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier3=geographyDim3.createHierarchy(""String_Node_Str"");
  geographyHier3.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_COUNTDISTINCT_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel6() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeUtility.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition dimHier=dim.createHierarchy(""String_Node_Str"");
  dimHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IDimensionDefinition geographyDim3=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier3=geographyDim3.createHierarchy(""String_Node_Str"");
  geographyHier3.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_COUNTDISTINCT_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign());
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.997463768115942
74573,"/** 
 * @throws OLAPException
 * @throws BirtException
 */
public void testCursorModel5() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=this.creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding rowGrandAvg=new Binding(""String_Node_Str"");
  rowGrandAvg.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  rowGrandAvg.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(rowGrandAvg);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * @throws OLAPException
 * @throws BirtException
 */
public void testCursorModel5() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=this.creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding rowGrandAvg=new Binding(""String_Node_Str"");
  rowGrandAvg.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  rowGrandAvg.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(rowGrandAvg);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign());
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.996264674493063
74574,"/** 
 * with measure filter
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel8() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.setFilter(new ScriptExpression(""String_Node_Str""));
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.setFilter(new ScriptExpression(""String_Node_Str""));
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * with measure filter
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel8() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.setFilter(new ScriptExpression(""String_Node_Str""));
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.setFilter(new ScriptExpression(""String_Node_Str""));
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign());
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.997071129707113
74575,"/** 
 * with appContext's fetch limit
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel9WithFetchLimit() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  Map appContext=new HashMap();
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()),appContext);
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * with appContext's fetch limit
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel9WithFetchLimit() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  Map appContext=new HashMap();
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()),appContext);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign());
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9971169686985172
74576,"/** 
 * Test aggregation on measure with arguments
 * @throws OLAPException
 * @throws BirtException
 */
public void testCursorModel7() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=this.creator.createQueryDefinition();
  IBinding rowGrandAvg=new Binding(""String_Node_Str"");
  rowGrandAvg.setAggrFunction(IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  rowGrandAvg.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  rowGrandAvg.addArgument(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandAvg);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * Test aggregation on measure with arguments
 * @throws OLAPException
 * @throws BirtException
 */
public void testCursorModel7() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=this.creator.createQueryDefinition();
  IBinding rowGrandAvg=new Binding(""String_Node_Str"");
  rowGrandAvg.setAggrFunction(IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  rowGrandAvg.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  rowGrandAvg.addArgument(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandAvg);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign());
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9956736711990112
74577,"/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel1() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor streetCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor timeCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(3);
  columnCursor.beforeFirst();
  assertTrue(countryCursor.isBeforeFirst());
  assertTrue(cityCursor.isBeforeFirst());
  assertTrue(streetCursor.isBeforeFirst());
  assertTrue(timeCursor.isBeforeFirst());
  columnCursor.afterLast();
  assertTrue(countryCursor.isAfterLast());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(streetCursor.isAfterLast());
  assertTrue(timeCursor.isAfterLast());
  columnCursor.first();
  assertTrue(columnCursor.isFirst());
  assertTrue(countryCursor.isFirst());
  assertTrue(cityCursor.isFirst());
  assertTrue(streetCursor.isFirst());
  assertTrue(timeCursor.isFirst());
  columnCursor.last();
  assertTrue(columnCursor.last());
  assertTrue(countryCursor.last());
  assertTrue(cityCursor.last());
  assertTrue(streetCursor.last());
  assertTrue(timeCursor.last());
  columnCursor.setPosition(5);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.previous();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(24);
  try {
    countryCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.beforeFirst();
  columnCursor.relative(6);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  columnCursor.next();
  columnCursor.next();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.setPosition(4);
  streetCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  countryCursor.next();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.afterLast();
  try {
    streetCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.beforeFirst();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getEdgeStart() == 0);
  assertTrue(countryCursor.getEdgeEnd() == 7);
  assertTrue(cityCursor.getEdgeStart() == 0);
  assertTrue(cityCursor.getEdgeEnd() == 2);
  assertTrue(streetCursor.getEdgeStart() == 0);
  assertTrue(streetCursor.getEdgeEnd() == 1);
  assertTrue(timeCursor.getEdgeStart() == 1);
  assertTrue(timeCursor.getEdgeEnd() == 1);
  columnCursor.setPosition(9);
  assertTrue(countryCursor.getEdgeStart() == 8);
  assertTrue(countryCursor.getEdgeEnd() == 11);
  assertTrue(cityCursor.getEdgeStart() == 8);
  assertTrue(cityCursor.getEdgeEnd() == 10);
  assertTrue(streetCursor.getEdgeStart() == 8);
  assertTrue(streetCursor.getEdgeEnd() == 10);
  assertTrue(timeCursor.getEdgeStart() == 9);
  assertTrue(timeCursor.getEdgeEnd() == 9);
  columnCursor.setPosition(23);
  assertTrue(countryCursor.getEdgeStart() == 15);
  assertTrue(countryCursor.getEdgeEnd() == 23);
  assertTrue(cityCursor.getEdgeStart() == 23);
  assertTrue(cityCursor.getEdgeEnd() == 23);
  assertTrue(streetCursor.getEdgeStart() == 23);
  assertTrue(streetCursor.getEdgeEnd() == 23);
  assertTrue(timeCursor.getEdgeStart() == 23);
  assertTrue(timeCursor.getEdgeEnd() == 23);
  columnCursor.setPosition(12);
  assertTrue(countryCursor.getEdgeStart() == 12);
  assertTrue(countryCursor.getEdgeEnd() == 14);
  assertTrue(cityCursor.getEdgeStart() == 12);
  assertTrue(cityCursor.getEdgeEnd() == 13);
  assertTrue(streetCursor.getEdgeStart() == 12);
  assertTrue(streetCursor.getEdgeEnd() == 12);
  assertTrue(timeCursor.getEdgeStart() == 12);
  assertTrue(timeCursor.getEdgeEnd() == 12);
  columnCursor.beforeFirst();
  columnCursor.setPosition(24);
  assertTrue(countryCursor.getEdgeStart() == -1);
  assertTrue(countryCursor.getEdgeEnd() == -1);
  close(dataCursor);
}","/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel1() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign());
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor streetCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor timeCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(3);
  columnCursor.beforeFirst();
  assertTrue(countryCursor.isBeforeFirst());
  assertTrue(cityCursor.isBeforeFirst());
  assertTrue(streetCursor.isBeforeFirst());
  assertTrue(timeCursor.isBeforeFirst());
  columnCursor.afterLast();
  assertTrue(countryCursor.isAfterLast());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(streetCursor.isAfterLast());
  assertTrue(timeCursor.isAfterLast());
  columnCursor.first();
  assertTrue(columnCursor.isFirst());
  assertTrue(countryCursor.isFirst());
  assertTrue(cityCursor.isFirst());
  assertTrue(streetCursor.isFirst());
  assertTrue(timeCursor.isFirst());
  columnCursor.last();
  assertTrue(columnCursor.last());
  assertTrue(countryCursor.last());
  assertTrue(cityCursor.last());
  assertTrue(streetCursor.last());
  assertTrue(timeCursor.last());
  columnCursor.setPosition(5);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.previous();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(24);
  try {
    countryCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.beforeFirst();
  columnCursor.relative(6);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  columnCursor.next();
  columnCursor.next();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.setPosition(4);
  streetCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  countryCursor.next();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(timeCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.afterLast();
  try {
    streetCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.beforeFirst();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getEdgeStart() == 0);
  assertTrue(countryCursor.getEdgeEnd() == 7);
  assertTrue(cityCursor.getEdgeStart() == 0);
  assertTrue(cityCursor.getEdgeEnd() == 2);
  assertTrue(streetCursor.getEdgeStart() == 0);
  assertTrue(streetCursor.getEdgeEnd() == 1);
  assertTrue(timeCursor.getEdgeStart() == 1);
  assertTrue(timeCursor.getEdgeEnd() == 1);
  columnCursor.setPosition(9);
  assertTrue(countryCursor.getEdgeStart() == 8);
  assertTrue(countryCursor.getEdgeEnd() == 11);
  assertTrue(cityCursor.getEdgeStart() == 8);
  assertTrue(cityCursor.getEdgeEnd() == 10);
  assertTrue(streetCursor.getEdgeStart() == 8);
  assertTrue(streetCursor.getEdgeEnd() == 10);
  assertTrue(timeCursor.getEdgeStart() == 9);
  assertTrue(timeCursor.getEdgeEnd() == 9);
  columnCursor.setPosition(23);
  assertTrue(countryCursor.getEdgeStart() == 15);
  assertTrue(countryCursor.getEdgeEnd() == 23);
  assertTrue(cityCursor.getEdgeStart() == 23);
  assertTrue(cityCursor.getEdgeEnd() == 23);
  assertTrue(streetCursor.getEdgeStart() == 23);
  assertTrue(streetCursor.getEdgeEnd() == 23);
  assertTrue(timeCursor.getEdgeStart() == 23);
  assertTrue(timeCursor.getEdgeEnd() == 23);
  columnCursor.setPosition(12);
  assertTrue(countryCursor.getEdgeStart() == 12);
  assertTrue(countryCursor.getEdgeEnd() == 14);
  assertTrue(cityCursor.getEdgeStart() == 12);
  assertTrue(cityCursor.getEdgeEnd() == 13);
  assertTrue(streetCursor.getEdgeStart() == 12);
  assertTrue(streetCursor.getEdgeEnd() == 12);
  assertTrue(timeCursor.getEdgeStart() == 12);
  assertTrue(timeCursor.getEdgeEnd() == 12);
  columnCursor.beforeFirst();
  columnCursor.setPosition(24);
  assertTrue(countryCursor.getEdgeStart() == -1);
  assertTrue(countryCursor.getEdgeEnd() == -1);
  close(dataCursor);
}",0.9989967034542068
74578,"/** 
 * without column edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorOnCountry() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createMirroredQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List grandBindingNames=new ArrayList();
  grandBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,grandBindingNames));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * without column edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorOnCountry() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createMirroredQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign());
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List grandBindingNames=new ArrayList();
  grandBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,grandBindingNames));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9955863808322823
74579,"/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel1() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createMirroredQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel1() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createMirroredQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign());
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9969710082215492
74580,"public void testNavigator() throws DataException, OLAPException {
  ICubeQueryDefinition cqd=creator.createMirroredQueryDefinition();
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor streetCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor yearCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(3);
  DimensionCursor productLineCursor=(DimensionCursor)rowCursor.getDimensionCursor().get(0);
  DimensionCursor productNameCursor=(DimensionCursor)rowCursor.getDimensionCursor().get(1);
  columnCursor.beforeFirst();
  assertTrue(columnCursor.isBeforeFirst());
  assertTrue(countryCursor.isBeforeFirst());
  assertTrue(cityCursor.isBeforeFirst());
  assertTrue(streetCursor.isBeforeFirst());
  assertTrue(yearCursor.isBeforeFirst());
  columnCursor.afterLast();
  assertTrue(columnCursor.isAfterLast());
  assertTrue(countryCursor.isAfterLast());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(streetCursor.isAfterLast());
  assertTrue(yearCursor.isAfterLast());
  columnCursor.first();
  countryCursor.afterLast();
  cityCursor.afterLast();
  streetCursor.afterLast();
  yearCursor.afterLast();
  assertTrue(countryCursor.isAfterLast());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(streetCursor.isAfterLast());
  assertTrue(yearCursor.isAfterLast());
  columnCursor.first();
  columnCursor.next();
  cityCursor.afterLast();
  streetCursor.afterLast();
  yearCursor.afterLast();
  assertTrue(countryCursor.isFirst());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(streetCursor.isAfterLast());
  assertTrue(yearCursor.isAfterLast());
  columnCursor.first();
  assertTrue(columnCursor.isFirst());
  assertTrue(countryCursor.isFirst());
  assertTrue(cityCursor.isFirst());
  assertTrue(streetCursor.isFirst());
  assertTrue(yearCursor.isFirst());
  columnCursor.last();
  assertTrue(columnCursor.last());
  assertTrue(countryCursor.last());
  assertTrue(cityCursor.last());
  assertTrue(streetCursor.last());
  assertTrue(yearCursor.last());
  columnCursor.setPosition(5);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(85);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(220);
  try {
    countryCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.setPosition(225);
  columnCursor.previous();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(86);
  columnCursor.previous();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.relative(6);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  columnCursor.next();
  columnCursor.next();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.setPosition(80);
  streetCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.setPosition(80);
  columnCursor.next();
  countryCursor.next();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.afterLast();
  try {
    streetCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.beforeFirst();
  columnCursor.next();
  assertTrue(countryCursor.getEdgeStart() == 0);
  assertTrue(countryCursor.getEdgeEnd() == 79);
  assertTrue(cityCursor.getEdgeStart() == 0);
  assertTrue(cityCursor.getEdgeEnd() == 19);
  assertTrue(streetCursor.getEdgeStart() == 0);
  assertTrue(streetCursor.getEdgeEnd() == 4);
  assertTrue(yearCursor.getEdgeStart() == 0);
  assertTrue(yearCursor.getEdgeEnd() == 0);
  columnCursor.beforeFirst();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getEdgeStart() == 0);
  assertTrue(countryCursor.getEdgeEnd() == 79);
  assertTrue(cityCursor.getEdgeStart() == 0);
  assertTrue(cityCursor.getEdgeEnd() == 19);
  assertTrue(streetCursor.getEdgeStart() == 0);
  assertTrue(streetCursor.getEdgeEnd() == 4);
  assertTrue(yearCursor.getEdgeStart() == 1);
  assertTrue(yearCursor.getEdgeEnd() == 1);
  columnCursor.setPosition(81);
  assertTrue(countryCursor.getEdgeStart() == 80);
  assertTrue(countryCursor.getEdgeEnd() == 119);
  assertTrue(cityCursor.getEdgeStart() == 80);
  assertTrue(cityCursor.getEdgeEnd() == 99);
  assertTrue(streetCursor.getEdgeStart() == 80);
  assertTrue(streetCursor.getEdgeEnd() == 84);
  assertTrue(yearCursor.getEdgeStart() == 81);
  assertTrue(yearCursor.getEdgeEnd() == 81);
  columnCursor.setPosition(146);
  assertTrue(countryCursor.getEdgeStart() == 120);
  assertTrue(countryCursor.getEdgeEnd() == 159);
  assertTrue(cityCursor.getEdgeStart() == 140);
  assertTrue(cityCursor.getEdgeEnd() == 159);
  assertTrue(streetCursor.getEdgeStart() == 145);
  assertTrue(streetCursor.getEdgeEnd() == 149);
  assertTrue(yearCursor.getEdgeStart() == 146);
  assertTrue(yearCursor.getEdgeEnd() == 146);
  columnCursor.beforeFirst();
  columnCursor.setPosition(220);
  assertTrue(countryCursor.getEdgeStart() == -1);
  assertTrue(countryCursor.getEdgeEnd() == -1);
  assertTrue(cityCursor.getEdgeStart() == -1);
  assertTrue(cityCursor.getEdgeEnd() == -1);
  assertTrue(streetCursor.getEdgeStart() == -1);
  assertTrue(streetCursor.getEdgeEnd() == -1);
  assertTrue(yearCursor.getEdgeStart() == -1);
  assertTrue(yearCursor.getEdgeEnd() == -1);
  this.close(dataCursor);
}","public void testNavigator() throws DataException, OLAPException {
  ICubeQueryDefinition cqd=creator.createMirroredQueryDefinition();
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign());
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor streetCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor yearCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(3);
  DimensionCursor productLineCursor=(DimensionCursor)rowCursor.getDimensionCursor().get(0);
  DimensionCursor productNameCursor=(DimensionCursor)rowCursor.getDimensionCursor().get(1);
  columnCursor.beforeFirst();
  assertTrue(columnCursor.isBeforeFirst());
  assertTrue(countryCursor.isBeforeFirst());
  assertTrue(cityCursor.isBeforeFirst());
  assertTrue(streetCursor.isBeforeFirst());
  assertTrue(yearCursor.isBeforeFirst());
  columnCursor.afterLast();
  assertTrue(columnCursor.isAfterLast());
  assertTrue(countryCursor.isAfterLast());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(streetCursor.isAfterLast());
  assertTrue(yearCursor.isAfterLast());
  columnCursor.first();
  countryCursor.afterLast();
  cityCursor.afterLast();
  streetCursor.afterLast();
  yearCursor.afterLast();
  assertTrue(countryCursor.isAfterLast());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(streetCursor.isAfterLast());
  assertTrue(yearCursor.isAfterLast());
  columnCursor.first();
  columnCursor.next();
  cityCursor.afterLast();
  streetCursor.afterLast();
  yearCursor.afterLast();
  assertTrue(countryCursor.isFirst());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(streetCursor.isAfterLast());
  assertTrue(yearCursor.isAfterLast());
  columnCursor.first();
  assertTrue(columnCursor.isFirst());
  assertTrue(countryCursor.isFirst());
  assertTrue(cityCursor.isFirst());
  assertTrue(streetCursor.isFirst());
  assertTrue(yearCursor.isFirst());
  columnCursor.last();
  assertTrue(columnCursor.last());
  assertTrue(countryCursor.last());
  assertTrue(cityCursor.last());
  assertTrue(streetCursor.last());
  assertTrue(yearCursor.last());
  columnCursor.setPosition(5);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(85);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(220);
  try {
    countryCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.setPosition(225);
  columnCursor.previous();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(86);
  columnCursor.previous();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.relative(6);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  columnCursor.next();
  columnCursor.next();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.setPosition(80);
  streetCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.setPosition(80);
  columnCursor.next();
  countryCursor.next();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(streetCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(yearCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.afterLast();
  try {
    streetCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.beforeFirst();
  columnCursor.next();
  assertTrue(countryCursor.getEdgeStart() == 0);
  assertTrue(countryCursor.getEdgeEnd() == 79);
  assertTrue(cityCursor.getEdgeStart() == 0);
  assertTrue(cityCursor.getEdgeEnd() == 19);
  assertTrue(streetCursor.getEdgeStart() == 0);
  assertTrue(streetCursor.getEdgeEnd() == 4);
  assertTrue(yearCursor.getEdgeStart() == 0);
  assertTrue(yearCursor.getEdgeEnd() == 0);
  columnCursor.beforeFirst();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getEdgeStart() == 0);
  assertTrue(countryCursor.getEdgeEnd() == 79);
  assertTrue(cityCursor.getEdgeStart() == 0);
  assertTrue(cityCursor.getEdgeEnd() == 19);
  assertTrue(streetCursor.getEdgeStart() == 0);
  assertTrue(streetCursor.getEdgeEnd() == 4);
  assertTrue(yearCursor.getEdgeStart() == 1);
  assertTrue(yearCursor.getEdgeEnd() == 1);
  columnCursor.setPosition(81);
  assertTrue(countryCursor.getEdgeStart() == 80);
  assertTrue(countryCursor.getEdgeEnd() == 119);
  assertTrue(cityCursor.getEdgeStart() == 80);
  assertTrue(cityCursor.getEdgeEnd() == 99);
  assertTrue(streetCursor.getEdgeStart() == 80);
  assertTrue(streetCursor.getEdgeEnd() == 84);
  assertTrue(yearCursor.getEdgeStart() == 81);
  assertTrue(yearCursor.getEdgeEnd() == 81);
  columnCursor.setPosition(146);
  assertTrue(countryCursor.getEdgeStart() == 120);
  assertTrue(countryCursor.getEdgeEnd() == 159);
  assertTrue(cityCursor.getEdgeStart() == 140);
  assertTrue(cityCursor.getEdgeEnd() == 159);
  assertTrue(streetCursor.getEdgeStart() == 145);
  assertTrue(streetCursor.getEdgeEnd() == 149);
  assertTrue(yearCursor.getEdgeStart() == 146);
  assertTrue(yearCursor.getEdgeEnd() == 146);
  columnCursor.beforeFirst();
  columnCursor.setPosition(220);
  assertTrue(countryCursor.getEdgeStart() == -1);
  assertTrue(countryCursor.getEdgeEnd() == -1);
  assertTrue(cityCursor.getEdgeStart() == -1);
  assertTrue(cityCursor.getEdgeEnd() == -1);
  assertTrue(streetCursor.getEdgeStart() == -1);
  assertTrue(streetCursor.getEdgeEnd() == -1);
  assertTrue(yearCursor.getEdgeStart() == -1);
  assertTrue(yearCursor.getEdgeEnd() == -1);
  this.close(dataCursor);
}",0.9991380371875384
74581,"/** 
 * @throws IOException
 * @throws BirtException
 */
public void testDimensionGetAll() throws IOException, BirtException {
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager();
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new FourLevelDataset(),levelDefs,false);
  assertEquals(dimension.isTime(),false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  IDiskArray result=realDimension.getAllRows();
  for (int i=0; i < result.size(); i++) {
    DimensionRow dimRow=(DimensionRow)(result.get(i));
    assertEquals(dimRow.getMembers()[0].getKeyValues()[0],FourLevelDataset.Level1Col[i]);
    assertEquals(dimRow.getMembers()[1].getKeyValues()[0],FourLevelDataset.Level2Col[i]);
    assertEquals(dimRow.getMembers()[2].getKeyValues()[0],FourLevelDataset.Level3Col[i]);
    assertEquals(dimRow.getMembers()[3].getKeyValues()[0],FourLevelDataset.Level4Col[i]);
  }
}","/** 
 * @throws IOException
 * @throws BirtException
 */
public void testDimensionGetAll() throws IOException, BirtException {
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager();
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new FourLevelDataset(),levelDefs,false);
  assertEquals(dimension.isTime(),false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  IDiskArray result=realDimension.getAllRows(new StopSign());
  for (int i=0; i < result.size(); i++) {
    DimensionRow dimRow=(DimensionRow)(result.get(i));
    assertEquals(dimRow.getMembers()[0].getKeyValues()[0],FourLevelDataset.Level1Col[i]);
    assertEquals(dimRow.getMembers()[1].getKeyValues()[0],FourLevelDataset.Level2Col[i]);
    assertEquals(dimRow.getMembers()[2].getKeyValues()[0],FourLevelDataset.Level3Col[i]);
    assertEquals(dimRow.getMembers()[3].getKeyValues()[0],FourLevelDataset.Level4Col[i]);
  }
}",0.9952316076294278
74582,"private void testDimensionCreateAndFind7(IDocumentManager documentManager) throws IOException, BirtException {
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new FourLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  IDiskArray indexArray=new BufferedPrimitiveDiskArray();
  indexArray.add(new Integer(2));
  indexArray.add(new Integer(5));
  indexArray.add(new Integer(8));
  indexArray.add(new Integer(9));
  indexArray.add(new Integer(10));
  indexArray.add(new Integer(11));
  indexArray.add(new Integer(14));
  IDiskArray result=realDimension.getDimensionRowByPositions(indexArray);
  assertEquals(((DimensionRow)(result.get(0))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(1))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(2))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(3))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(4))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(5))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(6))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
}","private void testDimensionCreateAndFind7(IDocumentManager documentManager) throws IOException, BirtException {
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new FourLevelDataset(),levelDefs,false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  IDiskArray indexArray=new BufferedPrimitiveDiskArray();
  indexArray.add(new Integer(2));
  indexArray.add(new Integer(5));
  indexArray.add(new Integer(8));
  indexArray.add(new Integer(9));
  indexArray.add(new Integer(10));
  indexArray.add(new Integer(11));
  indexArray.add(new Integer(14));
  IDiskArray result=realDimension.getDimensionRowByPositions(indexArray,new StopSign());
  assertEquals(((DimensionRow)(result.get(0))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(1))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(2))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(3))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(4))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(5))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(6))).getMembers()[3].getKeyValues()[0],""String_Node_Str"");
}",0.9960411718131432
74583,"private void testDimensionCreateAndFind8(IDocumentManager documentManager) throws IOException, BirtException {
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new FourLevelDataset(),levelDefs,false);
  assertEquals(dimension.isTime(),false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  IDiskArray indexArray=new BufferedPrimitiveDiskArray();
  indexArray.add(new Integer(2));
  indexArray.add(new Integer(5));
  indexArray.add(new Integer(8));
  indexArray.add(new Integer(9));
  indexArray.add(new Integer(10));
  indexArray.add(new Integer(11));
  indexArray.add(new Integer(14));
  IDiskArray result=realDimension.getDimensionRowByPositions(indexArray);
  assertEquals(((DimensionRow)(result.get(0))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(1))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(2))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(3))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(4))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(5))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(6))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
}","private void testDimensionCreateAndFind8(IDocumentManager documentManager) throws IOException, BirtException {
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IDimension dimension=DimensionFactory.createDimension(""String_Node_Str"",documentManager,new FourLevelDataset(),levelDefs,false);
  assertEquals(dimension.isTime(),false);
  IHierarchy hierarchy=dimension.getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  Dimension realDimension=(Dimension)dimension;
  IDiskArray indexArray=new BufferedPrimitiveDiskArray();
  indexArray.add(new Integer(2));
  indexArray.add(new Integer(5));
  indexArray.add(new Integer(8));
  indexArray.add(new Integer(9));
  indexArray.add(new Integer(10));
  indexArray.add(new Integer(11));
  indexArray.add(new Integer(14));
  IDiskArray result=realDimension.getDimensionRowByPositions(indexArray,new StopSign());
  assertEquals(((DimensionRow)(result.get(0))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(1))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(2))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(3))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(4))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(5))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
  assertEquals(((DimensionRow)(result.get(6))).getMembers()[2].getKeyValues()[0],""String_Node_Str"");
}",0.9961270333075136
74584,"private void testDimensionIterator(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension dimension=createDimension(documentManager);
  ILevel[] level=dimension.getHierarchy().getLevels();
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(2)},true,false);
  Level[] findLevel=new Level[1];
  findLevel[0]=(Level)level[1];
  IDiskArray positionArray=dimension.find(findLevel,filter);
  assertEquals(positionArray.size(),4);
  DimensionResultIterator dimesionResultSet=new DimensionResultIterator(dimension,positionArray);
  dimLevel11=new DimLevel(dimension.getName(),""String_Node_Str"");
  dimLevel12=new DimLevel(dimension.getName(),""String_Node_Str"");
  assertEquals(dimesionResultSet.getLevelIndex(dimLevel12.getLevelName()),1);
  assertEquals(dimesionResultSet.getLevelIndex(dimLevel11.getLevelName()),0);
  assertEquals(dimesionResultSet.getLevelKeyDataType(dimLevel12.getLevelName())[0],DataType.INTEGER_TYPE);
  assertEquals(dimesionResultSet.getLevelKeyDataType(dimLevel11.getLevelName())[0],DataType.INTEGER_TYPE);
  assertEquals(dimesionResultSet.length(),4);
  dimesionResultSet.seek(0);
  assertEquals(dimesionResultSet.getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(2)[0],new Integer(1));
  dimesionResultSet.seek(1);
  assertEquals(dimesionResultSet.getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(2)[0],new Integer(2));
  dimesionResultSet.seek(2);
  assertEquals(dimesionResultSet.getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(dimesionResultSet.getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(2)[0],new Integer(5));
  dimesionResultSet.seek(3);
  assertEquals(dimesionResultSet.getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(dimesionResultSet.getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(2)[0],new Integer(6));
}","private void testDimensionIterator(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension dimension=createDimension(documentManager);
  ILevel[] level=dimension.getHierarchy().getLevels();
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(2)},true,false);
  Level[] findLevel=new Level[1];
  findLevel[0]=(Level)level[1];
  IDiskArray positionArray=dimension.find(findLevel,filter);
  assertEquals(positionArray.size(),4);
  DimensionResultIterator dimesionResultSet=new DimensionResultIterator(dimension,positionArray,new StopSign());
  dimLevel11=new DimLevel(dimension.getName(),""String_Node_Str"");
  dimLevel12=new DimLevel(dimension.getName(),""String_Node_Str"");
  assertEquals(dimesionResultSet.getLevelIndex(dimLevel12.getLevelName()),1);
  assertEquals(dimesionResultSet.getLevelIndex(dimLevel11.getLevelName()),0);
  assertEquals(dimesionResultSet.getLevelKeyDataType(dimLevel12.getLevelName())[0],DataType.INTEGER_TYPE);
  assertEquals(dimesionResultSet.getLevelKeyDataType(dimLevel11.getLevelName())[0],DataType.INTEGER_TYPE);
  assertEquals(dimesionResultSet.length(),4);
  dimesionResultSet.seek(0);
  assertEquals(dimesionResultSet.getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(2)[0],new Integer(1));
  dimesionResultSet.seek(1);
  assertEquals(dimesionResultSet.getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(2)[0],new Integer(2));
  dimesionResultSet.seek(2);
  assertEquals(dimesionResultSet.getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(dimesionResultSet.getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(2)[0],new Integer(5));
  dimesionResultSet.seek(3);
  assertEquals(dimesionResultSet.getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(dimesionResultSet.getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(dimesionResultSet.getLevelKeyValue(2)[0],new Integer(6));
}",0.9966132309776472
74585,"/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  boolean isDesigner=false;
  if (""String_Node_Str"".equalsIgnoreCase(System.getProperty(IBirtConstants.SYS_PROP_BIRT_ISDESIGNER)))   isDesigner=true;
  String workingPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_WORKING_PATH + ""String_Node_Str"";
  workingFolder=processWorkingFolder(context,context.getInitParameter(INIT_PARAM_WORKING_DIR));
  String initDocumentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (isDesigner && initDocumentFolder == null)   initDocumentFolder=workingPath + IBirtConstants.DEFAULT_DOCUMENT_FOLDER;
  documentFolder=processRealPath(context,initDocumentFolder,IBirtConstants.DEFAULT_DOCUMENT_FOLDER,true);
  String initImageFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (isDesigner && initImageFolder == null)   initImageFolder=workingPath + IBirtConstants.DEFAULT_IMAGE_FOLDER;
  imageFolder=processRealPath(context,initImageFolder,IBirtConstants.DEFAULT_IMAGE_FOLDER,true);
  String initLogFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (isDesigner && initLogFolder == null)   initLogFolder=workingPath + IBirtConstants.DEFAULT_LOGS_FOLDER;
  logFolder=processRealPath(context,initLogFolder,IBirtConstants.DEFAULT_LOGS_FOLDER,true);
  logLevel=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  if (logLevel == null)   logLevel=IBirtConstants.DEFAULT_LOGS_LEVEL;
  String initScriptlibFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (isDesigner && initScriptlibFolder == null)   initScriptlibFolder=workingPath + IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER;
  scriptLibDir=processRealPath(context,initScriptlibFolder,IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER,false);
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  String s_maxLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBELEVELS);
  try {
    maxCubeLevels=Integer.valueOf(s_maxLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeLevels=-1;
  }
  String s_cubeMemSize=context.getInitParameter(INIT_PARAM_VIEWER_CUBEMEMSIZE);
  try {
    cubeMemorySize=Integer.valueOf(s_cubeMemSize).intValue();
  }
 catch (  NumberFormatException e) {
    cubeMemorySize=0;
  }
  birtResourceFolder=processRealPath(context,context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH),null,false);
  String s_overwrite=DataUtil.trimString(context.getInitParameter(INIT_PARAM_OVERWRITE_DOCUMENT));
  if (""String_Node_Str"".equalsIgnoreCase(s_overwrite)) {
    isOverWrite=true;
  }
 else {
    isOverWrite=false;
  }
  initProps=initViewerProps(context,initProps);
  if (loggers == null) {
    loggers=new HashMap();
  }
  for (Iterator i=initProps.keySet().iterator(); i.hasNext(); ) {
    String name=(String)i.next();
    if (name.startsWith(""String_Node_Str"")) {
      String loggerName=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      String levelName=(String)initProps.get(name);
      loggers.put(loggerName,levelName);
      i.remove();
    }
  }
  String flag=DataUtil.trimString(context.getInitParameter(INIT_PARAM_PRINT_SERVERSIDE));
  if (IBirtConstants.VAR_ON.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=true;
  }
 else   if (IBirtConstants.VAR_OFF.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=false;
  }
  String s_agentstyle=context.getInitParameter(INIT_PARAM_AGENTSTYLE_ENGINE);
  if (""String_Node_Str"".equalsIgnoreCase(s_agentstyle)) {
    isAgentStyle=true;
  }
 else {
    isAgentStyle=false;
  }
  clearTempFiles();
  isInitContext=true;
}","/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  boolean isDesigner=false;
  if (""String_Node_Str"".equalsIgnoreCase(System.getProperty(IBirtConstants.SYS_PROP_BIRT_ISDESIGNER)))   isDesigner=true;
  String workingPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_WORKING_PATH + ""String_Node_Str"";
  workingFolder=processWorkingFolder(context,context.getInitParameter(INIT_PARAM_WORKING_DIR));
  String initDocumentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (isDesigner && initDocumentFolder == null)   initDocumentFolder=workingPath + IBirtConstants.DEFAULT_DOCUMENT_FOLDER;
  documentFolder=processRealPath(context,initDocumentFolder,IBirtConstants.DEFAULT_DOCUMENT_FOLDER,true);
  String initImageFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (isDesigner && initImageFolder == null)   initImageFolder=workingPath + IBirtConstants.DEFAULT_IMAGE_FOLDER;
  imageFolder=processRealPath(context,initImageFolder,IBirtConstants.DEFAULT_IMAGE_FOLDER,true);
  String initLogFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (isDesigner && initLogFolder == null)   initLogFolder=workingPath + IBirtConstants.DEFAULT_LOGS_FOLDER;
  logFolder=processRealPath(context,initLogFolder,IBirtConstants.DEFAULT_LOGS_FOLDER,true);
  logLevel=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  if (logLevel == null)   logLevel=IBirtConstants.DEFAULT_LOGS_LEVEL;
  String initScriptlibFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (isDesigner && initScriptlibFolder == null)   initScriptlibFolder=workingPath + IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER;
  scriptLibDir=processRealPath(context,initScriptlibFolder,IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER,false);
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  String s_maxLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBELEVELS);
  try {
    maxCubeLevels=Integer.valueOf(s_maxLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeLevels=-1;
  }
  String s_cubeMemSize=context.getInitParameter(INIT_PARAM_VIEWER_CUBEMEMSIZE);
  try {
    cubeMemorySize=Integer.valueOf(s_cubeMemSize).intValue();
  }
 catch (  NumberFormatException e) {
    cubeMemorySize=0;
  }
  birtResourceFolder=processRealPath(context,context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH),null,false);
  String s_overwrite=DataUtil.trimString(context.getInitParameter(INIT_PARAM_OVERWRITE_DOCUMENT));
  if (""String_Node_Str"".equalsIgnoreCase(s_overwrite)) {
    isOverWrite=true;
  }
 else {
    isOverWrite=false;
  }
  initProps=initViewerProps(context,initProps);
  if (loggers == null) {
    loggers=new HashMap();
  }
  for (Iterator i=initProps.keySet().iterator(); i.hasNext(); ) {
    String name=(String)i.next();
    if (name.startsWith(""String_Node_Str"")) {
      String loggerName=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      String levelName=(String)initProps.get(name);
      loggers.put(loggerName,levelName);
      i.remove();
    }
  }
  String flag=DataUtil.trimString(context.getInitParameter(INIT_PARAM_PRINT_SERVERSIDE));
  if (IBirtConstants.VAR_ON.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=true;
  }
 else   if (IBirtConstants.VAR_OFF.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=false;
  }
  String s_agentstyle=context.getInitParameter(INIT_PARAM_AGENTSTYLE_ENGINE);
  if (""String_Node_Str"".equalsIgnoreCase(s_agentstyle))   isAgentStyle=true;
  if (s_agentstyle == null && isDesigner)   isAgentStyle=true;
  clearTempFiles();
  isInitContext=true;
}",0.9776181926989826
74586,"public String onURLImage(IImage image,Object context){
  assert(image != null);
  return image.getID();
}","/** 
 * (non-Javadoc)
 * @deprecated
 * @see org.eclipse.birt.report.engine.api2.IHTMLImageHandler#onURLImage(org.eclipse.birt.report.engine.api2.IImage,java.lang.Object)
 */
public String onURLImage(IImage image,Object context){
  assert(image != null);
  return image.getID();
}",0.4727272727272727
74587,"public String onDocImage(IImage image,Object context){
  return null;
}","/** 
 * (non-Javadoc)
 * @deprecated
 * @see org.eclipse.birt.report.engine.api2.IHTMLImageHandler#onDocImage(org.eclipse.birt.report.engine.api2.IImage,java.lang.Object)
 */
public String onDocImage(IImage image,Object context){
  return null;
}",0.4479495268138801
74588,"public String onCustomImage(IImage image,Object context){
  return handleImage(image,context,""String_Node_Str"",false);
}","/** 
 * (non-Javadoc)
 * @deprecated
 * @see org.eclipse.birt.report.engine.api2.IHTMLImageHandler#onCustomImage(org.eclipse.birt.report.engine.api2.IImage,java.lang.Object)
 */
public String onCustomImage(IImage image,Object context){
  return handleImage(image,context,""String_Node_Str"",false);
}",0.5741626794258373
74589,"public String onDesignImage(IImage image,Object context){
  return handleImage(image,context,""String_Node_Str"",true);
}","/** 
 * (non-Javadoc)
 * @deprecated
 * @see org.eclipse.birt.report.engine.api2.IHTMLImageHandler#onDesignImage(org.eclipse.birt.report.engine.api2.IImage,java.lang.Object)
 */
public String onDesignImage(IImage image,Object context){
  return handleImage(image,context,""String_Node_Str"",true);
}",0.5721153846153846
74590,"public String onFileImage(IImage image,Object context){
  return handleImage(image,context,""String_Node_Str"",true);
}","/** 
 * (non-Javadoc)
 * @deprecated
 * @see org.eclipse.birt.report.engine.api2.IHTMLImageHandler#onFileImage(org.eclipse.birt.report.engine.api2.IImage,java.lang.Object)
 */
public String onFileImage(IImage image,Object context){
  return handleImage(image,context,""String_Node_Str"",true);
}",0.5707317073170731
74591,"public String onURLImage(IImage image,Object context){
  assert(image != null);
  String uri=image.getID();
  if (uri.startsWith(""String_Node_Str"") || uri.startsWith(""String_Node_Str"")) {
    return uri;
  }
  return handleImage(image,context,""String_Node_Str"",true);
}","/** 
 * (non-Javadoc)
 * @deprecated
 * @see org.eclipse.birt.report.engine.api2.IHTMLImageHandler#onURLImage(org.eclipse.birt.report.engine.api2.IImage,java.lang.Object)
 */
public String onURLImage(IImage image,Object context){
  assert(image != null);
  String uri=image.getID();
  if (uri.startsWith(""String_Node_Str"") || uri.startsWith(""String_Node_Str"")) {
    return uri;
  }
  return handleImage(image,context,""String_Node_Str"",true);
}",0.7545582047685835
74592,"public String onDocImage(IImage image,Object context){
  return null;
}","/** 
 * (non-Javadoc)
 * @deprecated
 * @see org.eclipse.birt.report.engine.api2.IHTMLImageHandler#onDocImage(org.eclipse.birt.report.engine.api2.IImage,java.lang.Object)
 */
public String onDocImage(IImage image,Object context){
  return null;
}",0.4479495268138801
74593,"public String onCustomImage(IImage image,Object context){
  return handleImage(image,context,""String_Node_Str"",false);
}","/** 
 * (non-Javadoc)
 * @deprecated
 * @see org.eclipse.birt.report.engine.api2.IHTMLImageHandler#onCustomImage(org.eclipse.birt.report.engine.api2.IImage,java.lang.Object)
 */
public String onCustomImage(IImage image,Object context){
  return handleImage(image,context,""String_Node_Str"",false);
}",0.5741626794258373
74594,"public String onDesignImage(IImage image,Object context){
  return handleImage(image,context,""String_Node_Str"",true);
}","/** 
 * (non-Javadoc)
 * @deprecated
 * @see org.eclipse.birt.report.engine.api2.IHTMLImageHandler#onDesignImage(org.eclipse.birt.report.engine.api2.IImage,java.lang.Object)
 */
public String onDesignImage(IImage image,Object context){
  return handleImage(image,context,""String_Node_Str"",true);
}",0.5721153846153846
74595,"public String onFileImage(IImage image,Object context){
  return handleImage(image,context,""String_Node_Str"",true);
}","/** 
 * (non-Javadoc)
 * @deprecated
 * @see org.eclipse.birt.report.engine.api2.IHTMLImageHandler#onFileImage(org.eclipse.birt.report.engine.api2.IImage,java.lang.Object)
 */
public String onFileImage(IImage image,Object context){
  return handleImage(image,context,""String_Node_Str"",true);
}",0.5707317073170731
74596,"public Dimension getPreferredSize(int wHint,int hHint){
  Dimension dim=super.getPreferredSize(wHint,hHint);
  int rx=recommendSize != null ? recommendSize.width : 0;
  int ry=recommendSize != null ? recommendSize.height : 0;
  if (DesignChoiceConstants.DISPLAY_BLOCK.equals(display)) {
    return new Dimension(dim.width,Math.max(dim.height,ry));
  }
  if (DesignChoiceConstants.DISPLAY_INLINE.equals(display)) {
    return new Dimension(Math.max(dim.width,rx),Math.max(dim.height,ry));
  }
  return dim;
}","public Dimension getPreferredSize(int wHint,int hHint){
  int rx=recommendSize != null ? recommendSize.width : 0;
  int ry=recommendSize != null ? recommendSize.height : 0;
  Dimension dim=super.getPreferredSize(rx == 0 ? wHint : rx,hHint);
  return new Dimension(Math.max(dim.width,rx),Math.max(dim.height,ry));
}",0.5334957369062119
74597,"/** 
 * @param source
 * @return byte array
 * @throws BirtException
 */
public static byte[] toBytes(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof byte[])   return (byte[])source;
 else   throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
}","/** 
 * @param source
 * @return byte array
 * @throws BirtException
 */
public static byte[] toBytes(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof byte[])   return (byte[])source;
 else   if (source instanceof Blob) {
    try {
      return ((Blob)source).getBytes((long)1,(int)((Blob)source).length());
    }
 catch (    SQLException e) {
      throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
    }
  }
 else   throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
}",0.7119675456389453
74598,"/** 
 * Adapts a Model data type (string) to Data Engine data type constant (integer) on column
 */
public static int adaptModelDataType(String modelDataType){
  if (modelDataType == null)   return DataType.UNKNOWN_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY))   return DataType.ANY_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER))   return DataType.INTEGER_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING))   return DataType.STRING_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME))   return DataType.DATE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL))   return DataType.DECIMAL_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT))   return DataType.DOUBLE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_TIME))   return DataType.SQL_TIME_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATE))   return DataType.SQL_DATE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN))   return DataType.BOOLEAN_TYPE;
  return DataType.UNKNOWN_TYPE;
}","/** 
 * Adapts a Model data type (string) to Data Engine data type constant (integer) on column
 */
public static int adaptModelDataType(String modelDataType){
  if (modelDataType == null)   return DataType.UNKNOWN_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY))   return DataType.ANY_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER))   return DataType.INTEGER_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING))   return DataType.STRING_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME))   return DataType.DATE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL))   return DataType.DECIMAL_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT))   return DataType.DOUBLE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_TIME))   return DataType.SQL_TIME_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATE))   return DataType.SQL_DATE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN))   return DataType.BOOLEAN_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_BLOB))   return DataType.BLOB_TYPE;
  return DataType.UNKNOWN_TYPE;
}",0.9467408585055644
74599,"/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  boolean isDesigner=false;
  if (""String_Node_Str"".equalsIgnoreCase(System.getProperty(IBirtConstants.SYS_PROP_BIRT_ISDESIGNER)))   isDesigner=true;
  String workingPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_WORKING_PATH + ""String_Node_Str"";
  workingFolder=processWorkingFolder(context,context.getInitParameter(INIT_PARAM_WORKING_DIR));
  String initDocumentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (isDesigner && initDocumentFolder == null)   initDocumentFolder=workingPath + IBirtConstants.DEFAULT_DOCUMENT_FOLDER;
  documentFolder=processRealPath(context,initDocumentFolder,IBirtConstants.DEFAULT_DOCUMENT_FOLDER,true);
  String initImageFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (isDesigner && initImageFolder == null)   initImageFolder=workingPath + IBirtConstants.DEFAULT_IMAGE_FOLDER;
  imageFolder=processRealPath(context,initImageFolder,IBirtConstants.DEFAULT_IMAGE_FOLDER,true);
  String initLogFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (isDesigner && initLogFolder == null)   initLogFolder=workingPath + IBirtConstants.DEFAULT_LOGS_FOLDER;
  logFolder=processRealPath(context,initLogFolder,IBirtConstants.DEFAULT_LOGS_FOLDER,true);
  logLevel=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  if (logLevel == null)   logLevel=IBirtConstants.DEFAULT_LOGS_LEVEL;
  String initScriptlibFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (isDesigner && initScriptlibFolder == null)   initScriptlibFolder=workingPath + IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER;
  scriptLibDir=processRealPath(context,initScriptlibFolder,IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER,false);
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  String s_maxLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBELEVELS);
  try {
    maxCubeLevels=Integer.valueOf(s_maxLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeLevels=-1;
  }
  String s_cubeMemSize=context.getInitParameter(INIT_PARAM_VIEWER_CUBEMEMSIZE);
  try {
    cubeMemorySize=Integer.valueOf(s_cubeMemSize).intValue();
  }
 catch (  NumberFormatException e) {
    cubeMemorySize=0;
  }
  birtResourceFolder=processRealPath(context,context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH),null,false);
  String s_overwrite=DataUtil.trimString(context.getInitParameter(INIT_PARAM_OVERWRITE_DOCUMENT));
  if (""String_Node_Str"".equalsIgnoreCase(s_overwrite)) {
    isOverWrite=true;
  }
 else {
    isOverWrite=false;
  }
  initProps=initViewerProps(context,initProps);
  if (loggers == null) {
    loggers=new HashMap();
  }
  for (Iterator i=initProps.keySet().iterator(); i.hasNext(); ) {
    String name=(String)i.next();
    if (name.startsWith(""String_Node_Str"")) {
      String loggerName=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      String levelName=(String)initProps.get(name);
      loggers.put(loggerName,levelName);
      i.remove();
    }
  }
  String flag=DataUtil.trimString(context.getInitParameter(INIT_PARAM_PRINT_SERVERSIDE));
  if (IBirtConstants.VAR_ON.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=true;
  }
 else   if (IBirtConstants.VAR_OFF.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=false;
  }
  String s_agentstyle=context.getInitParameter(INIT_PARAM_AGENTSTYLE_ENGINE);
  if (""String_Node_Str"".equalsIgnoreCase(s_agentstyle))   isAgentStyle=true;
  if (s_agentstyle == null && isDesigner)   isAgentStyle=true;
  clearTempFiles();
  isInitContext=true;
}","/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  boolean isDesigner=false;
  if (""String_Node_Str"".equalsIgnoreCase(System.getProperty(IBirtConstants.SYS_PROP_BIRT_ISDESIGNER)))   isDesigner=true;
  String workingPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_WORKING_PATH + ""String_Node_Str"";
  workingFolder=processWorkingFolder(context,context.getInitParameter(INIT_PARAM_WORKING_DIR));
  String initDocumentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (isDesigner && initDocumentFolder == null)   initDocumentFolder=workingPath + IBirtConstants.DEFAULT_DOCUMENT_FOLDER;
  documentFolder=processRealPath(context,initDocumentFolder,IBirtConstants.DEFAULT_DOCUMENT_FOLDER,true);
  String initImageFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (isDesigner && initImageFolder == null)   initImageFolder=workingPath + IBirtConstants.DEFAULT_IMAGE_FOLDER;
  imageFolder=processRealPath(context,initImageFolder,IBirtConstants.DEFAULT_IMAGE_FOLDER,true);
  String initLogFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (isDesigner && initLogFolder == null)   initLogFolder=workingPath + IBirtConstants.DEFAULT_LOGS_FOLDER;
  logFolder=processRealPath(context,initLogFolder,IBirtConstants.DEFAULT_LOGS_FOLDER,true);
  logLevel=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  if (logLevel == null)   logLevel=IBirtConstants.DEFAULT_LOGS_LEVEL;
  String initScriptlibFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (isDesigner && initScriptlibFolder == null)   initScriptlibFolder=workingPath + IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER;
  scriptLibDir=processRealPath(context,initScriptlibFolder,IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER,false);
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  String s_maxLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBELEVELS);
  try {
    maxCubeLevels=Integer.valueOf(s_maxLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeLevels=-1;
  }
  String s_cubeMemSize=context.getInitParameter(INIT_PARAM_VIEWER_CUBEMEMSIZE);
  try {
    cubeMemorySize=Integer.valueOf(s_cubeMemSize).intValue();
  }
 catch (  NumberFormatException e) {
    cubeMemorySize=0;
  }
  birtResourceFolder=processRealPath(context,context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH),null,false);
  String s_overwrite=DataUtil.trimString(context.getInitParameter(INIT_PARAM_OVERWRITE_DOCUMENT));
  if (""String_Node_Str"".equalsIgnoreCase(s_overwrite)) {
    isOverWrite=true;
  }
 else {
    isOverWrite=false;
  }
  initProps=initViewerProps(context,initProps);
  if (loggers == null) {
    loggers=new HashMap();
  }
  for (Iterator i=initProps.keySet().iterator(); i.hasNext(); ) {
    String name=(String)i.next();
    if (name.startsWith(""String_Node_Str"")) {
      String loggerName=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      String levelName=(String)initProps.get(name);
      loggers.put(loggerName,levelName);
      i.remove();
    }
  }
  String flag=DataUtil.trimString(context.getInitParameter(INIT_PARAM_PRINT_SERVERSIDE));
  if (IBirtConstants.VAR_ON.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=true;
  }
 else   if (IBirtConstants.VAR_OFF.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=false;
  }
  String s_agentstyle=context.getInitParameter(INIT_PARAM_AGENTSTYLE_ENGINE);
  if (""String_Node_Str"".equalsIgnoreCase(s_agentstyle))   isAgentStyle=false;
  clearTempFiles();
  isInitContext=true;
}",0.9918190567853704
74600,"public Connection connect(DataSourceDesign dataSourceHandle){
  DataSourceDesign handle=(DataSourceDesign)dataSourceHandle;
  String userName=(String)handle.getPublicProperties().findProperty(Constants.ODAUser).getValue();
  String passWord=(String)handle.getPublicProperties().findProperty(Constants.ODAPassword).getValue();
  String url=(String)handle.getPublicProperties().findProperty(Constants.ODAURL).getValue();
  String driver=(String)handle.getPublicProperties().findProperty(Constants.ODADriverClass).getValue();
  jdbcConnection=connect(userName,passWord,url,driver,handle.getOdaExtensionId());
  return jdbcConnection;
}","public Connection connect(DataSourceDesign dataSourceDesign){
  Properties props;
  try {
    props=DesignSessionUtil.getEffectiveDataSourceProperties(dataSourceDesign);
  }
 catch (  OdaException e) {
    props=new Properties();
  }
  String userName=props.getProperty(Constants.ODAUser);
  String passWord=props.getProperty(Constants.ODAPassword);
  String url=props.getProperty(Constants.ODAURL);
  String driver=props.getProperty(Constants.ODADriverClass);
  jdbcConnection=connect(userName,passWord,url,driver,dataSourceDesign.getOdaExtensionId());
  return jdbcConnection;
}",0.3927392739273927
74601,"/** 
 * @param absoluteRowIndex
 * @throws IOException
 * @throws DataException
 */
private void skipTo(int absoluteRowIndex) throws IOException, DataException {
  if (currReadIndex == absoluteRowIndex)   return;
  if (this.dataSetData != null) {
    this.dataSetData.skipTo(absoluteRowIndex);
  }
  if (version == VersionManager.VERSION_2_0) {
    int exprCount;
    int gapRows=absoluteRowIndex - currReadIndex;
    for (int j=0; j < gapRows; j++) {
      exprCount=IOUtil.readInt(rowExprsDis);
      for (int i=0; i < exprCount; i++) {
        IOUtil.readObject(rowExprsDis);
      }
    }
  }
 else   if (version <= VersionManager.VERSION_2_2_1_1) {
    rowLenRAIs.seek(absoluteRowIndex * INT_LENGTH);
    int rowOffsetAbsolute=IOUtil.readInt(rowLenRAIs);
    rowExprsRAIs.seek(rowOffsetAbsolute + this.metaOffset);
    rowExprsDis=new DataInputStream(rowExprsRAIs);
  }
 else {
    rowLenRAIs.seek(absoluteRowIndex * 8);
    long rowOffsetAbsolute=IOUtil.readLong(this.rowLenDis);
    rowExprsRAIs.seek(rowOffsetAbsolute + this.metaOffset);
    rowExprsDis=new DataInputStream(rowExprsRAIs);
  }
}","/** 
 * @param absoluteRowIndex
 * @throws IOException
 * @throws DataException
 */
private void skipTo(int absoluteRowIndex) throws IOException, DataException {
  if (this.dataSetData != null) {
    this.dataSetData.skipTo(absoluteRowIndex);
  }
  if (currReadIndex == absoluteRowIndex)   return;
  if (version == VersionManager.VERSION_2_0) {
    int exprCount;
    int gapRows=absoluteRowIndex - currReadIndex;
    for (int j=0; j < gapRows; j++) {
      exprCount=IOUtil.readInt(rowExprsDis);
      for (int i=0; i < exprCount; i++) {
        IOUtil.readObject(rowExprsDis);
      }
    }
  }
 else   if (version <= VersionManager.VERSION_2_2_1_1) {
    rowLenRAIs.seek(absoluteRowIndex * INT_LENGTH);
    int rowOffsetAbsolute=IOUtil.readInt(rowLenRAIs);
    rowExprsRAIs.seek(rowOffsetAbsolute + this.metaOffset);
    rowExprsDis=new DataInputStream(rowExprsRAIs);
  }
 else {
    rowLenRAIs.seek(absoluteRowIndex * 8);
    long rowOffsetAbsolute=IOUtil.readLong(this.rowLenDis);
    rowExprsRAIs.seek(rowOffsetAbsolute + this.metaOffset);
    rowExprsDis=new DataInputStream(rowExprsRAIs);
  }
}",0.9228675136116152
74602,"public IResultObject next() throws DataException {
  initLoad();
  if (this.rowIndex == this.rowCount)   return null;
  try {
    rowIndex++;
    this.currentObject=ResultSetUtil.readResultObject(dis,rsMetaData,colCount);
    return this.currentObject;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
}","public IResultObject next() throws DataException {
  initLoad();
  if (this.rowIndex < this.rowCount - 1) {
    try {
      rowIndex++;
      this.currentObject=ResultSetUtil.readResultObject(dis,rsMetaData,colCount);
      return this.currentObject;
    }
 catch (    IOException e) {
      throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
    }
  }
 else   return null;
}",0.9107373868046572
74603,"public int getCurrentIndex(){
  return rowIndex - 1;
}","public int getCurrentIndex(){
  return rowIndex;
}",0.9615384615384616
74604,"public void skipTo(int index) throws DataException, IOException {
  this.initLoad();
  if (this.rowIndex < this.rowCount) {
    if (this.dataSetRowLensStream != null) {
      this.dataSetRowLensStream.seek(index * 8);
      long position=IOUtil.readLong(this.disRowLensStream);
      this.rowIndex=index;
      this.inputStream.seek(position + this.initPos);
      this.dis=new DataInputStream(inputStream);
      this.currentObject=ResultSetUtil.readResultObject(dis,rsMetaData,colCount);
      return;
    }
  }
}","public void skipTo(int index) throws DataException, IOException {
  if (this.rowIndex == index)   return;
  this.initLoad();
  if (this.rowIndex < this.rowCount) {
    if (this.dataSetRowLensStream != null) {
      this.dataSetRowLensStream.seek(index * 8);
      long position=IOUtil.readLong(this.disRowLensStream);
      this.rowIndex=index;
      this.inputStream.seek(position + this.initPos);
      this.dis=new DataInputStream(inputStream);
      this.currentObject=ResultSetUtil.readResultObject(dis,rsMetaData,colCount);
      return;
    }
  }
}",0.9626168224299064
74605,"/** 
 * Converts a parameter value to a String expected by ParameterHint
 */
private String getParameterValueString(Class paramType,Object paramValue) throws DataException {
  if (paramValue instanceof String)   return (String)paramValue;
  try {
    paramValue=DataTypeUtil.convert(paramValue,paramType);
    if (paramValue instanceof Date) {
      SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
      return sdf.format((Date)paramValue);
    }
    return DataTypeUtil.toString(paramValue);
  }
 catch (  BirtException e) {
    throw new DataException(ResourceConstants.DATATYPEUTIL_ERROR,e);
  }
}","/** 
 * Converts a parameter value to a String expected by ParameterHint
 */
private String getParameterValueString(Class paramType,Object paramValue) throws DataException {
  if (paramValue instanceof String)   return (String)paramValue;
  try {
    paramValue=DataTypeUtil.convert(paramValue,paramType);
    if (paramValue instanceof Date) {
      SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
      return sdf.format((Date)paramValue);
    }
    if (paramValue != null) {
      return paramValue.toString();
    }
    return null;
  }
 catch (  BirtException e) {
    throw new DataException(ResourceConstants.DATATYPEUTIL_ERROR,e);
  }
}",0.9189614476789928
74606,"public List getModelList(){
  init();
  List list=new ArrayList();
  List columns=buildColumnArea();
  List rows=buildRowArea();
  List details=buildMeasures();
  buildModel(list,columns,rows,details);
  adjustColumn(columns,details);
  adjustRow(rows,details);
  int rowBase=((Integer)map.get(COLUMNAREA_ROW)).intValue();
  int columnBase=((Integer)map.get(ROWAREA_COLUMN)).intValue();
  CrosstabCellAdapter first=factory.createCrosstabCellAdapter(LEFT_CONNER,null,1,rowBase,1,columnBase,false);
  list.add(0,first);
  Collections.sort(list,new ModelComparator());
  oldModelList=list;
  return list;
}","public List getModelList(){
  init();
  List list=new ArrayList();
  List columns=buildColumnArea();
  List rows=buildRowArea();
  List details=buildMeasures();
  adjustDirection(columns,rows);
  buildModel(list,columns,rows,details);
  adjustColumn(columns,details);
  adjustRow(rows,details);
  int rowBase=((Integer)map.get(COLUMNAREA_ROW)).intValue();
  int columnBase=((Integer)map.get(ROWAREA_COLUMN)).intValue();
  CrosstabCellAdapter first=factory.createCrosstabCellAdapter(LEFT_CONNER,null,1,rowBase,1,columnBase,false);
  list.add(0,first);
  Collections.sort(list,new ModelComparator());
  oldModelList=list;
  return list;
}",0.973365617433414
74607,"/** 
 * @throws Exception
 */
public void testClobAndBlob() throws Exception {
  QueryDefinition queryDefn=newReportQuery();
  prepareExpression(queryDefn);
  IResultIterator ri=executeQuery(queryDefn);
  IResultMetaData md=ri.getResultMetaData();
  while (ri.next()) {
    String str=""String_Node_Str"";
    for (int i=0; i < beArray.length; i++) {
      if (md.getColumnTypeName(i + 1).equals(DataType.BINARY_TYPE_NAME))       str+=new String(ri.getBytes(beName[i]));
 else       str+=ri.getValue(beName[i]);
      if (i < beArray.length - 1)       str+=""String_Node_Str"";
    }
    testPrintln(str);
  }
  checkOutputFile();
}","/** 
 * @throws Exception
 */
public void testClobAndBlob() throws Exception {
  QueryDefinition queryDefn=newReportQuery();
  prepareExpression(queryDefn);
  IResultIterator ri=executeQuery(queryDefn);
  IResultMetaData md=ri.getResultMetaData();
  while (ri.next()) {
    String str=""String_Node_Str"";
    for (int i=0; i < beArray.length; i++) {
      if (md.getColumnTypeName(i + 1).equals(DataType.BINARY_TYPE_NAME) || md.getColumnTypeName(i + 1).equals(DataType.BLOB_TYPE_NAME))       str+=new String(ri.getBytes(beName[i]));
 else       str+=ri.getValue(beName[i]);
      if (i < beArray.length - 1)       str+=""String_Node_Str"";
    }
    testPrintln(str);
  }
  checkOutputFile();
}",0.9522365428354814
74608,"protected void writeTxtData(Data d){
  startCell(d.span.getCol(),d.span.getColSpan(),0,d.styleId,d.url);
  writeText(d);
  endCell();
}","protected void writeTxtData(Data d){
  startCell(d.span.getCol(),d.span.getColSpan(),d.getRowSpan(),d.styleId,d.url);
  writeText(d);
  endCell();
}",0.9469964664310954
74609,"private static void overwriteProp(StyleEntry cEntry,StyleEntry entry,int id){
  if (!(StyleEntry.isNull(cEntry.getProperty(id)))) {
    entry.setProperty(id,cEntry.getProperty(id));
  }
}","private static void overwriteProp(StyleEntry cEntry,StyleEntry entry,int id){
  if (StyleEntry.isNull(entry.getProperty(id))) {
    entry.setProperty(id,cEntry.getProperty(id));
  }
}",0.9837837837837838
74610,"public static String convertBorderWeight(String weight){
  String w=StyleConstant.NULL;
  if (weight != null && !""String_Node_Str"".equalsIgnoreCase(weight)) {
    weight=ExcelUtil.getValue(weight);
    if (""String_Node_Str"".equalsIgnoreCase(weight)) {
      w=""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(weight)) {
      w=""String_Node_Str"";
    }
 else {
      w=""String_Node_Str"";
    }
  }
  return w;
}","public static String convertBorderWeight(String linestyle){
  String w=StyleConstant.NULL;
  if (linestyle != null && !""String_Node_Str"".equalsIgnoreCase(linestyle)) {
    linestyle=ExcelUtil.getValue(linestyle);
    int weight=(int)Double.parseDouble(linestyle);
    if (weight >= 749 && weight < 2249) {
      w=""String_Node_Str"";
    }
 else     if (weight >= 2249 && weight < 3750) {
      w=""String_Node_Str"";
    }
 else     if (weight >= 3750) {
      w=""String_Node_Str"";
    }
 else {
      w=""String_Node_Str"";
    }
  }
  return w;
}",0.6204081632653061
74611,"private void synchronous(){
  Rule rule=getCurrentContainer().getRule();
  int start=rule.getStart();
  int end=rule.getEnd();
  int startcol=axis.getCoordinate(start);
  int endcol=axis.getCoordinate(end);
  int max=0;
  int len[]=new int[endcol - startcol];
  for (int i=startcol; i < endcol; i++) {
    int columnsize=cache.getColumnSize(i - detal);
    len[i - startcol]=columnsize;
    max=max > columnsize ? max : columnsize;
  }
  for (int i=startcol; i < endcol; i++) {
    int times=max - len[i - startcol];
    while ((times--) > 0) {
      Rule colrule=axis.getRule(i);
      Data data=new Data(EMPTY,engine.createHorizionStyle(colrule),Data.STRING);
      data.setRule(colrule);
      cache.addData(i - detal,data);
    }
  }
}","private void synchronous(){
  Rule rule=getCurrentContainer().getRule();
  int start=rule.getStart();
  int end=rule.getEnd();
  int startcol=axis.getCoordinate(start);
  int endcol=axis.getCoordinate(end);
  int max=0;
  int len[]=new int[endcol - startcol];
  for (int i=startcol; i < endcol; i++) {
    int columnsize=cache.getColumnSize(i - detal);
    len[i - startcol]=columnsize;
    max=max > columnsize ? max : columnsize;
  }
  for (int i=startcol; i < endcol; i++) {
    int rowspan=max - len[i - startcol];
    int last=len[i - startcol] - 1;
    if (rowspan > 0) {
      Object data=null;
      Object upstair=cache.getData(i - detal,last);
      if (upstair != null && upstair != waste) {
        Data predata=(Data)upstair;
        int rs=predata.getRowSpan() + rowspan;
        predata.setRowSpan(rs);
        data=predata;
      }
 else {
        data=waste;
      }
      for (int p=0; p < rowspan; p++) {
        cache.addData(i - detal,data);
      }
    }
  }
}",0.6252178965717606
74612,"public Data[] getRow(int rownum){
  Object[] row=cache.getRowData(rownum);
  List data=new ArrayList();
  int width=Math.min(row.length,MAX_CLOUMN - 1);
  for (int i=0; i < width; i++) {
    if (waste == row[i]) {
      continue;
    }
    Data d=(Data)row[i];
    HyperlinkDef def=d.getHyperlinkDef();
    if (def != null && def.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      def.setUrl((String)links.get(def.getUrl()));
    }
    data.add(row[i]);
  }
  return (Data[])data.toArray(new Data[0]);
}","public Data[] getRow(int rownum){
  Object[] row=cache.getRowData(rownum);
  List data=new ArrayList();
  int width=Math.min(row.length,MAX_CLOUMN - 1);
  for (int i=0; i < width; i++) {
    if (waste == row[i]) {
      continue;
    }
    Data d=(Data)row[i];
    if (d.isProcessed()) {
      continue;
    }
    HyperlinkDef def=d.getHyperlinkDef();
    if (def != null && def.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      def.setUrl((String)links.get(def.getUrl()));
    }
    d.setProcessed(true);
    data.add(row[i]);
  }
  return (Data[])data.toArray(new Data[0]);
}",0.931129476584022
74613,"/** 
 * Override implementation of doPostService.
 */
protected String doPostService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String className=getClass().getName().substring(getClass().getName().lastIndexOf('.') + 1);
  return JSPRootPath + ""String_Node_Str"" + className+ ""String_Node_Str"";
}","/** 
 * Override implementation of doPostService.
 */
protected String doPostService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  request.setAttribute(""String_Node_Str"",request.getServletPath());
  String className=getClass().getName().substring(getClass().getName().lastIndexOf('.') + 1);
  return JSPRootPath + ""String_Node_Str"" + className+ ""String_Node_Str"";
}",0.9112271540469974
74614,"public static String formatDate(Object data){
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  return dateFormat.format((Date)data);
}","public static String formatDate(Object data){
  if (data == null) {
    return null;
  }
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  Date date=null;
  if (data instanceof com.ibm.icu.util.Calendar) {
    date=((com.ibm.icu.util.Calendar)data).getTime();
  }
 else   if (data instanceof Date) {
    date=(Date)data;
  }
 else {
    return null;
  }
  return dateFormat.format(date);
}",0.519298245614035
74615,"public boolean equals(Object other){
  if (other == null || !(other instanceof ColumnReferenceExpression))   return false;
  ColumnReferenceExpression expr2=(ColumnReferenceExpression)other;
  if (m_columnName != null)   return (m_columnName.equals(expr2.m_columnName));
 else   return m_columnIndex == expr2.m_columnIndex;
}","public boolean equals(Object other){
  if (other == null || !(other instanceof ColumnReferenceExpression))   return false;
  ColumnReferenceExpression expr2=(ColumnReferenceExpression)other;
  if (dataType != expr2.dataType)   return false;
  if (m_columnName != null)   return (m_columnName.equals(expr2.m_columnName));
 else   return m_columnIndex == expr2.m_columnIndex;
}",0.6914285714285714
74616,"public void writeText(Data d){
  writer.openTag(""String_Node_Str"");
  if (d.getDatatype().equals(Data.NUMBER) && ExcelUtil.isNumber(d.getText())) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (d.getDatatype().equals(Data.DATE)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.text(d.getText());
  writer.closeTag(""String_Node_Str"");
}","public void writeText(Data d){
  writer.openTag(""String_Node_Str"");
  if (d.getDatatype().equals(Data.NUMBER) && ExcelUtil.isNumber(d.getText())) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (d.getDatatype().equals(Data.DATE)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  String txt=d.getText();
  if (CSSConstants.CSS_CAPITALIZE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=capitalize(txt);
  }
 else   if (CSSConstants.CSS_UPPERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toUpperCase();
  }
 else   if (CSSConstants.CSS_LOWERCASE_VALUE.equalsIgnoreCase(d.getStyleEntry().getProperty(StyleConstant.TEXT_TRANSFORM))) {
    txt=txt.toLowerCase();
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}",0.6253561253561254
74617,"public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,ExcelUtil.expression(style.getFontWeight(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,ExcelUtil.expression(style.getTextLineThrough(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,ExcelUtil.expression(style.getTextUnderline(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  return entry;
}","public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,ExcelUtil.expression(style.getFontWeight(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,ExcelUtil.expression(style.getTextLineThrough(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,ExcelUtil.expression(style.getTextUnderline(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  entry.setProperty(StyleConstant.TEXT_TRANSFORM,style.getTextTransform());
  return entry;
}",0.9881950916433676
74618,"/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasAggregationInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getBindings(),queryDefn.getBindings());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return false;
  if (hasSubquery(queryDefn)) {
    if (hasSubQueryInDetail(queryDefn.getSubqueries()))     return false;
    if (!QueryDefnUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      for (int i=0; i < groups.size(); i++) {
        List groupFilters=((IGroupDefinition)groups.get(i)).getFilters();
        if (groupFilters != null && groupFilters.size() > 0) {
          runningOnRS=false;
          break;
        }
      }
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return false;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0) {
    if (!isFiltersEquals(filters,queryDefn.getFilters()))     runningOnRS=queryDefn.getBindings().values() == null || !hasAggregationOnRowObjects(queryDefn.getBindings().values().iterator());
  }
  return runningOnRS;
}","/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasAggregationInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getBindings(),queryDefn.getBindings());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return false;
  if (!isBindingReferenceSort(queryDefn.getSorts()))   return false;
  if (hasSubquery(queryDefn)) {
    if (hasSubQueryInDetail(queryDefn.getSubqueries()))     return false;
    if (!QueryDefnUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      for (int i=0; i < groups.size(); i++) {
        List groupFilters=((IGroupDefinition)groups.get(i)).getFilters();
        if (groupFilters != null && groupFilters.size() > 0) {
          runningOnRS=false;
          break;
        }
      }
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return false;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0) {
    if (!isFiltersEquals(filters,queryDefn.getFilters()))     runningOnRS=queryDefn.getBindings().values() == null || !hasAggregationOnRowObjects(queryDefn.getBindings().values().iterator());
  }
  return runningOnRS;
}",0.9900245771288132
74619,"public void updateRow(RowArea rowArea,int specifiedHeight,boolean finished){
  hasDropCell=!finished;
  Row lastRow=getPreviousRow();
  if (lastRow == null && existDropCells() && (!LayoutUtil.isRepeatableRow((IRowContent)rowArea.getContent()))) {
    lastRow=unresolvedRow;
  }
  Row row=new Row(rowArea,startCol,endCol,finished);
  int height=specifiedHeight;
  for (int i=startCol; i <= endCol; i++) {
    CellArea lastCell=null;
    if (lastRow != null) {
      lastCell=lastRow.getCell(i);
    }
    CellArea cell=row.getCell(i);
    if (lastCell != null && (lastCell.getRowSpan() > 1 || isDropCell(lastCell))) {
      if (cell != null) {
        row.remove(i);
      }
      if (lastCell.getRowSpan() == 2) {
        if (lastCell instanceof DummyCell) {
          height=Math.max(height,lastCell.getHeight());
        }
 else {
          height=Math.max(height,lastCell.getHeight() - lastRow.getArea().getHeight());
        }
      }
      i=i + lastCell.getColSpan() - 1;
    }
 else {
      if (cell != null) {
        if (cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
        }
      }
      if (cell == null) {
        ICellContent cellContent=null;
        if (unresolvedRow != null) {
          CellArea ca=unresolvedRow.getCell(i);
          if (ca != null) {
            ICellContent cc=(ICellContent)ca.getContent();
            cellContent=new ClonedCellContent(cc,getRowSpan((IRowContent)rowArea.getContent(),ca,unresolvedRow.row));
          }
        }
        if (cellContent == null) {
          cellContent=tableContent.getReportContent().createCellContent();
          cellContent.setColumn(i);
          cellContent.setColSpan(1);
          cellContent.setRowSpan(1);
          cellContent.setParent(rowArea.getContent());
        }
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        resolveBorderConflict(emptyCell,false);
        IStyle areaStyle=emptyCell.getStyle();
        areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
        areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        rowArea.addChild(emptyCell);
        i=i + emptyCell.getColSpan() - 1;
      }
    }
  }
  if (specifiedHeight == 0 && isEmptyRow(row)) {
    height=Math.max(height,getHeightOfEmptyRow(row));
  }
  if (height >= 0) {
    Iterator iter=rowArea.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      if (cell.getRowSpan() == 1) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    rowArea.setHeight(height);
  }
  if (firstRow && existDropCells() && (!LayoutUtil.isRepeatableRow((IRowContent)rowArea.getContent()))) {
    mergeDropCell(rowArea);
  }
}","public void updateRow(RowArea rowArea,int specifiedHeight,boolean finished){
  hasDropCell=!finished;
  Row lastRow=getPreviousRow();
  if (lastRow == null && existDropCells() && (!LayoutUtil.isRepeatableRow((IRowContent)rowArea.getContent()))) {
    lastRow=unresolvedRow;
  }
  Row row=new Row(rowArea,startCol,endCol,finished);
  int height=specifiedHeight;
  for (int i=startCol; i <= endCol; i++) {
    CellArea lastCell=null;
    if (lastRow != null) {
      lastCell=lastRow.getCell(i);
    }
    CellArea cell=row.getCell(i);
    if (lastCell != null && ((lastCell.getRowSpan() > 1) || isDropCell(lastCell))) {
      if (cell != null && (lastCell instanceof DummyCell)) {
        row.remove(i);
      }
      if (lastCell.getRowSpan() == 2) {
        if (lastCell instanceof DummyCell) {
          height=Math.max(height,lastCell.getHeight());
        }
 else {
          height=Math.max(height,lastCell.getHeight() - lastRow.getArea().getHeight());
        }
      }
      i=i + lastCell.getColSpan() - 1;
    }
 else {
      if (cell != null) {
        if (cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
        }
      }
      if (cell == null) {
        ICellContent cellContent=null;
        if (unresolvedRow != null) {
          CellArea ca=unresolvedRow.getCell(i);
          if (ca != null) {
            ICellContent cc=(ICellContent)ca.getContent();
            cellContent=new ClonedCellContent(cc,getRowSpan((IRowContent)rowArea.getContent(),ca,unresolvedRow.row));
          }
        }
        if (cellContent == null) {
          cellContent=tableContent.getReportContent().createCellContent();
          cellContent.setColumn(i);
          cellContent.setColSpan(1);
          cellContent.setRowSpan(1);
          cellContent.setParent(rowArea.getContent());
        }
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        resolveBorderConflict(emptyCell,false);
        IStyle areaStyle=emptyCell.getStyle();
        areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
        areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        rowArea.addChild(emptyCell);
        i=i + emptyCell.getColSpan() - 1;
      }
    }
  }
  if (specifiedHeight == 0 && isEmptyRow(row)) {
    height=Math.max(height,getHeightOfEmptyRow(row));
  }
  if (height >= 0) {
    Iterator iter=rowArea.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      if (cell.getRowSpan() == 1) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    rowArea.setHeight(height);
  }
  if (firstRow && existDropCells() && (!LayoutUtil.isRepeatableRow((IRowContent)rowArea.getContent()))) {
    mergeDropCell(rowArea);
  }
}",0.9937804673054296
74620,"public void startData(IDataContent data){
  super.startData(data);
  HyperlinkDef url=parseHyperLink(data);
  engine.addData(data,data.getComputedStyle(),url);
}","public void startData(IDataContent data){
  super.startData(data);
  HyperlinkDef url=parseHyperLink(data);
  if (((StyledElementDesign)data.getGenerateBy()).getMap() != null && ((StyledElementDesign)data.getGenerateBy()).getMap().getRuleCount() > 0) {
    engine.addData(data.getText().trim(),data.getComputedStyle(),url);
  }
 else   if (!ExcelUtil.getType(data.getValue()).equals(Data.NUMBER) && !ExcelUtil.getType(data.getValue()).equals(Data.DATE)) {
    engine.addData(data.getText(),data.getComputedStyle(),url);
  }
 else {
    engine.addData(data.getValue(),data.getComputedStyle(),url);
  }
}",0.3722149410222805
74621,"public Data createData(Object txt,StyleEntry entry){
  if (txt instanceof IDataContent) {
    IDataContent dataContent=(IDataContent)txt;
    Object value=dataContent.getValue();
    String text=dataContent.getText();
    if (((DataItemDesign)dataContent.getGenerateBy()).getMap() != null && ((DataItemDesign)dataContent.getGenerateBy()).getMap().getRuleCount() > 0) {
      entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.STRING);
      return new Data(text.trim(),entry,Data.STRING);
    }
 else     if (ExcelUtil.getType(value).equals(Data.NUMBER)) {
      String format=ExcelUtil.getPattern(value,entry.getProperty(StyleConstant.NUMBER_FORMAT_PROP));
      entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,format);
      entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.NUMBER);
      return new Data(value,entry,Data.NUMBER);
    }
 else     if (ExcelUtil.getType(value).equals(Data.DATE)) {
      String format=ExcelUtil.getPattern(value,entry.getProperty(StyleConstant.DATE_FORMAT_PROP));
      entry.setProperty(StyleConstant.DATE_FORMAT_PROP,format);
      entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.DATE);
      return new Data(value,entry,Data.DATE);
    }
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.STRING);
    return new Data(text.trim(),entry,Data.STRING);
  }
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.STRING);
  return new Data(txt,entry,Data.STRING);
}","public Data createData(Object txt,StyleEntry entry){
  if (ExcelUtil.getType(txt).equals(Data.NUMBER)) {
    String format=ExcelUtil.getPattern(txt,entry.getProperty(StyleConstant.NUMBER_FORMAT_PROP));
    entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,format);
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.NUMBER);
    return new Data(txt,entry,Data.NUMBER);
  }
 else   if (ExcelUtil.getType(txt).equals(Data.DATE)) {
    String format=ExcelUtil.getPattern(txt,entry.getProperty(StyleConstant.DATE_FORMAT_PROP));
    entry.setProperty(StyleConstant.DATE_FORMAT_PROP,format);
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.DATE);
    return new Data(txt,entry,Data.DATE);
  }
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.STRING);
  return new Data(txt,entry,Data.STRING);
}",0.5135135135135135
74622,"public String getText(){
  if (txt == null) {
    return ""String_Node_Str"";
  }
 else   if (datatype.equals(Data.DATE)) {
    return ExcelUtil.formatDate(txt);
  }
 else {
    return txt.toString();
  }
}","public String getText(){
  if (txt == null) {
    return ""String_Node_Str"";
  }
 else   if (datatype.equals(Data.DATE)) {
    return ExcelUtil.formatDate(txt);
  }
 else   if (datatype.equals(Data.NUMBER) && txt.toString().length() > 31) {
    return ExcelUtil.formatNumber(txt);
  }
 else {
    return txt.toString();
  }
}",0.6704545454545454
74623,"public static String formatDate(Object date){
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  return dateFormat.format((Date)date);
}","public static String formatDate(Object data){
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  return dateFormat.format((Date)data);
}",0.9873417721518988
74624,"/** 
 * compare data source design
 * @param dataSourceDesign
 * @param dataSourceDesign2
 * @return
 */
private boolean isEqualDataSourceDesign(IBaseDataSourceDesign dataSourceDesign,IBaseDataSourceDesign dataSourceDesign2){
  if (dataSourceDesign == dataSourceDesign2)   return true;
  if (dataSourceDesign == null || dataSourceDesign2 == null)   return false;
  if (!isEqualString(dataSourceDesign.getName(),dataSourceDesign2.getName()))   return false;
  if (isEqualString(dataSourceDesign.getBeforeOpenScript(),dataSourceDesign2.getBeforeOpenScript()) == false || isEqualString(dataSourceDesign.getAfterOpenScript(),dataSourceDesign2.getAfterOpenScript()) == false || isEqualString(dataSourceDesign.getBeforeCloseScript(),dataSourceDesign2.getBeforeCloseScript()) == false || isEqualString(dataSourceDesign.getAfterCloseScript(),dataSourceDesign2.getAfterCloseScript()) == false)   return false;
  if (dataSourceDesign instanceof IOdaDataSourceDesign && dataSourceDesign2 instanceof IOdaDataSourceDesign) {
    IOdaDataSourceDesign dataSource=(IOdaDataSourceDesign)dataSourceDesign;
    IOdaDataSourceDesign dataSource2=(IOdaDataSourceDesign)dataSourceDesign2;
    if (isEqualString(dataSource.getExtensionID(),dataSource2.getExtensionID()) == false)     return false;
    if (isEqualProps(dataSource.getPublicProperties(),dataSource2.getPublicProperties()) == false || isEqualProps(dataSource.getPrivateProperties(),dataSource2.getPrivateProperties()) == false)     return false;
  }
 else   if (dataSourceDesign instanceof IScriptDataSourceDesign && dataSourceDesign2 instanceof IScriptDataSourceDesign) {
    IScriptDataSourceDesign dataSource=(IScriptDataSourceDesign)dataSourceDesign;
    IScriptDataSourceDesign dataSource2=(IScriptDataSourceDesign)dataSourceDesign2;
    if (isEqualString(dataSource.getOpenScript(),dataSource2.getOpenScript()) == false || isEqualString(dataSource.getCloseScript(),dataSource2.getCloseScript()) == false)     return false;
  }
  return true;
}","/** 
 * compare data source design
 * @param dataSourceDesign
 * @param dataSourceDesign2
 * @return
 */
private boolean isEqualDataSourceDesign(IBaseDataSourceDesign dataSourceDesign,IBaseDataSourceDesign dataSourceDesign2){
  if (dataSourceDesign == dataSourceDesign2)   return true;
  if (dataSourceDesign == null || dataSourceDesign2 == null)   return false;
  if (!isEqualString(dataSourceDesign.getName(),dataSourceDesign2.getName()))   return false;
  if (dataSourceDesign2.getBeforeOpenScript() != null || dataSourceDesign2.getAfterOpenScript() != null || dataSourceDesign2.getBeforeCloseScript() != null || dataSourceDesign2.getAfterCloseScript() != null)   return false;
  if (dataSourceDesign instanceof IOdaDataSourceDesign && dataSourceDesign2 instanceof IOdaDataSourceDesign) {
    IOdaDataSourceDesign dataSource=(IOdaDataSourceDesign)dataSourceDesign;
    IOdaDataSourceDesign dataSource2=(IOdaDataSourceDesign)dataSourceDesign2;
    if (isEqualString(dataSource.getExtensionID(),dataSource2.getExtensionID()) == false)     return false;
    if (isEqualProps(dataSource.getPublicProperties(),dataSource2.getPublicProperties()) == false || isEqualProps(dataSource.getPrivateProperties(),dataSource2.getPrivateProperties()) == false)     return false;
  }
 else   if (dataSourceDesign instanceof IScriptDataSourceDesign && dataSourceDesign2 instanceof IScriptDataSourceDesign) {
    IScriptDataSourceDesign dataSource=(IScriptDataSourceDesign)dataSourceDesign;
    IScriptDataSourceDesign dataSource2=(IScriptDataSourceDesign)dataSourceDesign2;
    if (isEqualString(dataSource.getOpenScript(),dataSource2.getOpenScript()) == false || isEqualString(dataSource.getCloseScript(),dataSource2.getCloseScript()) == false)     return false;
  }
  return true;
}",0.368281000532198
74625,"/** 
 * compare data set design
 * @param dataSetDesign
 * @param dataSetDesign2
 * @return
 */
private boolean isEqualDataSetDesign(IBaseDataSetDesign dataSetDesign,IBaseDataSetDesign dataSetDesign2){
  if (dataSetDesign == dataSetDesign2)   return true;
  if (dataSetDesign == null || dataSetDesign2 == null)   return false;
  if (!isEqualString(dataSetDesign.getName(),dataSetDesign2.getName()))   return false;
  if (dataSetDesign.getRowFetchLimit() != dataSetDesign2.getRowFetchLimit()) {
    return false;
  }
  if (isEqualString(dataSetDesign.getBeforeOpenScript(),dataSetDesign2.getBeforeOpenScript()) == false || isEqualString(dataSetDesign.getAfterOpenScript(),dataSetDesign2.getAfterOpenScript()) == false || isEqualString(dataSetDesign.getBeforeCloseScript(),dataSetDesign2.getBeforeCloseScript()) == false || isEqualString(dataSetDesign.getAfterCloseScript(),dataSetDesign2.getAfterCloseScript()) == false)   return false;
  if (isEqualComputedColumns(dataSetDesign.getComputedColumns(),dataSetDesign2.getComputedColumns()) == false || isEqualFilters(dataSetDesign.getFilters(),dataSetDesign2.getFilters()) == false || isEqualParameters(dataSetDesign.getParameters(),dataSetDesign2.getParameters()) == false || isEqualResultHints(dataSetDesign.getResultSetHints(),dataSetDesign2.getResultSetHints()) == false)   return false;
  if (dataSetDesign.getCacheRowCount() != dataSetDesign2.getCacheRowCount())   return false;
  if (dataSetDesign instanceof IOdaDataSetDesign && dataSetDesign2 instanceof IOdaDataSetDesign) {
    IOdaDataSetDesign dataSet=(IOdaDataSetDesign)dataSetDesign;
    IOdaDataSetDesign dataSet2=(IOdaDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getQueryText(),dataSet2.getQueryText()) == false || isEqualString(dataSet.getExtensionID(),dataSet2.getExtensionID()) == false || isEqualString(dataSet.getPrimaryResultSetName(),dataSet2.getPrimaryResultSetName()) == false || isEqualProps(dataSet.getPublicProperties(),dataSet2.getPublicProperties()) == false || isEqualProps(dataSet.getPrivateProperties(),dataSet2.getPrivateProperties()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IScriptDataSetDesign && dataSetDesign2 instanceof IScriptDataSetDesign) {
    IScriptDataSetDesign dataSet=(IScriptDataSetDesign)dataSetDesign;
    IScriptDataSetDesign dataSet2=(IScriptDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getOpenScript(),dataSet2.getOpenScript()) == false || isEqualString(dataSet.getFetchScript(),dataSet2.getFetchScript()) == false || isEqualString(dataSet.getCloseScript(),dataSet2.getCloseScript()) == false || isEqualString(dataSet.getDescribeScript(),dataSet2.getDescribeScript()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IJointDataSetDesign && dataSetDesign2 instanceof IJointDataSetDesign) {
    IJointDataSetDesign design1=(IJointDataSetDesign)dataSetDesign;
    IJointDataSetDesign design2=(IJointDataSetDesign)dataSetDesign2;
    if (isEqualString(design1.getLeftDataSetDesignName(),design2.getLeftDataSetDesignName()) == false || isEqualString(design1.getRightDataSetDesignName(),design2.getRightDataSetDesignName()) == false || design1.getJoinType() != design2.getJoinType() || isEqualJointCondition(design1.getJoinConditions(),design2.getJoinConditions()) == false)     return false;
  }
 else {
    return false;
  }
  return true;
}","/** 
 * compare data set design
 * @param dataSetDesign
 * @param dataSetDesign2
 * @return
 */
private boolean isEqualDataSetDesign(IBaseDataSetDesign dataSetDesign,IBaseDataSetDesign dataSetDesign2){
  if (dataSetDesign == dataSetDesign2)   return true;
  if (dataSetDesign == null || dataSetDesign2 == null)   return false;
  if (!isEqualString(dataSetDesign.getName(),dataSetDesign2.getName()))   return false;
  if (dataSetDesign.getRowFetchLimit() != dataSetDesign2.getRowFetchLimit()) {
    return false;
  }
  if (dataSetDesign2.getBeforeOpenScript() != null || dataSetDesign2.getAfterOpenScript() != null || dataSetDesign2.getBeforeCloseScript() != null || dataSetDesign2.getAfterCloseScript() != null || dataSetDesign2.getOnFetchScript() != null)   return false;
  if (isEqualComputedColumns(dataSetDesign.getComputedColumns(),dataSetDesign2.getComputedColumns()) == false || isEqualFilters(dataSetDesign.getFilters(),dataSetDesign2.getFilters()) == false || isEqualParameters(dataSetDesign.getParameters(),dataSetDesign2.getParameters()) == false || isEqualResultHints(dataSetDesign.getResultSetHints(),dataSetDesign2.getResultSetHints()) == false)   return false;
  if (dataSetDesign.getCacheRowCount() != dataSetDesign2.getCacheRowCount())   return false;
  if (dataSetDesign instanceof IOdaDataSetDesign && dataSetDesign2 instanceof IOdaDataSetDesign) {
    IOdaDataSetDesign dataSet=(IOdaDataSetDesign)dataSetDesign;
    IOdaDataSetDesign dataSet2=(IOdaDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getQueryText(),dataSet2.getQueryText()) == false || isEqualString(dataSet.getExtensionID(),dataSet2.getExtensionID()) == false || isEqualString(dataSet.getPrimaryResultSetName(),dataSet2.getPrimaryResultSetName()) == false || isEqualProps(dataSet.getPublicProperties(),dataSet2.getPublicProperties()) == false || isEqualProps(dataSet.getPrivateProperties(),dataSet2.getPrivateProperties()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IScriptDataSetDesign && dataSetDesign2 instanceof IScriptDataSetDesign) {
    IScriptDataSetDesign dataSet=(IScriptDataSetDesign)dataSetDesign;
    IScriptDataSetDesign dataSet2=(IScriptDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getOpenScript(),dataSet2.getOpenScript()) == false || isEqualString(dataSet.getFetchScript(),dataSet2.getFetchScript()) == false || isEqualString(dataSet.getCloseScript(),dataSet2.getCloseScript()) == false || isEqualString(dataSet.getDescribeScript(),dataSet2.getDescribeScript()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IJointDataSetDesign && dataSetDesign2 instanceof IJointDataSetDesign) {
    IJointDataSetDesign design1=(IJointDataSetDesign)dataSetDesign;
    IJointDataSetDesign design2=(IJointDataSetDesign)dataSetDesign2;
    if (isEqualString(design1.getLeftDataSetDesignName(),design2.getLeftDataSetDesignName()) == false || isEqualString(design1.getRightDataSetDesignName(),design2.getRightDataSetDesignName()) == false || design1.getJoinType() != design2.getJoinType() || isEqualJointCondition(design1.getJoinConditions(),design2.getJoinConditions()) == false)     return false;
  }
 else {
    return false;
  }
  return true;
}",0.4072439506924364
74626,"/** 
 * Remember before requesting any service, this function must be called in advance to make sure using current data source and data set.
 * @param dataSourceDesign
 * @param datasetDesign
 */
public void setDataSourceAndDataSet(IBaseDataSourceDesign dataSourceDesign,IBaseDataSetDesign dataSetDesign,Collection parameterHints,Map appContext){
  this.dataSourceDesign=dataSourceDesign;
  this.dataSetDesign=dataSetDesign;
  this.parameterHints=parameterHints;
  this.appContext=appContext;
}","/** 
 * Remember before requesting any service, this function must be called in advance to make sure using current data source and data set.
 * @param dataSourceDesign
 * @param datasetDesign
 */
public void setDataSourceAndDataSet(IBaseDataSourceDesign dataSourceDesign,IBaseDataSetDesign dataSetDesign,Collection parameterHints,Map appContext){
  this.dataSourceDesign=dataSourceDesign;
  this.dataSetDesign=dataSetDesign;
  this.parameterHints=parameterHints;
  this.appContext=appContext;
  setRowFetchLimit();
}",0.9782178217821782
74627,"/** 
 * Tests whether the given connection properties can be used to obtain a connection.
 * @param driverClassName the name of driver class
 * @param connectionString the JDBC driver connection URL
 * @param jndiNameUrl   the JNDI name to look up a Data Source name service; may be null or empty
 * @param userId        the login user id
 * @param password      the login password
 * @return  true if the the specified properties are valid to obtain a connection;false otherwise
 * @throws OdaException 
 */
public boolean testConnection(String driverClassName,String connectionString,String jndiNameUrl,String userId,String password) throws OdaException {
  boolean canConnect=false;
  try {
    if (getDriverConnectionFactory(driverClassName) != null) {
      tryCreateConnection(driverClassName,connectionString,userId,password);
      return true;
    }
    if (jndiNameUrl != null) {
      Connection jndiDSConnection=getJndiDSConnection(driverClassName,jndiNameUrl,addUserAuthenticationProperties(null,userId,password));
      if (jndiDSConnection != null) {
        closeConnection(jndiDSConnection);
        return true;
      }
 else {
        throw new JDBCException(ResourceConstants.CANNOT_PARSE_JNDI,null);
      }
    }
    loadAndRegisterDriver(driverClassName,null);
    if (cachedDriversMap.get(driverClassName) == null) {
      Enumeration enumeration=DriverManager.getDrivers();
      while (enumeration.hasMoreElements()) {
        Driver driver=(Driver)enumeration.nextElement();
        if (isExpectedDriver(driver,driverClassName)) {
          if (driver.acceptsURL(connectionString)) {
            cachedDriversMap.put(driverClassName,driver);
            tryCreateConnection(driverClassName,connectionString,userId,password);
            canConnect=true;
            break;
          }
        }
      }
      if (!canConnect)       throw new JDBCException(ResourceConstants.CANNOT_PARSE_URL,null);
    }
 else {
      if (((Driver)this.cachedDriversMap.get(driverClassName)).acceptsURL(connectionString)) {
        tryCreateConnection(driverClassName,connectionString,userId,password);
        canConnect=true;
      }
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e.getLocalizedMessage(),null);
  }
  if (canConnect == false)   throw new JDBCException(ResourceConstants.NO_SUITABLE_DRIVER,null);
  return true;
}","/** 
 * Tests whether the given connection properties can be used to obtain a connection.
 * @param driverClassName the name of driver class
 * @param connectionString the JDBC driver connection URL
 * @param jndiNameUrl   the JNDI name to look up a Data Source name service; may be null or empty
 * @param userId        the login user id
 * @param password      the login password
 * @return  true if the the specified properties are valid to obtain a connection;false otherwise
 * @throws OdaException 
 */
public boolean testConnection(String driverClassName,String connectionString,String jndiNameUrl,String userId,String password) throws OdaException {
  boolean canConnect=false;
  try {
    if (getDriverConnectionFactory(driverClassName) != null) {
      tryCreateConnection(driverClassName,connectionString,userId,password);
      return true;
    }
    if (jndiNameUrl != null) {
      Connection jndiDSConnection=getJndiDSConnection(driverClassName,jndiNameUrl,addUserAuthenticationProperties(null,userId,password));
      if (jndiDSConnection != null) {
        closeConnection(jndiDSConnection);
        return true;
      }
 else       if (connectionString != null && connectionString.trim().length() > 0) {
        return testConnection(driverClassName,connectionString,userId,password);
      }
 else {
        throw new JDBCException(ResourceConstants.CANNOT_PARSE_JNDI,null);
      }
    }
    loadAndRegisterDriver(driverClassName,null);
    if (cachedDriversMap.get(driverClassName) == null) {
      Enumeration enumeration=DriverManager.getDrivers();
      while (enumeration.hasMoreElements()) {
        Driver driver=(Driver)enumeration.nextElement();
        if (isExpectedDriver(driver,driverClassName)) {
          if (driver.acceptsURL(connectionString)) {
            cachedDriversMap.put(driverClassName,driver);
            tryCreateConnection(driverClassName,connectionString,userId,password);
            canConnect=true;
            break;
          }
        }
      }
      if (!canConnect)       throw new JDBCException(ResourceConstants.CANNOT_PARSE_URL,null);
    }
 else {
      if (((Driver)this.cachedDriversMap.get(driverClassName)).acceptsURL(connectionString)) {
        tryCreateConnection(driverClassName,connectionString,userId,password);
        canConnect=true;
      }
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e.getLocalizedMessage(),null);
  }
  if (canConnect == false)   throw new JDBCException(ResourceConstants.NO_SUITABLE_DRIVER,null);
  return true;
}",0.9646433680768444
74628,"/** 
 */
private void setRowFetchLimit(){
  Object rowLimit=appContext.get(DataEngine.DATA_SET_CACHE_ROW_LIMIT);
  if (rowLimit != null) {
    try {
      this.dataSetDesign.setRowFetchLimit(Integer.parseInt(rowLimit.toString()));
    }
 catch (    NumberFormatException e) {
    }
  }
}","/** 
 */
private void setRowFetchLimit(){
  if (appContext != null) {
    Object rowLimit=appContext.get(DataEngine.DATA_SET_CACHE_ROW_LIMIT);
    if (rowLimit != null) {
      try {
        this.dataSetDesign.setRowFetchLimit(Integer.parseInt(rowLimit.toString()));
      }
 catch (      NumberFormatException e) {
      }
    }
  }
}",0.9003215434083601
74629,"public IBlob getBlob(int index) throws OdaException {
  assertNotNull(rs);
  try {
    java.sql.Blob blob=rs.getBlob(index);
    return new Blob(blob);
  }
 catch (  UnsupportedOperationException e1) {
    try {
      InputStream inputStream=rs.getBinaryStream(index);
      return new Blob(SqlBlobUtil.newBlob(inputStream));
    }
 catch (    SQLException e2) {
      throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_BLOB_VALUE,e2);
    }
  }
catch (  SQLException e) {
    try {
      byte[] bytes=rs.getBytes(index);
      return new Blob(SqlBlobUtil.newBlob(new ByteArrayInputStream(bytes)));
    }
 catch (    SQLException e2) {
      throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_BLOB_VALUE,e2);
    }
  }
}","public IBlob getBlob(int index) throws OdaException {
  assertNotNull(rs);
  try {
    java.sql.Blob blob=rs.getBlob(index);
    return new Blob(blob);
  }
 catch (  UnsupportedOperationException e1) {
    try {
      InputStream inputStream=rs.getBinaryStream(index);
      return new Blob(SqlBlobUtil.newBlob(inputStream));
    }
 catch (    SQLException e2) {
      throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_BLOB_VALUE,e2);
    }
  }
catch (  SQLException e) {
    try {
      byte[] bytes=rs.getBytes(index);
      if (bytes == null)       return null;
      return new Blob(SqlBlobUtil.newBlob(new ByteArrayInputStream(bytes)));
    }
 catch (    SQLException e2) {
      throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_BLOB_VALUE,e2);
    }
  }
}",0.9712793733681462
74630,"/** 
 * Get the parameter value from .rptconfig file if it does exist
 * @return the parameter value
 */
public static String getParamValue(DataSetHandle dataSetHandle,OdaDataSetParameterHandle paramDefn) throws DesignFileException {
  ModuleHandle moduleHandle=dataSetHandle.getModuleHandle();
  String designFileName=moduleHandle.getFileName();
  String reportConfigName=designFileName.substring(0,designFileName.length() - ""String_Node_Str"".length()) + ""String_Node_Str"";
  File file=new File(reportConfigName);
  if (file.exists()) {
    String paraName=paramDefn.getParamName();
    ScalarParameterHandle parameterHandle=(ScalarParameterHandle)moduleHandle.findParameter(paraName);
    paraName=paraName + ""String_Node_Str"" + parameterHandle.getID();
    SessionHandle sessionHandle=new DesignEngine(null).newSessionHandle(ULocale.US);
    ReportDesignHandle rdHandle=null;
    rdHandle=sessionHandle.openDesign(reportConfigName);
    if (rdHandle != null) {
      Iterator configVars=rdHandle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null) {
          String varName=prepareConfigVarName(configVar.getName());
          Object varValue=configVar.getValue();
          if (varName == null || varValue == null) {
            continue;
          }
          if (varName.equals(paraName)) {
            String value=(String)varValue;
            if (isToBeConverted(parameterHandle.getDataType())) {
              value=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(value) + ""String_Node_Str"";
            }
            return value;
          }
          if (isNullValue(varName,(String)varValue,paraName)) {
            return null;
          }
        }
      }
    }
  }
  return paramDefn.getDefaultValue();
}","/** 
 * Get the parameter value from .rptconfig file if it does exist
 * @return the parameter value
 */
public static String getParamValue(DataSetHandle dataSetHandle,OdaDataSetParameterHandle paramDefn) throws DesignFileException {
  ModuleHandle moduleHandle=dataSetHandle.getModuleHandle();
  String designFileName=moduleHandle.getFileName();
  String reportConfigName=designFileName.substring(0,designFileName.length() - ""String_Node_Str"".length()) + ""String_Node_Str"";
  File file=new File(reportConfigName);
  if (file.exists()) {
    String paraName=paramDefn.getParamName();
    ScalarParameterHandle parameterHandle=(ScalarParameterHandle)moduleHandle.findParameter(paraName);
    paraName=paraName + ""String_Node_Str"" + parameterHandle.getID();
    SessionHandle sessionHandle=new DesignEngine(null).newSessionHandle(ULocale.US);
    ReportDesignHandle rdHandle=null;
    rdHandle=sessionHandle.openDesign(reportConfigName);
    if (rdHandle != null) {
      Iterator configVars=rdHandle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null) {
          String varName=prepareConfigVarName(configVar.getName());
          Object varValue=configVar.getValue();
          if (varName == null || varValue == null) {
            continue;
          }
          if (varName.equals(paraName)) {
            String value=(String)varValue;
            if (isToBeConverted(parameterHandle.getDataType())) {
              value=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(value) + ""String_Node_Str"";
            }
            return value;
          }
          if (isNullValue(varName,(String)varValue,paraName)) {
            return null;
          }
        }
      }
    }
  }
  return ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)paramDefn).getParamName());
}",0.970266040688576
74631,"/** 
 * @throws IOException
 * @throws DataException 
 */
private Map getValueMap() throws IOException, DataException {
  Map valueMap=new HashMap();
  int exprCount=IOUtil.readInt(rowExprsDis);
  for (int i=0; i < exprCount; i++) {
    String exprID=this.exprKeys.get(i).toString();
    Object exprValue=IOUtil.readObject(rowExprsDis);
    if (RowSaveUtil.EXCEPTION_INDICATOR.equals(exprValue)) {
      valueMap.put(exprID,new DataException(ResourceConstants.READ_COLUMN_VALUE_FROM_DOCUMENT_ERROR,exprID));
      continue;
    }
    valueMap.put(exprID,exprValue);
  }
  java.util.Iterator it=this.dataSetExprKeys.keySet().iterator();
  while (it.hasNext()) {
    String key=it.next().toString();
    String value=(String)this.dataSetExprKeys.get(key);
    IResultObject o=this.dataSetData.getResultObject();
    try {
      valueMap.put(key,o == null ? null : DataTypeUtil.convert(o.getFieldValue(value),((Integer)this.bindingNameTypeMap.get(key)).intValue()));
    }
 catch (    BirtException e) {
      e.printStackTrace();
    }
  }
  return valueMap;
}","/** 
 * @throws IOException
 * @throws DataException 
 */
private Map getValueMap() throws IOException, DataException {
  Map valueMap=new HashMap();
  int exprCount=IOUtil.readInt(rowExprsDis);
  for (int i=0; i < exprCount; i++) {
    String exprID=this.exprKeys.get(i).toString();
    Object exprValue=IOUtil.readObject(rowExprsDis);
    if (RowSaveUtil.EXCEPTION_INDICATOR.equals(exprValue)) {
      valueMap.put(exprID,new DataException(ResourceConstants.READ_COLUMN_VALUE_FROM_DOCUMENT_ERROR,exprID));
      continue;
    }
    valueMap.put(exprID,exprValue);
  }
  java.util.Iterator it=this.dataSetExprKeys.keySet().iterator();
  while (it.hasNext()) {
    String key=it.next().toString();
    String value=(String)this.dataSetExprKeys.get(key);
    IResultObject o=this.dataSetData.getResultObject();
    try {
      valueMap.put(key,o == null ? null : DataTypeUtil.convert(o.getFieldValue(value),((Integer)this.bindingNameTypeMap.get(key)).intValue()));
    }
 catch (    BirtException e) {
    }
  }
  return valueMap;
}",0.987075155576831
74632,"/** 
 * @return
 */
public static int computeMemoryBufferSize(Map appContext){
  if (appContext == null)   return 10 * 1024 * 1024* 8;
  if (appContext.get(TEST_MEM_BUFFER_SIZE) != null) {
    return populateMemBufferSize(appContext.get(TEST_MEM_BUFFER_SIZE));
  }
  return populateMemBufferSize(appContext.get(DataEngine.MEMORY_BUFFER_SIZE)) * 1024 * 1024* 8;
}","/** 
 * @return
 */
public static long computeMemoryBufferSize(Map appContext){
  if (appContext == null)   return 10 * 1024 * 1024;
  if (appContext.get(TEST_MEM_BUFFER_SIZE) != null) {
    return populateMemBufferSize(appContext.get(TEST_MEM_BUFFER_SIZE));
  }
  return populateMemBufferSize(appContext.get(DataEngine.MEMORY_BUFFER_SIZE)) * 1024 * 1024;
}",0.9819193324061196
74633,"/** 
 * @param propValue
 * @return
 */
private static int populateMemBufferSize(Object propValue){
  String targetBufferSize=propValue == null ? ""String_Node_Str"" : propValue.toString();
  int memoryCacheSize=10;
  if (targetBufferSize != null)   memoryCacheSize=Integer.parseInt(targetBufferSize);
  return memoryCacheSize;
}","/** 
 * @param propValue
 * @return
 */
private static long populateMemBufferSize(Object propValue){
  String targetBufferSize=propValue == null ? ""String_Node_Str"" : propValue.toString();
  long memoryCacheSize=10;
  if (targetBufferSize != null)   memoryCacheSize=Long.parseLong(targetBufferSize);
  return memoryCacheSize == 0 ? 1 : memoryCacheSize;
}",0.9133627019089574
74634,"/** 
 * Populate all aggregation member in CubeQueryDefinition. For initial implementation: we only consider IMeasureDefintion we will take into consider to handle the aggregation definition in binding expression;
 * @param queryDefn
 * @return
 * @throws DataException 
 */
static CalculatedMember[] getCalculatedMembers(ICubeQueryDefinition queryDefn,Scriptable scope) throws DataException {
  List measureList=queryDefn.getMeasures();
  ICubeAggrDefn[] cubeAggrs=OlapExpressionUtil.getAggrDefns(queryDefn.getBindings());
  List cubeAggrBindingList=new ArrayList();
  for (int i=0; i < cubeAggrs.length; i++) {
    if (cubeAggrs[i].getAggrName() != null)     cubeAggrBindingList.add(cubeAggrs[i]);
  }
  if (measureList == null)   return new CalculatedMember[0];
  CalculatedMember[] calculatedMember=new CalculatedMember[measureList.size() + cubeAggrBindingList.size()];
  int index=0;
  List calculatedMemberList=new ArrayList();
  if (!measureList.isEmpty()) {
    List levelList=populateMeasureAggrOns(queryDefn);
    Iterator measureIter=measureList.iterator();
    while (measureIter.hasNext()) {
      MeasureDefinition measureDefn=(MeasureDefinition)measureIter.next();
      calculatedMember[index]=new CalculatedMember(measureDefn.getName(),measureDefn.getName(),levelList,measureDefn.getAggrFunction() == null ? IBuildInAggregation.TOTAL_SUM_FUNC : measureDefn.getAggrFunction(),0);
      calculatedMemberList.add(calculatedMember[index]);
      index++;
    }
  }
  if (!cubeAggrBindingList.isEmpty()) {
    int rsID=1;
    for (int i=0; i < cubeAggrBindingList.size(); i++) {
      int id=getResultSetIndex(calculatedMemberList,((ICubeAggrDefn)cubeAggrBindingList.get(i)).getAggrLevels());
      if (id == -1) {
        calculatedMember[index]=new CalculatedMember((ICubeAggrDefn)cubeAggrBindingList.get(i),rsID);
        calculatedMemberList.add(calculatedMember[index]);
        rsID++;
      }
 else {
        calculatedMember[index]=new CalculatedMember((ICubeAggrDefn)cubeAggrBindingList.get(i),id);
      }
      if (((ICubeAggrDefn)cubeAggrBindingList.get(i)).getFilter() != null) {
        IJSMeasureFilterEvalHelper filterEvalHelper=new JSMeasureFilterEvalHelper(scope,new FilterDefinition(((ICubeAggrDefn)cubeAggrBindingList.get(i)).getFilter()));
        calculatedMember[index].setFilterEvalHelper(filterEvalHelper);
      }
      index++;
    }
  }
  return calculatedMember;
}","/** 
 * Populate all aggregation member in CubeQueryDefinition. For initial implementation: we only consider IMeasureDefintion we will take into consider to handle the aggregation definition in binding expression;
 * @param queryDefn
 * @return
 * @throws DataException 
 */
static CalculatedMember[] getCalculatedMembers(ICubeQueryDefinition queryDefn,Scriptable scope) throws DataException {
  List measureList=queryDefn.getMeasures();
  ICubeAggrDefn[] cubeAggrs=OlapExpressionUtil.getAggrDefns(queryDefn.getBindings());
  List cubeAggrBindingList=new ArrayList();
  for (int i=0; i < cubeAggrs.length; i++) {
    if (cubeAggrs[i].getAggrName() != null)     cubeAggrBindingList.add(cubeAggrs[i]);
  }
  populateMeasureFromBinding(queryDefn);
  populateMeasureFromFilter(queryDefn);
  populateMeasureFromSort(queryDefn);
  if (measureList == null)   return new CalculatedMember[0];
  CalculatedMember[] calculatedMember=new CalculatedMember[measureList.size() + cubeAggrBindingList.size()];
  int index=0;
  List calculatedMemberList=new ArrayList();
  if (!measureList.isEmpty()) {
    List levelList=populateMeasureAggrOns(queryDefn);
    Iterator measureIter=measureList.iterator();
    while (measureIter.hasNext()) {
      MeasureDefinition measureDefn=(MeasureDefinition)measureIter.next();
      calculatedMember[index]=new CalculatedMember(measureDefn.getName(),measureDefn.getName(),levelList,measureDefn.getAggrFunction() == null ? IBuildInAggregation.TOTAL_SUM_FUNC : measureDefn.getAggrFunction(),0);
      calculatedMemberList.add(calculatedMember[index]);
      index++;
    }
  }
  if (!cubeAggrBindingList.isEmpty()) {
    int rsID=1;
    for (int i=0; i < cubeAggrBindingList.size(); i++) {
      int id=getResultSetIndex(calculatedMemberList,((ICubeAggrDefn)cubeAggrBindingList.get(i)).getAggrLevels());
      if (id == -1) {
        calculatedMember[index]=new CalculatedMember((ICubeAggrDefn)cubeAggrBindingList.get(i),rsID);
        calculatedMemberList.add(calculatedMember[index]);
        rsID++;
      }
 else {
        calculatedMember[index]=new CalculatedMember((ICubeAggrDefn)cubeAggrBindingList.get(i),id);
      }
      if (((ICubeAggrDefn)cubeAggrBindingList.get(i)).getFilter() != null) {
        IJSMeasureFilterEvalHelper filterEvalHelper=new JSMeasureFilterEvalHelper(scope,new FilterDefinition(((ICubeAggrDefn)cubeAggrBindingList.get(i)).getFilter()));
        calculatedMember[index].setFilterEvalHelper(filterEvalHelper);
      }
      index++;
    }
  }
  return calculatedMember;
}",0.97585717184013
74635,"/** 
 * @param dataSet
 * @param queryDefn
 * @param useColumnHints
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSet,QueryDefinition queryDefn,boolean useColumnHints,boolean useFilters,boolean clearCache,DataRequestSession session) throws BirtException {
  IBaseDataSetDesign dataSetDesign=session.getModelAdaptor().adaptDataSet(dataSet);
  if (clearCache) {
    IBaseDataSourceDesign dataSourceDesign=session.getModelAdaptor().adaptDataSource(dataSet.getDataSource());
    session.clearCache(dataSourceDesign,dataSetDesign);
  }
  if (!useColumnHints) {
    dataSetDesign.getResultSetHints().clear();
  }
  if (!useFilters) {
    dataSetDesign.getFilters().clear();
  }
  IQueryResults resultSet=executeQuery(session,queryDefn);
  saveResultToDataItems(dataSet,resultSet);
  return resultSet;
}","/** 
 * @param dataSet
 * @param queryDefn
 * @param useColumnHints
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSet,IQueryDefinition queryDefn,boolean useColumnHints,boolean useFilters,boolean clearCache,DataRequestSession session) throws BirtException {
  IBaseDataSetDesign dataSetDesign=session.getModelAdaptor().adaptDataSet(dataSet);
  if (clearCache) {
    IBaseDataSourceDesign dataSourceDesign=session.getModelAdaptor().adaptDataSource(dataSet.getDataSource());
    session.clearCache(dataSourceDesign,dataSetDesign);
  }
  if (!useColumnHints) {
    dataSetDesign.getResultSetHints().clear();
  }
  if (!useFilters) {
    dataSetDesign.getFilters().clear();
  }
  IQueryResults resultSet=executeQuery(session,queryDefn);
  saveResultToDataItems(dataSet,resultSet);
  return resultSet;
}",0.9994029850746268
74636,"/** 
 * @param session
 * @param queryDefn
 * @return
 * @throws BirtException
 */
private IQueryResults executeQuery(DataRequestSession session,QueryDefinition queryDefn) throws BirtException {
  IQueryResults resultSet=session.executeQuery(queryDefn,null,null,null);
  return resultSet;
}","/** 
 * @param session
 * @param queryDefn
 * @return
 * @throws BirtException
 */
private IQueryResults executeQuery(DataRequestSession session,IQueryDefinition queryDefn) throws BirtException {
  IQueryResults resultSet=session.executeQuery(queryDefn,null,null,null);
  return resultSet;
}",0.9982788296041308
74637,"private void refreshValues(){
  resultList.clear();
  if (columnChooser.isEnabled()) {
    ResultSetColumnHandle selectedColumn=null;
    try {
      BaseQueryDefinition query=(BaseQueryDefinition)DataUtil.getPreparedQuery(engine,getDataSetHandle()).getReportQueryDefn();
      String queryExpr=null;
      for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
        ResultSetColumnHandle column=(ResultSetColumnHandle)iter.next();
        if (column.getColumnName().equals(columnChooser.getText())) {
          queryExpr=DEUtil.getResultSetColumnExpression(column.getColumnName());
          selectedColumn=column;
          break;
        }
      }
      if (queryExpr == null) {
        return;
      }
      ScriptExpression expression=new ScriptExpression(queryExpr);
      String columnBindingName=""String_Node_Str"";
      query.addResultSetExpression(columnBindingName,expression);
      IPreparedQuery preparedQuery=engine.prepare((IQueryDefinition)query);
      IQueryResults results=preparedQuery.execute(null);
      if (results != null) {
        IResultIterator iter=results.getResultIterator();
        if (iter != null) {
          while (iter.next()) {
            String result=null;
            result=iter.getString(columnBindingName);
            if (!StringUtil.isBlank(result) && !resultList.contains(result)) {
              resultList.add(result);
            }
          }
        }
        results.close();
      }
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
      valueList.removeAll();
      valueList.deselectAll();
      updateButtons();
    }
    filteValues();
  }
 else {
    valueList.removeAll();
    valueList.deselectAll();
    updateButtons();
  }
}","private void refreshValues(){
  resultList.clear();
  if (columnChooser.isEnabled()) {
    ResultSetColumnHandle selectedColumn=null;
    try {
      IQueryDefinition query=DataUtil.getPreparedQuery(engine,getDataSetHandle()).getReportQueryDefn();
      String queryExpr=null;
      for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
        ResultSetColumnHandle column=(ResultSetColumnHandle)iter.next();
        if (column.getColumnName().equals(columnChooser.getText())) {
          queryExpr=DEUtil.getResultSetColumnExpression(column.getColumnName());
          selectedColumn=column;
          break;
        }
      }
      if (queryExpr == null) {
        return;
      }
      ScriptExpression expression=new ScriptExpression(queryExpr);
      String columnBindingName=""String_Node_Str"";
      Binding binding=new Binding(columnBindingName);
      binding.setExpression(expression);
      if (expression != null)       binding.setDataType(expression.getDataType());
      query.addBinding(binding);
      DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,getDataSetHandle().getModuleHandle());
      DataRequestSession session=DataRequestSession.newSession(context);
      IQueryResults results=DataSetProvider.getCurrentInstance().execute(getDataSetHandle(),query,true,true,true,session);
      if (results != null) {
        IResultIterator iter=results.getResultIterator();
        if (iter != null) {
          while (iter.next()) {
            String result=null;
            result=iter.getString(columnBindingName);
            if (!StringUtil.isBlank(result) && !resultList.contains(result)) {
              resultList.add(result);
            }
          }
        }
        results.close();
        session.shutdown();
      }
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
      valueList.removeAll();
      valueList.deselectAll();
      updateButtons();
    }
    filteValues();
  }
 else {
    valueList.removeAll();
    valueList.deselectAll();
    updateButtons();
  }
}",0.8077024531785808
74638,"/** 
 * Use a default data engine to execute a query. Since Data Engine needs to know the data source and data set definition, the moduleHandle needs to be passed to let DtE get these necessary information.
 * @param queryDefn
 * @param paramBindingIt
 * @param filterIt
 * @param bindingIt
 * @return query results of specified query definition
 * @exception BirtException any error in execute query to get the query results
 */
public abstract IQueryResults executeQuery(QueryDefinition queryDefn,Iterator inputParamBindings,Iterator filterIt,Iterator columnBindings) throws BirtException ;","/** 
 * Use a default data engine to execute a query. Since Data Engine needs to know the data source and data set definition, the moduleHandle needs to be passed to let DtE get these necessary information.
 * @param queryDefn
 * @param paramBindingIt
 * @param filterIt
 * @param bindingIt
 * @return query results of specified query definition
 * @exception BirtException any error in execute query to get the query results
 */
public abstract IQueryResults executeQuery(IQueryDefinition queryDefn,Iterator inputParamBindings,Iterator filterIt,Iterator columnBindings) throws BirtException ;",0.99915611814346
74639,"public IQueryResults executeQuery(QueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt) throws BirtException {
  return new QueryExecutionHelper(this.dataEngine,this.modelAdaptor,this.sessionContext).executeQuery(queryDefn,paramBindingIt,filterIt,bindingIt);
}","public IQueryResults executeQuery(IQueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt) throws BirtException {
  return new QueryExecutionHelper(this.dataEngine,this.modelAdaptor,this.sessionContext).executeQuery(queryDefn,paramBindingIt,filterIt,bindingIt);
}",0.99830220713073
74640,"/** 
 * @param queryDefn
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSourceDataSet(QueryDefinition queryDefn) throws AdapterException, BirtException {
  String dataSetName=queryDefn.getDataSetName();
  ModuleHandle module=sessionContext.getModuleHandle();
  if (module != null) {
    List l=module.getAllDataSets();
    DataSetHandle handle=null;
    for (int i=0; i < l.size(); i++) {
      if (((DataSetHandle)l.get(i)).getQualifiedName() != null && ((DataSetHandle)l.get(i)).getQualifiedName().equals(dataSetName)) {
        handle=(DataSetHandle)l.get(i);
      }
    }
    major=handle;
    defineDataSet(handle);
  }
}","/** 
 * @param queryDefn
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSourceDataSet(IQueryDefinition queryDefn) throws AdapterException, BirtException {
  String dataSetName=queryDefn.getDataSetName();
  ModuleHandle module=sessionContext.getModuleHandle();
  if (module != null) {
    List l=module.getAllDataSets();
    DataSetHandle handle=null;
    for (int i=0; i < l.size(); i++) {
      if (((DataSetHandle)l.get(i)).getQualifiedName() != null && ((DataSetHandle)l.get(i)).getQualifiedName().equals(dataSetName)) {
        handle=(DataSetHandle)l.get(i);
      }
    }
    major=handle;
    defineDataSet(handle);
  }
}",0.9992429977289932
74641,"/** 
 * @param queryDefn
 * @param paramBindingIt
 * @param filterIt
 * @param bindingIt
 * @throws AdapterException 
 */
private void populateQueryDefn(QueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt) throws AdapterException {
  try {
    while (bindingIt != null && bindingIt.hasNext()) {
      IComputedColumn column=this.modelAdaptor.adaptComputedColumn((ComputedColumnHandle)bindingIt.next());
      IBinding binding=new Binding(column.getName(),(ScriptExpression)column.getExpression());
      binding.setDataType(column.getDataType());
      queryDefn.addBinding(binding);
    }
    List parameterBindings=convertParamterBindings(paramBindingIt);
    if (parameterBindings != null)     queryDefn.getInputParamBindings().addAll(parameterBindings);
    List filters=convertFilters(filterIt);
    if (filters != null)     queryDefn.getFilters().addAll(filters);
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}","/** 
 * @param queryDefn
 * @param paramBindingIt
 * @param filterIt
 * @param bindingIt
 * @throws AdapterException 
 */
private void populateQueryDefn(IQueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt) throws AdapterException {
  try {
    while (bindingIt != null && bindingIt.hasNext()) {
      IComputedColumn column=this.modelAdaptor.adaptComputedColumn((ComputedColumnHandle)bindingIt.next());
      IBinding binding=new Binding(column.getName(),(ScriptExpression)column.getExpression());
      binding.setDataType(column.getDataType());
      queryDefn.addBinding(binding);
    }
    List parameterBindings=convertParamterBindings(paramBindingIt);
    if (parameterBindings != null)     queryDefn.getInputParamBindings().addAll(parameterBindings);
    List filters=convertFilters(filterIt);
    if (filters != null)     queryDefn.getFilters().addAll(filters);
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}",0.9995002498750624
74642,"/** 
 * @param queryDefn
 * @param paramBindingIt
 * @param filterIt
 * @param bindingIt
 * @return
 * @throws BirtException
 */
IQueryResults executeQuery(QueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt) throws BirtException {
  defineDataSourceDataSet(queryDefn);
  populateQueryDefn(queryDefn,paramBindingIt,filterIt,bindingIt);
  return dataEngine.prepare(queryDefn,sessionContext.getAppContext()).execute(null);
}","/** 
 * @param queryDefn
 * @param paramBindingIt
 * @param filterIt
 * @param bindingIt
 * @return
 * @throws BirtException
 */
IQueryResults executeQuery(IQueryDefinition queryDefn,Iterator paramBindingIt,Iterator filterIt,Iterator bindingIt) throws BirtException {
  defineDataSourceDataSet(queryDefn);
  populateQueryDefn(queryDefn,paramBindingIt,filterIt,bindingIt);
  return dataEngine.prepare(queryDefn,sessionContext.getAppContext()).execute(null);
}",0.9989071038251366
74643,"/** 
 * Found drivers in the Jar file List
 * @param file
 * @return a List of JDBCDriverInformation
 */
public static void getJdbcDriverFromFile(List fileList){
  if (!failLoadFileList.isEmpty()) {
    fileList.addAll(failLoadFileList);
  }
  URLClassLoader urlClassLoader=createClassLoader(fileList);
  jdbcDriverInfos.addAll(getJDBCDriverInfoList(fileList,urlClassLoader));
}","/** 
 * Found drivers in the Jar file List
 * @param file
 * @return a List of JDBCDriverInformation
 */
public static void getJdbcDriverFromFile(List fileList){
  if (!failLoadFileList.isEmpty()) {
    for (int i=0; i < failLoadFileList.size(); i++) {
      if (!fileList.contains(failLoadFileList.get(i))) {
        fileList.add(failLoadFileList.get(i));
      }
    }
  }
  URLClassLoader urlClassLoader=createClassLoader(fileList);
  jdbcDriverInfos.addAll(getJDBCDriverInfoList(fileList,urlClassLoader));
}",0.7784026996625422
74644,"public void testAdd(){
}","public void testAdd(){
  String script1=""String_Node_Str"";
  String script2=""String_Node_Str"";
  String script3=""String_Node_Str"";
  assertEquals(((Number)cx.evaluateString(scope,script1,""String_Node_Str"",1,null)).doubleValue(),1,0);
  assertEquals(((Number)cx.evaluateString(scope,script2,""String_Node_Str"",1,null)).doubleValue(),1,0);
  assertEquals(((Number)cx.evaluateString(scope,script3,""String_Node_Str"",1,null)).doubleValue(),2,0);
}",0.1032258064516129
74645,"/** 
 * Copies all values from element to newElement. Structure, element reference values, etc. are dumped as a new copy.
 * @param element the source element
 * @param newElement the target element
 */
private void localizePropertyValues(DesignElement element,DesignElement newElement){
  localizeUserPropDefn(element,newElement);
  Module root=element.getRoot();
  if (element instanceof IExtendableElement)   ModelUtil.duplicateExtensionIdentifier(element,newElement,root);
  Iterator iter=element.getPropertyDefns().iterator();
  while (iter.hasNext()) {
    ElementPropertyDefn propDefn=(ElementPropertyDefn)iter.next();
    String propName=propDefn.getName();
    if (IDesignElementModel.EXTENDS_PROP.equals(propName) || IDesignElementModel.USER_PROPERTIES_PROP.equals(propName) || IModuleModel.THEME_PROP.equals(propName)|| IModuleModel.LIBRARIES_PROP.equals(propName)|| IModuleModel.PROPERTY_BINDINGS_PROP.equals(propName))     continue;
    if ((propDefn.isStyleProperty() && !(element instanceof Style)) || IStyledElementModel.STYLE_PROP.equals(propName))     continue;
    Object value=element.getStrategy().getPropertyFromElement(root,element,propDefn);
    if (value == null)     continue;
switch (propDefn.getTypeCode()) {
case IPropertyType.ELEMENT_REF_TYPE:
      handleElementRefValue(newElement,propDefn,(ElementRefValue)value);
    break;
case IPropertyType.STRUCT_REF_TYPE:
  handleStructureRefValue(newElement,propDefn,(StructRefValue)value);
break;
case IPropertyType.LIST_TYPE:
if (propDefn.getSubTypeCode() == IPropertyType.ELEMENT_REF_TYPE) {
handleElementRefValueList(newElement,propDefn,(List)value);
}
 else if (newElement.getLocalProperty(null,propDefn) == null) newElement.setProperty(propDefn,ModelUtil.copyValue(propDefn,value));
break;
case IPropertyType.STRUCT_TYPE:
if (newElement instanceof Cube && ITabularCubeModel.DIMENSION_CONDITIONS_PROP.equals(propDefn.getName()) && element.getRoot() == sourceDesign) handleDimensionConditions((Cube)newElement,(Cube)element);
 else handleStructureValue(newElement,propDefn,value);
break;
case IPropertyType.ELEMENT_TYPE:
break;
case IPropertyType.CONTENT_ELEMENT_TYPE:
handleContentElementValue(newElement,propDefn,value);
break;
default :
if (newElement.getLocalProperty(null,propDefn) == null) newElement.setProperty(propDefn,value);
}
}
}","/** 
 * Copies all values from element to newElement. Structure, element reference values, etc. are dumped as a new copy.
 * @param element the source element
 * @param newElement the target element
 */
private void localizePropertyValues(DesignElement element,DesignElement newElement){
  localizeUserPropDefn(element,newElement);
  Module root=element.getRoot();
  if (element instanceof IExtendableElement)   ModelUtil.duplicateExtensionIdentifier(element,newElement,root);
  Iterator iter=element.getPropertyDefns().iterator();
  while (iter.hasNext()) {
    ElementPropertyDefn propDefn=(ElementPropertyDefn)iter.next();
    String propName=propDefn.getName();
    if (IDesignElementModel.EXTENDS_PROP.equals(propName) || IDesignElementModel.USER_PROPERTIES_PROP.equals(propName) || IModuleModel.THEME_PROP.equals(propName)|| IModuleModel.LIBRARIES_PROP.equals(propName)|| IModuleModel.PROPERTY_BINDINGS_PROP.equals(propName))     continue;
    if ((propDefn.isStyleProperty() && !(element instanceof Style)) || IStyledElementModel.STYLE_PROP.equals(propName))     continue;
    Object value=element.getStrategy().getPropertyFromElement(root,element,propDefn);
    if (value == null)     continue;
switch (propDefn.getTypeCode()) {
case IPropertyType.ELEMENT_REF_TYPE:
      handleElementRefValue(newElement,propDefn,(ElementRefValue)value);
    break;
case IPropertyType.STRUCT_REF_TYPE:
  handleStructureRefValue(newElement,propDefn,(StructRefValue)value);
break;
case IPropertyType.LIST_TYPE:
if (propDefn.getSubTypeCode() == IPropertyType.ELEMENT_REF_TYPE) {
handleElementRefValueList(newElement,propDefn,(List)value);
}
 else if (newElement.getLocalProperty(null,propDefn) == null) newElement.setProperty(propDefn,ModelUtil.copyValue(propDefn,value));
break;
case IPropertyType.STRUCT_TYPE:
if (newElement instanceof Cube && ITabularCubeModel.DIMENSION_CONDITIONS_PROP.equals(propDefn.getName()) && element.getRoot() == sourceDesign) handleDimensionConditions((Cube)newElement,(Cube)element);
 else handleStructureValue(newElement,propDefn,value);
break;
case IPropertyType.ELEMENT_TYPE:
break;
case IPropertyType.CONTENT_ELEMENT_TYPE:
handleContentElementValue(newElement,propDefn,value);
break;
default :
if (newElement.getLocalProperty(null,propDefn) == null) {
if (propDefn.isEncryptable()) {
String encryption=element.getEncryptionID(propDefn);
newElement.setEncryptionHelper(propDefn,encryption);
value=ModelUtil.encryptProperty(newElement,propDefn,encryption,value);
newElement.setProperty(propDefn,value);
}
 else newElement.setProperty(propDefn,value);
}
}
}
}",0.9393506228303042
74646,"/** 
 * Get resourceBundle based on given locale
 * @return
 */
private static ResourceBundle getResourceBundle(){
  if (resourceBundle == null) {
synchronized (Thread.currentThread()) {
      if (resourceBundle != null)       return resourceBundle;
      if (currentLocale != null)       resourceBundle=DataResourceHandle.getInstance(currentLocale).getUResourceBundle();
 else       resourceBundle=DataResourceHandle.getInstance().getUResourceBundle();
    }
  }
  return resourceBundle;
}","/** 
 * Get resourceBundle based on given locale
 * @return
 */
private static ResourceBundle getResourceBundle(){
  if (resourceBundle == null) {
synchronized (DataException.class) {
      if (resourceBundle != null)       return resourceBundle;
      if (currentLocale != null)       resourceBundle=DataResourceHandle.getInstance(currentLocale).getUResourceBundle();
 else       resourceBundle=DataResourceHandle.getInstance().getUResourceBundle();
    }
  }
  return resourceBundle;
}",0.962128966223132
74647,"/** 
 * Set the locale info
 * @param locale
 */
public static void setLocale(ULocale locale){
  currentLocale=locale;
  if (resourceBundle != null) {
synchronized (Thread.currentThread()) {
      if (resourceBundle == null)       return;
      if ((locale == null && !ULocale.getDefault().toLocale().equals(resourceBundle.getLocale())) || (locale != null && !locale.toLocale().equals(resourceBundle.getLocale()))) {
        resourceBundle=null;
      }
    }
  }
}","/** 
 * Set the locale info
 * @param locale
 */
public static void setLocale(ULocale locale){
  currentLocale=locale;
  if (resourceBundle != null) {
synchronized (DataException.class) {
      if (resourceBundle == null)       return;
      if ((locale == null && !ULocale.getDefault().toLocale().equals(resourceBundle.getLocale())) || (locale != null && !locale.toLocale().equals(resourceBundle.getLocale()))) {
        resourceBundle=null;
      }
    }
  }
}",0.9557713052858684
74648,"/** 
 * populate all available value in selectValueList
 */
private void populateList(){
  try {
    getOkButton().setEnabled(false);
    selectValueList.removeAll();
    viewerValueList.clear();
    if (modelValueList != null) {
      Iterator iter=modelValueList.iterator();
      while (iter.hasNext()) {
        Object candiateValue=iter.next();
        if (candiateValue != null) {
          Object displayCandiateValue;
          if (candiateValue instanceof Date && !(candiateValue instanceof java.sql.Date || candiateValue instanceof java.sql.Time)) {
            DateFormatter formatter=new DateFormatter(ULocale.US);
            formatter.applyPattern(""String_Node_Str"");
            displayCandiateValue=formatter.format((Date)candiateValue);
          }
 else           displayCandiateValue=candiateValue;
          viewerValueList.add(displayCandiateValue.toString());
          selectValueList.add(displayCandiateValue.toString());
        }
      }
    }
 else {
      selectValueList.removeAll();
      modelValueList.clear();
      viewerValueList.clear();
      ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (selectValueList.getItemCount() > 0) {
      selectValueList.select(0);
      getOkButton().setEnabled(true);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}","/** 
 * populate all available value in selectValueList
 */
private void populateList(){
  try {
    getOkButton().setEnabled(false);
    selectValueList.removeAll();
    viewerValueList.clear();
    if (modelValueList != null) {
      Iterator iter=modelValueList.iterator();
      DateFormatter formatter=new DateFormatter(ULocale.US);
      while (iter.hasNext()) {
        Object candiateValue=iter.next();
        if (candiateValue != null) {
          Object displayCandiateValue;
          if (candiateValue instanceof java.sql.Date) {
            formatter.applyPattern(""String_Node_Str"");
            displayCandiateValue=formatter.format((Date)candiateValue);
          }
 else           if (candiateValue instanceof java.sql.Time) {
            formatter.applyPattern(""String_Node_Str"");
            displayCandiateValue=formatter.format((Date)candiateValue);
          }
 else           if (candiateValue instanceof Date) {
            formatter.applyPattern(""String_Node_Str"");
            displayCandiateValue=formatter.format((Date)candiateValue);
          }
 else           displayCandiateValue=candiateValue;
          viewerValueList.add(displayCandiateValue.toString());
          selectValueList.add(displayCandiateValue.toString());
        }
      }
    }
 else {
      selectValueList.removeAll();
      modelValueList.clear();
      viewerValueList.clear();
      ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (selectValueList.getItemCount() > 0) {
      selectValueList.select(0);
      getOkButton().setEnabled(true);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}",0.5600517966979605
74649,"/** 
 * @param date
 * @return
 */
private static java.sql.Date toSqlDate(Date date){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(date.getTime());
  calendar.set(Calendar.HOUR_OF_DAY,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.SECOND,0);
  return new java.sql.Date(calendar.getTimeInMillis());
}","/** 
 * @param date
 * @return
 */
private static java.sql.Date toSqlDate(Date date){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(date.getTime());
  calendar.set(Calendar.HOUR_OF_DAY,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MILLISECOND,0);
  return new java.sql.Date(calendar.getTimeInMillis());
}",0.94750656167979
74650,"/** 
 * @param date
 * @return
 */
private static java.sql.Time toSqlTime(Date date){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(date.getTime());
  calendar.set(Calendar.YEAR,1970);
  calendar.set(Calendar.MONTH,0);
  calendar.set(Calendar.DAY_OF_MONTH,1);
  return new java.sql.Time(calendar.getTimeInMillis());
}","/** 
 * @param date
 * @return
 */
private static java.sql.Time toSqlTime(Date date){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(date.getTime());
  calendar.set(Calendar.YEAR,1970);
  calendar.set(Calendar.MONTH,0);
  calendar.set(Calendar.DAY_OF_MONTH,1);
  calendar.set(Calendar.MILLISECOND,0);
  return new java.sql.Time(calendar.getTimeInMillis());
}",0.9476439790575916
74651,"public Object get(String name,Scriptable start){
  if (""String_Node_Str"".equalsIgnoreCase(name)) {
    if (this.helper.getParent() != null)     return helper.getParent().getJSRowObject();
 else     return null;
  }
  int rowIndex=-1;
  try {
    rowIndex=odiResult.getCurrentResultIndex();
  }
 catch (  BirtException e1) {
  }
  if (""String_Node_Str"".equalsIgnoreCase(name) || ""String_Node_Str"".equalsIgnoreCase(name)) {
    return new Integer(rowIndex);
  }
  if (rowIndex == currRowIndex && valueCacheMap.containsKey(name)) {
    return valueCacheMap.get(name);
  }
 else {
    Object value=null;
    try {
      IBinding binding=this.exprManager.getBinding(name);
      if (binding == null) {
        return new DataExceptionMocker(new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,name));
      }
      if (binding.getAggrFunction() != null)       return this.odiResult.getAggrValue(name);
      IBaseExpression dataExpr=this.exprManager.getExpr(name);
      if (dataExpr == null) {
        return new DataExceptionMocker(new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,name));
      }
      value=ExprEvaluateUtil.evaluateValue(dataExpr,this.odiResult.getCurrentResultIndex(),this.odiResult.getCurrentResult(),this.scope);
    }
 catch (    BirtException e) {
      value=null;
    }
    if (this.currRowIndex != rowIndex) {
      this.valueCacheMap.clear();
      this.currRowIndex=rowIndex;
    }
    value=JavascriptEvalUtil.convertToJavascriptValue(value,this.scope);
    valueCacheMap.put(name,value);
    return value;
  }
}","public Object get(String name,Scriptable start){
  if (""String_Node_Str"".equalsIgnoreCase(name)) {
    if (this.helper.getParent() != null)     return helper.getParent().getJSRowObject();
 else     return null;
  }
  int rowIndex=-1;
  try {
    rowIndex=odiResult.getCurrentResultIndex();
  }
 catch (  BirtException e1) {
  }
  if (""String_Node_Str"".equalsIgnoreCase(name) || ""String_Node_Str"".equalsIgnoreCase(name)) {
    return new Integer(rowIndex);
  }
  if (rowIndex == currRowIndex && valueCacheMap.containsKey(name)) {
    return valueCacheMap.get(name);
  }
 else {
    Object value=null;
    try {
      IBinding binding=this.exprManager.getBinding(name);
      if (binding == null) {
        return new DataExceptionMocker(new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,name));
      }
      if (binding.getAggrFunction() != null)       return this.odiResult.getAggrValue(name);
      IBaseExpression dataExpr=this.exprManager.getExpr(name);
      if (dataExpr == null) {
        return new DataExceptionMocker(new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,name));
      }
      value=ExprEvaluateUtil.evaluateValue(dataExpr,this.odiResult.getCurrentResultIndex(),this.odiResult.getCurrentResult(),this.scope);
      value=JavascriptEvalUtil.convertToJavascriptValue(DataTypeUtil.convert(value,binding.getDataType()),this.scope);
    }
 catch (    BirtException e) {
      value=null;
    }
    if (this.currRowIndex != rowIndex) {
      this.valueCacheMap.clear();
      this.currRowIndex=rowIndex;
    }
    valueCacheMap.put(name,value);
    return value;
  }
}",0.9293375394321768
74652,"/** 
 * Get resourceBundle based on given locale
 * @return
 */
private static ResourceBundle getResourceBundle(){
  if (resourceBundle == null) {
    if (currentLocale != null)     resourceBundle=DataResourceHandle.getInstance(currentLocale).getUResourceBundle();
 else     resourceBundle=DataResourceHandle.getInstance().getUResourceBundle();
  }
  return resourceBundle;
}","/** 
 * Get resourceBundle based on given locale
 * @return
 */
private static ResourceBundle getResourceBundle(){
  if (resourceBundle == null) {
synchronized (resourceBundle) {
      if (resourceBundle != null)       return resourceBundle;
      if (currentLocale != null)       resourceBundle=DataResourceHandle.getInstance(currentLocale).getUResourceBundle();
 else       resourceBundle=DataResourceHandle.getInstance().getUResourceBundle();
    }
  }
  return resourceBundle;
}",0.8751458576429405
74653,"/** 
 * Set the locale info
 * @param locale
 */
public static void setLocale(ULocale locale){
  currentLocale=locale;
  if (resourceBundle != null) {
    if ((locale == null && !ULocale.getDefault().toLocale().equals(resourceBundle.getLocale())) || (locale != null && !locale.toLocale().equals(resourceBundle.getLocale()))) {
      resourceBundle=null;
    }
  }
}","/** 
 * Set the locale info
 * @param locale
 */
public static void setLocale(ULocale locale){
  currentLocale=locale;
  if (resourceBundle != null) {
synchronized (resourceBundle) {
      if (resourceBundle == null)       return;
      if ((locale == null && !ULocale.getDefault().toLocale().equals(resourceBundle.getLocale())) || (locale != null && !locale.toLocale().equals(resourceBundle.getLocale()))) {
        resourceBundle=null;
      }
    }
  }
}",0.8880778588807786
74654,"/** 
 * @throws DataException
 */
private void initSaveRowUtil() throws DataException {
  rowExprsOs=streamManager.getOutStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  rowLenOs=streamManager.getOutStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  Map bindingNameColumnName=new HashMap();
  Set bindingNamesToSave=new HashSet();
  Iterator it=this.queryDefn.getBindings().keySet().iterator();
  while (it.hasNext()) {
    String key=it.next().toString();
    IBinding binding=(IBinding)this.queryDefn.getBindings().get(key);
    if (this.streamManager.getVersion() >= VersionManager.VERSION_2_2_1_3 && this.queryDefn instanceof QueryDefinition && ((QueryDefinition)this.queryDefn).getQueryResultsID() == null && binding.getAggregatOns().size() == 0 && binding.getAggrFunction() == null) {
      IBaseExpression expr=binding.getExpression();
      if (expr instanceof IScriptExpression) {
        String expression=((IScriptExpression)expr).getText();
        String dataSetColumnName=this.getDataSetColumnName(expression);
        if (dataSetColumnName != null) {
          bindingNameColumnName.put(binding.getBindingName(),dataSetColumnName);
        }
      }
    }
    if (bindingNameColumnName.get(binding.getBindingName()) == null)     bindingNamesToSave.add(binding.getBindingName());
  }
  this.rowSaveUtil=new RowSaveUtil(rowCount,rowExprsOs,rowLenOs,bindingNamesToSave,bindingNameColumnName,this.streamManager.getVersion());
}","/** 
 * @throws DataException
 */
private void initSaveRowUtil() throws DataException {
  rowExprsOs=streamManager.getOutStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  rowLenOs=streamManager.getOutStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  Map bindingNameColumnName=new HashMap();
  Set bindingNamesToSave=new HashSet();
  Map bindingNameType=new HashMap();
  Iterator it=this.queryDefn.getBindings().keySet().iterator();
  while (it.hasNext()) {
    String key=it.next().toString();
    IBinding binding=(IBinding)this.queryDefn.getBindings().get(key);
    if (this.streamManager.getVersion() >= VersionManager.VERSION_2_2_1_3 && this.queryDefn instanceof QueryDefinition && ((QueryDefinition)this.queryDefn).getQueryResultsID() == null && binding.getAggregatOns().size() == 0 && binding.getAggrFunction() == null) {
      IBaseExpression expr=binding.getExpression();
      if (expr instanceof IScriptExpression) {
        String expression=((IScriptExpression)expr).getText();
        String dataSetColumnName=this.getDataSetColumnName(expression);
        if (dataSetColumnName != null) {
          bindingNameColumnName.put(binding.getBindingName(),dataSetColumnName);
        }
      }
    }
    if (bindingNameColumnName.get(binding.getBindingName()) == null)     bindingNamesToSave.add(binding.getBindingName());
    bindingNameType.put(binding.getBindingName(),new Integer(binding.getDataType()));
  }
  this.rowSaveUtil=new RowSaveUtil(rowCount,rowExprsOs,rowLenOs,bindingNamesToSave,bindingNameColumnName,bindingNameType,this.streamManager.getVersion());
}",0.9566843253349954
74655,"/** 
 * @param rowCount
 * @param rowExprsOs
 * @param rowLenOs
 */
RowSaveUtil(int rowCount,OutputStream rowExprsOs,OutputStream rowLenOs,Set exprNameSet,Map directColumnReferenceExpr,int version){
  this.rowCount=rowCount;
  this.rowExprsDos=new DataOutputStream(rowExprsOs);
  this.rowLenDos=new DataOutputStream(rowLenOs);
  this.lastRowIndex=-1;
  this.exprNameSet=exprNameSet;
  this.directColumnReferenceBinding=directColumnReferenceExpr;
  this.version=version;
}","/** 
 * @param rowCount
 * @param rowExprsOs
 * @param rowLenOs
 */
RowSaveUtil(int rowCount,OutputStream rowExprsOs,OutputStream rowLenOs,Set exprNameSet,Map directColumnReferenceExpr,Map bindingNameType,int version){
  this.rowCount=rowCount;
  this.rowExprsDos=new DataOutputStream(rowExprsOs);
  this.rowLenDos=new DataOutputStream(rowLenOs);
  this.lastRowIndex=-1;
  this.exprNameSet=exprNameSet;
  this.directColumnReferenceBinding=directColumnReferenceExpr;
  this.bindingNameType=bindingNameType;
  this.version=version;
}",0.940119760479042
74656,"/** 
 * @param rowExprsRAIs
 * @param rowLenRAIs
 * @param version
 */
ExprDataReader1(RAInputStream rowExprsRAIs,RAInputStream rowLenRAIs,int version,DataSetResultSet dataSetData) throws DataException {
  this.INT_LENGTH=IOUtil.INT_LENGTH;
  try {
    this.rowCount=IOUtil.readInt(rowExprsRAIs);
    int exprCount=IOUtil.readInt(rowExprsRAIs);
    this.exprKeys=new ArrayList();
    this.dataSetExprKeys=new HashMap();
    this.rowExprsDis=new DataInputStream(rowExprsRAIs);
    for (int i=0; i < exprCount; i++) {
      this.exprKeys.add(IOUtil.readString(this.rowExprsDis));
    }
    if (version >= VersionManager.VERSION_2_2_1_3) {
      int dataSetColumnExprCount=IOUtil.readInt(this.rowExprsDis);
      for (int i=0; i < dataSetColumnExprCount; i++) {
        this.dataSetExprKeys.put(IOUtil.readObject(this.rowExprsDis),IOUtil.readObject(this.rowExprsDis));
      }
    }
    this.metaOffset=INT_LENGTH + IOUtil.readInt(this.rowExprsDis) + INT_LENGTH;
    this.dataSetData=dataSetData;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  this.rowExprsRAIs=rowExprsRAIs;
  this.rowLenRAIs=rowLenRAIs;
  this.rowLenDis=new DataInputStream(rowLenRAIs);
  this.version=version;
  this.currReadIndex=0;
  this.currRowIndex=-1;
}","/** 
 * @param rowExprsRAIs
 * @param rowLenRAIs
 * @param version
 */
ExprDataReader1(RAInputStream rowExprsRAIs,RAInputStream rowLenRAIs,int version,DataSetResultSet dataSetData) throws DataException {
  this.INT_LENGTH=IOUtil.INT_LENGTH;
  try {
    this.rowCount=IOUtil.readInt(rowExprsRAIs);
    int exprCount=IOUtil.readInt(rowExprsRAIs);
    this.exprKeys=new ArrayList();
    this.dataSetExprKeys=new HashMap();
    this.rowExprsDis=new DataInputStream(rowExprsRAIs);
    this.bindingNameTypeMap=new HashMap();
    for (int i=0; i < exprCount; i++) {
      String key=IOUtil.readString(this.rowExprsDis);
      this.exprKeys.add(key);
      if (version >= VersionManager.VERSION_2_2_1_3) {
        this.bindingNameTypeMap.put(key,new Integer(IOUtil.readInt(this.rowExprsDis)));
      }
    }
    if (version >= VersionManager.VERSION_2_2_1_3) {
      int dataSetColumnExprCount=IOUtil.readInt(this.rowExprsDis);
      for (int i=0; i < dataSetColumnExprCount; i++) {
        String key=IOUtil.readObject(this.rowExprsDis).toString();
        this.dataSetExprKeys.put(key,IOUtil.readObject(this.rowExprsDis));
        this.bindingNameTypeMap.put(key,new Integer(IOUtil.readInt(this.rowExprsDis)));
      }
    }
    this.metaOffset=INT_LENGTH + IOUtil.readInt(this.rowExprsDis) + INT_LENGTH;
    this.dataSetData=dataSetData;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  this.rowExprsRAIs=rowExprsRAIs;
  this.rowLenRAIs=rowLenRAIs;
  this.rowLenDis=new DataInputStream(rowLenRAIs);
  this.version=version;
  this.currReadIndex=0;
  this.currRowIndex=-1;
}",0.8388415672913118
74657,"/** 
 * @throws IOException
 * @throws DataException 
 */
private Map getValueMap() throws IOException, DataException {
  Map valueMap=new HashMap();
  int exprCount=IOUtil.readInt(rowExprsDis);
  for (int i=0; i < exprCount; i++) {
    String exprID=this.exprKeys.get(i).toString();
    Object exprValue=IOUtil.readObject(rowExprsDis);
    if (RowSaveUtil.EXCEPTION_INDICATOR.equals(exprValue))     continue;
    valueMap.put(exprID,exprValue);
  }
  java.util.Iterator it=this.dataSetExprKeys.keySet().iterator();
  while (it.hasNext()) {
    String key=it.next().toString();
    String value=(String)this.dataSetExprKeys.get(key);
    valueMap.put(key,this.dataSetData.getResultObject().getFieldValue(value));
  }
  return valueMap;
}","/** 
 * @throws IOException
 * @throws DataException 
 */
private Map getValueMap() throws IOException, DataException {
  Map valueMap=new HashMap();
  int exprCount=IOUtil.readInt(rowExprsDis);
  for (int i=0; i < exprCount; i++) {
    String exprID=this.exprKeys.get(i).toString();
    Object exprValue=IOUtil.readObject(rowExprsDis);
    if (RowSaveUtil.EXCEPTION_INDICATOR.equals(exprValue))     continue;
    valueMap.put(exprID,exprValue);
  }
  java.util.Iterator it=this.dataSetExprKeys.keySet().iterator();
  while (it.hasNext()) {
    String key=it.next().toString();
    String value=(String)this.dataSetExprKeys.get(key);
    IResultObject o=this.dataSetData.getResultObject();
    try {
      valueMap.put(key,o == null ? null : DataTypeUtil.convert(o.getFieldValue(value),((Integer)this.bindingNameTypeMap.get(key)).intValue()));
    }
 catch (    BirtException e) {
      e.printStackTrace();
    }
  }
  return valueMap;
}",0.8298507462686567
74658,"/** 
 * @param rowExprsIs
 * @param rowLenIs
 * @throws DataException
 */
private void initialize(RAInputStream rowExprsIs,RAInputStream rowLenIs,int rowCount,DataSetResultSet dataSetResultSet) throws DataException {
  try {
    IOUtil.readInt(rowExprsIs);
    int exprCount=IOUtil.readInt(rowExprsIs);
    this.exprKeys=new ArrayList();
    this.dataSetExprKeys=new HashMap();
    this.dataSetResultSet=dataSetResultSet;
    this.rowExprsDis=new DataInputStream(rowExprsIs);
    this.rowLenDis=new DataInputStream(rowLenIs);
    for (int i=0; i < exprCount; i++) {
      this.exprKeys.add(IOUtil.readString(this.rowExprsDis));
    }
    if (version >= VersionManager.VERSION_2_2_1_3) {
      int dataSetColumnExprCount=IOUtil.readInt(this.rowExprsDis);
      for (int i=0; i < dataSetColumnExprCount; i++) {
        this.dataSetExprKeys.put(IOUtil.readObject(this.rowExprsDis),IOUtil.readObject(this.rowExprsDis));
      }
    }
    this.metaOffset=IOUtil.INT_LENGTH + IOUtil.readInt(this.rowExprsDis) + IOUtil.INT_LENGTH;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  this.rowExprsIs=rowExprsIs;
  this.rowLenIs=rowLenIs;
  this.currRowIndex=-1;
  this.lastRowIndex=-1;
  this.currRowLenReadIndex=0;
  this.rowCount=rowCount;
  this.rowIDMap=new BasicCachedArray(rowCount);
}","/** 
 * @param rowExprsIs
 * @param rowLenIs
 * @throws DataException
 */
private void initialize(RAInputStream rowExprsIs,RAInputStream rowLenIs,int rowCount,DataSetResultSet dataSetResultSet) throws DataException {
  try {
    IOUtil.readInt(rowExprsIs);
    int exprCount=IOUtil.readInt(rowExprsIs);
    this.exprKeys=new ArrayList();
    this.dataSetExprKeys=new HashMap();
    this.dataSetResultSet=dataSetResultSet;
    this.rowExprsDis=new DataInputStream(rowExprsIs);
    this.rowLenDis=new DataInputStream(rowLenIs);
    this.bindingNameTypeMap=new HashMap();
    for (int i=0; i < exprCount; i++) {
      String key=IOUtil.readString(this.rowExprsDis);
      this.exprKeys.add(key);
      if (version >= VersionManager.VERSION_2_2_1_3) {
        this.bindingNameTypeMap.put(key,new Integer(IOUtil.readInt(this.rowExprsDis)));
      }
    }
    if (version >= VersionManager.VERSION_2_2_1_3) {
      int dataSetColumnExprCount=IOUtil.readInt(this.rowExprsDis);
      for (int i=0; i < dataSetColumnExprCount; i++) {
        String key=IOUtil.readObject(this.rowExprsDis).toString();
        this.dataSetExprKeys.put(key,IOUtil.readObject(this.rowExprsDis));
        this.bindingNameTypeMap.put(key,new Integer(IOUtil.readInt(this.rowExprsDis)));
      }
    }
    this.metaOffset=IOUtil.INT_LENGTH + IOUtil.readInt(this.rowExprsDis) + IOUtil.INT_LENGTH;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  this.rowExprsIs=rowExprsIs;
  this.rowLenIs=rowLenIs;
  this.currRowIndex=-1;
  this.lastRowIndex=-1;
  this.currRowLenReadIndex=0;
  this.rowCount=rowCount;
  this.rowIDMap=new BasicCachedArray(rowCount);
}",0.8443566962816716
74659,"/** 
 * @throws IOException
 * @throws DataException 
 */
private Map getValueMap() throws IOException, DataException {
  Map valueMap=new HashMap();
  int exprCount=IOUtil.readInt(rowExprsDis);
  for (int i=0; i < exprCount; i++) {
    String exprID=this.exprKeys.get(i).toString();
    Object exprValue=IOUtil.readObject(rowExprsDis);
    if (RowSaveUtil.EXCEPTION_INDICATOR.equals(exprValue))     exprValue=null;
    valueMap.put(exprID,exprValue);
  }
  java.util.Iterator it=this.dataSetExprKeys.keySet().iterator();
  while (it.hasNext()) {
    String key=it.next().toString();
    String value=(String)this.dataSetExprKeys.get(key);
    valueMap.put(key,this.dataSetResultSet.getResultObject().getFieldValue(value));
  }
  return valueMap;
}","/** 
 * @throws IOException
 * @throws DataException 
 */
private Map getValueMap() throws IOException, DataException {
  Map valueMap=new HashMap();
  int exprCount=IOUtil.readInt(rowExprsDis);
  for (int i=0; i < exprCount; i++) {
    String exprID=this.exprKeys.get(i).toString();
    Object exprValue=IOUtil.readObject(rowExprsDis);
    if (RowSaveUtil.EXCEPTION_INDICATOR.equals(exprValue))     exprValue=null;
    valueMap.put(exprID,exprValue);
  }
  java.util.Iterator it=this.dataSetExprKeys.keySet().iterator();
  while (it.hasNext()) {
    String key=it.next().toString();
    String value=(String)this.dataSetExprKeys.get(key);
    IResultObject o=this.dataSetResultSet.getResultObject();
    try {
      valueMap.put(key,o == null ? null : DataTypeUtil.convert(o.getFieldValue(value),((Integer)this.bindingNameTypeMap.get(key)).intValue()));
    }
 catch (    BirtException e) {
      e.printStackTrace();
    }
  }
  return valueMap;
}",0.826163818503241
74660,"/** 
 * Test cases: <p> 1. remove/add themes in the library and see effects to the library.
 * @throws Exception
 */
public void testAddRemoveThemeLocally() throws Exception {
  openLibrary(""String_Node_Str"");
  assertNotNull(libraryHandle.getTheme());
  StyleHandle libStyle1=libraryHandle.findStyle(""String_Node_Str"");
  libStyle1.drop();
  libraryHandle.getCommandStack().undo();
  LabelHandle label3=(LabelHandle)libraryHandle.findElement(""String_Node_Str"");
  assertEquals(""String_Node_Str"",label3.getStringProperty(Style.COLOR_PROP));
  ThemeHandle theme1=libraryHandle.findTheme(""String_Node_Str"");
  assertNotNull(theme1);
  TextItemHandle text1=(TextItemHandle)libraryHandle.findElement(""String_Node_Str"");
  LabelHandle label1=(LabelHandle)libraryHandle.findElement(""String_Node_Str"");
  LabelHandle label2=(LabelHandle)libraryHandle.findElement(""String_Node_Str"");
  assertEquals(ColorPropertyType.BLACK,text1.getProperty(Style.COLOR_PROP));
  assertEquals(ColorPropertyType.RED,label1.getProperty(Style.COLOR_PROP));
  assertEquals(ColorPropertyType.RED,label2.getProperty(Style.COLOR_PROP));
  libraryHandle.getThemes().drop(theme1);
  assertEquals(ColorPropertyType.BLACK,text1.getProperty(Style.COLOR_PROP));
  assertEquals(ColorPropertyType.BLACK,label1.getProperty(Style.COLOR_PROP));
  assertEquals(ColorPropertyType.BLACK,label2.getProperty(Style.COLOR_PROP));
  libraryHandle.getCommandStack().undo();
  assertEquals(ColorPropertyType.RED,label1.getProperty(Style.COLOR_PROP));
  libraryHandle.getCommandStack().redo();
  assertEquals(ColorPropertyType.BLACK,label1.getProperty(Style.COLOR_PROP));
}","/** 
 * Test cases: <p> 1. remove/add themes in the library and see effects to the library.
 * @throws Exception
 */
public void testAddRemoveThemeLocally() throws Exception {
  openLibrary(""String_Node_Str"");
  assertNotNull(libraryHandle.getTheme());
  StyleHandle libStyle1=libraryHandle.findStyle(""String_Node_Str"");
  libStyle1.drop();
  libraryHandle.getCommandStack().undo();
  LabelHandle label3=(LabelHandle)libraryHandle.findElement(""String_Node_Str"");
  assertEquals(""String_Node_Str"",label3.getStringProperty(Style.COLOR_PROP));
  ThemeHandle theme1=libraryHandle.findTheme(""String_Node_Str"");
  assertNotNull(theme1);
  TextItemHandle text1=(TextItemHandle)libraryHandle.findElement(""String_Node_Str"");
  LabelHandle label1=(LabelHandle)libraryHandle.findElement(""String_Node_Str"");
  LabelHandle label2=(LabelHandle)libraryHandle.findElement(""String_Node_Str"");
  assertEquals(ColorPropertyType.BLACK,text1.getProperty(Style.COLOR_PROP));
  assertEquals(ColorPropertyType.RED,label1.getProperty(Style.COLOR_PROP));
  assertEquals(ColorPropertyType.RED,label2.getProperty(Style.COLOR_PROP));
  libraryHandle.getThemes().drop(theme1);
  assertEquals(ColorPropertyType.BLACK,text1.getProperty(Style.COLOR_PROP));
  assertEquals(ColorPropertyType.BLACK,label1.getProperty(Style.COLOR_PROP));
  assertEquals(ColorPropertyType.BLACK,label2.getProperty(Style.COLOR_PROP));
  assertNotNull(label3.getProperty(IStyledElementModel.STYLE_PROP));
  libraryHandle.getCommandStack().undo();
  assertEquals(ColorPropertyType.RED,label1.getProperty(Style.COLOR_PROP));
  libraryHandle.getCommandStack().redo();
  assertEquals(ColorPropertyType.BLACK,label1.getProperty(Style.COLOR_PROP));
  libraryHandle.getCommandStack().undo();
  libraryHandle.getThemes().dropAndClear(theme1);
  assertNull(label3.getProperty(IStyledElementModel.STYLE_PROP));
}",0.9344877344877344
74661,"/** 
 * Drops a content element at the given position from the slot, and unresolve any reference property which refers the element to drop.
 * @param posn the position of the content to drop
 * @throws SemanticException if the position is out of range
 */
public void drop(int posn) throws SemanticException {
  DesignElement content=getElement().getSlot(slotID).getContent(posn);
  ContentCommand cmd=new ContentCommand(getModule(),new ContainerContext(getElement(),slotID));
  cmd.remove(content,true);
}","/** 
 * Drops a content element at the given position from the slot, and unresolve any reference property which refers the element to drop.
 * @param posn the position of the content to drop
 * @throws SemanticException if the position is out of range
 */
public void drop(int posn) throws SemanticException {
  DesignElement content=getElement().getSlot(slotID).getContent(posn);
  ContentCommand cmd=new ContentCommand(getModule(),new ContainerContext(getElement(),slotID),false,true);
  cmd.remove(content);
}",0.9842829076620824
74662,"/** 
 * Drops a content element at the given position from the slot, and clear any reference property which refers the element to drop.
 * @param posn the position of the content to drop
 * @throws SemanticException if the position is out of range
 */
public void dropAndClear(int posn) throws SemanticException {
  DesignElement content=getElement().getSlot(slotID).getContent(posn);
  ContentCommand cmd=new ContentCommand(getModule(),new ContainerContext(getElement(),slotID));
  cmd.remove(content,false);
}","/** 
 * Drops a content element at the given position from the slot, and clear any reference property which refers the element to drop.
 * @param posn the position of the content to drop
 * @throws SemanticException if the position is out of range
 */
public void dropAndClear(int posn) throws SemanticException {
  DesignElement content=getElement().getSlot(slotID).getContent(posn);
  ContentCommand cmd=new ContentCommand(getModule(),new ContainerContext(getElement(),slotID));
  cmd.remove(content);
}",0.9940944881889764
74663,"/** 
 * Does some actions when the content is removed from the design tree.
 * @param content the content to remove
 * @param unresolveReference status whether to un-resolve the references
 * @throws SemanticException
 */
protected void doDelectAction(DesignElement content) throws SemanticException {
  ElementDefn metaData=(ElementDefn)content.getDefn();
  if (!metaData.isContainer())   return;
  LevelContentIterator iter=new LevelContentIterator(module,content,1);
  while (iter.hasNext()) {
    DesignElement tmpContent=(DesignElement)iter.next();
    ContentCommand cmd=new ContentCommand(module,tmpContent.getContainerInfo());
    cmd.remove(tmpContent,false,true);
  }
}","/** 
 * Does some actions when the content is removed from the design tree.
 * @param content the content to remove
 * @throws SemanticException
 */
protected void doDelectAction(DesignElement content) throws SemanticException {
  ElementDefn metaData=(ElementDefn)content.getDefn();
  if (!metaData.isContainer())   return;
  LevelContentIterator iter=new LevelContentIterator(module,content,1);
  while (iter.hasNext()) {
    DesignElement tmpContent=(DesignElement)iter.next();
    AbstractContentCommand cmd=null;
    if (this instanceof ContentCommand)     cmd=new ContentCommand(module,tmpContent.getContainerInfo(),true,((ContentCommand)this).unresolveReference);
 else     if (this instanceof ContentElementCommand)     cmd=new ContentElementCommand(module,tmpContent.getContainerInfo());
    if (cmd != null)     cmd.remove(tmpContent);
  }
}",0.7516339869281046
74664,"/** 
 * Handles a Rhino script evaluation result, converting Javascript object into equivalent Java objects if necessary.
 * @param inputObj Object returned by rhino engine.
 * @return If inputObj is a native Javascript object, its equivalent Java object is returned; otherwise inputObj is returned
 */
public static Object convertJavascriptValue(Object inputObj){
  if (inputObj instanceof Undefined) {
    return null;
  }
  if (inputObj instanceof IdScriptableObject) {
    String jsClass=((Scriptable)inputObj).getClassName();
    if (""String_Node_Str"".equals(jsClass)) {
      return new Date((long)Context.toNumber(inputObj));
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return new Boolean(Context.toBoolean(inputObj));
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return new Double(Context.toNumber(inputObj));
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return inputObj.toString();
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      Object[] obj=new Object[(int)((NativeArray)inputObj).getLength()];
      for (int i=0; i < obj.length; i++) {
        obj[i]=convertJavascriptValue(((NativeArray)inputObj).get(i,null));
      }
      return obj;
    }
  }
 else   if (inputObj instanceof Wrapper) {
    return ((Wrapper)inputObj).unwrap();
  }
  return inputObj;
}","/** 
 * Handles a Rhino script evaluation result, converting Javascript object into equivalent Java objects if necessary.
 * @param inputObj Object returned by rhino engine.
 * @return If inputObj is a native Javascript object, its equivalent Java object is returned; otherwise inputObj is returned
 */
public static Object convertJavascriptValue(Object inputObj){
  if (inputObj instanceof Undefined) {
    return null;
  }
  if (inputObj instanceof IdScriptableObject) {
    String jsClass=((Scriptable)inputObj).getClassName();
    if (""String_Node_Str"".equals(jsClass)) {
      return Context.toType(inputObj,Date.class);
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return new Boolean(Context.toBoolean(inputObj));
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return new Double(Context.toNumber(inputObj));
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return inputObj.toString();
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      Object[] obj=new Object[(int)((NativeArray)inputObj).getLength()];
      for (int i=0; i < obj.length; i++) {
        obj[i]=convertJavascriptValue(((NativeArray)inputObj).get(i,null));
      }
      return obj;
    }
  }
 else   if (inputObj instanceof Wrapper) {
    return ((Wrapper)inputObj).unwrap();
  }
  return inputObj;
}",0.9749157618869336
74665,"/** 
 * Get resourceBundle based on given locale
 * @return
 */
private static ResourceBundle getResourceBundle(){
  if (resourceBundle == null) {
synchronized (resourceBundle) {
      if (resourceBundle != null)       return resourceBundle;
      if (currentLocale != null)       resourceBundle=DataResourceHandle.getInstance(currentLocale).getUResourceBundle();
 else       resourceBundle=DataResourceHandle.getInstance().getUResourceBundle();
    }
  }
  return resourceBundle;
}","/** 
 * Get resourceBundle based on given locale
 * @return
 */
private static ResourceBundle getResourceBundle(){
  if (resourceBundle == null) {
synchronized (Thread.currentThread()) {
      if (resourceBundle != null)       return resourceBundle;
      if (currentLocale != null)       resourceBundle=DataResourceHandle.getInstance(currentLocale).getUResourceBundle();
 else       resourceBundle=DataResourceHandle.getInstance().getUResourceBundle();
    }
  }
  return resourceBundle;
}",0.9629629629629628
74666,"/** 
 * Set the locale info
 * @param locale
 */
public static void setLocale(ULocale locale){
  currentLocale=locale;
  if (resourceBundle != null) {
synchronized (resourceBundle) {
      if (resourceBundle == null)       return;
      if ((locale == null && !ULocale.getDefault().toLocale().equals(resourceBundle.getLocale())) || (locale != null && !locale.toLocale().equals(resourceBundle.getLocale()))) {
        resourceBundle=null;
      }
    }
  }
}","/** 
 * Set the locale info
 * @param locale
 */
public static void setLocale(ULocale locale){
  currentLocale=locale;
  if (resourceBundle != null) {
synchronized (Thread.currentThread()) {
      if (resourceBundle == null)       return;
      if ((locale == null && !ULocale.getDefault().toLocale().equals(resourceBundle.getLocale())) || (locale != null && !locale.toLocale().equals(resourceBundle.getLocale()))) {
        resourceBundle=null;
      }
    }
  }
}",0.9609544468546638
74667,"/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  String red=Integer.toHexString(color.getRed());
  String green=Integer.toHexString(color.getGreen());
  String blue=Integer.toHexString(color.getBlue());
  red=red.length() == 1 ? ""String_Node_Str"" + red : red;
  green=green.length() == 1 ? ""String_Node_Str"" + green : green;
  blue=blue.length() == 1 ? ""String_Node_Str"" + blue : blue;
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ red+ green+ blue+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  print(text);
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  String red=Integer.toHexString(color.getRed());
  String green=Integer.toHexString(color.getGreen());
  String blue=Integer.toHexString(color.getBlue());
  red=red.length() == 1 ? ""String_Node_Str"" + red : red;
  green=green.length() == 1 ? ""String_Node_Str"" + green : green;
  blue=blue.length() == 1 ? ""String_Node_Str"" + blue : blue;
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ red+ green+ blue+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}",0.9960116990162192
74668,"/** 
 * Draws the background image at the contentByteUnder of the PPT with the given offset
 * @param imageURI the URI referring the image
 * @param x the start X coordinate at the PPT where the image is positioned
 * @param y the start Y coordinate at the PPT where the image is positioned
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 * @param positionX the offset X percentage relating to start X
 * @param positionY the offset Y percentage relating to start Y
 * @param repeat the background-repeat property
 * @param xMode whether the horizontal position is a percentage value or not
 * @param yMode whether the vertical position is a percentage value or not
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float positionX,float positionY,String repeat){
  if (imageURI == null || imageURI.length() == 0) {
    return;
  }
  float imageWidth=0;
  float imageHeight=0;
  byte[] imageData=null;
  InputStream imageStream=null;
  try {
    URL url=new URL(imageURI);
    imageStream=url.openStream();
    imageData=new byte[imageStream.available()];
    imageStream.read(imageData);
    imageStream.close();
    imageStream=url.openStream();
    Image image=ImageIO.read(imageStream);
    ImageIcon imageIcon=new ImageIcon(image);
    imageWidth=imageIcon.getIconWidth();
    imageHeight=imageIcon.getIconHeight();
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
 finally {
    if (imageStream != null) {
      try {
        imageStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  String imageTitle=""String_Node_Str"" + currentPageNum + ""String_Node_Str""+ (++shapeCount);
  imageTitles.add(imageTitle);
  String imageName;
  if (imageNames.containsKey(imageURI)) {
    imageName=(String)imageNames.get(imageURI);
  }
 else {
    String extension=getImageExtension(imageURI);
    imageName=imageTitle + ""String_Node_Str"" + extension;
    imageNames.put(imageTitle,imageName);
    imageExtensions.put(imageTitle,extension);
    recordFileLists(imageName);
    currentImageData.put(imageTitle,imageData);
  }
  Position areaPosition=new Position(x,y);
  Position areaSize=new Position(width,height);
  Position imagePosition=new Position(x + positionX,y + positionY);
  Position imageSize=new Position(imageWidth,imageHeight);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  Collection positions=layout.getImagePositions(repeat);
  Iterator iterator=positions.iterator();
  while (iterator.hasNext()) {
    Position position=(Position)iterator.next();
    exportImageDefn(imageName,imageTitle,imageWidth,imageHeight,position.getX(),position.getY());
  }
}","/** 
 * Draws the background image at the contentByteUnder of the PPT with the given offset
 * @param imageURI the URI referring the image
 * @param x the start X coordinate at the PPT where the image is positioned
 * @param y the start Y coordinate at the PPT where the image is positioned
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 * @param positionX the offset X percentage relating to start X
 * @param positionY the offset Y percentage relating to start Y
 * @param repeat the background-repeat property
 * @param xMode whether the horizontal position is a percentage value or not
 * @param yMode whether the vertical position is a percentage value or not
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float positionX,float positionY,String repeat){
  if (imageURI == null || imageURI.length() == 0) {
    return;
  }
  float imageWidth=0;
  float imageHeight=0;
  byte[] imageData=null;
  InputStream imageStream=null;
  try {
    URL url=new URL(imageURI);
    imageStream=url.openStream();
    imageData=getImageData(imageStream);
    imageStream.close();
    imageStream=url.openStream();
    Image image=ImageIO.read(imageStream);
    ImageIcon imageIcon=new ImageIcon(image);
    imageWidth=imageIcon.getIconWidth();
    imageHeight=imageIcon.getIconHeight();
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
 finally {
    if (imageStream != null) {
      try {
        imageStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  String imageTitle=""String_Node_Str"" + currentPageNum + ""String_Node_Str""+ (++shapeCount);
  imageTitles.add(imageTitle);
  String imageName;
  if (imageNames.containsKey(imageURI)) {
    imageName=(String)imageNames.get(imageURI);
  }
 else {
    String extension=getImageExtension(imageURI);
    imageName=imageTitle + ""String_Node_Str"" + extension;
    imageNames.put(imageTitle,imageName);
    imageExtensions.put(imageTitle,extension);
    recordFileLists(imageName);
    currentImageData.put(imageTitle,imageData);
  }
  Position areaPosition=new Position(x,y);
  Position areaSize=new Position(width,height);
  Position imagePosition=new Position(x + positionX,y + positionY);
  Position imageSize=new Position(imageWidth,imageHeight);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  Collection positions=layout.getImagePositions(repeat);
  Iterator iterator=positions.iterator();
  while (iterator.hasNext()) {
    Position position=(Position)iterator.next();
    exportImageDefn(imageName,imageTitle,imageWidth,imageHeight,position.getX(),position.getY());
  }
}",0.9878908367973974
74669,"/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasAggregationInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getBindings(),queryDefn.getBindings());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return false;
  if (hasSubquery(queryDefn)) {
    if (!QueryDefnUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      for (int i=0; i < groups.size(); i++) {
        List groupFilters=((IGroupDefinition)groups.get(i)).getFilters();
        if (groupFilters != null && groupFilters.size() > 0) {
          runningOnRS=false;
          break;
        }
      }
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return false;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0) {
    if (!isFiltersEquals(filters,queryDefn.getFilters()))     runningOnRS=queryDefn.getBindings().values() == null || !hasAggregationOnRowObjects(queryDefn.getBindings().values().iterator());
  }
  return runningOnRS;
}","/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasAggregationInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getBindings(),queryDefn.getBindings());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return false;
  if (hasSubquery(queryDefn)) {
    if (hasSubQueryInDetail(queryDefn.getSubqueries()))     return false;
    if (!QueryDefnUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      for (int i=0; i < groups.size(); i++) {
        List groupFilters=((IGroupDefinition)groups.get(i)).getFilters();
        if (groupFilters != null && groupFilters.size() > 0) {
          runningOnRS=false;
          break;
        }
      }
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return false;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0) {
    if (!isFiltersEquals(filters,queryDefn.getFilters()))     runningOnRS=queryDefn.getBindings().values() == null || !hasAggregationOnRowObjects(queryDefn.getBindings().values().iterator());
  }
  return runningOnRS;
}",0.9890758783584293
74670,"public void drawTotalPage(String text,int textX,int textY,int width,int height,TextStyle textInfo){
  if (totalPageTemplate != null) {
    isTotalPage=true;
    drawText(text,textX,textY,width,height,textInfo);
  }
}","public void drawTotalPage(String text,int textX,int textY,int width,int height,TextStyle textInfo){
  if (pageDevice.getPDFTemplate() != null) {
    isTotalPage=true;
    drawText(text,textX,textY,width,height,textInfo);
  }
}",0.9411764705882352
74671,"private void createTotalPageTemplate(float x,float y,float width,float height){
  if (totalPageTemplate == null) {
    totalPageTemplate=contentByte.createTemplate(width,height);
  }
  y=transformY(y,height);
  contentByte.saveState();
  contentByte.addTemplate(totalPageTemplate,x,y);
  contentByte.restoreState();
}","private void createTotalPageTemplate(float x,float y,float width,float height){
  if (pageDevice.getPDFTemplate() == null) {
    pageDevice.setPDFTemplate(contentByte.createTemplate(width,height));
  }
  y=transformY(y,height);
  contentByte.saveState();
  contentByte.addTemplate(pageDevice.getPDFTemplate(),x,y);
  contentByte.restoreState();
}",0.3559577677224736
74672,"private void drawText(String text,float textX,float textY,FontInfo fontInfo,float characterSpacing,float wordSpacing,Color color,CSSValue align){
  PdfContentByte currentContentByte=isTotalPage ? totalPageTemplate : contentByte;
  float containerHeight=isTotalPage ? totalPageTemplate.getHeight() : pageHeight;
  isTotalPage=false;
  currentContentByte.saveState();
  currentContentByte.beginText();
  if (null != color) {
    currentContentByte.setColorFill(color);
    currentContentByte.setColorStroke(color);
  }
  BaseFont font=fontInfo.getBaseFont();
  float fontSize=fontInfo.getFontSize();
  currentContentByte.setFontAndSize(font,fontSize);
  currentContentByte.setCharacterSpacing(characterSpacing);
  currentContentByte.setWordSpacing(wordSpacing);
  placeText(currentContentByte,fontInfo,textX,transformY(textY,0,containerHeight));
  if ((font.getFontType() == BaseFont.FONT_TYPE_TTUNI) && IStyle.JUSTIFY_VALUE.equals(align) && wordSpacing > 0) {
    int idx=text.indexOf(' ');
    if (idx >= 0) {
      float spaceCorrection=-wordSpacing * 1000 / fontSize;
      PdfTextArray textArray=new PdfTextArray(text.substring(0,idx));
      int lastIdx=idx;
      while ((idx=text.indexOf(' ',lastIdx + 1)) >= 0) {
        textArray.add(spaceCorrection);
        textArray.add(text.substring(lastIdx,idx));
        lastIdx=idx;
      }
      textArray.add(spaceCorrection);
      textArray.add(text.substring(lastIdx));
      currentContentByte.showText(textArray);
    }
 else {
      currentContentByte.showText(text);
    }
  }
 else {
    currentContentByte.showText(text);
  }
  currentContentByte.endText();
  currentContentByte.restoreState();
}","private void drawText(String text,float textX,float textY,FontInfo fontInfo,float characterSpacing,float wordSpacing,Color color,CSSValue align){
  PdfContentByte currentContentByte=isTotalPage ? pageDevice.getPDFTemplate() : contentByte;
  float containerHeight=isTotalPage ? pageDevice.getPDFTemplate().getHeight() : pageHeight;
  isTotalPage=false;
  currentContentByte.saveState();
  currentContentByte.beginText();
  if (null != color) {
    currentContentByte.setColorFill(color);
    currentContentByte.setColorStroke(color);
  }
  BaseFont font=fontInfo.getBaseFont();
  float fontSize=fontInfo.getFontSize();
  currentContentByte.setFontAndSize(font,fontSize);
  currentContentByte.setCharacterSpacing(characterSpacing);
  currentContentByte.setWordSpacing(wordSpacing);
  placeText(currentContentByte,fontInfo,textX,transformY(textY,0,containerHeight));
  if ((font.getFontType() == BaseFont.FONT_TYPE_TTUNI) && IStyle.JUSTIFY_VALUE.equals(align) && wordSpacing > 0) {
    int idx=text.indexOf(' ');
    if (idx >= 0) {
      float spaceCorrection=-wordSpacing * 1000 / fontSize;
      PdfTextArray textArray=new PdfTextArray(text.substring(0,idx));
      int lastIdx=idx;
      while ((idx=text.indexOf(' ',lastIdx + 1)) >= 0) {
        textArray.add(spaceCorrection);
        textArray.add(text.substring(lastIdx,idx));
        lastIdx=idx;
      }
      textArray.add(spaceCorrection);
      textArray.add(text.substring(lastIdx));
      currentContentByte.showText(textArray);
    }
 else {
      currentContentByte.showText(text);
    }
  }
 else {
    currentContentByte.showText(text);
  }
  currentContentByte.endText();
  currentContentByte.restoreState();
}",0.9844031193761248
74673,"public PDFPage(int pageWidth,int pageHeight,Document document,PdfWriter writer){
  super(pageWidth,pageHeight);
  this.writer=writer;
  try {
    Rectangle pageSize=new Rectangle(this.pageWidth,this.pageHeight);
    document.setPageSize(pageSize);
    if (!document.isOpen())     document.open();
 else     document.newPage();
    this.contentByte=writer.getDirectContent();
    this.cbUnder=writer.getDirectContentUnder();
  }
 catch (  DocumentException de) {
    logger.log(Level.SEVERE,de.getMessage(),de);
  }
}","public PDFPage(int pageWidth,int pageHeight,Document document,PdfWriter writer,PDFPageDevice pageDevice){
  super(pageWidth,pageHeight);
  this.writer=writer;
  this.pageDevice=pageDevice;
  try {
    Rectangle pageSize=new Rectangle(this.pageWidth,this.pageHeight);
    document.setPageSize(pageSize);
    if (!document.isOpen())     document.open();
 else     document.newPage();
    this.contentByte=writer.getDirectContent();
    this.cbUnder=writer.getDirectContentUnder();
  }
 catch (  DocumentException de) {
    logger.log(Level.SEVERE,de.getMessage(),de);
  }
}",0.9494020239190432
74674,"public IPage newPage(int width,int height,Color backgroundColor){
  currentPage=new PDFPage(width,height,doc,writer);
  currentPage.drawBackgroundColor(backgroundColor,0,0,width,height);
  return currentPage;
}","public IPage newPage(int width,int height,Color backgroundColor){
  currentPage=new PDFPage(width,height,doc,writer,this);
  currentPage.drawBackgroundColor(backgroundColor,0,0,width,height);
  return currentPage;
}",0.9882352941176472
74675,"/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    Object result=executionContext.evaluate(source);
    if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
      throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName,source});
    }
  }
  String paramType=paramHandle.getParamType();
  if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) {
    if (paramValue instanceof Object[]) {
      boolean isValid=true;
      Object[] paramValueList=(Object[])paramValue;
      for (int i=0; i < paramValueList.length; i++) {
        if (paramValueList[i] != null) {
          if (!validateParameterValueType(paramName,paramValueList[i],type,paramHandle)) {
            isValid=false;
          }
        }
      }
      return isValid;
    }
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,""String_Node_Str"",""String_Node_Str""});
  }
 else {
    return validateParameterValueType(paramName,paramValue,type,paramHandle);
  }
}","/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    Object result=executionContext.evaluate(source);
    if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
      throw new ParameterValidationException(MessageConstants.PARAMETER_SCRIPT_VALIDATION_EXCEPTION,new String[]{paramName,source});
    }
  }
  String paramType=paramHandle.getParamType();
  if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) {
    if (paramValue instanceof Object[]) {
      boolean isValid=true;
      Object[] paramValueList=(Object[])paramValue;
      for (int i=0; i < paramValueList.length; i++) {
        if (paramValueList[i] != null) {
          if (!validateParameterValueType(paramName,paramValueList[i],type,paramHandle)) {
            isValid=false;
          }
        }
      }
      return isValid;
    }
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,""String_Node_Str"",""String_Node_Str""});
  }
 else {
    return validateParameterValueType(paramName,paramValue,type,paramHandle);
  }
}",0.993641139065524
74676,"protected int getRowSpan(IRowContent row,CellArea cell,RowArea rowArea){
  int rowSpan=cell.getRowSpan();
  IContent rowContent=rowArea.getContent();
  if (rowSpan > 1 && (!row.getInstanceID().toUniqueString().equals(rowContent.getInstanceID().toUniqueString()))) {
    return rowSpan - 1;
  }
  return rowSpan;
}","protected int getRowSpan(IRowContent row,CellArea cell,RowArea rowArea){
  int rowSpan=cell.getRowSpan();
  IContent rowContent=rowArea.getContent();
  InstanceID id=row.getInstanceID();
  InstanceID contentId=rowContent.getInstanceID();
  if (id != null && contentId != null) {
    if (rowSpan > 1 && (!id.toUniqueString().equals(contentId.toUniqueString()))) {
      return rowSpan - 1;
    }
    return rowSpan;
  }
 else {
    if (row != rowContent && rowSpan > 1) {
      return rowSpan - 1;
    }
 else {
      return rowSpan;
    }
  }
}",0.5600933488914819
74677,"/** 
 * get parsed parameters with default value.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ParameterDefinition parameter=(ParameterDefinition)iter.next();
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramObj=this.parametersAsString.get(paramName);
    if (paramObj != null) {
      String format=ParameterAccessor.getFormat(request,paramName);
      if (format == null || format.length() <= 0) {
        format=parameter.getPattern();
      }
      String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
      boolean isLocale=this.locParams.contains(paramName);
      List paramList=null;
      if (paramObj instanceof List) {
        paramList=(List)paramObj;
      }
 else {
        paramList=new ArrayList();
        paramList.add(paramObj);
      }
      for (int i=0; i < paramList.size(); i++) {
        try {
          Object paramValueObj=DataUtil.validate(paramName,dataType,format,(String)paramList.get(i),locale,isLocale);
          paramList.set(i,paramValueObj);
        }
 catch (        ViewerValidationException e) {
          if (IBirtConstants.SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath())) {
            this.exception=e;
            break;
          }
        }
      }
      if (paramObj instanceof List) {
        params.put(paramName,paramList.toArray());
      }
 else {
        params.put(paramName,paramList.get(0));
      }
    }
 else {
      Object paramValueObj=null;
      if (!this.parametersAsString.containsKey(paramName)) {
        paramValueObj=this.defaultValues.get(paramName);
      }
      if (parameter.isMultiValue()) {
        params.put(paramName,new Object[]{paramValueObj});
      }
 else {
        params.put(paramName,paramValueObj);
      }
    }
  }
  return params;
}","/** 
 * get parsed parameters with default value.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ParameterDefinition parameter=(ParameterDefinition)iter.next();
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramObj=this.parametersAsString.get(paramName);
    if (paramObj != null) {
      String format=ParameterAccessor.getFormat(request,paramName);
      if (format == null || format.length() <= 0) {
        format=parameter.getPattern();
      }
      String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
      boolean isLocale=this.locParams.contains(paramName);
      List paramList=null;
      if (paramObj instanceof List) {
        paramList=(List)paramObj;
      }
 else {
        paramList=new ArrayList();
        paramList.add(paramObj);
      }
      for (int i=0; i < paramList.size(); i++) {
        try {
          Object paramValueObj=DataUtil.validate(paramName,dataType,format,(String)paramList.get(i),locale,isLocale);
          paramList.set(i,paramValueObj);
        }
 catch (        ViewerValidationException e) {
          if (IBirtConstants.SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath())) {
            this.exception=e;
            break;
          }
        }
      }
      if (paramObj instanceof List) {
        List list=(List)paramObj;
        if (list.size() == 0 || (list.size() == 1 && list.get(0) == null))         params.put(paramName,null);
 else         params.put(paramName,paramList.toArray());
      }
 else {
        params.put(paramName,paramList.get(0));
      }
    }
 else {
      Object paramValueObj=null;
      if (!this.parametersAsString.containsKey(paramName)) {
        paramValueObj=this.defaultValues.get(paramName);
      }
      if (parameter.isMultiValue()) {
        if (paramValueObj == null)         params.put(paramName,null);
 else         params.put(paramName,new Object[]{paramValueObj});
      }
 else {
        params.put(paramName,paramValueObj);
      }
    }
  }
  return params;
}",0.8633720930232558
74678,"/** 
 * Handle SOAP operation. Parse report parameters and display text
 * @param operation
 * @param bean
 * @param parameterMap
 * @param displayTexts
 * @throws Exception
 */
public static void handleOperation(Operation operation,ViewerAttributeBean bean,Map parameterMap,Map displayTexts) throws Exception {
  if (operation == null || bean == null || parameterMap == null || displayTexts == null)   return;
  List locs=new ArrayList();
  Map params=new HashMap();
  String displayTextParam=null;
  Oprand[] oprands=operation.getOprand();
  for (int i=0; i < oprands.length; i++) {
    String paramName=oprands[i].getName();
    Object paramValue=oprands[i].getValue();
    if (paramName == null || paramValue == null)     continue;
    if (paramName.equalsIgnoreCase(ParameterAccessor.PARAM_ISLOCALE)) {
      locs.add(paramValue);
    }
 else     if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
      ParameterDefinition parameter=bean.findParameterDefinition(displayTextParam);
      if (parameter != null) {
        if (parameter.isMultiValue())         displayTexts.put(displayTextParam,null);
 else         displayTexts.put(displayTextParam,paramValue);
      }
      continue;
    }
 else {
      if (ParameterAccessor.PARAM_ISNULL.equalsIgnoreCase(paramName)) {
        paramName=(String)paramValue;
        paramValue=null;
      }
      List list=(List)params.get(paramName);
      if (list == null) {
        list=new ArrayList();
        params.put(paramName,list);
      }
      list.add(paramValue);
    }
  }
  Iterator it=params.keySet().iterator();
  while (it.hasNext()) {
    String paramName=(String)it.next();
    List paramValues=(List)params.get(paramName);
    ParameterDefinition parameter=bean.findParameterDefinition(paramName);
    if (parameter == null)     continue;
    String pattern=parameter.getPattern();
    String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
    boolean isLocale=locs.contains(paramName);
    if (parameter.isMultiValue()) {
      List values=new ArrayList();
      for (int i=0; i < paramValues.size(); i++) {
        Object paramValueObj=DataUtil.validate(paramName,dataType,pattern,(String)paramValues.get(i),bean.getLocale(),isLocale);
        values.add(paramValueObj);
      }
      parameterMap.put(paramName,values.toArray());
    }
 else {
      Object paramValueObj=DataUtil.validate(paramName,dataType,pattern,(String)paramValues.get(0),bean.getLocale(),isLocale);
      parameterMap.put(paramName,paramValueObj);
    }
  }
}","/** 
 * Handle SOAP operation. Parse report parameters and display text
 * @param operation
 * @param bean
 * @param parameterMap
 * @param displayTexts
 * @throws Exception
 */
public static void handleOperation(Operation operation,ViewerAttributeBean bean,Map parameterMap,Map displayTexts) throws Exception {
  if (operation == null || bean == null || parameterMap == null || displayTexts == null)   return;
  List locs=new ArrayList();
  Map params=new HashMap();
  String displayTextParam=null;
  Oprand[] oprands=operation.getOprand();
  for (int i=0; i < oprands.length; i++) {
    String paramName=oprands[i].getName();
    Object paramValue=oprands[i].getValue();
    if (paramName == null || paramValue == null)     continue;
    if (paramName.equalsIgnoreCase(ParameterAccessor.PARAM_ISLOCALE)) {
      locs.add(paramValue);
    }
 else     if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
      ParameterDefinition parameter=bean.findParameterDefinition(displayTextParam);
      if (parameter != null) {
        if (parameter.isMultiValue())         displayTexts.put(displayTextParam,null);
 else         displayTexts.put(displayTextParam,paramValue);
      }
      continue;
    }
 else {
      if (ParameterAccessor.PARAM_ISNULL.equalsIgnoreCase(paramName)) {
        paramName=(String)paramValue;
        paramValue=null;
      }
      List list=(List)params.get(paramName);
      if (list == null) {
        list=new ArrayList();
        params.put(paramName,list);
      }
      list.add(paramValue);
    }
  }
  Iterator it=params.keySet().iterator();
  while (it.hasNext()) {
    String paramName=(String)it.next();
    List paramValues=(List)params.get(paramName);
    ParameterDefinition parameter=bean.findParameterDefinition(paramName);
    if (parameter == null)     continue;
    String pattern=parameter.getPattern();
    String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
    boolean isLocale=locs.contains(paramName);
    if (parameter.isMultiValue()) {
      List values=new ArrayList();
      for (int i=0; i < paramValues.size(); i++) {
        Object paramValueObj=DataUtil.validate(paramName,dataType,pattern,(String)paramValues.get(i),bean.getLocale(),isLocale);
        values.add(paramValueObj);
      }
      if (values.size() == 0 || (values.size() == 1 && values.get(0) == null))       parameterMap.put(paramName,null);
 else       parameterMap.put(paramName,values.toArray());
    }
 else {
      Object paramValueObj=DataUtil.validate(paramName,dataType,pattern,(String)paramValues.get(0),bean.getLocale(),isLocale);
      parameterMap.put(paramName,paramValueObj);
    }
  }
}",0.9761222540592168
74679,"public State(Element element,Map cssStyles,IContent parent,IContent inlineParent,ActionContent action){
  this.element=element;
  this.cssStyles=cssStyles;
  this.parent=parent;
  this.inlineParent=inlineParent;
  this.action=action;
}","public State(Element element,Map cssStyles,IContent inlineParent,ActionContent action){
  this.element=element;
  this.cssStyles=cssStyles;
  this.inlineParent=inlineParent;
  this.action=action;
}",0.9120370370370372
74680,"public RowState(Element element,Map cssStyles,IContent parent,IContent inlineParent,ActionContent action){
  super(element,cssStyles,parent,inlineParent,action);
  content=new RowContent((ReportContent)parent.getReportContent());
  HTML2Content.handleStyle(element,cssStyles,content);
  content.setHeight(PropertyUtil.getDimensionAttribute(element,""String_Node_Str""));
}","public RowState(Element element,Map cssStyles,IContent parent,IContent inlineParent,ActionContent action){
  super(element,cssStyles,inlineParent,action);
  content=new RowContent((ReportContent)parent.getReportContent());
  setParent(parent);
  HTML2Content.handleStyle(element,cssStyles,content);
  content.setHeight(PropertyUtil.getDimensionAttribute(element,""String_Node_Str""));
}",0.9628647214854112
74681,"public void processNodes(){
  HTML2Content.processNodes(element,cssStyles,content,inlineParent,action);
  parent.getChildren().add(content);
  content.setParent(parent);
}","public void processNodes(){
  HTML2Content.processNodes(element,cssStyles,content,inlineParent,action);
}",0.7608695652173914
74682,"public CellState(Element element,Map cssStyles,IContent parent,IContent inlineParent,ActionContent action){
  super(element,cssStyles,parent,inlineParent,action);
  cell=new CellContent((ReportContent)parent.getReportContent());
  content=cell;
  HTML2Content.handleStyle(element,cssStyles,content);
  cell.setRowSpan(PropertyUtil.getIntAttribute(element,ATTRIBUTE_ROWSPAN));
  cell.setColSpan(PropertyUtil.getIntAttribute(element,ATTRIBUTE_COLSPAN));
}","public CellState(Element element,Map cssStyles,IContent parent,IContent inlineParent,ActionContent action){
  super(element,cssStyles,inlineParent,action);
  cell=new CellContent((ReportContent)parent.getReportContent());
  content=cell;
  setParent(parent);
  HTML2Content.handleStyle(element,cssStyles,content);
  cell.setRowSpan(PropertyUtil.getIntAttribute(element,ATTRIBUTE_ROWSPAN));
  cell.setColSpan(PropertyUtil.getIntAttribute(element,ATTRIBUTE_COLSPAN));
}",0.9695652173913044
74683,"public TableState(Element element,Map cssStyles,IContent parent,IContent inlineParent,ActionContent action){
  super(element,cssStyles,parent,inlineParent,action);
  content=new TableContent((ReportContent)parent.getReportContent());
  content.setWidth(PropertyUtil.getDimensionAttribute(element,""String_Node_Str""));
  HTML2Content.handleStyle(element,cssStyles,content);
  columnWidth=new ArrayList();
}","public TableState(Element element,Map cssStyles,IContent parent,IContent inlineParent,ActionContent action){
  super(element,cssStyles,inlineParent,action);
  content=new TableContent((ReportContent)parent.getReportContent());
  setParent(parent);
  content.setWidth(PropertyUtil.getDimensionAttribute(element,""String_Node_Str""));
  HTML2Content.handleStyle(element,cssStyles,content);
  columnWidth=new ArrayList();
}",0.9659367396593674
74684,"public void doSave(OutputStream outputStream,Map cacheRequestMap) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=this.resultObjects.length;
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(dos,rowCount);
    for (int i=0; i < rowCount; i++) {
      ResultSetUtil.writeResultObject(dos,resultObjects[i],colCount,resultSetNameSet);
    }
    dos.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","public void doSave(DataOutputStream outputStream,DataOutputStream rowLensStream,Map cacheRequestMap) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=this.resultObjects.length;
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(dos,rowCount);
    long offset=4;
    for (int i=0; i < rowCount; i++) {
      IOUtil.writeLong(rowLensStream,offset);
      offset+=ResultSetUtil.writeResultObject(dos,resultObjects[i],colCount,resultSetNameSet);
    }
    dos.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.8895612708018155
74685,"/** 
 * Serialize to an output stream
 * @param outputStream
 */
public void doSave(OutputStream outputStream,Map cacheRequestMapping) throws DataException ;","/** 
 * Serialize to an output stream
 * @param outputStream
 */
public void doSave(DataOutputStream outputStream,DataOutputStream lensStream,Map cacheRequestMapping) throws DataException ;",0.907514450867052
74686,"/** 
 * Write the result object value if it is used in column binding map
 * @param dos
 * @param resultObject
 * @param nameSet
 * @throws DataException
 * @throws IOException
 */
public static void writeResultObject(DataOutputStream dos,IResultObject resultObject,int count,Set nameSet) throws DataException, IOException {
  if (resultObject.getResultClass() == null)   return;
  for (int i=1; i <= count; i++) {
    if (nameSet != null && (nameSet.contains(resultObject.getResultClass().getFieldName(i)) || nameSet.contains(resultObject.getResultClass().getFieldAlias(i))))     IOUtil.writeObject(dos,resultObject.getFieldValue(i));
  }
}","/** 
 * Write the result object value if it is used in column binding map
 * @param dos
 * @param resultObject
 * @param nameSet
 * @throws DataException
 * @throws IOException
 */
public static int writeResultObject(DataOutputStream dos,IResultObject resultObject,int count,Set nameSet) throws DataException, IOException {
  if (resultObject.getResultClass() == null)   return 0;
  ByteArrayOutputStream tempBaos=new ByteArrayOutputStream();
  BufferedOutputStream tempBos=new BufferedOutputStream(tempBaos);
  DataOutputStream tempDos=new DataOutputStream(tempBos);
  for (int i=1; i <= count; i++) {
    if (nameSet != null && (nameSet.contains(resultObject.getResultClass().getFieldName(i)) || nameSet.contains(resultObject.getResultClass().getFieldAlias(i))))     IOUtil.writeObject(tempDos,resultObject.getFieldValue(i));
  }
  tempDos.flush();
  tempBos.flush();
  tempBaos.flush();
  byte[] bytes=tempBaos.toByteArray();
  int rowBytes=bytes.length;
  IOUtil.writeRawBytes(dos,bytes);
  tempBaos=null;
  tempBos=null;
  tempDos=null;
  return rowBytes;
}",0.7469172049324722
74687,"public void doSave(OutputStream outputStream,Map cacheRequestMap) throws DataException {
  this.resultSetCache.doSave(outputStream,cacheRequestMap);
}","public void doSave(DataOutputStream outputStream,DataOutputStream rowLensStream,Map cacheRequestMap) throws DataException {
  this.resultSetCache.doSave(outputStream,rowLensStream,cacheRequestMap);
}",0.8595988538681948
74688,"public void doSave(OutputStream outputStream,Map cacheRequestMap) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=this.diskBasedResultSet.getCount();
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(dos,rowCount);
    int currIndex=this.currResultIndex;
    this.reset();
    for (int i=0; i < rowCount; i++) {
      ResultSetUtil.writeResultObject(dos,this.diskBasedResultSet.nextRow(),colCount,resultSetNameSet);
    }
    this.reset();
    this.moveTo(currIndex);
    dos.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","public void doSave(DataOutputStream outputStream,DataOutputStream rowLensStream,Map cacheRequestMap) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=this.diskBasedResultSet.getCount();
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(dos,rowCount);
    int currIndex=this.currResultIndex;
    this.reset();
    long offset=4;
    for (int i=0; i < rowCount; i++) {
      IOUtil.writeLong(rowLensStream,offset);
      offset+=ResultSetUtil.writeResultObject(dos,this.diskBasedResultSet.nextRow(),colCount,resultSetNameSet);
    }
    this.reset();
    this.moveTo(currIndex);
    dos.close();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.93173198482933
74689,"public void doSave(StreamWrapper streamsWrapper,boolean isSubQuery) throws DataException {
  if (streamsWrapper.getStreamForGroupInfo() != null) {
    this.resultSetPopulator.getGroupProcessorManager().getGroupCalculationUtil().doSave(streamsWrapper.getStreamForGroupInfo());
  }
  if (isSubQuery == false && streamsWrapper.getStreamForResultClass() != null) {
    ((ResultClass)this.resultSetPopulator.getResultSetMetadata()).doSave(streamsWrapper.getStreamForResultClass(),resultSetPopulator.getEventHandler().getAllColumnBindings());
    try {
      streamsWrapper.getStreamForResultClass().close();
      if (streamsWrapper.getStreamForDataSet() != null) {
        this.resultSetPopulator.getCache().doSave(streamsWrapper.getStreamForDataSet(),resultSetPopulator.getEventHandler().getAllColumnBindings());
      }
      streamsWrapper.getStreamForDataSet().close();
    }
 catch (    IOException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
  }
}","public void doSave(StreamWrapper streamsWrapper,boolean isSubQuery) throws DataException {
  if (streamsWrapper.getStreamForGroupInfo() != null) {
    this.resultSetPopulator.getGroupProcessorManager().getGroupCalculationUtil().doSave(streamsWrapper.getStreamForGroupInfo());
  }
  if (isSubQuery == false && streamsWrapper.getStreamForResultClass() != null) {
    ((ResultClass)this.resultSetPopulator.getResultSetMetadata()).doSave(streamsWrapper.getStreamForResultClass(),resultSetPopulator.getEventHandler().getAllColumnBindings());
    try {
      streamsWrapper.getStreamForResultClass().close();
      if (streamsWrapper.getStreamForDataSet() != null) {
        this.resultSetPopulator.getCache().doSave(streamsWrapper.getStreamForDataSet(),streamsWrapper.getStreamForDataSetRowLens(),resultSetPopulator.getEventHandler().getAllColumnBindings());
      }
      streamsWrapper.getStreamForDataSet().close();
      streamsWrapper.getStreamForDataSetRowLens().close();
    }
 catch (    IOException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
  }
}",0.9492360768851652
74690,"public void doSave(StreamWrapper streamWrapper,boolean isSubQuery) throws DataException {
  try {
    if (streamWrapper.getStreamForResultClass() != null) {
      IOUtil.writeInt(streamWrapper.getStreamForResultClass(),0);
      streamWrapper.getStreamForResultClass().close();
      if (streamWrapper.getStreamForDataSet() != null) {
        IOUtil.writeInt(streamWrapper.getStreamForDataSet(),0);
        streamWrapper.getStreamForDataSet().close();
      }
    }
    IOUtil.writeInt(streamWrapper.getStreamForGroupInfo(),0);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}","public void doSave(StreamWrapper streamWrapper,boolean isSubQuery) throws DataException {
  try {
    if (streamWrapper.getStreamForResultClass() != null) {
      IOUtil.writeInt(streamWrapper.getStreamForResultClass(),0);
      streamWrapper.getStreamForResultClass().close();
      if (streamWrapper.getStreamForDataSet() != null) {
        IOUtil.writeInt(streamWrapper.getStreamForDataSet(),0);
        streamWrapper.getStreamForDataSet().close();
      }
      if (streamWrapper.getStreamForDataSetRowLens() != null) {
        IOUtil.writeLong(streamWrapper.getStreamForDataSetRowLens(),0);
        streamWrapper.getStreamForDataSetRowLens().close();
      }
    }
    IOUtil.writeInt(streamWrapper.getStreamForGroupInfo(),0);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}",0.8636363636363636
74691,"public void doSave(StreamWrapper streamsWrapper,boolean isSubQuery) throws DataException {
  try {
    if (streamsWrapper.getStreamForResultClass() != null) {
      IOUtil.writeInt(streamsWrapper.getStreamForResultClass(),0);
      streamsWrapper.getStreamForResultClass().close();
      if (streamsWrapper.getStreamForDataSet() != null) {
        IOUtil.writeInt(streamsWrapper.getStreamForDataSet(),0);
        streamsWrapper.getStreamForDataSet().close();
      }
    }
    IOUtil.writeInt(streamsWrapper.getStreamForGroupInfo(),0);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}","public void doSave(StreamWrapper streamsWrapper,boolean isSubQuery) throws DataException {
  try {
    if (streamsWrapper.getStreamForResultClass() != null) {
      IOUtil.writeInt(streamsWrapper.getStreamForResultClass(),0);
      streamsWrapper.getStreamForResultClass().close();
      if (streamsWrapper.getStreamForDataSet() != null) {
        IOUtil.writeInt(streamsWrapper.getStreamForDataSet(),0);
        streamsWrapper.getStreamForDataSet().close();
      }
      if (streamsWrapper.getStreamForDataSetRowLens() != null) {
        IOUtil.writeLong(streamsWrapper.getStreamForDataSetRowLens(),0);
        streamsWrapper.getStreamForDataSetRowLens().close();
      }
    }
    IOUtil.writeInt(streamsWrapper.getStreamForGroupInfo(),0);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}",0.8633663366336634
74692,"/** 
 * This is used for PRESENTATION, the data in report document as the CachedResultSet.
 * @return
 * @throws DataException
 */
IExprResultSet loadExprResultSet() throws DataException {
  if (streamManager.isSecondRD() == true && streamManager.isSubquery() == true)   return new ExprResultSet2(streamManager,version,streamManager.isSecondRD());
  return new ExprResultSet(streamManager,version,streamManager.isSecondRD());
}","/** 
 * This is used for PRESENTATION, the data in report document as the CachedResultSet.
 * @return
 * @throws DataException
 */
IExprResultSet loadExprResultSet() throws DataException {
  if (streamManager.isSecondRD() == true && streamManager.isSubquery() == true)   return new ExprResultSet2(streamManager,version,streamManager.isSecondRD());
  return new ExprResultSet(streamManager,version,streamManager.isSecondRD(),(streamManager.isSubquery() || this.version < VersionManager.VERSION_2_2_1_3) ? null : this.loadDataSetData());
}",0.8858921161825726
74693,"/** 
 * @return
 * @throws DataException
 */
public DataSetResultSet loadDataSetData() throws DataException {
  InputStream stream=streamManager.getInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  BufferedInputStream buffStream=new BufferedInputStream(stream);
  DataSetResultSet populator=new DataSetResultSet(buffStream,this.loadResultClass());
  return populator;
}","/** 
 * @return
 * @throws DataException
 */
public DataSetResultSet loadDataSetData() throws DataException {
  RAInputStream stream=streamManager.getInStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  RAInputStream lensStream=null;
  if (version >= VersionManager.VERSION_2_2_1_3)   lensStream=streamManager.getInStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  DataSetResultSet populator=new DataSetResultSet(stream,lensStream,this.loadResultClass());
  return populator;
}",0.7132867132867133
74694,"/** 
 * This is used for UPDATE, the data in report document as data source for transformation.
 * @return
 * @throws DataException
 */
public IExprDataResultSet loadExprDataResultSet() throws DataException {
  if (version == VersionManager.VERSION_2_0)   throw new DataException(ResourceConstants.WRONG_VERSION);
  InputStream inputStream=streamManager.getInStream(DataEngineContext.EXPR_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  BufferedInputStream buffStream=new BufferedInputStream(inputStream);
  ExprMetaInfo[] exprMetas=ExprMetaUtil.loadExprMetaInfo(buffStream);
  try {
    buffStream.close();
    inputStream.close();
  }
 catch (  IOException e) {
  }
  IExprDataResultSet exprDataResultSet=null;
  if (streamManager.isBasedOnSecondRD() == false)   exprDataResultSet=new ExprDataResultSet1(streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),exprMetas,streamManager.getVersion());
 else   exprDataResultSet=new ExprDataResultSet2(streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),streamManager.getInStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),streamManager.getInStream(DataEngineContext.ROW_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.PARENT_SCOPE),exprMetas,version);
  return exprDataResultSet;
}","/** 
 * This is used for UPDATE, the data in report document as data source for transformation.
 * @return
 * @throws DataException
 */
public IExprDataResultSet loadExprDataResultSet() throws DataException {
  if (version == VersionManager.VERSION_2_0)   throw new DataException(ResourceConstants.WRONG_VERSION);
  InputStream inputStream=streamManager.getInStream(DataEngineContext.EXPR_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  BufferedInputStream buffStream=new BufferedInputStream(inputStream);
  ExprMetaInfo[] exprMetas=ExprMetaUtil.loadExprMetaInfo(buffStream);
  try {
    buffStream.close();
    inputStream.close();
  }
 catch (  IOException e) {
  }
  IExprDataResultSet exprDataResultSet=null;
  if (streamManager.isBasedOnSecondRD() == false)   exprDataResultSet=new ExprDataResultSet1(streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),exprMetas,version,version < VersionManager.VERSION_2_2_1_3 ? null : this.loadDataSetData());
 else   exprDataResultSet=new ExprDataResultSet2(streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),streamManager.getInStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),streamManager.getInStream(DataEngineContext.ROW_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.PARENT_SCOPE),exprMetas,version,version < VersionManager.VERSION_2_2_1_3 ? null : this.loadDataSetData());
  return exprDataResultSet;
}",0.9457364341085271
74695,"/** 
 * @throws DataException
 */
private void initSaveRowUtil() throws DataException {
  rowExprsOs=streamManager.getOutStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  rowLenOs=streamManager.getOutStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  Map bindingNameColumnName=new HashMap();
  Set bindingNamesToSave=new HashSet();
  Iterator it=this.queryDefn.getBindings().keySet().iterator();
  while (it.hasNext()) {
    String key=it.next().toString();
    IBinding binding=(IBinding)this.queryDefn.getBindings().get(key);
    if (this.queryDefn instanceof QueryDefinition && ((QueryDefinition)this.queryDefn).getQueryResultsID() == null && binding.getAggregatOns().size() == 0 && binding.getAggrFunction() == null) {
      IBaseExpression expr=binding.getExpression();
      if (expr instanceof IScriptExpression) {
        String expression=((IScriptExpression)expr).getText();
        String dataSetColumnName=this.getDataSetColumnName(expression);
        if (dataSetColumnName != null) {
          bindingNameColumnName.put(binding.getBindingName(),dataSetColumnName);
        }
      }
    }
    if (bindingNameColumnName.get(binding.getBindingName()) == null)     bindingNamesToSave.add(binding.getBindingName());
  }
  this.rowSaveUtil=new RowSaveUtil(rowCount,rowExprsOs,rowLenOs,bindingNamesToSave,bindingNameColumnName);
}","/** 
 * @throws DataException
 */
private void initSaveRowUtil() throws DataException {
  rowExprsOs=streamManager.getOutStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  rowLenOs=streamManager.getOutStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  Map bindingNameColumnName=new HashMap();
  Set bindingNamesToSave=new HashSet();
  Iterator it=this.queryDefn.getBindings().keySet().iterator();
  while (it.hasNext()) {
    String key=it.next().toString();
    IBinding binding=(IBinding)this.queryDefn.getBindings().get(key);
    if (this.streamManager.getVersion() >= VersionManager.VERSION_2_2_1_3 && this.queryDefn instanceof QueryDefinition && ((QueryDefinition)this.queryDefn).getQueryResultsID() == null && binding.getAggregatOns().size() == 0 && binding.getAggrFunction() == null) {
      IBaseExpression expr=binding.getExpression();
      if (expr instanceof IScriptExpression) {
        String expression=((IScriptExpression)expr).getText();
        String dataSetColumnName=this.getDataSetColumnName(expression);
        if (dataSetColumnName != null) {
          bindingNameColumnName.put(binding.getBindingName(),dataSetColumnName);
        }
      }
    }
    if (bindingNameColumnName.get(binding.getBindingName()) == null)     bindingNamesToSave.add(binding.getBindingName());
  }
  this.rowSaveUtil=new RowSaveUtil(rowCount,rowExprsOs,rowLenOs,bindingNamesToSave,bindingNameColumnName,this.streamManager.getVersion());
}",0.965981812057932
74696,"/** 
 * init save environment
 */
private void initSave(boolean finish) throws DataException {
  if (inited == true)   return;
  inited=true;
  try {
    IOUtil.writeInt(this.rowExprsDos,rowCount);
    Map map=new HashMap();
    Iterator it=exprNameSet.iterator();
    while (it.hasNext()) {
      Object value=it.next();
      map.put(value,value);
    }
    int rowBytes=this.initSave(map);
    IOUtil.writeInt(this.rowExprsDos,rowBytes);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","/** 
 * init save environment
 */
private void initSave(boolean finish) throws DataException {
  if (inited == true)   return;
  inited=true;
  try {
    IOUtil.writeInt(this.rowExprsDos,rowCount);
    Map map=new HashMap();
    Iterator it=exprNameSet.iterator();
    while (it.hasNext()) {
      Object value=it.next();
      map.put(value,value);
    }
    int rowBytes=this.version >= VersionManager.VERSION_2_2_1_3 ? this.initSave(map) : this.saveExprValue(map);
    IOUtil.writeInt(this.rowExprsDos,rowBytes);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9248055315471044
74697,"/** 
 * @param rowCount
 * @param rowExprsOs
 * @param rowLenOs
 */
RowSaveUtil(int rowCount,OutputStream rowExprsOs,OutputStream rowLenOs,Set exprNameSet,Map directColumnReferenceExpr){
  this.rowCount=rowCount;
  this.rowExprsDos=new DataOutputStream(rowExprsOs);
  this.rowLenDos=new DataOutputStream(rowLenOs);
  this.lastRowIndex=-1;
  this.exprNameSet=exprNameSet;
  this.directColumnReferenceBinding=directColumnReferenceExpr;
}","/** 
 * @param rowCount
 * @param rowExprsOs
 * @param rowLenOs
 */
RowSaveUtil(int rowCount,OutputStream rowExprsOs,OutputStream rowLenOs,Set exprNameSet,Map directColumnReferenceExpr,int version){
  this.rowCount=rowCount;
  this.rowExprsDos=new DataOutputStream(rowExprsOs);
  this.rowLenDos=new DataOutputStream(rowLenOs);
  this.lastRowIndex=-1;
  this.exprNameSet=exprNameSet;
  this.directColumnReferenceBinding=directColumnReferenceExpr;
  this.version=version;
}",0.9602649006622516
74698,"public PDFPageDevice(OutputStream output,String title,IReportContext context,IReportContent report){
  this.context=context;
  this.report=report;
  doc=new Document();
  PDFPage.reset();
  try {
    writer=PdfWriter.getInstance(doc,new BufferedOutputStream(output));
    String creator=""String_Node_Str"" + BundleVersionUtil.getBundleVersion(""String_Node_Str"") + ""String_Node_Str""+ BundleVersionUtil.getBundleVersion(""String_Node_Str"");
    doc.addCreator(creator);
    if (null != title)     doc.addTitle(title);
  }
 catch (  DocumentException de) {
    logger.log(Level.SEVERE,de.getMessage(),de);
  }
}","public PDFPageDevice(OutputStream output,String title,IReportContext context,IReportContent report){
  this.context=context;
  this.report=report;
  doc=new Document();
  try {
    writer=PdfWriter.getInstance(doc,new BufferedOutputStream(output));
    String creator=""String_Node_Str"" + BundleVersionUtil.getBundleVersion(""String_Node_Str"") + ""String_Node_Str""+ BundleVersionUtil.getBundleVersion(""String_Node_Str"");
    doc.addCreator(creator);
    if (null != title)     doc.addTitle(title);
  }
 catch (  DocumentException de) {
    logger.log(Level.SEVERE,de.getMessage(),de);
  }
}",0.9840737636211232
74699,"/** 
 * @param parentBindings
 * @throws DataException 
 */
private void addParentBindings(Map parentBindings) throws DataException {
  Iterator it=parentBindings.keySet().iterator();
  while (it.hasNext()) {
    Object o=it.next();
    IBaseExpression expr=((IBinding)parentBindings.get(o)).getExpression();
    if (expr instanceof IScriptExpression) {
      if (!ExpressionUtil.hasAggregation(((IScriptExpression)expr).getText())) {
        if (baseQueryDefn.getBindings().get(o) == null) {
          IBinding binding=new Binding(o.toString());
          binding.setExpression(copyScriptExpr(expr));
          baseQueryDefn.addBinding(binding);
        }
      }
    }
  }
}","/** 
 * @param parentBindings
 * @throws DataException 
 */
private void addParentBindings(Map parentBindings) throws DataException {
  Iterator it=parentBindings.keySet().iterator();
  while (it.hasNext()) {
    Object o=it.next();
    IBaseExpression expr=((IBinding)parentBindings.get(o)).getExpression();
    if (expr instanceof IScriptExpression) {
      if (!ExpressionUtil.hasAggregation(((IScriptExpression)expr).getText())) {
        if (baseQueryDefn.getBindings().get(o) == null) {
          IBinding binding=new Binding(o.toString());
          binding.setDataType(expr.getDataType());
          binding.setExpression(copyScriptExpr(expr));
          baseQueryDefn.addBinding(binding);
        }
      }
    }
  }
}",0.963649322879544
74700,"/** 
 * Date -> Time String -> Time
 * @param source
 * @return
 * @throws BirtException
 */
public static java.sql.Date toSqlDate(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Date) {
    return new java.sql.Date(((Date)source).getTime());
  }
 else   if (source instanceof String) {
    try {
      return new java.sql.Date(toDate((String)source).getTime());
    }
 catch (    Exception e) {
      try {
        return java.sql.Date.valueOf((String)source);
      }
 catch (      Exception e1) {
      }
    }
  }
  throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
}","/** 
 * @param date
 * @return
 */
private static java.sql.Date toSqlDate(Date date){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(date.getTime());
  calendar.set(Calendar.HOUR_OF_DAY,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.SECOND,0);
  return new java.sql.Date(calendar.getTimeInMillis());
}",0.1152737752161383
74701,"/** 
 * Date -> Time String -> Time
 * @param source
 * @return
 * @throws BirtException
 */
public static Time toSqlTime(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Date) {
    return new Time(((Date)source).getTime());
  }
 else   if (source instanceof String) {
    try {
      return new Time(toDate((String)source).getTime());
    }
 catch (    Exception e) {
      try {
        return Time.valueOf((String)source);
      }
 catch (      Exception e1) {
      }
    }
  }
  throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
}","/** 
 * @param date
 * @return
 */
private static java.sql.Time toSqlTime(Date date){
  Calendar calendar=Calendar.getInstance();
  calendar.clear();
  calendar.setTimeInMillis(date.getTime());
  calendar.set(Calendar.YEAR,1970);
  calendar.set(Calendar.MONTH,0);
  calendar.set(Calendar.DAY_OF_MONTH,1);
  return new java.sql.Time(calendar.getTimeInMillis());
}",0.0815109343936381
74702,"public Iterator getMemberValueIterator(TabularCubeHandle cubeHandle,String targetLevel,ILevelDefinition[] higherLevelDefns,Object[] values,Map appContext) throws AdapterException {
  try {
    if ((higherLevelDefns == null && values != null) || (higherLevelDefns != null && values == null) || cubeHandle == null || targetLevel == null)     return null;
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)(cubeHandle.getDimension(target.getDimensionName()).getContent(TabularDimensionHandle.HIERARCHIES_PROP,0));
    defineDataSourceAndDataSet(hierHandle.getDataSet());
    Map levelValueMap=new HashMap();
    if (higherLevelDefns != null) {
      for (int i=0; i < higherLevelDefns.length; i++) {
        if (target.getDimensionName().equals(higherLevelDefns[i].getHierarchy().getDimension().getName())) {
          levelValueMap.put(higherLevelDefns[i].getName(),values[i]);
        }
      }
    }
    DataSetIterator it=new DataSetIterator(this.session,hierHandle,appContext);
    return new MemberValueIterator(it,levelValueMap,target.getLevelName(),target.getAttrName());
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","public Iterator getMemberValueIterator(TabularCubeHandle cubeHandle,String targetLevel,ILevelDefinition[] higherLevelDefns,Object[] values,Map appContext) throws AdapterException {
  try {
    if ((higherLevelDefns == null && values != null) || (higherLevelDefns != null && values == null) || cubeHandle == null || targetLevel == null)     return null;
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)(cubeHandle.getDimension(target.getDimensionName()).getContent(TabularDimensionHandle.HIERARCHIES_PROP,0));
    if (hierHandle.getDataSet() != null)     defineDataSourceAndDataSet(hierHandle.getDataSet());
 else     defineDataSourceAndDataSet(cubeHandle.getDataSet());
    Map levelValueMap=new HashMap();
    if (higherLevelDefns != null) {
      for (int i=0; i < higherLevelDefns.length; i++) {
        if (target.getDimensionName().equals(higherLevelDefns[i].getHierarchy().getDimension().getName())) {
          levelValueMap.put(higherLevelDefns[i].getName(),values[i]);
        }
      }
    }
    DataSetIterator it=new DataSetIterator(this.session,hierHandle,appContext);
    return new MemberValueIterator(it,levelValueMap,target.getLevelName(),target.getAttrName());
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9556913674560732
74703,"/** 
 * @param expr
 * @return
 */
private String getDataSetColumnName(String expr){
  if (expr == null || expr.trim().length() == 0 || !(expr.matches(""String_Node_Str"") || expr.matches(""String_Node_Str"")))   return null;
  if (expr.matches(""String_Node_Str""))   return expr.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
 else   return expr.replace(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * @param expr
 * @return
 */
private String getDataSetColumnName(String expr){
  if (expr == null || expr.trim().length() == 0 || !(expr.matches(""String_Node_Str"") || expr.matches(""String_Node_Str"")))   return null;
  if (expr.matches(""String_Node_Str""))   return expr.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
 else   return expr.replaceAll(""String_Node_Str"",""String_Node_Str"");
}",0.9897142857142858
74704,"/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}","/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.9887640449438202
74705,"/** 
 * Render reportlet page.
 * @param out
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}","/** 
 * Render reportlet page.
 * @param out
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.9891035165923724
74706,"JSLevelObject(DimensionCursor cursor,String levelName) throws OLAPException {
  this.cursor=cursor;
  this.levelName=levelName;
  this.defaultColumnName=this.levelName;
}","JSLevelObject(DimensionCursor cursor,String levelName) throws OLAPException {
  this.cursor=cursor;
  this.levelName=levelName;
  RowDataMetaData meta=this.cursor.getMetaData();
  String defaultName=OlapExpressionUtil.getDisplayColumnName(this.levelName);
  for (int i=0; i < meta.getColumnCount(); i++) {
    if (meta.getColumnName(i).equals(defaultName)) {
      this.displayName=defaultName;
      break;
    }
  }
  if (this.displayName == null)   this.displayName=this.levelName;
}",0.4298780487804878
74707,"public Object get(String name,Scriptable start){
  try {
    return this.cursor.getObject(OlapExpressionUtil.getAttributeColumnName(levelName,name));
  }
 catch (  OLAPException e) {
    throw new RuntimeException(new DataException(e.getLocalizedMessage()));
  }
}","public Object get(String name,Scriptable start){
  try {
    if (""String_Node_Str"".equals(name))     return this.cursor.getObject(OlapExpressionUtil.getAttributeColumnName(levelName,this.displayName));
    return this.cursor.getObject(OlapExpressionUtil.getAttributeColumnName(levelName,name));
  }
 catch (  OLAPException e) {
    throw new RuntimeException(new DataException(e.getLocalizedMessage()));
  }
}",0.7845468053491828
74708,"private Object getKeyValue(){
  try {
    return this.cursor.getObject(this.defaultColumnName);
  }
 catch (  OLAPException e) {
    return null;
  }
}","private Object getKeyValue(){
  try {
    return this.cursor.getObject(this.levelName);
  }
 catch (  OLAPException e) {
    return null;
  }
}",0.9523809523809524
74709,"/** 
 * The constructor
 * @param textContent the textContent whose font need to be handled
 * @param fontSubstitution 		If it set to false, we needn��t check if the character exists in the selected font.
 * @param format the output format type
 */
public FontHandler(ITextContent textContent,boolean fontSubstitution,String format){
  IStyle style=textContent.getComputedStyle();
  this.fontFamilies=(CSSValueList)style.getProperty(StyleConstants.STYLE_FONT_FAMILY);
  if (CSSConstants.CSS_OBLIQUE_VALUE.equals(style.getFontStyle()) || CSSConstants.CSS_ITALIC_VALUE.equals(style.getFontStyle())) {
    this.fontStyle|=Font.ITALIC;
  }
  if (PropertyUtil.isBoldFont(style.getProperty(StyleConstants.STYLE_FONT_WEIGHT))) {
    this.fontStyle|=Font.BOLD;
  }
  this.fontSize=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_FONT_SIZE)) / PDFConstants.LAYOUT_TO_PDF_RATIO;
  setFormat(format);
  if (!fontSubstitution) {
    if (fontFamilies.getLength() == 0) {
      bf=fontManager.createFont(FontMappingManager.DEFAULT_FONT,fontStyle);
    }
 else {
      String fontName=fontManager.getLogicalFont(fontFamilies.item(0).getCssText());
      bf=fontManager.createFont(fontName,fontStyle);
    }
  }
}","/** 
 * The constructor
 * @param textContent the textContent whose font need to be handled
 * @param fontSubstitution 		If it set to false, we needn��t check if the character exists in the selected font.
 * @param format the output format type
 */
public FontHandler(ITextContent textContent,boolean fontSubstitution,String format){
  IStyle style=textContent.getComputedStyle();
  this.fontFamilies=(CSSValueList)style.getProperty(StyleConstants.STYLE_FONT_FAMILY);
  if (CSSConstants.CSS_OBLIQUE_VALUE.equals(style.getFontStyle()) || CSSConstants.CSS_ITALIC_VALUE.equals(style.getFontStyle())) {
    this.fontStyle|=Font.ITALIC;
  }
  if (PropertyUtil.isBoldFont(style.getProperty(StyleConstants.STYLE_FONT_WEIGHT))) {
    this.fontStyle|=Font.BOLD;
  }
  this.fontSize=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_FONT_SIZE)) / PDFConstants.LAYOUT_TO_PDF_RATIO;
  setFormat(format);
  if (!fontSubstitution) {
    for (int i=0; i < fontFamilies.getLength(); i++) {
      String fontName=fontManager.getLogicalFont(fontFamilies.item(i).getCssText());
      bf=fontManager.createFont(fontName,fontStyle);
      if (bf != null)       return;
    }
    bf=fontManager.createFont(FontMappingManager.DEFAULT_FONT,fontStyle);
  }
}",0.8284789644012945
74710,"/** 
 */
public void testAnyOf(){
  String script2=""String_Node_Str"";
  String script3=""String_Node_Str"";
  String script4=""String_Node_Str"";
  String script5=""String_Node_Str"";
  String script6=""String_Node_Str"";
  String script7=""String_Node_Str"";
  assertTrue(((Boolean)cx.evaluateString(scope,script2,""String_Node_Str"",1,null)).booleanValue());
  assertTrue(((Boolean)cx.evaluateString(scope,script3,""String_Node_Str"",1,null)).booleanValue());
  assertTrue(((Boolean)cx.evaluateString(scope,script4,""String_Node_Str"",1,null)).booleanValue());
  assertTrue(((Boolean)cx.evaluateString(scope,script5,""String_Node_Str"",1,null)).booleanValue());
  assertTrue(((Boolean)cx.evaluateString(scope,script6,""String_Node_Str"",1,null)).booleanValue());
  assertFalse(((Boolean)cx.evaluateString(scope,script7,""String_Node_Str"",1,null)).booleanValue());
}","/** 
 */
public void testAnyOf(){
  String script2=""String_Node_Str"";
  String script3=""String_Node_Str"";
  String script4=""String_Node_Str"";
  String script5=""String_Node_Str"";
  String script6=""String_Node_Str"";
  String script7=""String_Node_Str"";
  String script8=""String_Node_Str"";
  String script9=""String_Node_Str"";
  assertTrue(((Boolean)cx.evaluateString(scope,script2,""String_Node_Str"",1,null)).booleanValue());
  assertTrue(((Boolean)cx.evaluateString(scope,script3,""String_Node_Str"",1,null)).booleanValue());
  assertTrue(((Boolean)cx.evaluateString(scope,script4,""String_Node_Str"",1,null)).booleanValue());
  assertTrue(((Boolean)cx.evaluateString(scope,script5,""String_Node_Str"",1,null)).booleanValue());
  assertTrue(((Boolean)cx.evaluateString(scope,script6,""String_Node_Str"",1,null)).booleanValue());
  assertFalse(((Boolean)cx.evaluateString(scope,script7,""String_Node_Str"",1,null)).booleanValue());
  assertTrue(((Boolean)cx.evaluateString(scope,script8,""String_Node_Str"",1,null)).booleanValue());
  assertFalse(((Boolean)cx.evaluateString(scope,script9,""String_Node_Str"",1,null)).booleanValue());
}",0.8619460010188487
74711,"/** 
 * @param aggrValueArray
 * @param filterHelper
 * @return
 * @throws IOException
 */
private IDiskArray fetchLevelKeys(IDiskArray aggrValueArray,IJSTopBottomFilterHelper filterHelper) throws IOException {
  IDiskArray levelKeyArray=new BufferedPrimitiveDiskArray(Constants.LIST_BUFFER_SIZE);
  int start=0;
  int end=aggrValueArray.size();
  if (filterHelper.isPercent()) {
    int size=aggrValueArray.size();
    int n=FilterUtil.getTargetN(size,filterHelper.getN());
    if (filterHelper.isTop())     start=size - n;
 else     end=n;
  }
  for (int i=start; i < end; i++) {
    ValueObject aggrValue=(ValueObject)aggrValueArray.get(i);
    levelKeyArray.add(aggrValue.index);
  }
  return levelKeyArray;
}","/** 
 * @param aggrValueArray
 * @param filterHelper
 * @return
 * @throws IOException
 */
private IDiskArray fetchLevelKeys(IDiskArray aggrValueArray,IJSTopBottomFilterHelper filterHelper) throws IOException {
  int start=0;
  int end=aggrValueArray.size();
  if (filterHelper.isPercent()) {
    int size=aggrValueArray.size();
    int n=FilterUtil.getTargetN(size,filterHelper.getN());
    if (filterHelper.isTop())     start=size - n;
 else     end=n;
  }
  IDiskArray levelKeyArray=new BufferedPrimitiveDiskArray(Math.min((end - start + 1),Constants.LIST_BUFFER_SIZE));
  for (int i=start; i < end; i++) {
    ValueObject aggrValue=(ValueObject)aggrValueArray.get(i);
    levelKeyArray.add(aggrValue.index);
  }
  return levelKeyArray;
}",0.6382393397524071
74712,"/** 
 * @param dimFilterList
 * @return
 * @throws IOException
 * @throws DataException
 */
private IDiskArray getDimFilterPositions(List dimFilterList) throws IOException, DataException {
  IDiskArray result=new BufferedPrimitiveDiskArray(Constants.LIST_BUFFER_SIZE);
  for (int i=0; i < dimPosition.size(); i++) {
    Integer pos=(Integer)dimPosition.get(i);
    if (isDimPositionSelected(pos.intValue(),dimFilterList))     result.add(pos);
  }
  return result;
}","/** 
 * @param dimFilterList
 * @return
 * @throws IOException
 * @throws DataException
 */
private IDiskArray getDimFilterPositions(List dimFilterList) throws IOException, DataException {
  IDiskArray result=new BufferedPrimitiveDiskArray(Math.min(dimPosition.size(),Constants.LIST_BUFFER_SIZE));
  for (int i=0; i < dimPosition.size(); i++) {
    Integer pos=(Integer)dimPosition.get(i);
    if (isDimPositionSelected(pos.intValue(),dimFilterList))     result.add(pos);
  }
  return result;
}",0.9697601668404588
74713,"/** 
 * get the intersection from two disk arrays which have been sorted.
 * @param array1
 * @param array2
 * @return
 * @throws IOException
 */
public static IDiskArray getIntersection(IDiskArray array1,IDiskArray array2) throws IOException {
  IDiskArray result=new BufferedPrimitiveDiskArray(Constants.LIST_BUFFER_SIZE);
  int i=0, j=0;
  while (i < array1.size() && j < array2.size()) {
    Comparable key1=(Comparable)array1.get(i);
    Comparable key2=(Comparable)array2.get(j);
    int ret=key1.compareTo(key2);
    if (ret == 0) {
      result.add(key1);
      i++;
      j++;
    }
 else     if (ret < 0) {
      i++;
    }
 else     j++;
  }
  array1.close();
  array2.close();
  return result;
}","/** 
 * get the intersection from two disk arrays which have been sorted.
 * @param array1
 * @param array2
 * @return
 * @throws IOException
 */
public static IDiskArray getIntersection(IDiskArray array1,IDiskArray array2) throws IOException {
  IDiskArray result=new BufferedPrimitiveDiskArray(min(array1.size(),array2.size(),Constants.LIST_BUFFER_SIZE));
  int i=0, j=0;
  while (i < array1.size() && j < array2.size()) {
    Comparable key1=(Comparable)array1.get(i);
    Comparable key2=(Comparable)array2.get(j);
    int ret=key1.compareTo(key2);
    if (ret == 0) {
      result.add(key1);
      i++;
      j++;
    }
 else     if (ret < 0) {
      i++;
    }
 else     j++;
  }
  array1.close();
  array2.close();
  return result;
}",0.9771941948859708
74714,"/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param containerName
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath containerName,String fileName,final String sourceFileName,String cheatSheetId,boolean showCheatSheet,IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(CREATING + fileName,2);
  IResource resource=(IContainer)ResourcesPlugin.getWorkspace().getRoot().findMember(containerName);
  IContainer container=null;
  if (resource == null || !resource.exists() || !(resource instanceof IContainer)) {
    IFolder folder=createFolderHandle(containerName);
    UIUtil.createFolder(folder,monitor);
    container=folder;
  }
 else {
    container=(IContainer)resource;
  }
  final IFile file=container.getFile(new Path(fileName));
  final String cheatId=cheatSheetId;
  final boolean showCheat=showCheatSheet;
  try {
    ReportDesignHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (isPredifinedTemplate(sourceFileName)) {
      String displayName=handle.getDisplayName();
      if (displayName != null && displayName.trim().length() > 0) {
        handle.setDisplayName(Messages.getString(displayName));
      }
      String description=handle.getDescription();
      if (description != null && description.trim().length() > 0) {
        handle.setDescription(Messages.getString(description));
      }
    }
    handle.saveAs(file.getLocation().toOSString());
    handle.close();
  }
 catch (  Exception e) {
  }
  container.refreshLocal(IResource.DEPTH_INFINITE,monitor);
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        IDE.openEditor(page,file,true);
        BasicNewProjectResourceWizard.updatePerspective(configElement);
        if (showCheat && !cheatId.equals(""String_Node_Str"")) {
          new OpenCheatSheetAction(cheatId).run();
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}","/** 
 * The worker method. It will find the container, create the file if missing or just replace its contents, and open the editor on the newly created file.
 * @param cheatSheetId
 * @param containerName
 * @param fileName
 * @param showCheatSheet
 * @param monitor
 */
private void doFinish(IPath containerName,String fileName,final String sourceFileName,String cheatSheetId,boolean showCheatSheet,IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(CREATING + fileName,2);
  IResource resource=(IContainer)ResourcesPlugin.getWorkspace().getRoot().findMember(containerName);
  IContainer container=null;
  if (resource == null || !resource.exists() || !(resource instanceof IContainer)) {
    IFolder folder=createFolderHandle(containerName);
    UIUtil.createFolder(folder,monitor);
    container=folder;
  }
 else {
    container=(IContainer)resource;
  }
  final IFile file=container.getFile(new Path(fileName));
  final String cheatId=cheatSheetId;
  final boolean showCheat=showCheatSheet;
  try {
    ReportDesignHandle handle=SessionHandleAdapter.getInstance().getSessionHandle().createDesignFromTemplate(sourceFileName);
    if (ReportPlugin.getDefault().getEnableCommentPreference()) {
      handle.setStringProperty(ModuleHandle.COMMENTS_PROP,ReportPlugin.getDefault().getCommentPreference());
    }
    if (isPredifinedTemplate(sourceFileName)) {
      String displayName=handle.getDisplayName();
      if (displayName != null && displayName.trim().length() > 0) {
        handle.setDisplayName(Messages.getString(displayName));
      }
      String description=handle.getDescription();
      if (description != null && description.trim().length() > 0) {
        handle.setDescription(Messages.getString(description));
      }
    }
    handle.saveAs(file.getLocation().toOSString());
    handle.close();
  }
 catch (  Exception e) {
  }
  container.refreshLocal(IResource.DEPTH_INFINITE,monitor);
  monitor.worked(1);
  monitor.setTaskName(OPENING_FILE_FOR_EDITING);
  getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbench workbench=PlatformUI.getWorkbench();
      IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
      IWorkbenchPage page=window.getActivePage();
      try {
        IDE.openEditor(page,file,true);
        BasicNewProjectResourceWizard.updatePerspective(configElement);
        if (showCheat && !cheatId.equals(""String_Node_Str"")) {
          Object oldData=Display.getCurrent().getActiveShell().getData();
          if (oldData instanceof TrayDialog) {
            Display.getCurrent().getActiveShell().setData(null);
          }
          new OpenCheatSheetAction(cheatId).run();
        }
      }
 catch (      Exception e) {
        ExceptionHandler.handle(e);
      }
    }
  }
);
  monitor.worked(1);
}",0.9634551495016612
74715,"public void run(){
  IWorkbench workbench=PlatformUI.getWorkbench();
  IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
  IWorkbenchPage page=window.getActivePage();
  try {
    IDE.openEditor(page,file,true);
    BasicNewProjectResourceWizard.updatePerspective(configElement);
    if (showCheat && !cheatId.equals(""String_Node_Str"")) {
      new OpenCheatSheetAction(cheatId).run();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}","public void run(){
  IWorkbench workbench=PlatformUI.getWorkbench();
  IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
  IWorkbenchPage page=window.getActivePage();
  try {
    IDE.openEditor(page,file,true);
    BasicNewProjectResourceWizard.updatePerspective(configElement);
    if (showCheat && !cheatId.equals(""String_Node_Str"")) {
      Object oldData=Display.getCurrent().getActiveShell().getData();
      if (oldData instanceof TrayDialog) {
        Display.getCurrent().getActiveShell().setData(null);
      }
      new OpenCheatSheetAction(cheatId).run();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}",0.8375
74716,"/** 
 * Reset the testButton and manageButton to ""enabled"" status
 */
protected void resetTestAndMngButton(){
  if (!isURLBlank()) {
    setMessage(EMPTY_URL,IMessageProvider.ERROR);
    testButton.setEnabled(false);
  }
 else {
    setMessage(DEFAULT_MESSAGE);
    if (!testButton.isEnabled())     testButton.setEnabled(true);
  }
  manageButton.setEnabled(true);
  enableParent(manageButton);
}","/** 
 * Reset the testButton and manageButton to ""enabled"" status
 */
protected void resetTestAndMngButton(){
  if (isURLBlank() && isJNDIBlank()) {
    setMessage(EMPTY_URL,IMessageProvider.ERROR);
    testButton.setEnabled(false);
  }
 else {
    setMessage(DEFAULT_MESSAGE);
    if (!testButton.isEnabled())     testButton.setEnabled(true);
  }
  manageButton.setEnabled(true);
  enableParent(manageButton);
}",0.9777227722772276
74717,"/** 
 * This method should be called in the following occations: 1. The value of selected driver is changed 2. The value of inputed URL is changed 3. When the control is created 4.
 */
private void updateTestButton(){
  if (!isURLBlank()) {
    setMessage(EMPTY_URL,IMessageProvider.ERROR);
    testButton.setEnabled(false);
  }
 else {
    setMessage(DEFAULT_MESSAGE);
    if (!testButton.isEnabled())     testButton.setEnabled(true);
  }
}","/** 
 * This method should be called in the following occations: 1. The value of selected driver is changed 2. The value of inputed URL is changed 3. When the control is created 4.
 */
private void updateTestButton(){
  if (isDriverClassBlank() || (isURLBlank() && isJNDIBlank())) {
    setMessage(EMPTY_URL,IMessageProvider.ERROR);
    testButton.setEnabled(false);
  }
 else {
    setMessage(DEFAULT_MESSAGE);
    if (!testButton.isEnabled())     testButton.setEnabled(true);
  }
}",0.9523809523809524
74718,"/** 
 * Test if the input URL is blank 
 * @return true url is blank
 */
private boolean isURLBlank(){
  String value=jdbcUrl.getText();
  if (value == null)   return false;
  value=value.trim();
  if (value.length() == 0)   return false;
  return true;
}","/** 
 * Test if the input URL is blank 
 * @return true url is blank
 */
private boolean isURLBlank(){
  return jdbcUrl == null || jdbcUrl.getText().trim().length() == 0;
}",0.711943793911007
74719,"/** 
 * Adds event listeners
 */
private void addControlListeners(){
  jdbcUrl.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!jdbcUrl.isFocusControl() && jdbcUrl.getText().trim().length() == 0) {
        return;
      }
      verifyJDBCProperties();
      updateTestButton();
    }
  }
);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testButton.setEnabled(false);
      try {
        if (testConnection()) {
          MessageDialog.openInformation(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
        }
 else {
          OdaException ex=new OdaException(JdbcPlugin.getResourceString(""String_Node_Str""));
          ExceptionHandler.showException(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""),ex);
        }
      }
 catch (      OdaException e1) {
        ExceptionHandler.showException(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(e1.getLocalizedMessage()),e1);
      }
      testButton.setEnabled(true);
    }
  }
);
  manageButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      JdbcDriverManagerDialog dlg=new JdbcDriverManagerDialog(getShell());
      manageButton.setEnabled(false);
      testButton.setEnabled(false);
      if (dlg.open() == Window.OK) {
        BusyIndicator.showWhile(getShell() == null ? null : getShell().getDisplay(),new Runnable(){
          public void run(){
            okPressedProcess();
          }
        }
);
      }
      updateTestButton();
      manageButton.setEnabled(true);
    }
  }
);
}","/** 
 * Adds event listeners
 */
private void addControlListeners(){
  jdbcUrl.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!jdbcUrl.isFocusControl() && jdbcUrl.getText().trim().length() == 0) {
        return;
      }
      verifyJDBCProperties();
      updateTestButton();
    }
  }
);
  jndiName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!jndiName.isFocusControl() && jndiName.getText().trim().length() == 0) {
        return;
      }
      verifyJDBCProperties();
      updateTestButton();
    }
  }
);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testButton.setEnabled(false);
      try {
        if (testConnection()) {
          MessageDialog.openInformation(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
        }
 else {
          OdaException ex=new OdaException(JdbcPlugin.getResourceString(""String_Node_Str""));
          ExceptionHandler.showException(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""),ex);
        }
      }
 catch (      OdaException e1) {
        ExceptionHandler.showException(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(e1.getLocalizedMessage()),e1);
      }
      testButton.setEnabled(true);
    }
  }
);
  manageButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      JdbcDriverManagerDialog dlg=new JdbcDriverManagerDialog(getShell());
      manageButton.setEnabled(false);
      testButton.setEnabled(false);
      if (dlg.open() == Window.OK) {
        BusyIndicator.showWhile(getShell() == null ? null : getShell().getDisplay(),new Runnable(){
          public void run(){
            okPressedProcess();
          }
        }
);
      }
      updateTestButton();
      manageButton.setEnabled(true);
    }
  }
);
}",0.9285714285714286
74720,"/** 
 * Validates the data source and updates the window message accordingly
 * @return
 */
private boolean isValidDataSource(){
  return isURLBlank();
}","/** 
 * Validates the data source and updates the window message accordingly
 * @return
 */
private boolean isValidDataSource(){
  return !isURLBlank() || !isJNDIBlank();
}",0.9415384615384615
74721,"public void modifyText(ModifyEvent e){
  if (!jdbcUrl.isFocusControl() && jdbcUrl.getText().trim().length() == 0) {
    return;
  }
  verifyJDBCProperties();
  updateTestButton();
}","public void modifyText(ModifyEvent e){
  if (!jndiName.isFocusControl() && jndiName.getText().trim().length() == 0) {
    return;
  }
  verifyJDBCProperties();
  updateTestButton();
}",0.9395604395604396
74722,"private void verifyJDBCProperties(){
  if (driverChooserCombo != null && jdbcUrl != null) {
    if (getSelectedDriverClassName() != null && getSelectedDriverClassName().trim().length() > 0 && jdbcUrl.getText() != null && jdbcUrl.getText().trim().length() > 0)     setPageComplete(true);
 else     setPageComplete(false);
  }
}","private void verifyJDBCProperties(){
  if (!isDriverClassBlank()) {
    if (!isJNDIBlank()) {
      setPageComplete(true);
    }
 else     if (!isURLBlank()) {
      setPageComplete(true);
    }
 else     setPageComplete(false);
  }
 else   setPageComplete(false);
}",0.1655405405405405
74723,"public void writeText(Data d){
  writer.openTag(""String_Node_Str"");
  if (d.getDatatype().equals(Data.NUMBER)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (d.getDatatype().equals(Data.DATE)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.text(d.getText());
  writer.closeTag(""String_Node_Str"");
}","public void writeText(Data d){
  writer.openTag(""String_Node_Str"");
  if (d.getDatatype().equals(Data.NUMBER) && ExcelUtil.isNumber(d.getText())) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (d.getDatatype().equals(Data.DATE)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.text(d.getText());
  writer.closeTag(""String_Node_Str"");
}",0.9605411499436304
74724,"public Object get(String name,Scriptable start){
  try {
    if (""String_Node_Str"".equals(name))     return this.cursor.getObject(OlapExpressionUtil.getAttributeColumnName(levelName,this.displayName));
    return this.cursor.getObject(OlapExpressionUtil.getAttributeColumnName(levelName,name));
  }
 catch (  OLAPException e) {
    throw new RuntimeException(new DataException(e.getLocalizedMessage()));
  }
}","public Object get(String name,Scriptable start){
  try {
    if (this.displayName.equals(name))     return this.cursor.getObject(OlapExpressionUtil.getAttributeColumnName(levelName,this.displayName));
    return this.cursor.getObject(OlapExpressionUtil.getAttributeColumnName(levelName,name));
  }
 catch (  OLAPException e) {
    throw new RuntimeException(new DataException(e.getLocalizedMessage()));
  }
}",0.9620563035495716
74725,"JSLevelObject(DimensionCursor cursor,String levelName) throws OLAPException {
  this.cursor=cursor;
  this.levelName=levelName;
  RowDataMetaData meta=this.cursor.getMetaData();
  String defaultName=OlapExpressionUtil.getDisplayColumnName(this.levelName);
  for (int i=0; i < meta.getColumnCount(); i++) {
    if (meta.getColumnName(i).equals(defaultName)) {
      this.defaultColumnName=defaultName;
      break;
    }
  }
  if (this.defaultColumnName == null)   this.defaultColumnName=this.levelName;
}","JSLevelObject(DimensionCursor cursor,String levelName) throws OLAPException {
  this.cursor=cursor;
  this.levelName=levelName;
  this.defaultColumnName=this.levelName;
}",0.5044510385756676
74726,"public IDiskArray findAll() throws IOException {
  IDiskArray result=new BufferedPrimitiveDiskArray(Constants.LIST_BUFFER_SIZE);
  int lastPos=length() - 1;
  for (int i=0; i <= lastPos; i++) {
    result.add(new Integer(i));
  }
  return result;
}","public IDiskArray findAll() throws IOException {
  IDiskArray result=new BufferedPrimitiveDiskArray(Math.min(Constants.MAX_LIST_BUFFER_SIZE,length));
  int lastPos=length() - 1;
  for (int i=0; i <= lastPos; i++) {
    result.add(new Integer(i));
  }
  return result;
}",0.9593810444874274
74727,"public IDiskArray getDimensionRowByPositions(IDiskArray positionArray) throws IOException {
  BufferedStructureArray resultArray=new BufferedStructureArray(DimensionRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  for (int i=0; i < positionArray.size(); i++) {
    int pos=((Integer)positionArray.get(i)).intValue();
    resultArray.add(hierarchy.readRowByPosition(pos));
  }
  return resultArray;
}","public IDiskArray getDimensionRowByPositions(IDiskArray positionArray) throws IOException {
  BufferedStructureArray resultArray=new BufferedStructureArray(DimensionRow.getCreator(),Math.min(Constants.MAX_LIST_BUFFER_SIZE,positionArray.size()));
  for (int i=0; i < positionArray.size(); i++) {
    int pos=((Integer)positionArray.get(i)).intValue();
    resultArray.add(hierarchy.readRowByPosition(pos));
  }
  return resultArray;
}",0.9578820697954272
74728,"/** 
 * @param level
 * @param filter
 * @return
 * @throws IOException
 * @throws DataException
 */
private static BaseDiskSortedStack find(Level level,ISelection[] filter) throws IOException, DataException {
  IDiskArray indexKeyArray=level.getDiskIndex().find(filter);
  PrimitiveDiskSortedStack resultStack=new PrimitiveDiskSortedStack(Constants.LIST_BUFFER_SIZE,true,true);
  if (indexKeyArray != null) {
    for (int i=0; i < indexKeyArray.size(); i++) {
      IndexKey key=(IndexKey)indexKeyArray.get(i);
      resultStack.push(new Integer(key.getDimensionPos()));
    }
  }
  return resultStack;
}","/** 
 * @param level
 * @param filter
 * @return
 * @throws IOException
 * @throws DataException
 */
private static BaseDiskSortedStack find(Level level,ISelection[] filter) throws IOException, DataException {
  IDiskArray indexKeyArray=level.getDiskIndex().find(filter);
  if (indexKeyArray != null) {
    PrimitiveDiskSortedStack resultStack=new PrimitiveDiskSortedStack(Math.min(indexKeyArray.size(),Constants.MAX_LIST_BUFFER_SIZE),true,true);
    for (int i=0; i < indexKeyArray.size(); i++) {
      IndexKey key=(IndexKey)indexKeyArray.get(i);
      resultStack.push(new Integer(key.getDimensionPos()));
    }
    return resultStack;
  }
 else {
    return new PrimitiveDiskSortedStack(1,true,true);
  }
}",0.844106463878327
74729,"/** 
 * @return
 * @throws IOException
 */
public IDiskArray readAllRows() throws IOException {
  BufferedStructureArray resultArray=new BufferedStructureArray(DimensionRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  documentObj.seek(0);
  int size=documentObj.readInt();
  if (size == 0)   return resultArray;
  offsetDocObj.seek(0);
  documentObj.seek(offsetDocObj.readInt());
  for (int i=0; i < size; i++) {
    resultArray.add(readDimensionRow());
  }
  return resultArray;
}","/** 
 * @return
 * @throws IOException
 */
public IDiskArray readAllRows() throws IOException {
  documentObj.seek(0);
  int size=documentObj.readInt();
  BufferedStructureArray resultArray=new BufferedStructureArray(DimensionRow.getCreator(),size + 1);
  if (size == 0)   return resultArray;
  offsetDocObj.seek(0);
  documentObj.seek(offsetDocObj.readInt());
  for (int i=0; i < size; i++) {
    resultArray.add(readDimensionRow());
  }
  return resultArray;
}",0.851380042462845
74730,"/** 
 * @param levelDefs
 * @param keyDataType
 * @param attributesDataType
 * @param sortedDimensionSet
 * @throws IOException
 * @throws BirtException
 */
private int saveHierarchyRows(ILevelDefn[] levelDefs,int[][] keyDataType,int[][] attributesDataType,DiskSortedStack sortedDimensionSet) throws IOException, BirtException {
  DiskSortedStack sortedDimMembers=new DiskSortedStack(Constants.LIST_BUFFER_SIZE,true,false,Member.getCreator());
  IDiskArray[] indexKeyLists=new IDiskArray[keyDataType.length];
  for (int i=0; i < indexKeyLists.length; i++) {
    indexKeyLists[i]=new BufferedStructureArray(IndexKey.getCreator(),Constants.LIST_BUFFER_SIZE);
  }
  Object obj=sortedDimensionSet.pop();
  int currentIndex=0;
  IndexKey indexKey=null;
  while (obj != null) {
    DimensionRow dimRows=(DimensionRow)obj;
    Member[] levelMembers=dimRows.getMembers();
    for (int i=0; i < indexKeyLists.length; i++) {
      indexKey=new IndexKey();
      indexKey.setKey(levelMembers[i].getKeyValues());
      indexKey.setOffset((int)documentObj.getFilePointer());
      indexKey.setDimensionPos(currentIndex);
      indexKeyLists[i].add(indexKey);
    }
    offsetDocObj.writeInt((int)documentObj.getFilePointer());
    sortedDimMembers.push(dimRows.getMembers()[levelDefs.length - 1]);
    writeDimensionRow(dimRows,keyDataType,attributesDataType);
    obj=sortedDimensionSet.pop();
    currentIndex++;
  }
  validateDimensionMembers(sortedDimMembers);
  DiskIndex[] diskIndex=new DiskIndex[indexKeyLists.length];
  for (int i=0; i < indexKeyLists.length; i++) {
    diskIndex[i]=DiskIndex.createIndex(documentManager,NamingUtil.getLevelIndexDocName(dimensionName,levelDefs[i].getLevelName()),indexKeyLists[i],false);
  }
  levels=new Level[levelDefs.length];
  for (int i=0; i < levels.length; i++) {
    levels[i]=new Level(documentManager,levelDefs[i],keyDataType[i],attributesDataType[i],currentIndex,diskIndex[i]);
  }
  for (int i=0; i < levels.length; i++) {
    this.levelMap.put(levels[i].getName(),levels[i]);
  }
  return currentIndex;
}","/** 
 * @param levelDefs
 * @param keyDataType
 * @param attributesDataType
 * @param sortedDimensionSet
 * @throws IOException
 * @throws BirtException
 */
private int saveHierarchyRows(ILevelDefn[] levelDefs,int[][] keyDataType,int[][] attributesDataType,DiskSortedStack sortedDimensionSet) throws IOException, BirtException {
  DiskSortedStack sortedDimMembers=new DiskSortedStack(Math.min(sortedDimensionSet.size(),Constants.MAX_LIST_BUFFER_SIZE),true,false,Member.getCreator());
  IDiskArray[] indexKeyLists=new IDiskArray[keyDataType.length];
  for (int i=0; i < indexKeyLists.length; i++) {
    indexKeyLists[i]=new BufferedStructureArray(IndexKey.getCreator(),Math.min(sortedDimensionSet.size(),Constants.MAX_LIST_BUFFER_SIZE));
  }
  Object obj=sortedDimensionSet.pop();
  int currentIndex=0;
  IndexKey indexKey=null;
  while (obj != null) {
    DimensionRow dimRows=(DimensionRow)obj;
    Member[] levelMembers=dimRows.getMembers();
    for (int i=0; i < indexKeyLists.length; i++) {
      indexKey=new IndexKey();
      indexKey.setKey(levelMembers[i].getKeyValues());
      indexKey.setOffset((int)documentObj.getFilePointer());
      indexKey.setDimensionPos(currentIndex);
      indexKeyLists[i].add(indexKey);
    }
    offsetDocObj.writeInt((int)documentObj.getFilePointer());
    sortedDimMembers.push(dimRows.getMembers()[levelDefs.length - 1]);
    writeDimensionRow(dimRows,keyDataType,attributesDataType);
    obj=sortedDimensionSet.pop();
    currentIndex++;
  }
  validateDimensionMembers(sortedDimMembers);
  DiskIndex[] diskIndex=new DiskIndex[indexKeyLists.length];
  for (int i=0; i < indexKeyLists.length; i++) {
    diskIndex[i]=DiskIndex.createIndex(documentManager,NamingUtil.getLevelIndexDocName(dimensionName,levelDefs[i].getLevelName()),indexKeyLists[i],false);
  }
  levels=new Level[levelDefs.length];
  for (int i=0; i < levels.length; i++) {
    levels[i]=new Level(documentManager,levelDefs[i],keyDataType[i],attributesDataType[i],currentIndex,diskIndex[i]);
  }
  for (int i=0; i < levels.length; i++) {
    this.levelMap.put(levels[i].getName(),levels[i]);
  }
  return currentIndex;
}",0.9808337326305702
74731,"private IDiskArray getSortedDimensionKeys(IDiskArray members) throws IOException {
  DiskSortedStack sortedStack=new DiskSortedStack(Constants.FACT_TABLE_BUFFER_SIZE,true,false,DimensionKey.getCreator());
  for (int i=0; i < members.size(); i++) {
    sortedStack.push(members.get(i));
  }
  IDiskArray resultArray=new BufferedStructureArray(DimensionKey.getCreator(),Constants.LIST_BUFFER_SIZE);
  Object key=sortedStack.pop();
  while (key != null) {
    resultArray.add(key);
    key=sortedStack.pop();
  }
  return resultArray;
}","private IDiskArray getSortedDimensionKeys(IDiskArray members) throws IOException {
  DiskSortedStack sortedStack=new DiskSortedStack(Constants.FACT_TABLE_BUFFER_SIZE,true,false,DimensionKey.getCreator());
  for (int i=0; i < members.size(); i++) {
    sortedStack.push(members.get(i));
  }
  IDiskArray resultArray=new BufferedStructureArray(DimensionKey.getCreator(),Math.min(Constants.MAX_LIST_BUFFER_SIZE,sortedStack.size()));
  Object key=sortedStack.pop();
  while (key != null) {
    resultArray.add(key);
    key=sortedStack.pop();
  }
  return resultArray;
}",0.9699727024567788
74732,"/** 
 * @param dimRowArray
 * @return
 * @throws IOException
 */
private static IDiskArray getDimCombinatedKey(int[][] columnIndex,IDiskArray dimRowArray) throws IOException {
  BufferedStructureArray resultArray=new BufferedStructureArray(DimensionKey.getCreator(),Constants.LIST_BUFFER_SIZE);
  for (int i=0; i < dimRowArray.size(); i++) {
    DimensionRow dimRow=(DimensionRow)dimRowArray.get(i);
    DimensionKey key=new DimensionKey(columnIndex.length);
    Object[] values=new Object[columnIndex.length];
    for (int j=0; j < columnIndex.length; j++) {
      if (columnIndex[j][0] == 0) {
        values[j]=dimRow.getMembers()[columnIndex[j][1]].getKeyValues()[columnIndex[j][2]];
      }
 else {
        values[j]=dimRow.getMembers()[columnIndex[j][1]].getAttributes()[columnIndex[j][2]];
      }
    }
    key.setKeyValues(values);
    key.setDimensionPos(i);
    resultArray.add(key);
  }
  return resultArray;
}","/** 
 * @param dimRowArray
 * @return
 * @throws IOException
 */
private static IDiskArray getDimCombinatedKey(int[][] columnIndex,IDiskArray dimRowArray) throws IOException {
  BufferedStructureArray resultArray=new BufferedStructureArray(DimensionKey.getCreator(),Math.min(dimRowArray.size(),Constants.MAX_LIST_BUFFER_SIZE));
  for (int i=0; i < dimRowArray.size(); i++) {
    DimensionRow dimRow=(DimensionRow)dimRowArray.get(i);
    DimensionKey key=new DimensionKey(columnIndex.length);
    Object[] values=new Object[columnIndex.length];
    for (int j=0; j < columnIndex.length; j++) {
      if (columnIndex[j][0] == 0) {
        values[j]=dimRow.getMembers()[columnIndex[j][1]].getKeyValues()[columnIndex[j][2]];
      }
 else {
        values[j]=dimRow.getMembers()[columnIndex[j][1]].getAttributes()[columnIndex[j][2]];
      }
    }
    key.setKeyValues(values);
    key.setDimensionPos(i);
    resultArray.add(key);
  }
  return resultArray;
}",0.9824187533297816
74733,"/** 
 * @param members
 * @throws IOException
 */
DimensionPositionSeeker(IDiskArray member) throws IOException {
  IDiskArray members=getSortedDimensionKeys(member);
  this.memberArray=new DimensionKey[Math.min(Constants.LIST_BUFFER_SIZE,members.size())];
  for (int i=0; i < memberArray.length; i++) {
    memberArray[i]=(DimensionKey)members.get(i);
  }
  if (members.size() > Constants.LIST_BUFFER_SIZE) {
    this.diskMemberArray=members;
    this.diskPostion=memberArray.length;
    this.position=this.diskPostion;
  }
}","/** 
 * @param members
 * @throws IOException
 */
DimensionPositionSeeker(IDiskArray member) throws IOException {
  IDiskArray members=getSortedDimensionKeys(member);
  this.memberArray=new DimensionKey[Math.min(Constants.MAX_LIST_BUFFER_SIZE,members.size())];
  for (int i=0; i < memberArray.length; i++) {
    memberArray[i]=(DimensionKey)members.get(i);
  }
  if (members.size() > Constants.MAX_LIST_BUFFER_SIZE) {
    this.diskMemberArray=members;
    this.diskPostion=memberArray.length;
    this.position=this.diskPostion;
  }
}",0.9924528301886792
74734,"/** 
 * @param sortedKeyArray
 * @param startOffset
 * @param level
 * @param sonLevelTotalNumber
 * @return
 * @throws IOException
 * @throws DataException 
 */
private IDiskArray writeNonLeafNode(IDiskArray sortedKeyArray,IDiskArray startOffset,int level,int sonLevelTotalNumber) throws IOException, DataException {
  int interval=pow(degree,level);
  BufferedPrimitiveDiskArray sonStartOffset=new BufferedPrimitiveDiskArray(Math.min(Constants.LIST_BUFFER_SIZE,startOffset.size() / degree + 1));
  for (int i=0; i < startOffset.size(); i++) {
    if (i % degree == 0) {
      sonStartOffset.add(new Integer((int)documentObject.getFilePointer()));
    }
    if (i != startOffset.size() - 1) {
      documentObject.writeByte(degree);
      DocumentObjectUtil.writeValue(documentObject,keyDataType,((IndexKey)sortedKeyArray.get(i * interval)).getKey());
      DocumentObjectUtil.writeValue(documentObject,keyDataType,((IndexKey)sortedKeyArray.get((i + 1) * interval - 1)).getKey());
    }
 else {
      documentObject.writeByte(sonLevelTotalNumber - (startOffset.size() - 1) * degree);
      DocumentObjectUtil.writeValue(documentObject,keyDataType,((IndexKey)sortedKeyArray.get(i * interval)).getKey());
      DocumentObjectUtil.writeValue(documentObject,keyDataType,((IndexKey)sortedKeyArray.get(sortedKeyArray.size() - 1)).getKey());
    }
    documentObject.writeInt(((Integer)startOffset.get(i)).intValue());
  }
  return sonStartOffset;
}","/** 
 * @param sortedKeyArray
 * @param startOffset
 * @param level
 * @param sonLevelTotalNumber
 * @return
 * @throws IOException
 * @throws DataException 
 */
private IDiskArray writeNonLeafNode(IDiskArray sortedKeyArray,IDiskArray startOffset,int level,int sonLevelTotalNumber) throws IOException, DataException {
  int interval=pow(degree,level);
  BufferedPrimitiveDiskArray sonStartOffset=new BufferedPrimitiveDiskArray(Math.min(Constants.MAX_LIST_BUFFER_SIZE,startOffset.size() / degree + 1));
  for (int i=0; i < startOffset.size(); i++) {
    if (i % degree == 0) {
      sonStartOffset.add(new Integer((int)documentObject.getFilePointer()));
    }
    if (i != startOffset.size() - 1) {
      documentObject.writeByte(degree);
      DocumentObjectUtil.writeValue(documentObject,keyDataType,((IndexKey)sortedKeyArray.get(i * interval)).getKey());
      DocumentObjectUtil.writeValue(documentObject,keyDataType,((IndexKey)sortedKeyArray.get((i + 1) * interval - 1)).getKey());
    }
 else {
      documentObject.writeByte(sonLevelTotalNumber - (startOffset.size() - 1) * degree);
      DocumentObjectUtil.writeValue(documentObject,keyDataType,((IndexKey)sortedKeyArray.get(i * interval)).getKey());
      DocumentObjectUtil.writeValue(documentObject,keyDataType,((IndexKey)sortedKeyArray.get(sortedKeyArray.size() - 1)).getKey());
    }
    documentObject.writeInt(((Integer)startOffset.get(i)).intValue());
  }
  return sonStartOffset;
}",0.9986159169550172
74735,"/** 
 * @param sortedKeyArray
 * @param interval
 * @return
 * @throws IOException
 * @throws DataException 
 */
private IDiskArray writeLeafNode(IDiskArray sortedKeyArray,int interval) throws IOException, DataException {
  BufferedPrimitiveDiskArray offset=new BufferedPrimitiveDiskArray(Constants.LIST_BUFFER_SIZE);
  for (int i=0; i < sortedKeyArray.size(); i++) {
    if (i % interval == 0) {
      offset.add(new Integer((int)documentObject.getFilePointer()));
    }
    offsetDocumentObject.writeInt((int)documentObject.getFilePointer());
    writeKeyObject((IndexKey)sortedKeyArray.get(i));
  }
  return offset;
}","/** 
 * @param sortedKeyArray
 * @param interval
 * @return
 * @throws IOException
 * @throws DataException 
 */
private IDiskArray writeLeafNode(IDiskArray sortedKeyArray,int interval) throws IOException, DataException {
  BufferedPrimitiveDiskArray offset=new BufferedPrimitiveDiskArray(Math.min(sortedKeyArray.size(),Constants.MAX_LIST_BUFFER_SIZE));
  for (int i=0; i < sortedKeyArray.size(); i++) {
    if (i % interval == 0) {
      offset.add(new Integer((int)documentObject.getFilePointer()));
    }
    offsetDocumentObject.writeInt((int)documentObject.getFilePointer());
    writeKeyObject((IndexKey)sortedKeyArray.get(i));
  }
  return offset;
}",0.9717868338557992
74736,"/** 
 * @param keyList
 * @return
 * @throws IOException
 */
private IDiskArray sortKeys(IDiskArray keyList) throws IOException {
  DiskSortedStack sortStack=new DiskSortedStack(Constants.LIST_BUFFER_SIZE,false,IndexKey.getKeyComparator(),IndexKey.getCreator());
  for (int i=0; i < keyList.size(); i++) {
    sortStack.push((IComparableStructure)(keyList.get(i)));
  }
  BufferedStructureArray reList=new BufferedStructureArray(IndexKey.getCreator(),Constants.LIST_BUFFER_SIZE);
  for (int i=0; i < keyList.size(); i++) {
    reList.add(sortStack.pop());
  }
  return reList;
}","/** 
 * @param keyList
 * @return
 * @throws IOException
 */
private IDiskArray sortKeys(IDiskArray keyList) throws IOException {
  DiskSortedStack sortStack=new DiskSortedStack(Math.min(keyList.size(),Constants.MAX_LIST_BUFFER_SIZE),false,IndexKey.getKeyComparator(),IndexKey.getCreator());
  for (int i=0; i < keyList.size(); i++) {
    sortStack.push((IComparableStructure)(keyList.get(i)));
  }
  BufferedStructureArray reList=new BufferedStructureArray(IndexKey.getCreator(),Math.min(keyList.size(),Constants.MAX_LIST_BUFFER_SIZE));
  for (int i=0; i < keyList.size(); i++) {
    reList.add(sortStack.pop());
  }
  return reList;
}",0.9522240527182868
74737,"/** 
 * Get intersection from disk arrays.
 * @param stacks
 * @return
 * @throws IOException
 */
public static IDiskArray getIntersection(IDiskArray[] arrays) throws IOException {
  PrimitiveDiskSortedStack[] stacks=new PrimitiveDiskSortedStack[arrays.length];
  for (int i=0; i < arrays.length; i++) {
    stacks[i]=new PrimitiveDiskSortedStack(Constants.LIST_BUFFER_SIZE,true,true);
    if (arrays[i] == null || arrays[i].size() == 0) {
      return null;
    }
    for (int j=0; j < arrays[i].size(); j++) {
      stacks[i].push(arrays[i].get(j));
    }
  }
  return getIntersection(stacks);
}","/** 
 * Get intersection from disk arrays.
 * @param stacks
 * @return
 * @throws IOException
 */
public static IDiskArray getIntersection(IDiskArray[] arrays) throws IOException {
  PrimitiveDiskSortedStack[] stacks=new PrimitiveDiskSortedStack[arrays.length];
  for (int i=0; i < arrays.length; i++) {
    stacks[i]=new PrimitiveDiskSortedStack(Math.min(arrays[i].size(),Constants.MAX_LIST_BUFFER_SIZE),true,true);
    if (arrays[i] == null || arrays[i].size() == 0) {
      return null;
    }
    for (int j=0; j < arrays[i].size(); j++) {
      stacks[i].push(arrays[i].get(j));
    }
  }
  return getIntersection(stacks);
}",0.9746938775510204
74738,"AbstractNode(IContent content,IContentEmitter emitter,PageHintGenerator generator){
  this.content=content;
  this.emitter=emitter;
  this.generator=generator;
}","AbstractNode(IContent content,IContentEmitter emitter,PageHintGenerator generator,boolean isVisible){
  this.content=content;
  this.emitter=emitter;
  this.generator=generator;
  this.isVisible=isVisible;
}",0.875
74739,"public void start(){
  if (isStarted) {
    return;
  }
  if (parent != null && !parent.isStarted()) {
    parent.start();
  }
  ContentEmitterUtil.startContent(content,emitter);
  generator.start(content,isFirst);
  isStarted=true;
}","public void start(){
  if (isStarted) {
    return;
  }
  if (parent != null && !parent.isStarted()) {
    parent.start();
  }
  if (isVisible) {
    ContentEmitterUtil.startContent(content,emitter);
  }
  generator.start(content,isFirst);
  isStarted=true;
}",0.949290060851927
74740,"public void end(){
  ContentEmitterUtil.endContent(content,emitter);
  generator.end(content,finished);
}","public void end(){
  if (isVisible) {
    ContentEmitterUtil.endContent(content,emitter);
  }
  generator.end(content,finished);
}",0.8936170212765957
74741,"public ContainerBufferNode(IContent content,IContentEmitter emitter,PageHintGenerator generator){
  super(content,emitter,generator);
}","public ContainerBufferNode(IContent content,IContentEmitter emitter,PageHintGenerator generator,boolean isVisible){
  super(content,emitter,generator,isVisible);
}",0.906040268456376
74742,"public void start(){
  if (isStarted) {
    return;
  }
  if (parent != null && !parent.isStarted()) {
    parent.start();
  }
  ContentEmitterUtil.startContent(content,emitter);
  generator.start(content,isFirst);
  isStarted=true;
  flushUnStartedChildren();
}","public void start(){
  if (isStarted) {
    return;
  }
  if (parent != null && !parent.isStarted()) {
    parent.start();
  }
  if (isVisible) {
    ContentEmitterUtil.startContent(content,emitter);
  }
  generator.start(content,isFirst);
  isStarted=true;
  flushUnStartedChildren();
}",0.9544626593806922
74743,"public void startContent(IContent content,IContentEmitter emitter,boolean visible){
  if (isRepeated || (!visible && !isPageStarted())) {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator);
    setup(leafNode,true);
  }
 else {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator);
    setup(leafNode,true);
    currentNode.start();
    ContentEmitterUtil.startContent(content,emitter);
    generator.start(content,true);
    generator.end(content,true);
    currentNode.removeChildren();
  }
}","public void startContent(IContent content,IContentEmitter emitter,boolean visible){
  if (isRepeated || (!visible && !currentNode.isStarted())) {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator,visible);
    setup(leafNode,true);
  }
 else {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator,visible);
    setup(leafNode,true);
    currentNode.start();
    if (visible) {
      ContentEmitterUtil.startContent(content,emitter);
    }
    generator.start(content,true);
    generator.end(content,true);
    currentNode.removeChildren();
  }
}",0.5944986690328306
74744,"private void _endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  ((AbstractNode)currentNode).setFinished(finished);
  if (currentNode.isStarted()) {
    currentNode.end();
  }
 else {
    if (finished && !isRepeated) {
      if (visible) {
        currentNode.flush();
      }
 else       if (isPageStarted()) {
        currentNode.flush();
      }
    }
  }
  currentNode=currentNode.getParent();
  if (currentNode != null && finished && !isRepeated) {
    if (visible) {
      currentNode.removeChildren();
    }
 else     if (isPageStarted()) {
      currentNode.removeChildren();
    }
  }
}","private void _endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  ((AbstractNode)currentNode).setFinished(finished);
  if (currentNode.isStarted()) {
    currentNode.end();
  }
 else {
    if (finished && !isRepeated) {
      if (visible) {
        currentNode.flush();
      }
 else       if (isParentStarted()) {
        currentNode.flush();
      }
    }
  }
  currentNode=currentNode.getParent();
  if (currentNode != null && finished && !isRepeated) {
    if (visible) {
      currentNode.removeChildren();
    }
 else     if (isParentStarted()) {
      currentNode.removeChildren();
    }
  }
}",0.9905808477237048
74745,"public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter,boolean visible){
  int type=content.getContentType();
switch (type) {
case IContent.TABLE_BAND_CONTENT:
case IContent.LIST_BAND_CONTENT:
    boolean first=isFirst && !isRepeated;
  ContainerBufferNode bandNode=new ContainerBufferNode(content,emitter,generator);
setup(bandNode,first);
currentNode=bandNode;
break;
case IContent.CELL_CONTENT:
ContainerBufferNode cellNode=new ContainerBufferNode(content,emitter,generator);
setup(cellNode,isFirst);
if (currentNode.isStarted()) {
cellNode.start();
}
currentNode=cellNode;
break;
case IContent.PAGE_CONTENT:
PageNode pageNode=new PageNode(content,emitter,generator);
setup(pageNode,isFirst);
currentNode=pageNode;
this.pageNode=pageNode;
break;
default :
ContainerBufferNode node=new ContainerBufferNode(content,emitter,generator);
setup(node,isFirst);
currentNode=node;
break;
}
}","public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter,boolean visible){
  int type=content.getContentType();
switch (type) {
case IContent.TABLE_BAND_CONTENT:
case IContent.LIST_BAND_CONTENT:
    boolean first=isFirst && !isRepeated;
  ContainerBufferNode bandNode=new ContainerBufferNode(content,emitter,generator,visible);
setup(bandNode,first);
currentNode=bandNode;
break;
case IContent.CELL_CONTENT:
ContainerBufferNode cellNode=new ContainerBufferNode(content,emitter,generator,visible);
setup(cellNode,isFirst);
if (currentNode.isStarted()) {
cellNode.start();
}
currentNode=cellNode;
break;
case IContent.PAGE_CONTENT:
PageNode pageNode=new PageNode(content,emitter,generator,visible);
setup(pageNode,isFirst);
currentNode=pageNode;
break;
default :
ContainerBufferNode node=new ContainerBufferNode(content,emitter,generator,visible);
setup(node,isFirst);
currentNode=node;
break;
}
}",0.8376906318082789
74746,"LeafBufferNode(IContent content,IContentEmitter emitter,PageHintGenerator generator){
  super(content,emitter,generator);
}","LeafBufferNode(IContent content,IContentEmitter emitter,PageHintGenerator generator,boolean isVisible){
  super(content,emitter,generator,isVisible);
}",0.8978102189781022
74747,"public PageNode(IContent content,IContentEmitter emitter,PageHintGenerator generator){
  super(content,emitter,generator);
}","public PageNode(IContent content,IContentEmitter emitter,PageHintGenerator generator,boolean isVisible){
  super(content,emitter,generator,isVisible);
}",0.8985507246376812
74748,"public void start(){
  if (isStarted) {
    return;
  }
  if (parent != null && !parent.isStarted()) {
    parent.start();
  }
  ContentEmitterUtil.startContent(content,emitter);
  isStarted=true;
  flushUnStartedChildren();
}","public void start(){
  if (isStarted) {
    return;
  }
  if (parent != null && !parent.isStarted()) {
    parent.start();
  }
  if (isVisible) {
    ContentEmitterUtil.startContent(content,emitter);
  }
  isStarted=true;
  flushUnStartedChildren();
}",0.9475890985324948
74749,"public void end(){
  flushUnStartedChildren();
  ContentEmitterUtil.endContent(content,emitter);
}","public void end(){
  flushUnStartedChildren();
  if (isVisible) {
    ContentEmitterUtil.endContent(content,emitter);
  }
}",0.8868778280542986
74750,"public IStructure createInstance(Object[] fields){
}","public IStructure createInstance(Object[] fields){
  IndexKey obj=new IndexKey();
  obj.setKey(new Object[fields.length - 2]);
  System.arraycopy(fields,0,obj.getKey(),0,obj.getKey().length);
  obj.setOffset(((Integer)fields[fields.length - 2]).intValue());
  obj.setDimensionPos(((Integer)fields[fields.length - 1]).intValue());
  return obj;
}",0.2619647355163728
74751,"public void setAppContext(Object context) throws OdaException {
  if (!(context instanceof Map))   throw new OdaException(Messages.getString(""String_Node_Str""));
  Map appContext=(Map)context;
  if (appContext.get(""String_Node_Str"") != null) {
    appContext.put(org.eclipse.datatools.enablement.oda.xml.Constants.APPCONTEXT_INPUTSTREAM,appContext.get(""String_Node_Str""));
  }
  if (appContext.get(""String_Node_Str"") != null) {
    appContext.put(org.eclipse.datatools.enablement.oda.xml.Constants.APPCONTEXT_CLOSEINPUTSTREAM,appContext.get(""String_Node_Str""));
  }
  super.setAppContext((Map)context);
}","public void setAppContext(Object context) throws OdaException {
  if (!(context instanceof Map))   throw new OdaException(Messages.getString(""String_Node_Str""));
  Map appContext=(Map)context;
  if (appContext.get(Constants.APPCONTEXT_INPUTSTREAM) != null) {
    appContext.put(org.eclipse.datatools.enablement.oda.xml.Constants.APPCONTEXT_INPUTSTREAM,appContext.get(Constants.APPCONTEXT_INPUTSTREAM));
  }
  if (appContext.get(Constants.APPCONTEXT_CLOSEINPUTSTREAM) != null) {
    appContext.put(org.eclipse.datatools.enablement.oda.xml.Constants.APPCONTEXT_CLOSEINPUTSTREAM,appContext.get(Constants.APPCONTEXT_CLOSEINPUTSTREAM));
  }
  super.setAppContext((Map)context);
}",0.838810641627543
74752,"public void close(){
  try {
    if (rowExprsDis != null) {
      rowExprsDis.close();
      rowExprsDis=null;
    }
    if (this.rowLenDis != null) {
      this.rowLenDis.close();
      this.rowLenDis=null;
    }
  }
 catch (  IOException e) {
  }
}","public void close(){
  try {
    if (rowExprsDis != null) {
      rowExprsDis.close();
      rowExprsDis=null;
    }
  }
 catch (  IOException e) {
  }
}",0.7593052109181141
74753,"public void close(){
  try {
    if (rowExprsDis != null) {
      rowExprsDis.close();
      rowExprsDis=null;
    }
    if (rowLenDis != null) {
      rowLenDis.close();
      rowLenDis=null;
    }
  }
 catch (  IOException e) {
  }
}","public void close(){
  try {
    if (rowExprsDis != null) {
      rowExprsDis.close();
      rowExprsDis=null;
    }
  }
 catch (  IOException e) {
  }
}",0.788659793814433
74754,"/** 
 * This is used for UPDATE, the data in report document as data source for transformation.
 * @return
 * @throws DataException
 */
public IExprDataResultSet loadExprDataResultSet() throws DataException {
  if (version == VersionManager.VERSION_2_0)   throw new DataException(ResourceConstants.WRONG_VERSION);
  InputStream inputStream=streamManager.getInStream(DataEngineContext.EXPR_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  BufferedInputStream buffStream=new BufferedInputStream(inputStream);
  ExprMetaInfo[] exprMetas=ExprMetaUtil.loadExprMetaInfo(buffStream);
  try {
    buffStream.close();
    inputStream.close();
  }
 catch (  IOException e) {
  }
  IExprDataResultSet exprDataResultSet=null;
  if (streamManager.isBasedOnSecondRD() == false)   exprDataResultSet=new ExprDataResultSet1(streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),exprMetas,streamManager.getVersion());
 else   exprDataResultSet=new ExprDataResultSet2(streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),streamManager.getInStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),streamManager.getInStream(DataEngineContext.ROW_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.PARENT_SCOPE),exprMetas);
  return exprDataResultSet;
}","/** 
 * This is used for UPDATE, the data in report document as data source for transformation.
 * @return
 * @throws DataException
 */
public IExprDataResultSet loadExprDataResultSet() throws DataException {
  if (version == VersionManager.VERSION_2_0)   throw new DataException(ResourceConstants.WRONG_VERSION);
  InputStream inputStream=streamManager.getInStream(DataEngineContext.EXPR_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  BufferedInputStream buffStream=new BufferedInputStream(inputStream);
  ExprMetaInfo[] exprMetas=ExprMetaUtil.loadExprMetaInfo(buffStream);
  try {
    buffStream.close();
    inputStream.close();
  }
 catch (  IOException e) {
  }
  IExprDataResultSet exprDataResultSet=null;
  if (streamManager.isBasedOnSecondRD() == false)   exprDataResultSet=new ExprDataResultSet1(streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),exprMetas,streamManager.getVersion());
 else   exprDataResultSet=new ExprDataResultSet2(streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),streamManager.getInStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),streamManager.getInStream(DataEngineContext.ROW_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.PARENT_SCOPE),exprMetas,version);
  return exprDataResultSet;
}",0.9971751412429378
74755,"/** 
 * @param lastRowIndex
 * @param currIndex
 * @throws IOException
 */
private void saveNullRowsBetween(int lastRowIndex,int currIndex) throws IOException {
  int gapRows=currIndex - lastRowIndex - 1;
  for (int i=0; i < gapRows; i++) {
    IOUtil.writeInt(this.rowExprsDos,0);
    IOUtil.writeInt(this.rowLenDos,currentOffset);
    currentOffset+=IOUtil.INT_LENGTH;
  }
}","/** 
 * @param lastRowIndex
 * @param currIndex
 * @throws IOException
 */
private void saveNullRowsBetween(int lastRowIndex,int currIndex) throws IOException {
  int gapRows=currIndex - lastRowIndex - 1;
  for (int i=0; i < gapRows; i++) {
    IOUtil.writeInt(this.rowExprsDos,0);
    IOUtil.writeLong(this.rowLenDos,currentOffset);
    currentOffset+=IOUtil.INT_LENGTH;
  }
}",0.9907038512616202
74756,"/** 
 * @return
 */
public static int getLatestVersion(){
  return VERSION_2_2_1_1;
}","/** 
 * @return
 */
public static int getLatestVersion(){
  return VERSION_2_2_1_2;
}",0.9882352941176472
74757,"/** 
 * @param rowExprsRAIs
 * @param rowLenRAIs
 * @param version
 */
ExprDataReader1(RAInputStream rowExprsRAIs,RAInputStream rowLenRAIs,int version) throws DataException {
  this.INT_LENGTH=IOUtil.INT_LENGTH;
  try {
    this.rowCount=IOUtil.readInt(rowExprsRAIs);
    int exprCount=IOUtil.readInt(rowExprsRAIs);
    this.exprKeys=new ArrayList();
    this.rowExprsDis=new DataInputStream(rowExprsRAIs);
    for (int i=0; i < exprCount; i++) {
      this.exprKeys.add(IOUtil.readString(this.rowExprsDis));
    }
    this.metaOffset=INT_LENGTH + IOUtil.readInt(this.rowExprsDis) + INT_LENGTH;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  this.rowExprsRAIs=rowExprsRAIs;
  this.rowLenRAIs=rowLenRAIs;
  this.version=version;
  this.currReadIndex=0;
  this.currRowIndex=-1;
}","/** 
 * @param rowExprsRAIs
 * @param rowLenRAIs
 * @param version
 */
ExprDataReader1(RAInputStream rowExprsRAIs,RAInputStream rowLenRAIs,int version) throws DataException {
  this.INT_LENGTH=IOUtil.INT_LENGTH;
  try {
    this.rowCount=IOUtil.readInt(rowExprsRAIs);
    int exprCount=IOUtil.readInt(rowExprsRAIs);
    this.exprKeys=new ArrayList();
    this.rowExprsDis=new DataInputStream(rowExprsRAIs);
    for (int i=0; i < exprCount; i++) {
      this.exprKeys.add(IOUtil.readString(this.rowExprsDis));
    }
    this.metaOffset=INT_LENGTH + IOUtil.readInt(this.rowExprsDis) + INT_LENGTH;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  this.rowExprsRAIs=rowExprsRAIs;
  this.rowLenRAIs=rowLenRAIs;
  this.rowLenDis=new DataInputStream(rowLenRAIs);
  this.version=version;
  this.currReadIndex=0;
  this.currRowIndex=-1;
}",0.971395881006865
74758,"/** 
 * @param absoluteRowIndex
 * @throws IOException
 * @throws DataException
 */
private void skipTo(int absoluteRowIndex) throws IOException, DataException {
  if (currReadIndex == absoluteRowIndex)   return;
  if (version == VersionManager.VERSION_2_0) {
    int exprCount;
    int gapRows=absoluteRowIndex - currReadIndex;
    for (int j=0; j < gapRows; j++) {
      exprCount=IOUtil.readInt(rowExprsDis);
      for (int i=0; i < exprCount; i++) {
        IOUtil.readObject(rowExprsDis);
      }
    }
  }
 else {
    rowLenRAIs.seek(absoluteRowIndex * INT_LENGTH);
    int rowOffsetAbsolute=IOUtil.readInt(rowLenRAIs);
    rowExprsRAIs.seek(rowOffsetAbsolute + this.metaOffset);
    rowExprsDis=new DataInputStream(rowExprsRAIs);
  }
}","/** 
 * @param absoluteRowIndex
 * @throws IOException
 * @throws DataException
 */
private void skipTo(int absoluteRowIndex) throws IOException, DataException {
  if (currReadIndex == absoluteRowIndex)   return;
  if (version == VersionManager.VERSION_2_0) {
    int exprCount;
    int gapRows=absoluteRowIndex - currReadIndex;
    for (int j=0; j < gapRows; j++) {
      exprCount=IOUtil.readInt(rowExprsDis);
      for (int i=0; i < exprCount; i++) {
        IOUtil.readObject(rowExprsDis);
      }
    }
  }
 else   if (version <= VersionManager.VERSION_2_2_1_1) {
    rowLenRAIs.seek(absoluteRowIndex * INT_LENGTH);
    int rowOffsetAbsolute=IOUtil.readInt(rowLenRAIs);
    rowExprsRAIs.seek(rowOffsetAbsolute + this.metaOffset);
    rowExprsDis=new DataInputStream(rowExprsRAIs);
  }
 else {
    rowLenRAIs.seek(absoluteRowIndex * 8);
    long rowOffsetAbsolute=IOUtil.readLong(this.rowLenDis);
    rowExprsRAIs.seek(rowOffsetAbsolute + this.metaOffset);
    rowExprsDis=new DataInputStream(rowExprsRAIs);
  }
}",0.8436611711199545
74759,"public void close(){
  try {
    if (rowExprsDis != null) {
      rowExprsDis.close();
      rowExprsDis=null;
    }
  }
 catch (  IOException e) {
  }
}","public void close(){
  try {
    if (rowExprsDis != null) {
      rowExprsDis.close();
      rowExprsDis=null;
    }
    if (this.rowLenDis != null) {
      this.rowLenDis.close();
      this.rowLenDis=null;
    }
  }
 catch (  IOException e) {
  }
}",0.7593052109181141
74760,"/** 
 * @param absoluteIndex
 * @throws IOException
 * @throws DataException
 */
private void skipTo(int absoluteIndex) throws IOException, DataException {
  if (currRowLenReadIndex == absoluteIndex)   return;
  currRowLenReadIndex=absoluteIndex + 1;
  rowLenIs.seek(absoluteIndex * 4);
  rowExprsIs.seek(IOUtil.readInt(rowLenIs) + this.metaOffset);
  rowExprsDis=new DataInputStream(rowExprsIs);
}","/** 
 * @param absoluteIndex
 * @throws IOException
 * @throws DataException
 */
private void skipTo(int absoluteIndex) throws IOException, DataException {
  if (currRowLenReadIndex == absoluteIndex)   return;
  currRowLenReadIndex=absoluteIndex + 1;
  rowLenIs.seek(absoluteIndex * ((this.version > VersionManager.VERSION_2_2_1_1) ? 8 : 4));
  if (this.version <= VersionManager.VERSION_2_2_1_1)   rowExprsIs.seek(IOUtil.readInt(rowLenIs) + this.metaOffset);
 else   rowExprsIs.seek(IOUtil.readLong(this.rowLenDis) + this.metaOffset);
  rowExprsDis=new DataInputStream(rowExprsIs);
}",0.7922606924643585
74761,"/** 
 * @param rowExprsIs
 * @param rowLenIs
 * @throws DataException
 */
private void initialize(RAInputStream rowExprsIs,RAInputStream rowLenIs,int rowCount) throws DataException {
  try {
    IOUtil.readInt(rowExprsIs);
    int exprCount=IOUtil.readInt(rowExprsIs);
    this.exprKeys=new ArrayList();
    this.rowExprsDis=new DataInputStream(rowExprsIs);
    for (int i=0; i < exprCount; i++) {
      this.exprKeys.add(IOUtil.readString(this.rowExprsDis));
    }
    this.metaOffset=IOUtil.INT_LENGTH + IOUtil.readInt(this.rowExprsDis) + IOUtil.INT_LENGTH;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  this.rowExprsIs=rowExprsIs;
  this.rowLenIs=rowLenIs;
  this.currRowIndex=-1;
  this.lastRowIndex=-1;
  this.currRowLenReadIndex=0;
  this.rowCount=rowCount;
  this.rowIDMap=new BasicCachedArray(rowCount);
}","/** 
 * @param rowExprsIs
 * @param rowLenIs
 * @throws DataException
 */
private void initialize(RAInputStream rowExprsIs,RAInputStream rowLenIs,int rowCount) throws DataException {
  try {
    IOUtil.readInt(rowExprsIs);
    int exprCount=IOUtil.readInt(rowExprsIs);
    this.exprKeys=new ArrayList();
    this.rowExprsDis=new DataInputStream(rowExprsIs);
    this.rowLenDis=new DataInputStream(rowLenIs);
    for (int i=0; i < exprCount; i++) {
      this.exprKeys.add(IOUtil.readString(this.rowExprsDis));
    }
    this.metaOffset=IOUtil.INT_LENGTH + IOUtil.readInt(this.rowExprsDis) + IOUtil.INT_LENGTH;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  this.rowExprsIs=rowExprsIs;
  this.rowLenIs=rowLenIs;
  this.currRowIndex=-1;
  this.lastRowIndex=-1;
  this.currRowLenReadIndex=0;
  this.rowCount=rowCount;
  this.rowIDMap=new BasicCachedArray(rowCount);
}",0.9725576289791438
74762,"public void close(){
  try {
    if (rowExprsDis != null) {
      rowExprsDis.close();
      rowExprsDis=null;
    }
  }
 catch (  IOException e) {
  }
}","public void close(){
  try {
    if (rowExprsDis != null) {
      rowExprsDis.close();
      rowExprsDis=null;
    }
    if (rowLenDis != null) {
      rowLenDis.close();
      rowLenDis=null;
    }
  }
 catch (  IOException e) {
  }
}",0.788659793814433
74763,"/** 
 * @param rowExprsIs
 * @param rowLenIs
 * @param rowInfoIs
 * @throws DataException
 */
ExprDataReader2(RAInputStream rowExprsIs,RAInputStream rowLenIs,RAInputStream rowInfoIs) throws DataException {
  this.rowIndexUtil=new RowIndexUtil(rowInfoIs);
  try {
    int rowCount=(int)(rowInfoIs.length() / 4);
    initialize(rowExprsIs,rowLenIs,rowCount);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
}","/** 
 * @param rowExprsIs
 * @param rowLenIs
 * @param rowInfoIs
 * @throws DataException
 */
ExprDataReader2(RAInputStream rowExprsIs,RAInputStream rowLenIs,RAInputStream rowInfoIs,int version) throws DataException {
  this.version=version;
  this.rowIndexUtil=new RowIndexUtil(rowInfoIs);
  try {
    int rowCount=(int)(rowInfoIs.length() / 4);
    initialize(rowExprsIs,rowLenIs,rowCount);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
}",0.9634888438133874
74764,"/** 
 * @param rowIs
 * @param rowLenIs
 * @param destRowIndex
 * @param inExprMetas
 */
public ExprDataResultSet2(RAInputStream rowIs,RAInputStream rowLenIs,int destRowIndex[],ExprMetaInfo[] inExprMetas) throws DataException {
  this.rowIs=rowIs;
  this.rowLenIs=rowLenIs;
  IExprDataReader exprDataReader=new ExprDataReader3(rowIs,rowLenIs,destRowIndex);
  this.rowCount=exprDataReader.getCount();
  super.init(inExprMetas,exprDataReader);
}","/** 
 * @param rowIs
 * @param rowLenIs
 * @param destRowIndex
 * @param inExprMetas
 */
public ExprDataResultSet2(RAInputStream rowIs,RAInputStream rowLenIs,int destRowIndex[],ExprMetaInfo[] inExprMetas,int version) throws DataException {
  this.rowIs=rowIs;
  this.rowLenIs=rowLenIs;
  IExprDataReader exprDataReader=new ExprDataReader3(rowIs,rowLenIs,destRowIndex,version);
  this.rowCount=exprDataReader.getCount();
  super.init(inExprMetas,exprDataReader);
}",0.977924944812362
74765,"/** 
 * @throws DataException
 */
protected void prepare() throws DataException {
  this.rdGroupUtil=RDLoadUtil.loadGroupUtil(streamManager,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  if (this.isBasedOnSecondRD == false) {
    rowExprsRAIs=streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    if (version > VersionManager.VERSION_2_0) {
      rowLenRAIs=streamManager.getInStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    }
    this.exprResultReader=new ExprDataReader1(this.rowExprsRAIs,this.rowLenRAIs,this.version);
    this.rowCount=exprResultReader.getCount();
  }
 else {
    rowExprsRAIs=streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
    rowLenRAIs=streamManager.getInStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
    rowInfoRAIs=streamManager.getInStream(DataEngineContext.ROW_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    this.exprResultReader=new ExprDataReader2(rowExprsRAIs,rowLenRAIs,rowInfoRAIs);
    this.rowCount=this.exprResultReader.getCount();
  }
}","/** 
 * @throws DataException
 */
protected void prepare() throws DataException {
  this.rdGroupUtil=RDLoadUtil.loadGroupUtil(streamManager,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  if (this.isBasedOnSecondRD == false) {
    rowExprsRAIs=streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    if (version > VersionManager.VERSION_2_0) {
      rowLenRAIs=streamManager.getInStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    }
    this.exprResultReader=new ExprDataReader1(this.rowExprsRAIs,this.rowLenRAIs,this.version);
    this.rowCount=exprResultReader.getCount();
  }
 else {
    rowExprsRAIs=streamManager.getInStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
    rowLenRAIs=streamManager.getInStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
    rowInfoRAIs=streamManager.getInStream(DataEngineContext.ROW_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    this.exprResultReader=new ExprDataReader2(rowExprsRAIs,rowLenRAIs,rowInfoRAIs,version);
    this.rowCount=this.exprResultReader.getCount();
  }
}",0.9967871485943776
74766,"protected void prepare() throws DataException {
  this.rdGroupUtil=RDLoadUtil.loadGroupUtil(streamManager,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  int parentIndex=0;
  try {
    InputStream inputStream=streamManager.getInStream(DataEngineContext.SUBQUERY_PARENTINDEX_STREAM,StreamManager.SUB_QUERY_STREAM,StreamManager.SELF_SCOPE);
    parentIndex=IOUtil.readInt(inputStream);
  }
 catch (  IOException e) {
    throw new DataException(e.getMessage());
  }
  rowExprsRAIs=streamManager.getInStream2(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.SUB_QUERY_STREAM,StreamManager.BASE_SCOPE,parentIndex);
  rowLenRAIs=streamManager.getInStream2(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.SUB_QUERY_STREAM,StreamManager.BASE_SCOPE,parentIndex);
  rowInfoRAIs=streamManager.getInStream(DataEngineContext.ROW_INDEX_STREAM,StreamManager.SUB_QUERY_STREAM,StreamManager.SELF_SCOPE);
  this.exprResultReader=new ExprDataReader2(rowExprsRAIs,rowLenRAIs,rowInfoRAIs);
  this.rowCount=this.exprResultReader.getCount();
}","protected void prepare() throws DataException {
  this.rdGroupUtil=RDLoadUtil.loadGroupUtil(streamManager,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  int parentIndex=0;
  try {
    InputStream inputStream=streamManager.getInStream(DataEngineContext.SUBQUERY_PARENTINDEX_STREAM,StreamManager.SUB_QUERY_STREAM,StreamManager.SELF_SCOPE);
    parentIndex=IOUtil.readInt(inputStream);
  }
 catch (  IOException e) {
    throw new DataException(e.getMessage());
  }
  rowExprsRAIs=streamManager.getInStream2(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.SUB_QUERY_STREAM,StreamManager.BASE_SCOPE,parentIndex);
  rowLenRAIs=streamManager.getInStream2(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.SUB_QUERY_STREAM,StreamManager.BASE_SCOPE,parentIndex);
  rowInfoRAIs=streamManager.getInStream(DataEngineContext.ROW_INDEX_STREAM,StreamManager.SUB_QUERY_STREAM,StreamManager.SELF_SCOPE);
  this.exprResultReader=new ExprDataReader2(rowExprsRAIs,rowLenRAIs,rowInfoRAIs,version);
  this.rowCount=this.exprResultReader.getCount();
}",0.996138996138996
74767,"/** 
 * Clean the temporary data.
 * @throws DataException
 */
private void cleanTempColumns() throws DataException {
  IResultClass newMeta=rebuildResultClass(populator.getResultSetMetadata());
  populator.setResultSetMetadata(newMeta);
  populator.getCache().setResultClass(newMeta);
}","/** 
 * Clean the temporary data.
 * @throws DataException
 */
private void cleanTempColumns() throws DataException {
  IResultClass newMeta=rebuildResultClass(populator.getResultSetMetadata());
  populator.setResultSetMetadata(newMeta);
  populator.getCache().setResultClass(newMeta);
  PassUtil.pass(populator,new OdiResultSetWrapper(populator.getResultIterator()),false,session);
  populator.getCache().reset();
  populator.getCache().next();
  populator.getGroupProcessorManager().getGroupCalculationUtil().getGroupInformationUtil().setLeaveGroupIndex(0);
}",0.6768867924528302
74768,"public Runnable createModelEventRunnable(Object focus,int type,Map args){
switch (type) {
case NotificationEvent.CONTENT_REPLACE_EVENT:
case NotificationEvent.TEMPLATE_TRANSFORM_EVENT:
case NotificationEvent.CONTENT_EVENT:
{
      return new EditpartReportEventRunnable(focus,type,args){
        public void runModelChange(){
          contentChange(getFocus(),getArgs());
        }
      }
;
    }
case NotificationEvent.NAME_EVENT:
case NotificationEvent.STYLE_EVENT:
case NotificationEvent.EXTENSION_PROPERTY_DEFINITION_EVENT:
case NotificationEvent.THEME_EVENT:
case NotificationEvent.LIBRARY_EVENT:
case NotificationEvent.ELEMENT_LOCALIZE_EVENT:
case NotificationEvent.PROPERTY_EVENT:
{
    return new EditpartReportEventRunnable(focus,type,args){
      public void runModelChange(){
        propertyChange(getFocus(),getArgs());
      }
    }
;
  }
case NotificationEvent.LIBRARY_RELOADED_EVENT:
{
  return new EditpartReportEventRunnable(focus,type,args){
    public void runModelChange(){
      reloadTheChildren();
    }
  }
;
}
default :
break;
}
return null;
}","public Runnable createModelEventRunnable(Object focus,int type,Map args){
switch (type) {
case NotificationEvent.CONTENT_REPLACE_EVENT:
case NotificationEvent.TEMPLATE_TRANSFORM_EVENT:
case NotificationEvent.CONTENT_EVENT:
{
      return new EditpartReportEventRunnable(focus,type,args){
        public void runModelChange(){
          contentChange(getFocus(),getArgs());
        }
      }
;
    }
case NotificationEvent.NAME_EVENT:
case NotificationEvent.STYLE_EVENT:
case NotificationEvent.EXTENSION_PROPERTY_DEFINITION_EVENT:
case NotificationEvent.THEME_EVENT:
case NotificationEvent.LIBRARY_EVENT:
case NotificationEvent.ELEMENT_LOCALIZE_EVENT:
case NotificationEvent.PROPERTY_EVENT:
{
    return new EditpartReportEventRunnable(focus,type,args){
      public void runModelChange(){
        propertyChange(getFocus(),getArgs());
      }
    }
;
  }
case NotificationEvent.CSS_RELOADED_EVENT:
case NotificationEvent.LIBRARY_RELOADED_EVENT:
{
  return new EditpartReportEventRunnable(focus,type,args){
    public void runModelChange(){
      reloadTheChildren();
    }
  }
;
}
default :
break;
}
return null;
}",0.9739130434782608
74769,"/** 
 * Tests reload css style sheet
 * @throws Exception
 */
public void testReloadCssStyleSheetOperation() throws Exception {
  List fileNames=new ArrayList();
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  List filePaths=dumpDesignAndLibrariesToFile(fileNames);
  String designFilePath=(String)filePaths.get(0);
  String baseFilePath=(String)filePaths.get(1);
  String newFilePath=(String)filePaths.get(2);
  openDesign(designFilePath,false);
  LabelHandle labelHandle=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  LabelHandle labelHandle2=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(labelHandle.getStyle());
  assertEquals(""String_Node_Str"",labelHandle2.getStyle().getFontStyle());
  copyContentToFile(newFilePath,baseFilePath);
  CssStyleSheetHandle sheetHandle=(CssStyleSheetHandle)designHandle.getAllCssStyleSheets().get(0);
  designHandle.reloadCss(sheetHandle);
  SharedStyleHandle styleHandle=labelHandle.getStyle();
  assertNull(styleHandle);
  SharedStyleHandle styleHandle2=labelHandle2.getStyle();
  assertNotNull(styleHandle2);
  assertEquals(""String_Node_Str"",styleHandle2.getFontStyle());
}","/** 
 * Tests reload css style sheet
 * @throws Exception
 */
public void testReloadCssStyleSheetOperation() throws Exception {
  List fileNames=new ArrayList();
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  fileNames.add(INPUT_FOLDER + ""String_Node_Str"");
  List filePaths=dumpDesignAndLibrariesToFile(fileNames);
  String designFilePath=(String)filePaths.get(0);
  String baseFilePath=(String)filePaths.get(1);
  String newFilePath=(String)filePaths.get(2);
  openDesign(designFilePath,false);
  LabelHandle labelHandle=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  LabelHandle labelHandle2=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(labelHandle.getStyle());
  assertEquals(""String_Node_Str"",labelHandle2.getStyle().getFontStyle());
  copyContentToFile(newFilePath,baseFilePath);
  CssStyleSheetHandle sheetHandle=(CssStyleSheetHandle)designHandle.getAllCssStyleSheets().get(0);
  designHandle.reloadCss(sheetHandle);
  SharedStyleHandle styleHandle=labelHandle.getStyle();
  assertNull(styleHandle);
  SharedStyleHandle styleHandle2=labelHandle2.getStyle();
  assertNotNull(styleHandle2);
  assertEquals(""String_Node_Str"",styleHandle2.getFontStyle());
  File file=new File(baseFilePath);
  file.delete();
  try {
    designHandle.reloadCss(sheetHandle);
  }
 catch (  CssException e) {
    assertEquals(CssException.DESIGN_EXCEPTION_CSS_NOT_FOUND,e.getErrorCode());
  }
}",0.9203216374269004
74770,"/** 
 * Reloads the css style sheet with the given file path. After reloading, acticity stack is cleared.
 * @param sheet css style sheet
 * @throws SemanticException
 */
public void reloadCss(CssStyleSheet sheet) throws SemanticException {
  if (sheet == null)   return;
  String fileName=sheet.getFileName();
  CssStyleSheet newStyleSheet;
  try {
    newStyleSheet=module.loadCss(fileName);
  }
 catch (  StyleSheetException e) {
    throw new CssException(module,new String[]{fileName},CssException.DESIGN_EXCEPTION_BADCSSFILE);
  }
  List csses=((ICssStyleSheetOperation)element).getCsses();
  int pos=csses.indexOf(sheet);
  ActivityStack activityStack=getActivityStack();
  activityStack.startSilentTrans();
  CssRecord record=new CssRecord(module,element,sheet,false);
  getActivityStack().execute(record);
  record=new CssRecord(module,element,newStyleSheet,true,pos);
  getActivityStack().execute(record);
  doPostReloadAction(newStyleSheet);
}","/** 
 * Reloads the css style sheet with the given file path. After reloading, acticity stack is cleared.
 * @param sheet css style sheet
 * @throws SemanticException
 */
public void reloadCss(CssStyleSheet sheet) throws SemanticException {
  if (sheet == null)   return;
  String fileName=sheet.getFileName();
  CssStyleSheet newStyleSheet;
  try {
    newStyleSheet=module.loadCss(fileName);
  }
 catch (  StyleSheetException e) {
    String errorCode=ModuleUtil.changeSheetErrorCodeToCssErrorCode(e.getErrorCode());
    throw new CssException(module,new String[]{fileName},errorCode);
  }
  List csses=((ICssStyleSheetOperation)element).getCsses();
  int pos=csses.indexOf(sheet);
  ActivityStack activityStack=getActivityStack();
  activityStack.startSilentTrans();
  CssRecord record=new CssRecord(module,element,sheet,false);
  getActivityStack().execute(record);
  record=new CssRecord(module,element,newStyleSheet,true,pos);
  getActivityStack().execute(record);
  doPostReloadAction(newStyleSheet);
}",0.9312277126846664
74771,"/** 
 * @param column
 * @param hint
 */
ResultSetColumnInfo(OdaResultSetColumn column,ColumnHint hint){
  this.column=column;
  this.hint=hint;
}","ResultSetColumnInfo(OdaResultSetColumn column,ColumnHint hint){
  this.column=column;
  this.hint=hint;
}",0.8366533864541833
74772,"/** 
 * Updates column hint values by given data element attributes.
 * @param dataAttrs the latest data element attributes
 * @param cachedDataAttrs the last(cached) data element attributes
 * @param newHint the column hint
 */
private void updateColumnHintFromDataAttrs(DataElementAttributes dataAttrs,DataElementAttributes cachedDataAttrs,ColumnHint newHint){
  if (dataAttrs == null)   return;
  Object oldValue=cachedDataAttrs == null ? null : cachedDataAttrs.getName();
  Object newValue=dataAttrs.getName();
  if (oldValue == null || !oldValue.equals(newValue))   newHint.setProperty(ColumnHint.COLUMN_NAME_MEMBER,newValue);
  DataElementUIHints dataUIHints=dataAttrs.getUiHints();
  if (dataUIHints == null)   return;
  DataElementUIHints cachedDataUIHints=cachedDataAttrs == null ? null : cachedDataAttrs.getUiHints();
  oldValue=cachedDataUIHints == null ? null : cachedDataUIHints.getDisplayName();
  newValue=dataUIHints.getDisplayName();
  String handleValue=(String)newHint.getLocalProperty(null,ColumnHint.DISPLAY_NAME_MEMBER);
  if (handleValue != null && !handleValue.equals(oldValue))   return;
  if (oldValue == null || !oldValue.equals(newValue)) {
    newHint.setProperty(ColumnHint.DISPLAY_NAME_MEMBER,newValue);
  }
}","/** 
 * Updates column hint values by given data element attributes.
 * @param dataAttrs the latest data element attributes
 * @param cachedDataAttrs the last(cached) data element attributes
 * @param newHint the column hint
 */
private void updateColumnHintFromDataAttrs(DataElementAttributes dataAttrs,DataElementAttributes cachedDataAttrs,ColumnHint newHint){
  if (dataAttrs == null)   return;
  Object oldValue=cachedDataAttrs == null ? null : cachedDataAttrs.getName();
  Object newValue=dataAttrs.getName();
  if (oldValue == null || !oldValue.equals(newValue))   newHint.setProperty(ColumnHint.COLUMN_NAME_MEMBER,newValue);
  DataElementUIHints dataUIHints=dataAttrs.getUiHints();
  if (dataUIHints == null)   return;
  DataElementUIHints cachedDataUIHints=cachedDataAttrs == null ? null : cachedDataAttrs.getUiHints();
  oldValue=cachedDataUIHints == null ? null : cachedDataUIHints.getDisplayName();
  newValue=dataUIHints.getDisplayName();
  if (oldValue == null || !oldValue.equals(newValue)) {
    newHint.setProperty(ColumnHint.DISPLAY_NAME_MEMBER,newValue);
  }
}",0.9301121656600516
74773,"public void testV2() throws Exception {
  String golden=getGolden(GOLDEN_V2_STREAM);
  assertEquals(golden,value);
}","public void testV2() throws Exception {
  String value=getValue(VALUE_V2_STREAM);
  String golden=getGolden(GOLDEN_V2_STREAM);
  assertEquals(golden,value);
}",0.8467153284671532
74774,"public void testV1() throws Exception {
  String golden=getGolden(GOLDEN_V1_STREAM);
  assertEquals(golden,value);
}","public void testV1() throws Exception {
  String value=getValue(VALUE_V1_STREAM);
  String golden=getGolden(GOLDEN_V1_STREAM);
  assertEquals(golden,value);
}",0.8467153284671532
74775,"/** 
 * @return
 * @throws DataException
 */
protected DimLevel[] populateAggrLevels() throws DataException {
  String bindingName=OlapExpressionCompiler.getReferencedScriptObject(expr,""String_Node_Str"");
  if (bindingName == null)   return null;
  for (Iterator it=queryDefn.getBindings().iterator(); it.hasNext(); ) {
    IBinding binding=(IBinding)it.next();
    if (binding.getBindingName().equals(bindingName)) {
      List aggrs=binding.getAggregatOns();
      if (aggrs.size() == 0) {
        if (OlapExpressionCompiler.getReferencedScriptObject(binding.getExpression(),""String_Node_Str"") != null)         return null;
        List levelList=new ArrayList();
        IEdgeDefinition rowEdge=queryDefn.getEdge(ICubeQueryDefinition.ROW_EDGE);
        List rowDims=rowEdge.getDimensions();
        for (Iterator i=rowDims.iterator(); i.hasNext(); ) {
          IDimensionDefinition dim=(IDimensionDefinition)i.next();
          IHierarchyDefinition hirarchy=(IHierarchyDefinition)dim.getHierarchy().get(0);
          for (Iterator j=hirarchy.getLevels().iterator(); j.hasNext(); ) {
            ILevelDefinition level=(ILevelDefinition)j.next();
            levelList.add(new DimLevel(dim.getName(),level.getName()));
          }
        }
        IEdgeDefinition colEdge=queryDefn.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
        List colDims=colEdge.getDimensions();
        for (Iterator i=colDims.iterator(); i.hasNext(); ) {
          IDimensionDefinition dim=(IDimensionDefinition)i.next();
          IHierarchyDefinition hirarchy=(IHierarchyDefinition)dim.getHierarchy().get(0);
          for (Iterator j=hirarchy.getLevels().iterator(); j.hasNext(); ) {
            ILevelDefinition level=(ILevelDefinition)j.next();
            levelList.add(new DimLevel(dim.getName(),level.getName()));
          }
        }
        DimLevel[] levels=new DimLevel[levelList.size()];
        levelList.toArray(levels);
        return levels;
      }
 else {
        DimLevel[] levels=new DimLevel[aggrs.size()];
        for (int i=0; i < aggrs.size(); i++) {
          levels[i]=OlapExpressionUtil.getTargetDimLevel(aggrs.get(i).toString());
        }
        return levels;
      }
    }
  }
  return null;
}","/** 
 * @return
 * @throws DataException
 */
protected DimLevel[] populateAggrLevels() throws DataException {
  String bindingName=OlapExpressionCompiler.getReferencedScriptObject(expr,""String_Node_Str"");
  if (bindingName == null)   return null;
  for (Iterator it=queryDefn.getBindings().iterator(); it.hasNext(); ) {
    IBinding binding=(IBinding)it.next();
    if (binding.getBindingName().equals(bindingName)) {
      List aggrs=binding.getAggregatOns();
      if (aggrs.size() == 0) {
        if (OlapExpressionCompiler.getReferencedScriptObject(binding.getExpression(),""String_Node_Str"") != null)         return null;
        List levelList=new ArrayList();
        IEdgeDefinition rowEdge=queryDefn.getEdge(ICubeQueryDefinition.ROW_EDGE);
        populateDimLevel(levelList,rowEdge);
        IEdgeDefinition colEdge=queryDefn.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
        populateDimLevel(levelList,colEdge);
        DimLevel[] levels=new DimLevel[levelList.size()];
        levelList.toArray(levels);
        return levels;
      }
 else {
        DimLevel[] levels=new DimLevel[aggrs.size()];
        for (int i=0; i < aggrs.size(); i++) {
          levels[i]=OlapExpressionUtil.getTargetDimLevel(aggrs.get(i).toString());
        }
        return levels;
      }
    }
  }
  return null;
}",0.7057484348321001
74776,"/** 
 * @param dimLevel
 * @param queryDefn
 * @return
 */
private int getAxisQualifierEdgeType(DimLevel dimLevel,ICubeQueryDefinition queryDefn){
  IEdgeDefinition edge=queryDefn.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
  if (edge == null)   return ICubeQueryDefinition.ROW_EDGE;
  List dims=edge.getDimensions();
  for (int i=0; i < dims.size(); i++) {
    IDimensionDefinition dim=(IDimensionDefinition)dims.get(i);
    if (dim.getName().equals(dimLevel.getDimensionName())) {
      return ICubeQueryDefinition.ROW_EDGE;
    }
  }
  return ICubeQueryDefinition.COLUMN_EDGE;
}","/** 
 * @param dimLevel
 * @param queryDefn
 * @return
 */
private int getAxisQualifierEdgeType(DimLevel dimLevel,ICubeQueryDefinition queryDefn){
  IEdgeDefinition edge=queryDefn.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
  if (edge != null) {
    List dims=edge.getDimensions();
    for (int i=0; i < dims.size(); i++) {
      IDimensionDefinition dim=(IDimensionDefinition)dims.get(i);
      if (dim.getName().equals(dimLevel.getDimensionName())) {
        return ICubeQueryDefinition.ROW_EDGE;
      }
    }
  }
  edge=queryDefn.getEdge(ICubeQueryDefinition.ROW_EDGE);
  if (edge != null) {
    List dims=edge.getDimensions();
    for (int i=0; i < dims.size(); i++) {
      IDimensionDefinition dim=(IDimensionDefinition)dims.get(i);
      if (dim.getName().equals(dimLevel.getDimensionName())) {
        return ICubeQueryDefinition.COLUMN_EDGE;
      }
    }
  }
  return -1;
}",0.4812030075187969
74777,"public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (this.getReferencedMeasureName(binding.getExpression()) != null) {
            if (this.isLeafLevel(cubeDefn,target) && binding.getAggrFunction() == null) {
              result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.MEASURE_TYPE));
              continue;
            }
 else             if (binding.getAggrFunction() != null) {
              result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
              continue;
            }
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1) {
              if (fromSameEdge(aggrOns,cubeDefn))               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
 else               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
            }
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              if (getAxisQualifierLevel(next,cubeDefn.getEdge(getAxisQualifierEdgeType(dimLevel,cubeDefn))) != null)               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
            }
            break;
          }
        }
        continue;
      }
      result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.DIMENSION_TYPE));
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (this.getReferencedMeasureName(binding.getExpression()) != null) {
            if (this.isLeafLevel(cubeDefn,target) && binding.getAggrFunction() == null) {
              result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.MEASURE_TYPE));
              continue;
            }
 else             if (binding.getAggrFunction() != null) {
              result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
              continue;
            }
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1) {
              if (fromSameEdge(aggrOns,cubeDefn))               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
 else               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
            }
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              int candidateEdge=getAxisQualifierEdgeType(dimLevel,cubeDefn);
              if (candidateEdge != -1) {
                if (getAxisQualifierLevel(next,cubeDefn.getEdge(candidateEdge)) != null)                 result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
              }
            }
            break;
          }
        }
        continue;
      }
      result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.DIMENSION_TYPE));
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.957752255947498
74778,"public List getReferencedLevels(String targetLevel,String bindingExpr,ICubeQueryDefinition queryDefn) throws AdapterException {
  try {
    List result=new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    String bindingName=OlapExpressionCompiler.getReferencedScriptObject(bindingExpr,""String_Node_Str"");
    if (bindingName == null)     return result;
    IBinding binding=null;
    List bindings=queryDefn.getBindings();
    for (int i=0; i < bindings.size(); i++) {
      IBinding bd=(IBinding)bindings.get(i);
      if (bd.getBindingName().equals(bindingName)) {
        binding=bd;
        break;
      }
    }
    if (binding == null) {
      return result;
    }
    List aggrOns=binding.getAggregatOns();
    boolean isMeasure=false;
    if (aggrOns.size() == 0) {
      isMeasure=this.getReferencedMeasureName(binding.getExpression()) != null;
    }
    IEdgeDefinition axisQualifierEdge=queryDefn.getEdge(this.getAxisQualifierEdgeType(target,queryDefn));
    if (isMeasure) {
      for (int i=0; i < axisQualifierEdge.getDimensions().size(); i++) {
        IHierarchyDefinition hier=(IHierarchyDefinition)((IDimensionDefinition)axisQualifierEdge.getDimensions().get(i)).getHierarchy().get(0);
        result.addAll(hier.getLevels());
      }
    }
 else {
      for (int i=0; i < aggrOns.size(); i++) {
        DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(i).toString());
        ILevelDefinition lvl=getAxisQualifierLevel(dimLevel,axisQualifierEdge);
        if (lvl != null)         result.add(lvl);
      }
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","public List getReferencedLevels(String targetLevel,String bindingExpr,ICubeQueryDefinition queryDefn) throws AdapterException {
  try {
    List result=new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    String bindingName=OlapExpressionCompiler.getReferencedScriptObject(bindingExpr,""String_Node_Str"");
    if (bindingName == null)     return result;
    IBinding binding=null;
    List bindings=queryDefn.getBindings();
    for (int i=0; i < bindings.size(); i++) {
      IBinding bd=(IBinding)bindings.get(i);
      if (bd.getBindingName().equals(bindingName)) {
        binding=bd;
        break;
      }
    }
    if (binding == null) {
      return result;
    }
    List aggrOns=binding.getAggregatOns();
    boolean isMeasure=false;
    if (aggrOns.size() == 0) {
      isMeasure=this.getReferencedMeasureName(binding.getExpression()) != null;
    }
    int candidateEdge=this.getAxisQualifierEdgeType(target,queryDefn);
    if (candidateEdge == -1)     return result;
    IEdgeDefinition axisQualifierEdge=queryDefn.getEdge(candidateEdge);
    if (isMeasure) {
      for (int i=0; i < axisQualifierEdge.getDimensions().size(); i++) {
        IHierarchyDefinition hier=(IHierarchyDefinition)((IDimensionDefinition)axisQualifierEdge.getDimensions().get(i)).getHierarchy().get(0);
        result.addAll(hier.getLevels());
      }
    }
 else {
      for (int i=0; i < aggrOns.size(); i++) {
        DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(i).toString());
        ILevelDefinition lvl=getAxisQualifierLevel(dimLevel,axisQualifierEdge);
        if (lvl != null)         result.add(lvl);
      }
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9458607848753938
74779,"public IReportItemExecutor getNextChild(){
  if (childContent != null) {
    IReportItemExecutor ret=new ItemExecutorWrapper(childExecutor,childContent);
    childContent=null;
    childExecutor=null;
    needUpdate=true;
    return ret;
  }
  if (currentRunIn != null) {
    needUpdate=true;
    IReportItemExecutor runInChild=currentRunIn.getNextChild();
    if (runInChild != null) {
      IContent runInContent=runInChild.execute();
      if (firstChild) {
        transferPageBreak(currentRunInContent,runInContent);
        firstChild=false;
      }
      if (runInContent != null && (runInContent.getChildren() == null || runInContent.getChildren().size() == 0)) {
        execute(runInChild,runInContent);
        runInChild.close();
        runInChild=new DOMReportItemExecutor(runInContent);
      }
    }
    return runInChild;
  }
  assert(false);
  return null;
}","public IReportItemExecutor getNextChild(){
  if (childContent != null) {
    IReportItemExecutor ret=new ItemExecutorWrapper(childExecutor,childContent);
    childContent=null;
    childExecutor=null;
    needUpdate=true;
    return ret;
  }
  if (currentRunIn != null) {
    needUpdate=true;
    if (currentRunIn.hasNextChild()) {
      return currentRunIn.getNextChild();
    }
  }
  return null;
}",0.5329153605015674
74780,"public boolean hasNextChild(){
  if (!needUpdate) {
    return hasNext;
  }
  if (currentRunIn != null) {
    if (currentRunIn.hasNextChild()) {
      hasNext=true;
      needUpdate=false;
      return hasNext;
    }
 else {
      currentRunIn.close();
    }
  }
  currentRunIn=null;
  while (executor.hasNextChild()) {
    IReportItemExecutor next=executor.getNextChild();
    IContent nextContent=next.execute();
    if (nextContent instanceof IListBandContent) {
      IListBandContent band=(IListBandContent)nextContent;
      if (repeat && (band.getBandType() == IBandContent.BAND_HEADER || band.getBandType() == IBandContent.BAND_GROUP_HEADER)) {
        executeHeader(next,nextContent);
        next.close();
        next=new DOMReportItemExecutor(nextContent);
        next.execute();
        add(nextContent.getParent().getChildren(),nextContent);
      }
      if (next.hasNextChild()) {
        currentRunIn=next;
        currentRunInContent=nextContent;
        firstChild=true;
        break;
      }
    }
 else {
      childExecutor=next;
      childContent=nextContent;
      break;
    }
  }
  if (currentRunIn != null || childContent != null) {
    hasNext=true;
  }
 else {
    hasNext=false;
  }
  needUpdate=false;
  return hasNext;
}","public boolean hasNextChild(){
  if (!needUpdate) {
    return hasNext;
  }
  if (currentRunIn != null) {
    if (currentRunIn.hasNextChild()) {
      hasNext=true;
      needUpdate=false;
      return hasNext;
    }
 else {
      currentRunIn.close();
    }
  }
  currentRunIn=null;
  while (executor.hasNextChild()) {
    IReportItemExecutor next=executor.getNextChild();
    IContent nextContent=next.execute();
    if (nextContent instanceof IListBandContent) {
      IListBandContent band=(IListBandContent)nextContent;
      if (repeat && (band.getBandType() == IBandContent.BAND_HEADER || band.getBandType() == IBandContent.BAND_GROUP_HEADER)) {
        executeHeader(next,nextContent);
        next.close();
        next=new DOMReportItemExecutor(nextContent);
        next.execute();
        add(nextContent.getParent().getChildren(),nextContent);
      }
 else {
        next=new RunInContainerExecutor(next,nextContent);
      }
      if (next.hasNextChild()) {
        currentRunIn=next;
        currentRunInContent=nextContent;
        break;
      }
    }
 else {
      childExecutor=next;
      childContent=nextContent;
      break;
    }
  }
  if (currentRunIn != null || childContent != null) {
    hasNext=true;
  }
 else {
    hasNext=false;
  }
  needUpdate=false;
  return hasNext;
}",0.9609375
74781,"/** 
 * Prepare the report parameters
 * @param request
 * @throws Exception
 */
protected void __initParameters(HttpServletRequest request) throws Exception {
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  options.setOption(InputOptions.OPT_RTL,new Boolean(rtl));
  this.parameterDefList=getReportService().getParameterDefinitions(this.reportDesignHandle,options,false);
  if (this.isDesigner && !IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()))   parseConfigVars(request,parameterDefList);
  this.parametersAsString=getParsedParametersAsString(parameterDefList,request,options);
  if (documentInUrl)   this.missingParameter=false;
 else   this.missingParameter=BirtUtility.validateParameters(parameterDefList,this.parametersAsString);
  this.isShowParameterPage=checkShowParameterPage(request);
  this.defaultValues=getDefaultValues(this.reportDesignHandle,parameterDefList,request,options);
  this.displayTexts=BirtUtility.getDisplayTexts(this.parameterDefList,this.displayTexts,request);
  this.locParams=BirtUtility.getLocParams(this.locParams,request);
  this.parameters=(HashMap)getParsedParameters(this.reportDesignHandle,parameterDefList,request,options);
  this.parametersAsString=getParsedParametersAsStringWithDefaultValue(this.parametersAsString,parameterDefList,request,options);
}","/** 
 * Prepare the report parameters
 * @param request
 * @throws Exception
 */
protected void __initParameters(HttpServletRequest request) throws Exception {
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  options.setOption(InputOptions.OPT_RTL,new Boolean(rtl));
  this.parameterDefList=getReportService().getParameterDefinitions(this.reportDesignHandle,options,false);
  if (this.isDesigner && (IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_PARAMETER.equalsIgnoreCase(request.getServletPath())) && !ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(this.requestType))   parseConfigVars(request,parameterDefList);
  this.parametersAsString=getParsedParametersAsString(parameterDefList,request,options);
  if (documentInUrl)   this.missingParameter=false;
 else   this.missingParameter=BirtUtility.validateParameters(parameterDefList,this.parametersAsString);
  this.isShowParameterPage=checkShowParameterPage(request);
  this.defaultValues=getDefaultValues(this.reportDesignHandle,parameterDefList,request,options);
  this.displayTexts=BirtUtility.getDisplayTexts(this.parameterDefList,this.displayTexts,request);
  this.locParams=BirtUtility.getLocParams(this.locParams,request);
  this.parameters=(HashMap)getParsedParameters(this.reportDesignHandle,parameterDefList,request,options);
  this.parametersAsString=getParsedParametersAsStringWithDefaultValue(this.parametersAsString,parameterDefList,request,options);
}",0.928665785997358
74782,"/** 
 * Handle Multi-value List Box type parameter
 * @param selectionList
 * @throws Exception
 */
protected void __handleMultiListBox(Collection selectionList) throws Exception {
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  String containerId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + containerId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + IBirtConstants.NULL_VALUE + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (this.isLocale) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String onChange=""String_Node_Str"" + encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"" + containerId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  __handleGeneralDefinition();
  writer.write(""String_Node_Str"" + onChange + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (!paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    if (DataUtil.contain(this.valueStringList,""String_Node_Str""))     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  for (Iterator iter=selectionList.iterator(); iter.hasNext(); ) {
    ParameterSelectionChoice selectionItem=(ParameterSelectionChoice)iter.next();
    Object value=selectionItem.getValue();
    try {
      value=DataUtil.convert(value,paramDef.getDataType());
    }
 catch (    Exception e) {
      value=null;
    }
    String displayValue=DataUtil.getDisplayValue(value);
    if (displayValue == null)     continue;
    String label=selectionItem.getLabel();
    if (label == null || label.length() <= 0)     label=ParameterValidationUtil.getDisplayValue(null,this.pattern,value,this.locale);
    label=label != null ? label : ""String_Node_Str"";
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(displayValue) + ""String_Node_Str"");
    if (DataUtil.contain(this.valueStringList,displayValue))     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(ParameterAccessor.htmlEncode(label));
    writer.write(""String_Node_Str"");
  }
  if (!paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    if (DataUtil.contain(this.valueStringList,null))     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(IBirtConstants.NULL_VALUE + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
}","/** 
 * Handle Multi-value List Box type parameter
 * @param selectionList
 * @throws Exception
 */
protected void __handleMultiListBox(Collection selectionList) throws Exception {
  JspWriter writer=pageContext.getOut();
  String encParamId=ParameterAccessor.htmlEncode(param.getId());
  String encParamName=ParameterAccessor.htmlEncode(param.getName());
  String containerId=encParamId + ""String_Node_Str"";
  String displayTextName=ParameterAccessor.PREFIX_DISPLAY_TEXT + encParamName;
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + containerId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + IBirtConstants.NULL_VALUE + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISNULL + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + displayTextName + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (this.isLocale) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + ParameterAccessor.PARAM_ISLOCALE + ""String_Node_Str"");
    writer.write(""String_Node_Str"" + encParamName + ""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  String onChange=""String_Node_Str"" + encParamId + ""String_Node_Str"";
  writer.write(""String_Node_Str"" + containerId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  __handleGeneralDefinition();
  writer.write(""String_Node_Str"" + onChange + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (!paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    if (DataUtil.contain(this.valueStringList,""String_Node_Str"",true))     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
  }
  for (Iterator iter=selectionList.iterator(); iter.hasNext(); ) {
    ParameterSelectionChoice selectionItem=(ParameterSelectionChoice)iter.next();
    Object value=selectionItem.getValue();
    try {
      value=DataUtil.convert(value,paramDef.getDataType());
    }
 catch (    Exception e) {
      value=null;
    }
    String displayValue=DataUtil.getDisplayValue(value);
    if (displayValue == null)     continue;
    String label=selectionItem.getLabel();
    if (label == null || label.length() <= 0)     label=ParameterValidationUtil.getDisplayValue(null,this.pattern,value,this.locale);
    label=label != null ? label : ""String_Node_Str"";
    writer.write(""String_Node_Str"" + ParameterAccessor.htmlEncode(displayValue) + ""String_Node_Str"");
    if (DataUtil.contain(this.valueStringList,displayValue,true))     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(ParameterAccessor.htmlEncode(label));
    writer.write(""String_Node_Str"");
  }
  if (!paramDef.isRequired()) {
    writer.write(""String_Node_Str"");
    if (DataUtil.contain(this.valueStringList,null,true))     writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"");
    writer.write(IBirtConstants.NULL_VALUE + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + encParamId + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
}",0.9984366857738406
74783,"/** 
 * Check the passed String whether be contained in list
 * @param values
 * @param value
 * @return
 */
public static boolean contain(List values,String value){
  if (values == null)   return false;
  for (Iterator it=values.iterator(); it.hasNext(); ) {
    Object obj=it.next();
    if (obj == null) {
      if (value == null)       return true;
      continue;
    }
    if (obj instanceof String && ((String)obj).equals(value))     return true;
  }
  return false;
}","/** 
 * Check the passed String whether be contained in list
 * @param values
 * @param value
 * @param ifDelete
 * @return
 */
public static boolean contain(List values,String value,boolean ifDelete){
  if (values == null)   return false;
  for (Iterator it=values.iterator(); it.hasNext(); ) {
    Object obj=it.next();
    if (obj == null) {
      if (value == null) {
        if (ifDelete)         values.remove(obj);
        return true;
      }
      continue;
    }
    if (obj instanceof String && ((String)obj).equals(value)) {
      if (ifDelete)       values.remove(obj);
      return true;
    }
  }
  return false;
}",0.7717391304347826
74784,"public IResultSet executeQuery() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (this.cachedResultSet != null) {
    IResultSet ret=this.cachedResultSet;
    this.cachedResultSet=null;
    return ret;
  }
  try {
    if (!maxRowsUpToDate) {
      try {
        assertNotNull(callStat);
        callStat.setMaxRows(maxrows);
      }
 catch (      SQLException e1) {
      }
      maxRowsUpToDate=true;
    }
    registerOutputParameter();
    java.sql.ResultSet rs=this.callStat.executeQuery();
    if (rs != null)     return new ResultSet(rs);
    java.sql.ResultSet resultSet=getOutputParamResultSet();
    if (resultSet != null)     return new ResultSet(resultSet);
 else     return new SPResultSet(null);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_RETURN,e);
  }
}","public IResultSet executeQuery() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (this.cachedResultSet != null) {
    IResultSet ret=this.cachedResultSet;
    this.cachedResultSet=null;
    return ret;
  }
  if (!maxRowsUpToDate) {
    try {
      assertNotNull(callStat);
      callStat.setMaxRows(maxrows);
    }
 catch (    SQLException e1) {
    }
    maxRowsUpToDate=true;
  }
  registerOutputParameter();
  java.sql.ResultSet rs=null;
  try {
    this.callStat.execute();
    rs=this.callStat.getResultSet();
    while (rs == null && this.callStat.getMoreResults()) {
      rs=this.callStat.getResultSet();
    }
    if (rs != null)     return new ResultSet(rs);
    java.sql.ResultSet resultSet=getOutputParamResultSet();
    if (resultSet != null)     return new ResultSet(resultSet);
 else     return new SPResultSet(null);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_RETURN,e);
  }
}",0.897119341563786
74785,"/** 
 * get parsed parameters with default value.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ParameterDefinition parameter=(ParameterDefinition)iter.next();
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramObj=this.parametersAsString.get(paramName);
    if (paramObj != null) {
      String format=ParameterAccessor.getFormat(request,paramName);
      if (format == null || format.length() <= 0) {
        format=parameter.getPattern();
      }
      String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
      boolean isLocale=this.locParams.contains(paramName);
      List paramList=null;
      if (paramObj instanceof List) {
        paramList=(List)paramObj;
      }
 else {
        paramList=new ArrayList();
        paramList.add(paramObj);
      }
      for (int i=0; i < paramList.size(); i++) {
        try {
          Object paramValueObj=DataUtil.validate(dataType,format,(String)paramList.get(i),locale,isLocale);
          paramList.set(i,paramValueObj);
        }
 catch (        ValidationValueException e) {
          if (IBirtConstants.SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath())) {
            this.exception=e;
            break;
          }
        }
      }
      if (paramObj instanceof List) {
        params.put(paramName,paramList.toArray());
      }
 else {
        params.put(paramName,paramList.get(0));
      }
    }
 else {
      Object paramValueObj=null;
      if (!this.parametersAsString.containsKey(paramName)) {
        paramValueObj=this.defaultValues.get(paramName);
      }
      if (parameter.isMultiValue()) {
        params.put(paramName,new Object[]{paramValueObj});
      }
 else {
        params.put(paramName,paramValueObj);
      }
    }
  }
  return params;
}","/** 
 * get parsed parameters with default value.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ParameterDefinition parameter=(ParameterDefinition)iter.next();
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramObj=this.parametersAsString.get(paramName);
    if (paramObj != null) {
      String format=ParameterAccessor.getFormat(request,paramName);
      if (format == null || format.length() <= 0) {
        format=parameter.getPattern();
      }
      String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
      boolean isLocale=this.locParams.contains(paramName);
      List paramList=null;
      if (paramObj instanceof List) {
        paramList=(List)paramObj;
      }
 else {
        paramList=new ArrayList();
        paramList.add(paramObj);
      }
      for (int i=0; i < paramList.size(); i++) {
        try {
          Object paramValueObj=DataUtil.validate(paramName,dataType,format,(String)paramList.get(i),locale,isLocale);
          paramList.set(i,paramValueObj);
        }
 catch (        ViewerValidationException e) {
          if (IBirtConstants.SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath())) {
            this.exception=e;
            break;
          }
        }
      }
      if (paramObj instanceof List) {
        params.put(paramName,paramList.toArray());
      }
 else {
        params.put(paramName,paramList.get(0));
      }
    }
 else {
      Object paramValueObj=null;
      if (!this.parametersAsString.containsKey(paramName)) {
        paramValueObj=this.defaultValues.get(paramName);
      }
      if (parameter.isMultiValue()) {
        params.put(paramName,new Object[]{paramValueObj});
      }
 else {
        params.put(paramName,paramValueObj);
      }
    }
  }
  return params;
}",0.9954118418177844
74786,"/** 
 * @param cubeHandle
 * @return
 */
private boolean needCachedDataSetToEnhancePerformance(TabularCubeHandle cubeHandle){
  DataSetHandle dsHandle=cubeHandle.getDataSet();
  List dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  for (int i=0; i < dimHandles.size(); i++) {
    DimensionHandle dimHandle=(DimensionHandle)dimHandles.get(i);
    List hiers=dimHandle.getContents(DimensionHandle.HIERARCHIES_PROP);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)hiers.get(0);
    if (!dsHandle.equals(hierHandle.getDataSet()))     return false;
  }
  return true;
}","/** 
 * @param cubeHandle
 * @return
 */
private boolean needCachedDataSetToEnhancePerformance(TabularCubeHandle cubeHandle){
  DataSetHandle dsHandle=cubeHandle.getDataSet();
  List dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  for (int i=0; i < dimHandles.size(); i++) {
    DimensionHandle dimHandle=(DimensionHandle)dimHandles.get(i);
    List hiers=dimHandle.getContents(DimensionHandle.HIERARCHIES_PROP);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)hiers.get(0);
    if (hierHandle.getDataSet() != null)     return false;
  }
  return true;
}",0.940677966101695
74787,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws IOException, BirtException, DataException {
  boolean doPerfTuning=this.needCachedDataSetToEnhancePerformance(cubeHandle) && (appContext == null || (appContext != null && appContext.get(DataEngine.DATA_SET_CACHE_ROW_LIMIT) == null && appContext.get(DataEngine.MEMORY_DATA_SET_CACHE) == null));
  Map candidateAppContext=new HashMap();
  if (appContext != null)   candidateAppContext.putAll(appContext);
  if (doPerfTuning) {
    candidateAppContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(-1));
  }
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,candidateAppContext);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet())) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hier)) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeHandle,candidateAppContext),this.toStringArray(measureNames),null);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws IOException, BirtException, DataException {
  boolean doPerfTuning=this.needCachedDataSetToEnhancePerformance(cubeHandle) && (appContext == null || (appContext != null && appContext.get(DataEngine.DATA_SET_CACHE_ROW_LIMIT) == null && appContext.get(DataEngine.MEMORY_DATA_SET_CACHE) == null));
  Map candidateAppContext=new HashMap();
  if (appContext != null)   candidateAppContext.putAll(appContext);
  if (doPerfTuning) {
    candidateAppContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(-1));
  }
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,candidateAppContext);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hier)) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeHandle,candidateAppContext),this.toStringArray(measureNames),null);
}",0.9964059982649648
74788,"public void setUp(){
  copyResource(REPORT_DESIGN_SOURCE,REPORT_DESIGN);
}","public void setUp() throws Exception {
  super.setUp();
  copyResource(REPORT_DESIGN_SOURCE,REPORT_DESIGN);
}",0.8087431693989071
74789,"ResultSetColumnInfo(OdaResultSetColumn column,ColumnHint hint){
  this.column=column;
  this.hint=hint;
}","/** 
 * @param column
 * @param hint
 */
ResultSetColumnInfo(OdaResultSetColumn column,ColumnHint hint){
  this.column=column;
  this.hint=hint;
}",0.8366533864541833
74790,"/** 
 * Updates column hint values by given data element attributes.
 * @param dataAttrs the latest data element attributes
 * @param cachedDataAttrs the last(cached) data element attributes
 * @param newHint the column hint
 */
private void updateColumnHintFromDataAttrs(DataElementAttributes dataAttrs,DataElementAttributes cachedDataAttrs,ColumnHint newHint){
  if (dataAttrs == null)   return;
  Object oldValue=cachedDataAttrs == null ? null : cachedDataAttrs.getName();
  Object newValue=dataAttrs.getName();
  if (oldValue == null || !oldValue.equals(newValue))   newHint.setProperty(ColumnHint.COLUMN_NAME_MEMBER,newValue);
  DataElementUIHints dataUIHints=dataAttrs.getUiHints();
  if (dataUIHints == null)   return;
  DataElementUIHints cachedDataUIHints=cachedDataAttrs == null ? null : cachedDataAttrs.getUiHints();
  oldValue=cachedDataUIHints == null ? null : cachedDataUIHints.getDisplayName();
  newValue=dataUIHints.getDisplayName();
  if (oldValue == null || !oldValue.equals(newValue)) {
    newHint.setProperty(ColumnHint.DISPLAY_NAME_MEMBER,newValue);
  }
}","/** 
 * Updates column hint values by given data element attributes.
 * @param dataAttrs the latest data element attributes
 * @param cachedDataAttrs the last(cached) data element attributes
 * @param newHint the column hint
 */
private void updateColumnHintFromDataAttrs(DataElementAttributes dataAttrs,DataElementAttributes cachedDataAttrs,ColumnHint newHint){
  if (dataAttrs == null)   return;
  Object oldValue=cachedDataAttrs == null ? null : cachedDataAttrs.getName();
  Object newValue=dataAttrs.getName();
  if (oldValue == null || !oldValue.equals(newValue))   newHint.setProperty(ColumnHint.COLUMN_NAME_MEMBER,newValue);
  DataElementUIHints dataUIHints=dataAttrs.getUiHints();
  if (dataUIHints == null)   return;
  DataElementUIHints cachedDataUIHints=cachedDataAttrs == null ? null : cachedDataAttrs.getUiHints();
  oldValue=cachedDataUIHints == null ? null : cachedDataUIHints.getDisplayName();
  newValue=dataUIHints.getDisplayName();
  String handleValue=(String)newHint.getLocalProperty(null,ColumnHint.DISPLAY_NAME_MEMBER);
  if (handleValue != null && !handleValue.equals(oldValue))   return;
  if (oldValue == null || !oldValue.equals(newValue)) {
    newHint.setProperty(ColumnHint.DISPLAY_NAME_MEMBER,newValue);
  }
}",0.9301121656600516
74791,"/** 
 * Handle SOAP operation. Parse report parameters and display text
 * @param operation
 * @param bean
 * @param parameterMap
 * @param displayTexts
 * @throws Exception
 */
public static void handleOperation(Operation operation,ViewerAttributeBean bean,Map parameterMap,Map displayTexts) throws Exception {
  if (operation == null || bean == null || parameterMap == null || displayTexts == null)   return;
  List locs=new ArrayList();
  Map params=new HashMap();
  String displayTextParam=null;
  Oprand[] oprands=operation.getOprand();
  for (int i=0; i < oprands.length; i++) {
    String paramName=oprands[i].getName();
    Object paramValue=oprands[i].getValue();
    if (paramName == null || paramValue == null)     continue;
    if (paramName.equalsIgnoreCase(ParameterAccessor.PARAM_ISLOCALE)) {
      locs.add(paramValue);
    }
 else     if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
      ParameterDefinition parameter=bean.findParameterDefinition(displayTextParam);
      if (parameter != null && !parameter.isMultiValue())       displayTexts.put(displayTextParam,paramValue);
      continue;
    }
 else {
      if (ParameterAccessor.PARAM_ISNULL.equalsIgnoreCase(paramName)) {
        paramName=(String)paramValue;
        paramValue=null;
      }
      List list=(List)params.get(paramName);
      if (list == null) {
        list=new ArrayList();
        params.put(paramName,list);
      }
      list.add(paramValue);
    }
  }
  Iterator it=params.keySet().iterator();
  while (it.hasNext()) {
    String paramName=(String)it.next();
    List paramValues=(List)params.get(paramName);
    ParameterDefinition parameter=bean.findParameterDefinition(paramName);
    if (parameter == null)     continue;
    String pattern=parameter.getPattern();
    String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
    boolean isLocale=locs.contains(paramName);
    if (parameter.isMultiValue()) {
      List values=new ArrayList();
      for (int i=0; i < paramValues.size(); i++) {
        Object paramValueObj=DataUtil.validate(dataType,pattern,(String)paramValues.get(i),bean.getLocale(),isLocale);
        values.add(paramValueObj);
      }
      parameterMap.put(paramName,values.toArray());
    }
 else {
      Object paramValueObj=DataUtil.validate(dataType,pattern,(String)paramValues.get(0),bean.getLocale(),isLocale);
      parameterMap.put(paramName,paramValueObj);
    }
  }
}","/** 
 * Handle SOAP operation. Parse report parameters and display text
 * @param operation
 * @param bean
 * @param parameterMap
 * @param displayTexts
 * @throws Exception
 */
public static void handleOperation(Operation operation,ViewerAttributeBean bean,Map parameterMap,Map displayTexts) throws Exception {
  if (operation == null || bean == null || parameterMap == null || displayTexts == null)   return;
  List locs=new ArrayList();
  Map params=new HashMap();
  String displayTextParam=null;
  Oprand[] oprands=operation.getOprand();
  for (int i=0; i < oprands.length; i++) {
    String paramName=oprands[i].getName();
    Object paramValue=oprands[i].getValue();
    if (paramName == null || paramValue == null)     continue;
    if (paramName.equalsIgnoreCase(ParameterAccessor.PARAM_ISLOCALE)) {
      locs.add(paramValue);
    }
 else     if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
      ParameterDefinition parameter=bean.findParameterDefinition(displayTextParam);
      if (parameter != null) {
        if (parameter.isMultiValue())         displayTexts.put(displayTextParam,null);
 else         displayTexts.put(displayTextParam,paramValue);
      }
      continue;
    }
 else {
      if (ParameterAccessor.PARAM_ISNULL.equalsIgnoreCase(paramName)) {
        paramName=(String)paramValue;
        paramValue=null;
      }
      List list=(List)params.get(paramName);
      if (list == null) {
        list=new ArrayList();
        params.put(paramName,list);
      }
      list.add(paramValue);
    }
  }
  Iterator it=params.keySet().iterator();
  while (it.hasNext()) {
    String paramName=(String)it.next();
    List paramValues=(List)params.get(paramName);
    ParameterDefinition parameter=bean.findParameterDefinition(paramName);
    if (parameter == null)     continue;
    String pattern=parameter.getPattern();
    String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
    boolean isLocale=locs.contains(paramName);
    if (parameter.isMultiValue()) {
      List values=new ArrayList();
      for (int i=0; i < paramValues.size(); i++) {
        Object paramValueObj=DataUtil.validate(dataType,pattern,(String)paramValues.get(i),bean.getLocale(),isLocale);
        values.add(paramValueObj);
      }
      parameterMap.put(paramName,values.toArray());
    }
 else {
      Object paramValueObj=DataUtil.validate(dataType,pattern,(String)paramValues.get(0),bean.getLocale(),isLocale);
      parameterMap.put(paramName,paramValueObj);
    }
  }
}",0.9827793352022428
74792,"/** 
 * Get Display Text of select parameters
 * @param parameters
 * @param displayTexts
 * @param request
 * @return Map
 */
public static Map getDisplayTexts(Collection parameters,Map displayTexts,HttpServletRequest request){
  if (displayTexts == null)   displayTexts=new HashMap();
  Enumeration params=request.getParameterNames();
  while (params != null && params.hasMoreElements()) {
    String param=DataUtil.getString(params.nextElement());
    String paramName=ParameterAccessor.isDisplayText(param);
    if (paramName != null) {
      ParameterDefinition parameter=findParameterDefinition(parameters,paramName);
      if (parameter != null && !parameter.isMultiValue())       displayTexts.put(paramName,ParameterAccessor.getParameter(request,param));
    }
  }
  return displayTexts;
}","/** 
 * Get Display Text of select parameters
 * @param parameters
 * @param displayTexts
 * @param request
 * @return Map
 */
public static Map getDisplayTexts(Collection parameters,Map displayTexts,HttpServletRequest request){
  if (displayTexts == null)   displayTexts=new HashMap();
  Enumeration params=request.getParameterNames();
  while (params != null && params.hasMoreElements()) {
    String param=DataUtil.getString(params.nextElement());
    String paramName=ParameterAccessor.isDisplayText(param);
    if (paramName != null) {
      ParameterDefinition parameter=findParameterDefinition(parameters,paramName);
      if (parameter != null) {
        if (parameter.isMultiValue())         displayTexts.put(paramName,null);
 else         displayTexts.put(paramName,ParameterAccessor.getParameter(request,param));
      }
    }
  }
  return displayTexts;
}",0.952495490078172
74793,"/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  String red=Integer.toHexString(color.getRed());
  String green=Integer.toHexString(color.getGreen());
  String blue=Integer.toHexString(color.getBlue());
  red=red.length() == 1 ? ""String_Node_Str"" + red : red;
  green=green.length() == 1 ? ""String_Node_Str"" + green : green;
  blue=blue.length() == 1 ? ""String_Node_Str"" + blue : blue;
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ red+ green+ blue+ ""String_Node_Str"");
  if (fontInfo != null && fontInfo.getFontStyle() == Font.ITALIC) {
    print(""String_Node_Str"");
    print(text);
    print(""String_Node_Str"");
  }
 else {
    print(text);
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  String red=Integer.toHexString(color.getRed());
  String green=Integer.toHexString(color.getGreen());
  String blue=Integer.toHexString(color.getBlue());
  red=red.length() == 1 ? ""String_Node_Str"" + red : red;
  green=green.length() == 1 ? ""String_Node_Str"" + green : green;
  blue=blue.length() == 1 ? ""String_Node_Str"" + blue : blue;
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ red+ green+ blue+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  print(text);
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}",0.934162192709805
74794,"public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  if (isFirstContent) {
    startPageContent(content);
    isFirstContent=false;
  }
  if (emitter != null) {
    if (content.getContentType() == IContent.PAGE_CONTENT) {
      ContentEmitterUtil.endContent(pageContent,emitter);
    }
 else {
      ContentEmitterUtil.endContent(content,emitter);
    }
  }
}","public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  if (!visible) {
    return;
  }
  if (isFirstContent) {
    startPageContent(content);
    isFirstContent=false;
  }
  if (emitter != null) {
    if (content.getContentType() == IContent.PAGE_CONTENT) {
      ContentEmitterUtil.endContent(pageContent,emitter);
    }
 else {
      ContentEmitterUtil.endContent(content,emitter);
    }
  }
}",0.960093896713615
74795,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=DataUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
          link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
        }
 else {
          bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
          link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
          if (!action.isBookmark())           link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
        }
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            Object[] values;
            if (valueObj instanceof Object[]) {
              values=(Object[])valueObj;
            }
 else {
              values=new Object[1];
              values[0]=valueObj;
            }
            for (int i=0; i < values.length; i++) {
              String value=DataUtil.getDisplayValue(values[i]);
              if (value != null) {
                link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
              }
 else {
                link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISNULL,URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE)));
              }
            }
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
          link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
        }
 else {
          bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
          link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
          if (!action.isBookmark())           link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
        }
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.9311650701715304
74796,"/** 
 * Boolean -> BigDecimal true 	-> 1 others 	-> 0  Date -> BigDecimal Date.getTime(); String -> BigDecimal new BigDecimal(String);
 * @param source
 * @return
 * @throws BirtException
 */
public static BigDecimal toBigDecimal(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof BigDecimal) {
    return (BigDecimal)source;
  }
 else   if (source instanceof Number) {
    String str=((Number)source).toString();
    try {
      return new BigDecimal(str);
    }
 catch (    NumberFormatException e) {
      throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{str,""String_Node_Str""});
    }
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new BigDecimal(1d);
    return new BigDecimal(0d);
  }
 else   if (source instanceof Date) {
    long longValue=((Date)source).getTime();
    return new BigDecimal(longValue);
  }
 else   if (source instanceof String) {
    try {
      return new BigDecimal((String)source);
    }
 catch (    NumberFormatException e) {
      throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}","/** 
 * Boolean -> BigDecimal true 	-> 1 others 	-> 0  Date -> BigDecimal Date.getTime(); String -> BigDecimal new BigDecimal(String);
 * @param source
 * @return
 * @throws BirtException
 */
public static BigDecimal toBigDecimal(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof BigDecimal) {
    return (BigDecimal)source;
  }
 else   if (source instanceof Number) {
    String str=((Number)source).toString();
    try {
      return new BigDecimal(str);
    }
 catch (    NumberFormatException e) {
      throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{str,""String_Node_Str""});
    }
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new BigDecimal(1d);
    return new BigDecimal(0d);
  }
 else   if (source instanceof Date) {
    long longValue=((Date)source).getTime();
    return new BigDecimal(longValue);
  }
 else   if (source instanceof String) {
    try {
      return new BigDecimal((String)source);
    }
 catch (    NumberFormatException e) {
      try {
        Number number=NumberFormat.getInstance(ULocale.getDefault()).parse((String)source);
        if (number != null)         return new BigDecimal(number.toString());
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
 catch (      ParseException e1) {
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}",0.8782752902155887
74797,"/** 
 * Boolean -> Integer true 	-> 1 others 	-> 0  Date -> Integer Date.getTime(); String -> Integer Integer.valueOf();
 * @param source
 * @return
 * @throws BirtException
 */
public static Integer toInteger(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Integer) {
    return (Integer)source;
  }
 else   if (source instanceof Number) {
    int intValue=((Number)source).intValue();
    return new Integer(intValue);
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new Integer(1);
    return new Integer(0);
  }
 else   if (source instanceof Date) {
    long longValue=((Date)source).getTime();
    return new Integer((int)longValue);
  }
 else   if (source instanceof String) {
    try {
      return new Integer(Double.valueOf((String)source).intValue());
    }
 catch (    NumberFormatException e) {
      throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}","/** 
 * Boolean -> Integer true 	-> 1 others 	-> 0  Date -> Integer Date.getTime(); String -> Integer Integer.valueOf();
 * @param source
 * @return
 * @throws BirtException
 */
public static Integer toInteger(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Integer) {
    return (Integer)source;
  }
 else   if (source instanceof Number) {
    int intValue=((Number)source).intValue();
    return new Integer(intValue);
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new Integer(1);
    return new Integer(0);
  }
 else   if (source instanceof Date) {
    long longValue=((Date)source).getTime();
    return new Integer((int)longValue);
  }
 else   if (source instanceof String) {
    try {
      return new Integer(Double.valueOf((String)source).intValue());
    }
 catch (    NumberFormatException e) {
      try {
        Number number=NumberFormat.getInstance(ULocale.getDefault()).parse((String)source);
        if (number != null)         return new Integer(number.intValue());
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
 catch (      ParseException e1) {
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}",0.8640776699029126
74798,"/** 
 * Boolean -> Double true 	-> 1 others 	-> 0  Date -> Double Date.getTime(); String -> Double Double.valueOf(String);
 * @param source
 * @return
 * @throws BirtException
 */
public static Double toDouble(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Double) {
    return (Double)source;
  }
 else   if (source instanceof Number) {
    double doubleValue=((Number)source).doubleValue();
    return new Double(doubleValue);
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new Double(1d);
    return new Double(0d);
  }
 else   if (source instanceof Date) {
    double doubleValue=((Date)source).getTime();
    return new Double(doubleValue);
  }
 else   if (source instanceof String) {
    try {
      return Double.valueOf((String)source);
    }
 catch (    NumberFormatException e) {
      throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}","/** 
 * Boolean -> Double true 	-> 1 others 	-> 0  Date -> Double Date.getTime(); String -> Double Double.valueOf(String);
 * @param source
 * @return
 * @throws BirtException
 */
public static Double toDouble(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Double) {
    return (Double)source;
  }
 else   if (source instanceof Number) {
    double doubleValue=((Number)source).doubleValue();
    return new Double(doubleValue);
  }
 else   if (source instanceof Boolean) {
    if (true == ((Boolean)source).booleanValue())     return new Double(1d);
    return new Double(0d);
  }
 else   if (source instanceof Date) {
    double doubleValue=((Date)source).getTime();
    return new Double(doubleValue);
  }
 else   if (source instanceof String) {
    try {
      return Double.valueOf((String)source);
    }
 catch (    NumberFormatException e) {
      try {
        Number number=NumberFormat.getInstance(ULocale.getDefault()).parse((String)source);
        if (number != null)         return new Double(number.doubleValue());
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
 catch (      ParseException e1) {
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}",0.8618867924528302
74799,"/** 
 * @throws Exception
 */
public void testWrongDataType() throws Exception {
  ccName=new String[]{""String_Node_Str"",""String_Node_Str""};
  ccExpr=new String[]{""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < ccName.length; i++) {
    ComputedColumn computedColumn=new ComputedColumn(ccName[i],ccExpr[i],DataType.INTEGER_TYPE);
    ((BaseDataSetDesign)this.dataSet).addComputedColumn(computedColumn);
  }
  String[] bindingNameRow=new String[6];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  bindingNameRow[4]=""String_Node_Str"";
  bindingNameRow[5]=""String_Node_Str"";
  ScriptExpression[] bindingExprRow=new ScriptExpression[]{new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"" + ccName[0],0),new ScriptExpression(""String_Node_Str"" + ccName[1],0)};
  try {
    this.executeQuery(this.createQuery(null,null,null,null,null,null,null,null,null,bindingNameRow,bindingExprRow));
  }
 catch (  DataException e) {
    return;
  }
  fail(""String_Node_Str"");
}","/** 
 * @throws Exception
 */
public void testWrongDataType() throws Exception {
  ccName=new String[]{""String_Node_Str"",""String_Node_Str""};
  ccExpr=new String[]{""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < ccName.length; i++) {
    ComputedColumn computedColumn=new ComputedColumn(ccName[i],ccExpr[i],DataType.INTEGER_TYPE);
    ((BaseDataSetDesign)this.dataSet).addComputedColumn(computedColumn);
  }
  String[] bindingNameRow=new String[6];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  bindingNameRow[4]=""String_Node_Str"";
  bindingNameRow[5]=""String_Node_Str"";
  ScriptExpression[] bindingExprRow=new ScriptExpression[]{new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"" + ""String_Node_Str"",0),new ScriptExpression(""String_Node_Str"" + ccName[0],0),new ScriptExpression(""String_Node_Str"" + ccName[1],0)};
  try {
    Object o=this.executeQuery(this.createQuery(null,null,null,null,null,null,null,null,null,bindingNameRow,bindingExprRow));
    System.out.println(o);
  }
 catch (  DataException e) {
    return;
  }
  fail(""String_Node_Str"");
}",0.9864559819413092
74800,"/** 
 * get the top/bottom filter selected dimension positions.
 * @param dimension
 * @param dimPosition
 * @param topBottomfilterList 
 * @return
 * @throws IOException 
 * @throws DataException 
 */
private IDiskArray getTopbottomFilterPositions(Dimension dimension,IDiskArray dimPosition,List filterList) throws IOException, DataException {
  IDiskArray result=dimPosition;
  ILevel[] levels=dimension.getHierarchy().getLevels();
  for (int i=0; i < filterList.size(); i++) {
    IJSTopBottomFilterHelper filter=(IJSTopBottomFilterHelper)filterList.get(i);
    List dimValueArrayList=evaluateFilter(dimension,dimPosition,levels,filter);
    IDiskArray dimPositionArray=fetchDimPositions(dimValueArrayList,filter);
    result=getIntersection(result,dimPositionArray);
  }
  return result;
}","/** 
 * get the top/bottom filter selected dimension positions.
 * @param dimension
 * @param dimPosition
 * @param topBottomfilterList 
 * @return
 * @throws IOException 
 * @throws DataException 
 */
private IDiskArray getTopbottomFilterPositions(Dimension dimension,IDiskArray dimPosition,List filterList) throws IOException, DataException {
  IDiskArray result=null;
  ILevel[] levels=dimension.getHierarchy().getLevels();
  for (int i=0; i < filterList.size(); i++) {
    IJSTopBottomFilterHelper filter=(IJSTopBottomFilterHelper)filterList.get(i);
    List dimValueArrayList=evaluateFilter(dimension,dimPosition,levels,filter);
    IDiskArray dimPositionArray=fetchDimPositions(dimValueArrayList,filter);
    if (result == null) {
      result=dimPositionArray;
    }
 else {
      result=getIntersection(result,dimPositionArray);
    }
  }
  return result == null ? dimPosition : result;
}",0.9082297217288336
74801,"/** 
 * @throws DataException
 */
private void populateDataSet() throws DataException {
  int originalMaxRows=this.populator.getQuery().getMaxRows();
  boolean changeMaxRows=filterByRow == null ? false : filterByRow.getFilterList(FilterByRow.QUERY_FILTER).size() + filterByRow.getFilterList(FilterByRow.GROUP_FILTER).size() > 0;
  if (changeMaxRows)   this.populator.getQuery().setMaxRows(0);
  List aggCCList=prepareComputedColumns(TransformationConstants.DATA_SET_MODEL);
  doDataSetFilter(changeMaxRows);
  populateAggrCCs(this.getAggrComputedColumns(aggCCList,true));
  removeAvailableComputedColumns();
  populateComputedColumns(this.getAggrComputedColumns(aggCCList,false));
  this.populator.getQuery().setMaxRows(originalMaxRows);
}","/** 
 * @throws DataException
 */
private void populateDataSet() throws DataException {
  int originalMaxRows=this.populator.getQuery().getMaxRows();
  boolean changeMaxRows=filterByRow == null ? false : filterByRow.getFilterList(FilterByRow.QUERY_FILTER).size() + filterByRow.getFilterList(FilterByRow.GROUP_FILTER).size() > 0;
  if (changeMaxRows)   this.populator.getQuery().setMaxRows(0);
  if (this.computedColumnHelper != null)   this.computedColumnHelper.setModel(TransformationConstants.NONE_MODEL);
  doDataSetFilter(changeMaxRows);
  List aggCCList=prepareComputedColumns(TransformationConstants.DATA_SET_MODEL);
  populateAggrCCs(this.getAggrComputedColumns(aggCCList,true));
  removeAvailableComputedColumns();
  populateComputedColumns(this.getAggrComputedColumns(aggCCList,false));
  this.populator.getQuery().setMaxRows(originalMaxRows);
}",0.8851224105461394
74802,"public void testToStringObject(){
  String result;
  for (int i=0; i < testObject.length; i++) {
    try {
      result=DataTypeUtil.toString(testObject[i]);
      if (resultString[i] instanceof Exception)       fail(""String_Node_Str"");
      assertEquals(result,resultString[i]);
    }
 catch (    BirtException e) {
      if (!(resultString[i] instanceof Exception))       fail(""String_Node_Str"");
    }
  }
}","public void testToStringObject(){
  String result;
  for (int i=0; i < testObject.length; i++) {
    try {
      result=DataTypeUtil.toString(testObject[i]);
      if (resultString[i] instanceof Exception)       fail(""String_Node_Str"");
      if (testObject[i] instanceof Double) {
        result=DataTypeUtil.toDouble(result).toString();
      }
 else       if (testObject[i] instanceof Integer || testObject[i] instanceof BigDecimal) {
        result=DataTypeUtil.toInteger(result).toString();
      }
      assertEquals(result,resultString[i]);
    }
 catch (    BirtException e) {
      if (!(resultString[i] instanceof Exception))       fail(""String_Node_Str"");
    }
  }
}",0.7548209366391184
74803,"protected void setUp() throws Exception {
  super.setUp();
  testObject=new Object[]{new Integer(1),new Integer(0),BigDecimal.valueOf(Integer.MAX_VALUE),BigDecimal.valueOf(Integer.MAX_VALUE + 1),BigDecimal.valueOf(Integer.MIN_VALUE),BigDecimal.valueOf(Integer.MIN_VALUE - 1),BigDecimal.valueOf(0l),Boolean.valueOf(true),Boolean.valueOf(false),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),Double.valueOf(""String_Node_Str""),Double.valueOf(""String_Node_Str""),null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueInputObject=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),String.valueOf(0l),""String_Node_Str"",""String_Node_Str"",((new GregorianCalendar(2004 + 1900,1,1)).getTime()).toString(),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  resultDate=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),null,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  resultInteger=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),new Integer(1),new Integer(0),new Integer((int)((Date)resultDate[9]).getTime()),new Integer((int)1.1),new Integer(0),null,new Exception(""String_Node_Str""),new Integer(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str"")};
  resultBigDecimal=new Object[]{new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(Integer.MAX_VALUE),new BigDecimal(Integer.MAX_VALUE + 1),new BigDecimal(Integer.MIN_VALUE),new BigDecimal(Integer.MIN_VALUE - 1),new BigDecimal(0),new BigDecimal(1),new BigDecimal(0),new BigDecimal(((Date)resultDate[9]).getTime()),new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),null,new Exception(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str"")};
  resultBoolean=new Object[]{new Boolean(true),new Boolean(false),new Boolean(true),new Boolean(true),new Boolean(true),new Boolean(true),new Boolean(false),new Boolean(true),new Boolean(false),new Exception(""String_Node_Str""),new Boolean(true),new Boolean(false),null,new Exception(""String_Node_Str""),new Boolean(true),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str"")};
  resultDouble=new Object[]{new Double(1),new Double(0),new Double(Integer.MAX_VALUE),new Double(Integer.MAX_VALUE + 1),new Double(Integer.MIN_VALUE),new Double(Integer.MIN_VALUE - 1),new Double(0),new Double(1),new Double(0),new Double(((Date)resultDate[9]).getTime()),new Double(1.1),new Double(0),null,new Exception(""String_Node_Str""),new Double(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str"")};
  resultString=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",df.format(resultDate[9]),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueExpectedResult=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),""String_Node_Str"",""String_Node_Str"",((Date)resultDate[9]).toString(),new Double(1.1),new Integer(0),null,new Integer(1),""String_Node_Str"",new Integer(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  testObjectDecimal=new Object[]{new Double(Double.NaN),new Double(Double.POSITIVE_INFINITY),new Double(Double.NEGATIVE_INFINITY),new Double(Double.MAX_VALUE),new Double(Double.MIN_VALUE)};
  resultObjectDecimal=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new BigDecimal(new Double(Double.MAX_VALUE).toString()),new BigDecimal(new Double(Double.MIN_VALUE).toString())};
  testObjectDouble=new Object[]{new Float(1)};
  resultObjectDouble=new Object[]{new Double(1)};
}","protected void setUp() throws Exception {
  super.setUp();
  testObject=new Object[]{new Integer(1),new Integer(0),BigDecimal.valueOf(Integer.MAX_VALUE),BigDecimal.valueOf(Integer.MAX_VALUE + 1),BigDecimal.valueOf(Integer.MIN_VALUE),BigDecimal.valueOf(Integer.MIN_VALUE - 1),BigDecimal.valueOf(0l),Boolean.valueOf(true),Boolean.valueOf(false),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),Double.valueOf(""String_Node_Str""),Double.valueOf(""String_Node_Str""),null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueInputObject=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),String.valueOf(0l),""String_Node_Str"",""String_Node_Str"",((new GregorianCalendar(2004 + 1900,1,1)).getTime()).toString(),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  resultDate=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),null,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  resultInteger=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),new Integer(1),new Integer(0),new Integer((int)((Date)resultDate[9]).getTime()),new Integer((int)1.1),new Integer(0),null,new Exception(""String_Node_Str""),new Integer(""String_Node_Str""),new Integer(10),new Integer(10),new Integer(10)};
  resultBigDecimal=new Object[]{new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(Integer.MAX_VALUE),new BigDecimal(Integer.MAX_VALUE + 1),new BigDecimal(Integer.MIN_VALUE),new BigDecimal(Integer.MIN_VALUE - 1),new BigDecimal(0),new BigDecimal(1),new BigDecimal(0),new BigDecimal(((Date)resultDate[9]).getTime()),new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),null,new Exception(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(10),new BigDecimal(10),new BigDecimal(10)};
  resultBoolean=new Object[]{new Boolean(true),new Boolean(false),new Boolean(true),new Boolean(true),new Boolean(true),new Boolean(true),new Boolean(false),new Boolean(true),new Boolean(false),new Exception(""String_Node_Str""),new Boolean(true),new Boolean(false),null,new Exception(""String_Node_Str""),new Boolean(true),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str"")};
  resultDouble=new Object[]{new Double(1),new Double(0),new Double(Integer.MAX_VALUE),new Double(Integer.MAX_VALUE + 1),new Double(Integer.MIN_VALUE),new Double(Integer.MIN_VALUE - 1),new Double(0),new Double(1),new Double(0),new Double(((Date)resultDate[9]).getTime()),new Double(1.1),new Double(0),null,new Exception(""String_Node_Str""),new Double(""String_Node_Str""),new Double(10),new Double(10),new Double(10)};
  resultString=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",df.format(resultDate[9]),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueExpectedResult=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),""String_Node_Str"",""String_Node_Str"",((Date)resultDate[9]).toString(),new Double(1.1),new Integer(0),null,new Integer(1),""String_Node_Str"",new Integer(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  testObjectDecimal=new Object[]{new Double(Double.NaN),new Double(Double.POSITIVE_INFINITY),new Double(Double.NEGATIVE_INFINITY),new Double(Double.MAX_VALUE),new Double(Double.MIN_VALUE)};
  resultObjectDecimal=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new BigDecimal(new Double(Double.MAX_VALUE).toString()),new BigDecimal(new Double(Double.MIN_VALUE).toString())};
  testObjectDouble=new Object[]{new Float(1)};
  resultObjectDouble=new Object[]{new Double(1)};
}",0.9599063505999414
74804,"public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (this.getReferencedMeasureName(binding.getExpression()) != null && this.isLeafLevel(cubeDefn,target)) {
            result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.MEASURE_TYPE));
            continue;
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1) {
              if (fromSameEdge(aggrOns,cubeDefn))               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
 else               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
            }
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              if (getAxisQualifierLevel(next,cubeDefn.getEdge(getAxisQualifierEdgeType(dimLevel,cubeDefn))) != null)               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
            }
            break;
          }
        }
        continue;
      }
      result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.DIMENSION_TYPE));
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (this.getReferencedMeasureName(binding.getExpression()) != null) {
            if (this.isLeafLevel(cubeDefn,target) && binding.getAggrFunction() == null) {
              result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.MEASURE_TYPE));
              continue;
            }
 else             if (binding.getAggrFunction() != null) {
              result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
              continue;
            }
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1) {
              if (fromSameEdge(aggrOns,cubeDefn))               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
 else               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
            }
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              if (getAxisQualifierLevel(next,cubeDefn.getEdge(getAxisQualifierEdgeType(dimLevel,cubeDefn))) != null)               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
            }
            break;
          }
        }
        continue;
      }
      result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.DIMENSION_TYPE));
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9245492989094146
74805,"public void testGetReferableBindings() throws AdapterException, DataException {
  IBinding binding1=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type1=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding2=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type2=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding3=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type3=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding4=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type4=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding5=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type5=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding6=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type6=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding7=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  int type7=IBindingMetaInfo.SUB_TOTAL_TYPE;
  IBinding binding71=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  binding71.addAggregateOn(""String_Node_Str"");
  binding71.addAggregateOn(""String_Node_Str"");
  binding71.addAggregateOn(""String_Node_Str"");
  int type71=IBindingMetaInfo.SUB_TOTAL_TYPE;
  IBinding binding8=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type8=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding9=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  binding9.addAggregateOn(""String_Node_Str"");
  binding9.addAggregateOn(""String_Node_Str"");
  int type9=IBindingMetaInfo.GRAND_TOTAL_TYPE;
  IBinding binding10=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type10=IBindingMetaInfo.MEASURE_TYPE;
  ICubeQueryDefinition query=new CubeQueryDefinition(""String_Node_Str"");
  query.addBinding(binding1);
  query.addBinding(binding2);
  query.addBinding(binding3);
  query.addBinding(binding4);
  query.addBinding(binding5);
  query.addBinding(binding6);
  query.addBinding(binding7);
  query.addBinding(binding71);
  query.addBinding(binding8);
  IEdgeDefinition columnEdge=query.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=query.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  String targetLevel1=""String_Node_Str"";
  List l1=this.session.getCubeQueryUtil().getReferableBindings(targetLevel1,query,true);
  assertTrue(l1.size() == 3);
  assertTrue(contains(l1,binding1,type1));
  assertTrue(contains(l1,binding4,type4));
  assertTrue(contains(l1,binding7,type7));
  String targetLevel2=""String_Node_Str"";
  List l2=this.session.getCubeQueryUtil().getReferableBindings(targetLevel2,query,false);
  assertTrue(l2.size() == 5);
  assertTrue(contains(l2,binding1,type1));
  assertTrue(contains(l2,binding4,type4));
  assertTrue(contains(l2,binding5,type5));
  assertTrue(contains(l2,binding6,type6));
  assertTrue(contains(l2,binding7,type7));
  String targetLevel3=""String_Node_Str"";
  List l3=this.session.getCubeQueryUtil().getReferableBindings(targetLevel3,query,false);
  assertTrue(l3.size() == 2);
  assertTrue(contains(l3,binding2,type2));
  assertTrue(contains(l3,binding71,type71));
  String targetLevel4=""String_Node_Str"";
  query.addBinding(binding9);
  List l4=this.session.getCubeQueryUtil().getReferableBindings(targetLevel4,query,false);
  assertTrue(l4.size() == 3);
  assertTrue(contains(l4,binding2,type2));
  assertTrue(contains(l4,binding71,type71));
  assertTrue(contains(l4,binding9,type9));
  String targetLevel5=""String_Node_Str"";
  query.addBinding(binding10);
  List l5=this.session.getCubeQueryUtil().getReferableBindings(targetLevel5,query,false);
  assertTrue(l5.size() == 4);
  assertTrue(contains(l5,binding7,type7));
  assertTrue(contains(l5,binding71,type71));
  assertTrue(contains(l5,binding8,type8));
  assertTrue(contains(l5,binding10,type10));
}","public void testGetReferableBindings() throws AdapterException, DataException {
  IBinding binding1=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type1=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding2=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type2=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding3=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type3=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding4=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type4=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding5=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type5=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding6=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type6=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding7=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  int type7=IBindingMetaInfo.SUB_TOTAL_TYPE;
  IBinding binding71=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  binding71.addAggregateOn(""String_Node_Str"");
  binding71.addAggregateOn(""String_Node_Str"");
  binding71.addAggregateOn(""String_Node_Str"");
  int type71=IBindingMetaInfo.SUB_TOTAL_TYPE;
  IBinding binding8=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type8=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding9=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  binding9.addAggregateOn(""String_Node_Str"");
  binding9.addAggregateOn(""String_Node_Str"");
  int type9=IBindingMetaInfo.GRAND_TOTAL_TYPE;
  IBinding binding10=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type10=IBindingMetaInfo.MEASURE_TYPE;
  IBinding binding11=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  binding11.setAggrFunction(""String_Node_Str"");
  int type11=IBindingMetaInfo.GRAND_TOTAL_TYPE;
  ICubeQueryDefinition query=new CubeQueryDefinition(""String_Node_Str"");
  query.addBinding(binding1);
  query.addBinding(binding2);
  query.addBinding(binding3);
  query.addBinding(binding4);
  query.addBinding(binding5);
  query.addBinding(binding6);
  query.addBinding(binding7);
  query.addBinding(binding71);
  query.addBinding(binding8);
  IEdgeDefinition columnEdge=query.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=query.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  String targetLevel1=""String_Node_Str"";
  List l1=this.session.getCubeQueryUtil().getReferableBindings(targetLevel1,query,true);
  assertTrue(l1.size() == 3);
  assertTrue(contains(l1,binding1,type1));
  assertTrue(contains(l1,binding4,type4));
  assertTrue(contains(l1,binding7,type7));
  String targetLevel2=""String_Node_Str"";
  List l2=this.session.getCubeQueryUtil().getReferableBindings(targetLevel2,query,false);
  assertTrue(l2.size() == 5);
  assertTrue(contains(l2,binding1,type1));
  assertTrue(contains(l2,binding4,type4));
  assertTrue(contains(l2,binding5,type5));
  assertTrue(contains(l2,binding6,type6));
  assertTrue(contains(l2,binding7,type7));
  String targetLevel3=""String_Node_Str"";
  List l3=this.session.getCubeQueryUtil().getReferableBindings(targetLevel3,query,false);
  assertTrue(l3.size() == 2);
  assertTrue(contains(l3,binding2,type2));
  assertTrue(contains(l3,binding71,type71));
  String targetLevel4=""String_Node_Str"";
  query.addBinding(binding9);
  List l4=this.session.getCubeQueryUtil().getReferableBindings(targetLevel4,query,false);
  assertTrue(l4.size() == 3);
  assertTrue(contains(l4,binding2,type2));
  assertTrue(contains(l4,binding71,type71));
  assertTrue(contains(l4,binding9,type9));
  String targetLevel5=""String_Node_Str"";
  query.addBinding(binding10);
  List l5=this.session.getCubeQueryUtil().getReferableBindings(targetLevel5,query,false);
  assertTrue(l5.size() == 4);
  assertTrue(contains(l5,binding7,type7));
  assertTrue(contains(l5,binding71,type71));
  assertTrue(contains(l5,binding8,type8));
  assertTrue(contains(l5,binding10,type10));
  String targetLevel6=""String_Node_Str"";
  query.addBinding(binding11);
  List l6=this.session.getCubeQueryUtil().getReferableBindings(targetLevel6,query,false);
  assertTrue(l6.size() == 4);
  assertTrue(contains(l6,binding2,type2));
  assertTrue(contains(l6,binding71,type71));
  assertTrue(contains(l6,binding9,type9));
  assertTrue(contains(l6,binding11,type11));
}",0.9419247210926912
74806,"/** 
 * execute the executor, drip all its children contents.
 * @param executor
 */
private void traverse(IReportItemExecutor executor){
}","/** 
 * execute the executor, drip all its children contents.
 * @param executor
 */
private void traverse(IReportItemExecutor executor,IContent content){
}",0.9423728813559322
74807,"protected void start(boolean isFirst){
  if (emitter != null) {
    context.getPageBufferManager().startContent(content,emitter);
  }
}","protected void start(boolean isFirst){
  if (emitter != null) {
    context.getPageBufferManager().startContent(content,emitter,true);
  }
}",0.9818181818181818
74808,"protected void start(boolean isFirst){
  MasterPageDesign pageDesign=getMasterPage(report);
  pageContent=ReportExecutorUtil.executeMasterPage(reportExecutor,context.getPageNumber(),pageDesign);
  if (emitter != null) {
    context.getPageBufferManager().startContainer(pageContent,isFirst,emitter);
  }
}","protected void start(boolean isFirst){
  MasterPageDesign pageDesign=getMasterPage(report);
  pageContent=ReportExecutorUtil.executeMasterPage(reportExecutor,context.getPageNumber(),pageDesign);
  if (emitter != null) {
    context.getPageBufferManager().startContainer(pageContent,isFirst,emitter,true);
  }
}",0.991869918699187
74809,"protected void end(boolean finished){
  if (emitter != null) {
    context.getPageBufferManager().endContainer(pageContent,finished,emitter);
  }
}","protected void end(boolean finished){
  if (emitter != null) {
    context.getPageBufferManager().endContainer(pageContent,finished,emitter,true);
  }
}",0.9832775919732442
74810,"protected void start(boolean isFirst){
  if (emitter != null) {
    context.getPageBufferManager().startContainer(content,isFirst,emitter);
  }
}","protected void start(boolean isFirst){
  if (emitter != null) {
    context.getPageBufferManager().startContainer(content,isFirst,emitter,true);
  }
}",0.9830508474576272
74811,"protected void end(boolean finished){
  if (emitter != null) {
    context.getPageBufferManager().endContainer(content,finished,emitter);
  }
}","protected void end(boolean finished){
  if (emitter != null) {
    context.getPageBufferManager().endContainer(content,finished,emitter,true);
  }
}",0.9828178694158076
74812,"protected void start(boolean isFirst){
  context.getPageBufferManager().startContainer(content,isFirst,tableEmitter);
}","protected void start(boolean isFirst){
  context.getPageBufferManager().startContainer(content,isFirst,tableEmitter,true);
}",0.9794238683127572
74813,"protected void end(boolean finished){
  context.getPageBufferManager().endContainer(content,finished,tableEmitter);
}","protected void end(boolean finished){
  context.getPageBufferManager().endContainer(content,finished,tableEmitter,true);
}",0.9790794979079498
74814,"public void startContent(IContent content,IContentEmitter emitter){
  if (isFirstContent) {
    startPageContent(content);
    isFirstContent=false;
  }
  if (emitter != null) {
    ContentEmitterUtil.startContent(content,emitter);
    ContentEmitterUtil.endContent(content,emitter);
  }
}","public void startContent(IContent content,IContentEmitter emitter,boolean visible){
  if (!visible) {
    return;
  }
  if (isFirstContent) {
    startPageContent(content);
    isFirstContent=false;
  }
  if (emitter != null) {
    ContentEmitterUtil.startContent(content,emitter);
    ContentEmitterUtil.endContent(content,emitter);
  }
}",0.9203821656050956
74815,"public void endContainer(IContent content,boolean finished,IContentEmitter emitter){
  if (isFirstContent) {
    startPageContent(content);
    isFirstContent=false;
  }
  if (emitter != null) {
    if (content.getContentType() == IContent.PAGE_CONTENT) {
      ContentEmitterUtil.endContent(pageContent,emitter);
    }
 else {
      ContentEmitterUtil.endContent(content,emitter);
    }
  }
}","public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  if (isFirstContent) {
    startPageContent(content);
    isFirstContent=false;
  }
  if (emitter != null) {
    if (content.getContentType() == IContent.PAGE_CONTENT) {
      ContentEmitterUtil.endContent(pageContent,emitter);
    }
 else {
      ContentEmitterUtil.endContent(content,emitter);
    }
  }
}",0.9800498753117208
74816,"public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter){
  if (content.getContentType() == IContent.PAGE_CONTENT) {
    isFirstContent=true;
    pageContent=content;
    pageEmitter=emitter;
  }
 else {
    if (isFirstContent) {
      startPageContent(content);
      isFirstContent=false;
    }
    if (emitter != null) {
      ContentEmitterUtil.startContent(content,emitter);
    }
  }
}","public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter,boolean visible){
  if (!visible) {
    return;
  }
  if (content.getContentType() == IContent.PAGE_CONTENT) {
    isFirstContent=true;
    pageContent=content;
    pageEmitter=emitter;
  }
 else {
    if (isFirstContent) {
      startPageContent(content);
      isFirstContent=false;
    }
    if (emitter != null) {
      ContentEmitterUtil.startContent(content,emitter);
    }
  }
}",0.9391891891891893
74817,"public void startContent(IContent content,IContentEmitter emitter){
  if (isRepeated) {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator);
    setup(leafNode,true);
    currentNode.addChild(leafNode);
  }
 else {
    currentNode.start();
    ContentEmitterUtil.startContent(content,emitter);
    generator.start(content,true);
    generator.end(content,true);
  }
}","public void startContent(IContent content,IContentEmitter emitter,boolean visible){
  if (isRepeated || (!visible && !isPageStarted())) {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator);
    setup(leafNode,true);
  }
 else {
    LeafBufferNode leafNode=new LeafBufferNode(content,emitter,generator);
    setup(leafNode,true);
    currentNode.start();
    ContentEmitterUtil.startContent(content,emitter);
    generator.start(content,true);
    generator.end(content,true);
    currentNode.removeChildren();
  }
}",0.4703344120819849
74818,"protected void endCell(IContent content,boolean finished,IContentEmitter emitter){
  ((AbstractNode)currentNode).setFinished(finished);
  if (currentNode.isStarted()) {
    currentNode.end();
  }
  currentNode=currentNode.getParent();
}","protected void endCell(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  ((AbstractNode)currentNode).setFinished(finished);
  if (currentNode.isStarted()) {
    currentNode.end();
  }
  currentNode=currentNode.getParent();
}",0.9672131147540984
74819,"public void endContainer(IContent content,boolean finished,IContentEmitter emitter){
  int type=content.getContentType();
switch (type) {
case IContent.TABLE_BAND_CONTENT:
case IContent.LIST_BAND_CONTENT:
    boolean isFinished=finished && !isRepeated;
  _endContainer(content,isFinished,emitter);
break;
case IContent.PAGE_CONTENT:
endPage(content,finished,emitter);
break;
case IContent.CELL_CONTENT:
endCell(content,finished,emitter);
break;
default :
_endContainer(content,finished,emitter);
break;
}
}","public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  int type=content.getContentType();
switch (type) {
case IContent.TABLE_BAND_CONTENT:
case IContent.LIST_BAND_CONTENT:
    boolean isFinished=finished && !isRepeated;
  _endContainer(content,isFinished,emitter,visible);
break;
case IContent.PAGE_CONTENT:
endPage(content,finished,emitter);
break;
case IContent.CELL_CONTENT:
endCell(content,finished,emitter,visible);
break;
default :
_endContainer(content,finished,emitter,visible);
break;
}
}",0.9619771863117872
74820,"private void _endContainer(IContent content,boolean finished,IContentEmitter emitter){
  ((AbstractNode)currentNode).setFinished(finished);
  if (currentNode.isStarted()) {
    currentNode.end();
  }
 else {
    if (finished && !isRepeated) {
      currentNode.flush();
    }
  }
  currentNode=currentNode.getParent();
  if (currentNode != null && !isRepeated) {
    currentNode.removeChildren();
  }
}","private void _endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible){
  ((AbstractNode)currentNode).setFinished(finished);
  if (currentNode.isStarted()) {
    currentNode.end();
  }
 else {
    if (finished && !isRepeated) {
      if (visible) {
        currentNode.flush();
      }
 else       if (isPageStarted()) {
        currentNode.flush();
      }
    }
  }
  currentNode=currentNode.getParent();
  if (currentNode != null && finished && !isRepeated) {
    if (visible) {
      currentNode.removeChildren();
    }
 else     if (isPageStarted()) {
      currentNode.removeChildren();
    }
  }
}",0.7695274831243973
74821,"public void endPage(IContent content,boolean finished,IContentEmitter emitter){
  ((AbstractNode)currentNode).setFinished(finished);
  if (currentNode.isStarted()) {
    currentNode.end();
    pageBreakEvent();
    if (!finished) {
      context.setPageNumber(context.getPageNumber() + 1);
    }
  }
 else {
    if (finished && context.getPageNumber() == 1) {
      currentNode.flush();
      pageBreakEvent();
    }
  }
  generator.reset();
  context.removeLayoutHint();
  context.clearPageHint();
  currentNode=null;
}","public void endPage(IContent content,boolean finished,IContentEmitter emitter){
  ((AbstractNode)currentNode).setFinished(finished);
  if (currentNode.isStarted()) {
    currentNode.end();
    pageBreakEvent();
    if (!finished) {
      context.setPageNumber(context.getPageNumber() + 1);
    }
  }
 else {
    if (finished) {
      if (context.getPageNumber() == 1) {
        currentNode.flush();
        pageBreakEvent();
      }
 else {
        context.setPageNumber(context.getPageNumber() - 1);
      }
    }
  }
  generator.reset();
  context.removeLayoutHint();
  context.clearPageHint();
  currentNode=null;
}",0.906854130052724
74822,"public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter){
  int type=content.getContentType();
switch (type) {
case IContent.TABLE_BAND_CONTENT:
case IContent.LIST_BAND_CONTENT:
    boolean first=isFirst && !isRepeated;
  ContainerBufferNode bandNode=new ContainerBufferNode(content,emitter,generator);
setup(bandNode,first);
currentNode=bandNode;
break;
case IContent.CELL_CONTENT:
ContainerBufferNode cellNode=new ContainerBufferNode(content,emitter,generator);
setup(cellNode,isFirst);
if (currentNode.isStarted()) {
cellNode.start();
}
currentNode=cellNode;
break;
case IContent.PAGE_CONTENT:
PageNode pageNode=new PageNode(content,emitter,generator);
setup(pageNode,isFirst);
currentNode=pageNode;
break;
default :
ContainerBufferNode node=new ContainerBufferNode(content,emitter,generator);
setup(node,isFirst);
currentNode=node;
break;
}
}","public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter,boolean visible){
  int type=content.getContentType();
switch (type) {
case IContent.TABLE_BAND_CONTENT:
case IContent.LIST_BAND_CONTENT:
    boolean first=isFirst && !isRepeated;
  ContainerBufferNode bandNode=new ContainerBufferNode(content,emitter,generator);
setup(bandNode,first);
currentNode=bandNode;
break;
case IContent.CELL_CONTENT:
ContainerBufferNode cellNode=new ContainerBufferNode(content,emitter,generator);
setup(cellNode,isFirst);
if (currentNode.isStarted()) {
cellNode.start();
}
currentNode=cellNode;
break;
case IContent.PAGE_CONTENT:
PageNode pageNode=new PageNode(content,emitter,generator);
setup(pageNode,isFirst);
currentNode=pageNode;
this.pageNode=pageNode;
break;
default :
ContainerBufferNode node=new ContainerBufferNode(content,emitter,generator);
setup(node,isFirst);
currentNode=node;
break;
}
}",0.977628635346756
74823,"public void handleEvent(Event event){
  if (event.detail == SWT.DRAG) {
    return;
  }
  Sash sash=(Sash)event.widget;
  int shift=event.x - sash.getBounds().x;
  GridData data=(GridData)left.getLayoutData();
  int newWidthHint=data.widthHint + shift;
  if (newWidthHint < 20) {
    return;
  }
  Point computedSize=parent.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  Point currentSize=parent.getSize();
  boolean customSize=!computedSize.equals(currentSize);
  widthHints[0]=data.widthHint=newWidthHint;
  data=(GridData)right.getLayoutData();
  newWidthHint=data.widthHint - shift;
  widthHints[1]=data.widthHint=newWidthHint;
  parent.layout(true);
  computedSize=parent.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  if (customSize) {
    computedSize.x=Math.max(computedSize.x,currentSize.x);
  }
  computedSize.y=Math.max(computedSize.y,currentSize.y);
  if (computedSize.equals(currentSize)) {
    return;
  }
  parent.setSize(computedSize.x,computedSize.y);
}","public void handleEvent(Event event){
  if (event.detail == SWT.DRAG) {
    return;
  }
  Sash sash=(Sash)event.widget;
  int shift=event.x - sash.getBounds().x;
  GridData data=(GridData)left.getLayoutData();
  int newWidthHint=data.widthHint + shift;
  if (newWidthHint < 100) {
    newWidthHint=100;
    shift=100 - data.widthHint;
  }
  widthHints[0]=data.widthHint=newWidthHint;
  data=(GridData)right.getLayoutData();
  newWidthHint=data.widthHint - shift;
  widthHints[1]=data.widthHint=newWidthHint;
  parent.layout();
}",0.6401617250673854
74824,"/** 
 * @param sash
 * @param parent
 * @param left
 * @param right
 */
private void addDragListerner(final Sash sash,final Composite parent,final Control left,final Control right){
  sash.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      if (event.detail == SWT.DRAG) {
        return;
      }
      Sash sash=(Sash)event.widget;
      int shift=event.x - sash.getBounds().x;
      GridData data=(GridData)left.getLayoutData();
      int newWidthHint=data.widthHint + shift;
      if (newWidthHint < 20) {
        return;
      }
      Point computedSize=parent.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      Point currentSize=parent.getSize();
      boolean customSize=!computedSize.equals(currentSize);
      widthHints[0]=data.widthHint=newWidthHint;
      data=(GridData)right.getLayoutData();
      newWidthHint=data.widthHint - shift;
      widthHints[1]=data.widthHint=newWidthHint;
      parent.layout(true);
      computedSize=parent.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      if (customSize) {
        computedSize.x=Math.max(computedSize.x,currentSize.x);
      }
      computedSize.y=Math.max(computedSize.y,currentSize.y);
      if (computedSize.equals(currentSize)) {
        return;
      }
      parent.setSize(computedSize.x,computedSize.y);
    }
  }
);
}","/** 
 * @param sash
 * @param parent
 * @param left
 * @param right
 */
private void addDragListerner(final Sash sash,final Composite parent,final Control left,final Control right){
  sash.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      if (event.detail == SWT.DRAG) {
        return;
      }
      Sash sash=(Sash)event.widget;
      int shift=event.x - sash.getBounds().x;
      GridData data=(GridData)left.getLayoutData();
      int newWidthHint=data.widthHint + shift;
      if (newWidthHint < 100) {
        newWidthHint=100;
        shift=100 - data.widthHint;
      }
      widthHints[0]=data.widthHint=newWidthHint;
      data=(GridData)right.getLayoutData();
      newWidthHint=data.widthHint - shift;
      widthHints[1]=data.widthHint=newWidthHint;
      parent.layout();
    }
  }
);
}",0.725925925925926
74825,"protected IReportLayoutEngine createReportLayoutEngine(String pagination,IRenderOption options){
  IReportLayoutEngine layoutEngine=LayoutEngineFactory.createLayoutEngine(pagination);
  if (options != null) {
    Object fitToPage=renderOptions.getOption(IPDFRenderOption.FIT_TO_PAGE);
    if (fitToPage != null) {
      layoutEngine.setOption(IPDFRenderOption.FIT_TO_PAGE,fitToPage);
    }
    Object pagebreakOnly=renderOptions.getOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY);
    if (pagebreakOnly != null) {
      layoutEngine.setOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY,pagebreakOnly);
    }
    Object outputDisplayNone=renderOptions.getOption(IPDFRenderOption.OUTPUT_DISPLAY_NONE);
    if (outputDisplayNone != null) {
      layoutEngine.setOption(IPDFRenderOption.OUTPUT_DISPLAY_NONE,outputDisplayNone);
    }
  }
  return layoutEngine;
}","protected IReportLayoutEngine createReportLayoutEngine(String pagination,IRenderOption options){
  IReportLayoutEngine layoutEngine=LayoutEngineFactory.createLayoutEngine(pagination);
  if (options != null) {
    Object fitToPage=renderOptions.getOption(IPDFRenderOption.FIT_TO_PAGE);
    if (fitToPage != null) {
      layoutEngine.setOption(IPDFRenderOption.FIT_TO_PAGE,fitToPage);
    }
    Object pagebreakOnly=renderOptions.getOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY);
    if (pagebreakOnly != null) {
      layoutEngine.setOption(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY,pagebreakOnly);
    }
    Object outputDisplayNone=renderOptions.getOption(IPDFRenderOption.OUTPUT_DISPLAY_NONE);
    if (outputDisplayNone != null) {
      layoutEngine.setOption(IPDFRenderOption.OUTPUT_DISPLAY_NONE,outputDisplayNone);
    }
  }
  layoutEngine.setOption(TASK_TYPE,new Integer(taskType));
  return layoutEngine;
}",0.9454749859471612
74826,"protected void start(boolean isFirst){
  MasterPageDesign pageDesign=getMasterPage(report);
  pageContent=ReportExecutorUtil.executeMasterPage(reportExecutor,context.getPageNumber(),pageDesign);
  if (emitter != null) {
    context.getPageBufferManager().startContainer(pageContent,isFirst,emitter,true);
  }
}","protected void start(boolean isFirst){
  MasterPageDesign pageDesign=getMasterPage(report);
  pageContent=ReportExecutorUtil.executeMasterPage(reportExecutor,context.getPageNumber(),pageDesign);
  if (pageContent != null && context.needLayoutPageContent()) {
    layoutPageContent(pageContent);
  }
  if (emitter != null) {
    context.getPageBufferManager().startContainer(pageContent,isFirst,emitter,true);
  }
}",0.8370165745856354
74827,"protected void setupLayoutOptions(){
  Object outputDisplayNone=options.get(IPDFRenderOption.OUTPUT_DISPLAY_NONE);
  if (outputDisplayNone instanceof Boolean) {
    if (((Boolean)outputDisplayNone).booleanValue()) {
      context.setOutputDisplayNone(true);
    }
  }
}","protected void setupLayoutOptions(){
  Object outputDisplayNone=options.get(IPDFRenderOption.OUTPUT_DISPLAY_NONE);
  if (outputDisplayNone instanceof Boolean) {
    if (((Boolean)outputDisplayNone).booleanValue()) {
      context.setOutputDisplayNone(true);
    }
  }
  Object taskType=options.get(EngineTask.TASK_TYPE);
  if (taskType instanceof Integer) {
    int type=((Integer)taskType).intValue();
    if (type == IEngineTask.TASK_RUN) {
      context.setLayoutPageContent(false);
    }
  }
}",0.7023498694516971
74828,"public void build(){
  IReportExecutor executor=executionContext.getExecutor();
  engine=LayoutEngineFactory.createLayoutEngine(ExtensionManager.PAGE_BREAK_PAGINATION);
  engine.setPageHandler(layoutPageHandler);
  IReportContent report=executor.execute();
  outputEmitters.start(report);
  engine.layout(executor,report,outputEmitters,true);
  outputEmitters.end(report);
  engine=null;
}","public void build(){
  IReportExecutor executor=executionContext.getExecutor();
  engine=LayoutEngineFactory.createLayoutEngine(ExtensionManager.PAGE_BREAK_PAGINATION);
  engine.setOption(EngineTask.TASK_TYPE,new Integer(IEngineTask.TASK_RUN));
  engine.setPageHandler(layoutPageHandler);
  IReportContent report=executor.execute();
  outputEmitters.start(report);
  engine.layout(executor,report,outputEmitters,true);
  outputEmitters.end(report);
  engine=null;
}",0.911007025761124
74829,"public static String getPattern(Object data,String val){
  if (val != null && data instanceof Date) {
    if (val.indexOf(""String_Node_Str"") >= 0) {
      return ""String_Node_Str"";
    }
 else     if (val.startsWith(""String_Node_Str"")) {
      return ""String_Node_Str"";
    }
 else     if (!val.startsWith(""String_Node_Str"") && val.indexOf(""String_Node_Str"") >= 0) {
      return ""String_Node_Str"";
    }
    return new DateFormatter(val).getPattern();
  }
 else   if (val == null && data instanceof Time) {
    return ""String_Node_Str"";
  }
 else   if (val == null && data instanceof java.sql.Date) {
    return ""String_Node_Str"";
  }
 else   if (val == null && data instanceof java.util.Date) {
    return ""String_Node_Str"";
  }
 else   if (val != null && data instanceof Number) {
    return new NumberFormatter(val).getPattern();
  }
 else   if (val != null && data instanceof String) {
    return new StringFormatter(val).getPattern();
  }
  return null;
}","public static String getPattern(Object data,String val){
  if (val != null && data instanceof Date) {
    if (val.indexOf(""String_Node_Str"") >= 0) {
      return ""String_Node_Str"";
    }
 else     if (val.startsWith(""String_Node_Str"")) {
      return ""String_Node_Str"";
    }
 else     if (!val.startsWith(""String_Node_Str"") && val.indexOf(""String_Node_Str"") >= 0) {
      return ""String_Node_Str"";
    }
    return new DateFormatter(val).getPattern();
  }
 else   if (val == null && data instanceof Time) {
    return ""String_Node_Str"";
  }
 else   if (val == null && data instanceof java.sql.Date) {
    return ""String_Node_Str"";
  }
 else   if (val == null && data instanceof java.util.Date) {
    return ""String_Node_Str"";
  }
 else   if (val != null && data instanceof Number) {
    if (val.indexOf(""String_Node_Str"") >= 0) {
      return ""String_Node_Str"";
    }
    return new NumberFormatter(val).getPattern();
  }
 else   if (val != null && data instanceof String) {
    return new StringFormatter(val).getPattern();
  }
  return null;
}",0.957648231190832
74830,"private static IDiskArray getDiskArrayFromAggregationResultSet(IAggregationResultSet base) throws IOException {
  IDiskArray diskArray=new BufferedStructureArray(AggregationResultRow.getCreator(),4096);
  for (int j=0; j < base.length(); j++) {
    base.seek(j);
    IAggregationResultRow temp=base.getCurrentRow();
    diskArray.add(temp);
  }
  base.seek(0);
  return diskArray;
}","private static IDiskArray getDiskArrayFromAggregationResultSet(IAggregationResultSet base) throws IOException {
  IDiskArray diskArray=new BufferedStructureArray(AggregationResultRow.getCreator(),4096);
  for (int j=0; j < base.length(); j++) {
    base.seek(j);
    IAggregationResultRow temp=base.getCurrentRow();
    diskArray.add(temp);
  }
  if (base.length() > 0) {
    base.seek(0);
  }
  return diskArray;
}",0.8782936010037641
74831,"public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (this.getReferencedMeasureName(binding.getExpression()) != null && this.isLeafLevel(cubeDefn,target)) {
            result.add(binding);
            continue;
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1)             result.add(binding);
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              if (getAxisQualifierLevel(next,cubeDefn.getEdge(getAxisQualifierEdgeType(dimLevel,cubeDefn))) == null)               continue;
 else               result.add(binding);
            }
            break;
          }
        }
        continue;
      }
      result.add(binding);
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (this.getReferencedMeasureName(binding.getExpression()) != null && this.isLeafLevel(cubeDefn,target)) {
            result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.MEASURE_TYPE));
            continue;
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1) {
              if (fromSameEdge(aggrOns,cubeDefn))               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.GRAND_TOTAL_TYPE));
 else               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
            }
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              if (getAxisQualifierLevel(next,cubeDefn.getEdge(getAxisQualifierEdgeType(dimLevel,cubeDefn))) != null)               result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.SUB_TOTAL_TYPE));
            }
            break;
          }
        }
        continue;
      }
      result.add(new BindingMetaInfo(binding.getBindingName(),IBindingMetaInfo.DIMENSION_TYPE));
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.7891264185801002
74832,"public void testGetReferableBindings() throws AdapterException, DataException {
  IBinding binding1=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  IBinding binding2=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  IBinding binding3=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  IBinding binding4=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  IBinding binding5=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  IBinding binding6=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  IBinding binding7=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  IBinding binding71=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  binding71.addAggregateOn(""String_Node_Str"");
  binding71.addAggregateOn(""String_Node_Str"");
  binding71.addAggregateOn(""String_Node_Str"");
  IBinding binding8=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  ICubeQueryDefinition query=new CubeQueryDefinition(""String_Node_Str"");
  query.addBinding(binding1);
  query.addBinding(binding2);
  query.addBinding(binding3);
  query.addBinding(binding4);
  query.addBinding(binding5);
  query.addBinding(binding6);
  query.addBinding(binding7);
  query.addBinding(binding71);
  query.addBinding(binding8);
  IEdgeDefinition columnEdge=query.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=query.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  String targetLevel1=""String_Node_Str"";
  List l1=this.session.getCubeQueryUtil().getReferableBindings(targetLevel1,query,true);
  assertTrue(l1.size() == 3);
  assertTrue(l1.contains(binding1));
  assertTrue(l1.contains(binding4));
  assertTrue(l1.contains(binding7));
  String targetLevel2=""String_Node_Str"";
  List l2=this.session.getCubeQueryUtil().getReferableBindings(targetLevel2,query,false);
  assertTrue(l2.size() == 5);
  assertTrue(l2.contains(binding1));
  assertTrue(l2.contains(binding4));
  assertTrue(l2.contains(binding5));
  assertTrue(l2.contains(binding6));
  assertTrue(l2.contains(binding7));
  String targetLevel3=""String_Node_Str"";
  List l3=this.session.getCubeQueryUtil().getReferableBindings(targetLevel3,query,false);
  assertTrue(l3.size() == 2);
  assertTrue(l3.contains(binding2));
  assertTrue(l3.contains(binding71));
}","public void testGetReferableBindings() throws AdapterException, DataException {
  IBinding binding1=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type1=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding2=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type2=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding3=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type3=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding4=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type4=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding5=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type5=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding6=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type6=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding7=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  int type7=IBindingMetaInfo.SUB_TOTAL_TYPE;
  IBinding binding71=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  binding71.addAggregateOn(""String_Node_Str"");
  binding71.addAggregateOn(""String_Node_Str"");
  binding71.addAggregateOn(""String_Node_Str"");
  int type71=IBindingMetaInfo.SUB_TOTAL_TYPE;
  IBinding binding8=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type8=IBindingMetaInfo.DIMENSION_TYPE;
  IBinding binding9=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  binding9.addAggregateOn(""String_Node_Str"");
  binding9.addAggregateOn(""String_Node_Str"");
  int type9=IBindingMetaInfo.GRAND_TOTAL_TYPE;
  IBinding binding10=new Binding(""String_Node_Str"",new ScriptExpression(""String_Node_Str""));
  int type10=IBindingMetaInfo.MEASURE_TYPE;
  ICubeQueryDefinition query=new CubeQueryDefinition(""String_Node_Str"");
  query.addBinding(binding1);
  query.addBinding(binding2);
  query.addBinding(binding3);
  query.addBinding(binding4);
  query.addBinding(binding5);
  query.addBinding(binding6);
  query.addBinding(binding7);
  query.addBinding(binding71);
  query.addBinding(binding8);
  IEdgeDefinition columnEdge=query.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=query.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  String targetLevel1=""String_Node_Str"";
  List l1=this.session.getCubeQueryUtil().getReferableBindings(targetLevel1,query,true);
  assertTrue(l1.size() == 3);
  assertTrue(contains(l1,binding1,type1));
  assertTrue(contains(l1,binding4,type4));
  assertTrue(contains(l1,binding7,type7));
  String targetLevel2=""String_Node_Str"";
  List l2=this.session.getCubeQueryUtil().getReferableBindings(targetLevel2,query,false);
  assertTrue(l2.size() == 5);
  assertTrue(contains(l2,binding1,type1));
  assertTrue(contains(l2,binding4,type4));
  assertTrue(contains(l2,binding5,type5));
  assertTrue(contains(l2,binding6,type6));
  assertTrue(contains(l2,binding7,type7));
  String targetLevel3=""String_Node_Str"";
  List l3=this.session.getCubeQueryUtil().getReferableBindings(targetLevel3,query,false);
  assertTrue(l3.size() == 2);
  assertTrue(contains(l3,binding2,type2));
  assertTrue(contains(l3,binding71,type71));
  String targetLevel4=""String_Node_Str"";
  query.addBinding(binding9);
  List l4=this.session.getCubeQueryUtil().getReferableBindings(targetLevel4,query,false);
  assertTrue(l4.size() == 3);
  assertTrue(contains(l4,binding2,type2));
  assertTrue(contains(l4,binding71,type71));
  assertTrue(contains(l4,binding9,type9));
  String targetLevel5=""String_Node_Str"";
  query.addBinding(binding10);
  List l5=this.session.getCubeQueryUtil().getReferableBindings(targetLevel5,query,false);
  assertTrue(l5.size() == 4);
  assertTrue(contains(l5,binding7,type7));
  assertTrue(contains(l5,binding71,type71));
  assertTrue(contains(l5,binding8,type8));
  assertTrue(contains(l5,binding10,type10));
}",0.7702756691969637
74833,"/** 
 * @throws DataException
 */
private void populateDataSet() throws DataException {
  int originalMaxRows=this.populator.getQuery().getMaxRows();
  boolean changeMaxRows=filterByRow == null ? false : filterByRow.getFilterList(FilterByRow.QUERY_FILTER).size() + filterByRow.getFilterList(FilterByRow.GROUP_FILTER).size() > 0;
  if (changeMaxRows)   this.populator.getQuery().setMaxRows(0);
  List aggCCList=prepareComputedColumns(TransformationConstants.DATA_SET_MODEL);
  populateAggrCCs(this.getAggrComputedColumns(aggCCList,true));
  removeAvailableComputedColumns();
  doDataSetFilter(changeMaxRows);
  populateComputedColumns(this.getAggrComputedColumns(aggCCList,false));
  this.populator.getQuery().setMaxRows(originalMaxRows);
}","/** 
 * @throws DataException
 */
private void populateDataSet() throws DataException {
  int originalMaxRows=this.populator.getQuery().getMaxRows();
  boolean changeMaxRows=filterByRow == null ? false : filterByRow.getFilterList(FilterByRow.QUERY_FILTER).size() + filterByRow.getFilterList(FilterByRow.GROUP_FILTER).size() > 0;
  if (changeMaxRows)   this.populator.getQuery().setMaxRows(0);
  List aggCCList=prepareComputedColumns(TransformationConstants.DATA_SET_MODEL);
  doDataSetFilter(changeMaxRows);
  populateAggrCCs(this.getAggrComputedColumns(aggCCList,true));
  removeAvailableComputedColumns();
  populateComputedColumns(this.getAggrComputedColumns(aggCCList,false));
  this.populator.getQuery().setMaxRows(originalMaxRows);
}",0.9539918809201624
74834,"/** 
 * populate all available value in selectValueList
 */
private void populateList(){
  try {
    getOkButton().setEnabled(false);
    selectValueList.removeAll();
    viewerValueList.clear();
    if (modelValueList != null) {
      Iterator iter=modelValueList.iterator();
      while (iter.hasNext()) {
        Object candiateValue=iter.next();
        if (candiateValue != null) {
          String displayCandiateValue;
          if (candiateValue instanceof Date && !(candiateValue instanceof java.sql.Date || candiateValue instanceof java.sql.Time)) {
            DateFormatter formatter=new DateFormatter(ULocale.US);
            formatter.applyPattern(""String_Node_Str"");
            displayCandiateValue=formatter.format((Date)candiateValue);
          }
 else           displayCandiateValue=DataTypeUtil.toString(candiateValue);
          viewerValueList.add(displayCandiateValue);
          selectValueList.add(displayCandiateValue);
        }
      }
    }
 else {
      selectValueList.removeAll();
      modelValueList.clear();
      viewerValueList.clear();
      ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (selectValueList.getItemCount() > 0) {
      selectValueList.select(0);
      getOkButton().setEnabled(true);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}","/** 
 * populate all available value in selectValueList
 */
private void populateList(){
  try {
    getOkButton().setEnabled(false);
    selectValueList.removeAll();
    viewerValueList.clear();
    if (modelValueList != null) {
      Iterator iter=modelValueList.iterator();
      while (iter.hasNext()) {
        Object candiateValue=iter.next();
        if (candiateValue != null) {
          Object displayCandiateValue;
          if (candiateValue instanceof Date && !(candiateValue instanceof java.sql.Date || candiateValue instanceof java.sql.Time)) {
            DateFormatter formatter=new DateFormatter(ULocale.US);
            formatter.applyPattern(""String_Node_Str"");
            displayCandiateValue=formatter.format((Date)candiateValue);
          }
 else           displayCandiateValue=candiateValue;
          viewerValueList.add(displayCandiateValue.toString());
          selectValueList.add(displayCandiateValue.toString());
        }
      }
    }
 else {
      selectValueList.removeAll();
      modelValueList.clear();
      viewerValueList.clear();
      ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (selectValueList.getItemCount() > 0) {
      selectValueList.select(0);
      getOkButton().setEnabled(true);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}",0.9701546206400576
74835,"public Object getData(int col,int row){
  int start=((Integer)colrow.get(new Integer(col))).intValue();
  if (row < start) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return null;
  }
 else {
    List data=(List)columns.get(col);
    if (data.size() > (row - start)) {
      return data.get(row - start);
    }
 else {
      return null;
    }
  }
}","public Object getData(int col,int row){
  int start=((Integer)colrow.get(new Integer(col))).intValue();
  if (row < start) {
    return null;
  }
 else {
    List data=(List)columns.get(col);
    if (data.size() > (row - start)) {
      return data.get(row - start);
    }
 else {
      return null;
    }
  }
}",0.4679582712369597
74836,"public PDFBlockStackingLM(PDFLayoutEngineContext context,PDFStackingLM parent,IContent content,IReportItemExecutor executor){
  super(context,parent,content,executor);
  pageBreakAvoid=pageBreakInsideAvoid() || pageBreakAfterAvoid();
}","public PDFBlockStackingLM(PDFLayoutEngineContext context,PDFStackingLM parent,IContent content,IReportItemExecutor executor){
  super(context,parent,content,executor);
}",0.8366336633663366
74837,"public void autoPageBreak(){
  if (!isRootEmpty()) {
    return;
  }
 else   if (!keepWithCache.isEmpty()) {
    clearCache();
    if (!isRootEmpty()) {
      closeLayout();
      submitRoot();
      return;
    }
  }
  if (child != null) {
    child.autoPageBreak();
    closeLayout();
    submitRoot();
  }
}","public void autoPageBreak(){
  if (!isRootEmpty()) {
    closeLayout();
    submitRoot();
    return;
  }
 else   if (!keepWithCache.isEmpty()) {
    clearCache();
    if (!isRootEmpty()) {
      closeLayout();
      submitRoot();
      return;
    }
  }
  if (child != null) {
    child.autoPageBreak();
    closeLayout();
    submitRoot();
  }
}",0.943683409436834
74838,"protected boolean isRootEmpty(){
  if (pageBreakInsideAvoid()) {
    if (this.isRowFinished()) {
      return false;
    }
    if (!context.isAutoPageBreak()) {
      return false;
    }
    return true;
  }
 else {
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      if (cell.getChildrenCount() > 0) {
        return false;
      }
    }
    if (this.isRowFinished()) {
      return false;
    }
    return true;
  }
}","protected boolean isRootEmpty(){
  if (root != null) {
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      if (cell.getChildrenCount() > 0) {
        return false;
      }
    }
    if (isRowFinished() && root.getChildrenCount() > 0) {
      return false;
    }
  }
  return true;
}",0.2147165259348613
74839,"public PDFStackingLM(PDFLayoutEngineContext context,PDFStackingLM parent,IContent content,IReportItemExecutor executor){
  super(context,parent,content,executor);
}","public PDFStackingLM(PDFLayoutEngineContext context,PDFStackingLM parent,IContent content,IReportItemExecutor executor){
  super(context,parent,content,executor);
  pageBreakAvoid=pageBreakInsideAvoid() || pageBreakAfterAvoid();
}",0.8324873096446701
74840,"protected boolean layoutChildren(){
  initialize();
  boolean hasNextPage=false;
  hasNextPage=traverseChildren();
  if (!hasNextPage) {
    isLast=true;
    clearCache();
  }
 else   if (!context.isAutoPageBreak()) {
    clearCache();
  }
  if (!isRootEmpty()) {
    closeLayout();
    hasNextPage=!submitRoot() || hasNextPage;
  }
  return hasNextPage;
}","protected boolean layoutChildren(){
  initialize();
  boolean hasNextPage=false;
  hasNextPage=traverseChildren();
  if (!hasNextPage) {
    isLast=true;
    clearCache();
  }
 else   if (!context.isAutoPageBreak()) {
    clearCache();
  }
  if (!isRootEmpty() && !(isPageBreakAvoidInside() && context.isAutoPageBreak() && hasNextPage)) {
    closeLayout();
    hasNextPage=!submitRoot() || hasNextPage;
  }
  return hasNextPage;
}",0.9047013977128336
74841,"public void selectionChanged(SelectionChangedEvent event){
  IStructuredSelection selection=(IStructuredSelection)event.getSelection();
  if (selection.isEmpty()) {
    return;
  }
  Viewer target=null;
  if (event.getSource() == categoryTable) {
    target=subCategoryTable;
  }
 else   if (event.getSource() == subCategoryTable) {
    target=functionTable;
  }
  if (target != null) {
    target.setInput(selection.getFirstElement());
  }
  if (event.getSource() == functionTable) {
    Table table=functionTable.getTable();
    if (table.getSelectionCount() == 1) {
      String message=table.getSelection()[0].getText();
      message=message.replaceAll(""String_Node_Str"",""String_Node_Str"");
      messageLine.setText(message);
    }
 else {
      messageLine.setText(""String_Node_Str"");
    }
  }
}","public void selectionChanged(SelectionChangedEvent event){
  IStructuredSelection selection=(IStructuredSelection)event.getSelection();
  Viewer target=null;
  if (event.getSource() == categoryTable) {
    target=subCategoryTable;
  }
 else   if (event.getSource() == subCategoryTable) {
    target=functionTable;
  }
  if (target != null) {
    target.setInput(selection == null ? null : selection.getFirstElement());
  }
  if (event.getSource() == functionTable) {
    Table table=functionTable.getTable();
    if (table.getSelectionCount() == 1) {
      String message=table.getSelection()[0].getText();
      message=message.replaceAll(""String_Node_Str"",""String_Node_Str"");
      messageLine.setText(message);
    }
 else {
      messageLine.setText(""String_Node_Str"");
    }
  }
}",0.6788413098236776
74842,"protected boolean traverseChildren(){
  if (isFirst && groupLevel >= 0 && type == IBandContent.BAND_GROUP_FOOTER) {
    tbl.updateUnresolvedCell(groupLevel,false);
  }
  isFirst=false;
  boolean childBreak=super.traverseChildren();
  if (!childBreak && groupLevel >= 0 && type == IBandContent.BAND_GROUP_FOOTER) {
    tbl.updateUnresolvedCell(groupLevel,true);
  }
  return childBreak;
}","protected boolean traverseChildren(){
  if (isFirst && groupLevel >= 0 && type == IBandContent.BAND_GROUP_FOOTER) {
    int height=0;
    height=tbl.updateUnresolvedCell(groupLevel,false);
    if (0 != height) {
      ((PDFTableGroupLM)parent).updateHeight(height);
    }
  }
  isFirst=false;
  boolean childBreak=super.traverseChildren();
  if (!childBreak && groupLevel >= 0 && type == IBandContent.BAND_GROUP_FOOTER) {
    int height=0;
    height=tbl.updateUnresolvedCell(groupLevel,true);
    if (0 != height) {
      ((PDFTableGroupLM)parent).updateHeight(height);
    }
  }
  return childBreak;
}",0.7818181818181819
74843,"protected boolean traverseChildren(){
  boolean childBreak=super.traverseChildren();
  if (!childBreak) {
    tableLM.endGroup((IGroupContent)content);
  }
  return childBreak;
}","protected boolean traverseChildren(){
  boolean childBreak=super.traverseChildren();
  if (!childBreak) {
    int heightAdjustment=tableLM.endGroup((IGroupContent)content);
    currentBP+=heightAdjustment;
  }
  return childBreak;
}",0.8682926829268293
74844,"protected void closeLayout(){
  regionLayout=null;
  if (root == null) {
    return;
  }
  int borderHeight=0;
  if (layout != null) {
    layout.resolveAll();
    borderHeight=layout.resolveBottomBorder();
    layout.remove((TableArea)root);
  }
  if (isLast) {
    root.setHeight(getCurrentBP() + getOffsetY() + borderHeight);
  }
 else {
    root.setHeight(getCurrentBP() + getOffsetY());
  }
}","protected void closeLayout(){
  regionLayout=null;
  if (root == null) {
    return;
  }
  int borderHeight=0;
  if (layout != null) {
    int height=layout.resolveAll();
    if (0 != height) {
      currentBP=currentBP + height;
    }
    borderHeight=layout.resolveBottomBorder();
    layout.remove((TableArea)root);
  }
  if (isLast) {
    root.setHeight(getCurrentBP() + getOffsetY() + borderHeight);
  }
 else {
    root.setHeight(getCurrentBP() + getOffsetY());
  }
}",0.9126436781609196
74845,"public void endGroup(IGroupContent groupContent){
  int groupLevel=groupContent.getGroupLevel();
  updateUnresolvedCell(groupLevel,false);
  updateUnresolvedCell(groupLevel,true);
  assert(!groupStack.isEmpty());
  groupStack.pop();
}","public int endGroup(IGroupContent groupContent){
  int groupLevel=groupContent.getGroupLevel();
  int height=0;
  height=updateUnresolvedCell(groupLevel,false);
  height+=updateUnresolvedCell(groupLevel,true);
  assert(!groupStack.isEmpty());
  groupStack.pop();
  return height;
}",0.8932038834951457
74846,"public void updateUnresolvedCell(int groupLevel,boolean dropAll){
  String dropType=dropAll ? ""String_Node_Str"" : ""String_Node_Str"";
  int dropValue=this.createDropID(groupLevel,dropType);
  if (layout != null) {
    layout.resolveDropCells(dropValue);
  }
}","public int updateUnresolvedCell(int groupLevel,boolean dropAll){
  String dropType=dropAll ? ""String_Node_Str"" : ""String_Node_Str"";
  int dropValue=this.createDropID(groupLevel,dropType);
  if (layout != null) {
    return layout.resolveDropCells(dropValue);
  }
  return 0;
}",0.951310861423221
74847,"public void resolveDropCells(int dropValue){
  assert(dropValue < 0);
  if (rows.size() == 0 || !hasDropCell) {
    return;
  }
  Row row=(Row)rows.getCurrent();
  assert(row != null);
  int rowHeight=row.getArea().getHeight();
  int height=rowHeight;
  boolean needResolve=false;
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (cell != null && cell.getRowSpan() == dropValue) {
      height=Math.max(height,cell.getHeight());
      needResolve=true;
    }
  }
  if (needResolve) {
    HashSet dropCells=new HashSet();
    int delta=height - rowHeight;
    for (int i=startCol; i <= endCol; i++) {
      CellArea cell=row.getCell(i);
      if (cell == null) {
        continue;
      }
      if (cell.getRowSpan() == dropValue) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          int cellHeight=cell.getHeight();
          int refHeight=ref.getHeight();
          if (!dropCells.contains(ref)) {
            ref.setHeight(refHeight - cellHeight + delta);
            verticalAlign(ref);
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
        cell.setRowSpan(1);
      }
 else       if (cell.getRowSpan() == 1) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          if (!dropCells.contains(ref)) {
            ref.setHeight(ref.getHeight() + delta);
            if (delta > 0) {
              verticalAlign(ref);
            }
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
      }
    }
  }
}","public int resolveDropCells(int dropValue){
  assert(dropValue < 0);
  if (rows.size() == 0 || !hasDropCell) {
    return 0;
  }
  Row row=(Row)rows.getCurrent();
  assert(row != null);
  int rowHeight=row.getArea().getHeight();
  int height=rowHeight;
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (cell == null)     continue;
    if (cell.getRowSpan() == dropValue) {
      if (cell instanceof DummyCell) {
        height=Math.max(height,cell.getHeight() + rowHeight);
      }
 else {
        height=Math.max(height,cell.getHeight());
      }
    }
  }
  int delta=height - rowHeight;
  HashSet dropCells=new HashSet();
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (cell == null)     continue;
    if (cell instanceof DummyCell) {
      int remainCellHeight=cell.getHeight() - delta;
      cell.setHeight(remainCellHeight);
      if (cell.getRowSpan() == dropValue) {
        if (cell.getHeight() < 0) {
          CellArea ref=((DummyCell)cell).getCell();
          if (!dropCells.contains(ref)) {
            ref.setHeight(ref.getHeight() - remainCellHeight);
            cell.setHeight(0);
            verticalAlign(ref);
            dropCells.add(ref);
          }
        }
        cell.setRowSpan(1);
      }
    }
 else     if ((cell.getRowSpan() == 1)) {
      if (delta != 0) {
        cell.setHeight(height);
        row.getArea().setHeight(height);
        verticalAlign(cell);
      }
    }
  }
  return delta;
}",0.4586185438705663
74848,"public void resolveAll(){
  if (rows.size() == 0 || !hasDropCell) {
    return;
  }
  Row row=(Row)rows.getCurrent();
  int rowHeight=row.getArea().getHeight();
  int height=rowHeight;
  boolean hasDropCell=false;
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (cell != null) {
      if (isDropCell(cell) || cell.getRowSpan() > 1) {
        height=Math.max(height,cell.getHeight());
        hasDropCell=true;
      }
    }
  }
  if (hasDropCell) {
    HashSet dropCells=new HashSet();
    int delta=height - rowHeight;
    if (delta > 0) {
      row.getArea().setHeight(height);
    }
    for (int i=startCol; i <= endCol; i++) {
      CellArea cell=row.getCell(i);
      if (cell == null) {
        continue;
      }
      int rowSpan=cell.getRowSpan();
      if (rowSpan < 0 || rowSpan > 1) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          int cellHeight=cell.getHeight();
          int refHeight=ref.getHeight();
          if (!dropCells.contains(ref)) {
            ref.setHeight(refHeight - cellHeight + delta);
            verticalAlign(ref);
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
      }
 else       if (rowSpan == 1) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          if (!dropCells.contains(ref)) {
            ref.setHeight(ref.getHeight() + delta);
            if (delta > 0) {
              verticalAlign(ref);
            }
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
      }
    }
  }
  if (hasDropCell || (row != null && !row.finished)) {
    unresolvedRow=row;
  }
}","public int resolveAll(){
  if (rows.size() == 0 || !hasDropCell) {
    return 0;
  }
  Row row=(Row)rows.getCurrent();
  int rowHeight=row.getArea().getHeight();
  int height=rowHeight;
  boolean hasDropCell=false;
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (cell != null) {
      if (isDropCell(cell) || cell.getRowSpan() > 1) {
        if (cell instanceof DummyCell) {
          height=Math.max(height,cell.getHeight() + rowHeight);
        }
 else {
          height=Math.max(height,cell.getHeight());
        }
        hasDropCell=true;
      }
    }
  }
  int delta=height - rowHeight;
  if (hasDropCell) {
    HashSet dropCells=new HashSet();
    if (delta > 0) {
      row.getArea().setHeight(height);
    }
    for (int i=startCol; i <= endCol; i++) {
      CellArea cell=row.getCell(i);
      if (cell == null) {
        continue;
      }
      int rowSpan=cell.getRowSpan();
      if (rowSpan < 0 || rowSpan > 1) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          int cellHeight=cell.getHeight();
          int refHeight=ref.getHeight();
          if (!dropCells.contains(ref)) {
            ref.setHeight(refHeight - cellHeight + delta);
            verticalAlign(ref);
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
      }
 else       if (rowSpan == 1) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          if (!dropCells.contains(ref)) {
            ref.setHeight(ref.getHeight() + delta);
            if (delta > 0) {
              verticalAlign(ref);
            }
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
      }
    }
  }
  if (hasDropCell || (row != null && !row.finished)) {
    unresolvedRow=row;
  }
  return delta;
}",0.4641350210970464
74849,"/** 
 * @throws DataException
 */
public void test_IN() throws DataException {
  Object result;
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_IN,new String[]{""String_Node_Str"",""String_Node_Str""});
  assertResult(result,true);
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_IN,new String[]{""String_Node_Str"",""String_Node_Str""});
  assertResult(result,false);
}","/** 
 * @throws DataException
 */
public void test_IN() throws DataException {
  Object result;
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_IN,new String[]{""String_Node_Str"",""String_Node_Str""});
  assertResult(result,true);
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_IN,new String[]{""String_Node_Str"",""String_Node_Str""});
  assertResult(result,false);
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_IN,new String[]{null});
  assertResult(result,false);
}",0.8615984405458089
74850,"/** 
 * @param resultObj
 * @return
 * @throws DataException
 */
private static boolean in(Object target,Object[] resultObj) throws DataException {
  for (int i=0; i < resultObj.length; i++) {
    if (compare(target,resultObj[i]) == 0)     return true;
  }
  return false;
}","/** 
 * @param resultObj
 * @return
 * @throws DataException
 */
private static boolean in(Object target,Object[] resultObj) throws DataException {
  if (resultObj == null)   return false;
  for (int i=0; i < resultObj.length; i++) {
    if (compare(target,resultObj[i]) == 0)     return true;
  }
  return false;
}",0.930390492359932
74851,"/** 
 * Handles a Rhino script evaluation result, converting Javascript object into equivalent Java objects if necessary.
 * @param inputObj Object returned by rhino engine.
 * @return If inputObj is a native Javascript object, its equivalent Java object is returned; otherwise inputObj is returned
 */
public static Object convertJavascriptValue(Object inputObj){
  if (inputObj instanceof Undefined) {
    return null;
  }
  if (inputObj instanceof IdScriptableObject) {
    String jsClass=((Scriptable)inputObj).getClassName();
    if (""String_Node_Str"".equals(jsClass)) {
      return new Date((long)Context.toNumber(inputObj));
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return new Boolean(Context.toBoolean(inputObj));
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return new Double(Context.toNumber(inputObj));
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return inputObj.toString();
    }
  }
 else   if (inputObj instanceof Wrapper) {
    return ((Wrapper)inputObj).unwrap();
  }
  return inputObj;
}","/** 
 * Handles a Rhino script evaluation result, converting Javascript object into equivalent Java objects if necessary.
 * @param inputObj Object returned by rhino engine.
 * @return If inputObj is a native Javascript object, its equivalent Java object is returned; otherwise inputObj is returned
 */
public static Object convertJavascriptValue(Object inputObj){
  if (inputObj instanceof Undefined) {
    return null;
  }
  if (inputObj instanceof IdScriptableObject) {
    String jsClass=((Scriptable)inputObj).getClassName();
    if (""String_Node_Str"".equals(jsClass)) {
      return new Date((long)Context.toNumber(inputObj));
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return new Boolean(Context.toBoolean(inputObj));
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return new Double(Context.toNumber(inputObj));
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      return inputObj.toString();
    }
 else     if (""String_Node_Str"".equals(jsClass)) {
      Object[] obj=new Object[(int)((NativeArray)inputObj).getLength()];
      for (int i=0; i < obj.length; i++) {
        obj[i]=convertJavascriptValue(((NativeArray)inputObj).get(i,null));
      }
      return obj;
    }
  }
 else   if (inputObj instanceof Wrapper) {
    return ((Wrapper)inputObj).unwrap();
  }
  return inputObj;
}",0.8855597170203912
74852,"/** 
 * @param resultObj
 * @return
 * @throws DataException
 */
private static boolean in(Object[] resultObj) throws DataException {
  Object target=resultObj[0];
  for (int i=1; i < resultObj.length; i++) {
    if (compare(target,resultObj[i]) == 0)     return true;
  }
  return false;
}","/** 
 * @param resultObj
 * @return
 * @throws DataException
 */
private static boolean in(Object target,Object[] resultObj) throws DataException {
  for (int i=0; i < resultObj.length; i++) {
    if (compare(target,resultObj[i]) == 0)     return true;
  }
  return false;
}",0.8865248226950354
74853,"/** 
 * @param obj
 * @param operator
 * @param op1
 * @param op2
 * @return A Boolean result
 * @throws DataException
 */
public static Object evalConditionalExpr(Object obj,int operator,Object[] ops) throws DataException {
  ExprTextAndValue[] opTextAndValue=new ExprTextAndValue[ops.length];
  for (int i=0; i < ops.length; i++) {
    opTextAndValue[i]=createExprTextAndValueInstance(ops[i]);
  }
  Object resultObject=obj;
  Object[] resultOp=new Object[ops.length];
  for (int i=0; i < ops.length; i++) {
    resultOp[i]=opTextAndValue[i].value;
  }
  Object[] obArray=MiscUtil.isComparable(obj,operator,opTextAndValue);
  if (obArray != null) {
    resultObject=obArray[0];
    for (int i=1; i < obArray.length; i++) {
      resultOp[i - 1]=obArray[i];
    }
  }
  if (logger.isLoggable(Level.FINER)) {
    String logStr=""String_Node_Str"";
    for (int i=0; i < ops.length; i++) {
      logStr+=resultOp[i] == null ? null : (""String_Node_Str"" + i + ""String_Node_Str""+ LogUtil.toString(resultOp[i]));
    }
    logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(resultObject) + ""String_Node_Str""+ operator+ logStr);
  }
  boolean result=false;
switch (operator) {
case IConditionalExpression.OP_EQ:
    result=compare(resultObject,resultOp[0]) == 0;
  break;
case IConditionalExpression.OP_NE:
result=compare(resultObject,resultOp[0]) != 0;
break;
case IConditionalExpression.OP_LT:
result=compare(resultObject,resultOp[0]) < 0;
break;
case IConditionalExpression.OP_LE:
result=compare(resultObject,resultOp[0]) <= 0;
break;
case IConditionalExpression.OP_GE:
result=compare(resultObject,resultOp[0]) >= 0;
break;
case IConditionalExpression.OP_GT:
result=compare(resultObject,resultOp[0]) > 0;
break;
case IConditionalExpression.OP_BETWEEN:
result=between(resultObject,resultOp[0],resultOp[1]);
break;
case IConditionalExpression.OP_NOT_BETWEEN:
result=!(between(resultObject,resultOp[0],resultOp[1]));
break;
case IConditionalExpression.OP_NULL:
result=resultObject == null;
break;
case IConditionalExpression.OP_NOT_NULL:
result=resultObject != null;
break;
case IConditionalExpression.OP_TRUE:
result=isTrueOrFalse(resultObject,Boolean.TRUE);
break;
case IConditionalExpression.OP_FALSE:
result=isTrueOrFalse(resultObject,Boolean.FALSE);
break;
case IConditionalExpression.OP_LIKE:
result=like(resultObject,resultOp[0]);
break;
case IConditionalExpression.OP_NOT_LIKE:
result=!like(resultObject,resultOp[0]);
break;
case IConditionalExpression.OP_TOP_N:
case IConditionalExpression.OP_BOTTOM_N:
case IConditionalExpression.OP_TOP_PERCENT:
case IConditionalExpression.OP_BOTTOM_PERCENT:
throw new DataException(ResourceConstants.UNSUPPORTTED_COND_OPERATOR,""String_Node_Str"");
case IConditionalExpression.OP_MATCH:
result=match(resultObject,resultOp[0]);
break;
case IConditionalExpression.OP_NOT_MATCH:
result=!match(resultObject,resultOp[0]);
break;
case IConditionalExpression.OP_IN:
result=in(obArray);
break;
case IConditionalExpression.OP_NOT_IN:
result=!in(obArray);
break;
default :
throw new DataException(ResourceConstants.UNSUPPORTTED_COND_OPERATOR,new Integer(operator));
}
logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",new Boolean(result));
return new Boolean(result);
}","/** 
 * @param obj
 * @param operator
 * @param op1
 * @param op2
 * @return A Boolean result
 * @throws DataException
 */
public static Object evalConditionalExpr(Object obj,int operator,Object[] ops) throws DataException {
  ExprTextAndValue[] opTextAndValue=new ExprTextAndValue[ops.length];
  for (int i=0; i < ops.length; i++) {
    opTextAndValue[i]=createExprTextAndValueInstance(ops[i]);
  }
  Object resultObject=obj;
  Object[] resultOp=new Object[ops.length];
  for (int i=0; i < ops.length; i++) {
    resultOp[i]=opTextAndValue[i].value;
  }
  Object[] obArray=MiscUtil.isComparable(obj,operator,opTextAndValue);
  if (obArray != null) {
    resultObject=obArray[0];
    for (int i=1; i < obArray.length; i++) {
      resultOp[i - 1]=obArray[i];
    }
  }
  if (logger.isLoggable(Level.FINER)) {
    String logStr=""String_Node_Str"";
    for (int i=0; i < ops.length; i++) {
      logStr+=resultOp[i] == null ? null : (""String_Node_Str"" + i + ""String_Node_Str""+ LogUtil.toString(resultOp[i]));
    }
    logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(resultObject) + ""String_Node_Str""+ operator+ logStr);
  }
  boolean result=false;
switch (operator) {
case IConditionalExpression.OP_EQ:
    result=compare(resultObject,resultOp[0]) == 0;
  break;
case IConditionalExpression.OP_NE:
result=compare(resultObject,resultOp[0]) != 0;
break;
case IConditionalExpression.OP_LT:
result=compare(resultObject,resultOp[0]) < 0;
break;
case IConditionalExpression.OP_LE:
result=compare(resultObject,resultOp[0]) <= 0;
break;
case IConditionalExpression.OP_GE:
result=compare(resultObject,resultOp[0]) >= 0;
break;
case IConditionalExpression.OP_GT:
result=compare(resultObject,resultOp[0]) > 0;
break;
case IConditionalExpression.OP_BETWEEN:
result=between(resultObject,resultOp[0],resultOp[1]);
break;
case IConditionalExpression.OP_NOT_BETWEEN:
result=!(between(resultObject,resultOp[0],resultOp[1]));
break;
case IConditionalExpression.OP_NULL:
result=resultObject == null;
break;
case IConditionalExpression.OP_NOT_NULL:
result=resultObject != null;
break;
case IConditionalExpression.OP_TRUE:
result=isTrueOrFalse(resultObject,Boolean.TRUE);
break;
case IConditionalExpression.OP_FALSE:
result=isTrueOrFalse(resultObject,Boolean.FALSE);
break;
case IConditionalExpression.OP_LIKE:
result=like(resultObject,resultOp[0]);
break;
case IConditionalExpression.OP_NOT_LIKE:
result=!like(resultObject,resultOp[0]);
break;
case IConditionalExpression.OP_TOP_N:
case IConditionalExpression.OP_BOTTOM_N:
case IConditionalExpression.OP_TOP_PERCENT:
case IConditionalExpression.OP_BOTTOM_PERCENT:
throw new DataException(ResourceConstants.UNSUPPORTTED_COND_OPERATOR,""String_Node_Str"");
case IConditionalExpression.OP_MATCH:
result=match(resultObject,resultOp[0]);
break;
case IConditionalExpression.OP_NOT_MATCH:
result=!match(resultObject,resultOp[0]);
break;
case IConditionalExpression.OP_IN:
result=in(resultObject,resultOp);
break;
case IConditionalExpression.OP_NOT_IN:
result=!in(resultObject,resultOp);
break;
default :
throw new DataException(ResourceConstants.UNSUPPORTTED_COND_OPERATOR,new Integer(operator));
}
logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",new Boolean(result));
return new Boolean(result);
}",0.9914451573479988
74854,"/** 
 * remove overwrited adapters.
 */
public void reset(){
  if (!isReset && this.overwriteList != null) {
    for (Iterator iterator=this.iterator(); iterator.hasNext(); ) {
      ElementAdapter adapter=(ElementAdapter)iterator.next();
      if (this.overwriteList.contains(adapter.getId())) {
        if (super.remove(adapter))         System.out.println(adapter.getId() + ""String_Node_Str"");
      }
    }
    this.isReset=true;
  }
}","/** 
 * remove overwrited adapters.
 */
public void reset(){
  if (!isReset && this.overwriteList != null) {
    for (Iterator iterator=this.iterator(); iterator.hasNext(); ) {
      ElementAdapter adapter=(ElementAdapter)iterator.next();
      if (this.overwriteList.contains(adapter.getId())) {
        iterator.remove();
        ElementAdapterManager.logger.log(Level.INFO,adapter.getId() + ""String_Node_Str"");
      }
    }
    this.isReset=true;
  }
}",0.8871508379888268
74855,"public Data createData(Object txt,StyleEntry entry){
  if (txt instanceof IDataContent) {
    IDataContent dataContent=(IDataContent)txt;
    Object value=dataContent.getValue();
    if (ExcelUtil.getType(value).equals(Data.NUMBER)) {
      String format=ExcelUtil.getPattern(value,entry.getProperty(StyleConstant.NUMBER_FORMAT_PROP));
      entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,format);
      entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.NUMBER);
      Data data=new Data(value,entry,Data.NUMBER);
      return data;
    }
 else     if (ExcelUtil.getType(value).equals(Data.DATE)) {
      String format=ExcelUtil.getPattern(value,entry.getProperty(StyleConstant.DATE_FORMAT_PROP));
      entry.setProperty(StyleConstant.DATE_FORMAT_PROP,format);
      entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.DATE);
      Data data=new Data(value,entry,Data.DATE);
      return data;
    }
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.STRING);
    return new Data(dataContent.getText().trim(),entry,Data.STRING);
  }
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.STRING);
  return new Data(txt,entry,Data.STRING);
}","public Data createData(Object txt,StyleEntry entry){
  if (txt instanceof IDataContent) {
    IDataContent dataContent=(IDataContent)txt;
    Object value=dataContent.getValue();
    String text=dataContent.getText();
    if (((DataItemDesign)dataContent.getGenerateBy()).getMap() != null && ((DataItemDesign)dataContent.getGenerateBy()).getMap().getRuleCount() > 0) {
      entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.STRING);
      return new Data(text.trim(),entry,Data.STRING);
    }
 else     if (ExcelUtil.getType(value).equals(Data.NUMBER)) {
      String format=ExcelUtil.getPattern(value,entry.getProperty(StyleConstant.NUMBER_FORMAT_PROP));
      entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,format);
      entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.NUMBER);
      return new Data(value,entry,Data.NUMBER);
    }
 else     if (ExcelUtil.getType(value).equals(Data.DATE)) {
      String format=ExcelUtil.getPattern(value,entry.getProperty(StyleConstant.DATE_FORMAT_PROP));
      entry.setProperty(StyleConstant.DATE_FORMAT_PROP,format);
      entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.DATE);
      return new Data(value,entry,Data.DATE);
    }
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.STRING);
    return new Data(text.trim(),entry,Data.STRING);
  }
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Data.STRING);
  return new Data(txt,entry,Data.STRING);
}",0.8385335413416537
74856,"/** 
 * Clear time portion of a date value
 * @param d
 */
private void cleanTimePortion(Calendar d){
  d.set(Calendar.HOUR_OF_DAY,0);
  d.set(Calendar.MINUTE,0);
  d.set(Calendar.SECOND,1);
  d.set(Calendar.MILLISECOND,0);
}","/** 
 * Clear time portion of a date value
 * @param d
 */
private void cleanTimePortion(Calendar d){
  d.set(Calendar.HOUR_OF_DAY,0);
  d.set(Calendar.MINUTE,0);
  d.set(Calendar.SECOND,0);
  d.set(Calendar.MILLISECOND,0);
}",0.9955555555555556
74857,"public Data(final Object txt,final StyleEntry s){
  this.txt=txt;
  this.style=s;
  id=ID++;
}","public Data(final Object txt,final StyleEntry s,final String datatype){
  this.txt=txt;
  this.style=s;
  this.datatype=datatype;
  id=ID++;
}",0.7966101694915254
74858,"public void writeText(Object d){
  writer.openTag(""String_Node_Str"");
  if (d instanceof Data) {
    if (((Data)d).getDatatype().equals(Data.NUMBER)) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (((Data)d).getDatatype().equals(Data.DATE)) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
    writer.text(((Data)d).txt.toString());
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.text(d.toString());
  }
  writer.closeTag(""String_Node_Str"");
}","public void writeText(Data d){
  writer.openTag(""String_Node_Str"");
  if (d.getDatatype().equals(Data.NUMBER)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (d.getDatatype().equals(Data.DATE)) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.text(d.getText());
  writer.closeTag(""String_Node_Str"");
}",0.7176015473887815
74859,"public void writeDefaultCell(String content){
  writer.openTag(""String_Node_Str"");
  writeText(content);
  writer.closeTag(""String_Node_Str"");
}","public void writeDefaultCell(Data d){
  writer.openTag(""String_Node_Str"");
  if (d.getStyleId() != 0) {
    writer.attribute(""String_Node_Str"",d.getStyleId());
  }
  writeText(d);
  writer.closeTag(""String_Node_Str"");
}",0.303030303030303
74860,"public void writeDataFormat(StyleEntry style){
  if (style.getDatatype() == Data.DATE && style.getProperty(StyleConstant.DATE_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.DATE_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
  if (style.getDatatype() == Data.STRING && style.getProperty(StyleConstant.STRING_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.STRING_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
  if (style.getDatatype() == Data.NUMBER && style.getProperty(StyleConstant.NUMBER_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.NUMBER_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
}","public void writeDataFormat(StyleEntry style){
  if (style.getProperty(StyleConstant.DATA_TYPE_PROP) == Data.DATE && style.getProperty(StyleConstant.DATE_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.DATE_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
  if (style.getProperty(StyleConstant.DATA_TYPE_PROP) == Data.NUMBER && style.getProperty(StyleConstant.NUMBER_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.NUMBER_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
}",0.7884244372990353
74861,"private void declareStyle(StyleEntry style,int id){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  String horizontalAlign=style.getProperty(StyleConstant.H_ALIGN_PROP);
  String verticalAlign=style.getProperty(StyleConstant.V_ALIGN_PROP);
  writeAlignment(horizontalAlign,verticalAlign);
  writer.openTag(""String_Node_Str"");
  String bottomColor=style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
  String bottomLineStyle=style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
  String bottomWeight=style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
  writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
  String topColor=style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
  String topLineStyle=style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
  String topWeight=style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
  writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
  String leftColor=style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
  String leftLineStyle=style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
  String leftWeight=style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
  writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
  String rightColor=style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
  String rightLineStyle=style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
  String rightWeight=style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
  writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
  writer.closeTag(""String_Node_Str"");
  String fontName=style.getProperty(StyleConstant.FONT_FAMILY_PROP);
  String size=style.getProperty(StyleConstant.FONT_SIZE_PROP);
  String fontStyle=style.getProperty(StyleConstant.FONT_STYLE_PROP);
  String fontWeight=style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
  String strikeThrough=style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
  String underline=style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
  String color=style.getProperty(StyleConstant.COLOR_PROP);
  writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
  writeDataFormat(style);
  String bgColor=style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
  writeBackGroudColor(bgColor);
  writer.closeTag(""String_Node_Str"");
}","private void declareStyle(StyleEntry style,int id){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  if (id >= 20) {
    String horizontalAlign=style.getProperty(StyleConstant.H_ALIGN_PROP);
    String verticalAlign=style.getProperty(StyleConstant.V_ALIGN_PROP);
    writeAlignment(horizontalAlign,verticalAlign);
    writer.openTag(""String_Node_Str"");
    String bottomColor=style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    String bottomLineStyle=style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
    String bottomWeight=style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
    writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
    String topColor=style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
    String topLineStyle=style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
    String topWeight=style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
    writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
    String leftColor=style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
    String leftLineStyle=style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
    String leftWeight=style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
    String rightColor=style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
    String rightLineStyle=style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
    String rightWeight=style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
    writer.closeTag(""String_Node_Str"");
    String fontName=style.getProperty(StyleConstant.FONT_FAMILY_PROP);
    String size=style.getProperty(StyleConstant.FONT_SIZE_PROP);
    String fontStyle=style.getProperty(StyleConstant.FONT_STYLE_PROP);
    String fontWeight=style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
    String strikeThrough=style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
    String underline=style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
    String color=style.getProperty(StyleConstant.COLOR_PROP);
    writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
    String bgColor=style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
    writeBackGroudColor(bgColor);
  }
  writeDataFormat(style);
  writer.closeTag(""String_Node_Str"");
}",0.972488536890371
74862,"/** 
 * @param dataMap layout data
 * @return a StyleEngine instance
 */
public StyleEngine(ExcelLayoutEngine engine){
  this.engine=engine;
}","/** 
 * @param dataMap layout data
 * @return a StyleEngine instance
 */
public StyleEngine(ExcelLayoutEngine engine){
  this.engine=engine;
  style2id.put(getDefaultEntry(DEFAULT_DATE_STYLE),new Integer(DEFAULT_DATE_STYLE));
}",0.7696476964769647
74863,"/** 
 * @param selectValueExpression
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
public static List getSelectValueList(String expression,DataSetHandle dataSetHandle) throws BirtException {
  List selectValueList=new ArrayList();
  if (expression != null && expression.trim().length() > 0) {
    QueryDefinition query=new QueryDefinition();
    query.setDataSetName(dataSetHandle.getQualifiedName());
    PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
    if (handle != null) {
      Iterator paramIter=handle.iterator();
      while (paramIter.hasNext()) {
        DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
        if (paramDefn.isInput()) {
          String defaultValue=null;
          if (paramDefn instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)paramDefn).getParamName() != null)           defaultValue=ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)paramDefn).getParamName());
 else           defaultValue=paramDefn.getDefaultValue();
          if (defaultValue != null) {
            InputParameterBinding binding=new InputParameterBinding(paramDefn.getName(),new ScriptExpression(defaultValue));
            query.addInputParamBinding(binding);
          }
        }
      }
    }
    IBaseExpression bindingExprGroup=new ScriptExpression(ExpressionUtility.getReplacedColRefExpr(expression));
    GroupDefinition groupDefn=new GroupDefinition(BINDING_GROUP_NAME);
    groupDefn.setKeyExpression(BINDING_GROUP_EXPRESSION);
    query.addBinding(new Binding(BINDING_ROW_NAME,bindingExprGroup));
    query.addGroup(groupDefn);
    query.setUsesDetails(false);
    DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSetHandle == null ? null : dataSetHandle.getModuleHandle()));
    if (dataSetHandle != null) {
      if (dataSetHandle.getDataSource() != null)       session.defineDataSource(session.getModelAdaptor().adaptDataSource(dataSetHandle.getDataSource()));
      session.defineDataSet(session.getModelAdaptor().adaptDataSet(dataSetHandle));
    }
    IPreparedQuery preparedQuery=session.prepare(query);
    IQueryResults results=preparedQuery.execute(null);
    if (results != null) {
      IResultIterator iter=null;
      iter=results.getResultIterator();
      if (iter != null) {
        while (iter.next()) {
          Object candiateValue=iter.getValue(BINDING_ROW_NAME);
          if (candiateValue != null) {
            selectValueList.add(candiateValue);
          }
          iter.skipToEnd(1);
        }
      }
      results.close();
    }
  }
  return selectValueList;
}","/** 
 * @param selectValueExpression
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
public static List getSelectValueList(String expression,DataSetHandle dataSetHandle) throws BirtException {
  return getSelectValueList(expression,dataSetHandle,true);
}",0.1476510067114094
74864,"/** 
 * TODO: enhance me, this is only a temp logic Set temporary computed columns to DataSourceQuery where cache is used
 */
protected void prepareCacheQuery(IQuery odiQuery){
  if (odiQuery instanceof org.eclipse.birt.data.engine.executor.dscache.DataSourceQuery && temporaryComputedColumns != null && temporaryComputedColumns.size() > 0) {
    ((org.eclipse.birt.data.engine.executor.dscache.DataSourceQuery)odiQuery).setTempComputedColumn(this.temporaryComputedColumns);
  }
}","/** 
 * TODO: enhance me, this is only a temp logic Set temporary computed columns to DataSourceQuery where cache is used
 */
protected void prepareCacheQuery(IQuery odiQuery){
  if (temporaryComputedColumns != null && temporaryComputedColumns.size() > 0) {
    if (odiQuery instanceof org.eclipse.birt.data.engine.executor.dscache.DataSourceQuery) {
      ((org.eclipse.birt.data.engine.executor.dscache.DataSourceQuery)odiQuery).setTempComputedColumn(this.temporaryComputedColumns);
    }
 else     if (odiQuery instanceof org.eclipse.birt.data.engine.executor.dscache.CandidateQuery) {
      ((org.eclipse.birt.data.engine.executor.dscache.CandidateQuery)odiQuery).setTempComputedColumn(this.temporaryComputedColumns);
    }
  }
}",0.5952184666117065
74865,"/** 
 * @param obj
 * @param operator
 * @param ops
 * @return
 */
private static boolean needFormat(Object obj,int operator,ExprTextAndValue[] ops){
  if (operator < IConditionalExpression.OP_EQ || (operator > IConditionalExpression.OP_NOT_BETWEEN && operator < IConditionalExpression.OP_IN) || obj == null || ops.length == 0)   return false;
 else   if ((operator == IConditionalExpression.OP_BETWEEN || operator == IConditionalExpression.OP_NOT_BETWEEN) && ops.length < 2)   return false;
  return true;
}","/** 
 * @param obj
 * @param operator
 * @param ops
 * @return
 */
private static boolean needFormat(Object obj,int operator,ExprTextAndValue[] ops){
  if (operator < IConditionalExpression.OP_EQ || (operator > IConditionalExpression.OP_NOT_BETWEEN && operator < IConditionalExpression.OP_IN) || obj == null || ops.length == 0 || ops[0].value == null)   return false;
 else   if ((operator == IConditionalExpression.OP_BETWEEN || operator == IConditionalExpression.OP_NOT_BETWEEN) && ops.length < 2)   return false;
  return true;
}",0.9769230769230768
74866,"/** 
 * @param result
 * @param key
 * @throws EngineException 
 */
private void addConditionalExprBindings(TotalExprBinding result,IConditionalExpression key,List bindings,String groupName) throws EngineException {
  try {
    IConditionalExpression ce=key;
    if (hasAggregationInFilter(key)) {
      result.addNewExpression(ce);
      return;
    }
    if (groupName != null)     ce.setGroupName(groupName);
    String bindingName=TOTAL_PREFIX + totalColumnSuffix;
    totalColumnSuffix++;
    Binding columnBinding=new Binding(bindingName,ce);
    if (groupName != null) {
      columnBinding.addAggregateOn(groupName);
    }
    List allColumnBindings=new ArrayList();
    allColumnBindings.add(columnBinding);
    result.addColumnBindings(allColumnBindings);
    result.addNewExpression(org.eclipse.birt.core.data.ExpressionUtil.createJSRowExpression(bindingName));
  }
 catch (  DataException e) {
    throw new EngineException(e.getLocalizedMessage());
  }
}","/** 
 * @param result
 * @param key
 * @throws EngineException 
 */
private void addConditionalExprBindings(TotalExprBinding result,IConditionalExpression key,List bindings,String groupName) throws EngineException {
  try {
    IConditionalExpression ce=key;
    if (!hasAggregationInFilter(key)) {
      result.addNewExpression(ce);
      return;
    }
    if (groupName != null)     ce.setGroupName(groupName);
    String bindingName=TOTAL_PREFIX + totalColumnSuffix;
    totalColumnSuffix++;
    Binding columnBinding=new Binding(bindingName,ce);
    if (groupName != null) {
      columnBinding.addAggregateOn(groupName);
    }
    List allColumnBindings=new ArrayList();
    allColumnBindings.add(columnBinding);
    result.addColumnBindings(allColumnBindings);
    result.addNewExpression(org.eclipse.birt.core.data.ExpressionUtil.createJSRowExpression(bindingName));
  }
 catch (  DataException e) {
    throw new EngineException(e.getLocalizedMessage());
  }
}",0.999483204134367
74867,"/** 
 * Do the first pass. In the first pass we maintain a value list and a row id list that will host all top/bottom N values/rowIds so that in pass 2 we can use them to filter rows out.
 * @param value
 * @return
 * @throws DataException
 */
private boolean doFirstPass(Object value) throws DataException {
  firstPassRowNumberCounter++;
  if (valueList == null) {
    valueList=new BasicCachedArray(N);
    rowIdList=new BasicCachedArray(N);
  }
  populateValueListAndRowIdList(value,N);
  return true;
}","/** 
 * Do the first pass. In the first pass we maintain a value list and a row id list that will host all top/bottom N values/rowIds so that in pass 2 we can use them to filter rows out.
 * @param value
 * @return
 * @throws DataException
 */
private boolean doFirstPass(Object value) throws DataException {
  firstPassRowNumberCounter++;
  if (valueList == null) {
    valueList=new BasicCachedArray(N);
    rowIdList=new BasicCachedArray(N);
  }
  if (value != null) {
    populateValueListAndRowIdList(value,N);
  }
  return true;
}",0.972195589645254
74868,"/** 
 * @param resultObj
 * @return
 * @throws DataException
 */
private static boolean in(Object[] resultObj) throws DataException {
  Object target=resultObj[0];
  for (int i=1; i < resultObj.length; i++) {
    if (resultObj[i] instanceof Object[]) {
      Object[] flatternObj=(Object[])resultObj[i];
      if (in(flatternObj))       return true;
    }
    if (compare(target,resultObj[i]) == 0)     return true;
  }
  return false;
}","/** 
 * @param target
 * @param resultObj
 * @return
 * @throws DataException
 */
private static boolean in(Object target,Object[] resultObj) throws DataException {
  for (int i=0; i < resultObj.length; i++) {
    if (resultObj[i] instanceof Object[]) {
      Object[] flatternObj=(Object[])resultObj[i];
      if (in(target,flatternObj))       return true;
    }
 else     if (compare(target,resultObj[i]) == 0)     return true;
  }
  return false;
}",0.8941441441441441
74869,"/** 
 * Returns the separator String
 * @param request
 * @return
 */
public static char getSep(HttpServletRequest request){
  String sepKey=getParameter(request,PARAM_SEP);
  if (sepKey == null)   return DEFAULT_SEP;
  String key=""String_Node_Str"" + sepKey;
  String sep=getInitProp(key);
  if (sep.length() <= 0)   return DEFAULT_SEP;
  return sep.charAt(0);
}","/** 
 * Returns the separator String
 * @param request
 * @return
 */
public static char getSep(HttpServletRequest request){
  String sepKey=getParameter(request,PARAM_SEP);
  if (sepKey == null)   return DEFAULT_SEP;
  String key=""String_Node_Str"" + sepKey;
  String sep=getInitProp(key);
  if (sep == null || sep.length() <= 0)   return DEFAULT_SEP;
  return sep.charAt(0);
}",0.979702300405954
74870,"/** 
 * Get parameter values from config file.
 * @return Map
 */
private Map getConfigVars(){
  HashMap configVars=new HashMap();
  String configFileName=getConfigFileName(this.getFileUri());
  if (configFileName == null)   return configVars;
  ReportDesignHandle handle=null;
  try {
    SessionHandle sessionHandle=SessionHandleAdapter.getInstance().getSessionHandle();
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      handle=sessionHandle.openDesign(configFileName);
      if (handle != null) {
        Iterator it=handle.configVariablesIterator();
        while (it != null && it.hasNext()) {
          ConfigVariableHandle configVar=(ConfigVariableHandle)it.next();
          if (configVar != null && configVar.getName() != null) {
            String paramName=getParameterName(configVar.getName());
            ScalarParameterHandle parameter=findParameter(paramName);
            if (parameter != null) {
              String typeVarName=configVar.getName() + ""String_Node_Str"" + PROP_TYPE;
              ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
              String dataType=null;
              if (typeVar != null)               dataType=typeVar.getValue();
              if (dataType == null || !dataType.equalsIgnoreCase(parameter.getDataType()))               continue;
              String exprVarName=configVar.getName() + ""String_Node_Str"" + PROP_EXPR;
              ConfigVariable exprVar=handle.findConfigVariable(exprVarName);
              String expr=parameter.getValueExpr();
              String cachedExpr=null;
              if (exprVar != null)               cachedExpr=exprVar.getValue();
              if (cachedExpr == null)               cachedExpr=""String_Node_Str"";
              if (expr == null)               expr=""String_Node_Str"";
              if (!cachedExpr.equals(expr))               continue;
            }
            if (paramName != null && paramName.length() > 0) {
              configVars.put(paramName,configVar.getValue());
            }
          }
        }
        handle.close();
      }
    }
  }
 catch (  DesignFileException e) {
    try {
      if (handle != null) {
        handle.close();
      }
    }
 catch (    Exception e1) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  return configVars;
}","/** 
 * Get parameter values from config file.
 * @return Map
 */
private Map getConfigVars(){
  HashMap configVars=new HashMap();
  String configFileName=getConfigFileName(this.getFileUri());
  if (configFileName == null)   return configVars;
  ReportDesignHandle handle=null;
  try {
    SessionHandle sessionHandle=SessionHandleAdapter.getInstance().getSessionHandle();
    File configFile=new File(configFileName);
    if (configFile != null && configFile.exists() && configFile.isFile()) {
      handle=sessionHandle.openDesign(configFileName);
      if (handle != null) {
        Iterator it=handle.configVariablesIterator();
        while (it != null && it.hasNext()) {
          ConfigVariableHandle configVar=(ConfigVariableHandle)it.next();
          if (configVar != null && configVar.getName() != null) {
            String varName=prepareConfigVarName(configVar.getName());
            String paramName=getParameterName(varName);
            ScalarParameterHandle parameter=findParameter(paramName);
            if (parameter != null) {
              String typeVarName=varName + ""String_Node_Str"" + PROP_TYPE+ ""String_Node_Str"";
              ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
              String dataType=null;
              if (typeVar != null)               dataType=typeVar.getValue();
              if (dataType == null || !dataType.equalsIgnoreCase(parameter.getDataType()))               continue;
              String exprVarName=varName + ""String_Node_Str"" + PROP_EXPR+ ""String_Node_Str"";
              ConfigVariable exprVar=handle.findConfigVariable(exprVarName);
              String expr=parameter.getValueExpr();
              String cachedExpr=null;
              if (exprVar != null)               cachedExpr=exprVar.getValue();
              if (cachedExpr == null)               cachedExpr=""String_Node_Str"";
              if (expr == null)               expr=""String_Node_Str"";
              if (!cachedExpr.equals(expr))               continue;
            }
            if (paramName != null && paramName.length() > 0) {
              if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equalsIgnoreCase(parameter.getParamType())) {
                List values=(List)configVars.get(paramName);
                if (values == null) {
                  values=new ArrayList();
                  configVars.put(paramName,values);
                }
                values.add(configVar.getValue());
              }
 else {
                configVars.put(paramName,configVar.getValue());
              }
            }
          }
        }
        handle.close();
      }
    }
  }
 catch (  DesignFileException e) {
    try {
      if (handle != null) {
        handle.close();
      }
    }
 catch (    Exception e1) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  return configVars;
}",0.8761213972132086
74871,"/** 
 * If miss parameter.
 * @return boolean
 */
public boolean isMissingParameter(){
  boolean missingParameter=false;
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  HashMap params=(HashMap)this.getConfigVars();
  List parameters=model.getFlattenParameters();
  if (parameters != null) {
    for (int i=0; i < parameters.size(); i++) {
      if (parameters.get(i) instanceof ScalarParameterHandle) {
        ScalarParameterHandle parameter=((ScalarParameterHandle)parameters.get(i));
        if (parameter.isHidden()) {
          continue;
        }
        String paramValue=null;
        if (params != null && params.containsKey(parameter.getName())) {
          Object curVal=params.get(parameter.getName());
          if (curVal != null)           paramValue=curVal.toString();
        }
        if (paramValue == null && !parameter.allowNull()) {
          missingParameter=true;
          break;
        }
        if (paramValue != null && paramValue.trim().length() <= 0 && !parameter.allowBlank() && parameter.getDataType().equalsIgnoreCase(DesignChoiceConstants.PARAM_TYPE_STRING)) {
          missingParameter=true;
          break;
        }
      }
    }
  }
  return missingParameter;
}","/** 
 * If miss parameter.
 * @return boolean
 */
public boolean isMissingParameter(){
  boolean missingParameter=false;
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  HashMap params=(HashMap)this.getConfigVars();
  List parameters=model.getFlattenParameters();
  if (parameters != null) {
    for (int i=0; i < parameters.size(); i++) {
      if (parameters.get(i) instanceof ScalarParameterHandle) {
        ScalarParameterHandle parameter=((ScalarParameterHandle)parameters.get(i));
        if (parameter.isHidden() || !parameter.isRequired()) {
          continue;
        }
        if (params == null) {
          missingParameter=true;
          break;
        }
        Object valueObj=params.get(parameter.getName());
        if (valueObj == null) {
          missingParameter=true;
          break;
        }
        if (valueObj instanceof List) {
          List values=(List)valueObj;
          for (int j=0; j < values.size(); j++) {
            Object value=values.get(j);
            if (value == null) {
              missingParameter=true;
              break;
            }
            if (DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(parameter.getDataType()) && ((String)value).length() <= 0) {
              missingParameter=true;
              break;
            }
          }
          if (missingParameter)           break;
        }
 else {
          if (DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(parameter.getDataType()) && ((String)valueObj).length() <= 0) {
            missingParameter=true;
            break;
          }
        }
      }
    }
  }
  return missingParameter;
}",0.5526496902959395
74872,"public boolean addArea(IArea area,boolean keepWithPrevious,boolean keepWithNext){
  if (area == null) {
    return true;
  }
  keepWith=keepWith || keepWithNext || pageBreakAvoid;
  if (!keepWith && !keepWithPrevious) {
    clearCache();
  }
  AbstractArea aArea=(AbstractArea)area;
  if (keepWithCache.getHeight() + aArea.getAllocatedHeight() + getCurrentBP() > getMaxAvaHeight()) {
    context.setAutoPageBreak(true);
    return false;
  }
 else {
    if (keepWithPrevious || keepWith) {
      keepWithCache.add(area);
    }
 else {
      addToRoot(aArea);
    }
  }
  keepWith=keepWithNext;
  return true;
}","public boolean addArea(IArea area,boolean keepWithPrevious,boolean keepWithNext){
  if (area == null) {
    return true;
  }
  keepWith=keepWith || keepWithNext || pageBreakAvoid;
  if (!keepWith && !keepWithPrevious) {
    clearCache();
  }
  AbstractArea aArea=(AbstractArea)area;
  if (keepWithCache.getHeight() + aArea.getAllocatedHeight() + getCurrentBP() > getMaxAvaHeight()) {
    context.setAutoPageBreak(true);
    return false;
  }
 else {
    if (keepWithPrevious || keepWith) {
      keepWithCache.add(area);
    }
 else {
      addToRoot(aArea);
    }
  }
  keepWith=keepWithNext;
  if (!keepWith) {
    clearCache();
  }
  return true;
}",0.9452815226011102
74873,"/** 
 * Constructs an instance, setting main expression, a unary operator, and its Collection operand
 */
public ConditionalExpression(String expr,int operator,List operand){
  this.expr=new ScriptExpression(expr);
  this.operator=operator;
  this.op1=new CombinedExpression(operand);
  this.op2=null;
}","/** 
 * @param expr
 * @param operator
 * @param operand
 * @param operand2
 */
public ConditionalExpression(String expr,int operator,List operand,String operand2){
  this.expr=new ScriptExpression(expr);
  this.operator=operator;
  this.op1=new CombinedExpression(operand);
  this.op2=newJSExpression(operand2);
}",0.6709886547811994
74874,"/** 
 * @param result
 * @param key
 * @throws EngineException 
 */
private void addConditionalExprBindings(TotalExprBinding result,IConditionalExpression key,List bindings,String groupName) throws EngineException {
  try {
    IConditionalExpression ce=key;
    String expr=getExprText(ce.getExpression());
    String oprand1=getExprText(ce.getOperand1());
    String oprand2=getExprText(ce.getOperand2());
    if (!org.eclipse.birt.core.data.ExpressionUtil.hasAggregation(expr) && !org.eclipse.birt.core.data.ExpressionUtil.hasAggregation(oprand1) && !org.eclipse.birt.core.data.ExpressionUtil.hasAggregation(oprand2)) {
      result.addNewExpression(ce);
      return;
    }
    if (groupName != null)     ce.setGroupName(groupName);
    String bindingName=TOTAL_PREFIX + totalColumnSuffix;
    totalColumnSuffix++;
    Binding columnBinding=new Binding(bindingName,ce);
    if (groupName != null) {
      columnBinding.addAggregateOn(groupName);
    }
    List allColumnBindings=new ArrayList();
    allColumnBindings.add(columnBinding);
    result.addColumnBindings(allColumnBindings);
    result.addNewExpression(org.eclipse.birt.core.data.ExpressionUtil.createJSRowExpression(bindingName));
  }
 catch (  DataException e) {
    throw new EngineException(e.getLocalizedMessage());
  }
}","/** 
 * @param result
 * @param key
 * @throws EngineException 
 */
private void addConditionalExprBindings(TotalExprBinding result,IConditionalExpression key,List bindings,String groupName) throws EngineException {
  try {
    IConditionalExpression ce=key;
    if (hasAggregationInFilter(key)) {
      result.addNewExpression(ce);
      return;
    }
    if (groupName != null)     ce.setGroupName(groupName);
    String bindingName=TOTAL_PREFIX + totalColumnSuffix;
    totalColumnSuffix++;
    Binding columnBinding=new Binding(bindingName,ce);
    if (groupName != null) {
      columnBinding.addAggregateOn(groupName);
    }
    List allColumnBindings=new ArrayList();
    allColumnBindings.add(columnBinding);
    result.addColumnBindings(allColumnBindings);
    result.addNewExpression(org.eclipse.birt.core.data.ExpressionUtil.createJSRowExpression(bindingName));
  }
 catch (  DataException e) {
    throw new EngineException(e.getLocalizedMessage());
  }
}",0.8455068614431164
74875,"/** 
 * When a TopN/TopPercent/BottomN/BottomPercent ConditionalExpression is set, transform it to Total.TopN/Total.TopPercent/Total.BottomN/Total.BottomPercent aggregations with ""isTrue"" operator.
 * @param ce
 * @return
 */
public static IConditionalExpression transformConditionalExpression(IConditionalExpression ce){
  String prefix=null;
switch (ce.getOperator()) {
case IConditionalExpression.OP_TOP_N:
    prefix=""String_Node_Str"";
  break;
case IConditionalExpression.OP_TOP_PERCENT:
prefix=""String_Node_Str"";
break;
case IConditionalExpression.OP_BOTTOM_N:
prefix=""String_Node_Str"";
break;
case IConditionalExpression.OP_BOTTOM_PERCENT:
prefix=""String_Node_Str"";
break;
}
if (prefix != null) {
ce=new ConditionalExpression(prefix + ""String_Node_Str"" + ce.getExpression().getText()+ ""String_Node_Str""+ ce.getOperand1().getText()+ ""String_Node_Str"",IConditionalExpression.OP_TRUE);
}
return ce;
}","/** 
 * When a TopN/TopPercent/BottomN/BottomPercent ConditionalExpression is set, transform it to Total.TopN/Total.TopPercent/Total.BottomN/Total.BottomPercent aggregations with ""isTrue"" operator.
 * @param ce
 * @return
 */
public static IConditionalExpression transformConditionalExpression(IConditionalExpression ce){
  String prefix=null;
switch (ce.getOperator()) {
case IConditionalExpression.OP_TOP_N:
    prefix=""String_Node_Str"";
  break;
case IConditionalExpression.OP_TOP_PERCENT:
prefix=""String_Node_Str"";
break;
case IConditionalExpression.OP_BOTTOM_N:
prefix=""String_Node_Str"";
break;
case IConditionalExpression.OP_BOTTOM_PERCENT:
prefix=""String_Node_Str"";
break;
}
if (prefix != null) {
ce=new ConditionalExpression(prefix + ""String_Node_Str"" + ce.getExpression().getText()+ ""String_Node_Str""+ ((IScriptExpression)ce.getOperand1()).getText()+ ""String_Node_Str"",IConditionalExpression.OP_TRUE);
}
return ce;
}",0.9885183160196828
74876,"/** 
 * evaluate conditional expression. A conditional expression can have an operator, one LHS expression, and up to two expressions on RHS, i.e., testExpr operator operand1 operand2 or testExpr between 1 20 Now only support comparison between the same data type
 * @param expr the conditional expression to be evaluated
 * @return a boolean value (as an Object)
 */
public Object evaluateCondExpr(IConditionalExpression expr){
  int operator=expr.getOperator();
  IScriptExpression testExpr=expr.getExpression();
  IScriptExpression v1=expr.getOperand1();
  IScriptExpression v2=expr.getOperand2();
  if (testExpr == null)   return Boolean.FALSE;
  Object testExprValue=evaluate(testExpr.getText());
  if (IConditionalExpression.OP_NONE == operator) {
    return testExprValue;
  }
  Object vv1=null;
  Object vv2=null;
  if (v1 != null) {
    vv1=evaluate(v1.getText());
  }
  if (v2 != null) {
    vv2=evaluate(v2.getText());
  }
  try {
    return ScriptEvalUtil.evalConditionalExpr(testExprValue,expr.getOperator(),vv1,vv2);
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,e.getMessage(),e);
    addException(new EngineException(MessageConstants.INVALID_EXPRESSION_ERROR,expr,e));
    return Boolean.FALSE;
  }
}","/** 
 * evaluate conditional expression. A conditional expression can have an operator, one LHS expression, and up to two expressions on RHS, i.e., testExpr operator operand1 operand2 or testExpr between 1 20 Now only support comparison between the same data type
 * @param expr the conditional expression to be evaluated
 * @return a boolean value (as an Object)
 */
public Object evaluateCondExpr(IConditionalExpression expr){
  IScriptExpression testExpr=expr.getExpression();
  if (testExpr == null)   return Boolean.FALSE;
  try {
    return ScriptEvalUtil.evalExpr(expr,scriptContext.getContext(),scriptContext.getScope(),null,0);
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,e.getMessage(),e);
    addException(new EngineException(MessageConstants.INVALID_EXPRESSION_ERROR,expr,e));
    return Boolean.FALSE;
  }
}",0.6864654333008764
74877,"/** 
 * @param edge
 * @param target
 * @return
 */
private boolean isLeafLevel(IEdgeDefinition edge,DimLevel target){
  IDimensionDefinition dim=(IDimensionDefinition)edge.getDimensions().get(edge.getDimensions().size() - 1);
  if (dim.getName().equals(target.getDimensionName())) {
    IHierarchyDefinition hier=(IHierarchyDefinition)dim.getHierarchy().get(0);
    ILevelDefinition level=(ILevelDefinition)hier.getLevels().get(hier.getLevels().size() - 1);
    if (target.getLevelName().equals(level.getName()))     return true;
  }
  return false;
}","/** 
 * @param edge
 * @param target
 * @return
 */
private boolean isLeafLevel(IEdgeDefinition edge,DimLevel target){
  if (edge == null)   return false;
  IDimensionDefinition dim=(IDimensionDefinition)edge.getDimensions().get(edge.getDimensions().size() - 1);
  if (dim.getName().equals(target.getDimensionName())) {
    IHierarchyDefinition hier=(IHierarchyDefinition)dim.getHierarchy().get(0);
    ILevelDefinition level=(ILevelDefinition)hier.getLevels().get(hier.getLevels().size() - 1);
    if (target.getLevelName().equals(level.getName()))     return true;
  }
  return false;
}",0.968421052631579
74878,"/** 
 * register model filter operator with dte's IConditionalExpression operator
 */
private static void registerFilterOperator(){
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_EQ,new Integer(IConditionalExpression.OP_EQ));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NE,new Integer(IConditionalExpression.OP_NE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_LT,new Integer(IConditionalExpression.OP_LT));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_LE,new Integer(IConditionalExpression.OP_LE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_GE,new Integer(IConditionalExpression.OP_GE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_GT,new Integer(IConditionalExpression.OP_GT));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_BETWEEN,new Integer(IConditionalExpression.OP_BETWEEN));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NOT_BETWEEN,new Integer(IConditionalExpression.OP_NOT_BETWEEN));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NULL,new Integer(IConditionalExpression.OP_NULL));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NOT_NULL,new Integer(IConditionalExpression.OP_NOT_NULL));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_TRUE,new Integer(IConditionalExpression.OP_TRUE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_FALSE,new Integer(IConditionalExpression.OP_FALSE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_LIKE,new Integer(IConditionalExpression.OP_LIKE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_TOP_N,new Integer(IConditionalExpression.OP_TOP_N));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_BOTTOM_N,new Integer(IConditionalExpression.OP_BOTTOM_N));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_TOP_PERCENT,new Integer(IConditionalExpression.OP_TOP_PERCENT));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_BOTTOM_PERCENT,new Integer(IConditionalExpression.OP_BOTTOM_PERCENT));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_MATCH,new Integer(IConditionalExpression.OP_MATCH));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NOT_LIKE,new Integer(IConditionalExpression.OP_NOT_LIKE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NOT_MATCH,new Integer(IConditionalExpression.OP_NOT_MATCH));
}","/** 
 * register model filter operator with dte's IConditionalExpression operator
 */
private static void registerFilterOperator(){
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_EQ,new Integer(IConditionalExpression.OP_EQ));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NE,new Integer(IConditionalExpression.OP_NE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_LT,new Integer(IConditionalExpression.OP_LT));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_LE,new Integer(IConditionalExpression.OP_LE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_GE,new Integer(IConditionalExpression.OP_GE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_GT,new Integer(IConditionalExpression.OP_GT));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_BETWEEN,new Integer(IConditionalExpression.OP_BETWEEN));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NOT_BETWEEN,new Integer(IConditionalExpression.OP_NOT_BETWEEN));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NULL,new Integer(IConditionalExpression.OP_NULL));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NOT_NULL,new Integer(IConditionalExpression.OP_NOT_NULL));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_TRUE,new Integer(IConditionalExpression.OP_TRUE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_FALSE,new Integer(IConditionalExpression.OP_FALSE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_LIKE,new Integer(IConditionalExpression.OP_LIKE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_TOP_N,new Integer(IConditionalExpression.OP_TOP_N));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_BOTTOM_N,new Integer(IConditionalExpression.OP_BOTTOM_N));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_TOP_PERCENT,new Integer(IConditionalExpression.OP_TOP_PERCENT));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_BOTTOM_PERCENT,new Integer(IConditionalExpression.OP_BOTTOM_PERCENT));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_MATCH,new Integer(IConditionalExpression.OP_MATCH));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NOT_LIKE,new Integer(IConditionalExpression.OP_NOT_LIKE));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_NOT_MATCH,new Integer(IConditionalExpression.OP_NOT_MATCH));
  filterOptMap.put(DesignChoiceConstants.FILTER_OPERATOR_IN,new Integer(IConditionalExpression.OP_IN));
}",0.9784679089026916
74879,"/** 
 * Constructs an instance, setting main expression, a binary operator, and its two operands The operator parameter contains a String operator defined in Model
 */
public ConditionAdapter(String mainExpr,String operator,String operand1,String operand2){
  super(mainExpr,operatorFromModel(operator),operand1,operand2);
}","/** 
 * @param mainExpr
 * @param operator
 * @param operands
 */
public ConditionAdapter(String mainExpr,String operator,List operands){
  super(mainExpr,org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelFilterOperator(operator),operands);
}",0.3979416809605489
74880,"public IConditionalExpression createConditionalExpression(String testExpression,String operator,String value1,String value2){
  ConditionalExpression expression=new ConditionalExpression(testExpression,toDteFilterOperator(operator),value1,value2);
  return ExpressionUtil.transformConditionalExpression(expression);
}","public IConditionalExpression createConditionalExpression(String testExpression,String operator,String value1,String value2){
  ConditionalExpression expression=new ConditionalExpression(testExpression,DataAdapterUtil.adaptModelFilterOperator(operator),value1,value2);
  return ExpressionUtil.transformConditionalExpression(expression);
}",0.9557251908396946
74881,"/** 
 * Creates a new DtE API IJSExprFilter or IColumnFilter from a model's filter condition. Could return null if no expression nor column operator is defined.
 */
IFilterDefinition newFilter(FilterConditionHandle modelFilter){
  String filterExpr=modelFilter.getExpr();
  if (filterExpr == null || filterExpr.length() == 0)   return null;
  String filterOpr=modelFilter.getOperator();
  if (filterOpr == null || filterOpr.length() == 0)   return new FilterDefinition(new ScriptExpression(filterExpr));
  String column=filterExpr;
  int dteOpr=toDteFilterOperator(filterOpr);
  String operand1=modelFilter.getValue1();
  String operand2=modelFilter.getValue2();
  return new FilterDefinition(new ConditionalExpression(column,dteOpr,operand1,operand2));
}","/** 
 * Creates a new DtE API IJSExprFilter or IColumnFilter from a model's filter condition. Could return null if no expression nor column operator is defined.
 */
IFilterDefinition newFilter(FilterConditionHandle modelFilter){
  String filterExpr=modelFilter.getExpr();
  if (filterExpr == null || filterExpr.length() == 0)   return null;
  String filterOpr=modelFilter.getOperator();
  if (filterOpr == null || filterOpr.length() == 0)   return new FilterDefinition(new ScriptExpression(filterExpr));
  String column=filterExpr;
  int dteOpr=toDteFilterOperator(filterOpr);
  if (dteOpr == IConditionalExpression.OP_IN || dteOpr == IConditionalExpression.OP_NOT_IN) {
    List operands=modelFilter.getValue1List();
    return new FilterDefinition(new ConditionalExpression(column,dteOpr,operands));
  }
 else {
    String operand1=modelFilter.getValue1();
    String operand2=modelFilter.getValue2();
    return new FilterDefinition(new ConditionalExpression(column,dteOpr,operand1,operand2));
  }
}",0.8594194649971543
74882,"public static int toDteDataType(String modelDataType){
  if (modelDataType == null)   return DataType.UNKNOWN_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY))   return DataType.ANY_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER))   return DataType.INTEGER_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING))   return DataType.STRING_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME))   return DataType.DATE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATE))   return DataType.SQL_DATE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_TIME))   return DataType.SQL_TIME_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL))   return DataType.DECIMAL_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT))   return DataType.DOUBLE_TYPE;
  if (modelDataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_BOOLEAN))   return DataType.BOOLEAN_TYPE;
  return DataType.UNKNOWN_TYPE;
}","public static int toDteDataType(String modelDataType){
  return DataAdapterUtil.adaptModelDataType(modelDataType);
}",0.1247947454844006
74883,"public static int toDteFilterOperator(String modelOpr){
}","public static int toDteFilterOperator(String modelOpr){
  return DataAdapterUtil.adaptModelFilterOperator(modelOpr);
}",0.6514285714285715
74884,"/** 
 * Sort on table
 * @throws Exception
 */
public void testFilterOnTable() throws Exception {
  QueryDefinition queryDefn=newReportQuery();
  String[] name=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  ScriptExpression[] se=new ScriptExpression[name.length];
  se[0]=new ScriptExpression(""String_Node_Str"");
  se[1]=new ScriptExpression(""String_Node_Str"");
  se[2]=new ScriptExpression(""String_Node_Str"");
  for (int i=0; i < name.length; i++)   queryDefn.addResultSetExpression(name[i],se[i]);
  ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
  FilterDefinition filterDefn=new FilterDefinition(filterExpr);
  queryDefn.addFilter(filterDefn);
  IResultIterator ri=executeQuery(queryDefn);
  while (ri.next()) {
    String str=""String_Node_Str"";
    for (int i=0; i < name.length; i++) {
      str+=ri.getValue(name[i]);
      if (i < name.length - 1)       str+=""String_Node_Str"";
    }
    testPrintln(str);
  }
}","/** 
 * Sort on table
 * @throws Exception
 */
public void testFilterOnTable() throws Exception {
  QueryDefinition queryDefn=newReportQuery();
  String[] name=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  ScriptExpression[] se=new ScriptExpression[name.length];
  se[0]=new ScriptExpression(""String_Node_Str"");
  se[1]=new ScriptExpression(""String_Node_Str"");
  se[2]=new ScriptExpression(""String_Node_Str"");
  for (int i=0; i < name.length; i++)   queryDefn.addResultSetExpression(name[i],se[i]);
  ScriptExpression filterExpr=new ScriptExpression(""String_Node_Str"");
  FilterDefinition filterDefn=new FilterDefinition(filterExpr);
  queryDefn.addFilter(filterDefn);
  IResultIterator ri=executeQuery(queryDefn);
  while (ri.next()) {
    String str=""String_Node_Str"";
    for (int i=0; i < name.length; i++) {
      str+=ri.getValue(name[i]);
      if (i < name.length - 1)       str+=""String_Node_Str"";
    }
    testPrintln(str);
  }
  checkOutputFile();
}",0.9892362890825218
74885,"public void refresh(Properties customConnectionProps){
  m_pageHelper.initCustomControl(customConnectionProps);
  enableAllControls(getControl(),isSessionEditable());
}","public void refresh(Properties customConnectionProps){
  m_pageHelper.initCustomControl(customConnectionProps);
  enableAllControls(getControl(),isSessionEditable());
  m_pageHelper.resetTestAndMngButton();
}",0.8936170212765957
74886,"/** 
 * Shuts down the Derby database
 */
private void shutDownDatabase(){
  logger.info(""String_Node_Str"" + dbDir);
  try {
    JDBCDriverManager.getInstance().getConnection(SampleDBConstants.DERBY_DRIVER_CLASS,getDBUrl(true),SampleDBConstants.SAMPLE_DB_SCHEMA,""String_Node_Str"");
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"" + e.getLocalizedMessage());
  }
}","/** 
 * Shuts down the Derby database
 */
private void shutDownDatabase(){
  logger.info(""String_Node_Str"" + dbDir);
  try {
    JDBCDriverManager.getInstance().getConnection(SampleDBConstants.DERBY_DRIVER_CLASS,getDBUrl(true),SampleDBConstants.SAMPLE_DB_SCHEMA,""String_Node_Str"",null);
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9934296977660972
74887,"public static Connection getConnection(String driverClassName,String connectionString,String userId,String password) throws SQLException {
  try {
    return JDBCDriverManager.getInstance().getConnection(driverClassName,connectionString,userId,password);
  }
 catch (  Exception e) {
    ExceptionHandler.showException(PlatformUI.getWorkbench().getDisplay().getActiveShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e.getLocalizedMessage(),e);
    return null;
  }
}","public static Connection getConnection(String driverClassName,String connectionString,String userId,String password) throws SQLException {
  try {
    return JDBCDriverManager.getInstance().getConnection(driverClassName,connectionString,userId,password,null);
  }
 catch (  Exception e) {
    ExceptionHandler.showException(PlatformUI.getWorkbench().getDisplay().getActiveShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e.getLocalizedMessage(),e);
    return null;
  }
}",0.9947423764458464
74888,"public void initLayout(ITableContent table){
  this.layout=new TableContentLayout(table,EngineIRConstants.FORMAT_TYPE_VIEWER,context);
  this.layoutEvents=new Stack();
}","public void initLayout(ITableContent table){
  this.layout=new TableContentLayout(table,getOutputFormat(),context);
  this.layoutEvents=new Stack();
}",0.8589341692789969
74889,"/** 
 * Creates the visibility rule( i.e. the hide)
 * @param handle the DE's handle
 * @return the created visibility rule
 */
protected VisibilityRuleDesign createHide(HideRuleHandle handle){
  VisibilityRuleDesign rule=new VisibilityRuleDesign();
  rule.setExpression(createExpression(handle.getExpression()));
  String format=handle.getFormat();
  if (""String_Node_Str"".equalsIgnoreCase(format)) {
    format=EngineIRConstants.FORMAT_TYPE_VIEWER;
  }
  rule.setFormat(format);
  return rule;
}","/** 
 * Creates the visibility rule( i.e. the hide)
 * @param handle the DE's handle
 * @return the created visibility rule
 */
protected VisibilityRuleDesign createHide(HideRuleHandle handle){
  VisibilityRuleDesign rule=new VisibilityRuleDesign();
  rule.setExpression(createExpression(handle.getExpression()));
  String format=handle.getFormat();
  if (""String_Node_Str"".equalsIgnoreCase(format)) {
    format=""String_Node_Str"";
  }
  rule.setFormat(format);
  return rule;
}",0.8512820512820513
74890,"protected void handleCreateElement(ReportRequest request){
  final List list=request.getSelectionObject();
  if (list.size() == 1) {
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        StructuredSelection selection=new StructuredSelection(list);
        viewer.setSelection(selection);
      }
    }
);
  }
}","protected void handleCreateElement(ReportRequest request){
  final List list=request.getSelectionObject();
  if (list.size() == 1) {
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        viewer.refresh();
        StructuredSelection selection=new StructuredSelection(list);
        viewer.setSelection(selection);
      }
    }
);
  }
}",0.963172804532578
74891,"public void run(){
  StructuredSelection selection=new StructuredSelection(list);
  viewer.setSelection(selection);
}","public void run(){
  viewer.refresh();
  StructuredSelection selection=new StructuredSelection(list);
  viewer.setSelection(selection);
}",0.9212598425196852
74892,"public void performRequest(final ReportRequest request){
  if (ReportRequest.SELECTION.equals(request.getType())) {
    handleSelectionChange(request);
  }
  if (ReportRequest.CREATE_ELEMENT.equals(request.getType())) {
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        handleSelectionChange(request);
      }
    }
);
  }
}","public void performRequest(final ReportRequest request){
  if (ReportRequest.SELECTION.equals(request.getType())) {
    handleSelectionChange(request);
  }
  if (ReportRequest.CREATE_ELEMENT.equals(request.getType())) {
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        getTreeViewer().refresh();
        handleSelectionChange(request);
      }
    }
);
  }
}",0.9533954727030626
74893,"public void run(){
  handleSelectionChange(request);
}","public void run(){
  getTreeViewer().refresh();
  handleSelectionChange(request);
}",0.7883211678832117
74894,"public final Object getProperty(String propName){
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",propName));
  if (propName.equals(""String_Node_Str"")) {
    return cm.getTitle().getLabel().getCaption().getValue();
  }
 else   if (propName.equals(""String_Node_Str"")) {
    return new Double(cm.getTitle().getLabel().getCaption().getFont().getRotation());
  }
 else   if (propName.equals(""String_Node_Str"")) {
    return cm.getLegend().getPosition().getName();
  }
 else   if (propName.equals(""String_Node_Str"")) {
    return cm.getLegend().getAnchor().getName();
  }
 else   if (propName.equals(""String_Node_Str"")) {
    return cm.getDimension().getName();
  }
 else   if (propName.equals(""String_Node_Str"")) {
    return new Boolean((cm instanceof ChartWithAxes) ? ((ChartWithAxes)cm).isTransposed() : false);
  }
 else   if (propName.equals(""String_Node_Str"") || propName.equals(""String_Node_Str"")) {
    return cm.getScript();
  }
 else   if (propName.equals(""String_Node_Str"")) {
    return cm;
  }
  return null;
}","public final Object getProperty(String propName){
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",propName));
  if (cm == null) {
    return null;
  }
  if (propName.equals(""String_Node_Str"")) {
    return cm.getTitle().getLabel().getCaption().getValue();
  }
 else   if (propName.equals(""String_Node_Str"")) {
    return new Double(cm.getTitle().getLabel().getCaption().getFont().getRotation());
  }
 else   if (propName.equals(""String_Node_Str"")) {
    return cm.getLegend().getPosition().getName();
  }
 else   if (propName.equals(""String_Node_Str"")) {
    return cm.getLegend().getAnchor().getName();
  }
 else   if (propName.equals(""String_Node_Str"")) {
    return cm.getDimension().getName();
  }
 else   if (propName.equals(""String_Node_Str"")) {
    return new Boolean((cm instanceof ChartWithAxes) ? ((ChartWithAxes)cm).isTransposed() : false);
  }
 else   if (propName.equals(""String_Node_Str"") || propName.equals(""String_Node_Str"")) {
    return cm.getScript();
  }
 else   if (propName.equals(""String_Node_Str"")) {
    return cm;
  }
  return null;
}",0.9806877060763072
74895,"/** 
 * Build the style of cell content.
 */
public void buildCellStyle(ICellContent cell,StringBuffer styleBuffer,boolean isHead){
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    styleBuffer.append(""String_Node_Str"");
  }
  IStyle style=getElementStyle(cell);
  IStyle cellMergedStyle=new CellMergedStyle(cell);
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  if (null != style) {
    AttributeBuilder.buildFont(styleBuffer,style);
  }
  AttributeBuilder.buildFont(styleBuffer,cellMergedStyle);
  if (isHead) {
    String fontWeight=null;
    if (null != style) {
      fontWeight=style.getFontWeight();
    }
    String mergedFontWeight=cellMergedStyle.getFontWeight();
    if (null == fontWeight && null == mergedFontWeight) {
      IStyle cellComputedStyle=cell.getComputedStyle();
      if (null != cellComputedStyle) {
        fontWeight=cellComputedStyle.getFontWeight();
      }
      if (fontWeight == null) {
        fontWeight=""String_Node_Str"";
      }
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(fontWeight);
      styleBuffer.append(""String_Node_Str"");
    }
  }
  if (null != style) {
    AttributeBuilder.buildMargins(styleBuffer,style);
    AttributeBuilder.buildPaddings(styleBuffer,style);
  }
  AttributeBuilder.buildMargins(styleBuffer,cellMergedStyle);
  AttributeBuilder.buildPaddings(styleBuffer,cellMergedStyle);
  buildCellBorder(cell,styleBuffer);
  if (null != style) {
    AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
    AttributeBuilder.buildText(styleBuffer,style);
    AttributeBuilder.buildVisual(styleBuffer,style);
  }
  AttributeBuilder.buildBackground(styleBuffer,cellMergedStyle,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,cellMergedStyle);
  AttributeBuilder.buildVisual(styleBuffer,cellMergedStyle);
}","/** 
 * Build the style of cell content.
 */
public void buildCellStyle(ICellContent cell,StringBuffer styleBuffer,boolean isHead){
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    styleBuffer.append(""String_Node_Str"");
  }
  IStyle style=getElementStyle(cell);
  IStyle cellMergedStyle=new CellMergedStyle(cell);
  if (null != style) {
    CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
    if (IStyle.NONE_VALUE == display) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  if (null != style) {
    AttributeBuilder.buildFont(styleBuffer,style);
  }
  AttributeBuilder.buildFont(styleBuffer,cellMergedStyle);
  if (isHead) {
    String fontWeight=null;
    if (null != style) {
      fontWeight=style.getFontWeight();
    }
    String mergedFontWeight=cellMergedStyle.getFontWeight();
    if (null == fontWeight && null == mergedFontWeight) {
      IStyle cellComputedStyle=cell.getComputedStyle();
      if (null != cellComputedStyle) {
        fontWeight=cellComputedStyle.getFontWeight();
      }
      if (fontWeight == null) {
        fontWeight=""String_Node_Str"";
      }
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(fontWeight);
      styleBuffer.append(""String_Node_Str"");
    }
  }
  if (null != style) {
    AttributeBuilder.buildMargins(styleBuffer,style);
    AttributeBuilder.buildPaddings(styleBuffer,style);
  }
  AttributeBuilder.buildMargins(styleBuffer,cellMergedStyle);
  AttributeBuilder.buildPaddings(styleBuffer,cellMergedStyle);
  buildCellBorder(cell,styleBuffer);
  if (null != style) {
    AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
    AttributeBuilder.buildText(styleBuffer,style);
    AttributeBuilder.buildVisual(styleBuffer,style);
  }
  AttributeBuilder.buildBackground(styleBuffer,cellMergedStyle,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,cellMergedStyle);
  AttributeBuilder.buildVisual(styleBuffer,cellMergedStyle);
}",0.991027941553448
74896,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws IOException, BirtException, DataException {
  boolean doPerfTuning=this.needCachedDataSetToEnhancePerformance(cubeHandle) && (appContext == null || (appContext != null && appContext.get(DataEngine.DATA_SET_CACHE_ROW_LIMIT) == null && appContext.get(DataEngine.MEMORY_DATA_SET_CACHE) == null));
  Map candidateAppContext=new HashMap();
  candidateAppContext.putAll(appContext);
  if (doPerfTuning) {
    candidateAppContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(-1));
  }
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,candidateAppContext);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet())) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hier)) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeHandle,candidateAppContext),this.toStringArray(measureNames),null);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws IOException, BirtException, DataException {
  boolean doPerfTuning=this.needCachedDataSetToEnhancePerformance(cubeHandle) && (appContext == null || (appContext != null && appContext.get(DataEngine.DATA_SET_CACHE_ROW_LIMIT) == null && appContext.get(DataEngine.MEMORY_DATA_SET_CACHE) == null));
  Map candidateAppContext=new HashMap();
  if (appContext != null)   candidateAppContext.putAll(appContext);
  if (doPerfTuning) {
    candidateAppContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(-1));
  }
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,candidateAppContext);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet())) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hier)) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeHandle,candidateAppContext),this.toStringArray(measureNames),null);
}",0.9967556775642624
74897,"/** 
 * Create a cube materializer.
 * @param cubeHandle
 * @return
 * @throws DataException
 * @throws IOException
 * @throws BirtException
 */
private CubeMaterializer createCubeMaterializer(CubeHandle cubeHandle) throws DataException, IOException, BirtException {
  CubeMaterializer cubeMaterializer;
  cubeMaterializer=new CubeMaterializer(this.dataEngine,this.sessionContext.getDataEngineContext().getTmpdir() + this.dataEngine.hashCode(),cubeHandle.getQualifiedName());
  return cubeMaterializer;
}","/** 
 * Create a cube materializer.
 * @param cubeHandle
 * @return
 * @throws DataException
 * @throws IOException
 * @throws BirtException
 */
private CubeMaterializer createCubeMaterializer(CubeHandle cubeHandle,int size) throws DataException, IOException, BirtException {
  CubeMaterializer cubeMaterializer=new CubeMaterializer(this.dataEngine,this.sessionContext.getDataEngineContext().getTmpdir() + this.dataEngine.hashCode(),cubeHandle.getQualifiedName(),size);
  return cubeMaterializer;
}",0.9660678642714572
74898,"/** 
 * @param cubeHandle
 * @param appContext
 * @throws BirtException
 */
private void materializeCube(CubeHandle cubeHandle,Map appContext) throws BirtException {
  int mode=this.sessionContext.getDataEngineContext().getMode();
  try {
    CubeMaterializer cubeMaterializer=null;
    if (appContext == null)     appContext=sessionContext.getAppContext();
    if (mode == DataEngineContext.DIRECT_PRESENTATION) {
      cubeMaterializer=createCubeMaterializer(cubeHandle);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer,appContext);
      cubeMaterializer.close();
    }
 else     if (mode == DataEngineContext.MODE_GENERATION) {
      cubeMaterializer=createCubeMaterializer(cubeHandle);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer,appContext);
      cubeMaterializer.saveCubeToReportDocument(cubeHandle.getQualifiedName(),this.sessionContext.getDocumentWriter(),null);
      cubeMaterializer.close();
    }
  }
 catch (  Exception e) {
    throw new DataException(e.getLocalizedMessage());
  }
}","/** 
 * @param cubeHandle
 * @param appContext
 * @throws BirtException
 */
private void materializeCube(CubeHandle cubeHandle,Map appContext) throws BirtException {
  int mode=this.sessionContext.getDataEngineContext().getMode();
  try {
    CubeMaterializer cubeMaterializer=null;
    if (appContext == null)     appContext=sessionContext.getAppContext();
    if (mode == DataEngineContext.DIRECT_PRESENTATION) {
      int size=0;
      if (appContext != null) {
        Integer value=DataTypeUtil.toInteger(appContext.get(DataEngine.IN_MEMORY_CUBE_SIZE));
        if (value != null && value.intValue() > 0) {
          size=value.intValue();
        }
      }
      cubeMaterializer=createCubeMaterializer(cubeHandle,size);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer,appContext);
      cubeMaterializer.close();
    }
 else     if (mode == DataEngineContext.MODE_GENERATION) {
      cubeMaterializer=createCubeMaterializer(cubeHandle,0);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer,appContext);
      cubeMaterializer.saveCubeToReportDocument(cubeHandle.getQualifiedName(),this.sessionContext.getDocumentWriter(),null);
      cubeMaterializer.close();
    }
  }
 catch (  Exception e) {
    throw new DataException(e.getLocalizedMessage());
  }
}",0.8903225806451613
74899,"protected void setUp() throws Exception {
  super.setUp();
  String[] pictures=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String pkg=""String_Node_Str"";
  for (int i=0; i < pictures.length; i++) {
    String file=pictures[i];
    copyResource(pkg + file,pictureFolder + file);
  }
}","protected void setUp() throws Exception {
  if (isOnWindows()) {
    super.setUp();
    String[] pictures=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String pkg=""String_Node_Str"";
    for (int i=0; i < pictures.length; i++) {
      String file=pictures[i];
      copyResource(pkg + file,pictureFolder + file);
    }
  }
}",0.9465449804432856
74900,"protected void tearDown() throws Exception {
  removeFile(new File(pictureFolder));
  super.tearDown();
}","protected void tearDown() throws Exception {
  if (isOnWindows()) {
    removeFile(new File(pictureFolder));
    super.tearDown();
  }
}",0.8713692946058091
74901,"/** 
 * Test if text with underline, line-through or overline, uri images(bmp,gif,jpg,png,tif),url images(gif), embeded images(bmp,gif,jpg,png,tif), and report design with page breaks can be correctly rendered. <br> <br> The result PS files have same names as the respective report design, and are put in folder named ""testresult"" under current working folder. For Eclipse, the current working folder is normally the folder where Eclipse is installed. <br> <b>To check the results, every result files should be checked manually.</b>
 * @throws Exception 
 */
public void testRenderReport() throws Exception {
  String thePackage=""String_Node_Str"";
  String[] designs=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String suffix=""String_Node_Str"";
  HTMLRenderOption options=new HTMLRenderOption();
  options.setOutputFormat(""String_Node_Str"");
  String resultFolder=""String_Node_Str"";
  for (int i=0; i < designs.length; i++) {
    if (""String_Node_Str"".equals(designs[i]) && !isOnWindows()) {
      continue;
    }
    options.setOutputFileName(resultFolder + designs[i] + ""String_Node_Str"");
    String design=thePackage + designs[i] + suffix;
    IRunAndRenderTask runAndRenderTask=createRunAndRenderTask(design);
    runAndRenderTask.setRenderOption(options);
    runAndRenderTask.run();
    runAndRenderTask.close();
  }
  System.out.println(""String_Node_Str"" + new File(resultFolder).getAbsolutePath());
  tearDown();
}","/** 
 * Test if text with underline, line-through or overline, uri images(bmp,gif,jpg,png,tif),url images(gif), embeded images(bmp,gif,jpg,png,tif), and report design with page breaks can be correctly rendered. <br> <br> The result PS files have same names as the respective report design, and are put in folder named ""testresult"" under current working folder. For Eclipse, the current working folder is normally the folder where Eclipse is installed. <br> <b>To check the results, every result files should be checked manually.</b>
 * @throws Exception 
 */
public void testRenderReport() throws Exception {
  if (isOnWindows()) {
    String thePackage=""String_Node_Str"";
    String[] designs=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String suffix=""String_Node_Str"";
    HTMLRenderOption options=new HTMLRenderOption();
    options.setOutputFormat(""String_Node_Str"");
    String resultFolder=""String_Node_Str"";
    for (int i=0; i < designs.length; i++) {
      options.setOutputFileName(resultFolder + designs[i] + ""String_Node_Str"");
      String design=thePackage + designs[i] + suffix;
      IRunAndRenderTask runAndRenderTask=createRunAndRenderTask(design);
      runAndRenderTask.setRenderOption(options);
      runAndRenderTask.run();
      runAndRenderTask.close();
    }
    System.out.println(""String_Node_Str"" + new File(resultFolder).getAbsolutePath());
  }
}",0.915032679738562
74902,"public static String getPattern(Object data,String val){
  if (val != null && data instanceof java.util.Date) {
    if (val.indexOf(""String_Node_Str"") >= 0) {
      return ""String_Node_Str"";
    }
 else     if (val.startsWith(""String_Node_Str"")) {
      return ""String_Node_Str"";
    }
 else     if (!val.startsWith(""String_Node_Str"") && val.indexOf(""String_Node_Str"") >= 0) {
      return ""String_Node_Str"";
    }
    return new DateFormatter(val).getPattern();
  }
 else   if (val == null && data instanceof java.util.Date) {
    return ""String_Node_Str"";
  }
 else   if (val != null && data instanceof java.lang.Number) {
    return new NumberFormatter(val).getPattern();
  }
 else   if (val == null && data instanceof java.lang.Number) {
    return null;
  }
 else   if (val != null && data instanceof java.lang.String) {
    return new StringFormatter(val).getPattern();
  }
 else   if (val == null && data instanceof java.lang.String) {
    return null;
  }
  return null;
}","public static String getPattern(Object data,String val){
  if (val != null && data instanceof Date) {
    if (val.indexOf(""String_Node_Str"") >= 0) {
      return ""String_Node_Str"";
    }
 else     if (val.startsWith(""String_Node_Str"")) {
      return ""String_Node_Str"";
    }
 else     if (!val.startsWith(""String_Node_Str"") && val.indexOf(""String_Node_Str"") >= 0) {
      return ""String_Node_Str"";
    }
    return new DateFormatter(val).getPattern();
  }
 else   if (val == null && data instanceof Time) {
    return ""String_Node_Str"";
  }
 else   if (val == null && data instanceof java.sql.Date) {
    return ""String_Node_Str"";
  }
 else   if (val == null && data instanceof java.util.Date) {
    return ""String_Node_Str"";
  }
 else   if (val != null && data instanceof Number) {
    return new NumberFormatter(val).getPattern();
  }
 else   if (val != null && data instanceof String) {
    return new StringFormatter(val).getPattern();
  }
  return null;
}",0.7305512622359609
74903,"public void writeText(Object d){
  writer.openTag(""String_Node_Str"");
  if (d instanceof Data) {
    if (((Data)d).getDatatype().equals(Data.NUMBER)) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (((Data)d).getDatatype().equals(Data.DATE)) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
    writer.text(((Data)d).txt.toString());
  }
 else {
    writer.text(d.toString());
  }
  writer.closeTag(""String_Node_Str"");
}","public void writeText(Object d){
  writer.openTag(""String_Node_Str"");
  if (d instanceof Data) {
    if (((Data)d).getDatatype().equals(Data.NUMBER)) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (((Data)d).getDatatype().equals(Data.DATE)) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
    writer.text(((Data)d).txt.toString());
  }
 else {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.text(d.toString());
  }
  writer.closeTag(""String_Node_Str"");
}",0.9490060501296456
74904,"public Data createData(Object txt,StyleEntry entry){
  if (txt instanceof IDataContent) {
    IDataContent dataContent=(IDataContent)txt;
    Object value=dataContent.getValue();
    if (value instanceof Number) {
      String format=ExcelUtil.getPattern(value,entry.getProperty(StyleConstant.NUMBER_FORMAT_PROP));
      entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,format);
      entry.setDatatype(Data.NUMBER);
      Data data=new Data(value,entry);
      data.setDatatype(Data.NUMBER);
      return data;
    }
 else     if (value instanceof Date) {
      String format=ExcelUtil.getPattern(value,entry.getProperty(StyleConstant.DATE_FORMAT_PROP));
      entry.setProperty(StyleConstant.DATE_FORMAT_PROP,format);
      entry.setDatatype(Data.DATE);
      Data data=new Data(value,entry);
      data.setDatatype(Data.DATE);
      return data;
    }
    Data data1=new Data(dataContent.getText().trim(),entry);
    data1.setDatatype(Data.STRING);
    return data1;
  }
  Data data1=new Data(txt,entry);
  data1.setDatatype(Data.STRING);
  return data1;
}","public Data createData(Object txt,StyleEntry entry){
  if (txt instanceof IDataContent) {
    IDataContent dataContent=(IDataContent)txt;
    Object value=dataContent.getValue();
    if (value instanceof Number) {
      String format=ExcelUtil.getPattern(value,entry.getProperty(StyleConstant.NUMBER_FORMAT_PROP));
      entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,format);
      entry.setDatatype(Data.NUMBER);
      Data data=new Data(value,entry);
      data.setDatatype(Data.NUMBER);
      return data;
    }
 else     if (value instanceof Date) {
      String format=ExcelUtil.getPattern(value,entry.getProperty(StyleConstant.DATE_FORMAT_PROP));
      entry.setProperty(StyleConstant.DATE_FORMAT_PROP,format);
      entry.setDatatype(Data.DATE);
      Data data=new Data(ExcelUtil.formatDate(value),entry);
      data.setDatatype(Data.DATE);
      return data;
    }
    Data data1=new Data(dataContent.getText().trim(),entry);
    data1.setDatatype(Data.STRING);
    return data1;
  }
  Data data1=new Data(txt,entry);
  data1.setDatatype(Data.STRING);
  return data1;
}",0.9897388059701492
74905,"/** 
 * @param selectValueExpression
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
public static List getSelectValueList(String expression,DataSetHandle dataSetHandle) throws BirtException {
  ParamBindingHandle[] bindingParams=null;
  List selectValueList=new ArrayList();
  if (expression != null && expression.trim().length() > 0) {
    QueryDefinition query=new QueryDefinition();
    query.setDataSetName(dataSetHandle.getQualifiedName());
    PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
    if (handle != null) {
      Iterator paramIter=handle.iterator();
      while (paramIter.hasNext()) {
        DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
        if (paramDefn.isInput()) {
          String defaultValue=null;
          if (paramDefn instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)paramDefn).getParamName() != null)           defaultValue=ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)paramDefn).getParamName());
 else           defaultValue=paramDefn.getDefaultValue();
          if (defaultValue != null) {
            InputParameterBinding binding=new InputParameterBinding(paramDefn.getName(),new ScriptExpression(defaultValue));
            query.addInputParamBinding(binding);
          }
        }
      }
    }
    IBaseExpression bindingExprGroup=new ScriptExpression(ExpressionUtility.getReplacedColRefExpr(expression));
    GroupDefinition groupDefn=new GroupDefinition(BINDING_GROUP_NAME);
    groupDefn.setKeyExpression(BINDING_GROUP_EXPRESSION);
    query.addBinding(new Binding(BINDING_ROW_NAME,bindingExprGroup));
    query.addGroup(groupDefn);
    query.setUsesDetails(false);
    IPreparedQuery preparedQuery=DataSetProvider.getCurrentInstance().prepareQuery(dataSetHandle,(IQueryDefinition)query,true,false);
    IQueryResults results=preparedQuery.execute(null);
    if (results != null) {
      IResultIterator iter=null;
      iter=results.getResultIterator();
      if (iter != null) {
        while (iter.next()) {
          Object candiateValue=iter.getValue(BINDING_ROW_NAME);
          if (candiateValue != null) {
            selectValueList.add(candiateValue);
          }
          iter.skipToEnd(1);
        }
      }
      results.close();
    }
  }
  return selectValueList;
}","/** 
 * @param selectValueExpression
 * @param dataSetHandle
 * @return
 * @throws BirtException
 */
public static List getSelectValueList(String expression,DataSetHandle dataSetHandle) throws BirtException {
  List selectValueList=new ArrayList();
  if (expression != null && expression.trim().length() > 0) {
    QueryDefinition query=new QueryDefinition();
    query.setDataSetName(dataSetHandle.getQualifiedName());
    PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
    if (handle != null) {
      Iterator paramIter=handle.iterator();
      while (paramIter.hasNext()) {
        DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
        if (paramDefn.isInput()) {
          String defaultValue=null;
          if (paramDefn instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)paramDefn).getParamName() != null)           defaultValue=ExpressionUtil.createJSParameterExpression(((OdaDataSetParameterHandle)paramDefn).getParamName());
 else           defaultValue=paramDefn.getDefaultValue();
          if (defaultValue != null) {
            InputParameterBinding binding=new InputParameterBinding(paramDefn.getName(),new ScriptExpression(defaultValue));
            query.addInputParamBinding(binding);
          }
        }
      }
    }
    IBaseExpression bindingExprGroup=new ScriptExpression(ExpressionUtility.getReplacedColRefExpr(expression));
    GroupDefinition groupDefn=new GroupDefinition(BINDING_GROUP_NAME);
    groupDefn.setKeyExpression(BINDING_GROUP_EXPRESSION);
    query.addBinding(new Binding(BINDING_ROW_NAME,bindingExprGroup));
    query.addGroup(groupDefn);
    query.setUsesDetails(false);
    DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSetHandle == null ? null : dataSetHandle.getModuleHandle()));
    if (dataSetHandle != null) {
      if (dataSetHandle.getDataSource() != null)       session.defineDataSource(session.getModelAdaptor().adaptDataSource(dataSetHandle.getDataSource()));
      session.defineDataSet(session.getModelAdaptor().adaptDataSet(dataSetHandle));
    }
    IPreparedQuery preparedQuery=session.prepare(query);
    IQueryResults results=preparedQuery.execute(null);
    if (results != null) {
      IResultIterator iter=null;
      iter=results.getResultIterator();
      if (iter != null) {
        while (iter.next()) {
          Object candiateValue=iter.getValue(BINDING_ROW_NAME);
          if (candiateValue != null) {
            selectValueList.add(candiateValue);
          }
          iter.skipToEnd(1);
        }
      }
      results.close();
    }
  }
  return selectValueList;
}",0.8764798737174427
74906,"public void testParser() throws Exception {
  StringFormatter sampleStr=new StringFormatter();
  assertEquals(""String_Node_Str"",sampleStr.getPattern());
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  try {
    assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
    assert(false);
  }
 catch (  ParseException ex) {
    assert(true);
  }
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  try {
    assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
    assert(false);
  }
 catch (  ParseException ex) {
    assert(true);
  }
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
}","public void testParser() throws Exception {
  StringFormatter sampleStr=new StringFormatter();
  assertEquals(""String_Node_Str"",sampleStr.getPattern());
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  try {
    assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
    assert(false);
  }
 catch (  ParseException ex) {
    assert(true);
  }
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  try {
    assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
    assert(false);
  }
 catch (  ParseException ex) {
    assert(true);
  }
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.parser(""String_Node_Str""));
}",0.9645476772616136
74907,"public void testFormat(){
  StringFormatter sampleStr=new StringFormatter();
  assertEquals(""String_Node_Str"",sampleStr.getPattern());
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.getPattern());
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
}","public void testFormat(){
  StringFormatter sampleStr=new StringFormatter();
  assertEquals(""String_Node_Str"",sampleStr.getPattern());
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.getPattern());
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
  sampleStr.applyPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",sampleStr.format(""String_Node_Str""));
}",0.9074507183428
74908,"/** 
 * Parses the input string into a unformatted string type.
 * @param str the input string to parse
 * @return the string
 * @throws ParseException if the specified string cannot be parsed according to specified pattern.
 */
public String parser(String str) throws ParseException {
  if (formatPattern == null || ""String_Node_Str"".equals(formatPattern) || formatPattern.indexOf(""String_Node_Str"") > -1 || formatPattern.indexOf(""String_Node_Str"") > -1) {
    return str;
  }
  StringBuffer orig=new StringBuffer(str);
  StringBuffer fstr=new StringBuffer(""String_Node_Str"");
  StringBuffer ret=new StringBuffer(""String_Node_Str"");
  for (int i=0; i < formatPattern.length(); i++) {
    if (formatPattern.charAt(i) != '!' && formatPattern.charAt(i) != '>' && formatPattern.charAt(i) != '<') {
      fstr.append(formatPattern.charAt(i));
    }
  }
  char fc=' ';
  int lenPattern=fstr.length();
  int lenFormatStr=orig.length();
  if (lenPattern > lenFormatStr) {
    if (dir) {
      for (int k=lenFormatStr; k < lenPattern; k++) {
        if (fstr.charAt(k) != '&') {
          throw new ParseException(""String_Node_Str"" + orig.toString() + ""String_Node_Str"",k);
        }
        orig.append(""String_Node_Str"");
      }
    }
 else {
      for (int k=0; k < lenPattern - lenFormatStr; k++) {
        if (fstr.charAt(lenPattern - lenFormatStr - k- 1) != '&') {
          throw new ParseException(""String_Node_Str"" + orig.toString() + ""String_Node_Str"",0);
        }
        orig.insert(0,""String_Node_Str"");
      }
    }
  }
 else   if (lenPattern < lenFormatStr) {
    if (dir) {
      for (int k=lenPattern; k < lenFormatStr; k++) {
        fstr.append('&');
      }
    }
 else {
      for (int k=lenPattern; k < lenFormatStr; k++) {
        fstr.insert(0,'&');
      }
    }
  }
  int index=0;
  int count=lenPattern > lenFormatStr ? lenPattern : lenFormatStr;
  for (int i=0; i < count; i++) {
    fc=fstr.charAt(i);
switch (fc) {
case ('@'):
      if (orig.charAt(index) != ' ') {
        ret.append(orig.charAt(index));
      }
    index++;
  break;
case ('&'):
ret.append(orig.charAt(index));
index++;
break;
case ('<'):
case ('>'):
return str;
default :
if (orig.charAt(index) != fstr.charAt(i)) {
throw new ParseException(""String_Node_Str"" + orig.toString() + ""String_Node_Str"",index);
}
index++;
break;
}
}
return ret.toString();
}","/** 
 * Parses the input string into a unformatted string type.
 * @param str the input string to parse
 * @return the string
 * @throws ParseException if the specified string cannot be parsed according to specified pattern.
 */
public String parser(String str) throws ParseException {
  if (formatPattern == null || ""String_Node_Str"".equals(formatPattern) || formatPattern.indexOf(""String_Node_Str"") > -1 || formatPattern.indexOf(""String_Node_Str"") > -1) {
    return str;
  }
  StringBuffer orig=new StringBuffer(str);
  StringBuffer fstr=new StringBuffer(""String_Node_Str"");
  StringBuffer ret=new StringBuffer(""String_Node_Str"");
  for (int i=0; i < formatPattern.length(); i++) {
    if (formatPattern.charAt(i) != '!' && formatPattern.charAt(i) != '>' && formatPattern.charAt(i) != '<' && formatPattern.charAt(i) != '^') {
      fstr.append(formatPattern.charAt(i));
    }
  }
  char fc=' ';
  int lenPattern=fstr.length();
  int lenFormatStr=orig.length();
  if (lenPattern > lenFormatStr) {
    if (dir) {
      for (int k=lenFormatStr; k < lenPattern; k++) {
        if (fstr.charAt(k) != '&') {
          throw new ParseException(""String_Node_Str"" + orig.toString() + ""String_Node_Str"",k);
        }
        orig.append(""String_Node_Str"");
      }
    }
 else {
      for (int k=0; k < lenPattern - lenFormatStr; k++) {
        if (fstr.charAt(lenPattern - lenFormatStr - k- 1) != '&') {
          throw new ParseException(""String_Node_Str"" + orig.toString() + ""String_Node_Str"",0);
        }
        orig.insert(0,""String_Node_Str"");
      }
    }
  }
 else   if (lenPattern < lenFormatStr) {
    if (dir) {
      for (int k=lenPattern; k < lenFormatStr; k++) {
        fstr.append('&');
      }
    }
 else {
      for (int k=lenPattern; k < lenFormatStr; k++) {
        fstr.insert(0,'&');
      }
    }
  }
  int index=0;
  int count=lenPattern > lenFormatStr ? lenPattern : lenFormatStr;
  for (int i=0; i < count; i++) {
    fc=fstr.charAt(i);
switch (fc) {
case ('@'):
      if (orig.charAt(index) != ' ') {
        ret.append(orig.charAt(index));
      }
    index++;
  break;
case ('&'):
ret.append(orig.charAt(index));
index++;
break;
case ('<'):
case ('>'):
return str;
default :
if (orig.charAt(index) != fstr.charAt(i)) {
throw new ParseException(""String_Node_Str"" + orig.toString() + ""String_Node_Str"",index);
}
index++;
break;
}
}
return ret.toString();
}",0.9928057553956836
74909,"/** 
 * returns the formated string for the string parameter.  <li>'@' - character or space  <li>'&' - character or empty  <li> '&lt;' - tolower  <li> '>' - toupper  <li>'!' - left to right
 * @param str format string
 */
public String format(String str){
  if (trim && str != null) {
    str=str.trim();
  }
  if (formatPattern.equals(""String_Node_Str""))   return str;
  int len=str.length();
  int col=natt + nand;
  int ext=0;
  StringBuffer orig=new StringBuffer(str);
  StringBuffer fstr=new StringBuffer(this.formatPattern);
  StringBuffer ret=new StringBuffer(""String_Node_Str"");
  int i=0;
  int pos=0;
  int len2=0;
  char fc=' ';
  String sc=null;
  if (!dir) {
    if (len > col) {
      ret.append(handleCase(orig.substring(0,len - col),chcase));
      pos=len - col;
      len=col;
    }
    ext=col - len;
  }
  len2=this.formatPattern.length();
  for (i=0; i < len2; i++) {
    fc=fstr.charAt(i);
switch (fc) {
case ('@'):
case ('&'):
      if (ext > 0 || len == 0) {
        if (fc == '@')         ret.append(' ');
        ext--;
      }
 else {
        sc=orig.substring(pos,pos + 1);
        ret.append(handleCase(sc,chcase));
        pos++;
        len--;
      }
    break;
case ('<'):
case ('>'):
case ('!'):
  break;
default :
ret.append(fc);
break;
}
}
while (--len >= 0) {
sc=orig.substring(pos,pos + 1);
ret.append(handleCase(sc,chcase));
pos++;
}
return ret.toString();
}","/** 
 * returns the formated string for the string parameter.  <li>'@' - character or space  <li>'&' - character or empty  <li> '&lt;' - tolower  <li> '>' - toupper  <li>'!' - left to right
 * @param str format string
 */
public String format(String str){
  if (trim && str != null) {
    str=str.trim();
  }
  if (formatPattern.equals(""String_Node_Str""))   return str;
  int len=str.length();
  int col=natt + nand;
  int ext=0;
  StringBuffer orig=new StringBuffer(str);
  StringBuffer fstr=new StringBuffer(this.formatPattern);
  StringBuffer ret=new StringBuffer(""String_Node_Str"");
  int i=0;
  int pos=0;
  int len2=0;
  char fc=' ';
  String sc=null;
  if (!dir) {
    if (len > col) {
      ret.append(handleCase(orig.substring(0,len - col),chcase));
      pos=len - col;
      len=col;
    }
    ext=col - len;
  }
  len2=this.formatPattern.length();
  for (i=0; i < len2; i++) {
    fc=fstr.charAt(i);
switch (fc) {
case ('@'):
case ('&'):
      if (ext > 0 || len == 0) {
        if (fc == '@')         ret.append(' ');
        ext--;
      }
 else {
        sc=orig.substring(pos,pos + 1);
        ret.append(handleCase(sc,chcase));
        pos++;
        len--;
      }
    break;
case ('<'):
case ('>'):
case ('!'):
case ('^'):
  break;
default :
ret.append(fc);
break;
}
}
while (--len >= 0) {
sc=orig.substring(pos,pos + 1);
ret.append(handleCase(sc,chcase));
pos++;
}
return ret.toString();
}",0.9957234497505346
74910,"/** 
 * @param format the format pattern
 */
public void applyPattern(String format){
  init();
  if (format == null) {
    return;
  }
  char c=' ';
  StringBuffer scan=new StringBuffer(format);
  int len=scan.length();
  for (int i=0; i < len; i++) {
    c=scan.charAt(i);
switch (c) {
case ('@'):
      natt++;
    break;
case ('&'):
  nand++;
break;
case ('<'):
case ('>'):
chcase=c;
break;
case ('!'):
dir=true;
break;
}
}
if (""String_Node_Str"".equalsIgnoreCase(format)) {
applyPattern(""String_Node_Str"");
return;
}
if (""String_Node_Str"".equalsIgnoreCase(format)) {
applyPattern(""String_Node_Str"");
return;
}
if (""String_Node_Str"".equalsIgnoreCase(format)) {
applyPattern(""String_Node_Str"");
return;
}
formatPattern=format;
}","/** 
 * @param format the format pattern
 */
public void applyPattern(String format){
  init();
  if (format == null) {
    return;
  }
  char c=' ';
  StringBuffer scan=new StringBuffer(format);
  int len=scan.length();
  for (int i=0; i < len; i++) {
    c=scan.charAt(i);
switch (c) {
case ('@'):
      natt++;
    break;
case ('&'):
  nand++;
break;
case ('<'):
case ('>'):
chcase=c;
break;
case ('!'):
dir=true;
break;
case ('^'):
trim=false;
break;
}
}
if (""String_Node_Str"".equalsIgnoreCase(format)) {
applyPattern(""String_Node_Str"");
return;
}
if (""String_Node_Str"".equalsIgnoreCase(format)) {
applyPattern(""String_Node_Str"");
return;
}
if (""String_Node_Str"".equalsIgnoreCase(format)) {
applyPattern(""String_Node_Str"");
return;
}
formatPattern=format;
}",0.9792085848423876
74911,"public void setAppContext(Object context) throws OdaException {
}","public void setAppContext(Object context) throws OdaException {
  if (context instanceof Map)   this.appContext=(Map)context;
}",0.6770833333333334
74912,"/** 
 * Look for the Driver from drivers directory if it not in plugin class path
 * @param className
 * @return Driver instance
 * @throws JDBCException
 */
private Driver findDriver(String className) throws JDBCException {
  Class driverClass=null;
  boolean driverInClassPath=false;
  try {
    driverClass=Class.forName(className);
    logger.info(""String_Node_Str"" + className);
    driverInClassPath=true;
  }
 catch (  ClassNotFoundException e) {
    if (logger.isLoggable(Level.FINE)) {
      logger.info(""String_Node_Str"" + className + ""String_Node_Str"");
    }
    driverClass=loadExtraDriver(className,true);
    if (driverClass == null) {
      logger.warning(""String_Node_Str"" + className);
      throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
    }
  }
  Driver driver=null;
  try {
    driver=(Driver)driverClass.newInstance();
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + className,e);
    throw new JDBCException(ResourceConstants.CANNOT_INSTANTIATE_DRIVER,null,className);
  }
  return driver;
}","/** 
 * Look for the Driver from drivers directory if it not in plugin class path
 * @param className
 * @return Driver instance
 * @throws OdaException 
 */
private Driver findDriver(String className,String driverClassPath) throws OdaException {
  Class driverClass=null;
  try {
    driverClass=Class.forName(className);
    logger.info(""String_Node_Str"" + className);
  }
 catch (  ClassNotFoundException e) {
    if (logger.isLoggable(Level.FINE)) {
      logger.info(""String_Node_Str"" + className + ""String_Node_Str"");
    }
    driverClass=loadExtraDriver(className,true,driverClassPath);
    if (driverClass == null) {
      logger.warning(""String_Node_Str"" + className);
      throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
    }
  }
  Driver driver=null;
  try {
    driver=(Driver)driverClass.newInstance();
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + className,e);
    throw new JDBCException(ResourceConstants.CANNOT_INSTANTIATE_DRIVER,null,className);
  }
  return driver;
}",0.9431658055425082
74913,"/** 
 * Deregister the driver by the given class name from DriverManager
 * @param className
 * @return true if deregister the driver successfully
 * @throws OdaException
 */
public boolean deregisterDriver(String className) throws OdaException {
  if (className == null || className.length() == 0)   return false;
  if (isDeregistered(className)) {
    return true;
  }
  Driver driver=findDriver(className);
  if (driver != null) {
    try {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + className);
      if (registeredDrivers.containsKey(className)) {
        DriverManager.deregisterDriver(new WrappedDriver(driver,className));
        registeredDrivers.remove(className);
      }
      registeredDrivers.put(className,DRIVER_DEREGISTERED);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  return true;
}","/** 
 * Deregister the driver by the given class name from DriverManager
 * @param className
 * @return true if deregister the driver successfully
 * @throws OdaException
 */
public boolean deregisterDriver(String className) throws OdaException {
  if (className == null || className.length() == 0)   return false;
  if (isDeregistered(className)) {
    return true;
  }
  Driver driver=findDriver(className,null);
  if (driver != null) {
    try {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + className);
      if (registeredDrivers.containsKey(className)) {
        DriverManager.deregisterDriver(new WrappedDriver(driver,className));
        registeredDrivers.remove(className);
      }
      registeredDrivers.put(className,DRIVER_DEREGISTERED);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  return true;
}",0.9972175848636616
74914,"/** 
 * Search driver in the ""drivers"" directory and load it if found
 * @param className
 * @return
 * @throws DriverException
 * @throws OdaException
 */
private Class loadExtraDriver(String className,boolean refreshUrlsWhenFail){
}","/** 
 * Search driver in the ""drivers"" directory and load it if found
 * @param className
 * @return
 * @throws OdaException 
 * @throws DriverException
 * @throws OdaException
 */
private Class loadExtraDriver(String className,boolean refreshUrlsWhenFail,String driverClassPath) throws OdaException {
}",0.8715083798882681
74915,"/** 
 * Refresh the URL list of DriverClassLoader
 * @return if the refreshURL is different than the former one then return true otherwisereturn false
 */
public boolean refreshURLs(){
  if (bundle == null)   return false;
  boolean foundNew=false;
  Enumeration files=bundle.getEntryPaths(OdaJdbcDriver.Constants.DRIVER_DIRECTORY);
  while (files.hasMoreElements()) {
    String fileName=(String)files.nextElement();
    if (OdaJdbcDriver.isDriverFile(fileName)) {
      if (!fileSet.contains(fileName)) {
        foundNew=true;
        fileSet.add(fileName);
        URL fileURL=bundle.getEntry(fileName);
        addURL(fileURL);
        logger.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ fileURL);
      }
    }
  }
  return foundNew;
}","/** 
 * Refresh the URL list of DriverClassLoader
 * @return if the refreshURL is different than the former one then return true otherwisereturn false
 * @throws OdaException 
 */
public boolean refreshURLs() throws OdaException {
  if (bundle == null)   return false;
  boolean foundNew=false;
  if (driverClassPath != null) {
    try {
      File driverClassFile=new File(driverClassPath);
      if (driverClassFile.exists()) {
        this.addURL(driverClassFile.toURL());
        if (driverClassFile.isDirectory()) {
          File[] driverFiles=driverClassFile.listFiles(new FileFilter(){
            public boolean accept(            File pathname){
              if (pathname.isFile() && OdaJdbcDriver.isDriverFile(pathname.getName())) {
                return true;
              }
              return false;
            }
          }
);
          for (int i=0; i < driverFiles.length; i++) {
            if (!fileSet.contains(driverFiles[i].getName())) {
              foundNew=true;
              fileSet.add(driverFiles[i].getName());
              addURL(driverFiles[i].toURL());
              logger.info(""String_Node_Str"" + driverFiles[i].getName() + ""String_Node_Str""+ driverFiles[i].toURL());
            }
          }
        }
      }
    }
 catch (    MalformedURLException e) {
      throw new OdaException(e);
    }
  }
  Enumeration files=bundle.getEntryPaths(OdaJdbcDriver.Constants.DRIVER_DIRECTORY);
  while (files.hasMoreElements()) {
    String fileName=(String)files.nextElement();
    if (OdaJdbcDriver.isDriverFile(fileName)) {
      if (!fileSet.contains(fileName)) {
        foundNew=true;
        fileSet.add(fileName);
        URL fileURL=bundle.getEntry(fileName);
        addURL(fileURL);
        logger.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ fileURL);
      }
    }
  }
  return foundNew;
}",0.5788053949903661
74916,"/** 
 * Gets a JDBC connection from the specified JNDI data source URL, or if not available, directly from the specified driver and JDBC driver url.
 * @param driverClass   the class name of JDBC driver
 * @param url           JDBC connection URL
 * @param jndiNameUrl   the JNDI name to look up a Data Source name service; may be null or empty
 * @param connectionProperties  properties for establising connection
 * @return              a JDBC connection
 * @throws SQLException
 * @throws OdaException
 */
public Connection getConnection(String driverClass,String url,String jndiNameUrl,Properties connectionProperties) throws SQLException, OdaException {
  validateConnectionUrl(url);
  if (logger.isLoggable(Level.FINE))   logger.fine(""String_Node_Str"" + driverClass + ""String_Node_Str""+ url+ ""String_Node_Str""+ jndiNameUrl);
  return doConnect(driverClass,url,jndiNameUrl,connectionProperties);
}","/** 
 * Gets a JDBC connection from the specified JNDI data source URL, or if not available, directly from the specified driver and JDBC driver url.
 * @param driverClass   the class name of JDBC driver
 * @param url           JDBC connection URL
 * @param jndiNameUrl   the JNDI name to look up a Data Source name service; may be null or empty
 * @param connectionProperties  properties for establising connection
 * @return              a JDBC connection
 * @throws SQLException
 * @throws OdaException
 */
public Connection getConnection(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,String driverClassPath) throws SQLException, OdaException {
  validateConnectionUrl(url);
  if (logger.isLoggable(Level.FINE))   logger.fine(""String_Node_Str"" + driverClass + ""String_Node_Str""+ url+ ""String_Node_Str""+ jndiNameUrl);
  return doConnect(driverClass,url,jndiNameUrl,connectionProperties,driverClassPath);
}",0.9788388497015736
74917,"/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private synchronized Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties) throws SQLException, OdaException {
  assert(url != null);
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ url);
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  loadAndRegisterDriver(driverClass);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + url);
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  RuntimeException e) {
    throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,e.getMessage());
  }
}","/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private synchronized Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,String driverClassPath) throws SQLException, OdaException {
  assert(url != null);
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ url);
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + url);
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  RuntimeException e) {
    throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,e.getMessage());
  }
}",0.9825970548862116
74918,"/** 
 * Try to create a connection based on given connection properties.
 * @param driverClassName
 * @param connectionString
 * @param userId
 * @param password
 * @throws SQLException
 * @throws OdaException
 */
private void tryCreateConnection(String driverClassName,String connectionString,String userId,String password) throws SQLException, OdaException {
  Connection testConn=this.getConnection(driverClassName,connectionString,userId,password);
  assert(testConn != null);
  closeConnection(testConn);
}","/** 
 * Try to create a connection based on given connection properties.
 * @param driverClassName
 * @param connectionString
 * @param userId
 * @param password
 * @throws SQLException
 * @throws OdaException
 */
private void tryCreateConnection(String driverClassName,String connectionString,String userId,String password) throws SQLException, OdaException {
  Connection testConn=this.getConnection(driverClassName,connectionString,userId,password,null);
  assert(testConn != null);
  closeConnection(testConn);
}",0.9951314508276532
74919,"/** 
 * Tests whether the given connection properties can be used to obtain a connection.
 * @param driverClassName the name of driver class
 * @param connectionString the JDBC driver connection URL
 * @param jndiNameUrl   the JNDI name to look up a Data Source name service; may be null or empty
 * @param userId        the login user id
 * @param password      the login password
 * @return  true if the the specified properties are valid to obtain a connection;false otherwise
 * @throws OdaException 
 */
public boolean testConnection(String driverClassName,String connectionString,String jndiNameUrl,String userId,String password) throws OdaException {
  boolean canConnect=false;
  try {
    if (getDriverConnectionFactory(driverClassName) != null) {
      tryCreateConnection(driverClassName,connectionString,userId,password);
      return true;
    }
    if (jndiNameUrl != null) {
      Connection jndiDSConnection=getJndiDSConnection(driverClassName,jndiNameUrl,addUserAuthenticationProperties(null,userId,password));
      if (jndiDSConnection != null) {
        closeConnection(jndiDSConnection);
        return true;
      }
    }
    loadAndRegisterDriver(driverClassName);
    if (cachedDriversMap.get(driverClassName) == null) {
      Enumeration enumeration=DriverManager.getDrivers();
      while (enumeration.hasMoreElements()) {
        Driver driver=(Driver)enumeration.nextElement();
        if (isExpectedDriver(driver,driverClassName)) {
          if (driver.acceptsURL(connectionString)) {
            cachedDriversMap.put(driverClassName,driver);
            tryCreateConnection(driverClassName,connectionString,userId,password);
            canConnect=true;
            break;
          }
        }
      }
      if (!canConnect)       throw new JDBCException(ResourceConstants.CANNOT_PARSE_URL,null);
    }
 else {
      if (((Driver)this.cachedDriversMap.get(driverClassName)).acceptsURL(connectionString)) {
        tryCreateConnection(driverClassName,connectionString,userId,password);
        canConnect=true;
      }
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e.getLocalizedMessage(),null);
  }
  if (canConnect == false)   throw new JDBCException(ResourceConstants.NO_SUITABLE_DRIVER,null);
  return true;
}","/** 
 * Tests whether the given connection properties can be used to obtain a connection.
 * @param driverClassName the name of driver class
 * @param connectionString the JDBC driver connection URL
 * @param jndiNameUrl   the JNDI name to look up a Data Source name service; may be null or empty
 * @param userId        the login user id
 * @param password      the login password
 * @return  true if the the specified properties are valid to obtain a connection;false otherwise
 * @throws OdaException 
 */
public boolean testConnection(String driverClassName,String connectionString,String jndiNameUrl,String userId,String password) throws OdaException {
  boolean canConnect=false;
  try {
    if (getDriverConnectionFactory(driverClassName) != null) {
      tryCreateConnection(driverClassName,connectionString,userId,password);
      return true;
    }
    if (jndiNameUrl != null) {
      Connection jndiDSConnection=getJndiDSConnection(driverClassName,jndiNameUrl,addUserAuthenticationProperties(null,userId,password));
      if (jndiDSConnection != null) {
        closeConnection(jndiDSConnection);
        return true;
      }
    }
    loadAndRegisterDriver(driverClassName,null);
    if (cachedDriversMap.get(driverClassName) == null) {
      Enumeration enumeration=DriverManager.getDrivers();
      while (enumeration.hasMoreElements()) {
        Driver driver=(Driver)enumeration.nextElement();
        if (isExpectedDriver(driver,driverClassName)) {
          if (driver.acceptsURL(connectionString)) {
            cachedDriversMap.put(driverClassName,driver);
            tryCreateConnection(driverClassName,connectionString,userId,password);
            canConnect=true;
            break;
          }
        }
      }
      if (!canConnect)       throw new JDBCException(ResourceConstants.CANNOT_PARSE_URL,null);
    }
 else {
      if (((Driver)this.cachedDriversMap.get(driverClassName)).acceptsURL(connectionString)) {
        tryCreateConnection(driverClassName,connectionString,userId,password);
        canConnect=true;
      }
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e.getLocalizedMessage(),null);
  }
  if (canConnect == false)   throw new JDBCException(ResourceConstants.NO_SUITABLE_DRIVER,null);
  return true;
}",0.99889697771895
74920,"public DriverClassLoader(){
  super(new URL[0],DriverClassLoader.class.getClassLoader());
  logger.entering(DriverClassLoader.class.getName(),""String_Node_Str"");
  bundle=Platform.getBundle(""String_Node_Str"");
  if (bundle == null) {
    logger.severe(""String_Node_Str"");
  }
 else {
    refreshURLs();
  }
}","public DriverClassLoader(String driverClassPath) throws OdaException {
  super(new URL[0],DriverClassLoader.class.getClassLoader());
  logger.entering(DriverClassLoader.class.getName(),""String_Node_Str"");
  this.driverClassPath=driverClassPath;
  bundle=Platform.getBundle(""String_Node_Str"");
  if (bundle == null) {
    logger.severe(""String_Node_Str"");
  }
 else {
    refreshURLs();
  }
}",0.8783977110157367
74921,"private void loadAndRegisterDriver(String className) throws OdaException {
  if (className == null || className.length() == 0)   return;
  if (isDeregistered(className)) {
    throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
  }
 else   if (this.registeredDrivers.containsKey(className)) {
    return;
  }
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + className);
  }
  Driver driver=findDriver(className);
  if (driver != null) {
    try {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + className);
      DriverManager.registerDriver(new WrappedDriver(driver,className));
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  registeredDrivers.put(className,DRIVER_REGISTERED);
}","private void loadAndRegisterDriver(String className,String driverClassPath) throws OdaException {
  if (className == null || className.length() == 0)   return;
  if (isDeregistered(className)) {
    throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
  }
 else   if (this.registeredDrivers.containsKey(className)) {
    return;
  }
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + className);
  }
  Driver driver=findDriver(className,driverClassPath);
  if (driver != null) {
    try {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + className);
      DriverManager.registerDriver(new WrappedDriver(driver,className));
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  registeredDrivers.put(className,DRIVER_REGISTERED);
}",0.9767441860465116
74922,"private void createCube(DataEngine engine) throws BirtException, IOException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(documentPath + engine.hashCode(),cubeName);
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[]{""String_Node_Str"",""String_Node_Str""};
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  iterator.setLevelMember(1,TestFactTable.ATTRIBUTE_Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.close();
}","private void createCube(DataEngine engine) throws BirtException, IOException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(documentPath + engine.hashCode(),cubeName);
  DocManagerMap.getDocManagerMap().set(String.valueOf(engine.hashCode()),documentPath + engine.hashCode() + cubeName,documentManager);
  engine.addShutdownListener(new DocManagerReleaser(engine));
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[]{""String_Node_Str"",""String_Node_Str""};
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  iterator.setLevelMember(1,TestFactTable.ATTRIBUTE_Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
}",0.954515491100857
74923,"private void createCube(IDocArchiveWriter writter,DataEngine engine) throws BirtException, IOException {
  CubeMaterializer cubeMaterializer=new CubeMaterializer(documentPath + engine.hashCode(),""String_Node_Str"");
  IDocumentManager documentManager=cubeMaterializer.getDocumentManager();
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
  cubeMaterializer.saveCubeToReportDocument(""String_Node_Str"",writter,null);
  cubeMaterializer.close();
}","private void createCube(IDocArchiveWriter writter,DataEngine engine) throws BirtException, IOException {
  CubeMaterializer cubeMaterializer=new CubeMaterializer(engine,documentPath + engine.hashCode(),""String_Node_Str"");
  IDocumentManager documentManager=cubeMaterializer.getDocumentManager();
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
  cubeMaterializer.saveCubeToReportDocument(""String_Node_Str"",writter,null);
  cubeMaterializer.close();
}",0.9984739481142358
74924,"void createCube(DataEngine engine) throws IOException, BirtException, OLAPException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(documentPath + engine.hashCode(),cubeName);
  Dimension[] dimensions=new Dimension[6];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L1Col);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  IDiskArray allRow=dimensions[0].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L2Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  allRow=dimensions[1].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  allRow=dimensions[2].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L4Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[3]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[3].getHierarchy();
  allRow=dimensions[3].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM1_L1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[4]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[4].getHierarchy();
  allRow=dimensions[4].getAllRows();
  levelNames=new String[]{""String_Node_Str"",""String_Node_Str""};
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM1_L2Col);
  iterator.setLevelMember(1,TestFactTable1.ATTRIBUTE_Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  dimensions[5]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[5].getHierarchy();
  allRow=dimensions[5].getAllRows();
  TestFactTable1 factTable2=new TestFactTable1();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.close();
}","void createCube(DataEngine engine) throws IOException, BirtException, OLAPException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(documentPath + engine.hashCode(),cubeName);
  DocManagerMap.getDocManagerMap().set(String.valueOf(engine.hashCode()),documentPath + engine.hashCode() + cubeName,documentManager);
  engine.addShutdownListener(new DocManagerReleaser(engine));
  Dimension[] dimensions=new Dimension[6];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L1Col);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  IDiskArray allRow=dimensions[0].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L2Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  allRow=dimensions[1].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  allRow=dimensions[2].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L4Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[3]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[3].getHierarchy();
  allRow=dimensions[3].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM1_L1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[4]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[4].getHierarchy();
  allRow=dimensions[4].getAllRows();
  levelNames=new String[]{""String_Node_Str"",""String_Node_Str""};
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM1_L2Col);
  iterator.setLevelMember(1,TestFactTable1.ATTRIBUTE_Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  dimensions[5]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[5].getHierarchy();
  allRow=dimensions[5].getAllRows();
  TestFactTable1 factTable2=new TestFactTable1();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
}",0.9724110355857656
74925,"/** 
 * test aggregation using random access document manager. 
 * @throws IOException
 * @throws BirtException
 */
public void testRAAggregation1() throws IOException, BirtException {
  CubeMaterializer materializer=new CubeMaterializer();
  IDocumentManager localDocManager=materializer.getDocumentManager();
  IDocumentManager oldManager=documentManager;
  documentManager=localDocManager;
  createCube1();
  testCube1Aggregation();
  IDocArchiveWriter writer=createRAWriter();
  materializer.saveCubeToReportDocument(""String_Node_Str"",writer,new StopSign());
  writer.flush();
  writer.finish();
  documentManager=createRADocumentManager();
  testCube1Aggregation();
  documentManager.close();
  documentManager=oldManager;
}","/** 
 * test aggregation using random access document manager. 
 * @throws IOException
 * @throws BirtException
 */
public void testRAAggregation1() throws IOException, BirtException {
  CubeMaterializer materializer=new CubeMaterializer(null);
  IDocumentManager localDocManager=materializer.getDocumentManager();
  IDocumentManager oldManager=documentManager;
  documentManager=localDocManager;
  createCube1();
  testCube1Aggregation();
  IDocArchiveWriter writer=createRAWriter();
  materializer.saveCubeToReportDocument(""String_Node_Str"",writer,new StopSign());
  writer.flush();
  writer.finish();
  documentManager=createRADocumentManager();
  testCube1Aggregation();
  documentManager.close();
  documentManager=oldManager;
}",0.9972640218878248
74926,"public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  Collection col=dataSources.values();
  Iterator it=col.iterator();
  while (it.hasNext()) {
    DataSourceRuntime ds=(DataSourceRuntime)it.next();
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  logger.logp(Level.INFO,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  clearTempFile();
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}","public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  if (shutdownListenerList != null) {
    for (int i=0; i < shutdownListenerList.size(); i++) {
      ((IShutdownListener)shutdownListenerList.get(i)).dataEngineShutdown();
    }
    shutdownListenerList.clear();
  }
  Collection col=dataSources.values();
  Iterator it=col.iterator();
  while (it.hasNext()) {
    DataSourceRuntime ds=(DataSourceRuntime)it.next();
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  logger.logp(Level.INFO,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  clearTempFile();
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}",0.8763532763532763
74927,"/** 
 * @throws DataException
 * @throws IOException
 */
public CubeMaterializer() throws DataException, IOException {
  documentManager=DocumentManagerFactory.createFileDocumentManager();
}","/** 
 * @throws DataException
 * @throws IOException
 */
public CubeMaterializer(DataEngine dataEngine) throws DataException, IOException {
  this.dataEngine=dataEngine;
  setShutdownListener();
  documentManager=DocumentManagerFactory.createFileDocumentManager();
}",0.5657894736842105
74928,"/** 
 * @throws IOException 
 */
public void close() throws IOException {
  documentManager.close();
}","/** 
 * @throws IOException 
 */
public void close() throws IOException {
  documentManager.flush();
}",0.9705882352941176
74929,"/** 
 * @param pageContainer
 * @param left
 * @param right
 */
private void setWidthHints(Composite pageContainer,Control left,Control right){
  int leftWidth=left.computeSize(SWT.DEFAULT,SWT.DEFAULT).x;
  int totalWidth=pageContainer.computeSize(SWT.DEFAULT,SWT.DEFAULT).x;
  if ((double)leftWidth / (double)totalWidth > 0.4) {
    GridData data=(GridData)left.getLayoutData();
    data.widthHint=(int)(totalWidth * 0.4);
    data=(GridData)right.getLayoutData();
    data.widthHint=(int)(totalWidth * 0.6);
  }
 else {
    GridData data=(GridData)left.getLayoutData();
    data.widthHint=leftWidth;
    data=(GridData)right.getLayoutData();
    data.widthHint=totalWidth - leftWidth;
  }
}","/** 
 * @param pageContainer
 * @param left
 * @param right
 */
private void setWidthHints(Composite pageContainer,Control left,Control right,Sash sash){
  int leftWidth=left.computeSize(SWT.DEFAULT,SWT.DEFAULT).x;
  int totalWidth=pageContainer.computeSize(SWT.DEFAULT,SWT.DEFAULT).x;
  if ((double)leftWidth / (double)totalWidth > 0.4) {
    totalWidth=leftWidth / 40 * 100;
    leftWidth=leftWidth - sash.computeSize(SWT.DEFAULT,SWT.DEFAULT).x;
    GridData data=(GridData)left.getLayoutData();
    data.widthHint=leftWidth;
    data=(GridData)right.getLayoutData();
    data.widthHint=(int)(totalWidth * 0.6);
  }
 else {
    GridData data=(GridData)left.getLayoutData();
    data.widthHint=leftWidth;
    data=(GridData)right.getLayoutData();
    data.widthHint=totalWidth - leftWidth;
  }
}",0.635752688172043
74930,"/** 
 * create page control for sql edit page
 * @param parent
 * @return
 */
private Control createPageControl(Composite parent){
  Composite pageContainer=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.marginWidth=0;
  layout.marginHeight=0;
  layout.horizontalSpacing=2;
  pageContainer.setLayout(layout);
  pageContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
  initialImage();
  initialJdbcInfo();
  Control left=createTableSelectionComposite(pageContainer);
  Sash sash=createSash(pageContainer);
  Control right=createTextualQueryComposite(pageContainer);
  setWidthHints(pageContainer,left,right);
  addDragListerner(sash,pageContainer,left,right);
  return pageContainer;
}","/** 
 * create page control for sql edit page
 * @param parent
 * @return
 */
private Control createPageControl(Composite parent){
  Composite pageContainer=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.marginWidth=0;
  layout.marginHeight=0;
  layout.horizontalSpacing=2;
  pageContainer.setLayout(layout);
  pageContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
  initialImage();
  initialJdbcInfo();
  Control left=createTableSelectionComposite(pageContainer);
  Sash sash=createSash(pageContainer);
  Control right=createTextualQueryComposite(pageContainer);
  setWidthHints(pageContainer,left,right,sash);
  addDragListerner(sash,pageContainer,left,right);
  return pageContainer;
}",0.9966644429619748
74931,"public void refresh(){
  enableAllControls(getControl(),isSessionEditable());
}","public void refresh(){
  enableAllControls(getControl(),isSessionEditable());
  if (m_pageHelper != null) {
    m_pageHelper.resetTestAndMngButton();
  }
}",0.6752136752136753
74932,"public void start(){
  if (parent != null && !parent.isStarted()) {
    parent.start();
  }
  ContentEmitterUtil.startContent(content,emitter);
  generator.start(content,isFirst);
  isStarted=true;
}","public void start(){
  if (isStarted) {
    return;
  }
  if (parent != null && !parent.isStarted()) {
    parent.start();
  }
  ContentEmitterUtil.startContent(content,emitter);
  generator.start(content,isFirst);
  isStarted=true;
}",0.9191685912240184
74933,"public void start(){
  if (parent != null && !parent.isStarted()) {
    parent.start();
  }
  ContentEmitterUtil.startContent(content,emitter);
  generator.start(content,isFirst);
  isStarted=true;
  flushUnStartedChildren();
}","public void start(){
  if (isStarted) {
    return;
  }
  if (parent != null && !parent.isStarted()) {
    parent.start();
  }
  ContentEmitterUtil.startContent(content,emitter);
  generator.start(content,isFirst);
  isStarted=true;
  flushUnStartedChildren();
}",0.9284253578732108
74934,"public void start(){
  if (parent != null && !parent.isStarted()) {
    parent.start();
  }
  ContentEmitterUtil.startContent(content,emitter);
  isStarted=true;
}","public void start(){
  if (isStarted) {
    return;
  }
  if (parent != null && !parent.isStarted()) {
    parent.start();
  }
  ContentEmitterUtil.startContent(content,emitter);
  isStarted=true;
}",0.9030470914127424
74935,"void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null)   throw new EngineException(""String_Node_Str"");
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
    dteDataSet.setCacheRowCount(modelDataSet.getCachedRowCount());
  }
  populateParameter(modelDataSet,dteDataSet);
  populateComputedColumn(modelDataSet,dteDataSet);
  populateFilter(modelDataSet,dteDataSet);
  dteDataSet.setRowFetchLimit(modelDataSet.getRowFetchLimit());
  mergeHints(modelDataSet,dteDataSet);
}","void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws BirtException {
  if ((!(modelDataSet instanceof JointDataSetHandle)) && modelDataSet.getDataSource() == null)   throw new EngineException(""String_Node_Str"");
  if (!(modelDataSet instanceof JointDataSetHandle)) {
    dteDataSet.setDataSource(modelDataSet.getDataSource().getQualifiedName());
    dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
    dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
    dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
    dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
    dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
  }
  populateParameter(modelDataSet,dteDataSet);
  populateComputedColumn(modelDataSet,dteDataSet);
  populateFilter(modelDataSet,dteDataSet);
  dteDataSet.setRowFetchLimit(modelDataSet.getRowFetchLimit());
  mergeHints(modelDataSet,dteDataSet);
}",0.9659725749111224
74936,"/** 
 * Get all referenced bindings by the given binding in a set of binding list.
 * @param target
 * @param allHandleList
 * @return
 */
private static Set getReferencedBindings(ComputedColumnHandle target,List allHandleList,Set prohibitedSet){
  Set result=new HashSet();
  if (target == null || allHandleList == null || allHandleList.size() == 0)   return result;
  prohibitedSet.add(target.getName());
  String expr=target.getExpression();
  try {
    List referredBindings=ExpressionUtil.extractColumnExpressions(expr);
    for (int i=0; i < referredBindings.size(); i++) {
      IColumnBinding binding=(IColumnBinding)referredBindings.get(i);
      for (int j=0; j < allHandleList.size(); j++) {
        ComputedColumnHandle handle=(ComputedColumnHandle)allHandleList.get(j);
        if (handle.getName().equals(binding.getResultSetColumnName()) && !prohibitedSet.contains(binding.getResultSetColumnName())) {
          result.add(handle);
        }
      }
    }
    Set temp=new HashSet();
    for (Iterator it=result.iterator(); it.hasNext(); ) {
      Set newProhibitedSet=new HashSet();
      newProhibitedSet.addAll(prohibitedSet);
      temp.addAll(getReferencedBindings((ComputedColumnHandle)it.next(),allHandleList,newProhibitedSet));
    }
    result.addAll(temp);
  }
 catch (  BirtException e) {
  }
  return result;
}","/** 
 * @param target
 * @param allHandleList
 * @param prohibitedSet
 * @return
 */
private static Set getReferencedBindings(ComputedColumnHandle target,List allHandleList,Set prohibitedSet){
  Set result=new HashSet();
  if (target == null || allHandleList == null || allHandleList.size() == 0)   return result;
  prohibitedSet.add(target.getName());
  String expr=target.getExpression();
  try {
    List referredBindings=ExpressionUtil.extractColumnExpressions(expr);
    for (int i=0; i < referredBindings.size(); i++) {
      IColumnBinding binding=(IColumnBinding)referredBindings.get(i);
      for (int j=0; j < allHandleList.size(); j++) {
        ComputedColumnHandle handle=(ComputedColumnHandle)allHandleList.get(j);
        if (handle.getName().equals(binding.getResultSetColumnName()) && !prohibitedSet.contains(binding.getResultSetColumnName())) {
          result.add(handle);
        }
      }
    }
    Set temp=new HashSet();
    for (Iterator it=result.iterator(); it.hasNext(); ) {
      Set newProhibitedSet=new HashSet();
      newProhibitedSet.addAll(prohibitedSet);
      temp.addAll(getReferencedBindings((ComputedColumnHandle)it.next(),allHandleList,newProhibitedSet));
    }
    result.addAll(temp);
  }
 catch (  BirtException e) {
  }
  return result;
}",0.9351145038167938
74937,"/** 
 * This function is used to decode a htmlEncoded string and convert to the orginial string
 * @param s
 * @return String
 */
public static final String htmlDecode(String s){
  if (s == null)   return null;
  String sHtmlDecoded=s.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return sHtmlDecoded;
}","/** 
 * This function is used to decode a htmlEncoded string and convert to the orginial string
 * @param s
 * @return String
 */
public static final String htmlDecode(String s){
  if (s == null)   return null;
  String sHtmlDecoded=s.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  sHtmlDecoded=sHtmlDecoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return sHtmlDecoded;
}",0.9285714285714286
74938,"/** 
 * This function is used to encode an ordinary string that may contain characters or more than one consecutive spaces for appropriate HTML display.
 * @param s
 * @return String
 */
public static final String htmlEncode(String s){
  String sHtmlEncoded=""String_Node_Str"";
  if (s == null) {
    return null;
  }
  StringBuffer sbHtmlEncoded=new StringBuffer();
  final char chrarry[]=s.toCharArray();
  for (int i=0; i < chrarry.length; i++) {
    char c=chrarry[i];
switch (c) {
case '\t':
      sbHtmlEncoded.append(""String_Node_Str"");
    break;
case '\n':
  sbHtmlEncoded.append(""String_Node_Str"");
break;
case '\r':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case ' ':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '""':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '\'':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '<':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '>':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '`':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '&':
sbHtmlEncoded.append(""String_Node_Str"");
break;
default :
sbHtmlEncoded.append(c);
}
}
sHtmlEncoded=sbHtmlEncoded.toString();
return sHtmlEncoded;
}","/** 
 * This function is used to encode an ordinary string that may contain characters or more than one consecutive spaces for appropriate HTML display.
 * @param s
 * @return String
 */
public static final String htmlEncode(String s){
  String sHtmlEncoded=""String_Node_Str"";
  if (s == null) {
    return null;
  }
  StringBuffer sbHtmlEncoded=new StringBuffer();
  final char chrarry[]=s.toCharArray();
  for (int i=0; i < chrarry.length; i++) {
    char c=chrarry[i];
switch (c) {
case '\t':
      sbHtmlEncoded.append(""String_Node_Str"");
    break;
case '\n':
  sbHtmlEncoded.append(""String_Node_Str"");
break;
case '\r':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case ' ':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '""':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '\'':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '<':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '>':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '`':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '&':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '\\':
sbHtmlEncoded.append(""String_Node_Str"");
break;
case '/':
sbHtmlEncoded.append(""String_Node_Str"");
break;
default :
sbHtmlEncoded.append(c);
}
}
sHtmlEncoded=sbHtmlEncoded.toString();
return sHtmlEncoded;
}",0.9528035498184751
74939,"/** 
 * Refresh swt browser
 */
public void display(){
  if (browser != null) {
    String uri=getFileUri();
    if (uri != null && uri.length() > 0) {
      if (this.options == null) {
        this.options=new HashMap();
        this.options.put(WebViewer.SERVLET_NAME_KEY,InputParameterHtmlDialog.VIEWER_RUN);
        this.options.put(WebViewer.FORMAT_KEY,WebViewer.HTML);
      }
      this.options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
      this.options.put(WebViewer.MAX_ROWS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW));
      WebViewer.display(uri,browser,this.options);
    }
  }
}","/** 
 * Refresh swt browser
 */
public void display(){
  if (browser != null) {
    String uri=getFileUri();
    if (uri != null && uri.length() > 0) {
      if (this.options == null) {
        this.options=new HashMap();
        this.options.put(WebViewer.SERVLET_NAME_KEY,InputParameterHtmlDialog.VIEWER_RUN);
        this.options.put(WebViewer.FORMAT_KEY,WebViewer.HTML);
      }
      this.options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
      this.options.put(WebViewer.MAX_ROWS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW));
      this.options.put(WebViewer.MAX_CUBELEVELS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBELEVEL));
      WebViewer.display(uri,browser,this.options);
    }
  }
}",0.9035262807717898
74940,"public Data(final String txt,final StyleEntry s){
  this.txt=txt;
  this.style=s;
  id=ID++;
}","public Data(final Object txt,final StyleEntry s){
  this.txt=txt;
  this.style=s;
  id=ID++;
}",0.946808510638298
74941,"public void startData(IDataContent data){
  super.startData(data);
  HyperlinkDef url=parseHyperLink(data);
  engine.addData(data.getText(),data.getComputedStyle(),url);
}","public void startData(IDataContent data){
  super.startData(data);
  HyperlinkDef url=parseHyperLink(data);
  engine.addData(data,data.getComputedStyle(),url);
}",0.9698795180722892
74942,"public void writeText(String txt){
  writer.openTag(""String_Node_Str"");
  try {
    new java.math.BigDecimal(txt);
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}","public void writeText(Object d){
  writer.openTag(""String_Node_Str"");
  if (d instanceof Data) {
    if (((Data)d).getDatatype().equals(Data.NUMBER)) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (((Data)d).getDatatype().equals(Data.DATE)) {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      writer.attribute(""String_Node_Str"",""String_Node_Str"");
    }
    writer.text(((Data)d).txt.toString());
  }
 else {
    writer.text(d.toString());
  }
  writer.closeTag(""String_Node_Str"");
}",0.5926773455377574
74943,"protected void writeTxtData(Data d){
  startCell(d.span.getCol(),d.span.getColSpan(),0,d.styleId,d.url);
  writeText(d.txt);
  endCell();
}","protected void writeTxtData(Data d){
  startCell(d.span.getCol(),d.span.getColSpan(),0,d.styleId,d.url);
  writeText(d);
  endCell();
}",0.9854014598540146
74944,"protected void writeFormulaData(Data d){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",d.span.getCol());
  writer.attribute(""String_Node_Str"",d.txt);
  writer.attribute(""String_Node_Str"",d.span.getColSpan());
  writer.attribute(""String_Node_Str"",d.styleId);
  writer.closeTag(""String_Node_Str"");
}","protected void writeFormulaData(Data d){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",d.span.getCol());
  writer.attribute(""String_Node_Str"",d.txt.toString());
  writer.attribute(""String_Node_Str"",d.span.getColSpan());
  writer.attribute(""String_Node_Str"",d.styleId);
  writer.closeTag(""String_Node_Str"");
}",0.983358547655068
74945,"private void declareStyle(StyleEntry style,int id){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  String horizontalAlign=style.getProperty(StyleConstant.H_ALIGN_PROP);
  String verticalAlign=style.getProperty(StyleConstant.V_ALIGN_PROP);
  writeAlignment(horizontalAlign,verticalAlign);
  writer.openTag(""String_Node_Str"");
  String bottomColor=style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
  String bottomLineStyle=style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
  String bottomWeight=style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
  writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
  String topColor=style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
  String topLineStyle=style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
  String topWeight=style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
  writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
  String leftColor=style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
  String leftLineStyle=style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
  String leftWeight=style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
  writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
  String rightColor=style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
  String rightLineStyle=style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
  String rightWeight=style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
  writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
  writer.closeTag(""String_Node_Str"");
  String fontName=style.getProperty(StyleConstant.FONT_FAMILY_PROP);
  String size=style.getProperty(StyleConstant.FONT_SIZE_PROP);
  String fontStyle=style.getProperty(StyleConstant.FONT_STYLE_PROP);
  String fontWeight=style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
  String strikeThrough=style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
  String underline=style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
  String color=style.getProperty(StyleConstant.COLOR_PROP);
  writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
  String bgColor=style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
  writeBackGroudColor(bgColor);
  writer.closeTag(""String_Node_Str"");
}","private void declareStyle(StyleEntry style,int id){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  String horizontalAlign=style.getProperty(StyleConstant.H_ALIGN_PROP);
  String verticalAlign=style.getProperty(StyleConstant.V_ALIGN_PROP);
  writeAlignment(horizontalAlign,verticalAlign);
  writer.openTag(""String_Node_Str"");
  String bottomColor=style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
  String bottomLineStyle=style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
  String bottomWeight=style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
  writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
  String topColor=style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
  String topLineStyle=style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
  String topWeight=style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
  writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
  String leftColor=style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
  String leftLineStyle=style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
  String leftWeight=style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
  writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
  String rightColor=style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
  String rightLineStyle=style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
  String rightWeight=style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
  writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
  writer.closeTag(""String_Node_Str"");
  String fontName=style.getProperty(StyleConstant.FONT_FAMILY_PROP);
  String size=style.getProperty(StyleConstant.FONT_SIZE_PROP);
  String fontStyle=style.getProperty(StyleConstant.FONT_STYLE_PROP);
  String fontWeight=style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
  String strikeThrough=style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
  String underline=style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
  String color=style.getProperty(StyleConstant.COLOR_PROP);
  writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
  writeDataFormat(style);
  String bgColor=style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
  writeBackGroudColor(bgColor);
  writer.closeTag(""String_Node_Str"");
}",0.9944539249146758
74946,"public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,ExcelUtil.expression(style.getFontWeight(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,ExcelUtil.expression(style.getTextLineThrough(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,ExcelUtil.expression(style.getTextUnderline(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  return entry;
}","public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,ExcelUtil.expression(style.getFontWeight(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,ExcelUtil.expression(style.getTextLineThrough(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,ExcelUtil.expression(style.getTextUnderline(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,style.getDateFormat());
  entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,style.getNumberFormat());
  entry.setProperty(StyleConstant.STRING_FORMAT_PROP,style.getStringFormat());
  return entry;
}",0.9583945178658836
74947,"/** 
 * Build the style of cell content.
 */
public void buildCellStyle(ICellContent cell,StringBuffer styleBuffer,boolean isHead){
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    styleBuffer.append(""String_Node_Str"");
  }
  IStyle style=getElementStyle(cell);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}","/** 
 * Build the style of cell content.
 */
public void buildCellStyle(ICellContent cell,StringBuffer styleBuffer,boolean isHead){
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    styleBuffer.append(""String_Node_Str"");
  }
  IStyle style=cell.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(cell);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.8854447439353099
74948,"/** 
 * Build the style of column
 */
public void buildColumnStyle(IColumn column,StringBuffer styleBuffer){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,column.getWidth());
  IStyle style=column.getStyle();
  String value=style.getVerticalAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  if (!isEmbeddable) {
    style=column.getInlineStyle();
    if (style == null) {
      return;
    }
  }
  if (style.isEmpty()) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}","/** 
 * Build the style of column
 */
public void buildColumnStyle(IColumn column,StringBuffer styleBuffer){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,column.getWidth());
  IStyle style=column.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  String value=style.getVerticalAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  if (!isEmbeddable) {
    style=column.getInlineStyle();
    if (style == null) {
      return;
    }
  }
  if (style.isEmpty()) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.9227490676611614
74949,"/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=null;
  display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
  }
 else {
    styleBuffer.append(""String_Node_Str"");
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  String value=style.getTextAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}","/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
  }
 else {
    styleBuffer.append(""String_Node_Str"");
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  String value=style.getTextAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.9948586118251928
74950,"/** 
 * Build the style of row content.
 */
public void buildRowStyle(IRowContent row,StringBuffer styleBuffer){
  buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,row.getHeight());
  IStyle style=getElementStyle(row);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}","/** 
 * Build the style of row content.
 */
public void buildRowStyle(IRowContent row,StringBuffer styleBuffer){
  buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,row.getHeight());
  IStyle style=row.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(row);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.8724528301886793
74951,"public void endTable(ITableContent table){
  if (enableMetadata) {
    metadataEmitter.endTable(table);
  }
  writer.closeTag(HTMLTags.TAG_TABLE);
  if (enableMetadata) {
    metadataEmitter.endWrapTable(table);
  }
  if (needImplementAlignTable(table)) {
    writer.closeTag(HTMLTags.TAG_DIV);
  }
  logger.log(Level.FINE,""String_Node_Str"");
}","public void endTable(ITableContent table){
  if (enableMetadata) {
    metadataEmitter.endTable(table);
  }
  writer.closeTag(HTMLTags.TAG_TABLE);
  if (enableMetadata) {
    metadataEmitter.endWrapTable(table);
  }
  boolean DIVWrap=((Boolean)tableDIVWrapedFlagStack.pop()).booleanValue();
  if (DIVWrap) {
    writer.closeTag(HTMLTags.TAG_DIV);
  }
  logger.log(Level.FINE,""String_Node_Str"");
}",0.8486486486486486
74952,"/** 
 * Build the style of cell content.
 */
public void buildCellStyle(ICellContent cell,StringBuffer styleBuffer,boolean isHead){
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    styleBuffer.append(""String_Node_Str"");
  }
  IStyle style=getElementStyle(cell);
  IStyle cellMergedStyle=new CellMergedStyle(cell);
  if (null != style) {
    AttributeBuilder.buildFont(styleBuffer,style);
  }
  AttributeBuilder.buildFont(styleBuffer,cellMergedStyle);
  if (isHead) {
    String fontWeight=null;
    if (null != style) {
      fontWeight=style.getFontWeight();
    }
    String mergedFontWeight=cellMergedStyle.getFontWeight();
    if (null == fontWeight && null == mergedFontWeight) {
      IStyle cellComputedStyle=cell.getComputedStyle();
      if (null != cellComputedStyle) {
        fontWeight=cellComputedStyle.getFontWeight();
      }
      if (fontWeight == null) {
        fontWeight=""String_Node_Str"";
      }
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(fontWeight);
      styleBuffer.append(""String_Node_Str"");
    }
  }
  if (null != style) {
    AttributeBuilder.buildMargins(styleBuffer,style);
    AttributeBuilder.buildPaddings(styleBuffer,style);
  }
  AttributeBuilder.buildMargins(styleBuffer,cellMergedStyle);
  AttributeBuilder.buildPaddings(styleBuffer,cellMergedStyle);
  buildCellBorder(cell,styleBuffer);
  if (null != style) {
    AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
    AttributeBuilder.buildText(styleBuffer,style);
    AttributeBuilder.buildVisual(styleBuffer,style);
  }
  AttributeBuilder.buildBackground(styleBuffer,cellMergedStyle,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,cellMergedStyle);
  AttributeBuilder.buildVisual(styleBuffer,cellMergedStyle);
}","/** 
 * Build the style of cell content.
 */
public void buildCellStyle(ICellContent cell,StringBuffer styleBuffer,boolean isHead){
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    styleBuffer.append(""String_Node_Str"");
  }
  IStyle style=getElementStyle(cell);
  IStyle cellMergedStyle=new CellMergedStyle(cell);
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  if (null != style) {
    AttributeBuilder.buildFont(styleBuffer,style);
  }
  AttributeBuilder.buildFont(styleBuffer,cellMergedStyle);
  if (isHead) {
    String fontWeight=null;
    if (null != style) {
      fontWeight=style.getFontWeight();
    }
    String mergedFontWeight=cellMergedStyle.getFontWeight();
    if (null == fontWeight && null == mergedFontWeight) {
      IStyle cellComputedStyle=cell.getComputedStyle();
      if (null != cellComputedStyle) {
        fontWeight=cellComputedStyle.getFontWeight();
      }
      if (fontWeight == null) {
        fontWeight=""String_Node_Str"";
      }
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(fontWeight);
      styleBuffer.append(""String_Node_Str"");
    }
  }
  if (null != style) {
    AttributeBuilder.buildMargins(styleBuffer,style);
    AttributeBuilder.buildPaddings(styleBuffer,style);
  }
  AttributeBuilder.buildMargins(styleBuffer,cellMergedStyle);
  AttributeBuilder.buildPaddings(styleBuffer,cellMergedStyle);
  buildCellBorder(cell,styleBuffer);
  if (null != style) {
    AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
    AttributeBuilder.buildText(styleBuffer,style);
    AttributeBuilder.buildVisual(styleBuffer,style);
  }
  AttributeBuilder.buildBackground(styleBuffer,cellMergedStyle,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,cellMergedStyle);
  AttributeBuilder.buildVisual(styleBuffer,cellMergedStyle);
}",0.9610319806503628
74953,"/** 
 * Build the style of column
 */
public void buildColumnStyle(IColumn column,StringBuffer styleBuffer){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,column.getWidth());
}","/** 
 * Build the style of column
 */
public void buildColumnStyle(IColumn column,StringBuffer styleBuffer){
  buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,column.getWidth());
  IStyle style=column.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
}",0.6603415559772297
74954,"/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=null;
  display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
  }
 else {
    styleBuffer.append(""String_Node_Str"");
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}","/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
  }
 else {
    styleBuffer.append(""String_Node_Str"");
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}",0.993920972644377
74955,"/** 
 * Build the style of row content.
 */
public void buildRowStyle(IRowContent row,StringBuffer styleBuffer){
  buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,row.getHeight());
  IStyle style=getElementStyle(row);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}","/** 
 * Build the style of row content.
 */
public void buildRowStyle(IRowContent row,StringBuffer styleBuffer){
  buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,row.getHeight());
  IStyle style=row.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(row);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}",0.8478847884788479
74956,"private String applyIntrinsicFont(String fontName,int fontStyle,float fontSize,String text){
  setFont(fontName,fontSize);
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return (""String_Node_Str"" + text + ""String_Node_Str"");
}","private String applyIntrinsicFont(String fontName,int fontStyle,float fontSize,String text){
  setFont(fontName,fontSize);
  text=escapeSpecialCharacter(text);
  return (""String_Node_Str"" + text + ""String_Node_Str"");
}",0.6487523992322457
74957,"/** 
 * @throws DataException
 */
public void test_BETWEEN() throws DataException {
  Object result;
  result=ScriptEvalUtil.evalConditionalExpr(new Integer(10),IConditionalExpression.OP_BETWEEN,new Double(9.9),new BigDecimal(19.9));
  assertResult(result,true);
  result=ScriptEvalUtil.evalConditionalExpr(new Integer(10),IConditionalExpression.OP_BETWEEN,new Double(10.9),new BigDecimal(19.9));
  assertResult(result,false);
  result=ScriptEvalUtil.evalConditionalExpr(new Integer(10),IConditionalExpression.OP_BETWEEN,new Double(20),new BigDecimal(9.9));
  assertResult(result,true);
  GregorianCalendar calendar=new GregorianCalendar(2001,11 - 1,1);
  result=ScriptEvalUtil.evalConditionalExpr(calendar.getTime(),IConditionalExpression.OP_BETWEEN,""String_Node_Str"",""String_Node_Str"");
  assertResult(result,true);
  result=ScriptEvalUtil.evalConditionalExpr(new Double(10),IConditionalExpression.OP_BETWEEN,new Double(9),new Integer(20));
  assertResult(result,true);
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_BETWEEN,new Integer(9),new Double(20.0));
  assertResult(result,true);
  result=ScriptEvalUtil.evalConditionalExpr(calendar.getTime(),IConditionalExpression.OP_BETWEEN,ExprTextAndValue.newInstance(""String_Node_Str"",""String_Node_Str""),ExprTextAndValue.newInstance(""String_Node_Str"",new Double(0.25)));
  assertResult(result,false);
}","/** 
 * @throws DataException
 */
public void test_BETWEEN() throws DataException {
  Object result;
  result=ScriptEvalUtil.evalConditionalExpr(new Integer(10),IConditionalExpression.OP_BETWEEN,new Double(9.9),new BigDecimal(19.9));
  assertResult(result,true);
  result=ScriptEvalUtil.evalConditionalExpr(new Integer(10),IConditionalExpression.OP_BETWEEN,new Double(10.9),new BigDecimal(19.9));
  assertResult(result,false);
  result=ScriptEvalUtil.evalConditionalExpr(new Integer(10),IConditionalExpression.OP_BETWEEN,new Double(20),new BigDecimal(9.9));
  assertResult(result,true);
  GregorianCalendar calendar=new GregorianCalendar(2001,11 - 1,1);
  result=ScriptEvalUtil.evalConditionalExpr(calendar.getTime(),IConditionalExpression.OP_BETWEEN,""String_Node_Str"",""String_Node_Str"");
  assertResult(result,true);
  result=ScriptEvalUtil.evalConditionalExpr(new Double(10),IConditionalExpression.OP_BETWEEN,new Double(9),new Integer(20));
  assertResult(result,true);
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_BETWEEN,new Integer(9),new Double(20.0));
  assertResult(result,true);
  result=ScriptEvalUtil.evalConditionalExpr(calendar.getTime(),IConditionalExpression.OP_BETWEEN,ExprTextAndValue.newInstance(""String_Node_Str"",""String_Node_Str""),ExprTextAndValue.newInstance(""String_Node_Str"",new Double(0.25)));
  assertResult(result,false);
  result=ScriptEvalUtil.evalConditionalExpr(new Boolean(true),IConditionalExpression.OP_BETWEEN,new Double(0.5),new Double(2));
  assertResult(result,true);
  result=ScriptEvalUtil.evalConditionalExpr(new Boolean(true),IConditionalExpression.OP_BETWEEN,new Double(-1),new Double(0.5));
  assertResult(result,false);
}",0.8980645161290323
74958,"/** 
 * To ease the methods compare and between. Exception with specific explanation will be thrown if anything goes wrong.
 * @param obj
 * @param op1
 * @param op2
 * @return
 * @throws DataException
 */
private static Object[] formatToComparable(Object obj,ExprTextAndValue op1,ExprTextAndValue op2) throws DataException {
  Object[] obArray=new Object[3];
  obArray[0]=obj;
  obArray[1]=op1.value;
  obArray[2]=op2.value;
  if (isSameType(obj,obArray[1])) {
    if (obArray[2] == null || (obArray[2] != null && isSameType(obj,obArray[2]))) {
      return obArray;
    }
  }
  try {
    if (obj instanceof Number) {
      obArray[0]=DataTypeUtil.toDouble(obj);
      obArray[1]=DataTypeUtil.toDouble(obArray[1]);
      if (obArray[2] != null) {
        obArray[2]=DataTypeUtil.toDouble(obArray[2]);
      }
    }
 else     if (obj instanceof java.sql.Date) {
      obArray[0]=DataTypeUtil.toSqlDate(obj);
      obArray[1]=DataTypeUtil.toSqlDate(obArray[1]);
      if (obArray[2] != null) {
        obArray[2]=DataTypeUtil.toSqlDate(obArray[2]);
      }
    }
 else     if (obj instanceof java.sql.Time) {
      obArray[0]=DataTypeUtil.toSqlTime(obj);
      obArray[1]=DataTypeUtil.toSqlTime(obArray[1]);
      if (obArray[2] != null) {
        obArray[2]=DataTypeUtil.toSqlTime(obArray[2]);
      }
    }
 else     if (obj instanceof Date) {
      obArray[0]=DataTypeUtil.toDate(obj);
      obArray[1]=DataTypeUtil.toDate(obArray[1]);
      if (obArray[2] != null) {
        obArray[2]=DataTypeUtil.toDate(obArray[2]);
      }
    }
 else     if (obj instanceof Boolean) {
      obArray[0]=DataTypeUtil.toBoolean(obj);
      obArray[1]=DataTypeUtil.toBoolean(obArray[1]);
    }
  }
 catch (  BirtException e) {
    try {
      makeObjectArrayStringArray(obArray);
    }
 catch (    BirtException e1) {
    }
  }
  return obArray;
}","/** 
 * To ease the methods compare and between. Exception with specific explanation will be thrown if anything goes wrong.
 * @param obj
 * @param op1
 * @param op2
 * @return
 * @throws DataException
 */
private static Object[] formatToComparable(Object obj,ExprTextAndValue op1,ExprTextAndValue op2) throws DataException {
  Object[] obArray=new Object[3];
  obArray[0]=obj;
  obArray[1]=op1.value;
  obArray[2]=op2.value;
  if (isSameType(obj,obArray[1])) {
    if (obArray[2] == null || (obArray[2] != null && isSameType(obj,obArray[2]))) {
      return obArray;
    }
  }
  if (obj instanceof Boolean)   populateObArray(obArray[1],obArray);
 else   populateObArray(obj,obArray);
  return obArray;
}",0.4814814814814814
74959,"private int toDteFilterOperator(String modelOpr){
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_EQ))   return IConditionalExpression.OP_EQ;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_NE))   return IConditionalExpression.OP_NE;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_LT))   return IConditionalExpression.OP_LT;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_LE))   return IConditionalExpression.OP_LE;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_GE))   return IConditionalExpression.OP_GE;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_GT))   return IConditionalExpression.OP_GT;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_BETWEEN))   return IConditionalExpression.OP_BETWEEN;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_NOT_BETWEEN))   return IConditionalExpression.OP_NOT_BETWEEN;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_NULL))   return IConditionalExpression.OP_NULL;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_NOT_NULL))   return IConditionalExpression.OP_NOT_NULL;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_TRUE))   return IConditionalExpression.OP_TRUE;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_FALSE))   return IConditionalExpression.OP_FALSE;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_LIKE))   return IConditionalExpression.OP_LIKE;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_TOP_N))   return IConditionalExpression.OP_TOP_N;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_BOTTOM_N))   return IConditionalExpression.OP_BOTTOM_N;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_TOP_PERCENT))   return IConditionalExpression.OP_TOP_PERCENT;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_BOTTOM_PERCENT))   return IConditionalExpression.OP_BOTTOM_PERCENT;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_NOT_LIKE))   return IConditionalExpression.OP_NOT_LIKE;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_NOT_MATCH))   return IConditionalExpression.OP_NOT_MATCH;
  return IConditionalExpression.OP_NONE;
}","private int toDteFilterOperator(String modelOpr){
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_EQ))   return IConditionalExpression.OP_EQ;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_NE))   return IConditionalExpression.OP_NE;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_LT))   return IConditionalExpression.OP_LT;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_LE))   return IConditionalExpression.OP_LE;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_GE))   return IConditionalExpression.OP_GE;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_GT))   return IConditionalExpression.OP_GT;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_BETWEEN))   return IConditionalExpression.OP_BETWEEN;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_NOT_BETWEEN))   return IConditionalExpression.OP_NOT_BETWEEN;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_NULL))   return IConditionalExpression.OP_NULL;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_NOT_NULL))   return IConditionalExpression.OP_NOT_NULL;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_TRUE))   return IConditionalExpression.OP_TRUE;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_FALSE))   return IConditionalExpression.OP_FALSE;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_LIKE))   return IConditionalExpression.OP_LIKE;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_TOP_N))   return IConditionalExpression.OP_TOP_N;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_BOTTOM_N))   return IConditionalExpression.OP_BOTTOM_N;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_TOP_PERCENT))   return IConditionalExpression.OP_TOP_PERCENT;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_BOTTOM_PERCENT))   return IConditionalExpression.OP_BOTTOM_PERCENT;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_NOT_LIKE))   return IConditionalExpression.OP_NOT_LIKE;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_NOT_MATCH))   return IConditionalExpression.OP_NOT_MATCH;
  if (modelOpr.equals(DesignChoiceConstants.FILTER_OPERATOR_MATCH))   return IConditionalExpression.OP_MATCH;
  return IConditionalExpression.OP_NONE;
}",0.9757388619320688
74960,"protected void drawImage(String uri,String extension,float imageX,float imageY,float height,float width,String helpText) throws Exception {
  if (uri == null) {
    return;
  }
  byte[] imageData=null;
  InputStream imageStream=new URL(uri).openStream();
  imageData=new byte[imageStream.available()];
  imageStream.read(imageData);
  drawImage(imageData,extension,imageX,imageY,height,width,helpText);
}","protected void drawImage(String uri,String extension,float imageX,float imageY,float height,float width,String helpText) throws Exception {
  if (uri == null) {
    return;
  }
  InputStream imageStream=new URL(uri).openStream();
  int data;
  ByteArrayOutputStream byteArrayOut=new ByteArrayOutputStream();
  while ((data=imageStream.read()) != -1) {
    byteArrayOut.write(data);
  }
  drawImage(byteArrayOut.toByteArray(),extension,imageX,imageY,height,width,helpText);
}",0.7175398633257403
74961,"/** 
 * @param sash
 * @param parent
 * @param left
 * @param right
 */
private void addDragListerner(final Sash sash,final Composite parent,final Control left,final Control right){
  sash.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      if (event.detail == SWT.DRAG) {
        return;
      }
      Sash sash=(Sash)event.widget;
      int shift=event.x - sash.getBounds().x;
      GridData data=(GridData)left.getLayoutData();
      int newWidthHint=data.widthHint + shift;
      if (newWidthHint < 0) {
        return;
      }
      Point computedSize=parent.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      Point currentSize=parent.getSize();
      boolean customSize=!computedSize.equals(currentSize);
      data.widthHint=newWidthHint;
      data=(GridData)right.getLayoutData();
      newWidthHint=data.widthHint - shift;
      data.widthHint=newWidthHint;
      parent.layout(true);
      computedSize=parent.computeSize(SWT.DEFAULT,SWT.DEFAULT);
      if (customSize) {
        computedSize.x=Math.max(computedSize.x,currentSize.x);
      }
      computedSize.y=Math.max(computedSize.y,currentSize.y);
      if (computedSize.equals(currentSize)) {
        return;
      }
      parent.setSize(computedSize.x,computedSize.y);
    }
  }
);
}","/** 
 * @param sash
 * @param parent
 * @param left
 * @param right
 */
private void addDragListerner(final Sash sash,final Composite parent,final Control left,final Control right){
  sash.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      if (event.detail == SWT.DRAG) {
        return;
      }
      Sash sash=(Sash)event.widget;
      int shift=event.x - sash.getBounds().x;
      left.setSize(left.getSize().x + shift,left.getSize().y);
      right.setSize(right.getSize().x - shift,right.getSize().y);
      right.setLocation(right.getLocation().x + shift,right.getLocation().y);
      sash.setLocation(sash.getLocation().x + shift,sash.getLocation().y);
    }
  }
);
}",0.4660678642714571
74962,"private String applyIntrinsicFont(String fontName,int fontStyle,float fontSize,String text){
  setFont(fontName,fontSize);
  if (text.endsWith(""String_Node_Str"")) {
    text=text + ""String_Node_Str"";
  }
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return (""String_Node_Str"" + text + ""String_Node_Str"");
}","private String applyIntrinsicFont(String fontName,int fontStyle,float fontSize,String text){
  setFont(fontName,fontSize);
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return (""String_Node_Str"" + text + ""String_Node_Str"");
}",0.4696485623003195
74963,"private void drawImage(ImageSource imageSource,float x,float y,float width,float height,Color bgcolor){
  int originalWidth=imageSource.getWidth();
  int originalHeight=imageSource.getHeight();
  y=transformY(y);
  gSave();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"");
  out.print(originalWidth * 3);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"");
  out.print(originalWidth);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.print(x);
  out.print(""String_Node_Str"");
  out.print(y);
  out.println(""String_Node_Str"");
  if (height == 0 || width == 0) {
    height=originalHeight;
    width=originalWidth;
  }
  out.println(""String_Node_Str"");
  out.print(width);
  out.print(""String_Node_Str"");
  out.print(height);
  out.println(""String_Node_Str"");
  out.print(originalWidth);
  out.print(""String_Node_Str"");
  out.print(originalHeight);
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"");
  out.print(originalWidth);
  out.print(""String_Node_Str"");
  out.print(originalHeight);
  out.print(""String_Node_Str"");
  out.print(0);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  byte[] sb=new byte[originalHeight * originalWidth * 6];
  int offset=0;
  for (int i=0; i < originalHeight; i++) {
    if (bgcolor == null) {
      for (int j=0; j < originalWidth; j++) {
        int pixel=imageSource.getRGB(j,i);
        int alpha=(pixel >> 24) & 0xff;
        int red=(pixel >> 16) & 0xff;
        int green=(pixel >> 8) & 0xff;
        int blue=pixel & 0xff;
        red=transferColor(alpha,red);
        green=transferColor(alpha,green);
        blue=transferColor(alpha,blue);
        offset=toBytes(offset,sb,red);
        offset=toBytes(offset,sb,green);
        offset=toBytes(offset,sb,blue);
      }
    }
 else {
    }
  }
  out.println(new String(sb));
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  gRestore();
}","private void drawImage(ImageSource imageSource,float x,float y,float width,float height,Color bgcolor){
  int originalWidth=imageSource.getWidth();
  int originalHeight=imageSource.getHeight();
  y=transformY(y);
  gSave();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"");
  out.print(originalWidth * 3);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"");
  out.print(originalWidth);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.print(x);
  out.print(""String_Node_Str"");
  out.print(y);
  out.println(""String_Node_Str"");
  if (height == 0 || width == 0) {
    height=originalHeight;
    width=originalWidth;
  }
  out.println(""String_Node_Str"");
  out.print(width);
  out.print(""String_Node_Str"");
  out.print(height);
  out.println(""String_Node_Str"");
  out.print(originalWidth);
  out.print(""String_Node_Str"");
  out.print(originalHeight);
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"");
  out.print(originalWidth);
  out.print(""String_Node_Str"");
  out.print(originalHeight);
  out.print(""String_Node_Str"");
  out.print(0);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  byte[] sb=new byte[originalWidth * 6];
  int offset=0;
  for (int i=0; i < originalHeight; i++) {
    if (bgcolor == null) {
      for (int j=0; j < originalWidth; j++) {
        int pixel=imageSource.getRGB(j,i);
        int alpha=(pixel >> 24) & 0xff;
        int red=(pixel >> 16) & 0xff;
        int green=(pixel >> 8) & 0xff;
        int blue=pixel & 0xff;
        red=transferColor(alpha,red);
        green=transferColor(alpha,green);
        blue=transferColor(alpha,blue);
        offset=toBytes(offset,sb,red);
        offset=toBytes(offset,sb,green);
        offset=toBytes(offset,sb,blue);
      }
      offset=0;
      out.println(new String(sb));
    }
 else {
    }
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  gRestore();
}",0.9761847486167908
74964,"private String applyIntrinsicFont(String fontName,int fontStyle,float fontSize,String text){
  setFont(fontName,fontSize);
  return (""String_Node_Str"" + text + ""String_Node_Str"");
}","private String applyIntrinsicFont(String fontName,int fontStyle,float fontSize,String text){
  setFont(fontName,fontSize);
  if (text.endsWith(""String_Node_Str"")) {
    text=text + ""String_Node_Str"";
  }
  return (""String_Node_Str"" + text + ""String_Node_Str"");
}",0.8171557562076749
74965,"public int canDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (!isDataColumn(transfer))   return DNDService.LOGIC_UNKNOW;
  DesignElementHandle handle=getExtendedItemHandle(target);
  if (handle != null) {
    if (handle.getProperty(IReportItemModel.CUBE_PROP) == null && (target instanceof CrosstabTableEditPart || target instanceof CrosstabCellEditPart)) {
      return DNDService.LOGIC_TRUE;
    }
 else     if (handle.getProperty(IReportItemModel.CUBE_PROP) != null) {
      Object model=((EditPart)target).getModel();
      if (model instanceof CrosstabCellAdapter) {
        PropertyHandle propertyHandle=((CrosstabCellAdapter)model).getPropertyHandle();
        if (propertyHandle != null && propertyHandle.canContain(""String_Node_Str"")) {
          return DNDService.LOGIC_TRUE;
        }
      }
    }
  }
  return DNDService.LOGIC_UNKNOW;
}","public int canDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (!isDataColumn(transfer))   return DNDService.LOGIC_UNKNOW;
  DesignElementHandle handle=getExtendedItemHandle(target);
  if (handle != null) {
    if (handle.getProperty(IReportItemModel.CUBE_PROP) == null && (target instanceof CrosstabTableEditPart || target instanceof CrosstabCellEditPart)) {
      return DNDService.LOGIC_TRUE;
    }
  }
  return DNDService.LOGIC_UNKNOW;
}",0.6913946587537092
74966,"/** 
 * If caller does not have a scope for evaluation, the caller can use this method to evaluate expression. But if caller has its own scope which can be used, the better way is call the method of convertToJavascriptValue( Object value, Scriptable scope ).
 * @param value
 * @return
 */
public static Object convertToJavascriptValue(Object value){
  if (sharedScope == null) {
    Context cx=Context.enter();
    sharedScope=new ImporterTopLevel(cx);
    Context.exit();
  }
  return convertToJavascriptValue(value,sharedScope);
}","/** 
 * If caller does not have a scope for evaluation, the caller can use this method to evaluate expression. But if caller has its own scope which can be used, the better way is call the method of convertToJavascriptValue( Object value, Scriptable scope ).
 * @param value
 * @return
 */
public static Object convertToJavascriptValue(Object value){
  return convertToJavascriptValue(value,null);
}",0.7682403433476395
74967,"public Object get(String name,Scriptable start){
  if (""String_Node_Str"".equalsIgnoreCase(name)) {
    if (this.helper.getParent() != null)     return helper.getParent().getJSRowObject();
 else     return null;
  }
  int rowIndex=-1;
  try {
    rowIndex=odiResult.getCurrentResultIndex();
  }
 catch (  BirtException e1) {
  }
  if (""String_Node_Str"".equalsIgnoreCase(name) || ""String_Node_Str"".equalsIgnoreCase(name)) {
    return new Integer(rowIndex);
  }
  if (rowIndex == currRowIndex && valueCacheMap.containsKey(name)) {
    return valueCacheMap.get(name);
  }
 else {
    Object value=null;
    try {
      IBinding binding=this.exprManager.getBinding(name);
      if (binding == null) {
        return new DataExceptionMocker(new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,name));
      }
      if (binding.getAggrFunction() != null)       return this.odiResult.getAggrValue(name);
      IBaseExpression dataExpr=this.exprManager.getExpr(name);
      if (dataExpr == null) {
        return new DataExceptionMocker(new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,name));
      }
      value=ExprEvaluateUtil.evaluateValue(dataExpr,this.odiResult.getCurrentResultIndex(),this.odiResult.getCurrentResult(),this.scope);
    }
 catch (    BirtException e) {
      value=null;
    }
    if (this.currRowIndex != rowIndex) {
      this.valueCacheMap.clear();
      this.currRowIndex=rowIndex;
    }
    value=JavascriptEvalUtil.convertToJavascriptValue(value);
    valueCacheMap.put(name,value);
    return value;
  }
}","public Object get(String name,Scriptable start){
  if (""String_Node_Str"".equalsIgnoreCase(name)) {
    if (this.helper.getParent() != null)     return helper.getParent().getJSRowObject();
 else     return null;
  }
  int rowIndex=-1;
  try {
    rowIndex=odiResult.getCurrentResultIndex();
  }
 catch (  BirtException e1) {
  }
  if (""String_Node_Str"".equalsIgnoreCase(name) || ""String_Node_Str"".equalsIgnoreCase(name)) {
    return new Integer(rowIndex);
  }
  if (rowIndex == currRowIndex && valueCacheMap.containsKey(name)) {
    return valueCacheMap.get(name);
  }
 else {
    Object value=null;
    try {
      IBinding binding=this.exprManager.getBinding(name);
      if (binding == null) {
        return new DataExceptionMocker(new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,name));
      }
      if (binding.getAggrFunction() != null)       return this.odiResult.getAggrValue(name);
      IBaseExpression dataExpr=this.exprManager.getExpr(name);
      if (dataExpr == null) {
        return new DataExceptionMocker(new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,name));
      }
      value=ExprEvaluateUtil.evaluateValue(dataExpr,this.odiResult.getCurrentResultIndex(),this.odiResult.getCurrentResult(),this.scope);
    }
 catch (    BirtException e) {
      value=null;
    }
    if (this.currRowIndex != rowIndex) {
      this.valueCacheMap.clear();
      this.currRowIndex=rowIndex;
    }
    value=JavascriptEvalUtil.convertToJavascriptValue(value,this.scope);
    valueCacheMap.put(name,value);
    return value;
  }
}",0.9964664310954064
74968,"public INode getParent(){
  return parent;
}","public IContainerNode getParent(){
  return parent;
}",0.9072164948453608
74969,"public void setParent(INode parent){
  this.parent=parent;
}","public void setParent(IContainerNode parent){
  this.parent=parent;
}",0.9302325581395348
74970,"/** 
 * Draws a line with the line-style specified in advance from the start position to the end position with the given linewidth, color, and style at the given pdf layer. If the line-style is NOT set before invoking this method, ""solid"" will be used as the default line-style.
 * @param startX the start X coordinate of the line.
 * @param startY the start Y coordinate of the line.
 * @param endX the end X coordinate of the line.
 * @param endY the end Y coordinate of the line.
 * @param width the lineWidth
 * @param color the color of the line.
 * @param lineStyle the style of the line.
 */
protected void drawLine(float startX,float startY,float endX,float endY,float width,Color color,String lineStyle){
  if (null == color || 0f == width || ""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
  contentByte.saveState();
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(3 * width,2 * width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(width,width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
 else {
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  contentByte.restoreState();
}","/** 
 * Draws a line with the line-style specified in advance from the start position to the end position with the given linewidth, color, and style at the given pdf layer. If the line-style is NOT set before invoking this method, ""solid"" will be used as the default line-style.
 * @param startX the start X coordinate of the line.
 * @param startY the start Y coordinate of the line.
 * @param endX the end X coordinate of the line.
 * @param endY the end Y coordinate of the line.
 * @param width the lineWidth
 * @param color the color of the line.
 * @param lineStyle the style of the line.
 */
protected void drawLine(float startX,float startY,float endX,float endY,float width,Color color,String lineStyle){
  if (null == color || 0f == width || ""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
  contentByte.saveState();
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineCap(PdfContentByte.LINE_CAP_PROJECTING_SQUARE);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(3 * width,2 * width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(width,width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
 else {
    contentByte.setLineCap(PdfContentByte.LINE_CAP_PROJECTING_SQUARE);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  contentByte.restoreState();
}",0.9525316455696202
74971,"/** 
 * Draws a container's border, and its background color/image if there is any.
 * @param container the containerArea whose border and background need to be drawed
 */
protected void drawContainer(IContainerArea container){
  IStyle style=container.getStyle();
  if (null == style) {
    return;
  }
  ContainerPosition curPos=getContainerPosition();
  if (container.getContent() != null) {
    int layoutX=curPos.x + getX(container);
    int layoutY=curPos.y + getY(container);
    int startX=layoutX;
    int startY=layoutY;
    int width=getWidth(container);
    int height=getHeight(container);
    Color bc=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BACKGROUND_COLOR));
    pageGraphic.drawBackgroundColor(bc,startX,startY,width,height);
    drawBackgroundImage(style,startX,startY,width,height);
    int borderTopWidth=getScaledValue(style.getProperty(StyleConstants.STYLE_BORDER_TOP_WIDTH));
    int borderLeftWidth=getScaledValue(style.getProperty(StyleConstants.STYLE_BORDER_LEFT_WIDTH));
    int borderBottomWidth=getScaledValue(style.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_WIDTH));
    int borderRightWidth=getScaledValue(style.getProperty(StyleConstants.STYLE_BORDER_RIGHT_WIDTH));
    if (borderTopWidth > 0 || borderLeftWidth > 0 || borderBottomWidth > 0 || borderRightWidth > 0) {
      Color borderTopColor=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BORDER_TOP_COLOR));
      Color borderRightColor=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BORDER_RIGHT_COLOR));
      Color borderBottomColor=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_COLOR));
      Color borderLeftColor=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BORDER_LEFT_COLOR));
      BorderInfo[] borders=new BorderInfo[4];
      borders[BorderInfo.TOP_BORDER]=new BorderInfo(layoutX,layoutY + borderTopWidth / 2,layoutX + getWidth(container),layoutY + borderTopWidth / 2,borderTopWidth,borderTopColor,style.getProperty(StyleConstants.STYLE_BORDER_TOP_STYLE),BorderInfo.TOP_BORDER);
      borders[BorderInfo.RIGHT_BORDER]=new BorderInfo(layoutX + getWidth(container) - borderRightWidth / 2,layoutY,layoutX + getWidth(container) - borderRightWidth / 2,layoutY + getHeight(container),borderRightWidth,borderRightColor,style.getProperty(StyleConstants.STYLE_BORDER_RIGHT_STYLE),BorderInfo.RIGHT_BORDER);
      borders[BorderInfo.BOTTOM_BORDER]=new BorderInfo(layoutX,layoutY + getHeight(container) - borderBottomWidth / 2,layoutX + getWidth(container),layoutY + getHeight(container) - borderBottomWidth / 2,borderBottomWidth,borderBottomColor,style.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_STYLE),BorderInfo.BOTTOM_BORDER);
      borders[BorderInfo.LEFT_BORDER]=new BorderInfo(layoutX + borderLeftWidth / 2,layoutY,layoutX + borderLeftWidth / 2,layoutY + getHeight(container),borderLeftWidth,borderLeftColor,style.getProperty(StyleConstants.STYLE_BORDER_LEFT_STYLE),BorderInfo.LEFT_BORDER);
      drawBorder(borders);
    }
  }
}","/** 
 * Draws a container's border, and its background color/image if there is any.
 * @param container the containerArea whose border and background need to be drawed
 */
protected void drawContainer(IContainerArea container){
  IStyle style=container.getStyle();
  if (null == style) {
    return;
  }
  ContainerPosition curPos=getContainerPosition();
  if (container.getContent() != null) {
    int layoutX=curPos.x + getX(container);
    int layoutY=curPos.y + getY(container);
    int startX=layoutX;
    int startY=layoutY;
    int width=getWidth(container);
    int height=getHeight(container);
    Color bc=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BACKGROUND_COLOR));
    pageGraphic.drawBackgroundColor(bc,startX,startY,width,height);
    drawBackgroundImage(style,startX,startY,width,height);
    int borderTopWidth=getScaledValue(style.getProperty(StyleConstants.STYLE_BORDER_TOP_WIDTH));
    int borderLeftWidth=getScaledValue(style.getProperty(StyleConstants.STYLE_BORDER_LEFT_WIDTH));
    int borderBottomWidth=getScaledValue(style.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_WIDTH));
    int borderRightWidth=getScaledValue(style.getProperty(StyleConstants.STYLE_BORDER_RIGHT_WIDTH));
    if (borderTopWidth > 0 || borderLeftWidth > 0 || borderBottomWidth > 0 || borderRightWidth > 0) {
      Color borderTopColor=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BORDER_TOP_COLOR));
      Color borderRightColor=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BORDER_RIGHT_COLOR));
      Color borderBottomColor=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_COLOR));
      Color borderLeftColor=PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_BORDER_LEFT_COLOR));
      BorderInfo[] borders=new BorderInfo[4];
      borders[BorderInfo.TOP_BORDER]=new BorderInfo(layoutX + borderLeftWidth / 2,layoutY + borderTopWidth / 2,layoutX + getWidth(container) - borderRightWidth / 2,layoutY + borderTopWidth / 2,borderTopWidth,borderTopColor,style.getProperty(StyleConstants.STYLE_BORDER_TOP_STYLE),BorderInfo.TOP_BORDER);
      borders[BorderInfo.RIGHT_BORDER]=new BorderInfo(layoutX + getWidth(container) - borderRightWidth / 2,layoutY + borderTopWidth / 2,layoutX + getWidth(container) - borderRightWidth / 2,layoutY + getHeight(container) - borderBottomWidth / 2,borderRightWidth,borderRightColor,style.getProperty(StyleConstants.STYLE_BORDER_RIGHT_STYLE),BorderInfo.RIGHT_BORDER);
      borders[BorderInfo.BOTTOM_BORDER]=new BorderInfo(layoutX + borderLeftWidth / 2,layoutY + getHeight(container) - borderBottomWidth / 2,layoutX + getWidth(container) - borderRightWidth / 2,layoutY + getHeight(container) - borderBottomWidth / 2,borderBottomWidth,borderBottomColor,style.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_STYLE),BorderInfo.BOTTOM_BORDER);
      borders[BorderInfo.LEFT_BORDER]=new BorderInfo(layoutX + borderLeftWidth / 2,layoutY + borderTopWidth / 2,layoutX + borderLeftWidth / 2,layoutY + getHeight(container) - borderBottomWidth / 2,borderLeftWidth,borderLeftColor,style.getProperty(StyleConstants.STYLE_BORDER_LEFT_STYLE),BorderInfo.LEFT_BORDER);
      drawBorder(borders);
    }
  }
}",0.9710982658959536
74972,"/** 
 * Draws the borders of a container.
 * @param borders the border info
 */
private void drawBorder(BorderInfo[] borders){
  ArrayList dbl=null;
  ArrayList solid=null;
  ArrayList dashed=null;
  ArrayList dotted=null;
  for (int i=0; i < borders.length; i++) {
    if (IStyle.DOUBLE_VALUE.equals(borders[i].borderStyle)) {
      if (null == dbl) {
        dbl=new ArrayList();
      }
      dbl.add(borders[i]);
    }
 else     if (IStyle.DASHED_VALUE.equals(borders[i].borderStyle)) {
      if (null == dashed) {
        dashed=new ArrayList();
      }
      dashed.add(borders[i]);
    }
 else     if (IStyle.DOTTED_VALUE.equals(borders[i].borderStyle)) {
      if (null == dotted) {
        dotted=new ArrayList();
      }
      dotted.add(borders[i]);
    }
 else {
      if (null == solid) {
        solid=new ArrayList();
      }
      solid.add(borders[i]);
    }
  }
  if (null != dotted) {
    for (Iterator it=dotted.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != dashed) {
    for (Iterator it=dashed.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != solid) {
    for (Iterator it=solid.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != dbl) {
    for (Iterator it=dbl.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      int borderWidth=bi.borderWidth;
      int outerBorderWidth=borderWidth / 4;
      int innerBorderWidth=borderWidth / 4;
      int startX=bi.startX;
      int startY=bi.startY;
      int endX=bi.endX;
      int endY=bi.endY;
      Color borderColor=bi.borderColor;
switch (bi.borderType) {
case BorderInfo.TOP_BORDER:
        pageGraphic.drawLine(startX,startY - borderWidth / 2 + outerBorderWidth / 2,endX,endY - borderWidth / 2 + outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
      pageGraphic.drawLine(startX,startY + borderWidth / 2 - innerBorderWidth / 2,endX,endY + borderWidth / 2 - innerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
    break;
case BorderInfo.RIGHT_BORDER:
  pageGraphic.drawLine(startX + borderWidth / 2 - outerBorderWidth / 2,startY,endX + borderWidth / 2 - outerBorderWidth / 2,endY,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX - borderWidth / 2 + innerBorderWidth / 2,startY,endX - borderWidth / 2 + innerBorderWidth / 2,endY,innerBorderWidth,borderColor,""String_Node_Str"");
break;
case BorderInfo.BOTTOM_BORDER:
pageGraphic.drawLine(startX,startY + borderWidth / 2 - outerBorderWidth / 2,endX,endY + borderWidth / 2 - outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX,startY - borderWidth / 2 + innerBorderWidth / 2,endX,endY - borderWidth / 2 + innerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
break;
case BorderInfo.LEFT_BORDER:
pageGraphic.drawLine(startX - borderWidth / 2 + outerBorderWidth / 2,startY,endX - borderWidth / 2 + outerBorderWidth / 2,endY,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX + borderWidth / 2 - innerBorderWidth / 2,startY,endX + borderWidth / 2 - innerBorderWidth / 2,endY,innerBorderWidth,borderColor,""String_Node_Str"");
break;
}
}
}
}","/** 
 * Draws the borders of a container.
 * @param borders the border info
 */
private void drawBorder(BorderInfo[] borders){
  ArrayList dbl=null;
  ArrayList solid=null;
  ArrayList dashed=null;
  ArrayList dotted=null;
  for (int i=0; i < borders.length; i++) {
    if (IStyle.DOUBLE_VALUE.equals(borders[i].borderStyle)) {
      if (null == dbl) {
        dbl=new ArrayList();
      }
      dbl.add(borders[i]);
    }
 else     if (IStyle.DASHED_VALUE.equals(borders[i].borderStyle)) {
      if (null == dashed) {
        dashed=new ArrayList();
      }
      dashed.add(borders[i]);
    }
 else     if (IStyle.DOTTED_VALUE.equals(borders[i].borderStyle)) {
      if (null == dotted) {
        dotted=new ArrayList();
      }
      dotted.add(borders[i]);
    }
 else {
      if (null == solid) {
        solid=new ArrayList();
      }
      solid.add(borders[i]);
    }
  }
  if (null != dotted) {
    for (Iterator it=dotted.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != dashed) {
    for (Iterator it=dashed.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != solid) {
    for (Iterator it=solid.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != dbl) {
    for (Iterator it=dbl.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      int borderWidth=bi.borderWidth;
      int outerBorderWidth=borderWidth / 4;
      int innerBorderWidth=borderWidth / 4;
      int startX=bi.startX;
      int startY=bi.startY;
      int endX=bi.endX;
      int endY=bi.endY;
      Color borderColor=bi.borderColor;
switch (bi.borderType) {
case BorderInfo.TOP_BORDER:
        pageGraphic.drawLine(startX - borderWidth / 2 + outerBorderWidth / 2,startY - borderWidth / 2 + outerBorderWidth / 2,endX + borderWidth / 2 - outerBorderWidth / 2,endY - borderWidth / 2 + outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
      pageGraphic.drawLine(startX - borderWidth / 2 + outerBorderWidth / 2,startY + borderWidth / 2 - innerBorderWidth / 2,endX + borderWidth / 2 - outerBorderWidth / 2,endY + borderWidth / 2 - innerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
    break;
case BorderInfo.RIGHT_BORDER:
  pageGraphic.drawLine(startX + borderWidth / 2 - outerBorderWidth / 2,startY - borderWidth / 2 + outerBorderWidth / 2,endX + borderWidth / 2 - outerBorderWidth / 2,endY + borderWidth / 2 - outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX - borderWidth / 2 + innerBorderWidth / 2,startY - borderWidth / 2 + outerBorderWidth / 2,endX - borderWidth / 2 + innerBorderWidth / 2,endY + borderWidth / 2 - outerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
break;
case BorderInfo.BOTTOM_BORDER:
pageGraphic.drawLine(startX - borderWidth / 2 + outerBorderWidth / 2,startY + borderWidth / 2 - outerBorderWidth / 2,endX + borderWidth / 2 - outerBorderWidth / 2,endY + borderWidth / 2 - outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX - borderWidth / 2 + outerBorderWidth / 2,startY - borderWidth / 2 + innerBorderWidth / 2,endX + borderWidth / 2 - outerBorderWidth / 2,endY - borderWidth / 2 + innerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
break;
case BorderInfo.LEFT_BORDER:
pageGraphic.drawLine(startX - borderWidth / 2 + outerBorderWidth / 2,startY - borderWidth / 2 + outerBorderWidth / 2,endX - borderWidth / 2 + outerBorderWidth / 2,endY + borderWidth / 2 - outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX + borderWidth / 2 - innerBorderWidth / 2,startY - borderWidth / 2 + outerBorderWidth / 2,endX + borderWidth / 2 - innerBorderWidth / 2,endY + borderWidth / 2 - outerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
break;
}
}
}
}",0.9168567807351076
74973,"/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.isToc=ParameterAccessor.isToc(request);
  this.reportPage=ParameterAccessor.getPage(request);
  this.reportPageRange=ParameterAccessor.getPageRange(request);
  this.action=ParameterAccessor.getAction(request);
  if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,true);
  }
 else {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,false);
  }
  this.reportDesignName=ParameterAccessor.getReport(request,null);
  this.format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.ACTION_PRINT.equalsIgnoreCase(action)) {
    if (ParameterAccessor.isSupportedPrintOnServer)     this.format=IBirtConstants.POSTSCRIPT_RENDER_FORMAT;
 else     this.action=null;
  }
  this.maxRows=ParameterAccessor.getMaxRows(request);
  BirtResources.setLocale(ParameterAccessor.getLocale(request));
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  this.requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  processReport(request);
  this.reportTitle=ParameterAccessor.getTitle(request);
  this.isShowTitle=ParameterAccessor.isShowTitle(request);
  this.isShowToolbar=ParameterAccessor.isShowToolbar(request);
  this.isShowNavigationbar=ParameterAccessor.isShowNavigationbar(request);
  this.moduleOptions=BirtUtility.getModuleOptions(request);
  this.reportDesignHandle=getDesignHandle(request);
  if (this.reportDesignHandle == null)   return;
  ParameterAccessor.setClean(request);
  __initParameters(request);
}","/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request) && (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(request.getServletPath())|| IBirtConstants.SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath()))) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.isToc=ParameterAccessor.isToc(request);
  this.reportPage=ParameterAccessor.getPage(request);
  this.reportPageRange=ParameterAccessor.getPageRange(request);
  this.action=ParameterAccessor.getAction(request);
  if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,true);
  }
 else {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,false);
  }
  this.reportDesignName=ParameterAccessor.getReport(request,null);
  this.format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.ACTION_PRINT.equalsIgnoreCase(action)) {
    if (ParameterAccessor.isSupportedPrintOnServer)     this.format=IBirtConstants.POSTSCRIPT_RENDER_FORMAT;
 else     this.action=null;
  }
  this.maxRows=ParameterAccessor.getMaxRows(request);
  BirtResources.setLocale(ParameterAccessor.getLocale(request));
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  this.requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  processReport(request);
  this.reportTitle=ParameterAccessor.getTitle(request);
  this.isShowTitle=ParameterAccessor.isShowTitle(request);
  this.isShowToolbar=ParameterAccessor.isShowToolbar(request);
  this.isShowNavigationbar=ParameterAccessor.isShowNavigationbar(request);
  this.moduleOptions=BirtUtility.getModuleOptions(request);
  this.reportDesignHandle=getDesignHandle(request);
  if (this.reportDesignHandle == null)   throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_NO_REPORT_DESIGN);
  ParameterAccessor.setClean(request);
  __initParameters(request);
}",0.9029535864978904
74974,"/** 
 * @throws BirtException
 */
private void useCache3() throws BirtException {
  DataEngine myDataEngine=newDataEngine();
  IResultIterator parentRi=getResultIterator1(myDataEngine);
  parentRi.next();
  IResultIterator ri=parentRi.getSecondaryIterator(""String_Node_Str"",scope);
  Iterator it=this.expectedValue.iterator();
  while (ri.next()) {
    String str=""String_Node_Str"";
    Object ob1=it.next();
    Object ob2=ri.getValue(""String_Node_Str"");
    assertEquals(ob1,ob2);
    str+=""String_Node_Str"" + ob2.toString();
    System.out.println(""String_Node_Str"" + str);
  }
  ri.close();
  parentRi.close();
  myDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void useCache3() throws BirtException {
  myDataEngine=newDataEngine();
  IResultIterator parentRi=getResultIterator1(myDataEngine);
  parentRi.next();
  IResultIterator ri=parentRi.getSecondaryIterator(""String_Node_Str"",scope);
  Iterator it=this.expectedValue.iterator();
  while (ri.next()) {
    String str=""String_Node_Str"";
    Object ob1=it.next();
    Object ob2=ri.getValue(""String_Node_Str"");
    assertEquals(ob1,ob2);
    str+=""String_Node_Str"" + ob2.toString();
    System.out.println(""String_Node_Str"" + str);
  }
  ri.close();
  parentRi.close();
  myDataEngine.shutdown();
}",0.9913725490196078
74975,"/** 
 * @throws BirtException
 */
private void genCache3() throws BirtException {
  this.dataSet.setCacheRowCount(4);
  DataEngine myDataEngine=newDataEngine();
  IResultIterator parentRi=getResultIterator1(myDataEngine);
  parentRi.next();
  IResultIterator ri=parentRi.getSecondaryIterator(""String_Node_Str"",scope);
  ;
  while (ri.next()) {
    expectedValue.add(ri.getValue(""String_Node_Str""));
  }
  assertEquals(expectedValue.size(),1);
  ri.close();
  parentRi.close();
  myDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void genCache3() throws BirtException {
  this.dataSet.setCacheRowCount(4);
  myDataEngine=newDataEngine();
  IResultIterator parentRi=getResultIterator1(myDataEngine);
  parentRi.next();
  IResultIterator ri=parentRi.getSecondaryIterator(""String_Node_Str"",scope);
  ;
  while (ri.next()) {
    expectedValue.add(ri.getValue(""String_Node_Str""));
  }
  assertEquals(expectedValue.size(),1);
  ri.close();
  parentRi.close();
  myDataEngine.shutdown();
}",0.988988988988989
74976,"/** 
 * Test feature of whether cache will be used
 * @throws BirtException
 */
public void testUseCache() throws BirtException {
  this.dataSet.setCacheRowCount(4);
  DataEngineImpl myDataEngine=newDataEngine();
  assertFalse(getDataSetCacheManager(myDataEngine).doesLoadFromCache());
  assertFalse(getDataSetCacheManager(myDataEngine).doesSaveToCache());
  QueryDefinition qd=this.newReportQuery();
  rowBeArray=getRowExpr();
  totalBeArray=getAggrExpr();
  bindingNameRow=getRowExprName();
  bindingExprRow=getAggrExprName();
  prepareExprNameAndQuery(rowBeArray,bindingNameRow,totalBeArray,bindingExprRow,qd);
  IQueryResults qr=myDataEngine.prepare(qd,appContextMap).execute(null);
  qr.getResultIterator().next();
  qr.close();
  assertTrue(getDataSetCacheManager(myDataEngine).doesLoadFromCache());
  assertFalse(getDataSetCacheManager(myDataEngine).doesSaveToCache());
  getDataSetCacheManager(myDataEngine).resetForTest();
  myDataEngine.shutdown();
}","/** 
 * Test feature of whether cache will be used
 * @throws BirtException
 */
public void testUseCache() throws BirtException {
  this.dataSet.setCacheRowCount(4);
  myDataEngine=newDataEngine();
  assertFalse(getDataSetCacheManager(myDataEngine).doesLoadFromCache());
  assertFalse(getDataSetCacheManager(myDataEngine).doesSaveToCache());
  QueryDefinition qd=this.newReportQuery();
  rowBeArray=getRowExpr();
  totalBeArray=getAggrExpr();
  bindingNameRow=getRowExprName();
  bindingExprRow=getAggrExprName();
  prepareExprNameAndQuery(rowBeArray,bindingNameRow,totalBeArray,bindingExprRow,qd);
  IQueryResults qr=myDataEngine.prepare(qd,appContextMap).execute(null);
  qr.getResultIterator().next();
  qr.close();
  assertTrue(getDataSetCacheManager(myDataEngine).doesLoadFromCache());
  assertFalse(getDataSetCacheManager(myDataEngine).doesSaveToCache());
  getDataSetCacheManager(myDataEngine).resetForTest();
  myDataEngine.shutdown();
}",0.9921259842519684
74977,"/** 
 * @throws BirtException
 */
public void testUseAppContextCacheRowLimit3() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(100);
  DataEngineContext dec=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  DataEngineImpl myDataEngine=(DataEngineImpl)DataEngine.newDataEngine(dec);
  myDataEngine.defineDataSource(this.dataSource);
  myDataEngine.defineDataSet(this.dataSet);
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(4));
  this.testUseCache1();
}","/** 
 * @throws BirtException
 */
public void testUseAppContextCacheRowLimit3() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(100);
  DataEngineContext dec=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  myDataEngine=(DataEngineImpl)DataEngine.newDataEngine(dec);
  myDataEngine.defineDataSource(this.dataSource);
  myDataEngine.defineDataSet(this.dataSet);
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(4));
  this.testUseCache1();
}",0.985781990521327
74978,"/** 
 * @throws BirtException
 */
public void testUseAppContextCacheRowLimit1() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(100);
  DataEngineContext dec=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  dec.setCacheOption(DataEngineContext.CACHE_USE_ALWAYS,100);
  DataEngineImpl myDataEngine=(DataEngineImpl)DataEngine.newDataEngine(dec);
  myDataEngine.defineDataSource(this.dataSource);
  myDataEngine.defineDataSet(this.dataSet);
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(0));
  this.testUseCache1();
}","/** 
 * @throws BirtException
 */
public void testUseAppContextCacheRowLimit1() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(100);
  DataEngineContext dec=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  dec.setCacheOption(DataEngineContext.CACHE_USE_ALWAYS,100);
  myDataEngine=(DataEngineImpl)DataEngine.newDataEngine(dec);
  myDataEngine.defineDataSource(this.dataSource);
  myDataEngine.defineDataSet(this.dataSet);
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(0));
  this.testUseCache1();
}",0.9872773536895676
74979,"/** 
 * @throws BirtException
 */
private void genCache() throws BirtException {
  this.dataSet.setCacheRowCount(4);
  DataEngine myDataEngine=newDataEngine();
  IResultIterator ri=getResultIterator1(myDataEngine);
  while (ri.next()) {
    for (int i=0; i < bindingNameRow.length; i++)     expectedValue.add(ri.getValue(bindingNameRow[i]));
    for (int i=0; i < totalBeArray.length; i++)     expectedValue.add(ri.getValue(bindingExprRow[i]));
  }
  ri.close();
  myDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void genCache() throws BirtException {
  this.dataSet.setCacheRowCount(4);
  myDataEngine=newDataEngine();
  IResultIterator ri=getResultIterator1(myDataEngine);
  while (ri.next()) {
    for (int i=0; i < bindingNameRow.length; i++)     expectedValue.add(ri.getValue(bindingNameRow[i]));
    for (int i=0; i < totalBeArray.length; i++)     expectedValue.add(ri.getValue(bindingExprRow[i]));
  }
  ri.close();
  myDataEngine.shutdown();
}",0.988671472708548
74980,"/** 
 * Test acqurire inexist save cache result meta 
 */
public void testUseCachedMeta2() throws BirtException {
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(0));
  this.genCache();
  DataEngine myDataEngine=newDataEngine();
  IResultMetaData meta=myDataEngine.getCachedDataSetMetaData(dataSource,dataSet);
  assertTrue(meta == null);
}","/** 
 * Test acqurire inexist save cache result meta 
 */
public void testUseCachedMeta2() throws BirtException {
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(0));
  this.genCache();
  myDataEngine=newDataEngine();
  IResultMetaData meta=myDataEngine.getCachedDataSetMetaData(dataSource,dataSet);
  assertTrue(meta == null);
}",0.9847009735744088
74981,"public void setUp() throws Exception {
  super.setUp();
  Context context=Context.enter();
  scope=context.initStandardObjects();
  Context.exit();
  expectedValue=new ArrayList();
  appContextMap.put(DataEngine.DATASET_CACHE_OPTION,""String_Node_Str"");
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,null);
  DataEngine myDataEngine=newDataEngine();
  myDataEngine.clearCache(this.dataSource,this.dataSet);
}","public void setUp() throws Exception {
  super.setUp();
  Context context=Context.enter();
  scope=context.initStandardObjects();
  Context.exit();
  expectedValue=new ArrayList();
  appContextMap.put(DataEngine.DATASET_CACHE_OPTION,""String_Node_Str"");
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,null);
  myDataEngine=newDataEngine();
}",0.9123711340206184
74982,"/** 
 * @throws BirtException
 */
public void testUseAppContextMemoryCache2() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(2);
  DataEngineContext dec=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  dec.setCacheOption(DataEngineContext.CACHE_USE_ALWAYS,3);
  DataEngineImpl myDataEngine=(DataEngineImpl)DataEngine.newDataEngine(dec);
  myDataEngine.defineDataSource(this.dataSource);
  myDataEngine.defineDataSet(this.dataSet);
  this.appContextMap.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(3));
  this.testUseCache1();
}","/** 
 * @throws BirtException
 */
public void testUseAppContextMemoryCache2() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(2);
  DataEngineContext dec=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  dec.setCacheOption(DataEngineContext.CACHE_USE_ALWAYS,3);
  myDataEngine=(DataEngineImpl)DataEngine.newDataEngine(dec);
  myDataEngine.defineDataSource(this.dataSource);
  myDataEngine.defineDataSet(this.dataSet);
  this.appContextMap.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(3));
  this.testUseCache1();
}",0.9870801033591732
74983,"/** 
 * Test acqurire save cache result meta 
 */
public void testUseCachedMeta1() throws BirtException {
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(1));
  this.genCache();
  DataEngine myDataEngine=newDataEngine();
  IResultMetaData meta=myDataEngine.getCachedDataSetMetaData(dataSource,dataSet);
  assertTrue(meta != null);
  assertTrue(meta.getColumnCount() == 6);
}","/** 
 * Test acquire saved cache result meta 
 */
public void testUseCachedMeta1() throws BirtException {
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,new Integer(1));
  this.genCache();
  myDataEngine=newDataEngine();
  IResultMetaData meta=myDataEngine.getCachedDataSetMetaData(dataSource,dataSet);
  assertTrue(meta != null);
  assertTrue(meta.getColumnCount() == 6);
}",0.983481575603558
74984,"/** 
 * @throws BirtException
 */
public void testUseAppContextMemoryCache1() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(7);
  DataEngineContext dec=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  dec.setCacheOption(DataEngineContext.CACHE_USE_ALWAYS,100);
  DataEngineImpl myDataEngine=(DataEngineImpl)DataEngine.newDataEngine(dec);
  myDataEngine.defineDataSource(this.dataSource);
  myDataEngine.defineDataSet(this.dataSet);
  this.appContextMap.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(7));
  this.testUseCache1();
}","/** 
 * @throws BirtException
 */
public void testUseAppContextMemoryCache1() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(7);
  DataEngineContext dec=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);
  dec.setCacheOption(DataEngineContext.CACHE_USE_ALWAYS,100);
  myDataEngine=(DataEngineImpl)DataEngine.newDataEngine(dec);
  myDataEngine.defineDataSource(this.dataSource);
  myDataEngine.defineDataSet(this.dataSet);
  this.appContextMap.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(7));
  this.testUseCache1();
}",0.9871244635193132
74985,"/** 
 * Test feature of whether cache will be used
 * @throws BirtException
 */
public void testUseCache1() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(100);
  DataEngineImpl myDataEngine=newDataEngine();
  assertFalse(getDataSetCacheManager(myDataEngine).doesLoadFromCache());
  assertFalse(getDataSetCacheManager(myDataEngine).doesSaveToCache());
  executeQuery(myDataEngine);
}","/** 
 * Test feature of whether cache will be used
 * @throws BirtException
 */
public void testUseCache1() throws BirtException, Exception {
  this.dataSet.setCacheRowCount(100);
  myDataEngine=newDataEngine();
  assertFalse(getDataSetCacheManager(myDataEngine).doesLoadFromCache());
  assertFalse(getDataSetCacheManager(myDataEngine).doesSaveToCache());
  executeQuery(myDataEngine);
}",0.9809885931558936
74986,"public void tearDown() throws Exception {
  super.tearDown();
}","public void tearDown() throws Exception {
  super.tearDown();
  myDataEngine.clearCache(this.dataSource,this.dataSet);
}",0.6885245901639344
74987,"/** 
 * @throws BirtException
 */
private void useCache() throws BirtException {
  DataEngine myDataEngine=newDataEngine();
  IResultIterator ri=getResultIterator1(myDataEngine);
  checkResult(ri);
  ri.close();
  myDataEngine.shutdown();
}","/** 
 * @throws BirtException
 */
private void useCache() throws BirtException {
  myDataEngine=newDataEngine();
  IResultIterator ri=getResultIterator1(myDataEngine);
  checkResult(ri);
  ri.close();
  myDataEngine.shutdown();
}",0.976545842217484
74988,"/** 
 * Test acqurire save cache result meta 
 */
public void testUseMemoryCachedMeta1() throws BirtException {
  this.appContextMap.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(1));
  this.genCache();
  DataEngine myDataEngine=newDataEngine();
  IResultMetaData meta=myDataEngine.getCachedDataSetMetaData(dataSource,dataSet);
  assertTrue(meta != null);
  assertTrue(meta.getColumnCount() == 6);
}","/** 
 * Test acqurire save cache result meta 
 */
public void testUseMemoryCachedMeta1() throws BirtException {
  this.appContextMap.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(1));
  this.genCache();
  myDataEngine=newDataEngine();
  IResultMetaData meta=myDataEngine.getCachedDataSetMetaData(dataSource,dataSet);
  assertTrue(meta != null);
  assertTrue(meta.getColumnCount() == 6);
}",0.9861286254728878
74989,"/** 
 * Test acqurire inexist save cache result meta 
 */
public void testUseMemoryCachedMeta2() throws BirtException {
  this.appContextMap.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(0));
  DataEngine myDataEngine=newDataEngine();
  IResultIterator ri=getResultIterator1(myDataEngine);
  while (ri.next()) {
    for (int i=0; i < bindingNameRow.length; i++)     expectedValue.add(ri.getValue(bindingNameRow[i]));
    for (int i=0; i < totalBeArray.length; i++)     expectedValue.add(ri.getValue(bindingExprRow[i]));
  }
  ri.close();
  IResultMetaData meta=myDataEngine.getCachedDataSetMetaData(dataSource,dataSet);
  assertTrue(meta == null);
}","/** 
 * Test acqurire inexist save cache result meta 
 */
public void testUseMemoryCachedMeta2() throws BirtException {
  this.appContextMap.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(0));
  myDataEngine=newDataEngine();
  IResultIterator ri=getResultIterator1(myDataEngine);
  while (ri.next()) {
    for (int i=0; i < bindingNameRow.length; i++)     expectedValue.add(ri.getValue(bindingNameRow[i]));
    for (int i=0; i < totalBeArray.length; i++)     expectedValue.add(ri.getValue(bindingExprRow[i]));
  }
  ri.close();
  IResultMetaData meta=myDataEngine.getCachedDataSetMetaData(dataSource,dataSet);
  assertTrue(meta == null);
}",0.991492652745553
74990,"/** 
 * This method is invoked when the find button is clicked It populates the Available Data Base obecets ( in the Tree control )
 */
protected void populateAvailableDbObjects(){
  DataSetDesign dataSetDesign=getDataSetDesign();
  DataSourceDesign curDataSourceDesign=dataSetDesign.getDataSourceDesign();
  if (curDataSourceDesign == prevDataSourceDesign) {
    if ((cachedSearchTxt == searchTxt.getText() || (cachedSearchTxt != null && cachedSearchTxt.equals(searchTxt.getText()))) && (cachedDbType == getSelectedDbType() || (cachedDbType != null && cachedDbType.equals(getSelectedDbType())))) {
      if (schemaList != null && schemaList.size() > 0) {
        if (cachedSchemaComboIndex == schemaCombo.getSelectionIndex()) {
          return;
        }
      }
 else       return;
    }
  }
  RemoveAllAvailableDbObjects();
  setRootElement();
  setRefreshInfo();
  if (isSchemaSupported) {
    populateSchemaList();
  }
 else {
    populateTableList();
  }
  addFetchDbObjectListener();
  if (rootNode != null) {
    selectNode(rootNode);
  }
}","/** 
 * This method is invoked when the find button is clicked It populates the Available Data Base obecets ( in the Tree control )
 */
protected void populateAvailableDbObjects(){
  DataSetDesign dataSetDesign=getDataSetDesign();
  DataSourceDesign curDataSourceDesign=dataSetDesign.getDataSourceDesign();
  if (curDataSourceDesign == prevDataSourceDesign) {
    if ((cachedSearchTxt == searchTxt.getText() || (cachedSearchTxt != null && cachedSearchTxt.equals(searchTxt.getText()))) && (cachedDbType == getSelectedDbType() || (cachedDbType != null && cachedDbType.equals(getSelectedDbType())))) {
      if (schemaList != null && schemaList.size() > 0) {
        if (cachedSchemaComboIndex == schemaCombo.getSelectionIndex()) {
          return;
        }
      }
 else       return;
    }
  }
  removeAllAvailableDbObjects();
  setRootElement();
  setRefreshInfo();
  if (isSchemaSupported) {
    populateSchemaList();
  }
 else {
    populateTableList();
  }
  addFetchDbObjectListener();
  if (rootNode != null) {
    selectNode(rootNode);
  }
}",0.9990467111534796
74991,"/** 
 * Initializes the Jdbc related information , used  by this page ( such as the Jdbc Connection , Catalog Name etc )
 * @param curDataSourceHandle
 */
protected void resetJdbcInfo(DataSourceDesign curDataSourceDesign){
  if (metaDataProvider != null) {
    metaDataProvider.closeConnection();
    metaDataProvider=null;
    createMetaDataProvider();
    jdbcConnection=connectMetadataProvider(metaDataProvider,curDataSourceDesign);
    tableList=null;
    schemaList=null;
    schemaCombo.removeAll();
  }
  try {
    if (jdbcConnection != null) {
      isSchemaSupported=metaDataProvider.isSchemaSupported();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.showException(this.getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
}","/** 
 * Initializes the Jdbc related information , used  by this page ( such as the Jdbc Connection , Catalog Name etc )
 * @param curDataSourceHandle
 */
protected void resetJdbcInfo(DataSourceDesign curDataSourceDesign){
  try {
    if (metaDataProvider != null) {
      metaDataProvider.closeConnection();
      metaDataProvider=null;
      createMetaDataProvider();
      if (jdbcConnection != null) {
        jdbcConnection.close();
        jdbcConnection=null;
      }
      jdbcConnection=connectMetadataProvider(metaDataProvider,curDataSourceDesign);
      tableList=null;
      schemaList=null;
      schemaCombo.removeAll();
    }
    if (jdbcConnection != null) {
      isSchemaSupported=metaDataProvider.isSchemaSupported();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.showException(this.getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
}",0.917507418397626
74992,"/** 
 * refresh page
 */
private void refreshPage(){
  DataSourceDesign curDataSourceDesign=this.getDataSetDesign().getDataSourceDesign();
  if (curDataSourceDesign != prevDataSourceDesign) {
    RemoveAllAvailableDbObjects();
    resetJdbcInfo(curDataSourceDesign);
    enableSchemaComponent(isSchemaSupported);
    setRootElement();
    sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(curDataSourceDesign);
    populateAvailableDbObjects();
    prevDataSourceDesign=curDataSourceDesign;
    try {
      if (metaDataProvider.getConnection() == null || this.getDataSetDesign().getQueryText() == null || this.getDataSetDesign().getQueryText().trim().length() == 0)       return;
      ResultSetMetaData meta=null;
      try {
        meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).getMetaData();
      }
 catch (      SQLException e) {
        try {
          meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).executeQuery().getMetaData();
        }
 catch (        Exception ex) {
          meta=null;
        }
      }
      if (meta == null)       return;
      if (this.getDataSetDesign().getPrimaryResultSet() == null) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
      if (meta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
        ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
        if (!(cd.getAttributes().getName().equals(meta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == meta.getColumnType(i + 1))) {
          this.shouldUpdateDataSetDesign=true;
          return;
        }
      }
    }
 catch (    SQLException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
  }
}","/** 
 * refresh page
 */
private void refreshPage(){
  DataSourceDesign curDataSourceDesign=this.getDataSetDesign().getDataSourceDesign();
  if (curDataSourceDesign != prevDataSourceDesign) {
    resetJdbcInfo(curDataSourceDesign);
    setPageLayout();
    prevDataSourceDesign=curDataSourceDesign;
  }
}",0.2066045723962743
74993,"/** 
 * initial dataset control
 */
private void initializeControl(){
  isPageInitialization=true;
  initializeSchemaPrefetchConfig();
  DEFAULT_MESSAGE=JdbcPlugin.getResourceString(""String_Node_Str"");
  setMessage(DEFAULT_MESSAGE,IMessageProvider.NONE);
  refreshPage();
  prepareUI();
}","/** 
 * initial dataset control
 */
private void initializeControl(){
  isPageInitialization=true;
  initializeSchemaPrefetchConfig();
  DEFAULT_MESSAGE=JdbcPlugin.getResourceString(""String_Node_Str"");
  setMessage(DEFAULT_MESSAGE,IMessageProvider.NONE);
  setPageLayout();
  prevDataSourceDesign=this.getDataSetDesign().getDataSourceDesign();
  prepareUI();
}",0.8580246913580247
74994,"/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    Object result=executionContext.evaluate(source);
    if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
      throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName,source});
    }
  }
  if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    if (paramValue instanceof Number)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getCanonicalName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    if (paramValue instanceof Date)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getCanonicalName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) {
    if (paramValue instanceof java.sql.Date)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getCanonicalName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) {
    if (paramValue instanceof java.sql.Time)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getCanonicalName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    if (paramHandle.isRequired()) {
      String value=paramValue.toString().trim();
      if (value.length() == 0) {
        throw new ParameterValidationException(MessageConstants.BLANK_PARAMETER_EXCEPTION,new String[]{paramName});
      }
    }
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    if (paramValue instanceof Boolean)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getCanonicalName()});
  }
  return true;
}","/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    Object result=executionContext.evaluate(source);
    if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
      throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName,source});
    }
  }
  if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    if (paramValue instanceof Number)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    if (paramValue instanceof Date)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) {
    if (paramValue instanceof java.sql.Date)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) {
    if (paramValue instanceof java.sql.Time)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    if (paramHandle.isRequired()) {
      String value=paramValue.toString().trim();
      if (value.length() == 0) {
        throw new ParameterValidationException(MessageConstants.BLANK_PARAMETER_EXCEPTION,new String[]{paramName});
      }
    }
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    if (paramValue instanceof Boolean)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getName()});
  }
  return true;
}",0.9922023912666782
74995,"public boolean close(){
}","public boolean close(){
  IDialogSettings setting=getDialogBoundsSettings();
  setting.put(SASHFORM_LEFT,widthHints[0]);
  setting.put(SASHFORM_RIGHT,widthHints[1]);
  return super.close();
}",0.2314814814814814
74996,"protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  layout.marginWidth=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
  layout.marginHeight=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
  layout.verticalSpacing=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
  composite.setLayout(layout);
  sashForm=new SashForm(composite,SWT.NONE);
  sashForm.setOrientation(SWT.HORIZONTAL);
  sashForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  createTreeViewer(sashForm);
  createPropertyPane(sashForm);
  Label label=new Label(composite,SWT.HORIZONTAL | SWT.SEPARATOR);
  label.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  initTreeSelection();
  return composite;
}","protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  layout.marginWidth=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
  layout.marginHeight=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
  layout.verticalSpacing=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
  composite.setLayout(layout);
  container=new Composite(composite,SWT.NONE);
  layout=new GridLayout();
  layout.numColumns=3;
  layout.marginWidth=0;
  layout.marginHeight=0;
  layout.horizontalSpacing=2;
  container.setLayout(layout);
  container.setLayoutData(new GridData(GridData.FILL_BOTH));
  treeViewer=createTreeViewer(container);
  treeViewer.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  Sash sash=createSash(container);
  pageContainer=createPropertyPane(container);
  pageContainer.setLayoutData(new GridData(GridData.FILL_BOTH));
  addDragListerner(sash,container,treeViewer,pageContainer);
  Label label=new Label(composite,SWT.HORIZONTAL | SWT.SEPARATOR);
  label.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  initTreeSelection();
  return composite;
}",0.7294332723948812
74997,"protected void initializeBounds(){
  try {
    IDialogSettings setting=getDialogBoundsSettings();
    int leftWeight=setting.getInt(SASHFORM_LEFT);
    int rightWeight=setting.getInt(SASHFORM_RIGHT);
    sashForm.setWeights(new int[]{leftWeight,rightWeight});
  }
 catch (  NumberFormatException e) {
    sashForm.setWeights(new int[]{20,80});
  }
  super.initializeBounds();
}","protected void initializeBounds(){
  try {
    IDialogSettings setting=getDialogBoundsSettings();
    widthHints[0]=setting.getInt(SASHFORM_LEFT);
    widthHints[1]=setting.getInt(SASHFORM_RIGHT);
  }
 catch (  NumberFormatException e) {
    final int total=getDefaultSize().x;
    widthHints[0]=(int)(total * 0.2);
    widthHints[1]=(int)(total * 0.8);
  }
  GridData data=(GridData)treeViewer.getLayoutData();
  data.widthHint=widthHints[0];
  data=(GridData)pageContainer.getLayoutData();
  data.widthHint=widthHints[1];
  container.layout(true);
  super.initializeBounds();
}",0.4665271966527197
74998,"/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    log.log(Level.SEVERE,""String_Node_Str"",paramName);
    throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    Object result=executionContext.evaluate(source);
    if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
      log.log(Level.SEVERE,""String_Node_Str"",source);
      throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName,source});
    }
  }
  if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    if (paramValue instanceof Number)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,""String_Node_Str""});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    if (paramValue instanceof Date)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,""String_Node_Str""});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) {
    if (paramValue instanceof java.sql.Date)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,""String_Node_Str""});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) {
    if (paramValue instanceof java.sql.Time)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,""String_Node_Str""});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    String value=paramValue.toString().trim();
    if (paramHandle.isRequired() && value.equals(""String_Node_Str"")) {
      throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,""String_Node_Str""});
    }
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    if (paramValue instanceof Boolean)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,""String_Node_Str""});
  }
  return true;
}","/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    Object result=executionContext.evaluate(source);
    if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
      throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName,source});
    }
  }
  if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    if (paramValue instanceof Number)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getCanonicalName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    if (paramValue instanceof Date)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getCanonicalName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) {
    if (paramValue instanceof java.sql.Date)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getCanonicalName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) {
    if (paramValue instanceof java.sql.Time)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getCanonicalName()});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    if (paramHandle.isRequired()) {
      String value=paramValue.toString().trim();
      if (value.length() == 0) {
        throw new ParameterValidationException(MessageConstants.BLANK_PARAMETER_EXCEPTION,new String[]{paramName});
      }
    }
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    if (paramValue instanceof Boolean)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,paramValue.getClass().getCanonicalName()});
  }
  return true;
}",0.878902229845626
74999,"/** 
 * Unload any resources associated with the graphic context
 */
public void flush(){
  StringBuffer buffer=new StringBuffer(EventHandlers.content);
  codeScript.appendChild(dom.createCDATASection(buffer.append(scriptBuffer).toString()));
  buffer=new StringBuffer(EventHandlers.styles);
  styles.appendChild(dom.createCDATASection(buffer.append(styleBuffer).toString()));
  scriptBuffer=new StringBuffer();
  styleBuffer=new StringBuffer();
}","/** 
 * Unload any resources associated with the graphic context
 */
public void flush(){
  StringBuffer buffer=new StringBuffer(EventHandlers.content.toString());
  codeScript.appendChild(dom.createCDATASection(buffer.append(scriptBuffer).toString()));
  buffer=new StringBuffer(EventHandlers.styles.toString());
  styles.appendChild(dom.createCDATASection(buffer.append(styleBuffer).toString()));
  scriptBuffer=new StringBuffer();
  styleBuffer=new StringBuffer();
}",0.9759825327510916
75000,"/** 
 * compare data set design
 * @param dataSetDesign
 * @param dataSetDesign2
 * @return
 */
private boolean isEqualDataSetDesign(IBaseDataSetDesign dataSetDesign,IBaseDataSetDesign dataSetDesign2){
  if (dataSetDesign == dataSetDesign2)   return true;
  if (dataSetDesign == null || dataSetDesign2 == null)   return false;
  if (!isEqualString(dataSetDesign.getName(),dataSetDesign2.getName()))   return false;
  if (dataSetDesign.getRowFetchLimit() != dataSetDesign2.getRowFetchLimit()) {
    return false;
  }
  if (isEqualString(dataSetDesign.getBeforeOpenScript(),dataSetDesign2.getBeforeOpenScript()) == false || isEqualString(dataSetDesign.getAfterOpenScript(),dataSetDesign2.getAfterOpenScript()) == false || isEqualString(dataSetDesign.getBeforeCloseScript(),dataSetDesign2.getBeforeCloseScript()) == false || isEqualString(dataSetDesign.getAfterCloseScript(),dataSetDesign2.getAfterCloseScript()) == false)   return false;
  if (isEqualComputedColumns(dataSetDesign.getComputedColumns(),dataSetDesign2.getComputedColumns()) == false || isEqualFilters(dataSetDesign.getFilters(),dataSetDesign2.getFilters()) == false || isEqualParameters(dataSetDesign.getParameters(),dataSetDesign2.getParameters()) == false || isEqualResultHints(dataSetDesign.getResultSetHints(),dataSetDesign2.getResultSetHints()) == false)   return false;
  if (dataSetDesign instanceof IOdaDataSetDesign && dataSetDesign2 instanceof IOdaDataSetDesign) {
    IOdaDataSetDesign dataSet=(IOdaDataSetDesign)dataSetDesign;
    IOdaDataSetDesign dataSet2=(IOdaDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getQueryText(),dataSet2.getQueryText()) == false || isEqualString(dataSet.getExtensionID(),dataSet2.getExtensionID()) == false || isEqualString(dataSet.getPrimaryResultSetName(),dataSet2.getPrimaryResultSetName()) == false || isEqualProps(dataSet.getPublicProperties(),dataSet2.getPublicProperties()) == false || isEqualProps(dataSet.getPrivateProperties(),dataSet2.getPrivateProperties()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IScriptDataSetDesign && dataSetDesign2 instanceof IScriptDataSetDesign) {
    IScriptDataSetDesign dataSet=(IScriptDataSetDesign)dataSetDesign;
    IScriptDataSetDesign dataSet2=(IScriptDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getOpenScript(),dataSet2.getOpenScript()) == false || isEqualString(dataSet.getFetchScript(),dataSet2.getFetchScript()) == false || isEqualString(dataSet.getCloseScript(),dataSet2.getCloseScript()) == false || isEqualString(dataSet.getDescribeScript(),dataSet2.getDescribeScript()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IJointDataSetDesign && dataSetDesign2 instanceof IJointDataSetDesign) {
    IJointDataSetDesign design1=(IJointDataSetDesign)dataSetDesign;
    IJointDataSetDesign design2=(IJointDataSetDesign)dataSetDesign2;
    if (isEqualString(design1.getLeftDataSetDesignName(),design2.getLeftDataSetDesignName()) == false || isEqualString(design1.getRightDataSetDesignName(),design2.getRightDataSetDesignName()) == false || design1.getJoinType() != design2.getJoinType() || isEqualJointCondition(design1.getJoinConditions(),design2.getJoinConditions()) == false)     return false;
  }
 else {
    return false;
  }
  return true;
}","/** 
 * compare data set design
 * @param dataSetDesign
 * @param dataSetDesign2
 * @return
 */
private boolean isEqualDataSetDesign(IBaseDataSetDesign dataSetDesign,IBaseDataSetDesign dataSetDesign2){
  if (dataSetDesign == dataSetDesign2)   return true;
  if (dataSetDesign == null || dataSetDesign2 == null)   return false;
  if (!isEqualString(dataSetDesign.getName(),dataSetDesign2.getName()))   return false;
  if (dataSetDesign.getRowFetchLimit() != dataSetDesign2.getRowFetchLimit()) {
    return false;
  }
  if (isEqualString(dataSetDesign.getBeforeOpenScript(),dataSetDesign2.getBeforeOpenScript()) == false || isEqualString(dataSetDesign.getAfterOpenScript(),dataSetDesign2.getAfterOpenScript()) == false || isEqualString(dataSetDesign.getBeforeCloseScript(),dataSetDesign2.getBeforeCloseScript()) == false || isEqualString(dataSetDesign.getAfterCloseScript(),dataSetDesign2.getAfterCloseScript()) == false)   return false;
  if (isEqualComputedColumns(dataSetDesign.getComputedColumns(),dataSetDesign2.getComputedColumns()) == false || isEqualFilters(dataSetDesign.getFilters(),dataSetDesign2.getFilters()) == false || isEqualParameters(dataSetDesign.getParameters(),dataSetDesign2.getParameters()) == false || isEqualResultHints(dataSetDesign.getResultSetHints(),dataSetDesign2.getResultSetHints()) == false)   return false;
  if (dataSetDesign.getCacheRowCount() != dataSetDesign2.getCacheRowCount())   return false;
  if (dataSetDesign instanceof IOdaDataSetDesign && dataSetDesign2 instanceof IOdaDataSetDesign) {
    IOdaDataSetDesign dataSet=(IOdaDataSetDesign)dataSetDesign;
    IOdaDataSetDesign dataSet2=(IOdaDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getQueryText(),dataSet2.getQueryText()) == false || isEqualString(dataSet.getExtensionID(),dataSet2.getExtensionID()) == false || isEqualString(dataSet.getPrimaryResultSetName(),dataSet2.getPrimaryResultSetName()) == false || isEqualProps(dataSet.getPublicProperties(),dataSet2.getPublicProperties()) == false || isEqualProps(dataSet.getPrivateProperties(),dataSet2.getPrivateProperties()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IScriptDataSetDesign && dataSetDesign2 instanceof IScriptDataSetDesign) {
    IScriptDataSetDesign dataSet=(IScriptDataSetDesign)dataSetDesign;
    IScriptDataSetDesign dataSet2=(IScriptDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getOpenScript(),dataSet2.getOpenScript()) == false || isEqualString(dataSet.getFetchScript(),dataSet2.getFetchScript()) == false || isEqualString(dataSet.getCloseScript(),dataSet2.getCloseScript()) == false || isEqualString(dataSet.getDescribeScript(),dataSet2.getDescribeScript()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IJointDataSetDesign && dataSetDesign2 instanceof IJointDataSetDesign) {
    IJointDataSetDesign design1=(IJointDataSetDesign)dataSetDesign;
    IJointDataSetDesign design2=(IJointDataSetDesign)dataSetDesign2;
    if (isEqualString(design1.getLeftDataSetDesignName(),design2.getLeftDataSetDesignName()) == false || isEqualString(design1.getRightDataSetDesignName(),design2.getRightDataSetDesignName()) == false || design1.getJoinType() != design2.getJoinType() || isEqualJointCondition(design1.getJoinConditions(),design2.getJoinConditions()) == false)     return false;
  }
 else {
    return false;
  }
  return true;
}",0.9859960849269688
